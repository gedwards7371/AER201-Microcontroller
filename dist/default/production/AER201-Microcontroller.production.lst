

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Feb 25 15:03:38 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    94                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    95                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    96  0000                     
    97                           ; Version 1.40
    98                           ; Generated 01/12/2016 GMT
    99                           ; 
   100                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   101                           ; All rights reserved.
   102                           ; 
   103                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   104                           ; 
   105                           ; Redistribution and use in source and binary forms, with or without modification, are
   106                           ; permitted provided that the following conditions are met:
   107                           ; 
   108                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   109                           ;        conditions and the following disclaimer.
   110                           ; 
   111                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   112                           ;        of conditions and the following disclaimer in the documentation and/or other
   113                           ;        materials provided with the distribution.
   114                           ; 
   115                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   116                           ;        software without specific prior written permission.
   117                           ; 
   118                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   119                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   120                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   121                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   122                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   123                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   124                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   125                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   126                           ; 
   127                           ; 
   128                           ; Code-generator required, PIC18F4620 Definitions
   129                           ; 
   130                           ; SFR Addresses
   131  0000                     
   132                           	psect	idataCOMRAM
   133  002C16                     __pidataCOMRAM:
   134                           	opt stack 0
   135                           
   136                           ;initializer for _THIR
   137  002C16  00FF               	dw	255
   138                           
   139                           	psect	idataBANK0
   140  002C0C                     __pidataBANK0:
   141                           	opt stack 0
   142                           
   143                           ;initializer for _THMAG
   144  002C0C  00FF               	dw	255
   145                           
   146                           ;initializer for _f_ID_receive
   147  002C0E  0001               	dw	1
   148                           
   149                           ;initializer for _first
   150  002C10  0001               	dw	1
   151                           
   152                           	psect	idataBANK1
   153  002C12                     __pidataBANK1:
   154                           	opt stack 0
   155                           
   156                           ;initializer for printRTC@F3192
   157  002C12  4D                 	db	77
   158  002C13  4D                 	db	77
   159  002C14  4D                 	db	77
   160  002C15  00                 	db	0
   161                           
   162                           	psect	mediumconst
   163  00FDB4                     __pmediumconst:
   164                           	opt stack 0
   165  00FDB4  00                 	db	0
   166  00FDB5                     _keys:
   167                           	opt stack 0
   168  00FDB5  31                 	db	49
   169  00FDB6  32                 	db	50
   170  00FDB7  33                 	db	51
   171  00FDB8  41                 	db	65
   172  00FDB9  34                 	db	52
   173  00FDBA  35                 	db	53
   174  00FDBB  36                 	db	54
   175  00FDBC  42                 	db	66
   176  00FDBD  37                 	db	55
   177  00FDBE  38                 	db	56
   178  00FDBF  39                 	db	57
   179  00FDC0  43                 	db	67
   180  00FDC1  2A                 	db	42
   181  00FDC2  30                 	db	48
   182  00FDC3  23                 	db	35
   183  00FDC4  44                 	db	68
   184  00FDC5  00                 	db	0
   185  00FDC6                     __end_of_keys:
   186                           	opt stack 0
   187  00FDC6                     _dpowers:
   188                           	opt stack 0
   189  00FDC6  0001               	dw	1
   190  00FDC8  000A               	dw	10
   191  00FDCA  0064               	dw	100
   192  00FDCC  03E8               	dw	1000
   193  00FDCE  2710               	dw	10000
   194  00FDD0                     __end_of_dpowers:
   195                           	opt stack 0
   196  0000                     _ADCON0	set	4034
   197  0000                     _ADCON0bits	set	4034
   198  0000                     _ADCON1	set	4033
   199  0000                     _ADRESH	set	4036
   200  0000                     _ADRESL	set	4035
   201  0000                     _CMCONbits	set	4020
   202  0000                     _CVRCON	set	4021
   203  0000                     _INTCONbits	set	4082
   204  0000                     _LATA	set	3977
   205  0000                     _LATAbits	set	3977
   206  0000                     _LATB	set	3978
   207  0000                     _LATC	set	3979
   208  0000                     _LATCbits	set	3979
   209  0000                     _LATD	set	3980
   210  0000                     _LATDbits	set	3980
   211  0000                     _LATE	set	3981
   212  0000                     _OSCCON	set	4051
   213  0000                     _OSCTUNEbits	set	3995
   214  0000                     _PORTAbits	set	3968
   215  0000                     _PORTB	set	3969
   216  0000                     _PORTBbits	set	3969
   217  0000                     _SSPADD	set	4040
   218  0000                     _SSPBUF	set	4041
   219  0000                     _SSPCON1	set	4038
   220  0000                     _SSPCON2	set	4037
   221  0000                     _SSPSTAT	set	4039
   222  0000                     _T0CON	set	4053
   223  0000                     _T1CON	set	4045
   224  0000                     _T3CON	set	4017
   225  0000                     _TMR0H	set	4055
   226  0000                     _TMR0L	set	4054
   227  0000                     _TMR1H	set	4047
   228  0000                     _TMR1L	set	4046
   229  0000                     _TMR3H	set	4019
   230  0000                     _TMR3L	set	4018
   231  0000                     _TRISA	set	3986
   232  0000                     _TRISB	set	3987
   233  0000                     _TRISC	set	3988
   234  0000                     _TRISD	set	3989
   235  0000                     _TRISE	set	3990
   236  0000                     _ACKDT	set	32301
   237  0000                     _ACKEN	set	32300
   238  0000                     _ADFM	set	32263
   239  0000                     _ADIE	set	31982
   240  0000                     _ADON	set	32272
   241  0000                     _INT1IE	set	32643
   242  0000                     _INT1IF	set	32640
   243  0000                     _PEIE	set	32662
   244  0000                     _PEN	set	32298
   245  0000                     _RCEN	set	32299
   246  0000                     _RSEN	set	32297
   247  0000                     _SEN	set	32296
   248  0000                     _TMR0IE	set	32661
   249  0000                     _TMR0IF	set	32658
   250  0000                     _TMR0ON	set	32431
   251  0000                     _TMR1IE	set	31976
   252  0000                     _TMR1IF	set	31984
   253  0000                     _TMR1ON	set	32360
   254  0000                     _TMR2IE	set	31977
   255  0000                     _TMR3IE	set	32001
   256  0000                     _TMR3IF	set	32009
   257  0000                     _TMR3ON	set	32136
   258  0000                     _TRISC3	set	31907
   259  0000                     _TRISC4	set	31908
   260  0000                     _VCFG0	set	32268
   261  0000                     _VCFG1	set	32269
   262  0000                     _nRBPU	set	32655
   263  00FDD0                     STR_48:
   264  00FDD0  25                 	db	37
   265  00FDD1  30                 	db	48	;'0'
   266  00FDD2  32                 	db	50	;'2'
   267  00FDD3  64                 	db	100	;'d'
   268  00FDD4  25                 	db	37
   269  00FDD5  73                 	db	115	;'s'
   270  00FDD6  20                 	db	32
   271  00FDD7  7C                 	db	124
   272  00FDD8  20                 	db	32
   273  00FDD9  25                 	db	37
   274  00FDDA  30                 	db	48	;'0'
   275  00FDDB  32                 	db	50	;'2'
   276  00FDDC  64                 	db	100	;'d'
   277  00FDDD  3A                 	db	58	;':'
   278  00FDDE  25                 	db	37
   279  00FDDF  30                 	db	48	;'0'
   280  00FDE0  32                 	db	50	;'2'
   281  00FDE1  64                 	db	100	;'d'
   282  00FDE2  3A                 	db	58	;':'
   283  00FDE3  25                 	db	37
   284  00FDE4  30                 	db	48	;'0'
   285  00FDE5  32                 	db	50	;'2'
   286  00FDE6  64                 	db	100	;'d'
   287  00FDE7  00                 	db	0
   288  00FDE8                     STR_2:
   289  00FDE8  54                 	db	84	;'T'
   290  00FDE9  69                 	db	105	;'i'
   291  00FDEA  6D                 	db	109	;'m'
   292  00FDEB  65                 	db	101	;'e'
   293  00FDEC  3A                 	db	58	;':'
   294  00FDED  20                 	db	32
   295  00FDEE  25                 	db	37
   296  00FDEF  30                 	db	48	;'0'
   297  00FDF0  32                 	db	50	;'2'
   298  00FDF1  64                 	db	100	;'d'
   299  00FDF2  3A                 	db	58	;':'
   300  00FDF3  25                 	db	37
   301  00FDF4  30                 	db	48	;'0'
   302  00FDF5  32                 	db	50	;'2'
   303  00FDF6  64                 	db	100	;'d'
   304  00FDF7  3A                 	db	58	;':'
   305  00FDF8  25                 	db	37
   306  00FDF9  30                 	db	48	;'0'
   307  00FDFA  32                 	db	50	;'2'
   308  00FDFB  64                 	db	100	;'d'
   309  00FDFC  00                 	db	0
   310  00FDFD                     STR_3:
   311  00FDFD  2D                 	db	45
   312  00FDFE  2D                 	db	45
   313  00FDFF  20                 	db	32
   314  00FE00  4C                 	db	76	;'L'
   315  00FE01  6F                 	db	111	;'o'
   316  00FE02  67                 	db	103	;'g'
   317  00FE03  20                 	db	32
   318  00FE04  25                 	db	37
   319  00FE05  32                 	db	50	;'2'
   320  00FE06  64                 	db	100	;'d'
   321  00FE07  20                 	db	32
   322  00FE08  68                 	db	104	;'h'
   323  00FE09  65                 	db	101	;'e'
   324  00FE0A  72                 	db	114	;'r'
   325  00FE0B  65                 	db	101	;'e'
   326  00FE0C  2D                 	db	45
   327  00FE0D  2D                 	db	45
   328  00FE0E  00                 	db	0
   329  00FE0F                     STR_8:
   330  00FE0F  25                 	db	37
   331  00FE10  64                 	db	100	;'d'
   332  00FE11  20                 	db	32
   333  00FE12  6D                 	db	109	;'m'
   334  00FE13  69                 	db	105	;'i'
   335  00FE14  6E                 	db	110	;'n'
   336  00FE15  28                 	db	40
   337  00FE16  73                 	db	115	;'s'
   338  00FE17  29                 	db	41
   339  00FE18  20                 	db	32
   340  00FE19  25                 	db	37
   341  00FE1A  64                 	db	100	;'d'
   342  00FE1B  20                 	db	32
   343  00FE1C  73                 	db	115	;'s'
   344  00FE1D  65                 	db	101	;'e'
   345  00FE1E  63                 	db	99	;'c'
   346  00FE1F  73                 	db	115	;'s'
   347  00FE20  00                 	db	0
   348  00FE21                     STR_26:
   349  00FE21  4C                 	db	76	;'L'
   350  00FE22  4F                 	db	79	;'O'
   351  00FE23  47                 	db	71	;'G'
   352  00FE24  20                 	db	32
   353  00FE25  31                 	db	49	;'1'
   354  00FE26  20                 	db	32
   355  00FE27  20                 	db	32
   356  00FE28  20                 	db	32
   357  00FE29  20                 	db	32
   358  00FE2A  20                 	db	32
   359  00FE2B  20                 	db	32
   360  00FE2C  20                 	db	32
   361  00FE2D  20                 	db	32
   362  00FE2E  20                 	db	32
   363  00FE2F  20                 	db	32
   364  00FE30  20                 	db	32
   365  00FE31  00                 	db	0
   366  00FE32                     STR_25:
   367  00FE32  4C                 	db	76	;'L'
   368  00FE33  4F                 	db	79	;'O'
   369  00FE34  47                 	db	71	;'G'
   370  00FE35  20                 	db	32
   371  00FE36  32                 	db	50	;'2'
   372  00FE37  20                 	db	32
   373  00FE38  20                 	db	32
   374  00FE39  20                 	db	32
   375  00FE3A  20                 	db	32
   376  00FE3B  20                 	db	32
   377  00FE3C  20                 	db	32
   378  00FE3D  20                 	db	32
   379  00FE3E  20                 	db	32
   380  00FE3F  20                 	db	32
   381  00FE40  20                 	db	32
   382  00FE41  20                 	db	32
   383  00FE42  00                 	db	0
   384  00FE43                     STR_29:
   385  00FE43  4C                 	db	76	;'L'
   386  00FE44  4F                 	db	79	;'O'
   387  00FE45  47                 	db	71	;'G'
   388  00FE46  20                 	db	32
   389  00FE47  33                 	db	51	;'3'
   390  00FE48  20                 	db	32
   391  00FE49  20                 	db	32
   392  00FE4A  20                 	db	32
   393  00FE4B  20                 	db	32
   394  00FE4C  20                 	db	32
   395  00FE4D  20                 	db	32
   396  00FE4E  20                 	db	32
   397  00FE4F  20                 	db	32
   398  00FE50  20                 	db	32
   399  00FE51  20                 	db	32
   400  00FE52  20                 	db	32
   401  00FE53  00                 	db	0
   402  00FE54                     STR_33:
   403  00FE54  4C                 	db	76	;'L'
   404  00FE55  4F                 	db	79	;'O'
   405  00FE56  47                 	db	71	;'G'
   406  00FE57  20                 	db	32
   407  00FE58  34                 	db	52	;'4'
   408  00FE59  20                 	db	32
   409  00FE5A  20                 	db	32
   410  00FE5B  20                 	db	32
   411  00FE5C  20                 	db	32
   412  00FE5D  20                 	db	32
   413  00FE5E  20                 	db	32
   414  00FE5F  20                 	db	32
   415  00FE60  20                 	db	32
   416  00FE61  20                 	db	32
   417  00FE62  20                 	db	32
   418  00FE63  20                 	db	32
   419  00FE64  00                 	db	0
   420  00FE65                     STR_21:
   421  00FE65  33                 	db	51	;'3'
   422  00FE66  2E                 	db	46
   423  00FE67  20                 	db	32
   424  00FE68  4C                 	db	76	;'L'
   425  00FE69  4F                 	db	79	;'O'
   426  00FE6A  47                 	db	71	;'G'
   427  00FE6B  53                 	db	83	;'S'
   428  00FE6C  20                 	db	32
   429  00FE6D  20                 	db	32
   430  00FE6E  20                 	db	32
   431  00FE6F  20                 	db	32
   432  00FE70  20                 	db	32
   433  00FE71  20                 	db	32
   434  00FE72  20                 	db	32
   435  00FE73  20                 	db	32
   436  00FE74  20                 	db	32
   437  00FE75  00                 	db	0
   438  00FE76                     STR_17:
   439  00FE76  32                 	db	50	;'2'
   440  00FE77  2E                 	db	46
   441  00FE78  20                 	db	32
   442  00FE79  53                 	db	83	;'S'
   443  00FE7A  4F                 	db	79	;'O'
   444  00FE7B  52                 	db	82	;'R'
   445  00FE7C  54                 	db	84	;'T'
   446  00FE7D  20                 	db	32
   447  00FE7E  20                 	db	32
   448  00FE7F  20                 	db	32
   449  00FE80  20                 	db	32
   450  00FE81  20                 	db	32
   451  00FE82  20                 	db	32
   452  00FE83  20                 	db	32
   453  00FE84  20                 	db	32
   454  00FE85  20                 	db	32
   455  00FE86  00                 	db	0
   456  00FE87                     STR_18:
   457  00FE87  31                 	db	49	;'1'
   458  00FE88  2E                 	db	46
   459  00FE89  20                 	db	32
   460  00FE8A  44                 	db	68	;'D'
   461  00FE8B  41                 	db	65	;'A'
   462  00FE8C  54                 	db	84	;'T'
   463  00FE8D  45                 	db	69	;'E'
   464  00FE8E  2F                 	db	47
   465  00FE8F  54                 	db	84	;'T'
   466  00FE90  49                 	db	73	;'I'
   467  00FE91  4D                 	db	77	;'M'
   468  00FE92  45                 	db	69	;'E'
   469  00FE93  20                 	db	32
   470  00FE94  20                 	db	32
   471  00FE95  20                 	db	32
   472  00FE96  20                 	db	32
   473  00FE97  00                 	db	0
   474  00FE98                     STR_9:
   475  00FE98  20                 	db	32
   476  00FE99  2D                 	db	45
   477  00FE9A  2D                 	db	45
   478  00FE9B  20                 	db	32
   479  00FE9C  50                 	db	80	;'P'
   480  00FE9D  6F                 	db	111	;'o'
   481  00FE9E  70                 	db	112	;'p'
   482  00FE9F  20                 	db	32
   483  00FEA0  20                 	db	32
   484  00FEA1  63                 	db	99	;'c'
   485  00FEA2  61                 	db	97	;'a'
   486  00FEA3  6E                 	db	110	;'n'
   487  00FEA4  20                 	db	32
   488  00FEA5  2D                 	db	45
   489  00FEA6  2D                 	db	45
   490  00FEA7  20                 	db	32
   491  00FEA8  00                 	db	0
   492  00FEA9                     STR_11:
   493  00FEA9  20                 	db	32
   494  00FEAA  2D                 	db	45
   495  00FEAB  2D                 	db	45
   496  00FEAC  20                 	db	32
   497  00FEAD  53                 	db	83	;'S'
   498  00FEAE  6F                 	db	111	;'o'
   499  00FEAF  75                 	db	117	;'u'
   500  00FEB0  70                 	db	112	;'p'
   501  00FEB1  20                 	db	32
   502  00FEB2  63                 	db	99	;'c'
   503  00FEB3  61                 	db	97	;'a'
   504  00FEB4  6E                 	db	110	;'n'
   505  00FEB5  20                 	db	32
   506  00FEB6  2D                 	db	45
   507  00FEB7  2D                 	db	45
   508  00FEB8  20                 	db	32
   509  00FEB9  00                 	db	0
   510  00FEBA                     STR_1:
   511  00FEBA  21                 	db	33
   512  00FEBB  53                 	db	83	;'S'
   513  00FEBC  4F                 	db	79	;'O'
   514  00FEBD  52                 	db	82	;'R'
   515  00FEBE  54                 	db	84	;'T'
   516  00FEBF  20                 	db	32
   517  00FEC0  43                 	db	67	;'C'
   518  00FEC1  4F                 	db	79	;'O'
   519  00FEC2  4E                 	db	78	;'N'
   520  00FEC3  43                 	db	67	;'C'
   521  00FEC4  4C                 	db	76	;'L'
   522  00FEC5  55                 	db	85	;'U'
   523  00FEC6  44                 	db	68	;'D'
   524  00FEC7  45                 	db	69	;'E'
   525  00FEC8  44                 	db	68	;'D'
   526  00FEC9  21                 	db	33
   527  00FECA  00                 	db	0
   528  00FECB                     STR_13:
   529  00FECB  2D                 	db	45
   530  00FECC  2D                 	db	45
   531  00FECD  20                 	db	32
   532  00FECE  54                 	db	84	;'T'
   533  00FECF  6F                 	db	111	;'o'
   534  00FED0  74                 	db	116	;'t'
   535  00FED1  61                 	db	97	;'a'
   536  00FED2  6C                 	db	108	;'l'
   537  00FED3  20                 	db	32
   538  00FED4  63                 	db	99	;'c'
   539  00FED5  61                 	db	97	;'a'
   540  00FED6  6E                 	db	110	;'n'
   541  00FED7  73                 	db	115	;'s'
   542  00FED8  20                 	db	32
   543  00FED9  2D                 	db	45
   544  00FEDA  2D                 	db	45
   545  00FEDB  00                 	db	0
   546  00FEDC                     STR_10:
   547  00FEDC  4E                 	db	78	;'N'
   548  00FEDD  6F                 	db	111	;'o'
   549  00FEDE  20                 	db	32
   550  00FEDF  74                 	db	116	;'t'
   551  00FEE0  61                 	db	97	;'a'
   552  00FEE1  62                 	db	98	;'b'
   553  00FEE2  3A                 	db	58	;':'
   554  00FEE3  20                 	db	32
   555  00FEE4  39                 	db	57	;'9'
   556  00FEE5  7C                 	db	124
   557  00FEE6  54                 	db	84	;'T'
   558  00FEE7  61                 	db	97	;'a'
   559  00FEE8  62                 	db	98	;'b'
   560  00FEE9  3A                 	db	58	;':'
   561  00FEEA  20                 	db	32
   562  00FEEB  31                 	db	49	;'1'
   563  00FEEC  00                 	db	0
   564  00FEED                     STR_12:
   565  00FEED  4E                 	db	78	;'N'
   566  00FEEE  6F                 	db	111	;'o'
   567  00FEEF  20                 	db	32
   568  00FEF0  6C                 	db	108	;'l'
   569  00FEF1  62                 	db	98	;'b'
   570  00FEF2  6C                 	db	108	;'l'
   571  00FEF3  3A                 	db	58	;':'
   572  00FEF4  20                 	db	32
   573  00FEF5  31                 	db	49	;'1'
   574  00FEF6  7C                 	db	124
   575  00FEF7  6C                 	db	108	;'l'
   576  00FEF8  62                 	db	98	;'b'
   577  00FEF9  6C                 	db	108	;'l'
   578  00FEFA  3A                 	db	58	;':'
   579  00FEFB  20                 	db	32
   580  00FEFC  31                 	db	49	;'1'
   581  00FEFD  00                 	db	0
   582  00FEFE                     STR_6:
   583  00FEFE  30                 	db	48	;'0'
   584  00FEFF  36                 	db	54	;'6'
   585  00FF00  46                 	db	70	;'F'
   586  00FF01  65                 	db	101	;'e'
   587  00FF02  62                 	db	98	;'b'
   588  00FF03  20                 	db	32
   589  00FF04  7C                 	db	124
   590  00FF05  20                 	db	32
   591  00FF06  30                 	db	48	;'0'
   592  00FF07  31                 	db	49	;'1'
   593  00FF08  3A                 	db	58	;':'
   594  00FF09  30                 	db	48	;'0'
   595  00FF0A  38                 	db	56	;'8'
   596  00FF0B  3A                 	db	58	;':'
   597  00FF0C  35                 	db	53	;'5'
   598  00FF0D  36                 	db	54	;'6'
   599  00FF0E  00                 	db	0
   600  00FF0F                     STR_24:
   601  00FF0F  4C                 	db	76	;'L'
   602  00FF10  4F                 	db	79	;'O'
   603  00FF11  47                 	db	71	;'G'
   604  00FF12  20                 	db	32
   605  00FF13  31                 	db	49	;'1'
   606  00FF14  20                 	db	32
   607  00FF15  20                 	db	32
   608  00FF16  20                 	db	32
   609  00FF17  20                 	db	32
   610  00FF18  20                 	db	32
   611  00FF19  20                 	db	32
   612  00FF1A  20                 	db	32
   613  00FF1B  20                 	db	32
   614  00FF1C  20                 	db	32
   615  00FF1D  20                 	db	32
   616  00FF1E  3C                 	db	60	;'<'
   617  00FF1F  00                 	db	0
   618  00FF20                     STR_27:
   619  00FF20  4C                 	db	76	;'L'
   620  00FF21  4F                 	db	79	;'O'
   621  00FF22  47                 	db	71	;'G'
   622  00FF23  20                 	db	32
   623  00FF24  32                 	db	50	;'2'
   624  00FF25  20                 	db	32
   625  00FF26  20                 	db	32
   626  00FF27  20                 	db	32
   627  00FF28  20                 	db	32
   628  00FF29  20                 	db	32
   629  00FF2A  20                 	db	32
   630  00FF2B  20                 	db	32
   631  00FF2C  20                 	db	32
   632  00FF2D  20                 	db	32
   633  00FF2E  20                 	db	32
   634  00FF2F  3C                 	db	60	;'<'
   635  00FF30  00                 	db	0
   636  00FF31                     STR_31:
   637  00FF31  4C                 	db	76	;'L'
   638  00FF32  4F                 	db	79	;'O'
   639  00FF33  47                 	db	71	;'G'
   640  00FF34  20                 	db	32
   641  00FF35  33                 	db	51	;'3'
   642  00FF36  20                 	db	32
   643  00FF37  20                 	db	32
   644  00FF38  20                 	db	32
   645  00FF39  20                 	db	32
   646  00FF3A  20                 	db	32
   647  00FF3B  20                 	db	32
   648  00FF3C  20                 	db	32
   649  00FF3D  20                 	db	32
   650  00FF3E  20                 	db	32
   651  00FF3F  20                 	db	32
   652  00FF40  3C                 	db	60	;'<'
   653  00FF41  00                 	db	0
   654  00FF42                     STR_35:
   655  00FF42  4C                 	db	76	;'L'
   656  00FF43  4F                 	db	79	;'O'
   657  00FF44  47                 	db	71	;'G'
   658  00FF45  20                 	db	32
   659  00FF46  34                 	db	52	;'4'
   660  00FF47  20                 	db	32
   661  00FF48  20                 	db	32
   662  00FF49  20                 	db	32
   663  00FF4A  20                 	db	32
   664  00FF4B  20                 	db	32
   665  00FF4C  20                 	db	32
   666  00FF4D  20                 	db	32
   667  00FF4E  20                 	db	32
   668  00FF4F  20                 	db	32
   669  00FF50  20                 	db	32
   670  00FF51  3C                 	db	60	;'<'
   671  00FF52  00                 	db	0
   672  00FF53                     STR_23:
   673  00FF53  33                 	db	51	;'3'
   674  00FF54  2E                 	db	46
   675  00FF55  20                 	db	32
   676  00FF56  4C                 	db	76	;'L'
   677  00FF57  4F                 	db	79	;'O'
   678  00FF58  47                 	db	71	;'G'
   679  00FF59  53                 	db	83	;'S'
   680  00FF5A  20                 	db	32
   681  00FF5B  20                 	db	32
   682  00FF5C  20                 	db	32
   683  00FF5D  20                 	db	32
   684  00FF5E  20                 	db	32
   685  00FF5F  20                 	db	32
   686  00FF60  20                 	db	32
   687  00FF61  20                 	db	32
   688  00FF62  3C                 	db	60	;'<'
   689  00FF63  00                 	db	0
   690  00FF64                     STR_19:
   691  00FF64  32                 	db	50	;'2'
   692  00FF65  2E                 	db	46
   693  00FF66  20                 	db	32
   694  00FF67  53                 	db	83	;'S'
   695  00FF68  4F                 	db	79	;'O'
   696  00FF69  52                 	db	82	;'R'
   697  00FF6A  54                 	db	84	;'T'
   698  00FF6B  20                 	db	32
   699  00FF6C  20                 	db	32
   700  00FF6D  20                 	db	32
   701  00FF6E  20                 	db	32
   702  00FF6F  20                 	db	32
   703  00FF70  20                 	db	32
   704  00FF71  20                 	db	32
   705  00FF72  20                 	db	32
   706  00FF73  3C                 	db	60	;'<'
   707  00FF74  00                 	db	0
   708  00FF75                     STR_16:
   709  00FF75  31                 	db	49	;'1'
   710  00FF76  2E                 	db	46
   711  00FF77  20                 	db	32
   712  00FF78  44                 	db	68	;'D'
   713  00FF79  41                 	db	65	;'A'
   714  00FF7A  54                 	db	84	;'T'
   715  00FF7B  45                 	db	69	;'E'
   716  00FF7C  2F                 	db	47
   717  00FF7D  54                 	db	84	;'T'
   718  00FF7E  49                 	db	73	;'I'
   719  00FF7F  4D                 	db	77	;'M'
   720  00FF80  45                 	db	69	;'E'
   721  00FF81  20                 	db	32
   722  00FF82  20                 	db	32
   723  00FF83  20                 	db	32
   724  00FF84  3C                 	db	60	;'<'
   725  00FF85  00                 	db	0
   726  00FF86                     STR_4:
   727  00FF86  50                 	db	80	;'P'
   728  00FF87  61                 	db	97	;'a'
   729  00FF88  75                 	db	117	;'u'
   730  00FF89  73                 	db	115	;'s'
   731  00FF8A  65                 	db	101	;'e'
   732  00FF8B  3A                 	db	58	;':'
   733  00FF8C  3C                 	db	60	;'<'
   734  00FF8D  20                 	db	32
   735  00FF8E  7C                 	db	124
   736  00FF8F  20                 	db	32
   737  00FF90  42                 	db	66	;'B'
   738  00FF91  61                 	db	97	;'a'
   739  00FF92  63                 	db	99	;'c'
   740  00FF93  6B                 	db	107	;'k'
   741  00FF94  3A                 	db	58	;':'
   742  00FF95  3E                 	db	62	;'>'
   743  00FF96  00                 	db	0
   744  00FF97                     STR_15:
   745  00FF97  50                 	db	80	;'P'
   746  00FF98  55                 	db	85	;'U'
   747  00FF99  53                 	db	83	;'S'
   748  00FF9A  48                 	db	72	;'H'
   749  00FF9B  20                 	db	32
   750  00FF9C  54                 	db	84	;'T'
   751  00FF9D  4F                 	db	79	;'O'
   752  00FF9E  20                 	db	32
   753  00FF9F  43                 	db	67	;'C'
   754  00FFA0  4F                 	db	79	;'O'
   755  00FFA1  4E                 	db	78	;'N'
   756  00FFA2  54                 	db	84	;'T'
   757  00FFA3  49                 	db	73	;'I'
   758  00FFA4  4E                 	db	78	;'N'
   759  00FFA5  55                 	db	85	;'U'
   760  00FFA6  45                 	db	69	;'E'
   761  00FFA7  00                 	db	0
   762  00FFA8                     STR_49:
   763  00FFA8  53                 	db	83	;'S'
   764  00FFA9  6F                 	db	111	;'o'
   765  00FFAA  72                 	db	114	;'r'
   766  00FFAB  74                 	db	116	;'t'
   767  00FFAC  69                 	db	105	;'i'
   768  00FFAD  6E                 	db	110	;'n'
   769  00FFAE  67                 	db	103	;'g'
   770  00FFAF  2E                 	db	46
   771  00FFB0  2E                 	db	46
   772  00FFB1  2E                 	db	46
   773  00FFB2  00                 	db	0
   774  00FFB3                     STR_7:
   775  00FFB3  44                 	db	68	;'D'
   776  00FFB4  75                 	db	117	;'u'
   777  00FFB5  72                 	db	114	;'r'
   778  00FFB6  61                 	db	97	;'a'
   779  00FFB7  74                 	db	116	;'t'
   780  00FFB8  69                 	db	105	;'i'
   781  00FFB9  6F                 	db	111	;'o'
   782  00FFBA  6E                 	db	110	;'n'
   783  00FFBB  3A                 	db	58	;':'
   784  00FFBC  00                 	db	0
   785  00FFBD                     STR_51:
   786  00FFBD  28                 	db	40
   787  00FFBE  6E                 	db	110	;'n'
   788  00FFBF  75                 	db	117	;'u'
   789  00FFC0  6C                 	db	108	;'l'
   790  00FFC1  6C                 	db	108	;'l'
   791  00FFC2  29                 	db	41
   792  00FFC3  00                 	db	0
   793  00FFC4                     STR_5:
   794  00FFC4  53                 	db	83	;'S'
   795  00FFC5  74                 	db	116	;'t'
   796  00FFC6  61                 	db	97	;'a'
   797  00FFC7  72                 	db	114	;'r'
   798  00FFC8  74                 	db	116	;'t'
   799  00FFC9  3A                 	db	58	;':'
   800  00FFCA  00                 	db	0
   801  00FFCB                     STR_37:
   802  00FFCB  46                 	db	70	;'F'
   803  00FFCC  65                 	db	101	;'e'
   804  00FFCD  62                 	db	98	;'b'
   805  00FFCE  00                 	db	0
   806  00FFCF                     STR_47:
   807  00FFCF  44                 	db	68	;'D'
   808  00FFD0  65                 	db	101	;'e'
   809  00FFD1  63                 	db	99	;'c'
   810  00FFD2  00                 	db	0
   811  00FFD3                     STR_43:
   812  00FFD3  41                 	db	65	;'A'
   813  00FFD4  75                 	db	117	;'u'
   814  00FFD5  67                 	db	103	;'g'
   815  00FFD6  00                 	db	0
   816  00FFD7                     STR_42:
   817  00FFD7  4A                 	db	74	;'J'
   818  00FFD8  75                 	db	117	;'u'
   819  00FFD9  6C                 	db	108	;'l'
   820  00FFDA  00                 	db	0
   821  00FFDB                     STR_36:
   822  00FFDB  4A                 	db	74	;'J'
   823  00FFDC  61                 	db	97	;'a'
   824  00FFDD  6E                 	db	110	;'n'
   825  00FFDE  00                 	db	0
   826  00FFDF                     STR_41:
   827  00FFDF  4A                 	db	74	;'J'
   828  00FFE0  75                 	db	117	;'u'
   829  00FFE1  6E                 	db	110	;'n'
   830  00FFE2  00                 	db	0
   831  00FFE3                     STR_44:
   832  00FFE3  53                 	db	83	;'S'
   833  00FFE4  65                 	db	101	;'e'
   834  00FFE5  70                 	db	112	;'p'
   835  00FFE6  00                 	db	0
   836  00FFE7                     STR_38:
   837  00FFE7  4D                 	db	77	;'M'
   838  00FFE8  61                 	db	97	;'a'
   839  00FFE9  72                 	db	114	;'r'
   840  00FFEA  00                 	db	0
   841  00FFEB                     STR_39:
   842  00FFEB  41                 	db	65	;'A'
   843  00FFEC  70                 	db	112	;'p'
   844  00FFED  72                 	db	114	;'r'
   845  00FFEE  00                 	db	0
   846  00FFEF                     STR_45:
   847  00FFEF  4F                 	db	79	;'O'
   848  00FFF0  63                 	db	99	;'c'
   849  00FFF1  74                 	db	116	;'t'
   850  00FFF2  00                 	db	0
   851  00FFF3                     STR_46:
   852  00FFF3  4E                 	db	78	;'N'
   853  00FFF4  6F                 	db	111	;'o'
   854  00FFF5  76                 	db	118	;'v'
   855  00FFF6  00                 	db	0
   856  00FFF7                     STR_40:
   857  00FFF7  4D                 	db	77	;'M'
   858  00FFF8  61                 	db	97	;'a'
   859  00FFF9  79                 	db	121	;'y'
   860  00FFFA  00                 	db	0
   861  00FFFB                     STR_14:
   862  00FFFB  31                 	db	49	;'1'
   863  00FFFC  32                 	db	50	;'2'
   864  00FFFD  00                 	db	0
   865  0000                     
   866                           ; #config settings
   867  00FFFE  00                 	db	0	; dummy byte at the end
   868  0000                     
   869                           	psect	cinit
   870  0020AA                     __pcinit:
   871                           	opt stack 0
   872  0020AA                     start_initialization:
   873                           	opt stack 0
   874  0020AA                     __initialization:
   875                           	opt stack 0
   876                           
   877                           ; Initialize objects allocated to BANK1 (4 bytes)
   878                           ; load TBLPTR registers with __pidataBANK1
   879  0020AA  0E12               	movlw	low __pidataBANK1
   880  0020AC  6EF6               	movwf	tblptrl,c
   881  0020AE  0E2C               	movlw	high __pidataBANK1
   882  0020B0  6EF7               	movwf	tblptrh,c
   883  0020B2  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   884  0020B4  6EF8               	movwf	tblptru,c
   885  0020B6  EE01  F00E         	lfsr	0,__pdataBANK1
   886  0020BA  EE10 F004          	lfsr	1,4
   887  0020BE                     copy_data0:
   888  0020BE  0009               	tblrd		*+
   889  0020C0  CFF5 FFEE          	movff	tablat,postinc0
   890  0020C4  50E5               	movf	postdec1,w,c
   891  0020C6  50E1               	movf	fsr1l,w,c
   892  0020C8  E1FA               	bnz	copy_data0
   893                           
   894                           ; Initialize objects allocated to BANK0 (6 bytes)
   895                           ; load TBLPTR registers with __pidataBANK0
   896  0020CA  0E0C               	movlw	low __pidataBANK0
   897  0020CC  6EF6               	movwf	tblptrl,c
   898  0020CE  0E2C               	movlw	high __pidataBANK0
   899  0020D0  6EF7               	movwf	tblptrh,c
   900  0020D2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   901  0020D4  6EF8               	movwf	tblptru,c
   902  0020D6  EE00  F0F8         	lfsr	0,__pdataBANK0
   903  0020DA  EE10 F006          	lfsr	1,6
   904  0020DE                     copy_data1:
   905  0020DE  0009               	tblrd		*+
   906  0020E0  CFF5 FFEE          	movff	tablat,postinc0
   907  0020E4  50E5               	movf	postdec1,w,c
   908  0020E6  50E1               	movf	fsr1l,w,c
   909  0020E8  E1FA               	bnz	copy_data1
   910                           
   911                           ; Initialize objects allocated to COMRAM (2 bytes)
   912                           ; load TBLPTR registers with __pidataCOMRAM
   913  0020EA  0E16               	movlw	low __pidataCOMRAM
   914  0020EC  6EF6               	movwf	tblptrl,c
   915  0020EE  0E2C               	movlw	high __pidataCOMRAM
   916  0020F0  6EF7               	movwf	tblptrh,c
   917  0020F2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   918  0020F4  6EF8               	movwf	tblptru,c
   919  0020F6  0009               	tblrd		*+	;fetch initializer
   920  0020F8  CFF5 F07A          	movff	tablat,__pdataCOMRAM
   921  0020FC  0009               	tblrd		*+	;fetch initializer
   922  0020FE  CFF5 F07B          	movff	tablat,__pdataCOMRAM+1
   923                           
   924                           ; Clear objects allocated to BANK1 (14 bytes)
   925  002102  EE01  F000         	lfsr	0,__pbssBANK1
   926  002106  0E0E               	movlw	14
   927  002108                     clear_0:
   928  002108  6AEE               	clrf	postinc0,c
   929  00210A  06E8               	decf	wreg,f,c
   930  00210C  E1FD               	bnz	clear_0
   931                           
   932                           ; Clear objects allocated to BANK0 (36 bytes)
   933  00210E  EE00  F0D4         	lfsr	0,__pbssBANK0
   934  002112  0E24               	movlw	36
   935  002114                     clear_1:
   936  002114  6AEE               	clrf	postinc0,c
   937  002116  06E8               	decf	wreg,f,c
   938  002118  E1FD               	bnz	clear_1
   939                           
   940                           ; Clear objects allocated to COMRAM (31 bytes)
   941  00211A  EE00  F05B         	lfsr	0,__pbssCOMRAM
   942  00211E  0E1F               	movlw	31
   943  002120                     clear_2:
   944  002120  6AEE               	clrf	postinc0,c
   945  002122  06E8               	decf	wreg,f,c
   946  002124  E1FD               	bnz	clear_2
   947  002126                     end_of_initialization:
   948                           	opt stack 0
   949  002126                     __end_of__initialization:
   950                           	opt stack 0
   951  002126  907C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   952  002128  927C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   953  00212A  0100               	movlb	0
   954  00212C  EF11  F010         	goto	_main	;jump to C main() function
   955                           tblptru	equ	0xFF8
   956                           tblptrh	equ	0xFF7
   957                           tblptrl	equ	0xFF6
   958                           tablat	equ	0xFF5
   959                           postinc0	equ	0xFEE
   960                           wreg	equ	0xFE8
   961                           postdec1	equ	0xFE5
   962                           fsr1l	equ	0xFE1
   963                           
   964                           	psect	bssCOMRAM
   965  00005B                     __pbssCOMRAM:
   966                           	opt stack 0
   967  00005B                     _IR_signal:
   968                           	opt stack 0
   969  00005B                     	ds	2
   970  00005D                     _TMR3CF:
   971                           	opt stack 0
   972  00005D                     	ds	2
   973  00005F                     _TMR3counter:
   974                           	opt stack 0
   975  00005F                     	ds	2
   976  000061                     _UIenabled:
   977                           	opt stack 0
   978  000061                     	ds	2
   979  000063                     _back:
   980                           	opt stack 0
   981  000063                     	ds	2
   982  000065                     _count_can_no_lab:
   983                           	opt stack 0
   984  000065                     	ds	2
   985  000067                     _count_can_w_lab:
   986                           	opt stack 0
   987  000067                     	ds	2
   988  000069                     _count_pop_no_tab:
   989                           	opt stack 0
   990  000069                     	ds	2
   991  00006B                     _count_pop_w_tab:
   992                           	opt stack 0
   993  00006B                     	ds	2
   994  00006D                     _down:
   995                           	opt stack 0
   996  00006D                     	ds	2
   997  00006F                     _enter:
   998                           	opt stack 0
   999  00006F                     	ds	2
  1000  000071                     _f_can_distributed:
  1001                           	opt stack 0
  1002  000071                     	ds	2
  1003  000073                     _firstboot:
  1004                           	opt stack 0
  1005  000073                     	ds	2
  1006  000075                     _up:
  1007                           	opt stack 0
  1008  000075                     	ds	2
  1009  000077                     _was_low:
  1010                           	opt stack 0
  1011  000077                     	ds	2
  1012  000079                     _input:
  1013                           	opt stack 0
  1014  000079                     	ds	1
  1015                           tblptru	equ	0xFF8
  1016                           tblptrh	equ	0xFF7
  1017                           tblptrl	equ	0xFF6
  1018                           tablat	equ	0xFF5
  1019                           postinc0	equ	0xFEE
  1020                           wreg	equ	0xFE8
  1021                           postdec1	equ	0xFE5
  1022                           fsr1l	equ	0xFE1
  1023                           
  1024                           	psect	dataCOMRAM
  1025  00007A                     __pdataCOMRAM:
  1026                           	opt stack 0
  1027  00007A                     _THIR:
  1028                           	opt stack 0
  1029  00007A                     	ds	2
  1030                           tblptru	equ	0xFF8
  1031                           tblptrh	equ	0xFF7
  1032                           tblptrl	equ	0xFF6
  1033                           tablat	equ	0xFF5
  1034                           postinc0	equ	0xFEE
  1035                           wreg	equ	0xFE8
  1036                           postdec1	equ	0xFE5
  1037                           fsr1l	equ	0xFE1
  1038                           
  1039                           	psect	bssBANK0
  1040  0000D4                     __pbssBANK0:
  1041                           	opt stack 0
  1042  0000D4                     _servoTimes:
  1043                           	opt stack 0
  1044  0000D4                     	ds	8
  1045  0000DC                     _time:
  1046                           	opt stack 0
  1047  0000DC                     	ds	7
  1048  0000E3                     _MAG_signal:
  1049                           	opt stack 0
  1050  0000E3                     	ds	2
  1051  0000E5                     _count_total:
  1052                           	opt stack 0
  1053  0000E5                     	ds	2
  1054  0000E7                     _cur_state:
  1055                           	opt stack 0
  1056  0000E7                     	ds	2
  1057  0000E9                     _f_can_coming_to_ID:
  1058                           	opt stack 0
  1059  0000E9                     	ds	2
  1060  0000EB                     _f_can_coming_to_distribution:
  1061                           	opt stack 0
  1062  0000EB                     	ds	2
  1063  0000ED                     _f_lastCan:
  1064                           	opt stack 0
  1065  0000ED                     	ds	2
  1066  0000EF                     _f_loadingNewCan:
  1067                           	opt stack 0
  1068  0000EF                     	ds	2
  1069  0000F1                     _log:
  1070                           	opt stack 0
  1071  0000F1                     	ds	2
  1072  0000F3                     _logstate:
  1073                           	opt stack 0
  1074  0000F3                     	ds	2
  1075  0000F5                     _total_time:
  1076                           	opt stack 0
  1077  0000F5                     	ds	2
  1078  0000F7                     _machine_state:
  1079                           	opt stack 0
  1080  0000F7                     	ds	1
  1081                           tblptru	equ	0xFF8
  1082                           tblptrh	equ	0xFF7
  1083                           tblptrl	equ	0xFF6
  1084                           tablat	equ	0xFF5
  1085                           postinc0	equ	0xFEE
  1086                           wreg	equ	0xFE8
  1087                           postdec1	equ	0xFE5
  1088                           fsr1l	equ	0xFE1
  1089                           
  1090                           	psect	dataBANK0
  1091  0000F8                     __pdataBANK0:
  1092                           	opt stack 0
  1093  0000F8                     _THMAG:
  1094                           	opt stack 0
  1095  0000F8                     	ds	2
  1096  0000FA                     _f_ID_receive:
  1097                           	opt stack 0
  1098  0000FA                     	ds	2
  1099  0000FC                     _first:
  1100                           	opt stack 0
  1101  0000FC                     	ds	2
  1102                           tblptru	equ	0xFF8
  1103                           tblptrh	equ	0xFF7
  1104                           tblptrl	equ	0xFF6
  1105                           tablat	equ	0xFF5
  1106                           postinc0	equ	0xFEE
  1107                           wreg	equ	0xFE8
  1108                           postdec1	equ	0xFE5
  1109                           fsr1l	equ	0xFE1
  1110                           
  1111                           	psect	bssBANK1
  1112  000100                     __pbssBANK1:
  1113                           	opt stack 0
  1114  000100                     _startTime:
  1115                           	opt stack 0
  1116  000100                     	ds	14
  1117                           tblptru	equ	0xFF8
  1118                           tblptrh	equ	0xFF7
  1119                           tblptrl	equ	0xFF6
  1120                           tablat	equ	0xFF5
  1121                           postinc0	equ	0xFEE
  1122                           wreg	equ	0xFE8
  1123                           postdec1	equ	0xFE5
  1124                           fsr1l	equ	0xFE1
  1125                           
  1126                           	psect	dataBANK1
  1127  00010E                     __pdataBANK1:
  1128                           	opt stack 0
  1129  00010E                     printRTC@F3192:
  1130                           	opt stack 0
  1131  00010E                     	ds	4
  1132                           tblptru	equ	0xFF8
  1133                           tblptrh	equ	0xFF7
  1134                           tblptrl	equ	0xFF6
  1135                           tablat	equ	0xFF5
  1136                           postinc0	equ	0xFEE
  1137                           wreg	equ	0xFE8
  1138                           postdec1	equ	0xFE5
  1139                           fsr1l	equ	0xFE1
  1140                           
  1141                           	psect	cstackBANK0
  1142  000080                     __pcstackBANK0:
  1143                           	opt stack 0
  1144  000080                     ??_isdigit:
  1145  000080                     ??_readADC:
  1146  000080                     ??_I2C_Master_Wait:
  1147  000080                     ?___wmul:
  1148                           	opt stack 0
  1149  000080                     ?___awmod:
  1150                           	opt stack 0
  1151  000080                     ?___lwdiv:
  1152                           	opt stack 0
  1153  000080                     ?___lldiv:
  1154                           	opt stack 0
  1155  000080                     lcdNibble@temp:
  1156                           	opt stack 0
  1157  000080                     initTime@m:
  1158                           	opt stack 0
  1159  000080                     updateServoPosition@time_us:
  1160                           	opt stack 0
  1161  000080                     ___wmul@multiplier:
  1162                           	opt stack 0
  1163  000080                     ___awmod@dividend:
  1164                           	opt stack 0
  1165  000080                     ___lwdiv@dividend:
  1166                           	opt stack 0
  1167  000080                     strcpy@to:
  1168                           	opt stack 0
  1169  000080                     ___lldiv@dividend:
  1170                           	opt stack 0
  1171                           
  1172                           ; 4 bytes @ 0x0
  1173  000080                     	ds	1
  1174  000081                     readADC@channel:
  1175                           	opt stack 0
  1176  000081                     I2C_Master_Read@a:
  1177                           	opt stack 0
  1178  000081                     lcdNibble@data:
  1179                           	opt stack 0
  1180  000081                     initTime@h:
  1181                           	opt stack 0
  1182  000081                     _isdigit$1652:
  1183                           	opt stack 0
  1184  000081                     I2C_Master_Write@d:
  1185                           	opt stack 0
  1186                           
  1187                           ; 2 bytes @ 0x1
  1188  000081                     	ds	1
  1189  000082                     ??_readMAG:
  1190  000082                     I2C_Master_Read@temp:
  1191                           	opt stack 0
  1192  000082                     lcdInst@data:
  1193                           	opt stack 0
  1194  000082                     putch@data:
  1195                           	opt stack 0
  1196  000082                     initTime@w:
  1197                           	opt stack 0
  1198  000082                     isdigit@c:
  1199                           	opt stack 0
  1200  000082                     updateServoPosition@timer:
  1201                           	opt stack 0
  1202  000082                     ___wmul@multiplicand:
  1203                           	opt stack 0
  1204  000082                     ___awmod@divisor:
  1205                           	opt stack 0
  1206  000082                     ___lwdiv@divisor:
  1207                           	opt stack 0
  1208  000082                     strcpy@from:
  1209                           	opt stack 0
  1210                           
  1211                           ; 2 bytes @ 0x2
  1212  000082                     	ds	1
  1213  000083                     ??_initLCD:
  1214  000083                     initTime@DD:
  1215                           	opt stack 0
  1216  000083                     getRTC@i:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0x3
  1220  000083                     	ds	1
  1221  000084                     ??_updateServoPosition:
  1222  000084                     initTime@MM:
  1223                           	opt stack 0
  1224  000084                     ___awmod@counter:
  1225                           	opt stack 0
  1226  000084                     readMAG@res:
  1227                           	opt stack 0
  1228  000084                     ___wmul@product:
  1229                           	opt stack 0
  1230  000084                     ___lwdiv@quotient:
  1231                           	opt stack 0
  1232  000084                     strcpy@cp:
  1233                           	opt stack 0
  1234  000084                     ___lldiv@divisor:
  1235                           	opt stack 0
  1236                           
  1237                           ; 4 bytes @ 0x4
  1238  000084                     	ds	1
  1239  000085                     ??_initSortTimer:
  1240  000085                     initTime@YY:
  1241                           	opt stack 0
  1242  000085                     ___awmod@sign:
  1243                           	opt stack 0
  1244                           
  1245                           ; 1 bytes @ 0x5
  1246  000085                     	ds	1
  1247  000086                     ??_ID:
  1248  000086                     ?___awdiv:
  1249                           	opt stack 0
  1250  000086                     initTime@s:
  1251                           	opt stack 0
  1252  000086                     ___lwdiv@counter:
  1253                           	opt stack 0
  1254  000086                     updateServoPosition@my_time:
  1255                           	opt stack 0
  1256  000086                     ___awdiv@dividend:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0x6
  1260  000086                     	ds	1
  1261  000087                     ?___lwmod:
  1262                           	opt stack 0
  1263  000087                     ___lwmod@dividend:
  1264                           	opt stack 0
  1265                           
  1266                           ; 2 bytes @ 0x7
  1267  000087                     	ds	1
  1268  000088                     ID@top_bottom_conductivity:
  1269                           	opt stack 0
  1270  000088                     initSortTimer@i:
  1271                           	opt stack 0
  1272  000088                     ___awdiv@divisor:
  1273                           	opt stack 0
  1274  000088                     ___lldiv@quotient:
  1275                           	opt stack 0
  1276                           
  1277                           ; 4 bytes @ 0x8
  1278  000088                     	ds	1
  1279  000089                     ___lwmod@divisor:
  1280                           	opt stack 0
  1281                           
  1282                           ; 2 bytes @ 0x9
  1283  000089                     	ds	1
  1284  00008A                     ??_Loading:
  1285  00008A                     ___awdiv@counter:
  1286                           	opt stack 0
  1287  00008A                     ID@side_conductivity:
  1288                           	opt stack 0
  1289                           
  1290                           ; 2 bytes @ 0xA
  1291  00008A                     	ds	1
  1292  00008B                     Loading@i:
  1293                           	opt stack 0
  1294  00008B                     ___awdiv@sign:
  1295                           	opt stack 0
  1296  00008B                     ___lwmod@counter:
  1297                           	opt stack 0
  1298                           
  1299                           ; 1 bytes @ 0xB
  1300  00008B                     	ds	1
  1301  00008C                     Loading@i_1260:
  1302                           	opt stack 0
  1303  00008C                     ___lldiv@counter:
  1304                           	opt stack 0
  1305  00008C                     ID@magnetic:
  1306                           	opt stack 0
  1307  00008C                     ___awdiv@quotient:
  1308                           	opt stack 0
  1309                           
  1310                           ; 2 bytes @ 0xC
  1311  00008C                     	ds	1
  1312  00008D                     Loading@i_1261:
  1313                           	opt stack 0
  1314  00008D                     I2C_Master_Init@c:
  1315                           	opt stack 0
  1316                           
  1317                           ; 4 bytes @ 0xD
  1318  00008D                     	ds	1
  1319  00008E                     ?_printf:
  1320                           	opt stack 0
  1321  00008E                     Loading@i_1262:
  1322                           	opt stack 0
  1323  00008E                     printf@f:
  1324                           	opt stack 0
  1325                           
  1326                           ; 2 bytes @ 0xE
  1327  00008E                     	ds	1
  1328  00008F                     Loading@i_1263:
  1329                           	opt stack 0
  1330                           
  1331                           ; 1 bytes @ 0xF
  1332  00008F                     	ds	1
  1333  000090                     Loading@i_1264:
  1334                           	opt stack 0
  1335                           
  1336                           ; 1 bytes @ 0x10
  1337  000090                     	ds	1
  1338  000091                     ??_I2C_Master_Init:
  1339  000091                     Loading@i_1265:
  1340                           	opt stack 0
  1341                           
  1342                           ; 1 bytes @ 0x11
  1343  000091                     	ds	1
  1344  000092                     Loading@i_1266:
  1345                           	opt stack 0
  1346                           
  1347                           ; 1 bytes @ 0x12
  1348  000092                     	ds	1
  1349  000093                     
  1350                           ; 1 bytes @ 0x13
  1351  000093                     	ds	2
  1352  000095                     ??_loadRTC:
  1353                           
  1354                           ; 1 bytes @ 0x15
  1355  000095                     	ds	1
  1356  000096                     loadRTC@i:
  1357                           	opt stack 0
  1358                           
  1359                           ; 2 bytes @ 0x16
  1360  000096                     	ds	4
  1361  00009A                     ??_printf:
  1362                           
  1363                           ; 1 bytes @ 0x1A
  1364  00009A                     	ds	4
  1365  00009E                     printf@prec:
  1366                           	opt stack 0
  1367                           
  1368                           ; 1 bytes @ 0x1E
  1369  00009E                     	ds	1
  1370  00009F                     printf@ap:
  1371                           	opt stack 0
  1372                           
  1373                           ; 2 bytes @ 0x1F
  1374  00009F                     	ds	2
  1375  0000A1                     printf@cp:
  1376                           	opt stack 0
  1377                           
  1378                           ; 2 bytes @ 0x21
  1379  0000A1                     	ds	2
  1380  0000A3                     printf@val:
  1381                           	opt stack 0
  1382                           
  1383                           ; 2 bytes @ 0x23
  1384  0000A3                     	ds	2
  1385  0000A5                     printf@len:
  1386                           	opt stack 0
  1387                           
  1388                           ; 2 bytes @ 0x25
  1389  0000A5                     	ds	2
  1390  0000A7                     printf@flag:
  1391                           	opt stack 0
  1392                           
  1393                           ; 1 bytes @ 0x27
  1394  0000A7                     	ds	1
  1395  0000A8                     printf@c:
  1396                           	opt stack 0
  1397                           
  1398                           ; 1 bytes @ 0x28
  1399  0000A8                     	ds	1
  1400  0000A9                     printf@width:
  1401                           	opt stack 0
  1402                           
  1403                           ; 2 bytes @ 0x29
  1404  0000A9                     	ds	2
  1405  0000AB                     ??_printRTC:
  1406                           
  1407                           ; 1 bytes @ 0x2B
  1408  0000AB                     	ds	3
  1409  0000AE                     printRTC@INT_time:
  1410                           	opt stack 0
  1411                           
  1412                           ; 14 bytes @ 0x2E
  1413  0000AE                     	ds	14
  1414  0000BC                     printRTC@RTC_month:
  1415                           	opt stack 0
  1416                           
  1417                           ; 2 bytes @ 0x3C
  1418  0000BC                     	ds	2
  1419  0000BE                     printRTC@month:
  1420                           	opt stack 0
  1421                           
  1422                           ; 4 bytes @ 0x3E
  1423  0000BE                     	ds	4
  1424  0000C2                     printRTC@i:
  1425                           	opt stack 0
  1426                           
  1427                           ; 2 bytes @ 0x42
  1428  0000C2                     	ds	2
  1429  0000C4                     ??_UI:
  1430                           
  1431                           ; 1 bytes @ 0x44
  1432  0000C4                     	ds	1
  1433  0000C5                     _UI$2010:
  1434                           	opt stack 0
  1435                           
  1436                           ; 2 bytes @ 0x45
  1437  0000C5                     	ds	2
  1438  0000C7                     UI@i:
  1439                           	opt stack 0
  1440                           
  1441                           ; 1 bytes @ 0x47
  1442  0000C7                     	ds	1
  1443  0000C8                     UI@i_582:
  1444                           	opt stack 0
  1445                           
  1446                           ; 1 bytes @ 0x48
  1447  0000C8                     	ds	1
  1448  0000C9                     UI@i_583:
  1449                           	opt stack 0
  1450                           
  1451                           ; 1 bytes @ 0x49
  1452  0000C9                     	ds	1
  1453  0000CA                     UI@i_586:
  1454                           	opt stack 0
  1455                           
  1456                           ; 1 bytes @ 0x4A
  1457  0000CA                     	ds	1
  1458  0000CB                     UI@i_587:
  1459                           	opt stack 0
  1460                           
  1461                           ; 1 bytes @ 0x4B
  1462  0000CB                     	ds	1
  1463  0000CC                     UI@i_590:
  1464                           	opt stack 0
  1465                           
  1466                           ; 1 bytes @ 0x4C
  1467  0000CC                     	ds	1
  1468  0000CD                     UI@i_591:
  1469                           	opt stack 0
  1470                           
  1471                           ; 1 bytes @ 0x4D
  1472  0000CD                     	ds	1
  1473  0000CE                     UI@i_594:
  1474                           	opt stack 0
  1475                           
  1476                           ; 1 bytes @ 0x4E
  1477  0000CE                     	ds	1
  1478  0000CF                     UI@i_595:
  1479                           	opt stack 0
  1480                           
  1481                           ; 1 bytes @ 0x4F
  1482  0000CF                     	ds	1
  1483  0000D0                     UI@i_598:
  1484                           	opt stack 0
  1485                           
  1486                           ; 1 bytes @ 0x50
  1487  0000D0                     	ds	1
  1488  0000D1                     UI@i_599:
  1489                           	opt stack 0
  1490                           
  1491                           ; 1 bytes @ 0x51
  1492  0000D1                     	ds	1
  1493  0000D2                     UI@i_602:
  1494                           	opt stack 0
  1495                           
  1496                           ; 1 bytes @ 0x52
  1497  0000D2                     	ds	1
  1498  0000D3                     UI@i_603:
  1499                           	opt stack 0
  1500                           
  1501                           ; 1 bytes @ 0x53
  1502  0000D3                     	ds	1
  1503  0000D4                     tblptru	equ	0xFF8
  1504                           tblptrh	equ	0xFF7
  1505                           tblptrl	equ	0xFF6
  1506                           tablat	equ	0xFF5
  1507                           postinc0	equ	0xFEE
  1508                           wreg	equ	0xFE8
  1509                           postdec1	equ	0xFE5
  1510                           fsr1l	equ	0xFE1
  1511                           
  1512                           ; 1 bytes @ 0x54
  1513                           
  1514                           	psect	cstackCOMRAM
  1515  000001                     __pcstackCOMRAM:
  1516                           	opt stack 0
  1517  000001                     ??i2_I2C_Master_Wait:
  1518  000001                     ??i2_isdigit:
  1519  000001                     ?i2___wmul:
  1520                           	opt stack 0
  1521  000001                     ?i2___lwmod:
  1522                           	opt stack 0
  1523  000001                     i2lcdNibble@temp:
  1524                           	opt stack 0
  1525  000001                     dispLogs@myLog:
  1526                           	opt stack 0
  1527  000001                     i2___wmul@multiplier:
  1528                           	opt stack 0
  1529  000001                     i2___lwmod@dividend:
  1530                           	opt stack 0
  1531  000001                     i2strcpy@to:
  1532                           	opt stack 0
  1533                           
  1534                           ; 2 bytes @ 0x0
  1535  000001                     	ds	1
  1536  000002                     i2I2C_Master_Read@a:
  1537                           	opt stack 0
  1538  000002                     i2lcdNibble@data:
  1539                           	opt stack 0
  1540  000002                     i2_isdigit$1652:
  1541                           	opt stack 0
  1542  000002                     i2I2C_Master_Write@d:
  1543                           	opt stack 0
  1544                           
  1545                           ; 2 bytes @ 0x1
  1546  000002                     	ds	1
  1547  000003                     i2I2C_Master_Read@temp:
  1548                           	opt stack 0
  1549  000003                     i2lcdInst@data:
  1550                           	opt stack 0
  1551  000003                     i2putch@data:
  1552                           	opt stack 0
  1553  000003                     i2isdigit@c:
  1554                           	opt stack 0
  1555  000003                     i2___wmul@multiplicand:
  1556                           	opt stack 0
  1557  000003                     i2___lwmod@divisor:
  1558                           	opt stack 0
  1559  000003                     i2strcpy@from:
  1560                           	opt stack 0
  1561                           
  1562                           ; 2 bytes @ 0x2
  1563  000003                     	ds	1
  1564  000004                     i2getRTC@i:
  1565                           	opt stack 0
  1566                           
  1567                           ; 2 bytes @ 0x3
  1568  000004                     	ds	1
  1569  000005                     i2___lwmod@counter:
  1570                           	opt stack 0
  1571  000005                     i2___wmul@product:
  1572                           	opt stack 0
  1573  000005                     i2strcpy@cp:
  1574                           	opt stack 0
  1575                           
  1576                           ; 2 bytes @ 0x4
  1577  000005                     	ds	1
  1578  000006                     ?i2___lwdiv:
  1579                           	opt stack 0
  1580  000006                     i2___lwdiv@dividend:
  1581                           	opt stack 0
  1582                           
  1583                           ; 2 bytes @ 0x5
  1584  000006                     	ds	2
  1585  000008                     i2___lwdiv@divisor:
  1586                           	opt stack 0
  1587                           
  1588                           ; 2 bytes @ 0x7
  1589  000008                     	ds	2
  1590  00000A                     i2___lwdiv@quotient:
  1591                           	opt stack 0
  1592                           
  1593                           ; 2 bytes @ 0x9
  1594  00000A                     	ds	2
  1595  00000C                     i2___lwdiv@counter:
  1596                           	opt stack 0
  1597                           
  1598                           ; 1 bytes @ 0xB
  1599  00000C                     	ds	1
  1600  00000D                     ?i2_printf:
  1601                           	opt stack 0
  1602  00000D                     i2printf@f:
  1603                           	opt stack 0
  1604                           
  1605                           ; 2 bytes @ 0xC
  1606  00000D                     	ds	12
  1607  000019                     ??i2_printf:
  1608                           
  1609                           ; 1 bytes @ 0x18
  1610  000019                     	ds	4
  1611  00001D                     i2printf@prec:
  1612                           	opt stack 0
  1613                           
  1614                           ; 1 bytes @ 0x1C
  1615  00001D                     	ds	1
  1616  00001E                     i2printf@ap:
  1617                           	opt stack 0
  1618                           
  1619                           ; 2 bytes @ 0x1D
  1620  00001E                     	ds	2
  1621  000020                     i2printf@cp:
  1622                           	opt stack 0
  1623                           
  1624                           ; 2 bytes @ 0x1F
  1625  000020                     	ds	2
  1626  000022                     i2printf@val:
  1627                           	opt stack 0
  1628                           
  1629                           ; 2 bytes @ 0x21
  1630  000022                     	ds	2
  1631  000024                     i2printf@len:
  1632                           	opt stack 0
  1633                           
  1634                           ; 2 bytes @ 0x23
  1635  000024                     	ds	2
  1636  000026                     i2printf@flag:
  1637                           	opt stack 0
  1638                           
  1639                           ; 1 bytes @ 0x25
  1640  000026                     	ds	1
  1641  000027                     i2printf@c:
  1642                           	opt stack 0
  1643                           
  1644                           ; 1 bytes @ 0x26
  1645  000027                     	ds	1
  1646  000028                     i2printf@width:
  1647                           	opt stack 0
  1648                           
  1649                           ; 2 bytes @ 0x27
  1650  000028                     	ds	2
  1651  00002A                     ??_printSortTimer:
  1652  00002A                     ??i2_printRTC:
  1653  00002A                     ?_inputHandler:
  1654                           	opt stack 0
  1655                           
  1656                           ; 2 bytes @ 0x29
  1657  00002A                     	ds	2
  1658  00002C                     ??_inputHandler:
  1659                           
  1660                           ; 1 bytes @ 0x2B
  1661  00002C                     	ds	1
  1662  00002D                     printSortTimer@curTime:
  1663                           	opt stack 0
  1664  00002D                     i2printRTC@INT_time:
  1665                           	opt stack 0
  1666                           
  1667                           ; 14 bytes @ 0x2C
  1668  00002D                     	ds	14
  1669  00003B                     printSortTimer@start_sec:
  1670                           	opt stack 0
  1671  00003B                     i2printRTC@RTC_month:
  1672                           	opt stack 0
  1673                           
  1674                           ; 2 bytes @ 0x3A
  1675  00003B                     	ds	2
  1676  00003D                     printSortTimer@cur_sec:
  1677                           	opt stack 0
  1678  00003D                     i2printRTC@month:
  1679                           	opt stack 0
  1680                           
  1681                           ; 4 bytes @ 0x3C
  1682  00003D                     	ds	2
  1683  00003F                     printSortTimer@hour:
  1684                           	opt stack 0
  1685                           
  1686                           ; 2 bytes @ 0x3E
  1687  00003F                     	ds	2
  1688  000041                     printSortTimer@min:
  1689                           	opt stack 0
  1690  000041                     i2printRTC@i:
  1691                           	opt stack 0
  1692                           
  1693                           ; 2 bytes @ 0x40
  1694  000041                     	ds	2
  1695  000043                     ??_updateMenu:
  1696  000043                     printSortTimer@sec:
  1697                           	opt stack 0
  1698                           
  1699                           ; 2 bytes @ 0x42
  1700  000043                     	ds	2
  1701  000045                     _printSortTimer$2125:
  1702                           	opt stack 0
  1703                           
  1704                           ; 2 bytes @ 0x44
  1705  000045                     	ds	2
  1706  000047                     printSortTimer@timeDiff:
  1707                           	opt stack 0
  1708                           
  1709                           ; 2 bytes @ 0x46
  1710  000047                     	ds	2
  1711  000049                     printSortTimer@i:
  1712                           	opt stack 0
  1713                           
  1714                           ; 2 bytes @ 0x48
  1715  000049                     	ds	2
  1716  00004B                     ??_handler:
  1717                           
  1718                           ; 1 bytes @ 0x4A
  1719  00004B                     	ds	16
  1720                           tblptru	equ	0xFF8
  1721                           tblptrh	equ	0xFF7
  1722                           tblptrl	equ	0xFF6
  1723                           tablat	equ	0xFF5
  1724                           postinc0	equ	0xFEE
  1725                           wreg	equ	0xFE8
  1726                           postdec1	equ	0xFE5
  1727                           fsr1l	equ	0xFE1
  1728                           
  1729 ;;
  1730 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1731 ;;
  1732 ;; *************** function _main *****************
  1733 ;; Defined at:
  1734 ;;		line 16 in file "main.c"
  1735 ;; Parameters:    Size  Location     Type
  1736 ;;		None
  1737 ;; Auto vars:     Size  Location     Type
  1738 ;;		None
  1739 ;; Return value:  Size  Location     Type
  1740 ;;                  1    wreg      void 
  1741 ;; Registers used:
  1742 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1743 ;; Tracked objects:
  1744 ;;		On entry : 0/0
  1745 ;;		On exit  : 0/0
  1746 ;;		Unchanged: 0/0
  1747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1752 ;;Total ram usage:        0 bytes
  1753 ;; Hardware stack levels required when called:   13
  1754 ;; This function calls:
  1755 ;;		_PortTestA5
  1756 ;;		_UI
  1757 ;;		_initLCD
  1758 ;;		_initTime
  1759 ;;		_initUI
  1760 ;;		_machineConfig
  1761 ;;		_sort
  1762 ;;		_stopSignals
  1763 ;; This function is called by:
  1764 ;;		Startup code after reset
  1765 ;; This function uses a non-reentrant model
  1766 ;;
  1767                           
  1768                           	psect	text0
  1769  002022                     __ptext0:
  1770                           	opt stack 0
  1771  002022                     _main:
  1772                           	opt stack 18
  1773                           
  1774                           ;main.c: 17: machineConfig();
  1775                           
  1776                           ;incstack = 0
  1777  002022  EC20  F012         	call	_machineConfig	;wreg free
  1778                           
  1779                           ;main.c: 18: initLCD();
  1780  002026  ECCC  F012         	call	_initLCD	;wreg free
  1781                           
  1782                           ;main.c: 19: initTime(0x42, 0x44, 0x19, 0x06, 0x24, 0x02, 0x17);
  1783  00202A  0E44               	movlw	68
  1784  00202C  0100               	movlb	0	; () banked
  1785  00202E  6F80               	movwf	initTime@m& (0+255),b
  1786  002030  0E19               	movlw	25
  1787  002032  0100               	movlb	0	; () banked
  1788  002034  6F81               	movwf	initTime@h& (0+255),b
  1789  002036  0E06               	movlw	6
  1790  002038  0100               	movlb	0	; () banked
  1791  00203A  6F82               	movwf	initTime@w& (0+255),b
  1792  00203C  0E24               	movlw	36
  1793  00203E  0100               	movlb	0	; () banked
  1794  002040  6F83               	movwf	initTime@DD& (0+255),b
  1795  002042  0E02               	movlw	2
  1796  002044  0100               	movlb	0	; () banked
  1797  002046  6F84               	movwf	initTime@MM& (0+255),b
  1798  002048  0E17               	movlw	23
  1799  00204A  0100               	movlb	0	; () banked
  1800  00204C  6F85               	movwf	initTime@YY& (0+255),b
  1801  00204E  0E42               	movlw	66
  1802  002050  EC62  F015         	call	_initTime
  1803                           
  1804                           ;main.c: 20: initUI();
  1805  002054  EC92  F015         	call	_initUI	;wreg free
  1806                           
  1807                           ;main.c: 24: switch(machine_state){
  1808                           
  1809                           ;main.c: 23: while(1){
  1810  002058  D016               	goto	l5942
  1811  00205A                     l5926:
  1812                           
  1813                           ;main.c: 26: UI();
  1814  00205A  EC09  F000         	call	_UI	;wreg free
  1815                           
  1816                           ;main.c: 27: break;
  1817  00205E  D013               	goto	l5942
  1818  002060                     l5928:
  1819                           
  1820                           ;main.c: 29: sort();
  1821  002060  EC51  F015         	call	_sort	;wreg free
  1822                           
  1823                           ;main.c: 30: break;
  1824  002064  D010               	goto	l5942
  1825  002066                     l5930:
  1826                           
  1827                           ;main.c: 32: stopSignals();
  1828  002066  EC9F  F015         	call	_stopSignals	;wreg free
  1829                           
  1830                           ;main.c: 33: first = 1;
  1831  00206A  0E00               	movlw	0
  1832  00206C  0100               	movlb	0	; () banked
  1833  00206E  6FFD               	movwf	(_first+1)& (0+255),b
  1834  002070  0E01               	movlw	1
  1835  002072  6FFC               	movwf	_first& (0+255),b
  1836                           
  1837                           ; BSR set to: 0
  1838                           ;main.c: 34: UI();
  1839  002074  EC09  F000         	call	_UI	;wreg free
  1840                           
  1841                           ;main.c: 35: break;
  1842  002078  D006               	goto	l5942
  1843  00207A                     l5936:
  1844                           
  1845                           ;main.c: 37: PortTestA5();
  1846  00207A  ECBE  F015         	call	_PortTestA5	;wreg free
  1847                           
  1848                           ;main.c: 38: break;
  1849  00207E  D003               	goto	l5942
  1850  002080                     l5938:
  1851                           
  1852                           ;main.c: 40: stopSignals();
  1853  002080  EC9F  F015         	call	_stopSignals	;wreg free
  1854  002084                     l748:
  1855  002084  D7FF               	goto	l748
  1856  002086                     l5942:
  1857  002086  0100               	movlb	0	; () banked
  1858  002088  51F7               	movf	_machine_state& (0+255),w,b
  1859                           
  1860                           ; Switch size 1, requested type "space"
  1861                           ; Number of cases is 5, Range of values is 0 to 4
  1862                           ; switch strategies available:
  1863                           ; Name         Instructions Cycles
  1864                           ; simple_byte           16     9 (average)
  1865                           ;	Chosen strategy is simple_byte
  1866  00208A  0A00               	xorlw	0	; case 0
  1867  00208C  B4D8               	btfsc	status,2,c
  1868  00208E  D7E5               	goto	l5926
  1869  002090  0A01               	xorlw	1	; case 1
  1870  002092  B4D8               	btfsc	status,2,c
  1871  002094  D7E5               	goto	l5928
  1872  002096  0A03               	xorlw	3	; case 2
  1873  002098  B4D8               	btfsc	status,2,c
  1874  00209A  D7E5               	goto	l5930
  1875  00209C  0A01               	xorlw	1	; case 3
  1876  00209E  B4D8               	btfsc	status,2,c
  1877  0020A0  D7EC               	goto	l5936
  1878  0020A2  0A07               	xorlw	7	; case 4
  1879  0020A4  B4D8               	btfsc	status,2,c
  1880  0020A6  D7EC               	goto	l5938
  1881                           
  1882                           ; BSR set to: 0
  1883                           
  1884                           ; BSR set to: 0
  1885  0020A8  D7EE               	goto	l5942
  1886  0020AA                     __end_of_main:
  1887                           	opt stack 0
  1888                           tblptru	equ	0xFF8
  1889                           tblptrh	equ	0xFF7
  1890                           tblptrl	equ	0xFF6
  1891                           tablat	equ	0xFF5
  1892                           postinc0	equ	0xFEE
  1893                           wreg	equ	0xFE8
  1894                           postdec1	equ	0xFE5
  1895                           fsr1l	equ	0xFE1
  1896                           status	equ	0xFD8
  1897                           
  1898 ;; *************** function _stopSignals *****************
  1899 ;; Defined at:
  1900 ;;		line 49 in file "main.c"
  1901 ;; Parameters:    Size  Location     Type
  1902 ;;		None
  1903 ;; Auto vars:     Size  Location     Type
  1904 ;;		None
  1905 ;; Return value:  Size  Location     Type
  1906 ;;                  1    wreg      void 
  1907 ;; Registers used:
  1908 ;;		wreg, status,2
  1909 ;; Tracked objects:
  1910 ;;		On entry : 0/0
  1911 ;;		On exit  : 0/0
  1912 ;;		Unchanged: 0/0
  1913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1918 ;;Total ram usage:        0 bytes
  1919 ;; Hardware stack levels used:    1
  1920 ;; Hardware stack levels required when called:    7
  1921 ;; This function calls:
  1922 ;;		Nothing
  1923 ;; This function is called by:
  1924 ;;		_main
  1925 ;; This function uses a non-reentrant model
  1926 ;;
  1927                           
  1928                           	psect	text1
  1929  002B3E                     __ptext1:
  1930                           	opt stack 0
  1931  002B3E                     _stopSignals:
  1932                           	opt stack 23
  1933                           
  1934                           ;main.c: 50: LATA = 0x00;
  1935                           
  1936                           ; BSR set to: 0
  1937                           ;incstack = 0
  1938  002B3E  0E00               	movlw	0
  1939  002B40  6E89               	movwf	3977,c	;volatile
  1940                           
  1941                           ;main.c: 51: LATB = 0x00;
  1942  002B42  0E00               	movlw	0
  1943  002B44  6E8A               	movwf	3978,c	;volatile
  1944                           
  1945                           ;main.c: 52: LATC = 0x00;
  1946  002B46  0E00               	movlw	0
  1947  002B48  6E8B               	movwf	3979,c	;volatile
  1948                           
  1949                           ;main.c: 53: LATD = 0x00;
  1950  002B4A  0E00               	movlw	0
  1951  002B4C  6E8C               	movwf	3980,c	;volatile
  1952                           
  1953                           ;main.c: 54: LATE = 0x00;
  1954  002B4E  0E00               	movlw	0
  1955  002B50  6E8D               	movwf	3981,c	;volatile
  1956  002B52  0012               	return		;funcret
  1957  002B54                     __end_of_stopSignals:
  1958                           	opt stack 0
  1959                           tblptru	equ	0xFF8
  1960                           tblptrh	equ	0xFF7
  1961                           tblptrl	equ	0xFF6
  1962                           tablat	equ	0xFF5
  1963                           postinc0	equ	0xFEE
  1964                           wreg	equ	0xFE8
  1965                           postdec1	equ	0xFE5
  1966                           fsr1l	equ	0xFE1
  1967                           status	equ	0xFD8
  1968                           
  1969 ;; *************** function _sort *****************
  1970 ;; Defined at:
  1971 ;;		line 14 in file "sort.c"
  1972 ;; Parameters:    Size  Location     Type
  1973 ;;		None
  1974 ;; Auto vars:     Size  Location     Type
  1975 ;;		None
  1976 ;; Return value:  Size  Location     Type
  1977 ;;                  1    wreg      void 
  1978 ;; Registers used:
  1979 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1980 ;; Tracked objects:
  1981 ;;		On entry : 0/0
  1982 ;;		On exit  : 0/0
  1983 ;;		Unchanged: 0/0
  1984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1989 ;;Total ram usage:        0 bytes
  1990 ;; Hardware stack levels used:    1
  1991 ;; Hardware stack levels required when called:   12
  1992 ;; This function calls:
  1993 ;;		_Distribution
  1994 ;;		_ID
  1995 ;;		_Loading
  1996 ;; This function is called by:
  1997 ;;		_main
  1998 ;; This function uses a non-reentrant model
  1999 ;;
  2000                           
  2001                           	psect	text2
  2002  002AA2                     __ptext2:
  2003                           	opt stack 0
  2004  002AA2                     _sort:
  2005                           	opt stack 18
  2006                           
  2007                           ;sort.c: 15: if(machine_state == Sorting_state){
  2008                           
  2009                           ;incstack = 0
  2010  002AA2  0100               	movlb	0	; () banked
  2011  002AA4  05F7               	decf	_machine_state& (0+255),w,b
  2012  002AA6  B4D8               	btfsc	status,2,c
  2013                           
  2014                           ; BSR set to: 0
  2015                           ;sort.c: 16: Loading();
  2016  002AA8  EC28  F009         	call	_Loading	;wreg free
  2017                           
  2018                           ;sort.c: 17: }
  2019                           ;sort.c: 18: if(machine_state == Sorting_state){
  2020  002AAC  0100               	movlb	0	; () banked
  2021  002AAE  05F7               	decf	_machine_state& (0+255),w,b
  2022  002AB0  B4D8               	btfsc	status,2,c
  2023                           
  2024                           ; BSR set to: 0
  2025                           ;sort.c: 19: ID();
  2026  002AB2  ECFF  F00D         	call	_ID	;wreg free
  2027                           
  2028                           ;sort.c: 20: }
  2029                           ;sort.c: 21: if(machine_state == Sorting_state){
  2030  002AB6  0100               	movlb	0	; () banked
  2031  002AB8  05F7               	decf	_machine_state& (0+255),w,b
  2032  002ABA  A4D8               	btfss	status,2,c
  2033  002ABC  0012               	return	
  2034                           
  2035                           ; BSR set to: 0
  2036                           ;sort.c: 22: Distribution();
  2037  002ABE  EC73  F015         	call	_Distribution	;wreg free
  2038  002AC2  0012               	return	
  2039  002AC4                     __end_of_sort:
  2040                           	opt stack 0
  2041                           tblptru	equ	0xFF8
  2042                           tblptrh	equ	0xFF7
  2043                           tblptrl	equ	0xFF6
  2044                           tablat	equ	0xFF5
  2045                           postinc0	equ	0xFEE
  2046                           wreg	equ	0xFE8
  2047                           postdec1	equ	0xFE5
  2048                           fsr1l	equ	0xFE1
  2049                           status	equ	0xFD8
  2050                           
  2051 ;; *************** function _Loading *****************
  2052 ;; Defined at:
  2053 ;;		line 26 in file "sort.c"
  2054 ;; Parameters:    Size  Location     Type
  2055 ;;		None
  2056 ;; Auto vars:     Size  Location     Type
  2057 ;;  i               1   18[BANK0 ] unsigned char 
  2058 ;;  i               1   17[BANK0 ] unsigned char 
  2059 ;;  i               1   16[BANK0 ] unsigned char 
  2060 ;;  i               1   15[BANK0 ] unsigned char 
  2061 ;;  i               1   14[BANK0 ] unsigned char 
  2062 ;;  i               1   13[BANK0 ] unsigned char 
  2063 ;;  i               1   12[BANK0 ] unsigned char 
  2064 ;;  i               1   11[BANK0 ] unsigned char 
  2065 ;; Return value:  Size  Location     Type
  2066 ;;                  1    wreg      void 
  2067 ;; Registers used:
  2068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2069 ;; Tracked objects:
  2070 ;;		On entry : 0/0
  2071 ;;		On exit  : 0/0
  2072 ;;		Unchanged: 0/0
  2073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2075 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2076 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2077 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2078 ;;Total ram usage:        9 bytes
  2079 ;; Hardware stack levels used:    1
  2080 ;; Hardware stack levels required when called:   11
  2081 ;; This function calls:
  2082 ;;		_initFlags
  2083 ;;		_initServos
  2084 ;;		_initSortTimer
  2085 ;;		_lcdInst
  2086 ;;		_updateServoPosition
  2087 ;; This function is called by:
  2088 ;;		_sort
  2089 ;; This function uses a non-reentrant model
  2090 ;;
  2091                           
  2092                           	psect	text3
  2093  001250                     __ptext3:
  2094                           	opt stack 0
  2095  001250                     _Loading:
  2096                           	opt stack 18
  2097                           
  2098                           ;sort.c: 27: if(first){
  2099                           
  2100                           ;incstack = 0
  2101  001250  0100               	movlb	0	; () banked
  2102  001252  51FC               	movf	_first& (0+255),w,b
  2103  001254  0100               	movlb	0	; () banked
  2104  001256  11FD               	iorwf	(_first+1)& (0+255),w,b
  2105  001258  B4D8               	btfsc	status,2,c
  2106  00125A  D0E8               	goto	l5184
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;sort.c: 28: first = 0;
  2110  00125C  0E00               	movlw	0
  2111  00125E  0100               	movlb	0	; () banked
  2112  001260  6FFD               	movwf	(_first+1)& (0+255),b
  2113  001262  0E00               	movlw	0
  2114  001264  6FFC               	movwf	_first& (0+255),b
  2115                           
  2116                           ; BSR set to: 0
  2117                           ;sort.c: 29: initFlags();
  2118  001266  EC10  F013         	call	_initFlags	;wreg free
  2119                           
  2120                           ;sort.c: 30: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2121  00126A  0E01               	movlw	1
  2122  00126C  ECD8  F015         	call	_lcdInst
  2123  001270  0E68               	movlw	104
  2124  001272  0100               	movlb	0	; () banked
  2125  001274  6F8A               	movwf	??_Loading& (0+255),b
  2126  001276  0EE4               	movlw	228
  2127  001278                     u5057:
  2128  001278  2EE8               	decfsz	wreg,f,c
  2129  00127A  D7FE               	bra	u5057
  2130  00127C  2F8A               	decfsz	??_Loading& (0+255),f,b
  2131  00127E  D7FC               	bra	u5057
  2132  001280  F000               	nop	
  2133                           
  2134                           ;sort.c: 31: initSortTimer();
  2135  001282  EC25  F00F         	call	_initSortTimer	;wreg free
  2136                           
  2137                           ;sort.c: 34: LATAbits.LATA5 = 1;
  2138  001286  8A89               	bsf	3977,5,c	;volatile
  2139                           
  2140                           ;sort.c: 37: initServos();
  2141  001288  EC66  F013         	call	_initServos	;wreg free
  2142                           
  2143                           ;sort.c: 38: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};f
      +                          or(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  2144  00128C  0E00               	movlw	0
  2145  00128E  0100               	movlb	0	; () banked
  2146  001290  6F8B               	movwf	Loading@i& (0+255),b
  2147  001292                     l5100:
  2148                           
  2149                           ; BSR set to: 0
  2150  001292  0E63               	movlw	99
  2151  001294  0100               	movlb	0	; () banked
  2152  001296  658B               	cpfsgt	Loading@i& (0+255),b
  2153  001298  D001               	goto	l5104
  2154  00129A  D00C               	goto	l5108
  2155  00129C                     l5104:
  2156                           
  2157                           ; BSR set to: 0
  2158  00129C  0E68               	movlw	104
  2159  00129E  0100               	movlb	0	; () banked
  2160  0012A0  6F8A               	movwf	??_Loading& (0+255),b
  2161  0012A2  0EE4               	movlw	228
  2162  0012A4                     u5067:
  2163  0012A4  2EE8               	decfsz	wreg,f,c
  2164  0012A6  D7FE               	bra	u5067
  2165  0012A8  2F8A               	decfsz	??_Loading& (0+255),f,b
  2166  0012AA  D7FC               	bra	u5067
  2167  0012AC  F000               	nop	
  2168  0012AE  0100               	movlb	0	; () banked
  2169  0012B0  2B8B               	incf	Loading@i& (0+255),f,b
  2170  0012B2  D7EF               	goto	l5100
  2171  0012B4                     l5108:
  2172                           
  2173                           ; BSR set to: 0
  2174  0012B4  0E00               	movlw	0
  2175  0012B6  0100               	movlb	0	; () banked
  2176  0012B8  6F8C               	movwf	Loading@i_1260& (0+255),b
  2177  0012BA                     l5110:
  2178                           
  2179                           ; BSR set to: 0
  2180  0012BA  0E63               	movlw	99
  2181  0012BC  0100               	movlb	0	; () banked
  2182  0012BE  658C               	cpfsgt	Loading@i_1260& (0+255),b
  2183  0012C0  D001               	goto	l5114
  2184  0012C2  D00C               	goto	l5118
  2185  0012C4                     l5114:
  2186                           
  2187                           ; BSR set to: 0
  2188  0012C4  0E68               	movlw	104
  2189  0012C6  0100               	movlb	0	; () banked
  2190  0012C8  6F8A               	movwf	??_Loading& (0+255),b
  2191  0012CA  0EE4               	movlw	228
  2192  0012CC                     u5077:
  2193  0012CC  2EE8               	decfsz	wreg,f,c
  2194  0012CE  D7FE               	bra	u5077
  2195  0012D0  2F8A               	decfsz	??_Loading& (0+255),f,b
  2196  0012D2  D7FC               	bra	u5077
  2197  0012D4  F000               	nop	
  2198  0012D6  0100               	movlb	0	; () banked
  2199  0012D8  2B8C               	incf	Loading@i_1260& (0+255),f,b
  2200  0012DA  D7EF               	goto	l5110
  2201  0012DC                     l5118:
  2202                           
  2203                           ; BSR set to: 0
  2204                           ;sort.c: 39: updateServoPosition(1000, 1);
  2205  0012DC  0E03               	movlw	3
  2206  0012DE  0100               	movlb	0	; () banked
  2207  0012E0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  2208  0012E2  0EE8               	movlw	232
  2209  0012E4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  2210  0012E6  0E00               	movlw	0
  2211  0012E8  0100               	movlb	0	; () banked
  2212  0012EA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  2213  0012EC  0E01               	movlw	1
  2214  0012EE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  2215  0012F0  EC17  F011         	call	_updateServoPosition	;wreg free
  2216                           
  2217                           ;sort.c: 40: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};f
      +                          or(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  2218  0012F4  0E00               	movlw	0
  2219  0012F6  0100               	movlb	0	; () banked
  2220  0012F8  6F8D               	movwf	Loading@i_1261& (0+255),b
  2221  0012FA                     l5122:
  2222                           
  2223                           ; BSR set to: 0
  2224  0012FA  0E63               	movlw	99
  2225  0012FC  0100               	movlb	0	; () banked
  2226  0012FE  658D               	cpfsgt	Loading@i_1261& (0+255),b
  2227  001300  D001               	goto	l5126
  2228  001302  D00C               	goto	l5130
  2229  001304                     l5126:
  2230                           
  2231                           ; BSR set to: 0
  2232  001304  0E68               	movlw	104
  2233  001306  0100               	movlb	0	; () banked
  2234  001308  6F8A               	movwf	??_Loading& (0+255),b
  2235  00130A  0EE4               	movlw	228
  2236  00130C                     u5087:
  2237  00130C  2EE8               	decfsz	wreg,f,c
  2238  00130E  D7FE               	bra	u5087
  2239  001310  2F8A               	decfsz	??_Loading& (0+255),f,b
  2240  001312  D7FC               	bra	u5087
  2241  001314  F000               	nop	
  2242  001316  0100               	movlb	0	; () banked
  2243  001318  2B8D               	incf	Loading@i_1261& (0+255),f,b
  2244  00131A  D7EF               	goto	l5122
  2245  00131C                     l5130:
  2246                           
  2247                           ; BSR set to: 0
  2248  00131C  0E00               	movlw	0
  2249  00131E  0100               	movlb	0	; () banked
  2250  001320  6F8E               	movwf	Loading@i_1262& (0+255),b
  2251  001322                     l5132:
  2252                           
  2253                           ; BSR set to: 0
  2254  001322  0E63               	movlw	99
  2255  001324  0100               	movlb	0	; () banked
  2256  001326  658E               	cpfsgt	Loading@i_1262& (0+255),b
  2257  001328  D001               	goto	l5136
  2258  00132A  D00C               	goto	l5140
  2259  00132C                     l5136:
  2260                           
  2261                           ; BSR set to: 0
  2262  00132C  0E68               	movlw	104
  2263  00132E  0100               	movlb	0	; () banked
  2264  001330  6F8A               	movwf	??_Loading& (0+255),b
  2265  001332  0EE4               	movlw	228
  2266  001334                     u5097:
  2267  001334  2EE8               	decfsz	wreg,f,c
  2268  001336  D7FE               	bra	u5097
  2269  001338  2F8A               	decfsz	??_Loading& (0+255),f,b
  2270  00133A  D7FC               	bra	u5097
  2271  00133C  F000               	nop	
  2272  00133E  0100               	movlb	0	; () banked
  2273  001340  2B8E               	incf	Loading@i_1262& (0+255),f,b
  2274  001342  D7EF               	goto	l5132
  2275  001344                     l5140:
  2276                           
  2277                           ; BSR set to: 0
  2278                           ;sort.c: 41: updateServoPosition(1500, 3);
  2279  001344  0E05               	movlw	5
  2280  001346  0100               	movlb	0	; () banked
  2281  001348  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  2282  00134A  0EDC               	movlw	220
  2283  00134C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  2284  00134E  0E00               	movlw	0
  2285  001350  0100               	movlb	0	; () banked
  2286  001352  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  2287  001354  0E03               	movlw	3
  2288  001356  6F82               	movwf	updateServoPosition@timer& (0+255),b
  2289  001358  EC17  F011         	call	_updateServoPosition	;wreg free
  2290                           
  2291                           ;sort.c: 42: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};f
      +                          or(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  2292  00135C  0E00               	movlw	0
  2293  00135E  0100               	movlb	0	; () banked
  2294  001360  6F8F               	movwf	Loading@i_1263& (0+255),b
  2295  001362                     l5144:
  2296                           
  2297                           ; BSR set to: 0
  2298  001362  0E63               	movlw	99
  2299  001364  0100               	movlb	0	; () banked
  2300  001366  658F               	cpfsgt	Loading@i_1263& (0+255),b
  2301  001368  D001               	goto	l5148
  2302  00136A  D00C               	goto	l5152
  2303  00136C                     l5148:
  2304                           
  2305                           ; BSR set to: 0
  2306  00136C  0E68               	movlw	104
  2307  00136E  0100               	movlb	0	; () banked
  2308  001370  6F8A               	movwf	??_Loading& (0+255),b
  2309  001372  0EE4               	movlw	228
  2310  001374                     u5107:
  2311  001374  2EE8               	decfsz	wreg,f,c
  2312  001376  D7FE               	bra	u5107
  2313  001378  2F8A               	decfsz	??_Loading& (0+255),f,b
  2314  00137A  D7FC               	bra	u5107
  2315  00137C  F000               	nop	
  2316  00137E  0100               	movlb	0	; () banked
  2317  001380  2B8F               	incf	Loading@i_1263& (0+255),f,b
  2318  001382  D7EF               	goto	l5144
  2319  001384                     l5152:
  2320                           
  2321                           ; BSR set to: 0
  2322  001384  0E00               	movlw	0
  2323  001386  0100               	movlb	0	; () banked
  2324  001388  6F90               	movwf	Loading@i_1264& (0+255),b
  2325  00138A                     l5154:
  2326                           
  2327                           ; BSR set to: 0
  2328  00138A  0E63               	movlw	99
  2329  00138C  0100               	movlb	0	; () banked
  2330  00138E  6590               	cpfsgt	Loading@i_1264& (0+255),b
  2331  001390  D001               	goto	l5158
  2332  001392  D00C               	goto	l5162
  2333  001394                     l5158:
  2334                           
  2335                           ; BSR set to: 0
  2336  001394  0E68               	movlw	104
  2337  001396  0100               	movlb	0	; () banked
  2338  001398  6F8A               	movwf	??_Loading& (0+255),b
  2339  00139A  0EE4               	movlw	228
  2340  00139C                     u5117:
  2341  00139C  2EE8               	decfsz	wreg,f,c
  2342  00139E  D7FE               	bra	u5117
  2343  0013A0  2F8A               	decfsz	??_Loading& (0+255),f,b
  2344  0013A2  D7FC               	bra	u5117
  2345  0013A4  F000               	nop	
  2346  0013A6  0100               	movlb	0	; () banked
  2347  0013A8  2B90               	incf	Loading@i_1264& (0+255),f,b
  2348  0013AA  D7EF               	goto	l5154
  2349  0013AC                     l5162:
  2350                           
  2351                           ; BSR set to: 0
  2352                           ;sort.c: 43: updateServoPosition(1000, 3);
  2353  0013AC  0E03               	movlw	3
  2354  0013AE  0100               	movlb	0	; () banked
  2355  0013B0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  2356  0013B2  0EE8               	movlw	232
  2357  0013B4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  2358  0013B6  0E00               	movlw	0
  2359  0013B8  0100               	movlb	0	; () banked
  2360  0013BA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  2361  0013BC  0E03               	movlw	3
  2362  0013BE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  2363  0013C0  EC17  F011         	call	_updateServoPosition	;wreg free
  2364                           
  2365                           ;sort.c: 44: updateServoPosition(1500, 1);
  2366  0013C4  0E05               	movlw	5
  2367  0013C6  0100               	movlb	0	; () banked
  2368  0013C8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  2369  0013CA  0EDC               	movlw	220
  2370  0013CC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  2371  0013CE  0E00               	movlw	0
  2372  0013D0  0100               	movlb	0	; () banked
  2373  0013D2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  2374  0013D4  0E01               	movlw	1
  2375  0013D6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  2376  0013D8  EC17  F011         	call	_updateServoPosition	;wreg free
  2377                           
  2378                           ;sort.c: 45: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};f
      +                          or(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  2379  0013DC  0E00               	movlw	0
  2380  0013DE  0100               	movlb	0	; () banked
  2381  0013E0  6F91               	movwf	Loading@i_1265& (0+255),b
  2382  0013E2                     l5166:
  2383                           
  2384                           ; BSR set to: 0
  2385  0013E2  0E63               	movlw	99
  2386  0013E4  0100               	movlb	0	; () banked
  2387  0013E6  6591               	cpfsgt	Loading@i_1265& (0+255),b
  2388  0013E8  D001               	goto	l5170
  2389  0013EA  D00C               	goto	l5174
  2390  0013EC                     l5170:
  2391                           
  2392                           ; BSR set to: 0
  2393  0013EC  0E68               	movlw	104
  2394  0013EE  0100               	movlb	0	; () banked
  2395  0013F0  6F8A               	movwf	??_Loading& (0+255),b
  2396  0013F2  0EE4               	movlw	228
  2397  0013F4                     u5127:
  2398  0013F4  2EE8               	decfsz	wreg,f,c
  2399  0013F6  D7FE               	bra	u5127
  2400  0013F8  2F8A               	decfsz	??_Loading& (0+255),f,b
  2401  0013FA  D7FC               	bra	u5127
  2402  0013FC  F000               	nop	
  2403  0013FE  0100               	movlb	0	; () banked
  2404  001400  2B91               	incf	Loading@i_1265& (0+255),f,b
  2405  001402  D7EF               	goto	l5166
  2406  001404                     l5174:
  2407                           
  2408                           ; BSR set to: 0
  2409  001404  0E00               	movlw	0
  2410  001406  0100               	movlb	0	; () banked
  2411  001408  6F92               	movwf	Loading@i_1266& (0+255),b
  2412  00140A                     l5176:
  2413                           
  2414                           ; BSR set to: 0
  2415  00140A  0E63               	movlw	99
  2416  00140C  0100               	movlb	0	; () banked
  2417  00140E  6592               	cpfsgt	Loading@i_1266& (0+255),b
  2418  001410  D001               	goto	l5180
  2419  001412  0012               	return	
  2420  001414                     l5180:
  2421                           
  2422                           ; BSR set to: 0
  2423  001414  0E68               	movlw	104
  2424  001416  0100               	movlb	0	; () banked
  2425  001418  6F8A               	movwf	??_Loading& (0+255),b
  2426  00141A  0EE4               	movlw	228
  2427  00141C                     u5137:
  2428  00141C  2EE8               	decfsz	wreg,f,c
  2429  00141E  D7FE               	bra	u5137
  2430  001420  2F8A               	decfsz	??_Loading& (0+255),f,b
  2431  001422  D7FC               	bra	u5137
  2432  001424  F000               	nop	
  2433  001426  0100               	movlb	0	; () banked
  2434  001428  2B92               	incf	Loading@i_1266& (0+255),f,b
  2435  00142A  D7EF               	goto	l5176
  2436  00142C                     l5184:
  2437                           
  2438                           ; BSR set to: 0
  2439                           ;sort.c: 49: else{
  2440                           ;sort.c: 52: if(!f_loadingNewCan){
  2441  00142C  0100               	movlb	0	; () banked
  2442  00142E  51EF               	movf	_f_loadingNewCan& (0+255),w,b
  2443  001430  0100               	movlb	0	; () banked
  2444  001432  11F0               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2445  001434  A4D8               	btfss	status,2,c
  2446  001436  D016               	goto	l5198
  2447                           
  2448                           ; BSR set to: 0
  2449                           ;sort.c: 56: if(!f_loadingNewCan){
  2450  001438  0100               	movlb	0	; () banked
  2451  00143A  51EF               	movf	_f_loadingNewCan& (0+255),w,b
  2452  00143C  0100               	movlb	0	; () banked
  2453  00143E  11F0               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2454  001440  B4D8               	btfsc	status,2,c
  2455  001442  0012               	return	
  2456                           
  2457                           ; BSR set to: 0
  2458                           ;sort.c: 60: else{
  2459                           ;sort.c: 61: count_total++;
  2460                           
  2461                           ; BSR set to: 0
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;sort.c: 58: }
  2465                           
  2466                           ; BSR set to: 0
  2467                           ;sort.c: 57: return;
  2468  001444  0100               	movlb	0	; () banked
  2469  001446  4BE5               	infsnz	_count_total& (0+255),f,b
  2470  001448  2BE6               	incf	(_count_total+1)& (0+255),f,b
  2471                           
  2472                           ; BSR set to: 0
  2473                           ;sort.c: 62: if(count_total == 12){
  2474  00144A  0E0C               	movlw	12
  2475  00144C  0100               	movlb	0	; () banked
  2476  00144E  19E5               	xorwf	_count_total& (0+255),w,b
  2477  001450  0100               	movlb	0	; () banked
  2478  001452  11E6               	iorwf	(_count_total+1)& (0+255),w,b
  2479  001454  A4D8               	btfss	status,2,c
  2480  001456  0012               	return	
  2481                           
  2482                           ; BSR set to: 0
  2483                           ;sort.c: 63: f_lastCan = 1;
  2484  001458  0E00               	movlw	0
  2485  00145A  0100               	movlb	0	; () banked
  2486  00145C  6FEE               	movwf	(_f_lastCan+1)& (0+255),b
  2487  00145E  0E01               	movlw	1
  2488  001460  6FED               	movwf	_f_lastCan& (0+255),b
  2489                           
  2490                           ; BSR set to: 0
  2491                           ;sort.c: 64: }
  2492                           ;sort.c: 65: }
  2493                           ;sort.c: 66: }
  2494                           
  2495                           ; BSR set to: 0
  2496  001462  0012               	return	
  2497  001464                     l5198:
  2498                           
  2499                           ; BSR set to: 0
  2500                           ;sort.c: 69: else if(f_ID_receive){
  2501  001464  0100               	movlb	0	; () banked
  2502  001466  51FA               	movf	_f_ID_receive& (0+255),w,b
  2503  001468  0100               	movlb	0	; () banked
  2504  00146A  11FB               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  2505  00146C  B4D8               	btfsc	status,2,c
  2506  00146E  0012               	return	
  2507                           
  2508                           ; BSR set to: 0
  2509                           ;sort.c: 70: f_loadingNewCan = 0;
  2510  001470  0E00               	movlw	0
  2511  001472  0100               	movlb	0	; () banked
  2512  001474  6FF0               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2513  001476  0E00               	movlw	0
  2514  001478  6FEF               	movwf	_f_loadingNewCan& (0+255),b
  2515                           
  2516                           ; BSR set to: 0
  2517                           ;sort.c: 71: LATAbits.LATA4 = 1;
  2518  00147A  8889               	bsf	3977,4,c	;volatile
  2519                           
  2520                           ;sort.c: 72: f_can_coming_to_ID = 1;
  2521  00147C  0E00               	movlw	0
  2522  00147E  0100               	movlb	0	; () banked
  2523  001480  6FEA               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2524  001482  0E01               	movlw	1
  2525  001484  6FE9               	movwf	_f_can_coming_to_ID& (0+255),b
  2526                           
  2527                           ; BSR set to: 0
  2528                           ;sort.c: 75: LATAbits.LATA4 = 0;
  2529  001486  9889               	bcf	3977,4,c	;volatile
  2530                           
  2531                           ; BSR set to: 0
  2532                           
  2533                           ; BSR set to: 0
  2534  001488  0012               	return	
  2535  00148A                     __end_of_Loading:
  2536                           	opt stack 0
  2537                           tblptru	equ	0xFF8
  2538                           tblptrh	equ	0xFF7
  2539                           tblptrl	equ	0xFF6
  2540                           tablat	equ	0xFF5
  2541                           postinc0	equ	0xFEE
  2542                           wreg	equ	0xFE8
  2543                           postdec1	equ	0xFE5
  2544                           fsr1l	equ	0xFE1
  2545                           status	equ	0xFD8
  2546                           
  2547 ;; *************** function _initSortTimer *****************
  2548 ;; Defined at:
  2549 ;;		line 128 in file "sort.c"
  2550 ;; Parameters:    Size  Location     Type
  2551 ;;		None
  2552 ;; Auto vars:     Size  Location     Type
  2553 ;;  i               2    8[BANK0 ] int 
  2554 ;; Return value:  Size  Location     Type
  2555 ;;                  1    wreg      void 
  2556 ;; Registers used:
  2557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2558 ;; Tracked objects:
  2559 ;;		On entry : 0/0
  2560 ;;		On exit  : 0/0
  2561 ;;		Unchanged: 0/0
  2562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2564 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2565 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2566 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2567 ;;Total ram usage:        5 bytes
  2568 ;; Hardware stack levels used:    1
  2569 ;; Hardware stack levels required when called:   10
  2570 ;; This function calls:
  2571 ;;		_getRTC
  2572 ;; This function is called by:
  2573 ;;		_Loading
  2574 ;; This function uses a non-reentrant model
  2575 ;;
  2576                           
  2577                           	psect	text4
  2578  001E4A                     __ptext4:
  2579                           	opt stack 0
  2580  001E4A                     _initSortTimer:
  2581                           	opt stack 18
  2582                           
  2583                           ;sort.c: 130: getRTC();
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;incstack = 0
  2587  001E4A  EC98  F010         	call	_getRTC	;wreg free
  2588                           
  2589                           ;sort.c: 131: for(int i = 0; i < 7; i++){
  2590  001E4E  0E00               	movlw	0
  2591  001E50  0100               	movlb	0	; () banked
  2592  001E52  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  2593  001E54  0E00               	movlw	0
  2594  001E56  6F88               	movwf	initSortTimer@i& (0+255),b
  2595  001E58                     l4798:
  2596                           
  2597                           ; BSR set to: 0
  2598  001E58  0100               	movlb	0	; () banked
  2599  001E5A  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  2600  001E5C  D008               	goto	l4802
  2601  001E5E  0100               	movlb	0	; () banked
  2602  001E60  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  2603  001E62  E140               	bnz	l4808
  2604  001E64  0E07               	movlw	7
  2605  001E66  0100               	movlb	0	; () banked
  2606  001E68  5D88               	subwf	initSortTimer@i& (0+255),w,b
  2607  001E6A  B0D8               	btfsc	status,0,c
  2608  001E6C  D03B               	goto	l4808
  2609  001E6E                     l4802:
  2610                           
  2611                           ; BSR set to: 0
  2612                           ;sort.c: 132: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  2613  001E6E  0EDC               	movlw	low _time
  2614  001E70  0100               	movlb	0	; () banked
  2615  001E72  2588               	addwf	initSortTimer@i& (0+255),w,b
  2616  001E74  6ED9               	movwf	fsr2l,c
  2617  001E76  0E00               	movlw	high _time
  2618  001E78  0100               	movlb	0	; () banked
  2619  001E7A  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2620  001E7C  6EDA               	movwf	fsr2h,c
  2621  001E7E  50DF               	movf	indf2,w,c
  2622  001E80  0100               	movlb	0	; () banked
  2623  001E82  6F85               	movwf	??_initSortTimer& (0+255),b
  2624  001E84  0100               	movlb	0	; () banked
  2625  001E86  3B85               	swapf	??_initSortTimer& (0+255),f,b
  2626  001E88  0E0F               	movlw	15
  2627  001E8A  1785               	andwf	??_initSortTimer& (0+255),f,b
  2628  001E8C  0E0F               	movlw	15
  2629  001E8E  0100               	movlb	0	; () banked
  2630  001E90  1785               	andwf	??_initSortTimer& (0+255),f,b
  2631  001E92  0100               	movlb	0	; () banked
  2632  001E94  5185               	movf	??_initSortTimer& (0+255),w,b
  2633  001E96  0D0A               	mullw	10
  2634  001E98  0EDC               	movlw	low _time
  2635  001E9A  0100               	movlb	0	; () banked
  2636  001E9C  2588               	addwf	initSortTimer@i& (0+255),w,b
  2637  001E9E  6ED9               	movwf	fsr2l,c
  2638  001EA0  0E00               	movlw	high _time
  2639  001EA2  0100               	movlb	0	; () banked
  2640  001EA4  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2641  001EA6  6EDA               	movwf	fsr2h,c
  2642  001EA8  50DF               	movf	indf2,w,c
  2643  001EAA  0B0F               	andlw	15
  2644  001EAC  0100               	movlb	0	; () banked
  2645  001EAE  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  2646  001EB0  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  2647  001EB2  50F3               	movf	prodl,w,c
  2648  001EB4  0100               	movlb	0	; () banked
  2649  001EB6  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  2650  001EB8  50F4               	movf	prodh,w,c
  2651  001EBA  0100               	movlb	0	; () banked
  2652  001EBC  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  2653  001EBE  90D8               	bcf	status,0,c
  2654  001EC0  0100               	movlb	0	; () banked
  2655  001EC2  3588               	rlcf	initSortTimer@i& (0+255),w,b
  2656  001EC4  6ED9               	movwf	fsr2l,c
  2657  001EC6  0100               	movlb	0	; () banked
  2658  001EC8  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  2659  001ECA  6EDA               	movwf	fsr2h,c
  2660  001ECC  0E00               	movlw	low _startTime
  2661  001ECE  26D9               	addwf	fsr2l,f,c
  2662  001ED0  0E01               	movlw	high _startTime
  2663  001ED2  22DA               	addwfc	fsr2h,f,c
  2664  001ED4  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  2665  001ED8  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  2666                           
  2667                           ; BSR set to: 0
  2668  001EDC  0100               	movlb	0	; () banked
  2669  001EDE  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  2670  001EE0  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  2671  001EE2  D7BA               	goto	l4798
  2672  001EE4                     l4808:
  2673                           
  2674                           ; BSR set to: 0
  2675                           ;sort.c: 133: }
  2676                           ;sort.c: 135: T0CON = 0b00010111;
  2677  001EE4  0E17               	movlw	23
  2678  001EE6  6ED5               	movwf	4053,c	;volatile
  2679                           
  2680                           ;sort.c: 144: TMR0H = 0b10000101;
  2681  001EE8  0E85               	movlw	133
  2682  001EEA  6ED7               	movwf	4055,c	;volatile
  2683                           
  2684                           ;sort.c: 145: TMR0L = 0b11101110;
  2685  001EEC  0EEE               	movlw	238
  2686  001EEE  6ED6               	movwf	4054,c	;volatile
  2687                           
  2688                           ; BSR set to: 0
  2689                           ;sort.c: 146: TMR0ON = 1;
  2690  001EF0  8ED5               	bsf	4053,7,c	;volatile
  2691                           
  2692                           ; BSR set to: 0
  2693  001EF2  0012               	return		;funcret
  2694  001EF4                     __end_of_initSortTimer:
  2695                           	opt stack 0
  2696                           tblptru	equ	0xFF8
  2697                           tblptrh	equ	0xFF7
  2698                           tblptrl	equ	0xFF6
  2699                           tablat	equ	0xFF5
  2700                           prodh	equ	0xFF4
  2701                           prodl	equ	0xFF3
  2702                           postinc0	equ	0xFEE
  2703                           wreg	equ	0xFE8
  2704                           postdec1	equ	0xFE5
  2705                           fsr1l	equ	0xFE1
  2706                           indf2	equ	0xFDF
  2707                           postinc2	equ	0xFDE
  2708                           postdec2	equ	0xFDD
  2709                           fsr2h	equ	0xFDA
  2710                           fsr2l	equ	0xFD9
  2711                           status	equ	0xFD8
  2712                           
  2713 ;; *************** function _initServos *****************
  2714 ;; Defined at:
  2715 ;;		line 148 in file "sort.c"
  2716 ;; Parameters:    Size  Location     Type
  2717 ;;		None
  2718 ;; Auto vars:     Size  Location     Type
  2719 ;;		None
  2720 ;; Return value:  Size  Location     Type
  2721 ;;                  1    wreg      void 
  2722 ;; Registers used:
  2723 ;;		wreg, status,2, status,0, cstack
  2724 ;; Tracked objects:
  2725 ;;		On entry : 0/0
  2726 ;;		On exit  : 0/0
  2727 ;;		Unchanged: 0/0
  2728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2733 ;;Total ram usage:        0 bytes
  2734 ;; Hardware stack levels used:    1
  2735 ;; Hardware stack levels required when called:    8
  2736 ;; This function calls:
  2737 ;;		_updateServoPosition
  2738 ;; This function is called by:
  2739 ;;		_Loading
  2740 ;; This function uses a non-reentrant model
  2741 ;;
  2742                           
  2743                           	psect	text5
  2744  0026CC                     __ptext5:
  2745                           	opt stack 0
  2746  0026CC                     _initServos:
  2747                           	opt stack 20
  2748                           
  2749                           ;sort.c: 149: updateServoPosition(1500, 1);
  2750                           
  2751                           ; BSR set to: 0
  2752                           ;incstack = 0
  2753  0026CC  0E05               	movlw	5
  2754  0026CE  0100               	movlb	0	; () banked
  2755  0026D0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  2756  0026D2  0EDC               	movlw	220
  2757  0026D4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  2758  0026D6  0E00               	movlw	0
  2759  0026D8  0100               	movlb	0	; () banked
  2760  0026DA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  2761  0026DC  0E01               	movlw	1
  2762  0026DE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  2763  0026E0  EC17  F011         	call	_updateServoPosition	;wreg free
  2764                           
  2765                           ;sort.c: 150: updateServoPosition(1000, 3);
  2766  0026E4  0E03               	movlw	3
  2767  0026E6  0100               	movlb	0	; () banked
  2768  0026E8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  2769  0026EA  0EE8               	movlw	232
  2770  0026EC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  2771  0026EE  0E00               	movlw	0
  2772  0026F0  0100               	movlb	0	; () banked
  2773  0026F2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  2774  0026F4  0E03               	movlw	3
  2775  0026F6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  2776  0026F8  EC17  F011         	call	_updateServoPosition	;wreg free
  2777                           
  2778                           ;sort.c: 151: TMR1ON = 1;
  2779  0026FC  80CD               	bsf	4045,0,c	;volatile
  2780                           
  2781                           ;sort.c: 152: TMR3ON = 1;
  2782  0026FE  80B1               	bsf	4017,0,c	;volatile
  2783  002700  0012               	return		;funcret
  2784  002702                     __end_of_initServos:
  2785                           	opt stack 0
  2786                           tblptru	equ	0xFF8
  2787                           tblptrh	equ	0xFF7
  2788                           tblptrl	equ	0xFF6
  2789                           tablat	equ	0xFF5
  2790                           prodh	equ	0xFF4
  2791                           prodl	equ	0xFF3
  2792                           postinc0	equ	0xFEE
  2793                           wreg	equ	0xFE8
  2794                           postdec1	equ	0xFE5
  2795                           fsr1l	equ	0xFE1
  2796                           indf2	equ	0xFDF
  2797                           postinc2	equ	0xFDE
  2798                           postdec2	equ	0xFDD
  2799                           fsr2h	equ	0xFDA
  2800                           fsr2l	equ	0xFD9
  2801                           status	equ	0xFD8
  2802                           
  2803 ;; *************** function _updateServoPosition *****************
  2804 ;; Defined at:
  2805 ;;		line 204 in file "sort.c"
  2806 ;; Parameters:    Size  Location     Type
  2807 ;;  time_us         2    0[BANK0 ] int 
  2808 ;;  timer           2    2[BANK0 ] int 
  2809 ;; Auto vars:     Size  Location     Type
  2810 ;;  my_time         2    6[BANK0 ] unsigned int 
  2811 ;; Return value:  Size  Location     Type
  2812 ;;                  1    wreg      void 
  2813 ;; Registers used:
  2814 ;;		wreg, status,2, status,0
  2815 ;; Tracked objects:
  2816 ;;		On entry : 0/0
  2817 ;;		On exit  : 0/0
  2818 ;;		Unchanged: 0/0
  2819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2820 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2821 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2822 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2823 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2824 ;;Total ram usage:        8 bytes
  2825 ;; Hardware stack levels used:    1
  2826 ;; Hardware stack levels required when called:    7
  2827 ;; This function calls:
  2828 ;;		Nothing
  2829 ;; This function is called by:
  2830 ;;		_Loading
  2831 ;;		_initServos
  2832 ;; This function uses a non-reentrant model
  2833 ;;
  2834                           
  2835                           	psect	text6
  2836  00222E                     __ptext6:
  2837                           	opt stack 0
  2838  00222E                     _updateServoPosition:
  2839                           	opt stack 21
  2840                           
  2841                           ;sort.c: 205: unsigned int my_time = 65535 - time_us;
  2842                           
  2843                           ;incstack = 0
  2844  00222E  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
  2845  002232  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
  2846  002236  0100               	movlb	0	; () banked
  2847  002238  1F84               	comf	??_updateServoPosition& (0+255),f,b
  2848  00223A  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
  2849  00223C  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
  2850  00223E  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
  2851  002240  0EFF               	movlw	255
  2852  002242  0100               	movlb	0	; () banked
  2853  002244  2584               	addwf	??_updateServoPosition& (0+255),w,b
  2854  002246  0100               	movlb	0	; () banked
  2855  002248  6F86               	movwf	updateServoPosition@my_time& (0+255),b
  2856  00224A  0EFF               	movlw	255
  2857  00224C  0100               	movlb	0	; () banked
  2858  00224E  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
  2859  002250  0100               	movlb	0	; () banked
  2860  002252  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
  2861                           
  2862                           ;sort.c: 206: switch(timer){
  2863  002254  D015               	goto	l4464
  2864  002256                     l4462:
  2865                           
  2866                           ; BSR set to: 0
  2867                           ;sort.c: 208: servoTimes[0] = my_time >> 8;
  2868  002256  0100               	movlb	0	; () banked
  2869  002258  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
  2870  00225A  0100               	movlb	0	; () banked
  2871  00225C  6FD4               	movwf	_servoTimes& (0+255),b
  2872  00225E  6BD5               	clrf	(_servoTimes+1)& (0+255),b
  2873                           
  2874                           ;sort.c: 209: servoTimes[1] = my_time & 0xFF;
  2875  002260  0100               	movlb	0	; () banked
  2876  002262  5186               	movf	updateServoPosition@my_time& (0+255),w,b
  2877  002264  0100               	movlb	0	; () banked
  2878  002266  6FD6               	movwf	(_servoTimes+2)& (0+255),b
  2879  002268  6BD7               	clrf	(_servoTimes+3)& (0+255),b
  2880  00226A                     l1164:
  2881                           
  2882                           ; BSR set to: 0
  2883                           ;sort.c: 211: servoTimes[2] = my_time >> 8;
  2884  00226A  0100               	movlb	0	; () banked
  2885  00226C  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
  2886  00226E  0100               	movlb	0	; () banked
  2887  002270  6FD8               	movwf	(_servoTimes+4)& (0+255),b
  2888  002272  6BD9               	clrf	(_servoTimes+5)& (0+255),b
  2889                           
  2890                           ;sort.c: 212: servoTimes[3] = my_time & 0xFF;
  2891  002274  0100               	movlb	0	; () banked
  2892  002276  5186               	movf	updateServoPosition@my_time& (0+255),w,b
  2893  002278  0100               	movlb	0	; () banked
  2894  00227A  6FDA               	movwf	(_servoTimes+6)& (0+255),b
  2895  00227C  6BDB               	clrf	(_servoTimes+7)& (0+255),b
  2896                           
  2897                           ;sort.c: 213: }
  2898  00227E  0012               	return	
  2899  002280                     l4464:
  2900                           
  2901                           ; BSR set to: 0
  2902  002280  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
  2903  002284  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
  2904                           
  2905                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2906                           ; Switch size 1, requested type "space"
  2907                           ; Number of cases is 1, Range of values is 0 to 0
  2908                           ; switch strategies available:
  2909                           ; Name         Instructions Cycles
  2910                           ; simple_byte            4     3 (average)
  2911                           ;	Chosen strategy is simple_byte
  2912  002288  0100               	movlb	0	; () banked
  2913  00228A  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
  2914  00228C  0A00               	xorlw	0	; case 0
  2915  00228E  A4D8               	btfss	status,2,c
  2916  002290  0012               	return	
  2917                           
  2918                           ; BSR set to: 0
  2919                           ; Switch size 1, requested type "space"
  2920                           ; Number of cases is 2, Range of values is 1 to 3
  2921                           ; switch strategies available:
  2922                           ; Name         Instructions Cycles
  2923                           ; simple_byte            7     4 (average)
  2924                           ;	Chosen strategy is simple_byte
  2925  002292  0100               	movlb	0	; () banked
  2926  002294  5184               	movf	??_updateServoPosition& (0+255),w,b
  2927  002296  0A01               	xorlw	1	; case 1
  2928  002298  B4D8               	btfsc	status,2,c
  2929  00229A  D7DD               	goto	l4462
  2930  00229C  0A02               	xorlw	2	; case 3
  2931  00229E  A4D8               	btfss	status,2,c
  2932  0022A0  0012               	return	
  2933  0022A2  D7E3               	goto	l1164
  2934  0022A4                     __end_of_updateServoPosition:
  2935                           	opt stack 0
  2936                           tblptru	equ	0xFF8
  2937                           tblptrh	equ	0xFF7
  2938                           tblptrl	equ	0xFF6
  2939                           tablat	equ	0xFF5
  2940                           prodh	equ	0xFF4
  2941                           prodl	equ	0xFF3
  2942                           postinc0	equ	0xFEE
  2943                           wreg	equ	0xFE8
  2944                           postdec1	equ	0xFE5
  2945                           fsr1l	equ	0xFE1
  2946                           indf2	equ	0xFDF
  2947                           postinc2	equ	0xFDE
  2948                           postdec2	equ	0xFDD
  2949                           fsr2h	equ	0xFDA
  2950                           fsr2l	equ	0xFD9
  2951                           status	equ	0xFD8
  2952                           
  2953 ;; *************** function _initFlags *****************
  2954 ;; Defined at:
  2955 ;;		line 120 in file "sort.c"
  2956 ;; Parameters:    Size  Location     Type
  2957 ;;		None
  2958 ;; Auto vars:     Size  Location     Type
  2959 ;;		None
  2960 ;; Return value:  Size  Location     Type
  2961 ;;                  1    wreg      void 
  2962 ;; Registers used:
  2963 ;;		wreg, status,2
  2964 ;; Tracked objects:
  2965 ;;		On entry : 0/0
  2966 ;;		On exit  : 0/0
  2967 ;;		Unchanged: 0/0
  2968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2972 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2973 ;;Total ram usage:        0 bytes
  2974 ;; Hardware stack levels used:    1
  2975 ;; Hardware stack levels required when called:    7
  2976 ;; This function calls:
  2977 ;;		Nothing
  2978 ;; This function is called by:
  2979 ;;		_Loading
  2980 ;; This function uses a non-reentrant model
  2981 ;;
  2982                           
  2983                           	psect	text7
  2984  002620                     __ptext7:
  2985                           	opt stack 0
  2986  002620                     _initFlags:
  2987                           	opt stack 21
  2988                           
  2989                           ;sort.c: 121: f_loadingNewCan = 0;
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;incstack = 0
  2993  002620  0E00               	movlw	0
  2994  002622  0100               	movlb	0	; () banked
  2995  002624  6FF0               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2996  002626  0E00               	movlw	0
  2997  002628  6FEF               	movwf	_f_loadingNewCan& (0+255),b
  2998                           
  2999                           ;sort.c: 122: f_lastCan = 0;
  3000  00262A  0E00               	movlw	0
  3001  00262C  0100               	movlb	0	; () banked
  3002  00262E  6FEE               	movwf	(_f_lastCan+1)& (0+255),b
  3003  002630  0E00               	movlw	0
  3004  002632  6FED               	movwf	_f_lastCan& (0+255),b
  3005                           
  3006                           ;sort.c: 123: f_ID_receive = 1;
  3007  002634  0E00               	movlw	0
  3008  002636  0100               	movlb	0	; () banked
  3009  002638  6FFB               	movwf	(_f_ID_receive+1)& (0+255),b
  3010  00263A  0E01               	movlw	1
  3011  00263C  6FFA               	movwf	_f_ID_receive& (0+255),b
  3012                           
  3013                           ;sort.c: 124: f_can_coming_to_ID = 0;
  3014  00263E  0E00               	movlw	0
  3015  002640  0100               	movlb	0	; () banked
  3016  002642  6FEA               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  3017  002644  0E00               	movlw	0
  3018  002646  6FE9               	movwf	_f_can_coming_to_ID& (0+255),b
  3019                           
  3020                           ;sort.c: 125: f_can_coming_to_distribution = 0;
  3021  002648  0E00               	movlw	0
  3022  00264A  0100               	movlb	0	; () banked
  3023  00264C  6FEC               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  3024  00264E  0E00               	movlw	0
  3025  002650  6FEB               	movwf	_f_can_coming_to_distribution& (0+255),b
  3026                           
  3027                           ;sort.c: 126: f_can_distributed = 0;
  3028  002652  0E00               	movlw	0
  3029  002654  6E72               	movwf	_f_can_distributed+1,c
  3030  002656  0E00               	movlw	0
  3031  002658  6E71               	movwf	_f_can_distributed,c
  3032                           
  3033                           ; BSR set to: 0
  3034  00265A  0012               	return		;funcret
  3035  00265C                     __end_of_initFlags:
  3036                           	opt stack 0
  3037                           tblptru	equ	0xFF8
  3038                           tblptrh	equ	0xFF7
  3039                           tblptrl	equ	0xFF6
  3040                           tablat	equ	0xFF5
  3041                           prodh	equ	0xFF4
  3042                           prodl	equ	0xFF3
  3043                           postinc0	equ	0xFEE
  3044                           wreg	equ	0xFE8
  3045                           postdec1	equ	0xFE5
  3046                           fsr1l	equ	0xFE1
  3047                           indf2	equ	0xFDF
  3048                           postinc2	equ	0xFDE
  3049                           postdec2	equ	0xFDD
  3050                           fsr2h	equ	0xFDA
  3051                           fsr2l	equ	0xFD9
  3052                           status	equ	0xFD8
  3053                           
  3054 ;; *************** function _ID *****************
  3055 ;; Defined at:
  3056 ;;		line 79 in file "sort.c"
  3057 ;; Parameters:    Size  Location     Type
  3058 ;;		None
  3059 ;; Auto vars:     Size  Location     Type
  3060 ;;  magnetic        2   12[BANK0 ] int 
  3061 ;;  side_conduct    2   10[BANK0 ] int 
  3062 ;;  top_bottom_c    2    8[BANK0 ] int 
  3063 ;; Return value:  Size  Location     Type
  3064 ;;                  1    wreg      void 
  3065 ;; Registers used:
  3066 ;;		wreg, status,2, status,0, cstack
  3067 ;; Tracked objects:
  3068 ;;		On entry : 0/0
  3069 ;;		On exit  : 0/0
  3070 ;;		Unchanged: 0/0
  3071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3073 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3074 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3075 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3076 ;;Total ram usage:        8 bytes
  3077 ;; Hardware stack levels used:    1
  3078 ;; Hardware stack levels required when called:    9
  3079 ;; This function calls:
  3080 ;;		_readMAG
  3081 ;; This function is called by:
  3082 ;;		_sort
  3083 ;; This function uses a non-reentrant model
  3084 ;;
  3085                           
  3086                           	psect	text8
  3087  001BFE                     __ptext8:
  3088                           	opt stack 0
  3089  001BFE                     _ID:
  3090                           	opt stack 20
  3091                           
  3092                           ;sort.c: 80: if(f_can_coming_to_ID){
  3093                           
  3094                           ; BSR set to: 0
  3095                           ;incstack = 0
  3096  001BFE  0100               	movlb	0	; () banked
  3097  001C00  51E9               	movf	_f_can_coming_to_ID& (0+255),w,b
  3098  001C02  0100               	movlb	0	; () banked
  3099  001C04  11EA               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  3100  001C06  B4D8               	btfsc	status,2,c
  3101  001C08  0012               	return	
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;sort.c: 82: _delay((unsigned long)((500)*(32000000/4000.0)));
  3105  001C0A  0E15               	movlw	21
  3106  001C0C  0100               	movlb	0	; () banked
  3107  001C0E  6F87               	movwf	(??_ID+1)& (0+255),b
  3108  001C10  0E4B               	movlw	75
  3109  001C12  0100               	movlb	0	; () banked
  3110  001C14  6F86               	movwf	??_ID& (0+255),b
  3111  001C16  0EBE               	movlw	190
  3112  001C18                     u5147:
  3113  001C18  2EE8               	decfsz	wreg,f,c
  3114  001C1A  D7FE               	bra	u5147
  3115  001C1C  2F86               	decfsz	??_ID& (0+255),f,b
  3116  001C1E  D7FC               	bra	u5147
  3117  001C20  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3118  001C22  D7FA               	bra	u5147
  3119  001C24  F000               	nop	
  3120                           
  3121                           ;sort.c: 84: int side_conductivity = 0;
  3122  001C26  0E00               	movlw	0
  3123  001C28  0100               	movlb	0	; () banked
  3124  001C2A  6F8B               	movwf	(ID@side_conductivity+1)& (0+255),b
  3125  001C2C  0E00               	movlw	0
  3126  001C2E  6F8A               	movwf	ID@side_conductivity& (0+255),b
  3127                           
  3128                           ; BSR set to: 0
  3129                           ;sort.c: 85: int magnetic = 0;
  3130  001C30  0E00               	movlw	0
  3131  001C32  0100               	movlb	0	; () banked
  3132  001C34  6F8D               	movwf	(ID@magnetic+1)& (0+255),b
  3133  001C36  0E00               	movlw	0
  3134  001C38  6F8C               	movwf	ID@magnetic& (0+255),b
  3135                           
  3136                           ; BSR set to: 0
  3137                           ;sort.c: 86: int top_bottom_conductivity = 0;
  3138  001C3A  0E00               	movlw	0
  3139  001C3C  0100               	movlb	0	; () banked
  3140  001C3E  6F89               	movwf	(ID@top_bottom_conductivity+1)& (0+255),b
  3141  001C40  0E00               	movlw	0
  3142  001C42  6F88               	movwf	ID@top_bottom_conductivity& (0+255),b
  3143                           
  3144                           ; BSR set to: 0
  3145                           ;sort.c: 88: side_conductivity = PORTAbits.RA2;
  3146  001C44  A480               	btfss	3968,2,c	;volatile
  3147  001C46  D004               	goto	u3830
  3148  001C48  0100               	movlb	0	; () banked
  3149  001C4A  6B86               	clrf	??_ID& (0+255),b
  3150  001C4C  2B86               	incf	??_ID& (0+255),f,b
  3151  001C4E  D002               	goto	u3838
  3152  001C50                     u3830:
  3153  001C50  0100               	movlb	0	; () banked
  3154  001C52  6B86               	clrf	??_ID& (0+255),b
  3155  001C54                     u3838:
  3156  001C54  0100               	movlb	0	; () banked
  3157  001C56  5186               	movf	??_ID& (0+255),w,b
  3158  001C58  0100               	movlb	0	; () banked
  3159  001C5A  6F8A               	movwf	ID@side_conductivity& (0+255),b
  3160  001C5C  6B8B               	clrf	(ID@side_conductivity+1)& (0+255),b
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;sort.c: 89: if(!side_conductivity){
  3164  001C5E  0100               	movlb	0	; () banked
  3165  001C60  518A               	movf	ID@side_conductivity& (0+255),w,b
  3166  001C62  0100               	movlb	0	; () banked
  3167  001C64  118B               	iorwf	(ID@side_conductivity+1)& (0+255),w,b
  3168  001C66  A4D8               	btfss	status,2,c
  3169  001C68  D028               	goto	l5234
  3170                           
  3171                           ; BSR set to: 0
  3172                           ;sort.c: 90: readMAG();
  3173  001C6A  EC4D  F012         	call	_readMAG	;wreg free
  3174                           
  3175                           ;sort.c: 91: magnetic = MAG_signal;
  3176  001C6E  C0E3  F08C         	movff	_MAG_signal,ID@magnetic
  3177  001C72  C0E4  F08D         	movff	_MAG_signal+1,ID@magnetic+1
  3178                           
  3179                           ;sort.c: 92: if(!magnetic){
  3180  001C76  0100               	movlb	0	; () banked
  3181  001C78  518C               	movf	ID@magnetic& (0+255),w,b
  3182  001C7A  0100               	movlb	0	; () banked
  3183  001C7C  118D               	iorwf	(ID@magnetic+1)& (0+255),w,b
  3184  001C7E  A4D8               	btfss	status,2,c
  3185  001C80  D01C               	goto	l5234
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;sort.c: 93: LATAbits.LATA3 = 1;
  3189  001C82  8689               	bsf	3977,3,c	;volatile
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;sort.c: 95: _delay((unsigned long)((100)*(32000000/4000.0)));
  3193  001C84  0E05               	movlw	5
  3194  001C86  0100               	movlb	0	; () banked
  3195  001C88  6F87               	movwf	(??_ID+1)& (0+255),b
  3196  001C8A  0E0F               	movlw	15
  3197  001C8C  0100               	movlb	0	; () banked
  3198  001C8E  6F86               	movwf	??_ID& (0+255),b
  3199  001C90  0EF1               	movlw	241
  3200  001C92                     u5157:
  3201  001C92  2EE8               	decfsz	wreg,f,c
  3202  001C94  D7FE               	bra	u5157
  3203  001C96  2F86               	decfsz	??_ID& (0+255),f,b
  3204  001C98  D7FC               	bra	u5157
  3205  001C9A  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3206  001C9C  D7FA               	bra	u5157
  3207                           
  3208                           ;sort.c: 96: top_bottom_conductivity = PORTAbits.RA2;
  3209  001C9E  A480               	btfss	3968,2,c	;volatile
  3210  001CA0  D004               	goto	u3860
  3211  001CA2  0100               	movlb	0	; () banked
  3212  001CA4  6B86               	clrf	??_ID& (0+255),b
  3213  001CA6  2B86               	incf	??_ID& (0+255),f,b
  3214  001CA8  D002               	goto	u3868
  3215  001CAA                     u3860:
  3216  001CAA  0100               	movlb	0	; () banked
  3217  001CAC  6B86               	clrf	??_ID& (0+255),b
  3218  001CAE                     u3868:
  3219  001CAE  0100               	movlb	0	; () banked
  3220  001CB0  5186               	movf	??_ID& (0+255),w,b
  3221  001CB2  0100               	movlb	0	; () banked
  3222  001CB4  6F88               	movwf	ID@top_bottom_conductivity& (0+255),b
  3223  001CB6  6B89               	clrf	(ID@top_bottom_conductivity+1)& (0+255),b
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;sort.c: 97: LATAbits.LATA3 = 0;
  3227  001CB8  9689               	bcf	3977,3,c	;volatile
  3228  001CBA                     l5234:
  3229                           
  3230                           ; BSR set to: 0
  3231                           ;sort.c: 98: }
  3232                           ;sort.c: 99: }
  3233                           ;sort.c: 104: f_can_coming_to_distribution = 1;
  3234  001CBA  0E00               	movlw	0
  3235  001CBC  0100               	movlb	0	; () banked
  3236  001CBE  6FEC               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  3237  001CC0  0E01               	movlw	1
  3238  001CC2  6FEB               	movwf	_f_can_coming_to_distribution& (0+255),b
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;sort.c: 106: f_can_coming_to_ID = 0;
  3242  001CC4  0E00               	movlw	0
  3243  001CC6  0100               	movlb	0	; () banked
  3244  001CC8  6FEA               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  3245  001CCA  0E00               	movlw	0
  3246  001CCC  6FE9               	movwf	_f_can_coming_to_ID& (0+255),b
  3247  001CCE  0012               	return	
  3248  001CD0                     __end_of_ID:
  3249                           	opt stack 0
  3250                           tblptru	equ	0xFF8
  3251                           tblptrh	equ	0xFF7
  3252                           tblptrl	equ	0xFF6
  3253                           tablat	equ	0xFF5
  3254                           prodh	equ	0xFF4
  3255                           prodl	equ	0xFF3
  3256                           postinc0	equ	0xFEE
  3257                           wreg	equ	0xFE8
  3258                           postdec1	equ	0xFE5
  3259                           fsr1l	equ	0xFE1
  3260                           indf2	equ	0xFDF
  3261                           postinc2	equ	0xFDE
  3262                           postdec2	equ	0xFDD
  3263                           fsr2h	equ	0xFDA
  3264                           fsr2l	equ	0xFD9
  3265                           status	equ	0xFD8
  3266                           
  3267 ;; *************** function _readMAG *****************
  3268 ;; Defined at:
  3269 ;;		line 28 in file "ADCFunctionality.c"
  3270 ;; Parameters:    Size  Location     Type
  3271 ;;		None
  3272 ;; Auto vars:     Size  Location     Type
  3273 ;;  res             2    4[BANK0 ] int 
  3274 ;; Return value:  Size  Location     Type
  3275 ;;                  1    wreg      void 
  3276 ;; Registers used:
  3277 ;;		wreg, status,2, status,0, cstack
  3278 ;; Tracked objects:
  3279 ;;		On entry : 0/0
  3280 ;;		On exit  : 0/0
  3281 ;;		Unchanged: 0/0
  3282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3284 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3285 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3286 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3287 ;;Total ram usage:        4 bytes
  3288 ;; Hardware stack levels used:    1
  3289 ;; Hardware stack levels required when called:    8
  3290 ;; This function calls:
  3291 ;;		_readADC
  3292 ;; This function is called by:
  3293 ;;		_ID
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297                           	psect	text9
  3298  00249A                     __ptext9:
  3299                           	opt stack 0
  3300  00249A                     _readMAG:
  3301                           	opt stack 20
  3302                           
  3303                           ;ADCFunctionality.c: 29: readADC(1);
  3304                           
  3305                           ; BSR set to: 0
  3306                           ;incstack = 0
  3307  00249A  0E01               	movlw	1
  3308  00249C  ECD6  F014         	call	_readADC
  3309                           
  3310                           ;ADCFunctionality.c: 30: int res = ADRESH<<8 | ADRESL;
  3311  0024A0  50C3               	movf	4035,w,c	;volatile
  3312  0024A2  CFC4 F082          	movff	4036,??_readMAG	;volatile
  3313  0024A6  0100               	movlb	0	; () banked
  3314  0024A8  6B83               	clrf	(??_readMAG+1)& (0+255),b
  3315  0024AA  C082  F083         	movff	??_readMAG,??_readMAG+1
  3316  0024AE  0100               	movlb	0	; () banked
  3317  0024B0  6B82               	clrf	??_readMAG& (0+255),b
  3318  0024B2  0100               	movlb	0	; () banked
  3319  0024B4  1182               	iorwf	??_readMAG& (0+255),w,b
  3320  0024B6  0100               	movlb	0	; () banked
  3321  0024B8  6F84               	movwf	readMAG@res& (0+255),b
  3322  0024BA  0100               	movlb	0	; () banked
  3323  0024BC  5183               	movf	(??_readMAG+1)& (0+255),w,b
  3324  0024BE  0100               	movlb	0	; () banked
  3325  0024C0  6F85               	movwf	(readMAG@res+1)& (0+255),b
  3326                           
  3327                           ; BSR set to: 0
  3328                           ;ADCFunctionality.c: 31: MAG_signal = (res < THMAG) ? 1 : 0;
  3329  0024C2  0100               	movlb	0	; () banked
  3330  0024C4  51F8               	movf	_THMAG& (0+255),w,b
  3331  0024C6  0100               	movlb	0	; () banked
  3332  0024C8  5D84               	subwf	readMAG@res& (0+255),w,b
  3333  0024CA  0100               	movlb	0	; () banked
  3334  0024CC  5185               	movf	(readMAG@res+1)& (0+255),w,b
  3335  0024CE  0A80               	xorlw	128
  3336  0024D0  0100               	movlb	0	; () banked
  3337  0024D2  6F82               	movwf	??_readMAG& (0+255),b
  3338  0024D4  0100               	movlb	0	; () banked
  3339  0024D6  51F9               	movf	(_THMAG+1)& (0+255),w,b
  3340  0024D8  0A80               	xorlw	128
  3341  0024DA  0100               	movlb	0	; () banked
  3342  0024DC  5982               	subwfb	??_readMAG& (0+255),w,b
  3343  0024DE  B0D8               	btfsc	status,0,c
  3344  0024E0  D002               	goto	u3390
  3345  0024E2  0E01               	movlw	1
  3346  0024E4  D001               	goto	u3400
  3347  0024E6                     u3390:
  3348  0024E6  0E00               	movlw	0
  3349  0024E8                     u3400:
  3350  0024E8  0100               	movlb	0	; () banked
  3351  0024EA  6FE3               	movwf	_MAG_signal& (0+255),b
  3352  0024EC  6BE4               	clrf	(_MAG_signal+1)& (0+255),b
  3353                           
  3354                           ; BSR set to: 0
  3355  0024EE  0012               	return		;funcret
  3356  0024F0                     __end_of_readMAG:
  3357                           	opt stack 0
  3358                           tblptru	equ	0xFF8
  3359                           tblptrh	equ	0xFF7
  3360                           tblptrl	equ	0xFF6
  3361                           tablat	equ	0xFF5
  3362                           prodh	equ	0xFF4
  3363                           prodl	equ	0xFF3
  3364                           postinc0	equ	0xFEE
  3365                           wreg	equ	0xFE8
  3366                           postdec1	equ	0xFE5
  3367                           fsr1l	equ	0xFE1
  3368                           indf2	equ	0xFDF
  3369                           postinc2	equ	0xFDE
  3370                           postdec2	equ	0xFDD
  3371                           fsr2h	equ	0xFDA
  3372                           fsr2l	equ	0xFD9
  3373                           status	equ	0xFD8
  3374                           
  3375 ;; *************** function _readADC *****************
  3376 ;; Defined at:
  3377 ;;		line 14 in file "ADCFunctionality.c"
  3378 ;; Parameters:    Size  Location     Type
  3379 ;;  channel         1    wreg     unsigned char 
  3380 ;; Auto vars:     Size  Location     Type
  3381 ;;  channel         1    1[BANK0 ] unsigned char 
  3382 ;; Return value:  Size  Location     Type
  3383 ;;                  1    wreg      void 
  3384 ;; Registers used:
  3385 ;;		wreg, status,2, status,0, cstack
  3386 ;; Tracked objects:
  3387 ;;		On entry : 0/0
  3388 ;;		On exit  : 0/0
  3389 ;;		Unchanged: 0/0
  3390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3392 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3393 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3394 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3395 ;;Total ram usage:        2 bytes
  3396 ;; Hardware stack levels used:    1
  3397 ;; Hardware stack levels required when called:    7
  3398 ;; This function calls:
  3399 ;;		Nothing
  3400 ;; This function is called by:
  3401 ;;		_readMAG
  3402 ;;		_readIR
  3403 ;; This function uses a non-reentrant model
  3404 ;;
  3405                           
  3406                           	psect	text10
  3407  0029AC                     __ptext10:
  3408                           	opt stack 0
  3409  0029AC                     _readADC:
  3410                           	opt stack 20
  3411                           
  3412                           ; BSR set to: 0
  3413                           ;incstack = 0
  3414                           ;readADC@channel stored from wreg
  3415  0029AC  0100               	movlb	0	; () banked
  3416  0029AE  6F81               	movwf	readADC@channel& (0+255),b
  3417                           
  3418                           ;ADCFunctionality.c: 16: ADCON0 = ((channel <<2));
  3419  0029B0  0100               	movlb	0	; () banked
  3420  0029B2  4581               	rlncf	readADC@channel& (0+255),w,b
  3421  0029B4  46E8               	rlncf	wreg,f,c
  3422  0029B6  0BFC               	andlw	252
  3423  0029B8  6EC2               	movwf	4034,c	;volatile
  3424                           
  3425                           ; BSR set to: 0
  3426                           ;ADCFunctionality.c: 17: ADON = 1;
  3427  0029BA  80C2               	bsf	4034,0,c	;volatile
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;ADCFunctionality.c: 18: ADCON0bits.GO = 1;
  3431  0029BC  82C2               	bsf	4034,1,c	;volatile
  3432                           
  3433                           ;ADCFunctionality.c: 19: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
  3434  0029BE  D009               	goto	l4304
  3435  0029C0                     l4302:
  3436  0029C0  0E34               	movlw	52
  3437  0029C2  0100               	movlb	0	; () banked
  3438  0029C4  6F80               	movwf	??_readADC& (0+255),b
  3439  0029C6  0EF1               	movlw	241
  3440  0029C8                     u5167:
  3441  0029C8  2EE8               	decfsz	wreg,f,c
  3442  0029CA  D7FE               	bra	u5167
  3443  0029CC  2F80               	decfsz	??_readADC& (0+255),f,b
  3444  0029CE  D7FC               	bra	u5167
  3445  0029D0  D000               	nop2	
  3446  0029D2                     l4304:
  3447  0029D2  A2C2               	btfss	4034,1,c	;volatile
  3448  0029D4  0012               	return	
  3449  0029D6  D7F4               	goto	l4302
  3450  0029D8                     __end_of_readADC:
  3451                           	opt stack 0
  3452                           tblptru	equ	0xFF8
  3453                           tblptrh	equ	0xFF7
  3454                           tblptrl	equ	0xFF6
  3455                           tablat	equ	0xFF5
  3456                           prodh	equ	0xFF4
  3457                           prodl	equ	0xFF3
  3458                           postinc0	equ	0xFEE
  3459                           wreg	equ	0xFE8
  3460                           postdec1	equ	0xFE5
  3461                           fsr1l	equ	0xFE1
  3462                           indf2	equ	0xFDF
  3463                           postinc2	equ	0xFDE
  3464                           postdec2	equ	0xFDD
  3465                           fsr2h	equ	0xFDA
  3466                           fsr2l	equ	0xFD9
  3467                           status	equ	0xFD8
  3468                           
  3469 ;; *************** function _Distribution *****************
  3470 ;; Defined at:
  3471 ;;		line 109 in file "sort.c"
  3472 ;; Parameters:    Size  Location     Type
  3473 ;;		None
  3474 ;; Auto vars:     Size  Location     Type
  3475 ;;		None
  3476 ;; Return value:  Size  Location     Type
  3477 ;;                  1    wreg      void 
  3478 ;; Registers used:
  3479 ;;		wreg, status,2, status,0
  3480 ;; Tracked objects:
  3481 ;;		On entry : 0/0
  3482 ;;		On exit  : 0/0
  3483 ;;		Unchanged: 0/0
  3484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3489 ;;Total ram usage:        0 bytes
  3490 ;; Hardware stack levels used:    1
  3491 ;; Hardware stack levels required when called:    7
  3492 ;; This function calls:
  3493 ;;		Nothing
  3494 ;; This function is called by:
  3495 ;;		_sort
  3496 ;; This function uses a non-reentrant model
  3497 ;;
  3498                           
  3499                           	psect	text11
  3500  002AE6                     __ptext11:
  3501                           	opt stack 0
  3502  002AE6                     _Distribution:
  3503                           	opt stack 22
  3504                           
  3505                           ;sort.c: 110: if(f_can_coming_to_distribution){
  3506                           
  3507                           ;incstack = 0
  3508  002AE6  0100               	movlb	0	; () banked
  3509  002AE8  51EB               	movf	_f_can_coming_to_distribution& (0+255),w,b
  3510  002AEA  0100               	movlb	0	; () banked
  3511  002AEC  11EC               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  3512  002AEE  B4D8               	btfsc	status,2,c
  3513  002AF0  0012               	return	
  3514                           
  3515                           ; BSR set to: 0
  3516                           ;sort.c: 115: f_can_coming_to_distribution = 0;
  3517  002AF2  0E00               	movlw	0
  3518  002AF4  0100               	movlb	0	; () banked
  3519  002AF6  6FEC               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  3520  002AF8  0E00               	movlw	0
  3521  002AFA  6FEB               	movwf	_f_can_coming_to_distribution& (0+255),b
  3522                           
  3523                           ;sort.c: 116: f_can_distributed = 1;
  3524  002AFC  0E00               	movlw	0
  3525  002AFE  6E72               	movwf	_f_can_distributed+1,c
  3526  002B00  0E01               	movlw	1
  3527  002B02  6E71               	movwf	_f_can_distributed,c
  3528  002B04  0012               	return	
  3529  002B06                     __end_of_Distribution:
  3530                           	opt stack 0
  3531                           tblptru	equ	0xFF8
  3532                           tblptrh	equ	0xFF7
  3533                           tblptrl	equ	0xFF6
  3534                           tablat	equ	0xFF5
  3535                           prodh	equ	0xFF4
  3536                           prodl	equ	0xFF3
  3537                           postinc0	equ	0xFEE
  3538                           wreg	equ	0xFE8
  3539                           postdec1	equ	0xFE5
  3540                           fsr1l	equ	0xFE1
  3541                           indf2	equ	0xFDF
  3542                           postinc2	equ	0xFDE
  3543                           postdec2	equ	0xFDD
  3544                           fsr2h	equ	0xFDA
  3545                           fsr2l	equ	0xFD9
  3546                           status	equ	0xFD8
  3547                           
  3548 ;; *************** function _machineConfig *****************
  3549 ;; Defined at:
  3550 ;;		line 14 in file "MachineConfig.c"
  3551 ;; Parameters:    Size  Location     Type
  3552 ;;		None
  3553 ;; Auto vars:     Size  Location     Type
  3554 ;;		None
  3555 ;; Return value:  Size  Location     Type
  3556 ;;                  1    wreg      void 
  3557 ;; Registers used:
  3558 ;;		wreg, status,2
  3559 ;; Tracked objects:
  3560 ;;		On entry : 0/0
  3561 ;;		On exit  : 0/0
  3562 ;;		Unchanged: 0/0
  3563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3568 ;;Total ram usage:        0 bytes
  3569 ;; Hardware stack levels used:    1
  3570 ;; Hardware stack levels required when called:    7
  3571 ;; This function calls:
  3572 ;;		Nothing
  3573 ;; This function is called by:
  3574 ;;		_main
  3575 ;; This function uses a non-reentrant model
  3576 ;;
  3577                           
  3578                           	psect	text12
  3579  002440                     __ptext12:
  3580                           	opt stack 0
  3581  002440                     _machineConfig:
  3582                           	opt stack 23
  3583                           
  3584                           ;MachineConfig.c: 16: OSCCON = 0xF0;
  3585                           
  3586                           ; BSR set to: 0
  3587                           ;incstack = 0
  3588  002440  0EF0               	movlw	240
  3589  002442  6ED3               	movwf	4051,c	;volatile
  3590                           
  3591                           ;MachineConfig.c: 17: OSCTUNEbits.PLLEN = 1;
  3592  002444  8C9B               	bsf	3995,6,c	;volatile
  3593                           
  3594                           ;MachineConfig.c: 21: TRISA = 0b01000111;
  3595  002446  0E47               	movlw	71
  3596  002448  6E92               	movwf	3986,c	;volatile
  3597                           
  3598                           ;MachineConfig.c: 23: TRISB = 0b11110010;
  3599  00244A  0EF2               	movlw	242
  3600  00244C  6E93               	movwf	3987,c	;volatile
  3601                           
  3602                           ;MachineConfig.c: 26: TRISC = 0x00;
  3603  00244E  0E00               	movlw	0
  3604  002450  6E94               	movwf	3988,c	;volatile
  3605                           
  3606                           ;MachineConfig.c: 30: TRISD = 0x00;
  3607  002452  0E00               	movlw	0
  3608  002454  6E95               	movwf	3989,c	;volatile
  3609                           
  3610                           ;MachineConfig.c: 33: TRISE = 0x00;
  3611  002456  0E00               	movlw	0
  3612  002458  6E96               	movwf	3990,c	;volatile
  3613                           
  3614                           ;MachineConfig.c: 36: LATA = 0x00;
  3615  00245A  0E00               	movlw	0
  3616  00245C  6E89               	movwf	3977,c	;volatile
  3617                           
  3618                           ;MachineConfig.c: 37: LATB = 0x00;
  3619  00245E  0E00               	movlw	0
  3620  002460  6E8A               	movwf	3978,c	;volatile
  3621                           
  3622                           ;MachineConfig.c: 38: LATC = 0x00;
  3623  002462  0E00               	movlw	0
  3624  002464  6E8B               	movwf	3979,c	;volatile
  3625                           
  3626                           ;MachineConfig.c: 39: LATD = 0x00;
  3627  002466  0E00               	movlw	0
  3628  002468  6E8C               	movwf	3980,c	;volatile
  3629                           
  3630                           ;MachineConfig.c: 40: LATE = 0x00;
  3631  00246A  0E00               	movlw	0
  3632  00246C  6E8D               	movwf	3981,c	;volatile
  3633                           
  3634                           ;MachineConfig.c: 43: ADCON0 = 0x00;
  3635  00246E  0E00               	movlw	0
  3636  002470  6EC2               	movwf	4034,c	;volatile
  3637                           
  3638                           ;MachineConfig.c: 44: ADCON1 = 0x0D;
  3639  002472  0E0D               	movlw	13
  3640  002474  6EC1               	movwf	4033,c	;volatile
  3641                           
  3642                           ;MachineConfig.c: 47: VCFG1 = 0;
  3643  002476  9AC1               	bcf	4033,5,c	;volatile
  3644                           
  3645                           ;MachineConfig.c: 48: VCFG0 = 0;
  3646  002478  98C1               	bcf	4033,4,c	;volatile
  3647                           
  3648                           ;MachineConfig.c: 49: CVRCON = 0x00;
  3649  00247A  0E00               	movlw	0
  3650  00247C  6EB5               	movwf	4021,c	;volatile
  3651                           
  3652                           ;MachineConfig.c: 50: CMCONbits.CIS = 0;
  3653  00247E  96B4               	bcf	4020,3,c	;volatile
  3654                           
  3655                           ;MachineConfig.c: 51: ADFM = 1;
  3656  002480  8EC0               	bsf	4032,7,c	;volatile
  3657                           
  3658                           ;MachineConfig.c: 52: nRBPU = 0;
  3659  002482  9EF1               	bcf	intcon2,7,c	;volatile
  3660                           
  3661                           ;MachineConfig.c: 55: INT1IE = 1;
  3662  002484  86F0               	bsf	intcon3,3,c	;volatile
  3663                           
  3664                           ;MachineConfig.c: 57: TMR0IE = 1;
  3665  002486  8AF2               	bsf	intcon,5,c	;volatile
  3666                           
  3667                           ;MachineConfig.c: 58: TMR1IE = 1;
  3668  002488  809D               	bsf	3997,0,c	;volatile
  3669                           
  3670                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  3671  00248A  0EB0               	movlw	176
  3672  00248C  6ECD               	movwf	4045,c	;volatile
  3673                           
  3674                           ;MachineConfig.c: 60: TMR2IE = 1;
  3675  00248E  829D               	bsf	3997,1,c	;volatile
  3676                           
  3677                           ;MachineConfig.c: 61: TMR3IE = 1;
  3678  002490  82A0               	bsf	4000,1,c	;volatile
  3679                           
  3680                           ;MachineConfig.c: 62: PEIE = 1;
  3681  002492  8CF2               	bsf	intcon,6,c	;volatile
  3682                           
  3683                           ;MachineConfig.c: 64: ADIE = 1;
  3684  002494  8C9D               	bsf	3997,6,c	;volatile
  3685                           
  3686                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  3687  002496  9EF2               	bcf	intcon,7,c	;volatile
  3688  002498  0012               	return		;funcret
  3689  00249A                     __end_of_machineConfig:
  3690                           	opt stack 0
  3691                           tblptru	equ	0xFF8
  3692                           tblptrh	equ	0xFF7
  3693                           tblptrl	equ	0xFF6
  3694                           tablat	equ	0xFF5
  3695                           prodh	equ	0xFF4
  3696                           prodl	equ	0xFF3
  3697                           intcon	equ	0xFF2
  3698                           intcon2	equ	0xFF1
  3699                           intcon3	equ	0xFF0
  3700                           postinc0	equ	0xFEE
  3701                           wreg	equ	0xFE8
  3702                           postdec1	equ	0xFE5
  3703                           fsr1l	equ	0xFE1
  3704                           indf2	equ	0xFDF
  3705                           postinc2	equ	0xFDE
  3706                           postdec2	equ	0xFDD
  3707                           fsr2h	equ	0xFDA
  3708                           fsr2l	equ	0xFD9
  3709                           status	equ	0xFD8
  3710                           
  3711 ;; *************** function _initUI *****************
  3712 ;; Defined at:
  3713 ;;		line 61 in file "UI.c"
  3714 ;; Parameters:    Size  Location     Type
  3715 ;;		None
  3716 ;; Auto vars:     Size  Location     Type
  3717 ;;		None
  3718 ;; Return value:  Size  Location     Type
  3719 ;;                  1    wreg      void 
  3720 ;; Registers used:
  3721 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3722 ;; Tracked objects:
  3723 ;;		On entry : 0/0
  3724 ;;		On exit  : 0/0
  3725 ;;		Unchanged: 0/0
  3726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3731 ;;Total ram usage:        0 bytes
  3732 ;; Hardware stack levels used:    1
  3733 ;; Hardware stack levels required when called:   12
  3734 ;; This function calls:
  3735 ;;		_change_state_to_menu_start
  3736 ;;		_loadRTC
  3737 ;; This function is called by:
  3738 ;;		_main
  3739 ;; This function uses a non-reentrant model
  3740 ;;
  3741                           
  3742                           	psect	text13
  3743  002B24                     __ptext13:
  3744                           	opt stack 0
  3745  002B24                     _initUI:
  3746                           	opt stack 18
  3747                           
  3748                           ;UI.c: 62: (INTCONbits.GIE = 1);
  3749                           
  3750                           ;incstack = 0
  3751  002B24  8EF2               	bsf	intcon,7,c	;volatile
  3752                           
  3753                           ;UI.c: 63: machine_state = UI_state;
  3754  002B26  0E00               	movlw	0
  3755  002B28  0100               	movlb	0	; () banked
  3756  002B2A  6FF7               	movwf	_machine_state& (0+255),b
  3757                           
  3758                           ; BSR set to: 0
  3759                           ;UI.c: 65: loadRTC();
  3760  002B2C  ECCB  F00F         	call	_loadRTC	;wreg free
  3761                           
  3762                           ;UI.c: 67: change_state_to_menu_start();
  3763  002B30  ECEC  F014         	call	_change_state_to_menu_start	;wreg free
  3764                           
  3765                           ;UI.c: 68: firstboot = 1;
  3766  002B34  0E00               	movlw	0
  3767  002B36  6E74               	movwf	_firstboot+1,c
  3768  002B38  0E01               	movlw	1
  3769  002B3A  6E73               	movwf	_firstboot,c
  3770  002B3C  0012               	return		;funcret
  3771  002B3E                     __end_of_initUI:
  3772                           	opt stack 0
  3773                           tblptru	equ	0xFF8
  3774                           tblptrh	equ	0xFF7
  3775                           tblptrl	equ	0xFF6
  3776                           tablat	equ	0xFF5
  3777                           prodh	equ	0xFF4
  3778                           prodl	equ	0xFF3
  3779                           intcon	equ	0xFF2
  3780                           intcon2	equ	0xFF1
  3781                           intcon3	equ	0xFF0
  3782                           postinc0	equ	0xFEE
  3783                           wreg	equ	0xFE8
  3784                           postdec1	equ	0xFE5
  3785                           fsr1l	equ	0xFE1
  3786                           indf2	equ	0xFDF
  3787                           postinc2	equ	0xFDE
  3788                           postdec2	equ	0xFDD
  3789                           fsr2h	equ	0xFDA
  3790                           fsr2l	equ	0xFD9
  3791                           status	equ	0xFD8
  3792                           
  3793 ;; *************** function _loadRTC *****************
  3794 ;; Defined at:
  3795 ;;		line 27 in file "RTC.c"
  3796 ;; Parameters:    Size  Location     Type
  3797 ;;		None
  3798 ;; Auto vars:     Size  Location     Type
  3799 ;;  i               2   22[BANK0 ] int 
  3800 ;; Return value:  Size  Location     Type
  3801 ;;                  1    wreg      void 
  3802 ;; Registers used:
  3803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3804 ;; Tracked objects:
  3805 ;;		On entry : 0/0
  3806 ;;		On exit  : 0/0
  3807 ;;		Unchanged: 0/0
  3808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3810 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3811 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;Total ram usage:        3 bytes
  3814 ;; Hardware stack levels used:    1
  3815 ;; Hardware stack levels required when called:    9
  3816 ;; This function calls:
  3817 ;;		_I2C_Master_Init
  3818 ;;		_I2C_Master_Start
  3819 ;;		_I2C_Master_Stop
  3820 ;;		_I2C_Master_Write
  3821 ;; This function is called by:
  3822 ;;		_initUI
  3823 ;; This function uses a non-reentrant model
  3824 ;;
  3825                           
  3826                           	psect	text14
  3827  001F96                     __ptext14:
  3828                           	opt stack 0
  3829  001F96                     _loadRTC:
  3830                           	opt stack 20
  3831                           
  3832                           ;RTC.c: 29: I2C_Master_Init(10000);
  3833                           
  3834                           ;incstack = 0
  3835  001F96  0E10               	movlw	16
  3836  001F98  0100               	movlb	0	; () banked
  3837  001F9A  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3838  001F9C  0E27               	movlw	39
  3839  001F9E  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3840  001FA0  0E00               	movlw	0
  3841  001FA2  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3842  001FA4  0E00               	movlw	0
  3843  001FA6  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3844  001FA8  ECF0  F011         	call	_I2C_Master_Init	;wreg free
  3845                           
  3846                           ;RTC.c: 31: (INTCONbits.GIE = 0);
  3847  001FAC  9EF2               	bcf	intcon,7,c	;volatile
  3848                           
  3849                           ;RTC.c: 33: I2C_Master_Start();
  3850  001FAE  ECFA  F015         	call	_I2C_Master_Start	;wreg free
  3851                           
  3852                           ;RTC.c: 34: I2C_Master_Write(0b11010000);
  3853  001FB2  0E00               	movlw	0
  3854  001FB4  0100               	movlb	0	; () banked
  3855  001FB6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3856  001FB8  0ED0               	movlw	208
  3857  001FBA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3858  001FBC  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  3859                           
  3860                           ;RTC.c: 35: I2C_Master_Write(0x00);
  3861  001FC0  0E00               	movlw	0
  3862  001FC2  0100               	movlb	0	; () banked
  3863  001FC4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3864  001FC6  0E00               	movlw	0
  3865  001FC8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3866  001FCA  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  3867                           
  3868                           ;RTC.c: 36: for(int i = 0; i<7; i++){
  3869  001FCE  0E00               	movlw	0
  3870  001FD0  0100               	movlb	0	; () banked
  3871  001FD2  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  3872  001FD4  0E00               	movlw	0
  3873  001FD6  6F96               	movwf	loadRTC@i& (0+255),b
  3874  001FD8                     l4896:
  3875                           
  3876                           ; BSR set to: 0
  3877  001FD8  0100               	movlb	0	; () banked
  3878  001FDA  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  3879  001FDC  D008               	goto	l4900
  3880  001FDE  0100               	movlb	0	; () banked
  3881  001FE0  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  3882  001FE2  E11B               	bnz	l4906
  3883  001FE4  0E07               	movlw	7
  3884  001FE6  0100               	movlb	0	; () banked
  3885  001FE8  5D96               	subwf	loadRTC@i& (0+255),w,b
  3886  001FEA  B0D8               	btfsc	status,0,c
  3887  001FEC  D016               	goto	l4906
  3888  001FEE                     l4900:
  3889                           
  3890                           ; BSR set to: 0
  3891                           ;RTC.c: 37: I2C_Master_Write(time[i]);
  3892  001FEE  0EDC               	movlw	low _time
  3893  001FF0  0100               	movlb	0	; () banked
  3894  001FF2  2596               	addwf	loadRTC@i& (0+255),w,b
  3895  001FF4  6ED9               	movwf	fsr2l,c
  3896  001FF6  0E00               	movlw	high _time
  3897  001FF8  0100               	movlb	0	; () banked
  3898  001FFA  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  3899  001FFC  6EDA               	movwf	fsr2h,c
  3900  001FFE  50DF               	movf	indf2,w,c
  3901  002000  0100               	movlb	0	; () banked
  3902  002002  6F95               	movwf	??_loadRTC& (0+255),b
  3903  002004  0100               	movlb	0	; () banked
  3904  002006  5195               	movf	??_loadRTC& (0+255),w,b
  3905  002008  0100               	movlb	0	; () banked
  3906  00200A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3907  00200C  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  3908  00200E  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  3909  002012  0100               	movlb	0	; () banked
  3910  002014  4B96               	infsnz	loadRTC@i& (0+255),f,b
  3911  002016  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  3912  002018  D7DF               	goto	l4896
  3913  00201A                     l4906:
  3914                           
  3915                           ; BSR set to: 0
  3916                           ;RTC.c: 38: }
  3917                           ;RTC.c: 39: I2C_Master_Stop();
  3918  00201A  ECF6  F015         	call	_I2C_Master_Stop	;wreg free
  3919                           
  3920                           ;RTC.c: 40: (INTCONbits.GIE = 1);
  3921  00201E  8EF2               	bsf	intcon,7,c	;volatile
  3922  002020  0012               	return		;funcret
  3923  002022                     __end_of_loadRTC:
  3924                           	opt stack 0
  3925                           tblptru	equ	0xFF8
  3926                           tblptrh	equ	0xFF7
  3927                           tblptrl	equ	0xFF6
  3928                           tablat	equ	0xFF5
  3929                           prodh	equ	0xFF4
  3930                           prodl	equ	0xFF3
  3931                           intcon	equ	0xFF2
  3932                           intcon2	equ	0xFF1
  3933                           intcon3	equ	0xFF0
  3934                           postinc0	equ	0xFEE
  3935                           wreg	equ	0xFE8
  3936                           postdec1	equ	0xFE5
  3937                           fsr1l	equ	0xFE1
  3938                           indf2	equ	0xFDF
  3939                           postinc2	equ	0xFDE
  3940                           postdec2	equ	0xFDD
  3941                           fsr2h	equ	0xFDA
  3942                           fsr2l	equ	0xFD9
  3943                           status	equ	0xFD8
  3944                           
  3945 ;; *************** function _I2C_Master_Init *****************
  3946 ;; Defined at:
  3947 ;;		line 14 in file "I2C.c"
  3948 ;; Parameters:    Size  Location     Type
  3949 ;;  c               4   13[BANK0 ] const unsigned long 
  3950 ;; Auto vars:     Size  Location     Type
  3951 ;;		None
  3952 ;; Return value:  Size  Location     Type
  3953 ;;                  1    wreg      void 
  3954 ;; Registers used:
  3955 ;;		wreg, status,2, status,0, cstack
  3956 ;; Tracked objects:
  3957 ;;		On entry : 0/0
  3958 ;;		On exit  : 0/0
  3959 ;;		Unchanged: 0/0
  3960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3961 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3963 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3964 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3965 ;;Total ram usage:        8 bytes
  3966 ;; Hardware stack levels used:    1
  3967 ;; Hardware stack levels required when called:    8
  3968 ;; This function calls:
  3969 ;;		___lldiv
  3970 ;; This function is called by:
  3971 ;;		_loadRTC
  3972 ;; This function uses a non-reentrant model
  3973 ;;
  3974                           
  3975                           	psect	text15
  3976  0023E0                     __ptext15:
  3977                           	opt stack 0
  3978  0023E0                     _I2C_Master_Init:
  3979                           	opt stack 20
  3980                           
  3981                           ;I2C.c: 17: SSPSTAT = 0b00000000;
  3982                           
  3983                           ;incstack = 0
  3984  0023E0  0E00               	movlw	0
  3985  0023E2  6EC7               	movwf	4039,c	;volatile
  3986                           
  3987                           ;I2C.c: 18: SSPCON1 = 0b00101000;
  3988  0023E4  0E28               	movlw	40
  3989  0023E6  6EC6               	movwf	4038,c	;volatile
  3990                           
  3991                           ;I2C.c: 19: SSPCON2 = 0b00000000;
  3992  0023E8  0E00               	movlw	0
  3993  0023EA  6EC5               	movwf	4037,c	;volatile
  3994                           
  3995                           ;I2C.c: 20: SSPADD = (32000000/(4*c))-1;
  3996  0023EC  0E00               	movlw	0
  3997  0023EE  0100               	movlb	0	; () banked
  3998  0023F0  6F80               	movwf	___lldiv@dividend& (0+255),b
  3999  0023F2  0E48               	movlw	72
  4000  0023F4  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  4001  0023F6  0EE8               	movlw	232
  4002  0023F8  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  4003  0023FA  0E01               	movlw	1
  4004  0023FC  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  4005  0023FE  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4006  002402  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4007  002406  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4008  00240A  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4009  00240E  0E02               	movlw	2
  4010  002410                     u3415:
  4011  002410  90D8               	bcf	status,0,c
  4012  002412  0100               	movlb	0	; () banked
  4013  002414  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  4014  002416  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  4015  002418  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  4016  00241A  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  4017  00241C  2EE8               	decfsz	wreg,f,c
  4018  00241E  D7F8               	goto	u3415
  4019  002420  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  4020  002424  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4021  002428  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4022  00242C  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4023  002430  ECC7  F00E         	call	___lldiv	;wreg free
  4024  002434  0100               	movlb	0	; () banked
  4025  002436  0580               	decf	?___lldiv& (0+255),w,b
  4026  002438  6EC8               	movwf	4040,c	;volatile
  4027                           
  4028                           ; BSR set to: 0
  4029                           ;I2C.c: 21: TRISC3 = 1;
  4030  00243A  8694               	bsf	3988,3,c	;volatile
  4031                           
  4032                           ; BSR set to: 0
  4033                           ;I2C.c: 22: TRISC4 = 1;
  4034  00243C  8894               	bsf	3988,4,c	;volatile
  4035                           
  4036                           ; BSR set to: 0
  4037  00243E  0012               	return		;funcret
  4038  002440                     __end_of_I2C_Master_Init:
  4039                           	opt stack 0
  4040                           tblptru	equ	0xFF8
  4041                           tblptrh	equ	0xFF7
  4042                           tblptrl	equ	0xFF6
  4043                           tablat	equ	0xFF5
  4044                           prodh	equ	0xFF4
  4045                           prodl	equ	0xFF3
  4046                           intcon	equ	0xFF2
  4047                           intcon2	equ	0xFF1
  4048                           intcon3	equ	0xFF0
  4049                           postinc0	equ	0xFEE
  4050                           wreg	equ	0xFE8
  4051                           postdec1	equ	0xFE5
  4052                           fsr1l	equ	0xFE1
  4053                           indf2	equ	0xFDF
  4054                           postinc2	equ	0xFDE
  4055                           postdec2	equ	0xFDD
  4056                           fsr2h	equ	0xFDA
  4057                           fsr2l	equ	0xFD9
  4058                           status	equ	0xFD8
  4059                           
  4060 ;; *************** function ___lldiv *****************
  4061 ;; Defined at:
  4062 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  4063 ;; Parameters:    Size  Location     Type
  4064 ;;  dividend        4    0[BANK0 ] unsigned long 
  4065 ;;  divisor         4    4[BANK0 ] unsigned long 
  4066 ;; Auto vars:     Size  Location     Type
  4067 ;;  quotient        4    8[BANK0 ] unsigned long 
  4068 ;;  counter         1   12[BANK0 ] unsigned char 
  4069 ;; Return value:  Size  Location     Type
  4070 ;;                  4    0[BANK0 ] unsigned long 
  4071 ;; Registers used:
  4072 ;;		wreg, status,2, status,0
  4073 ;; Tracked objects:
  4074 ;;		On entry : 0/0
  4075 ;;		On exit  : 0/0
  4076 ;;		Unchanged: 0/0
  4077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4078 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4079 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4081 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4082 ;;Total ram usage:       13 bytes
  4083 ;; Hardware stack levels used:    1
  4084 ;; Hardware stack levels required when called:    7
  4085 ;; This function calls:
  4086 ;;		Nothing
  4087 ;; This function is called by:
  4088 ;;		_I2C_Master_Init
  4089 ;; This function uses a non-reentrant model
  4090 ;;
  4091                           
  4092                           	psect	text16
  4093  001D8E                     __ptext16:
  4094                           	opt stack 0
  4095  001D8E                     ___lldiv:
  4096                           	opt stack 20
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;incstack = 0
  4100  001D8E  0E00               	movlw	0
  4101  001D90  0100               	movlb	0	; () banked
  4102  001D92  6F88               	movwf	___lldiv@quotient& (0+255),b
  4103  001D94  0E00               	movlw	0
  4104  001D96  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  4105  001D98  0E00               	movlw	0
  4106  001D9A  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  4107  001D9C  0E00               	movlw	0
  4108  001D9E  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  4109                           
  4110                           ; BSR set to: 0
  4111  001DA0  0100               	movlb	0	; () banked
  4112  001DA2  5184               	movf	___lldiv@divisor& (0+255),w,b
  4113  001DA4  0100               	movlb	0	; () banked
  4114  001DA6  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  4115  001DA8  0100               	movlb	0	; () banked
  4116  001DAA  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  4117  001DAC  0100               	movlb	0	; () banked
  4118  001DAE  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  4119  001DB0  B4D8               	btfsc	status,2,c
  4120  001DB2  D042               	goto	l1692
  4121                           
  4122                           ; BSR set to: 0
  4123  001DB4  0E01               	movlw	1
  4124  001DB6  0100               	movlb	0	; () banked
  4125  001DB8  6F8C               	movwf	___lldiv@counter& (0+255),b
  4126  001DBA  D008               	goto	l4478
  4127  001DBC                     l4476:
  4128                           
  4129                           ; BSR set to: 0
  4130  001DBC  0100               	movlb	0	; () banked
  4131  001DBE  90D8               	bcf	status,0,c
  4132  001DC0  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  4133  001DC2  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  4134  001DC4  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  4135  001DC6  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  4136  001DC8  0100               	movlb	0	; () banked
  4137  001DCA  2B8C               	incf	___lldiv@counter& (0+255),f,b
  4138  001DCC                     l4478:
  4139                           
  4140                           ; BSR set to: 0
  4141  001DCC  0100               	movlb	0	; () banked
  4142  001DCE  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  4143  001DD0  D7F5               	goto	l4476
  4144  001DD2                     l4480:
  4145                           
  4146                           ; BSR set to: 0
  4147  001DD2  0100               	movlb	0	; () banked
  4148  001DD4  90D8               	bcf	status,0,c
  4149  001DD6  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  4150  001DD8  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  4151  001DDA  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  4152  001DDC  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  4153                           
  4154                           ; BSR set to: 0
  4155  001DDE  0100               	movlb	0	; () banked
  4156  001DE0  5184               	movf	___lldiv@divisor& (0+255),w,b
  4157  001DE2  0100               	movlb	0	; () banked
  4158  001DE4  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  4159  001DE6  0100               	movlb	0	; () banked
  4160  001DE8  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4161  001DEA  0100               	movlb	0	; () banked
  4162  001DEC  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  4163  001DEE  0100               	movlb	0	; () banked
  4164  001DF0  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4165  001DF2  0100               	movlb	0	; () banked
  4166  001DF4  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  4167  001DF6  0100               	movlb	0	; () banked
  4168  001DF8  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4169  001DFA  0100               	movlb	0	; () banked
  4170  001DFC  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  4171  001DFE  A0D8               	btfss	status,0,c
  4172  001E00  D012               	goto	l4488
  4173                           
  4174                           ; BSR set to: 0
  4175  001E02  0100               	movlb	0	; () banked
  4176  001E04  5184               	movf	___lldiv@divisor& (0+255),w,b
  4177  001E06  0100               	movlb	0	; () banked
  4178  001E08  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  4179  001E0A  0100               	movlb	0	; () banked
  4180  001E0C  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4181  001E0E  0100               	movlb	0	; () banked
  4182  001E10  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  4183  001E12  0100               	movlb	0	; () banked
  4184  001E14  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4185  001E16  0100               	movlb	0	; () banked
  4186  001E18  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  4187  001E1A  0100               	movlb	0	; () banked
  4188  001E1C  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4189  001E1E  0100               	movlb	0	; () banked
  4190  001E20  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  4191                           
  4192                           ; BSR set to: 0
  4193  001E22  0100               	movlb	0	; () banked
  4194  001E24  8188               	bsf	___lldiv@quotient& (0+255),0,b
  4195  001E26                     l4488:
  4196                           
  4197                           ; BSR set to: 0
  4198  001E26  0100               	movlb	0	; () banked
  4199  001E28  90D8               	bcf	status,0,c
  4200  001E2A  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  4201  001E2C  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  4202  001E2E  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  4203  001E30  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  4204                           
  4205                           ; BSR set to: 0
  4206  001E32  0100               	movlb	0	; () banked
  4207  001E34  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  4208  001E36  D7CD               	goto	l4480
  4209  001E38                     l1692:
  4210                           
  4211                           ; BSR set to: 0
  4212  001E38  C088  F080         	movff	___lldiv@quotient,?___lldiv
  4213  001E3C  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  4214  001E40  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  4215  001E44  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  4216                           
  4217                           ; BSR set to: 0
  4218  001E48  0012               	return		;funcret
  4219  001E4A                     __end_of___lldiv:
  4220                           	opt stack 0
  4221                           tblptru	equ	0xFF8
  4222                           tblptrh	equ	0xFF7
  4223                           tblptrl	equ	0xFF6
  4224                           tablat	equ	0xFF5
  4225                           prodh	equ	0xFF4
  4226                           prodl	equ	0xFF3
  4227                           intcon	equ	0xFF2
  4228                           intcon2	equ	0xFF1
  4229                           intcon3	equ	0xFF0
  4230                           postinc0	equ	0xFEE
  4231                           wreg	equ	0xFE8
  4232                           postdec1	equ	0xFE5
  4233                           fsr1l	equ	0xFE1
  4234                           indf2	equ	0xFDF
  4235                           postinc2	equ	0xFDE
  4236                           postdec2	equ	0xFDD
  4237                           fsr2h	equ	0xFDA
  4238                           fsr2l	equ	0xFD9
  4239                           status	equ	0xFD8
  4240                           
  4241 ;; *************** function _change_state_to_menu_start *****************
  4242 ;; Defined at:
  4243 ;;		line 416 in file "UI.c"
  4244 ;; Parameters:    Size  Location     Type
  4245 ;;		None
  4246 ;; Auto vars:     Size  Location     Type
  4247 ;;		None
  4248 ;; Return value:  Size  Location     Type
  4249 ;;                  1    wreg      void 
  4250 ;; Registers used:
  4251 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4252 ;; Tracked objects:
  4253 ;;		On entry : 0/0
  4254 ;;		On exit  : 0/0
  4255 ;;		Unchanged: 0/0
  4256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4261 ;;Total ram usage:        0 bytes
  4262 ;; Hardware stack levels used:    1
  4263 ;; Hardware stack levels required when called:   11
  4264 ;; This function calls:
  4265 ;;		_lcdInst
  4266 ;;		_printRTC
  4267 ;;		_printf
  4268 ;; This function is called by:
  4269 ;;		_initUI
  4270 ;; This function uses a non-reentrant model
  4271 ;;
  4272                           
  4273                           	psect	text17
  4274  0029D8                     __ptext17:
  4275                           	opt stack 0
  4276  0029D8                     _change_state_to_menu_start:
  4277                           	opt stack 18
  4278                           
  4279                           ;UI.c: 417: cur_state = 0;
  4280                           
  4281                           ; BSR set to: 0
  4282                           ;incstack = 0
  4283  0029D8  0E00               	movlw	0
  4284  0029DA  0100               	movlb	0	; () banked
  4285  0029DC  6FE8               	movwf	(_cur_state+1)& (0+255),b
  4286  0029DE  0E00               	movlw	0
  4287  0029E0  6FE7               	movwf	_cur_state& (0+255),b
  4288                           
  4289                           ; BSR set to: 0
  4290                           ;UI.c: 419: lcdInst(0b10000000);;
  4291  0029E2  0E80               	movlw	128
  4292  0029E4  ECD8  F015         	call	_lcdInst
  4293                           
  4294                           ;UI.c: 420: printRTC();
  4295  0029E8  EC63  F006         	call	_printRTC	;wreg free
  4296                           
  4297                           ;UI.c: 421: lcdInst(0b11000000);;
  4298  0029EC  0EC0               	movlw	192
  4299  0029EE  ECD8  F015         	call	_lcdInst
  4300                           
  4301                           ;UI.c: 422: printf("PUSH TO CONTINUE");
  4302  0029F2  0E97               	movlw	low STR_15
  4303  0029F4  0100               	movlb	0	; () banked
  4304  0029F6  6F8E               	movwf	printf@f& (0+255),b
  4305  0029F8  0EFF               	movlw	high STR_15
  4306  0029FA  0100               	movlb	0	; () banked
  4307  0029FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  4308  0029FE  ECBB  F002         	call	_printf	;wreg free
  4309  002A02  0012               	return		;funcret
  4310  002A04                     __end_of_change_state_to_menu_start:
  4311                           	opt stack 0
  4312                           tblptru	equ	0xFF8
  4313                           tblptrh	equ	0xFF7
  4314                           tblptrl	equ	0xFF6
  4315                           tablat	equ	0xFF5
  4316                           prodh	equ	0xFF4
  4317                           prodl	equ	0xFF3
  4318                           intcon	equ	0xFF2
  4319                           intcon2	equ	0xFF1
  4320                           intcon3	equ	0xFF0
  4321                           postinc0	equ	0xFEE
  4322                           wreg	equ	0xFE8
  4323                           postdec1	equ	0xFE5
  4324                           fsr1l	equ	0xFE1
  4325                           indf2	equ	0xFDF
  4326                           postinc2	equ	0xFDE
  4327                           postdec2	equ	0xFDD
  4328                           fsr2h	equ	0xFDA
  4329                           fsr2l	equ	0xFD9
  4330                           status	equ	0xFD8
  4331                           
  4332 ;; *************** function _initTime *****************
  4333 ;; Defined at:
  4334 ;;		line 16 in file "RTC.c"
  4335 ;; Parameters:    Size  Location     Type
  4336 ;;  s               1    wreg     unsigned char 
  4337 ;;  m               1    0[BANK0 ] unsigned char 
  4338 ;;  h               1    1[BANK0 ] unsigned char 
  4339 ;;  w               1    2[BANK0 ] unsigned char 
  4340 ;;  DD              1    3[BANK0 ] unsigned char 
  4341 ;;  MM              1    4[BANK0 ] unsigned char 
  4342 ;;  YY              1    5[BANK0 ] unsigned char 
  4343 ;; Auto vars:     Size  Location     Type
  4344 ;;  s               1    6[BANK0 ] unsigned char 
  4345 ;; Return value:  Size  Location     Type
  4346 ;;                  1    wreg      void 
  4347 ;; Registers used:
  4348 ;;		wreg
  4349 ;; Tracked objects:
  4350 ;;		On entry : 0/0
  4351 ;;		On exit  : 0/0
  4352 ;;		Unchanged: 0/0
  4353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4354 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4355 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4357 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4358 ;;Total ram usage:        7 bytes
  4359 ;; Hardware stack levels used:    1
  4360 ;; Hardware stack levels required when called:    7
  4361 ;; This function calls:
  4362 ;;		Nothing
  4363 ;; This function is called by:
  4364 ;;		_main
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           	psect	text18
  4369  002AC4                     __ptext18:
  4370                           	opt stack 0
  4371  002AC4                     _initTime:
  4372                           	opt stack 23
  4373                           
  4374                           ;incstack = 0
  4375                           ;initTime@s stored from wreg
  4376  002AC4  0100               	movlb	0	; () banked
  4377  002AC6  6F86               	movwf	initTime@s& (0+255),b
  4378                           
  4379                           ;RTC.c: 18: time[0] = s;
  4380  002AC8  C086  F0DC         	movff	initTime@s,_time
  4381                           
  4382                           ;RTC.c: 19: time[1] = m;
  4383  002ACC  C080  F0DD         	movff	initTime@m,_time+1
  4384                           
  4385                           ;RTC.c: 20: time[2] = h;
  4386  002AD0  C081  F0DE         	movff	initTime@h,_time+2
  4387                           
  4388                           ;RTC.c: 21: time[3] = w;
  4389  002AD4  C082  F0DF         	movff	initTime@w,_time+3
  4390                           
  4391                           ;RTC.c: 22: time[4] = DD;
  4392  002AD8  C083  F0E0         	movff	initTime@DD,_time+4
  4393                           
  4394                           ;RTC.c: 23: time[5] = MM;
  4395  002ADC  C084  F0E1         	movff	initTime@MM,_time+5
  4396                           
  4397                           ;RTC.c: 24: time[6] = YY;
  4398  002AE0  C085  F0E2         	movff	initTime@YY,_time+6
  4399  002AE4  0012               	return		;funcret
  4400  002AE6                     __end_of_initTime:
  4401                           	opt stack 0
  4402                           tblptru	equ	0xFF8
  4403                           tblptrh	equ	0xFF7
  4404                           tblptrl	equ	0xFF6
  4405                           tablat	equ	0xFF5
  4406                           prodh	equ	0xFF4
  4407                           prodl	equ	0xFF3
  4408                           intcon	equ	0xFF2
  4409                           intcon2	equ	0xFF1
  4410                           intcon3	equ	0xFF0
  4411                           postinc0	equ	0xFEE
  4412                           wreg	equ	0xFE8
  4413                           postdec1	equ	0xFE5
  4414                           fsr1l	equ	0xFE1
  4415                           indf2	equ	0xFDF
  4416                           postinc2	equ	0xFDE
  4417                           postdec2	equ	0xFDD
  4418                           fsr2h	equ	0xFDA
  4419                           fsr2l	equ	0xFD9
  4420                           status	equ	0xFD8
  4421                           
  4422 ;; *************** function _initLCD *****************
  4423 ;; Defined at:
  4424 ;;		line 47 in file "lcd.c"
  4425 ;; Parameters:    Size  Location     Type
  4426 ;;		None
  4427 ;; Auto vars:     Size  Location     Type
  4428 ;;		None
  4429 ;; Return value:  Size  Location     Type
  4430 ;;                  1    wreg      void 
  4431 ;; Registers used:
  4432 ;;		wreg, status,2, status,0, cstack
  4433 ;; Tracked objects:
  4434 ;;		On entry : 0/0
  4435 ;;		On exit  : 0/0
  4436 ;;		Unchanged: 0/0
  4437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4440 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4441 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4442 ;;Total ram usage:        1 bytes
  4443 ;; Hardware stack levels used:    1
  4444 ;; Hardware stack levels required when called:    9
  4445 ;; This function calls:
  4446 ;;		_lcdInst
  4447 ;; This function is called by:
  4448 ;;		_main
  4449 ;; This function uses a non-reentrant model
  4450 ;;
  4451                           
  4452                           	psect	text19
  4453  002598                     __ptext19:
  4454                           	opt stack 0
  4455  002598                     _initLCD:
  4456                           	opt stack 21
  4457                           
  4458                           ;lcd.c: 48: _delay((unsigned long)((15)*(32000000/4000.0)));
  4459                           
  4460                           ;incstack = 0
  4461  002598  0E9C               	movlw	156
  4462  00259A  0100               	movlb	0	; () banked
  4463  00259C  6F83               	movwf	??_initLCD& (0+255),b
  4464  00259E  0ED7               	movlw	215
  4465  0025A0                     u5177:
  4466  0025A0  2EE8               	decfsz	wreg,f,c
  4467  0025A2  D7FE               	bra	u5177
  4468  0025A4  2F83               	decfsz	??_initLCD& (0+255),f,b
  4469  0025A6  D7FC               	bra	u5177
  4470                           
  4471                           ;lcd.c: 49: lcdInst(0b00110011);
  4472  0025A8  0E33               	movlw	51
  4473  0025AA  ECD8  F015         	call	_lcdInst
  4474                           
  4475                           ;lcd.c: 50: lcdInst(0b00110010);
  4476  0025AE  0E32               	movlw	50
  4477  0025B0  ECD8  F015         	call	_lcdInst
  4478                           
  4479                           ;lcd.c: 52: lcdInst(0b00101000);
  4480  0025B4  0E28               	movlw	40
  4481  0025B6  ECD8  F015         	call	_lcdInst
  4482                           
  4483                           ;lcd.c: 53: lcdInst(0b00001100);
  4484  0025BA  0E0C               	movlw	12
  4485  0025BC  ECD8  F015         	call	_lcdInst
  4486                           
  4487                           ;lcd.c: 54: lcdInst(0b00000110);
  4488  0025C0  0E06               	movlw	6
  4489  0025C2  ECD8  F015         	call	_lcdInst
  4490                           
  4491                           ;lcd.c: 55: lcdInst(0b00000001);
  4492  0025C6  0E01               	movlw	1
  4493  0025C8  ECD8  F015         	call	_lcdInst
  4494                           
  4495                           ;lcd.c: 56: _delay((unsigned long)((15)*(32000000/4000.0)));
  4496  0025CC  0E9C               	movlw	156
  4497  0025CE  0100               	movlb	0	; () banked
  4498  0025D0  6F83               	movwf	??_initLCD& (0+255),b
  4499  0025D2  0ED7               	movlw	215
  4500  0025D4                     u5187:
  4501  0025D4  2EE8               	decfsz	wreg,f,c
  4502  0025D6  D7FE               	bra	u5187
  4503  0025D8  2F83               	decfsz	??_initLCD& (0+255),f,b
  4504  0025DA  D7FC               	bra	u5187
  4505  0025DC  0012               	return		;funcret
  4506  0025DE                     __end_of_initLCD:
  4507                           	opt stack 0
  4508                           tblptru	equ	0xFF8
  4509                           tblptrh	equ	0xFF7
  4510                           tblptrl	equ	0xFF6
  4511                           tablat	equ	0xFF5
  4512                           prodh	equ	0xFF4
  4513                           prodl	equ	0xFF3
  4514                           intcon	equ	0xFF2
  4515                           intcon2	equ	0xFF1
  4516                           intcon3	equ	0xFF0
  4517                           postinc0	equ	0xFEE
  4518                           wreg	equ	0xFE8
  4519                           postdec1	equ	0xFE5
  4520                           fsr1l	equ	0xFE1
  4521                           indf2	equ	0xFDF
  4522                           postinc2	equ	0xFDE
  4523                           postdec2	equ	0xFDD
  4524                           fsr2h	equ	0xFDA
  4525                           fsr2l	equ	0xFD9
  4526                           status	equ	0xFD8
  4527                           
  4528 ;; *************** function _UI *****************
  4529 ;; Defined at:
  4530 ;;		line 72 in file "UI.c"
  4531 ;; Parameters:    Size  Location     Type
  4532 ;;		None
  4533 ;; Auto vars:     Size  Location     Type
  4534 ;;  i               1   83[BANK0 ] unsigned char 
  4535 ;;  i               1   82[BANK0 ] unsigned char 
  4536 ;;  i               1   81[BANK0 ] unsigned char 
  4537 ;;  i               1   80[BANK0 ] unsigned char 
  4538 ;;  i               1   79[BANK0 ] unsigned char 
  4539 ;;  i               1   78[BANK0 ] unsigned char 
  4540 ;;  i               1   77[BANK0 ] unsigned char 
  4541 ;;  i               1   76[BANK0 ] unsigned char 
  4542 ;;  i               1   75[BANK0 ] unsigned char 
  4543 ;;  i               1   74[BANK0 ] unsigned char 
  4544 ;;  i               1   73[BANK0 ] unsigned char 
  4545 ;;  i               1   72[BANK0 ] unsigned char 
  4546 ;;  i               1   71[BANK0 ] unsigned char 
  4547 ;; Return value:  Size  Location     Type
  4548 ;;                  1    wreg      void 
  4549 ;; Registers used:
  4550 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4551 ;; Tracked objects:
  4552 ;;		On entry : 0/0
  4553 ;;		On exit  : 0/0
  4554 ;;		Unchanged: 0/0
  4555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4557 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4558 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4559 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4560 ;;Total ram usage:       16 bytes
  4561 ;; Hardware stack levels used:    1
  4562 ;; Hardware stack levels required when called:   11
  4563 ;; This function calls:
  4564 ;;		___awdiv
  4565 ;;		___awmod
  4566 ;;		_change_state_to_menu_12
  4567 ;;		_change_state_to_menu_22
  4568 ;;		_lcdInst
  4569 ;;		_printRTC
  4570 ;;		_printf
  4571 ;; This function is called by:
  4572 ;;		_main
  4573 ;; This function uses a non-reentrant model
  4574 ;;
  4575                           
  4576                           	psect	text20
  4577  000012                     __ptext20:
  4578                           	opt stack 0
  4579  000012                     _UI:
  4580                           	opt stack 19
  4581                           
  4582                           ;UI.c: 73: if(machine_state == DoneSorting_state){
  4583                           
  4584                           ;incstack = 0
  4585  000012  0E02               	movlw	2
  4586  000014  0100               	movlb	0	; () banked
  4587  000016  19F7               	xorwf	_machine_state& (0+255),w,b
  4588  000018  A4D8               	btfss	status,2,c
  4589  00001A  D071               	goto	l5374
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;UI.c: 74: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4593  00001C  0E01               	movlw	1
  4594  00001E  ECD8  F015         	call	_lcdInst
  4595  000022  0E68               	movlw	104
  4596  000024  0100               	movlb	0	; () banked
  4597  000026  6FC4               	movwf	??_UI& (0+255),b
  4598  000028  0EE4               	movlw	228
  4599  00002A                     u5197:
  4600  00002A  2EE8               	decfsz	wreg,f,c
  4601  00002C  D7FE               	bra	u5197
  4602  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  4603  000030  D7FC               	bra	u5197
  4604  000032  F000               	nop	
  4605                           
  4606                           ;UI.c: 75: lcdInst(0b10000000);;
  4607  000034  0E80               	movlw	128
  4608  000036  ECD8  F015         	call	_lcdInst
  4609                           
  4610                           ;UI.c: 76: printf("!SORT CONCLUDED!");
  4611  00003A  0EBA               	movlw	low STR_1
  4612  00003C  0100               	movlb	0	; () banked
  4613  00003E  6F8E               	movwf	printf@f& (0+255),b
  4614  000040  0EFE               	movlw	high STR_1
  4615  000042  0100               	movlb	0	; () banked
  4616  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  4617  000046  ECBB  F002         	call	_printf	;wreg free
  4618                           
  4619                           ;UI.c: 77: lcdInst(0b11000000);;
  4620  00004A  0EC0               	movlw	192
  4621  00004C  ECD8  F015         	call	_lcdInst
  4622                           
  4623                           ;UI.c: 78: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  4624  000050  0E0E               	movlw	14
  4625  000052  0100               	movlb	0	; () banked
  4626  000054  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4627  000056  0E10               	movlw	16
  4628  000058  6F82               	movwf	___awmod@divisor& (0+255),b
  4629  00005A  C0F5  F080         	movff	_total_time,___awmod@dividend
  4630  00005E  C0F6  F081         	movff	_total_time+1,___awmod@dividend+1
  4631  000062  EC7A  F00F         	call	___awmod	;wreg free
  4632  000066  C080  F0C5         	movff	?___awmod,_UI$2010
  4633  00006A  C081  F0C6         	movff	?___awmod+1,_UI$2010+1
  4634                           
  4635                           ;UI.c: 78: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  4636  00006E  0EE8               	movlw	low STR_2
  4637  000070  0100               	movlb	0	; () banked
  4638  000072  6F8E               	movwf	printf@f& (0+255),b
  4639  000074  0EFD               	movlw	high STR_2
  4640  000076  0100               	movlb	0	; () banked
  4641  000078  6F8F               	movwf	(printf@f+1)& (0+255),b
  4642  00007A  0E00               	movlw	0
  4643  00007C  0100               	movlb	0	; () banked
  4644  00007E  6F91               	movwf	(?_printf+3)& (0+255),b
  4645  000080  0E00               	movlw	0
  4646  000082  6F90               	movwf	(?_printf+2)& (0+255),b
  4647  000084  0E0E               	movlw	14
  4648  000086  0100               	movlb	0	; () banked
  4649  000088  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4650  00008A  0E10               	movlw	16
  4651  00008C  6F82               	movwf	___awmod@divisor& (0+255),b
  4652  00008E  C0F5  F080         	movff	_total_time,___awmod@dividend
  4653  000092  C0F6  F081         	movff	_total_time+1,___awmod@dividend+1
  4654  000096  EC7A  F00F         	call	___awmod	;wreg free
  4655  00009A  C080  F086         	movff	?___awmod,___awdiv@dividend
  4656  00009E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  4657  0000A2  0E00               	movlw	0
  4658  0000A4  0100               	movlb	0	; () banked
  4659  0000A6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  4660  0000A8  0E3C               	movlw	60
  4661  0000AA  6F88               	movwf	___awdiv@divisor& (0+255),b
  4662  0000AC  EC68  F00E         	call	___awdiv	;wreg free
  4663  0000B0  C086  F092         	movff	?___awdiv,?_printf+4
  4664  0000B4  C087  F093         	movff	?___awdiv+1,?_printf+5
  4665  0000B8  C0C5  F080         	movff	_UI$2010,___awmod@dividend
  4666  0000BC  C0C6  F081         	movff	_UI$2010+1,___awmod@dividend+1
  4667  0000C0  0E00               	movlw	0
  4668  0000C2  0100               	movlb	0	; () banked
  4669  0000C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4670  0000C6  0E3C               	movlw	60
  4671  0000C8  6F82               	movwf	___awmod@divisor& (0+255),b
  4672  0000CA  EC7A  F00F         	call	___awmod	;wreg free
  4673  0000CE  C080  F094         	movff	?___awmod,?_printf+6
  4674  0000D2  C081  F095         	movff	?___awmod+1,?_printf+7
  4675  0000D6  ECBB  F002         	call	_printf	;wreg free
  4676                           
  4677                           ;UI.c: 79: machine_state = UI_state;
  4678  0000DA  0E00               	movlw	0
  4679  0000DC  0100               	movlb	0	; () banked
  4680  0000DE  6FF7               	movwf	_machine_state& (0+255),b
  4681  0000E0                     l374:
  4682  0000E0  A281               	btfss	3969,1,c	;volatile
  4683  0000E2  D7FE               	goto	l374
  4684                           
  4685                           ;UI.c: 82: }
  4686                           ;UI.c: 83: if(cur_state==12){
  4687  0000E4  0E0C               	movlw	12
  4688  0000E6  0100               	movlb	0	; () banked
  4689  0000E8  19E7               	xorwf	_cur_state& (0+255),w,b
  4690  0000EA  0100               	movlb	0	; () banked
  4691  0000EC  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
  4692  0000EE  A4D8               	btfss	status,2,c
  4693  0000F0  D003               	goto	l5372
  4694                           
  4695                           ; BSR set to: 0
  4696                           ;UI.c: 84: change_state_to_menu_12();
  4697  0000F2  EC4A  F013         	call	_change_state_to_menu_12	;wreg free
  4698                           
  4699                           ;UI.c: 85: }
  4700  0000F6  D238               	goto	l5630
  4701  0000F8                     l5372:
  4702                           
  4703                           ;UI.c: 86: else{
  4704                           ;UI.c: 87: change_state_to_menu_22();
  4705  0000F8  EC2E  F013         	call	_change_state_to_menu_22	;wreg free
  4706                           
  4707                           ;UI.c: 88: }
  4708                           ;UI.c: 89: }
  4709  0000FC  D235               	goto	l5630
  4710  0000FE                     l5374:
  4711                           
  4712                           ;UI.c: 90: else if(cur_state == 0){
  4713  0000FE  0100               	movlb	0	; () banked
  4714  000100  51E7               	movf	_cur_state& (0+255),w,b
  4715  000102  0100               	movlb	0	; () banked
  4716  000104  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
  4717  000106  A4D8               	btfss	status,2,c
  4718  000108  D22F               	goto	l5630
  4719                           
  4720                           ; BSR set to: 0
  4721                           ;UI.c: 91: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  4722  00010A  0E00               	movlw	0
  4723  00010C  0100               	movlb	0	; () banked
  4724  00010E  6FC7               	movwf	UI@i& (0+255),b
  4725  000110                     l5378:
  4726                           
  4727                           ; BSR set to: 0
  4728  000110  0E63               	movlw	99
  4729  000112  0100               	movlb	0	; () banked
  4730  000114  65C7               	cpfsgt	UI@i& (0+255),b
  4731  000116  D001               	goto	l5382
  4732  000118  D00C               	goto	l5386
  4733  00011A                     l5382:
  4734                           
  4735                           ; BSR set to: 0
  4736  00011A  0E68               	movlw	104
  4737  00011C  0100               	movlb	0	; () banked
  4738  00011E  6FC4               	movwf	??_UI& (0+255),b
  4739  000120  0EE4               	movlw	228
  4740  000122                     u5207:
  4741  000122  2EE8               	decfsz	wreg,f,c
  4742  000124  D7FE               	bra	u5207
  4743  000126  2FC4               	decfsz	??_UI& (0+255),f,b
  4744  000128  D7FC               	bra	u5207
  4745  00012A  F000               	nop	
  4746  00012C  0100               	movlb	0	; () banked
  4747  00012E  2BC7               	incf	UI@i& (0+255),f,b
  4748  000130  D7EF               	goto	l5378
  4749  000132                     l5386:
  4750                           
  4751                           ; BSR set to: 0
  4752                           ;UI.c: 92: if(cur_state == 0){
  4753  000132  0100               	movlb	0	; () banked
  4754  000134  51E7               	movf	_cur_state& (0+255),w,b
  4755  000136  0100               	movlb	0	; () banked
  4756  000138  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
  4757  00013A  A4D8               	btfss	status,2,c
  4758  00013C  D215               	goto	l5630
  4759                           
  4760                           ; BSR set to: 0
  4761                           ;UI.c: 93: printRTC();
  4762  00013E  EC63  F006         	call	_printRTC	;wreg free
  4763                           
  4764                           ;UI.c: 94: }
  4765                           ;UI.c: 95: }
  4766                           ;UI.c: 96: while(logstate){
  4767  000142  D212               	goto	l5630
  4768  000144                     l5390:
  4769                           
  4770                           ;UI.c: 98: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4771  000144  0E01               	movlw	1
  4772  000146  ECD8  F015         	call	_lcdInst
  4773  00014A  0E68               	movlw	104
  4774  00014C  0100               	movlb	0	; () banked
  4775  00014E  6FC4               	movwf	??_UI& (0+255),b
  4776  000150  0EE4               	movlw	228
  4777  000152                     u5217:
  4778  000152  2EE8               	decfsz	wreg,f,c
  4779  000154  D7FE               	bra	u5217
  4780  000156  2FC4               	decfsz	??_UI& (0+255),f,b
  4781  000158  D7FC               	bra	u5217
  4782  00015A  F000               	nop	
  4783                           
  4784                           ;UI.c: 99: lcdInst(0b10000000);;
  4785  00015C  0E80               	movlw	128
  4786  00015E  ECD8  F015         	call	_lcdInst
  4787                           
  4788                           ;UI.c: 100: printf("-- Log %2d here--", log);
  4789  000162  0EFD               	movlw	low STR_3
  4790  000164  0100               	movlb	0	; () banked
  4791  000166  6F8E               	movwf	printf@f& (0+255),b
  4792  000168  0EFD               	movlw	high STR_3
  4793  00016A  0100               	movlb	0	; () banked
  4794  00016C  6F8F               	movwf	(printf@f+1)& (0+255),b
  4795  00016E  C0F1  F090         	movff	_log,?_printf+2
  4796  000172  C0F2  F091         	movff	_log+1,?_printf+3
  4797  000176  ECBB  F002         	call	_printf	;wreg free
  4798                           
  4799                           ;UI.c: 101: lcdInst(0b11000000);;
  4800  00017A  0EC0               	movlw	192
  4801  00017C  ECD8  F015         	call	_lcdInst
  4802                           
  4803                           ;UI.c: 102: printf("Pause:< | Back:>");
  4804  000180  0E86               	movlw	low STR_4
  4805  000182  0100               	movlb	0	; () banked
  4806  000184  6F8E               	movwf	printf@f& (0+255),b
  4807  000186  0EFF               	movlw	high STR_4
  4808  000188  0100               	movlb	0	; () banked
  4809  00018A  6F8F               	movwf	(printf@f+1)& (0+255),b
  4810  00018C  ECBB  F002         	call	_printf	;wreg free
  4811                           
  4812                           ;UI.c: 104: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4813  000190  0E00               	movlw	0
  4814  000192  0100               	movlb	0	; () banked
  4815  000194  6FC8               	movwf	UI@i_582& (0+255),b
  4816  000196                     l5404:
  4817                           
  4818                           ; BSR set to: 0
  4819  000196  0E63               	movlw	99
  4820  000198  0100               	movlb	0	; () banked
  4821  00019A  65C8               	cpfsgt	UI@i_582& (0+255),b
  4822  00019C  D001               	goto	l5408
  4823  00019E  D00C               	goto	l5412
  4824  0001A0                     l5408:
  4825                           
  4826                           ; BSR set to: 0
  4827  0001A0  0E68               	movlw	104
  4828  0001A2  0100               	movlb	0	; () banked
  4829  0001A4  6FC4               	movwf	??_UI& (0+255),b
  4830  0001A6  0EE4               	movlw	228
  4831  0001A8                     u5227:
  4832  0001A8  2EE8               	decfsz	wreg,f,c
  4833  0001AA  D7FE               	bra	u5227
  4834  0001AC  2FC4               	decfsz	??_UI& (0+255),f,b
  4835  0001AE  D7FC               	bra	u5227
  4836  0001B0  F000               	nop	
  4837  0001B2  0100               	movlb	0	; () banked
  4838  0001B4  2BC8               	incf	UI@i_582& (0+255),f,b
  4839  0001B6  D7EF               	goto	l5404
  4840  0001B8                     l5412:
  4841                           
  4842                           ; BSR set to: 0
  4843  0001B8  0100               	movlb	0	; () banked
  4844  0001BA  51F3               	movf	_logstate& (0+255),w,b
  4845  0001BC  0100               	movlb	0	; () banked
  4846  0001BE  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  4847  0001C0  B4D8               	btfsc	status,2,c
  4848  0001C2  0012               	return	
  4849                           
  4850                           ; BSR set to: 0
  4851                           ;UI.c: 105: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4852                           
  4853                           ; BSR set to: 0
  4854                           
  4855                           ; BSR set to: 0
  4856  0001C4  0E00               	movlw	0
  4857  0001C6  0100               	movlb	0	; () banked
  4858  0001C8  6FC9               	movwf	UI@i_583& (0+255),b
  4859  0001CA                     l5418:
  4860                           
  4861                           ; BSR set to: 0
  4862  0001CA  0E63               	movlw	99
  4863  0001CC  0100               	movlb	0	; () banked
  4864  0001CE  65C9               	cpfsgt	UI@i_583& (0+255),b
  4865  0001D0  D001               	goto	l5422
  4866  0001D2  D00C               	goto	l5426
  4867  0001D4                     l5422:
  4868                           
  4869                           ; BSR set to: 0
  4870  0001D4  0E68               	movlw	104
  4871  0001D6  0100               	movlb	0	; () banked
  4872  0001D8  6FC4               	movwf	??_UI& (0+255),b
  4873  0001DA  0EE4               	movlw	228
  4874  0001DC                     u5237:
  4875  0001DC  2EE8               	decfsz	wreg,f,c
  4876  0001DE  D7FE               	bra	u5237
  4877  0001E0  2FC4               	decfsz	??_UI& (0+255),f,b
  4878  0001E2  D7FC               	bra	u5237
  4879  0001E4  F000               	nop	
  4880  0001E6  0100               	movlb	0	; () banked
  4881  0001E8  2BC9               	incf	UI@i_583& (0+255),f,b
  4882  0001EA  D7EF               	goto	l5418
  4883  0001EC                     l5426:
  4884                           
  4885                           ; BSR set to: 0
  4886  0001EC  0100               	movlb	0	; () banked
  4887  0001EE  51F3               	movf	_logstate& (0+255),w,b
  4888  0001F0  0100               	movlb	0	; () banked
  4889  0001F2  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  4890  0001F4  B4D8               	btfsc	status,2,c
  4891  0001F6  0012               	return	
  4892                           
  4893                           ; BSR set to: 0
  4894                           ;UI.c: 107: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4895                           
  4896                           ; BSR set to: 0
  4897                           
  4898                           ; BSR set to: 0
  4899  0001F8  0E01               	movlw	1
  4900  0001FA  ECD8  F015         	call	_lcdInst
  4901  0001FE  0E68               	movlw	104
  4902  000200  0100               	movlb	0	; () banked
  4903  000202  6FC4               	movwf	??_UI& (0+255),b
  4904  000204  0EE4               	movlw	228
  4905  000206                     u5247:
  4906  000206  2EE8               	decfsz	wreg,f,c
  4907  000208  D7FE               	bra	u5247
  4908  00020A  2FC4               	decfsz	??_UI& (0+255),f,b
  4909  00020C  D7FC               	bra	u5247
  4910  00020E  F000               	nop	
  4911                           
  4912                           ;UI.c: 108: lcdInst(0b10000000);;
  4913  000210  0E80               	movlw	128
  4914  000212  ECD8  F015         	call	_lcdInst
  4915                           
  4916                           ;UI.c: 109: printf("Start:");
  4917  000216  0EC4               	movlw	low STR_5
  4918  000218  0100               	movlb	0	; () banked
  4919  00021A  6F8E               	movwf	printf@f& (0+255),b
  4920  00021C  0EFF               	movlw	high STR_5
  4921  00021E  0100               	movlb	0	; () banked
  4922  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  4923  000222  ECBB  F002         	call	_printf	;wreg free
  4924                           
  4925                           ;UI.c: 110: lcdInst(0b11000000);;
  4926  000226  0EC0               	movlw	192
  4927  000228  ECD8  F015         	call	_lcdInst
  4928                           
  4929                           ;UI.c: 111: printf("06Feb | 01:08:56");
  4930  00022C  0EFE               	movlw	low STR_6
  4931  00022E  0100               	movlb	0	; () banked
  4932  000230  6F8E               	movwf	printf@f& (0+255),b
  4933  000232  0EFE               	movlw	high STR_6
  4934  000234  0100               	movlb	0	; () banked
  4935  000236  6F8F               	movwf	(printf@f+1)& (0+255),b
  4936  000238  ECBB  F002         	call	_printf	;wreg free
  4937                           
  4938                           ;UI.c: 113: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4939  00023C  0E00               	movlw	0
  4940  00023E  0100               	movlb	0	; () banked
  4941  000240  6FCA               	movwf	UI@i_586& (0+255),b
  4942  000242                     l5444:
  4943                           
  4944                           ; BSR set to: 0
  4945  000242  0E63               	movlw	99
  4946  000244  0100               	movlb	0	; () banked
  4947  000246  65CA               	cpfsgt	UI@i_586& (0+255),b
  4948  000248  D001               	goto	l5448
  4949  00024A  D00C               	goto	l5452
  4950  00024C                     l5448:
  4951                           
  4952                           ; BSR set to: 0
  4953  00024C  0E68               	movlw	104
  4954  00024E  0100               	movlb	0	; () banked
  4955  000250  6FC4               	movwf	??_UI& (0+255),b
  4956  000252  0EE4               	movlw	228
  4957  000254                     u5257:
  4958  000254  2EE8               	decfsz	wreg,f,c
  4959  000256  D7FE               	bra	u5257
  4960  000258  2FC4               	decfsz	??_UI& (0+255),f,b
  4961  00025A  D7FC               	bra	u5257
  4962  00025C  F000               	nop	
  4963  00025E  0100               	movlb	0	; () banked
  4964  000260  2BCA               	incf	UI@i_586& (0+255),f,b
  4965  000262  D7EF               	goto	l5444
  4966  000264                     l5452:
  4967                           
  4968                           ; BSR set to: 0
  4969  000264  0100               	movlb	0	; () banked
  4970  000266  51F3               	movf	_logstate& (0+255),w,b
  4971  000268  0100               	movlb	0	; () banked
  4972  00026A  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  4973  00026C  B4D8               	btfsc	status,2,c
  4974  00026E  0012               	return	
  4975                           
  4976                           ; BSR set to: 0
  4977                           ;UI.c: 114: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4978                           
  4979                           ; BSR set to: 0
  4980                           
  4981                           ; BSR set to: 0
  4982  000270  0E00               	movlw	0
  4983  000272  0100               	movlb	0	; () banked
  4984  000274  6FCB               	movwf	UI@i_587& (0+255),b
  4985  000276                     l5458:
  4986                           
  4987                           ; BSR set to: 0
  4988  000276  0E63               	movlw	99
  4989  000278  0100               	movlb	0	; () banked
  4990  00027A  65CB               	cpfsgt	UI@i_587& (0+255),b
  4991  00027C  D001               	goto	l5462
  4992  00027E  D00C               	goto	l5466
  4993  000280                     l5462:
  4994                           
  4995                           ; BSR set to: 0
  4996  000280  0E68               	movlw	104
  4997  000282  0100               	movlb	0	; () banked
  4998  000284  6FC4               	movwf	??_UI& (0+255),b
  4999  000286  0EE4               	movlw	228
  5000  000288                     u5267:
  5001  000288  2EE8               	decfsz	wreg,f,c
  5002  00028A  D7FE               	bra	u5267
  5003  00028C  2FC4               	decfsz	??_UI& (0+255),f,b
  5004  00028E  D7FC               	bra	u5267
  5005  000290  F000               	nop	
  5006  000292  0100               	movlb	0	; () banked
  5007  000294  2BCB               	incf	UI@i_587& (0+255),f,b
  5008  000296  D7EF               	goto	l5458
  5009  000298                     l5466:
  5010                           
  5011                           ; BSR set to: 0
  5012  000298  0100               	movlb	0	; () banked
  5013  00029A  51F3               	movf	_logstate& (0+255),w,b
  5014  00029C  0100               	movlb	0	; () banked
  5015  00029E  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5016  0002A0  B4D8               	btfsc	status,2,c
  5017  0002A2  0012               	return	
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;UI.c: 116: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5021                           
  5022                           ; BSR set to: 0
  5023                           
  5024                           ; BSR set to: 0
  5025  0002A4  0E01               	movlw	1
  5026  0002A6  ECD8  F015         	call	_lcdInst
  5027  0002AA  0E68               	movlw	104
  5028  0002AC  0100               	movlb	0	; () banked
  5029  0002AE  6FC4               	movwf	??_UI& (0+255),b
  5030  0002B0  0EE4               	movlw	228
  5031  0002B2                     u5277:
  5032  0002B2  2EE8               	decfsz	wreg,f,c
  5033  0002B4  D7FE               	bra	u5277
  5034  0002B6  2FC4               	decfsz	??_UI& (0+255),f,b
  5035  0002B8  D7FC               	bra	u5277
  5036  0002BA  F000               	nop	
  5037                           
  5038                           ;UI.c: 117: lcdInst(0b10000000);;
  5039  0002BC  0E80               	movlw	128
  5040  0002BE  ECD8  F015         	call	_lcdInst
  5041                           
  5042                           ;UI.c: 118: printf("Duration:");
  5043  0002C2  0EB3               	movlw	low STR_7
  5044  0002C4  0100               	movlb	0	; () banked
  5045  0002C6  6F8E               	movwf	printf@f& (0+255),b
  5046  0002C8  0EFF               	movlw	high STR_7
  5047  0002CA  0100               	movlb	0	; () banked
  5048  0002CC  6F8F               	movwf	(printf@f+1)& (0+255),b
  5049  0002CE  ECBB  F002         	call	_printf	;wreg free
  5050                           
  5051                           ;UI.c: 119: lcdInst(0b11000000);;
  5052  0002D2  0EC0               	movlw	192
  5053  0002D4  ECD8  F015         	call	_lcdInst
  5054                           
  5055                           ;UI.c: 120: printf("%d min(s) %d secs", 2, 42);
  5056  0002D8  0E0F               	movlw	low STR_8
  5057  0002DA  0100               	movlb	0	; () banked
  5058  0002DC  6F8E               	movwf	printf@f& (0+255),b
  5059  0002DE  0EFE               	movlw	high STR_8
  5060  0002E0  0100               	movlb	0	; () banked
  5061  0002E2  6F8F               	movwf	(printf@f+1)& (0+255),b
  5062  0002E4  0E00               	movlw	0
  5063  0002E6  0100               	movlb	0	; () banked
  5064  0002E8  6F91               	movwf	(?_printf+3)& (0+255),b
  5065  0002EA  0E02               	movlw	2
  5066  0002EC  6F90               	movwf	(?_printf+2)& (0+255),b
  5067  0002EE  0E00               	movlw	0
  5068  0002F0  0100               	movlb	0	; () banked
  5069  0002F2  6F93               	movwf	(?_printf+5)& (0+255),b
  5070  0002F4  0E2A               	movlw	42
  5071  0002F6  6F92               	movwf	(?_printf+4)& (0+255),b
  5072  0002F8  ECBB  F002         	call	_printf	;wreg free
  5073                           
  5074                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5075  0002FC  0E00               	movlw	0
  5076  0002FE  0100               	movlb	0	; () banked
  5077  000300  6FCC               	movwf	UI@i_590& (0+255),b
  5078  000302                     l5484:
  5079                           
  5080                           ; BSR set to: 0
  5081  000302  0E63               	movlw	99
  5082  000304  0100               	movlb	0	; () banked
  5083  000306  65CC               	cpfsgt	UI@i_590& (0+255),b
  5084  000308  D001               	goto	l5488
  5085  00030A  D00C               	goto	l5492
  5086  00030C                     l5488:
  5087                           
  5088                           ; BSR set to: 0
  5089  00030C  0E68               	movlw	104
  5090  00030E  0100               	movlb	0	; () banked
  5091  000310  6FC4               	movwf	??_UI& (0+255),b
  5092  000312  0EE4               	movlw	228
  5093  000314                     u5287:
  5094  000314  2EE8               	decfsz	wreg,f,c
  5095  000316  D7FE               	bra	u5287
  5096  000318  2FC4               	decfsz	??_UI& (0+255),f,b
  5097  00031A  D7FC               	bra	u5287
  5098  00031C  F000               	nop	
  5099  00031E  0100               	movlb	0	; () banked
  5100  000320  2BCC               	incf	UI@i_590& (0+255),f,b
  5101  000322  D7EF               	goto	l5484
  5102  000324                     l5492:
  5103                           
  5104                           ; BSR set to: 0
  5105  000324  0100               	movlb	0	; () banked
  5106  000326  51F3               	movf	_logstate& (0+255),w,b
  5107  000328  0100               	movlb	0	; () banked
  5108  00032A  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5109  00032C  B4D8               	btfsc	status,2,c
  5110  00032E  0012               	return	
  5111                           
  5112                           ; BSR set to: 0
  5113                           ;UI.c: 123: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5114                           
  5115                           ; BSR set to: 0
  5116                           
  5117                           ; BSR set to: 0
  5118  000330  0E00               	movlw	0
  5119  000332  0100               	movlb	0	; () banked
  5120  000334  6FCD               	movwf	UI@i_591& (0+255),b
  5121  000336                     l5498:
  5122                           
  5123                           ; BSR set to: 0
  5124  000336  0E63               	movlw	99
  5125  000338  0100               	movlb	0	; () banked
  5126  00033A  65CD               	cpfsgt	UI@i_591& (0+255),b
  5127  00033C  D001               	goto	l5502
  5128  00033E  D00C               	goto	l5506
  5129  000340                     l5502:
  5130                           
  5131                           ; BSR set to: 0
  5132  000340  0E68               	movlw	104
  5133  000342  0100               	movlb	0	; () banked
  5134  000344  6FC4               	movwf	??_UI& (0+255),b
  5135  000346  0EE4               	movlw	228
  5136  000348                     u5297:
  5137  000348  2EE8               	decfsz	wreg,f,c
  5138  00034A  D7FE               	bra	u5297
  5139  00034C  2FC4               	decfsz	??_UI& (0+255),f,b
  5140  00034E  D7FC               	bra	u5297
  5141  000350  F000               	nop	
  5142  000352  0100               	movlb	0	; () banked
  5143  000354  2BCD               	incf	UI@i_591& (0+255),f,b
  5144  000356  D7EF               	goto	l5498
  5145  000358                     l5506:
  5146                           
  5147                           ; BSR set to: 0
  5148  000358  0100               	movlb	0	; () banked
  5149  00035A  51F3               	movf	_logstate& (0+255),w,b
  5150  00035C  0100               	movlb	0	; () banked
  5151  00035E  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5152  000360  B4D8               	btfsc	status,2,c
  5153  000362  0012               	return	
  5154                           
  5155                           ; BSR set to: 0
  5156                           ;UI.c: 125: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5157                           
  5158                           ; BSR set to: 0
  5159                           
  5160                           ; BSR set to: 0
  5161  000364  0E01               	movlw	1
  5162  000366  ECD8  F015         	call	_lcdInst
  5163  00036A  0E68               	movlw	104
  5164  00036C  0100               	movlb	0	; () banked
  5165  00036E  6FC4               	movwf	??_UI& (0+255),b
  5166  000370  0EE4               	movlw	228
  5167  000372                     u5307:
  5168  000372  2EE8               	decfsz	wreg,f,c
  5169  000374  D7FE               	bra	u5307
  5170  000376  2FC4               	decfsz	??_UI& (0+255),f,b
  5171  000378  D7FC               	bra	u5307
  5172  00037A  F000               	nop	
  5173                           
  5174                           ;UI.c: 126: lcdInst(0b10000000);;
  5175  00037C  0E80               	movlw	128
  5176  00037E  ECD8  F015         	call	_lcdInst
  5177                           
  5178                           ;UI.c: 127: printf(" -- Pop  can -- ");
  5179  000382  0E98               	movlw	low STR_9
  5180  000384  0100               	movlb	0	; () banked
  5181  000386  6F8E               	movwf	printf@f& (0+255),b
  5182  000388  0EFE               	movlw	high STR_9
  5183  00038A  0100               	movlb	0	; () banked
  5184  00038C  6F8F               	movwf	(printf@f+1)& (0+255),b
  5185  00038E  ECBB  F002         	call	_printf	;wreg free
  5186                           
  5187                           ;UI.c: 128: lcdInst(0b11000000);;
  5188  000392  0EC0               	movlw	192
  5189  000394  ECD8  F015         	call	_lcdInst
  5190                           
  5191                           ;UI.c: 129: printf("No tab: 9|Tab: 1");
  5192  000398  0EDC               	movlw	low STR_10
  5193  00039A  0100               	movlb	0	; () banked
  5194  00039C  6F8E               	movwf	printf@f& (0+255),b
  5195  00039E  0EFE               	movlw	high STR_10
  5196  0003A0  0100               	movlb	0	; () banked
  5197  0003A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  5198  0003A4  ECBB  F002         	call	_printf	;wreg free
  5199                           
  5200                           ;UI.c: 131: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5201  0003A8  0E00               	movlw	0
  5202  0003AA  0100               	movlb	0	; () banked
  5203  0003AC  6FCE               	movwf	UI@i_594& (0+255),b
  5204  0003AE                     l5524:
  5205                           
  5206                           ; BSR set to: 0
  5207  0003AE  0E63               	movlw	99
  5208  0003B0  0100               	movlb	0	; () banked
  5209  0003B2  65CE               	cpfsgt	UI@i_594& (0+255),b
  5210  0003B4  D001               	goto	l5528
  5211  0003B6  D00C               	goto	l5532
  5212  0003B8                     l5528:
  5213                           
  5214                           ; BSR set to: 0
  5215  0003B8  0E68               	movlw	104
  5216  0003BA  0100               	movlb	0	; () banked
  5217  0003BC  6FC4               	movwf	??_UI& (0+255),b
  5218  0003BE  0EE4               	movlw	228
  5219  0003C0                     u5317:
  5220  0003C0  2EE8               	decfsz	wreg,f,c
  5221  0003C2  D7FE               	bra	u5317
  5222  0003C4  2FC4               	decfsz	??_UI& (0+255),f,b
  5223  0003C6  D7FC               	bra	u5317
  5224  0003C8  F000               	nop	
  5225  0003CA  0100               	movlb	0	; () banked
  5226  0003CC  2BCE               	incf	UI@i_594& (0+255),f,b
  5227  0003CE  D7EF               	goto	l5524
  5228  0003D0                     l5532:
  5229                           
  5230                           ; BSR set to: 0
  5231  0003D0  0100               	movlb	0	; () banked
  5232  0003D2  51F3               	movf	_logstate& (0+255),w,b
  5233  0003D4  0100               	movlb	0	; () banked
  5234  0003D6  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5235  0003D8  B4D8               	btfsc	status,2,c
  5236  0003DA  0012               	return	
  5237                           
  5238                           ; BSR set to: 0
  5239                           ;UI.c: 132: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5240                           
  5241                           ; BSR set to: 0
  5242                           
  5243                           ; BSR set to: 0
  5244  0003DC  0E00               	movlw	0
  5245  0003DE  0100               	movlb	0	; () banked
  5246  0003E0  6FCF               	movwf	UI@i_595& (0+255),b
  5247  0003E2                     l5538:
  5248                           
  5249                           ; BSR set to: 0
  5250  0003E2  0E63               	movlw	99
  5251  0003E4  0100               	movlb	0	; () banked
  5252  0003E6  65CF               	cpfsgt	UI@i_595& (0+255),b
  5253  0003E8  D001               	goto	l5542
  5254  0003EA  D00C               	goto	l5546
  5255  0003EC                     l5542:
  5256                           
  5257                           ; BSR set to: 0
  5258  0003EC  0E68               	movlw	104
  5259  0003EE  0100               	movlb	0	; () banked
  5260  0003F0  6FC4               	movwf	??_UI& (0+255),b
  5261  0003F2  0EE4               	movlw	228
  5262  0003F4                     u5327:
  5263  0003F4  2EE8               	decfsz	wreg,f,c
  5264  0003F6  D7FE               	bra	u5327
  5265  0003F8  2FC4               	decfsz	??_UI& (0+255),f,b
  5266  0003FA  D7FC               	bra	u5327
  5267  0003FC  F000               	nop	
  5268  0003FE  0100               	movlb	0	; () banked
  5269  000400  2BCF               	incf	UI@i_595& (0+255),f,b
  5270  000402  D7EF               	goto	l5538
  5271  000404                     l5546:
  5272                           
  5273                           ; BSR set to: 0
  5274  000404  0100               	movlb	0	; () banked
  5275  000406  51F3               	movf	_logstate& (0+255),w,b
  5276  000408  0100               	movlb	0	; () banked
  5277  00040A  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5278  00040C  B4D8               	btfsc	status,2,c
  5279  00040E  0012               	return	
  5280                           
  5281                           ; BSR set to: 0
  5282                           ;UI.c: 134: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5283                           
  5284                           ; BSR set to: 0
  5285                           
  5286                           ; BSR set to: 0
  5287  000410  0E01               	movlw	1
  5288  000412  ECD8  F015         	call	_lcdInst
  5289  000416  0E68               	movlw	104
  5290  000418  0100               	movlb	0	; () banked
  5291  00041A  6FC4               	movwf	??_UI& (0+255),b
  5292  00041C  0EE4               	movlw	228
  5293  00041E                     u5337:
  5294  00041E  2EE8               	decfsz	wreg,f,c
  5295  000420  D7FE               	bra	u5337
  5296  000422  2FC4               	decfsz	??_UI& (0+255),f,b
  5297  000424  D7FC               	bra	u5337
  5298  000426  F000               	nop	
  5299                           
  5300                           ;UI.c: 135: lcdInst(0b10000000);;
  5301  000428  0E80               	movlw	128
  5302  00042A  ECD8  F015         	call	_lcdInst
  5303                           
  5304                           ;UI.c: 136: printf(" -- Soup can -- ");
  5305  00042E  0EA9               	movlw	low STR_11
  5306  000430  0100               	movlb	0	; () banked
  5307  000432  6F8E               	movwf	printf@f& (0+255),b
  5308  000434  0EFE               	movlw	high STR_11
  5309  000436  0100               	movlb	0	; () banked
  5310  000438  6F8F               	movwf	(printf@f+1)& (0+255),b
  5311  00043A  ECBB  F002         	call	_printf	;wreg free
  5312                           
  5313                           ;UI.c: 137: lcdInst(0b11000000);;
  5314  00043E  0EC0               	movlw	192
  5315  000440  ECD8  F015         	call	_lcdInst
  5316                           
  5317                           ;UI.c: 138: printf("No lbl: 1|lbl: 1");
  5318  000444  0EED               	movlw	low STR_12
  5319  000446  0100               	movlb	0	; () banked
  5320  000448  6F8E               	movwf	printf@f& (0+255),b
  5321  00044A  0EFE               	movlw	high STR_12
  5322  00044C  0100               	movlb	0	; () banked
  5323  00044E  6F8F               	movwf	(printf@f+1)& (0+255),b
  5324  000450  ECBB  F002         	call	_printf	;wreg free
  5325                           
  5326                           ;UI.c: 140: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5327  000454  0E00               	movlw	0
  5328  000456  0100               	movlb	0	; () banked
  5329  000458  6FD0               	movwf	UI@i_598& (0+255),b
  5330  00045A                     l5564:
  5331                           
  5332                           ; BSR set to: 0
  5333  00045A  0E63               	movlw	99
  5334  00045C  0100               	movlb	0	; () banked
  5335  00045E  65D0               	cpfsgt	UI@i_598& (0+255),b
  5336  000460  D001               	goto	l5568
  5337  000462  D00C               	goto	l5572
  5338  000464                     l5568:
  5339                           
  5340                           ; BSR set to: 0
  5341  000464  0E68               	movlw	104
  5342  000466  0100               	movlb	0	; () banked
  5343  000468  6FC4               	movwf	??_UI& (0+255),b
  5344  00046A  0EE4               	movlw	228
  5345  00046C                     u5347:
  5346  00046C  2EE8               	decfsz	wreg,f,c
  5347  00046E  D7FE               	bra	u5347
  5348  000470  2FC4               	decfsz	??_UI& (0+255),f,b
  5349  000472  D7FC               	bra	u5347
  5350  000474  F000               	nop	
  5351  000476  0100               	movlb	0	; () banked
  5352  000478  2BD0               	incf	UI@i_598& (0+255),f,b
  5353  00047A  D7EF               	goto	l5564
  5354  00047C                     l5572:
  5355                           
  5356                           ; BSR set to: 0
  5357  00047C  0100               	movlb	0	; () banked
  5358  00047E  51F3               	movf	_logstate& (0+255),w,b
  5359  000480  0100               	movlb	0	; () banked
  5360  000482  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5361  000484  B4D8               	btfsc	status,2,c
  5362  000486  0012               	return	
  5363                           
  5364                           ; BSR set to: 0
  5365                           ;UI.c: 141: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5366                           
  5367                           ; BSR set to: 0
  5368                           
  5369                           ; BSR set to: 0
  5370  000488  0E00               	movlw	0
  5371  00048A  0100               	movlb	0	; () banked
  5372  00048C  6FD1               	movwf	UI@i_599& (0+255),b
  5373  00048E                     l5578:
  5374                           
  5375                           ; BSR set to: 0
  5376  00048E  0E63               	movlw	99
  5377  000490  0100               	movlb	0	; () banked
  5378  000492  65D1               	cpfsgt	UI@i_599& (0+255),b
  5379  000494  D001               	goto	l5582
  5380  000496  D00C               	goto	l5586
  5381  000498                     l5582:
  5382                           
  5383                           ; BSR set to: 0
  5384  000498  0E68               	movlw	104
  5385  00049A  0100               	movlb	0	; () banked
  5386  00049C  6FC4               	movwf	??_UI& (0+255),b
  5387  00049E  0EE4               	movlw	228
  5388  0004A0                     u5357:
  5389  0004A0  2EE8               	decfsz	wreg,f,c
  5390  0004A2  D7FE               	bra	u5357
  5391  0004A4  2FC4               	decfsz	??_UI& (0+255),f,b
  5392  0004A6  D7FC               	bra	u5357
  5393  0004A8  F000               	nop	
  5394  0004AA  0100               	movlb	0	; () banked
  5395  0004AC  2BD1               	incf	UI@i_599& (0+255),f,b
  5396  0004AE  D7EF               	goto	l5578
  5397  0004B0                     l5586:
  5398                           
  5399                           ; BSR set to: 0
  5400  0004B0  0100               	movlb	0	; () banked
  5401  0004B2  51F3               	movf	_logstate& (0+255),w,b
  5402  0004B4  0100               	movlb	0	; () banked
  5403  0004B6  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5404  0004B8  B4D8               	btfsc	status,2,c
  5405  0004BA  0012               	return	
  5406                           
  5407                           ; BSR set to: 0
  5408                           ;UI.c: 143: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5409                           
  5410                           ; BSR set to: 0
  5411                           
  5412                           ; BSR set to: 0
  5413  0004BC  0E01               	movlw	1
  5414  0004BE  ECD8  F015         	call	_lcdInst
  5415  0004C2  0E68               	movlw	104
  5416  0004C4  0100               	movlb	0	; () banked
  5417  0004C6  6FC4               	movwf	??_UI& (0+255),b
  5418  0004C8  0EE4               	movlw	228
  5419  0004CA                     u5367:
  5420  0004CA  2EE8               	decfsz	wreg,f,c
  5421  0004CC  D7FE               	bra	u5367
  5422  0004CE  2FC4               	decfsz	??_UI& (0+255),f,b
  5423  0004D0  D7FC               	bra	u5367
  5424  0004D2  F000               	nop	
  5425                           
  5426                           ;UI.c: 144: lcdInst(0b10000000);;
  5427  0004D4  0E80               	movlw	128
  5428  0004D6  ECD8  F015         	call	_lcdInst
  5429                           
  5430                           ;UI.c: 145: printf("-- Total cans --");
  5431  0004DA  0ECB               	movlw	low STR_13
  5432  0004DC  0100               	movlb	0	; () banked
  5433  0004DE  6F8E               	movwf	printf@f& (0+255),b
  5434  0004E0  0EFE               	movlw	high STR_13
  5435  0004E2  0100               	movlb	0	; () banked
  5436  0004E4  6F8F               	movwf	(printf@f+1)& (0+255),b
  5437  0004E6  ECBB  F002         	call	_printf	;wreg free
  5438                           
  5439                           ;UI.c: 146: lcdInst(0b11000000);;
  5440  0004EA  0EC0               	movlw	192
  5441  0004EC  ECD8  F015         	call	_lcdInst
  5442                           
  5443                           ;UI.c: 147: printf("12");
  5444  0004F0  0EFB               	movlw	low STR_14
  5445  0004F2  0100               	movlb	0	; () banked
  5446  0004F4  6F8E               	movwf	printf@f& (0+255),b
  5447  0004F6  0EFF               	movlw	high STR_14
  5448  0004F8  0100               	movlb	0	; () banked
  5449  0004FA  6F8F               	movwf	(printf@f+1)& (0+255),b
  5450  0004FC  ECBB  F002         	call	_printf	;wreg free
  5451                           
  5452                           ;UI.c: 149: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5453  000500  0E00               	movlw	0
  5454  000502  0100               	movlb	0	; () banked
  5455  000504  6FD2               	movwf	UI@i_602& (0+255),b
  5456  000506                     l5604:
  5457                           
  5458                           ; BSR set to: 0
  5459  000506  0E63               	movlw	99
  5460  000508  0100               	movlb	0	; () banked
  5461  00050A  65D2               	cpfsgt	UI@i_602& (0+255),b
  5462  00050C  D001               	goto	l5608
  5463  00050E  D00C               	goto	l5612
  5464  000510                     l5608:
  5465                           
  5466                           ; BSR set to: 0
  5467  000510  0E68               	movlw	104
  5468  000512  0100               	movlb	0	; () banked
  5469  000514  6FC4               	movwf	??_UI& (0+255),b
  5470  000516  0EE4               	movlw	228
  5471  000518                     u5377:
  5472  000518  2EE8               	decfsz	wreg,f,c
  5473  00051A  D7FE               	bra	u5377
  5474  00051C  2FC4               	decfsz	??_UI& (0+255),f,b
  5475  00051E  D7FC               	bra	u5377
  5476  000520  F000               	nop	
  5477  000522  0100               	movlb	0	; () banked
  5478  000524  2BD2               	incf	UI@i_602& (0+255),f,b
  5479  000526  D7EF               	goto	l5604
  5480  000528                     l5612:
  5481                           
  5482                           ; BSR set to: 0
  5483  000528  0100               	movlb	0	; () banked
  5484  00052A  51F3               	movf	_logstate& (0+255),w,b
  5485  00052C  0100               	movlb	0	; () banked
  5486  00052E  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5487  000530  B4D8               	btfsc	status,2,c
  5488  000532  0012               	return	
  5489                           
  5490                           ; BSR set to: 0
  5491                           ;UI.c: 150: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5492                           
  5493                           ; BSR set to: 0
  5494                           
  5495                           ; BSR set to: 0
  5496  000534  0E00               	movlw	0
  5497  000536  0100               	movlb	0	; () banked
  5498  000538  6FD3               	movwf	UI@i_603& (0+255),b
  5499  00053A                     l5618:
  5500                           
  5501                           ; BSR set to: 0
  5502  00053A  0E63               	movlw	99
  5503  00053C  0100               	movlb	0	; () banked
  5504  00053E  65D3               	cpfsgt	UI@i_603& (0+255),b
  5505  000540  D001               	goto	l5622
  5506  000542  D00C               	goto	l5626
  5507  000544                     l5622:
  5508                           
  5509                           ; BSR set to: 0
  5510  000544  0E68               	movlw	104
  5511  000546  0100               	movlb	0	; () banked
  5512  000548  6FC4               	movwf	??_UI& (0+255),b
  5513  00054A  0EE4               	movlw	228
  5514  00054C                     u5387:
  5515  00054C  2EE8               	decfsz	wreg,f,c
  5516  00054E  D7FE               	bra	u5387
  5517  000550  2FC4               	decfsz	??_UI& (0+255),f,b
  5518  000552  D7FC               	bra	u5387
  5519  000554  F000               	nop	
  5520  000556  0100               	movlb	0	; () banked
  5521  000558  2BD3               	incf	UI@i_603& (0+255),f,b
  5522  00055A  D7EF               	goto	l5618
  5523  00055C                     l5626:
  5524                           
  5525                           ; BSR set to: 0
  5526  00055C  0100               	movlb	0	; () banked
  5527  00055E  51F3               	movf	_logstate& (0+255),w,b
  5528  000560  0100               	movlb	0	; () banked
  5529  000562  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5530  000564  B4D8               	btfsc	status,2,c
  5531  000566  0012               	return	
  5532  000568                     l5630:
  5533  000568  0100               	movlb	0	; () banked
  5534  00056A  51F3               	movf	_logstate& (0+255),w,b
  5535  00056C  0100               	movlb	0	; () banked
  5536  00056E  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5537  000570  B4D8               	btfsc	status,2,c
  5538  000572  0012               	return	
  5539  000574  D5E7               	goto	l5390
  5540  000576                     __end_of_UI:
  5541                           	opt stack 0
  5542                           tblptru	equ	0xFF8
  5543                           tblptrh	equ	0xFF7
  5544                           tblptrl	equ	0xFF6
  5545                           tablat	equ	0xFF5
  5546                           prodh	equ	0xFF4
  5547                           prodl	equ	0xFF3
  5548                           intcon	equ	0xFF2
  5549                           intcon2	equ	0xFF1
  5550                           intcon3	equ	0xFF0
  5551                           postinc0	equ	0xFEE
  5552                           wreg	equ	0xFE8
  5553                           postdec1	equ	0xFE5
  5554                           fsr1l	equ	0xFE1
  5555                           indf2	equ	0xFDF
  5556                           postinc2	equ	0xFDE
  5557                           postdec2	equ	0xFDD
  5558                           fsr2h	equ	0xFDA
  5559                           fsr2l	equ	0xFD9
  5560                           status	equ	0xFD8
  5561                           
  5562 ;; *************** function _printRTC *****************
  5563 ;; Defined at:
  5564 ;;		line 62 in file "RTC.c"
  5565 ;; Parameters:    Size  Location     Type
  5566 ;;		None
  5567 ;; Auto vars:     Size  Location     Type
  5568 ;;  i               2   66[BANK0 ] int 
  5569 ;;  INT_time       14   46[BANK0 ] int [7]
  5570 ;;  month           4   62[BANK0 ] unsigned char [4]
  5571 ;;  RTC_month       2   60[BANK0 ] int 
  5572 ;; Return value:  Size  Location     Type
  5573 ;;                  1    wreg      void 
  5574 ;; Registers used:
  5575 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5576 ;; Tracked objects:
  5577 ;;		On entry : 0/0
  5578 ;;		On exit  : 0/0
  5579 ;;		Unchanged: 0/0
  5580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5582 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5583 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5584 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5585 ;;Total ram usage:       25 bytes
  5586 ;; Hardware stack levels used:    1
  5587 ;; Hardware stack levels required when called:   10
  5588 ;; This function calls:
  5589 ;;		_getRTC
  5590 ;;		_lcdInst
  5591 ;;		_printf
  5592 ;;		_strcpy
  5593 ;; This function is called by:
  5594 ;;		_UI
  5595 ;;		_change_state_to_menu_start
  5596 ;; This function uses a non-reentrant model
  5597 ;;
  5598                           
  5599                           	psect	text21
  5600  000CC6                     __ptext21:
  5601                           	opt stack 0
  5602  000CC6                     _printRTC:
  5603                           	opt stack 18
  5604                           
  5605                           ;RTC.c: 63: getRTC();
  5606                           
  5607                           ; BSR set to: 0
  5608                           ;incstack = 0
  5609  000CC6  EC98  F010         	call	_getRTC	;wreg free
  5610                           
  5611                           ;RTC.c: 64: char month[] = "MMM";
  5612  000CCA  C10E  F0BE         	movff	printRTC@F3192,printRTC@month
  5613  000CCE  C10F  F0BF         	movff	printRTC@F3192+1,printRTC@month+1
  5614  000CD2  C110  F0C0         	movff	printRTC@F3192+2,printRTC@month+2
  5615  000CD6  C111  F0C1         	movff	printRTC@F3192+3,printRTC@month+3
  5616                           
  5617                           ;RTC.c: 65: int INT_time[7];
  5618                           ;RTC.c: 66: for(int i = 0; i < 7; i++){
  5619  000CDA  0E00               	movlw	0
  5620  000CDC  0100               	movlb	0	; () banked
  5621  000CDE  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  5622  000CE0  0E00               	movlw	0
  5623  000CE2  6FC2               	movwf	printRTC@i& (0+255),b
  5624                           
  5625                           ; BSR set to: 0
  5626  000CE4  0100               	movlb	0	; () banked
  5627  000CE6  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  5628  000CE8  D008               	goto	l4670
  5629  000CEA  0100               	movlb	0	; () banked
  5630  000CEC  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  5631  000CEE  E146               	bnz	l967
  5632  000CF0  0E07               	movlw	7
  5633  000CF2  0100               	movlb	0	; () banked
  5634  000CF4  5DC2               	subwf	printRTC@i& (0+255),w,b
  5635  000CF6  B0D8               	btfsc	status,0,c
  5636  000CF8  D041               	goto	l967
  5637  000CFA                     l4670:
  5638                           
  5639                           ; BSR set to: 0
  5640                           ;RTC.c: 67: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  5641  000CFA  0EDC               	movlw	low _time
  5642  000CFC  0100               	movlb	0	; () banked
  5643  000CFE  25C2               	addwf	printRTC@i& (0+255),w,b
  5644  000D00  6ED9               	movwf	fsr2l,c
  5645  000D02  0E00               	movlw	high _time
  5646  000D04  0100               	movlb	0	; () banked
  5647  000D06  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  5648  000D08  6EDA               	movwf	fsr2h,c
  5649  000D0A  50DF               	movf	indf2,w,c
  5650  000D0C  0100               	movlb	0	; () banked
  5651  000D0E  6FAB               	movwf	??_printRTC& (0+255),b
  5652  000D10  0100               	movlb	0	; () banked
  5653  000D12  3BAB               	swapf	??_printRTC& (0+255),f,b
  5654  000D14  0E0F               	movlw	15
  5655  000D16  17AB               	andwf	??_printRTC& (0+255),f,b
  5656  000D18  0E0F               	movlw	15
  5657  000D1A  0100               	movlb	0	; () banked
  5658  000D1C  17AB               	andwf	??_printRTC& (0+255),f,b
  5659  000D1E  0100               	movlb	0	; () banked
  5660  000D20  51AB               	movf	??_printRTC& (0+255),w,b
  5661  000D22  0D0A               	mullw	10
  5662  000D24  0EDC               	movlw	low _time
  5663  000D26  0100               	movlb	0	; () banked
  5664  000D28  25C2               	addwf	printRTC@i& (0+255),w,b
  5665  000D2A  6ED9               	movwf	fsr2l,c
  5666  000D2C  0E00               	movlw	high _time
  5667  000D2E  0100               	movlb	0	; () banked
  5668  000D30  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  5669  000D32  6EDA               	movwf	fsr2h,c
  5670  000D34  50DF               	movf	indf2,w,c
  5671  000D36  0B0F               	andlw	15
  5672  000D38  0100               	movlb	0	; () banked
  5673  000D3A  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  5674  000D3C  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  5675  000D3E  50F3               	movf	prodl,w,c
  5676  000D40  0100               	movlb	0	; () banked
  5677  000D42  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  5678  000D44  50F4               	movf	prodh,w,c
  5679  000D46  0100               	movlb	0	; () banked
  5680  000D48  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  5681  000D4A  90D8               	bcf	status,0,c
  5682  000D4C  0100               	movlb	0	; () banked
  5683  000D4E  35C2               	rlcf	printRTC@i& (0+255),w,b
  5684  000D50  6ED9               	movwf	fsr2l,c
  5685  000D52  0100               	movlb	0	; () banked
  5686  000D54  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  5687  000D56  6EDA               	movwf	fsr2h,c
  5688  000D58  0EAE               	movlw	low printRTC@INT_time
  5689  000D5A  26D9               	addwf	fsr2l,f,c
  5690  000D5C  0E00               	movlw	high printRTC@INT_time
  5691  000D5E  22DA               	addwfc	fsr2h,f,c
  5692  000D60  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  5693  000D64  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  5694                           
  5695                           ; BSR set to: 0
  5696  000D68  0100               	movlb	0	; () banked
  5697  000D6A  4BC2               	infsnz	printRTC@i& (0+255),f,b
  5698  000D6C  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  5699                           
  5700                           ; BSR set to: 0
  5701  000D6E  0100               	movlb	0	; () banked
  5702  000D70  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  5703  000D72  D7C3               	goto	l4670
  5704  000D74  0100               	movlb	0	; () banked
  5705  000D76  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  5706  000D78  E101               	bnz	u3430
  5707  000D7A  D7BA               	goto	L1
  5708  000D7C                     u3430:
  5709  000D7C                     l967:
  5710                           
  5711                           ; BSR set to: 0
  5712                           ;RTC.c: 68: }
  5713                           ;RTC.c: 69: int RTC_month = INT_time[5];
  5714  000D7C  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  5715  000D80  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  5716                           
  5717                           ;RTC.c: 70: switch(RTC_month){
  5718  000D84  D0B4               	goto	l4702
  5719  000D86                     l4676:
  5720                           
  5721                           ; BSR set to: 0
  5722                           ;RTC.c: 72: strcpy(month, "Jan");
  5723  000D86  0EBE               	movlw	low printRTC@month
  5724  000D88  0100               	movlb	0	; () banked
  5725  000D8A  6F80               	movwf	strcpy@to& (0+255),b
  5726  000D8C  0E00               	movlw	high printRTC@month
  5727  000D8E  0100               	movlb	0	; () banked
  5728  000D90  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5729  000D92  0EDB               	movlw	low STR_36
  5730  000D94  0100               	movlb	0	; () banked
  5731  000D96  6F82               	movwf	strcpy@from& (0+255),b
  5732  000D98  0EFF               	movlw	high STR_36
  5733  000D9A  0100               	movlb	0	; () banked
  5734  000D9C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5735  000D9E  EC81  F013         	call	_strcpy	;wreg free
  5736                           
  5737                           ;RTC.c: 73: break;
  5738  000DA2  D0D4               	goto	l4704
  5739  000DA4                     l4678:
  5740                           
  5741                           ;RTC.c: 75: strcpy(month, "Feb");
  5742  000DA4  0EBE               	movlw	low printRTC@month
  5743  000DA6  0100               	movlb	0	; () banked
  5744  000DA8  6F80               	movwf	strcpy@to& (0+255),b
  5745  000DAA  0E00               	movlw	high printRTC@month
  5746  000DAC  0100               	movlb	0	; () banked
  5747  000DAE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5748  000DB0  0ECB               	movlw	low STR_37
  5749  000DB2  0100               	movlb	0	; () banked
  5750  000DB4  6F82               	movwf	strcpy@from& (0+255),b
  5751  000DB6  0EFF               	movlw	high STR_37
  5752  000DB8  0100               	movlb	0	; () banked
  5753  000DBA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5754  000DBC  EC81  F013         	call	_strcpy	;wreg free
  5755                           
  5756                           ;RTC.c: 76: break;
  5757  000DC0  D0C5               	goto	l4704
  5758  000DC2                     l4680:
  5759                           
  5760                           ;RTC.c: 78: strcpy(month, "Mar");
  5761  000DC2  0EBE               	movlw	low printRTC@month
  5762  000DC4  0100               	movlb	0	; () banked
  5763  000DC6  6F80               	movwf	strcpy@to& (0+255),b
  5764  000DC8  0E00               	movlw	high printRTC@month
  5765  000DCA  0100               	movlb	0	; () banked
  5766  000DCC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5767  000DCE  0EE7               	movlw	low STR_38
  5768  000DD0  0100               	movlb	0	; () banked
  5769  000DD2  6F82               	movwf	strcpy@from& (0+255),b
  5770  000DD4  0EFF               	movlw	high STR_38
  5771  000DD6  0100               	movlb	0	; () banked
  5772  000DD8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5773  000DDA  EC81  F013         	call	_strcpy	;wreg free
  5774                           
  5775                           ;RTC.c: 79: break;
  5776  000DDE  D0B6               	goto	l4704
  5777  000DE0                     l4682:
  5778                           
  5779                           ;RTC.c: 81: strcpy(month, "Apr");
  5780  000DE0  0EBE               	movlw	low printRTC@month
  5781  000DE2  0100               	movlb	0	; () banked
  5782  000DE4  6F80               	movwf	strcpy@to& (0+255),b
  5783  000DE6  0E00               	movlw	high printRTC@month
  5784  000DE8  0100               	movlb	0	; () banked
  5785  000DEA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5786  000DEC  0EEB               	movlw	low STR_39
  5787  000DEE  0100               	movlb	0	; () banked
  5788  000DF0  6F82               	movwf	strcpy@from& (0+255),b
  5789  000DF2  0EFF               	movlw	high STR_39
  5790  000DF4  0100               	movlb	0	; () banked
  5791  000DF6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5792  000DF8  EC81  F013         	call	_strcpy	;wreg free
  5793                           
  5794                           ;RTC.c: 82: break;
  5795  000DFC  D0A7               	goto	l4704
  5796  000DFE                     l4684:
  5797                           
  5798                           ;RTC.c: 84: strcpy(month, "May");
  5799  000DFE  0EBE               	movlw	low printRTC@month
  5800  000E00  0100               	movlb	0	; () banked
  5801  000E02  6F80               	movwf	strcpy@to& (0+255),b
  5802  000E04  0E00               	movlw	high printRTC@month
  5803  000E06  0100               	movlb	0	; () banked
  5804  000E08  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5805  000E0A  0EF7               	movlw	low STR_40
  5806  000E0C  0100               	movlb	0	; () banked
  5807  000E0E  6F82               	movwf	strcpy@from& (0+255),b
  5808  000E10  0EFF               	movlw	high STR_40
  5809  000E12  0100               	movlb	0	; () banked
  5810  000E14  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5811  000E16  EC81  F013         	call	_strcpy	;wreg free
  5812                           
  5813                           ;RTC.c: 85: break;
  5814  000E1A  D098               	goto	l4704
  5815  000E1C                     l4686:
  5816                           
  5817                           ;RTC.c: 87: strcpy(month, "Jun");
  5818  000E1C  0EBE               	movlw	low printRTC@month
  5819  000E1E  0100               	movlb	0	; () banked
  5820  000E20  6F80               	movwf	strcpy@to& (0+255),b
  5821  000E22  0E00               	movlw	high printRTC@month
  5822  000E24  0100               	movlb	0	; () banked
  5823  000E26  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5824  000E28  0EDF               	movlw	low STR_41
  5825  000E2A  0100               	movlb	0	; () banked
  5826  000E2C  6F82               	movwf	strcpy@from& (0+255),b
  5827  000E2E  0EFF               	movlw	high STR_41
  5828  000E30  0100               	movlb	0	; () banked
  5829  000E32  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5830  000E34  EC81  F013         	call	_strcpy	;wreg free
  5831                           
  5832                           ;RTC.c: 88: break;
  5833  000E38  D089               	goto	l4704
  5834  000E3A                     l4688:
  5835                           
  5836                           ;RTC.c: 90: strcpy(month, "Jul");
  5837  000E3A  0EBE               	movlw	low printRTC@month
  5838  000E3C  0100               	movlb	0	; () banked
  5839  000E3E  6F80               	movwf	strcpy@to& (0+255),b
  5840  000E40  0E00               	movlw	high printRTC@month
  5841  000E42  0100               	movlb	0	; () banked
  5842  000E44  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5843  000E46  0ED7               	movlw	low STR_42
  5844  000E48  0100               	movlb	0	; () banked
  5845  000E4A  6F82               	movwf	strcpy@from& (0+255),b
  5846  000E4C  0EFF               	movlw	high STR_42
  5847  000E4E  0100               	movlb	0	; () banked
  5848  000E50  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5849  000E52  EC81  F013         	call	_strcpy	;wreg free
  5850                           
  5851                           ;RTC.c: 91: break;
  5852  000E56  D07A               	goto	l4704
  5853  000E58                     l4690:
  5854                           
  5855                           ;RTC.c: 93: strcpy(month, "Aug");
  5856  000E58  0EBE               	movlw	low printRTC@month
  5857  000E5A  0100               	movlb	0	; () banked
  5858  000E5C  6F80               	movwf	strcpy@to& (0+255),b
  5859  000E5E  0E00               	movlw	high printRTC@month
  5860  000E60  0100               	movlb	0	; () banked
  5861  000E62  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5862  000E64  0ED3               	movlw	low STR_43
  5863  000E66  0100               	movlb	0	; () banked
  5864  000E68  6F82               	movwf	strcpy@from& (0+255),b
  5865  000E6A  0EFF               	movlw	high STR_43
  5866  000E6C  0100               	movlb	0	; () banked
  5867  000E6E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5868  000E70  EC81  F013         	call	_strcpy	;wreg free
  5869                           
  5870                           ;RTC.c: 94: break;
  5871  000E74  D06B               	goto	l4704
  5872  000E76                     l4692:
  5873                           
  5874                           ;RTC.c: 96: strcpy(month, "Sep");
  5875  000E76  0EBE               	movlw	low printRTC@month
  5876  000E78  0100               	movlb	0	; () banked
  5877  000E7A  6F80               	movwf	strcpy@to& (0+255),b
  5878  000E7C  0E00               	movlw	high printRTC@month
  5879  000E7E  0100               	movlb	0	; () banked
  5880  000E80  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5881  000E82  0EE3               	movlw	low STR_44
  5882  000E84  0100               	movlb	0	; () banked
  5883  000E86  6F82               	movwf	strcpy@from& (0+255),b
  5884  000E88  0EFF               	movlw	high STR_44
  5885  000E8A  0100               	movlb	0	; () banked
  5886  000E8C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5887  000E8E  EC81  F013         	call	_strcpy	;wreg free
  5888                           
  5889                           ;RTC.c: 97: break;
  5890  000E92  D05C               	goto	l4704
  5891  000E94                     l4694:
  5892                           
  5893                           ;RTC.c: 99: strcpy(month, "Oct");
  5894  000E94  0EBE               	movlw	low printRTC@month
  5895  000E96  0100               	movlb	0	; () banked
  5896  000E98  6F80               	movwf	strcpy@to& (0+255),b
  5897  000E9A  0E00               	movlw	high printRTC@month
  5898  000E9C  0100               	movlb	0	; () banked
  5899  000E9E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5900  000EA0  0EEF               	movlw	low STR_45
  5901  000EA2  0100               	movlb	0	; () banked
  5902  000EA4  6F82               	movwf	strcpy@from& (0+255),b
  5903  000EA6  0EFF               	movlw	high STR_45
  5904  000EA8  0100               	movlb	0	; () banked
  5905  000EAA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5906  000EAC  EC81  F013         	call	_strcpy	;wreg free
  5907                           
  5908                           ;RTC.c: 100: break;
  5909  000EB0  D04D               	goto	l4704
  5910  000EB2                     l4696:
  5911                           
  5912                           ;RTC.c: 102: strcpy(month, "Nov");
  5913  000EB2  0EBE               	movlw	low printRTC@month
  5914  000EB4  0100               	movlb	0	; () banked
  5915  000EB6  6F80               	movwf	strcpy@to& (0+255),b
  5916  000EB8  0E00               	movlw	high printRTC@month
  5917  000EBA  0100               	movlb	0	; () banked
  5918  000EBC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5919  000EBE  0EF3               	movlw	low STR_46
  5920  000EC0  0100               	movlb	0	; () banked
  5921  000EC2  6F82               	movwf	strcpy@from& (0+255),b
  5922  000EC4  0EFF               	movlw	high STR_46
  5923  000EC6  0100               	movlb	0	; () banked
  5924  000EC8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5925  000ECA  EC81  F013         	call	_strcpy	;wreg free
  5926                           
  5927                           ;RTC.c: 103: break;
  5928  000ECE  D03E               	goto	l4704
  5929  000ED0                     l4698:
  5930                           
  5931                           ;RTC.c: 105: strcpy(month, "Dec");
  5932  000ED0  0EBE               	movlw	low printRTC@month
  5933  000ED2  0100               	movlb	0	; () banked
  5934  000ED4  6F80               	movwf	strcpy@to& (0+255),b
  5935  000ED6  0E00               	movlw	high printRTC@month
  5936  000ED8  0100               	movlb	0	; () banked
  5937  000EDA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5938  000EDC  0ECF               	movlw	low STR_47
  5939  000EDE  0100               	movlb	0	; () banked
  5940  000EE0  6F82               	movwf	strcpy@from& (0+255),b
  5941  000EE2  0EFF               	movlw	high STR_47
  5942  000EE4  0100               	movlb	0	; () banked
  5943  000EE6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5944  000EE8  EC81  F013         	call	_strcpy	;wreg free
  5945                           
  5946                           ;RTC.c: 107: }
  5947                           
  5948                           ;RTC.c: 106: break;
  5949  000EEC  D02F               	goto	l4704
  5950  000EEE                     l4702:
  5951  000EEE  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  5952  000EF2  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  5953                           
  5954                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5955                           ; Switch size 1, requested type "space"
  5956                           ; Number of cases is 1, Range of values is 0 to 0
  5957                           ; switch strategies available:
  5958                           ; Name         Instructions Cycles
  5959                           ; simple_byte            4     3 (average)
  5960                           ;	Chosen strategy is simple_byte
  5961  000EF6  0100               	movlb	0	; () banked
  5962  000EF8  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  5963  000EFA  0A00               	xorlw	0	; case 0
  5964  000EFC  A4D8               	btfss	status,2,c
  5965  000EFE  D026               	goto	l4704
  5966                           
  5967                           ; BSR set to: 0
  5968                           ; Switch size 1, requested type "space"
  5969                           ; Number of cases is 12, Range of values is 1 to 12
  5970                           ; switch strategies available:
  5971                           ; Name         Instructions Cycles
  5972                           ; simple_byte           37    19 (average)
  5973                           ;	Chosen strategy is simple_byte
  5974  000F00  0100               	movlb	0	; () banked
  5975  000F02  51AB               	movf	??_printRTC& (0+255),w,b
  5976  000F04  0A01               	xorlw	1	; case 1
  5977  000F06  B4D8               	btfsc	status,2,c
  5978  000F08  D73E               	goto	l4676
  5979  000F0A  0A03               	xorlw	3	; case 2
  5980  000F0C  B4D8               	btfsc	status,2,c
  5981  000F0E  D74A               	goto	l4678
  5982  000F10  0A01               	xorlw	1	; case 3
  5983  000F12  B4D8               	btfsc	status,2,c
  5984  000F14  D756               	goto	l4680
  5985  000F16  0A07               	xorlw	7	; case 4
  5986  000F18  B4D8               	btfsc	status,2,c
  5987  000F1A  D762               	goto	l4682
  5988  000F1C  0A01               	xorlw	1	; case 5
  5989  000F1E  B4D8               	btfsc	status,2,c
  5990  000F20  D76E               	goto	l4684
  5991  000F22  0A03               	xorlw	3	; case 6
  5992  000F24  B4D8               	btfsc	status,2,c
  5993  000F26  D77A               	goto	l4686
  5994  000F28  0A01               	xorlw	1	; case 7
  5995  000F2A  B4D8               	btfsc	status,2,c
  5996  000F2C  D786               	goto	l4688
  5997  000F2E  0A0F               	xorlw	15	; case 8
  5998  000F30  B4D8               	btfsc	status,2,c
  5999  000F32  D792               	goto	l4690
  6000  000F34  0A01               	xorlw	1	; case 9
  6001  000F36  B4D8               	btfsc	status,2,c
  6002  000F38  D79E               	goto	l4692
  6003  000F3A  0A03               	xorlw	3	; case 10
  6004  000F3C  B4D8               	btfsc	status,2,c
  6005  000F3E  D7AA               	goto	l4694
  6006  000F40  0A01               	xorlw	1	; case 11
  6007  000F42  B4D8               	btfsc	status,2,c
  6008  000F44  D7B6               	goto	l4696
  6009  000F46  0A07               	xorlw	7	; case 12
  6010  000F48  B4D8               	btfsc	status,2,c
  6011  000F4A  D7C2               	goto	l4698
  6012  000F4C                     l4704:
  6013                           
  6014                           ;RTC.c: 108: lcdInst(0b10000000);;
  6015  000F4C  0E80               	movlw	128
  6016  000F4E  ECD8  F015         	call	_lcdInst
  6017                           
  6018                           ;RTC.c: 109: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  6019  000F52  0ED0               	movlw	low STR_48
  6020  000F54  0100               	movlb	0	; () banked
  6021  000F56  6F8E               	movwf	printf@f& (0+255),b
  6022  000F58  0EFD               	movlw	high STR_48
  6023  000F5A  0100               	movlb	0	; () banked
  6024  000F5C  6F8F               	movwf	(printf@f+1)& (0+255),b
  6025  000F5E  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  6026  000F62  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  6027  000F66  0EBE               	movlw	low printRTC@month
  6028  000F68  0100               	movlb	0	; () banked
  6029  000F6A  6F92               	movwf	(?_printf+4)& (0+255),b
  6030  000F6C  0E00               	movlw	high printRTC@month
  6031  000F6E  0100               	movlb	0	; () banked
  6032  000F70  6F93               	movwf	(?_printf+5)& (0+255),b
  6033  000F72  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  6034  000F76  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  6035  000F7A  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  6036  000F7E  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  6037  000F82  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  6038  000F86  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  6039  000F8A  ECBB  F002         	call	_printf	;wreg free
  6040  000F8E  0012               	return		;funcret
  6041  000F90                     __end_of_printRTC:
  6042                           	opt stack 0
  6043                           tblptru	equ	0xFF8
  6044                           tblptrh	equ	0xFF7
  6045                           tblptrl	equ	0xFF6
  6046                           tablat	equ	0xFF5
  6047                           prodh	equ	0xFF4
  6048                           prodl	equ	0xFF3
  6049                           intcon	equ	0xFF2
  6050                           intcon2	equ	0xFF1
  6051                           intcon3	equ	0xFF0
  6052                           postinc0	equ	0xFEE
  6053                           wreg	equ	0xFE8
  6054                           postdec1	equ	0xFE5
  6055                           fsr1l	equ	0xFE1
  6056                           indf2	equ	0xFDF
  6057                           postinc2	equ	0xFDE
  6058                           postdec2	equ	0xFDD
  6059                           fsr2h	equ	0xFDA
  6060                           fsr2l	equ	0xFD9
  6061                           status	equ	0xFD8
  6062                           
  6063 ;; *************** function _strcpy *****************
  6064 ;; Defined at:
  6065 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  6066 ;; Parameters:    Size  Location     Type
  6067 ;;  to              2    0[BANK0 ] PTR unsigned char 
  6068 ;;		 -> printRTC@month(4), 
  6069 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  6070 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
  6071 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
  6072 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
  6073 ;; Auto vars:     Size  Location     Type
  6074 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  6075 ;;		 -> printRTC@month(4), 
  6076 ;; Return value:  Size  Location     Type
  6077 ;;                  2    0[BANK0 ] PTR unsigned char 
  6078 ;; Registers used:
  6079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6080 ;; Tracked objects:
  6081 ;;		On entry : 0/0
  6082 ;;		On exit  : 0/0
  6083 ;;		Unchanged: 0/0
  6084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6085 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6086 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6088 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6089 ;;Total ram usage:        6 bytes
  6090 ;; Hardware stack levels used:    1
  6091 ;; Hardware stack levels required when called:    7
  6092 ;; This function calls:
  6093 ;;		Nothing
  6094 ;; This function is called by:
  6095 ;;		_printRTC
  6096 ;; This function uses a non-reentrant model
  6097 ;;
  6098                           
  6099                           	psect	text22
  6100  002702                     __ptext22:
  6101                           	opt stack 0
  6102  002702                     _strcpy:
  6103                           	opt stack 20
  6104                           
  6105                           ;incstack = 0
  6106  002702  C080  F084         	movff	strcpy@to,strcpy@cp
  6107  002706  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  6108  00270A  D006               	goto	l4458
  6109  00270C                     l4456:
  6110  00270C  0100               	movlb	0	; () banked
  6111  00270E  4B84               	infsnz	strcpy@cp& (0+255),f,b
  6112  002710  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  6113  002712  0100               	movlb	0	; () banked
  6114  002714  4B82               	infsnz	strcpy@from& (0+255),f,b
  6115  002716  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  6116  002718                     l4458:
  6117  002718  C082  FFF6         	movff	strcpy@from,tblptrl
  6118  00271C  C083  FFF7         	movff	strcpy@from+1,tblptrh
  6119  002720                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6120  002720  6AF8               	clrf	tblptru,c
  6121  002722                     	endif
  6122  002722                     	if	0	;tblptru may be non-zero
  6123  002722                     	endif
  6124  002722  C084  FFD9         	movff	strcpy@cp,fsr2l
  6125  002726  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  6126  00272A  0008               	tblrd		*
  6127  00272C  CFF5 FFDF          	movff	tablat,indf2
  6128  002730  50DF               	movf	indf2,w,c
  6129  002732  B4D8               	btfsc	status,2,c
  6130  002734  0012               	return	
  6131  002736  D7EA               	goto	l4456
  6132  002738                     __end_of_strcpy:
  6133                           	opt stack 0
  6134                           tblptru	equ	0xFF8
  6135                           tblptrh	equ	0xFF7
  6136                           tblptrl	equ	0xFF6
  6137                           tablat	equ	0xFF5
  6138                           prodh	equ	0xFF4
  6139                           prodl	equ	0xFF3
  6140                           intcon	equ	0xFF2
  6141                           intcon2	equ	0xFF1
  6142                           intcon3	equ	0xFF0
  6143                           postinc0	equ	0xFEE
  6144                           wreg	equ	0xFE8
  6145                           postdec1	equ	0xFE5
  6146                           fsr1l	equ	0xFE1
  6147                           indf2	equ	0xFDF
  6148                           postinc2	equ	0xFDE
  6149                           postdec2	equ	0xFDD
  6150                           fsr2h	equ	0xFDA
  6151                           fsr2l	equ	0xFD9
  6152                           status	equ	0xFD8
  6153                           
  6154 ;; *************** function _getRTC *****************
  6155 ;; Defined at:
  6156 ;;		line 43 in file "RTC.c"
  6157 ;; Parameters:    Size  Location     Type
  6158 ;;		None
  6159 ;; Auto vars:     Size  Location     Type
  6160 ;;  i               2    3[BANK0 ] int 
  6161 ;; Return value:  Size  Location     Type
  6162 ;;                  1    wreg      void 
  6163 ;; Registers used:
  6164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6165 ;; Tracked objects:
  6166 ;;		On entry : 0/0
  6167 ;;		On exit  : 0/0
  6168 ;;		Unchanged: 0/0
  6169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6171 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6173 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6174 ;;Total ram usage:        2 bytes
  6175 ;; Hardware stack levels used:    1
  6176 ;; Hardware stack levels required when called:    9
  6177 ;; This function calls:
  6178 ;;		_I2C_Master_Read
  6179 ;;		_I2C_Master_Start
  6180 ;;		_I2C_Master_Stop
  6181 ;;		_I2C_Master_Write
  6182 ;; This function is called by:
  6183 ;;		_printRTC
  6184 ;;		_initSortTimer
  6185 ;; This function uses a non-reentrant model
  6186 ;;
  6187                           
  6188                           	psect	text23
  6189  002130                     __ptext23:
  6190                           	opt stack 0
  6191  002130                     _getRTC:
  6192                           	opt stack 18
  6193                           
  6194                           ;RTC.c: 47: I2C_Master_Start();
  6195                           
  6196                           ;incstack = 0
  6197  002130  ECFA  F015         	call	_I2C_Master_Start	;wreg free
  6198                           
  6199                           ;RTC.c: 48: I2C_Master_Write(0b11010000);
  6200  002134  0E00               	movlw	0
  6201  002136  0100               	movlb	0	; () banked
  6202  002138  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6203  00213A  0ED0               	movlw	208
  6204  00213C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6205  00213E  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  6206                           
  6207                           ;RTC.c: 49: I2C_Master_Write(0x00);
  6208  002142  0E00               	movlw	0
  6209  002144  0100               	movlb	0	; () banked
  6210  002146  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6211  002148  0E00               	movlw	0
  6212  00214A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6213  00214C  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  6214                           
  6215                           ;RTC.c: 50: I2C_Master_Stop();
  6216  002150  ECF6  F015         	call	_I2C_Master_Stop	;wreg free
  6217                           
  6218                           ;RTC.c: 53: I2C_Master_Start();
  6219  002154  ECFA  F015         	call	_I2C_Master_Start	;wreg free
  6220                           
  6221                           ;RTC.c: 54: I2C_Master_Write(0b11010001);
  6222  002158  0E00               	movlw	0
  6223  00215A  0100               	movlb	0	; () banked
  6224  00215C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6225  00215E  0ED1               	movlw	209
  6226  002160  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6227  002162  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  6228                           
  6229                           ;RTC.c: 55: for(int i = 0; i < 6; i++){
  6230  002166  0E00               	movlw	0
  6231  002168  0100               	movlb	0	; () banked
  6232  00216A  6F84               	movwf	(getRTC@i+1)& (0+255),b
  6233  00216C  0E00               	movlw	0
  6234  00216E  6F83               	movwf	getRTC@i& (0+255),b
  6235  002170                     l4442:
  6236                           
  6237                           ; BSR set to: 0
  6238  002170  0100               	movlb	0	; () banked
  6239  002172  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  6240  002174  D008               	goto	l4446
  6241  002176  0100               	movlb	0	; () banked
  6242  002178  5184               	movf	(getRTC@i+1)& (0+255),w,b
  6243  00217A  E115               	bnz	l4452
  6244  00217C  0E06               	movlw	6
  6245  00217E  0100               	movlb	0	; () banked
  6246  002180  5D83               	subwf	getRTC@i& (0+255),w,b
  6247  002182  B0D8               	btfsc	status,0,c
  6248  002184  D010               	goto	l4452
  6249  002186                     l4446:
  6250                           
  6251                           ; BSR set to: 0
  6252                           ;RTC.c: 56: time[i] = I2C_Master_Read(1);
  6253  002186  0EDC               	movlw	low _time
  6254  002188  0100               	movlb	0	; () banked
  6255  00218A  2583               	addwf	getRTC@i& (0+255),w,b
  6256  00218C  6ED9               	movwf	fsr2l,c
  6257  00218E  0E00               	movlw	high _time
  6258  002190  0100               	movlb	0	; () banked
  6259  002192  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  6260  002194  6EDA               	movwf	fsr2h,c
  6261  002196  0E01               	movlw	1
  6262  002198  ECA8  F014         	call	_I2C_Master_Read
  6263  00219C  6EDF               	movwf	indf2,c
  6264  00219E  0100               	movlb	0	; () banked
  6265  0021A0  4B83               	infsnz	getRTC@i& (0+255),f,b
  6266  0021A2  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  6267  0021A4  D7E5               	goto	l4442
  6268  0021A6                     l4452:
  6269                           
  6270                           ; BSR set to: 0
  6271                           ;RTC.c: 57: }
  6272                           ;RTC.c: 58: time[6] = I2C_Master_Read(0);
  6273  0021A6  0E00               	movlw	0
  6274  0021A8  ECA8  F014         	call	_I2C_Master_Read
  6275  0021AC  0100               	movlb	0	; () banked
  6276  0021AE  6FE2               	movwf	(_time+6)& (0+255),b
  6277                           
  6278                           ;RTC.c: 59: I2C_Master_Stop();
  6279  0021B0  ECF6  F015         	call	_I2C_Master_Stop	;wreg free
  6280  0021B4  0012               	return		;funcret
  6281  0021B6                     __end_of_getRTC:
  6282                           	opt stack 0
  6283                           tblptru	equ	0xFF8
  6284                           tblptrh	equ	0xFF7
  6285                           tblptrl	equ	0xFF6
  6286                           tablat	equ	0xFF5
  6287                           prodh	equ	0xFF4
  6288                           prodl	equ	0xFF3
  6289                           intcon	equ	0xFF2
  6290                           intcon2	equ	0xFF1
  6291                           intcon3	equ	0xFF0
  6292                           postinc0	equ	0xFEE
  6293                           wreg	equ	0xFE8
  6294                           postdec1	equ	0xFE5
  6295                           fsr1l	equ	0xFE1
  6296                           indf2	equ	0xFDF
  6297                           postinc2	equ	0xFDE
  6298                           postdec2	equ	0xFDD
  6299                           fsr2h	equ	0xFDA
  6300                           fsr2l	equ	0xFD9
  6301                           status	equ	0xFD8
  6302                           
  6303 ;; *************** function _I2C_Master_Write *****************
  6304 ;; Defined at:
  6305 ;;		line 48 in file "I2C.c"
  6306 ;; Parameters:    Size  Location     Type
  6307 ;;  d               2    1[BANK0 ] unsigned int 
  6308 ;; Auto vars:     Size  Location     Type
  6309 ;;		None
  6310 ;; Return value:  Size  Location     Type
  6311 ;;                  1    wreg      void 
  6312 ;; Registers used:
  6313 ;;		wreg, status,2, status,0, cstack
  6314 ;; Tracked objects:
  6315 ;;		On entry : 0/0
  6316 ;;		On exit  : 0/0
  6317 ;;		Unchanged: 0/0
  6318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6319 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6322 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6323 ;;Total ram usage:        2 bytes
  6324 ;; Hardware stack levels used:    1
  6325 ;; Hardware stack levels required when called:    8
  6326 ;; This function calls:
  6327 ;;		_I2C_Master_Wait
  6328 ;; This function is called by:
  6329 ;;		_loadRTC
  6330 ;;		_getRTC
  6331 ;; This function uses a non-reentrant model
  6332 ;;
  6333                           
  6334                           	psect	text24
  6335  002BD8                     __ptext24:
  6336                           	opt stack 0
  6337  002BD8                     _I2C_Master_Write:
  6338                           	opt stack 18
  6339                           
  6340                           ;I2C.c: 50: I2C_Master_Wait();
  6341                           
  6342                           ;incstack = 0
  6343  002BD8  ECAA  F015         	call	_I2C_Master_Wait	;wreg free
  6344                           
  6345                           ;I2C.c: 51: SSPBUF = d;
  6346  002BDC  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  6347  002BE0  0012               	return		;funcret
  6348  002BE2                     __end_of_I2C_Master_Write:
  6349                           	opt stack 0
  6350                           tblptru	equ	0xFF8
  6351                           tblptrh	equ	0xFF7
  6352                           tblptrl	equ	0xFF6
  6353                           tablat	equ	0xFF5
  6354                           prodh	equ	0xFF4
  6355                           prodl	equ	0xFF3
  6356                           intcon	equ	0xFF2
  6357                           intcon2	equ	0xFF1
  6358                           intcon3	equ	0xFF0
  6359                           postinc0	equ	0xFEE
  6360                           wreg	equ	0xFE8
  6361                           postdec1	equ	0xFE5
  6362                           fsr1l	equ	0xFE1
  6363                           indf2	equ	0xFDF
  6364                           postinc2	equ	0xFDE
  6365                           postdec2	equ	0xFDD
  6366                           fsr2h	equ	0xFDA
  6367                           fsr2l	equ	0xFD9
  6368                           status	equ	0xFD8
  6369                           
  6370 ;; *************** function _I2C_Master_Stop *****************
  6371 ;; Defined at:
  6372 ;;		line 42 in file "I2C.c"
  6373 ;; Parameters:    Size  Location     Type
  6374 ;;		None
  6375 ;; Auto vars:     Size  Location     Type
  6376 ;;		None
  6377 ;; Return value:  Size  Location     Type
  6378 ;;                  1    wreg      void 
  6379 ;; Registers used:
  6380 ;;		wreg, status,2, status,0, cstack
  6381 ;; Tracked objects:
  6382 ;;		On entry : 0/0
  6383 ;;		On exit  : 0/0
  6384 ;;		Unchanged: 0/0
  6385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6390 ;;Total ram usage:        0 bytes
  6391 ;; Hardware stack levels used:    1
  6392 ;; Hardware stack levels required when called:    8
  6393 ;; This function calls:
  6394 ;;		_I2C_Master_Wait
  6395 ;; This function is called by:
  6396 ;;		_loadRTC
  6397 ;;		_getRTC
  6398 ;; This function uses a non-reentrant model
  6399 ;;
  6400                           
  6401                           	psect	text25
  6402  002BEC                     __ptext25:
  6403                           	opt stack 0
  6404  002BEC                     _I2C_Master_Stop:
  6405                           	opt stack 18
  6406                           
  6407                           ;I2C.c: 44: I2C_Master_Wait();
  6408                           
  6409                           ;incstack = 0
  6410  002BEC  ECAA  F015         	call	_I2C_Master_Wait	;wreg free
  6411                           
  6412                           ;I2C.c: 45: PEN = 1;
  6413  002BF0  84C5               	bsf	4037,2,c	;volatile
  6414  002BF2  0012               	return		;funcret
  6415  002BF4                     __end_of_I2C_Master_Stop:
  6416                           	opt stack 0
  6417                           tblptru	equ	0xFF8
  6418                           tblptrh	equ	0xFF7
  6419                           tblptrl	equ	0xFF6
  6420                           tablat	equ	0xFF5
  6421                           prodh	equ	0xFF4
  6422                           prodl	equ	0xFF3
  6423                           intcon	equ	0xFF2
  6424                           intcon2	equ	0xFF1
  6425                           intcon3	equ	0xFF0
  6426                           postinc0	equ	0xFEE
  6427                           wreg	equ	0xFE8
  6428                           postdec1	equ	0xFE5
  6429                           fsr1l	equ	0xFE1
  6430                           indf2	equ	0xFDF
  6431                           postinc2	equ	0xFDE
  6432                           postdec2	equ	0xFDD
  6433                           fsr2h	equ	0xFDA
  6434                           fsr2l	equ	0xFD9
  6435                           status	equ	0xFD8
  6436                           
  6437 ;; *************** function _I2C_Master_Start *****************
  6438 ;; Defined at:
  6439 ;;		line 30 in file "I2C.c"
  6440 ;; Parameters:    Size  Location     Type
  6441 ;;		None
  6442 ;; Auto vars:     Size  Location     Type
  6443 ;;		None
  6444 ;; Return value:  Size  Location     Type
  6445 ;;                  1    wreg      void 
  6446 ;; Registers used:
  6447 ;;		wreg, status,2, status,0, cstack
  6448 ;; Tracked objects:
  6449 ;;		On entry : 0/0
  6450 ;;		On exit  : 0/0
  6451 ;;		Unchanged: 0/0
  6452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6457 ;;Total ram usage:        0 bytes
  6458 ;; Hardware stack levels used:    1
  6459 ;; Hardware stack levels required when called:    8
  6460 ;; This function calls:
  6461 ;;		_I2C_Master_Wait
  6462 ;; This function is called by:
  6463 ;;		_loadRTC
  6464 ;;		_getRTC
  6465 ;; This function uses a non-reentrant model
  6466 ;;
  6467                           
  6468                           	psect	text26
  6469  002BF4                     __ptext26:
  6470                           	opt stack 0
  6471  002BF4                     _I2C_Master_Start:
  6472                           	opt stack 18
  6473                           
  6474                           ;I2C.c: 32: I2C_Master_Wait();
  6475                           
  6476                           ;incstack = 0
  6477  002BF4  ECAA  F015         	call	_I2C_Master_Wait	;wreg free
  6478                           
  6479                           ;I2C.c: 33: SEN = 1;
  6480  002BF8  80C5               	bsf	4037,0,c	;volatile
  6481  002BFA  0012               	return		;funcret
  6482  002BFC                     __end_of_I2C_Master_Start:
  6483                           	opt stack 0
  6484                           tblptru	equ	0xFF8
  6485                           tblptrh	equ	0xFF7
  6486                           tblptrl	equ	0xFF6
  6487                           tablat	equ	0xFF5
  6488                           prodh	equ	0xFF4
  6489                           prodl	equ	0xFF3
  6490                           intcon	equ	0xFF2
  6491                           intcon2	equ	0xFF1
  6492                           intcon3	equ	0xFF0
  6493                           postinc0	equ	0xFEE
  6494                           wreg	equ	0xFE8
  6495                           postdec1	equ	0xFE5
  6496                           fsr1l	equ	0xFE1
  6497                           indf2	equ	0xFDF
  6498                           postinc2	equ	0xFDE
  6499                           postdec2	equ	0xFDD
  6500                           fsr2h	equ	0xFDA
  6501                           fsr2l	equ	0xFD9
  6502                           status	equ	0xFD8
  6503                           
  6504 ;; *************** function _I2C_Master_Read *****************
  6505 ;; Defined at:
  6506 ;;		line 54 in file "I2C.c"
  6507 ;; Parameters:    Size  Location     Type
  6508 ;;  a               1    wreg     unsigned char 
  6509 ;; Auto vars:     Size  Location     Type
  6510 ;;  a               1    1[BANK0 ] unsigned char 
  6511 ;;  temp            1    2[BANK0 ] unsigned char 
  6512 ;; Return value:  Size  Location     Type
  6513 ;;                  1    wreg      unsigned char 
  6514 ;; Registers used:
  6515 ;;		wreg, status,2, status,0, cstack
  6516 ;; Tracked objects:
  6517 ;;		On entry : 0/0
  6518 ;;		On exit  : 0/0
  6519 ;;		Unchanged: 0/0
  6520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6522 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6524 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6525 ;;Total ram usage:        2 bytes
  6526 ;; Hardware stack levels used:    1
  6527 ;; Hardware stack levels required when called:    8
  6528 ;; This function calls:
  6529 ;;		_I2C_Master_Wait
  6530 ;; This function is called by:
  6531 ;;		_getRTC
  6532 ;; This function uses a non-reentrant model
  6533 ;;
  6534                           
  6535                           	psect	text27
  6536  002950                     __ptext27:
  6537                           	opt stack 0
  6538  002950                     _I2C_Master_Read:
  6539                           	opt stack 18
  6540                           
  6541                           ;incstack = 0
  6542                           ;I2C_Master_Read@a stored from wreg
  6543  002950  0100               	movlb	0	; () banked
  6544  002952  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  6545                           
  6546                           ;I2C.c: 56: unsigned char temp;
  6547                           ;I2C.c: 57: I2C_Master_Wait();
  6548  002954  ECAA  F015         	call	_I2C_Master_Wait	;wreg free
  6549                           
  6550                           ;I2C.c: 58: RCEN = 1;
  6551  002958  86C5               	bsf	4037,3,c	;volatile
  6552                           
  6553                           ;I2C.c: 59: I2C_Master_Wait();
  6554  00295A  ECAA  F015         	call	_I2C_Master_Wait	;wreg free
  6555                           
  6556                           ;I2C.c: 60: temp = SSPBUF;
  6557  00295E  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  6558                           
  6559                           ;I2C.c: 61: I2C_Master_Wait();
  6560  002962  ECAA  F015         	call	_I2C_Master_Wait	;wreg free
  6561                           
  6562                           ;I2C.c: 62: ACKDT = (a)?0:1;
  6563  002966  0100               	movlb	0	; () banked
  6564  002968  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  6565  00296A  0100               	movlb	0	; () banked
  6566  00296C  A4D8               	btfss	status,2,c
  6567  00296E  D002               	goto	u2570
  6568  002970  8AC5               	bsf	4037,5,c	;volatile
  6569  002972  D001               	goto	l4144
  6570  002974                     u2570:
  6571  002974  9AC5               	bcf	4037,5,c	;volatile
  6572  002976                     l4144:
  6573                           
  6574                           ;I2C.c: 63: ACKEN = 1;
  6575  002976  88C5               	bsf	4037,4,c	;volatile
  6576                           
  6577                           ;I2C.c: 64: return temp;
  6578  002978  0100               	movlb	0	; () banked
  6579  00297A  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  6580  00297C  0012               	return	
  6581  00297E                     __end_of_I2C_Master_Read:
  6582                           	opt stack 0
  6583                           tblptru	equ	0xFF8
  6584                           tblptrh	equ	0xFF7
  6585                           tblptrl	equ	0xFF6
  6586                           tablat	equ	0xFF5
  6587                           prodh	equ	0xFF4
  6588                           prodl	equ	0xFF3
  6589                           intcon	equ	0xFF2
  6590                           intcon2	equ	0xFF1
  6591                           intcon3	equ	0xFF0
  6592                           postinc0	equ	0xFEE
  6593                           wreg	equ	0xFE8
  6594                           postdec1	equ	0xFE5
  6595                           fsr1l	equ	0xFE1
  6596                           indf2	equ	0xFDF
  6597                           postinc2	equ	0xFDE
  6598                           postdec2	equ	0xFDD
  6599                           fsr2h	equ	0xFDA
  6600                           fsr2l	equ	0xFD9
  6601                           status	equ	0xFD8
  6602                           
  6603 ;; *************** function _I2C_Master_Wait *****************
  6604 ;; Defined at:
  6605 ;;		line 25 in file "I2C.c"
  6606 ;; Parameters:    Size  Location     Type
  6607 ;;		None
  6608 ;; Auto vars:     Size  Location     Type
  6609 ;;		None
  6610 ;; Return value:  Size  Location     Type
  6611 ;;                  1    wreg      void 
  6612 ;; Registers used:
  6613 ;;		wreg, status,2, status,0
  6614 ;; Tracked objects:
  6615 ;;		On entry : 0/0
  6616 ;;		On exit  : 0/0
  6617 ;;		Unchanged: 0/0
  6618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6621 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6622 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6623 ;;Total ram usage:        1 bytes
  6624 ;; Hardware stack levels used:    1
  6625 ;; Hardware stack levels required when called:    7
  6626 ;; This function calls:
  6627 ;;		Nothing
  6628 ;; This function is called by:
  6629 ;;		_I2C_Master_Start
  6630 ;;		_I2C_Master_Stop
  6631 ;;		_I2C_Master_Write
  6632 ;;		_I2C_Master_Read
  6633 ;;		_I2C_Master_RepeatedStart
  6634 ;; This function uses a non-reentrant model
  6635 ;;
  6636                           
  6637                           	psect	text28
  6638  002B54                     __ptext28:
  6639                           	opt stack 0
  6640  002B54                     _I2C_Master_Wait:
  6641                           	opt stack 18
  6642  002B54                     l168:
  6643  002B54  B4C7               	btfsc	4039,2,c	;volatile
  6644  002B56  D7FE               	goto	l168
  6645  002B58  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  6646  002B5C  0E1F               	movlw	31
  6647  002B5E  0100               	movlb	0	; () banked
  6648  002B60  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  6649  002B62  B4D8               	btfsc	status,2,c
  6650  002B64  0012               	return	
  6651  002B66  D7F6               	goto	l168
  6652  002B68                     __end_of_I2C_Master_Wait:
  6653                           	opt stack 0
  6654                           tblptru	equ	0xFF8
  6655                           tblptrh	equ	0xFF7
  6656                           tblptrl	equ	0xFF6
  6657                           tablat	equ	0xFF5
  6658                           prodh	equ	0xFF4
  6659                           prodl	equ	0xFF3
  6660                           intcon	equ	0xFF2
  6661                           intcon2	equ	0xFF1
  6662                           intcon3	equ	0xFF0
  6663                           postinc0	equ	0xFEE
  6664                           wreg	equ	0xFE8
  6665                           postdec1	equ	0xFE5
  6666                           fsr1l	equ	0xFE1
  6667                           indf2	equ	0xFDF
  6668                           postinc2	equ	0xFDE
  6669                           postdec2	equ	0xFDD
  6670                           fsr2h	equ	0xFDA
  6671                           fsr2l	equ	0xFD9
  6672                           status	equ	0xFD8
  6673                           
  6674 ;; *************** function _change_state_to_menu_22 *****************
  6675 ;; Defined at:
  6676 ;;		line 440 in file "UI.c"
  6677 ;; Parameters:    Size  Location     Type
  6678 ;;		None
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;		None
  6681 ;; Return value:  Size  Location     Type
  6682 ;;                  1    wreg      void 
  6683 ;; Registers used:
  6684 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6685 ;; Tracked objects:
  6686 ;;		On entry : 0/0
  6687 ;;		On exit  : 0/0
  6688 ;;		Unchanged: 0/0
  6689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6694 ;;Total ram usage:        0 bytes
  6695 ;; Hardware stack levels used:    1
  6696 ;; Hardware stack levels required when called:   10
  6697 ;; This function calls:
  6698 ;;		_lcdInst
  6699 ;;		_printf
  6700 ;; This function is called by:
  6701 ;;		_UI
  6702 ;; This function uses a non-reentrant model
  6703 ;;
  6704                           
  6705                           	psect	text29
  6706  00265C                     __ptext29:
  6707                           	opt stack 0
  6708  00265C                     _change_state_to_menu_22:
  6709                           	opt stack 19
  6710                           
  6711                           ;UI.c: 441: cur_state = 22;
  6712                           
  6713                           ; BSR set to: 0
  6714                           ;incstack = 0
  6715  00265C  0E00               	movlw	0
  6716  00265E  0100               	movlb	0	; () banked
  6717  002660  6FE8               	movwf	(_cur_state+1)& (0+255),b
  6718  002662  0E16               	movlw	22
  6719  002664  6FE7               	movwf	_cur_state& (0+255),b
  6720                           
  6721                           ; BSR set to: 0
  6722                           ;UI.c: 443: lcdInst(0b10000000);;
  6723  002666  0E80               	movlw	128
  6724  002668  ECD8  F015         	call	_lcdInst
  6725                           
  6726                           ;UI.c: 444: printf("2. SORT        <");
  6727  00266C  0E64               	movlw	low STR_19
  6728  00266E  0100               	movlb	0	; () banked
  6729  002670  6F8E               	movwf	printf@f& (0+255),b
  6730  002672  0EFF               	movlw	high STR_19
  6731  002674  0100               	movlb	0	; () banked
  6732  002676  6F8F               	movwf	(printf@f+1)& (0+255),b
  6733  002678  ECBB  F002         	call	_printf	;wreg free
  6734                           
  6735                           ;UI.c: 445: lcdInst(0b11000000);;
  6736  00267C  0EC0               	movlw	192
  6737  00267E  ECD8  F015         	call	_lcdInst
  6738                           
  6739                           ;UI.c: 446: printf("3. LOGS         ");
  6740  002682  0E65               	movlw	low STR_21
  6741  002684  0100               	movlb	0	; () banked
  6742  002686  6F8E               	movwf	printf@f& (0+255),b
  6743  002688  0EFE               	movlw	high STR_21
  6744  00268A  0100               	movlb	0	; () banked
  6745  00268C  6F8F               	movwf	(printf@f+1)& (0+255),b
  6746  00268E  ECBB  F002         	call	_printf	;wreg free
  6747  002692  0012               	return		;funcret
  6748  002694                     __end_of_change_state_to_menu_22:
  6749                           	opt stack 0
  6750                           tblptru	equ	0xFF8
  6751                           tblptrh	equ	0xFF7
  6752                           tblptrl	equ	0xFF6
  6753                           tablat	equ	0xFF5
  6754                           prodh	equ	0xFF4
  6755                           prodl	equ	0xFF3
  6756                           intcon	equ	0xFF2
  6757                           intcon2	equ	0xFF1
  6758                           intcon3	equ	0xFF0
  6759                           postinc0	equ	0xFEE
  6760                           wreg	equ	0xFE8
  6761                           postdec1	equ	0xFE5
  6762                           fsr1l	equ	0xFE1
  6763                           indf2	equ	0xFDF
  6764                           postinc2	equ	0xFDE
  6765                           postdec2	equ	0xFDD
  6766                           fsr2h	equ	0xFDA
  6767                           fsr2l	equ	0xFD9
  6768                           status	equ	0xFD8
  6769                           
  6770 ;; *************** function _change_state_to_menu_12 *****************
  6771 ;; Defined at:
  6772 ;;		line 432 in file "UI.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;		None
  6775 ;; Auto vars:     Size  Location     Type
  6776 ;;		None
  6777 ;; Return value:  Size  Location     Type
  6778 ;;                  1    wreg      void 
  6779 ;; Registers used:
  6780 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6781 ;; Tracked objects:
  6782 ;;		On entry : 0/0
  6783 ;;		On exit  : 0/0
  6784 ;;		Unchanged: 0/0
  6785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6790 ;;Total ram usage:        0 bytes
  6791 ;; Hardware stack levels used:    1
  6792 ;; Hardware stack levels required when called:   10
  6793 ;; This function calls:
  6794 ;;		_lcdInst
  6795 ;;		_printf
  6796 ;; This function is called by:
  6797 ;;		_UI
  6798 ;; This function uses a non-reentrant model
  6799 ;;
  6800                           
  6801                           	psect	text30
  6802  002694                     __ptext30:
  6803                           	opt stack 0
  6804  002694                     _change_state_to_menu_12:
  6805                           	opt stack 19
  6806                           
  6807                           ;UI.c: 433: cur_state = 12;
  6808                           
  6809                           ;incstack = 0
  6810  002694  0E00               	movlw	0
  6811  002696  0100               	movlb	0	; () banked
  6812  002698  6FE8               	movwf	(_cur_state+1)& (0+255),b
  6813  00269A  0E0C               	movlw	12
  6814  00269C  6FE7               	movwf	_cur_state& (0+255),b
  6815                           
  6816                           ; BSR set to: 0
  6817                           ;UI.c: 435: lcdInst(0b10000000);;
  6818  00269E  0E80               	movlw	128
  6819  0026A0  ECD8  F015         	call	_lcdInst
  6820                           
  6821                           ;UI.c: 436: printf("1. DATE/TIME    ");
  6822  0026A4  0E87               	movlw	low STR_18
  6823  0026A6  0100               	movlb	0	; () banked
  6824  0026A8  6F8E               	movwf	printf@f& (0+255),b
  6825  0026AA  0EFE               	movlw	high STR_18
  6826  0026AC  0100               	movlb	0	; () banked
  6827  0026AE  6F8F               	movwf	(printf@f+1)& (0+255),b
  6828  0026B0  ECBB  F002         	call	_printf	;wreg free
  6829                           
  6830                           ;UI.c: 437: lcdInst(0b11000000);;
  6831  0026B4  0EC0               	movlw	192
  6832  0026B6  ECD8  F015         	call	_lcdInst
  6833                           
  6834                           ;UI.c: 438: printf("2. SORT        <");
  6835  0026BA  0E64               	movlw	low STR_19
  6836  0026BC  0100               	movlb	0	; () banked
  6837  0026BE  6F8E               	movwf	printf@f& (0+255),b
  6838  0026C0  0EFF               	movlw	high STR_19
  6839  0026C2  0100               	movlb	0	; () banked
  6840  0026C4  6F8F               	movwf	(printf@f+1)& (0+255),b
  6841  0026C6  ECBB  F002         	call	_printf	;wreg free
  6842  0026CA  0012               	return		;funcret
  6843  0026CC                     __end_of_change_state_to_menu_12:
  6844                           	opt stack 0
  6845                           tblptru	equ	0xFF8
  6846                           tblptrh	equ	0xFF7
  6847                           tblptrl	equ	0xFF6
  6848                           tablat	equ	0xFF5
  6849                           prodh	equ	0xFF4
  6850                           prodl	equ	0xFF3
  6851                           intcon	equ	0xFF2
  6852                           intcon2	equ	0xFF1
  6853                           intcon3	equ	0xFF0
  6854                           postinc0	equ	0xFEE
  6855                           wreg	equ	0xFE8
  6856                           postdec1	equ	0xFE5
  6857                           fsr1l	equ	0xFE1
  6858                           indf2	equ	0xFDF
  6859                           postinc2	equ	0xFDE
  6860                           postdec2	equ	0xFDD
  6861                           fsr2h	equ	0xFDA
  6862                           fsr2l	equ	0xFD9
  6863                           status	equ	0xFD8
  6864                           
  6865 ;; *************** function _printf *****************
  6866 ;; Defined at:
  6867 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6868 ;; Parameters:    Size  Location     Type
  6869 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  6870 ;;		 -> STR_50(21), STR_49(11), STR_48(24), STR_35(17), 
  6871 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
  6872 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
  6873 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
  6874 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
  6875 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
  6876 ;;		 -> STR_14(3), STR_13(17), STR_12(17), STR_11(17), 
  6877 ;;		 -> STR_10(17), STR_9(17), STR_8(18), STR_7(10), 
  6878 ;;		 -> STR_6(17), STR_5(7), STR_4(17), STR_3(18), 
  6879 ;;		 -> STR_2(21), STR_1(17), 
  6880 ;; Auto vars:     Size  Location     Type
  6881 ;;  tmpval          4    0        struct .
  6882 ;;  width           2   41[BANK0 ] int 
  6883 ;;  len             2   37[BANK0 ] unsigned int 
  6884 ;;  val             2   35[BANK0 ] unsigned int 
  6885 ;;  cp              2   33[BANK0 ] PTR const unsigned char 
  6886 ;;		 -> STR_51(7), printRTC@month(4), 
  6887 ;;  ap              2   31[BANK0 ] PTR void [1]
  6888 ;;		 -> ?i2_printf(2), ?_printf(2), 
  6889 ;;  c               1   40[BANK0 ] char 
  6890 ;;  flag            1   39[BANK0 ] unsigned char 
  6891 ;;  prec            1   30[BANK0 ] char 
  6892 ;; Return value:  Size  Location     Type
  6893 ;;                  2   14[BANK0 ] int 
  6894 ;; Registers used:
  6895 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6896 ;; Tracked objects:
  6897 ;;		On entry : 0/0
  6898 ;;		On exit  : 0/0
  6899 ;;		Unchanged: 0/0
  6900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6901 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6902 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6903 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6904 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6905 ;;Total ram usage:       29 bytes
  6906 ;; Hardware stack levels used:    1
  6907 ;; Hardware stack levels required when called:    9
  6908 ;; This function calls:
  6909 ;;		___lwdiv
  6910 ;;		___lwmod
  6911 ;;		___wmul
  6912 ;;		_isdigit
  6913 ;;		_putch
  6914 ;; This function is called by:
  6915 ;;		_UI
  6916 ;;		_change_state_to_menu_start
  6917 ;;		_change_state_to_menu_12
  6918 ;;		_change_state_to_menu_22
  6919 ;;		_printRTC
  6920 ;; This function uses a non-reentrant model
  6921 ;;
  6922                           
  6923                           	psect	text31
  6924  000576                     __ptext31:
  6925                           	opt stack 0
  6926  000576                     _printf:
  6927                           	opt stack 19
  6928                           
  6929                           ;doprnt.c: 466: va_list ap;
  6930                           ;doprnt.c: 499: signed char c;
  6931                           ;doprnt.c: 501: int width;
  6932                           ;doprnt.c: 506: signed char prec;
  6933                           ;doprnt.c: 508: unsigned char flag;
  6934                           ;doprnt.c: 523: union {
  6935                           ;doprnt.c: 524: unsigned long vd;
  6936                           ;doprnt.c: 525: double integ;
  6937                           ;doprnt.c: 526: } tmpval;
  6938                           ;doprnt.c: 528: unsigned int val;
  6939                           ;doprnt.c: 529: unsigned len;
  6940                           ;doprnt.c: 530: const char * cp;
  6941                           ;doprnt.c: 533: *ap = __va_start();
  6942                           
  6943                           ;incstack = 0
  6944  000576  0E90               	movlw	low (?_printf+2)
  6945  000578  0100               	movlb	0	; () banked
  6946  00057A  6F9F               	movwf	printf@ap& (0+255),b
  6947  00057C  0E00               	movlw	high (?_printf+2)
  6948  00057E  0100               	movlb	0	; () banked
  6949  000580  6FA0               	movwf	(printf@ap+1)& (0+255),b
  6950                           
  6951                           ;doprnt.c: 536: while(c = *f++) {
  6952  000582  D1EE               	goto	l4436
  6953  000584                     l4312:
  6954                           
  6955                           ; BSR set to: 0
  6956                           ;doprnt.c: 538: if(c != '%')
  6957  000584  0E25               	movlw	37
  6958  000586  0100               	movlb	0	; () banked
  6959  000588  19A8               	xorwf	printf@c& (0+255),w,b
  6960  00058A  B4D8               	btfsc	status,2,c
  6961  00058C  D005               	goto	l4316
  6962                           
  6963                           ; BSR set to: 0
  6964                           ;doprnt.c: 540: {
  6965                           ;doprnt.c: 541: (putch(c) );
  6966  00058E  0100               	movlb	0	; () banked
  6967  000590  51A8               	movf	printf@c& (0+255),w,b
  6968  000592  ECD0  F015         	call	_putch
  6969                           
  6970                           ;doprnt.c: 542: continue;
  6971  000596  D1E4               	goto	l4436
  6972  000598                     l4316:
  6973                           
  6974                           ;doprnt.c: 543: }
  6975                           ;doprnt.c: 546: width = 0;
  6976  000598  0E00               	movlw	0
  6977  00059A  0100               	movlb	0	; () banked
  6978  00059C  6FAA               	movwf	(printf@width+1)& (0+255),b
  6979  00059E  0E00               	movlw	0
  6980  0005A0  6FA9               	movwf	printf@width& (0+255),b
  6981                           
  6982                           ;doprnt.c: 548: flag = 0;
  6983  0005A2  0E00               	movlw	0
  6984  0005A4  0100               	movlb	0	; () banked
  6985  0005A6  6FA7               	movwf	printf@flag& (0+255),b
  6986                           
  6987                           ; BSR set to: 0
  6988                           ;doprnt.c: 551: switch(*f) {
  6989                           
  6990                           ;doprnt.c: 550: for(;;) {
  6991  0005A8  D005               	goto	l4322
  6992  0005AA                     l4318:
  6993                           
  6994                           ;doprnt.c: 580: flag |= 0x04;
  6995  0005AA  0100               	movlb	0	; () banked
  6996  0005AC  85A7               	bsf	printf@flag& (0+255),2,b
  6997                           
  6998                           ;doprnt.c: 581: f++;
  6999  0005AE  0100               	movlb	0	; () banked
  7000  0005B0  4B8E               	infsnz	printf@f& (0+255),f,b
  7001  0005B2  2B8F               	incf	(printf@f+1)& (0+255),f,b
  7002  0005B4                     l4322:
  7003  0005B4  C08E  FFF6         	movff	printf@f,tblptrl
  7004  0005B8  C08F  FFF7         	movff	printf@f+1,tblptrh
  7005  0005BC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7006  0005BC  6AF8               	clrf	tblptru,c
  7007  0005BE                     	endif
  7008  0005BE                     	if	0	;tblptru may be non-zero
  7009  0005BE                     	endif
  7010  0005BE  0008               	tblrd		*
  7011  0005C0  50F5               	movf	tablat,w,c
  7012                           
  7013                           ; Switch size 1, requested type "space"
  7014                           ; Number of cases is 1, Range of values is 48 to 48
  7015                           ; switch strategies available:
  7016                           ; Name         Instructions Cycles
  7017                           ; simple_byte            4     3 (average)
  7018                           ;	Chosen strategy is simple_byte
  7019  0005C2  0A30               	xorlw	48	; case 48
  7020  0005C4  B4D8               	btfsc	status,2,c
  7021  0005C6  D7F1               	goto	l4318
  7022                           
  7023                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7024                           
  7025                           ;doprnt.c: 586: }
  7026                           
  7027                           ;doprnt.c: 585: break;
  7028  0005C8  C08E  FFF6         	movff	printf@f,tblptrl
  7029  0005CC  C08F  FFF7         	movff	printf@f+1,tblptrh
  7030  0005D0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7031  0005D0  6AF8               	clrf	tblptru,c
  7032  0005D2                     	endif
  7033  0005D2                     	if	0	;tblptru may be non-zero
  7034  0005D2                     	endif
  7035  0005D2  0008               	tblrd		*
  7036  0005D4  50F5               	movf	tablat,w,c
  7037  0005D6  EC02  F015         	call	_isdigit
  7038  0005DA  A0D8               	btfss	status,0,c
  7039  0005DC  D0CF               	goto	l4368
  7040                           
  7041                           ;doprnt.c: 598: width = 0;
  7042  0005DE  0E00               	movlw	0
  7043  0005E0  0100               	movlb	0	; () banked
  7044  0005E2  6FAA               	movwf	(printf@width+1)& (0+255),b
  7045  0005E4  0E00               	movlw	0
  7046  0005E6  6FA9               	movwf	printf@width& (0+255),b
  7047  0005E8                     l4328:
  7048                           
  7049                           ;doprnt.c: 600: width *= 10;
  7050  0005E8  C0A9  F080         	movff	printf@width,___wmul@multiplier
  7051  0005EC  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
  7052  0005F0  0E00               	movlw	0
  7053  0005F2  0100               	movlb	0	; () banked
  7054  0005F4  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7055  0005F6  0E0A               	movlw	10
  7056  0005F8  6F82               	movwf	___wmul@multiplicand& (0+255),b
  7057  0005FA  EC9C  F013         	call	___wmul	;wreg free
  7058  0005FE  C080  F0A9         	movff	?___wmul,printf@width
  7059  000602  C081  F0AA         	movff	?___wmul+1,printf@width+1
  7060                           
  7061                           ;doprnt.c: 601: width += *f++ - '0';
  7062  000606  0ED0               	movlw	208
  7063  000608  0100               	movlb	0	; () banked
  7064  00060A  6F9A               	movwf	??_printf& (0+255),b
  7065  00060C  0EFF               	movlw	255
  7066  00060E  0100               	movlb	0	; () banked
  7067  000610  6F9B               	movwf	(??_printf+1)& (0+255),b
  7068  000612  C08E  FFF6         	movff	printf@f,tblptrl
  7069  000616  C08F  FFF7         	movff	printf@f+1,tblptrh
  7070  00061A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7071  00061A  6AF8               	clrf	tblptru,c
  7072  00061C                     	endif
  7073  00061C                     	if	0	;tblptru may be non-zero
  7074  00061C                     	endif
  7075  00061C  0008               	tblrd		*
  7076  00061E  50F5               	movf	tablat,w,c
  7077  000620  0100               	movlb	0	; () banked
  7078  000622  6F9C               	movwf	(??_printf+2)& (0+255),b
  7079  000624  6B9D               	clrf	(??_printf+3)& (0+255),b
  7080  000626  0100               	movlb	0	; () banked
  7081  000628  519A               	movf	??_printf& (0+255),w,b
  7082  00062A  0100               	movlb	0	; () banked
  7083  00062C  279C               	addwf	(??_printf+2)& (0+255),f,b
  7084  00062E  0100               	movlb	0	; () banked
  7085  000630  519B               	movf	(??_printf+1)& (0+255),w,b
  7086  000632  0100               	movlb	0	; () banked
  7087  000634  239D               	addwfc	(??_printf+3)& (0+255),f,b
  7088  000636  0100               	movlb	0	; () banked
  7089  000638  519C               	movf	(??_printf+2)& (0+255),w,b
  7090  00063A  0100               	movlb	0	; () banked
  7091  00063C  27A9               	addwf	printf@width& (0+255),f,b
  7092  00063E  0100               	movlb	0	; () banked
  7093  000640  519D               	movf	(??_printf+3)& (0+255),w,b
  7094  000642  0100               	movlb	0	; () banked
  7095  000644  23AA               	addwfc	(printf@width+1)& (0+255),f,b
  7096                           
  7097                           ; BSR set to: 0
  7098  000646  0100               	movlb	0	; () banked
  7099  000648  4B8E               	infsnz	printf@f& (0+255),f,b
  7100  00064A  2B8F               	incf	(printf@f+1)& (0+255),f,b
  7101                           
  7102                           ; BSR set to: 0
  7103                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7104  00064C  C08E  FFF6         	movff	printf@f,tblptrl
  7105  000650  C08F  FFF7         	movff	printf@f+1,tblptrh
  7106  000654                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7107  000654  6AF8               	clrf	tblptru,c
  7108  000656                     	endif
  7109  000656                     	if	0	;tblptru may be non-zero
  7110  000656                     	endif
  7111  000656  0008               	tblrd		*
  7112  000658  50F5               	movf	tablat,w,c
  7113  00065A  EC02  F015         	call	_isdigit
  7114  00065E  A0D8               	btfss	status,0,c
  7115  000660  D08D               	goto	l4368
  7116  000662  D7C2               	goto	l4328
  7117  000664                     l4336:
  7118                           
  7119                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  7120  000664  C09F  FFD9         	movff	printf@ap,fsr2l
  7121  000668  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  7122  00066C  CFDE F0A1          	movff	postinc2,printf@cp
  7123  000670  CFDD F0A2          	movff	postdec2,printf@cp+1
  7124  000674  0E02               	movlw	2
  7125  000676  0100               	movlb	0	; () banked
  7126  000678  279F               	addwf	printf@ap& (0+255),f,b
  7127  00067A  0E00               	movlw	0
  7128  00067C  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  7129                           
  7130                           ; BSR set to: 0
  7131                           ;doprnt.c: 740: if(!cp)
  7132  00067E  0100               	movlb	0	; () banked
  7133  000680  51A1               	movf	printf@cp& (0+255),w,b
  7134  000682  0100               	movlb	0	; () banked
  7135  000684  11A2               	iorwf	(printf@cp+1)& (0+255),w,b
  7136  000686  A4D8               	btfss	status,2,c
  7137  000688  D006               	goto	l4344
  7138                           
  7139                           ; BSR set to: 0
  7140                           ;doprnt.c: 741: cp = "(null)";
  7141  00068A  0EBD               	movlw	low STR_51
  7142  00068C  0100               	movlb	0	; () banked
  7143  00068E  6FA1               	movwf	printf@cp& (0+255),b
  7144  000690  0EFF               	movlw	high STR_51
  7145  000692  0100               	movlb	0	; () banked
  7146  000694  6FA2               	movwf	(printf@cp+1)& (0+255),b
  7147  000696                     l4344:
  7148                           
  7149                           ; BSR set to: 0
  7150                           ;doprnt.c: 745: len = 0;
  7151  000696  0E00               	movlw	0
  7152  000698  0100               	movlb	0	; () banked
  7153  00069A  6FA6               	movwf	(printf@len+1)& (0+255),b
  7154  00069C  0E00               	movlw	0
  7155  00069E  6FA5               	movwf	printf@len& (0+255),b
  7156                           
  7157                           ;doprnt.c: 746: while(cp[len])
  7158  0006A0  D003               	goto	l4348
  7159  0006A2                     l4346:
  7160                           
  7161                           ;doprnt.c: 747: len++;
  7162  0006A2  0100               	movlb	0	; () banked
  7163  0006A4  4BA5               	infsnz	printf@len& (0+255),f,b
  7164  0006A6  2BA6               	incf	(printf@len+1)& (0+255),f,b
  7165  0006A8                     l4348:
  7166                           
  7167                           ; BSR set to: 0
  7168  0006A8  0100               	movlb	0	; () banked
  7169  0006AA  51A5               	movf	printf@len& (0+255),w,b
  7170  0006AC  0100               	movlb	0	; () banked
  7171  0006AE  25A1               	addwf	printf@cp& (0+255),w,b
  7172  0006B0  0100               	movlb	0	; () banked
  7173  0006B2  6F9A               	movwf	??_printf& (0+255),b
  7174  0006B4  0100               	movlb	0	; () banked
  7175  0006B6  51A6               	movf	(printf@len+1)& (0+255),w,b
  7176  0006B8  0100               	movlb	0	; () banked
  7177  0006BA  21A2               	addwfc	(printf@cp+1)& (0+255),w,b
  7178  0006BC  0100               	movlb	0	; () banked
  7179  0006BE  6F9B               	movwf	(??_printf+1)& (0+255),b
  7180  0006C0  C09A  FFF6         	movff	??_printf,tblptrl
  7181  0006C4  C09B  FFF7         	movff	??_printf+1,tblptrh
  7182  0006C8  0E00               	movlw	low (__mediumconst shr (0+16))
  7183  0006CA  6EF8               	movwf	tblptru,c
  7184  0006CC  0E0F               	movlw	(high __ramtop+-1)
  7185  0006CE  64F7               	cpfsgt	tblptrh,c
  7186  0006D0  D003               	bra	u2827
  7187  0006D2  0008               	tblrd		*
  7188  0006D4  50F5               	movf	tablat,w,c
  7189  0006D6  D005               	bra	u2820
  7190  0006D8                     u2827:
  7191  0006D8  CFF6 FFE9          	movff	tblptrl,fsr0l
  7192  0006DC  CFF7 FFEA          	movff	tblptrh,fsr0h
  7193  0006E0  50EF               	movf	indf0,w,c
  7194  0006E2                     u2820:
  7195  0006E2  0900               	iorlw	0
  7196  0006E4  A4D8               	btfss	status,2,c
  7197  0006E6  D7DD               	goto	l4346
  7198                           
  7199                           ;doprnt.c: 757: if(width > len)
  7200  0006E8  0100               	movlb	0	; () banked
  7201  0006EA  51A9               	movf	printf@width& (0+255),w,b
  7202  0006EC  0100               	movlb	0	; () banked
  7203  0006EE  5DA5               	subwf	printf@len& (0+255),w,b
  7204  0006F0  0100               	movlb	0	; () banked
  7205  0006F2  51AA               	movf	(printf@width+1)& (0+255),w,b
  7206  0006F4  0100               	movlb	0	; () banked
  7207  0006F6  59A6               	subwfb	(printf@len+1)& (0+255),w,b
  7208  0006F8  B0D8               	btfsc	status,0,c
  7209  0006FA  D009               	goto	l4354
  7210                           
  7211                           ; BSR set to: 0
  7212                           ;doprnt.c: 758: width -= len;
  7213  0006FC  0100               	movlb	0	; () banked
  7214  0006FE  51A5               	movf	printf@len& (0+255),w,b
  7215  000700  0100               	movlb	0	; () banked
  7216  000702  5FA9               	subwf	printf@width& (0+255),f,b
  7217  000704  0100               	movlb	0	; () banked
  7218  000706  51A6               	movf	(printf@len+1)& (0+255),w,b
  7219  000708  0100               	movlb	0	; () banked
  7220  00070A  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  7221  00070C  D009               	goto	l4358
  7222  00070E                     l4354:
  7223                           
  7224                           ; BSR set to: 0
  7225                           ;doprnt.c: 759: else
  7226                           ;doprnt.c: 760: width = 0;
  7227  00070E  0E00               	movlw	0
  7228  000710  0100               	movlb	0	; () banked
  7229  000712  6FAA               	movwf	(printf@width+1)& (0+255),b
  7230  000714  0E00               	movlw	0
  7231  000716  6FA9               	movwf	printf@width& (0+255),b
  7232                           
  7233                           ; BSR set to: 0
  7234                           ;doprnt.c: 764: while(width--)
  7235  000718  D003               	goto	l4358
  7236  00071A                     l4356:
  7237                           
  7238                           ; BSR set to: 0
  7239                           ;doprnt.c: 765: (putch(' ') );
  7240  00071A  0E20               	movlw	32
  7241  00071C  ECD0  F015         	call	_putch
  7242  000720                     l4358:
  7243  000720  0100               	movlb	0	; () banked
  7244  000722  07A9               	decf	printf@width& (0+255),f,b
  7245  000724  A0D8               	btfss	status,0,c
  7246  000726  07AA               	decf	(printf@width+1)& (0+255),f,b
  7247  000728  0100               	movlb	0	; () banked
  7248  00072A  29A9               	incf	printf@width& (0+255),w,b
  7249  00072C  E1F6               	bnz	l4356
  7250  00072E  0100               	movlb	0	; () banked
  7251  000730  29AA               	incf	(printf@width+1)& (0+255),w,b
  7252  000732  B4D8               	btfsc	status,2,c
  7253  000734  D017               	goto	l4364
  7254  000736  D7F1               	goto	l4356
  7255  000738                     l4360:
  7256                           
  7257                           ; BSR set to: 0
  7258                           ;doprnt.c: 768: (putch(*cp++) );
  7259  000738  C0A1  FFF6         	movff	printf@cp,tblptrl
  7260  00073C  C0A2  FFF7         	movff	printf@cp+1,tblptrh
  7261  000740  0E00               	movlw	low (__mediumconst shr (0+16))
  7262  000742  6EF8               	movwf	tblptru,c
  7263  000744  0E0F               	movlw	(high __ramtop+-1)
  7264  000746  64F7               	cpfsgt	tblptrh,c
  7265  000748  D003               	bra	u2867
  7266  00074A  0008               	tblrd		*
  7267  00074C  50F5               	movf	tablat,w,c
  7268  00074E  D005               	bra	u2860
  7269  000750                     u2867:
  7270  000750  CFF6 FFE9          	movff	tblptrl,fsr0l
  7271  000754  CFF7 FFEA          	movff	tblptrh,fsr0h
  7272  000758  50EF               	movf	indf0,w,c
  7273  00075A                     u2860:
  7274  00075A  ECD0  F015         	call	_putch
  7275  00075E  0100               	movlb	0	; () banked
  7276  000760  4BA1               	infsnz	printf@cp& (0+255),f,b
  7277  000762  2BA2               	incf	(printf@cp+1)& (0+255),f,b
  7278  000764                     l4364:
  7279                           
  7280                           ; BSR set to: 0
  7281  000764  0100               	movlb	0	; () banked
  7282  000766  07A5               	decf	printf@len& (0+255),f,b
  7283  000768  A0D8               	btfss	status,0,c
  7284  00076A  07A6               	decf	(printf@len+1)& (0+255),f,b
  7285  00076C  0100               	movlb	0	; () banked
  7286  00076E  29A5               	incf	printf@len& (0+255),w,b
  7287  000770  E1E3               	bnz	l4360
  7288  000772  0100               	movlb	0	; () banked
  7289  000774  29A6               	incf	(printf@len+1)& (0+255),w,b
  7290  000776  B4D8               	btfsc	status,2,c
  7291  000778  D0F3               	goto	l4436
  7292  00077A  D7DE               	goto	l4360
  7293  00077C                     l4368:
  7294  00077C  C08E  FFF6         	movff	printf@f,tblptrl
  7295  000780  C08F  FFF7         	movff	printf@f+1,tblptrh
  7296  000784  0100               	movlb	0	; () banked
  7297  000786  4B8E               	infsnz	printf@f& (0+255),f,b
  7298  000788  2B8F               	incf	(printf@f+1)& (0+255),f,b
  7299  00078A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7300  00078A  6AF8               	clrf	tblptru,c
  7301  00078C                     	endif
  7302  00078C                     	if	0	;tblptru may be non-zero
  7303  00078C                     	endif
  7304  00078C  0008               	tblrd		*
  7305  00078E  CFF5 F0A8          	movff	tablat,printf@c
  7306  000792  0100               	movlb	0	; () banked
  7307  000794  51A8               	movf	printf@c& (0+255),w,b
  7308                           
  7309                           ; Switch size 1, requested type "space"
  7310                           ; Number of cases is 4, Range of values is 0 to 115
  7311                           ; switch strategies available:
  7312                           ; Name         Instructions Cycles
  7313                           ; simple_byte           13     7 (average)
  7314                           ;	Chosen strategy is simple_byte
  7315  000796  0A00               	xorlw	0	; case 0
  7316  000798  B4D8               	btfsc	status,2,c
  7317  00079A  0012               	return	
  7318  00079C  0A64               	xorlw	100	; case 100
  7319  00079E  B4D8               	btfsc	status,2,c
  7320  0007A0  D007               	goto	l4370
  7321  0007A2  0A0D               	xorlw	13	; case 105
  7322  0007A4  B4D8               	btfsc	status,2,c
  7323  0007A6  D004               	goto	l4370
  7324  0007A8  0A1A               	xorlw	26	; case 115
  7325  0007AA  B4D8               	btfsc	status,2,c
  7326  0007AC  D75B               	goto	l4336
  7327  0007AE  D0D8               	goto	l4436
  7328  0007B0                     l4370:
  7329                           
  7330                           ;doprnt.c: 1253: {
  7331                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7332  0007B0  C09F  FFD9         	movff	printf@ap,fsr2l
  7333  0007B4  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  7334  0007B8  CFDE F0A3          	movff	postinc2,printf@val
  7335  0007BC  CFDD F0A4          	movff	postdec2,printf@val+1
  7336  0007C0  0E02               	movlw	2
  7337  0007C2  0100               	movlb	0	; () banked
  7338  0007C4  279F               	addwf	printf@ap& (0+255),f,b
  7339  0007C6  0E00               	movlw	0
  7340  0007C8  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  7341                           
  7342                           ; BSR set to: 0
  7343                           ;doprnt.c: 1261: if((int)val < 0) {
  7344  0007CA  0100               	movlb	0	; () banked
  7345  0007CC  AFA4               	btfss	(printf@val+1)& (0+255),7,b
  7346  0007CE  D008               	goto	l4380
  7347                           
  7348                           ; BSR set to: 0
  7349                           ;doprnt.c: 1262: flag |= 0x03;
  7350  0007D0  0E03               	movlw	3
  7351  0007D2  0100               	movlb	0	; () banked
  7352  0007D4  13A7               	iorwf	printf@flag& (0+255),f,b
  7353                           
  7354                           ; BSR set to: 0
  7355                           ;doprnt.c: 1263: val = -val;
  7356  0007D6  0100               	movlb	0	; () banked
  7357  0007D8  6DA3               	negf	printf@val& (0+255),b
  7358  0007DA  1FA4               	comf	(printf@val+1)& (0+255),f,b
  7359  0007DC  B0D8               	btfsc	status,0,c
  7360  0007DE  2BA4               	incf	(printf@val+1)& (0+255),f,b
  7361  0007E0                     l4380:
  7362                           
  7363                           ; BSR set to: 0
  7364                           ;doprnt.c: 1264: }
  7365                           ;doprnt.c: 1266: }
  7366                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7367  0007E0  0E01               	movlw	1
  7368  0007E2  0100               	movlb	0	; () banked
  7369  0007E4  6FA8               	movwf	printf@c& (0+255),b
  7370  0007E6                     l4382:
  7371                           
  7372                           ; BSR set to: 0
  7373  0007E6  0E05               	movlw	5
  7374  0007E8  0100               	movlb	0	; () banked
  7375  0007EA  19A8               	xorwf	printf@c& (0+255),w,b
  7376  0007EC  B4D8               	btfsc	status,2,c
  7377  0007EE  D019               	goto	l4394
  7378                           
  7379                           ; BSR set to: 0
  7380                           ;doprnt.c: 1306: if(val < dpowers[c])
  7381                           
  7382                           ; BSR set to: 0
  7383                           
  7384                           ; BSR set to: 0
  7385  0007F0  0100               	movlb	0	; () banked
  7386  0007F2  51A8               	movf	printf@c& (0+255),w,b
  7387  0007F4  0D02               	mullw	2
  7388  0007F6  0EC6               	movlw	low _dpowers
  7389  0007F8  24F3               	addwf	prodl,w,c
  7390  0007FA  6EF6               	movwf	tblptrl,c
  7391  0007FC  0EFD               	movlw	high _dpowers
  7392  0007FE  20F4               	addwfc	prodh,w,c
  7393  000800  6EF7               	movwf	tblptrh,c
  7394  000802                     	if	1	;There are 3 active tblptr bytes
  7395  000802  6AF8               	clrf	tblptru,c
  7396  000804  0E00               	movlw	low (__mediumconst shr (0+16))
  7397  000806  22F8               	addwfc	tblptru,f,c
  7398  000808                     	endif
  7399  000808  0009               	tblrd		*+
  7400  00080A  50F5               	movf	tablat,w,c
  7401  00080C  0100               	movlb	0	; () banked
  7402  00080E  5DA3               	subwf	printf@val& (0+255),w,b
  7403  000810  0009               	tblrd		*+
  7404  000812  50F5               	movf	tablat,w,c
  7405  000814  0100               	movlb	0	; () banked
  7406  000816  59A4               	subwfb	(printf@val+1)& (0+255),w,b
  7407  000818  A0D8               	btfss	status,0,c
  7408  00081A  D003               	goto	l4394
  7409                           
  7410                           ; BSR set to: 0
  7411                           
  7412                           ; BSR set to: 0
  7413                           
  7414                           ; BSR set to: 0
  7415                           ;doprnt.c: 1307: break;
  7416  00081C  0100               	movlb	0	; () banked
  7417  00081E  2BA8               	incf	printf@c& (0+255),f,b
  7418  000820  D7E2               	goto	l4382
  7419  000822                     l4394:
  7420                           
  7421                           ; BSR set to: 0
  7422                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7423  000822  0100               	movlb	0	; () banked
  7424  000824  51A9               	movf	printf@width& (0+255),w,b
  7425  000826  0100               	movlb	0	; () banked
  7426  000828  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7427  00082A  B4D8               	btfsc	status,2,c
  7428  00082C  D00B               	goto	l4400
  7429                           
  7430                           ; BSR set to: 0
  7431  00082E  C0A7  F09A         	movff	printf@flag,??_printf
  7432  000832  0E03               	movlw	3
  7433  000834  0100               	movlb	0	; () banked
  7434  000836  179A               	andwf	??_printf& (0+255),f,b
  7435  000838  B4D8               	btfsc	status,2,c
  7436  00083A  D004               	goto	l4400
  7437                           
  7438                           ; BSR set to: 0
  7439                           ;doprnt.c: 1346: width--;
  7440  00083C  0100               	movlb	0	; () banked
  7441  00083E  07A9               	decf	printf@width& (0+255),f,b
  7442  000840  A0D8               	btfss	status,0,c
  7443  000842  07AA               	decf	(printf@width+1)& (0+255),f,b
  7444  000844                     l4400:
  7445                           
  7446                           ; BSR set to: 0
  7447                           ;doprnt.c: 1381: if(width > c)
  7448  000844  0E80               	movlw	128
  7449  000846  0100               	movlb	0	; () banked
  7450  000848  BFA8               	btfsc	printf@c& (0+255),7,b
  7451  00084A  0E7F               	movlw	127
  7452  00084C  0100               	movlb	0	; () banked
  7453  00084E  6F9A               	movwf	??_printf& (0+255),b
  7454  000850  0100               	movlb	0	; () banked
  7455  000852  51A9               	movf	printf@width& (0+255),w,b
  7456  000854  0100               	movlb	0	; () banked
  7457  000856  5DA8               	subwf	printf@c& (0+255),w,b
  7458  000858  0100               	movlb	0	; () banked
  7459  00085A  51AA               	movf	(printf@width+1)& (0+255),w,b
  7460  00085C  0A80               	xorlw	128
  7461  00085E  0100               	movlb	0	; () banked
  7462  000860  599A               	subwfb	??_printf& (0+255),w,b
  7463  000862  B0D8               	btfsc	status,0,c
  7464  000864  D00B               	goto	l4404
  7465                           
  7466                           ; BSR set to: 0
  7467                           ;doprnt.c: 1382: width -= c;
  7468  000866  0100               	movlb	0	; () banked
  7469  000868  51A8               	movf	printf@c& (0+255),w,b
  7470  00086A  0100               	movlb	0	; () banked
  7471  00086C  5FA9               	subwf	printf@width& (0+255),f,b
  7472  00086E  0E00               	movlw	0
  7473  000870  0100               	movlb	0	; () banked
  7474  000872  BFA8               	btfsc	printf@c& (0+255),7,b
  7475  000874  0EFF               	movlw	255
  7476  000876  0100               	movlb	0	; () banked
  7477  000878  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  7478  00087A  D005               	goto	l4406
  7479  00087C                     l4404:
  7480                           
  7481                           ; BSR set to: 0
  7482                           ;doprnt.c: 1383: else
  7483                           ;doprnt.c: 1384: width = 0;
  7484  00087C  0E00               	movlw	0
  7485  00087E  0100               	movlb	0	; () banked
  7486  000880  6FAA               	movwf	(printf@width+1)& (0+255),b
  7487  000882  0E00               	movlw	0
  7488  000884  6FA9               	movwf	printf@width& (0+255),b
  7489  000886                     l4406:
  7490                           
  7491                           ; BSR set to: 0
  7492                           ;doprnt.c: 1387: if(flag & 0x04) {
  7493  000886  0100               	movlb	0	; () banked
  7494  000888  A5A7               	btfss	printf@flag& (0+255),2,b
  7495  00088A  D018               	goto	l4418
  7496                           
  7497                           ; BSR set to: 0
  7498                           ;doprnt.c: 1392: if(flag & 0x03)
  7499  00088C  C0A7  F09A         	movff	printf@flag,??_printf
  7500  000890  0E03               	movlw	3
  7501  000892  0100               	movlb	0	; () banked
  7502  000894  179A               	andwf	??_printf& (0+255),f,b
  7503  000896  B4D8               	btfsc	status,2,c
  7504  000898  D003               	goto	l4412
  7505                           
  7506                           ; BSR set to: 0
  7507                           ;doprnt.c: 1393: (putch('-') );
  7508  00089A  0E2D               	movlw	45
  7509  00089C  ECD0  F015         	call	_putch
  7510  0008A0                     l4412:
  7511                           
  7512                           ;doprnt.c: 1415: if(width)
  7513  0008A0  0100               	movlb	0	; () banked
  7514  0008A2  51A9               	movf	printf@width& (0+255),w,b
  7515  0008A4  0100               	movlb	0	; () banked
  7516  0008A6  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7517  0008A8  B4D8               	btfsc	status,2,c
  7518  0008AA  D025               	goto	l4428
  7519                           
  7520                           ; BSR set to: 0
  7521                           ;doprnt.c: 1417: (putch('0') );
  7522                           
  7523                           ; BSR set to: 0
  7524                           
  7525                           ;doprnt.c: 1416: do
  7526  0008AC  0E30               	movlw	48
  7527  0008AE  ECD0  F015         	call	_putch
  7528                           
  7529                           ;doprnt.c: 1418: while(--width);
  7530  0008B2  0100               	movlb	0	; () banked
  7531  0008B4  07A9               	decf	printf@width& (0+255),f,b
  7532  0008B6  A0D8               	btfss	status,0,c
  7533  0008B8  07AA               	decf	(printf@width+1)& (0+255),f,b
  7534  0008BA  D7F2               	goto	l4412
  7535  0008BC                     l4418:
  7536                           
  7537                           ; BSR set to: 0
  7538                           ;doprnt.c: 1422: {
  7539                           ;doprnt.c: 1424: if(width
  7540                           ;doprnt.c: 1428: )
  7541  0008BC  0100               	movlb	0	; () banked
  7542  0008BE  51A9               	movf	printf@width& (0+255),w,b
  7543  0008C0  0100               	movlb	0	; () banked
  7544  0008C2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7545  0008C4  B4D8               	btfsc	status,2,c
  7546  0008C6  D00D               	goto	l4424
  7547  0008C8                     l4420:
  7548                           
  7549                           ; BSR set to: 0
  7550                           ;doprnt.c: 1430: (putch(' ') );
  7551  0008C8  0E20               	movlw	32
  7552  0008CA  ECD0  F015         	call	_putch
  7553                           
  7554                           ;doprnt.c: 1431: while(--width);
  7555  0008CE  0100               	movlb	0	; () banked
  7556  0008D0  07A9               	decf	printf@width& (0+255),f,b
  7557  0008D2  A0D8               	btfss	status,0,c
  7558  0008D4  07AA               	decf	(printf@width+1)& (0+255),f,b
  7559  0008D6  0100               	movlb	0	; () banked
  7560  0008D8  51A9               	movf	printf@width& (0+255),w,b
  7561  0008DA  0100               	movlb	0	; () banked
  7562  0008DC  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7563  0008DE  A4D8               	btfss	status,2,c
  7564  0008E0  D7F3               	goto	l4420
  7565  0008E2                     l4424:
  7566                           
  7567                           ; BSR set to: 0
  7568                           ;doprnt.c: 1438: if(flag & 0x03)
  7569  0008E2  C0A7  F09A         	movff	printf@flag,??_printf
  7570  0008E6  0E03               	movlw	3
  7571  0008E8  0100               	movlb	0	; () banked
  7572  0008EA  179A               	andwf	??_printf& (0+255),f,b
  7573  0008EC  B4D8               	btfsc	status,2,c
  7574  0008EE  D003               	goto	l4428
  7575                           
  7576                           ; BSR set to: 0
  7577                           ;doprnt.c: 1439: (putch('-') );
  7578  0008F0  0E2D               	movlw	45
  7579  0008F2  ECD0  F015         	call	_putch
  7580  0008F6                     l4428:
  7581                           
  7582                           ;doprnt.c: 1469: }
  7583                           ;doprnt.c: 1472: prec = c;
  7584  0008F6  C0A8  F09E         	movff	printf@c,printf@prec
  7585                           
  7586                           ;doprnt.c: 1474: while(prec--) {
  7587  0008FA  D02C               	goto	l4434
  7588  0008FC                     l4430:
  7589                           
  7590                           ;doprnt.c: 1478: {
  7591                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7592  0008FC  0100               	movlb	0	; () banked
  7593  0008FE  519E               	movf	printf@prec& (0+255),w,b
  7594  000900  0D02               	mullw	2
  7595  000902  0EC6               	movlw	low _dpowers
  7596  000904  24F3               	addwf	prodl,w,c
  7597  000906  6EF6               	movwf	tblptrl,c
  7598  000908  0EFD               	movlw	high _dpowers
  7599  00090A  20F4               	addwfc	prodh,w,c
  7600  00090C  6EF7               	movwf	tblptrh,c
  7601  00090E                     	if	1	;There are 3 active tblptr bytes
  7602  00090E  6AF8               	clrf	tblptru,c
  7603  000910  0E00               	movlw	low (__mediumconst shr (0+16))
  7604  000912  22F8               	addwfc	tblptru,f,c
  7605  000914                     	endif
  7606  000914  0009               	tblrd		*+
  7607  000916  CFF5 F082          	movff	tablat,___lwdiv@divisor
  7608  00091A  000A               	tblrd		*-
  7609  00091C  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  7610  000920  C0A3  F080         	movff	printf@val,___lwdiv@dividend
  7611  000924  C0A4  F081         	movff	printf@val+1,___lwdiv@dividend+1
  7612  000928  ECDB  F010         	call	___lwdiv	;wreg free
  7613  00092C  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  7614  000930  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  7615  000934  0E00               	movlw	0
  7616  000936  0100               	movlb	0	; () banked
  7617  000938  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  7618  00093A  0E0A               	movlw	10
  7619  00093C  6F89               	movwf	___lwmod@divisor& (0+255),b
  7620  00093E  ECBF  F011         	call	___lwmod	;wreg free
  7621  000942  0100               	movlb	0	; () banked
  7622  000944  5187               	movf	?___lwmod& (0+255),w,b
  7623  000946  0F30               	addlw	48
  7624  000948  0100               	movlb	0	; () banked
  7625  00094A  6FA8               	movwf	printf@c& (0+255),b
  7626                           
  7627                           ; BSR set to: 0
  7628                           ;doprnt.c: 1523: }
  7629                           ;doprnt.c: 1524: (putch(c) );
  7630  00094C  0100               	movlb	0	; () banked
  7631  00094E  51A8               	movf	printf@c& (0+255),w,b
  7632  000950  ECD0  F015         	call	_putch
  7633  000954                     l4434:
  7634  000954  0100               	movlb	0	; () banked
  7635  000956  079E               	decf	printf@prec& (0+255),f,b
  7636  000958  0100               	movlb	0	; () banked
  7637  00095A  299E               	incf	printf@prec& (0+255),w,b
  7638  00095C  A4D8               	btfss	status,2,c
  7639  00095E  D7CE               	goto	l4430
  7640  000960                     l4436:
  7641  000960  C08E  FFF6         	movff	printf@f,tblptrl
  7642  000964  C08F  FFF7         	movff	printf@f+1,tblptrh
  7643  000968  0100               	movlb	0	; () banked
  7644  00096A  4B8E               	infsnz	printf@f& (0+255),f,b
  7645  00096C  2B8F               	incf	(printf@f+1)& (0+255),f,b
  7646  00096E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7647  00096E  6AF8               	clrf	tblptru,c
  7648  000970                     	endif
  7649  000970                     	if	0	;tblptru may be non-zero
  7650  000970                     	endif
  7651  000970  0008               	tblrd		*
  7652  000972  CFF5 F0A8          	movff	tablat,printf@c
  7653  000976  0100               	movlb	0	; () banked
  7654  000978  51A8               	movf	printf@c& (0+255),w,b
  7655  00097A  B4D8               	btfsc	status,2,c
  7656  00097C  0012               	return	
  7657  00097E  D602               	goto	l4312
  7658  000980                     __end_of_printf:
  7659                           	opt stack 0
  7660                           tblptru	equ	0xFF8
  7661                           tblptrh	equ	0xFF7
  7662                           tblptrl	equ	0xFF6
  7663                           tablat	equ	0xFF5
  7664                           prodh	equ	0xFF4
  7665                           prodl	equ	0xFF3
  7666                           intcon	equ	0xFF2
  7667                           intcon2	equ	0xFF1
  7668                           intcon3	equ	0xFF0
  7669                           indf0	equ	0xFEF
  7670                           postinc0	equ	0xFEE
  7671                           fsr0h	equ	0xFEA
  7672                           fsr0l	equ	0xFE9
  7673                           wreg	equ	0xFE8
  7674                           postdec1	equ	0xFE5
  7675                           fsr1l	equ	0xFE1
  7676                           indf2	equ	0xFDF
  7677                           postinc2	equ	0xFDE
  7678                           postdec2	equ	0xFDD
  7679                           fsr2h	equ	0xFDA
  7680                           fsr2l	equ	0xFD9
  7681                           status	equ	0xFD8
  7682                           
  7683 ;; *************** function _putch *****************
  7684 ;; Defined at:
  7685 ;;		line 19 in file "lcd.c"
  7686 ;; Parameters:    Size  Location     Type
  7687 ;;  data            1    wreg     unsigned char 
  7688 ;; Auto vars:     Size  Location     Type
  7689 ;;  data            1    2[BANK0 ] unsigned char 
  7690 ;; Return value:  Size  Location     Type
  7691 ;;                  1    wreg      void 
  7692 ;; Registers used:
  7693 ;;		wreg, status,2, status,0, cstack
  7694 ;; Tracked objects:
  7695 ;;		On entry : 0/0
  7696 ;;		On exit  : 0/0
  7697 ;;		Unchanged: 0/0
  7698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7700 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7702 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7703 ;;Total ram usage:        1 bytes
  7704 ;; Hardware stack levels used:    1
  7705 ;; Hardware stack levels required when called:    8
  7706 ;; This function calls:
  7707 ;;		_lcdNibble
  7708 ;; This function is called by:
  7709 ;;		_printf
  7710 ;; This function uses a non-reentrant model
  7711 ;;
  7712                           
  7713                           	psect	text32
  7714  002BA0                     __ptext32:
  7715                           	opt stack 0
  7716  002BA0                     _putch:
  7717                           	opt stack 19
  7718                           
  7719                           ;incstack = 0
  7720                           ;putch@data stored from wreg
  7721  002BA0  0100               	movlb	0	; () banked
  7722  002BA2  6F82               	movwf	putch@data& (0+255),b
  7723                           
  7724                           ;lcd.c: 20: LATDbits.LATD2 = 1;
  7725  002BA4  848C               	bsf	3980,2,c	;volatile
  7726                           
  7727                           ;lcd.c: 21: lcdNibble(data);
  7728  002BA6  0100               	movlb	0	; () banked
  7729  002BA8  5182               	movf	putch@data& (0+255),w,b
  7730  002BAA  EC8B  F011         	call	_lcdNibble
  7731  002BAE  0012               	return		;funcret
  7732  002BB0                     __end_of_putch:
  7733                           	opt stack 0
  7734                           tblptru	equ	0xFF8
  7735                           tblptrh	equ	0xFF7
  7736                           tblptrl	equ	0xFF6
  7737                           tablat	equ	0xFF5
  7738                           prodh	equ	0xFF4
  7739                           prodl	equ	0xFF3
  7740                           intcon	equ	0xFF2
  7741                           intcon2	equ	0xFF1
  7742                           intcon3	equ	0xFF0
  7743                           indf0	equ	0xFEF
  7744                           postinc0	equ	0xFEE
  7745                           fsr0h	equ	0xFEA
  7746                           fsr0l	equ	0xFE9
  7747                           wreg	equ	0xFE8
  7748                           postdec1	equ	0xFE5
  7749                           fsr1l	equ	0xFE1
  7750                           indf2	equ	0xFDF
  7751                           postinc2	equ	0xFDE
  7752                           postdec2	equ	0xFDD
  7753                           fsr2h	equ	0xFDA
  7754                           fsr2l	equ	0xFD9
  7755                           status	equ	0xFD8
  7756                           
  7757 ;; *************** function _isdigit *****************
  7758 ;; Defined at:
  7759 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7760 ;; Parameters:    Size  Location     Type
  7761 ;;  c               1    wreg     unsigned char 
  7762 ;; Auto vars:     Size  Location     Type
  7763 ;;  c               1    2[BANK0 ] unsigned char 
  7764 ;; Return value:  Size  Location     Type
  7765 ;;		None               void
  7766 ;; Registers used:
  7767 ;;		wreg, status,2, status,0
  7768 ;; Tracked objects:
  7769 ;;		On entry : 0/0
  7770 ;;		On exit  : 0/0
  7771 ;;		Unchanged: 0/0
  7772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7774 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7775 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7776 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7777 ;;Total ram usage:        3 bytes
  7778 ;; Hardware stack levels used:    1
  7779 ;; Hardware stack levels required when called:    7
  7780 ;; This function calls:
  7781 ;;		Nothing
  7782 ;; This function is called by:
  7783 ;;		_printf
  7784 ;; This function uses a non-reentrant model
  7785 ;;
  7786                           
  7787                           	psect	text33
  7788  002A04                     __ptext33:
  7789                           	opt stack 0
  7790  002A04                     _isdigit:
  7791                           	opt stack 20
  7792                           
  7793                           ;incstack = 0
  7794                           ;isdigit@c stored from wreg
  7795  002A04  0100               	movlb	0	; () banked
  7796  002A06  6F82               	movwf	isdigit@c& (0+255),b
  7797  002A08  0E00               	movlw	0
  7798  002A0A  0100               	movlb	0	; () banked
  7799  002A0C  6F81               	movwf	_isdigit$1652& (0+255),b
  7800                           
  7801                           ; BSR set to: 0
  7802  002A0E  0E3A               	movlw	58
  7803  002A10  0100               	movlb	0	; () banked
  7804  002A12  6182               	cpfslt	isdigit@c& (0+255),b
  7805  002A14  D007               	goto	l4162
  7806                           
  7807                           ; BSR set to: 0
  7808  002A16  0E2F               	movlw	47
  7809  002A18  0100               	movlb	0	; () banked
  7810  002A1A  6582               	cpfsgt	isdigit@c& (0+255),b
  7811  002A1C  D003               	goto	l4162
  7812                           
  7813                           ; BSR set to: 0
  7814  002A1E  0E01               	movlw	1
  7815  002A20  0100               	movlb	0	; () banked
  7816  002A22  6F81               	movwf	_isdigit$1652& (0+255),b
  7817  002A24                     l4162:
  7818                           
  7819                           ; BSR set to: 0
  7820  002A24  C081  F080         	movff	_isdigit$1652,??_isdigit
  7821  002A28  0100               	movlb	0	; () banked
  7822  002A2A  3180               	rrcf	??_isdigit& (0+255),w,b
  7823  002A2C  0012               	return	
  7824  002A2E                     __end_of_isdigit:
  7825                           	opt stack 0
  7826                           tblptru	equ	0xFF8
  7827                           tblptrh	equ	0xFF7
  7828                           tblptrl	equ	0xFF6
  7829                           tablat	equ	0xFF5
  7830                           prodh	equ	0xFF4
  7831                           prodl	equ	0xFF3
  7832                           intcon	equ	0xFF2
  7833                           intcon2	equ	0xFF1
  7834                           intcon3	equ	0xFF0
  7835                           indf0	equ	0xFEF
  7836                           postinc0	equ	0xFEE
  7837                           fsr0h	equ	0xFEA
  7838                           fsr0l	equ	0xFE9
  7839                           wreg	equ	0xFE8
  7840                           postdec1	equ	0xFE5
  7841                           fsr1l	equ	0xFE1
  7842                           indf2	equ	0xFDF
  7843                           postinc2	equ	0xFDE
  7844                           postdec2	equ	0xFDD
  7845                           fsr2h	equ	0xFDA
  7846                           fsr2l	equ	0xFD9
  7847                           status	equ	0xFD8
  7848                           
  7849 ;; *************** function ___wmul *****************
  7850 ;; Defined at:
  7851 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7852 ;; Parameters:    Size  Location     Type
  7853 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7854 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7855 ;; Auto vars:     Size  Location     Type
  7856 ;;  product         2    4[BANK0 ] unsigned int 
  7857 ;; Return value:  Size  Location     Type
  7858 ;;                  2    0[BANK0 ] unsigned int 
  7859 ;; Registers used:
  7860 ;;		wreg, status,2, status,0, prodl, prodh
  7861 ;; Tracked objects:
  7862 ;;		On entry : 0/0
  7863 ;;		On exit  : 0/0
  7864 ;;		Unchanged: 0/0
  7865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7866 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7867 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7869 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7870 ;;Total ram usage:        6 bytes
  7871 ;; Hardware stack levels used:    1
  7872 ;; Hardware stack levels required when called:    7
  7873 ;; This function calls:
  7874 ;;		Nothing
  7875 ;; This function is called by:
  7876 ;;		_printf
  7877 ;; This function uses a non-reentrant model
  7878 ;;
  7879                           
  7880                           	psect	text34
  7881  002738                     __ptext34:
  7882                           	opt stack 0
  7883  002738                     ___wmul:
  7884                           	opt stack 20
  7885                           
  7886                           ; BSR set to: 0
  7887                           ;incstack = 0
  7888  002738  0100               	movlb	0	; () banked
  7889  00273A  5180               	movf	___wmul@multiplier& (0+255),w,b
  7890  00273C  0100               	movlb	0	; () banked
  7891  00273E  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7892  002740  CFF3 F084          	movff	prodl,___wmul@product
  7893  002744  CFF4 F085          	movff	prodh,___wmul@product+1
  7894  002748  0100               	movlb	0	; () banked
  7895  00274A  5180               	movf	___wmul@multiplier& (0+255),w,b
  7896  00274C  0100               	movlb	0	; () banked
  7897  00274E  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7898  002750  50F3               	movf	prodl,w,c
  7899  002752  0100               	movlb	0	; () banked
  7900  002754  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7901  002756  0100               	movlb	0	; () banked
  7902  002758  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7903  00275A  0100               	movlb	0	; () banked
  7904  00275C  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7905  00275E  50F3               	movf	prodl,w,c
  7906  002760  0100               	movlb	0	; () banked
  7907  002762  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7908                           
  7909                           ; BSR set to: 0
  7910  002764  C084  F080         	movff	___wmul@product,?___wmul
  7911  002768  C085  F081         	movff	___wmul@product+1,?___wmul+1
  7912  00276C  0012               	return	
  7913  00276E                     __end_of___wmul:
  7914                           	opt stack 0
  7915                           tblptru	equ	0xFF8
  7916                           tblptrh	equ	0xFF7
  7917                           tblptrl	equ	0xFF6
  7918                           tablat	equ	0xFF5
  7919                           prodh	equ	0xFF4
  7920                           prodl	equ	0xFF3
  7921                           intcon	equ	0xFF2
  7922                           intcon2	equ	0xFF1
  7923                           intcon3	equ	0xFF0
  7924                           indf0	equ	0xFEF
  7925                           postinc0	equ	0xFEE
  7926                           fsr0h	equ	0xFEA
  7927                           fsr0l	equ	0xFE9
  7928                           wreg	equ	0xFE8
  7929                           postdec1	equ	0xFE5
  7930                           fsr1l	equ	0xFE1
  7931                           indf2	equ	0xFDF
  7932                           postinc2	equ	0xFDE
  7933                           postdec2	equ	0xFDD
  7934                           fsr2h	equ	0xFDA
  7935                           fsr2l	equ	0xFD9
  7936                           status	equ	0xFD8
  7937                           
  7938 ;; *************** function ___lwmod *****************
  7939 ;; Defined at:
  7940 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  7941 ;; Parameters:    Size  Location     Type
  7942 ;;  dividend        2    7[BANK0 ] unsigned int 
  7943 ;;  divisor         2    9[BANK0 ] unsigned int 
  7944 ;; Auto vars:     Size  Location     Type
  7945 ;;  counter         1   11[BANK0 ] unsigned char 
  7946 ;; Return value:  Size  Location     Type
  7947 ;;                  2    7[BANK0 ] unsigned int 
  7948 ;; Registers used:
  7949 ;;		wreg, status,2, status,0
  7950 ;; Tracked objects:
  7951 ;;		On entry : 0/0
  7952 ;;		On exit  : 0/0
  7953 ;;		Unchanged: 0/0
  7954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7955 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7956 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7958 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7959 ;;Total ram usage:        5 bytes
  7960 ;; Hardware stack levels used:    1
  7961 ;; Hardware stack levels required when called:    7
  7962 ;; This function calls:
  7963 ;;		Nothing
  7964 ;; This function is called by:
  7965 ;;		_printf
  7966 ;; This function uses a non-reentrant model
  7967 ;;
  7968                           
  7969                           	psect	text35
  7970  00237E                     __ptext35:
  7971                           	opt stack 0
  7972  00237E                     ___lwmod:
  7973                           	opt stack 20
  7974                           
  7975                           ; BSR set to: 0
  7976                           ;incstack = 0
  7977  00237E  0100               	movlb	0	; () banked
  7978  002380  5189               	movf	___lwmod@divisor& (0+255),w,b
  7979  002382  0100               	movlb	0	; () banked
  7980  002384  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  7981  002386  B4D8               	btfsc	status,2,c
  7982  002388  D026               	goto	l1755
  7983                           
  7984                           ; BSR set to: 0
  7985  00238A  0E01               	movlw	1
  7986  00238C  0100               	movlb	0	; () banked
  7987  00238E  6F8B               	movwf	___lwmod@counter& (0+255),b
  7988  002390  D006               	goto	l4200
  7989  002392                     l4198:
  7990                           
  7991                           ; BSR set to: 0
  7992  002392  0100               	movlb	0	; () banked
  7993  002394  90D8               	bcf	status,0,c
  7994  002396  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  7995  002398  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  7996  00239A  0100               	movlb	0	; () banked
  7997  00239C  2B8B               	incf	___lwmod@counter& (0+255),f,b
  7998  00239E                     l4200:
  7999                           
  8000                           ; BSR set to: 0
  8001  00239E  0100               	movlb	0	; () banked
  8002  0023A0  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  8003  0023A2  D7F7               	goto	l4198
  8004  0023A4                     l4202:
  8005                           
  8006                           ; BSR set to: 0
  8007  0023A4  0100               	movlb	0	; () banked
  8008  0023A6  5189               	movf	___lwmod@divisor& (0+255),w,b
  8009  0023A8  0100               	movlb	0	; () banked
  8010  0023AA  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  8011  0023AC  0100               	movlb	0	; () banked
  8012  0023AE  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8013  0023B0  0100               	movlb	0	; () banked
  8014  0023B2  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  8015  0023B4  A0D8               	btfss	status,0,c
  8016  0023B6  D008               	goto	l4206
  8017                           
  8018                           ; BSR set to: 0
  8019  0023B8  0100               	movlb	0	; () banked
  8020  0023BA  5189               	movf	___lwmod@divisor& (0+255),w,b
  8021  0023BC  0100               	movlb	0	; () banked
  8022  0023BE  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  8023  0023C0  0100               	movlb	0	; () banked
  8024  0023C2  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8025  0023C4  0100               	movlb	0	; () banked
  8026  0023C6  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  8027  0023C8                     l4206:
  8028                           
  8029                           ; BSR set to: 0
  8030  0023C8  0100               	movlb	0	; () banked
  8031  0023CA  90D8               	bcf	status,0,c
  8032  0023CC  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  8033  0023CE  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  8034                           
  8035                           ; BSR set to: 0
  8036  0023D0  0100               	movlb	0	; () banked
  8037  0023D2  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  8038  0023D4  D7E7               	goto	l4202
  8039  0023D6                     l1755:
  8040                           
  8041                           ; BSR set to: 0
  8042  0023D6  C087  F087         	movff	___lwmod@dividend,?___lwmod
  8043  0023DA  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  8044                           
  8045                           ; BSR set to: 0
  8046  0023DE  0012               	return		;funcret
  8047  0023E0                     __end_of___lwmod:
  8048                           	opt stack 0
  8049                           tblptru	equ	0xFF8
  8050                           tblptrh	equ	0xFF7
  8051                           tblptrl	equ	0xFF6
  8052                           tablat	equ	0xFF5
  8053                           prodh	equ	0xFF4
  8054                           prodl	equ	0xFF3
  8055                           intcon	equ	0xFF2
  8056                           intcon2	equ	0xFF1
  8057                           intcon3	equ	0xFF0
  8058                           indf0	equ	0xFEF
  8059                           postinc0	equ	0xFEE
  8060                           fsr0h	equ	0xFEA
  8061                           fsr0l	equ	0xFE9
  8062                           wreg	equ	0xFE8
  8063                           postdec1	equ	0xFE5
  8064                           fsr1l	equ	0xFE1
  8065                           indf2	equ	0xFDF
  8066                           postinc2	equ	0xFDE
  8067                           postdec2	equ	0xFDD
  8068                           fsr2h	equ	0xFDA
  8069                           fsr2l	equ	0xFD9
  8070                           status	equ	0xFD8
  8071                           
  8072 ;; *************** function ___lwdiv *****************
  8073 ;; Defined at:
  8074 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  8075 ;; Parameters:    Size  Location     Type
  8076 ;;  dividend        2    0[BANK0 ] unsigned int 
  8077 ;;  divisor         2    2[BANK0 ] unsigned int 
  8078 ;; Auto vars:     Size  Location     Type
  8079 ;;  quotient        2    4[BANK0 ] unsigned int 
  8080 ;;  counter         1    6[BANK0 ] unsigned char 
  8081 ;; Return value:  Size  Location     Type
  8082 ;;                  2    0[BANK0 ] unsigned int 
  8083 ;; Registers used:
  8084 ;;		wreg, status,2, status,0
  8085 ;; Tracked objects:
  8086 ;;		On entry : 0/0
  8087 ;;		On exit  : 0/0
  8088 ;;		Unchanged: 0/0
  8089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8090 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8091 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8093 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8094 ;;Total ram usage:        7 bytes
  8095 ;; Hardware stack levels used:    1
  8096 ;; Hardware stack levels required when called:    7
  8097 ;; This function calls:
  8098 ;;		Nothing
  8099 ;; This function is called by:
  8100 ;;		_printf
  8101 ;; This function uses a non-reentrant model
  8102 ;;
  8103                           
  8104                           	psect	text36
  8105  0021B6                     __ptext36:
  8106                           	opt stack 0
  8107  0021B6                     ___lwdiv:
  8108                           	opt stack 20
  8109                           
  8110                           ; BSR set to: 0
  8111                           ;incstack = 0
  8112  0021B6  0E00               	movlw	0
  8113  0021B8  0100               	movlb	0	; () banked
  8114  0021BA  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  8115  0021BC  0E00               	movlw	0
  8116  0021BE  6F84               	movwf	___lwdiv@quotient& (0+255),b
  8117                           
  8118                           ; BSR set to: 0
  8119  0021C0  0100               	movlb	0	; () banked
  8120  0021C2  5182               	movf	___lwdiv@divisor& (0+255),w,b
  8121  0021C4  0100               	movlb	0	; () banked
  8122  0021C6  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  8123  0021C8  B4D8               	btfsc	status,2,c
  8124  0021CA  D02C               	goto	l1745
  8125                           
  8126                           ; BSR set to: 0
  8127  0021CC  0E01               	movlw	1
  8128  0021CE  0100               	movlb	0	; () banked
  8129  0021D0  6F86               	movwf	___lwdiv@counter& (0+255),b
  8130  0021D2  D006               	goto	l4180
  8131  0021D4                     l4178:
  8132                           
  8133                           ; BSR set to: 0
  8134  0021D4  0100               	movlb	0	; () banked
  8135  0021D6  90D8               	bcf	status,0,c
  8136  0021D8  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  8137  0021DA  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  8138  0021DC  0100               	movlb	0	; () banked
  8139  0021DE  2B86               	incf	___lwdiv@counter& (0+255),f,b
  8140  0021E0                     l4180:
  8141                           
  8142                           ; BSR set to: 0
  8143  0021E0  0100               	movlb	0	; () banked
  8144  0021E2  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  8145  0021E4  D7F7               	goto	l4178
  8146  0021E6                     l4182:
  8147                           
  8148                           ; BSR set to: 0
  8149  0021E6  0100               	movlb	0	; () banked
  8150  0021E8  90D8               	bcf	status,0,c
  8151  0021EA  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  8152  0021EC  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  8153                           
  8154                           ; BSR set to: 0
  8155  0021EE  0100               	movlb	0	; () banked
  8156  0021F0  5182               	movf	___lwdiv@divisor& (0+255),w,b
  8157  0021F2  0100               	movlb	0	; () banked
  8158  0021F4  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  8159  0021F6  0100               	movlb	0	; () banked
  8160  0021F8  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8161  0021FA  0100               	movlb	0	; () banked
  8162  0021FC  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  8163  0021FE  A0D8               	btfss	status,0,c
  8164  002200  D00A               	goto	l4190
  8165                           
  8166                           ; BSR set to: 0
  8167  002202  0100               	movlb	0	; () banked
  8168  002204  5182               	movf	___lwdiv@divisor& (0+255),w,b
  8169  002206  0100               	movlb	0	; () banked
  8170  002208  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  8171  00220A  0100               	movlb	0	; () banked
  8172  00220C  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8173  00220E  0100               	movlb	0	; () banked
  8174  002210  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  8175                           
  8176                           ; BSR set to: 0
  8177  002212  0100               	movlb	0	; () banked
  8178  002214  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  8179  002216                     l4190:
  8180                           
  8181                           ; BSR set to: 0
  8182  002216  0100               	movlb	0	; () banked
  8183  002218  90D8               	bcf	status,0,c
  8184  00221A  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  8185  00221C  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  8186                           
  8187                           ; BSR set to: 0
  8188  00221E  0100               	movlb	0	; () banked
  8189  002220  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  8190  002222  D7E1               	goto	l4182
  8191  002224                     l1745:
  8192                           
  8193                           ; BSR set to: 0
  8194  002224  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  8195  002228  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8196                           
  8197                           ; BSR set to: 0
  8198  00222C  0012               	return		;funcret
  8199  00222E                     __end_of___lwdiv:
  8200                           	opt stack 0
  8201                           tblptru	equ	0xFF8
  8202                           tblptrh	equ	0xFF7
  8203                           tblptrl	equ	0xFF6
  8204                           tablat	equ	0xFF5
  8205                           prodh	equ	0xFF4
  8206                           prodl	equ	0xFF3
  8207                           intcon	equ	0xFF2
  8208                           intcon2	equ	0xFF1
  8209                           intcon3	equ	0xFF0
  8210                           indf0	equ	0xFEF
  8211                           postinc0	equ	0xFEE
  8212                           fsr0h	equ	0xFEA
  8213                           fsr0l	equ	0xFE9
  8214                           wreg	equ	0xFE8
  8215                           postdec1	equ	0xFE5
  8216                           fsr1l	equ	0xFE1
  8217                           indf2	equ	0xFDF
  8218                           postinc2	equ	0xFDE
  8219                           postdec2	equ	0xFDD
  8220                           fsr2h	equ	0xFDA
  8221                           fsr2l	equ	0xFD9
  8222                           status	equ	0xFD8
  8223                           
  8224 ;; *************** function _lcdInst *****************
  8225 ;; Defined at:
  8226 ;;		line 14 in file "lcd.c"
  8227 ;; Parameters:    Size  Location     Type
  8228 ;;  data            1    wreg     unsigned char 
  8229 ;; Auto vars:     Size  Location     Type
  8230 ;;  data            1    2[BANK0 ] unsigned char 
  8231 ;; Return value:  Size  Location     Type
  8232 ;;                  1    wreg      void 
  8233 ;; Registers used:
  8234 ;;		wreg, status,2, status,0, cstack
  8235 ;; Tracked objects:
  8236 ;;		On entry : 0/0
  8237 ;;		On exit  : 0/0
  8238 ;;		Unchanged: 0/0
  8239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8241 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8243 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8244 ;;Total ram usage:        1 bytes
  8245 ;; Hardware stack levels used:    1
  8246 ;; Hardware stack levels required when called:    8
  8247 ;; This function calls:
  8248 ;;		_lcdNibble
  8249 ;; This function is called by:
  8250 ;;		_UI
  8251 ;;		_change_state_to_menu_start
  8252 ;;		_change_state_to_menu_12
  8253 ;;		_change_state_to_menu_22
  8254 ;;		_initLCD
  8255 ;;		_printRTC
  8256 ;;		_Loading
  8257 ;; This function uses a non-reentrant model
  8258 ;;
  8259                           
  8260                           	psect	text37
  8261  002BB0                     __ptext37:
  8262                           	opt stack 0
  8263  002BB0                     _lcdInst:
  8264                           	opt stack 20
  8265                           
  8266                           ; BSR set to: 0
  8267                           ;incstack = 0
  8268                           ;lcdInst@data stored from wreg
  8269  002BB0  0100               	movlb	0	; () banked
  8270  002BB2  6F82               	movwf	lcdInst@data& (0+255),b
  8271                           
  8272                           ;lcd.c: 15: LATDbits.LATD2 = 0;
  8273  002BB4  948C               	bcf	3980,2,c	;volatile
  8274                           
  8275                           ;lcd.c: 16: lcdNibble(data);
  8276  002BB6  0100               	movlb	0	; () banked
  8277  002BB8  5182               	movf	lcdInst@data& (0+255),w,b
  8278  002BBA  EC8B  F011         	call	_lcdNibble
  8279  002BBE  0012               	return		;funcret
  8280  002BC0                     __end_of_lcdInst:
  8281                           	opt stack 0
  8282                           tblptru	equ	0xFF8
  8283                           tblptrh	equ	0xFF7
  8284                           tblptrl	equ	0xFF6
  8285                           tablat	equ	0xFF5
  8286                           prodh	equ	0xFF4
  8287                           prodl	equ	0xFF3
  8288                           intcon	equ	0xFF2
  8289                           intcon2	equ	0xFF1
  8290                           intcon3	equ	0xFF0
  8291                           indf0	equ	0xFEF
  8292                           postinc0	equ	0xFEE
  8293                           fsr0h	equ	0xFEA
  8294                           fsr0l	equ	0xFE9
  8295                           wreg	equ	0xFE8
  8296                           postdec1	equ	0xFE5
  8297                           fsr1l	equ	0xFE1
  8298                           indf2	equ	0xFDF
  8299                           postinc2	equ	0xFDE
  8300                           postdec2	equ	0xFDD
  8301                           fsr2h	equ	0xFDA
  8302                           fsr2l	equ	0xFD9
  8303                           status	equ	0xFD8
  8304                           
  8305 ;; *************** function _lcdNibble *****************
  8306 ;; Defined at:
  8307 ;;		line 24 in file "lcd.c"
  8308 ;; Parameters:    Size  Location     Type
  8309 ;;  data            1    wreg     unsigned char 
  8310 ;; Auto vars:     Size  Location     Type
  8311 ;;  data            1    1[BANK0 ] unsigned char 
  8312 ;;  temp            1    0[BANK0 ] unsigned char 
  8313 ;; Return value:  Size  Location     Type
  8314 ;;                  1    wreg      void 
  8315 ;; Registers used:
  8316 ;;		wreg, status,2, status,0
  8317 ;; Tracked objects:
  8318 ;;		On entry : 0/0
  8319 ;;		On exit  : 0/0
  8320 ;;		Unchanged: 0/0
  8321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8323 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8325 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8326 ;;Total ram usage:        2 bytes
  8327 ;; Hardware stack levels used:    1
  8328 ;; Hardware stack levels required when called:    7
  8329 ;; This function calls:
  8330 ;;		Nothing
  8331 ;; This function is called by:
  8332 ;;		_lcdInst
  8333 ;;		_putch
  8334 ;; This function uses a non-reentrant model
  8335 ;;
  8336                           
  8337                           	psect	text38
  8338  002316                     __ptext38:
  8339                           	opt stack 0
  8340  002316                     _lcdNibble:
  8341                           	opt stack 20
  8342                           
  8343                           ;incstack = 0
  8344                           ;lcdNibble@data stored from wreg
  8345  002316  0100               	movlb	0	; () banked
  8346  002318  6F81               	movwf	lcdNibble@data& (0+255),b
  8347                           
  8348                           ;lcd.c: 26: char temp = data & 0xF0;
  8349  00231A  0100               	movlb	0	; () banked
  8350  00231C  5181               	movf	lcdNibble@data& (0+255),w,b
  8351  00231E  0BF0               	andlw	240
  8352  002320  0100               	movlb	0	; () banked
  8353  002322  6F80               	movwf	lcdNibble@temp& (0+255),b
  8354                           
  8355                           ;lcd.c: 27: LATD = LATD & 0x0F;
  8356  002324  508C               	movf	3980,w,c	;volatile
  8357  002326  0B0F               	andlw	15
  8358  002328  6E8C               	movwf	3980,c	;volatile
  8359                           
  8360                           ;lcd.c: 28: LATD = temp | LATD;
  8361  00232A  0100               	movlb	0	; () banked
  8362  00232C  5180               	movf	lcdNibble@temp& (0+255),w,b
  8363  00232E  108C               	iorwf	3980,w,c	;volatile
  8364  002330  6E8C               	movwf	3980,c	;volatile
  8365                           
  8366                           ; BSR set to: 0
  8367                           ;lcd.c: 30: LATDbits.LATD3 = 1;
  8368  002332  868C               	bsf	3980,3,c	;volatile
  8369                           
  8370                           ; BSR set to: 0
  8371                           ;lcd.c: 31: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8372  002334  0E42               	movlw	66
  8373  002336                     u5397:
  8374  002336  2EE8               	decfsz	wreg,f,c
  8375  002338  D7FE               	bra	u5397
  8376  00233A  D000               	nop2	
  8377                           
  8378                           ;lcd.c: 32: LATDbits.LATD3 = 0;
  8379  00233C  968C               	bcf	3980,3,c	;volatile
  8380                           
  8381                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8382  00233E  0E42               	movlw	66
  8383  002340                     u5407:
  8384  002340  2EE8               	decfsz	wreg,f,c
  8385  002342  D7FE               	bra	u5407
  8386  002344  D000               	nop2	
  8387                           
  8388                           ;lcd.c: 35: data = data << 4;
  8389  002346  0100               	movlb	0	; () banked
  8390  002348  3981               	swapf	lcdNibble@data& (0+255),w,b
  8391  00234A  0BF0               	andlw	240
  8392  00234C  0100               	movlb	0	; () banked
  8393  00234E  6F81               	movwf	lcdNibble@data& (0+255),b
  8394                           
  8395                           ;lcd.c: 37: temp = data & 0xF0;
  8396  002350  0100               	movlb	0	; () banked
  8397  002352  5181               	movf	lcdNibble@data& (0+255),w,b
  8398  002354  0BF0               	andlw	240
  8399  002356  0100               	movlb	0	; () banked
  8400  002358  6F80               	movwf	lcdNibble@temp& (0+255),b
  8401                           
  8402                           ;lcd.c: 38: LATD = LATD & 0x0F;
  8403  00235A  508C               	movf	3980,w,c	;volatile
  8404  00235C  0B0F               	andlw	15
  8405  00235E  6E8C               	movwf	3980,c	;volatile
  8406                           
  8407                           ;lcd.c: 39: LATD = temp | LATD;
  8408  002360  0100               	movlb	0	; () banked
  8409  002362  5180               	movf	lcdNibble@temp& (0+255),w,b
  8410  002364  108C               	iorwf	3980,w,c	;volatile
  8411  002366  6E8C               	movwf	3980,c	;volatile
  8412                           
  8413                           ; BSR set to: 0
  8414                           ;lcd.c: 41: LATDbits.LATD3 = 1;
  8415  002368  868C               	bsf	3980,3,c	;volatile
  8416                           
  8417                           ; BSR set to: 0
  8418                           ;lcd.c: 42: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8419  00236A  0E42               	movlw	66
  8420  00236C                     u5417:
  8421  00236C  2EE8               	decfsz	wreg,f,c
  8422  00236E  D7FE               	bra	u5417
  8423  002370  D000               	nop2	
  8424                           
  8425                           ;lcd.c: 43: LATDbits.LATD3 = 0;
  8426  002372  968C               	bcf	3980,3,c	;volatile
  8427                           
  8428                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8429  002374  0E42               	movlw	66
  8430  002376                     u5427:
  8431  002376  2EE8               	decfsz	wreg,f,c
  8432  002378  D7FE               	bra	u5427
  8433  00237A  D000               	nop2	
  8434  00237C  0012               	return		;funcret
  8435  00237E                     __end_of_lcdNibble:
  8436                           	opt stack 0
  8437                           tblptru	equ	0xFF8
  8438                           tblptrh	equ	0xFF7
  8439                           tblptrl	equ	0xFF6
  8440                           tablat	equ	0xFF5
  8441                           prodh	equ	0xFF4
  8442                           prodl	equ	0xFF3
  8443                           intcon	equ	0xFF2
  8444                           intcon2	equ	0xFF1
  8445                           intcon3	equ	0xFF0
  8446                           indf0	equ	0xFEF
  8447                           postinc0	equ	0xFEE
  8448                           fsr0h	equ	0xFEA
  8449                           fsr0l	equ	0xFE9
  8450                           wreg	equ	0xFE8
  8451                           postdec1	equ	0xFE5
  8452                           fsr1l	equ	0xFE1
  8453                           indf2	equ	0xFDF
  8454                           postinc2	equ	0xFDE
  8455                           postdec2	equ	0xFDD
  8456                           fsr2h	equ	0xFDA
  8457                           fsr2l	equ	0xFD9
  8458                           status	equ	0xFD8
  8459                           
  8460 ;; *************** function ___awmod *****************
  8461 ;; Defined at:
  8462 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8463 ;; Parameters:    Size  Location     Type
  8464 ;;  dividend        2    0[BANK0 ] int 
  8465 ;;  divisor         2    2[BANK0 ] int 
  8466 ;; Auto vars:     Size  Location     Type
  8467 ;;  sign            1    5[BANK0 ] unsigned char 
  8468 ;;  counter         1    4[BANK0 ] unsigned char 
  8469 ;; Return value:  Size  Location     Type
  8470 ;;                  2    0[BANK0 ] int 
  8471 ;; Registers used:
  8472 ;;		wreg, status,2, status,0
  8473 ;; Tracked objects:
  8474 ;;		On entry : 0/0
  8475 ;;		On exit  : 0/0
  8476 ;;		Unchanged: 0/0
  8477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8478 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8479 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8481 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8482 ;;Total ram usage:        6 bytes
  8483 ;; Hardware stack levels used:    1
  8484 ;; Hardware stack levels required when called:    7
  8485 ;; This function calls:
  8486 ;;		Nothing
  8487 ;; This function is called by:
  8488 ;;		_UI
  8489 ;; This function uses a non-reentrant model
  8490 ;;
  8491                           
  8492                           	psect	text39
  8493  001EF4                     __ptext39:
  8494                           	opt stack 0
  8495  001EF4                     ___awmod:
  8496                           	opt stack 22
  8497                           
  8498                           ;incstack = 0
  8499  001EF4  0E00               	movlw	0
  8500  001EF6  0100               	movlb	0	; () banked
  8501  001EF8  6F85               	movwf	___awmod@sign& (0+255),b
  8502                           
  8503                           ; BSR set to: 0
  8504  001EFA  0100               	movlb	0	; () banked
  8505  001EFC  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8506  001EFE  D008               	goto	l5294
  8507                           
  8508                           ; BSR set to: 0
  8509  001F00  0100               	movlb	0	; () banked
  8510  001F02  6D80               	negf	___awmod@dividend& (0+255),b
  8511  001F04  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8512  001F06  B0D8               	btfsc	status,0,c
  8513  001F08  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8514                           
  8515                           ; BSR set to: 0
  8516  001F0A  0E01               	movlw	1
  8517  001F0C  0100               	movlb	0	; () banked
  8518  001F0E  6F85               	movwf	___awmod@sign& (0+255),b
  8519  001F10                     l5294:
  8520                           
  8521                           ; BSR set to: 0
  8522  001F10  0100               	movlb	0	; () banked
  8523  001F12  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8524  001F14  D005               	goto	l5298
  8525                           
  8526                           ; BSR set to: 0
  8527  001F16  0100               	movlb	0	; () banked
  8528  001F18  6D82               	negf	___awmod@divisor& (0+255),b
  8529  001F1A  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8530  001F1C  B0D8               	btfsc	status,0,c
  8531  001F1E  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8532  001F20                     l5298:
  8533                           
  8534                           ; BSR set to: 0
  8535  001F20  0100               	movlb	0	; () banked
  8536  001F22  5182               	movf	___awmod@divisor& (0+255),w,b
  8537  001F24  0100               	movlb	0	; () banked
  8538  001F26  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8539  001F28  B4D8               	btfsc	status,2,c
  8540  001F2A  D026               	goto	l5314
  8541                           
  8542                           ; BSR set to: 0
  8543  001F2C  0E01               	movlw	1
  8544  001F2E  0100               	movlb	0	; () banked
  8545  001F30  6F84               	movwf	___awmod@counter& (0+255),b
  8546  001F32  D006               	goto	l5304
  8547  001F34                     l5302:
  8548                           
  8549                           ; BSR set to: 0
  8550  001F34  0100               	movlb	0	; () banked
  8551  001F36  90D8               	bcf	status,0,c
  8552  001F38  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8553  001F3A  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8554  001F3C  0100               	movlb	0	; () banked
  8555  001F3E  2B84               	incf	___awmod@counter& (0+255),f,b
  8556  001F40                     l5304:
  8557                           
  8558                           ; BSR set to: 0
  8559  001F40  0100               	movlb	0	; () banked
  8560  001F42  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8561  001F44  D7F7               	goto	l5302
  8562  001F46                     l5306:
  8563                           
  8564                           ; BSR set to: 0
  8565  001F46  0100               	movlb	0	; () banked
  8566  001F48  5182               	movf	___awmod@divisor& (0+255),w,b
  8567  001F4A  0100               	movlb	0	; () banked
  8568  001F4C  5D80               	subwf	___awmod@dividend& (0+255),w,b
  8569  001F4E  0100               	movlb	0	; () banked
  8570  001F50  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8571  001F52  0100               	movlb	0	; () banked
  8572  001F54  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8573  001F56  A0D8               	btfss	status,0,c
  8574  001F58  D008               	goto	l5310
  8575                           
  8576                           ; BSR set to: 0
  8577  001F5A  0100               	movlb	0	; () banked
  8578  001F5C  5182               	movf	___awmod@divisor& (0+255),w,b
  8579  001F5E  0100               	movlb	0	; () banked
  8580  001F60  5F80               	subwf	___awmod@dividend& (0+255),f,b
  8581  001F62  0100               	movlb	0	; () banked
  8582  001F64  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8583  001F66  0100               	movlb	0	; () banked
  8584  001F68  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8585  001F6A                     l5310:
  8586                           
  8587                           ; BSR set to: 0
  8588  001F6A  0100               	movlb	0	; () banked
  8589  001F6C  90D8               	bcf	status,0,c
  8590  001F6E  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8591  001F70  3382               	rrcf	___awmod@divisor& (0+255),f,b
  8592                           
  8593                           ; BSR set to: 0
  8594  001F72  0100               	movlb	0	; () banked
  8595  001F74  2F84               	decfsz	___awmod@counter& (0+255),f,b
  8596  001F76  D7E7               	goto	l5306
  8597  001F78                     l5314:
  8598                           
  8599                           ; BSR set to: 0
  8600  001F78  0100               	movlb	0	; () banked
  8601  001F7A  5185               	movf	___awmod@sign& (0+255),w,b
  8602  001F7C  0100               	movlb	0	; () banked
  8603  001F7E  B4D8               	btfsc	status,2,c
  8604  001F80  D005               	goto	l5318
  8605                           
  8606                           ; BSR set to: 0
  8607  001F82  0100               	movlb	0	; () banked
  8608  001F84  6D80               	negf	___awmod@dividend& (0+255),b
  8609  001F86  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8610  001F88  B0D8               	btfsc	status,0,c
  8611  001F8A  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8612  001F8C                     l5318:
  8613                           
  8614                           ; BSR set to: 0
  8615  001F8C  C080  F080         	movff	___awmod@dividend,?___awmod
  8616  001F90  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  8617  001F94  0012               	return	
  8618  001F96                     __end_of___awmod:
  8619                           	opt stack 0
  8620                           tblptru	equ	0xFF8
  8621                           tblptrh	equ	0xFF7
  8622                           tblptrl	equ	0xFF6
  8623                           tablat	equ	0xFF5
  8624                           prodh	equ	0xFF4
  8625                           prodl	equ	0xFF3
  8626                           intcon	equ	0xFF2
  8627                           intcon2	equ	0xFF1
  8628                           intcon3	equ	0xFF0
  8629                           indf0	equ	0xFEF
  8630                           postinc0	equ	0xFEE
  8631                           fsr0h	equ	0xFEA
  8632                           fsr0l	equ	0xFE9
  8633                           wreg	equ	0xFE8
  8634                           postdec1	equ	0xFE5
  8635                           fsr1l	equ	0xFE1
  8636                           indf2	equ	0xFDF
  8637                           postinc2	equ	0xFDE
  8638                           postdec2	equ	0xFDD
  8639                           fsr2h	equ	0xFDA
  8640                           fsr2l	equ	0xFD9
  8641                           status	equ	0xFD8
  8642                           
  8643 ;; *************** function ___awdiv *****************
  8644 ;; Defined at:
  8645 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8646 ;; Parameters:    Size  Location     Type
  8647 ;;  dividend        2    6[BANK0 ] int 
  8648 ;;  divisor         2    8[BANK0 ] int 
  8649 ;; Auto vars:     Size  Location     Type
  8650 ;;  quotient        2   12[BANK0 ] int 
  8651 ;;  sign            1   11[BANK0 ] unsigned char 
  8652 ;;  counter         1   10[BANK0 ] unsigned char 
  8653 ;; Return value:  Size  Location     Type
  8654 ;;                  2    6[BANK0 ] int 
  8655 ;; Registers used:
  8656 ;;		wreg, status,2, status,0
  8657 ;; Tracked objects:
  8658 ;;		On entry : 0/0
  8659 ;;		On exit  : 0/0
  8660 ;;		Unchanged: 0/0
  8661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8662 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8663 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8665 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8666 ;;Total ram usage:        8 bytes
  8667 ;; Hardware stack levels used:    1
  8668 ;; Hardware stack levels required when called:    7
  8669 ;; This function calls:
  8670 ;;		Nothing
  8671 ;; This function is called by:
  8672 ;;		_UI
  8673 ;; This function uses a non-reentrant model
  8674 ;;
  8675                           
  8676                           	psect	text40
  8677  001CD0                     __ptext40:
  8678                           	opt stack 0
  8679  001CD0                     ___awdiv:
  8680                           	opt stack 22
  8681                           
  8682                           ; BSR set to: 0
  8683                           ;incstack = 0
  8684  001CD0  0E00               	movlw	0
  8685  001CD2  0100               	movlb	0	; () banked
  8686  001CD4  6F8B               	movwf	___awdiv@sign& (0+255),b
  8687                           
  8688                           ; BSR set to: 0
  8689  001CD6  0100               	movlb	0	; () banked
  8690  001CD8  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8691  001CDA  D008               	goto	l5250
  8692                           
  8693                           ; BSR set to: 0
  8694  001CDC  0100               	movlb	0	; () banked
  8695  001CDE  6D88               	negf	___awdiv@divisor& (0+255),b
  8696  001CE0  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8697  001CE2  B0D8               	btfsc	status,0,c
  8698  001CE4  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8699                           
  8700                           ; BSR set to: 0
  8701  001CE6  0E01               	movlw	1
  8702  001CE8  0100               	movlb	0	; () banked
  8703  001CEA  6F8B               	movwf	___awdiv@sign& (0+255),b
  8704  001CEC                     l5250:
  8705                           
  8706                           ; BSR set to: 0
  8707  001CEC  0100               	movlb	0	; () banked
  8708  001CEE  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8709  001CF0  D008               	goto	l5256
  8710                           
  8711                           ; BSR set to: 0
  8712  001CF2  0100               	movlb	0	; () banked
  8713  001CF4  6D86               	negf	___awdiv@dividend& (0+255),b
  8714  001CF6  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8715  001CF8  B0D8               	btfsc	status,0,c
  8716  001CFA  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8717                           
  8718                           ; BSR set to: 0
  8719  001CFC  0E01               	movlw	1
  8720  001CFE  0100               	movlb	0	; () banked
  8721  001D00  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  8722  001D02                     l5256:
  8723                           
  8724                           ; BSR set to: 0
  8725  001D02  0E00               	movlw	0
  8726  001D04  0100               	movlb	0	; () banked
  8727  001D06  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  8728  001D08  0E00               	movlw	0
  8729  001D0A  6F8C               	movwf	___awdiv@quotient& (0+255),b
  8730                           
  8731                           ; BSR set to: 0
  8732  001D0C  0100               	movlb	0	; () banked
  8733  001D0E  5188               	movf	___awdiv@divisor& (0+255),w,b
  8734  001D10  0100               	movlb	0	; () banked
  8735  001D12  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8736  001D14  B4D8               	btfsc	status,2,c
  8737  001D16  D02C               	goto	l5278
  8738                           
  8739                           ; BSR set to: 0
  8740  001D18  0E01               	movlw	1
  8741  001D1A  0100               	movlb	0	; () banked
  8742  001D1C  6F8A               	movwf	___awdiv@counter& (0+255),b
  8743  001D1E  D006               	goto	l5264
  8744  001D20                     l5262:
  8745                           
  8746                           ; BSR set to: 0
  8747  001D20  0100               	movlb	0	; () banked
  8748  001D22  90D8               	bcf	status,0,c
  8749  001D24  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  8750  001D26  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8751  001D28  0100               	movlb	0	; () banked
  8752  001D2A  2B8A               	incf	___awdiv@counter& (0+255),f,b
  8753  001D2C                     l5264:
  8754                           
  8755                           ; BSR set to: 0
  8756  001D2C  0100               	movlb	0	; () banked
  8757  001D2E  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8758  001D30  D7F7               	goto	l5262
  8759  001D32                     l5266:
  8760                           
  8761                           ; BSR set to: 0
  8762  001D32  0100               	movlb	0	; () banked
  8763  001D34  90D8               	bcf	status,0,c
  8764  001D36  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  8765  001D38  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8766                           
  8767                           ; BSR set to: 0
  8768  001D3A  0100               	movlb	0	; () banked
  8769  001D3C  5188               	movf	___awdiv@divisor& (0+255),w,b
  8770  001D3E  0100               	movlb	0	; () banked
  8771  001D40  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  8772  001D42  0100               	movlb	0	; () banked
  8773  001D44  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8774  001D46  0100               	movlb	0	; () banked
  8775  001D48  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8776  001D4A  A0D8               	btfss	status,0,c
  8777  001D4C  D00A               	goto	l5274
  8778                           
  8779                           ; BSR set to: 0
  8780  001D4E  0100               	movlb	0	; () banked
  8781  001D50  5188               	movf	___awdiv@divisor& (0+255),w,b
  8782  001D52  0100               	movlb	0	; () banked
  8783  001D54  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  8784  001D56  0100               	movlb	0	; () banked
  8785  001D58  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8786  001D5A  0100               	movlb	0	; () banked
  8787  001D5C  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8788                           
  8789                           ; BSR set to: 0
  8790  001D5E  0100               	movlb	0	; () banked
  8791  001D60  818C               	bsf	___awdiv@quotient& (0+255),0,b
  8792  001D62                     l5274:
  8793                           
  8794                           ; BSR set to: 0
  8795  001D62  0100               	movlb	0	; () banked
  8796  001D64  90D8               	bcf	status,0,c
  8797  001D66  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8798  001D68  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  8799                           
  8800                           ; BSR set to: 0
  8801  001D6A  0100               	movlb	0	; () banked
  8802  001D6C  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  8803  001D6E  D7E1               	goto	l5266
  8804  001D70                     l5278:
  8805                           
  8806                           ; BSR set to: 0
  8807  001D70  0100               	movlb	0	; () banked
  8808  001D72  518B               	movf	___awdiv@sign& (0+255),w,b
  8809  001D74  0100               	movlb	0	; () banked
  8810  001D76  B4D8               	btfsc	status,2,c
  8811  001D78  D005               	goto	l5282
  8812                           
  8813                           ; BSR set to: 0
  8814  001D7A  0100               	movlb	0	; () banked
  8815  001D7C  6D8C               	negf	___awdiv@quotient& (0+255),b
  8816  001D7E  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8817  001D80  B0D8               	btfsc	status,0,c
  8818  001D82  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8819  001D84                     l5282:
  8820                           
  8821                           ; BSR set to: 0
  8822  001D84  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  8823  001D88  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  8824  001D8C  0012               	return	
  8825  001D8E                     __end_of___awdiv:
  8826                           	opt stack 0
  8827                           tblptru	equ	0xFF8
  8828                           tblptrh	equ	0xFF7
  8829                           tblptrl	equ	0xFF6
  8830                           tablat	equ	0xFF5
  8831                           prodh	equ	0xFF4
  8832                           prodl	equ	0xFF3
  8833                           intcon	equ	0xFF2
  8834                           intcon2	equ	0xFF1
  8835                           intcon3	equ	0xFF0
  8836                           indf0	equ	0xFEF
  8837                           postinc0	equ	0xFEE
  8838                           fsr0h	equ	0xFEA
  8839                           fsr0l	equ	0xFE9
  8840                           wreg	equ	0xFE8
  8841                           postdec1	equ	0xFE5
  8842                           fsr1l	equ	0xFE1
  8843                           indf2	equ	0xFDF
  8844                           postinc2	equ	0xFDE
  8845                           postdec2	equ	0xFDD
  8846                           fsr2h	equ	0xFDA
  8847                           fsr2l	equ	0xFD9
  8848                           status	equ	0xFD8
  8849                           
  8850 ;; *************** function _PortTestA5 *****************
  8851 ;; Defined at:
  8852 ;;		line 14 in file "PortHigh.c"
  8853 ;; Parameters:    Size  Location     Type
  8854 ;;		None
  8855 ;; Auto vars:     Size  Location     Type
  8856 ;;		None
  8857 ;; Return value:  Size  Location     Type
  8858 ;;                  1    wreg      void 
  8859 ;; Registers used:
  8860 ;;		None
  8861 ;; Tracked objects:
  8862 ;;		On entry : 0/0
  8863 ;;		On exit  : 0/0
  8864 ;;		Unchanged: 0/0
  8865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8870 ;;Total ram usage:        0 bytes
  8871 ;; Hardware stack levels used:    1
  8872 ;; Hardware stack levels required when called:    7
  8873 ;; This function calls:
  8874 ;;		Nothing
  8875 ;; This function is called by:
  8876 ;;		_main
  8877 ;; This function uses a non-reentrant model
  8878 ;;
  8879                           
  8880                           	psect	text41
  8881  002B7C                     __ptext41:
  8882                           	opt stack 0
  8883  002B7C                     _PortTestA5:
  8884                           	opt stack 23
  8885  002B7C                     l251:
  8886  002B7C  A281               	btfss	3969,1,c	;volatile
  8887  002B7E  D7FE               	goto	l251
  8888                           
  8889                           ;PortHigh.c: 18: }
  8890                           ;PortHigh.c: 19: LATAbits.LATA5 = 1;
  8891  002B80  8A89               	bsf	3977,5,c	;volatile
  8892  002B82                     l254:
  8893  002B82  B281               	btfsc	3969,1,c	;volatile
  8894  002B84  D7FE               	goto	l254
  8895                           
  8896                           ;PortHigh.c: 22: }
  8897                           ;PortHigh.c: 23: __nop();
  8898  002B86  F000               	nop	
  8899                           
  8900                           ;PortHigh.c: 24: __nop();
  8901  002B88  F000               	nop	
  8902                           
  8903                           ;PortHigh.c: 25: LATAbits.LATA5 = 0;
  8904  002B8A  9A89               	bcf	3977,5,c	;volatile
  8905  002B8C  0012               	return		;funcret
  8906  002B8E                     __end_of_PortTestA5:
  8907                           	opt stack 0
  8908                           tblptru	equ	0xFF8
  8909                           tblptrh	equ	0xFF7
  8910                           tblptrl	equ	0xFF6
  8911                           tablat	equ	0xFF5
  8912                           prodh	equ	0xFF4
  8913                           prodl	equ	0xFF3
  8914                           intcon	equ	0xFF2
  8915                           intcon2	equ	0xFF1
  8916                           intcon3	equ	0xFF0
  8917                           indf0	equ	0xFEF
  8918                           postinc0	equ	0xFEE
  8919                           fsr0h	equ	0xFEA
  8920                           fsr0l	equ	0xFE9
  8921                           wreg	equ	0xFE8
  8922                           postdec1	equ	0xFE5
  8923                           fsr1l	equ	0xFE1
  8924                           indf2	equ	0xFDF
  8925                           postinc2	equ	0xFDE
  8926                           postdec2	equ	0xFDD
  8927                           fsr2h	equ	0xFDA
  8928                           fsr2l	equ	0xFD9
  8929                           status	equ	0xFD8
  8930                           
  8931 ;; *************** function _handler *****************
  8932 ;; Defined at:
  8933 ;;		line 15 in file "interruptHandler.c"
  8934 ;; Parameters:    Size  Location     Type
  8935 ;;		None
  8936 ;; Auto vars:     Size  Location     Type
  8937 ;;		None
  8938 ;; Return value:  Size  Location     Type
  8939 ;;                  1    wreg      void 
  8940 ;; Registers used:
  8941 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8942 ;; Tracked objects:
  8943 ;;		On entry : 0/0
  8944 ;;		On exit  : 0/0
  8945 ;;		Unchanged: 0/0
  8946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8949 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8950 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8951 ;;Total ram usage:       16 bytes
  8952 ;; Hardware stack levels used:    1
  8953 ;; Hardware stack levels required when called:    6
  8954 ;; This function calls:
  8955 ;;		_printSortTimer
  8956 ;;		_updateMenu
  8957 ;; This function is called by:
  8958 ;;		Interrupt level 2
  8959 ;; This function uses a non-reentrant model
  8960 ;;
  8961                           
  8962                           	psect	intcode
  8963  000008                     __pintcode:
  8964                           	opt stack 0
  8965  000008                     _handler:
  8966                           	opt stack 18
  8967                           
  8968                           ;incstack = 0
  8969  000008  827C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8970  00000A  ED50  F00D         	call	int_func,f	;refresh shadow registers
  8971                           tblptru	equ	0xFF8
  8972                           tblptrh	equ	0xFF7
  8973                           tblptrl	equ	0xFF6
  8974                           tablat	equ	0xFF5
  8975                           prodh	equ	0xFF4
  8976                           prodl	equ	0xFF3
  8977                           intcon	equ	0xFF2
  8978                           intcon2	equ	0xFF1
  8979                           intcon3	equ	0xFF0
  8980                           indf0	equ	0xFEF
  8981                           postinc0	equ	0xFEE
  8982                           fsr0h	equ	0xFEA
  8983                           fsr0l	equ	0xFE9
  8984                           wreg	equ	0xFE8
  8985                           postdec1	equ	0xFE5
  8986                           fsr1l	equ	0xFE1
  8987                           indf2	equ	0xFDF
  8988                           postinc2	equ	0xFDE
  8989                           postdec2	equ	0xFDD
  8990                           fsr2h	equ	0xFDA
  8991                           fsr2l	equ	0xFD9
  8992                           status	equ	0xFD8
  8993                           
  8994                           	psect	intcode_body
  8995  001AA0                     __pintcode_body:
  8996                           	opt stack 18
  8997  001AA0                     int_func:
  8998                           	opt stack 18
  8999  001AA0  0006               	pop		; remove dummy address from shadow register refresh
  9000  001AA2  CFFA F04D          	movff	pclath,??_handler+2
  9001  001AA6  CFFB F04E          	movff	pclatu,??_handler+3
  9002  001AAA  CFE9 F04F          	movff	fsr0l,??_handler+4
  9003  001AAE  CFEA F050          	movff	fsr0h,??_handler+5
  9004  001AB2  CFE1 F051          	movff	fsr1l,??_handler+6
  9005  001AB6  CFE2 F052          	movff	fsr1h,??_handler+7
  9006  001ABA  CFD9 F053          	movff	fsr2l,??_handler+8
  9007  001ABE  CFDA F054          	movff	fsr2h,??_handler+9
  9008  001AC2  CFF3 F055          	movff	prodl,??_handler+10
  9009  001AC6  CFF4 F056          	movff	prodh,??_handler+11
  9010  001ACA  CFF6 F057          	movff	tblptrl,??_handler+12
  9011  001ACE  CFF7 F058          	movff	tblptrh,??_handler+13
  9012  001AD2  CFF8 F059          	movff	tblptru,??_handler+14
  9013  001AD6  CFF5 F05A          	movff	tablat,??_handler+15
  9014                           
  9015                           ;interruptHandler.c: 17: if(INT1IF){
  9016  001ADA  A0F0               	btfss	intcon3,0,c	;volatile
  9017  001ADC  D018               	goto	i2l5976
  9018                           
  9019                           ;interruptHandler.c: 18: INT1IF = 0;
  9020  001ADE  90F0               	bcf	intcon3,0,c	;volatile
  9021                           
  9022                           ;interruptHandler.c: 19: if(machine_state == UI_state) {
  9023  001AE0  0100               	movlb	0	; () banked
  9024  001AE2  51F7               	movf	_machine_state& (0+255),w,b
  9025  001AE4  A4D8               	btfss	status,2,c
  9026  001AE6  D013               	goto	i2l5976
  9027                           
  9028                           ; BSR set to: 0
  9029                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
  9030  001AE8  3881               	swapf	3969,w,c	;volatile
  9031  001AEA  0B0F               	andlw	15
  9032  001AEC  0B0F               	andlw	15
  9033  001AEE  6E4B               	movwf	??_handler& (0+255),c
  9034  001AF0  6A4C               	clrf	(??_handler+1)& (0+255),c
  9035  001AF2  0EB5               	movlw	low _keys
  9036  001AF4  244B               	addwf	??_handler,w,c
  9037  001AF6  6EF6               	movwf	tblptrl,c
  9038  001AF8  0EFD               	movlw	high _keys
  9039  001AFA  204C               	addwfc	??_handler+1,w,c
  9040  001AFC  6EF7               	movwf	tblptrh,c
  9041  001AFE                     	if	1	;There are 3 active tblptr bytes
  9042  001AFE  6AF8               	clrf	tblptru,c
  9043  001B00  0E00               	movlw	low (__mediumconst shr (0+16))
  9044  001B02  22F8               	addwfc	tblptru,f,c
  9045  001B04                     	endif
  9046  001B04  0008               	tblrd		*
  9047  001B06  CFF5 F079          	movff	tablat,_input
  9048                           
  9049                           ; BSR set to: 0
  9050                           ;interruptHandler.c: 21: updateMenu();
  9051  001B0A  ECC8  F007         	call	_updateMenu	;wreg free
  9052  001B0E                     i2l5976:
  9053                           
  9054                           ;interruptHandler.c: 22: }
  9055                           ;interruptHandler.c: 23: }
  9056                           ;interruptHandler.c: 26: if(TMR0IF){
  9057  001B0E  A4F2               	btfss	intcon,2,c	;volatile
  9058  001B10  D00C               	goto	i2l5990
  9059                           
  9060                           ;interruptHandler.c: 27: TMR0IF = 0;
  9061  001B12  94F2               	bcf	intcon,2,c	;volatile
  9062                           
  9063                           ;interruptHandler.c: 28: if(machine_state == Sorting_state){
  9064  001B14  0100               	movlb	0	; () banked
  9065  001B16  05F7               	decf	_machine_state& (0+255),w,b
  9066  001B18  A4D8               	btfss	status,2,c
  9067  001B1A  D007               	goto	i2l5990
  9068                           
  9069                           ; BSR set to: 0
  9070                           ;interruptHandler.c: 29: printSortTimer();
  9071  001B1C  EC60  F00B         	call	_printSortTimer	;wreg free
  9072                           
  9073                           ;interruptHandler.c: 31: TMR0H = 0b10000101;
  9074  001B20  0E85               	movlw	133
  9075  001B22  6ED7               	movwf	4055,c	;volatile
  9076                           
  9077                           ;interruptHandler.c: 32: TMR0L = 0b11101110;
  9078  001B24  0EEE               	movlw	238
  9079  001B26  6ED6               	movwf	4054,c	;volatile
  9080                           
  9081                           ;interruptHandler.c: 33: TMR0ON = 1;
  9082  001B28  8ED5               	bsf	4053,7,c	;volatile
  9083  001B2A                     i2l5990:
  9084                           
  9085                           ;interruptHandler.c: 34: }
  9086                           ;interruptHandler.c: 35: }
  9087                           ;interruptHandler.c: 38: if(TMR1IF){
  9088  001B2A  A09E               	btfss	3998,0,c	;volatile
  9089  001B2C  D024               	goto	i2l6014
  9090                           
  9091                           ;interruptHandler.c: 39: TMR1IF = 0;
  9092  001B2E  909E               	bcf	3998,0,c	;volatile
  9093                           
  9094                           ;interruptHandler.c: 40: TMR1ON = 0;
  9095  001B30  90CD               	bcf	4045,0,c	;volatile
  9096                           
  9097                           ;interruptHandler.c: 41: if(machine_state == Sorting_state){
  9098  001B32  0100               	movlb	0	; () banked
  9099  001B34  05F7               	decf	_machine_state& (0+255),w,b
  9100  001B36  A4D8               	btfss	status,2,c
  9101  001B38  D01E               	goto	i2l6014
  9102                           
  9103                           ; BSR set to: 0
  9104                           ;interruptHandler.c: 42: if(was_low){
  9105  001B3A  5077               	movf	_was_low,w,c
  9106  001B3C  1078               	iorwf	_was_low+1,w,c
  9107  001B3E  B4D8               	btfsc	status,2,c
  9108  001B40  D00A               	goto	i2l1265
  9109                           
  9110                           ; BSR set to: 0
  9111                           ;interruptHandler.c: 43: LATCbits.LATC1 = 1;
  9112  001B42  828B               	bsf	3979,1,c	;volatile
  9113                           
  9114                           ; BSR set to: 0
  9115                           ;interruptHandler.c: 44: was_low = 0;
  9116  001B44  0E00               	movlw	0
  9117  001B46  6E78               	movwf	_was_low+1,c
  9118  001B48  0E00               	movlw	0
  9119  001B4A  6E77               	movwf	_was_low,c
  9120                           
  9121                           ; BSR set to: 0
  9122                           ;interruptHandler.c: 45: TMR1H = servoTimes[0];
  9123  001B4C  C0D4  FFCF         	movff	_servoTimes,4047	;volatile
  9124                           
  9125                           ; BSR set to: 0
  9126                           ;interruptHandler.c: 46: TMR1L = servoTimes[1];
  9127  001B50  C0D6  FFCE         	movff	_servoTimes+2,4046	;volatile
  9128                           
  9129                           ;interruptHandler.c: 47: }
  9130  001B54  D00F               	goto	i2l6012
  9131  001B56                     i2l1265:
  9132                           
  9133                           ; BSR set to: 0
  9134                           ;interruptHandler.c: 48: else{
  9135                           ;interruptHandler.c: 49: LATCbits.LATC1 = 0;
  9136  001B56  928B               	bcf	3979,1,c	;volatile
  9137                           
  9138                           ; BSR set to: 0
  9139                           ;interruptHandler.c: 50: was_low = 1;
  9140  001B58  0E00               	movlw	0
  9141  001B5A  6E78               	movwf	_was_low+1,c
  9142  001B5C  0E01               	movlw	1
  9143  001B5E  6E77               	movwf	_was_low,c
  9144                           
  9145                           ; BSR set to: 0
  9146                           ;interruptHandler.c: 51: TMR1H = 20000 - servoTimes[0];
  9147  001B60  0100               	movlb	0	; () banked
  9148  001B62  51D4               	movf	_servoTimes& (0+255),w,b
  9149  001B64  0800               	sublw	0
  9150  001B66  0F20               	addlw	32
  9151  001B68  6ECF               	movwf	4047,c	;volatile
  9152                           
  9153                           ; BSR set to: 0
  9154                           ;interruptHandler.c: 52: TMR1L = 20000 - servoTimes[1];
  9155  001B6A  0100               	movlb	0	; () banked
  9156  001B6C  51D6               	movf	(_servoTimes+2)& (0+255),w,b
  9157  001B6E  0800               	sublw	0
  9158  001B70  0F20               	addlw	32
  9159  001B72  6ECE               	movwf	4046,c	;volatile
  9160  001B74                     i2l6012:
  9161                           
  9162                           ; BSR set to: 0
  9163                           ;interruptHandler.c: 53: }
  9164                           ;interruptHandler.c: 54: TMR1ON = 1;
  9165  001B74  80CD               	bsf	4045,0,c	;volatile
  9166  001B76                     i2l6014:
  9167                           
  9168                           ;interruptHandler.c: 55: }
  9169                           ;interruptHandler.c: 56: }
  9170                           ;interruptHandler.c: 58: if(TMR3IF){
  9171  001B76  A2A1               	btfss	4001,1,c	;volatile
  9172  001B78  D024               	goto	i2l1271
  9173                           
  9174                           ;interruptHandler.c: 59: TMR3IF = 0;
  9175  001B7A  92A1               	bcf	4001,1,c	;volatile
  9176                           
  9177                           ;interruptHandler.c: 60: TMR3ON = 0;
  9178  001B7C  90B1               	bcf	4017,0,c	;volatile
  9179                           
  9180                           ;interruptHandler.c: 61: if(machine_state == Sorting_state){
  9181  001B7E  0100               	movlb	0	; () banked
  9182  001B80  05F7               	decf	_machine_state& (0+255),w,b
  9183  001B82  A4D8               	btfss	status,2,c
  9184  001B84  D01E               	goto	i2l1271
  9185                           
  9186                           ; BSR set to: 0
  9187                           ;interruptHandler.c: 62: if(was_low){
  9188  001B86  5077               	movf	_was_low,w,c
  9189  001B88  1078               	iorwf	_was_low+1,w,c
  9190  001B8A  B4D8               	btfsc	status,2,c
  9191  001B8C  D00A               	goto	i2l1269
  9192                           
  9193                           ; BSR set to: 0
  9194                           ;interruptHandler.c: 63: LATCbits.LATC2 = 1;
  9195  001B8E  848B               	bsf	3979,2,c	;volatile
  9196                           
  9197                           ; BSR set to: 0
  9198                           ;interruptHandler.c: 64: was_low = 0;
  9199  001B90  0E00               	movlw	0
  9200  001B92  6E78               	movwf	_was_low+1,c
  9201  001B94  0E00               	movlw	0
  9202  001B96  6E77               	movwf	_was_low,c
  9203                           
  9204                           ; BSR set to: 0
  9205                           ;interruptHandler.c: 65: TMR3H = servoTimes[2];
  9206  001B98  C0D8  FFB3         	movff	_servoTimes+4,4019	;volatile
  9207                           
  9208                           ; BSR set to: 0
  9209                           ;interruptHandler.c: 66: TMR3L = servoTimes[3];
  9210  001B9C  C0DA  FFB2         	movff	_servoTimes+6,4018	;volatile
  9211                           
  9212                           ;interruptHandler.c: 67: }
  9213  001BA0  D00F               	goto	i2l6036
  9214  001BA2                     i2l1269:
  9215                           
  9216                           ; BSR set to: 0
  9217                           ;interruptHandler.c: 68: else{
  9218                           ;interruptHandler.c: 69: LATCbits.LATC2 = 0;
  9219  001BA2  948B               	bcf	3979,2,c	;volatile
  9220                           
  9221                           ; BSR set to: 0
  9222                           ;interruptHandler.c: 70: was_low = 1;
  9223  001BA4  0E00               	movlw	0
  9224  001BA6  6E78               	movwf	_was_low+1,c
  9225  001BA8  0E01               	movlw	1
  9226  001BAA  6E77               	movwf	_was_low,c
  9227                           
  9228                           ; BSR set to: 0
  9229                           ;interruptHandler.c: 71: TMR3H = 20000 - servoTimes[2];
  9230  001BAC  0100               	movlb	0	; () banked
  9231  001BAE  51D8               	movf	(_servoTimes+4)& (0+255),w,b
  9232  001BB0  0800               	sublw	0
  9233  001BB2  0F20               	addlw	32
  9234  001BB4  6EB3               	movwf	4019,c	;volatile
  9235                           
  9236                           ; BSR set to: 0
  9237                           ;interruptHandler.c: 72: TMR3L = 20000 - servoTimes[3];
  9238  001BB6  0100               	movlb	0	; () banked
  9239  001BB8  51DA               	movf	(_servoTimes+6)& (0+255),w,b
  9240  001BBA  0800               	sublw	0
  9241  001BBC  0F20               	addlw	32
  9242  001BBE  6EB2               	movwf	4018,c	;volatile
  9243  001BC0                     i2l6036:
  9244                           
  9245                           ; BSR set to: 0
  9246                           ;interruptHandler.c: 73: }
  9247                           ;interruptHandler.c: 74: TMR3ON = 1;
  9248  001BC0  80B1               	bsf	4017,0,c	;volatile
  9249  001BC2                     i2l1271:
  9250  001BC2  C05A  FFF5         	movff	??_handler+15,tablat
  9251  001BC6  C059  FFF8         	movff	??_handler+14,tblptru
  9252  001BCA  C058  FFF7         	movff	??_handler+13,tblptrh
  9253  001BCE  C057  FFF6         	movff	??_handler+12,tblptrl
  9254  001BD2  C056  FFF4         	movff	??_handler+11,prodh
  9255  001BD6  C055  FFF3         	movff	??_handler+10,prodl
  9256  001BDA  C054  FFDA         	movff	??_handler+9,fsr2h
  9257  001BDE  C053  FFD9         	movff	??_handler+8,fsr2l
  9258  001BE2  C052  FFE2         	movff	??_handler+7,fsr1h
  9259  001BE6  C051  FFE1         	movff	??_handler+6,fsr1l
  9260  001BEA  C050  FFEA         	movff	??_handler+5,fsr0h
  9261  001BEE  C04F  FFE9         	movff	??_handler+4,fsr0l
  9262  001BF2  C04E  FFFB         	movff	??_handler+3,pclatu
  9263  001BF6  C04D  FFFA         	movff	??_handler+2,pclath
  9264  001BFA  927C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9265  001BFC  0011               	retfie		f
  9266  001BFE                     __end_of_handler:
  9267                           	opt stack 0
  9268                           pclatu	equ	0xFFB
  9269                           pclath	equ	0xFFA
  9270                           tblptru	equ	0xFF8
  9271                           tblptrh	equ	0xFF7
  9272                           tblptrl	equ	0xFF6
  9273                           tablat	equ	0xFF5
  9274                           prodh	equ	0xFF4
  9275                           prodl	equ	0xFF3
  9276                           intcon	equ	0xFF2
  9277                           intcon2	equ	0xFF1
  9278                           intcon3	equ	0xFF0
  9279                           indf0	equ	0xFEF
  9280                           postinc0	equ	0xFEE
  9281                           fsr0h	equ	0xFEA
  9282                           fsr0l	equ	0xFE9
  9283                           wreg	equ	0xFE8
  9284                           postdec1	equ	0xFE5
  9285                           fsr1h	equ	0xFE2
  9286                           fsr1l	equ	0xFE1
  9287                           indf2	equ	0xFDF
  9288                           postinc2	equ	0xFDE
  9289                           postdec2	equ	0xFDD
  9290                           fsr2h	equ	0xFDA
  9291                           fsr2l	equ	0xFD9
  9292                           status	equ	0xFD8
  9293                           
  9294 ;; *************** function _updateMenu *****************
  9295 ;; Defined at:
  9296 ;;		line 156 in file "UI.c"
  9297 ;; Parameters:    Size  Location     Type
  9298 ;;		None
  9299 ;; Auto vars:     Size  Location     Type
  9300 ;;		None
  9301 ;; Return value:  Size  Location     Type
  9302 ;;                  1    wreg      void 
  9303 ;; Registers used:
  9304 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9305 ;; Tracked objects:
  9306 ;;		On entry : 0/0
  9307 ;;		On exit  : 0/0
  9308 ;;		Unchanged: 0/0
  9309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9312 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9313 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9314 ;;Total ram usage:        2 bytes
  9315 ;; Hardware stack levels used:    1
  9316 ;; Hardware stack levels required when called:    5
  9317 ;; This function calls:
  9318 ;;		_change_state_to_logs_11
  9319 ;;		_change_state_to_logs_12
  9320 ;;		_change_state_to_logs_22
  9321 ;;		_change_state_to_logs_23
  9322 ;;		_change_state_to_logs_33
  9323 ;;		_change_state_to_logs_34
  9324 ;;		_change_state_to_menu_11
  9325 ;;		_change_state_to_menu_23
  9326 ;;		_dispLogs
  9327 ;;		_inputHandler
  9328 ;;		i2_change_state_to_menu_12
  9329 ;;		i2_change_state_to_menu_22
  9330 ;;		i2_change_state_to_menu_start
  9331 ;; This function is called by:
  9332 ;;		_handler
  9333 ;; This function uses a non-reentrant model
  9334 ;;
  9335                           
  9336                           	psect	text43
  9337  000F90                     __ptext43:
  9338                           	opt stack 0
  9339  000F90                     _updateMenu:
  9340                           	opt stack 18
  9341                           
  9342                           ;UI.c: 157: up = 0; down = 0; enter = 0; back = 0;
  9343                           
  9344                           ;incstack = 0
  9345  000F90  0E00               	movlw	0
  9346  000F92  6E76               	movwf	_up+1,c
  9347  000F94  0E00               	movlw	0
  9348  000F96  6E75               	movwf	_up,c
  9349  000F98  0E00               	movlw	0
  9350  000F9A  6E6E               	movwf	_down+1,c
  9351  000F9C  0E00               	movlw	0
  9352  000F9E  6E6D               	movwf	_down,c
  9353  000FA0  0E00               	movlw	0
  9354  000FA2  6E70               	movwf	_enter+1,c
  9355  000FA4  0E00               	movlw	0
  9356  000FA6  6E6F               	movwf	_enter,c
  9357  000FA8  0E00               	movlw	0
  9358  000FAA  6E64               	movwf	_back+1,c
  9359  000FAC  0E00               	movlw	0
  9360  000FAE  6E63               	movwf	_back,c
  9361                           
  9362                           ;UI.c: 158: (INTCONbits.GIE = 0);
  9363  000FB0  9EF2               	bcf	intcon,7,c	;volatile
  9364                           
  9365                           ;UI.c: 160: if (inputHandler()
  9366                           ;UI.c: 163: ){
  9367  000FB2  EC5D  F00C         	call	_inputHandler	;wreg free
  9368  000FB6  502A               	movf	?_inputHandler,w,c
  9369  000FB8  102B               	iorwf	?_inputHandler+1,w,c
  9370  000FBA  A4D8               	btfss	status,2,c
  9371  000FBC  D112               	goto	i2l5788
  9372  000FBE  D146               	goto	i2l426
  9373  000FC0                     i2l5640:
  9374                           
  9375                           ;UI.c: 167: change_state_to_menu_11();
  9376  000FC0  EC18  F014         	call	_change_state_to_menu_11	;wreg free
  9377                           
  9378                           ;UI.c: 168: break;
  9379  000FC4  D143               	goto	i2l426
  9380  000FC6                     i2l5642:
  9381                           
  9382                           ;UI.c: 171: if(up){
  9383  000FC6  5075               	movf	_up,w,c
  9384  000FC8  1076               	iorwf	_up+1,w,c
  9385  000FCA  B4D8               	btfsc	status,2,c
  9386  000FCC  D003               	goto	i2l5646
  9387                           
  9388                           ;UI.c: 172: change_state_to_menu_23();
  9389  000FCE  EC00  F014         	call	_change_state_to_menu_23	;wreg free
  9390                           
  9391                           ;UI.c: 173: }
  9392  000FD2  D13C               	goto	i2l426
  9393  000FD4                     i2l5646:
  9394                           
  9395                           ;UI.c: 174: else if(down){
  9396  000FD4  506D               	movf	_down,w,c
  9397  000FD6  106E               	iorwf	_down+1,w,c
  9398  000FD8  B4D8               	btfsc	status,2,c
  9399  000FDA  D003               	goto	i2l5650
  9400                           
  9401                           ;UI.c: 175: change_state_to_menu_12();
  9402  000FDC  ECE8  F013         	call	i2_change_state_to_menu_12	;wreg free
  9403                           
  9404                           ;UI.c: 176: }
  9405  000FE0  D135               	goto	i2l426
  9406  000FE2                     i2l5650:
  9407                           
  9408                           ;UI.c: 177: else if(enter){
  9409  000FE2  506F               	movf	_enter,w,c
  9410  000FE4  1070               	iorwf	_enter+1,w,c
  9411  000FE6  B4D8               	btfsc	status,2,c
  9412  000FE8  D131               	goto	i2l426
  9413                           
  9414                           ;UI.c: 178: change_state_to_menu_start();
  9415  000FEA  EC17  F015         	call	i2_change_state_to_menu_start	;wreg free
  9416                           
  9417                           ;UI.c: 179: }
  9418                           ;UI.c: 180: break;
  9419  000FEE  D12E               	goto	i2l426
  9420  000FF0                     i2l5654:
  9421                           
  9422                           ;UI.c: 183: if(up){
  9423  000FF0  5075               	movf	_up,w,c
  9424  000FF2  1076               	iorwf	_up+1,w,c
  9425  000FF4  B4D8               	btfsc	status,2,c
  9426  000FF6  D003               	goto	i2l5658
  9427                           
  9428                           ;UI.c: 184: change_state_to_menu_11();
  9429  000FF8  EC18  F014         	call	_change_state_to_menu_11	;wreg free
  9430                           
  9431                           ;UI.c: 185: }
  9432  000FFC  D127               	goto	i2l426
  9433  000FFE                     i2l5658:
  9434                           
  9435                           ;UI.c: 186: else if(down){
  9436  000FFE  506D               	movf	_down,w,c
  9437  001000  106E               	iorwf	_down+1,w,c
  9438  001002  B4D8               	btfsc	status,2,c
  9439  001004  D011               	goto	i2l5674
  9440                           
  9441                           ;UI.c: 187: change_state_to_menu_23();
  9442  001006  EC00  F014         	call	_change_state_to_menu_23	;wreg free
  9443                           
  9444                           ;UI.c: 188: }
  9445  00100A  D120               	goto	i2l426
  9446  00100C                     i2l5666:
  9447                           
  9448                           ;UI.c: 195: if(up){
  9449  00100C  5075               	movf	_up,w,c
  9450  00100E  1076               	iorwf	_up+1,w,c
  9451  001010  B4D8               	btfsc	status,2,c
  9452  001012  D003               	goto	i2l5670
  9453                           
  9454                           ;UI.c: 196: change_state_to_menu_11();
  9455  001014  EC18  F014         	call	_change_state_to_menu_11	;wreg free
  9456                           
  9457                           ;UI.c: 197: }
  9458  001018  D119               	goto	i2l426
  9459  00101A                     i2l5670:
  9460                           
  9461                           ;UI.c: 198: else if(down){
  9462  00101A  506D               	movf	_down,w,c
  9463  00101C  106E               	iorwf	_down+1,w,c
  9464  00101E  B4D8               	btfsc	status,2,c
  9465  001020  D003               	goto	i2l5674
  9466                           
  9467                           ;UI.c: 199: change_state_to_menu_23();
  9468  001022  EC00  F014         	call	_change_state_to_menu_23	;wreg free
  9469                           
  9470                           ;UI.c: 200: }
  9471  001026  D112               	goto	i2l426
  9472  001028                     i2l5674:
  9473                           
  9474                           ;UI.c: 201: else if(enter){
  9475  001028  506F               	movf	_enter,w,c
  9476  00102A  1070               	iorwf	_enter+1,w,c
  9477  00102C  B4D8               	btfsc	status,2,c
  9478  00102E  D10E               	goto	i2l426
  9479                           
  9480                           ;UI.c: 202: machine_state = Sorting_state;
  9481  001030  0E01               	movlw	1
  9482  001032  0100               	movlb	0	; () banked
  9483  001034  6FF7               	movwf	_machine_state& (0+255),b
  9484                           
  9485                           ; BSR set to: 0
  9486                           ;UI.c: 203: }
  9487                           ;UI.c: 204: break;
  9488                           
  9489                           ; BSR set to: 0
  9490                           
  9491                           ; BSR set to: 0
  9492  001036  D10A               	goto	i2l426
  9493  001038                     i2l5678:
  9494                           
  9495                           ;UI.c: 207: if(up){
  9496  001038  5075               	movf	_up,w,c
  9497  00103A  1076               	iorwf	_up+1,w,c
  9498  00103C  B4D8               	btfsc	status,2,c
  9499  00103E  D003               	goto	i2l5682
  9500                           
  9501                           ;UI.c: 208: change_state_to_menu_22();
  9502  001040  ECD0  F013         	call	i2_change_state_to_menu_22	;wreg free
  9503                           
  9504                           ;UI.c: 209: }
  9505  001044  D103               	goto	i2l426
  9506  001046                     i2l5682:
  9507                           
  9508                           ;UI.c: 210: else if(down){
  9509  001046  506D               	movf	_down,w,c
  9510  001048  106E               	iorwf	_down+1,w,c
  9511  00104A  B4D8               	btfsc	status,2,c
  9512  00104C  D003               	goto	i2l5686
  9513                           
  9514                           ;UI.c: 211: change_state_to_menu_11();
  9515  00104E  EC18  F014         	call	_change_state_to_menu_11	;wreg free
  9516                           
  9517                           ;UI.c: 212: }
  9518  001052  D0FC               	goto	i2l426
  9519  001054                     i2l5686:
  9520                           
  9521                           ;UI.c: 213: else if(enter){
  9522  001054  506F               	movf	_enter,w,c
  9523  001056  1070               	iorwf	_enter+1,w,c
  9524  001058  B4D8               	btfsc	status,2,c
  9525  00105A  D0F8               	goto	i2l426
  9526                           
  9527                           ;UI.c: 214: change_state_to_logs_11();
  9528  00105C  EC90  F014         	call	_change_state_to_logs_11	;wreg free
  9529                           
  9530                           ;UI.c: 215: }
  9531                           ;UI.c: 216: break;
  9532  001060  D0F5               	goto	i2l426
  9533  001062                     i2l5690:
  9534                           
  9535                           ;UI.c: 219: if(up){
  9536  001062  5075               	movf	_up,w,c
  9537  001064  1076               	iorwf	_up+1,w,c
  9538  001066  B4D8               	btfsc	status,2,c
  9539  001068  D003               	goto	i2l5694
  9540                           
  9541                           ;UI.c: 220: change_state_to_logs_34();
  9542  00106A  EC30  F014         	call	_change_state_to_logs_34	;wreg free
  9543                           
  9544                           ;UI.c: 221: }
  9545  00106E  D0EE               	goto	i2l426
  9546  001070                     i2l5694:
  9547                           
  9548                           ;UI.c: 222: else if(down){
  9549  001070  506D               	movf	_down,w,c
  9550  001072  106E               	iorwf	_down+1,w,c
  9551  001074  B4D8               	btfsc	status,2,c
  9552  001076  D003               	goto	i2l5698
  9553                           
  9554                           ;UI.c: 223: change_state_to_logs_12();
  9555  001078  EC78  F014         	call	_change_state_to_logs_12	;wreg free
  9556                           
  9557                           ;UI.c: 224: }
  9558  00107C  D0E7               	goto	i2l426
  9559  00107E                     i2l5698:
  9560                           
  9561                           ;UI.c: 225: else if(enter){
  9562  00107E  506F               	movf	_enter,w,c
  9563  001080  1070               	iorwf	_enter+1,w,c
  9564  001082  B4D8               	btfsc	status,2,c
  9565  001084  D007               	goto	i2l5702
  9566                           
  9567                           ;UI.c: 226: dispLogs(1);
  9568  001086  0E00               	movlw	0
  9569  001088  6E02               	movwf	dispLogs@myLog+1,c
  9570  00108A  0E01               	movlw	1
  9571  00108C  6E01               	movwf	dispLogs@myLog,c
  9572  00108E  ECB4  F015         	call	_dispLogs	;wreg free
  9573                           
  9574                           ;UI.c: 227: }
  9575  001092  D0DC               	goto	i2l426
  9576  001094                     i2l5702:
  9577                           
  9578                           ;UI.c: 228: else if(back){
  9579  001094  5063               	movf	_back,w,c
  9580  001096  1064               	iorwf	_back+1,w,c
  9581  001098  B4D8               	btfsc	status,2,c
  9582  00109A  D0D8               	goto	i2l426
  9583                           
  9584                           ;UI.c: 229: change_state_to_menu_23();
  9585  00109C  EC00  F014         	call	_change_state_to_menu_23	;wreg free
  9586                           
  9587                           ;UI.c: 230: }
  9588                           ;UI.c: 231: break;
  9589  0010A0  D0D5               	goto	i2l426
  9590  0010A2                     i2l5706:
  9591                           
  9592                           ;UI.c: 234: if(up){
  9593  0010A2  5075               	movf	_up,w,c
  9594  0010A4  1076               	iorwf	_up+1,w,c
  9595  0010A6  B4D8               	btfsc	status,2,c
  9596  0010A8  D003               	goto	i2l5710
  9597                           
  9598                           ;UI.c: 235: change_state_to_logs_11();
  9599  0010AA  EC90  F014         	call	_change_state_to_logs_11	;wreg free
  9600                           
  9601                           ;UI.c: 236: }
  9602  0010AE  D0CE               	goto	i2l426
  9603  0010B0                     i2l5710:
  9604                           
  9605                           ;UI.c: 237: else if(down){
  9606  0010B0  506D               	movf	_down,w,c
  9607  0010B2  106E               	iorwf	_down+1,w,c
  9608  0010B4  B4D8               	btfsc	status,2,c
  9609  0010B6  D003               	goto	i2l5714
  9610                           
  9611                           ;UI.c: 238: change_state_to_logs_23();
  9612  0010B8  ECBF  F014         	call	_change_state_to_logs_23	;wreg free
  9613                           
  9614                           ;UI.c: 239: }
  9615  0010BC  D0C7               	goto	i2l426
  9616  0010BE                     i2l5714:
  9617                           
  9618                           ;UI.c: 240: else if(enter){
  9619  0010BE  506F               	movf	_enter,w,c
  9620  0010C0  1070               	iorwf	_enter+1,w,c
  9621  0010C2  B4D8               	btfsc	status,2,c
  9622  0010C4  D007               	goto	i2l5718
  9623                           
  9624                           ;UI.c: 241: dispLogs(2);
  9625  0010C6  0E00               	movlw	0
  9626  0010C8  6E02               	movwf	dispLogs@myLog+1,c
  9627  0010CA  0E02               	movlw	2
  9628  0010CC  6E01               	movwf	dispLogs@myLog,c
  9629  0010CE  ECB4  F015         	call	_dispLogs	;wreg free
  9630                           
  9631                           ;UI.c: 242: }
  9632  0010D2  D0BC               	goto	i2l426
  9633  0010D4                     i2l5718:
  9634                           
  9635                           ;UI.c: 243: else if(back){
  9636  0010D4  5063               	movf	_back,w,c
  9637  0010D6  1064               	iorwf	_back+1,w,c
  9638  0010D8  B4D8               	btfsc	status,2,c
  9639  0010DA  D0B8               	goto	i2l426
  9640                           
  9641                           ;UI.c: 244: change_state_to_menu_23();
  9642  0010DC  EC00  F014         	call	_change_state_to_menu_23	;wreg free
  9643                           
  9644                           ;UI.c: 245: }
  9645                           ;UI.c: 246: break;
  9646  0010E0  D0B5               	goto	i2l426
  9647  0010E2                     i2l5722:
  9648                           
  9649                           ;UI.c: 249: if(up){
  9650  0010E2  5075               	movf	_up,w,c
  9651  0010E4  1076               	iorwf	_up+1,w,c
  9652  0010E6  B4D8               	btfsc	status,2,c
  9653  0010E8  D003               	goto	i2l5726
  9654                           
  9655                           ;UI.c: 250: change_state_to_logs_11();
  9656  0010EA  EC90  F014         	call	_change_state_to_logs_11	;wreg free
  9657                           
  9658                           ;UI.c: 251: }
  9659  0010EE  D0AE               	goto	i2l426
  9660  0010F0                     i2l5726:
  9661                           
  9662                           ;UI.c: 252: else if(down){
  9663  0010F0  506D               	movf	_down,w,c
  9664  0010F2  106E               	iorwf	_down+1,w,c
  9665  0010F4  B4D8               	btfsc	status,2,c
  9666  0010F6  D003               	goto	i2l5730
  9667                           
  9668                           ;UI.c: 253: change_state_to_logs_23();
  9669  0010F8  ECBF  F014         	call	_change_state_to_logs_23	;wreg free
  9670                           
  9671                           ;UI.c: 254: }
  9672  0010FC  D0A7               	goto	i2l426
  9673  0010FE                     i2l5730:
  9674                           
  9675                           ;UI.c: 255: else if(enter){
  9676  0010FE  506F               	movf	_enter,w,c
  9677  001100  1070               	iorwf	_enter+1,w,c
  9678  001102  B4D8               	btfsc	status,2,c
  9679  001104  D007               	goto	i2l5734
  9680                           
  9681                           ;UI.c: 256: dispLogs(2);
  9682  001106  0E00               	movlw	0
  9683  001108  6E02               	movwf	dispLogs@myLog+1,c
  9684  00110A  0E02               	movlw	2
  9685  00110C  6E01               	movwf	dispLogs@myLog,c
  9686  00110E  ECB4  F015         	call	_dispLogs	;wreg free
  9687                           
  9688                           ;UI.c: 257: }
  9689  001112  D09C               	goto	i2l426
  9690  001114                     i2l5734:
  9691                           
  9692                           ;UI.c: 258: else if(back){
  9693  001114  5063               	movf	_back,w,c
  9694  001116  1064               	iorwf	_back+1,w,c
  9695  001118  B4D8               	btfsc	status,2,c
  9696  00111A  D098               	goto	i2l426
  9697                           
  9698                           ;UI.c: 259: change_state_to_menu_23();
  9699  00111C  EC00  F014         	call	_change_state_to_menu_23	;wreg free
  9700                           
  9701                           ;UI.c: 260: }
  9702                           ;UI.c: 261: break;
  9703  001120  D095               	goto	i2l426
  9704  001122                     i2l5738:
  9705                           
  9706                           ;UI.c: 264: if(up){
  9707  001122  5075               	movf	_up,w,c
  9708  001124  1076               	iorwf	_up+1,w,c
  9709  001126  B4D8               	btfsc	status,2,c
  9710  001128  D003               	goto	i2l5742
  9711                           
  9712                           ;UI.c: 265: change_state_to_logs_22();
  9713  00112A  EC60  F014         	call	_change_state_to_logs_22	;wreg free
  9714                           
  9715                           ;UI.c: 266: }
  9716  00112E  D08E               	goto	i2l426
  9717  001130                     i2l5742:
  9718                           
  9719                           ;UI.c: 267: else if(down){
  9720  001130  506D               	movf	_down,w,c
  9721  001132  106E               	iorwf	_down+1,w,c
  9722  001134  B4D8               	btfsc	status,2,c
  9723  001136  D003               	goto	i2l5746
  9724                           
  9725                           ;UI.c: 268: change_state_to_logs_34();
  9726  001138  EC30  F014         	call	_change_state_to_logs_34	;wreg free
  9727                           
  9728                           ;UI.c: 269: }
  9729  00113C  D087               	goto	i2l426
  9730  00113E                     i2l5746:
  9731                           
  9732                           ;UI.c: 270: else if(enter){
  9733  00113E  506F               	movf	_enter,w,c
  9734  001140  1070               	iorwf	_enter+1,w,c
  9735  001142  B4D8               	btfsc	status,2,c
  9736  001144  D007               	goto	i2l5750
  9737                           
  9738                           ;UI.c: 271: dispLogs(3);
  9739  001146  0E00               	movlw	0
  9740  001148  6E02               	movwf	dispLogs@myLog+1,c
  9741  00114A  0E03               	movlw	3
  9742  00114C  6E01               	movwf	dispLogs@myLog,c
  9743  00114E  ECB4  F015         	call	_dispLogs	;wreg free
  9744                           
  9745                           ;UI.c: 272: }
  9746  001152  D07C               	goto	i2l426
  9747  001154                     i2l5750:
  9748                           
  9749                           ;UI.c: 273: else if(back){
  9750  001154  5063               	movf	_back,w,c
  9751  001156  1064               	iorwf	_back+1,w,c
  9752  001158  B4D8               	btfsc	status,2,c
  9753  00115A  D078               	goto	i2l426
  9754                           
  9755                           ;UI.c: 274: change_state_to_menu_23();
  9756  00115C  EC00  F014         	call	_change_state_to_menu_23	;wreg free
  9757                           
  9758                           ;UI.c: 275: }
  9759                           ;UI.c: 276: break;
  9760  001160  D075               	goto	i2l426
  9761  001162                     i2l5754:
  9762                           
  9763                           ;UI.c: 279: if(up){
  9764  001162  5075               	movf	_up,w,c
  9765  001164  1076               	iorwf	_up+1,w,c
  9766  001166  B4D8               	btfsc	status,2,c
  9767  001168  D003               	goto	i2l5758
  9768                           
  9769                           ;UI.c: 280: change_state_to_logs_22();
  9770  00116A  EC60  F014         	call	_change_state_to_logs_22	;wreg free
  9771                           
  9772                           ;UI.c: 281: }
  9773  00116E  D06E               	goto	i2l426
  9774  001170                     i2l5758:
  9775                           
  9776                           ;UI.c: 282: else if(down){
  9777  001170  506D               	movf	_down,w,c
  9778  001172  106E               	iorwf	_down+1,w,c
  9779  001174  B4D8               	btfsc	status,2,c
  9780  001176  D003               	goto	i2l5762
  9781                           
  9782                           ;UI.c: 283: change_state_to_logs_34();
  9783  001178  EC30  F014         	call	_change_state_to_logs_34	;wreg free
  9784                           
  9785                           ;UI.c: 284: }
  9786  00117C  D067               	goto	i2l426
  9787  00117E                     i2l5762:
  9788                           
  9789                           ;UI.c: 285: else if(enter){
  9790  00117E  506F               	movf	_enter,w,c
  9791  001180  1070               	iorwf	_enter+1,w,c
  9792  001182  B4D8               	btfsc	status,2,c
  9793  001184  D007               	goto	i2l5766
  9794                           
  9795                           ;UI.c: 286: dispLogs(3);
  9796  001186  0E00               	movlw	0
  9797  001188  6E02               	movwf	dispLogs@myLog+1,c
  9798  00118A  0E03               	movlw	3
  9799  00118C  6E01               	movwf	dispLogs@myLog,c
  9800  00118E  ECB4  F015         	call	_dispLogs	;wreg free
  9801                           
  9802                           ;UI.c: 287: }
  9803  001192  D05C               	goto	i2l426
  9804  001194                     i2l5766:
  9805                           
  9806                           ;UI.c: 288: else if(back){
  9807  001194  5063               	movf	_back,w,c
  9808  001196  1064               	iorwf	_back+1,w,c
  9809  001198  B4D8               	btfsc	status,2,c
  9810  00119A  D058               	goto	i2l426
  9811                           
  9812                           ;UI.c: 289: change_state_to_menu_23();
  9813  00119C  EC00  F014         	call	_change_state_to_menu_23	;wreg free
  9814                           
  9815                           ;UI.c: 290: }
  9816                           ;UI.c: 291: break;
  9817  0011A0  D055               	goto	i2l426
  9818  0011A2                     i2l5770:
  9819                           
  9820                           ;UI.c: 294: if(up){
  9821  0011A2  5075               	movf	_up,w,c
  9822  0011A4  1076               	iorwf	_up+1,w,c
  9823  0011A6  B4D8               	btfsc	status,2,c
  9824  0011A8  D003               	goto	i2l5774
  9825                           
  9826                           ;UI.c: 295: change_state_to_logs_33();
  9827  0011AA  EC48  F014         	call	_change_state_to_logs_33	;wreg free
  9828                           
  9829                           ;UI.c: 296: }
  9830  0011AE  D04E               	goto	i2l426
  9831  0011B0                     i2l5774:
  9832                           
  9833                           ;UI.c: 297: else if(down){
  9834  0011B0  506D               	movf	_down,w,c
  9835  0011B2  106E               	iorwf	_down+1,w,c
  9836  0011B4  B4D8               	btfsc	status,2,c
  9837  0011B6  D003               	goto	i2l5778
  9838                           
  9839                           ;UI.c: 298: change_state_to_logs_11();
  9840  0011B8  EC90  F014         	call	_change_state_to_logs_11	;wreg free
  9841                           
  9842                           ;UI.c: 299: }
  9843  0011BC  D047               	goto	i2l426
  9844  0011BE                     i2l5778:
  9845                           
  9846                           ;UI.c: 300: else if(enter){
  9847  0011BE  506F               	movf	_enter,w,c
  9848  0011C0  1070               	iorwf	_enter+1,w,c
  9849  0011C2  B4D8               	btfsc	status,2,c
  9850  0011C4  D007               	goto	i2l5782
  9851                           
  9852                           ;UI.c: 301: dispLogs(4);
  9853  0011C6  0E00               	movlw	0
  9854  0011C8  6E02               	movwf	dispLogs@myLog+1,c
  9855  0011CA  0E04               	movlw	4
  9856  0011CC  6E01               	movwf	dispLogs@myLog,c
  9857  0011CE  ECB4  F015         	call	_dispLogs	;wreg free
  9858                           
  9859                           ;UI.c: 302: }
  9860  0011D2  D03C               	goto	i2l426
  9861  0011D4                     i2l5782:
  9862                           
  9863                           ;UI.c: 303: else if(back){
  9864  0011D4  5063               	movf	_back,w,c
  9865  0011D6  1064               	iorwf	_back+1,w,c
  9866  0011D8  B4D8               	btfsc	status,2,c
  9867  0011DA  D038               	goto	i2l426
  9868                           
  9869                           ;UI.c: 304: change_state_to_menu_23();
  9870  0011DC  EC00  F014         	call	_change_state_to_menu_23	;wreg free
  9871                           
  9872                           ;UI.c: 310: }
  9873                           
  9874                           ;UI.c: 309: break;
  9875                           
  9876                           ;UI.c: 308: default:
  9877                           
  9878                           ;UI.c: 305: }
  9879                           ;UI.c: 306: break;
  9880  0011E0  D035               	goto	i2l426
  9881  0011E2                     i2l5788:
  9882  0011E2  C0E7  F043         	movff	_cur_state,??_updateMenu
  9883  0011E6  C0E8  F044         	movff	_cur_state+1,??_updateMenu+1
  9884                           
  9885                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
  9886                           ; Switch size 1, requested type "space"
  9887                           ; Number of cases is 3, Range of values is 0 to 4
  9888                           ; switch strategies available:
  9889                           ; Name         Instructions Cycles
  9890                           ; simple_byte           10     6 (average)
  9891                           ;	Chosen strategy is simple_byte
  9892  0011EA  5044               	movf	??_updateMenu+1,w,c
  9893  0011EC  0A00               	xorlw	0	; case 0
  9894  0011EE  B4D8               	btfsc	status,2,c
  9895  0011F0  D007               	goto	i2l6202
  9896  0011F2  0A03               	xorlw	3	; case 3
  9897  0011F4  B4D8               	btfsc	status,2,c
  9898  0011F6  D015               	goto	i2l6204
  9899  0011F8  0A07               	xorlw	7	; case 4
  9900  0011FA  B4D8               	btfsc	status,2,c
  9901  0011FC  D020               	goto	i2l6206
  9902  0011FE  D026               	goto	i2l426
  9903  001200                     i2l6202:
  9904                           
  9905                           ; Switch size 1, requested type "space"
  9906                           ; Number of cases is 5, Range of values is 0 to 23
  9907                           ; switch strategies available:
  9908                           ; Name         Instructions Cycles
  9909                           ; simple_byte           16     9 (average)
  9910                           ;	Chosen strategy is simple_byte
  9911  001200  5043               	movf	??_updateMenu,w,c
  9912  001202  0A00               	xorlw	0	; case 0
  9913  001204  B4D8               	btfsc	status,2,c
  9914  001206  D6DC               	goto	i2l5640
  9915  001208  0A0B               	xorlw	11	; case 11
  9916  00120A  B4D8               	btfsc	status,2,c
  9917  00120C  D6DC               	goto	i2l5642
  9918  00120E  0A07               	xorlw	7	; case 12
  9919  001210  B4D8               	btfsc	status,2,c
  9920  001212  D6EE               	goto	i2l5654
  9921  001214  0A1A               	xorlw	26	; case 22
  9922  001216  B4D8               	btfsc	status,2,c
  9923  001218  D6F9               	goto	i2l5666
  9924  00121A  0A01               	xorlw	1	; case 23
  9925  00121C  B4D8               	btfsc	status,2,c
  9926  00121E  D70C               	goto	i2l5678
  9927  001220  D015               	goto	i2l426
  9928  001222                     i2l6204:
  9929                           
  9930                           ; Switch size 1, requested type "space"
  9931                           ; Number of cases is 4, Range of values is 243 to 255
  9932                           ; switch strategies available:
  9933                           ; Name         Instructions Cycles
  9934                           ; simple_byte           13     7 (average)
  9935                           ;	Chosen strategy is simple_byte
  9936  001222  5043               	movf	??_updateMenu,w,c
  9937  001224  0AF3               	xorlw	243	; case 243
  9938  001226  B4D8               	btfsc	status,2,c
  9939  001228  D71C               	goto	i2l5690
  9940  00122A  0A07               	xorlw	7	; case 244
  9941  00122C  B4D8               	btfsc	status,2,c
  9942  00122E  D739               	goto	i2l5706
  9943  001230  0A0A               	xorlw	10	; case 254
  9944  001232  B4D8               	btfsc	status,2,c
  9945  001234  D756               	goto	i2l5722
  9946  001236  0A01               	xorlw	1	; case 255
  9947  001238  B4D8               	btfsc	status,2,c
  9948  00123A  D773               	goto	i2l5738
  9949  00123C  D007               	goto	i2l426
  9950  00123E                     i2l6206:
  9951                           
  9952                           ; Switch size 1, requested type "space"
  9953                           ; Number of cases is 2, Range of values is 9 to 10
  9954                           ; switch strategies available:
  9955                           ; Name         Instructions Cycles
  9956                           ; simple_byte            7     4 (average)
  9957                           ;	Chosen strategy is simple_byte
  9958  00123E  5043               	movf	??_updateMenu,w,c
  9959  001240  0A09               	xorlw	9	; case 9
  9960  001242  B4D8               	btfsc	status,2,c
  9961  001244  D78E               	goto	i2l5754
  9962  001246  0A03               	xorlw	3	; case 10
  9963  001248  B4D8               	btfsc	status,2,c
  9964  00124A  D7AB               	goto	i2l5770
  9965  00124C                     i2l426:
  9966                           
  9967                           ;UI.c: 311: }
  9968                           ;UI.c: 312: (INTCONbits.GIE = 1);
  9969  00124C  8EF2               	bsf	intcon,7,c	;volatile
  9970  00124E  0012               	return		;funcret
  9971  001250                     __end_of_updateMenu:
  9972                           	opt stack 0
  9973                           pclatu	equ	0xFFB
  9974                           pclath	equ	0xFFA
  9975                           tblptru	equ	0xFF8
  9976                           tblptrh	equ	0xFF7
  9977                           tblptrl	equ	0xFF6
  9978                           tablat	equ	0xFF5
  9979                           prodh	equ	0xFF4
  9980                           prodl	equ	0xFF3
  9981                           intcon	equ	0xFF2
  9982                           intcon2	equ	0xFF1
  9983                           intcon3	equ	0xFF0
  9984                           indf0	equ	0xFEF
  9985                           postinc0	equ	0xFEE
  9986                           fsr0h	equ	0xFEA
  9987                           fsr0l	equ	0xFE9
  9988                           wreg	equ	0xFE8
  9989                           postdec1	equ	0xFE5
  9990                           fsr1h	equ	0xFE2
  9991                           fsr1l	equ	0xFE1
  9992                           indf2	equ	0xFDF
  9993                           postinc2	equ	0xFDE
  9994                           postdec2	equ	0xFDD
  9995                           fsr2h	equ	0xFDA
  9996                           fsr2l	equ	0xFD9
  9997                           status	equ	0xFD8
  9998                           
  9999 ;; *************** function i2_change_state_to_menu_start *****************
 10000 ;; Defined at:
 10001 ;;		line 416 in file "UI.c"
 10002 ;; Parameters:    Size  Location     Type
 10003 ;;		None
 10004 ;; Auto vars:     Size  Location     Type
 10005 ;;		None
 10006 ;; Return value:  Size  Location     Type
 10007 ;;                  1    wreg      void 
 10008 ;; Registers used:
 10009 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10010 ;; Tracked objects:
 10011 ;;		On entry : 0/0
 10012 ;;		On exit  : 0/0
 10013 ;;		Unchanged: 0/0
 10014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10019 ;;Total ram usage:        0 bytes
 10020 ;; Hardware stack levels used:    1
 10021 ;; Hardware stack levels required when called:    4
 10022 ;; This function calls:
 10023 ;;		i2_lcdInst
 10024 ;;		i2_printRTC
 10025 ;;		i2_printf
 10026 ;; This function is called by:
 10027 ;;		_updateMenu
 10028 ;; This function uses a non-reentrant model
 10029 ;;
 10030                           
 10031                           	psect	text44
 10032  002A2E                     __ptext44:
 10033                           	opt stack 0
 10034  002A2E                     i2_change_state_to_menu_start:
 10035                           	opt stack 18
 10036                           
 10037                           ;UI.c: 417: cur_state = 0;
 10038                           
 10039                           ;incstack = 0
 10040  002A2E  0E00               	movlw	0
 10041  002A30  0100               	movlb	0	; () banked
 10042  002A32  6FE8               	movwf	(_cur_state+1)& (0+255),b
 10043  002A34  0E00               	movlw	0
 10044  002A36  6FE7               	movwf	_cur_state& (0+255),b
 10045                           
 10046                           ; BSR set to: 0
 10047                           ;UI.c: 419: lcdInst(0b10000000);;
 10048  002A38  0E80               	movlw	128
 10049  002A3A  ECE6  F015         	call	i2_lcdInst
 10050                           
 10051                           ;UI.c: 420: printRTC();
 10052  002A3E  EC45  F00A         	call	i2_printRTC	;wreg free
 10053                           
 10054                           ;UI.c: 421: lcdInst(0b11000000);;
 10055  002A42  0EC0               	movlw	192
 10056  002A44  ECE6  F015         	call	i2_lcdInst
 10057                           
 10058                           ;UI.c: 422: printf("PUSH TO CONTINUE");
 10059  002A48  0E97               	movlw	low STR_15
 10060  002A4A  6E0D               	movwf	i2printf@f,c
 10061  002A4C  0EFF               	movlw	high STR_15
 10062  002A4E  6E0E               	movwf	i2printf@f+1,c
 10063  002A50  ECC0  F004         	call	i2_printf	;wreg free
 10064  002A54  0012               	return		;funcret
 10065  002A56                     __end_ofi2_change_state_to_menu_start:
 10066                           	opt stack 0
 10067                           pclatu	equ	0xFFB
 10068                           pclath	equ	0xFFA
 10069                           tblptru	equ	0xFF8
 10070                           tblptrh	equ	0xFF7
 10071                           tblptrl	equ	0xFF6
 10072                           tablat	equ	0xFF5
 10073                           prodh	equ	0xFF4
 10074                           prodl	equ	0xFF3
 10075                           intcon	equ	0xFF2
 10076                           intcon2	equ	0xFF1
 10077                           intcon3	equ	0xFF0
 10078                           indf0	equ	0xFEF
 10079                           postinc0	equ	0xFEE
 10080                           fsr0h	equ	0xFEA
 10081                           fsr0l	equ	0xFE9
 10082                           wreg	equ	0xFE8
 10083                           postdec1	equ	0xFE5
 10084                           fsr1h	equ	0xFE2
 10085                           fsr1l	equ	0xFE1
 10086                           indf2	equ	0xFDF
 10087                           postinc2	equ	0xFDE
 10088                           postdec2	equ	0xFDD
 10089                           fsr2h	equ	0xFDA
 10090                           fsr2l	equ	0xFD9
 10091                           status	equ	0xFD8
 10092                           
 10093 ;; *************** function i2_printRTC *****************
 10094 ;; Defined at:
 10095 ;;		line 62 in file "RTC.c"
 10096 ;; Parameters:    Size  Location     Type
 10097 ;;		None
 10098 ;; Auto vars:     Size  Location     Type
 10099 ;;  printRTC       14   44[COMRAM] int [7]
 10100 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 10101 ;;  printRTC        2   64[COMRAM] int 
 10102 ;;  printRTC        2   58[COMRAM] int 
 10103 ;; Return value:  Size  Location     Type
 10104 ;;                  1    wreg      void 
 10105 ;; Registers used:
 10106 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10107 ;; Tracked objects:
 10108 ;;		On entry : 0/0
 10109 ;;		On exit  : 0/0
 10110 ;;		Unchanged: 0/0
 10111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10113 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10114 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10115 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10116 ;;Total ram usage:       25 bytes
 10117 ;; Hardware stack levels used:    1
 10118 ;; Hardware stack levels required when called:    3
 10119 ;; This function calls:
 10120 ;;		i2_getRTC
 10121 ;;		i2_lcdInst
 10122 ;;		i2_printf
 10123 ;;		i2_strcpy
 10124 ;; This function is called by:
 10125 ;;		i2_change_state_to_menu_start
 10126 ;; This function uses a non-reentrant model
 10127 ;;
 10128                           
 10129                           	psect	text45
 10130  00148A                     __ptext45:
 10131                           	opt stack 0
 10132  00148A                     i2_printRTC:
 10133                           	opt stack 18
 10134                           
 10135                           ;RTC.c: 63: getRTC();
 10136                           
 10137                           ;incstack = 0
 10138  00148A  EC52  F011         	call	i2_getRTC	;wreg free
 10139                           
 10140                           ;RTC.c: 64: char month[] = "MMM";
 10141  00148E  C10E  F03D         	movff	printRTC@F3192,i2printRTC@month
 10142  001492  C10F  F03E         	movff	printRTC@F3192+1,i2printRTC@month+1
 10143  001496  C110  F03F         	movff	printRTC@F3192+2,i2printRTC@month+2
 10144  00149A  C111  F040         	movff	printRTC@F3192+3,i2printRTC@month+3
 10145                           
 10146                           ;RTC.c: 65: int INT_time[7];
 10147                           ;RTC.c: 66: for(int i = 0; i < 7; i++){
 10148  00149E  0E00               	movlw	0
 10149  0014A0  6E42               	movwf	i2printRTC@i+1,c
 10150  0014A2  0E00               	movlw	0
 10151  0014A4  6E41               	movwf	i2printRTC@i,c
 10152  0014A6  BE42               	btfsc	i2printRTC@i+1,7,c
 10153  0014A8  D006               	goto	i2l4848
 10154  0014AA  5042               	movf	i2printRTC@i+1,w,c
 10155  0014AC  E135               	bnz	i2l967
 10156  0014AE  0E07               	movlw	7
 10157  0014B0  5C41               	subwf	i2printRTC@i,w,c
 10158  0014B2  B0D8               	btfsc	status,0,c
 10159  0014B4  D031               	goto	i2l967
 10160  0014B6                     i2l4848:
 10161                           
 10162                           ;RTC.c: 67: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 10163  0014B6  0EDC               	movlw	low _time
 10164  0014B8  2441               	addwf	i2printRTC@i,w,c
 10165  0014BA  6ED9               	movwf	fsr2l,c
 10166  0014BC  0E00               	movlw	high _time
 10167  0014BE  2042               	addwfc	i2printRTC@i+1,w,c
 10168  0014C0  6EDA               	movwf	fsr2h,c
 10169  0014C2  50DF               	movf	indf2,w,c
 10170  0014C4  6E2A               	movwf	??i2_printRTC& (0+255),c
 10171  0014C6  3A2A               	swapf	??i2_printRTC,f,c
 10172  0014C8  0E0F               	movlw	15
 10173  0014CA  162A               	andwf	??i2_printRTC,f,c
 10174  0014CC  0E0F               	movlw	15
 10175  0014CE  162A               	andwf	??i2_printRTC,f,c
 10176  0014D0  502A               	movf	??i2_printRTC,w,c
 10177  0014D2  0D0A               	mullw	10
 10178  0014D4  0EDC               	movlw	low _time
 10179  0014D6  2441               	addwf	i2printRTC@i,w,c
 10180  0014D8  6ED9               	movwf	fsr2l,c
 10181  0014DA  0E00               	movlw	high _time
 10182  0014DC  2042               	addwfc	i2printRTC@i+1,w,c
 10183  0014DE  6EDA               	movwf	fsr2h,c
 10184  0014E0  50DF               	movf	indf2,w,c
 10185  0014E2  0B0F               	andlw	15
 10186  0014E4  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 10187  0014E6  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 10188  0014E8  50F3               	movf	prodl,w,c
 10189  0014EA  262B               	addwf	??i2_printRTC+1,f,c
 10190  0014EC  50F4               	movf	prodh,w,c
 10191  0014EE  222C               	addwfc	??i2_printRTC+2,f,c
 10192  0014F0  90D8               	bcf	status,0,c
 10193  0014F2  3441               	rlcf	i2printRTC@i,w,c
 10194  0014F4  6ED9               	movwf	fsr2l,c
 10195  0014F6  3442               	rlcf	i2printRTC@i+1,w,c
 10196  0014F8  6EDA               	movwf	fsr2h,c
 10197  0014FA  0E2D               	movlw	low i2printRTC@INT_time
 10198  0014FC  26D9               	addwf	fsr2l,f,c
 10199  0014FE  0E00               	movlw	high i2printRTC@INT_time
 10200  001500  22DA               	addwfc	fsr2h,f,c
 10201  001502  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 10202  001506  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 10203  00150A  4A41               	infsnz	i2printRTC@i,f,c
 10204  00150C  2A42               	incf	i2printRTC@i+1,f,c
 10205  00150E  BE42               	btfsc	i2printRTC@i+1,7,c
 10206  001510  D7D2               	goto	i2l4848
 10207  001512  5042               	movf	i2printRTC@i+1,w,c
 10208  001514  E101               	bnz	i2u347_40
 10209  001516  D7CB               	goto	L2
 10210  001518                     i2u347_40:
 10211  001518                     i2l967:
 10212                           
 10213                           ;RTC.c: 68: }
 10214                           ;RTC.c: 69: int RTC_month = INT_time[5];
 10215  001518  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 10216  00151C  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 10217                           
 10218                           ;RTC.c: 70: switch(RTC_month){
 10219  001520  D084               	goto	i2l4880
 10220  001522                     i2l4854:
 10221                           
 10222                           ;RTC.c: 72: strcpy(month, "Jan");
 10223  001522  0E3D               	movlw	low i2printRTC@month
 10224  001524  6E01               	movwf	i2strcpy@to,c
 10225  001526  0E00               	movlw	high i2printRTC@month
 10226  001528  6E02               	movwf	i2strcpy@to+1,c
 10227  00152A  0EDB               	movlw	low STR_36
 10228  00152C  6E03               	movwf	i2strcpy@from,c
 10229  00152E  0EFF               	movlw	high STR_36
 10230  001530  6E04               	movwf	i2strcpy@from+1,c
 10231  001532  ECB7  F013         	call	i2_strcpy	;wreg free
 10232                           
 10233                           ;RTC.c: 73: break;
 10234  001536  D0A6               	goto	i2l4882
 10235  001538                     i2l4856:
 10236                           
 10237                           ;RTC.c: 75: strcpy(month, "Feb");
 10238  001538  0E3D               	movlw	low i2printRTC@month
 10239  00153A  6E01               	movwf	i2strcpy@to,c
 10240  00153C  0E00               	movlw	high i2printRTC@month
 10241  00153E  6E02               	movwf	i2strcpy@to+1,c
 10242  001540  0ECB               	movlw	low STR_37
 10243  001542  6E03               	movwf	i2strcpy@from,c
 10244  001544  0EFF               	movlw	high STR_37
 10245  001546  6E04               	movwf	i2strcpy@from+1,c
 10246  001548  ECB7  F013         	call	i2_strcpy	;wreg free
 10247                           
 10248                           ;RTC.c: 76: break;
 10249  00154C  D09B               	goto	i2l4882
 10250  00154E                     i2l4858:
 10251                           
 10252                           ;RTC.c: 78: strcpy(month, "Mar");
 10253  00154E  0E3D               	movlw	low i2printRTC@month
 10254  001550  6E01               	movwf	i2strcpy@to,c
 10255  001552  0E00               	movlw	high i2printRTC@month
 10256  001554  6E02               	movwf	i2strcpy@to+1,c
 10257  001556  0EE7               	movlw	low STR_38
 10258  001558  6E03               	movwf	i2strcpy@from,c
 10259  00155A  0EFF               	movlw	high STR_38
 10260  00155C  6E04               	movwf	i2strcpy@from+1,c
 10261  00155E  ECB7  F013         	call	i2_strcpy	;wreg free
 10262                           
 10263                           ;RTC.c: 79: break;
 10264  001562  D090               	goto	i2l4882
 10265  001564                     i2l4860:
 10266                           
 10267                           ;RTC.c: 81: strcpy(month, "Apr");
 10268  001564  0E3D               	movlw	low i2printRTC@month
 10269  001566  6E01               	movwf	i2strcpy@to,c
 10270  001568  0E00               	movlw	high i2printRTC@month
 10271  00156A  6E02               	movwf	i2strcpy@to+1,c
 10272  00156C  0EEB               	movlw	low STR_39
 10273  00156E  6E03               	movwf	i2strcpy@from,c
 10274  001570  0EFF               	movlw	high STR_39
 10275  001572  6E04               	movwf	i2strcpy@from+1,c
 10276  001574  ECB7  F013         	call	i2_strcpy	;wreg free
 10277                           
 10278                           ;RTC.c: 82: break;
 10279  001578  D085               	goto	i2l4882
 10280  00157A                     i2l4862:
 10281                           
 10282                           ;RTC.c: 84: strcpy(month, "May");
 10283  00157A  0E3D               	movlw	low i2printRTC@month
 10284  00157C  6E01               	movwf	i2strcpy@to,c
 10285  00157E  0E00               	movlw	high i2printRTC@month
 10286  001580  6E02               	movwf	i2strcpy@to+1,c
 10287  001582  0EF7               	movlw	low STR_40
 10288  001584  6E03               	movwf	i2strcpy@from,c
 10289  001586  0EFF               	movlw	high STR_40
 10290  001588  6E04               	movwf	i2strcpy@from+1,c
 10291  00158A  ECB7  F013         	call	i2_strcpy	;wreg free
 10292                           
 10293                           ;RTC.c: 85: break;
 10294  00158E  D07A               	goto	i2l4882
 10295  001590                     i2l4864:
 10296                           
 10297                           ;RTC.c: 87: strcpy(month, "Jun");
 10298  001590  0E3D               	movlw	low i2printRTC@month
 10299  001592  6E01               	movwf	i2strcpy@to,c
 10300  001594  0E00               	movlw	high i2printRTC@month
 10301  001596  6E02               	movwf	i2strcpy@to+1,c
 10302  001598  0EDF               	movlw	low STR_41
 10303  00159A  6E03               	movwf	i2strcpy@from,c
 10304  00159C  0EFF               	movlw	high STR_41
 10305  00159E  6E04               	movwf	i2strcpy@from+1,c
 10306  0015A0  ECB7  F013         	call	i2_strcpy	;wreg free
 10307                           
 10308                           ;RTC.c: 88: break;
 10309  0015A4  D06F               	goto	i2l4882
 10310  0015A6                     i2l4866:
 10311                           
 10312                           ;RTC.c: 90: strcpy(month, "Jul");
 10313  0015A6  0E3D               	movlw	low i2printRTC@month
 10314  0015A8  6E01               	movwf	i2strcpy@to,c
 10315  0015AA  0E00               	movlw	high i2printRTC@month
 10316  0015AC  6E02               	movwf	i2strcpy@to+1,c
 10317  0015AE  0ED7               	movlw	low STR_42
 10318  0015B0  6E03               	movwf	i2strcpy@from,c
 10319  0015B2  0EFF               	movlw	high STR_42
 10320  0015B4  6E04               	movwf	i2strcpy@from+1,c
 10321  0015B6  ECB7  F013         	call	i2_strcpy	;wreg free
 10322                           
 10323                           ;RTC.c: 91: break;
 10324  0015BA  D064               	goto	i2l4882
 10325  0015BC                     i2l4868:
 10326                           
 10327                           ;RTC.c: 93: strcpy(month, "Aug");
 10328  0015BC  0E3D               	movlw	low i2printRTC@month
 10329  0015BE  6E01               	movwf	i2strcpy@to,c
 10330  0015C0  0E00               	movlw	high i2printRTC@month
 10331  0015C2  6E02               	movwf	i2strcpy@to+1,c
 10332  0015C4  0ED3               	movlw	low STR_43
 10333  0015C6  6E03               	movwf	i2strcpy@from,c
 10334  0015C8  0EFF               	movlw	high STR_43
 10335  0015CA  6E04               	movwf	i2strcpy@from+1,c
 10336  0015CC  ECB7  F013         	call	i2_strcpy	;wreg free
 10337                           
 10338                           ;RTC.c: 94: break;
 10339  0015D0  D059               	goto	i2l4882
 10340  0015D2                     i2l4870:
 10341                           
 10342                           ;RTC.c: 96: strcpy(month, "Sep");
 10343  0015D2  0E3D               	movlw	low i2printRTC@month
 10344  0015D4  6E01               	movwf	i2strcpy@to,c
 10345  0015D6  0E00               	movlw	high i2printRTC@month
 10346  0015D8  6E02               	movwf	i2strcpy@to+1,c
 10347  0015DA  0EE3               	movlw	low STR_44
 10348  0015DC  6E03               	movwf	i2strcpy@from,c
 10349  0015DE  0EFF               	movlw	high STR_44
 10350  0015E0  6E04               	movwf	i2strcpy@from+1,c
 10351  0015E2  ECB7  F013         	call	i2_strcpy	;wreg free
 10352                           
 10353                           ;RTC.c: 97: break;
 10354  0015E6  D04E               	goto	i2l4882
 10355  0015E8                     i2l4872:
 10356                           
 10357                           ;RTC.c: 99: strcpy(month, "Oct");
 10358  0015E8  0E3D               	movlw	low i2printRTC@month
 10359  0015EA  6E01               	movwf	i2strcpy@to,c
 10360  0015EC  0E00               	movlw	high i2printRTC@month
 10361  0015EE  6E02               	movwf	i2strcpy@to+1,c
 10362  0015F0  0EEF               	movlw	low STR_45
 10363  0015F2  6E03               	movwf	i2strcpy@from,c
 10364  0015F4  0EFF               	movlw	high STR_45
 10365  0015F6  6E04               	movwf	i2strcpy@from+1,c
 10366  0015F8  ECB7  F013         	call	i2_strcpy	;wreg free
 10367                           
 10368                           ;RTC.c: 100: break;
 10369  0015FC  D043               	goto	i2l4882
 10370  0015FE                     i2l4874:
 10371                           
 10372                           ;RTC.c: 102: strcpy(month, "Nov");
 10373  0015FE  0E3D               	movlw	low i2printRTC@month
 10374  001600  6E01               	movwf	i2strcpy@to,c
 10375  001602  0E00               	movlw	high i2printRTC@month
 10376  001604  6E02               	movwf	i2strcpy@to+1,c
 10377  001606  0EF3               	movlw	low STR_46
 10378  001608  6E03               	movwf	i2strcpy@from,c
 10379  00160A  0EFF               	movlw	high STR_46
 10380  00160C  6E04               	movwf	i2strcpy@from+1,c
 10381  00160E  ECB7  F013         	call	i2_strcpy	;wreg free
 10382                           
 10383                           ;RTC.c: 103: break;
 10384  001612  D038               	goto	i2l4882
 10385  001614                     i2l4876:
 10386                           
 10387                           ;RTC.c: 105: strcpy(month, "Dec");
 10388  001614  0E3D               	movlw	low i2printRTC@month
 10389  001616  6E01               	movwf	i2strcpy@to,c
 10390  001618  0E00               	movlw	high i2printRTC@month
 10391  00161A  6E02               	movwf	i2strcpy@to+1,c
 10392  00161C  0ECF               	movlw	low STR_47
 10393  00161E  6E03               	movwf	i2strcpy@from,c
 10394  001620  0EFF               	movlw	high STR_47
 10395  001622  6E04               	movwf	i2strcpy@from+1,c
 10396  001624  ECB7  F013         	call	i2_strcpy	;wreg free
 10397                           
 10398                           ;RTC.c: 107: }
 10399                           
 10400                           ;RTC.c: 106: break;
 10401  001628  D02D               	goto	i2l4882
 10402  00162A                     i2l4880:
 10403  00162A  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 10404  00162E  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 10405                           
 10406                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10407                           ; Switch size 1, requested type "space"
 10408                           ; Number of cases is 1, Range of values is 0 to 0
 10409                           ; switch strategies available:
 10410                           ; Name         Instructions Cycles
 10411                           ; simple_byte            4     3 (average)
 10412                           ;	Chosen strategy is simple_byte
 10413  001632  502B               	movf	??i2_printRTC+1,w,c
 10414  001634  0A00               	xorlw	0	; case 0
 10415  001636  A4D8               	btfss	status,2,c
 10416  001638  D025               	goto	i2l4882
 10417                           
 10418                           ; Switch size 1, requested type "space"
 10419                           ; Number of cases is 12, Range of values is 1 to 12
 10420                           ; switch strategies available:
 10421                           ; Name         Instructions Cycles
 10422                           ; simple_byte           37    19 (average)
 10423                           ;	Chosen strategy is simple_byte
 10424  00163A  502A               	movf	??i2_printRTC,w,c
 10425  00163C  0A01               	xorlw	1	; case 1
 10426  00163E  B4D8               	btfsc	status,2,c
 10427  001640  D770               	goto	i2l4854
 10428  001642  0A03               	xorlw	3	; case 2
 10429  001644  B4D8               	btfsc	status,2,c
 10430  001646  D778               	goto	i2l4856
 10431  001648  0A01               	xorlw	1	; case 3
 10432  00164A  B4D8               	btfsc	status,2,c
 10433  00164C  D780               	goto	i2l4858
 10434  00164E  0A07               	xorlw	7	; case 4
 10435  001650  B4D8               	btfsc	status,2,c
 10436  001652  D788               	goto	i2l4860
 10437  001654  0A01               	xorlw	1	; case 5
 10438  001656  B4D8               	btfsc	status,2,c
 10439  001658  D790               	goto	i2l4862
 10440  00165A  0A03               	xorlw	3	; case 6
 10441  00165C  B4D8               	btfsc	status,2,c
 10442  00165E  D798               	goto	i2l4864
 10443  001660  0A01               	xorlw	1	; case 7
 10444  001662  B4D8               	btfsc	status,2,c
 10445  001664  D7A0               	goto	i2l4866
 10446  001666  0A0F               	xorlw	15	; case 8
 10447  001668  B4D8               	btfsc	status,2,c
 10448  00166A  D7A8               	goto	i2l4868
 10449  00166C  0A01               	xorlw	1	; case 9
 10450  00166E  B4D8               	btfsc	status,2,c
 10451  001670  D7B0               	goto	i2l4870
 10452  001672  0A03               	xorlw	3	; case 10
 10453  001674  B4D8               	btfsc	status,2,c
 10454  001676  D7B8               	goto	i2l4872
 10455  001678  0A01               	xorlw	1	; case 11
 10456  00167A  B4D8               	btfsc	status,2,c
 10457  00167C  D7C0               	goto	i2l4874
 10458  00167E  0A07               	xorlw	7	; case 12
 10459  001680  B4D8               	btfsc	status,2,c
 10460  001682  D7C8               	goto	i2l4876
 10461  001684                     i2l4882:
 10462                           
 10463                           ;RTC.c: 108: lcdInst(0b10000000);;
 10464  001684  0E80               	movlw	128
 10465  001686  ECE6  F015         	call	i2_lcdInst
 10466                           
 10467                           ;RTC.c: 109: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 10468  00168A  0ED0               	movlw	low STR_48
 10469  00168C  6E0D               	movwf	i2printf@f,c
 10470  00168E  0EFD               	movlw	high STR_48
 10471  001690  6E0E               	movwf	i2printf@f+1,c
 10472  001692  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 10473  001696  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 10474  00169A  0E3D               	movlw	low i2printRTC@month
 10475  00169C  6E11               	movwf	?i2_printf+4,c
 10476  00169E  0E00               	movlw	high i2printRTC@month
 10477  0016A0  6E12               	movwf	?i2_printf+5,c
 10478  0016A2  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 10479  0016A6  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 10480  0016AA  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 10481  0016AE  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 10482  0016B2  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 10483  0016B6  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 10484  0016BA  ECC0  F004         	call	i2_printf	;wreg free
 10485  0016BE  0012               	return		;funcret
 10486  0016C0                     __end_ofi2_printRTC:
 10487                           	opt stack 0
 10488                           pclatu	equ	0xFFB
 10489                           pclath	equ	0xFFA
 10490                           tblptru	equ	0xFF8
 10491                           tblptrh	equ	0xFF7
 10492                           tblptrl	equ	0xFF6
 10493                           tablat	equ	0xFF5
 10494                           prodh	equ	0xFF4
 10495                           prodl	equ	0xFF3
 10496                           intcon	equ	0xFF2
 10497                           intcon2	equ	0xFF1
 10498                           intcon3	equ	0xFF0
 10499                           indf0	equ	0xFEF
 10500                           postinc0	equ	0xFEE
 10501                           fsr0h	equ	0xFEA
 10502                           fsr0l	equ	0xFE9
 10503                           wreg	equ	0xFE8
 10504                           postdec1	equ	0xFE5
 10505                           fsr1h	equ	0xFE2
 10506                           fsr1l	equ	0xFE1
 10507                           indf2	equ	0xFDF
 10508                           postinc2	equ	0xFDE
 10509                           postdec2	equ	0xFDD
 10510                           fsr2h	equ	0xFDA
 10511                           fsr2l	equ	0xFD9
 10512                           status	equ	0xFD8
 10513                           
 10514 ;; *************** function i2_strcpy *****************
 10515 ;; Defined at:
 10516 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 10517 ;; Parameters:    Size  Location     Type
 10518 ;;  to              2    0[COMRAM] PTR unsigned char 
 10519 ;;		 -> printRTC@month(4), 
 10520 ;;  from            2    2[COMRAM] PTR const unsigned char 
 10521 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
 10522 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
 10523 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
 10524 ;; Auto vars:     Size  Location     Type
 10525 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 10526 ;;		 -> printRTC@month(4), 
 10527 ;; Return value:  Size  Location     Type
 10528 ;;                  2    0[COMRAM] PTR unsigned char 
 10529 ;; Registers used:
 10530 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10531 ;; Tracked objects:
 10532 ;;		On entry : 0/0
 10533 ;;		On exit  : 0/0
 10534 ;;		Unchanged: 0/0
 10535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10536 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10537 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10539 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10540 ;;Total ram usage:        6 bytes
 10541 ;; Hardware stack levels used:    1
 10542 ;; This function calls:
 10543 ;;		Nothing
 10544 ;; This function is called by:
 10545 ;;		i2_printRTC
 10546 ;; This function uses a non-reentrant model
 10547 ;;
 10548                           
 10549                           	psect	text46
 10550  00276E                     __ptext46:
 10551                           	opt stack 0
 10552  00276E                     i2_strcpy:
 10553                           	opt stack 20
 10554                           
 10555                           ;incstack = 0
 10556  00276E  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 10557  002772  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 10558  002776  D004               	goto	i2l4644
 10559  002778                     i2l4642:
 10560  002778  4A05               	infsnz	i2strcpy@cp,f,c
 10561  00277A  2A06               	incf	i2strcpy@cp+1,f,c
 10562  00277C  4A03               	infsnz	i2strcpy@from,f,c
 10563  00277E  2A04               	incf	i2strcpy@from+1,f,c
 10564  002780                     i2l4644:
 10565  002780  C003  FFF6         	movff	i2strcpy@from,tblptrl
 10566  002784  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 10567  002788                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10568  002788  6AF8               	clrf	tblptru,c
 10569  00278A                     	endif
 10570  00278A                     	if	0	;tblptru may be non-zero
 10571  00278A                     	endif
 10572  00278A  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 10573  00278E  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 10574  002792  0008               	tblrd		*
 10575  002794  CFF5 FFDF          	movff	tablat,indf2
 10576  002798  50DF               	movf	indf2,w,c
 10577  00279A  B4D8               	btfsc	status,2,c
 10578  00279C  0012               	return	
 10579  00279E  D7EC               	goto	i2l4642
 10580  0027A0                     __end_ofi2_strcpy:
 10581                           	opt stack 0
 10582                           pclatu	equ	0xFFB
 10583                           pclath	equ	0xFFA
 10584                           tblptru	equ	0xFF8
 10585                           tblptrh	equ	0xFF7
 10586                           tblptrl	equ	0xFF6
 10587                           tablat	equ	0xFF5
 10588                           prodh	equ	0xFF4
 10589                           prodl	equ	0xFF3
 10590                           intcon	equ	0xFF2
 10591                           intcon2	equ	0xFF1
 10592                           intcon3	equ	0xFF0
 10593                           indf0	equ	0xFEF
 10594                           postinc0	equ	0xFEE
 10595                           fsr0h	equ	0xFEA
 10596                           fsr0l	equ	0xFE9
 10597                           wreg	equ	0xFE8
 10598                           postdec1	equ	0xFE5
 10599                           fsr1h	equ	0xFE2
 10600                           fsr1l	equ	0xFE1
 10601                           indf2	equ	0xFDF
 10602                           postinc2	equ	0xFDE
 10603                           postdec2	equ	0xFDD
 10604                           fsr2h	equ	0xFDA
 10605                           fsr2l	equ	0xFD9
 10606                           status	equ	0xFD8
 10607                           
 10608 ;; *************** function _inputHandler *****************
 10609 ;; Defined at:
 10610 ;;		line 315 in file "UI.c"
 10611 ;; Parameters:    Size  Location     Type
 10612 ;;		None
 10613 ;; Auto vars:     Size  Location     Type
 10614 ;;		None
 10615 ;; Return value:  Size  Location     Type
 10616 ;;                  2   41[COMRAM] int 
 10617 ;; Registers used:
 10618 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10619 ;; Tracked objects:
 10620 ;;		On entry : 0/0
 10621 ;;		On exit  : 0/0
 10622 ;;		Unchanged: 0/0
 10623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10624 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10626 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10627 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10628 ;;Total ram usage:        4 bytes
 10629 ;; Hardware stack levels used:    1
 10630 ;; Hardware stack levels required when called:    4
 10631 ;; This function calls:
 10632 ;;		_change_state_to_logs_11
 10633 ;;		_change_state_to_logs_12
 10634 ;;		_change_state_to_logs_22
 10635 ;;		_change_state_to_logs_23
 10636 ;;		_change_state_to_logs_33
 10637 ;;		_change_state_to_logs_34
 10638 ;;		_change_state_to_menu_11
 10639 ;;		_change_state_to_menu_23
 10640 ;;		i2_change_state_to_menu_12
 10641 ;;		i2_change_state_to_menu_22
 10642 ;; This function is called by:
 10643 ;;		_updateMenu
 10644 ;; This function uses a non-reentrant model
 10645 ;;
 10646                           
 10647                           	psect	text47
 10648  0018BA                     __ptext47:
 10649                           	opt stack 0
 10650  0018BA                     _inputHandler:
 10651                           	opt stack 18
 10652                           
 10653                           ;UI.c: 320: if(firstboot){
 10654                           
 10655                           ;incstack = 0
 10656  0018BA  5073               	movf	_firstboot,w,c
 10657  0018BC  1074               	iorwf	_firstboot+1,w,c
 10658  0018BE  B4D8               	btfsc	status,2,c
 10659  0018C0  D00B               	goto	i2l4950
 10660                           
 10661                           ;UI.c: 321: change_state_to_menu_11();
 10662  0018C2  EC18  F014         	call	_change_state_to_menu_11	;wreg free
 10663                           
 10664                           ;UI.c: 322: firstboot = 0;
 10665  0018C6  0E00               	movlw	0
 10666  0018C8  6E74               	movwf	_firstboot+1,c
 10667  0018CA  0E00               	movlw	0
 10668  0018CC  6E73               	movwf	_firstboot,c
 10669                           
 10670                           ;UI.c: 323: return 0;
 10671  0018CE  0E00               	movlw	0
 10672  0018D0  6E2B               	movwf	?_inputHandler+1,c
 10673  0018D2  0E00               	movlw	0
 10674  0018D4  6E2A               	movwf	?_inputHandler,c
 10675  0018D6  0012               	return	
 10676  0018D8                     i2l4950:
 10677                           
 10678                           ;UI.c: 324: }
 10679                           ;UI.c: 325: if (logstate){
 10680  0018D8  0100               	movlb	0	; () banked
 10681  0018DA  51F3               	movf	_logstate& (0+255),w,b
 10682  0018DC  0100               	movlb	0	; () banked
 10683  0018DE  11F4               	iorwf	(_logstate+1)& (0+255),w,b
 10684  0018E0  B4D8               	btfsc	status,2,c
 10685  0018E2  D0C7               	goto	i2l5068
 10686                           
 10687                           ; BSR set to: 0
 10688                           ;UI.c: 326: if(input == 'C' && PORTBbits.RB1 == 1){
 10689  0018E4  0E43               	movlw	67
 10690  0018E6  1879               	xorwf	_input,w,c
 10691  0018E8  A4D8               	btfss	status,2,c
 10692  0018EA  D012               	goto	i2l4968
 10693                           
 10694                           ; BSR set to: 0
 10695  0018EC  B281               	btfsc	3969,1,c	;volatile
 10696  0018EE  D009               	goto	i2l4960
 10697  0018F0  D00F               	goto	i2l4968
 10698  0018F2                     i2l4958:
 10699                           
 10700                           ;UI.c: 329: _delay((unsigned long)((10)*(32000000/4000.0)));
 10701  0018F2  0E68               	movlw	104
 10702  0018F4  6E2C               	movwf	??_inputHandler& (0+255),c
 10703  0018F6  0EE4               	movlw	228
 10704  0018F8                     i2u543_47:
 10705  0018F8  2EE8               	decfsz	wreg,f,c
 10706  0018FA  D7FE               	bra	i2u543_47
 10707  0018FC  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 10708  0018FE  D7FC               	bra	i2u543_47
 10709  001900  D000               	nop2	
 10710  001902                     i2l4960:
 10711  001902  B281               	btfsc	3969,1,c	;volatile
 10712  001904  D7F6               	goto	i2l4958
 10713  001906                     i2l4962:
 10714                           
 10715                           ;UI.c: 330: }
 10716                           ;UI.c: 331: return 0;
 10717  001906  0E00               	movlw	0
 10718  001908  6E2B               	movwf	?_inputHandler+1,c
 10719  00190A  0E00               	movlw	0
 10720  00190C  6E2A               	movwf	?_inputHandler,c
 10721  00190E  0012               	return	
 10722  001910                     i2l4968:
 10723                           
 10724                           ;UI.c: 333: else if (input == 'D'){
 10725  001910  0E44               	movlw	68
 10726  001912  1879               	xorwf	_input,w,c
 10727  001914  A4D8               	btfss	status,2,c
 10728  001916  D7F7               	goto	i2l4962
 10729                           
 10730                           ;UI.c: 335: logstate = 0;
 10731  001918  0E00               	movlw	0
 10732  00191A  0100               	movlb	0	; () banked
 10733  00191C  6FF4               	movwf	(_logstate+1)& (0+255),b
 10734  00191E  0E00               	movlw	0
 10735  001920  6FF3               	movwf	_logstate& (0+255),b
 10736                           
 10737                           ;UI.c: 336: switch(cur_state){
 10738  001922  D012               	goto	i2l4986
 10739  001924                     i2l4972:
 10740                           
 10741                           ;UI.c: 338: change_state_to_logs_11();
 10742  001924  EC90  F014         	call	_change_state_to_logs_11	;wreg free
 10743                           
 10744                           ;UI.c: 339: break;
 10745  001928  D7EE               	goto	i2l4962
 10746  00192A                     i2l4974:
 10747                           
 10748                           ;UI.c: 341: change_state_to_logs_12();
 10749  00192A  EC78  F014         	call	_change_state_to_logs_12	;wreg free
 10750                           
 10751                           ;UI.c: 342: break;
 10752  00192E  D7EB               	goto	i2l4962
 10753  001930                     i2l4976:
 10754                           
 10755                           ;UI.c: 344: change_state_to_logs_22();
 10756  001930  EC60  F014         	call	_change_state_to_logs_22	;wreg free
 10757                           
 10758                           ;UI.c: 345: break;
 10759  001934  D7E8               	goto	i2l4962
 10760  001936                     i2l4978:
 10761                           
 10762                           ;UI.c: 347: change_state_to_logs_23();
 10763  001936  ECBF  F014         	call	_change_state_to_logs_23	;wreg free
 10764                           
 10765                           ;UI.c: 348: break;
 10766  00193A  D7E5               	goto	i2l4962
 10767  00193C                     i2l4980:
 10768                           
 10769                           ;UI.c: 350: change_state_to_logs_33();
 10770  00193C  EC48  F014         	call	_change_state_to_logs_33	;wreg free
 10771                           
 10772                           ;UI.c: 351: break;
 10773  001940  D7E2               	goto	i2l4962
 10774  001942                     i2l4982:
 10775                           
 10776                           ;UI.c: 353: change_state_to_logs_34();
 10777  001942  EC30  F014         	call	_change_state_to_logs_34	;wreg free
 10778                           
 10779                           ;UI.c: 355: }
 10780                           
 10781                           ;UI.c: 354: break;
 10782  001946  D7DF               	goto	i2l4962
 10783  001948                     i2l4986:
 10784  001948  C0E7  F02C         	movff	_cur_state,??_inputHandler
 10785  00194C  C0E8  F02D         	movff	_cur_state+1,??_inputHandler+1
 10786                           
 10787                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 10788                           ; Switch size 1, requested type "space"
 10789                           ; Number of cases is 2, Range of values is 3 to 4
 10790                           ; switch strategies available:
 10791                           ; Name         Instructions Cycles
 10792                           ; simple_byte            7     4 (average)
 10793                           ;	Chosen strategy is simple_byte
 10794  001950  502D               	movf	??_inputHandler+1,w,c
 10795  001952  0A03               	xorlw	3	; case 3
 10796  001954  B4D8               	btfsc	status,2,c
 10797  001956  D004               	goto	i2l6210
 10798  001958  0A07               	xorlw	7	; case 4
 10799  00195A  B4D8               	btfsc	status,2,c
 10800  00195C  D00F               	goto	i2l6212
 10801  00195E  D7D3               	goto	i2l4962
 10802  001960                     i2l6210:
 10803                           
 10804                           ; Switch size 1, requested type "space"
 10805                           ; Number of cases is 4, Range of values is 243 to 255
 10806                           ; switch strategies available:
 10807                           ; Name         Instructions Cycles
 10808                           ; simple_byte           13     7 (average)
 10809                           ;	Chosen strategy is simple_byte
 10810  001960  502C               	movf	??_inputHandler,w,c
 10811  001962  0AF3               	xorlw	243	; case 243
 10812  001964  B4D8               	btfsc	status,2,c
 10813  001966  D7DE               	goto	i2l4972
 10814  001968  0A07               	xorlw	7	; case 244
 10815  00196A  B4D8               	btfsc	status,2,c
 10816  00196C  D7DE               	goto	i2l4974
 10817  00196E  0A0A               	xorlw	10	; case 254
 10818  001970  B4D8               	btfsc	status,2,c
 10819  001972  D7DE               	goto	i2l4976
 10820  001974  0A01               	xorlw	1	; case 255
 10821  001976  B4D8               	btfsc	status,2,c
 10822  001978  D7DE               	goto	i2l4978
 10823  00197A  D7C5               	goto	i2l4962
 10824  00197C                     i2l6212:
 10825                           
 10826                           ; Switch size 1, requested type "space"
 10827                           ; Number of cases is 2, Range of values is 9 to 10
 10828                           ; switch strategies available:
 10829                           ; Name         Instructions Cycles
 10830                           ; simple_byte            7     4 (average)
 10831                           ;	Chosen strategy is simple_byte
 10832  00197C  502C               	movf	??_inputHandler,w,c
 10833  00197E  0A09               	xorlw	9	; case 9
 10834  001980  B4D8               	btfsc	status,2,c
 10835  001982  D7DC               	goto	i2l4980
 10836  001984  0A03               	xorlw	3	; case 10
 10837  001986  B4D8               	btfsc	status,2,c
 10838  001988  D7DC               	goto	i2l4982
 10839  00198A  D7BD               	goto	i2l4962
 10840  00198C                     i2l4998:
 10841                           
 10842                           ;UI.c: 365: if(cur_state == 11){
 10843  00198C  0E0B               	movlw	11
 10844  00198E  0100               	movlb	0	; () banked
 10845  001990  19E7               	xorwf	_cur_state& (0+255),w,b
 10846  001992  0100               	movlb	0	; () banked
 10847  001994  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
 10848  001996  A4D8               	btfss	status,2,c
 10849  001998  D005               	goto	i2l5006
 10850                           
 10851                           ; BSR set to: 0
 10852                           ;UI.c: 366: return 0;
 10853  00199A  0E00               	movlw	0
 10854  00199C  6E2B               	movwf	?_inputHandler+1,c
 10855  00199E  0E00               	movlw	0
 10856  0019A0  6E2A               	movwf	?_inputHandler,c
 10857                           
 10858                           ; BSR set to: 0
 10859  0019A2  0012               	return	
 10860  0019A4                     i2l5006:
 10861                           
 10862                           ; BSR set to: 0
 10863                           ;UI.c: 368: else{
 10864                           ;UI.c: 369: change_state_to_menu_11();
 10865  0019A4  EC18  F014         	call	_change_state_to_menu_11	;wreg free
 10866                           
 10867                           ;UI.c: 370: }
 10868                           ;UI.c: 371: return 0;
 10869  0019A8  0E00               	movlw	0
 10870  0019AA  6E2B               	movwf	?_inputHandler+1,c
 10871  0019AC  0E00               	movlw	0
 10872  0019AE  6E2A               	movwf	?_inputHandler,c
 10873  0019B0  0012               	return	
 10874  0019B2                     i2l5012:
 10875                           
 10876                           ;UI.c: 373: if(cur_state == 22 | cur_state == 12){
 10877  0019B2  0E16               	movlw	22
 10878  0019B4  0100               	movlb	0	; () banked
 10879  0019B6  19E7               	xorwf	_cur_state& (0+255),w,b
 10880  0019B8  0100               	movlb	0	; () banked
 10881  0019BA  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
 10882  0019BC  B4D8               	btfsc	status,2,c
 10883  0019BE  D007               	goto	i2l5016
 10884                           
 10885                           ; BSR set to: 0
 10886  0019C0  0E0C               	movlw	12
 10887  0019C2  0100               	movlb	0	; () banked
 10888  0019C4  19E7               	xorwf	_cur_state& (0+255),w,b
 10889  0019C6  0100               	movlb	0	; () banked
 10890  0019C8  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
 10891  0019CA  A4D8               	btfss	status,2,c
 10892  0019CC  D005               	goto	i2l5022
 10893  0019CE                     i2l5016:
 10894                           
 10895                           ; BSR set to: 0
 10896                           ;UI.c: 374: return 0;
 10897  0019CE  0E00               	movlw	0
 10898  0019D0  6E2B               	movwf	?_inputHandler+1,c
 10899  0019D2  0E00               	movlw	0
 10900  0019D4  6E2A               	movwf	?_inputHandler,c
 10901                           
 10902                           ; BSR set to: 0
 10903  0019D6  0012               	return	
 10904  0019D8                     i2l5022:
 10905                           
 10906                           ; BSR set to: 0
 10907                           ;UI.c: 376: else if(cur_state == 23){
 10908  0019D8  0E17               	movlw	23
 10909  0019DA  0100               	movlb	0	; () banked
 10910  0019DC  19E7               	xorwf	_cur_state& (0+255),w,b
 10911  0019DE  0100               	movlb	0	; () banked
 10912  0019E0  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
 10913  0019E2  A4D8               	btfss	status,2,c
 10914  0019E4  D003               	goto	i2l5026
 10915                           
 10916                           ; BSR set to: 0
 10917                           ;UI.c: 377: change_state_to_menu_22();
 10918  0019E6  ECD0  F013         	call	i2_change_state_to_menu_22	;wreg free
 10919                           
 10920                           ;UI.c: 378: }
 10921  0019EA  D002               	goto	i2l5028
 10922  0019EC                     i2l5026:
 10923                           
 10924                           ;UI.c: 379: else{
 10925                           ;UI.c: 380: change_state_to_menu_12();
 10926  0019EC  ECE8  F013         	call	i2_change_state_to_menu_12	;wreg free
 10927  0019F0                     i2l5028:
 10928                           
 10929                           ;UI.c: 381: }
 10930                           ;UI.c: 382: return 0;
 10931  0019F0  0E00               	movlw	0
 10932  0019F2  6E2B               	movwf	?_inputHandler+1,c
 10933  0019F4  0E00               	movlw	0
 10934  0019F6  6E2A               	movwf	?_inputHandler,c
 10935  0019F8  0012               	return	
 10936  0019FA                     i2l5032:
 10937                           
 10938                           ;UI.c: 384: if(cur_state == 23){
 10939  0019FA  0E17               	movlw	23
 10940  0019FC  0100               	movlb	0	; () banked
 10941  0019FE  19E7               	xorwf	_cur_state& (0+255),w,b
 10942  001A00  0100               	movlb	0	; () banked
 10943  001A02  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
 10944  001A04  A4D8               	btfss	status,2,c
 10945  001A06  D005               	goto	i2l5040
 10946                           
 10947                           ; BSR set to: 0
 10948                           ;UI.c: 385: return 0;
 10949  001A08  0E00               	movlw	0
 10950  001A0A  6E2B               	movwf	?_inputHandler+1,c
 10951  001A0C  0E00               	movlw	0
 10952  001A0E  6E2A               	movwf	?_inputHandler,c
 10953                           
 10954                           ; BSR set to: 0
 10955  001A10  0012               	return	
 10956  001A12                     i2l5040:
 10957                           
 10958                           ; BSR set to: 0
 10959                           ;UI.c: 387: else{
 10960                           ;UI.c: 388: change_state_to_menu_23();
 10961  001A12  EC00  F014         	call	_change_state_to_menu_23	;wreg free
 10962                           
 10963                           ;UI.c: 389: }
 10964                           ;UI.c: 390: return 0;
 10965  001A16  0E00               	movlw	0
 10966  001A18  6E2B               	movwf	?_inputHandler+1,c
 10967  001A1A  0E00               	movlw	0
 10968  001A1C  6E2A               	movwf	?_inputHandler,c
 10969  001A1E  0012               	return	
 10970  001A20                     i2l5046:
 10971                           
 10972                           ;UI.c: 393: up = 1;
 10973  001A20  0E00               	movlw	0
 10974  001A22  6E76               	movwf	_up+1,c
 10975  001A24  0E01               	movlw	1
 10976  001A26  6E75               	movwf	_up,c
 10977                           
 10978                           ;UI.c: 394: return 1;
 10979  001A28  0E00               	movlw	0
 10980  001A2A  6E2B               	movwf	?_inputHandler+1,c
 10981  001A2C  0E01               	movlw	1
 10982  001A2E  6E2A               	movwf	?_inputHandler,c
 10983  001A30  0012               	return	
 10984  001A32                     i2l5050:
 10985                           
 10986                           ;UI.c: 396: down = 1;
 10987  001A32  0E00               	movlw	0
 10988  001A34  6E6E               	movwf	_down+1,c
 10989  001A36  0E01               	movlw	1
 10990  001A38  6E6D               	movwf	_down,c
 10991                           
 10992                           ;UI.c: 397: return 1;
 10993  001A3A  0E00               	movlw	0
 10994  001A3C  6E2B               	movwf	?_inputHandler+1,c
 10995  001A3E  0E01               	movlw	1
 10996  001A40  6E2A               	movwf	?_inputHandler,c
 10997  001A42  0012               	return	
 10998  001A44                     i2l5054:
 10999                           
 11000                           ;UI.c: 399: enter = 1;
 11001  001A44  0E00               	movlw	0
 11002  001A46  6E70               	movwf	_enter+1,c
 11003  001A48  0E01               	movlw	1
 11004  001A4A  6E6F               	movwf	_enter,c
 11005                           
 11006                           ;UI.c: 400: return 1;
 11007  001A4C  0E00               	movlw	0
 11008  001A4E  6E2B               	movwf	?_inputHandler+1,c
 11009  001A50  0E01               	movlw	1
 11010  001A52  6E2A               	movwf	?_inputHandler,c
 11011  001A54  0012               	return	
 11012  001A56                     i2l5058:
 11013                           
 11014                           ;UI.c: 402: back = 1;
 11015  001A56  0E00               	movlw	0
 11016  001A58  6E64               	movwf	_back+1,c
 11017  001A5A  0E01               	movlw	1
 11018  001A5C  6E63               	movwf	_back,c
 11019                           
 11020                           ;UI.c: 403: return 1;
 11021  001A5E  0E00               	movlw	0
 11022  001A60  6E2B               	movwf	?_inputHandler+1,c
 11023  001A62  0E01               	movlw	1
 11024  001A64  6E2A               	movwf	?_inputHandler,c
 11025  001A66  0012               	return	
 11026  001A68                     i2l5062:
 11027                           
 11028                           ;UI.c: 406: return 1;
 11029  001A68  0E00               	movlw	0
 11030  001A6A  6E2B               	movwf	?_inputHandler+1,c
 11031  001A6C  0E01               	movlw	1
 11032  001A6E  6E2A               	movwf	?_inputHandler,c
 11033                           
 11034                           ;UI.c: 407: }
 11035  001A70  0012               	return	
 11036  001A72                     i2l5068:
 11037  001A72  5079               	movf	_input,w,c
 11038                           
 11039                           ; Switch size 1, requested type "space"
 11040                           ; Number of cases is 7, Range of values is 49 to 68
 11041                           ; switch strategies available:
 11042                           ; Name         Instructions Cycles
 11043                           ; simple_byte           22    12 (average)
 11044                           ;	Chosen strategy is simple_byte
 11045  001A74  0A31               	xorlw	49	; case 49
 11046  001A76  B4D8               	btfsc	status,2,c
 11047  001A78  D789               	goto	i2l4998
 11048  001A7A  0A03               	xorlw	3	; case 50
 11049  001A7C  B4D8               	btfsc	status,2,c
 11050  001A7E  D799               	goto	i2l5012
 11051  001A80  0A01               	xorlw	1	; case 51
 11052  001A82  B4D8               	btfsc	status,2,c
 11053  001A84  D7BA               	goto	i2l5032
 11054  001A86  0A72               	xorlw	114	; case 65
 11055  001A88  B4D8               	btfsc	status,2,c
 11056  001A8A  D7CA               	goto	i2l5046
 11057  001A8C  0A03               	xorlw	3	; case 66
 11058  001A8E  B4D8               	btfsc	status,2,c
 11059  001A90  D7D0               	goto	i2l5050
 11060  001A92  0A01               	xorlw	1	; case 67
 11061  001A94  B4D8               	btfsc	status,2,c
 11062  001A96  D7D6               	goto	i2l5054
 11063  001A98  0A07               	xorlw	7	; case 68
 11064  001A9A  B4D8               	btfsc	status,2,c
 11065  001A9C  D7DC               	goto	i2l5058
 11066  001A9E  D7E4               	goto	i2l5062
 11067  001AA0                     __end_of_inputHandler:
 11068                           	opt stack 0
 11069                           pclatu	equ	0xFFB
 11070                           pclath	equ	0xFFA
 11071                           tblptru	equ	0xFF8
 11072                           tblptrh	equ	0xFF7
 11073                           tblptrl	equ	0xFF6
 11074                           tablat	equ	0xFF5
 11075                           prodh	equ	0xFF4
 11076                           prodl	equ	0xFF3
 11077                           intcon	equ	0xFF2
 11078                           intcon2	equ	0xFF1
 11079                           intcon3	equ	0xFF0
 11080                           indf0	equ	0xFEF
 11081                           postinc0	equ	0xFEE
 11082                           fsr0h	equ	0xFEA
 11083                           fsr0l	equ	0xFE9
 11084                           wreg	equ	0xFE8
 11085                           postdec1	equ	0xFE5
 11086                           fsr1h	equ	0xFE2
 11087                           fsr1l	equ	0xFE1
 11088                           indf2	equ	0xFDF
 11089                           postinc2	equ	0xFDE
 11090                           postdec2	equ	0xFDD
 11091                           fsr2h	equ	0xFDA
 11092                           fsr2l	equ	0xFD9
 11093                           status	equ	0xFD8
 11094                           
 11095 ;; *************** function i2_change_state_to_menu_22 *****************
 11096 ;; Defined at:
 11097 ;;		line 440 in file "UI.c"
 11098 ;; Parameters:    Size  Location     Type
 11099 ;;		None
 11100 ;; Auto vars:     Size  Location     Type
 11101 ;;		None
 11102 ;; Return value:  Size  Location     Type
 11103 ;;                  1    wreg      void 
 11104 ;; Registers used:
 11105 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11106 ;; Tracked objects:
 11107 ;;		On entry : 0/0
 11108 ;;		On exit  : 0/0
 11109 ;;		Unchanged: 0/0
 11110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11115 ;;Total ram usage:        0 bytes
 11116 ;; Hardware stack levels used:    1
 11117 ;; Hardware stack levels required when called:    3
 11118 ;; This function calls:
 11119 ;;		i2_lcdInst
 11120 ;;		i2_printf
 11121 ;; This function is called by:
 11122 ;;		_updateMenu
 11123 ;;		_inputHandler
 11124 ;; This function uses a non-reentrant model
 11125 ;;
 11126                           
 11127                           	psect	text48
 11128  0027A0                     __ptext48:
 11129                           	opt stack 0
 11130  0027A0                     i2_change_state_to_menu_22:
 11131                           	opt stack 19
 11132                           
 11133                           ;UI.c: 441: cur_state = 22;
 11134                           
 11135                           ;incstack = 0
 11136  0027A0  0E00               	movlw	0
 11137  0027A2  0100               	movlb	0	; () banked
 11138  0027A4  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11139  0027A6  0E16               	movlw	22
 11140  0027A8  6FE7               	movwf	_cur_state& (0+255),b
 11141                           
 11142                           ; BSR set to: 0
 11143                           ;UI.c: 443: lcdInst(0b10000000);;
 11144  0027AA  0E80               	movlw	128
 11145  0027AC  ECE6  F015         	call	i2_lcdInst
 11146                           
 11147                           ;UI.c: 444: printf("2. SORT        <");
 11148  0027B0  0E64               	movlw	low STR_19
 11149  0027B2  6E0D               	movwf	i2printf@f,c
 11150  0027B4  0EFF               	movlw	high STR_19
 11151  0027B6  6E0E               	movwf	i2printf@f+1,c
 11152  0027B8  ECC0  F004         	call	i2_printf	;wreg free
 11153                           
 11154                           ;UI.c: 445: lcdInst(0b11000000);;
 11155  0027BC  0EC0               	movlw	192
 11156  0027BE  ECE6  F015         	call	i2_lcdInst
 11157                           
 11158                           ;UI.c: 446: printf("3. LOGS         ");
 11159  0027C2  0E65               	movlw	low STR_21
 11160  0027C4  6E0D               	movwf	i2printf@f,c
 11161  0027C6  0EFE               	movlw	high STR_21
 11162  0027C8  6E0E               	movwf	i2printf@f+1,c
 11163  0027CA  ECC0  F004         	call	i2_printf	;wreg free
 11164  0027CE  0012               	return		;funcret
 11165  0027D0                     __end_ofi2_change_state_to_menu_22:
 11166                           	opt stack 0
 11167                           pclatu	equ	0xFFB
 11168                           pclath	equ	0xFFA
 11169                           tblptru	equ	0xFF8
 11170                           tblptrh	equ	0xFF7
 11171                           tblptrl	equ	0xFF6
 11172                           tablat	equ	0xFF5
 11173                           prodh	equ	0xFF4
 11174                           prodl	equ	0xFF3
 11175                           intcon	equ	0xFF2
 11176                           intcon2	equ	0xFF1
 11177                           intcon3	equ	0xFF0
 11178                           indf0	equ	0xFEF
 11179                           postinc0	equ	0xFEE
 11180                           fsr0h	equ	0xFEA
 11181                           fsr0l	equ	0xFE9
 11182                           wreg	equ	0xFE8
 11183                           postdec1	equ	0xFE5
 11184                           fsr1h	equ	0xFE2
 11185                           fsr1l	equ	0xFE1
 11186                           indf2	equ	0xFDF
 11187                           postinc2	equ	0xFDE
 11188                           postdec2	equ	0xFDD
 11189                           fsr2h	equ	0xFDA
 11190                           fsr2l	equ	0xFD9
 11191                           status	equ	0xFD8
 11192                           
 11193 ;; *************** function i2_change_state_to_menu_12 *****************
 11194 ;; Defined at:
 11195 ;;		line 432 in file "UI.c"
 11196 ;; Parameters:    Size  Location     Type
 11197 ;;		None
 11198 ;; Auto vars:     Size  Location     Type
 11199 ;;		None
 11200 ;; Return value:  Size  Location     Type
 11201 ;;                  1    wreg      void 
 11202 ;; Registers used:
 11203 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11204 ;; Tracked objects:
 11205 ;;		On entry : 0/0
 11206 ;;		On exit  : 0/0
 11207 ;;		Unchanged: 0/0
 11208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11212 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11213 ;;Total ram usage:        0 bytes
 11214 ;; Hardware stack levels used:    1
 11215 ;; Hardware stack levels required when called:    3
 11216 ;; This function calls:
 11217 ;;		i2_lcdInst
 11218 ;;		i2_printf
 11219 ;; This function is called by:
 11220 ;;		_updateMenu
 11221 ;;		_inputHandler
 11222 ;; This function uses a non-reentrant model
 11223 ;;
 11224                           
 11225                           	psect	text49
 11226  0027D0                     __ptext49:
 11227                           	opt stack 0
 11228  0027D0                     i2_change_state_to_menu_12:
 11229                           	opt stack 19
 11230                           
 11231                           ;UI.c: 433: cur_state = 12;
 11232                           
 11233                           ;incstack = 0
 11234  0027D0  0E00               	movlw	0
 11235  0027D2  0100               	movlb	0	; () banked
 11236  0027D4  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11237  0027D6  0E0C               	movlw	12
 11238  0027D8  6FE7               	movwf	_cur_state& (0+255),b
 11239                           
 11240                           ; BSR set to: 0
 11241                           ;UI.c: 435: lcdInst(0b10000000);;
 11242  0027DA  0E80               	movlw	128
 11243  0027DC  ECE6  F015         	call	i2_lcdInst
 11244                           
 11245                           ;UI.c: 436: printf("1. DATE/TIME    ");
 11246  0027E0  0E87               	movlw	low STR_18
 11247  0027E2  6E0D               	movwf	i2printf@f,c
 11248  0027E4  0EFE               	movlw	high STR_18
 11249  0027E6  6E0E               	movwf	i2printf@f+1,c
 11250  0027E8  ECC0  F004         	call	i2_printf	;wreg free
 11251                           
 11252                           ;UI.c: 437: lcdInst(0b11000000);;
 11253  0027EC  0EC0               	movlw	192
 11254  0027EE  ECE6  F015         	call	i2_lcdInst
 11255                           
 11256                           ;UI.c: 438: printf("2. SORT        <");
 11257  0027F2  0E64               	movlw	low STR_19
 11258  0027F4  6E0D               	movwf	i2printf@f,c
 11259  0027F6  0EFF               	movlw	high STR_19
 11260  0027F8  6E0E               	movwf	i2printf@f+1,c
 11261  0027FA  ECC0  F004         	call	i2_printf	;wreg free
 11262  0027FE  0012               	return		;funcret
 11263  002800                     __end_ofi2_change_state_to_menu_12:
 11264                           	opt stack 0
 11265                           pclatu	equ	0xFFB
 11266                           pclath	equ	0xFFA
 11267                           tblptru	equ	0xFF8
 11268                           tblptrh	equ	0xFF7
 11269                           tblptrl	equ	0xFF6
 11270                           tablat	equ	0xFF5
 11271                           prodh	equ	0xFF4
 11272                           prodl	equ	0xFF3
 11273                           intcon	equ	0xFF2
 11274                           intcon2	equ	0xFF1
 11275                           intcon3	equ	0xFF0
 11276                           indf0	equ	0xFEF
 11277                           postinc0	equ	0xFEE
 11278                           fsr0h	equ	0xFEA
 11279                           fsr0l	equ	0xFE9
 11280                           wreg	equ	0xFE8
 11281                           postdec1	equ	0xFE5
 11282                           fsr1h	equ	0xFE2
 11283                           fsr1l	equ	0xFE1
 11284                           indf2	equ	0xFDF
 11285                           postinc2	equ	0xFDE
 11286                           postdec2	equ	0xFDD
 11287                           fsr2h	equ	0xFDA
 11288                           fsr2l	equ	0xFD9
 11289                           status	equ	0xFD8
 11290                           
 11291 ;; *************** function _change_state_to_menu_23 *****************
 11292 ;; Defined at:
 11293 ;;		line 448 in file "UI.c"
 11294 ;; Parameters:    Size  Location     Type
 11295 ;;		None
 11296 ;; Auto vars:     Size  Location     Type
 11297 ;;		None
 11298 ;; Return value:  Size  Location     Type
 11299 ;;                  1    wreg      void 
 11300 ;; Registers used:
 11301 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11302 ;; Tracked objects:
 11303 ;;		On entry : 0/0
 11304 ;;		On exit  : 0/0
 11305 ;;		Unchanged: 0/0
 11306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11310 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11311 ;;Total ram usage:        0 bytes
 11312 ;; Hardware stack levels used:    1
 11313 ;; Hardware stack levels required when called:    3
 11314 ;; This function calls:
 11315 ;;		i2_lcdInst
 11316 ;;		i2_printf
 11317 ;; This function is called by:
 11318 ;;		_updateMenu
 11319 ;;		_inputHandler
 11320 ;; This function uses a non-reentrant model
 11321 ;;
 11322                           
 11323                           	psect	text50
 11324  002800                     __ptext50:
 11325                           	opt stack 0
 11326  002800                     _change_state_to_menu_23:
 11327                           	opt stack 18
 11328                           
 11329                           ;UI.c: 449: cur_state = 23;
 11330                           
 11331                           ;incstack = 0
 11332  002800  0E00               	movlw	0
 11333  002802  0100               	movlb	0	; () banked
 11334  002804  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11335  002806  0E17               	movlw	23
 11336  002808  6FE7               	movwf	_cur_state& (0+255),b
 11337                           
 11338                           ; BSR set to: 0
 11339                           ;UI.c: 451: lcdInst(0b10000000);;
 11340  00280A  0E80               	movlw	128
 11341  00280C  ECE6  F015         	call	i2_lcdInst
 11342                           
 11343                           ;UI.c: 452: printf("2. SORT         ");
 11344  002810  0E76               	movlw	low STR_17
 11345  002812  6E0D               	movwf	i2printf@f,c
 11346  002814  0EFE               	movlw	high STR_17
 11347  002816  6E0E               	movwf	i2printf@f+1,c
 11348  002818  ECC0  F004         	call	i2_printf	;wreg free
 11349                           
 11350                           ;UI.c: 453: lcdInst(0b11000000);;
 11351  00281C  0EC0               	movlw	192
 11352  00281E  ECE6  F015         	call	i2_lcdInst
 11353                           
 11354                           ;UI.c: 454: printf("3. LOGS        <");
 11355  002822  0E53               	movlw	low STR_23
 11356  002824  6E0D               	movwf	i2printf@f,c
 11357  002826  0EFF               	movlw	high STR_23
 11358  002828  6E0E               	movwf	i2printf@f+1,c
 11359  00282A  ECC0  F004         	call	i2_printf	;wreg free
 11360  00282E  0012               	return		;funcret
 11361  002830                     __end_of_change_state_to_menu_23:
 11362                           	opt stack 0
 11363                           pclatu	equ	0xFFB
 11364                           pclath	equ	0xFFA
 11365                           tblptru	equ	0xFF8
 11366                           tblptrh	equ	0xFF7
 11367                           tblptrl	equ	0xFF6
 11368                           tablat	equ	0xFF5
 11369                           prodh	equ	0xFF4
 11370                           prodl	equ	0xFF3
 11371                           intcon	equ	0xFF2
 11372                           intcon2	equ	0xFF1
 11373                           intcon3	equ	0xFF0
 11374                           indf0	equ	0xFEF
 11375                           postinc0	equ	0xFEE
 11376                           fsr0h	equ	0xFEA
 11377                           fsr0l	equ	0xFE9
 11378                           wreg	equ	0xFE8
 11379                           postdec1	equ	0xFE5
 11380                           fsr1h	equ	0xFE2
 11381                           fsr1l	equ	0xFE1
 11382                           indf2	equ	0xFDF
 11383                           postinc2	equ	0xFDE
 11384                           postdec2	equ	0xFDD
 11385                           fsr2h	equ	0xFDA
 11386                           fsr2l	equ	0xFD9
 11387                           status	equ	0xFD8
 11388                           
 11389 ;; *************** function _change_state_to_menu_11 *****************
 11390 ;; Defined at:
 11391 ;;		line 424 in file "UI.c"
 11392 ;; Parameters:    Size  Location     Type
 11393 ;;		None
 11394 ;; Auto vars:     Size  Location     Type
 11395 ;;		None
 11396 ;; Return value:  Size  Location     Type
 11397 ;;                  1    wreg      void 
 11398 ;; Registers used:
 11399 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11400 ;; Tracked objects:
 11401 ;;		On entry : 0/0
 11402 ;;		On exit  : 0/0
 11403 ;;		Unchanged: 0/0
 11404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11409 ;;Total ram usage:        0 bytes
 11410 ;; Hardware stack levels used:    1
 11411 ;; Hardware stack levels required when called:    3
 11412 ;; This function calls:
 11413 ;;		i2_lcdInst
 11414 ;;		i2_printf
 11415 ;; This function is called by:
 11416 ;;		_updateMenu
 11417 ;;		_inputHandler
 11418 ;; This function uses a non-reentrant model
 11419 ;;
 11420                           
 11421                           	psect	text51
 11422  002830                     __ptext51:
 11423                           	opt stack 0
 11424  002830                     _change_state_to_menu_11:
 11425                           	opt stack 18
 11426                           
 11427                           ;UI.c: 425: cur_state = 11;
 11428                           
 11429                           ;incstack = 0
 11430  002830  0E00               	movlw	0
 11431  002832  0100               	movlb	0	; () banked
 11432  002834  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11433  002836  0E0B               	movlw	11
 11434  002838  6FE7               	movwf	_cur_state& (0+255),b
 11435                           
 11436                           ; BSR set to: 0
 11437                           ;UI.c: 427: lcdInst(0b10000000);;
 11438  00283A  0E80               	movlw	128
 11439  00283C  ECE6  F015         	call	i2_lcdInst
 11440                           
 11441                           ;UI.c: 428: printf("1. DATE/TIME   <");
 11442  002840  0E75               	movlw	low STR_16
 11443  002842  6E0D               	movwf	i2printf@f,c
 11444  002844  0EFF               	movlw	high STR_16
 11445  002846  6E0E               	movwf	i2printf@f+1,c
 11446  002848  ECC0  F004         	call	i2_printf	;wreg free
 11447                           
 11448                           ;UI.c: 429: lcdInst(0b11000000);;
 11449  00284C  0EC0               	movlw	192
 11450  00284E  ECE6  F015         	call	i2_lcdInst
 11451                           
 11452                           ;UI.c: 430: printf("2. SORT         ");
 11453  002852  0E76               	movlw	low STR_17
 11454  002854  6E0D               	movwf	i2printf@f,c
 11455  002856  0EFE               	movlw	high STR_17
 11456  002858  6E0E               	movwf	i2printf@f+1,c
 11457  00285A  ECC0  F004         	call	i2_printf	;wreg free
 11458  00285E  0012               	return		;funcret
 11459  002860                     __end_of_change_state_to_menu_11:
 11460                           	opt stack 0
 11461                           pclatu	equ	0xFFB
 11462                           pclath	equ	0xFFA
 11463                           tblptru	equ	0xFF8
 11464                           tblptrh	equ	0xFF7
 11465                           tblptrl	equ	0xFF6
 11466                           tablat	equ	0xFF5
 11467                           prodh	equ	0xFF4
 11468                           prodl	equ	0xFF3
 11469                           intcon	equ	0xFF2
 11470                           intcon2	equ	0xFF1
 11471                           intcon3	equ	0xFF0
 11472                           indf0	equ	0xFEF
 11473                           postinc0	equ	0xFEE
 11474                           fsr0h	equ	0xFEA
 11475                           fsr0l	equ	0xFE9
 11476                           wreg	equ	0xFE8
 11477                           postdec1	equ	0xFE5
 11478                           fsr1h	equ	0xFE2
 11479                           fsr1l	equ	0xFE1
 11480                           indf2	equ	0xFDF
 11481                           postinc2	equ	0xFDE
 11482                           postdec2	equ	0xFDD
 11483                           fsr2h	equ	0xFDA
 11484                           fsr2l	equ	0xFD9
 11485                           status	equ	0xFD8
 11486                           
 11487 ;; *************** function _change_state_to_logs_34 *****************
 11488 ;; Defined at:
 11489 ;;		line 491 in file "UI.c"
 11490 ;; Parameters:    Size  Location     Type
 11491 ;;		None
 11492 ;; Auto vars:     Size  Location     Type
 11493 ;;		None
 11494 ;; Return value:  Size  Location     Type
 11495 ;;                  1    wreg      void 
 11496 ;; Registers used:
 11497 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11498 ;; Tracked objects:
 11499 ;;		On entry : 0/0
 11500 ;;		On exit  : 0/0
 11501 ;;		Unchanged: 0/0
 11502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11507 ;;Total ram usage:        0 bytes
 11508 ;; Hardware stack levels used:    1
 11509 ;; Hardware stack levels required when called:    3
 11510 ;; This function calls:
 11511 ;;		i2_lcdInst
 11512 ;;		i2_printf
 11513 ;; This function is called by:
 11514 ;;		_updateMenu
 11515 ;;		_inputHandler
 11516 ;; This function uses a non-reentrant model
 11517 ;;
 11518                           
 11519                           	psect	text52
 11520  002860                     __ptext52:
 11521                           	opt stack 0
 11522  002860                     _change_state_to_logs_34:
 11523                           	opt stack 18
 11524                           
 11525                           ;UI.c: 492: cur_state = 1034;
 11526                           
 11527                           ;incstack = 0
 11528  002860  0E04               	movlw	4
 11529  002862  0100               	movlb	0	; () banked
 11530  002864  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11531  002866  0E0A               	movlw	10
 11532  002868  6FE7               	movwf	_cur_state& (0+255),b
 11533                           
 11534                           ; BSR set to: 0
 11535                           ;UI.c: 493: lcdInst(0b10000000);;
 11536  00286A  0E80               	movlw	128
 11537  00286C  ECE6  F015         	call	i2_lcdInst
 11538                           
 11539                           ;UI.c: 494: printf("LOG 3           ");
 11540  002870  0E43               	movlw	low STR_29
 11541  002872  6E0D               	movwf	i2printf@f,c
 11542  002874  0EFE               	movlw	high STR_29
 11543  002876  6E0E               	movwf	i2printf@f+1,c
 11544  002878  ECC0  F004         	call	i2_printf	;wreg free
 11545                           
 11546                           ;UI.c: 495: lcdInst(0b11000000);;
 11547  00287C  0EC0               	movlw	192
 11548  00287E  ECE6  F015         	call	i2_lcdInst
 11549                           
 11550                           ;UI.c: 496: printf("LOG 4          <");
 11551  002882  0E42               	movlw	low STR_35
 11552  002884  6E0D               	movwf	i2printf@f,c
 11553  002886  0EFF               	movlw	high STR_35
 11554  002888  6E0E               	movwf	i2printf@f+1,c
 11555  00288A  ECC0  F004         	call	i2_printf	;wreg free
 11556  00288E  0012               	return		;funcret
 11557  002890                     __end_of_change_state_to_logs_34:
 11558                           	opt stack 0
 11559                           pclatu	equ	0xFFB
 11560                           pclath	equ	0xFFA
 11561                           tblptru	equ	0xFF8
 11562                           tblptrh	equ	0xFF7
 11563                           tblptrl	equ	0xFF6
 11564                           tablat	equ	0xFF5
 11565                           prodh	equ	0xFF4
 11566                           prodl	equ	0xFF3
 11567                           intcon	equ	0xFF2
 11568                           intcon2	equ	0xFF1
 11569                           intcon3	equ	0xFF0
 11570                           indf0	equ	0xFEF
 11571                           postinc0	equ	0xFEE
 11572                           fsr0h	equ	0xFEA
 11573                           fsr0l	equ	0xFE9
 11574                           wreg	equ	0xFE8
 11575                           postdec1	equ	0xFE5
 11576                           fsr1h	equ	0xFE2
 11577                           fsr1l	equ	0xFE1
 11578                           indf2	equ	0xFDF
 11579                           postinc2	equ	0xFDE
 11580                           postdec2	equ	0xFDD
 11581                           fsr2h	equ	0xFDA
 11582                           fsr2l	equ	0xFD9
 11583                           status	equ	0xFD8
 11584                           
 11585 ;; *************** function _change_state_to_logs_33 *****************
 11586 ;; Defined at:
 11587 ;;		line 484 in file "UI.c"
 11588 ;; Parameters:    Size  Location     Type
 11589 ;;		None
 11590 ;; Auto vars:     Size  Location     Type
 11591 ;;		None
 11592 ;; Return value:  Size  Location     Type
 11593 ;;                  1    wreg      void 
 11594 ;; Registers used:
 11595 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11596 ;; Tracked objects:
 11597 ;;		On entry : 0/0
 11598 ;;		On exit  : 0/0
 11599 ;;		Unchanged: 0/0
 11600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11604 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11605 ;;Total ram usage:        0 bytes
 11606 ;; Hardware stack levels used:    1
 11607 ;; Hardware stack levels required when called:    3
 11608 ;; This function calls:
 11609 ;;		i2_lcdInst
 11610 ;;		i2_printf
 11611 ;; This function is called by:
 11612 ;;		_updateMenu
 11613 ;;		_inputHandler
 11614 ;; This function uses a non-reentrant model
 11615 ;;
 11616                           
 11617                           	psect	text53
 11618  002890                     __ptext53:
 11619                           	opt stack 0
 11620  002890                     _change_state_to_logs_33:
 11621                           	opt stack 18
 11622                           
 11623                           ;UI.c: 485: cur_state = 1033;
 11624                           
 11625                           ;incstack = 0
 11626  002890  0E04               	movlw	4
 11627  002892  0100               	movlb	0	; () banked
 11628  002894  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11629  002896  0E09               	movlw	9
 11630  002898  6FE7               	movwf	_cur_state& (0+255),b
 11631                           
 11632                           ; BSR set to: 0
 11633                           ;UI.c: 486: lcdInst(0b10000000);;
 11634  00289A  0E80               	movlw	128
 11635  00289C  ECE6  F015         	call	i2_lcdInst
 11636                           
 11637                           ;UI.c: 487: printf("LOG 3          <");
 11638  0028A0  0E31               	movlw	low STR_31
 11639  0028A2  6E0D               	movwf	i2printf@f,c
 11640  0028A4  0EFF               	movlw	high STR_31
 11641  0028A6  6E0E               	movwf	i2printf@f+1,c
 11642  0028A8  ECC0  F004         	call	i2_printf	;wreg free
 11643                           
 11644                           ;UI.c: 488: lcdInst(0b11000000);;
 11645  0028AC  0EC0               	movlw	192
 11646  0028AE  ECE6  F015         	call	i2_lcdInst
 11647                           
 11648                           ;UI.c: 489: printf("LOG 4           ");
 11649  0028B2  0E54               	movlw	low STR_33
 11650  0028B4  6E0D               	movwf	i2printf@f,c
 11651  0028B6  0EFE               	movlw	high STR_33
 11652  0028B8  6E0E               	movwf	i2printf@f+1,c
 11653  0028BA  ECC0  F004         	call	i2_printf	;wreg free
 11654  0028BE  0012               	return		;funcret
 11655  0028C0                     __end_of_change_state_to_logs_33:
 11656                           	opt stack 0
 11657                           pclatu	equ	0xFFB
 11658                           pclath	equ	0xFFA
 11659                           tblptru	equ	0xFF8
 11660                           tblptrh	equ	0xFF7
 11661                           tblptrl	equ	0xFF6
 11662                           tablat	equ	0xFF5
 11663                           prodh	equ	0xFF4
 11664                           prodl	equ	0xFF3
 11665                           intcon	equ	0xFF2
 11666                           intcon2	equ	0xFF1
 11667                           intcon3	equ	0xFF0
 11668                           indf0	equ	0xFEF
 11669                           postinc0	equ	0xFEE
 11670                           fsr0h	equ	0xFEA
 11671                           fsr0l	equ	0xFE9
 11672                           wreg	equ	0xFE8
 11673                           postdec1	equ	0xFE5
 11674                           fsr1h	equ	0xFE2
 11675                           fsr1l	equ	0xFE1
 11676                           indf2	equ	0xFDF
 11677                           postinc2	equ	0xFDE
 11678                           postdec2	equ	0xFDD
 11679                           fsr2h	equ	0xFDA
 11680                           fsr2l	equ	0xFD9
 11681                           status	equ	0xFD8
 11682                           
 11683 ;; *************** function _change_state_to_logs_23 *****************
 11684 ;; Defined at:
 11685 ;;		line 477 in file "UI.c"
 11686 ;; Parameters:    Size  Location     Type
 11687 ;;		None
 11688 ;; Auto vars:     Size  Location     Type
 11689 ;;		None
 11690 ;; Return value:  Size  Location     Type
 11691 ;;                  1    wreg      void 
 11692 ;; Registers used:
 11693 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11694 ;; Tracked objects:
 11695 ;;		On entry : 0/0
 11696 ;;		On exit  : 0/0
 11697 ;;		Unchanged: 0/0
 11698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11703 ;;Total ram usage:        0 bytes
 11704 ;; Hardware stack levels used:    1
 11705 ;; Hardware stack levels required when called:    3
 11706 ;; This function calls:
 11707 ;;		i2_lcdInst
 11708 ;;		i2_printf
 11709 ;; This function is called by:
 11710 ;;		_updateMenu
 11711 ;;		_inputHandler
 11712 ;; This function uses a non-reentrant model
 11713 ;;
 11714                           
 11715                           	psect	text54
 11716  00297E                     __ptext54:
 11717                           	opt stack 0
 11718  00297E                     _change_state_to_logs_23:
 11719                           	opt stack 18
 11720                           
 11721                           ;UI.c: 478: cur_state = 1023;
 11722                           
 11723                           ;incstack = 0
 11724  00297E  0E03               	movlw	3
 11725  002980  0100               	movlb	0	; () banked
 11726  002982  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11727  002984  69E7               	setf	_cur_state& (0+255),b
 11728                           
 11729                           ; BSR set to: 0
 11730                           ;UI.c: 479: lcdInst(0b10000000);;
 11731  002986  0E80               	movlw	128
 11732  002988  ECE6  F015         	call	i2_lcdInst
 11733                           
 11734                           ;UI.c: 480: printf("LOG 2           ");
 11735  00298C  0E32               	movlw	low STR_25
 11736  00298E  6E0D               	movwf	i2printf@f,c
 11737  002990  0EFE               	movlw	high STR_25
 11738  002992  6E0E               	movwf	i2printf@f+1,c
 11739  002994  ECC0  F004         	call	i2_printf	;wreg free
 11740                           
 11741                           ;UI.c: 481: lcdInst(0b11000000);;
 11742  002998  0EC0               	movlw	192
 11743  00299A  ECE6  F015         	call	i2_lcdInst
 11744                           
 11745                           ;UI.c: 482: printf("LOG 3          <");
 11746  00299E  0E31               	movlw	low STR_31
 11747  0029A0  6E0D               	movwf	i2printf@f,c
 11748  0029A2  0EFF               	movlw	high STR_31
 11749  0029A4  6E0E               	movwf	i2printf@f+1,c
 11750  0029A6  ECC0  F004         	call	i2_printf	;wreg free
 11751  0029AA  0012               	return		;funcret
 11752  0029AC                     __end_of_change_state_to_logs_23:
 11753                           	opt stack 0
 11754                           pclatu	equ	0xFFB
 11755                           pclath	equ	0xFFA
 11756                           tblptru	equ	0xFF8
 11757                           tblptrh	equ	0xFF7
 11758                           tblptrl	equ	0xFF6
 11759                           tablat	equ	0xFF5
 11760                           prodh	equ	0xFF4
 11761                           prodl	equ	0xFF3
 11762                           intcon	equ	0xFF2
 11763                           intcon2	equ	0xFF1
 11764                           intcon3	equ	0xFF0
 11765                           indf0	equ	0xFEF
 11766                           postinc0	equ	0xFEE
 11767                           fsr0h	equ	0xFEA
 11768                           fsr0l	equ	0xFE9
 11769                           wreg	equ	0xFE8
 11770                           postdec1	equ	0xFE5
 11771                           fsr1h	equ	0xFE2
 11772                           fsr1l	equ	0xFE1
 11773                           indf2	equ	0xFDF
 11774                           postinc2	equ	0xFDE
 11775                           postdec2	equ	0xFDD
 11776                           fsr2h	equ	0xFDA
 11777                           fsr2l	equ	0xFD9
 11778                           status	equ	0xFD8
 11779                           
 11780 ;; *************** function _change_state_to_logs_22 *****************
 11781 ;; Defined at:
 11782 ;;		line 470 in file "UI.c"
 11783 ;; Parameters:    Size  Location     Type
 11784 ;;		None
 11785 ;; Auto vars:     Size  Location     Type
 11786 ;;		None
 11787 ;; Return value:  Size  Location     Type
 11788 ;;                  1    wreg      void 
 11789 ;; Registers used:
 11790 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11791 ;; Tracked objects:
 11792 ;;		On entry : 0/0
 11793 ;;		On exit  : 0/0
 11794 ;;		Unchanged: 0/0
 11795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11799 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11800 ;;Total ram usage:        0 bytes
 11801 ;; Hardware stack levels used:    1
 11802 ;; Hardware stack levels required when called:    3
 11803 ;; This function calls:
 11804 ;;		i2_lcdInst
 11805 ;;		i2_printf
 11806 ;; This function is called by:
 11807 ;;		_updateMenu
 11808 ;;		_inputHandler
 11809 ;; This function uses a non-reentrant model
 11810 ;;
 11811                           
 11812                           	psect	text55
 11813  0028C0                     __ptext55:
 11814                           	opt stack 0
 11815  0028C0                     _change_state_to_logs_22:
 11816                           	opt stack 18
 11817                           
 11818                           ;UI.c: 471: cur_state = 1022;
 11819                           
 11820                           ;incstack = 0
 11821  0028C0  0E03               	movlw	3
 11822  0028C2  0100               	movlb	0	; () banked
 11823  0028C4  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11824  0028C6  0EFE               	movlw	254
 11825  0028C8  6FE7               	movwf	_cur_state& (0+255),b
 11826                           
 11827                           ; BSR set to: 0
 11828                           ;UI.c: 472: lcdInst(0b10000000);;
 11829  0028CA  0E80               	movlw	128
 11830  0028CC  ECE6  F015         	call	i2_lcdInst
 11831                           
 11832                           ;UI.c: 473: printf("LOG 2          <");
 11833  0028D0  0E20               	movlw	low STR_27
 11834  0028D2  6E0D               	movwf	i2printf@f,c
 11835  0028D4  0EFF               	movlw	high STR_27
 11836  0028D6  6E0E               	movwf	i2printf@f+1,c
 11837  0028D8  ECC0  F004         	call	i2_printf	;wreg free
 11838                           
 11839                           ;UI.c: 474: lcdInst(0b11000000);;
 11840  0028DC  0EC0               	movlw	192
 11841  0028DE  ECE6  F015         	call	i2_lcdInst
 11842                           
 11843                           ;UI.c: 475: printf("LOG 3           ");
 11844  0028E2  0E43               	movlw	low STR_29
 11845  0028E4  6E0D               	movwf	i2printf@f,c
 11846  0028E6  0EFE               	movlw	high STR_29
 11847  0028E8  6E0E               	movwf	i2printf@f+1,c
 11848  0028EA  ECC0  F004         	call	i2_printf	;wreg free
 11849  0028EE  0012               	return		;funcret
 11850  0028F0                     __end_of_change_state_to_logs_22:
 11851                           	opt stack 0
 11852                           pclatu	equ	0xFFB
 11853                           pclath	equ	0xFFA
 11854                           tblptru	equ	0xFF8
 11855                           tblptrh	equ	0xFF7
 11856                           tblptrl	equ	0xFF6
 11857                           tablat	equ	0xFF5
 11858                           prodh	equ	0xFF4
 11859                           prodl	equ	0xFF3
 11860                           intcon	equ	0xFF2
 11861                           intcon2	equ	0xFF1
 11862                           intcon3	equ	0xFF0
 11863                           indf0	equ	0xFEF
 11864                           postinc0	equ	0xFEE
 11865                           fsr0h	equ	0xFEA
 11866                           fsr0l	equ	0xFE9
 11867                           wreg	equ	0xFE8
 11868                           postdec1	equ	0xFE5
 11869                           fsr1h	equ	0xFE2
 11870                           fsr1l	equ	0xFE1
 11871                           indf2	equ	0xFDF
 11872                           postinc2	equ	0xFDE
 11873                           postdec2	equ	0xFDD
 11874                           fsr2h	equ	0xFDA
 11875                           fsr2l	equ	0xFD9
 11876                           status	equ	0xFD8
 11877                           
 11878 ;; *************** function _change_state_to_logs_12 *****************
 11879 ;; Defined at:
 11880 ;;		line 463 in file "UI.c"
 11881 ;; Parameters:    Size  Location     Type
 11882 ;;		None
 11883 ;; Auto vars:     Size  Location     Type
 11884 ;;		None
 11885 ;; Return value:  Size  Location     Type
 11886 ;;                  1    wreg      void 
 11887 ;; Registers used:
 11888 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11889 ;; Tracked objects:
 11890 ;;		On entry : 0/0
 11891 ;;		On exit  : 0/0
 11892 ;;		Unchanged: 0/0
 11893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11898 ;;Total ram usage:        0 bytes
 11899 ;; Hardware stack levels used:    1
 11900 ;; Hardware stack levels required when called:    3
 11901 ;; This function calls:
 11902 ;;		i2_lcdInst
 11903 ;;		i2_printf
 11904 ;; This function is called by:
 11905 ;;		_updateMenu
 11906 ;;		_inputHandler
 11907 ;; This function uses a non-reentrant model
 11908 ;;
 11909                           
 11910                           	psect	text56
 11911  0028F0                     __ptext56:
 11912                           	opt stack 0
 11913  0028F0                     _change_state_to_logs_12:
 11914                           	opt stack 18
 11915                           
 11916                           ;UI.c: 464: cur_state = 1012;
 11917                           
 11918                           ;incstack = 0
 11919  0028F0  0E03               	movlw	3
 11920  0028F2  0100               	movlb	0	; () banked
 11921  0028F4  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11922  0028F6  0EF4               	movlw	244
 11923  0028F8  6FE7               	movwf	_cur_state& (0+255),b
 11924                           
 11925                           ; BSR set to: 0
 11926                           ;UI.c: 465: lcdInst(0b10000000);;
 11927  0028FA  0E80               	movlw	128
 11928  0028FC  ECE6  F015         	call	i2_lcdInst
 11929                           
 11930                           ;UI.c: 466: printf("LOG 1           ");
 11931  002900  0E21               	movlw	low STR_26
 11932  002902  6E0D               	movwf	i2printf@f,c
 11933  002904  0EFE               	movlw	high STR_26
 11934  002906  6E0E               	movwf	i2printf@f+1,c
 11935  002908  ECC0  F004         	call	i2_printf	;wreg free
 11936                           
 11937                           ;UI.c: 467: lcdInst(0b11000000);;
 11938  00290C  0EC0               	movlw	192
 11939  00290E  ECE6  F015         	call	i2_lcdInst
 11940                           
 11941                           ;UI.c: 468: printf("LOG 2          <");
 11942  002912  0E20               	movlw	low STR_27
 11943  002914  6E0D               	movwf	i2printf@f,c
 11944  002916  0EFF               	movlw	high STR_27
 11945  002918  6E0E               	movwf	i2printf@f+1,c
 11946  00291A  ECC0  F004         	call	i2_printf	;wreg free
 11947  00291E  0012               	return		;funcret
 11948  002920                     __end_of_change_state_to_logs_12:
 11949                           	opt stack 0
 11950                           pclatu	equ	0xFFB
 11951                           pclath	equ	0xFFA
 11952                           tblptru	equ	0xFF8
 11953                           tblptrh	equ	0xFF7
 11954                           tblptrl	equ	0xFF6
 11955                           tablat	equ	0xFF5
 11956                           prodh	equ	0xFF4
 11957                           prodl	equ	0xFF3
 11958                           intcon	equ	0xFF2
 11959                           intcon2	equ	0xFF1
 11960                           intcon3	equ	0xFF0
 11961                           indf0	equ	0xFEF
 11962                           postinc0	equ	0xFEE
 11963                           fsr0h	equ	0xFEA
 11964                           fsr0l	equ	0xFE9
 11965                           wreg	equ	0xFE8
 11966                           postdec1	equ	0xFE5
 11967                           fsr1h	equ	0xFE2
 11968                           fsr1l	equ	0xFE1
 11969                           indf2	equ	0xFDF
 11970                           postinc2	equ	0xFDE
 11971                           postdec2	equ	0xFDD
 11972                           fsr2h	equ	0xFDA
 11973                           fsr2l	equ	0xFD9
 11974                           status	equ	0xFD8
 11975                           
 11976 ;; *************** function _change_state_to_logs_11 *****************
 11977 ;; Defined at:
 11978 ;;		line 456 in file "UI.c"
 11979 ;; Parameters:    Size  Location     Type
 11980 ;;		None
 11981 ;; Auto vars:     Size  Location     Type
 11982 ;;		None
 11983 ;; Return value:  Size  Location     Type
 11984 ;;                  1    wreg      void 
 11985 ;; Registers used:
 11986 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11987 ;; Tracked objects:
 11988 ;;		On entry : 0/0
 11989 ;;		On exit  : 0/0
 11990 ;;		Unchanged: 0/0
 11991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11996 ;;Total ram usage:        0 bytes
 11997 ;; Hardware stack levels used:    1
 11998 ;; Hardware stack levels required when called:    3
 11999 ;; This function calls:
 12000 ;;		i2_lcdInst
 12001 ;;		i2_printf
 12002 ;; This function is called by:
 12003 ;;		_updateMenu
 12004 ;;		_inputHandler
 12005 ;; This function uses a non-reentrant model
 12006 ;;
 12007                           
 12008                           	psect	text57
 12009  002920                     __ptext57:
 12010                           	opt stack 0
 12011  002920                     _change_state_to_logs_11:
 12012                           	opt stack 18
 12013                           
 12014                           ;UI.c: 457: cur_state = 1011;
 12015                           
 12016                           ;incstack = 0
 12017  002920  0E03               	movlw	3
 12018  002922  0100               	movlb	0	; () banked
 12019  002924  6FE8               	movwf	(_cur_state+1)& (0+255),b
 12020  002926  0EF3               	movlw	243
 12021  002928  6FE7               	movwf	_cur_state& (0+255),b
 12022                           
 12023                           ; BSR set to: 0
 12024                           ;UI.c: 458: lcdInst(0b10000000);;
 12025  00292A  0E80               	movlw	128
 12026  00292C  ECE6  F015         	call	i2_lcdInst
 12027                           
 12028                           ;UI.c: 459: printf("LOG 1          <");
 12029  002930  0E0F               	movlw	low STR_24
 12030  002932  6E0D               	movwf	i2printf@f,c
 12031  002934  0EFF               	movlw	high STR_24
 12032  002936  6E0E               	movwf	i2printf@f+1,c
 12033  002938  ECC0  F004         	call	i2_printf	;wreg free
 12034                           
 12035                           ;UI.c: 460: lcdInst(0b11000000);;
 12036  00293C  0EC0               	movlw	192
 12037  00293E  ECE6  F015         	call	i2_lcdInst
 12038                           
 12039                           ;UI.c: 461: printf("LOG 2           ");
 12040  002942  0E32               	movlw	low STR_25
 12041  002944  6E0D               	movwf	i2printf@f,c
 12042  002946  0EFE               	movlw	high STR_25
 12043  002948  6E0E               	movwf	i2printf@f+1,c
 12044  00294A  ECC0  F004         	call	i2_printf	;wreg free
 12045  00294E  0012               	return		;funcret
 12046  002950                     __end_of_change_state_to_logs_11:
 12047                           	opt stack 0
 12048                           pclatu	equ	0xFFB
 12049                           pclath	equ	0xFFA
 12050                           tblptru	equ	0xFF8
 12051                           tblptrh	equ	0xFF7
 12052                           tblptrl	equ	0xFF6
 12053                           tablat	equ	0xFF5
 12054                           prodh	equ	0xFF4
 12055                           prodl	equ	0xFF3
 12056                           intcon	equ	0xFF2
 12057                           intcon2	equ	0xFF1
 12058                           intcon3	equ	0xFF0
 12059                           indf0	equ	0xFEF
 12060                           postinc0	equ	0xFEE
 12061                           fsr0h	equ	0xFEA
 12062                           fsr0l	equ	0xFE9
 12063                           wreg	equ	0xFE8
 12064                           postdec1	equ	0xFE5
 12065                           fsr1h	equ	0xFE2
 12066                           fsr1l	equ	0xFE1
 12067                           indf2	equ	0xFDF
 12068                           postinc2	equ	0xFDE
 12069                           postdec2	equ	0xFDD
 12070                           fsr2h	equ	0xFDA
 12071                           fsr2l	equ	0xFD9
 12072                           status	equ	0xFD8
 12073                           
 12074 ;; *************** function _dispLogs *****************
 12075 ;; Defined at:
 12076 ;;		line 410 in file "UI.c"
 12077 ;; Parameters:    Size  Location     Type
 12078 ;;  myLog           2    0[COMRAM] int 
 12079 ;; Auto vars:     Size  Location     Type
 12080 ;;		None
 12081 ;; Return value:  Size  Location     Type
 12082 ;;                  1    wreg      void 
 12083 ;; Registers used:
 12084 ;;		wreg, status,2
 12085 ;; Tracked objects:
 12086 ;;		On entry : 0/0
 12087 ;;		On exit  : 0/0
 12088 ;;		Unchanged: 0/0
 12089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12090 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12093 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12094 ;;Total ram usage:        2 bytes
 12095 ;; Hardware stack levels used:    1
 12096 ;; This function calls:
 12097 ;;		Nothing
 12098 ;; This function is called by:
 12099 ;;		_updateMenu
 12100 ;; This function uses a non-reentrant model
 12101 ;;
 12102                           
 12103                           	psect	text58
 12104  002B68                     __ptext58:
 12105                           	opt stack 0
 12106  002B68                     _dispLogs:
 12107                           	opt stack 22
 12108                           
 12109                           ;UI.c: 411: logstate = 1;
 12110                           
 12111                           ;incstack = 0
 12112  002B68  0E00               	movlw	0
 12113  002B6A  0100               	movlb	0	; () banked
 12114  002B6C  6FF4               	movwf	(_logstate+1)& (0+255),b
 12115  002B6E  0E01               	movlw	1
 12116  002B70  6FF3               	movwf	_logstate& (0+255),b
 12117                           
 12118                           ; BSR set to: 0
 12119                           ;UI.c: 412: log = myLog;
 12120  002B72  C001  F0F1         	movff	dispLogs@myLog,_log
 12121  002B76  C002  F0F2         	movff	dispLogs@myLog+1,_log+1
 12122                           
 12123                           ; BSR set to: 0
 12124  002B7A  0012               	return		;funcret
 12125  002B7C                     __end_of_dispLogs:
 12126                           	opt stack 0
 12127                           pclatu	equ	0xFFB
 12128                           pclath	equ	0xFFA
 12129                           tblptru	equ	0xFF8
 12130                           tblptrh	equ	0xFF7
 12131                           tblptrl	equ	0xFF6
 12132                           tablat	equ	0xFF5
 12133                           prodh	equ	0xFF4
 12134                           prodl	equ	0xFF3
 12135                           intcon	equ	0xFF2
 12136                           intcon2	equ	0xFF1
 12137                           intcon3	equ	0xFF0
 12138                           indf0	equ	0xFEF
 12139                           postinc0	equ	0xFEE
 12140                           fsr0h	equ	0xFEA
 12141                           fsr0l	equ	0xFE9
 12142                           wreg	equ	0xFE8
 12143                           postdec1	equ	0xFE5
 12144                           fsr1h	equ	0xFE2
 12145                           fsr1l	equ	0xFE1
 12146                           indf2	equ	0xFDF
 12147                           postinc2	equ	0xFDE
 12148                           postdec2	equ	0xFDD
 12149                           fsr2h	equ	0xFDA
 12150                           fsr2l	equ	0xFD9
 12151                           status	equ	0xFD8
 12152                           
 12153 ;; *************** function _printSortTimer *****************
 12154 ;; Defined at:
 12155 ;;		line 154 in file "sort.c"
 12156 ;; Parameters:    Size  Location     Type
 12157 ;;		None
 12158 ;; Auto vars:     Size  Location     Type
 12159 ;;  i               2   72[COMRAM] int 
 12160 ;;  curTime        14   44[COMRAM] int [7]
 12161 ;;  timeDiff        2   70[COMRAM] unsigned int 
 12162 ;;  sec             2   66[COMRAM] int 
 12163 ;;  min             2   64[COMRAM] int 
 12164 ;;  hour            2   62[COMRAM] int 
 12165 ;;  cur_sec         2   60[COMRAM] unsigned int 
 12166 ;;  start_sec       2   58[COMRAM] unsigned int 
 12167 ;; Return value:  Size  Location     Type
 12168 ;;                  1    wreg      void 
 12169 ;; Registers used:
 12170 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12171 ;; Tracked objects:
 12172 ;;		On entry : 0/0
 12173 ;;		On exit  : 0/0
 12174 ;;		Unchanged: 0/0
 12175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12177 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12178 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12179 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12180 ;;Total ram usage:       33 bytes
 12181 ;; Hardware stack levels used:    1
 12182 ;; Hardware stack levels required when called:    3
 12183 ;; This function calls:
 12184 ;;		i2___lwdiv
 12185 ;;		i2___lwmod
 12186 ;;		i2___wmul
 12187 ;;		i2_getRTC
 12188 ;;		i2_lcdInst
 12189 ;;		i2_printf
 12190 ;; This function is called by:
 12191 ;;		_handler
 12192 ;; This function uses a non-reentrant model
 12193 ;;
 12194                           
 12195                           	psect	text59
 12196  0016C0                     __ptext59:
 12197                           	opt stack 0
 12198  0016C0                     _printSortTimer:
 12199                           	opt stack 20
 12200                           
 12201                           ;sort.c: 155: getRTC();
 12202                           
 12203                           ; BSR set to: 0
 12204                           ;incstack = 0
 12205  0016C0  EC52  F011         	call	i2_getRTC	;wreg free
 12206                           
 12207                           ;sort.c: 156: int curTime[7];
 12208                           ;sort.c: 157: for(int i = 0; i < 7; i++){
 12209  0016C4  0E00               	movlw	0
 12210  0016C6  6E4A               	movwf	printSortTimer@i+1,c
 12211  0016C8  0E00               	movlw	0
 12212  0016CA  6E49               	movwf	printSortTimer@i,c
 12213  0016CC                     i2l5878:
 12214  0016CC  BE4A               	btfsc	printSortTimer@i+1,7,c
 12215  0016CE  D006               	goto	i2l5882
 12216  0016D0  504A               	movf	printSortTimer@i+1,w,c
 12217  0016D2  E131               	bnz	i2l5888
 12218  0016D4  0E07               	movlw	7
 12219  0016D6  5C49               	subwf	printSortTimer@i,w,c
 12220  0016D8  B0D8               	btfsc	status,0,c
 12221  0016DA  D02D               	goto	i2l5888
 12222  0016DC                     i2l5882:
 12223                           
 12224                           ;sort.c: 158: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 12225  0016DC  0EDC               	movlw	low _time
 12226  0016DE  2449               	addwf	printSortTimer@i,w,c
 12227  0016E0  6ED9               	movwf	fsr2l,c
 12228  0016E2  0E00               	movlw	high _time
 12229  0016E4  204A               	addwfc	printSortTimer@i+1,w,c
 12230  0016E6  6EDA               	movwf	fsr2h,c
 12231  0016E8  50DF               	movf	indf2,w,c
 12232  0016EA  6E2A               	movwf	??_printSortTimer& (0+255),c
 12233  0016EC  3A2A               	swapf	??_printSortTimer,f,c
 12234  0016EE  0E0F               	movlw	15
 12235  0016F0  162A               	andwf	??_printSortTimer,f,c
 12236  0016F2  0E0F               	movlw	15
 12237  0016F4  162A               	andwf	??_printSortTimer,f,c
 12238  0016F6  502A               	movf	??_printSortTimer,w,c
 12239  0016F8  0D0A               	mullw	10
 12240  0016FA  0EDC               	movlw	low _time
 12241  0016FC  2449               	addwf	printSortTimer@i,w,c
 12242  0016FE  6ED9               	movwf	fsr2l,c
 12243  001700  0E00               	movlw	high _time
 12244  001702  204A               	addwfc	printSortTimer@i+1,w,c
 12245  001704  6EDA               	movwf	fsr2h,c
 12246  001706  50DF               	movf	indf2,w,c
 12247  001708  0B0F               	andlw	15
 12248  00170A  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 12249  00170C  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 12250  00170E  50F3               	movf	prodl,w,c
 12251  001710  262B               	addwf	??_printSortTimer+1,f,c
 12252  001712  50F4               	movf	prodh,w,c
 12253  001714  222C               	addwfc	??_printSortTimer+2,f,c
 12254  001716  90D8               	bcf	status,0,c
 12255  001718  3449               	rlcf	printSortTimer@i,w,c
 12256  00171A  6ED9               	movwf	fsr2l,c
 12257  00171C  344A               	rlcf	printSortTimer@i+1,w,c
 12258  00171E  6EDA               	movwf	fsr2h,c
 12259  001720  0E2D               	movlw	low printSortTimer@curTime
 12260  001722  26D9               	addwf	fsr2l,f,c
 12261  001724  0E00               	movlw	high printSortTimer@curTime
 12262  001726  22DA               	addwfc	fsr2h,f,c
 12263  001728  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 12264  00172C  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 12265  001730  4A49               	infsnz	printSortTimer@i,f,c
 12266  001732  2A4A               	incf	printSortTimer@i+1,f,c
 12267  001734  D7CB               	goto	i2l5878
 12268  001736                     i2l5888:
 12269                           
 12270                           ;sort.c: 159: }
 12271                           ;sort.c: 160: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 12272  001736  C102  F001         	movff	_startTime+2,i2___wmul@multiplier
 12273  00173A  C103  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 12274  00173E  0E00               	movlw	0
 12275  001740  6E04               	movwf	i2___wmul@multiplicand+1,c
 12276  001742  0E3C               	movlw	60
 12277  001744  6E03               	movwf	i2___wmul@multiplicand,c
 12278  001746  EC2B  F015         	call	i2___wmul	;wreg free
 12279  00174A  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 12280  00174E  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 12281  001752  C104  F001         	movff	_startTime+4,i2___wmul@multiplier
 12282  001756  C105  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 12283  00175A  0E0E               	movlw	14
 12284  00175C  6E04               	movwf	i2___wmul@multiplicand+1,c
 12285  00175E  0E10               	movlw	16
 12286  001760  6E03               	movwf	i2___wmul@multiplicand,c
 12287  001762  EC2B  F015         	call	i2___wmul	;wreg free
 12288  001766  5001               	movf	?i2___wmul,w,c
 12289  001768  262A               	addwf	??_printSortTimer,f,c
 12290  00176A  5002               	movf	?i2___wmul+1,w,c
 12291  00176C  222B               	addwfc	??_printSortTimer+1,f,c
 12292  00176E  0101               	movlb	1	; () banked
 12293  001770  5100               	movf	_startTime& (0+255),w,b
 12294  001772  242A               	addwf	??_printSortTimer,w,c
 12295  001774  6E3B               	movwf	printSortTimer@start_sec,c
 12296  001776  0101               	movlb	1	; () banked
 12297  001778  5101               	movf	(_startTime+1)& (0+255),w,b
 12298  00177A  202B               	addwfc	??_printSortTimer+1,w,c
 12299  00177C  6E3C               	movwf	printSortTimer@start_sec+1,c
 12300                           
 12301                           ;sort.c: 161: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 12302  00177E  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 12303  001782  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 12304  001786  0E00               	movlw	0
 12305  001788  6E04               	movwf	i2___wmul@multiplicand+1,c
 12306  00178A  0E3C               	movlw	60
 12307  00178C  6E03               	movwf	i2___wmul@multiplicand,c
 12308  00178E  EC2B  F015         	call	i2___wmul	;wreg free
 12309  001792  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 12310  001796  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 12311  00179A  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 12312  00179E  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 12313  0017A2  0E0E               	movlw	14
 12314  0017A4  6E04               	movwf	i2___wmul@multiplicand+1,c
 12315  0017A6  0E10               	movlw	16
 12316  0017A8  6E03               	movwf	i2___wmul@multiplicand,c
 12317  0017AA  EC2B  F015         	call	i2___wmul	;wreg free
 12318  0017AE  5001               	movf	?i2___wmul,w,c
 12319  0017B0  262A               	addwf	??_printSortTimer,f,c
 12320  0017B2  5002               	movf	?i2___wmul+1,w,c
 12321  0017B4  222B               	addwfc	??_printSortTimer+1,f,c
 12322  0017B6  502D               	movf	printSortTimer@curTime,w,c
 12323  0017B8  242A               	addwf	??_printSortTimer,w,c
 12324  0017BA  6E3D               	movwf	printSortTimer@cur_sec,c
 12325  0017BC  502E               	movf	printSortTimer@curTime+1,w,c
 12326  0017BE  202B               	addwfc	??_printSortTimer+1,w,c
 12327  0017C0  6E3E               	movwf	printSortTimer@cur_sec+1,c
 12328                           
 12329                           ;sort.c: 162: unsigned int timeDiff = cur_sec - start_sec;
 12330  0017C2  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 12331  0017C6  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 12332  0017CA  1E2A               	comf	??_printSortTimer,f,c
 12333  0017CC  1E2B               	comf	??_printSortTimer+1,f,c
 12334  0017CE  4A2A               	infsnz	??_printSortTimer,f,c
 12335  0017D0  2A2B               	incf	??_printSortTimer+1,f,c
 12336  0017D2  503D               	movf	printSortTimer@cur_sec,w,c
 12337  0017D4  242A               	addwf	??_printSortTimer,w,c
 12338  0017D6  6E47               	movwf	printSortTimer@timeDiff,c
 12339  0017D8  503E               	movf	printSortTimer@cur_sec+1,w,c
 12340  0017DA  202B               	addwfc	??_printSortTimer+1,w,c
 12341  0017DC  6E48               	movwf	printSortTimer@timeDiff+1,c
 12342                           
 12343                           ;sort.c: 164: total_time = timeDiff;
 12344  0017DE  C047  F0F5         	movff	printSortTimer@timeDiff,_total_time
 12345  0017E2  C048  F0F6         	movff	printSortTimer@timeDiff+1,_total_time+1
 12346                           
 12347                           ;sort.c: 166: if(timeDiff >= 10){
 12348  0017E6  5048               	movf	printSortTimer@timeDiff+1,w,c
 12349  0017E8  E104               	bnz	i2u490_40
 12350  0017EA  0E0A               	movlw	10
 12351  0017EC  5C47               	subwf	printSortTimer@timeDiff,w,c
 12352  0017EE  A0D8               	btfss	status,0,c
 12353  0017F0  D003               	goto	i2l5898
 12354  0017F2                     i2u490_40:
 12355                           
 12356                           ;sort.c: 167: machine_state = DoneSorting_state;
 12357  0017F2  0E02               	movlw	2
 12358  0017F4  0100               	movlb	0	; () banked
 12359  0017F6  6FF7               	movwf	_machine_state& (0+255),b
 12360  0017F8                     i2l5898:
 12361                           
 12362                           ;sort.c: 169: }
 12363                           ;sort.c: 171: int hour = timeDiff / 3600;
 12364  0017F8  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 12365  0017FC  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 12366  001800  0E0E               	movlw	14
 12367  001802  6E09               	movwf	i2___lwdiv@divisor+1,c
 12368  001804  0E10               	movlw	16
 12369  001806  6E08               	movwf	i2___lwdiv@divisor,c
 12370  001808  ECA3  F012         	call	i2___lwdiv	;wreg free
 12371  00180C  C006  F03F         	movff	?i2___lwdiv,printSortTimer@hour
 12372  001810  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 12373                           
 12374                           ;sort.c: 172: int min = (timeDiff % 3600) / 60;
 12375  001814  0E0E               	movlw	14
 12376  001816  6E04               	movwf	i2___lwmod@divisor+1,c
 12377  001818  0E10               	movlw	16
 12378  00181A  6E03               	movwf	i2___lwmod@divisor,c
 12379  00181C  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 12380  001820  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 12381  001824  ECEF  F012         	call	i2___lwmod	;wreg free
 12382  001828  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 12383  00182C  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 12384  001830  0E00               	movlw	0
 12385  001832  6E09               	movwf	i2___lwdiv@divisor+1,c
 12386  001834  0E3C               	movlw	60
 12387  001836  6E08               	movwf	i2___lwdiv@divisor,c
 12388  001838  ECA3  F012         	call	i2___lwdiv	;wreg free
 12389  00183C  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 12390  001840  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 12391                           
 12392                           ;sort.c: 173: int sec = (timeDiff % 3600) % 60;
 12393  001844  0E0E               	movlw	14
 12394  001846  6E04               	movwf	i2___lwmod@divisor+1,c
 12395  001848  0E10               	movlw	16
 12396  00184A  6E03               	movwf	i2___lwmod@divisor,c
 12397  00184C  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 12398  001850  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 12399  001854  ECEF  F012         	call	i2___lwmod	;wreg free
 12400  001858  C001  F045         	movff	?i2___lwmod,_printSortTimer$2125
 12401  00185C  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2125+1
 12402                           
 12403                           ;sort.c: 173: int sec = (timeDiff % 3600) % 60;
 12404  001860  C045  F001         	movff	_printSortTimer$2125,i2___lwmod@dividend
 12405  001864  C046  F002         	movff	_printSortTimer$2125+1,i2___lwmod@dividend+1
 12406  001868  0E00               	movlw	0
 12407  00186A  6E04               	movwf	i2___lwmod@divisor+1,c
 12408  00186C  0E3C               	movlw	60
 12409  00186E  6E03               	movwf	i2___lwmod@divisor,c
 12410  001870  ECEF  F012         	call	i2___lwmod	;wreg free
 12411  001874  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 12412  001878  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 12413                           
 12414                           ;sort.c: 175: lcdInst(0b10000000);;
 12415  00187C  0E80               	movlw	128
 12416  00187E  ECE6  F015         	call	i2_lcdInst
 12417                           
 12418                           ;sort.c: 176: printf("Sorting...");
 12419  001882  0EA8               	movlw	low STR_49
 12420  001884  6E0D               	movwf	i2printf@f,c
 12421  001886  0EFF               	movlw	high STR_49
 12422  001888  6E0E               	movwf	i2printf@f+1,c
 12423  00188A  ECC0  F004         	call	i2_printf	;wreg free
 12424                           
 12425                           ;sort.c: 177: lcdInst(0b11000000);;
 12426  00188E  0EC0               	movlw	192
 12427  001890  ECE6  F015         	call	i2_lcdInst
 12428                           
 12429                           ;sort.c: 178: printf("Time: %02d:%02d:%02d", hour, min, sec);
 12430  001894  0EE8               	movlw	low STR_2
 12431  001896  6E0D               	movwf	i2printf@f,c
 12432  001898  0EFD               	movlw	high STR_2
 12433  00189A  6E0E               	movwf	i2printf@f+1,c
 12434  00189C  C03F  F00F         	movff	printSortTimer@hour,?i2_printf+2
 12435  0018A0  C040  F010         	movff	printSortTimer@hour+1,?i2_printf+3
 12436  0018A4  C041  F011         	movff	printSortTimer@min,?i2_printf+4
 12437  0018A8  C042  F012         	movff	printSortTimer@min+1,?i2_printf+5
 12438  0018AC  C043  F013         	movff	printSortTimer@sec,?i2_printf+6
 12439  0018B0  C044  F014         	movff	printSortTimer@sec+1,?i2_printf+7
 12440  0018B4  ECC0  F004         	call	i2_printf	;wreg free
 12441  0018B8  0012               	return		;funcret
 12442  0018BA                     __end_of_printSortTimer:
 12443                           	opt stack 0
 12444                           pclatu	equ	0xFFB
 12445                           pclath	equ	0xFFA
 12446                           tblptru	equ	0xFF8
 12447                           tblptrh	equ	0xFF7
 12448                           tblptrl	equ	0xFF6
 12449                           tablat	equ	0xFF5
 12450                           prodh	equ	0xFF4
 12451                           prodl	equ	0xFF3
 12452                           intcon	equ	0xFF2
 12453                           intcon2	equ	0xFF1
 12454                           intcon3	equ	0xFF0
 12455                           indf0	equ	0xFEF
 12456                           postinc0	equ	0xFEE
 12457                           fsr0h	equ	0xFEA
 12458                           fsr0l	equ	0xFE9
 12459                           wreg	equ	0xFE8
 12460                           postdec1	equ	0xFE5
 12461                           fsr1h	equ	0xFE2
 12462                           fsr1l	equ	0xFE1
 12463                           indf2	equ	0xFDF
 12464                           postinc2	equ	0xFDE
 12465                           postdec2	equ	0xFDD
 12466                           fsr2h	equ	0xFDA
 12467                           fsr2l	equ	0xFD9
 12468                           status	equ	0xFD8
 12469                           
 12470 ;; *************** function i2_printf *****************
 12471 ;; Defined at:
 12472 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12473 ;; Parameters:    Size  Location     Type
 12474 ;;  f               2   12[COMRAM] PTR const unsigned char 
 12475 ;;		 -> STR_50(21), STR_49(11), STR_48(24), STR_35(17), 
 12476 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 12477 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
 12478 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
 12479 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
 12480 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
 12481 ;;		 -> STR_14(3), STR_13(17), STR_12(17), STR_11(17), 
 12482 ;;		 -> STR_10(17), STR_9(17), STR_8(18), STR_7(10), 
 12483 ;;		 -> STR_6(17), STR_5(7), STR_4(17), STR_3(18), 
 12484 ;;		 -> STR_2(21), STR_1(17), 
 12485 ;; Auto vars:     Size  Location     Type
 12486 ;;  printf          4    0        struct .
 12487 ;;  printf          2   39[COMRAM] int 
 12488 ;;  printf          2   35[COMRAM] unsigned int 
 12489 ;;  printf          2   33[COMRAM] unsigned int 
 12490 ;;  printf          2   31[COMRAM] PTR const unsigned char 
 12491 ;;		 -> STR_51(7), printRTC@month(4), 
 12492 ;;  printf          2   29[COMRAM] PTR void [1]
 12493 ;;		 -> ?i2_printf(2), ?_printf(2), 
 12494 ;;  printf          1   38[COMRAM] char 
 12495 ;;  printf          1   37[COMRAM] unsigned char 
 12496 ;;  printf          1   28[COMRAM] char 
 12497 ;; Return value:  Size  Location     Type
 12498 ;;                  2   12[COMRAM] int 
 12499 ;; Registers used:
 12500 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12501 ;; Tracked objects:
 12502 ;;		On entry : 0/0
 12503 ;;		On exit  : 0/0
 12504 ;;		Unchanged: 0/0
 12505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12506 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12507 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12508 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12509 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12510 ;;Total ram usage:       29 bytes
 12511 ;; Hardware stack levels used:    1
 12512 ;; Hardware stack levels required when called:    2
 12513 ;; This function calls:
 12514 ;;		i2___lwdiv
 12515 ;;		i2___lwmod
 12516 ;;		i2___wmul
 12517 ;;		i2_isdigit
 12518 ;;		i2_putch
 12519 ;; This function is called by:
 12520 ;;		_change_state_to_menu_11
 12521 ;;		_change_state_to_menu_23
 12522 ;;		_change_state_to_logs_11
 12523 ;;		_change_state_to_logs_12
 12524 ;;		_change_state_to_logs_22
 12525 ;;		_change_state_to_logs_23
 12526 ;;		_change_state_to_logs_33
 12527 ;;		_change_state_to_logs_34
 12528 ;;		_printSortTimer
 12529 ;;		i2_change_state_to_menu_start
 12530 ;;		i2_change_state_to_menu_12
 12531 ;;		i2_change_state_to_menu_22
 12532 ;;		i2_printRTC
 12533 ;; This function uses a non-reentrant model
 12534 ;;
 12535                           
 12536                           	psect	text60
 12537  000980                     __ptext60:
 12538                           	opt stack 0
 12539  000980                     i2_printf:
 12540                           	opt stack 19
 12541                           
 12542                           ;doprnt.c: 466: va_list ap;
 12543                           ;doprnt.c: 499: signed char c;
 12544                           ;doprnt.c: 501: int width;
 12545                           ;doprnt.c: 506: signed char prec;
 12546                           ;doprnt.c: 508: unsigned char flag;
 12547                           ;doprnt.c: 523: union {
 12548                           ;doprnt.c: 524: unsigned long vd;
 12549                           ;doprnt.c: 525: double integ;
 12550                           ;doprnt.c: 526: } tmpval;
 12551                           ;doprnt.c: 528: unsigned int val;
 12552                           ;doprnt.c: 529: unsigned len;
 12553                           ;doprnt.c: 530: const char * cp;
 12554                           ;doprnt.c: 533: *ap = __va_start();
 12555                           
 12556                           ;incstack = 0
 12557  000980  0E0F               	movlw	low (?i2_printf+2)
 12558  000982  6E1E               	movwf	i2printf@ap,c
 12559  000984  0E00               	movlw	high (?i2_printf+2)
 12560  000986  6E1F               	movwf	i2printf@ap+1,c
 12561                           
 12562                           ;doprnt.c: 536: while(c = *f++) {
 12563  000988  D190               	goto	i2l4638
 12564  00098A                     i2l4514:
 12565                           
 12566                           ;doprnt.c: 538: if(c != '%')
 12567  00098A  0E25               	movlw	37
 12568  00098C  1827               	xorwf	i2printf@c,w,c
 12569  00098E  B4D8               	btfsc	status,2,c
 12570  000990  D004               	goto	i2l4518
 12571                           
 12572                           ;doprnt.c: 540: {
 12573                           ;doprnt.c: 541: (putch(c) );
 12574  000992  5027               	movf	i2printf@c,w,c
 12575  000994  ECE0  F015         	call	i2_putch
 12576                           
 12577                           ;doprnt.c: 542: continue;
 12578  000998  D188               	goto	i2l4638
 12579  00099A                     i2l4518:
 12580                           
 12581                           ;doprnt.c: 543: }
 12582                           ;doprnt.c: 546: width = 0;
 12583  00099A  0E00               	movlw	0
 12584  00099C  6E29               	movwf	i2printf@width+1,c
 12585  00099E  0E00               	movlw	0
 12586  0009A0  6E28               	movwf	i2printf@width,c
 12587                           
 12588                           ;doprnt.c: 548: flag = 0;
 12589  0009A2  0E00               	movlw	0
 12590  0009A4  6E26               	movwf	i2printf@flag,c
 12591                           
 12592                           ;doprnt.c: 551: switch(*f) {
 12593                           
 12594                           ;doprnt.c: 550: for(;;) {
 12595  0009A6  D003               	goto	i2l4524
 12596  0009A8                     i2l4520:
 12597                           
 12598                           ;doprnt.c: 580: flag |= 0x04;
 12599  0009A8  8426               	bsf	i2printf@flag,2,c
 12600                           
 12601                           ;doprnt.c: 581: f++;
 12602  0009AA  4A0D               	infsnz	i2printf@f,f,c
 12603  0009AC  2A0E               	incf	i2printf@f+1,f,c
 12604  0009AE                     i2l4524:
 12605  0009AE  C00D  FFF6         	movff	i2printf@f,tblptrl
 12606  0009B2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12607  0009B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12608  0009B6  6AF8               	clrf	tblptru,c
 12609  0009B8                     	endif
 12610  0009B8                     	if	0	;tblptru may be non-zero
 12611  0009B8                     	endif
 12612  0009B8  0008               	tblrd		*
 12613  0009BA  50F5               	movf	tablat,w,c
 12614                           
 12615                           ; Switch size 1, requested type "space"
 12616                           ; Number of cases is 1, Range of values is 48 to 48
 12617                           ; switch strategies available:
 12618                           ; Name         Instructions Cycles
 12619                           ; simple_byte            4     3 (average)
 12620                           ;	Chosen strategy is simple_byte
 12621  0009BC  0A30               	xorlw	48	; case 48
 12622  0009BE  B4D8               	btfsc	status,2,c
 12623  0009C0  D7F3               	goto	i2l4520
 12624                           
 12625                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12626                           
 12627                           ;doprnt.c: 586: }
 12628                           
 12629                           ;doprnt.c: 585: break;
 12630  0009C2  C00D  FFF6         	movff	i2printf@f,tblptrl
 12631  0009C6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12632  0009CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12633  0009CA  6AF8               	clrf	tblptru,c
 12634  0009CC                     	endif
 12635  0009CC                     	if	0	;tblptru may be non-zero
 12636  0009CC                     	endif
 12637  0009CC  0008               	tblrd		*
 12638  0009CE  50F5               	movf	tablat,w,c
 12639  0009D0  EC83  F015         	call	i2_isdigit
 12640  0009D4  A0D8               	btfss	status,0,c
 12641  0009D6  D0A4               	goto	i2l4570
 12642                           
 12643                           ;doprnt.c: 598: width = 0;
 12644  0009D8  0E00               	movlw	0
 12645  0009DA  6E29               	movwf	i2printf@width+1,c
 12646  0009DC  0E00               	movlw	0
 12647  0009DE  6E28               	movwf	i2printf@width,c
 12648  0009E0                     i2l4530:
 12649                           
 12650                           ;doprnt.c: 600: width *= 10;
 12651  0009E0  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 12652  0009E4  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 12653  0009E8  0E00               	movlw	0
 12654  0009EA  6E04               	movwf	i2___wmul@multiplicand+1,c
 12655  0009EC  0E0A               	movlw	10
 12656  0009EE  6E03               	movwf	i2___wmul@multiplicand,c
 12657  0009F0  EC2B  F015         	call	i2___wmul	;wreg free
 12658  0009F4  C001  F028         	movff	?i2___wmul,i2printf@width
 12659  0009F8  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 12660                           
 12661                           ;doprnt.c: 601: width += *f++ - '0';
 12662  0009FC  0ED0               	movlw	208
 12663  0009FE  6E19               	movwf	??i2_printf& (0+255),c
 12664  000A00  0EFF               	movlw	255
 12665  000A02  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 12666  000A04  C00D  FFF6         	movff	i2printf@f,tblptrl
 12667  000A08  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12668  000A0C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12669  000A0C  6AF8               	clrf	tblptru,c
 12670  000A0E                     	endif
 12671  000A0E                     	if	0	;tblptru may be non-zero
 12672  000A0E                     	endif
 12673  000A0E  0008               	tblrd		*
 12674  000A10  50F5               	movf	tablat,w,c
 12675  000A12  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 12676  000A14  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 12677  000A16  5019               	movf	??i2_printf,w,c
 12678  000A18  261B               	addwf	??i2_printf+2,f,c
 12679  000A1A  501A               	movf	??i2_printf+1,w,c
 12680  000A1C  221C               	addwfc	??i2_printf+3,f,c
 12681  000A1E  501B               	movf	??i2_printf+2,w,c
 12682  000A20  2628               	addwf	i2printf@width,f,c
 12683  000A22  501C               	movf	??i2_printf+3,w,c
 12684  000A24  2229               	addwfc	i2printf@width+1,f,c
 12685  000A26  4A0D               	infsnz	i2printf@f,f,c
 12686  000A28  2A0E               	incf	i2printf@f+1,f,c
 12687                           
 12688                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12689  000A2A  C00D  FFF6         	movff	i2printf@f,tblptrl
 12690  000A2E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12691  000A32                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12692  000A32  6AF8               	clrf	tblptru,c
 12693  000A34                     	endif
 12694  000A34                     	if	0	;tblptru may be non-zero
 12695  000A34                     	endif
 12696  000A34  0008               	tblrd		*
 12697  000A36  50F5               	movf	tablat,w,c
 12698  000A38  EC83  F015         	call	i2_isdigit
 12699  000A3C  A0D8               	btfss	status,0,c
 12700  000A3E  D070               	goto	i2l4570
 12701  000A40  D7CF               	goto	i2l4530
 12702  000A42                     i2l4538:
 12703                           
 12704                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 12705  000A42  C01E  FFD9         	movff	i2printf@ap,fsr2l
 12706  000A46  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 12707  000A4A  CFDE F020          	movff	postinc2,i2printf@cp
 12708  000A4E  CFDD F021          	movff	postdec2,i2printf@cp+1
 12709  000A52  0E02               	movlw	2
 12710  000A54  261E               	addwf	i2printf@ap,f,c
 12711  000A56  0E00               	movlw	0
 12712  000A58  221F               	addwfc	i2printf@ap+1,f,c
 12713                           
 12714                           ;doprnt.c: 740: if(!cp)
 12715  000A5A  5020               	movf	i2printf@cp,w,c
 12716  000A5C  1021               	iorwf	i2printf@cp+1,w,c
 12717  000A5E  A4D8               	btfss	status,2,c
 12718  000A60  D004               	goto	i2l4546
 12719                           
 12720                           ;doprnt.c: 741: cp = "(null)";
 12721  000A62  0EBD               	movlw	low STR_51
 12722  000A64  6E20               	movwf	i2printf@cp,c
 12723  000A66  0EFF               	movlw	high STR_51
 12724  000A68  6E21               	movwf	i2printf@cp+1,c
 12725  000A6A                     i2l4546:
 12726                           
 12727                           ;doprnt.c: 745: len = 0;
 12728  000A6A  0E00               	movlw	0
 12729  000A6C  6E25               	movwf	i2printf@len+1,c
 12730  000A6E  0E00               	movlw	0
 12731  000A70  6E24               	movwf	i2printf@len,c
 12732                           
 12733                           ;doprnt.c: 746: while(cp[len])
 12734  000A72  D002               	goto	i2l4550
 12735  000A74                     i2l4548:
 12736                           
 12737                           ;doprnt.c: 747: len++;
 12738  000A74  4A24               	infsnz	i2printf@len,f,c
 12739  000A76  2A25               	incf	i2printf@len+1,f,c
 12740  000A78                     i2l4550:
 12741  000A78  5024               	movf	i2printf@len,w,c
 12742  000A7A  2420               	addwf	i2printf@cp,w,c
 12743  000A7C  6E19               	movwf	??i2_printf& (0+255),c
 12744  000A7E  5025               	movf	i2printf@len+1,w,c
 12745  000A80  2021               	addwfc	i2printf@cp+1,w,c
 12746  000A82  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 12747  000A84  C019  FFF6         	movff	??i2_printf,tblptrl
 12748  000A88  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 12749  000A8C  0E00               	movlw	low (__mediumconst shr (0+16))
 12750  000A8E  6EF8               	movwf	tblptru,c
 12751  000A90  0E0F               	movlw	(high __ramtop+-1)
 12752  000A92  64F7               	cpfsgt	tblptrh,c
 12753  000A94  D003               	bra	i2u316_47
 12754  000A96  0008               	tblrd		*
 12755  000A98  50F5               	movf	tablat,w,c
 12756  000A9A  D005               	bra	i2u316_40
 12757  000A9C                     i2u316_47:
 12758  000A9C  CFF6 FFE9          	movff	tblptrl,fsr0l
 12759  000AA0  CFF7 FFEA          	movff	tblptrh,fsr0h
 12760  000AA4  50EF               	movf	indf0,w,c
 12761  000AA6                     i2u316_40:
 12762  000AA6  0900               	iorlw	0
 12763  000AA8  A4D8               	btfss	status,2,c
 12764  000AAA  D7E4               	goto	i2l4548
 12765                           
 12766                           ;doprnt.c: 757: if(width > len)
 12767  000AAC  5028               	movf	i2printf@width,w,c
 12768  000AAE  5C24               	subwf	i2printf@len,w,c
 12769  000AB0  5029               	movf	i2printf@width+1,w,c
 12770  000AB2  5825               	subwfb	i2printf@len+1,w,c
 12771  000AB4  B0D8               	btfsc	status,0,c
 12772  000AB6  D005               	goto	i2l4556
 12773                           
 12774                           ;doprnt.c: 758: width -= len;
 12775  000AB8  5024               	movf	i2printf@len,w,c
 12776  000ABA  5E28               	subwf	i2printf@width,f,c
 12777  000ABC  5025               	movf	i2printf@len+1,w,c
 12778  000ABE  5A29               	subwfb	i2printf@width+1,f,c
 12779  000AC0  D008               	goto	i2l4560
 12780  000AC2                     i2l4556:
 12781                           
 12782                           ;doprnt.c: 759: else
 12783                           ;doprnt.c: 760: width = 0;
 12784  000AC2  0E00               	movlw	0
 12785  000AC4  6E29               	movwf	i2printf@width+1,c
 12786  000AC6  0E00               	movlw	0
 12787  000AC8  6E28               	movwf	i2printf@width,c
 12788                           
 12789                           ;doprnt.c: 764: while(width--)
 12790  000ACA  D003               	goto	i2l4560
 12791  000ACC                     i2l4558:
 12792                           
 12793                           ;doprnt.c: 765: (putch(' ') );
 12794  000ACC  0E20               	movlw	32
 12795  000ACE  ECE0  F015         	call	i2_putch
 12796  000AD2                     i2l4560:
 12797  000AD2  0628               	decf	i2printf@width,f,c
 12798  000AD4  A0D8               	btfss	status,0,c
 12799  000AD6  0629               	decf	i2printf@width+1,f,c
 12800  000AD8  2828               	incf	i2printf@width,w,c
 12801  000ADA  E1F8               	bnz	i2l4558
 12802  000ADC  2829               	incf	i2printf@width+1,w,c
 12803  000ADE  B4D8               	btfsc	status,2,c
 12804  000AE0  D016               	goto	i2l4566
 12805  000AE2  D7F4               	goto	i2l4558
 12806  000AE4                     i2l4562:
 12807                           
 12808                           ;doprnt.c: 768: (putch(*cp++) );
 12809  000AE4  C020  FFF6         	movff	i2printf@cp,tblptrl
 12810  000AE8  C021  FFF7         	movff	i2printf@cp+1,tblptrh
 12811  000AEC  0E00               	movlw	low (__mediumconst shr (0+16))
 12812  000AEE  6EF8               	movwf	tblptru,c
 12813  000AF0  0E0F               	movlw	(high __ramtop+-1)
 12814  000AF2  64F7               	cpfsgt	tblptrh,c
 12815  000AF4  D003               	bra	i2u320_47
 12816  000AF6  0008               	tblrd		*
 12817  000AF8  50F5               	movf	tablat,w,c
 12818  000AFA  D005               	bra	i2u320_40
 12819  000AFC                     i2u320_47:
 12820  000AFC  CFF6 FFE9          	movff	tblptrl,fsr0l
 12821  000B00  CFF7 FFEA          	movff	tblptrh,fsr0h
 12822  000B04  50EF               	movf	indf0,w,c
 12823  000B06                     i2u320_40:
 12824  000B06  ECE0  F015         	call	i2_putch
 12825  000B0A  4A20               	infsnz	i2printf@cp,f,c
 12826  000B0C  2A21               	incf	i2printf@cp+1,f,c
 12827  000B0E                     i2l4566:
 12828  000B0E  0624               	decf	i2printf@len,f,c
 12829  000B10  A0D8               	btfss	status,0,c
 12830  000B12  0625               	decf	i2printf@len+1,f,c
 12831  000B14  2824               	incf	i2printf@len,w,c
 12832  000B16  E1E6               	bnz	i2l4562
 12833  000B18  2825               	incf	i2printf@len+1,w,c
 12834  000B1A  B4D8               	btfsc	status,2,c
 12835  000B1C  D0C6               	goto	i2l4638
 12836  000B1E  D7E2               	goto	i2l4562
 12837  000B20                     i2l4570:
 12838  000B20  C00D  FFF6         	movff	i2printf@f,tblptrl
 12839  000B24  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12840  000B28  4A0D               	infsnz	i2printf@f,f,c
 12841  000B2A  2A0E               	incf	i2printf@f+1,f,c
 12842  000B2C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12843  000B2C  6AF8               	clrf	tblptru,c
 12844  000B2E                     	endif
 12845  000B2E                     	if	0	;tblptru may be non-zero
 12846  000B2E                     	endif
 12847  000B2E  0008               	tblrd		*
 12848  000B30  CFF5 F027          	movff	tablat,i2printf@c
 12849  000B34  5027               	movf	i2printf@c,w,c
 12850                           
 12851                           ; Switch size 1, requested type "space"
 12852                           ; Number of cases is 4, Range of values is 0 to 115
 12853                           ; switch strategies available:
 12854                           ; Name         Instructions Cycles
 12855                           ; simple_byte           13     7 (average)
 12856                           ;	Chosen strategy is simple_byte
 12857  000B36  0A00               	xorlw	0	; case 0
 12858  000B38  B4D8               	btfsc	status,2,c
 12859  000B3A  0012               	return	
 12860  000B3C  0A64               	xorlw	100	; case 100
 12861  000B3E  B4D8               	btfsc	status,2,c
 12862  000B40  D007               	goto	i2l4572
 12863  000B42  0A0D               	xorlw	13	; case 105
 12864  000B44  B4D8               	btfsc	status,2,c
 12865  000B46  D004               	goto	i2l4572
 12866  000B48  0A1A               	xorlw	26	; case 115
 12867  000B4A  B4D8               	btfsc	status,2,c
 12868  000B4C  D77A               	goto	i2l4538
 12869  000B4E  D0AD               	goto	i2l4638
 12870  000B50                     i2l4572:
 12871                           
 12872                           ;doprnt.c: 1253: {
 12873                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12874  000B50  C01E  FFD9         	movff	i2printf@ap,fsr2l
 12875  000B54  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 12876  000B58  CFDE F022          	movff	postinc2,i2printf@val
 12877  000B5C  CFDD F023          	movff	postdec2,i2printf@val+1
 12878  000B60  0E02               	movlw	2
 12879  000B62  261E               	addwf	i2printf@ap,f,c
 12880  000B64  0E00               	movlw	0
 12881  000B66  221F               	addwfc	i2printf@ap+1,f,c
 12882                           
 12883                           ;doprnt.c: 1261: if((int)val < 0) {
 12884  000B68  AE23               	btfss	i2printf@val+1,7,c
 12885  000B6A  D006               	goto	i2l4582
 12886                           
 12887                           ;doprnt.c: 1262: flag |= 0x03;
 12888  000B6C  0E03               	movlw	3
 12889  000B6E  1226               	iorwf	i2printf@flag,f,c
 12890                           
 12891                           ;doprnt.c: 1263: val = -val;
 12892  000B70  6C22               	negf	i2printf@val,c
 12893  000B72  1E23               	comf	i2printf@val+1,f,c
 12894  000B74  B0D8               	btfsc	status,0,c
 12895  000B76  2A23               	incf	i2printf@val+1,f,c
 12896  000B78                     i2l4582:
 12897                           
 12898                           ;doprnt.c: 1264: }
 12899                           ;doprnt.c: 1266: }
 12900                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12901  000B78  0E01               	movlw	1
 12902  000B7A  6E27               	movwf	i2printf@c,c
 12903  000B7C                     i2l4584:
 12904  000B7C  0E05               	movlw	5
 12905  000B7E  1827               	xorwf	i2printf@c,w,c
 12906  000B80  B4D8               	btfsc	status,2,c
 12907  000B82  D015               	goto	i2l4596
 12908                           
 12909                           ;doprnt.c: 1306: if(val < dpowers[c])
 12910  000B84  5027               	movf	i2printf@c,w,c
 12911  000B86  0D02               	mullw	2
 12912  000B88  0EC6               	movlw	low _dpowers
 12913  000B8A  24F3               	addwf	prodl,w,c
 12914  000B8C  6EF6               	movwf	tblptrl,c
 12915  000B8E  0EFD               	movlw	high _dpowers
 12916  000B90  20F4               	addwfc	prodh,w,c
 12917  000B92  6EF7               	movwf	tblptrh,c
 12918  000B94                     	if	1	;There are 3 active tblptr bytes
 12919  000B94  6AF8               	clrf	tblptru,c
 12920  000B96  0E00               	movlw	low (__mediumconst shr (0+16))
 12921  000B98  22F8               	addwfc	tblptru,f,c
 12922  000B9A                     	endif
 12923  000B9A  0009               	tblrd		*+
 12924  000B9C  50F5               	movf	tablat,w,c
 12925  000B9E  5C22               	subwf	i2printf@val,w,c
 12926  000BA0  0009               	tblrd		*+
 12927  000BA2  50F5               	movf	tablat,w,c
 12928  000BA4  5823               	subwfb	i2printf@val+1,w,c
 12929  000BA6  A0D8               	btfss	status,0,c
 12930  000BA8  D002               	goto	i2l4596
 12931                           
 12932                           ;doprnt.c: 1307: break;
 12933  000BAA  2A27               	incf	i2printf@c,f,c
 12934  000BAC  D7E7               	goto	i2l4584
 12935  000BAE                     i2l4596:
 12936                           
 12937                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12938  000BAE  5028               	movf	i2printf@width,w,c
 12939  000BB0  1029               	iorwf	i2printf@width+1,w,c
 12940  000BB2  B4D8               	btfsc	status,2,c
 12941  000BB4  D009               	goto	i2l4602
 12942  000BB6  C026  F019         	movff	i2printf@flag,??i2_printf
 12943  000BBA  0E03               	movlw	3
 12944  000BBC  1619               	andwf	??i2_printf,f,c
 12945  000BBE  B4D8               	btfsc	status,2,c
 12946  000BC0  D003               	goto	i2l4602
 12947                           
 12948                           ;doprnt.c: 1346: width--;
 12949  000BC2  0628               	decf	i2printf@width,f,c
 12950  000BC4  A0D8               	btfss	status,0,c
 12951  000BC6  0629               	decf	i2printf@width+1,f,c
 12952  000BC8                     i2l4602:
 12953                           
 12954                           ;doprnt.c: 1381: if(width > c)
 12955  000BC8  0E80               	movlw	128
 12956  000BCA  BE27               	btfsc	i2printf@c,7,c
 12957  000BCC  0E7F               	movlw	127
 12958  000BCE  6E19               	movwf	??i2_printf& (0+255),c
 12959  000BD0  5028               	movf	i2printf@width,w,c
 12960  000BD2  5C27               	subwf	i2printf@c,w,c
 12961  000BD4  5029               	movf	i2printf@width+1,w,c
 12962  000BD6  0A80               	xorlw	128
 12963  000BD8  5819               	subwfb	??i2_printf& (0+255),w,c
 12964  000BDA  B0D8               	btfsc	status,0,c
 12965  000BDC  D007               	goto	i2l4606
 12966                           
 12967                           ;doprnt.c: 1382: width -= c;
 12968  000BDE  5027               	movf	i2printf@c,w,c
 12969  000BE0  5E28               	subwf	i2printf@width,f,c
 12970  000BE2  0E00               	movlw	0
 12971  000BE4  BE27               	btfsc	i2printf@c,7,c
 12972  000BE6  0EFF               	movlw	255
 12973  000BE8  5A29               	subwfb	i2printf@width+1,f,c
 12974  000BEA  D004               	goto	i2l4608
 12975  000BEC                     i2l4606:
 12976                           
 12977                           ;doprnt.c: 1383: else
 12978                           ;doprnt.c: 1384: width = 0;
 12979  000BEC  0E00               	movlw	0
 12980  000BEE  6E29               	movwf	i2printf@width+1,c
 12981  000BF0  0E00               	movlw	0
 12982  000BF2  6E28               	movwf	i2printf@width,c
 12983  000BF4                     i2l4608:
 12984                           
 12985                           ;doprnt.c: 1387: if(flag & 0x04) {
 12986  000BF4  A426               	btfss	i2printf@flag,2,c
 12987  000BF6  D014               	goto	i2l4620
 12988                           
 12989                           ;doprnt.c: 1392: if(flag & 0x03)
 12990  000BF8  C026  F019         	movff	i2printf@flag,??i2_printf
 12991  000BFC  0E03               	movlw	3
 12992  000BFE  1619               	andwf	??i2_printf,f,c
 12993  000C00  B4D8               	btfsc	status,2,c
 12994  000C02  D003               	goto	i2l4614
 12995                           
 12996                           ;doprnt.c: 1393: (putch('-') );
 12997  000C04  0E2D               	movlw	45
 12998  000C06  ECE0  F015         	call	i2_putch
 12999  000C0A                     i2l4614:
 13000                           
 13001                           ;doprnt.c: 1415: if(width)
 13002  000C0A  5028               	movf	i2printf@width,w,c
 13003  000C0C  1029               	iorwf	i2printf@width+1,w,c
 13004  000C0E  B4D8               	btfsc	status,2,c
 13005  000C10  D01E               	goto	i2l4630
 13006                           
 13007                           ;doprnt.c: 1417: (putch('0') );
 13008                           
 13009                           ;doprnt.c: 1416: do
 13010  000C12  0E30               	movlw	48
 13011  000C14  ECE0  F015         	call	i2_putch
 13012                           
 13013                           ;doprnt.c: 1418: while(--width);
 13014  000C18  0628               	decf	i2printf@width,f,c
 13015  000C1A  A0D8               	btfss	status,0,c
 13016  000C1C  0629               	decf	i2printf@width+1,f,c
 13017  000C1E  D7F5               	goto	i2l4614
 13018  000C20                     i2l4620:
 13019                           
 13020                           ;doprnt.c: 1422: {
 13021                           ;doprnt.c: 1424: if(width
 13022                           ;doprnt.c: 1428: )
 13023  000C20  5028               	movf	i2printf@width,w,c
 13024  000C22  1029               	iorwf	i2printf@width+1,w,c
 13025  000C24  B4D8               	btfsc	status,2,c
 13026  000C26  D00A               	goto	i2l4626
 13027  000C28                     i2l4622:
 13028                           
 13029                           ;doprnt.c: 1430: (putch(' ') );
 13030  000C28  0E20               	movlw	32
 13031  000C2A  ECE0  F015         	call	i2_putch
 13032                           
 13033                           ;doprnt.c: 1431: while(--width);
 13034  000C2E  0628               	decf	i2printf@width,f,c
 13035  000C30  A0D8               	btfss	status,0,c
 13036  000C32  0629               	decf	i2printf@width+1,f,c
 13037  000C34  5028               	movf	i2printf@width,w,c
 13038  000C36  1029               	iorwf	i2printf@width+1,w,c
 13039  000C38  A4D8               	btfss	status,2,c
 13040  000C3A  D7F6               	goto	i2l4622
 13041  000C3C                     i2l4626:
 13042                           
 13043                           ;doprnt.c: 1438: if(flag & 0x03)
 13044  000C3C  C026  F019         	movff	i2printf@flag,??i2_printf
 13045  000C40  0E03               	movlw	3
 13046  000C42  1619               	andwf	??i2_printf,f,c
 13047  000C44  B4D8               	btfsc	status,2,c
 13048  000C46  D003               	goto	i2l4630
 13049                           
 13050                           ;doprnt.c: 1439: (putch('-') );
 13051  000C48  0E2D               	movlw	45
 13052  000C4A  ECE0  F015         	call	i2_putch
 13053  000C4E                     i2l4630:
 13054                           
 13055                           ;doprnt.c: 1469: }
 13056                           ;doprnt.c: 1472: prec = c;
 13057  000C4E  C027  F01D         	movff	i2printf@c,i2printf@prec
 13058                           
 13059                           ;doprnt.c: 1474: while(prec--) {
 13060  000C52  D027               	goto	i2l4636
 13061  000C54                     i2l4632:
 13062                           
 13063                           ;doprnt.c: 1478: {
 13064                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13065  000C54  501D               	movf	i2printf@prec,w,c
 13066  000C56  0D02               	mullw	2
 13067  000C58  0EC6               	movlw	low _dpowers
 13068  000C5A  24F3               	addwf	prodl,w,c
 13069  000C5C  6EF6               	movwf	tblptrl,c
 13070  000C5E  0EFD               	movlw	high _dpowers
 13071  000C60  20F4               	addwfc	prodh,w,c
 13072  000C62  6EF7               	movwf	tblptrh,c
 13073  000C64                     	if	1	;There are 3 active tblptr bytes
 13074  000C64  6AF8               	clrf	tblptru,c
 13075  000C66  0E00               	movlw	low (__mediumconst shr (0+16))
 13076  000C68  22F8               	addwfc	tblptru,f,c
 13077  000C6A                     	endif
 13078  000C6A  0009               	tblrd		*+
 13079  000C6C  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 13080  000C70  000A               	tblrd		*-
 13081  000C72  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 13082  000C76  C022  F006         	movff	i2printf@val,i2___lwdiv@dividend
 13083  000C7A  C023  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 13084  000C7E  ECA3  F012         	call	i2___lwdiv	;wreg free
 13085  000C82  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 13086  000C86  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 13087  000C8A  0E00               	movlw	0
 13088  000C8C  6E04               	movwf	i2___lwmod@divisor+1,c
 13089  000C8E  0E0A               	movlw	10
 13090  000C90  6E03               	movwf	i2___lwmod@divisor,c
 13091  000C92  ECEF  F012         	call	i2___lwmod	;wreg free
 13092  000C96  5001               	movf	?i2___lwmod,w,c
 13093  000C98  0F30               	addlw	48
 13094  000C9A  6E27               	movwf	i2printf@c,c
 13095                           
 13096                           ;doprnt.c: 1523: }
 13097                           ;doprnt.c: 1524: (putch(c) );
 13098  000C9C  5027               	movf	i2printf@c,w,c
 13099  000C9E  ECE0  F015         	call	i2_putch
 13100  000CA2                     i2l4636:
 13101  000CA2  061D               	decf	i2printf@prec,f,c
 13102  000CA4  281D               	incf	i2printf@prec,w,c
 13103  000CA6  A4D8               	btfss	status,2,c
 13104  000CA8  D7D5               	goto	i2l4632
 13105  000CAA                     i2l4638:
 13106  000CAA  C00D  FFF6         	movff	i2printf@f,tblptrl
 13107  000CAE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13108  000CB2  4A0D               	infsnz	i2printf@f,f,c
 13109  000CB4  2A0E               	incf	i2printf@f+1,f,c
 13110  000CB6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13111  000CB6  6AF8               	clrf	tblptru,c
 13112  000CB8                     	endif
 13113  000CB8                     	if	0	;tblptru may be non-zero
 13114  000CB8                     	endif
 13115  000CB8  0008               	tblrd		*
 13116  000CBA  CFF5 F027          	movff	tablat,i2printf@c
 13117  000CBE  5027               	movf	i2printf@c,w,c
 13118  000CC0  B4D8               	btfsc	status,2,c
 13119  000CC2  0012               	return	
 13120  000CC4  D662               	goto	i2l4514
 13121  000CC6                     __end_ofi2_printf:
 13122                           	opt stack 0
 13123                           pclatu	equ	0xFFB
 13124                           pclath	equ	0xFFA
 13125                           tblptru	equ	0xFF8
 13126                           tblptrh	equ	0xFF7
 13127                           tblptrl	equ	0xFF6
 13128                           tablat	equ	0xFF5
 13129                           prodh	equ	0xFF4
 13130                           prodl	equ	0xFF3
 13131                           intcon	equ	0xFF2
 13132                           intcon2	equ	0xFF1
 13133                           intcon3	equ	0xFF0
 13134                           indf0	equ	0xFEF
 13135                           postinc0	equ	0xFEE
 13136                           fsr0h	equ	0xFEA
 13137                           fsr0l	equ	0xFE9
 13138                           wreg	equ	0xFE8
 13139                           postdec1	equ	0xFE5
 13140                           fsr1h	equ	0xFE2
 13141                           fsr1l	equ	0xFE1
 13142                           indf2	equ	0xFDF
 13143                           postinc2	equ	0xFDE
 13144                           postdec2	equ	0xFDD
 13145                           fsr2h	equ	0xFDA
 13146                           fsr2l	equ	0xFD9
 13147                           status	equ	0xFD8
 13148                           
 13149 ;; *************** function i2_putch *****************
 13150 ;; Defined at:
 13151 ;;		line 19 in file "lcd.c"
 13152 ;; Parameters:    Size  Location     Type
 13153 ;;  data            1    wreg     unsigned char 
 13154 ;; Auto vars:     Size  Location     Type
 13155 ;;  data            1    2[COMRAM] unsigned char 
 13156 ;; Return value:  Size  Location     Type
 13157 ;;                  1    wreg      void 
 13158 ;; Registers used:
 13159 ;;		wreg, status,2, status,0, cstack
 13160 ;; Tracked objects:
 13161 ;;		On entry : 0/0
 13162 ;;		On exit  : 0/0
 13163 ;;		Unchanged: 0/0
 13164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13166 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13168 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13169 ;;Total ram usage:        1 bytes
 13170 ;; Hardware stack levels used:    1
 13171 ;; Hardware stack levels required when called:    1
 13172 ;; This function calls:
 13173 ;;		i2_lcdNibble
 13174 ;; This function is called by:
 13175 ;;		i2_printf
 13176 ;; This function uses a non-reentrant model
 13177 ;;
 13178                           
 13179                           	psect	text61
 13180  002BC0                     __ptext61:
 13181                           	opt stack 0
 13182  002BC0                     i2_putch:
 13183                           	opt stack 19
 13184                           
 13185                           ;incstack = 0
 13186                           ;i2putch@data stored from wreg
 13187  002BC0  6E03               	movwf	i2putch@data,c
 13188                           
 13189                           ;lcd.c: 20: LATDbits.LATD2 = 1;
 13190  002BC2  848C               	bsf	3980,2,c	;volatile
 13191                           
 13192                           ;lcd.c: 21: lcdNibble(data);
 13193  002BC4  5003               	movf	i2putch@data,w,c
 13194  002BC6  EC78  F012         	call	i2_lcdNibble
 13195  002BCA  0012               	return		;funcret
 13196  002BCC                     __end_ofi2_putch:
 13197                           	opt stack 0
 13198                           pclatu	equ	0xFFB
 13199                           pclath	equ	0xFFA
 13200                           tblptru	equ	0xFF8
 13201                           tblptrh	equ	0xFF7
 13202                           tblptrl	equ	0xFF6
 13203                           tablat	equ	0xFF5
 13204                           prodh	equ	0xFF4
 13205                           prodl	equ	0xFF3
 13206                           intcon	equ	0xFF2
 13207                           intcon2	equ	0xFF1
 13208                           intcon3	equ	0xFF0
 13209                           indf0	equ	0xFEF
 13210                           postinc0	equ	0xFEE
 13211                           fsr0h	equ	0xFEA
 13212                           fsr0l	equ	0xFE9
 13213                           wreg	equ	0xFE8
 13214                           postdec1	equ	0xFE5
 13215                           fsr1h	equ	0xFE2
 13216                           fsr1l	equ	0xFE1
 13217                           indf2	equ	0xFDF
 13218                           postinc2	equ	0xFDE
 13219                           postdec2	equ	0xFDD
 13220                           fsr2h	equ	0xFDA
 13221                           fsr2l	equ	0xFD9
 13222                           status	equ	0xFD8
 13223                           
 13224 ;; *************** function i2_isdigit *****************
 13225 ;; Defined at:
 13226 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 13227 ;; Parameters:    Size  Location     Type
 13228 ;;  c               1    wreg     unsigned char 
 13229 ;; Auto vars:     Size  Location     Type
 13230 ;;  c               1    2[COMRAM] unsigned char 
 13231 ;; Return value:  Size  Location     Type
 13232 ;;		None               void
 13233 ;; Registers used:
 13234 ;;		wreg, status,2, status,0
 13235 ;; Tracked objects:
 13236 ;;		On entry : 0/0
 13237 ;;		On exit  : 0/0
 13238 ;;		Unchanged: 0/0
 13239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13241 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13242 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13243 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13244 ;;Total ram usage:        3 bytes
 13245 ;; Hardware stack levels used:    1
 13246 ;; This function calls:
 13247 ;;		Nothing
 13248 ;; This function is called by:
 13249 ;;		i2_printf
 13250 ;; This function uses a non-reentrant model
 13251 ;;
 13252                           
 13253                           	psect	text62
 13254  002B06                     __ptext62:
 13255                           	opt stack 0
 13256  002B06                     i2_isdigit:
 13257                           	opt stack 20
 13258                           
 13259                           ;incstack = 0
 13260                           ;i2isdigit@c stored from wreg
 13261  002B06  6E03               	movwf	i2isdigit@c,c
 13262  002B08  0E00               	movlw	0
 13263  002B0A  6E02               	movwf	i2_isdigit$1652,c
 13264  002B0C  0E3A               	movlw	58
 13265  002B0E  6003               	cpfslt	i2isdigit@c,c
 13266  002B10  D005               	goto	i2l4254
 13267  002B12  0E2F               	movlw	47
 13268  002B14  6403               	cpfsgt	i2isdigit@c,c
 13269  002B16  D002               	goto	i2l4254
 13270  002B18  0E01               	movlw	1
 13271  002B1A  6E02               	movwf	i2_isdigit$1652,c
 13272  002B1C                     i2l4254:
 13273  002B1C  C002  F001         	movff	i2_isdigit$1652,??i2_isdigit
 13274  002B20  3001               	rrcf	??i2_isdigit,w,c
 13275  002B22  0012               	return	
 13276  002B24                     __end_ofi2_isdigit:
 13277                           	opt stack 0
 13278                           pclatu	equ	0xFFB
 13279                           pclath	equ	0xFFA
 13280                           tblptru	equ	0xFF8
 13281                           tblptrh	equ	0xFF7
 13282                           tblptrl	equ	0xFF6
 13283                           tablat	equ	0xFF5
 13284                           prodh	equ	0xFF4
 13285                           prodl	equ	0xFF3
 13286                           intcon	equ	0xFF2
 13287                           intcon2	equ	0xFF1
 13288                           intcon3	equ	0xFF0
 13289                           indf0	equ	0xFEF
 13290                           postinc0	equ	0xFEE
 13291                           fsr0h	equ	0xFEA
 13292                           fsr0l	equ	0xFE9
 13293                           wreg	equ	0xFE8
 13294                           postdec1	equ	0xFE5
 13295                           fsr1h	equ	0xFE2
 13296                           fsr1l	equ	0xFE1
 13297                           indf2	equ	0xFDF
 13298                           postinc2	equ	0xFDE
 13299                           postdec2	equ	0xFDD
 13300                           fsr2h	equ	0xFDA
 13301                           fsr2l	equ	0xFD9
 13302                           status	equ	0xFD8
 13303                           
 13304 ;; *************** function i2___wmul *****************
 13305 ;; Defined at:
 13306 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 13307 ;; Parameters:    Size  Location     Type
 13308 ;;  multiplier      2    0[COMRAM] unsigned int 
 13309 ;;  multiplicand    2    2[COMRAM] unsigned int 
 13310 ;; Auto vars:     Size  Location     Type
 13311 ;;  __wmul          2    4[COMRAM] unsigned int 
 13312 ;; Return value:  Size  Location     Type
 13313 ;;                  2    0[COMRAM] unsigned int 
 13314 ;; Registers used:
 13315 ;;		wreg, status,2, status,0, prodl, prodh
 13316 ;; Tracked objects:
 13317 ;;		On entry : 0/0
 13318 ;;		On exit  : 0/0
 13319 ;;		Unchanged: 0/0
 13320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13321 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13322 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13324 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13325 ;;Total ram usage:        6 bytes
 13326 ;; Hardware stack levels used:    1
 13327 ;; This function calls:
 13328 ;;		Nothing
 13329 ;; This function is called by:
 13330 ;;		_printSortTimer
 13331 ;;		i2_printf
 13332 ;; This function uses a non-reentrant model
 13333 ;;
 13334                           
 13335                           	psect	text63
 13336  002A56                     __ptext63:
 13337                           	opt stack 0
 13338  002A56                     i2___wmul:
 13339                           	opt stack 20
 13340                           
 13341                           ;incstack = 0
 13342  002A56  5001               	movf	i2___wmul@multiplier,w,c
 13343  002A58  0203               	mulwf	i2___wmul@multiplicand,c
 13344  002A5A  CFF3 F005          	movff	prodl,i2___wmul@product
 13345  002A5E  CFF4 F006          	movff	prodh,i2___wmul@product+1
 13346  002A62  5001               	movf	i2___wmul@multiplier,w,c
 13347  002A64  0204               	mulwf	i2___wmul@multiplicand+1,c
 13348  002A66  50F3               	movf	prodl,w,c
 13349  002A68  2606               	addwf	i2___wmul@product+1,f,c
 13350  002A6A  5002               	movf	i2___wmul@multiplier+1,w,c
 13351  002A6C  0203               	mulwf	i2___wmul@multiplicand,c
 13352  002A6E  50F3               	movf	prodl,w,c
 13353  002A70  2606               	addwf	i2___wmul@product+1,f,c
 13354  002A72  C005  F001         	movff	i2___wmul@product,?i2___wmul
 13355  002A76  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 13356  002A7A  0012               	return	
 13357  002A7C                     __end_ofi2___wmul:
 13358                           	opt stack 0
 13359                           pclatu	equ	0xFFB
 13360                           pclath	equ	0xFFA
 13361                           tblptru	equ	0xFF8
 13362                           tblptrh	equ	0xFF7
 13363                           tblptrl	equ	0xFF6
 13364                           tablat	equ	0xFF5
 13365                           prodh	equ	0xFF4
 13366                           prodl	equ	0xFF3
 13367                           intcon	equ	0xFF2
 13368                           intcon2	equ	0xFF1
 13369                           intcon3	equ	0xFF0
 13370                           indf0	equ	0xFEF
 13371                           postinc0	equ	0xFEE
 13372                           fsr0h	equ	0xFEA
 13373                           fsr0l	equ	0xFE9
 13374                           wreg	equ	0xFE8
 13375                           postdec1	equ	0xFE5
 13376                           fsr1h	equ	0xFE2
 13377                           fsr1l	equ	0xFE1
 13378                           indf2	equ	0xFDF
 13379                           postinc2	equ	0xFDE
 13380                           postdec2	equ	0xFDD
 13381                           fsr2h	equ	0xFDA
 13382                           fsr2l	equ	0xFD9
 13383                           status	equ	0xFD8
 13384                           
 13385 ;; *************** function i2___lwmod *****************
 13386 ;; Defined at:
 13387 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 13388 ;; Parameters:    Size  Location     Type
 13389 ;;  dividend        2    0[COMRAM] unsigned int 
 13390 ;;  divisor         2    2[COMRAM] unsigned int 
 13391 ;; Auto vars:     Size  Location     Type
 13392 ;;  __lwmod         1    4[COMRAM] unsigned char 
 13393 ;; Return value:  Size  Location     Type
 13394 ;;                  2    0[COMRAM] unsigned int 
 13395 ;; Registers used:
 13396 ;;		wreg, status,2, status,0
 13397 ;; Tracked objects:
 13398 ;;		On entry : 0/0
 13399 ;;		On exit  : 0/0
 13400 ;;		Unchanged: 0/0
 13401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13402 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13403 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13405 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13406 ;;Total ram usage:        5 bytes
 13407 ;; Hardware stack levels used:    1
 13408 ;; This function calls:
 13409 ;;		Nothing
 13410 ;; This function is called by:
 13411 ;;		_printSortTimer
 13412 ;;		i2_printf
 13413 ;; This function uses a non-reentrant model
 13414 ;;
 13415                           
 13416                           	psect	text64
 13417  0025DE                     __ptext64:
 13418                           	opt stack 0
 13419  0025DE                     i2___lwmod:
 13420                           	opt stack 20
 13421                           
 13422                           ;incstack = 0
 13423  0025DE  5003               	movf	i2___lwmod@divisor,w,c
 13424  0025E0  1004               	iorwf	i2___lwmod@divisor+1,w,c
 13425  0025E2  B4D8               	btfsc	status,2,c
 13426  0025E4  D018               	goto	i2l1755
 13427  0025E6  0E01               	movlw	1
 13428  0025E8  6E05               	movwf	i2___lwmod@counter,c
 13429  0025EA  D004               	goto	i2l4286
 13430  0025EC                     i2l4284:
 13431  0025EC  90D8               	bcf	status,0,c
 13432  0025EE  3603               	rlcf	i2___lwmod@divisor,f,c
 13433  0025F0  3604               	rlcf	i2___lwmod@divisor+1,f,c
 13434  0025F2  2A05               	incf	i2___lwmod@counter,f,c
 13435  0025F4                     i2l4286:
 13436  0025F4  AE04               	btfss	i2___lwmod@divisor+1,7,c
 13437  0025F6  D7FA               	goto	i2l4284
 13438  0025F8                     i2l4288:
 13439  0025F8  5003               	movf	i2___lwmod@divisor,w,c
 13440  0025FA  5C01               	subwf	i2___lwmod@dividend,w,c
 13441  0025FC  5004               	movf	i2___lwmod@divisor+1,w,c
 13442  0025FE  5802               	subwfb	i2___lwmod@dividend+1,w,c
 13443  002600  A0D8               	btfss	status,0,c
 13444  002602  D004               	goto	i2l4292
 13445  002604  5003               	movf	i2___lwmod@divisor,w,c
 13446  002606  5E01               	subwf	i2___lwmod@dividend,f,c
 13447  002608  5004               	movf	i2___lwmod@divisor+1,w,c
 13448  00260A  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 13449  00260C                     i2l4292:
 13450  00260C  90D8               	bcf	status,0,c
 13451  00260E  3204               	rrcf	i2___lwmod@divisor+1,f,c
 13452  002610  3203               	rrcf	i2___lwmod@divisor,f,c
 13453  002612  2E05               	decfsz	i2___lwmod@counter,f,c
 13454  002614  D7F1               	goto	i2l4288
 13455  002616                     i2l1755:
 13456  002616  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 13457  00261A  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 13458  00261E  0012               	return		;funcret
 13459  002620                     __end_ofi2___lwmod:
 13460                           	opt stack 0
 13461                           pclatu	equ	0xFFB
 13462                           pclath	equ	0xFFA
 13463                           tblptru	equ	0xFF8
 13464                           tblptrh	equ	0xFF7
 13465                           tblptrl	equ	0xFF6
 13466                           tablat	equ	0xFF5
 13467                           prodh	equ	0xFF4
 13468                           prodl	equ	0xFF3
 13469                           intcon	equ	0xFF2
 13470                           intcon2	equ	0xFF1
 13471                           intcon3	equ	0xFF0
 13472                           indf0	equ	0xFEF
 13473                           postinc0	equ	0xFEE
 13474                           fsr0h	equ	0xFEA
 13475                           fsr0l	equ	0xFE9
 13476                           wreg	equ	0xFE8
 13477                           postdec1	equ	0xFE5
 13478                           fsr1h	equ	0xFE2
 13479                           fsr1l	equ	0xFE1
 13480                           indf2	equ	0xFDF
 13481                           postinc2	equ	0xFDE
 13482                           postdec2	equ	0xFDD
 13483                           fsr2h	equ	0xFDA
 13484                           fsr2l	equ	0xFD9
 13485                           status	equ	0xFD8
 13486                           
 13487 ;; *************** function i2___lwdiv *****************
 13488 ;; Defined at:
 13489 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 13490 ;; Parameters:    Size  Location     Type
 13491 ;;  dividend        2    5[COMRAM] unsigned int 
 13492 ;;  divisor         2    7[COMRAM] unsigned int 
 13493 ;; Auto vars:     Size  Location     Type
 13494 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 13495 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 13496 ;; Return value:  Size  Location     Type
 13497 ;;                  2    5[COMRAM] unsigned int 
 13498 ;; Registers used:
 13499 ;;		wreg, status,2, status,0
 13500 ;; Tracked objects:
 13501 ;;		On entry : 0/0
 13502 ;;		On exit  : 0/0
 13503 ;;		Unchanged: 0/0
 13504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13505 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13506 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13508 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13509 ;;Total ram usage:        7 bytes
 13510 ;; Hardware stack levels used:    1
 13511 ;; This function calls:
 13512 ;;		Nothing
 13513 ;; This function is called by:
 13514 ;;		_printSortTimer
 13515 ;;		i2_printf
 13516 ;; This function uses a non-reentrant model
 13517 ;;
 13518                           
 13519                           	psect	text65
 13520  002546                     __ptext65:
 13521                           	opt stack 0
 13522  002546                     i2___lwdiv:
 13523                           	opt stack 20
 13524                           
 13525                           ;incstack = 0
 13526  002546  0E00               	movlw	0
 13527  002548  6E0B               	movwf	i2___lwdiv@quotient+1,c
 13528  00254A  0E00               	movlw	0
 13529  00254C  6E0A               	movwf	i2___lwdiv@quotient,c
 13530  00254E  5008               	movf	i2___lwdiv@divisor,w,c
 13531  002550  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 13532  002552  B4D8               	btfsc	status,2,c
 13533  002554  D01C               	goto	i2l1745
 13534  002556  0E01               	movlw	1
 13535  002558  6E0C               	movwf	i2___lwdiv@counter,c
 13536  00255A  D004               	goto	i2l4266
 13537  00255C                     i2l4264:
 13538  00255C  90D8               	bcf	status,0,c
 13539  00255E  3608               	rlcf	i2___lwdiv@divisor,f,c
 13540  002560  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 13541  002562  2A0C               	incf	i2___lwdiv@counter,f,c
 13542  002564                     i2l4266:
 13543  002564  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 13544  002566  D7FA               	goto	i2l4264
 13545  002568                     i2l4268:
 13546  002568  90D8               	bcf	status,0,c
 13547  00256A  360A               	rlcf	i2___lwdiv@quotient,f,c
 13548  00256C  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 13549  00256E  5008               	movf	i2___lwdiv@divisor,w,c
 13550  002570  5C06               	subwf	i2___lwdiv@dividend,w,c
 13551  002572  5009               	movf	i2___lwdiv@divisor+1,w,c
 13552  002574  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 13553  002576  A0D8               	btfss	status,0,c
 13554  002578  D005               	goto	i2l4276
 13555  00257A  5008               	movf	i2___lwdiv@divisor,w,c
 13556  00257C  5E06               	subwf	i2___lwdiv@dividend,f,c
 13557  00257E  5009               	movf	i2___lwdiv@divisor+1,w,c
 13558  002580  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 13559  002582  800A               	bsf	i2___lwdiv@quotient,0,c
 13560  002584                     i2l4276:
 13561  002584  90D8               	bcf	status,0,c
 13562  002586  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 13563  002588  3208               	rrcf	i2___lwdiv@divisor,f,c
 13564  00258A  2E0C               	decfsz	i2___lwdiv@counter,f,c
 13565  00258C  D7ED               	goto	i2l4268
 13566  00258E                     i2l1745:
 13567  00258E  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 13568  002592  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 13569  002596  0012               	return		;funcret
 13570  002598                     __end_ofi2___lwdiv:
 13571                           	opt stack 0
 13572                           pclatu	equ	0xFFB
 13573                           pclath	equ	0xFFA
 13574                           tblptru	equ	0xFF8
 13575                           tblptrh	equ	0xFF7
 13576                           tblptrl	equ	0xFF6
 13577                           tablat	equ	0xFF5
 13578                           prodh	equ	0xFF4
 13579                           prodl	equ	0xFF3
 13580                           intcon	equ	0xFF2
 13581                           intcon2	equ	0xFF1
 13582                           intcon3	equ	0xFF0
 13583                           indf0	equ	0xFEF
 13584                           postinc0	equ	0xFEE
 13585                           fsr0h	equ	0xFEA
 13586                           fsr0l	equ	0xFE9
 13587                           wreg	equ	0xFE8
 13588                           postdec1	equ	0xFE5
 13589                           fsr1h	equ	0xFE2
 13590                           fsr1l	equ	0xFE1
 13591                           indf2	equ	0xFDF
 13592                           postinc2	equ	0xFDE
 13593                           postdec2	equ	0xFDD
 13594                           fsr2h	equ	0xFDA
 13595                           fsr2l	equ	0xFD9
 13596                           status	equ	0xFD8
 13597                           
 13598 ;; *************** function i2_lcdInst *****************
 13599 ;; Defined at:
 13600 ;;		line 14 in file "lcd.c"
 13601 ;; Parameters:    Size  Location     Type
 13602 ;;  data            1    wreg     unsigned char 
 13603 ;; Auto vars:     Size  Location     Type
 13604 ;;  data            1    2[COMRAM] unsigned char 
 13605 ;; Return value:  Size  Location     Type
 13606 ;;                  1    wreg      void 
 13607 ;; Registers used:
 13608 ;;		wreg, status,2, status,0, cstack
 13609 ;; Tracked objects:
 13610 ;;		On entry : 0/0
 13611 ;;		On exit  : 0/0
 13612 ;;		Unchanged: 0/0
 13613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13615 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13617 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13618 ;;Total ram usage:        1 bytes
 13619 ;; Hardware stack levels used:    1
 13620 ;; Hardware stack levels required when called:    1
 13621 ;; This function calls:
 13622 ;;		i2_lcdNibble
 13623 ;; This function is called by:
 13624 ;;		_change_state_to_menu_11
 13625 ;;		_change_state_to_menu_23
 13626 ;;		_change_state_to_logs_11
 13627 ;;		_change_state_to_logs_12
 13628 ;;		_change_state_to_logs_22
 13629 ;;		_change_state_to_logs_23
 13630 ;;		_change_state_to_logs_33
 13631 ;;		_change_state_to_logs_34
 13632 ;;		_printSortTimer
 13633 ;;		i2_change_state_to_menu_start
 13634 ;;		i2_change_state_to_menu_12
 13635 ;;		i2_change_state_to_menu_22
 13636 ;;		i2_printRTC
 13637 ;; This function uses a non-reentrant model
 13638 ;;
 13639                           
 13640                           	psect	text66
 13641  002BCC                     __ptext66:
 13642                           	opt stack 0
 13643  002BCC                     i2_lcdInst:
 13644                           	opt stack 19
 13645                           
 13646                           ;incstack = 0
 13647                           ;i2lcdInst@data stored from wreg
 13648  002BCC  6E03               	movwf	i2lcdInst@data,c
 13649                           
 13650                           ;lcd.c: 15: LATDbits.LATD2 = 0;
 13651  002BCE  948C               	bcf	3980,2,c	;volatile
 13652                           
 13653                           ;lcd.c: 16: lcdNibble(data);
 13654  002BD0  5003               	movf	i2lcdInst@data,w,c
 13655  002BD2  EC78  F012         	call	i2_lcdNibble
 13656  002BD6  0012               	return		;funcret
 13657  002BD8                     __end_ofi2_lcdInst:
 13658                           	opt stack 0
 13659                           pclatu	equ	0xFFB
 13660                           pclath	equ	0xFFA
 13661                           tblptru	equ	0xFF8
 13662                           tblptrh	equ	0xFF7
 13663                           tblptrl	equ	0xFF6
 13664                           tablat	equ	0xFF5
 13665                           prodh	equ	0xFF4
 13666                           prodl	equ	0xFF3
 13667                           intcon	equ	0xFF2
 13668                           intcon2	equ	0xFF1
 13669                           intcon3	equ	0xFF0
 13670                           indf0	equ	0xFEF
 13671                           postinc0	equ	0xFEE
 13672                           fsr0h	equ	0xFEA
 13673                           fsr0l	equ	0xFE9
 13674                           wreg	equ	0xFE8
 13675                           postdec1	equ	0xFE5
 13676                           fsr1h	equ	0xFE2
 13677                           fsr1l	equ	0xFE1
 13678                           indf2	equ	0xFDF
 13679                           postinc2	equ	0xFDE
 13680                           postdec2	equ	0xFDD
 13681                           fsr2h	equ	0xFDA
 13682                           fsr2l	equ	0xFD9
 13683                           status	equ	0xFD8
 13684                           
 13685 ;; *************** function i2_lcdNibble *****************
 13686 ;; Defined at:
 13687 ;;		line 24 in file "lcd.c"
 13688 ;; Parameters:    Size  Location     Type
 13689 ;;  data            1    wreg     unsigned char 
 13690 ;; Auto vars:     Size  Location     Type
 13691 ;;  data            1    1[COMRAM] unsigned char 
 13692 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 13693 ;; Return value:  Size  Location     Type
 13694 ;;                  1    wreg      void 
 13695 ;; Registers used:
 13696 ;;		wreg, status,2, status,0
 13697 ;; Tracked objects:
 13698 ;;		On entry : 0/0
 13699 ;;		On exit  : 0/0
 13700 ;;		Unchanged: 0/0
 13701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13703 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13705 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13706 ;;Total ram usage:        2 bytes
 13707 ;; Hardware stack levels used:    1
 13708 ;; This function calls:
 13709 ;;		Nothing
 13710 ;; This function is called by:
 13711 ;;		i2_lcdInst
 13712 ;;		i2_putch
 13713 ;; This function uses a non-reentrant model
 13714 ;;
 13715                           
 13716                           	psect	text67
 13717  0024F0                     __ptext67:
 13718                           	opt stack 0
 13719  0024F0                     i2_lcdNibble:
 13720                           	opt stack 19
 13721                           
 13722                           ;incstack = 0
 13723                           ;i2lcdNibble@data stored from wreg
 13724  0024F0  6E02               	movwf	i2lcdNibble@data,c
 13725                           
 13726                           ;lcd.c: 26: char temp = data & 0xF0;
 13727  0024F2  5002               	movf	i2lcdNibble@data,w,c
 13728  0024F4  0BF0               	andlw	240
 13729  0024F6  6E01               	movwf	i2lcdNibble@temp,c
 13730                           
 13731                           ;lcd.c: 27: LATD = LATD & 0x0F;
 13732  0024F8  508C               	movf	3980,w,c	;volatile
 13733  0024FA  0B0F               	andlw	15
 13734  0024FC  6E8C               	movwf	3980,c	;volatile
 13735                           
 13736                           ;lcd.c: 28: LATD = temp | LATD;
 13737  0024FE  5001               	movf	i2lcdNibble@temp,w,c
 13738  002500  108C               	iorwf	3980,w,c	;volatile
 13739  002502  6E8C               	movwf	3980,c	;volatile
 13740                           
 13741                           ;lcd.c: 30: LATDbits.LATD3 = 1;
 13742  002504  868C               	bsf	3980,3,c	;volatile
 13743                           
 13744                           ;lcd.c: 31: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13745  002506  0E42               	movlw	66
 13746  002508                     i2u544_47:
 13747  002508  2EE8               	decfsz	wreg,f,c
 13748  00250A  D7FE               	bra	i2u544_47
 13749  00250C  D000               	nop2	
 13750                           
 13751                           ;lcd.c: 32: LATDbits.LATD3 = 0;
 13752  00250E  968C               	bcf	3980,3,c	;volatile
 13753                           
 13754                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13755  002510  0E42               	movlw	66
 13756  002512                     i2u545_47:
 13757  002512  2EE8               	decfsz	wreg,f,c
 13758  002514  D7FE               	bra	i2u545_47
 13759  002516  D000               	nop2	
 13760                           
 13761                           ;lcd.c: 35: data = data << 4;
 13762  002518  3802               	swapf	i2lcdNibble@data,w,c
 13763  00251A  0BF0               	andlw	240
 13764  00251C  6E02               	movwf	i2lcdNibble@data,c
 13765                           
 13766                           ;lcd.c: 37: temp = data & 0xF0;
 13767  00251E  5002               	movf	i2lcdNibble@data,w,c
 13768  002520  0BF0               	andlw	240
 13769  002522  6E01               	movwf	i2lcdNibble@temp,c
 13770                           
 13771                           ;lcd.c: 38: LATD = LATD & 0x0F;
 13772  002524  508C               	movf	3980,w,c	;volatile
 13773  002526  0B0F               	andlw	15
 13774  002528  6E8C               	movwf	3980,c	;volatile
 13775                           
 13776                           ;lcd.c: 39: LATD = temp | LATD;
 13777  00252A  5001               	movf	i2lcdNibble@temp,w,c
 13778  00252C  108C               	iorwf	3980,w,c	;volatile
 13779  00252E  6E8C               	movwf	3980,c	;volatile
 13780                           
 13781                           ;lcd.c: 41: LATDbits.LATD3 = 1;
 13782  002530  868C               	bsf	3980,3,c	;volatile
 13783                           
 13784                           ;lcd.c: 42: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13785  002532  0E42               	movlw	66
 13786  002534                     i2u546_47:
 13787  002534  2EE8               	decfsz	wreg,f,c
 13788  002536  D7FE               	bra	i2u546_47
 13789  002538  D000               	nop2	
 13790                           
 13791                           ;lcd.c: 43: LATDbits.LATD3 = 0;
 13792  00253A  968C               	bcf	3980,3,c	;volatile
 13793                           
 13794                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13795  00253C  0E42               	movlw	66
 13796  00253E                     i2u547_47:
 13797  00253E  2EE8               	decfsz	wreg,f,c
 13798  002540  D7FE               	bra	i2u547_47
 13799  002542  D000               	nop2	
 13800  002544  0012               	return		;funcret
 13801  002546                     __end_ofi2_lcdNibble:
 13802                           	opt stack 0
 13803                           pclatu	equ	0xFFB
 13804                           pclath	equ	0xFFA
 13805                           tblptru	equ	0xFF8
 13806                           tblptrh	equ	0xFF7
 13807                           tblptrl	equ	0xFF6
 13808                           tablat	equ	0xFF5
 13809                           prodh	equ	0xFF4
 13810                           prodl	equ	0xFF3
 13811                           intcon	equ	0xFF2
 13812                           intcon2	equ	0xFF1
 13813                           intcon3	equ	0xFF0
 13814                           indf0	equ	0xFEF
 13815                           postinc0	equ	0xFEE
 13816                           fsr0h	equ	0xFEA
 13817                           fsr0l	equ	0xFE9
 13818                           wreg	equ	0xFE8
 13819                           postdec1	equ	0xFE5
 13820                           fsr1h	equ	0xFE2
 13821                           fsr1l	equ	0xFE1
 13822                           indf2	equ	0xFDF
 13823                           postinc2	equ	0xFDE
 13824                           postdec2	equ	0xFDD
 13825                           fsr2h	equ	0xFDA
 13826                           fsr2l	equ	0xFD9
 13827                           status	equ	0xFD8
 13828                           
 13829 ;; *************** function i2_getRTC *****************
 13830 ;; Defined at:
 13831 ;;		line 43 in file "RTC.c"
 13832 ;; Parameters:    Size  Location     Type
 13833 ;;		None
 13834 ;; Auto vars:     Size  Location     Type
 13835 ;;  getRTC          2    3[COMRAM] int 
 13836 ;; Return value:  Size  Location     Type
 13837 ;;                  1    wreg      void 
 13838 ;; Registers used:
 13839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13840 ;; Tracked objects:
 13841 ;;		On entry : 0/0
 13842 ;;		On exit  : 0/0
 13843 ;;		Unchanged: 0/0
 13844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13846 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13848 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13849 ;;Total ram usage:        2 bytes
 13850 ;; Hardware stack levels used:    1
 13851 ;; Hardware stack levels required when called:    2
 13852 ;; This function calls:
 13853 ;;		i2_I2C_Master_Read
 13854 ;;		i2_I2C_Master_Start
 13855 ;;		i2_I2C_Master_Stop
 13856 ;;		i2_I2C_Master_Write
 13857 ;; This function is called by:
 13858 ;;		_printSortTimer
 13859 ;;		i2_printRTC
 13860 ;; This function uses a non-reentrant model
 13861 ;;
 13862                           
 13863                           	psect	text68
 13864  0022A4                     __ptext68:
 13865                           	opt stack 0
 13866  0022A4                     i2_getRTC:
 13867                           	opt stack 18
 13868                           
 13869                           ;RTC.c: 47: I2C_Master_Start();
 13870                           
 13871                           ;incstack = 0
 13872  0022A4  EC02  F016         	call	i2_I2C_Master_Start	;wreg free
 13873                           
 13874                           ;RTC.c: 48: I2C_Master_Write(0b11010000);
 13875  0022A8  0E00               	movlw	0
 13876  0022AA  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13877  0022AC  0ED0               	movlw	208
 13878  0022AE  6E02               	movwf	i2I2C_Master_Write@d,c
 13879  0022B0  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
 13880                           
 13881                           ;RTC.c: 49: I2C_Master_Write(0x00);
 13882  0022B4  0E00               	movlw	0
 13883  0022B6  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13884  0022B8  0E00               	movlw	0
 13885  0022BA  6E02               	movwf	i2I2C_Master_Write@d,c
 13886  0022BC  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
 13887                           
 13888                           ;RTC.c: 50: I2C_Master_Stop();
 13889  0022C0  ECFE  F015         	call	i2_I2C_Master_Stop	;wreg free
 13890                           
 13891                           ;RTC.c: 53: I2C_Master_Start();
 13892  0022C4  EC02  F016         	call	i2_I2C_Master_Start	;wreg free
 13893                           
 13894                           ;RTC.c: 54: I2C_Master_Write(0b11010001);
 13895  0022C8  0E00               	movlw	0
 13896  0022CA  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13897  0022CC  0ED1               	movlw	209
 13898  0022CE  6E02               	movwf	i2I2C_Master_Write@d,c
 13899  0022D0  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
 13900                           
 13901                           ;RTC.c: 55: for(int i = 0; i < 6; i++){
 13902  0022D4  0E00               	movlw	0
 13903  0022D6  6E05               	movwf	i2getRTC@i+1,c
 13904  0022D8  0E00               	movlw	0
 13905  0022DA  6E04               	movwf	i2getRTC@i,c
 13906  0022DC                     i2l4500:
 13907  0022DC  BE05               	btfsc	i2getRTC@i+1,7,c
 13908  0022DE  D006               	goto	i2l4504
 13909  0022E0  5005               	movf	i2getRTC@i+1,w,c
 13910  0022E2  E111               	bnz	i2l4510
 13911  0022E4  0E06               	movlw	6
 13912  0022E6  5C04               	subwf	i2getRTC@i,w,c
 13913  0022E8  B0D8               	btfsc	status,0,c
 13914  0022EA  D00D               	goto	i2l4510
 13915  0022EC                     i2l4504:
 13916                           
 13917                           ;RTC.c: 56: time[i] = I2C_Master_Read(1);
 13918  0022EC  0EDC               	movlw	low _time
 13919  0022EE  2404               	addwf	i2getRTC@i,w,c
 13920  0022F0  6ED9               	movwf	fsr2l,c
 13921  0022F2  0E00               	movlw	high _time
 13922  0022F4  2005               	addwfc	i2getRTC@i+1,w,c
 13923  0022F6  6EDA               	movwf	fsr2h,c
 13924  0022F8  0E01               	movlw	1
 13925  0022FA  EC3E  F015         	call	i2_I2C_Master_Read
 13926  0022FE  6EDF               	movwf	indf2,c
 13927  002300  4A04               	infsnz	i2getRTC@i,f,c
 13928  002302  2A05               	incf	i2getRTC@i+1,f,c
 13929  002304  D7EB               	goto	i2l4500
 13930  002306                     i2l4510:
 13931                           
 13932                           ;RTC.c: 57: }
 13933                           ;RTC.c: 58: time[6] = I2C_Master_Read(0);
 13934  002306  0E00               	movlw	0
 13935  002308  EC3E  F015         	call	i2_I2C_Master_Read
 13936  00230C  0100               	movlb	0	; () banked
 13937  00230E  6FE2               	movwf	(_time+6)& (0+255),b
 13938                           
 13939                           ;RTC.c: 59: I2C_Master_Stop();
 13940  002310  ECFE  F015         	call	i2_I2C_Master_Stop	;wreg free
 13941  002314  0012               	return		;funcret
 13942  002316                     __end_ofi2_getRTC:
 13943                           	opt stack 0
 13944                           pclatu	equ	0xFFB
 13945                           pclath	equ	0xFFA
 13946                           tblptru	equ	0xFF8
 13947                           tblptrh	equ	0xFF7
 13948                           tblptrl	equ	0xFF6
 13949                           tablat	equ	0xFF5
 13950                           prodh	equ	0xFF4
 13951                           prodl	equ	0xFF3
 13952                           intcon	equ	0xFF2
 13953                           intcon2	equ	0xFF1
 13954                           intcon3	equ	0xFF0
 13955                           indf0	equ	0xFEF
 13956                           postinc0	equ	0xFEE
 13957                           fsr0h	equ	0xFEA
 13958                           fsr0l	equ	0xFE9
 13959                           wreg	equ	0xFE8
 13960                           postdec1	equ	0xFE5
 13961                           fsr1h	equ	0xFE2
 13962                           fsr1l	equ	0xFE1
 13963                           indf2	equ	0xFDF
 13964                           postinc2	equ	0xFDE
 13965                           postdec2	equ	0xFDD
 13966                           fsr2h	equ	0xFDA
 13967                           fsr2l	equ	0xFD9
 13968                           status	equ	0xFD8
 13969                           
 13970 ;; *************** function i2_I2C_Master_Write *****************
 13971 ;; Defined at:
 13972 ;;		line 48 in file "I2C.c"
 13973 ;; Parameters:    Size  Location     Type
 13974 ;;  d               2    1[COMRAM] unsigned int 
 13975 ;; Auto vars:     Size  Location     Type
 13976 ;;		None
 13977 ;; Return value:  Size  Location     Type
 13978 ;;                  1    wreg      void 
 13979 ;; Registers used:
 13980 ;;		wreg, status,2, status,0, cstack
 13981 ;; Tracked objects:
 13982 ;;		On entry : 0/0
 13983 ;;		On exit  : 0/0
 13984 ;;		Unchanged: 0/0
 13985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13986 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13989 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13990 ;;Total ram usage:        2 bytes
 13991 ;; Hardware stack levels used:    1
 13992 ;; Hardware stack levels required when called:    1
 13993 ;; This function calls:
 13994 ;;		i2_I2C_Master_Wait
 13995 ;; This function is called by:
 13996 ;;		i2_getRTC
 13997 ;; This function uses a non-reentrant model
 13998 ;;
 13999                           
 14000                           	psect	text69
 14001  002BE2                     __ptext69:
 14002                           	opt stack 0
 14003  002BE2                     i2_I2C_Master_Write:
 14004                           	opt stack 18
 14005                           
 14006                           ;I2C.c: 50: I2C_Master_Wait();
 14007                           
 14008                           ;incstack = 0
 14009  002BE2  ECC7  F015         	call	i2_I2C_Master_Wait	;wreg free
 14010                           
 14011                           ;I2C.c: 51: SSPBUF = d;
 14012  002BE6  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 14013  002BEA  0012               	return		;funcret
 14014  002BEC                     __end_ofi2_I2C_Master_Write:
 14015                           	opt stack 0
 14016                           pclatu	equ	0xFFB
 14017                           pclath	equ	0xFFA
 14018                           tblptru	equ	0xFF8
 14019                           tblptrh	equ	0xFF7
 14020                           tblptrl	equ	0xFF6
 14021                           tablat	equ	0xFF5
 14022                           prodh	equ	0xFF4
 14023                           prodl	equ	0xFF3
 14024                           intcon	equ	0xFF2
 14025                           intcon2	equ	0xFF1
 14026                           intcon3	equ	0xFF0
 14027                           indf0	equ	0xFEF
 14028                           postinc0	equ	0xFEE
 14029                           fsr0h	equ	0xFEA
 14030                           fsr0l	equ	0xFE9
 14031                           wreg	equ	0xFE8
 14032                           postdec1	equ	0xFE5
 14033                           fsr1h	equ	0xFE2
 14034                           fsr1l	equ	0xFE1
 14035                           indf2	equ	0xFDF
 14036                           postinc2	equ	0xFDE
 14037                           postdec2	equ	0xFDD
 14038                           fsr2h	equ	0xFDA
 14039                           fsr2l	equ	0xFD9
 14040                           status	equ	0xFD8
 14041                           
 14042 ;; *************** function i2_I2C_Master_Stop *****************
 14043 ;; Defined at:
 14044 ;;		line 42 in file "I2C.c"
 14045 ;; Parameters:    Size  Location     Type
 14046 ;;		None
 14047 ;; Auto vars:     Size  Location     Type
 14048 ;;		None
 14049 ;; Return value:  Size  Location     Type
 14050 ;;                  1    wreg      void 
 14051 ;; Registers used:
 14052 ;;		wreg, status,2, status,0, cstack
 14053 ;; Tracked objects:
 14054 ;;		On entry : 0/0
 14055 ;;		On exit  : 0/0
 14056 ;;		Unchanged: 0/0
 14057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14062 ;;Total ram usage:        0 bytes
 14063 ;; Hardware stack levels used:    1
 14064 ;; Hardware stack levels required when called:    1
 14065 ;; This function calls:
 14066 ;;		i2_I2C_Master_Wait
 14067 ;; This function is called by:
 14068 ;;		i2_getRTC
 14069 ;; This function uses a non-reentrant model
 14070 ;;
 14071                           
 14072                           	psect	text70
 14073  002BFC                     __ptext70:
 14074                           	opt stack 0
 14075  002BFC                     i2_I2C_Master_Stop:
 14076                           	opt stack 18
 14077                           
 14078                           ;I2C.c: 44: I2C_Master_Wait();
 14079                           
 14080                           ;incstack = 0
 14081  002BFC  ECC7  F015         	call	i2_I2C_Master_Wait	;wreg free
 14082                           
 14083                           ;I2C.c: 45: PEN = 1;
 14084  002C00  84C5               	bsf	4037,2,c	;volatile
 14085  002C02  0012               	return		;funcret
 14086  002C04                     __end_ofi2_I2C_Master_Stop:
 14087                           	opt stack 0
 14088                           pclatu	equ	0xFFB
 14089                           pclath	equ	0xFFA
 14090                           tblptru	equ	0xFF8
 14091                           tblptrh	equ	0xFF7
 14092                           tblptrl	equ	0xFF6
 14093                           tablat	equ	0xFF5
 14094                           prodh	equ	0xFF4
 14095                           prodl	equ	0xFF3
 14096                           intcon	equ	0xFF2
 14097                           intcon2	equ	0xFF1
 14098                           intcon3	equ	0xFF0
 14099                           indf0	equ	0xFEF
 14100                           postinc0	equ	0xFEE
 14101                           fsr0h	equ	0xFEA
 14102                           fsr0l	equ	0xFE9
 14103                           wreg	equ	0xFE8
 14104                           postdec1	equ	0xFE5
 14105                           fsr1h	equ	0xFE2
 14106                           fsr1l	equ	0xFE1
 14107                           indf2	equ	0xFDF
 14108                           postinc2	equ	0xFDE
 14109                           postdec2	equ	0xFDD
 14110                           fsr2h	equ	0xFDA
 14111                           fsr2l	equ	0xFD9
 14112                           status	equ	0xFD8
 14113                           
 14114 ;; *************** function i2_I2C_Master_Start *****************
 14115 ;; Defined at:
 14116 ;;		line 30 in file "I2C.c"
 14117 ;; Parameters:    Size  Location     Type
 14118 ;;		None
 14119 ;; Auto vars:     Size  Location     Type
 14120 ;;		None
 14121 ;; Return value:  Size  Location     Type
 14122 ;;                  1    wreg      void 
 14123 ;; Registers used:
 14124 ;;		wreg, status,2, status,0, cstack
 14125 ;; Tracked objects:
 14126 ;;		On entry : 0/0
 14127 ;;		On exit  : 0/0
 14128 ;;		Unchanged: 0/0
 14129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14134 ;;Total ram usage:        0 bytes
 14135 ;; Hardware stack levels used:    1
 14136 ;; Hardware stack levels required when called:    1
 14137 ;; This function calls:
 14138 ;;		i2_I2C_Master_Wait
 14139 ;; This function is called by:
 14140 ;;		i2_getRTC
 14141 ;; This function uses a non-reentrant model
 14142 ;;
 14143                           
 14144                           	psect	text71
 14145  002C04                     __ptext71:
 14146                           	opt stack 0
 14147  002C04                     i2_I2C_Master_Start:
 14148                           	opt stack 18
 14149                           
 14150                           ;I2C.c: 32: I2C_Master_Wait();
 14151                           
 14152                           ;incstack = 0
 14153  002C04  ECC7  F015         	call	i2_I2C_Master_Wait	;wreg free
 14154                           
 14155                           ;I2C.c: 33: SEN = 1;
 14156  002C08  80C5               	bsf	4037,0,c	;volatile
 14157  002C0A  0012               	return		;funcret
 14158  002C0C                     __end_ofi2_I2C_Master_Start:
 14159                           	opt stack 0
 14160                           pclatu	equ	0xFFB
 14161                           pclath	equ	0xFFA
 14162                           tblptru	equ	0xFF8
 14163                           tblptrh	equ	0xFF7
 14164                           tblptrl	equ	0xFF6
 14165                           tablat	equ	0xFF5
 14166                           prodh	equ	0xFF4
 14167                           prodl	equ	0xFF3
 14168                           intcon	equ	0xFF2
 14169                           intcon2	equ	0xFF1
 14170                           intcon3	equ	0xFF0
 14171                           indf0	equ	0xFEF
 14172                           postinc0	equ	0xFEE
 14173                           fsr0h	equ	0xFEA
 14174                           fsr0l	equ	0xFE9
 14175                           wreg	equ	0xFE8
 14176                           postdec1	equ	0xFE5
 14177                           fsr1h	equ	0xFE2
 14178                           fsr1l	equ	0xFE1
 14179                           indf2	equ	0xFDF
 14180                           postinc2	equ	0xFDE
 14181                           postdec2	equ	0xFDD
 14182                           fsr2h	equ	0xFDA
 14183                           fsr2l	equ	0xFD9
 14184                           status	equ	0xFD8
 14185                           
 14186 ;; *************** function i2_I2C_Master_Read *****************
 14187 ;; Defined at:
 14188 ;;		line 54 in file "I2C.c"
 14189 ;; Parameters:    Size  Location     Type
 14190 ;;  a               1    wreg     unsigned char 
 14191 ;; Auto vars:     Size  Location     Type
 14192 ;;  a               1    1[COMRAM] unsigned char 
 14193 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 14194 ;; Return value:  Size  Location     Type
 14195 ;;                  1    wreg      unsigned char 
 14196 ;; Registers used:
 14197 ;;		wreg, status,2, status,0, cstack
 14198 ;; Tracked objects:
 14199 ;;		On entry : 0/0
 14200 ;;		On exit  : 0/0
 14201 ;;		Unchanged: 0/0
 14202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14204 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14206 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14207 ;;Total ram usage:        2 bytes
 14208 ;; Hardware stack levels used:    1
 14209 ;; Hardware stack levels required when called:    1
 14210 ;; This function calls:
 14211 ;;		i2_I2C_Master_Wait
 14212 ;; This function is called by:
 14213 ;;		i2_getRTC
 14214 ;; This function uses a non-reentrant model
 14215 ;;
 14216                           
 14217                           	psect	text72
 14218  002A7C                     __ptext72:
 14219                           	opt stack 0
 14220  002A7C                     i2_I2C_Master_Read:
 14221                           	opt stack 18
 14222                           
 14223                           ;incstack = 0
 14224                           ;i2I2C_Master_Read@a stored from wreg
 14225  002A7C  6E02               	movwf	i2I2C_Master_Read@a,c
 14226                           
 14227                           ;I2C.c: 56: unsigned char temp;
 14228                           ;I2C.c: 57: I2C_Master_Wait();
 14229  002A7E  ECC7  F015         	call	i2_I2C_Master_Wait	;wreg free
 14230                           
 14231                           ;I2C.c: 58: RCEN = 1;
 14232  002A82  86C5               	bsf	4037,3,c	;volatile
 14233                           
 14234                           ;I2C.c: 59: I2C_Master_Wait();
 14235  002A84  ECC7  F015         	call	i2_I2C_Master_Wait	;wreg free
 14236                           
 14237                           ;I2C.c: 60: temp = SSPBUF;
 14238  002A88  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 14239                           
 14240                           ;I2C.c: 61: I2C_Master_Wait();
 14241  002A8C  ECC7  F015         	call	i2_I2C_Master_Wait	;wreg free
 14242                           
 14243                           ;I2C.c: 62: ACKDT = (a)?0:1;
 14244  002A90  5002               	movf	i2I2C_Master_Read@a,w,c
 14245  002A92  A4D8               	btfss	status,2,c
 14246  002A94  D002               	goto	i2u267_40
 14247  002A96  8AC5               	bsf	4037,5,c	;volatile
 14248  002A98  D001               	goto	i2l4230
 14249  002A9A                     i2u267_40:
 14250  002A9A  9AC5               	bcf	4037,5,c	;volatile
 14251  002A9C                     i2l4230:
 14252                           
 14253                           ;I2C.c: 63: ACKEN = 1;
 14254  002A9C  88C5               	bsf	4037,4,c	;volatile
 14255                           
 14256                           ;I2C.c: 64: return temp;
 14257  002A9E  5003               	movf	i2I2C_Master_Read@temp,w,c
 14258  002AA0  0012               	return	
 14259  002AA2                     __end_ofi2_I2C_Master_Read:
 14260                           	opt stack 0
 14261                           pclatu	equ	0xFFB
 14262                           pclath	equ	0xFFA
 14263                           tblptru	equ	0xFF8
 14264                           tblptrh	equ	0xFF7
 14265                           tblptrl	equ	0xFF6
 14266                           tablat	equ	0xFF5
 14267                           prodh	equ	0xFF4
 14268                           prodl	equ	0xFF3
 14269                           intcon	equ	0xFF2
 14270                           intcon2	equ	0xFF1
 14271                           intcon3	equ	0xFF0
 14272                           indf0	equ	0xFEF
 14273                           postinc0	equ	0xFEE
 14274                           fsr0h	equ	0xFEA
 14275                           fsr0l	equ	0xFE9
 14276                           wreg	equ	0xFE8
 14277                           postdec1	equ	0xFE5
 14278                           fsr1h	equ	0xFE2
 14279                           fsr1l	equ	0xFE1
 14280                           indf2	equ	0xFDF
 14281                           postinc2	equ	0xFDE
 14282                           postdec2	equ	0xFDD
 14283                           fsr2h	equ	0xFDA
 14284                           fsr2l	equ	0xFD9
 14285                           status	equ	0xFD8
 14286                           
 14287 ;; *************** function i2_I2C_Master_Wait *****************
 14288 ;; Defined at:
 14289 ;;		line 25 in file "I2C.c"
 14290 ;; Parameters:    Size  Location     Type
 14291 ;;		None
 14292 ;; Auto vars:     Size  Location     Type
 14293 ;;		None
 14294 ;; Return value:  Size  Location     Type
 14295 ;;                  1    wreg      void 
 14296 ;; Registers used:
 14297 ;;		wreg, status,2, status,0
 14298 ;; Tracked objects:
 14299 ;;		On entry : 0/0
 14300 ;;		On exit  : 0/0
 14301 ;;		Unchanged: 0/0
 14302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14305 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14306 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14307 ;;Total ram usage:        1 bytes
 14308 ;; Hardware stack levels used:    1
 14309 ;; This function calls:
 14310 ;;		Nothing
 14311 ;; This function is called by:
 14312 ;;		i2_I2C_Master_Start
 14313 ;;		i2_I2C_Master_Stop
 14314 ;;		i2_I2C_Master_Write
 14315 ;;		i2_I2C_Master_Read
 14316 ;; This function uses a non-reentrant model
 14317 ;;
 14318                           
 14319                           	psect	text73
 14320  002B8E                     __ptext73:
 14321                           	opt stack 0
 14322  002B8E                     i2_I2C_Master_Wait:
 14323                           	opt stack 18
 14324  002B8E                     i2l168:
 14325  002B8E  B4C7               	btfsc	4039,2,c	;volatile
 14326  002B90  D7FE               	goto	i2l168
 14327  002B92  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 14328  002B96  0E1F               	movlw	31
 14329  002B98  1601               	andwf	??i2_I2C_Master_Wait,f,c
 14330  002B9A  B4D8               	btfsc	status,2,c
 14331  002B9C  0012               	return	
 14332  002B9E  D7F7               	goto	i2l168
 14333  002BA0                     __end_ofi2_I2C_Master_Wait:
 14334                           	opt stack 0
 14335                           pclatu	equ	0xFFB
 14336                           pclath	equ	0xFFA
 14337                           tblptru	equ	0xFF8
 14338                           tblptrh	equ	0xFF7
 14339                           tblptrl	equ	0xFF6
 14340                           tablat	equ	0xFF5
 14341                           prodh	equ	0xFF4
 14342                           prodl	equ	0xFF3
 14343                           intcon	equ	0xFF2
 14344                           intcon2	equ	0xFF1
 14345                           intcon3	equ	0xFF0
 14346                           indf0	equ	0xFEF
 14347                           postinc0	equ	0xFEE
 14348                           fsr0h	equ	0xFEA
 14349                           fsr0l	equ	0xFE9
 14350                           wreg	equ	0xFE8
 14351                           postdec1	equ	0xFE5
 14352                           fsr1h	equ	0xFE2
 14353                           fsr1l	equ	0xFE1
 14354                           indf2	equ	0xFDF
 14355                           postinc2	equ	0xFDE
 14356                           postdec2	equ	0xFDD
 14357                           fsr2h	equ	0xFDA
 14358                           fsr2l	equ	0xFD9
 14359                           status	equ	0xFD8
 14360                           pclatu	equ	0xFFB
 14361                           pclath	equ	0xFFA
 14362                           tblptru	equ	0xFF8
 14363                           tblptrh	equ	0xFF7
 14364                           tblptrl	equ	0xFF6
 14365                           tablat	equ	0xFF5
 14366                           prodh	equ	0xFF4
 14367                           prodl	equ	0xFF3
 14368                           intcon	equ	0xFF2
 14369                           intcon2	equ	0xFF1
 14370                           intcon3	equ	0xFF0
 14371                           indf0	equ	0xFEF
 14372                           postinc0	equ	0xFEE
 14373                           fsr0h	equ	0xFEA
 14374                           fsr0l	equ	0xFE9
 14375                           wreg	equ	0xFE8
 14376                           postdec1	equ	0xFE5
 14377                           fsr1h	equ	0xFE2
 14378                           fsr1l	equ	0xFE1
 14379                           indf2	equ	0xFDF
 14380                           postinc2	equ	0xFDE
 14381                           postdec2	equ	0xFDD
 14382                           fsr2h	equ	0xFDA
 14383                           fsr2l	equ	0xFD9
 14384                           status	equ	0xFD8
 14385                           
 14386                           	psect	rparam
 14387  0000                     pclatu	equ	0xFFB
 14388                           pclath	equ	0xFFA
 14389                           tblptru	equ	0xFF8
 14390                           tblptrh	equ	0xFF7
 14391                           tblptrl	equ	0xFF6
 14392                           tablat	equ	0xFF5
 14393                           prodh	equ	0xFF4
 14394                           prodl	equ	0xFF3
 14395                           intcon	equ	0xFF2
 14396                           intcon2	equ	0xFF1
 14397                           intcon3	equ	0xFF0
 14398                           indf0	equ	0xFEF
 14399                           postinc0	equ	0xFEE
 14400                           fsr0h	equ	0xFEA
 14401                           fsr0l	equ	0xFE9
 14402                           wreg	equ	0xFE8
 14403                           postdec1	equ	0xFE5
 14404                           fsr1h	equ	0xFE2
 14405                           fsr1l	equ	0xFE1
 14406                           indf2	equ	0xFDF
 14407                           postinc2	equ	0xFDE
 14408                           postdec2	equ	0xFDD
 14409                           fsr2h	equ	0xFDA
 14410                           fsr2l	equ	0xFD9
 14411                           status	equ	0xFD8
 14412                           
 14413                           	psect	temp
 14414  00007C                     btemp:
 14415                           	opt stack 0
 14416  00007C                     	ds	1
 14417  0000                     int$flags	set	btemp
 14418                           pclatu	equ	0xFFB
 14419                           pclath	equ	0xFFA
 14420                           tblptru	equ	0xFF8
 14421                           tblptrh	equ	0xFF7
 14422                           tblptrl	equ	0xFF6
 14423                           tablat	equ	0xFF5
 14424                           prodh	equ	0xFF4
 14425                           prodl	equ	0xFF3
 14426                           intcon	equ	0xFF2
 14427                           intcon2	equ	0xFF1
 14428                           intcon3	equ	0xFF0
 14429                           indf0	equ	0xFEF
 14430                           postinc0	equ	0xFEE
 14431                           fsr0h	equ	0xFEA
 14432                           fsr0l	equ	0xFE9
 14433                           wreg	equ	0xFE8
 14434                           postdec1	equ	0xFE5
 14435                           fsr1h	equ	0xFE2
 14436                           fsr1l	equ	0xFE1
 14437                           indf2	equ	0xFDF
 14438                           postinc2	equ	0xFDE
 14439                           postdec2	equ	0xFDD
 14440                           fsr2h	equ	0xFDA
 14441                           fsr2l	equ	0xFD9
 14442                           status	equ	0xFD8


Data Sizes:
    Strings     558
    Constant    27
    Data        12
    BSS         81
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     123
    BANK0           128     84     126
    BANK1           256      0      18
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), STR_44(CODE[4]), 
		 -> STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), STR_40(CODE[4]), 
		 -> STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), STR_36(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_51(CODE[7]), printRTC@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_50(CODE[21]), STR_49(CODE[11]), STR_48(CODE[24]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[17]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[17]), 
		 -> STR_22(CODE[17]), STR_21(CODE[17]), STR_20(CODE[17]), STR_19(CODE[17]), 
		 -> STR_18(CODE[17]), STR_17(CODE[17]), STR_16(CODE[17]), STR_15(CODE[17]), 
		 -> STR_14(CODE[3]), STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), 
		 -> STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[18]), STR_7(CODE[10]), 
		 -> STR_6(CODE[17]), STR_5(CODE[7]), STR_4(CODE[17]), STR_3(CODE[18]), 
		 -> STR_2(CODE[21]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_initSortTimer
    _initSortTimer->_getRTC
    _initServos->_updateServoPosition
    _ID->_readMAG
    _readMAG->_readADC
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    ___awdiv->___awmod

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   40659
                         _PortTestA5
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0    3031
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              9     9      0    2936
                                             10 BANK0      9     9      0
                          _initFlags
                         _initServos
                      _initSortTimer
                            _lcdInst
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initServos                                           0     0      0     901
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _updateServoPosition                                  8     4      4     901
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _initFlags                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0      95
                                              6 BANK0      8     8      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   13210
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   12360
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  16    16      0   23745
                                             68 BANK0     16    16      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0    7532
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1611
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    4828
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    4828
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              33    21     12    4693
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     593
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     680
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _PortTestA5                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   73560
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   68752
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7546
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4506
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30400
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2     406
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4808
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    2905
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     417
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PortTestA5
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _machineConfig
   _sort
     _Distribution
     _ID
       _readMAG
         _readADC
     _Loading
       _initFlags
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _updateServoPosition
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      12       7        7.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     54      7E       5       98.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7B       1       97.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10B      34        0.0%
DATA                 0      0     10B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Feb 25 15:03:38 2017

                   i2_I2C_Master_Start 2C04                     i2_I2C_Master_Write 2BE2  
                                   _ID 1BFE                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C7  
                                  l251 2B7C                                    l254 2B82  
                                  l168 2B54                                    l374 00E0  
                                  l748 2084                                    l967 0D7C  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                         __CFG_CPD$OFF 000000                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00F1  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B        __end_of_change_state_to_menu_11 2860  
      __end_of_change_state_to_menu_12 26CC        __end_of_change_state_to_menu_22 2694  
      __end_of_change_state_to_menu_23 2830           _f_can_coming_to_distribution 00EB  
                       ??_Distribution 0080        __end_of_change_state_to_logs_11 2950  
      __end_of_change_state_to_logs_12 2920        __end_of_change_state_to_logs_22 28F0  
      __end_of_change_state_to_logs_23 29AC        __end_of_change_state_to_logs_33 28C0  
      __end_of_change_state_to_logs_34 2890                                   ??_ID 0086  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1164 226A  
                                 l4200 239E                                   l4202 23A4  
                                 l5100 1292                                   l4206 23C8  
                                 l4302 29C0                                   l5110 12BA  
                                 l4400 0844                                   l4312 0584  
                                 l4144 2976                                   l4304 29D2  
                                 l5104 129C                                   l1745 2224  
                                 l4162 2A24                                   l4322 05B4  
                                 l5130 131C                                   l5122 12FA  
                                 l5114 12C4                                   l1755 23D6  
                                 l4180 21E0                                   l4420 08C8  
                                 l4412 08A0                                   l4404 087C  
                                 l4316 0598                                   l1692 1E38  
                                 l5140 1344                                   l5132 1322  
                                 l5108 12B4                                   l5310 1F6A  
                                 l5302 1F34                                   l4190 2216  
                                 l4182 21E6                                   l4430 08FC  
                                 l4406 0886                                   l4318 05AA  
                                 l5126 1304                                   l5118 12DC  
                                 l5304 1F40                                   l4424 08E2  
                                 l4360 0738                                   l4344 0696  
                                 l4336 0664                                   l4328 05E8  
                                 l5152 1384                                   l5144 1362  
                                 l5136 132C                                   l5250 1CEC  
                                 l5306 1F46                                   l5314 1F78  
                                 l4178 21D4                                   l4434 0954  
                                 l4418 08BC                                   l4354 070E  
                                 l4346 06A2                                   l4370 07B0  
                                 l4442 2170                                   l5234 1CBA  
                                 l5170 13EC                                   l5162 13AC  
                                 l5154 138A                                   l4428 08F6  
                                 l4380 07E0                                   l4364 0764  
                                 l4356 071A                                   l4348 06A8  
                                 l4436 0960                                   l4452 21A6  
                                 l5412 01B8                                   l5404 0196  
                                 l5180 1414                                   l5148 136C  
                                 l5262 1D20                                   l5318 1F8C  
                                 l4198 2392                                   l4382 07E6  
                                 l4358 0720                                   l4446 2186  
                                 l4702 0EEE                                   l5502 0340  
                                 l5422 01D4                                   l4462 2256  
                                 l5174 1404                                   l5166 13E2  
                                 l5158 1394                                   l5264 1D2C  
                                 l5256 1D02                                   l4368 077C  
                                 l4456 270C                                   l4704 0F4C  
                                 l5408 01A0                                   l4480 1DD2  
                                 l4464 2280                                   l5176 140A  
                                 l5184 142C                                   l5282 1D84  
                                 l5274 1D62                                   l5266 1D32  
                                 l4394 0822                                   l4458 2718  
                                 l5506 0358                                   l5426 01EC  
                                 l5418 01CA                                   l4802 1E6E  
                                 l5612 0528                                   l5604 0506  
                                 l5532 03D0                                   l5524 03AE  
                                 l5452 0264                                   l5444 0242  
                                 l5372 00F8                                   l4476 1DBC  
                                 l4900 1FEE                                   l5278 1D70  
                                 l5294 1F10                                   l4670 0CFA  
                                 l5622 0544                                   l5542 03EC  
                                 l5462 0280                                   l5390 0144  
                                 l5382 011A                                   l5630 0568  
                                 l5374 00FE                                   l4478 1DCC  
                                 l5198 1464                                   l4680 0DC2  
                                 l5608 0510                                   l5528 03B8  
                                 l5448 024C                                   l4488 1E26  
                                 l4808 1EE4                                   l5298 1F20  
                                 l4690 0E58                                   l4682 0DE0  
                                 l5626 055C                                   l5618 053A  
                                 l5546 0404                                   l5538 03E2  
                                 l5466 0298                                   l5458 0276  
                                 l5386 0132                                   l5378 0110  
                                 l4906 201A                                   l4692 0E76  
                                 l4684 0DFE                                   l4676 0D86  
                                 l5572 047C                                   l5564 045A  
                                 l5492 0324                                   l5484 0302  
                                 l4694 0E94                                   l4686 0E1C  
                                 l4678 0DA4                                   l5582 0498  
                                 _ADIE 007CEE                                   l4696 0EB2  
                                 l4688 0E3A                                   l5568 0464  
                                 l5488 030C                                   _ADFM 007E07  
                                 l4698 0ED0                                   l5586 04B0  
                                 l5578 048E                                   l5498 0336  
                                 l5930 2066                                   l4798 1E58  
                                 l5926 205A                                   l5942 2086  
                                 l4896 1FD8                                   l5936 207A  
                                 l5928 2060                                   l5938 2080  
                                 _ADON 007E10                                   STR_1 FEBA  
                                 STR_2 FDE8                                   STR_3 FDFD  
                                 STR_4 FF86                                   STR_5 FFC4  
                                 STR_6 FEFE                                   STR_7 FFB3  
                                 STR_8 FE0F                                   STR_9 FE98  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u3400 24E8  
                                 u3430 0D7C                                   u3415 2410  
                                 u2570 2974                                   u5107 1374  
                                 u2820 06E2                                   u5117 139C  
                                 u3390 24E6                                   u5207 0122  
                                 u5127 13F4                                   u5217 0152  
                                 u5137 141C                                   u5057 1278  
                                 u2827 06D8                                   u5307 0372  
                                 u5227 01A8                                   u5147 1C18  
                                 u5067 12A4                                   _PEIE 007F96  
                                 u2860 075A                                   u5317 03C0  
                                 u5237 01DC                                   u5157 1C92  
                                 u5077 12CC                                   u3830 1C50  
                                 u5407 2340                                   u5327 03F4  
                                 u5247 0206                                   u5167 29C8  
                                 u5087 130C                                   u5417 236C  
                                 u5337 041E                                   u5257 0254  
                                 u5177 25A0                                   u5097 1334  
                                 u5427 2376                                   u2867 0750  
                                 u5347 046C                                   u5267 0288  
                                 u5187 25D4                                   u3860 1CAA  
                                 _RCEN 007E2B                                   u5357 04A0  
                                 u5277 02B2                                   u5197 002A  
                                 u3838 1C54                                   u5367 04CA  
                                 u5287 0314                                   u5377 0518  
                                 u5297 0348                                   u5387 054C  
                                 u3868 1CAE                                   u5397 2336  
                                 _THIR 007A                                   _RSEN 007E29  
                          _stopSignals 2B3E                                   _back 0063  
                                 _main 2022                                   _down 006D  
                                 _keys FDB5                                   _time 00DC  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 2AA2  
                                 btemp 007C                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                        __end_ofi2_putch 2BCC  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 148A                            i2_lcdNibble 24F0  
                      __end_of_Loading 148A                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 1D8E                                  STR_10 FEDC  
                                STR_11 FEA9                                  STR_20 FF64  
                                STR_12 FEED                                  STR_13 FECB  
                                STR_21 FE65                                  STR_30 FE32  
                                STR_22 FE76                                  STR_14 FFFB  
                                STR_15 FF97                                  STR_23 FF53  
                                STR_31 FF31                                  STR_32 FF31  
                                STR_40 FFF7                                  STR_16 FF75  
                                STR_24 FF0F                                  STR_41 FFDF  
                                STR_17 FE76                                  STR_33 FE54  
                                STR_25 FE32                                  STR_34 FE43  
                                STR_50 FDE8                                  STR_42 FFD7  
                                STR_18 FE87                                  STR_26 FE21  
                                STR_43 FFD3                                  STR_51 FFBD  
                                STR_19 FF64                                  STR_35 FF42  
                                STR_27 FF20                                  STR_28 FF20  
                                STR_44 FFE3                                  STR_36 FFDB  
                      __end_of___awmod 1F96                                  STR_45 FFEF  
                                STR_37 FFCB                                  STR_29 FE43  
                                STR_46 FFF3                                  STR_38 FFE7  
                                STR_39 FFEB                                  STR_47 FFCF  
                                STR_48 FDD0                                  STR_49 FFA8  
                                ?_sort 0001                        __end_of___lldiv 1E4A  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                                  _T3CON 000FB1  
                      __end_of___lwdiv 222E                        __end_of___lwmod 23E0  
                                i2l168 2B8E                                  i2l426 124C  
                      ___awdiv@counter 008A                                  i2l967 1518  
                                _VCFG0 007E0C                                  _VCFG1 007E0D  
                                _THMAG 00F8                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 2BC0                        __end_of_handler 1BFE  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 29D8  
                      __end_of_initLCD 25DE                         __CFG_EBTRB$OFF 000000  
                           i2isdigit@c 0003                        __end_of_loadRTC 2022  
                      __end_of_readMAG 24F0                        __end_of_dpowers FDD0  
                                _first 00FC                                  _enter 006F  
                      __end_of_isdigit 2A2E                                  _input 0079  
                                _putch 2BA0                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 2A7C  
                     __end_ofi2_getRTC 2316                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 0CC6                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 27A0  
                     _count_can_no_lab 0065                        __initialization 20AA  
                   __size_ofi2_lcdInst 000C                           __end_of_main 20AA  
                         __end_of_keys FDC6                           __end_of_sort 2AC4  
                           i2printf@ap 001E                             i2printf@cp 0020  
                   __size_ofi2_isdigit 001E    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00D4  
                               ??_sort 0093                          __activetblptr 000003  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                      ?_I2C_Master_Write 0081  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADRESH 000FC4                                 _ADRESL 000FC3  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 27D0  
            i2_change_state_to_menu_22 27A0                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1271 1BC2                                 i2l1265 1B56  
                               i2l1269 1BA2                                 i2l5012 19B2  
                               i2l4230 2A9C                                 i2l5022 19D8  
                               i2l5006 19A4                                 i2l5040 1A12  
                               i2l5032 19FA                                 i2l5016 19CE  
                               i2l1745 258E                                 i2l5050 1A32  
                               i2l5026 19EC                                 i2l1755 2616  
                               i2l4500 22DC                                 i2l5028 19F0  
                               i2l6012 1B74                                 i2l4510 2306  
                               i2l4254 2B1C                                 i2l5062 1A68  
                               i2l5054 1A44                                 i2l5046 1A20  
                               i2l6014 1B76                                 i2l4504 22EC  
                               i2l4264 255C                                 i2l4520 09A8  
                               i2l4266 2564                                 i2l4602 0BC8  
                               i2l4530 09E0                                 i2l4514 098A  
                               i2l5058 1A56                                 i2l6210 1960  
                               i2l6202 1200                                 i2l4276 2584  
                               i2l4268 2568                                 i2l4292 260C  
                               i2l4284 25EC                                 i2l4620 0C20  
                               i2l4524 09AE                                 i2l6212 197C  
                               i2l5068 1A72                                 i2l6204 1222  
                               i2l6036 1BC0                                 i2l4286 25F4  
                               i2l4622 0C28                                 i2l4630 0C4E  
                               i2l4614 0C0A                                 i2l4606 0BEC  
                               i2l4550 0A78                                 i2l4518 099A  
                               i2l6206 123E                                 i2l4288 25F8  
                               i2l4632 0C54                                 i2l4608 0BF4  
                               i2l4560 0AD2                                 i2l4626 0C3C  
                               i2l4562 0AE4                                 i2l4546 0A6A  
                               i2l4538 0A42                                 i2l4570 0B20  
                               i2l4642 2778                                 i2l4636 0CA2  
                               i2l4556 0AC2                                 i2l4548 0A74  
                               i2l4572 0B50                                 i2l4644 2780  
                               i2l4582 0B78                                 i2l4566 0B0E  
                               i2l4558 0ACC                                 i2l4638 0CAA  
                               i2l5710 10B0                                 i2l5702 1094  
                               i2l4584 0B7C                                 i2l5640 0FC0  
                               i2l5730 10FE                                 i2l5722 10E2  
                               i2l5714 10BE                                 i2l5706 10A2  
                               i2l5650 0FE2                                 i2l5642 0FC6  
                               i2l4596 0BAE                                 i2l4860 1564  
                               i2l4950 18D8                                 i2l4870 15D2  
                               i2l4862 157A                                 i2l4854 1522  
                               i2l5750 1154                                 i2l5742 1130  
                               i2l5734 1114                                 i2l5726 10F0  
                               i2l5718 10D4                                 i2l5670 101A  
                               i2l5654 0FF0                                 i2l5646 0FD4  
                               i2l4960 1902                                 i2l4872 15E8  
                               i2l4864 1590                                 i2l4856 1538  
                               i2l4880 162A                                 i2l4848 14B6  
                               i2l4962 1906                                 i2l4874 15FE  
                               i2l4866 15A6                                 i2l4858 154E  
                               i2l4882 1684                                 i2l5770 11A2  
                               i2l5762 117E                                 i2l5754 1162  
                               i2l5746 113E                                 i2l5738 1122  
                               i2l5690 1062                                 i2l5682 1046  
                               i2l5674 1028                                 i2l5666 100C  
                               i2l5658 0FFE                                 i2l4980 193C  
                               i2l4972 1924                                 i2l4876 1614  
                               i2l4868 15BC                                 i2l4982 1942  
                               i2l4974 192A                                 i2l4958 18F2  
                               i2l5782 11D4                                 i2l5774 11B0  
                               i2l5766 1194                                 i2l5758 1170  
                               i2l5694 1070                                 i2l5686 1054  
                               i2l5678 1038                                 i2l4976 1930  
                               i2l4968 1910                                 i2l5882 16DC  
                               i2l4978 1936                                 i2l4986 1948  
                               i2l5778 11BE                                 i2l5698 107E  
                               i2l5788 11E2                                 i2l5878 16CC  
                               i2l4998 198C                                 i2l5990 1B2A  
                               i2l5888 1736                                 i2l5976 1B0E  
                               i2l5898 17F8                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                               _TMR3CF 005D                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 008A                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 2B7C                            ?i2_printRTC 0001  
                 __end_of_Distribution 2B06                                 ___wmul 2738  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                            ??___awmod 0084                                 _getRTC 2130  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 2AE6                                 _initUI 2B24  
                               clear_0 2108                                 clear_1 2114  
                               clear_2 2120                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestA5 2B7C  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 0576                              ??_handler 004B  
                               _strcpy 2702                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 2A56  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 2A2E  
                         __pdataCOMRAM 007A                              ??_isdigit 0080  
                    __end_ofi2___lwdiv 2598                       __end_of_printRTC 0F90  
                         __mediumconst FDB4                      __end_ofi2___lwmod 2620  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                      __end_ofi2_lcdInst 2BD8  
                    __end_ofi2_isdigit 2B24                             __accesstop 0080  
              __end_of__initialization 2126                          ?_inputHandler 002A  
                        ___rparam_used 000001                printSortTimer@start_sec 003B  
                   i2___lwmod@dividend 0001                         __pcstackCOMRAM 0001  
                         __pidataBANK0 2C0C                           __pidataBANK1 2C12  
                          i2printRTC@i 0041                          _initSortTimer 1E4A  
          __end_of_updateServoPosition 22A4                          __end_of_putch 2BB0  
                          i2printf@len 0024                            i2printf@val 0022  
                           __end_of_ID 1CD0                             __end_of_UI 0576  
                   printSortTimer@hour 003F                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 2A04          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 29D8                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0069                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                             __pbssBANK0 00D4  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                     __size_of_initFlags 003C  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_602 00D2                                UI@i_603 00D3  
                       ?_initSortTimer 0001                                UI@i_590 00CC  
                              UI@i_582 00C8                                UI@i_591 00CD  
                              UI@i_583 00C9                                UI@i_594 00CE  
                              UI@i_586 00CA                                UI@i_595 00CF  
                              UI@i_587 00CB                                UI@i_598 00D0  
                              UI@i_599 00D1                                ?___wmul 0080  
                              ?_getRTC 0001                                ?_initUI 0001  
             updateServoPosition@timer 0082                            ?_PortTestA5 0001  
                              ?_printf 008E              ID@top_bottom_conductivity 0088  
                              _UI$2010 00C5                                ?_strcpy 0080  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0001                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              i2_putch 2BC0                              ?_initTime 0080  
                      _f_loadingNewCan 00EF                        i2printRTC@month 003D  
                __size_of_Distribution 0020            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 237E                                _Loading 1250  
          __size_ofi2_I2C_Master_Write 000A                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 1CD0                                ___awmod 1EF4  
                           _initServos 26CC                                ___lldiv 1D8E  
                      __size_of___wmul 0036                                ___lwdiv 21B6  
                              ___lwmod 237E                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                      __size_of_initUI 001A                                __pcinit 20AA  
                              __ramtop 1000                                _lcdInst 2BB0  
                              _handler 0008                                __ptext0 2022  
                              __ptext1 2B3E                                __ptext2 2AA2  
                              __ptext3 1250                                __ptext4 1E4A  
                              __ptext5 26CC                                __ptext6 222E  
                              __ptext7 2620                                __ptext8 1BFE  
                              __ptext9 249A                      __end_of_initFlags 265C  
                      __size_of_printf 040A                                _readADC 29AC  
                      __size_of_strcpy 0036                                _initLCD 2598  
                              _loadRTC 1F96                                _readMAG 249A  
                              _dpowers FDC6                                _isdigit 2A04  
                     ___awmod@dividend 0080                                getRTC@i 0083  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                              _was_low 0077                             ??_dispLogs 0003  
                         _Distribution 2AE6                         __pintcode_body 1AA0  
                 end_of_initialization 2126                             ??_initTime 0086  
                              int_func 1AA0                    i2___wmul@multiplier 0001  
                  __size_of_PortTestA5 0012              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                           _servoTimes 00D4                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 1AA0  
                __end_of_machineConfig 249A                             _updateMenu 0F90  
                    i2_I2C_Master_Read 2A7C                              _IR_signal 005B  
                    i2_I2C_Master_Wait 2B8E                      i2_I2C_Master_Stop 2BFC  
                    i2___lwdiv@divisor 0008                              i2___lwdiv 2546  
                            i2___lwmod 25DE                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 16C0                     ?i2_I2C_Master_Stop 0001  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 2BCC  
                        Loading@i_1260 008C                          Loading@i_1261 008D  
                        Loading@i_1262 008E                          Loading@i_1263 008F  
                        Loading@i_1264 0090                          Loading@i_1265 0091  
                        Loading@i_1266 0092                             _total_time 00F5  
                          printf@width 00A9                   __size_of_stopSignals 0016  
                           ID@magnetic 008C                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 2B06                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                            _UIenabled 0061                            ?_initServos 0001  
                       __end_of___wmul 276E                         __end_of_getRTC 21B6  
                 __size_ofi2_lcdNibble 0056                          __pidataCOMRAM 2C16  
                        i2lcdInst@data 0003                         __end_of_initUI 2B3E  
                     i2___wmul@product 0005                         __end_of_printf 0980  
                         i2printf@flag 0026                         __end_of_strcpy 2738  
            __end_ofi2_I2C_Master_Read 2AA2              __end_ofi2_I2C_Master_Wait 2BA0  
                         i2printf@prec 001D                    start_initialization 20AA  
            __end_ofi2_I2C_Master_Stop 2C04                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 0067  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                i2I2C_Master_Read@temp 0003                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 0346  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                               ??___wmul 0084  
                             ??_getRTC 0083                            __pdataBANK0 00F8  
                          __pdataBANK1 010E                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                           ??_PortTestA5 0080  
               printSortTimer@timeDiff 0047       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2125 0045  
                          __pbssCOMRAM 005B           __size_of_updateServoPosition 0076  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 01FA                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$1652 0081  
                       initSortTimer@i 0088                      printSortTimer@min 0041  
                    printSortTimer@sec 0043                    __size_of_initServos 0036  
                    __size_of_dispLogs 0014                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 006B                     __end_of_PortTestA5 2B8E  
                     _I2C_Master_Start 2BF4                              _f_lastCan 00ED  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 2BD8                      __size_of_initTime 0022  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                          __pmediumconst FDB4  
                            _lcdNibble 2316                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                               ?___lwdiv 0080  
                             ?___lwmod 0087                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0073                              _initFlags 2620  
                            _cur_state 00E7                       ___lwdiv@quotient 0084  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 00D2  
                          __size_of_UI 0564             __end_ofi2_I2C_Master_Start 2C0C  
           __end_ofi2_I2C_Master_Write 2BEC                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                         _inputHandler 18BA                            ??i2_isdigit 0001  
                             i2u320_40 0B06                               i2u320_47 0AFC  
                             i2u316_40 0AA6                               i2u316_47 0A9C  
                             i2u267_40 2A9A                               i2u347_40 1518  
                             i2u543_47 18F8                               i2u544_47 2508  
                             i2u545_47 2512                               i2u490_40 17F2  
                             i2u546_47 2534                               i2u547_47 253E  
                  __size_of_updateMenu 02C0                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                    ID@side_conductivity 008A  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 0100                               i2___wmul 2A56  
                        lcdNibble@data 0081                               i2_getRTC 22A4  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                             ?_initFlags 0001  
                             Loading@i 008B                               i2_printf 0980  
                             i2_strcpy 276E                    I2C_Master_Read@temp 0082  
                            copy_data0 20BE                              copy_data1 20DE  
                     __size_ofi2_putch 000C                            _count_total 00E5  
                             __Hrparam 0000                       __size_of_Loading 023A  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                __end_of_initSortTimer 1EF4                           ??_initServos 0088  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 2830             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 2694             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 265C                _change_state_to_menu_23 2800  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 2920  
              _change_state_to_logs_12 28F0                _change_state_to_logs_22 28C0  
              _change_state_to_logs_23 297E                _change_state_to_logs_33 2890  
              _change_state_to_logs_34 2860                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 1BF6  
                      _I2C_Master_Init 23E0                       __size_of_readADC 002C  
                      _I2C_Master_Read 2950                       __size_of_initLCD 0046  
                         _f_ID_receive 00FA                       __size_of_loadRTC 008C  
                     __size_of_readMAG 0056                        _I2C_Master_Wait 2B54  
                      _I2C_Master_Stop 2BEC                       __size_of_isdigit 002A  
                       _printSortTimer 16C0                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                               __ptext10 29AC  
                             __ptext11 2AE6                               __ptext20 0012  
                             __ptext12 2440                               __ptext21 0CC6  
                             __ptext13 2B24                               __ptext30 2694  
                             __ptext22 2702                               __ptext14 1F96  
                             __ptext31 0576                               __ptext23 2130  
                             __ptext15 23E0                               __ptext40 1CD0  
                             __ptext32 2BA0                               __ptext24 2BD8  
                             __ptext16 1D8E                               __ptext41 2B7C  
                             __ptext33 2A04                               __ptext25 2BEC  
                             __ptext17 29D8                               __ptext50 2800  
                             __ptext34 2738                               __ptext26 2BF4  
                             __ptext18 2AC4                               __ptext51 2830  
                             __ptext43 0F90                               __ptext35 237E  
                             __ptext27 2950                               __ptext19 2598  
                             __ptext60 0980                               __ptext52 2860  
                             __ptext44 2A2E                               __ptext36 21B6  
                             __ptext28 2B54                               __ptext61 2BC0  
                             __ptext53 2890                               __ptext45 148A  
                             __ptext37 2BB0                               __ptext29 265C  
                             __ptext70 2BFC                               __ptext62 2B06  
                             __ptext54 297E                               __ptext46 276E  
                             __ptext38 2316                               __ptext71 2C04  
                             __ptext63 2A56                               __ptext55 28C0  
                             __ptext47 18BA                               __ptext39 1EF4  
                             __ptext72 2A7C                               __ptext64 25DE  
                             __ptext56 28F0                               __ptext48 27A0  
                             __ptext73 2B8E                               __ptext65 2546  
                             __ptext57 2920                               __ptext49 27D0  
                             __ptext66 2BCC                               __ptext58 2B68  
                             __ptext67 24F0                               __ptext59 16C0  
                             __ptext68 22A4                               __ptext69 2BE2  
                             _dispLogs 2B68                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$1652 0002  
                   __end_of_initServos 2702                               _initTime 2AC4  
                        __size_of_main 0088                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F3  
                  _updateServoPosition 222E                 __size_of_machineConfig 005A  
                        ??i2_lcdNibble 0001                               _printRTC 0CC6  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007C                     _f_can_coming_to_ID 00E9  
                            printf@len 00A5                              printf@val 00A3  
    __end_ofi2_change_state_to_menu_12 2800      __end_ofi2_change_state_to_menu_22 27D0  
                             loadRTC@i 0096                 __end_of_printSortTimer 18BA  
                            putch@data 0082               __end_of_I2C_Master_Start 2BFC  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 2BE2  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                            ??_initFlags 0080  
                           _MAG_signal 00E3                               isdigit@c 0082  
                             intlevel2 0000                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                    __end_of_stopSignals 2B54  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 009F                               printf@cp 00A1  
                   __end_of_updateMenu 1250                __end_of_I2C_Master_Init 2440  
              __end_of_I2C_Master_Read 297E                __end_of_I2C_Master_Wait 2B68  
              __end_of_I2C_Master_Stop 2BF4                            lcdInst@data 0082  
                        printRTC@F3192 010E                    __end_ofi2_lcdNibble 2546  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                      ___lwmod@divisor 0089                      _f_can_distributed 0071  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 2440                        ___lwmod@counter 008B  
                          _TMR3counter 005F                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00F7  
                        dispLogs@myLog 0001                     i2printRTC@INT_time 002D  
