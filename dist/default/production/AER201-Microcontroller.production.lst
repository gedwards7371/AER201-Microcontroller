

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Apr 10 17:48:37 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	text99,global,reloc=2,class=CODE,delta=1
   115                           	psect	text100,global,reloc=2,class=CODE,delta=1
   116                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   117                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   118                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   119  0000                     
   120                           ; Version 1.40
   121                           ; Generated 01/12/2016 GMT
   122                           ; 
   123                           ; Copyright © 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   124                           ; All rights reserved.
   125                           ; 
   126                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   127                           ; 
   128                           ; Redistribution and use in source and binary forms, with or without modification, are
   129                           ; permitted provided that the following conditions are met:
   130                           ; 
   131                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   132                           ;        conditions and the following disclaimer.
   133                           ; 
   134                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   135                           ;        of conditions and the following disclaimer in the documentation and/or other
   136                           ;        materials provided with the distribution.
   137                           ; 
   138                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   139                           ;        software without specific prior written permission.
   140                           ; 
   141                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   142                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   143                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   144                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   145                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   146                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   147                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   148                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   149                           ; 
   150                           ; 
   151                           ; Code-generator required, PIC18F4620 Definitions
   152                           ; 
   153                           ; SFR Addresses
   154  0000                     
   155                           	psect	idataBANK1
   156  005AAE                     __pidataBANK1:
   157                           	opt stack 0
   158                           
   159                           ;initializer for UI@F3247
   160  005AAE  4D                 	db	77
   161  005AAF  4D                 	db	77
   162  005AB0  4D                 	db	77
   163  005AB1  00                 	db	0
   164                           
   165                           ;initializer for printRTC@F3237
   166  005AB2  4D                 	db	77
   167  005AB3  4D                 	db	77
   168  005AB4  4D                 	db	77
   169  005AB5  00                 	db	0
   170                           
   171                           	psect	mediumconst
   172  00FA8A                     __pmediumconst:
   173                           	opt stack 0
   174  00FA8A  00                 	db	0
   175  00FA8B                     _keys:
   176                           	opt stack 0
   177  00FA8B  31                 	db	49
   178  00FA8C  32                 	db	50
   179  00FA8D  33                 	db	51
   180  00FA8E  41                 	db	65
   181  00FA8F  34                 	db	52
   182  00FA90  35                 	db	53
   183  00FA91  36                 	db	54
   184  00FA92  42                 	db	66
   185  00FA93  37                 	db	55
   186  00FA94  38                 	db	56
   187  00FA95  39                 	db	57
   188  00FA96  43                 	db	67
   189  00FA97  2A                 	db	42
   190  00FA98  30                 	db	48
   191  00FA99  23                 	db	35
   192  00FA9A  44                 	db	68
   193  00FA9B  00                 	db	0
   194  00FA9C                     __end_of_keys:
   195                           	opt stack 0
   196  00FA9C                     _dpowers:
   197                           	opt stack 0
   198  00FA9C  0001               	dw	1
   199  00FA9E  000A               	dw	10
   200  00FAA0  0064               	dw	100
   201  00FAA2  03E8               	dw	1000
   202  00FAA4  2710               	dw	10000
   203  00FAA6                     __end_of_dpowers:
   204                           	opt stack 0
   205  0000                     _ADCON0	set	4034
   206  0000                     _ADCON0bits	set	4034
   207  0000                     _ADCON1	set	4033
   208  0000                     _ADCON2	set	4032
   209  0000                     _ADRESH	set	4036
   210  0000                     _ADRESL	set	4035
   211  0000                     _CMCONbits	set	4020
   212  0000                     _CVRCON	set	4021
   213  0000                     _EEADR	set	4009
   214  0000                     _EEADRH	set	4010
   215  0000                     _EECON1bits	set	4006
   216  0000                     _EECON2	set	4007
   217  0000                     _EEDATA	set	4008
   218  0000                     _INTCONbits	set	4082
   219  0000                     _LATA	set	3977
   220  0000                     _LATAbits	set	3977
   221  0000                     _LATB	set	3978
   222  0000                     _LATBbits	set	3978
   223  0000                     _LATC	set	3979
   224  0000                     _LATCbits	set	3979
   225  0000                     _LATD	set	3980
   226  0000                     _LATDbits	set	3980
   227  0000                     _LATE	set	3981
   228  0000                     _OSCCON	set	4051
   229  0000                     _OSCTUNEbits	set	3995
   230  0000                     _PIR2bits	set	4001
   231  0000                     _PORTAbits	set	3968
   232  0000                     _PORTB	set	3969
   233  0000                     _PORTBbits	set	3969
   234  0000                     _PR2	set	4043
   235  0000                     _SSPADD	set	4040
   236  0000                     _SSPBUF	set	4041
   237  0000                     _SSPCON1	set	4038
   238  0000                     _SSPCON2	set	4037
   239  0000                     _SSPSTAT	set	4039
   240  0000                     _T0CON	set	4053
   241  0000                     _T1CON	set	4045
   242  0000                     _T2CON	set	4042
   243  0000                     _T3CON	set	4017
   244  0000                     _TMR0H	set	4055
   245  0000                     _TMR0L	set	4054
   246  0000                     _TMR1H	set	4047
   247  0000                     _TMR1L	set	4046
   248  0000                     _TMR3H	set	4019
   249  0000                     _TMR3L	set	4018
   250  0000                     _TRISA	set	3986
   251  0000                     _TRISB	set	3987
   252  0000                     _TRISC	set	3988
   253  0000                     _TRISD	set	3989
   254  0000                     _TRISE	set	3990
   255  0000                     _ACKDT	set	32301
   256  0000                     _ACKEN	set	32300
   257  0000                     _ADIE	set	31982
   258  0000                     _INT1IE	set	32643
   259  0000                     _INT1IF	set	32640
   260  0000                     _PEIE	set	32662
   261  0000                     _PEN	set	32298
   262  0000                     _RCEN	set	32299
   263  0000                     _RSEN	set	32297
   264  0000                     _SEN	set	32296
   265  0000                     _TMR0IE	set	32661
   266  0000                     _TMR0IF	set	32658
   267  0000                     _TMR0ON	set	32431
   268  0000                     _TMR1IE	set	31976
   269  0000                     _TMR1IF	set	31984
   270  0000                     _TMR1ON	set	32360
   271  0000                     _TMR2IE	set	31977
   272  0000                     _TMR2IF	set	31985
   273  0000                     _TMR2ON	set	32338
   274  0000                     _TMR3IE	set	32001
   275  0000                     _TMR3IF	set	32009
   276  0000                     _TMR3ON	set	32136
   277  0000                     _TRISC3	set	31907
   278  0000                     _TRISC4	set	31908
   279  0000                     _nRBPU	set	32655
   280  00FAA6                     STR_21:
   281  00FAA6  25                 	db	37
   282  00FAA7  30                 	db	48	;'0'
   283  00FAA8  32                 	db	50	;'2'
   284  00FAA9  64                 	db	100	;'d'
   285  00FAAA  25                 	db	37
   286  00FAAB  73                 	db	115	;'s'
   287  00FAAC  20                 	db	32
   288  00FAAD  7C                 	db	124
   289  00FAAE  20                 	db	32
   290  00FAAF  25                 	db	37
   291  00FAB0  30                 	db	48	;'0'
   292  00FAB1  32                 	db	50	;'2'
   293  00FAB2  64                 	db	100	;'d'
   294  00FAB3  3A                 	db	58	;':'
   295  00FAB4  25                 	db	37
   296  00FAB5  30                 	db	48	;'0'
   297  00FAB6  32                 	db	50	;'2'
   298  00FAB7  64                 	db	100	;'d'
   299  00FAB8  3A                 	db	58	;':'
   300  00FAB9  25                 	db	37
   301  00FABA  30                 	db	48	;'0'
   302  00FABB  32                 	db	50	;'2'
   303  00FABC  64                 	db	100	;'d'
   304  00FABD  00                 	db	0
   305  00FABE                     STR_67:
   306  00FABE  28                 	db	40
   307  00FABF  64                 	db	100	;'d'
   308  00FAC0  61                 	db	97	;'a'
   309  00FAC1  74                 	db	116	;'t'
   310  00FAC2  61                 	db	97	;'a'
   311  00FAC3  3A                 	db	58	;':'
   312  00FAC4  20                 	db	32
   313  00FAC5  25                 	db	37
   314  00FAC6  75                 	db	117	;'u'
   315  00FAC7  2C                 	db	44
   316  00FAC8  20                 	db	32
   317  00FAC9  61                 	db	97	;'a'
   318  00FACA  64                 	db	100	;'d'
   319  00FACB  64                 	db	100	;'d'
   320  00FACC  72                 	db	114	;'r'
   321  00FACD  3A                 	db	58	;':'
   322  00FACE  20                 	db	32
   323  00FACF  25                 	db	37
   324  00FAD0  75                 	db	117	;'u'
   325  00FAD1  29                 	db	41
   326  00FAD2  00                 	db	0
   327  00FAD3                     STR_64:
   328  00FAD3  20                 	db	32
   329  00FAD4  20                 	db	32
   330  00FAD5  20                 	db	32
   331  00FAD6  20                 	db	32
   332  00FAD7  20                 	db	32
   333  00FAD8  20                 	db	32
   334  00FAD9  20                 	db	32
   335  00FADA  20                 	db	32
   336  00FADB  20                 	db	32
   337  00FADC  20                 	db	32
   338  00FADD  20                 	db	32
   339  00FADE  20                 	db	32
   340  00FADF  46                 	db	70	;'F'
   341  00FAE0  25                 	db	37
   342  00FAE1  64                 	db	100	;'d'
   343  00FAE2  4C                 	db	76	;'L'
   344  00FAE3  25                 	db	37
   345  00FAE4  64                 	db	100	;'d'
   346  00FAE5  00                 	db	0
   347  00FAE6                     STR_112:
   348  00FAE6  44                 	db	68	;'D'
   349  00FAE7  20                 	db	32
   350  00FAE8  57                 	db	87	;'W'
   351  00FAE9  49                 	db	73	;'I'
   352  00FAEA  4C                 	db	76	;'L'
   353  00FAEB  4C                 	db	76	;'L'
   354  00FAEC  20                 	db	32
   355  00FAED  52                 	db	82	;'R'
   356  00FAEE  45                 	db	69	;'E'
   357  00FAEF  54                 	db	84	;'T'
   358  00FAF0  55                 	db	85	;'U'
   359  00FAF1  52                 	db	82	;'R'
   360  00FAF2  4E                 	db	78	;'N'
   361  00FAF3  20                 	db	32
   362  00FAF4  20                 	db	32
   363  00FAF5  20                 	db	32
   364  00FAF6  20                 	db	32
   365  00FAF7  00                 	db	0
   366  00FAF8                     STR_122:
   367  00FAF8  4F                 	db	79	;'O'
   368  00FAF9  54                 	db	84	;'T'
   369  00FAFA  48                 	db	72	;'H'
   370  00FAFB  45                 	db	69	;'E'
   371  00FAFC  52                 	db	82	;'R'
   372  00FAFD  20                 	db	32
   373  00FAFE  53                 	db	83	;'S'
   374  00FAFF  45                 	db	69	;'E'
   375  00FB00  54                 	db	84	;'T'
   376  00FB01  53                 	db	83	;'S'
   377  00FB02  20                 	db	32
   378  00FB03  52                 	db	82	;'R'
   379  00FB04  41                 	db	65	;'A'
   380  00FB05  35                 	db	53	;'5'
   381  00FB06  20                 	db	32
   382  00FB07  20                 	db	32
   383  00FB08  20                 	db	32
   384  00FB09  00                 	db	0
   385  00FB0A                     STR_121:
   386  00FB0A  53                 	db	83	;'S'
   387  00FB0B  3A                 	db	58	;':'
   388  00FB0C  20                 	db	32
   389  00FB0D  44                 	db	68	;'D'
   390  00FB0E  20                 	db	32
   391  00FB0F  57                 	db	87	;'W'
   392  00FB10  49                 	db	73	;'I'
   393  00FB11  4C                 	db	76	;'L'
   394  00FB12  4C                 	db	76	;'L'
   395  00FB13  20                 	db	32
   396  00FB14  52                 	db	82	;'R'
   397  00FB15  45                 	db	69	;'E'
   398  00FB16  54                 	db	84	;'T'
   399  00FB17  55                 	db	85	;'U'
   400  00FB18  52                 	db	82	;'R'
   401  00FB19  4E                 	db	78	;'N'
   402  00FB1A  20                 	db	32
   403  00FB1B  00                 	db	0
   404  00FB1C                     STR_124:
   405  00FB1C  4F                 	db	79	;'O'
   406  00FB1D  54                 	db	84	;'T'
   407  00FB1E  48                 	db	72	;'H'
   408  00FB1F  45                 	db	69	;'E'
   409  00FB20  52                 	db	82	;'R'
   410  00FB21  3A                 	db	58	;':'
   411  00FB22  20                 	db	32
   412  00FB23  43                 	db	67	;'C'
   413  00FB24  41                 	db	65	;'A'
   414  00FB25  4D                 	db	77	;'M'
   415  00FB26  20                 	db	32
   416  00FB27  54                 	db	84	;'T'
   417  00FB28  4F                 	db	79	;'O'
   418  00FB29  47                 	db	71	;'G'
   419  00FB2A  47                 	db	71	;'G'
   420  00FB2B  4C                 	db	76	;'L'
   421  00FB2C  45                 	db	69	;'E'
   422  00FB2D  00                 	db	0
   423  00FB2E                     STR_130:
   424  00FB2E  4F                 	db	79	;'O'
   425  00FB2F  54                 	db	84	;'T'
   426  00FB30  48                 	db	72	;'H'
   427  00FB31  45                 	db	69	;'E'
   428  00FB32  52                 	db	82	;'R'
   429  00FB33  20                 	db	32
   430  00FB34  53                 	db	83	;'S'
   431  00FB35  45                 	db	69	;'E'
   432  00FB36  54                 	db	84	;'T'
   433  00FB37  53                 	db	83	;'S'
   434  00FB38  20                 	db	32
   435  00FB39  50                 	db	80	;'P'
   436  00FB3A  55                 	db	85	;'U'
   437  00FB3B  53                 	db	83	;'S'
   438  00FB3C  48                 	db	72	;'H'
   439  00FB3D  45                 	db	69	;'E'
   440  00FB3E  52                 	db	82	;'R'
   441  00FB3F  00                 	db	0
   442  00FB40                     STR_3:
   443  00FB40  2D                 	db	45
   444  00FB41  2D                 	db	45
   445  00FB42  20                 	db	32
   446  00FB43  4C                 	db	76	;'L'
   447  00FB44  4F                 	db	79	;'O'
   448  00FB45  47                 	db	71	;'G'
   449  00FB46  20                 	db	32
   450  00FB47  25                 	db	37
   451  00FB48  32                 	db	50	;'2'
   452  00FB49  64                 	db	100	;'d'
   453  00FB4A  20                 	db	32
   454  00FB4B  48                 	db	72	;'H'
   455  00FB4C  45                 	db	69	;'E'
   456  00FB4D  52                 	db	82	;'R'
   457  00FB4E  45                 	db	69	;'E'
   458  00FB4F  2D                 	db	45
   459  00FB50  2D                 	db	45
   460  00FB51  00                 	db	0
   461  00FB52                     STR_1:
   462  00FB52  52                 	db	82	;'R'
   463  00FB53  45                 	db	69	;'E'
   464  00FB54  53                 	db	83	;'S'
   465  00FB55  55                 	db	85	;'U'
   466  00FB56  4C                 	db	76	;'L'
   467  00FB57  54                 	db	84	;'T'
   468  00FB58  53                 	db	83	;'S'
   469  00FB59  20                 	db	32
   470  00FB5A  49                 	db	73	;'I'
   471  00FB5B  4E                 	db	78	;'N'
   472  00FB5C  20                 	db	32
   473  00FB5D  4C                 	db	76	;'L'
   474  00FB5E  4F                 	db	79	;'O'
   475  00FB5F  47                 	db	71	;'G'
   476  00FB60  20                 	db	32
   477  00FB61  25                 	db	37
   478  00FB62  64                 	db	100	;'d'
   479  00FB63  00                 	db	0
   480  00FB64                     STR_103:
   481  00FB64  4D                 	db	77	;'M'
   482  00FB65  49                 	db	73	;'I'
   483  00FB66  44                 	db	68	;'D'
   484  00FB67  20                 	db	32
   485  00FB68  2D                 	db	45
   486  00FB69  2D                 	db	45
   487  00FB6A  20                 	db	32
   488  00FB6B  32                 	db	50	;'2'
   489  00FB6C  73                 	db	115	;'s'
   490  00FB6D  20                 	db	32
   491  00FB6E  20                 	db	32
   492  00FB6F  20                 	db	32
   493  00FB70  20                 	db	32
   494  00FB71  20                 	db	32
   495  00FB72  20                 	db	32
   496  00FB73  20                 	db	32
   497  00FB74  00                 	db	0
   498  00FB75                     STR_106:
   499  00FB75  44                 	db	68	;'D'
   500  00FB76  52                 	db	82	;'R'
   501  00FB77  4F                 	db	79	;'O'
   502  00FB78  50                 	db	80	;'P'
   503  00FB79  20                 	db	32
   504  00FB7A  2D                 	db	45
   505  00FB7B  2D                 	db	45
   506  00FB7C  20                 	db	32
   507  00FB7D  32                 	db	50	;'2'
   508  00FB7E  73                 	db	115	;'s'
   509  00FB7F  20                 	db	32
   510  00FB80  20                 	db	32
   511  00FB81  20                 	db	32
   512  00FB82  20                 	db	32
   513  00FB83  20                 	db	32
   514  00FB84  20                 	db	32
   515  00FB85  00                 	db	0
   516  00FB86                     STR_100:
   517  00FB86  4C                 	db	76	;'L'
   518  00FB87  45                 	db	69	;'E'
   519  00FB88  46                 	db	70	;'F'
   520  00FB89  54                 	db	84	;'T'
   521  00FB8A  20                 	db	32
   522  00FB8B  2D                 	db	45
   523  00FB8C  2D                 	db	45
   524  00FB8D  20                 	db	32
   525  00FB8E  32                 	db	50	;'2'
   526  00FB8F  73                 	db	115	;'s'
   527  00FB90  20                 	db	32
   528  00FB91  20                 	db	32
   529  00FB92  20                 	db	32
   530  00FB93  20                 	db	32
   531  00FB94  20                 	db	32
   532  00FB95  20                 	db	32
   533  00FB96  00                 	db	0
   534  00FB97                     STR_105:
   535  00FB97  4C                 	db	76	;'L'
   536  00FB98  45                 	db	69	;'E'
   537  00FB99  56                 	db	86	;'V'
   538  00FB9A  45                 	db	69	;'E'
   539  00FB9B  4C                 	db	76	;'L'
   540  00FB9C  20                 	db	32
   541  00FB9D  2D                 	db	45
   542  00FB9E  2D                 	db	45
   543  00FB9F  20                 	db	32
   544  00FBA0  32                 	db	50	;'2'
   545  00FBA1  73                 	db	115	;'s'
   546  00FBA2  20                 	db	32
   547  00FBA3  20                 	db	32
   548  00FBA4  20                 	db	32
   549  00FBA5  20                 	db	32
   550  00FBA6  20                 	db	32
   551  00FBA7  00                 	db	0
   552  00FBA8                     STR_99:
   553  00FBA8  52                 	db	82	;'R'
   554  00FBA9  49                 	db	73	;'I'
   555  00FBAA  47                 	db	71	;'G'
   556  00FBAB  48                 	db	72	;'H'
   557  00FBAC  54                 	db	84	;'T'
   558  00FBAD  20                 	db	32
   559  00FBAE  2D                 	db	45
   560  00FBAF  2D                 	db	45
   561  00FBB0  20                 	db	32
   562  00FBB1  32                 	db	50	;'2'
   563  00FBB2  73                 	db	115	;'s'
   564  00FBB3  20                 	db	32
   565  00FBB4  20                 	db	32
   566  00FBB5  20                 	db	32
   567  00FBB6  20                 	db	32
   568  00FBB7  20                 	db	32
   569  00FBB8  00                 	db	0
   570  00FBB9                     STR_98:
   571  00FBB9  4D                 	db	77	;'M'
   572  00FBBA  49                 	db	73	;'I'
   573  00FBBB  44                 	db	68	;'D'
   574  00FBBC  44                 	db	68	;'D'
   575  00FBBD  4C                 	db	76	;'L'
   576  00FBBE  45                 	db	69	;'E'
   577  00FBBF  20                 	db	32
   578  00FBC0  2D                 	db	45
   579  00FBC1  2D                 	db	45
   580  00FBC2  20                 	db	32
   581  00FBC3  32                 	db	50	;'2'
   582  00FBC4  73                 	db	115	;'s'
   583  00FBC5  20                 	db	32
   584  00FBC6  20                 	db	32
   585  00FBC7  20                 	db	32
   586  00FBC8  20                 	db	32
   587  00FBC9  00                 	db	0
   588  00FBCA                     STR_113:
   589  00FBCA  4F                 	db	79	;'O'
   590  00FBCB  54                 	db	84	;'T'
   591  00FBCC  48                 	db	72	;'H'
   592  00FBCD  45                 	db	69	;'E'
   593  00FBCE  52                 	db	82	;'R'
   594  00FBCF  20                 	db	32
   595  00FBD0  53                 	db	83	;'S'
   596  00FBD1  45                 	db	69	;'E'
   597  00FBD2  54                 	db	84	;'T'
   598  00FBD3  53                 	db	83	;'S'
   599  00FBD4  20                 	db	32
   600  00FBD5  44                 	db	68	;'D'
   601  00FBD6  43                 	db	67	;'C'
   602  00FBD7  20                 	db	32
   603  00FBD8  20                 	db	32
   604  00FBD9  20                 	db	32
   605  00FBDA  00                 	db	0
   606  00FBDB                     STR_119:
   607  00FBDB  44                 	db	68	;'D'
   608  00FBDC  20                 	db	32
   609  00FBDD  57                 	db	87	;'W'
   610  00FBDE  49                 	db	73	;'I'
   611  00FBDF  4C                 	db	76	;'L'
   612  00FBE0  4C                 	db	76	;'L'
   613  00FBE1  20                 	db	32
   614  00FBE2  52                 	db	82	;'R'
   615  00FBE3  45                 	db	69	;'E'
   616  00FBE4  54                 	db	84	;'T'
   617  00FBE5  55                 	db	85	;'U'
   618  00FBE6  52                 	db	82	;'R'
   619  00FBE7  4E                 	db	78	;'N'
   620  00FBE8  20                 	db	32
   621  00FBE9  20                 	db	32
   622  00FBEA  20                 	db	32
   623  00FBEB  00                 	db	0
   624  00FBEC                     STR_116:
   625  00FBEC  35                 	db	53	;'5'
   626  00FBED  3A                 	db	58	;':'
   627  00FBEE  48                 	db	72	;'H'
   628  00FBEF  7C                 	db	124
   629  00FBF0  36                 	db	54	;'6'
   630  00FBF1  3A                 	db	58	;':'
   631  00FBF2  4C                 	db	76	;'L'
   632  00FBF3  7C                 	db	124
   633  00FBF4  49                 	db	73	;'I'
   634  00FBF5  52                 	db	82	;'R'
   635  00FBF6  3A                 	db	58	;':'
   636  00FBF7  25                 	db	37
   637  00FBF8  64                 	db	100	;'d'
   638  00FBF9  20                 	db	32
   639  00FBFA  20                 	db	32
   640  00FBFB  20                 	db	32
   641  00FBFC  00                 	db	0
   642  00FBFD                     STR_114:
   643  00FBFD  31                 	db	49	;'1'
   644  00FBFE  3A                 	db	58	;':'
   645  00FBFF  20                 	db	32
   646  00FC00  44                 	db	68	;'D'
   647  00FC01  43                 	db	67	;'C'
   648  00FC02  20                 	db	32
   649  00FC03  7C                 	db	124
   650  00FC04  20                 	db	32
   651  00FC05  41                 	db	65	;'A'
   652  00FC06  3A                 	db	58	;':'
   653  00FC07  20                 	db	32
   654  00FC08  41                 	db	65	;'A'
   655  00FC09  52                 	db	82	;'R'
   656  00FC0A  4D                 	db	77	;'M'
   657  00FC0B  20                 	db	32
   658  00FC0C  20                 	db	32
   659  00FC0D  00                 	db	0
   660  00FC0E                     STR_101:
   661  00FC0E  4D                 	db	77	;'M'
   662  00FC0F  49                 	db	73	;'I'
   663  00FC10  44                 	db	68	;'D'
   664  00FC11  2D                 	db	45
   665  00FC12  4C                 	db	76	;'L'
   666  00FC13  45                 	db	69	;'E'
   667  00FC14  46                 	db	70	;'F'
   668  00FC15  54                 	db	84	;'T'
   669  00FC16  20                 	db	32
   670  00FC17  2D                 	db	45
   671  00FC18  2D                 	db	45
   672  00FC19  20                 	db	32
   673  00FC1A  32                 	db	50	;'2'
   674  00FC1B  73                 	db	115	;'s'
   675  00FC1C  20                 	db	32
   676  00FC1D  20                 	db	32
   677  00FC1E  00                 	db	0
   678  00FC1F                     STR_102:
   679  00FC1F  4D                 	db	77	;'M'
   680  00FC20  49                 	db	73	;'I'
   681  00FC21  44                 	db	68	;'D'
   682  00FC22  2D                 	db	45
   683  00FC23  52                 	db	82	;'R'
   684  00FC24  49                 	db	73	;'I'
   685  00FC25  47                 	db	71	;'G'
   686  00FC26  48                 	db	72	;'H'
   687  00FC27  54                 	db	84	;'T'
   688  00FC28  20                 	db	32
   689  00FC29  2D                 	db	45
   690  00FC2A  2D                 	db	45
   691  00FC2B  20                 	db	32
   692  00FC2C  32                 	db	50	;'2'
   693  00FC2D  73                 	db	115	;'s'
   694  00FC2E  20                 	db	32
   695  00FC2F  00                 	db	0
   696  00FC30  45                 	db	69	;'E'
   697  00FC31  4C                 	db	76	;'L'
   698  00FC32  53                 	db	83	;'S'
   699  00FC33  45                 	db	69	;'E'
   700  00FC34  20                 	db	32
   701  00FC35  54                 	db	84	;'T'
   702  00FC36  4F                 	db	79	;'O'
   703  00FC37  47                 	db	71	;'G'
   704  00FC38  47                 	db	71	;'G'
   705  00FC39  4C                 	db	76	;'L'
   706  00FC3A  45                 	db	69	;'E'
   707  00FC3B  53                 	db	83	;'S'
   708  00FC3C  20                 	db	32
   709  00FC3D  52                 	db	82	;'R'
   710  00FC3E  41                 	db	65	;'A'
   711  00FC3F  35                 	db	53	;'5'
   712  00FC40  00                 	db	0
   713  00FC41                     STR_73:
   714  00FC41  41                 	db	65	;'A'
   715  00FC42  4C                 	db	76	;'L'
   716  00FC43  47                 	db	71	;'G'
   717  00FC44  31                 	db	49	;'1'
   718  00FC45  3A                 	db	58	;':'
   719  00FC46  20                 	db	32
   720  00FC47  39                 	db	57	;'9'
   721  00FC48  20                 	db	32
   722  00FC49  50                 	db	80	;'P'
   723  00FC4A  4F                 	db	79	;'O'
   724  00FC4B  50                 	db	80	;'P'
   725  00FC4C  4E                 	db	78	;'N'
   726  00FC4D  4F                 	db	79	;'O'
   727  00FC4E  54                 	db	84	;'T'
   728  00FC4F  41                 	db	65	;'A'
   729  00FC50  42                 	db	66	;'B'
   730  00FC51  00                 	db	0
   731  00FC52                     STR_93:
   732  00FC52  54                 	db	84	;'T'
   733  00FC53  53                 	db	83	;'S'
   734  00FC54  54                 	db	84	;'T'
   735  00FC55  3A                 	db	58	;':'
   736  00FC56  20                 	db	32
   737  00FC57  43                 	db	67	;'C'
   738  00FC58  4F                 	db	79	;'O'
   739  00FC59  4E                 	db	78	;'N'
   740  00FC5A  44                 	db	68	;'D'
   741  00FC5B  20                 	db	32
   742  00FC5C  53                 	db	83	;'S'
   743  00FC5D  4F                 	db	79	;'O'
   744  00FC5E  4C                 	db	76	;'L'
   745  00FC5F  4E                 	db	78	;'N'
   746  00FC60  27                 	db	39
   747  00FC61  44                 	db	68	;'D'
   748  00FC62  00                 	db	0
   749  00FC63                     STR_95:
   750  00FC63  54                 	db	84	;'T'
   751  00FC64  53                 	db	83	;'S'
   752  00FC65  54                 	db	84	;'T'
   753  00FC66  3A                 	db	58	;':'
   754  00FC67  20                 	db	32
   755  00FC68  50                 	db	80	;'P'
   756  00FC69  55                 	db	85	;'U'
   757  00FC6A  53                 	db	83	;'S'
   758  00FC6B  48                 	db	72	;'H'
   759  00FC6C  20                 	db	32
   760  00FC6D  53                 	db	83	;'S'
   761  00FC6E  4F                 	db	79	;'O'
   762  00FC6F  4C                 	db	76	;'L'
   763  00FC70  4E                 	db	78	;'N'
   764  00FC71  27                 	db	39
   765  00FC72  44                 	db	68	;'D'
   766  00FC73  00                 	db	0
   767  00FC74                     STR_69:
   768  00FC74  32                 	db	50	;'2'
   769  00FC75  2E                 	db	46
   770  00FC76  53                 	db	83	;'S'
   771  00FC77  4E                 	db	78	;'N'
   772  00FC78  52                 	db	82	;'R'
   773  00FC79  7C                 	db	124
   774  00FC7A  34                 	db	52	;'4'
   775  00FC7B  2E                 	db	46
   776  00FC7C  48                 	db	72	;'H'
   777  00FC7D  49                 	db	73	;'I'
   778  00FC7E  7C                 	db	124
   779  00FC7F  35                 	db	53	;'5'
   780  00FC80  2E                 	db	46
   781  00FC81  4D                 	db	77	;'M'
   782  00FC82  45                 	db	69	;'E'
   783  00FC83  44                 	db	68	;'D'
   784  00FC84  00                 	db	0
   785  00FC85                     STR_70:
   786  00FC85  42                 	db	66	;'B'
   787  00FC86  2E                 	db	46
   788  00FC87  50                 	db	80	;'P'
   789  00FC88  4C                 	db	76	;'L'
   790  00FC89  41                 	db	65	;'A'
   791  00FC8A  7C                 	db	124
   792  00FC8B  38                 	db	56	;'8'
   793  00FC8C  2E                 	db	46
   794  00FC8D  53                 	db	83	;'S'
   795  00FC8E  56                 	db	86	;'V'
   796  00FC8F  7C                 	db	124
   797  00FC90  39                 	db	57	;'9'
   798  00FC91  2E                 	db	46
   799  00FC92  42                 	db	66	;'B'
   800  00FC93  4C                 	db	76	;'L'
   801  00FC94  4B                 	db	75	;'K'
   802  00FC95  00                 	db	0
   803  00FC96                     STR_128:
   804  00FC96  45                 	db	69	;'E'
   805  00FC97  4C                 	db	76	;'L'
   806  00FC98  53                 	db	83	;'S'
   807  00FC99  45                 	db	69	;'E'
   808  00FC9A  20                 	db	32
   809  00FC9B  54                 	db	84	;'T'
   810  00FC9C  4F                 	db	79	;'O'
   811  00FC9D  47                 	db	71	;'G'
   812  00FC9E  47                 	db	71	;'G'
   813  00FC9F  4C                 	db	76	;'L'
   814  00FCA0  45                 	db	69	;'E'
   815  00FCA1  53                 	db	83	;'S'
   816  00FCA2  20                 	db	32
   817  00FCA3  41                 	db	65	;'A'
   818  00FCA4  52                 	db	82	;'R'
   819  00FCA5  4D                 	db	77	;'M'
   820  00FCA6  00                 	db	0
   821  00FCA7                     STR_111:
   822  00FCA7  54                 	db	84	;'T'
   823  00FCA8  53                 	db	83	;'S'
   824  00FCA9  54                 	db	84	;'T'
   825  00FCAA  3A                 	db	58	;':'
   826  00FCAB  20                 	db	32
   827  00FCAC  42                 	db	66	;'B'
   828  00FCAD  4F                 	db	79	;'O'
   829  00FCAE  54                 	db	84	;'T'
   830  00FCAF  48                 	db	72	;'H'
   831  00FCB0  20                 	db	32
   832  00FCB1  53                 	db	83	;'S'
   833  00FCB2  45                 	db	69	;'E'
   834  00FCB3  52                 	db	82	;'R'
   835  00FCB4  56                 	db	86	;'V'
   836  00FCB5  4F                 	db	79	;'O'
   837  00FCB6  53                 	db	83	;'S'
   838  00FCB7  00                 	db	0
   839  00FCB8                     STR_41:
   840  00FCB8  4C                 	db	76	;'L'
   841  00FCB9  4F                 	db	79	;'O'
   842  00FCBA  47                 	db	71	;'G'
   843  00FCBB  20                 	db	32
   844  00FCBC  31                 	db	49	;'1'
   845  00FCBD  20                 	db	32
   846  00FCBE  20                 	db	32
   847  00FCBF  20                 	db	32
   848  00FCC0  20                 	db	32
   849  00FCC1  20                 	db	32
   850  00FCC2  20                 	db	32
   851  00FCC3  20                 	db	32
   852  00FCC4  20                 	db	32
   853  00FCC5  20                 	db	32
   854  00FCC6  20                 	db	32
   855  00FCC7  20                 	db	32
   856  00FCC8  00                 	db	0
   857  00FCC9                     STR_40:
   858  00FCC9  4C                 	db	76	;'L'
   859  00FCCA  4F                 	db	79	;'O'
   860  00FCCB  47                 	db	71	;'G'
   861  00FCCC  20                 	db	32
   862  00FCCD  32                 	db	50	;'2'
   863  00FCCE  20                 	db	32
   864  00FCCF  20                 	db	32
   865  00FCD0  20                 	db	32
   866  00FCD1  20                 	db	32
   867  00FCD2  20                 	db	32
   868  00FCD3  20                 	db	32
   869  00FCD4  20                 	db	32
   870  00FCD5  20                 	db	32
   871  00FCD6  20                 	db	32
   872  00FCD7  20                 	db	32
   873  00FCD8  20                 	db	32
   874  00FCD9  00                 	db	0
   875  00FCDA                     STR_44:
   876  00FCDA  4C                 	db	76	;'L'
   877  00FCDB  4F                 	db	79	;'O'
   878  00FCDC  47                 	db	71	;'G'
   879  00FCDD  20                 	db	32
   880  00FCDE  33                 	db	51	;'3'
   881  00FCDF  20                 	db	32
   882  00FCE0  20                 	db	32
   883  00FCE1  20                 	db	32
   884  00FCE2  20                 	db	32
   885  00FCE3  20                 	db	32
   886  00FCE4  20                 	db	32
   887  00FCE5  20                 	db	32
   888  00FCE6  20                 	db	32
   889  00FCE7  20                 	db	32
   890  00FCE8  20                 	db	32
   891  00FCE9  20                 	db	32
   892  00FCEA  00                 	db	0
   893  00FCEB                     STR_48:
   894  00FCEB  4C                 	db	76	;'L'
   895  00FCEC  4F                 	db	79	;'O'
   896  00FCED  47                 	db	71	;'G'
   897  00FCEE  20                 	db	32
   898  00FCEF  34                 	db	52	;'4'
   899  00FCF0  20                 	db	32
   900  00FCF1  20                 	db	32
   901  00FCF2  20                 	db	32
   902  00FCF3  20                 	db	32
   903  00FCF4  20                 	db	32
   904  00FCF5  20                 	db	32
   905  00FCF6  20                 	db	32
   906  00FCF7  20                 	db	32
   907  00FCF8  20                 	db	32
   908  00FCF9  20                 	db	32
   909  00FCFA  20                 	db	32
   910  00FCFB  00                 	db	0
   911  00FCFC                     STR_36:
   912  00FCFC  33                 	db	51	;'3'
   913  00FCFD  2E                 	db	46
   914  00FCFE  20                 	db	32
   915  00FCFF  4C                 	db	76	;'L'
   916  00FD00  4F                 	db	79	;'O'
   917  00FD01  47                 	db	71	;'G'
   918  00FD02  53                 	db	83	;'S'
   919  00FD03  20                 	db	32
   920  00FD04  20                 	db	32
   921  00FD05  20                 	db	32
   922  00FD06  20                 	db	32
   923  00FD07  20                 	db	32
   924  00FD08  20                 	db	32
   925  00FD09  20                 	db	32
   926  00FD0A  20                 	db	32
   927  00FD0B  20                 	db	32
   928  00FD0C  00                 	db	0
   929  00FD0D                     STR_32:
   930  00FD0D  32                 	db	50	;'2'
   931  00FD0E  2E                 	db	46
   932  00FD0F  20                 	db	32
   933  00FD10  53                 	db	83	;'S'
   934  00FD11  4F                 	db	79	;'O'
   935  00FD12  52                 	db	82	;'R'
   936  00FD13  54                 	db	84	;'T'
   937  00FD14  20                 	db	32
   938  00FD15  20                 	db	32
   939  00FD16  20                 	db	32
   940  00FD17  20                 	db	32
   941  00FD18  20                 	db	32
   942  00FD19  20                 	db	32
   943  00FD1A  20                 	db	32
   944  00FD1B  20                 	db	32
   945  00FD1C  20                 	db	32
   946  00FD1D  00                 	db	0
   947  00FD1E                     STR_33:
   948  00FD1E  31                 	db	49	;'1'
   949  00FD1F  2E                 	db	46
   950  00FD20  20                 	db	32
   951  00FD21  44                 	db	68	;'D'
   952  00FD22  41                 	db	65	;'A'
   953  00FD23  54                 	db	84	;'T'
   954  00FD24  45                 	db	69	;'E'
   955  00FD25  2F                 	db	47
   956  00FD26  54                 	db	84	;'T'
   957  00FD27  49                 	db	73	;'I'
   958  00FD28  4D                 	db	77	;'M'
   959  00FD29  45                 	db	69	;'E'
   960  00FD2A  20                 	db	32
   961  00FD2B  20                 	db	32
   962  00FD2C  20                 	db	32
   963  00FD2D  20                 	db	32
   964  00FD2E  00                 	db	0
   965  00FD2F                     STR_24:
   966  00FD2F  20                 	db	32
   967  00FD30  2D                 	db	45
   968  00FD31  2D                 	db	45
   969  00FD32  20                 	db	32
   970  00FD33  50                 	db	80	;'P'
   971  00FD34  4F                 	db	79	;'O'
   972  00FD35  50                 	db	80	;'P'
   973  00FD36  20                 	db	32
   974  00FD37  20                 	db	32
   975  00FD38  43                 	db	67	;'C'
   976  00FD39  41                 	db	65	;'A'
   977  00FD3A  4E                 	db	78	;'N'
   978  00FD3B  20                 	db	32
   979  00FD3C  2D                 	db	45
   980  00FD3D  2D                 	db	45
   981  00FD3E  20                 	db	32
   982  00FD3F  00                 	db	0
   983  00FD40                     STR_26:
   984  00FD40  20                 	db	32
   985  00FD41  2D                 	db	45
   986  00FD42  2D                 	db	45
   987  00FD43  20                 	db	32
   988  00FD44  53                 	db	83	;'S'
   989  00FD45  4F                 	db	79	;'O'
   990  00FD46  55                 	db	85	;'U'
   991  00FD47  50                 	db	80	;'P'
   992  00FD48  20                 	db	32
   993  00FD49  43                 	db	67	;'C'
   994  00FD4A  41                 	db	65	;'A'
   995  00FD4B  4E                 	db	78	;'N'
   996  00FD4C  20                 	db	32
   997  00FD4D  2D                 	db	45
   998  00FD4E  2D                 	db	45
   999  00FD4F  20                 	db	32
  1000  00FD50  00                 	db	0
  1001  00FD51                     STR_28:
  1002  00FD51  2D                 	db	45
  1003  00FD52  2D                 	db	45
  1004  00FD53  20                 	db	32
  1005  00FD54  54                 	db	84	;'T'
  1006  00FD55  4F                 	db	79	;'O'
  1007  00FD56  54                 	db	84	;'T'
  1008  00FD57  41                 	db	65	;'A'
  1009  00FD58  4C                 	db	76	;'L'
  1010  00FD59  20                 	db	32
  1011  00FD5A  43                 	db	67	;'C'
  1012  00FD5B  41                 	db	65	;'A'
  1013  00FD5C  4E                 	db	78	;'N'
  1014  00FD5D  53                 	db	83	;'S'
  1015  00FD5E  20                 	db	32
  1016  00FD5F  2D                 	db	45
  1017  00FD60  2D                 	db	45
  1018  00FD61  00                 	db	0
  1019  00FD62                     STR_39:
  1020  00FD62  4C                 	db	76	;'L'
  1021  00FD63  4F                 	db	79	;'O'
  1022  00FD64  47                 	db	71	;'G'
  1023  00FD65  20                 	db	32
  1024  00FD66  31                 	db	49	;'1'
  1025  00FD67  20                 	db	32
  1026  00FD68  20                 	db	32
  1027  00FD69  20                 	db	32
  1028  00FD6A  20                 	db	32
  1029  00FD6B  20                 	db	32
  1030  00FD6C  20                 	db	32
  1031  00FD6D  20                 	db	32
  1032  00FD6E  20                 	db	32
  1033  00FD6F  20                 	db	32
  1034  00FD70  20                 	db	32
  1035  00FD71  3C                 	db	60	;'<'
  1036  00FD72  00                 	db	0
  1037  00FD73                     STR_42:
  1038  00FD73  4C                 	db	76	;'L'
  1039  00FD74  4F                 	db	79	;'O'
  1040  00FD75  47                 	db	71	;'G'
  1041  00FD76  20                 	db	32
  1042  00FD77  32                 	db	50	;'2'
  1043  00FD78  20                 	db	32
  1044  00FD79  20                 	db	32
  1045  00FD7A  20                 	db	32
  1046  00FD7B  20                 	db	32
  1047  00FD7C  20                 	db	32
  1048  00FD7D  20                 	db	32
  1049  00FD7E  20                 	db	32
  1050  00FD7F  20                 	db	32
  1051  00FD80  20                 	db	32
  1052  00FD81  20                 	db	32
  1053  00FD82  3C                 	db	60	;'<'
  1054  00FD83  00                 	db	0
  1055  00FD84                     STR_46:
  1056  00FD84  4C                 	db	76	;'L'
  1057  00FD85  4F                 	db	79	;'O'
  1058  00FD86  47                 	db	71	;'G'
  1059  00FD87  20                 	db	32
  1060  00FD88  33                 	db	51	;'3'
  1061  00FD89  20                 	db	32
  1062  00FD8A  20                 	db	32
  1063  00FD8B  20                 	db	32
  1064  00FD8C  20                 	db	32
  1065  00FD8D  20                 	db	32
  1066  00FD8E  20                 	db	32
  1067  00FD8F  20                 	db	32
  1068  00FD90  20                 	db	32
  1069  00FD91  20                 	db	32
  1070  00FD92  20                 	db	32
  1071  00FD93  3C                 	db	60	;'<'
  1072  00FD94  00                 	db	0
  1073  00FD95                     STR_50:
  1074  00FD95  4C                 	db	76	;'L'
  1075  00FD96  4F                 	db	79	;'O'
  1076  00FD97  47                 	db	71	;'G'
  1077  00FD98  20                 	db	32
  1078  00FD99  34                 	db	52	;'4'
  1079  00FD9A  20                 	db	32
  1080  00FD9B  20                 	db	32
  1081  00FD9C  20                 	db	32
  1082  00FD9D  20                 	db	32
  1083  00FD9E  20                 	db	32
  1084  00FD9F  20                 	db	32
  1085  00FDA0  20                 	db	32
  1086  00FDA1  20                 	db	32
  1087  00FDA2  20                 	db	32
  1088  00FDA3  20                 	db	32
  1089  00FDA4  3C                 	db	60	;'<'
  1090  00FDA5  00                 	db	0
  1091  00FDA6                     STR_38:
  1092  00FDA6  33                 	db	51	;'3'
  1093  00FDA7  2E                 	db	46
  1094  00FDA8  20                 	db	32
  1095  00FDA9  4C                 	db	76	;'L'
  1096  00FDAA  4F                 	db	79	;'O'
  1097  00FDAB  47                 	db	71	;'G'
  1098  00FDAC  53                 	db	83	;'S'
  1099  00FDAD  20                 	db	32
  1100  00FDAE  20                 	db	32
  1101  00FDAF  20                 	db	32
  1102  00FDB0  20                 	db	32
  1103  00FDB1  20                 	db	32
  1104  00FDB2  20                 	db	32
  1105  00FDB3  20                 	db	32
  1106  00FDB4  20                 	db	32
  1107  00FDB5  3C                 	db	60	;'<'
  1108  00FDB6  00                 	db	0
  1109  00FDB7                     STR_34:
  1110  00FDB7  32                 	db	50	;'2'
  1111  00FDB8  2E                 	db	46
  1112  00FDB9  20                 	db	32
  1113  00FDBA  53                 	db	83	;'S'
  1114  00FDBB  4F                 	db	79	;'O'
  1115  00FDBC  52                 	db	82	;'R'
  1116  00FDBD  54                 	db	84	;'T'
  1117  00FDBE  20                 	db	32
  1118  00FDBF  20                 	db	32
  1119  00FDC0  20                 	db	32
  1120  00FDC1  20                 	db	32
  1121  00FDC2  20                 	db	32
  1122  00FDC3  20                 	db	32
  1123  00FDC4  20                 	db	32
  1124  00FDC5  20                 	db	32
  1125  00FDC6  3C                 	db	60	;'<'
  1126  00FDC7  00                 	db	0
  1127  00FDC8                     STR_31:
  1128  00FDC8  31                 	db	49	;'1'
  1129  00FDC9  2E                 	db	46
  1130  00FDCA  20                 	db	32
  1131  00FDCB  44                 	db	68	;'D'
  1132  00FDCC  41                 	db	65	;'A'
  1133  00FDCD  54                 	db	84	;'T'
  1134  00FDCE  45                 	db	69	;'E'
  1135  00FDCF  2F                 	db	47
  1136  00FDD0  54                 	db	84	;'T'
  1137  00FDD1  49                 	db	73	;'I'
  1138  00FDD2  4D                 	db	77	;'M'
  1139  00FDD3  45                 	db	69	;'E'
  1140  00FDD4  20                 	db	32
  1141  00FDD5  20                 	db	32
  1142  00FDD6  20                 	db	32
  1143  00FDD7  3C                 	db	60	;'<'
  1144  00FDD8  00                 	db	0
  1145  00FDD9                     STR_6:
  1146  00FDD9  50                 	db	80	;'P'
  1147  00FDDA  41                 	db	65	;'A'
  1148  00FDDB  55                 	db	85	;'U'
  1149  00FDDC  53                 	db	83	;'S'
  1150  00FDDD  45                 	db	69	;'E'
  1151  00FDDE  20                 	db	32
  1152  00FDDF  3C                 	db	60	;'<'
  1153  00FDE0  20                 	db	32
  1154  00FDE1  7C                 	db	124
  1155  00FDE2  20                 	db	32
  1156  00FDE3  42                 	db	66	;'B'
  1157  00FDE4  41                 	db	65	;'A'
  1158  00FDE5  43                 	db	67	;'C'
  1159  00FDE6  4B                 	db	75	;'K'
  1160  00FDE7  20                 	db	32
  1161  00FDE8  3E                 	db	62	;'>'
  1162  00FDE9  00                 	db	0
  1163  00FDEA                     STR_30:
  1164  00FDEA  50                 	db	80	;'P'
  1165  00FDEB  55                 	db	85	;'U'
  1166  00FDEC  53                 	db	83	;'S'
  1167  00FDED  48                 	db	72	;'H'
  1168  00FDEE  20                 	db	32
  1169  00FDEF  54                 	db	84	;'T'
  1170  00FDF0  4F                 	db	79	;'O'
  1171  00FDF1  20                 	db	32
  1172  00FDF2  43                 	db	67	;'C'
  1173  00FDF3  4F                 	db	79	;'O'
  1174  00FDF4  4E                 	db	78	;'N'
  1175  00FDF5  54                 	db	84	;'T'
  1176  00FDF6  49                 	db	73	;'I'
  1177  00FDF7  4E                 	db	78	;'N'
  1178  00FDF8  55                 	db	85	;'U'
  1179  00FDF9  45                 	db	69	;'E'
  1180  00FDFA  00                 	db	0
  1181  00FDFB                     STR_27:
  1182  00FDFB  4E                 	db	78	;'N'
  1183  00FDFC  4C                 	db	76	;'L'
  1184  00FDFD  41                 	db	65	;'A'
  1185  00FDFE  42                 	db	66	;'B'
  1186  00FDFF  3A                 	db	58	;':'
  1187  00FE00  20                 	db	32
  1188  00FE01  25                 	db	37
  1189  00FE02  64                 	db	100	;'d'
  1190  00FE03  7C                 	db	124
  1191  00FE04  4C                 	db	76	;'L'
  1192  00FE05  41                 	db	65	;'A'
  1193  00FE06  42                 	db	66	;'B'
  1194  00FE07  3A                 	db	58	;':'
  1195  00FE08  20                 	db	32
  1196  00FE09  25                 	db	37
  1197  00FE0A  64                 	db	100	;'d'
  1198  00FE0B  00                 	db	0
  1199  00FE0C                     STR_25:
  1200  00FE0C  4E                 	db	78	;'N'
  1201  00FE0D  54                 	db	84	;'T'
  1202  00FE0E  41                 	db	65	;'A'
  1203  00FE0F  42                 	db	66	;'B'
  1204  00FE10  3A                 	db	58	;':'
  1205  00FE11  20                 	db	32
  1206  00FE12  25                 	db	37
  1207  00FE13  64                 	db	100	;'d'
  1208  00FE14  7C                 	db	124
  1209  00FE15  54                 	db	84	;'T'
  1210  00FE16  41                 	db	65	;'A'
  1211  00FE17  42                 	db	66	;'B'
  1212  00FE18  3A                 	db	58	;':'
  1213  00FE19  20                 	db	32
  1214  00FE1A  25                 	db	37
  1215  00FE1B  64                 	db	100	;'d'
  1216  00FE1C  00                 	db	0
  1217  00FE1D                     STR_84:
  1218  00FE1D  4D                 	db	77	;'M'
  1219  00FE1E  41                 	db	65	;'A'
  1220  00FE1F  47                 	db	71	;'G'
  1221  00FE20  5F                 	db	95	;'_'
  1222  00FE21  73                 	db	115	;'s'
  1223  00FE22  69                 	db	105	;'i'
  1224  00FE23  67                 	db	103	;'g'
  1225  00FE24  6E                 	db	110	;'n'
  1226  00FE25  61                 	db	97	;'a'
  1227  00FE26  6C                 	db	108	;'l'
  1228  00FE27  3A                 	db	58	;':'
  1229  00FE28  20                 	db	32
  1230  00FE29  25                 	db	37
  1231  00FE2A  64                 	db	100	;'d'
  1232  00FE2B  20                 	db	32
  1233  00FE2C  00                 	db	0
  1234  00FE2D                     STR_104:
  1235  00FE2D  54                 	db	84	;'T'
  1236  00FE2E  53                 	db	83	;'S'
  1237  00FE2F  54                 	db	84	;'T'
  1238  00FE30  3A                 	db	58	;':'
  1239  00FE31  20                 	db	32
  1240  00FE32  54                 	db	84	;'T'
  1241  00FE33  49                 	db	73	;'I'
  1242  00FE34  4C                 	db	76	;'L'
  1243  00FE35  54                 	db	84	;'T'
  1244  00FE36  20                 	db	32
  1245  00FE37  53                 	db	83	;'S'
  1246  00FE38  45                 	db	69	;'E'
  1247  00FE39  52                 	db	82	;'R'
  1248  00FE3A  56                 	db	86	;'V'
  1249  00FE3B  4F                 	db	79	;'O'
  1250  00FE3C  00                 	db	0
  1251  00FE3D                     STR_65:
  1252  00FE3D  53                 	db	83	;'S'
  1253  00FE3E  4F                 	db	79	;'O'
  1254  00FE3F  52                 	db	82	;'R'
  1255  00FE40  54                 	db	84	;'T'
  1256  00FE41  49                 	db	73	;'I'
  1257  00FE42  4E                 	db	78	;'N'
  1258  00FE43  47                 	db	71	;'G'
  1259  00FE44  2E                 	db	46
  1260  00FE45  2E                 	db	46
  1261  00FE46  2E                 	db	46
  1262  00FE47  20                 	db	32
  1263  00FE48  20                 	db	32
  1264  00FE49  20                 	db	32
  1265  00FE4A  20                 	db	32
  1266  00FE4B  20                 	db	32
  1267  00FE4C  00                 	db	0
  1268  00FE4D                     STR_66:
  1269  00FE4D  54                 	db	84	;'T'
  1270  00FE4E  49                 	db	73	;'I'
  1271  00FE4F  4D                 	db	77	;'M'
  1272  00FE50  45                 	db	69	;'E'
  1273  00FE51  20                 	db	32
  1274  00FE52  25                 	db	37
  1275  00FE53  64                 	db	100	;'d'
  1276  00FE54  3A                 	db	58	;':'
  1277  00FE55  25                 	db	37
  1278  00FE56  30                 	db	48	;'0'
  1279  00FE57  32                 	db	50	;'2'
  1280  00FE58  64                 	db	100	;'d'
  1281  00FE59  20                 	db	32
  1282  00FE5A  20                 	db	32
  1283  00FE5B  20                 	db	32
  1284  00FE5C  00                 	db	0
  1285  00FE5D                     STR_4:
  1286  00FE5D  44                 	db	68	;'D'
  1287  00FE5E  49                 	db	73	;'I'
  1288  00FE5F  44                 	db	68	;'D'
  1289  00FE60  4E                 	db	78	;'N'
  1290  00FE61  27                 	db	39
  1291  00FE62  54                 	db	84	;'T'
  1292  00FE63  20                 	db	32
  1293  00FE64  43                 	db	67	;'C'
  1294  00FE65  4F                 	db	79	;'O'
  1295  00FE66  4D                 	db	77	;'M'
  1296  00FE67  50                 	db	80	;'P'
  1297  00FE68  4C                 	db	76	;'L'
  1298  00FE69  45                 	db	69	;'E'
  1299  00FE6A  54                 	db	84	;'T'
  1300  00FE6B  45                 	db	69	;'E'
  1301  00FE6C  00                 	db	0
  1302  00FE6D                     STR_123:
  1303  00FE6D  44                 	db	68	;'D'
  1304  00FE6E  3A                 	db	58	;':'
  1305  00FE6F  52                 	db	82	;'R'
  1306  00FE70  45                 	db	69	;'E'
  1307  00FE71  54                 	db	84	;'T'
  1308  00FE72  7C                 	db	124
  1309  00FE73  32                 	db	50	;'2'
  1310  00FE74  3A                 	db	58	;':'
  1311  00FE75  43                 	db	67	;'C'
  1312  00FE76  20                 	db	32
  1313  00FE77  25                 	db	37
  1314  00FE78  64                 	db	100	;'d'
  1315  00FE79  20                 	db	32
  1316  00FE7A  20                 	db	32
  1317  00FE7B  00                 	db	0
  1318  00FE7C                     STR_81:
  1319  00FE7C  49                 	db	73	;'I'
  1320  00FE7D  52                 	db	82	;'R'
  1321  00FE7E  5F                 	db	95	;'_'
  1322  00FE7F  73                 	db	115	;'s'
  1323  00FE80  69                 	db	105	;'i'
  1324  00FE81  67                 	db	103	;'g'
  1325  00FE82  6E                 	db	110	;'n'
  1326  00FE83  61                 	db	97	;'a'
  1327  00FE84  6C                 	db	108	;'l'
  1328  00FE85  3A                 	db	58	;':'
  1329  00FE86  20                 	db	32
  1330  00FE87  25                 	db	37
  1331  00FE88  64                 	db	100	;'d'
  1332  00FE89  20                 	db	32
  1333  00FE8A  00                 	db	0
  1334  00FE8B                     STR_110:
  1335  00FE8B  43                 	db	67	;'C'
  1336  00FE8C  41                 	db	65	;'A'
  1337  00FE8D  4D                 	db	77	;'M'
  1338  00FE8E  20                 	db	32
  1339  00FE8F  44                 	db	68	;'D'
  1340  00FE90  57                 	db	87	;'W'
  1341  00FE91  4E                 	db	78	;'N'
  1342  00FE92  20                 	db	32
  1343  00FE93  7C                 	db	124
  1344  00FE94  52                 	db	82	;'R'
  1345  00FE95  43                 	db	67	;'C'
  1346  00FE96  30                 	db	48	;'0'
  1347  00FE97  3D                 	db	61	;'='
  1348  00FE98  30                 	db	48	;'0'
  1349  00FE99  00                 	db	0
  1350  00FE9A                     STR_109:
  1351  00FE9A  43                 	db	67	;'C'
  1352  00FE9B  41                 	db	65	;'A'
  1353  00FE9C  4D                 	db	77	;'M'
  1354  00FE9D  20                 	db	32
  1355  00FE9E  55                 	db	85	;'U'
  1356  00FE9F  50                 	db	80	;'P'
  1357  00FEA0  20                 	db	32
  1358  00FEA1  20                 	db	32
  1359  00FEA2  7C                 	db	124
  1360  00FEA3  52                 	db	82	;'R'
  1361  00FEA4  43                 	db	67	;'C'
  1362  00FEA5  30                 	db	48	;'0'
  1363  00FEA6  3D                 	db	61	;'='
  1364  00FEA7  31                 	db	49	;'1'
  1365  00FEA8  00                 	db	0
  1366  00FEA9                     STR_83:
  1367  00FEA9  54                 	db	84	;'T'
  1368  00FEAA  53                 	db	83	;'S'
  1369  00FEAB  54                 	db	84	;'T'
  1370  00FEAC  3A                 	db	58	;':'
  1371  00FEAD  20                 	db	32
  1372  00FEAE  4D                 	db	77	;'M'
  1373  00FEAF  41                 	db	65	;'A'
  1374  00FEB0  47                 	db	71	;'G'
  1375  00FEB1  4E                 	db	78	;'N'
  1376  00FEB2  45                 	db	69	;'E'
  1377  00FEB3  54                 	db	84	;'T'
  1378  00FEB4  49                 	db	73	;'I'
  1379  00FEB5  53                 	db	83	;'S'
  1380  00FEB6  4D                 	db	77	;'M'
  1381  00FEB7  00                 	db	0
  1382  00FEB8                     STR_108:
  1383  00FEB8  54                 	db	84	;'T'
  1384  00FEB9  53                 	db	83	;'S'
  1385  00FEBA  54                 	db	84	;'T'
  1386  00FEBB  3A                 	db	58	;':'
  1387  00FEBC  20                 	db	32
  1388  00FEBD  43                 	db	67	;'C'
  1389  00FEBE  41                 	db	65	;'A'
  1390  00FEBF  4D                 	db	77	;'M'
  1391  00FEC0  20                 	db	32
  1392  00FEC1  53                 	db	83	;'S'
  1393  00FEC2  45                 	db	69	;'E'
  1394  00FEC3  52                 	db	82	;'R'
  1395  00FEC4  56                 	db	86	;'V'
  1396  00FEC5  4F                 	db	79	;'O'
  1397  00FEC6  00                 	db	0
  1398  00FEC7                     STR_97:
  1399  00FEC7  54                 	db	84	;'T'
  1400  00FEC8  53                 	db	83	;'S'
  1401  00FEC9  54                 	db	84	;'T'
  1402  00FECA  3A                 	db	58	;':'
  1403  00FECB  20                 	db	32
  1404  00FECC  50                 	db	80	;'P'
  1405  00FECD  41                 	db	65	;'A'
  1406  00FECE  4E                 	db	78	;'N'
  1407  00FECF  20                 	db	32
  1408  00FED0  53                 	db	83	;'S'
  1409  00FED1  45                 	db	69	;'E'
  1410  00FED2  52                 	db	82	;'R'
  1411  00FED3  56                 	db	86	;'V'
  1412  00FED4  4F                 	db	79	;'O'
  1413  00FED5  00                 	db	0
  1414  00FED6                     STR_76:
  1415  00FED6  41                 	db	65	;'A'
  1416  00FED7  4C                 	db	76	;'L'
  1417  00FED8  47                 	db	71	;'G'
  1418  00FED9  34                 	db	52	;'4'
  1419  00FEDA  3A                 	db	58	;':'
  1420  00FEDB  20                 	db	32
  1421  00FEDC  41                 	db	65	;'A'
  1422  00FEDD  4C                 	db	76	;'L'
  1423  00FEDE  4C                 	db	76	;'L'
  1424  00FEDF  20                 	db	32
  1425  00FEE0  43                 	db	67	;'C'
  1426  00FEE1  41                 	db	65	;'A'
  1427  00FEE2  4E                 	db	78	;'N'
  1428  00FEE3  53                 	db	83	;'S'
  1429  00FEE4  00                 	db	0
  1430  00FEE5                     STR_91:
  1431  00FEE5  54                 	db	84	;'T'
  1432  00FEE6  53                 	db	83	;'S'
  1433  00FEE7  54                 	db	84	;'T'
  1434  00FEE8  3A                 	db	58	;':'
  1435  00FEE9  20                 	db	32
  1436  00FEEA  44                 	db	68	;'D'
  1437  00FEEB  43                 	db	67	;'C'
  1438  00FEEC  20                 	db	32
  1439  00FEED  4D                 	db	77	;'M'
  1440  00FEEE  4F                 	db	79	;'O'
  1441  00FEEF  54                 	db	84	;'T'
  1442  00FEF0  4F                 	db	79	;'O'
  1443  00FEF1  52                 	db	82	;'R'
  1444  00FEF2  53                 	db	83	;'S'
  1445  00FEF3  00                 	db	0
  1446  00FEF4                     STR_71:
  1447  00FEF4  41                 	db	65	;'A'
  1448  00FEF5  4C                 	db	76	;'L'
  1449  00FEF6  47                 	db	71	;'G'
  1450  00FEF7  4F                 	db	79	;'O'
  1451  00FEF8  52                 	db	82	;'R'
  1452  00FEF9  49                 	db	73	;'I'
  1453  00FEFA  54                 	db	84	;'T'
  1454  00FEFB  48                 	db	72	;'H'
  1455  00FEFC  4D                 	db	77	;'M'
  1456  00FEFD  20                 	db	32
  1457  00FEFE  54                 	db	84	;'T'
  1458  00FEFF  45                 	db	69	;'E'
  1459  00FF00  53                 	db	83	;'S'
  1460  00FF01  54                 	db	84	;'T'
  1461  00FF02  00                 	db	0
  1462  00FF03                     STR_92:
  1463  00FF03  50                 	db	80	;'P'
  1464  00FF04  49                 	db	73	;'I'
  1465  00FF05  4E                 	db	78	;'N'
  1466  00FF06  20                 	db	32
  1467  00FF07  52                 	db	82	;'R'
  1468  00FF08  41                 	db	65	;'A'
  1469  00FF09  35                 	db	53	;'5'
  1470  00FF0A  20                 	db	32
  1471  00FF0B  48                 	db	72	;'H'
  1472  00FF0C  49                 	db	73	;'I'
  1473  00FF0D  47                 	db	71	;'G'
  1474  00FF0E  48                 	db	72	;'H'
  1475  00FF0F  2E                 	db	46
  1476  00FF10  00                 	db	0
  1477  00FF11                     STR_74:
  1478  00FF11  41                 	db	65	;'A'
  1479  00FF12  4C                 	db	76	;'L'
  1480  00FF13  47                 	db	71	;'G'
  1481  00FF14  32                 	db	50	;'2'
  1482  00FF15  3A                 	db	58	;':'
  1483  00FF16  20                 	db	32
  1484  00FF17  31                 	db	49	;'1'
  1485  00FF18  32                 	db	50	;'2'
  1486  00FF19  20                 	db	32
  1487  00FF1A  43                 	db	67	;'C'
  1488  00FF1B  41                 	db	65	;'A'
  1489  00FF1C  4E                 	db	78	;'N'
  1490  00FF1D  53                 	db	83	;'S'
  1491  00FF1E  00                 	db	0
  1492  00FF1F                     STR_77:
  1493  00FF1F  41                 	db	65	;'A'
  1494  00FF20  4C                 	db	76	;'L'
  1495  00FF21  47                 	db	71	;'G'
  1496  00FF22  35                 	db	53	;'5'
  1497  00FF23  3A                 	db	58	;':'
  1498  00FF24  20                 	db	32
  1499  00FF25  4E                 	db	78	;'N'
  1500  00FF26  4F                 	db	79	;'O'
  1501  00FF27  20                 	db	32
  1502  00FF28  43                 	db	67	;'C'
  1503  00FF29  41                 	db	65	;'A'
  1504  00FF2A  4E                 	db	78	;'N'
  1505  00FF2B  53                 	db	83	;'S'
  1506  00FF2C  00                 	db	0
  1507  00FF2D                     STR_72:
  1508  00FF2D  50                 	db	80	;'P'
  1509  00FF2E  55                 	db	85	;'U'
  1510  00FF2F  53                 	db	83	;'S'
  1511  00FF30  48                 	db	72	;'H'
  1512  00FF31  20                 	db	32
  1513  00FF32  54                 	db	84	;'T'
  1514  00FF33  4F                 	db	79	;'O'
  1515  00FF34  20                 	db	32
  1516  00FF35  53                 	db	83	;'S'
  1517  00FF36  54                 	db	84	;'T'
  1518  00FF37  41                 	db	65	;'A'
  1519  00FF38  52                 	db	82	;'R'
  1520  00FF39  54                 	db	84	;'T'
  1521  00FF3A  00                 	db	0
  1522  00FF3B                     STR_23:
  1523  00FF3B  25                 	db	37
  1524  00FF3C  64                 	db	100	;'d'
  1525  00FF3D  20                 	db	32
  1526  00FF3E  4D                 	db	77	;'M'
  1527  00FF3F  49                 	db	73	;'I'
  1528  00FF40  4E                 	db	78	;'N'
  1529  00FF41  20                 	db	32
  1530  00FF42  25                 	db	37
  1531  00FF43  64                 	db	100	;'d'
  1532  00FF44  20                 	db	32
  1533  00FF45  53                 	db	83	;'S'
  1534  00FF46  45                 	db	69	;'E'
  1535  00FF47  43                 	db	67	;'C'
  1536  00FF48  00                 	db	0
  1537  00FF49                     STR_2:
  1538  00FF49  54                 	db	84	;'T'
  1539  00FF4A  49                 	db	73	;'I'
  1540  00FF4B  4D                 	db	77	;'M'
  1541  00FF4C  45                 	db	69	;'E'
  1542  00FF4D  3A                 	db	58	;':'
  1543  00FF4E  20                 	db	32
  1544  00FF4F  25                 	db	37
  1545  00FF50  64                 	db	100	;'d'
  1546  00FF51  3A                 	db	58	;':'
  1547  00FF52  25                 	db	37
  1548  00FF53  30                 	db	48	;'0'
  1549  00FF54  32                 	db	50	;'2'
  1550  00FF55  64                 	db	100	;'d'
  1551  00FF56  00                 	db	0
  1552  00FF57                     STR_80:
  1553  00FF57  54                 	db	84	;'T'
  1554  00FF58  53                 	db	83	;'S'
  1555  00FF59  54                 	db	84	;'T'
  1556  00FF5A  3A                 	db	58	;':'
  1557  00FF5B  20                 	db	32
  1558  00FF5C  49                 	db	73	;'I'
  1559  00FF5D  52                 	db	82	;'R'
  1560  00FF5E  20                 	db	32
  1561  00FF5F  53                 	db	83	;'S'
  1562  00FF60  4E                 	db	78	;'N'
  1563  00FF61  53                 	db	83	;'S'
  1564  00FF62  52                 	db	82	;'R'
  1565  00FF63  00                 	db	0
  1566  00FF64                     STR_75:
  1567  00FF64  41                 	db	65	;'A'
  1568  00FF65  4C                 	db	76	;'L'
  1569  00FF66  47                 	db	71	;'G'
  1570  00FF67  33                 	db	51	;'3'
  1571  00FF68  3A                 	db	58	;':'
  1572  00FF69  20                 	db	32
  1573  00FF6A  31                 	db	49	;'1'
  1574  00FF6B  20                 	db	32
  1575  00FF6C  43                 	db	67	;'C'
  1576  00FF6D  41                 	db	65	;'A'
  1577  00FF6E  4E                 	db	78	;'N'
  1578  00FF6F  00                 	db	0
  1579  00FF70                     STR_94:
  1580  00FF70  50                 	db	80	;'P'
  1581  00FF71  49                 	db	73	;'I'
  1582  00FF72  4E                 	db	78	;'N'
  1583  00FF73  20                 	db	32
  1584  00FF74  52                 	db	82	;'R'
  1585  00FF75  41                 	db	65	;'A'
  1586  00FF76  33                 	db	51	;'3'
  1587  00FF77  2E                 	db	46
  1588  00FF78  2E                 	db	46
  1589  00FF79  2E                 	db	46
  1590  00FF7A  00                 	db	0
  1591  00FF7B                     STR_96:
  1592  00FF7B  50                 	db	80	;'P'
  1593  00FF7C  49                 	db	73	;'I'
  1594  00FF7D  4E                 	db	78	;'N'
  1595  00FF7E  20                 	db	32
  1596  00FF7F  52                 	db	82	;'R'
  1597  00FF80  41                 	db	65	;'A'
  1598  00FF81  34                 	db	52	;'4'
  1599  00FF82  2E                 	db	46
  1600  00FF83  2E                 	db	46
  1601  00FF84  2E                 	db	46
  1602  00FF85  00                 	db	0
  1603  00FF86                     STR_85:
  1604  00FF86  54                 	db	84	;'T'
  1605  00FF87  53                 	db	83	;'S'
  1606  00FF88  54                 	db	84	;'T'
  1607  00FF89  3A                 	db	58	;':'
  1608  00FF8A  20                 	db	32
  1609  00FF8B  43                 	db	67	;'C'
  1610  00FF8C  4F                 	db	79	;'O'
  1611  00FF8D  4E                 	db	78	;'N'
  1612  00FF8E  44                 	db	68	;'D'
  1613  00FF8F  00                 	db	0
  1614  00FF90                     STR_89:
  1615  00FF90  41                 	db	65	;'A'
  1616  00FF91  43                 	db	67	;'C'
  1617  00FF92  54                 	db	84	;'T'
  1618  00FF93  55                 	db	85	;'U'
  1619  00FF94  41                 	db	65	;'A'
  1620  00FF95  54                 	db	84	;'T'
  1621  00FF96  4F                 	db	79	;'O'
  1622  00FF97  52                 	db	82	;'R'
  1623  00FF98  53                 	db	83	;'S'
  1624  00FF99  00                 	db	0
  1625  00FF9A                     STR_22:
  1626  00FF9A  44                 	db	68	;'D'
  1627  00FF9B  55                 	db	85	;'U'
  1628  00FF9C  52                 	db	82	;'R'
  1629  00FF9D  41                 	db	65	;'A'
  1630  00FF9E  54                 	db	84	;'T'
  1631  00FF9F  49                 	db	73	;'I'
  1632  00FFA0  4F                 	db	79	;'O'
  1633  00FFA1  4E                 	db	78	;'N'
  1634  00FFA2  3A                 	db	58	;':'
  1635  00FFA3  00                 	db	0
  1636  00FFA4                     STR_87:
  1637  00FFA4  43                 	db	67	;'C'
  1638  00FFA5  4F                 	db	79	;'O'
  1639  00FFA6  4E                 	db	78	;'N'
  1640  00FFA7  44                 	db	68	;'D'
  1641  00FFA8  3A                 	db	58	;':'
  1642  00FFA9  20                 	db	32
  1643  00FFAA  25                 	db	37
  1644  00FFAB  64                 	db	100	;'d'
  1645  00FFAC  00                 	db	0
  1646  00FFAD                     STR_78:
  1647  00FFAD  53                 	db	83	;'S'
  1648  00FFAE  45                 	db	69	;'E'
  1649  00FFAF  4E                 	db	78	;'N'
  1650  00FFB0  53                 	db	83	;'S'
  1651  00FFB1  4F                 	db	79	;'O'
  1652  00FFB2  52                 	db	82	;'R'
  1653  00FFB3  53                 	db	83	;'S'
  1654  00FFB4  00                 	db	0
  1655  00FFB5                     STR_131:
  1656  00FFB5  28                 	db	40
  1657  00FFB6  6E                 	db	110	;'n'
  1658  00FFB7  75                 	db	117	;'u'
  1659  00FFB8  6C                 	db	108	;'l'
  1660  00FFB9  6C                 	db	108	;'l'
  1661  00FFBA  29                 	db	41
  1662  00FFBB  00                 	db	0
  1663  00FFBC                     STR_68:
  1664  00FFBC  46                 	db	70	;'F'
  1665  00FFBD  41                 	db	65	;'A'
  1666  00FFBE  49                 	db	73	;'I'
  1667  00FFBF  4C                 	db	76	;'L'
  1668  00FFC0  45                 	db	69	;'E'
  1669  00FFC1  44                 	db	68	;'D'
  1670  00FFC2  00                 	db	0
  1671  00FFC3                     STR_7:
  1672  00FFC3  53                 	db	83	;'S'
  1673  00FFC4  54                 	db	84	;'T'
  1674  00FFC5  41                 	db	65	;'A'
  1675  00FFC6  52                 	db	82	;'R'
  1676  00FFC7  54                 	db	84	;'T'
  1677  00FFC8  3A                 	db	58	;':'
  1678  00FFC9  00                 	db	0
  1679  00FFCA                     STR_9:
  1680  00FFCA  46                 	db	70	;'F'
  1681  00FFCB  45                 	db	69	;'E'
  1682  00FFCC  42                 	db	66	;'B'
  1683  00FFCD  00                 	db	0
  1684  00FFCE                     STR_19:
  1685  00FFCE  44                 	db	68	;'D'
  1686  00FFCF  45                 	db	69	;'E'
  1687  00FFD0  43                 	db	67	;'C'
  1688  00FFD1  00                 	db	0
  1689  00FFD2                     STR_15:
  1690  00FFD2  41                 	db	65	;'A'
  1691  00FFD3  55                 	db	85	;'U'
  1692  00FFD4  47                 	db	71	;'G'
  1693  00FFD5  00                 	db	0
  1694  00FFD6                     STR_14:
  1695  00FFD6  4A                 	db	74	;'J'
  1696  00FFD7  55                 	db	85	;'U'
  1697  00FFD8  4C                 	db	76	;'L'
  1698  00FFD9  00                 	db	0
  1699  00FFDA                     STR_8:
  1700  00FFDA  4A                 	db	74	;'J'
  1701  00FFDB  41                 	db	65	;'A'
  1702  00FFDC  4E                 	db	78	;'N'
  1703  00FFDD  00                 	db	0
  1704  00FFDE                     STR_13:
  1705  00FFDE  4A                 	db	74	;'J'
  1706  00FFDF  55                 	db	85	;'U'
  1707  00FFE0  4E                 	db	78	;'N'
  1708  00FFE1  00                 	db	0
  1709  00FFE2                     STR_16:
  1710  00FFE2  53                 	db	83	;'S'
  1711  00FFE3  45                 	db	69	;'E'
  1712  00FFE4  50                 	db	80	;'P'
  1713  00FFE5  00                 	db	0
  1714  00FFE6                     STR_10:
  1715  00FFE6  4D                 	db	77	;'M'
  1716  00FFE7  41                 	db	65	;'A'
  1717  00FFE8  52                 	db	82	;'R'
  1718  00FFE9  00                 	db	0
  1719  00FFEA                     STR_11:
  1720  00FFEA  41                 	db	65	;'A'
  1721  00FFEB  50                 	db	80	;'P'
  1722  00FFEC  52                 	db	82	;'R'
  1723  00FFED  00                 	db	0
  1724  00FFEE                     STR_20:
  1725  00FFEE  45                 	db	69	;'E'
  1726  00FFEF  52                 	db	82	;'R'
  1727  00FFF0  52                 	db	82	;'R'
  1728  00FFF1  00                 	db	0
  1729  00FFF2                     STR_17:
  1730  00FFF2  4F                 	db	79	;'O'
  1731  00FFF3  43                 	db	67	;'C'
  1732  00FFF4  54                 	db	84	;'T'
  1733  00FFF5  00                 	db	0
  1734  00FFF6                     STR_18:
  1735  00FFF6  4E                 	db	78	;'N'
  1736  00FFF7  4F                 	db	79	;'O'
  1737  00FFF8  56                 	db	86	;'V'
  1738  00FFF9  00                 	db	0
  1739  00FFFA                     STR_12:
  1740  00FFFA  4D                 	db	77	;'M'
  1741  00FFFB  41                 	db	65	;'A'
  1742  00FFFC  59                 	db	89	;'Y'
  1743  00FFFD  00                 	db	0
  1744  0000                     
  1745                           ; #config settings
  1746  00FFFE  00                 	db	0	; dummy byte at the end
  1747  0000                     
  1748                           	psect	cinit
  1749  005284                     __pcinit:
  1750                           	opt stack 0
  1751  005284                     start_initialization:
  1752                           	opt stack 0
  1753  005284                     __initialization:
  1754                           	opt stack 0
  1755                           
  1756                           ; Initialize objects allocated to BANK1 (8 bytes)
  1757                           ; load TBLPTR registers with __pidataBANK1
  1758  005284  0EAE               	movlw	low __pidataBANK1
  1759  005286  6EF6               	movwf	tblptrl,c
  1760  005288  0E5A               	movlw	high __pidataBANK1
  1761  00528A  6EF7               	movwf	tblptrh,c
  1762  00528C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1763  00528E  6EF8               	movwf	tblptru,c
  1764  005290  EE01  F049         	lfsr	0,__pdataBANK1
  1765  005294  EE10 F008          	lfsr	1,8
  1766  005298                     copy_data0:
  1767  005298  0009               	tblrd		*+
  1768  00529A  CFF5 FFEE          	movff	tablat,postinc0
  1769  00529E  50E5               	movf	postdec1,w,c
  1770  0052A0  50E1               	movf	fsr1l,w,c
  1771  0052A2  E1FA               	bnz	copy_data0
  1772                           
  1773                           ; Clear objects allocated to BANK1 (73 bytes)
  1774  0052A4  EE01  F000         	lfsr	0,__pbssBANK1
  1775  0052A8  0E49               	movlw	73
  1776  0052AA                     clear_0:
  1777  0052AA  6AEE               	clrf	postinc0,c
  1778  0052AC  06E8               	decf	wreg,f,c
  1779  0052AE  E1FD               	bnz	clear_0
  1780                           
  1781                           ; Clear objects allocated to BANK0 (38 bytes)
  1782  0052B0  EE00  F0DA         	lfsr	0,__pbssBANK0
  1783  0052B4  0E26               	movlw	38
  1784  0052B6                     clear_1:
  1785  0052B6  6AEE               	clrf	postinc0,c
  1786  0052B8  06E8               	decf	wreg,f,c
  1787  0052BA  E1FD               	bnz	clear_1
  1788                           
  1789                           ; Clear objects allocated to COMRAM (37 bytes)
  1790  0052BC  EE00  F059         	lfsr	0,__pbssCOMRAM
  1791  0052C0  0E25               	movlw	37
  1792  0052C2                     clear_2:
  1793  0052C2  6AEE               	clrf	postinc0,c
  1794  0052C4  06E8               	decf	wreg,f,c
  1795  0052C6  E1FD               	bnz	clear_2
  1796  0052C8                     end_of_initialization:
  1797                           	opt stack 0
  1798  0052C8                     __end_of__initialization:
  1799                           	opt stack 0
  1800  0052C8  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1801  0052CA  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1802  0052CC  0100               	movlb	0
  1803  0052CE  EF74  F023         	goto	_main	;jump to C main() function
  1804                           tblptru	equ	0xFF8
  1805                           tblptrh	equ	0xFF7
  1806                           tblptrl	equ	0xFF6
  1807                           tablat	equ	0xFF5
  1808                           postinc0	equ	0xFEE
  1809                           wreg	equ	0xFE8
  1810                           postdec1	equ	0xFE5
  1811                           fsr1l	equ	0xFE1
  1812                           
  1813                           	psect	bssCOMRAM
  1814  000059                     __pbssCOMRAM:
  1815                           	opt stack 0
  1816  000059                     _servoTimes:
  1817                           	opt stack 0
  1818  000059                     	ds	8
  1819  000061                     _back:
  1820                           	opt stack 0
  1821  000061                     	ds	2
  1822  000063                     _down:
  1823                           	opt stack 0
  1824  000063                     	ds	2
  1825  000065                     _enter:
  1826                           	opt stack 0
  1827  000065                     	ds	2
  1828  000067                     _f_panning_to_bin:
  1829                           	opt stack 0
  1830  000067                     	ds	2
  1831  000069                     _log_count_pop_w_tab:
  1832                           	opt stack 0
  1833  000069                     	ds	2
  1834  00006B                     _pan_servo_state:
  1835                           	opt stack 0
  1836  00006B                     	ds	2
  1837  00006D                     _servo_timer_counter:
  1838                           	opt stack 0
  1839  00006D                     	ds	2
  1840  00006F                     _servo_timer_target:
  1841                           	opt stack 0
  1842  00006F                     	ds	2
  1843  000071                     _tilt_servo_state:
  1844                           	opt stack 0
  1845  000071                     	ds	2
  1846  000073                     _timer2_counter:
  1847                           	opt stack 0
  1848  000073                     	ds	2
  1849  000075                     _up:
  1850                           	opt stack 0
  1851  000075                     	ds	2
  1852  000077                     _was_low_1:
  1853                           	opt stack 0
  1854  000077                     	ds	2
  1855  000079                     _was_low_2:
  1856                           	opt stack 0
  1857  000079                     	ds	2
  1858  00007B                     _was_low_3:
  1859                           	opt stack 0
  1860  00007B                     	ds	2
  1861  00007D                     _input:
  1862                           	opt stack 0
  1863  00007D                     	ds	1
  1864                           tblptru	equ	0xFF8
  1865                           tblptrh	equ	0xFF7
  1866                           tblptrl	equ	0xFF6
  1867                           tablat	equ	0xFF5
  1868                           postinc0	equ	0xFEE
  1869                           wreg	equ	0xFE8
  1870                           postdec1	equ	0xFE5
  1871                           fsr1l	equ	0xFE1
  1872                           
  1873                           	psect	bssBANK0
  1874  0000DA                     __pbssBANK0:
  1875                           	opt stack 0
  1876  0000DA                     _sensor_outputs:
  1877                           	opt stack 0
  1878  0000DA                     	ds	4
  1879  0000DE                     _COND_signal:
  1880                           	opt stack 0
  1881  0000DE                     	ds	2
  1882  0000E0                     _IR_signal:
  1883                           	opt stack 0
  1884  0000E0                     	ds	2
  1885  0000E2                     _MAG_signal:
  1886                           	opt stack 0
  1887  0000E2                     	ds	2
  1888  0000E4                     _RTCflag:
  1889                           	opt stack 0
  1890  0000E4                     	ds	2
  1891  0000E6                     _cur_state:
  1892                           	opt stack 0
  1893  0000E6                     	ds	2
  1894  0000E8                     _debug:
  1895                           	opt stack 0
  1896  0000E8                     	ds	2
  1897  0000EA                     _f_arm_position:
  1898                           	opt stack 0
  1899  0000EA                     	ds	2
  1900  0000EC                     _f_lastCan:
  1901                           	opt stack 0
  1902  0000EC                     	ds	2
  1903  0000EE                     _f_loadingNewCan:
  1904                           	opt stack 0
  1905  0000EE                     	ds	2
  1906  0000F0                     _log:
  1907                           	opt stack 0
  1908  0000F0                     	ds	2
  1909  0000F2                     _log_completion:
  1910                           	opt stack 0
  1911  0000F2                     	ds	2
  1912  0000F4                     _log_count_pop_no_tab:
  1913                           	opt stack 0
  1914  0000F4                     	ds	2
  1915  0000F6                     _log_total_time:
  1916                           	opt stack 0
  1917  0000F6                     	ds	2
  1918  0000F8                     _logstate:
  1919                           	opt stack 0
  1920  0000F8                     	ds	2
  1921  0000FA                     _total_time:
  1922                           	opt stack 0
  1923  0000FA                     	ds	2
  1924  0000FC                     _machine_state:
  1925                           	opt stack 0
  1926  0000FC                     	ds	1
  1927  0000FD                     _sel:
  1928                           	opt stack 0
  1929  0000FD                     	ds	1
  1930  0000FE                     _count_total:
  1931                           	opt stack 0
  1932  0000FE                     	ds	2
  1933                           tblptru	equ	0xFF8
  1934                           tblptrh	equ	0xFF7
  1935                           tblptrl	equ	0xFF6
  1936                           tablat	equ	0xFF5
  1937                           postinc0	equ	0xFEE
  1938                           wreg	equ	0xFE8
  1939                           postdec1	equ	0xFE5
  1940                           fsr1l	equ	0xFE1
  1941                           
  1942                           	psect	bssBANK1
  1943  000100                     __pbssBANK1:
  1944                           	opt stack 0
  1945  000100                     _log_startTime:
  1946                           	opt stack 0
  1947  000100                     	ds	14
  1948  00010E                     _startTime:
  1949                           	opt stack 0
  1950  00010E                     	ds	14
  1951  00011C                     _time:
  1952                           	opt stack 0
  1953  00011C                     	ds	7
  1954  000123                     _count_can_no_lab:
  1955                           	opt stack 0
  1956  000123                     	ds	2
  1957  000125                     _count_can_w_lab:
  1958                           	opt stack 0
  1959  000125                     	ds	2
  1960  000127                     _count_pop_no_tab:
  1961                           	opt stack 0
  1962  000127                     	ds	2
  1963  000129                     _count_pop_w_tab:
  1964                           	opt stack 0
  1965  000129                     	ds	2
  1966  00012B                     _cur_can:
  1967                           	opt stack 0
  1968  00012B                     	ds	2
  1969  00012D                     _f_ID_receive:
  1970                           	opt stack 0
  1971  00012D                     	ds	2
  1972  00012F                     _f_can_coming_to_ID:
  1973                           	opt stack 0
  1974  00012F                     	ds	2
  1975  000131                     _f_can_coming_to_distribution:
  1976                           	opt stack 0
  1977  000131                     	ds	2
  1978  000133                     _f_can_distributed:
  1979                           	opt stack 0
  1980  000133                     	ds	2
  1981  000135                     _f_most_recent_sort_time:
  1982                           	opt stack 0
  1983  000135                     	ds	2
  1984  000137                     _first:
  1985                           	opt stack 0
  1986  000137                     	ds	2
  1987  000139                     _firstboot:
  1988                           	opt stack 0
  1989  000139                     	ds	2
  1990  00013B                     _i:
  1991                           	opt stack 0
  1992  00013B                     	ds	2
  1993  00013D                     _log_count_can_no_lab:
  1994                           	opt stack 0
  1995  00013D                     	ds	2
  1996  00013F                     _log_count_can_w_lab:
  1997                           	opt stack 0
  1998  00013F                     	ds	2
  1999  000141                     _log_count_total:
  2000                           	opt stack 0
  2001  000141                     	ds	2
  2002  000143                     _most_recent_sort_time:
  2003                           	opt stack 0
  2004  000143                     	ds	2
  2005  000145                     _motor_toggle_count:
  2006                           	opt stack 0
  2007  000145                     	ds	2
  2008  000147                     _var:
  2009                           	opt stack 0
  2010  000147                     	ds	2
  2011                           tblptru	equ	0xFF8
  2012                           tblptrh	equ	0xFF7
  2013                           tblptrl	equ	0xFF6
  2014                           tablat	equ	0xFF5
  2015                           postinc0	equ	0xFEE
  2016                           wreg	equ	0xFE8
  2017                           postdec1	equ	0xFE5
  2018                           fsr1l	equ	0xFE1
  2019                           
  2020                           	psect	dataBANK1
  2021  000149                     __pdataBANK1:
  2022                           	opt stack 0
  2023  000149                     UI@F3247:
  2024                           	opt stack 0
  2025  000149                     	ds	4
  2026  00014D                     printRTC@F3237:
  2027                           	opt stack 0
  2028  00014D                     	ds	4
  2029                           tblptru	equ	0xFF8
  2030                           tblptrh	equ	0xFF7
  2031                           tblptrl	equ	0xFF6
  2032                           tablat	equ	0xFF5
  2033                           postinc0	equ	0xFEE
  2034                           wreg	equ	0xFE8
  2035                           postdec1	equ	0xFE5
  2036                           fsr1l	equ	0xFE1
  2037                           
  2038                           	psect	cstackBANK0
  2039  000080                     __pcstackBANK0:
  2040                           	opt stack 0
  2041  000080                     ??_delay_ms:
  2042  000080                     ??_isdigit:
  2043  000080                     ??_readADC:
  2044  000080                     ??_I2C_Master_Wait:
  2045  000080                     ?___wmul:
  2046                           	opt stack 0
  2047  000080                     ?___awmod:
  2048                           	opt stack 0
  2049  000080                     ?___lwdiv:
  2050                           	opt stack 0
  2051  000080                     ?___ftpack:
  2052                           	opt stack 0
  2053  000080                     ?___lldiv:
  2054                           	opt stack 0
  2055  000080                     lcdNibble@temp:
  2056                           	opt stack 0
  2057  000080                     initTime@m:
  2058                           	opt stack 0
  2059  000080                     updateServoPosition@time_us:
  2060                           	opt stack 0
  2061  000080                     EEPROM_read@address:
  2062                           	opt stack 0
  2063  000080                     ___wmul@multiplier:
  2064                           	opt stack 0
  2065  000080                     ___awmod@dividend:
  2066                           	opt stack 0
  2067  000080                     ___lwdiv@dividend:
  2068                           	opt stack 0
  2069  000080                     strcpy@to:
  2070                           	opt stack 0
  2071  000080                     ___ftpack@arg:
  2072                           	opt stack 0
  2073  000080                     ___lldiv@dividend:
  2074                           	opt stack 0
  2075                           
  2076                           ; 4 bytes @ 0x0
  2077  000080                     	ds	1
  2078  000081                     readADC@channel:
  2079                           	opt stack 0
  2080  000081                     I2C_Master_Read@a:
  2081                           	opt stack 0
  2082  000081                     lcdNibble@data:
  2083                           	opt stack 0
  2084  000081                     initTime@h:
  2085                           	opt stack 0
  2086  000081                     delay_ms@milliseconds:
  2087                           	opt stack 0
  2088  000081                     _isdigit$2068:
  2089                           	opt stack 0
  2090  000081                     I2C_Master_Write@d:
  2091                           	opt stack 0
  2092                           
  2093                           ; 2 bytes @ 0x1
  2094  000081                     	ds	1
  2095  000082                     ??_readIR:
  2096  000082                     ??_readMAG:
  2097  000082                     ??_readCOND:
  2098  000082                     I2C_Master_Read@temp:
  2099                           	opt stack 0
  2100  000082                     lcdInst@data:
  2101                           	opt stack 0
  2102  000082                     putch@data:
  2103                           	opt stack 0
  2104  000082                     initTime@w:
  2105                           	opt stack 0
  2106  000082                     isdigit@c:
  2107                           	opt stack 0
  2108  000082                     updateServoPosition@timer:
  2109                           	opt stack 0
  2110  000082                     ___wmul@multiplicand:
  2111                           	opt stack 0
  2112  000082                     ___awmod@divisor:
  2113                           	opt stack 0
  2114  000082                     ___lwdiv@divisor:
  2115                           	opt stack 0
  2116  000082                     strcpy@from:
  2117                           	opt stack 0
  2118                           
  2119                           ; 2 bytes @ 0x2
  2120  000082                     	ds	1
  2121  000083                     ??_initLCD:
  2122  000083                     initTime@DD:
  2123                           	opt stack 0
  2124  000083                     ___ftpack@exp:
  2125                           	opt stack 0
  2126  000083                     getRTC@i:
  2127                           	opt stack 0
  2128                           
  2129                           ; 2 bytes @ 0x3
  2130  000083                     	ds	1
  2131  000084                     ??_updateServoPosition:
  2132  000084                     initTime@MM:
  2133                           	opt stack 0
  2134  000084                     ___awmod@counter:
  2135                           	opt stack 0
  2136  000084                     ___ftpack@sign:
  2137                           	opt stack 0
  2138  000084                     readIR@res:
  2139                           	opt stack 0
  2140  000084                     readMAG@res:
  2141                           	opt stack 0
  2142  000084                     readCOND@res:
  2143                           	opt stack 0
  2144  000084                     ___wmul@product:
  2145                           	opt stack 0
  2146  000084                     ___lwdiv@quotient:
  2147                           	opt stack 0
  2148  000084                     strcpy@cp:
  2149                           	opt stack 0
  2150  000084                     ___lldiv@divisor:
  2151                           	opt stack 0
  2152                           
  2153                           ; 4 bytes @ 0x4
  2154  000084                     	ds	1
  2155  000085                     ??_initSortTimer:
  2156  000085                     ??___ftpack:
  2157  000085                     initTime@YY:
  2158                           	opt stack 0
  2159  000085                     ___awmod@sign:
  2160                           	opt stack 0
  2161                           
  2162                           ; 1 bytes @ 0x5
  2163  000085                     	ds	1
  2164  000086                     ??_getIR:
  2165  000086                     ??_getMAG:
  2166  000086                     ?___awdiv:
  2167                           	opt stack 0
  2168  000086                     initTime@s:
  2169                           	opt stack 0
  2170  000086                     ___lwdiv@counter:
  2171                           	opt stack 0
  2172  000086                     updateServoPosition@my_time:
  2173                           	opt stack 0
  2174  000086                     ___awdiv@dividend:
  2175                           	opt stack 0
  2176                           
  2177                           ; 2 bytes @ 0x6
  2178  000086                     	ds	1
  2179  000087                     ?___lwmod:
  2180                           	opt stack 0
  2181  000087                     getIR@i:
  2182                           	opt stack 0
  2183  000087                     ___lwmod@dividend:
  2184                           	opt stack 0
  2185                           
  2186                           ; 2 bytes @ 0x7
  2187  000087                     	ds	1
  2188  000088                     ??_Distribution:
  2189  000088                     ??_initServos:
  2190  000088                     initSortTimer@i:
  2191                           	opt stack 0
  2192  000088                     ___awdiv@divisor:
  2193                           	opt stack 0
  2194  000088                     ___lldiv@quotient:
  2195                           	opt stack 0
  2196                           
  2197                           ; 4 bytes @ 0x8
  2198  000088                     	ds	1
  2199  000089                     ___lwmod@divisor:
  2200                           	opt stack 0
  2201                           
  2202                           ; 2 bytes @ 0x9
  2203  000089                     	ds	1
  2204  00008A                     ___awdiv@counter:
  2205                           	opt stack 0
  2206                           
  2207                           ; 1 bytes @ 0xA
  2208  00008A                     	ds	1
  2209  00008B                     ___awdiv@sign:
  2210                           	opt stack 0
  2211  00008B                     ___lwmod@counter:
  2212                           	opt stack 0
  2213                           
  2214                           ; 1 bytes @ 0xB
  2215  00008B                     	ds	1
  2216  00008C                     ___lldiv@counter:
  2217                           	opt stack 0
  2218  00008C                     ___awdiv@quotient:
  2219                           	opt stack 0
  2220                           
  2221                           ; 2 bytes @ 0xC
  2222  00008C                     	ds	1
  2223  00008D                     I2C_Master_Init@c:
  2224                           	opt stack 0
  2225                           
  2226                           ; 4 bytes @ 0xD
  2227  00008D                     	ds	1
  2228  00008E                     ?_printf:
  2229                           	opt stack 0
  2230  00008E                     ?___awtoft:
  2231                           	opt stack 0
  2232  00008E                     printf@f:
  2233                           	opt stack 0
  2234  00008E                     ___awtoft@c:
  2235                           	opt stack 0
  2236                           
  2237                           ; 2 bytes @ 0xE
  2238  00008E                     	ds	3
  2239  000091                     ??_I2C_Master_Init:
  2240  000091                     ___awtoft@sign:
  2241                           	opt stack 0
  2242                           
  2243                           ; 1 bytes @ 0x11
  2244  000091                     	ds	1
  2245  000092                     ___ftge@ff1:
  2246                           	opt stack 0
  2247                           
  2248                           ; 3 bytes @ 0x12
  2249  000092                     	ds	3
  2250  000095                     ??_loadRTC:
  2251  000095                     ___ftge@ff2:
  2252                           	opt stack 0
  2253                           
  2254                           ; 3 bytes @ 0x15
  2255  000095                     	ds	1
  2256  000096                     loadRTC@i:
  2257                           	opt stack 0
  2258                           
  2259                           ; 2 bytes @ 0x16
  2260  000096                     	ds	2
  2261  000098                     ??___ftge:
  2262                           
  2263                           ; 1 bytes @ 0x18
  2264  000098                     	ds	2
  2265  00009A                     ??_printf:
  2266                           
  2267                           ; 1 bytes @ 0x1A
  2268  00009A                     	ds	4
  2269  00009E                     printf@prec:
  2270                           	opt stack 0
  2271                           
  2272                           ; 1 bytes @ 0x1E
  2273  00009E                     	ds	1
  2274  00009F                     printf@cp:
  2275                           	opt stack 0
  2276                           
  2277                           ; 2 bytes @ 0x1F
  2278  00009F                     	ds	2
  2279  0000A1                     printf@ap:
  2280                           	opt stack 0
  2281                           
  2282                           ; 2 bytes @ 0x21
  2283  0000A1                     	ds	2
  2284  0000A3                     printf@len:
  2285                           	opt stack 0
  2286                           
  2287                           ; 2 bytes @ 0x23
  2288  0000A3                     	ds	2
  2289  0000A5                     printf@val:
  2290                           	opt stack 0
  2291                           
  2292                           ; 2 bytes @ 0x25
  2293  0000A5                     	ds	2
  2294  0000A7                     printf@flag:
  2295                           	opt stack 0
  2296                           
  2297                           ; 1 bytes @ 0x27
  2298  0000A7                     	ds	1
  2299  0000A8                     printf@c:
  2300                           	opt stack 0
  2301                           
  2302                           ; 1 bytes @ 0x28
  2303  0000A8                     	ds	1
  2304  0000A9                     printf@width:
  2305                           	opt stack 0
  2306                           
  2307                           ; 2 bytes @ 0x29
  2308  0000A9                     	ds	2
  2309  0000AB                     ??_printRTC:
  2310  0000AB                     ??_ID:
  2311  0000AB                     ??_algorithmTest:
  2312  0000AB                     ??_sensorTest:
  2313  0000AB                     ??_actuatorTest:
  2314  0000AB                     ??_arm:
  2315  0000AB                     ??_PortTestDC:
  2316  0000AB                     ??_SpeedTest:
  2317  0000AB                     ??_PortTestPusher:
  2318  0000AB                     ??_PlatformTest:
  2319  0000AB                     ??_BothServos:
  2320  0000AB                     ??_BlockerTest:
  2321  0000AB                     EEPROM_write@address:
  2322                           	opt stack 0
  2323                           
  2324                           ; 2 bytes @ 0x2B
  2325  0000AB                     	ds	1
  2326  0000AC                     arm@on:
  2327                           	opt stack 0
  2328                           
  2329                           ; 2 bytes @ 0x2C
  2330  0000AC                     	ds	1
  2331  0000AD                     EEPROM_write@data:
  2332                           	opt stack 0
  2333  0000AD                     actuatorTest@i_1739:
  2334                           	opt stack 0
  2335  0000AD                     ID@res3:
  2336                           	opt stack 0
  2337  0000AD                     sensorTest@res:
  2338                           	opt stack 0
  2339  0000AD                     PlatformTest@res:
  2340                           	opt stack 0
  2341  0000AD                     BlockerTest@i:
  2342                           	opt stack 0
  2343                           
  2344                           ; 2 bytes @ 0x2D
  2345  0000AD                     	ds	1
  2346  0000AE                     ??_EEPROM_write:
  2347  0000AE                     actuatorTest@i_1746:
  2348                           	opt stack 0
  2349  0000AE                     printRTC@INT_time:
  2350                           	opt stack 0
  2351                           
  2352                           ; 14 bytes @ 0x2E
  2353  0000AE                     	ds	1
  2354  0000AF                     _ID$1146:
  2355                           	opt stack 0
  2356  0000AF                     EEPROM_write@i:
  2357                           	opt stack 0
  2358  0000AF                     actuatorTest@i_1747:
  2359                           	opt stack 0
  2360  0000AF                     PlatformTest@res_1791:
  2361                           	opt stack 0
  2362  0000AF                     BlockerTest@res:
  2363                           	opt stack 0
  2364                           
  2365                           ; 2 bytes @ 0x2F
  2366  0000AF                     	ds	1
  2367  0000B0                     _ID$1149:
  2368                           	opt stack 0
  2369  0000B0                     EEPROM_write@i_1407:
  2370                           	opt stack 0
  2371  0000B0                     actuatorTest@i_1749:
  2372                           	opt stack 0
  2373                           
  2374                           ; 1 bytes @ 0x30
  2375  0000B0                     	ds	1
  2376  0000B1                     ??_Loading:
  2377  0000B1                     logRun@num:
  2378                           	opt stack 0
  2379  0000B1                     actuatorTest@i_1750:
  2380                           	opt stack 0
  2381  0000B1                     ID@i:
  2382                           	opt stack 0
  2383  0000B1                     PlatformTest@i:
  2384                           	opt stack 0
  2385  0000B1                     BlockerTest@cam_flag:
  2386                           	opt stack 0
  2387                           
  2388                           ; 2 bytes @ 0x31
  2389  0000B1                     	ds	1
  2390  0000B2                     logRun@byte1:
  2391                           	opt stack 0
  2392  0000B2                     actuatorTest@i_1752:
  2393                           	opt stack 0
  2394                           
  2395                           ; 1 bytes @ 0x32
  2396  0000B2                     	ds	1
  2397  0000B3                     logRun@byte2:
  2398                           	opt stack 0
  2399  0000B3                     actuatorTest@i_1753:
  2400                           	opt stack 0
  2401  0000B3                     Loading@addr:
  2402                           	opt stack 0
  2403  0000B3                     ID@i_1145:
  2404                           	opt stack 0
  2405  0000B3                     PlatformTest@i_1795:
  2406                           	opt stack 0
  2407  0000B3                     BlockerTest@cond_flag:
  2408                           	opt stack 0
  2409                           
  2410                           ; 2 bytes @ 0x33
  2411  0000B3                     	ds	1
  2412  0000B4                     logRun@byte3:
  2413                           	opt stack 0
  2414  0000B4                     actuatorTest@i_1755:
  2415                           	opt stack 0
  2416                           
  2417                           ; 1 bytes @ 0x34
  2418  0000B4                     	ds	1
  2419  0000B5                     Loading@byte1:
  2420                           	opt stack 0
  2421  0000B5                     logRun@byte_i:
  2422                           	opt stack 0
  2423  0000B5                     actuatorTest@i_1756:
  2424                           	opt stack 0
  2425  0000B5                     ID@i_1148:
  2426                           	opt stack 0
  2427  0000B5                     PlatformTest@on:
  2428                           	opt stack 0
  2429                           
  2430                           ; 2 bytes @ 0x35
  2431  0000B5                     	ds	1
  2432  0000B6                     logRun@byte11:
  2433                           	opt stack 0
  2434  0000B6                     actuatorTest@i_1758:
  2435                           	opt stack 0
  2436  0000B6                     Loading@i_1123:
  2437                           	opt stack 0
  2438                           
  2439                           ; 2 bytes @ 0x36
  2440  0000B6                     	ds	1
  2441  0000B7                     actuatorTest@i_1759:
  2442                           	opt stack 0
  2443  0000B7                     ID@i_1151:
  2444                           	opt stack 0
  2445  0000B7                     logRun@i:
  2446                           	opt stack 0
  2447                           
  2448                           ; 2 bytes @ 0x37
  2449  0000B7                     	ds	1
  2450  0000B8                     actuatorTest@i_1761:
  2451                           	opt stack 0
  2452  0000B8                     Loading@i_1132:
  2453                           	opt stack 0
  2454                           
  2455                           ; 2 bytes @ 0x38
  2456  0000B8                     	ds	1
  2457  0000B9                     actuatorTest@i_1762:
  2458                           	opt stack 0
  2459  0000B9                     ID@i_1152:
  2460                           	opt stack 0
  2461  0000B9                     logRun@addr:
  2462                           	opt stack 0
  2463                           
  2464                           ; 2 bytes @ 0x39
  2465  0000B9                     	ds	1
  2466  0000BA                     actuatorTest@i_1765:
  2467                           	opt stack 0
  2468  0000BA                     Loading@i_1134:
  2469                           	opt stack 0
  2470                           
  2471                           ; 2 bytes @ 0x3A
  2472  0000BA                     	ds	1
  2473  0000BB                     ID@time:
  2474                           	opt stack 0
  2475  0000BB                     actuatorTest@i_1766:
  2476                           	opt stack 0
  2477                           
  2478                           ; 1 bytes @ 0x3B
  2479  0000BB                     	ds	1
  2480  0000BC                     actuatorTest@i_1768:
  2481                           	opt stack 0
  2482  0000BC                     printRTC@RTC_month:
  2483                           	opt stack 0
  2484  0000BC                     Loading@i_1135:
  2485                           	opt stack 0
  2486  0000BC                     ID@res1:
  2487                           	opt stack 0
  2488                           
  2489                           ; 2 bytes @ 0x3C
  2490  0000BC                     	ds	1
  2491  0000BD                     actuatorTest@i_1769:
  2492                           	opt stack 0
  2493                           
  2494                           ; 1 bytes @ 0x3D
  2495  0000BD                     	ds	1
  2496  0000BE                     actuatorTest@i_1771:
  2497                           	opt stack 0
  2498  0000BE                     Loading@i_1137:
  2499                           	opt stack 0
  2500  0000BE                     ID@res2:
  2501                           	opt stack 0
  2502  0000BE                     printRTC@month:
  2503                           	opt stack 0
  2504                           
  2505                           ; 4 bytes @ 0x3E
  2506  0000BE                     	ds	1
  2507  0000BF                     actuatorTest@i_1772:
  2508                           	opt stack 0
  2509                           
  2510                           ; 1 bytes @ 0x3F
  2511  0000BF                     	ds	1
  2512  0000C0                     actuatorTest@i_1775:
  2513                           	opt stack 0
  2514  0000C0                     Loading@i:
  2515                           	opt stack 0
  2516  0000C0                     ID@n:
  2517                           	opt stack 0
  2518                           
  2519                           ; 2 bytes @ 0x40
  2520  0000C0                     	ds	1
  2521  0000C1                     actuatorTest@i_1776:
  2522                           	opt stack 0
  2523                           
  2524                           ; 1 bytes @ 0x41
  2525  0000C1                     	ds	1
  2526  0000C2                     actuatorTest@i_1778:
  2527                           	opt stack 0
  2528  0000C2                     printRTC@i:
  2529                           	opt stack 0
  2530  0000C2                     Loading@j:
  2531                           	opt stack 0
  2532                           
  2533                           ; 2 bytes @ 0x42
  2534  0000C2                     	ds	1
  2535  0000C3                     actuatorTest@i_1779:
  2536                           	opt stack 0
  2537                           
  2538                           ; 1 bytes @ 0x43
  2539  0000C3                     	ds	1
  2540  0000C4                     ??_UI:
  2541  0000C4                     actuatorTest@i:
  2542                           	opt stack 0
  2543                           
  2544                           ; 2 bytes @ 0x44
  2545  0000C4                     	ds	2
  2546  0000C6                     ??_Test:
  2547  0000C6                     _UI$2433:
  2548                           	opt stack 0
  2549                           
  2550                           ; 2 bytes @ 0x46
  2551  0000C6                     	ds	2
  2552  0000C8                     UI@i:
  2553                           	opt stack 0
  2554                           
  2555                           ; 1 bytes @ 0x48
  2556  0000C8                     	ds	1
  2557  0000C9                     UI@i_412:
  2558                           	opt stack 0
  2559                           
  2560                           ; 1 bytes @ 0x49
  2561  0000C9                     	ds	1
  2562  0000CA                     UI@i_415:
  2563                           	opt stack 0
  2564                           
  2565                           ; 1 bytes @ 0x4A
  2566  0000CA                     	ds	1
  2567  0000CB                     UI@i_416:
  2568                           	opt stack 0
  2569                           
  2570                           ; 1 bytes @ 0x4B
  2571  0000CB                     	ds	1
  2572  0000CC                     UI@i_434:
  2573                           	opt stack 0
  2574                           
  2575                           ; 1 bytes @ 0x4C
  2576  0000CC                     	ds	1
  2577  0000CD                     UI@i_435:
  2578                           	opt stack 0
  2579                           
  2580                           ; 1 bytes @ 0x4D
  2581  0000CD                     	ds	1
  2582  0000CE                     UI@i_438:
  2583                           	opt stack 0
  2584                           
  2585                           ; 1 bytes @ 0x4E
  2586  0000CE                     	ds	1
  2587  0000CF                     UI@i_439:
  2588                           	opt stack 0
  2589                           
  2590                           ; 1 bytes @ 0x4F
  2591  0000CF                     	ds	1
  2592  0000D0                     UI@i_442:
  2593                           	opt stack 0
  2594                           
  2595                           ; 1 bytes @ 0x50
  2596  0000D0                     	ds	1
  2597  0000D1                     UI@i_443:
  2598                           	opt stack 0
  2599                           
  2600                           ; 1 bytes @ 0x51
  2601  0000D1                     	ds	1
  2602  0000D2                     UI@i_446:
  2603                           	opt stack 0
  2604                           
  2605                           ; 1 bytes @ 0x52
  2606  0000D2                     	ds	1
  2607  0000D3                     UI@i_447:
  2608                           	opt stack 0
  2609                           
  2610                           ; 1 bytes @ 0x53
  2611  0000D3                     	ds	1
  2612  0000D4                     UI@i_450:
  2613                           	opt stack 0
  2614                           
  2615                           ; 1 bytes @ 0x54
  2616  0000D4                     	ds	1
  2617  0000D5                     UI@i_451:
  2618                           	opt stack 0
  2619                           
  2620                           ; 1 bytes @ 0x55
  2621  0000D5                     	ds	1
  2622  0000D6                     UI@month:
  2623                           	opt stack 0
  2624                           
  2625                           ; 4 bytes @ 0x56
  2626  0000D6                     	ds	4
  2627  0000DA                     tblptru	equ	0xFF8
  2628                           tblptrh	equ	0xFF7
  2629                           tblptrl	equ	0xFF6
  2630                           tablat	equ	0xFF5
  2631                           postinc0	equ	0xFEE
  2632                           wreg	equ	0xFE8
  2633                           postdec1	equ	0xFE5
  2634                           fsr1l	equ	0xFE1
  2635                           
  2636                           ; 1 bytes @ 0x5A
  2637                           
  2638                           	psect	cstackCOMRAM
  2639  000001                     __pcstackCOMRAM:
  2640                           	opt stack 0
  2641  000001                     ??_updateArmState:
  2642  000001                     ??i2_I2C_Master_Wait:
  2643  000001                     ??i2_isdigit:
  2644  000001                     ?i2___wmul:
  2645                           	opt stack 0
  2646  000001                     ?i2___lwmod:
  2647                           	opt stack 0
  2648  000001                     i2lcdNibble@temp:
  2649                           	opt stack 0
  2650  000001                     i2updateServoPosition@time_us:
  2651                           	opt stack 0
  2652  000001                     i2EEPROM_read@address:
  2653                           	opt stack 0
  2654  000001                     i2___wmul@multiplier:
  2655                           	opt stack 0
  2656  000001                     i2___lwmod@dividend:
  2657                           	opt stack 0
  2658  000001                     i2strcpy@to:
  2659                           	opt stack 0
  2660                           
  2661                           ; 2 bytes @ 0x0
  2662  000001                     	ds	1
  2663  000002                     i2I2C_Master_Read@a:
  2664                           	opt stack 0
  2665  000002                     i2lcdNibble@data:
  2666                           	opt stack 0
  2667  000002                     i2_isdigit$2068:
  2668                           	opt stack 0
  2669  000002                     i2I2C_Master_Write@d:
  2670                           	opt stack 0
  2671                           
  2672                           ; 2 bytes @ 0x1
  2673  000002                     	ds	1
  2674  000003                     i2I2C_Master_Read@temp:
  2675                           	opt stack 0
  2676  000003                     i2lcdInst@data:
  2677                           	opt stack 0
  2678  000003                     i2putch@data:
  2679                           	opt stack 0
  2680  000003                     i2isdigit@c:
  2681                           	opt stack 0
  2682  000003                     i2updateServoPosition@timer:
  2683                           	opt stack 0
  2684  000003                     i2___wmul@multiplicand:
  2685                           	opt stack 0
  2686  000003                     i2___lwmod@divisor:
  2687                           	opt stack 0
  2688  000003                     i2strcpy@from:
  2689                           	opt stack 0
  2690                           
  2691                           ; 2 bytes @ 0x2
  2692  000003                     	ds	1
  2693  000004                     i2getRTC@i:
  2694                           	opt stack 0
  2695                           
  2696                           ; 2 bytes @ 0x3
  2697  000004                     	ds	1
  2698  000005                     ??i2_updateServoPosition:
  2699  000005                     i2___lwmod@counter:
  2700                           	opt stack 0
  2701  000005                     i2___wmul@product:
  2702                           	opt stack 0
  2703  000005                     i2strcpy@cp:
  2704                           	opt stack 0
  2705                           
  2706                           ; 2 bytes @ 0x4
  2707  000005                     	ds	1
  2708  000006                     ?i2___lwdiv:
  2709                           	opt stack 0
  2710  000006                     i2___lwdiv@dividend:
  2711                           	opt stack 0
  2712                           
  2713                           ; 2 bytes @ 0x5
  2714  000006                     	ds	1
  2715  000007                     retrieveLog@logNum:
  2716                           	opt stack 0
  2717  000007                     i2updateServoPosition@my_time:
  2718                           	opt stack 0
  2719                           
  2720                           ; 2 bytes @ 0x6
  2721  000007                     	ds	1
  2722  000008                     i2___lwdiv@divisor:
  2723                           	opt stack 0
  2724                           
  2725                           ; 2 bytes @ 0x7
  2726  000008                     	ds	1
  2727  000009                     ??_retrieveLog:
  2728  000009                     ??_updateServoStates:
  2729                           
  2730                           ; 1 bytes @ 0x8
  2731  000009                     	ds	1
  2732  00000A                     i2___lwdiv@quotient:
  2733                           	opt stack 0
  2734                           
  2735                           ; 2 bytes @ 0x9
  2736  00000A                     	ds	1
  2737  00000B                     retrieveLog@byte1:
  2738                           	opt stack 0
  2739                           
  2740                           ; 1 bytes @ 0xA
  2741  00000B                     	ds	1
  2742  00000C                     retrieveLog@byte2:
  2743                           	opt stack 0
  2744  00000C                     i2___lwdiv@counter:
  2745                           	opt stack 0
  2746                           
  2747                           ; 1 bytes @ 0xB
  2748  00000C                     	ds	1
  2749  00000D                     ?i2_printf:
  2750                           	opt stack 0
  2751  00000D                     retrieveLog@byte3:
  2752                           	opt stack 0
  2753  00000D                     i2printf@f:
  2754                           	opt stack 0
  2755                           
  2756                           ; 2 bytes @ 0xC
  2757  00000D                     	ds	1
  2758  00000E                     retrieveLog@i:
  2759                           	opt stack 0
  2760                           
  2761                           ; 2 bytes @ 0xD
  2762  00000E                     	ds	2
  2763  000010                     retrieveLog@addr:
  2764                           	opt stack 0
  2765                           
  2766                           ; 2 bytes @ 0xF
  2767  000010                     	ds	2
  2768  000012                     dispLogs@myLog:
  2769                           	opt stack 0
  2770                           
  2771                           ; 2 bytes @ 0x11
  2772  000012                     	ds	2
  2773  000014                     
  2774                           ; 1 bytes @ 0x13
  2775  000014                     	ds	5
  2776  000019                     ??i2_printf:
  2777                           
  2778                           ; 1 bytes @ 0x18
  2779  000019                     	ds	4
  2780  00001D                     i2printf@prec:
  2781                           	opt stack 0
  2782                           
  2783                           ; 1 bytes @ 0x1C
  2784  00001D                     	ds	1
  2785  00001E                     i2printf@cp:
  2786                           	opt stack 0
  2787                           
  2788                           ; 2 bytes @ 0x1D
  2789  00001E                     	ds	2
  2790  000020                     i2printf@ap:
  2791                           	opt stack 0
  2792                           
  2793                           ; 2 bytes @ 0x1F
  2794  000020                     	ds	2
  2795  000022                     i2printf@len:
  2796                           	opt stack 0
  2797                           
  2798                           ; 2 bytes @ 0x21
  2799  000022                     	ds	2
  2800  000024                     i2printf@val:
  2801                           	opt stack 0
  2802                           
  2803                           ; 2 bytes @ 0x23
  2804  000024                     	ds	2
  2805  000026                     i2printf@flag:
  2806                           	opt stack 0
  2807                           
  2808                           ; 1 bytes @ 0x25
  2809  000026                     	ds	1
  2810  000027                     i2printf@c:
  2811                           	opt stack 0
  2812                           
  2813                           ; 1 bytes @ 0x26
  2814  000027                     	ds	1
  2815  000028                     i2printf@width:
  2816                           	opt stack 0
  2817                           
  2818                           ; 2 bytes @ 0x27
  2819  000028                     	ds	2
  2820  00002A                     ??_printSortTimer:
  2821  00002A                     ??i2_printRTC:
  2822  00002A                     ?_inputHandler:
  2823                           	opt stack 0
  2824                           
  2825                           ; 2 bytes @ 0x29
  2826  00002A                     	ds	2
  2827  00002C                     ??_inputHandler:
  2828                           
  2829                           ; 1 bytes @ 0x2B
  2830  00002C                     	ds	1
  2831  00002D                     printSortTimer@curTime:
  2832                           	opt stack 0
  2833  00002D                     i2printRTC@INT_time:
  2834                           	opt stack 0
  2835                           
  2836                           ; 14 bytes @ 0x2C
  2837  00002D                     	ds	14
  2838  00003B                     printSortTimer@start_sec:
  2839                           	opt stack 0
  2840  00003B                     i2printRTC@RTC_month:
  2841                           	opt stack 0
  2842                           
  2843                           ; 2 bytes @ 0x3A
  2844  00003B                     	ds	2
  2845  00003D                     printSortTimer@cur_sec:
  2846                           	opt stack 0
  2847  00003D                     i2printRTC@month:
  2848                           	opt stack 0
  2849                           
  2850                           ; 4 bytes @ 0x3C
  2851  00003D                     	ds	2
  2852  00003F                     printSortTimer@min:
  2853                           	opt stack 0
  2854                           
  2855                           ; 2 bytes @ 0x3E
  2856  00003F                     	ds	2
  2857  000041                     printSortTimer@sec:
  2858                           	opt stack 0
  2859  000041                     i2printRTC@i:
  2860                           	opt stack 0
  2861                           
  2862                           ; 2 bytes @ 0x40
  2863  000041                     	ds	2
  2864  000043                     ??_updateMenu:
  2865  000043                     _printSortTimer$2560:
  2866                           	opt stack 0
  2867                           
  2868                           ; 2 bytes @ 0x42
  2869  000043                     	ds	2
  2870  000045                     printSortTimer@timeDiff:
  2871                           	opt stack 0
  2872                           
  2873                           ; 2 bytes @ 0x44
  2874  000045                     	ds	2
  2875  000047                     printSortTimer@i:
  2876                           	opt stack 0
  2877                           
  2878                           ; 2 bytes @ 0x46
  2879  000047                     	ds	2
  2880  000049                     ??_handler:
  2881                           
  2882                           ; 1 bytes @ 0x48
  2883  000049                     	ds	16
  2884                           tblptru	equ	0xFF8
  2885                           tblptrh	equ	0xFF7
  2886                           tblptrl	equ	0xFF6
  2887                           tablat	equ	0xFF5
  2888                           postinc0	equ	0xFEE
  2889                           wreg	equ	0xFE8
  2890                           postdec1	equ	0xFE5
  2891                           fsr1l	equ	0xFE1
  2892                           
  2893 ;;
  2894 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2895 ;;
  2896 ;; *************** function _main *****************
  2897 ;; Defined at:
  2898 ;;		line 19 in file "main.c"
  2899 ;; Parameters:    Size  Location     Type
  2900 ;;		None
  2901 ;; Auto vars:     Size  Location     Type
  2902 ;;		None
  2903 ;; Return value:  Size  Location     Type
  2904 ;;                  1    wreg      void 
  2905 ;; Registers used:
  2906 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2907 ;; Tracked objects:
  2908 ;;		On entry : 0/0
  2909 ;;		On exit  : 0/0
  2910 ;;		Unchanged: 0/0
  2911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2916 ;;Total ram usage:        0 bytes
  2917 ;; Hardware stack levels required when called:   13
  2918 ;; This function calls:
  2919 ;;		_I2C_Master_Init
  2920 ;;		_Test
  2921 ;;		_UI
  2922 ;;		_initEEPROM
  2923 ;;		_initLCD
  2924 ;;		_initTime
  2925 ;;		_initUI
  2926 ;;		_logRun
  2927 ;;		_machineConfig
  2928 ;;		_sort
  2929 ;;		_stopSignals
  2930 ;; This function is called by:
  2931 ;;		Startup code after reset
  2932 ;; This function uses a non-reentrant model
  2933 ;;
  2934                           
  2935                           	psect	text0
  2936  0046E8                     __ptext0:
  2937                           	opt stack 0
  2938  0046E8                     _main:
  2939                           	opt stack 18
  2940                           
  2941                           ;main.c: 20: machineConfig();
  2942                           
  2943                           ;incstack = 0
  2944  0046E8  ECFD  F027         	call	_machineConfig	;wreg free
  2945                           
  2946                           ;main.c: 21: initLCD();
  2947  0046EC  ECDB  F029         	call	_initLCD	;wreg free
  2948                           
  2949                           ;main.c: 24: RTCflag = 0;
  2950  0046F0  0E00               	movlw	0
  2951  0046F2  0100               	movlb	0	; () banked
  2952  0046F4  6FE5               	movwf	(_RTCflag+1)& (0+255),b
  2953  0046F6  0E00               	movlw	0
  2954  0046F8  6FE4               	movwf	_RTCflag& (0+255),b
  2955                           
  2956                           ;main.c: 25: if(RTCflag){
  2957  0046FA  0100               	movlb	0	; () banked
  2958  0046FC  51E4               	movf	_RTCflag& (0+255),w,b
  2959  0046FE  0100               	movlb	0	; () banked
  2960  004700  11E5               	iorwf	(_RTCflag+1)& (0+255),w,b
  2961  004702  B4D8               	btfsc	status,2,c
  2962  004704  D016               	goto	l10073
  2963                           
  2964                           ; BSR set to: 0
  2965                           ;main.c: 26: initTime(0x42, 0x47, 0x17, 0x07, 0x08, 0x04, 0x17);
  2966  004706  0E47               	movlw	71
  2967  004708  0100               	movlb	0	; () banked
  2968  00470A  6F80               	movwf	initTime@m& (0+255),b
  2969  00470C  0E17               	movlw	23
  2970  00470E  0100               	movlb	0	; () banked
  2971  004710  6F81               	movwf	initTime@h& (0+255),b
  2972  004712  0E07               	movlw	7
  2973  004714  0100               	movlb	0	; () banked
  2974  004716  6F82               	movwf	initTime@w& (0+255),b
  2975  004718  0E08               	movlw	8
  2976  00471A  0100               	movlb	0	; () banked
  2977  00471C  6F83               	movwf	initTime@DD& (0+255),b
  2978  00471E  0E04               	movlw	4
  2979  004720  0100               	movlb	0	; () banked
  2980  004722  6F84               	movwf	initTime@MM& (0+255),b
  2981  004724  0E17               	movlw	23
  2982  004726  0100               	movlb	0	; () banked
  2983  004728  6F85               	movwf	initTime@YY& (0+255),b
  2984  00472A  0E42               	movlw	66
  2985  00472C  ECCE  F02C         	call	_initTime
  2986                           
  2987                           ;main.c: 27: }
  2988  004730  D00B               	goto	l10075
  2989  004732                     l10073:
  2990                           
  2991                           ;main.c: 28: else{
  2992                           ;main.c: 29: I2C_Master_Init(10000);
  2993  004732  0E10               	movlw	16
  2994  004734  0100               	movlb	0	; () banked
  2995  004736  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2996  004738  0E27               	movlw	39
  2997  00473A  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2998  00473C  0E00               	movlw	0
  2999  00473E  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3000  004740  0E00               	movlw	0
  3001  004742  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3002  004744  EC60  F028         	call	_I2C_Master_Init	;wreg free
  3003  004748                     l10075:
  3004                           
  3005                           ;main.c: 30: }
  3006                           ;main.c: 32: initUI();
  3007  004748  ECFE  F02A         	call	_initUI	;wreg free
  3008                           
  3009                           ;main.c: 33: first = 1;
  3010  00474C  0E00               	movlw	0
  3011  00474E  0101               	movlb	1	; () banked
  3012  004750  6F38               	movwf	(_first+1)& (0+255),b
  3013  004752  0E01               	movlw	1
  3014  004754  6F37               	movwf	_first& (0+255),b
  3015                           
  3016                           ; BSR set to: 1
  3017                           ;main.c: 34: initEEPROM();
  3018  004756  EC08  F02D         	call	_initEEPROM	;wreg free
  3019                           
  3020                           ;main.c: 45: switch(machine_state){
  3021                           
  3022                           ;main.c: 44: while(1){
  3023  00475A  D018               	goto	l10099
  3024  00475C                     l10081:
  3025                           
  3026                           ;main.c: 47: UI();
  3027  00475C  EC09  F000         	call	_UI	;wreg free
  3028                           
  3029                           ;main.c: 48: break;
  3030  004760  D015               	goto	l10099
  3031  004762                     l10083:
  3032                           
  3033                           ;main.c: 50: sort();
  3034  004762  ECBD  F02C         	call	_sort	;wreg free
  3035                           
  3036                           ;main.c: 51: break;
  3037  004766  D012               	goto	l10099
  3038  004768                     l10085:
  3039                           
  3040                           ;main.c: 53: stopSignals();
  3041  004768  ECEE  F02C         	call	_stopSignals	;wreg free
  3042                           
  3043                           ;main.c: 54: logRun();
  3044  00476C  EC03  F01F         	call	_logRun	;wreg free
  3045                           
  3046                           ;main.c: 55: first = 1;
  3047  004770  0E00               	movlw	0
  3048  004772  0101               	movlb	1	; () banked
  3049  004774  6F38               	movwf	(_first+1)& (0+255),b
  3050  004776  0E01               	movlw	1
  3051  004778  6F37               	movwf	_first& (0+255),b
  3052                           
  3053                           ; BSR set to: 1
  3054                           ;main.c: 56: UI();
  3055  00477A  EC09  F000         	call	_UI	;wreg free
  3056                           
  3057                           ;main.c: 57: break;
  3058  00477E  D006               	goto	l10099
  3059  004780                     l10093:
  3060                           
  3061                           ;main.c: 59: Test();
  3062  004780  ECBD  F020         	call	_Test	;wreg free
  3063                           
  3064                           ;main.c: 60: break;
  3065  004784  D003               	goto	l10099
  3066  004786                     l10095:
  3067                           
  3068                           ;main.c: 62: stopSignals();
  3069  004786  ECEE  F02C         	call	_stopSignals	;wreg free
  3070  00478A                     l508:
  3071  00478A  D7FF               	goto	l508
  3072  00478C                     l10099:
  3073  00478C  0100               	movlb	0	; () banked
  3074  00478E  51FC               	movf	_machine_state& (0+255),w,b
  3075                           
  3076                           ; Switch size 1, requested type "space"
  3077                           ; Number of cases is 5, Range of values is 0 to 4
  3078                           ; switch strategies available:
  3079                           ; Name         Instructions Cycles
  3080                           ; simple_byte           16     9 (average)
  3081                           ;	Chosen strategy is simple_byte
  3082  004790  0A00               	xorlw	0	; case 0
  3083  004792  B4D8               	btfsc	status,2,c
  3084  004794  D7E3               	goto	l10081
  3085  004796  0A01               	xorlw	1	; case 1
  3086  004798  B4D8               	btfsc	status,2,c
  3087  00479A  D7E3               	goto	l10083
  3088  00479C  0A03               	xorlw	3	; case 2
  3089  00479E  B4D8               	btfsc	status,2,c
  3090  0047A0  D7E3               	goto	l10085
  3091  0047A2  0A01               	xorlw	1	; case 3
  3092  0047A4  B4D8               	btfsc	status,2,c
  3093  0047A6  D7EC               	goto	l10093
  3094  0047A8  0A07               	xorlw	7	; case 4
  3095  0047AA  B4D8               	btfsc	status,2,c
  3096  0047AC  D7EC               	goto	l10095
  3097                           
  3098                           ; BSR set to: 0
  3099                           
  3100                           ; BSR set to: 0
  3101  0047AE  D7EE               	goto	l10099
  3102  0047B0                     __end_of_main:
  3103                           	opt stack 0
  3104                           tblptru	equ	0xFF8
  3105                           tblptrh	equ	0xFF7
  3106                           tblptrl	equ	0xFF6
  3107                           tablat	equ	0xFF5
  3108                           postinc0	equ	0xFEE
  3109                           wreg	equ	0xFE8
  3110                           postdec1	equ	0xFE5
  3111                           fsr1l	equ	0xFE1
  3112                           status	equ	0xFD8
  3113                           
  3114 ;; *************** function _sort *****************
  3115 ;; Defined at:
  3116 ;;		line 70 in file "sort.c"
  3117 ;; Parameters:    Size  Location     Type
  3118 ;;		None
  3119 ;; Auto vars:     Size  Location     Type
  3120 ;;		None
  3121 ;; Return value:  Size  Location     Type
  3122 ;;                  1    wreg      void 
  3123 ;; Registers used:
  3124 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3125 ;; Tracked objects:
  3126 ;;		On entry : 0/0
  3127 ;;		On exit  : 0/0
  3128 ;;		Unchanged: 0/0
  3129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3134 ;;Total ram usage:        0 bytes
  3135 ;; Hardware stack levels used:    1
  3136 ;; Hardware stack levels required when called:   12
  3137 ;; This function calls:
  3138 ;;		_Distribution
  3139 ;;		_ID
  3140 ;;		_Loading
  3141 ;; This function is called by:
  3142 ;;		_main
  3143 ;; This function uses a non-reentrant model
  3144 ;;
  3145                           
  3146                           	psect	text1
  3147  00597A                     __ptext1:
  3148                           	opt stack 0
  3149  00597A                     _sort:
  3150                           	opt stack 18
  3151                           
  3152                           ;sort.c: 71: if(machine_state == Sorting_state){
  3153                           
  3154                           ; BSR set to: 0
  3155                           ;incstack = 0
  3156  00597A  0100               	movlb	0	; () banked
  3157  00597C  05FC               	decf	_machine_state& (0+255),w,b
  3158  00597E  B4D8               	btfsc	status,2,c
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;sort.c: 72: Loading();
  3162  005980  ECC9  F008         	call	_Loading	;wreg free
  3163                           
  3164                           ;sort.c: 73: }
  3165                           ;sort.c: 74: if(machine_state == Sorting_state){
  3166  005984  0100               	movlb	0	; () banked
  3167  005986  05FC               	decf	_machine_state& (0+255),w,b
  3168  005988  B4D8               	btfsc	status,2,c
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;sort.c: 75: ID();
  3172  00598A  EC64  F00B         	call	_ID	;wreg free
  3173                           
  3174                           ;sort.c: 76: }
  3175                           ;sort.c: 77: if(machine_state == Sorting_state){
  3176  00598E  0100               	movlb	0	; () banked
  3177  005990  05FC               	decf	_machine_state& (0+255),w,b
  3178  005992  A4D8               	btfss	status,2,c
  3179  005994  0012               	return	
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;sort.c: 78: Distribution();
  3183  005996  EC33  F022         	call	_Distribution	;wreg free
  3184  00599A  0012               	return	
  3185  00599C                     __end_of_sort:
  3186                           	opt stack 0
  3187                           tblptru	equ	0xFF8
  3188                           tblptrh	equ	0xFF7
  3189                           tblptrl	equ	0xFF6
  3190                           tablat	equ	0xFF5
  3191                           postinc0	equ	0xFEE
  3192                           wreg	equ	0xFE8
  3193                           postdec1	equ	0xFE5
  3194                           fsr1l	equ	0xFE1
  3195                           status	equ	0xFD8
  3196                           
  3197 ;; *************** function _Loading *****************
  3198 ;; Defined at:
  3199 ;;		line 82 in file "sort.c"
  3200 ;; Parameters:    Size  Location     Type
  3201 ;;		None
  3202 ;; Auto vars:     Size  Location     Type
  3203 ;;  i               2   62[BANK0 ] int 
  3204 ;;  i               2   60[BANK0 ] int 
  3205 ;;  i               2   58[BANK0 ] int 
  3206 ;;  i               2   56[BANK0 ] int 
  3207 ;;  i               2   54[BANK0 ] int 
  3208 ;;  j               2   66[BANK0 ] int 
  3209 ;;  i               2   64[BANK0 ] int 
  3210 ;;  addr            2   51[BANK0 ] unsigned short 
  3211 ;;  byte1           1   53[BANK0 ] unsigned char 
  3212 ;; Return value:  Size  Location     Type
  3213 ;;                  1    wreg      void 
  3214 ;; Registers used:
  3215 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3216 ;; Tracked objects:
  3217 ;;		On entry : 0/0
  3218 ;;		On exit  : 0/0
  3219 ;;		Unchanged: 0/0
  3220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3222 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3223 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3224 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3225 ;;Total ram usage:       19 bytes
  3226 ;; Hardware stack levels used:    1
  3227 ;; Hardware stack levels required when called:   11
  3228 ;; This function calls:
  3229 ;;		_EEPROM_read
  3230 ;;		_EEPROM_write
  3231 ;;		_delay_ms
  3232 ;;		_getIR
  3233 ;;		_getMAG
  3234 ;;		_initGlobalVars
  3235 ;;		_initServos
  3236 ;;		_initSortTimer
  3237 ;;		_lcdInst
  3238 ;;		_readIR
  3239 ;; This function is called by:
  3240 ;;		_sort
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           	psect	text2
  3245  001192                     __ptext2:
  3246                           	opt stack 0
  3247  001192                     _Loading:
  3248                           	opt stack 18
  3249                           
  3250                           ;sort.c: 83: if(first){
  3251                           
  3252                           ;incstack = 0
  3253  001192  0101               	movlb	1	; () banked
  3254  001194  5137               	movf	_first& (0+255),w,b
  3255  001196  0101               	movlb	1	; () banked
  3256  001198  1138               	iorwf	(_first+1)& (0+255),w,b
  3257  00119A  B4D8               	btfsc	status,2,c
  3258  00119C  D069               	goto	l7811
  3259                           
  3260                           ; BSR set to: 1
  3261                           ;sort.c: 84: TMR1IE = 1;
  3262  00119E  809D               	bsf	3997,0,c	;volatile
  3263                           
  3264                           ;sort.c: 85: TMR2IE = 1;
  3265  0011A0  829D               	bsf	3997,1,c	;volatile
  3266                           
  3267                           ;sort.c: 86: TMR3IE = 1;
  3268  0011A2  82A0               	bsf	4000,1,c	;volatile
  3269                           
  3270                           ; BSR set to: 1
  3271                           ;sort.c: 87: initGlobalVars();
  3272  0011A4  EC0F  F023         	call	_initGlobalVars	;wreg free
  3273                           
  3274                           ;sort.c: 88: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3275  0011A8  0E01               	movlw	1
  3276  0011AA  EC39  F02D         	call	_lcdInst
  3277  0011AE  0E68               	movlw	104
  3278  0011B0  0100               	movlb	0	; () banked
  3279  0011B2  6FB1               	movwf	??_Loading& (0+255),b
  3280  0011B4  0EE4               	movlw	228
  3281  0011B6                     u9597:
  3282  0011B6  2EE8               	decfsz	wreg,f,c
  3283  0011B8  D7FE               	bra	u9597
  3284  0011BA  2FB1               	decfsz	??_Loading& (0+255),f,b
  3285  0011BC  D7FC               	bra	u9597
  3286  0011BE  F000               	nop	
  3287                           
  3288                           ;sort.c: 89: initSortTimer();
  3289  0011C0  ECF9  F024         	call	_initSortTimer	;wreg free
  3290                           
  3291                           ;sort.c: 90: LATCbits.LATC5 = 1;
  3292  0011C4  8A8B               	bsf	3979,5,c	;volatile
  3293                           
  3294                           ;sort.c: 95: sel = EEPROM_read(0);
  3295  0011C6  0E00               	movlw	0
  3296  0011C8  0100               	movlb	0	; () banked
  3297  0011CA  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3298  0011CC  0E00               	movlw	0
  3299  0011CE  6F80               	movwf	EEPROM_read@address& (0+255),b
  3300  0011D0  ECFC  F02C         	call	_EEPROM_read	;wreg free
  3301  0011D4  0100               	movlb	0	; () banked
  3302  0011D6  6FFD               	movwf	_sel& (0+255),b
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;sort.c: 96: unsigned short addr = 1 + 11 * sel;
  3306  0011D8  0100               	movlb	0	; () banked
  3307  0011DA  51FD               	movf	_sel& (0+255),w,b
  3308  0011DC  0D0B               	mullw	11
  3309  0011DE  0E01               	movlw	1
  3310  0011E0  24F3               	addwf	prodl,w,c
  3311  0011E2  0100               	movlb	0	; () banked
  3312  0011E4  6FB3               	movwf	Loading@addr& (0+255),b
  3313  0011E6  0E00               	movlw	0
  3314  0011E8  20F4               	addwfc	prodh,w,c
  3315  0011EA  0100               	movlb	0	; () banked
  3316  0011EC  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;sort.c: 97: unsigned char byte1 = 0b01111111;
  3320  0011EE  0E7F               	movlw	127
  3321  0011F0  0100               	movlb	0	; () banked
  3322  0011F2  6FB5               	movwf	Loading@byte1& (0+255),b
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;sort.c: 98: EEPROM_write(addr, byte1);
  3326  0011F4  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3327  0011F8  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3328  0011FC  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3329  001200  ECBF  F021         	call	_EEPROM_write	;wreg free
  3330                           
  3331                           ;sort.c: 101: LATBbits.LATB2 = 0;
  3332  001204  948A               	bcf	3978,2,c	;volatile
  3333                           
  3334                           ;sort.c: 103: for(int i=0; i<46; i++){
  3335  001206  0E00               	movlw	0
  3336  001208  0100               	movlb	0	; () banked
  3337  00120A  6FC1               	movwf	(Loading@i+1)& (0+255),b
  3338  00120C  0E00               	movlw	0
  3339  00120E  6FC0               	movwf	Loading@i& (0+255),b
  3340                           
  3341                           ; BSR set to: 0
  3342  001210  0100               	movlb	0	; () banked
  3343  001212  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3344  001214  D008               	goto	l7801
  3345  001216  0100               	movlb	0	; () banked
  3346  001218  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3347  00121A  E126               	bnz	l795
  3348  00121C  0E2E               	movlw	46
  3349  00121E  0100               	movlb	0	; () banked
  3350  001220  5DC0               	subwf	Loading@i& (0+255),w,b
  3351  001222  B0D8               	btfsc	status,0,c
  3352  001224  D021               	goto	l795
  3353  001226                     l7801:
  3354                           
  3355                           ; BSR set to: 0
  3356                           ;sort.c: 104: LATBbits.LATB2 = !LATBbits.LATB2;
  3357  001226  B48A               	btfsc	3978,2,c	;volatile
  3358  001228  D004               	goto	u6310
  3359  00122A  0100               	movlb	0	; () banked
  3360  00122C  6BB1               	clrf	??_Loading& (0+255),b
  3361  00122E  2BB1               	incf	??_Loading& (0+255),f,b
  3362  001230  D002               	goto	u6328
  3363  001232                     u6310:
  3364  001232  0100               	movlb	0	; () banked
  3365  001234  6BB1               	clrf	??_Loading& (0+255),b
  3366  001236                     u6328:
  3367  001236  0100               	movlb	0	; () banked
  3368  001238  47B1               	rlncf	??_Loading& (0+255),f,b
  3369  00123A  47B1               	rlncf	??_Loading& (0+255),f,b
  3370  00123C  508A               	movf	3978,w,c	;volatile
  3371  00123E  0100               	movlb	0	; () banked
  3372  001240  19B1               	xorwf	??_Loading& (0+255),w,b
  3373  001242  0BFB               	andlw	-5
  3374  001244  19B1               	xorwf	??_Loading& (0+255),w,b
  3375  001246  6E8A               	movwf	3978,c	;volatile
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;sort.c: 105: delay_ms(45-i);
  3379  001248  0100               	movlb	0	; () banked
  3380  00124A  51C0               	movf	Loading@i& (0+255),w,b
  3381  00124C  0800               	sublw	0
  3382  00124E  0F2D               	addlw	45
  3383  001250  EC5D  F02C         	call	_delay_ms
  3384  001254  0100               	movlb	0	; () banked
  3385  001256  4BC0               	infsnz	Loading@i& (0+255),f,b
  3386  001258  2BC1               	incf	(Loading@i+1)& (0+255),f,b
  3387                           
  3388                           ; BSR set to: 0
  3389  00125A  0100               	movlb	0	; () banked
  3390  00125C  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3391  00125E  D7E3               	goto	l7801
  3392  001260  0100               	movlb	0	; () banked
  3393  001262  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3394  001264  E101               	bnz	u6330
  3395  001266  D7DA               	goto	L1
  3396  001268                     u6330:
  3397  001268                     l795:
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;sort.c: 106: }
  3401                           ;sort.c: 107: LATBbits.LATB2 = 1;
  3402  001268  848A               	bsf	3978,2,c	;volatile
  3403                           
  3404                           ; BSR set to: 0
  3405                           ;sort.c: 110: initServos();
  3406  00126A  ECA9  F026         	call	_initServos	;wreg free
  3407                           
  3408                           ;sort.c: 111: }
  3409  00126E  0012               	return	
  3410  001270                     l7811:
  3411                           
  3412                           ;sort.c: 112: else{
  3413                           ;sort.c: 115: if(!f_loadingNewCan){
  3414  001270  0100               	movlb	0	; () banked
  3415  001272  51EE               	movf	_f_loadingNewCan& (0+255),w,b
  3416  001274  0100               	movlb	0	; () banked
  3417  001276  11EF               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3418  001278  A4D8               	btfss	status,2,c
  3419  00127A  D018               	goto	l7827
  3420                           
  3421                           ; BSR set to: 0
  3422                           ;sort.c: 117: getIR();
  3423  00127C  EC21  F027         	call	_getIR	;wreg free
  3424                           
  3425                           ;sort.c: 119: if(!f_loadingNewCan){
  3426  001280  0100               	movlb	0	; () banked
  3427  001282  51EE               	movf	_f_loadingNewCan& (0+255),w,b
  3428  001284  0100               	movlb	0	; () banked
  3429  001286  11EF               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3430  001288  B4D8               	btfsc	status,2,c
  3431  00128A  0012               	return	
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;sort.c: 123: else{
  3435                           ;sort.c: 124: count_total++;
  3436                           
  3437                           ; BSR set to: 0
  3438                           
  3439                           ; BSR set to: 0
  3440                           ;sort.c: 121: }
  3441                           
  3442                           ; BSR set to: 0
  3443                           ;sort.c: 120: return;
  3444  00128C  0100               	movlb	0	; () banked
  3445  00128E  4BFE               	infsnz	_count_total& (0+255),f,b
  3446  001290  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3447                           
  3448                           ; BSR set to: 0
  3449                           ;sort.c: 125: if(count_total == 12){
  3450  001292  0E0C               	movlw	12
  3451  001294  0100               	movlb	0	; () banked
  3452  001296  19FE               	xorwf	_count_total& (0+255),w,b
  3453  001298  0100               	movlb	0	; () banked
  3454  00129A  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3455  00129C  A4D8               	btfss	status,2,c
  3456  00129E  0012               	return	
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;sort.c: 126: f_lastCan = 1;
  3460  0012A0  0E00               	movlw	0
  3461  0012A2  0100               	movlb	0	; () banked
  3462  0012A4  6FED               	movwf	(_f_lastCan+1)& (0+255),b
  3463  0012A6  0E01               	movlw	1
  3464  0012A8  6FEC               	movwf	_f_lastCan& (0+255),b
  3465                           
  3466                           ; BSR set to: 0
  3467                           ;sort.c: 127: }
  3468                           ;sort.c: 128: }
  3469                           ;sort.c: 129: }
  3470                           
  3471                           ; BSR set to: 0
  3472  0012AA  0012               	return	
  3473  0012AC                     l7827:
  3474                           
  3475                           ; BSR set to: 0
  3476                           ;sort.c: 132: else if(f_ID_receive){
  3477  0012AC  0101               	movlb	1	; () banked
  3478  0012AE  512D               	movf	_f_ID_receive& (0+255),w,b
  3479  0012B0  0101               	movlb	1	; () banked
  3480  0012B2  112E               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3481  0012B4  B4D8               	btfsc	status,2,c
  3482  0012B6  0012               	return	
  3483                           
  3484                           ; BSR set to: 1
  3485                           ;sort.c: 133: f_most_recent_sort_time = 1;
  3486  0012B8  0E00               	movlw	0
  3487  0012BA  0101               	movlb	1	; () banked
  3488  0012BC  6F36               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3489  0012BE  0E01               	movlw	1
  3490  0012C0  6F35               	movwf	_f_most_recent_sort_time& (0+255),b
  3491                           
  3492                           ;sort.c: 134: f_loadingNewCan = 0;
  3493  0012C2  0E00               	movlw	0
  3494  0012C4  0100               	movlb	0	; () banked
  3495  0012C6  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3496  0012C8  0E00               	movlw	0
  3497  0012CA  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;sort.c: 135: _delay((unsigned long)((400)*(32000000/4000.0)));
  3501  0012CC  0E11               	movlw	17
  3502  0012CE  0100               	movlb	0	; () banked
  3503  0012D0  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3504  0012D2  0E3C               	movlw	60
  3505  0012D4  0100               	movlb	0	; () banked
  3506  0012D6  6FB1               	movwf	??_Loading& (0+255),b
  3507  0012D8  0ECB               	movlw	203
  3508  0012DA                     u9607:
  3509  0012DA  2EE8               	decfsz	wreg,f,c
  3510  0012DC  D7FE               	bra	u9607
  3511  0012DE  2FB1               	decfsz	??_Loading& (0+255),f,b
  3512  0012E0  D7FC               	bra	u9607
  3513  0012E2  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3514  0012E4  D7FA               	bra	u9607
  3515                           
  3516                           ;sort.c: 136: LATBbits.LATB2 = 0;
  3517  0012E6  948A               	bcf	3978,2,c	;volatile
  3518                           
  3519                           ;sort.c: 140: f_arm_position = 1;
  3520  0012E8  0E00               	movlw	0
  3521  0012EA  0100               	movlb	0	; () banked
  3522  0012EC  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3523  0012EE  0E01               	movlw	1
  3524  0012F0  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  3525                           
  3526                           ; BSR set to: 0
  3527                           ;sort.c: 142: delay_ms(750);
  3528  0012F2  0EEE               	movlw	238
  3529  0012F4  EC5D  F02C         	call	_delay_ms
  3530                           
  3531                           ;sort.c: 143: getMAG();
  3532  0012F8  ECCC  F02A         	call	_getMAG	;wreg free
  3533                           
  3534                           ;sort.c: 144: sensor_outputs[0] = MAG_signal;
  3535  0012FC  C0E2  F0DA         	movff	_MAG_signal,_sensor_outputs
  3536  001300  C0E3  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3537                           
  3538                           ;sort.c: 146: TMR2IE = 0;
  3539  001304  929D               	bcf	3997,1,c	;volatile
  3540                           
  3541                           ;sort.c: 147: if(sensor_outputs[0]){
  3542  001306  0100               	movlb	0	; () banked
  3543  001308  51DA               	movf	_sensor_outputs& (0+255),w,b
  3544  00130A  0100               	movlb	0	; () banked
  3545  00130C  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3546  00130E  B4D8               	btfsc	status,2,c
  3547  001310  D01D               	goto	l7859
  3548                           
  3549                           ; BSR set to: 0
  3550                           ;sort.c: 148: for(int i = 0; i<2500; i++){
  3551  001312  0E00               	movlw	0
  3552  001314  0100               	movlb	0	; () banked
  3553  001316  6FB7               	movwf	(Loading@i_1123+1)& (0+255),b
  3554  001318  0E00               	movlw	0
  3555  00131A  6FB6               	movwf	Loading@i_1123& (0+255),b
  3556  00131C                     l7849:
  3557                           
  3558                           ; BSR set to: 0
  3559  00131C  0100               	movlb	0	; () banked
  3560  00131E  BFB7               	btfsc	(Loading@i_1123+1)& (0+255),7,b
  3561  001320  D008               	goto	l805
  3562  001322  0EC4               	movlw	196
  3563  001324  0100               	movlb	0	; () banked
  3564  001326  5DB6               	subwf	Loading@i_1123& (0+255),w,b
  3565  001328  0E09               	movlw	9
  3566  00132A  0100               	movlb	0	; () banked
  3567  00132C  59B7               	subwfb	(Loading@i_1123+1)& (0+255),w,b
  3568  00132E  B0D8               	btfsc	status,0,c
  3569  001330  D02A               	goto	l807
  3570  001332                     l805:
  3571                           
  3572                           ; BSR set to: 0
  3573                           ;sort.c: 149: LATAbits.LATA4 = 1;
  3574  001332  8889               	bsf	3977,4,c	;volatile
  3575                           
  3576                           ; BSR set to: 0
  3577                           ;sort.c: 150: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3578  001334  0EC8               	movlw	200
  3579  001336                     u9617:
  3580  001336  2EE8               	decfsz	wreg,f,c
  3581  001338  D7FE               	bra	u9617
  3582                           
  3583                           ;sort.c: 151: LATAbits.LATA4 = 0;
  3584  00133A  9889               	bcf	3977,4,c	;volatile
  3585                           
  3586                           ;sort.c: 152: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3587  00133C  0E42               	movlw	66
  3588  00133E                     u9627:
  3589  00133E  2EE8               	decfsz	wreg,f,c
  3590  001340  D7FE               	bra	u9627
  3591  001342  D000               	nop2	
  3592  001344  0100               	movlb	0	; () banked
  3593  001346  4BB6               	infsnz	Loading@i_1123& (0+255),f,b
  3594  001348  2BB7               	incf	(Loading@i_1123+1)& (0+255),f,b
  3595  00134A  D7E8               	goto	l7849
  3596  00134C                     l7859:
  3597                           
  3598                           ; BSR set to: 0
  3599                           ;sort.c: 155: else{
  3600                           ;sort.c: 156: for(int i = 0; i<2500; i++){
  3601  00134C  0E00               	movlw	0
  3602  00134E  0100               	movlb	0	; () banked
  3603  001350  6FB9               	movwf	(Loading@i_1132+1)& (0+255),b
  3604  001352  0E00               	movlw	0
  3605  001354  6FB8               	movwf	Loading@i_1132& (0+255),b
  3606  001356                     l7861:
  3607                           
  3608                           ; BSR set to: 0
  3609  001356  0100               	movlb	0	; () banked
  3610  001358  BFB9               	btfsc	(Loading@i_1132+1)& (0+255),7,b
  3611  00135A  D008               	goto	l808
  3612  00135C  0EC4               	movlw	196
  3613  00135E  0100               	movlb	0	; () banked
  3614  001360  5DB8               	subwf	Loading@i_1132& (0+255),w,b
  3615  001362  0E09               	movlw	9
  3616  001364  0100               	movlb	0	; () banked
  3617  001366  59B9               	subwfb	(Loading@i_1132+1)& (0+255),w,b
  3618  001368  B0D8               	btfsc	status,0,c
  3619  00136A  D00D               	goto	l807
  3620  00136C                     l808:
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;sort.c: 157: LATAbits.LATA4 = 1;
  3624  00136C  8889               	bsf	3977,4,c	;volatile
  3625                           
  3626                           ; BSR set to: 0
  3627                           ;sort.c: 158: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3628  00136E  0E9A               	movlw	154
  3629  001370                     u9637:
  3630  001370  2EE8               	decfsz	wreg,f,c
  3631  001372  D7FE               	bra	u9637
  3632  001374  D000               	nop2	
  3633                           
  3634                           ;sort.c: 159: LATAbits.LATA4 = 0;
  3635  001376  9889               	bcf	3977,4,c	;volatile
  3636                           
  3637                           ;sort.c: 160: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3638  001378  0E70               	movlw	112
  3639  00137A                     u9647:
  3640  00137A  2EE8               	decfsz	wreg,f,c
  3641  00137C  D7FE               	bra	u9647
  3642  00137E  0100               	movlb	0	; () banked
  3643  001380  4BB8               	infsnz	Loading@i_1132& (0+255),f,b
  3644  001382  2BB9               	incf	(Loading@i_1132+1)& (0+255),f,b
  3645  001384  D7E8               	goto	l7861
  3646  001386                     l807:
  3647                           
  3648                           ; BSR set to: 0
  3649                           ;sort.c: 161: }
  3650                           ;sort.c: 162: }
  3651                           ;sort.c: 163: TMR2IE = 1;
  3652  001386  829D               	bsf	3997,1,c	;volatile
  3653                           
  3654                           ; BSR set to: 0
  3655                           ;sort.c: 164: _delay((unsigned long)((350)*(32000000/4000.0)));
  3656  001388  0E0F               	movlw	15
  3657  00138A  0100               	movlb	0	; () banked
  3658  00138C  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3659  00138E  0E35               	movlw	53
  3660  001390  0100               	movlb	0	; () banked
  3661  001392  6FB1               	movwf	??_Loading& (0+255),b
  3662  001394  0E51               	movlw	81
  3663  001396                     u9657:
  3664  001396  2EE8               	decfsz	wreg,f,c
  3665  001398  D7FE               	bra	u9657
  3666  00139A  2FB1               	decfsz	??_Loading& (0+255),f,b
  3667  00139C  D7FC               	bra	u9657
  3668  00139E  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3669  0013A0  D7FA               	bra	u9657
  3670                           
  3671                           ;sort.c: 166: readIR();
  3672  0013A2  EC69  F029         	call	_readIR	;wreg free
  3673                           
  3674                           ;sort.c: 167: if(IR_signal==1){
  3675  0013A6  0100               	movlb	0	; () banked
  3676  0013A8  05E0               	decf	_IR_signal& (0+255),w,b
  3677  0013AA  0100               	movlb	0	; () banked
  3678  0013AC  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3679  0013AE  A4D8               	btfss	status,2,c
  3680  0013B0  D185               	goto	l7999
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;sort.c: 168: _delay((unsigned long)((70)*(32000000/4000.0)));
  3684  0013B2  0E03               	movlw	3
  3685  0013B4  0100               	movlb	0	; () banked
  3686  0013B6  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3687  0013B8  0ED8               	movlw	216
  3688  0013BA  0100               	movlb	0	; () banked
  3689  0013BC  6FB1               	movwf	??_Loading& (0+255),b
  3690  0013BE  0E41               	movlw	65
  3691  0013C0                     u9667:
  3692  0013C0  2EE8               	decfsz	wreg,f,c
  3693  0013C2  D7FE               	bra	u9667
  3694  0013C4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3695  0013C6  D7FC               	bra	u9667
  3696  0013C8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3697  0013CA  D7FA               	bra	u9667
  3698  0013CC  D000               	nop2	
  3699                           
  3700                           ;sort.c: 169: readIR();
  3701  0013CE  EC69  F029         	call	_readIR	;wreg free
  3702                           
  3703                           ;sort.c: 170: if(IR_signal==1){
  3704  0013D2  0100               	movlb	0	; () banked
  3705  0013D4  05E0               	decf	_IR_signal& (0+255),w,b
  3706  0013D6  0100               	movlb	0	; () banked
  3707  0013D8  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3708  0013DA  A4D8               	btfss	status,2,c
  3709  0013DC  D040               	goto	l7909
  3710                           
  3711                           ; BSR set to: 0
  3712                           ;sort.c: 171: if(sensor_outputs[0]){
  3713  0013DE  0100               	movlb	0	; () banked
  3714  0013E0  51DA               	movf	_sensor_outputs& (0+255),w,b
  3715  0013E2  0100               	movlb	0	; () banked
  3716  0013E4  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3717  0013E6  B4D8               	btfsc	status,2,c
  3718  0013E8  D01D               	goto	l7897
  3719                           
  3720                           ; BSR set to: 0
  3721                           ;sort.c: 172: for(int i = 0; i<2500; i++){
  3722  0013EA  0E00               	movlw	0
  3723  0013EC  0100               	movlb	0	; () banked
  3724  0013EE  6FBB               	movwf	(Loading@i_1134+1)& (0+255),b
  3725  0013F0  0E00               	movlw	0
  3726  0013F2  6FBA               	movwf	Loading@i_1134& (0+255),b
  3727  0013F4                     l7887:
  3728                           
  3729                           ; BSR set to: 0
  3730  0013F4  0100               	movlb	0	; () banked
  3731  0013F6  BFBB               	btfsc	(Loading@i_1134+1)& (0+255),7,b
  3732  0013F8  D008               	goto	l813
  3733  0013FA  0EC4               	movlw	196
  3734  0013FC  0100               	movlb	0	; () banked
  3735  0013FE  5DBA               	subwf	Loading@i_1134& (0+255),w,b
  3736  001400  0E09               	movlw	9
  3737  001402  0100               	movlb	0	; () banked
  3738  001404  59BB               	subwfb	(Loading@i_1134+1)& (0+255),w,b
  3739  001406  B0D8               	btfsc	status,0,c
  3740  001408  D02A               	goto	l7909
  3741  00140A                     l813:
  3742                           
  3743                           ; BSR set to: 0
  3744                           ;sort.c: 173: LATAbits.LATA4 = 1;
  3745  00140A  8889               	bsf	3977,4,c	;volatile
  3746                           
  3747                           ; BSR set to: 0
  3748                           ;sort.c: 174: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3749  00140C  0EC8               	movlw	200
  3750  00140E                     u9677:
  3751  00140E  2EE8               	decfsz	wreg,f,c
  3752  001410  D7FE               	bra	u9677
  3753                           
  3754                           ;sort.c: 175: LATAbits.LATA4 = 0;
  3755  001412  9889               	bcf	3977,4,c	;volatile
  3756                           
  3757                           ;sort.c: 176: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3758  001414  0E42               	movlw	66
  3759  001416                     u9687:
  3760  001416  2EE8               	decfsz	wreg,f,c
  3761  001418  D7FE               	bra	u9687
  3762  00141A  D000               	nop2	
  3763  00141C  0100               	movlb	0	; () banked
  3764  00141E  4BBA               	infsnz	Loading@i_1134& (0+255),f,b
  3765  001420  2BBB               	incf	(Loading@i_1134+1)& (0+255),f,b
  3766  001422  D7E8               	goto	l7887
  3767  001424                     l7897:
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;sort.c: 179: else{
  3771                           ;sort.c: 180: for(int i = 0; i<2500; i++){
  3772  001424  0E00               	movlw	0
  3773  001426  0100               	movlb	0	; () banked
  3774  001428  6FBD               	movwf	(Loading@i_1135+1)& (0+255),b
  3775  00142A  0E00               	movlw	0
  3776  00142C  6FBC               	movwf	Loading@i_1135& (0+255),b
  3777  00142E                     l7899:
  3778                           
  3779                           ; BSR set to: 0
  3780  00142E  0100               	movlb	0	; () banked
  3781  001430  BFBD               	btfsc	(Loading@i_1135+1)& (0+255),7,b
  3782  001432  D008               	goto	l816
  3783  001434  0EC4               	movlw	196
  3784  001436  0100               	movlb	0	; () banked
  3785  001438  5DBC               	subwf	Loading@i_1135& (0+255),w,b
  3786  00143A  0E09               	movlw	9
  3787  00143C  0100               	movlb	0	; () banked
  3788  00143E  59BD               	subwfb	(Loading@i_1135+1)& (0+255),w,b
  3789  001440  B0D8               	btfsc	status,0,c
  3790  001442  D00D               	goto	l7909
  3791  001444                     l816:
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;sort.c: 181: LATAbits.LATA4 = 1;
  3795  001444  8889               	bsf	3977,4,c	;volatile
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;sort.c: 182: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3799  001446  0E9A               	movlw	154
  3800  001448                     u9697:
  3801  001448  2EE8               	decfsz	wreg,f,c
  3802  00144A  D7FE               	bra	u9697
  3803  00144C  D000               	nop2	
  3804                           
  3805                           ;sort.c: 183: LATAbits.LATA4 = 0;
  3806  00144E  9889               	bcf	3977,4,c	;volatile
  3807                           
  3808                           ;sort.c: 184: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3809  001450  0E70               	movlw	112
  3810  001452                     u9707:
  3811  001452  2EE8               	decfsz	wreg,f,c
  3812  001454  D7FE               	bra	u9707
  3813  001456  0100               	movlb	0	; () banked
  3814  001458  4BBC               	infsnz	Loading@i_1135& (0+255),f,b
  3815  00145A  2BBD               	incf	(Loading@i_1135+1)& (0+255),f,b
  3816  00145C  D7E8               	goto	l7899
  3817  00145E                     l7909:
  3818                           
  3819                           ; BSR set to: 0
  3820                           ;sort.c: 185: }
  3821                           ;sort.c: 186: }
  3822                           ;sort.c: 187: }
  3823                           ;sort.c: 189: _delay((unsigned long)((350)*(32000000/4000.0)));
  3824  00145E  0E0F               	movlw	15
  3825  001460  0100               	movlb	0	; () banked
  3826  001462  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3827  001464  0E35               	movlw	53
  3828  001466  0100               	movlb	0	; () banked
  3829  001468  6FB1               	movwf	??_Loading& (0+255),b
  3830  00146A  0E51               	movlw	81
  3831  00146C                     u9717:
  3832  00146C  2EE8               	decfsz	wreg,f,c
  3833  00146E  D7FE               	bra	u9717
  3834  001470  2FB1               	decfsz	??_Loading& (0+255),f,b
  3835  001472  D7FC               	bra	u9717
  3836  001474  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3837  001476  D7FA               	bra	u9717
  3838                           
  3839                           ;sort.c: 191: int j = 0;
  3840  001478  0E00               	movlw	0
  3841  00147A  0100               	movlb	0	; () banked
  3842  00147C  6FC3               	movwf	(Loading@j+1)& (0+255),b
  3843  00147E  0E00               	movlw	0
  3844  001480  6FC2               	movwf	Loading@j& (0+255),b
  3845                           
  3846                           ;sort.c: 192: while(IR_signal == 1){
  3847  001482  D115               	goto	l7997
  3848  001484                     l7913:
  3849                           
  3850                           ; BSR set to: 0
  3851                           ;sort.c: 193: readIR();
  3852  001484  EC69  F029         	call	_readIR	;wreg free
  3853                           
  3854                           ;sort.c: 194: if(j == 3 || j == 4){
  3855  001488  0E03               	movlw	3
  3856  00148A  0100               	movlb	0	; () banked
  3857  00148C  19C2               	xorwf	Loading@j& (0+255),w,b
  3858  00148E  0100               	movlb	0	; () banked
  3859  001490  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3860  001492  B4D8               	btfsc	status,2,c
  3861  001494  D007               	goto	l7919
  3862                           
  3863                           ; BSR set to: 0
  3864  001496  0E04               	movlw	4
  3865  001498  0100               	movlb	0	; () banked
  3866  00149A  19C2               	xorwf	Loading@j& (0+255),w,b
  3867  00149C  0100               	movlb	0	; () banked
  3868  00149E  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3869  0014A0  A4D8               	btfss	status,2,c
  3870  0014A2  D005               	goto	l7921
  3871  0014A4                     l7919:
  3872                           
  3873                           ; BSR set to: 0
  3874                           ;sort.c: 195: f_arm_position = 0;
  3875  0014A4  0E00               	movlw	0
  3876  0014A6  0100               	movlb	0	; () banked
  3877  0014A8  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3878  0014AA  0E00               	movlw	0
  3879  0014AC  D022               	goto	L2
  3880  0014AE                     l7921:
  3881                           
  3882                           ; BSR set to: 0
  3883                           ;sort.c: 197: else if(j == 5 || j == 6){
  3884  0014AE  0E05               	movlw	5
  3885  0014B0  0100               	movlb	0	; () banked
  3886  0014B2  19C2               	xorwf	Loading@j& (0+255),w,b
  3887  0014B4  0100               	movlb	0	; () banked
  3888  0014B6  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3889  0014B8  B4D8               	btfsc	status,2,c
  3890  0014BA  D007               	goto	l826
  3891                           
  3892                           ; BSR set to: 0
  3893  0014BC  0E06               	movlw	6
  3894  0014BE  0100               	movlb	0	; () banked
  3895  0014C0  19C2               	xorwf	Loading@j& (0+255),w,b
  3896  0014C2  0100               	movlb	0	; () banked
  3897  0014C4  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3898  0014C6  A4D8               	btfss	status,2,c
  3899  0014C8  D002               	goto	l7925
  3900  0014CA                     l826:
  3901                           
  3902                           ; BSR set to: 0
  3903                           ;sort.c: 198: LATBbits.LATB2 = 1;
  3904  0014CA  848A               	bsf	3978,2,c	;volatile
  3905                           
  3906                           ;sort.c: 199: }
  3907  0014CC  D034               	goto	l823
  3908  0014CE                     l7925:
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;sort.c: 200: else if(j == 7 || j == 8){
  3912  0014CE  0E07               	movlw	7
  3913  0014D0  0100               	movlb	0	; () banked
  3914  0014D2  19C2               	xorwf	Loading@j& (0+255),w,b
  3915  0014D4  0100               	movlb	0	; () banked
  3916  0014D6  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3917  0014D8  B4D8               	btfsc	status,2,c
  3918  0014DA  D007               	goto	l7929
  3919                           
  3920                           ; BSR set to: 0
  3921  0014DC  0E08               	movlw	8
  3922  0014DE  0100               	movlb	0	; () banked
  3923  0014E0  19C2               	xorwf	Loading@j& (0+255),w,b
  3924  0014E2  0100               	movlb	0	; () banked
  3925  0014E4  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3926  0014E6  A4D8               	btfss	status,2,c
  3927  0014E8  D006               	goto	l828
  3928  0014EA                     l7929:
  3929                           
  3930                           ; BSR set to: 0
  3931                           ;sort.c: 201: f_arm_position = 1;
  3932  0014EA  0E00               	movlw	0
  3933  0014EC  0100               	movlb	0	; () banked
  3934  0014EE  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3935  0014F0  0E01               	movlw	1
  3936  0014F2                     L2:
  3937  0014F2  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  3938                           
  3939                           ;sort.c: 202: }
  3940  0014F4  D020               	goto	l823
  3941  0014F6                     l828:
  3942                           
  3943                           ; BSR set to: 0
  3944                           ;sort.c: 203: else if(j % 2 == 0){
  3945  0014F6  0100               	movlb	0	; () banked
  3946  0014F8  B1C2               	btfsc	Loading@j& (0+255),0,b
  3947  0014FA  D01D               	goto	l823
  3948                           
  3949                           ; BSR set to: 0
  3950                           ;sort.c: 204: LATBbits.LATB2 = !LATBbits.LATB2;
  3951  0014FC  B48A               	btfsc	3978,2,c	;volatile
  3952  0014FE  D004               	goto	u6570
  3953  001500  0100               	movlb	0	; () banked
  3954  001502  6BB1               	clrf	??_Loading& (0+255),b
  3955  001504  2BB1               	incf	??_Loading& (0+255),f,b
  3956  001506  D002               	goto	u6588
  3957  001508                     u6570:
  3958  001508  0100               	movlb	0	; () banked
  3959  00150A  6BB1               	clrf	??_Loading& (0+255),b
  3960  00150C                     u6588:
  3961  00150C  0100               	movlb	0	; () banked
  3962  00150E  47B1               	rlncf	??_Loading& (0+255),f,b
  3963  001510  47B1               	rlncf	??_Loading& (0+255),f,b
  3964  001512  508A               	movf	3978,w,c	;volatile
  3965  001514  0100               	movlb	0	; () banked
  3966  001516  19B1               	xorwf	??_Loading& (0+255),w,b
  3967  001518  0BFB               	andlw	-5
  3968  00151A  19B1               	xorwf	??_Loading& (0+255),w,b
  3969  00151C  6E8A               	movwf	3978,c	;volatile
  3970                           
  3971                           ;sort.c: 205: f_arm_position = !f_arm_position;
  3972  00151E  0100               	movlb	0	; () banked
  3973  001520  51EA               	movf	_f_arm_position& (0+255),w,b	;volatile
  3974  001522  0100               	movlb	0	; () banked
  3975  001524  11EB               	iorwf	(_f_arm_position+1)& (0+255),w,b	;volatile
  3976  001526  A4D8               	btfss	status,2,c
  3977  001528  D002               	goto	u6590
  3978  00152A  0E01               	movlw	1
  3979  00152C  D001               	goto	u6600
  3980  00152E                     u6590:
  3981  00152E  0E00               	movlw	0
  3982  001530                     u6600:
  3983  001530  0100               	movlb	0	; () banked
  3984  001532  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  3985  001534  6BEB               	clrf	(_f_arm_position+1)& (0+255),b	;volatile
  3986  001536                     l823:
  3987                           
  3988                           ; BSR set to: 0
  3989                           ;sort.c: 206: }
  3990                           ;sort.c: 209: if(IR_signal==1){
  3991  001536  0100               	movlb	0	; () banked
  3992  001538  05E0               	decf	_IR_signal& (0+255),w,b
  3993  00153A  0100               	movlb	0	; () banked
  3994  00153C  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3995  00153E  A4D8               	btfss	status,2,c
  3996  001540  D09A               	goto	l7985
  3997                           
  3998                           ; BSR set to: 0
  3999                           ;sort.c: 210: _delay((unsigned long)((350)*(32000000/4000.0)));
  4000  001542  0E0F               	movlw	15
  4001  001544  0100               	movlb	0	; () banked
  4002  001546  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4003  001548  0E35               	movlw	53
  4004  00154A  0100               	movlb	0	; () banked
  4005  00154C  6FB1               	movwf	??_Loading& (0+255),b
  4006  00154E  0E51               	movlw	81
  4007  001550                     u9727:
  4008  001550  2EE8               	decfsz	wreg,f,c
  4009  001552  D7FE               	bra	u9727
  4010  001554  2FB1               	decfsz	??_Loading& (0+255),f,b
  4011  001556  D7FC               	bra	u9727
  4012  001558  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4013  00155A  D7FA               	bra	u9727
  4014                           
  4015                           ;sort.c: 211: readIR();
  4016  00155C  EC69  F029         	call	_readIR	;wreg free
  4017                           
  4018                           ;sort.c: 212: if(IR_signal==1){
  4019  001560  0100               	movlb	0	; () banked
  4020  001562  05E0               	decf	_IR_signal& (0+255),w,b
  4021  001564  0100               	movlb	0	; () banked
  4022  001566  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4023  001568  A4D8               	btfss	status,2,c
  4024  00156A  D081               	goto	l834
  4025                           
  4026                           ; BSR set to: 0
  4027                           ;sort.c: 213: if(sensor_outputs[0]){
  4028  00156C  0100               	movlb	0	; () banked
  4029  00156E  51DA               	movf	_sensor_outputs& (0+255),w,b
  4030  001570  0100               	movlb	0	; () banked
  4031  001572  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4032  001574  B4D8               	btfsc	status,2,c
  4033  001576  D011               	goto	l835
  4034                           
  4035                           ; BSR set to: 0
  4036                           ;sort.c: 214: LATAbits.LATA4 = 1;
  4037  001578  8889               	bsf	3977,4,c	;volatile
  4038                           
  4039                           ; BSR set to: 0
  4040                           ;sort.c: 215: _delay((unsigned long)((250)*(32000000/4000.0)));
  4041  00157A  0E0B               	movlw	11
  4042  00157C  0100               	movlb	0	; () banked
  4043  00157E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4044  001580  0E26               	movlw	38
  4045  001582  0100               	movlb	0	; () banked
  4046  001584  6FB1               	movwf	??_Loading& (0+255),b
  4047  001586  0E5D               	movlw	93
  4048  001588                     u9737:
  4049  001588  2EE8               	decfsz	wreg,f,c
  4050  00158A  D7FE               	bra	u9737
  4051  00158C  2FB1               	decfsz	??_Loading& (0+255),f,b
  4052  00158E  D7FC               	bra	u9737
  4053  001590  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4054  001592  D7FA               	bra	u9737
  4055  001594  D000               	nop2	
  4056                           
  4057                           ;sort.c: 216: LATAbits.LATA4 = 0;
  4058  001596  9889               	bcf	3977,4,c	;volatile
  4059                           
  4060                           ;sort.c: 217: }
  4061  001598  D06A               	goto	l834
  4062  00159A                     l835:
  4063                           
  4064                           ; BSR set to: 0
  4065                           ;sort.c: 218: else{
  4066                           ;sort.c: 219: TMR2IE = 0;
  4067  00159A  929D               	bcf	3997,1,c	;volatile
  4068                           
  4069                           ; BSR set to: 0
  4070                           ;sort.c: 220: for(int i = 0; i<2500; i++){
  4071  00159C  0E00               	movlw	0
  4072  00159E  0100               	movlb	0	; () banked
  4073  0015A0  6FBF               	movwf	(Loading@i_1137+1)& (0+255),b
  4074  0015A2  0E00               	movlw	0
  4075  0015A4  6FBE               	movwf	Loading@i_1137& (0+255),b
  4076  0015A6                     l7949:
  4077                           
  4078                           ; BSR set to: 0
  4079  0015A6  0100               	movlb	0	; () banked
  4080  0015A8  BFBF               	btfsc	(Loading@i_1137+1)& (0+255),7,b
  4081  0015AA  D041               	goto	l7977
  4082  0015AC  0EC4               	movlw	196
  4083  0015AE  0100               	movlb	0	; () banked
  4084  0015B0  5DBE               	subwf	Loading@i_1137& (0+255),w,b
  4085  0015B2  0E09               	movlw	9
  4086  0015B4  0100               	movlb	0	; () banked
  4087  0015B6  59BF               	subwfb	(Loading@i_1137+1)& (0+255),w,b
  4088  0015B8  B0D8               	btfsc	status,0,c
  4089  0015BA  D058               	goto	l838
  4090  0015BC  D038               	goto	l7977
  4091  0015BE                     l840:
  4092                           
  4093                           ; BSR set to: 0
  4094                           ;sort.c: 223: LATAbits.LATA4 = 1;
  4095  0015BE  8889               	bsf	3977,4,c	;volatile
  4096                           
  4097                           ; BSR set to: 0
  4098                           ;sort.c: 224: _delay((unsigned long)((75)*(32000000/4000000.0)));
  4099  0015C0  0EC8               	movlw	200
  4100  0015C2                     u9747:
  4101  0015C2  2EE8               	decfsz	wreg,f,c
  4102  0015C4  D7FE               	bra	u9747
  4103                           
  4104                           ;sort.c: 225: LATAbits.LATA4 = 0;
  4105  0015C6  9889               	bcf	3977,4,c	;volatile
  4106                           
  4107                           ;sort.c: 226: _delay((unsigned long)((25)*(32000000/4000000.0)));
  4108  0015C8  0E42               	movlw	66
  4109  0015CA                     u9757:
  4110  0015CA  2EE8               	decfsz	wreg,f,c
  4111  0015CC  D7FE               	bra	u9757
  4112  0015CE  D01C               	goto	L3
  4113  0015D0                     l842:
  4114                           
  4115                           ; BSR set to: 0
  4116                           ;sort.c: 229: LATAbits.LATA4 = 1;
  4117  0015D0  8889               	bsf	3977,4,c	;volatile
  4118                           
  4119                           ; BSR set to: 0
  4120                           ;sort.c: 230: _delay((unsigned long)((80)*(32000000/4000000.0)));
  4121  0015D2  0ED5               	movlw	213
  4122  0015D4                     u9767:
  4123  0015D4  2EE8               	decfsz	wreg,f,c
  4124  0015D6  D7FE               	bra	u9767
  4125  0015D8  F000               	nop	
  4126                           
  4127                           ;sort.c: 231: LATAbits.LATA4 = 0;
  4128  0015DA  9889               	bcf	3977,4,c	;volatile
  4129                           
  4130                           ;sort.c: 232: _delay((unsigned long)((20)*(32000000/4000000.0)));
  4131  0015DC  0E35               	movlw	53
  4132  0015DE                     u9777:
  4133  0015DE  2EE8               	decfsz	wreg,f,c
  4134  0015E0  D7FE               	bra	u9777
  4135  0015E2  D01D               	goto	L4
  4136  0015E4                     l843:
  4137                           
  4138                           ; BSR set to: 0
  4139                           ;sort.c: 235: LATAbits.LATA4 = 1;
  4140  0015E4  8889               	bsf	3977,4,c	;volatile
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;sort.c: 236: _delay((unsigned long)((85)*(32000000/4000000.0)));
  4144  0015E6  0EE2               	movlw	226
  4145  0015E8                     u9787:
  4146  0015E8  2EE8               	decfsz	wreg,f,c
  4147  0015EA  D7FE               	bra	u9787
  4148  0015EC  D000               	nop2	
  4149                           
  4150                           ;sort.c: 237: LATAbits.LATA4 = 0;
  4151  0015EE  9889               	bcf	3977,4,c	;volatile
  4152                           
  4153                           ;sort.c: 238: _delay((unsigned long)((15)*(32000000/4000000.0)));
  4154  0015F0  0E28               	movlw	40
  4155  0015F2                     u9797:
  4156  0015F2  2EE8               	decfsz	wreg,f,c
  4157  0015F4  D7FE               	bra	u9797
  4158                           
  4159                           ;sort.c: 239: break;
  4160  0015F6  D036               	goto	l7979
  4161  0015F8                     l844:
  4162                           
  4163                           ; BSR set to: 0
  4164                           ;sort.c: 241: LATAbits.LATA4 = 1;
  4165  0015F8  8889               	bsf	3977,4,c	;volatile
  4166                           
  4167                           ; BSR set to: 0
  4168                           ;sort.c: 242: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4169  0015FA  0EF0               	movlw	240
  4170  0015FC                     u9807:
  4171  0015FC  2EE8               	decfsz	wreg,f,c
  4172  0015FE  D7FE               	bra	u9807
  4173                           
  4174                           ;sort.c: 243: LATAbits.LATA4 = 0;
  4175  001600  9889               	bcf	3977,4,c	;volatile
  4176                           
  4177                           ;sort.c: 244: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4178  001602  0E1A               	movlw	26
  4179  001604                     u9817:
  4180  001604  2EE8               	decfsz	wreg,f,c
  4181  001606  D7FE               	bra	u9817
  4182  001608                     L3:
  4183  001608  D000               	nop2	
  4184                           
  4185                           ;sort.c: 245: break;
  4186  00160A  D02C               	goto	l7979
  4187  00160C                     l845:
  4188                           
  4189                           ; BSR set to: 0
  4190                           ;sort.c: 247: LATAbits.LATA4 = 1;
  4191  00160C  8889               	bsf	3977,4,c	;volatile
  4192                           
  4193                           ; BSR set to: 0
  4194                           ;sort.c: 248: _delay((unsigned long)((95)*(32000000/4000000.0)));
  4195  00160E  0EFD               	movlw	253
  4196  001610                     u9827:
  4197  001610  2EE8               	decfsz	wreg,f,c
  4198  001612  D7FE               	bra	u9827
  4199  001614  F000               	nop	
  4200                           
  4201                           ;sort.c: 249: LATAbits.LATA4 = 0;
  4202  001616  9889               	bcf	3977,4,c	;volatile
  4203                           
  4204                           ;sort.c: 250: _delay((unsigned long)((50)*(32000000/4000000.0)));
  4205  001618  0E85               	movlw	133
  4206  00161A                     u9837:
  4207  00161A  2EE8               	decfsz	wreg,f,c
  4208  00161C  D7FE               	bra	u9837
  4209  00161E                     L4:
  4210  00161E  F000               	nop	
  4211                           
  4212                           ;sort.c: 251: break;
  4213  001620  D021               	goto	l7979
  4214  001622                     l846:
  4215                           
  4216                           ; BSR set to: 0
  4217                           ;sort.c: 253: LATAbits.LATA4 = 1;
  4218  001622  8889               	bsf	3977,4,c	;volatile
  4219                           
  4220                           ; BSR set to: 0
  4221                           ;sort.c: 254: _delay((unsigned long)((100)*(32000000/4000000.0)));
  4222  001624  0EA0               	movlw	160
  4223  001626                     u9847:
  4224  001626  D000               	nop2	
  4225  001628  2EE8               	decfsz	wreg,f,c
  4226  00162A  D7FD               	bra	u9847
  4227                           
  4228                           ;sort.c: 256: }
  4229                           
  4230                           ;sort.c: 255: break;
  4231  00162C  D01B               	goto	l7979
  4232  00162E                     l7977:
  4233  00162E  C0C2  F0B1         	movff	Loading@j,??_Loading
  4234  001632  C0C3  F0B2         	movff	Loading@j+1,??_Loading+1
  4235                           
  4236                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4237                           ; Switch size 1, requested type "space"
  4238                           ; Number of cases is 1, Range of values is 0 to 0
  4239                           ; switch strategies available:
  4240                           ; Name         Instructions Cycles
  4241                           ; simple_byte            4     3 (average)
  4242                           ;	Chosen strategy is simple_byte
  4243  001636  0100               	movlb	0	; () banked
  4244  001638  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4245  00163A  0A00               	xorlw	0	; case 0
  4246  00163C  A4D8               	btfss	status,2,c
  4247  00163E  D7F1               	goto	l846
  4248                           
  4249                           ; BSR set to: 0
  4250                           ; Switch size 1, requested type "space"
  4251                           ; Number of cases is 5, Range of values is 0 to 4
  4252                           ; switch strategies available:
  4253                           ; Name         Instructions Cycles
  4254                           ; simple_byte           16     9 (average)
  4255                           ;	Chosen strategy is simple_byte
  4256  001640  0100               	movlb	0	; () banked
  4257  001642  51B1               	movf	??_Loading& (0+255),w,b
  4258  001644  0A00               	xorlw	0	; case 0
  4259  001646  B4D8               	btfsc	status,2,c
  4260  001648  D7BA               	goto	l840
  4261  00164A  0A01               	xorlw	1	; case 1
  4262  00164C  B4D8               	btfsc	status,2,c
  4263  00164E  D7C0               	goto	l842
  4264  001650  0A03               	xorlw	3	; case 2
  4265  001652  B4D8               	btfsc	status,2,c
  4266  001654  D7C7               	goto	l843
  4267  001656  0A01               	xorlw	1	; case 3
  4268  001658  B4D8               	btfsc	status,2,c
  4269  00165A  D7CE               	goto	l844
  4270  00165C  0A07               	xorlw	7	; case 4
  4271  00165E  B4D8               	btfsc	status,2,c
  4272  001660  D7D5               	goto	l845
  4273  001662  D7DF               	goto	l846
  4274  001664                     l7979:
  4275  001664  0100               	movlb	0	; () banked
  4276  001666  4BBE               	infsnz	Loading@i_1137& (0+255),f,b
  4277  001668  2BBF               	incf	(Loading@i_1137+1)& (0+255),f,b
  4278  00166A  D79D               	goto	l7949
  4279  00166C                     l838:
  4280                           
  4281                           ; BSR set to: 0
  4282                           ;sort.c: 257: }
  4283                           ;sort.c: 258: TMR2IE = 1;
  4284  00166C  829D               	bsf	3997,1,c	;volatile
  4285  00166E                     l834:
  4286                           
  4287                           ;sort.c: 259: }
  4288                           ;sort.c: 260: }
  4289                           ;sort.c: 261: LATAbits.LATA4 = 0;
  4290  00166E  9889               	bcf	3977,4,c	;volatile
  4291                           
  4292                           ;sort.c: 262: j++;
  4293  001670  0100               	movlb	0	; () banked
  4294  001672  4BC2               	infsnz	Loading@j& (0+255),f,b
  4295  001674  2BC3               	incf	(Loading@j+1)& (0+255),f,b
  4296  001676                     l7985:
  4297                           
  4298                           ; BSR set to: 0
  4299                           ;sort.c: 263: }
  4300                           ;sort.c: 265: if(!IR_signal){
  4301  001676  0100               	movlb	0	; () banked
  4302  001678  51E0               	movf	_IR_signal& (0+255),w,b
  4303  00167A  0100               	movlb	0	; () banked
  4304  00167C  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4305  00167E  A4D8               	btfss	status,2,c
  4306  001680  D016               	goto	l7997
  4307                           
  4308                           ; BSR set to: 0
  4309                           ;sort.c: 266: _delay((unsigned long)((500)*(32000000/4000.0)));
  4310  001682  0E15               	movlw	21
  4311  001684  0100               	movlb	0	; () banked
  4312  001686  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4313  001688  0E4B               	movlw	75
  4314  00168A  0100               	movlb	0	; () banked
  4315  00168C  6FB1               	movwf	??_Loading& (0+255),b
  4316  00168E  0EBE               	movlw	190
  4317  001690                     u9857:
  4318  001690  2EE8               	decfsz	wreg,f,c
  4319  001692  D7FE               	bra	u9857
  4320  001694  2FB1               	decfsz	??_Loading& (0+255),f,b
  4321  001696  D7FC               	bra	u9857
  4322  001698  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4323  00169A  D7FA               	bra	u9857
  4324  00169C  F000               	nop	
  4325                           
  4326                           ;sort.c: 267: readIR();
  4327  00169E  EC69  F029         	call	_readIR	;wreg free
  4328                           
  4329                           ;sort.c: 268: if(IR_signal==1){
  4330  0016A2  0100               	movlb	0	; () banked
  4331  0016A4  05E0               	decf	_IR_signal& (0+255),w,b
  4332  0016A6  0100               	movlb	0	; () banked
  4333  0016A8  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4334  0016AA  A4D8               	btfss	status,2,c
  4335  0016AC  D006               	goto	l850
  4336  0016AE                     l7997:
  4337                           
  4338                           ; BSR set to: 0
  4339  0016AE  0100               	movlb	0	; () banked
  4340  0016B0  05E0               	decf	_IR_signal& (0+255),w,b
  4341  0016B2  0100               	movlb	0	; () banked
  4342  0016B4  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4343  0016B6  B4D8               	btfsc	status,2,c
  4344  0016B8  D6E5               	goto	l7913
  4345  0016BA                     l850:
  4346                           
  4347                           ; BSR set to: 0
  4348                           ;sort.c: 273: }
  4349                           ;sort.c: 274: }
  4350                           ;sort.c: 275: }
  4351                           ;sort.c: 276: LATBbits.LATB2 = 0;
  4352  0016BA  948A               	bcf	3978,2,c	;volatile
  4353  0016BC                     l7999:
  4354                           
  4355                           ; BSR set to: 0
  4356                           ;sort.c: 277: }
  4357                           ;sort.c: 278: f_can_coming_to_ID = 1;
  4358  0016BC  0E00               	movlw	0
  4359  0016BE  0101               	movlb	1	; () banked
  4360  0016C0  6F30               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4361  0016C2  0E01               	movlw	1
  4362  0016C4  6F2F               	movwf	_f_can_coming_to_ID& (0+255),b
  4363                           
  4364                           ; BSR set to: 1
  4365                           
  4366                           ; BSR set to: 1
  4367  0016C6  0012               	return	
  4368  0016C8                     __end_of_Loading:
  4369                           	opt stack 0
  4370                           tblptru	equ	0xFF8
  4371                           tblptrh	equ	0xFF7
  4372                           tblptrl	equ	0xFF6
  4373                           tablat	equ	0xFF5
  4374                           prodh	equ	0xFF4
  4375                           prodl	equ	0xFF3
  4376                           postinc0	equ	0xFEE
  4377                           wreg	equ	0xFE8
  4378                           postdec1	equ	0xFE5
  4379                           fsr1l	equ	0xFE1
  4380                           status	equ	0xFD8
  4381                           
  4382 ;; *************** function _initSortTimer *****************
  4383 ;; Defined at:
  4384 ;;		line 456 in file "sort.c"
  4385 ;; Parameters:    Size  Location     Type
  4386 ;;		None
  4387 ;; Auto vars:     Size  Location     Type
  4388 ;;  i               2    8[BANK0 ] int 
  4389 ;; Return value:  Size  Location     Type
  4390 ;;                  1    wreg      void 
  4391 ;; Registers used:
  4392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4393 ;; Tracked objects:
  4394 ;;		On entry : 0/0
  4395 ;;		On exit  : 0/0
  4396 ;;		Unchanged: 0/0
  4397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4399 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4400 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4401 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4402 ;;Total ram usage:        5 bytes
  4403 ;; Hardware stack levels used:    1
  4404 ;; Hardware stack levels required when called:   10
  4405 ;; This function calls:
  4406 ;;		_getRTC
  4407 ;; This function is called by:
  4408 ;;		_Loading
  4409 ;; This function uses a non-reentrant model
  4410 ;;
  4411                           
  4412                           	psect	text3
  4413  0049F2                     __ptext3:
  4414                           	opt stack 0
  4415  0049F2                     _initSortTimer:
  4416                           	opt stack 18
  4417                           
  4418                           ;sort.c: 458: getRTC();
  4419                           
  4420                           ;incstack = 0
  4421  0049F2  ECE5  F025         	call	_getRTC	;wreg free
  4422                           
  4423                           ;sort.c: 459: for(int i = 0; i < 7; i++){
  4424  0049F6  0E00               	movlw	0
  4425  0049F8  0100               	movlb	0	; () banked
  4426  0049FA  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4427  0049FC  0E00               	movlw	0
  4428  0049FE  6F88               	movwf	initSortTimer@i& (0+255),b
  4429  004A00                     l7301:
  4430                           
  4431                           ; BSR set to: 0
  4432  004A00  0100               	movlb	0	; () banked
  4433  004A02  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4434  004A04  D008               	goto	l7305
  4435  004A06  0100               	movlb	0	; () banked
  4436  004A08  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4437  004A0A  E140               	bnz	l7311
  4438  004A0C  0E07               	movlw	7
  4439  004A0E  0100               	movlb	0	; () banked
  4440  004A10  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4441  004A12  B0D8               	btfsc	status,0,c
  4442  004A14  D03B               	goto	l7311
  4443  004A16                     l7305:
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;sort.c: 460: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4447  004A16  0E1C               	movlw	low _time
  4448  004A18  0100               	movlb	0	; () banked
  4449  004A1A  2588               	addwf	initSortTimer@i& (0+255),w,b
  4450  004A1C  6ED9               	movwf	fsr2l,c
  4451  004A1E  0E01               	movlw	high _time
  4452  004A20  0100               	movlb	0	; () banked
  4453  004A22  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4454  004A24  6EDA               	movwf	fsr2h,c
  4455  004A26  50DF               	movf	indf2,w,c
  4456  004A28  0100               	movlb	0	; () banked
  4457  004A2A  6F85               	movwf	??_initSortTimer& (0+255),b
  4458  004A2C  0100               	movlb	0	; () banked
  4459  004A2E  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4460  004A30  0E0F               	movlw	15
  4461  004A32  1785               	andwf	??_initSortTimer& (0+255),f,b
  4462  004A34  0E0F               	movlw	15
  4463  004A36  0100               	movlb	0	; () banked
  4464  004A38  1785               	andwf	??_initSortTimer& (0+255),f,b
  4465  004A3A  0100               	movlb	0	; () banked
  4466  004A3C  5185               	movf	??_initSortTimer& (0+255),w,b
  4467  004A3E  0D0A               	mullw	10
  4468  004A40  0E1C               	movlw	low _time
  4469  004A42  0100               	movlb	0	; () banked
  4470  004A44  2588               	addwf	initSortTimer@i& (0+255),w,b
  4471  004A46  6ED9               	movwf	fsr2l,c
  4472  004A48  0E01               	movlw	high _time
  4473  004A4A  0100               	movlb	0	; () banked
  4474  004A4C  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4475  004A4E  6EDA               	movwf	fsr2h,c
  4476  004A50  50DF               	movf	indf2,w,c
  4477  004A52  0B0F               	andlw	15
  4478  004A54  0100               	movlb	0	; () banked
  4479  004A56  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4480  004A58  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4481  004A5A  50F3               	movf	prodl,w,c
  4482  004A5C  0100               	movlb	0	; () banked
  4483  004A5E  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4484  004A60  50F4               	movf	prodh,w,c
  4485  004A62  0100               	movlb	0	; () banked
  4486  004A64  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4487  004A66  90D8               	bcf	status,0,c
  4488  004A68  0100               	movlb	0	; () banked
  4489  004A6A  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4490  004A6C  6ED9               	movwf	fsr2l,c
  4491  004A6E  0100               	movlb	0	; () banked
  4492  004A70  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4493  004A72  6EDA               	movwf	fsr2h,c
  4494  004A74  0E0E               	movlw	low _startTime
  4495  004A76  26D9               	addwf	fsr2l,f,c
  4496  004A78  0E01               	movlw	high _startTime
  4497  004A7A  22DA               	addwfc	fsr2h,f,c
  4498  004A7C  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4499  004A80  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4500                           
  4501                           ; BSR set to: 0
  4502  004A84  0100               	movlb	0	; () banked
  4503  004A86  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4504  004A88  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4505  004A8A  D7BA               	goto	l7301
  4506  004A8C                     l7311:
  4507                           
  4508                           ; BSR set to: 0
  4509                           ;sort.c: 461: }
  4510                           ;sort.c: 463: T0CON = 0b00010111;
  4511  004A8C  0E17               	movlw	23
  4512  004A8E  6ED5               	movwf	4053,c	;volatile
  4513                           
  4514                           ;sort.c: 472: TMR0H = 0b10000101;
  4515  004A90  0E85               	movlw	133
  4516  004A92  6ED7               	movwf	4055,c	;volatile
  4517                           
  4518                           ;sort.c: 473: TMR0L = 0b11101110;
  4519  004A94  0EEE               	movlw	238
  4520  004A96  6ED6               	movwf	4054,c	;volatile
  4521                           
  4522                           ; BSR set to: 0
  4523                           ;sort.c: 474: TMR0ON = 1;
  4524  004A98  8ED5               	bsf	4053,7,c	;volatile
  4525                           
  4526                           ; BSR set to: 0
  4527  004A9A  0012               	return		;funcret
  4528  004A9C                     __end_of_initSortTimer:
  4529                           	opt stack 0
  4530                           tblptru	equ	0xFF8
  4531                           tblptrh	equ	0xFF7
  4532                           tblptrl	equ	0xFF6
  4533                           tablat	equ	0xFF5
  4534                           prodh	equ	0xFF4
  4535                           prodl	equ	0xFF3
  4536                           postinc0	equ	0xFEE
  4537                           wreg	equ	0xFE8
  4538                           postdec1	equ	0xFE5
  4539                           fsr1l	equ	0xFE1
  4540                           indf2	equ	0xFDF
  4541                           postinc2	equ	0xFDE
  4542                           postdec2	equ	0xFDD
  4543                           fsr2h	equ	0xFDA
  4544                           fsr2l	equ	0xFD9
  4545                           status	equ	0xFD8
  4546                           
  4547 ;; *************** function _initGlobalVars *****************
  4548 ;; Defined at:
  4549 ;;		line 421 in file "sort.c"
  4550 ;; Parameters:    Size  Location     Type
  4551 ;;		None
  4552 ;; Auto vars:     Size  Location     Type
  4553 ;;		None
  4554 ;; Return value:  Size  Location     Type
  4555 ;;                  1    wreg      void 
  4556 ;; Registers used:
  4557 ;;		wreg, status,2
  4558 ;; Tracked objects:
  4559 ;;		On entry : 0/0
  4560 ;;		On exit  : 0/0
  4561 ;;		Unchanged: 0/0
  4562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4567 ;;Total ram usage:        0 bytes
  4568 ;; Hardware stack levels used:    1
  4569 ;; Hardware stack levels required when called:    7
  4570 ;; This function calls:
  4571 ;;		Nothing
  4572 ;; This function is called by:
  4573 ;;		_Loading
  4574 ;; This function uses a non-reentrant model
  4575 ;;
  4576                           
  4577                           	psect	text4
  4578  00461E                     __ptext4:
  4579                           	opt stack 0
  4580  00461E                     _initGlobalVars:
  4581                           	opt stack 21
  4582                           
  4583                           ;sort.c: 423: first = 0;
  4584                           
  4585                           ; BSR set to: 0
  4586                           ;incstack = 0
  4587  00461E  0E00               	movlw	0
  4588  004620  0101               	movlb	1	; () banked
  4589  004622  6F38               	movwf	(_first+1)& (0+255),b
  4590  004624  0E00               	movlw	0
  4591  004626  6F37               	movwf	_first& (0+255),b
  4592                           
  4593                           ;sort.c: 426: f_loadingNewCan = 0;
  4594  004628  0E00               	movlw	0
  4595  00462A  0100               	movlb	0	; () banked
  4596  00462C  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4597  00462E  0E00               	movlw	0
  4598  004630  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  4599                           
  4600                           ;sort.c: 427: f_lastCan = 0;
  4601  004632  0E00               	movlw	0
  4602  004634  0100               	movlb	0	; () banked
  4603  004636  6FED               	movwf	(_f_lastCan+1)& (0+255),b
  4604  004638  0E00               	movlw	0
  4605  00463A  6FEC               	movwf	_f_lastCan& (0+255),b
  4606                           
  4607                           ;sort.c: 428: f_ID_receive = 1;
  4608  00463C  0E00               	movlw	0
  4609  00463E  0101               	movlb	1	; () banked
  4610  004640  6F2E               	movwf	(_f_ID_receive+1)& (0+255),b
  4611  004642  0E01               	movlw	1
  4612  004644  6F2D               	movwf	_f_ID_receive& (0+255),b
  4613                           
  4614                           ;sort.c: 429: f_can_coming_to_ID = 0;
  4615  004646  0E00               	movlw	0
  4616  004648  0101               	movlb	1	; () banked
  4617  00464A  6F30               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4618  00464C  0E00               	movlw	0
  4619  00464E  6F2F               	movwf	_f_can_coming_to_ID& (0+255),b
  4620                           
  4621                           ;sort.c: 430: f_can_coming_to_distribution = 0;
  4622  004650  0E00               	movlw	0
  4623  004652  0101               	movlb	1	; () banked
  4624  004654  6F32               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4625  004656  0E00               	movlw	0
  4626  004658  6F31               	movwf	_f_can_coming_to_distribution& (0+255),b
  4627                           
  4628                           ;sort.c: 431: f_can_distributed = 1;
  4629  00465A  0E00               	movlw	0
  4630  00465C  0101               	movlb	1	; () banked
  4631  00465E  6F34               	movwf	(_f_can_distributed+1)& (0+255),b
  4632  004660  0E01               	movlw	1
  4633  004662  6F33               	movwf	_f_can_distributed& (0+255),b
  4634                           
  4635                           ;sort.c: 432: f_most_recent_sort_time = 0;
  4636  004664  0E00               	movlw	0
  4637  004666  0101               	movlb	1	; () banked
  4638  004668  6F36               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4639  00466A  0E00               	movlw	0
  4640  00466C  6F35               	movwf	_f_most_recent_sort_time& (0+255),b
  4641                           
  4642                           ;sort.c: 435: count_total = 0;
  4643  00466E  0E00               	movlw	0
  4644  004670  0100               	movlb	0	; () banked
  4645  004672  6FFF               	movwf	(_count_total+1)& (0+255),b
  4646  004674  0E00               	movlw	0
  4647  004676  6FFE               	movwf	_count_total& (0+255),b
  4648                           
  4649                           ;sort.c: 436: count_pop_no_tab = 0;
  4650  004678  0E00               	movlw	0
  4651  00467A  0101               	movlb	1	; () banked
  4652  00467C  6F28               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4653  00467E  0E00               	movlw	0
  4654  004680  6F27               	movwf	_count_pop_no_tab& (0+255),b
  4655                           
  4656                           ;sort.c: 437: count_pop_w_tab = 0;
  4657  004682  0E00               	movlw	0
  4658  004684  0101               	movlb	1	; () banked
  4659  004686  6F2A               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4660  004688  0E00               	movlw	0
  4661  00468A  6F29               	movwf	_count_pop_w_tab& (0+255),b
  4662                           
  4663                           ;sort.c: 438: count_can_w_lab = 0;
  4664  00468C  0E00               	movlw	0
  4665  00468E  0101               	movlb	1	; () banked
  4666  004690  6F26               	movwf	(_count_can_w_lab+1)& (0+255),b
  4667  004692  0E00               	movlw	0
  4668  004694  6F25               	movwf	_count_can_w_lab& (0+255),b
  4669                           
  4670                           ;sort.c: 439: count_can_no_lab = 0;
  4671  004696  0E00               	movlw	0
  4672  004698  0101               	movlb	1	; () banked
  4673  00469A  6F24               	movwf	(_count_can_no_lab+1)& (0+255),b
  4674  00469C  0E00               	movlw	0
  4675  00469E  6F23               	movwf	_count_can_no_lab& (0+255),b
  4676                           
  4677                           ;sort.c: 442: most_recent_sort_time = 999;
  4678  0046A0  0E03               	movlw	3
  4679  0046A2  0101               	movlb	1	; () banked
  4680  0046A4  6F44               	movwf	(_most_recent_sort_time+1)& (0+255),b
  4681  0046A6  0EE7               	movlw	231
  4682  0046A8  6F43               	movwf	_most_recent_sort_time& (0+255),b
  4683                           
  4684                           ;sort.c: 445: motor_toggle_count = 0;
  4685  0046AA  0E00               	movlw	0
  4686  0046AC  0101               	movlb	1	; () banked
  4687  0046AE  6F46               	movwf	(_motor_toggle_count+1)& (0+255),b
  4688  0046B0  0E00               	movlw	0
  4689  0046B2  6F45               	movwf	_motor_toggle_count& (0+255),b
  4690                           
  4691                           ;sort.c: 448: servo_timer_counter = 0;
  4692  0046B4  0E00               	movlw	0
  4693  0046B6  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
  4694  0046B8  0E00               	movlw	0
  4695  0046BA  6E6D               	movwf	_servo_timer_counter,c	;volatile
  4696                           
  4697                           ;sort.c: 449: servo_timer_target = 9999;
  4698  0046BC  0E27               	movlw	39
  4699  0046BE  6E70               	movwf	_servo_timer_target+1,c	;volatile
  4700  0046C0  0E0F               	movlw	15
  4701  0046C2  6E6F               	movwf	_servo_timer_target,c	;volatile
  4702                           
  4703                           ;sort.c: 450: timer2_counter = 0;
  4704  0046C4  0E00               	movlw	0
  4705  0046C6  6E74               	movwf	_timer2_counter+1,c	;volatile
  4706  0046C8  0E00               	movlw	0
  4707  0046CA  6E73               	movwf	_timer2_counter,c	;volatile
  4708                           
  4709                           ;sort.c: 451: f_arm_position = 0;
  4710  0046CC  0E00               	movlw	0
  4711  0046CE  0100               	movlb	0	; () banked
  4712  0046D0  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4713  0046D2  0E00               	movlw	0
  4714  0046D4  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  4715                           
  4716                           ; BSR set to: 0
  4717                           ;sort.c: 452: pan_servo_state = -1;
  4718  0046D6  686B               	setf	_pan_servo_state,c	;volatile
  4719  0046D8  686C               	setf	_pan_servo_state+1,c	;volatile
  4720                           
  4721                           ; BSR set to: 0
  4722                           ;sort.c: 453: tilt_servo_state = -1;
  4723  0046DA  6871               	setf	_tilt_servo_state,c	;volatile
  4724  0046DC  6872               	setf	_tilt_servo_state+1,c	;volatile
  4725                           
  4726                           ;sort.c: 454: f_panning_to_bin = 0;
  4727  0046DE  0E00               	movlw	0
  4728  0046E0  6E68               	movwf	_f_panning_to_bin+1,c	;volatile
  4729  0046E2  0E00               	movlw	0
  4730  0046E4  6E67               	movwf	_f_panning_to_bin,c	;volatile
  4731                           
  4732                           ; BSR set to: 0
  4733  0046E6  0012               	return		;funcret
  4734  0046E8                     __end_of_initGlobalVars:
  4735                           	opt stack 0
  4736                           tblptru	equ	0xFF8
  4737                           tblptrh	equ	0xFF7
  4738                           tblptrl	equ	0xFF6
  4739                           tablat	equ	0xFF5
  4740                           prodh	equ	0xFF4
  4741                           prodl	equ	0xFF3
  4742                           postinc0	equ	0xFEE
  4743                           wreg	equ	0xFE8
  4744                           postdec1	equ	0xFE5
  4745                           fsr1l	equ	0xFE1
  4746                           indf2	equ	0xFDF
  4747                           postinc2	equ	0xFDE
  4748                           postdec2	equ	0xFDD
  4749                           fsr2h	equ	0xFDA
  4750                           fsr2l	equ	0xFD9
  4751                           status	equ	0xFD8
  4752                           
  4753 ;; *************** function _getMAG *****************
  4754 ;; Defined at:
  4755 ;;		line 561 in file "sort.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;		None
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;		None
  4760 ;; Return value:  Size  Location     Type
  4761 ;;                  1    wreg      void 
  4762 ;; Registers used:
  4763 ;;		wreg, status,2, status,0, cstack
  4764 ;; Tracked objects:
  4765 ;;		On entry : 0/0
  4766 ;;		On exit  : 0/0
  4767 ;;		Unchanged: 0/0
  4768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4771 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4772 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4773 ;;Total ram usage:        2 bytes
  4774 ;; Hardware stack levels used:    1
  4775 ;; Hardware stack levels required when called:    9
  4776 ;; This function calls:
  4777 ;;		_readMAG
  4778 ;; This function is called by:
  4779 ;;		_Loading
  4780 ;; This function uses a non-reentrant model
  4781 ;;
  4782                           
  4783                           	psect	text5
  4784  005598                     __ptext5:
  4785                           	opt stack 0
  4786  005598                     _getMAG:
  4787                           	opt stack 19
  4788                           
  4789                           ;sort.c: 562: readMAG();
  4790                           
  4791                           ; BSR set to: 0
  4792                           ;incstack = 0
  4793  005598  ECB5  F029         	call	_readMAG	;wreg free
  4794                           
  4795                           ;sort.c: 564: if(MAG_signal==1){
  4796  00559C  0100               	movlb	0	; () banked
  4797  00559E  05E2               	decf	_MAG_signal& (0+255),w,b
  4798  0055A0  0100               	movlb	0	; () banked
  4799  0055A2  11E3               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4800  0055A4  A4D8               	btfss	status,2,c
  4801  0055A6  0012               	return	
  4802                           
  4803                           ; BSR set to: 0
  4804                           ;sort.c: 565: _delay((unsigned long)((500)*(32000000/4000.0)));
  4805  0055A8  0E15               	movlw	21
  4806  0055AA  0100               	movlb	0	; () banked
  4807  0055AC  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4808  0055AE  0E4B               	movlw	75
  4809  0055B0  0100               	movlb	0	; () banked
  4810  0055B2  6F86               	movwf	??_getMAG& (0+255),b
  4811  0055B4  0EBE               	movlw	190
  4812  0055B6                     u9867:
  4813  0055B6  2EE8               	decfsz	wreg,f,c
  4814  0055B8  D7FE               	bra	u9867
  4815  0055BA  2F86               	decfsz	??_getMAG& (0+255),f,b
  4816  0055BC  D7FC               	bra	u9867
  4817  0055BE  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4818  0055C0  D7FA               	bra	u9867
  4819  0055C2  F000               	nop	
  4820                           
  4821                           ;sort.c: 566: readMAG();
  4822  0055C4  ECB5  F029         	call	_readMAG	;wreg free
  4823  0055C8  0012               	return	
  4824  0055CA                     __end_of_getMAG:
  4825                           	opt stack 0
  4826                           tblptru	equ	0xFF8
  4827                           tblptrh	equ	0xFF7
  4828                           tblptrl	equ	0xFF6
  4829                           tablat	equ	0xFF5
  4830                           prodh	equ	0xFF4
  4831                           prodl	equ	0xFF3
  4832                           postinc0	equ	0xFEE
  4833                           wreg	equ	0xFE8
  4834                           postdec1	equ	0xFE5
  4835                           fsr1l	equ	0xFE1
  4836                           indf2	equ	0xFDF
  4837                           postinc2	equ	0xFDE
  4838                           postdec2	equ	0xFDD
  4839                           fsr2h	equ	0xFDA
  4840                           fsr2l	equ	0xFD9
  4841                           status	equ	0xFD8
  4842                           
  4843 ;; *************** function _getIR *****************
  4844 ;; Defined at:
  4845 ;;		line 545 in file "sort.c"
  4846 ;; Parameters:    Size  Location     Type
  4847 ;;		None
  4848 ;; Auto vars:     Size  Location     Type
  4849 ;;  i               2    7[BANK0 ] int 
  4850 ;; Return value:  Size  Location     Type
  4851 ;;                  1    wreg      void 
  4852 ;; Registers used:
  4853 ;;		wreg, status,2, status,0, cstack
  4854 ;; Tracked objects:
  4855 ;;		On entry : 0/0
  4856 ;;		On exit  : 0/0
  4857 ;;		Unchanged: 0/0
  4858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4860 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4861 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4862 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4863 ;;Total ram usage:        3 bytes
  4864 ;; Hardware stack levels used:    1
  4865 ;; Hardware stack levels required when called:    9
  4866 ;; This function calls:
  4867 ;;		_readIR
  4868 ;; This function is called by:
  4869 ;;		_Loading
  4870 ;; This function uses a non-reentrant model
  4871 ;;
  4872                           
  4873                           	psect	text6
  4874  004E42                     __ptext6:
  4875                           	opt stack 0
  4876  004E42                     _getIR:
  4877                           	opt stack 19
  4878                           
  4879                           ;sort.c: 546: readIR();
  4880                           
  4881                           ;incstack = 0
  4882  004E42  EC69  F029         	call	_readIR	;wreg free
  4883                           
  4884                           ;sort.c: 547: for(int i = 0; i < 150; i++){
  4885  004E46  0E00               	movlw	0
  4886  004E48  0100               	movlb	0	; () banked
  4887  004E4A  6F88               	movwf	(getIR@i+1)& (0+255),b
  4888  004E4C  0E00               	movlw	0
  4889  004E4E  6F87               	movwf	getIR@i& (0+255),b
  4890  004E50                     l7401:
  4891                           
  4892                           ; BSR set to: 0
  4893  004E50  0100               	movlb	0	; () banked
  4894  004E52  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4895  004E54  D008               	goto	l7405
  4896  004E56  0100               	movlb	0	; () banked
  4897  004E58  5188               	movf	(getIR@i+1)& (0+255),w,b
  4898  004E5A  E11A               	bnz	l7417
  4899  004E5C  0E96               	movlw	150
  4900  004E5E  0100               	movlb	0	; () banked
  4901  004E60  5D87               	subwf	getIR@i& (0+255),w,b
  4902  004E62  B0D8               	btfsc	status,0,c
  4903  004E64  D015               	goto	l7417
  4904  004E66                     l7405:
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;sort.c: 548: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4908  004E66  0E06               	movlw	6
  4909  004E68  0100               	movlb	0	; () banked
  4910  004E6A  6F86               	movwf	??_getIR& (0+255),b
  4911  004E6C  0E30               	movlw	48
  4912  004E6E                     u9877:
  4913  004E6E  2EE8               	decfsz	wreg,f,c
  4914  004E70  D7FE               	bra	u9877
  4915  004E72  2F86               	decfsz	??_getIR& (0+255),f,b
  4916  004E74  D7FC               	bra	u9877
  4917  004E76  F000               	nop	
  4918                           
  4919                           ;sort.c: 549: readIR();
  4920  004E78  EC69  F029         	call	_readIR	;wreg free
  4921                           
  4922                           ;sort.c: 550: if(!IR_signal){
  4923  004E7C  0100               	movlb	0	; () banked
  4924  004E7E  51E0               	movf	_IR_signal& (0+255),w,b
  4925  004E80  0100               	movlb	0	; () banked
  4926  004E82  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4927  004E84  B4D8               	btfsc	status,2,c
  4928  004E86  D004               	goto	l7417
  4929                           
  4930                           ; BSR set to: 0
  4931                           
  4932                           ; BSR set to: 0
  4933                           
  4934                           ; BSR set to: 0
  4935                           ;sort.c: 551: break;
  4936  004E88  0100               	movlb	0	; () banked
  4937  004E8A  4B87               	infsnz	getIR@i& (0+255),f,b
  4938  004E8C  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4939  004E8E  D7E0               	goto	l7401
  4940  004E90                     l7417:
  4941                           
  4942                           ; BSR set to: 0
  4943                           ;sort.c: 552: }
  4944                           ;sort.c: 553: }
  4945                           ;sort.c: 554: if(IR_signal==1){
  4946  004E90  0100               	movlb	0	; () banked
  4947  004E92  05E0               	decf	_IR_signal& (0+255),w,b
  4948  004E94  0100               	movlb	0	; () banked
  4949  004E96  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4950  004E98  A4D8               	btfss	status,2,c
  4951  004E9A  D006               	goto	l7421
  4952                           
  4953                           ; BSR set to: 0
  4954                           ;sort.c: 555: f_loadingNewCan = 1;
  4955  004E9C  0E00               	movlw	0
  4956  004E9E  0100               	movlb	0	; () banked
  4957  004EA0  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4958  004EA2  0E01               	movlw	1
  4959  004EA4  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  4960                           
  4961                           ;sort.c: 556: }
  4962  004EA6  0012               	return	
  4963  004EA8                     l7421:
  4964                           
  4965                           ; BSR set to: 0
  4966                           ;sort.c: 557: else{
  4967                           ;sort.c: 558: f_loadingNewCan = 0;
  4968  004EA8  0E00               	movlw	0
  4969  004EAA  0100               	movlb	0	; () banked
  4970  004EAC  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4971  004EAE  0E00               	movlw	0
  4972  004EB0  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  4973  004EB2  0012               	return	
  4974  004EB4                     __end_of_getIR:
  4975                           	opt stack 0
  4976                           tblptru	equ	0xFF8
  4977                           tblptrh	equ	0xFF7
  4978                           tblptrl	equ	0xFF6
  4979                           tablat	equ	0xFF5
  4980                           prodh	equ	0xFF4
  4981                           prodl	equ	0xFF3
  4982                           postinc0	equ	0xFEE
  4983                           wreg	equ	0xFE8
  4984                           postdec1	equ	0xFE5
  4985                           fsr1l	equ	0xFE1
  4986                           indf2	equ	0xFDF
  4987                           postinc2	equ	0xFDE
  4988                           postdec2	equ	0xFDD
  4989                           fsr2h	equ	0xFDA
  4990                           fsr2l	equ	0xFD9
  4991                           status	equ	0xFD8
  4992                           
  4993 ;; *************** function _readIR *****************
  4994 ;; Defined at:
  4995 ;;		line 23 in file "ADCFunctionality.c"
  4996 ;; Parameters:    Size  Location     Type
  4997 ;;		None
  4998 ;; Auto vars:     Size  Location     Type
  4999 ;;  res             2    4[BANK0 ] int 
  5000 ;; Return value:  Size  Location     Type
  5001 ;;                  1    wreg      void 
  5002 ;; Registers used:
  5003 ;;		wreg, status,2, status,0, cstack
  5004 ;; Tracked objects:
  5005 ;;		On entry : 0/0
  5006 ;;		On exit  : 0/0
  5007 ;;		Unchanged: 0/0
  5008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5010 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5011 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5012 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5013 ;;Total ram usage:        4 bytes
  5014 ;; Hardware stack levels used:    1
  5015 ;; Hardware stack levels required when called:    8
  5016 ;; This function calls:
  5017 ;;		_readADC
  5018 ;; This function is called by:
  5019 ;;		_Loading
  5020 ;;		_getIR
  5021 ;; This function uses a non-reentrant model
  5022 ;;
  5023                           
  5024                           	psect	text7
  5025  0052D2                     __ptext7:
  5026                           	opt stack 0
  5027  0052D2                     _readIR:
  5028                           	opt stack 20
  5029                           
  5030                           ;ADCFunctionality.c: 24: readADC(0);
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;incstack = 0
  5034  0052D2  0E00               	movlw	0
  5035  0052D4  EC32  F02C         	call	_readADC
  5036                           
  5037                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  5038  0052D8  50C3               	movf	4035,w,c	;volatile
  5039  0052DA  CFC4 F082          	movff	4036,??_readIR	;volatile
  5040  0052DE  0100               	movlb	0	; () banked
  5041  0052E0  6B83               	clrf	(??_readIR+1)& (0+255),b
  5042  0052E2  C082  F083         	movff	??_readIR,??_readIR+1
  5043  0052E6  0100               	movlb	0	; () banked
  5044  0052E8  6B82               	clrf	??_readIR& (0+255),b
  5045  0052EA  0100               	movlb	0	; () banked
  5046  0052EC  1182               	iorwf	??_readIR& (0+255),w,b
  5047  0052EE  0100               	movlb	0	; () banked
  5048  0052F0  6F84               	movwf	readIR@res& (0+255),b
  5049  0052F2  0100               	movlb	0	; () banked
  5050  0052F4  5183               	movf	(??_readIR+1)& (0+255),w,b
  5051  0052F6  0100               	movlb	0	; () banked
  5052  0052F8  6F85               	movwf	(readIR@res+1)& (0+255),b
  5053                           
  5054                           ; BSR set to: 0
  5055                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  5056  0052FA  0100               	movlb	0	; () banked
  5057  0052FC  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  5058  0052FE  D00A               	goto	u5050
  5059  005300  0E21               	movlw	33
  5060  005302  0100               	movlb	0	; () banked
  5061  005304  5D84               	subwf	readIR@res& (0+255),w,b
  5062  005306  0E03               	movlw	3
  5063  005308  0100               	movlb	0	; () banked
  5064  00530A  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  5065  00530C  A0D8               	btfss	status,0,c
  5066  00530E  D002               	goto	u5050
  5067  005310  0E01               	movlw	1
  5068  005312  D001               	goto	u5060
  5069  005314                     u5050:
  5070  005314  0E00               	movlw	0
  5071  005316                     u5060:
  5072  005316  0100               	movlb	0	; () banked
  5073  005318  6FE0               	movwf	_IR_signal& (0+255),b
  5074  00531A  6BE1               	clrf	(_IR_signal+1)& (0+255),b
  5075                           
  5076                           ; BSR set to: 0
  5077  00531C  0012               	return		;funcret
  5078  00531E                     __end_of_readIR:
  5079                           	opt stack 0
  5080                           tblptru	equ	0xFF8
  5081                           tblptrh	equ	0xFF7
  5082                           tblptrl	equ	0xFF6
  5083                           tablat	equ	0xFF5
  5084                           prodh	equ	0xFF4
  5085                           prodl	equ	0xFF3
  5086                           postinc0	equ	0xFEE
  5087                           wreg	equ	0xFE8
  5088                           postdec1	equ	0xFE5
  5089                           fsr1l	equ	0xFE1
  5090                           indf2	equ	0xFDF
  5091                           postinc2	equ	0xFDE
  5092                           postdec2	equ	0xFDD
  5093                           fsr2h	equ	0xFDA
  5094                           fsr2l	equ	0xFD9
  5095                           status	equ	0xFD8
  5096                           
  5097 ;; *************** function _ID *****************
  5098 ;; Defined at:
  5099 ;;		line 282 in file "sort.c"
  5100 ;; Parameters:    Size  Location     Type
  5101 ;;		None
  5102 ;; Auto vars:     Size  Location     Type
  5103 ;;  i               2   57[BANK0 ] int 
  5104 ;;  i               2   53[BANK0 ] int 
  5105 ;;  i               2   55[BANK0 ] int 
  5106 ;;  res3            2   45[BANK0 ] int 
  5107 ;;  i               2   51[BANK0 ] int 
  5108 ;;  i               2   49[BANK0 ] int 
  5109 ;;  n               2   64[BANK0 ] const int 
  5110 ;;  res2            2   62[BANK0 ] int 
  5111 ;;  res1            2   60[BANK0 ] int 
  5112 ;;  time            1   59[BANK0 ] const unsigned char 
  5113 ;; Return value:  Size  Location     Type
  5114 ;;                  1    wreg      void 
  5115 ;; Registers used:
  5116 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5117 ;; Tracked objects:
  5118 ;;		On entry : 0/0
  5119 ;;		On exit  : 0/0
  5120 ;;		Unchanged: 0/0
  5121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5123 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5124 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5125 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5126 ;;Total ram usage:       23 bytes
  5127 ;; Hardware stack levels used:    1
  5128 ;; Hardware stack levels required when called:   10
  5129 ;; This function calls:
  5130 ;;		___awdiv
  5131 ;;		___awtoft
  5132 ;;		___ftge
  5133 ;;		_delay_ms
  5134 ;;		_lcdInst
  5135 ;;		_printf
  5136 ;;		_readCOND
  5137 ;; This function is called by:
  5138 ;;		_sort
  5139 ;; This function uses a non-reentrant model
  5140 ;;
  5141                           
  5142                           	psect	text8
  5143  0016C8                     __ptext8:
  5144                           	opt stack 0
  5145  0016C8                     _ID:
  5146                           	opt stack 19
  5147                           
  5148                           ;sort.c: 283: if(f_can_coming_to_ID){
  5149                           
  5150                           ; BSR set to: 0
  5151                           ;incstack = 0
  5152  0016C8  0101               	movlb	1	; () banked
  5153  0016CA  512F               	movf	_f_can_coming_to_ID& (0+255),w,b
  5154  0016CC  0101               	movlb	1	; () banked
  5155  0016CE  1130               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  5156  0016D0  B4D8               	btfsc	status,2,c
  5157  0016D2  0012               	return	
  5158                           
  5159                           ; BSR set to: 1
  5160                           ;sort.c: 285: _delay((unsigned long)((1000)*(32000000/4000.0)));
  5161  0016D4  0E29               	movlw	41
  5162  0016D6  0100               	movlb	0	; () banked
  5163  0016D8  6FAC               	movwf	(??_ID+1)& (0+255),b
  5164  0016DA  0E96               	movlw	150
  5165  0016DC  0100               	movlb	0	; () banked
  5166  0016DE  6FAB               	movwf	??_ID& (0+255),b
  5167  0016E0  0E7F               	movlw	127
  5168  0016E2                     u9887:
  5169  0016E2  2EE8               	decfsz	wreg,f,c
  5170  0016E4  D7FE               	bra	u9887
  5171  0016E6  2FAB               	decfsz	??_ID& (0+255),f,b
  5172  0016E8  D7FC               	bra	u9887
  5173  0016EA  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5174  0016EC  D7FA               	bra	u9887
  5175                           
  5176                           ;sort.c: 287: f_arm_position = 0;
  5177  0016EE  0E00               	movlw	0
  5178  0016F0  0100               	movlb	0	; () banked
  5179  0016F2  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  5180  0016F4  0E00               	movlw	0
  5181  0016F6  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  5182                           
  5183                           ; BSR set to: 0
  5184                           ;sort.c: 289: LATAbits.LATA3 = 1;
  5185  0016F8  8689               	bsf	3977,3,c	;volatile
  5186                           
  5187                           ; BSR set to: 0
  5188                           ;sort.c: 292: const int n = 10;
  5189  0016FA  0E00               	movlw	0
  5190  0016FC  0100               	movlb	0	; () banked
  5191  0016FE  6FC1               	movwf	(ID@n+1)& (0+255),b
  5192  001700  0E0A               	movlw	10
  5193  001702  6FC0               	movwf	ID@n& (0+255),b
  5194                           
  5195                           ; BSR set to: 0
  5196                           ;sort.c: 293: const unsigned char time = (600 / n);
  5197  001704  0E02               	movlw	2
  5198  001706  0100               	movlb	0	; () banked
  5199  001708  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5200  00170A  0E58               	movlw	88
  5201  00170C  6F86               	movwf	___awdiv@dividend& (0+255),b
  5202  00170E  C0C0  F088         	movff	ID@n,___awdiv@divisor
  5203  001712  C0C1  F089         	movff	ID@n+1,___awdiv@divisor+1
  5204  001716  EC3C  F024         	call	___awdiv	;wreg free
  5205  00171A  0100               	movlb	0	; () banked
  5206  00171C  5186               	movf	?___awdiv& (0+255),w,b
  5207  00171E  0100               	movlb	0	; () banked
  5208  001720  6FBB               	movwf	ID@time& (0+255),b
  5209                           
  5210                           ; BSR set to: 0
  5211                           ;sort.c: 294: int res1 = 0;
  5212  001722  0E00               	movlw	0
  5213  001724  0100               	movlb	0	; () banked
  5214  001726  6FBD               	movwf	(ID@res1+1)& (0+255),b
  5215  001728  0E00               	movlw	0
  5216  00172A  6FBC               	movwf	ID@res1& (0+255),b
  5217                           
  5218                           ; BSR set to: 0
  5219                           ;sort.c: 295: int res2 = 0;
  5220  00172C  0E00               	movlw	0
  5221  00172E  0100               	movlb	0	; () banked
  5222  001730  6FBF               	movwf	(ID@res2+1)& (0+255),b
  5223  001732  0E00               	movlw	0
  5224  001734  6FBE               	movwf	ID@res2& (0+255),b
  5225                           
  5226                           ; BSR set to: 0
  5227                           ;sort.c: 296: for(int i = 0; i<n; i++){
  5228  001736  0E00               	movlw	0
  5229  001738  0100               	movlb	0	; () banked
  5230  00173A  6FB2               	movwf	(ID@i+1)& (0+255),b
  5231  00173C  0E00               	movlw	0
  5232  00173E  6FB1               	movwf	ID@i& (0+255),b
  5233  001740                     l8025:
  5234                           
  5235                           ; BSR set to: 0
  5236  001740  0100               	movlb	0	; () banked
  5237  001742  51C0               	movf	ID@n& (0+255),w,b
  5238  001744  0100               	movlb	0	; () banked
  5239  001746  5DB1               	subwf	ID@i& (0+255),w,b
  5240  001748  0100               	movlb	0	; () banked
  5241  00174A  51B2               	movf	(ID@i+1)& (0+255),w,b
  5242  00174C  0A80               	xorlw	128
  5243  00174E  0100               	movlb	0	; () banked
  5244  001750  6FAB               	movwf	??_ID& (0+255),b
  5245  001752  0100               	movlb	0	; () banked
  5246  001754  51C1               	movf	(ID@n+1)& (0+255),w,b
  5247  001756  0A80               	xorlw	128
  5248  001758  0100               	movlb	0	; () banked
  5249  00175A  59AB               	subwfb	??_ID& (0+255),w,b
  5250  00175C  B0D8               	btfsc	status,0,c
  5251  00175E  D012               	goto	l855
  5252                           
  5253                           ; BSR set to: 0
  5254                           ;sort.c: 297: delay_ms(time);
  5255                           
  5256                           ; BSR set to: 0
  5257                           
  5258                           ; BSR set to: 0
  5259  001760  0100               	movlb	0	; () banked
  5260  001762  51BB               	movf	ID@time& (0+255),w,b
  5261  001764  EC5D  F02C         	call	_delay_ms
  5262                           
  5263                           ;sort.c: 298: readCOND();
  5264  001768  EC8F  F029         	call	_readCOND	;wreg free
  5265                           
  5266                           ;sort.c: 299: res1 += COND_signal;
  5267  00176C  0100               	movlb	0	; () banked
  5268  00176E  51DE               	movf	_COND_signal& (0+255),w,b
  5269  001770  0100               	movlb	0	; () banked
  5270  001772  27BC               	addwf	ID@res1& (0+255),f,b
  5271  001774  0100               	movlb	0	; () banked
  5272  001776  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5273  001778  0100               	movlb	0	; () banked
  5274  00177A  23BD               	addwfc	(ID@res1+1)& (0+255),f,b
  5275                           
  5276                           ; BSR set to: 0
  5277  00177C  0100               	movlb	0	; () banked
  5278  00177E  4BB1               	infsnz	ID@i& (0+255),f,b
  5279  001780  2BB2               	incf	(ID@i+1)& (0+255),f,b
  5280  001782  D7DE               	goto	l8025
  5281  001784                     l855:
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;sort.c: 300: }
  5285                           ;sort.c: 301: LATAbits.LATA3 = 0;
  5286  001784  9689               	bcf	3977,3,c	;volatile
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;sort.c: 302: _delay((unsigned long)((200)*(32000000/4000.0)));
  5290  001786  0E09               	movlw	9
  5291  001788  0100               	movlb	0	; () banked
  5292  00178A  6FAC               	movwf	(??_ID+1)& (0+255),b
  5293  00178C  0E1E               	movlw	30
  5294  00178E  0100               	movlb	0	; () banked
  5295  001790  6FAB               	movwf	??_ID& (0+255),b
  5296  001792  0EE4               	movlw	228
  5297  001794                     u9897:
  5298  001794  2EE8               	decfsz	wreg,f,c
  5299  001796  D7FE               	bra	u9897
  5300  001798  2FAB               	decfsz	??_ID& (0+255),f,b
  5301  00179A  D7FC               	bra	u9897
  5302  00179C  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5303  00179E  D7FA               	bra	u9897
  5304  0017A0  F000               	nop	
  5305                           
  5306                           ;sort.c: 303: LATAbits.LATA3 = 1;
  5307  0017A2  8689               	bsf	3977,3,c	;volatile
  5308                           
  5309                           ;sort.c: 304: for(int i = 0; i<n; i++){
  5310  0017A4  0E00               	movlw	0
  5311  0017A6  0100               	movlb	0	; () banked
  5312  0017A8  6FB4               	movwf	(ID@i_1145+1)& (0+255),b
  5313  0017AA  0E00               	movlw	0
  5314  0017AC  6FB3               	movwf	ID@i_1145& (0+255),b
  5315  0017AE                     l8043:
  5316                           
  5317                           ; BSR set to: 0
  5318  0017AE  0100               	movlb	0	; () banked
  5319  0017B0  51C0               	movf	ID@n& (0+255),w,b
  5320  0017B2  0100               	movlb	0	; () banked
  5321  0017B4  5DB3               	subwf	ID@i_1145& (0+255),w,b
  5322  0017B6  0100               	movlb	0	; () banked
  5323  0017B8  51B4               	movf	(ID@i_1145+1)& (0+255),w,b
  5324  0017BA  0A80               	xorlw	128
  5325  0017BC  0100               	movlb	0	; () banked
  5326  0017BE  6FAB               	movwf	??_ID& (0+255),b
  5327  0017C0  0100               	movlb	0	; () banked
  5328  0017C2  51C1               	movf	(ID@n+1)& (0+255),w,b
  5329  0017C4  0A80               	xorlw	128
  5330  0017C6  0100               	movlb	0	; () banked
  5331  0017C8  59AB               	subwfb	??_ID& (0+255),w,b
  5332  0017CA  B0D8               	btfsc	status,0,c
  5333  0017CC  D012               	goto	l8055
  5334                           
  5335                           ; BSR set to: 0
  5336                           ;sort.c: 305: delay_ms(time);
  5337                           
  5338                           ; BSR set to: 0
  5339                           
  5340                           ; BSR set to: 0
  5341  0017CE  0100               	movlb	0	; () banked
  5342  0017D0  51BB               	movf	ID@time& (0+255),w,b
  5343  0017D2  EC5D  F02C         	call	_delay_ms
  5344                           
  5345                           ;sort.c: 306: readCOND();
  5346  0017D6  EC8F  F029         	call	_readCOND	;wreg free
  5347                           
  5348                           ;sort.c: 307: res2 += COND_signal;
  5349  0017DA  0100               	movlb	0	; () banked
  5350  0017DC  51DE               	movf	_COND_signal& (0+255),w,b
  5351  0017DE  0100               	movlb	0	; () banked
  5352  0017E0  27BE               	addwf	ID@res2& (0+255),f,b
  5353  0017E2  0100               	movlb	0	; () banked
  5354  0017E4  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5355  0017E6  0100               	movlb	0	; () banked
  5356  0017E8  23BF               	addwfc	(ID@res2+1)& (0+255),f,b
  5357                           
  5358                           ; BSR set to: 0
  5359  0017EA  0100               	movlb	0	; () banked
  5360  0017EC  4BB3               	infsnz	ID@i_1145& (0+255),f,b
  5361  0017EE  2BB4               	incf	(ID@i_1145+1)& (0+255),f,b
  5362  0017F0  D7DE               	goto	l8043
  5363  0017F2                     l8055:
  5364                           
  5365                           ; BSR set to: 0
  5366                           ;sort.c: 308: }
  5367                           ;sort.c: 309: res1 = ((res1 / n) > 0.3) ? 1 : 0;
  5368  0017F2  0E9A               	movlw	154
  5369  0017F4  0100               	movlb	0	; () banked
  5370  0017F6  6F92               	movwf	___ftge@ff1& (0+255),b
  5371  0017F8  0E99               	movlw	153
  5372  0017FA  0100               	movlb	0	; () banked
  5373  0017FC  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5374  0017FE  0E3E               	movlw	62
  5375  001800  0100               	movlb	0	; () banked
  5376  001802  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5377  001804  C0C0  F088         	movff	ID@n,___awdiv@divisor
  5378  001808  C0C1  F089         	movff	ID@n+1,___awdiv@divisor+1
  5379  00180C  C0BC  F086         	movff	ID@res1,___awdiv@dividend
  5380  001810  C0BD  F087         	movff	ID@res1+1,___awdiv@dividend+1
  5381  001814  EC3C  F024         	call	___awdiv	;wreg free
  5382  001818  C086  F08E         	movff	?___awdiv,___awtoft@c
  5383  00181C  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5384  001820  ECFE  F029         	call	___awtoft	;wreg free
  5385  001824  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5386  001828  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5387  00182C  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5388  001830  ECD8  F023         	call	___ftge	;wreg free
  5389  001834  0100               	movlb	0	; () banked
  5390  001836  B0D8               	btfsc	status,0,c
  5391  001838  D002               	goto	u6740
  5392  00183A  0E01               	movlw	1
  5393  00183C  D001               	goto	u6750
  5394  00183E                     u6740:
  5395  00183E  0E00               	movlw	0
  5396  001840                     u6750:
  5397  001840  0100               	movlb	0	; () banked
  5398  001842  6FBC               	movwf	ID@res1& (0+255),b
  5399  001844  6BBD               	clrf	(ID@res1+1)& (0+255),b
  5400                           
  5401                           ;sort.c: 310: res2 = ((res2 / n) > 0.3) ? 1 : 0;
  5402  001846  0E9A               	movlw	154
  5403  001848  0100               	movlb	0	; () banked
  5404  00184A  6F92               	movwf	___ftge@ff1& (0+255),b
  5405  00184C  0E99               	movlw	153
  5406  00184E  0100               	movlb	0	; () banked
  5407  001850  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5408  001852  0E3E               	movlw	62
  5409  001854  0100               	movlb	0	; () banked
  5410  001856  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5411  001858  C0C0  F088         	movff	ID@n,___awdiv@divisor
  5412  00185C  C0C1  F089         	movff	ID@n+1,___awdiv@divisor+1
  5413  001860  C0BE  F086         	movff	ID@res2,___awdiv@dividend
  5414  001864  C0BF  F087         	movff	ID@res2+1,___awdiv@dividend+1
  5415  001868  EC3C  F024         	call	___awdiv	;wreg free
  5416  00186C  C086  F08E         	movff	?___awdiv,___awtoft@c
  5417  001870  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5418  001874  ECFE  F029         	call	___awtoft	;wreg free
  5419  001878  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5420  00187C  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5421  001880  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5422  001884  ECD8  F023         	call	___ftge	;wreg free
  5423  001888  0100               	movlb	0	; () banked
  5424  00188A  B0D8               	btfsc	status,0,c
  5425  00188C  D002               	goto	u6760
  5426  00188E  0E01               	movlw	1
  5427  001890  D001               	goto	u6770
  5428  001892                     u6760:
  5429  001892  0E00               	movlw	0
  5430  001894                     u6770:
  5431  001894  0100               	movlb	0	; () banked
  5432  001896  6FBE               	movwf	ID@res2& (0+255),b
  5433  001898  6BBF               	clrf	(ID@res2+1)& (0+255),b
  5434                           
  5435                           ; BSR set to: 0
  5436                           ;sort.c: 313: sensor_outputs[1] = (res1 || res2);
  5437  00189A  0E01               	movlw	1
  5438  00189C  0100               	movlb	0	; () banked
  5439  00189E  6FAF               	movwf	_ID$1146& (0+255),b
  5440                           
  5441                           ; BSR set to: 0
  5442  0018A0  0100               	movlb	0	; () banked
  5443  0018A2  51BC               	movf	ID@res1& (0+255),w,b
  5444  0018A4  0100               	movlb	0	; () banked
  5445  0018A6  11BD               	iorwf	(ID@res1+1)& (0+255),w,b
  5446  0018A8  A4D8               	btfss	status,2,c
  5447  0018AA  D009               	goto	l8065
  5448                           
  5449                           ; BSR set to: 0
  5450  0018AC  0100               	movlb	0	; () banked
  5451  0018AE  51BE               	movf	ID@res2& (0+255),w,b
  5452  0018B0  0100               	movlb	0	; () banked
  5453  0018B2  11BF               	iorwf	(ID@res2+1)& (0+255),w,b
  5454  0018B4  A4D8               	btfss	status,2,c
  5455  0018B6  D003               	goto	l8065
  5456                           
  5457                           ; BSR set to: 0
  5458  0018B8  0E00               	movlw	0
  5459  0018BA  0100               	movlb	0	; () banked
  5460  0018BC  6FAF               	movwf	_ID$1146& (0+255),b
  5461  0018BE                     l8065:
  5462                           
  5463                           ; BSR set to: 0
  5464  0018BE  C0AF  F0DC         	movff	_ID$1146,_sensor_outputs+2
  5465  0018C2  0100               	movlb	0	; () banked
  5466  0018C4  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5467                           
  5468                           ; BSR set to: 0
  5469                           ;sort.c: 314: LATAbits.LATA3 = 0;
  5470  0018C6  9689               	bcf	3977,3,c	;volatile
  5471                           
  5472                           ; BSR set to: 0
  5473                           ;sort.c: 316: if(sensor_outputs[0]){
  5474  0018C8  0100               	movlb	0	; () banked
  5475  0018CA  51DA               	movf	_sensor_outputs& (0+255),w,b
  5476  0018CC  0100               	movlb	0	; () banked
  5477  0018CE  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5478  0018D0  B4D8               	btfsc	status,2,c
  5479  0018D2  D052               	goto	l8101
  5480                           
  5481                           ; BSR set to: 0
  5482                           ;sort.c: 317: _delay((unsigned long)((200)*(32000000/4000.0)));
  5483  0018D4  0E09               	movlw	9
  5484  0018D6  0100               	movlb	0	; () banked
  5485  0018D8  6FAC               	movwf	(??_ID+1)& (0+255),b
  5486  0018DA  0E1E               	movlw	30
  5487  0018DC  0100               	movlb	0	; () banked
  5488  0018DE  6FAB               	movwf	??_ID& (0+255),b
  5489  0018E0  0EE4               	movlw	228
  5490  0018E2                     u9907:
  5491  0018E2  2EE8               	decfsz	wreg,f,c
  5492  0018E4  D7FE               	bra	u9907
  5493  0018E6  2FAB               	decfsz	??_ID& (0+255),f,b
  5494  0018E8  D7FC               	bra	u9907
  5495  0018EA  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5496  0018EC  D7FA               	bra	u9907
  5497  0018EE  F000               	nop	
  5498                           
  5499                           ;sort.c: 318: LATAbits.LATA3 = 1;
  5500  0018F0  8689               	bsf	3977,3,c	;volatile
  5501                           
  5502                           ;sort.c: 319: int res3 = 0;
  5503  0018F2  0E00               	movlw	0
  5504  0018F4  0100               	movlb	0	; () banked
  5505  0018F6  6FAE               	movwf	(ID@res3+1)& (0+255),b
  5506  0018F8  0E00               	movlw	0
  5507  0018FA  6FAD               	movwf	ID@res3& (0+255),b
  5508                           
  5509                           ; BSR set to: 0
  5510                           ;sort.c: 320: for(int i = 0; i<n; i++){
  5511  0018FC  0E00               	movlw	0
  5512  0018FE  0100               	movlb	0	; () banked
  5513  001900  6FB6               	movwf	(ID@i_1148+1)& (0+255),b
  5514  001902  0E00               	movlw	0
  5515  001904  6FB5               	movwf	ID@i_1148& (0+255),b
  5516  001906                     l8079:
  5517                           
  5518                           ; BSR set to: 0
  5519  001906  0100               	movlb	0	; () banked
  5520  001908  51C0               	movf	ID@n& (0+255),w,b
  5521  00190A  0100               	movlb	0	; () banked
  5522  00190C  5DB5               	subwf	ID@i_1148& (0+255),w,b
  5523  00190E  0100               	movlb	0	; () banked
  5524  001910  51B6               	movf	(ID@i_1148+1)& (0+255),w,b
  5525  001912  0A80               	xorlw	128
  5526  001914  0100               	movlb	0	; () banked
  5527  001916  6FAB               	movwf	??_ID& (0+255),b
  5528  001918  0100               	movlb	0	; () banked
  5529  00191A  51C1               	movf	(ID@n+1)& (0+255),w,b
  5530  00191C  0A80               	xorlw	128
  5531  00191E  0100               	movlb	0	; () banked
  5532  001920  59AB               	subwfb	??_ID& (0+255),w,b
  5533  001922  B0D8               	btfsc	status,0,c
  5534  001924  D012               	goto	l862
  5535                           
  5536                           ; BSR set to: 0
  5537                           ;sort.c: 321: delay_ms(time);
  5538                           
  5539                           ; BSR set to: 0
  5540                           
  5541                           ; BSR set to: 0
  5542  001926  0100               	movlb	0	; () banked
  5543  001928  51BB               	movf	ID@time& (0+255),w,b
  5544  00192A  EC5D  F02C         	call	_delay_ms
  5545                           
  5546                           ;sort.c: 322: readCOND();
  5547  00192E  EC8F  F029         	call	_readCOND	;wreg free
  5548                           
  5549                           ;sort.c: 323: res3 += COND_signal;
  5550  001932  0100               	movlb	0	; () banked
  5551  001934  51DE               	movf	_COND_signal& (0+255),w,b
  5552  001936  0100               	movlb	0	; () banked
  5553  001938  27AD               	addwf	ID@res3& (0+255),f,b
  5554  00193A  0100               	movlb	0	; () banked
  5555  00193C  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5556  00193E  0100               	movlb	0	; () banked
  5557  001940  23AE               	addwfc	(ID@res3+1)& (0+255),f,b
  5558                           
  5559                           ; BSR set to: 0
  5560  001942  0100               	movlb	0	; () banked
  5561  001944  4BB5               	infsnz	ID@i_1148& (0+255),f,b
  5562  001946  2BB6               	incf	(ID@i_1148+1)& (0+255),f,b
  5563  001948  D7DE               	goto	l8079
  5564  00194A                     l862:
  5565                           
  5566                           ; BSR set to: 0
  5567                           ;sort.c: 324: }
  5568                           ;sort.c: 325: LATAbits.LATA3 = 0;
  5569  00194A  9689               	bcf	3977,3,c	;volatile
  5570                           
  5571                           ; BSR set to: 0
  5572                           ;sort.c: 326: sensor_outputs[1] = (sensor_outputs[1] || res3);
  5573  00194C  0E01               	movlw	1
  5574  00194E  0100               	movlb	0	; () banked
  5575  001950  6FB0               	movwf	_ID$1149& (0+255),b
  5576                           
  5577                           ; BSR set to: 0
  5578  001952  0100               	movlb	0	; () banked
  5579  001954  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5580  001956  0100               	movlb	0	; () banked
  5581  001958  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5582  00195A  A4D8               	btfss	status,2,c
  5583  00195C  D009               	goto	l8099
  5584                           
  5585                           ; BSR set to: 0
  5586  00195E  0100               	movlb	0	; () banked
  5587  001960  51AD               	movf	ID@res3& (0+255),w,b
  5588  001962  0100               	movlb	0	; () banked
  5589  001964  11AE               	iorwf	(ID@res3+1)& (0+255),w,b
  5590  001966  A4D8               	btfss	status,2,c
  5591  001968  D003               	goto	l8099
  5592                           
  5593                           ; BSR set to: 0
  5594  00196A  0E00               	movlw	0
  5595  00196C  0100               	movlb	0	; () banked
  5596  00196E  6FB0               	movwf	_ID$1149& (0+255),b
  5597  001970                     l8099:
  5598                           
  5599                           ; BSR set to: 0
  5600  001970  C0B0  F0DC         	movff	_ID$1149,_sensor_outputs+2
  5601  001974  0100               	movlb	0	; () banked
  5602  001976  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5603  001978                     l8101:
  5604                           
  5605                           ; BSR set to: 0
  5606                           ;sort.c: 327: }
  5607                           ;sort.c: 335: if(!sensor_outputs[0]){
  5608  001978  0100               	movlb	0	; () banked
  5609  00197A  51DA               	movf	_sensor_outputs& (0+255),w,b
  5610  00197C  0100               	movlb	0	; () banked
  5611  00197E  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5612  001980  A4D8               	btfss	status,2,c
  5613  001982  D016               	goto	l8113
  5614                           
  5615                           ; BSR set to: 0
  5616                           ;sort.c: 336: if(!sensor_outputs[1]){
  5617  001984  0100               	movlb	0	; () banked
  5618  001986  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5619  001988  0100               	movlb	0	; () banked
  5620  00198A  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5621  00198C  A4D8               	btfss	status,2,c
  5622  00198E  D008               	goto	l8109
  5623                           
  5624                           ; BSR set to: 0
  5625                           ;sort.c: 337: count_pop_no_tab++;
  5626  001990  0101               	movlb	1	; () banked
  5627  001992  4B27               	infsnz	_count_pop_no_tab& (0+255),f,b
  5628  001994  2B28               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5629                           
  5630                           ; BSR set to: 1
  5631                           ;sort.c: 338: cur_can = 0;
  5632  001996  0E00               	movlw	0
  5633  001998  0101               	movlb	1	; () banked
  5634  00199A  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5635  00199C  0E00               	movlw	0
  5636  00199E  D007               	goto	L5
  5637  0019A0                     l8109:
  5638                           
  5639                           ;sort.c: 340: else{
  5640                           ;sort.c: 341: count_pop_w_tab++;
  5641  0019A0  0101               	movlb	1	; () banked
  5642  0019A2  4B29               	infsnz	_count_pop_w_tab& (0+255),f,b
  5643  0019A4  2B2A               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5644                           
  5645                           ; BSR set to: 1
  5646                           ;sort.c: 342: cur_can = 1;
  5647  0019A6  0E00               	movlw	0
  5648  0019A8  0101               	movlb	1	; () banked
  5649  0019AA  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5650  0019AC  0E01               	movlw	1
  5651  0019AE                     L5:
  5652  0019AE  6F2B               	movwf	_cur_can& (0+255),b
  5653  0019B0                     l8113:
  5654                           
  5655                           ;sort.c: 343: }
  5656                           ;sort.c: 344: }
  5657                           ;sort.c: 345: if(sensor_outputs[0]){
  5658  0019B0  0100               	movlb	0	; () banked
  5659  0019B2  51DA               	movf	_sensor_outputs& (0+255),w,b
  5660  0019B4  0100               	movlb	0	; () banked
  5661  0019B6  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5662  0019B8  B4D8               	btfsc	status,2,c
  5663  0019BA  D016               	goto	l8125
  5664                           
  5665                           ; BSR set to: 0
  5666                           ;sort.c: 346: if(!sensor_outputs[1]){
  5667  0019BC  0100               	movlb	0	; () banked
  5668  0019BE  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5669  0019C0  0100               	movlb	0	; () banked
  5670  0019C2  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5671  0019C4  A4D8               	btfss	status,2,c
  5672  0019C6  D008               	goto	l8121
  5673                           
  5674                           ; BSR set to: 0
  5675                           ;sort.c: 347: count_can_w_lab++;
  5676  0019C8  0101               	movlb	1	; () banked
  5677  0019CA  4B25               	infsnz	_count_can_w_lab& (0+255),f,b
  5678  0019CC  2B26               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5679                           
  5680                           ; BSR set to: 1
  5681                           ;sort.c: 348: cur_can = 2;
  5682  0019CE  0E00               	movlw	0
  5683  0019D0  0101               	movlb	1	; () banked
  5684  0019D2  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5685  0019D4  0E02               	movlw	2
  5686  0019D6  D007               	goto	L6
  5687  0019D8                     l8121:
  5688                           
  5689                           ;sort.c: 350: else{
  5690                           ;sort.c: 351: count_can_no_lab++;
  5691  0019D8  0101               	movlb	1	; () banked
  5692  0019DA  4B23               	infsnz	_count_can_no_lab& (0+255),f,b
  5693  0019DC  2B24               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5694                           
  5695                           ; BSR set to: 1
  5696                           ;sort.c: 352: cur_can = 3;
  5697  0019DE  0E00               	movlw	0
  5698  0019E0  0101               	movlb	1	; () banked
  5699  0019E2  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5700  0019E4  0E03               	movlw	3
  5701  0019E6                     L6:
  5702  0019E6  6F2B               	movwf	_cur_can& (0+255),b
  5703  0019E8                     l8125:
  5704                           
  5705                           ;sort.c: 353: }
  5706                           ;sort.c: 354: }
  5707                           ;sort.c: 356: if(debug){
  5708  0019E8  0100               	movlb	0	; () banked
  5709  0019EA  51E8               	movf	_debug& (0+255),w,b
  5710  0019EC  0100               	movlb	0	; () banked
  5711  0019EE  11E9               	iorwf	(_debug+1)& (0+255),w,b
  5712  0019F0  B4D8               	btfsc	status,2,c
  5713  0019F2  D01F               	goto	l8135
  5714                           
  5715                           ; BSR set to: 0
  5716                           ;sort.c: 357: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  5717  0019F4  0E01               	movlw	1
  5718  0019F6  EC39  F02D         	call	_lcdInst
  5719  0019FA  0E68               	movlw	104
  5720  0019FC  0100               	movlb	0	; () banked
  5721  0019FE  6FAB               	movwf	??_ID& (0+255),b
  5722  001A00  0EE4               	movlw	228
  5723  001A02                     u9917:
  5724  001A02  2EE8               	decfsz	wreg,f,c
  5725  001A04  D7FE               	bra	u9917
  5726  001A06  2FAB               	decfsz	??_ID& (0+255),f,b
  5727  001A08  D7FC               	bra	u9917
  5728  001A0A  F000               	nop	
  5729  001A0C  0E80               	movlw	128
  5730  001A0E  EC39  F02D         	call	_lcdInst
  5731                           
  5732                           ;sort.c: 358: printf("            F%dL%d", res1, res2);
  5733  001A12  0ED3               	movlw	low STR_64
  5734  001A14  0100               	movlb	0	; () banked
  5735  001A16  6F8E               	movwf	printf@f& (0+255),b
  5736  001A18  0EFA               	movlw	high STR_64
  5737  001A1A  0100               	movlb	0	; () banked
  5738  001A1C  6F8F               	movwf	(printf@f+1)& (0+255),b
  5739  001A1E  C0BC  F090         	movff	ID@res1,?_printf+2
  5740  001A22  C0BD  F091         	movff	ID@res1+1,?_printf+3
  5741  001A26  C0BE  F092         	movff	ID@res2,?_printf+4
  5742  001A2A  C0BF  F093         	movff	ID@res2+1,?_printf+5
  5743  001A2E  EC8F  F00D         	call	_printf	;wreg free
  5744  001A32                     l8135:
  5745  001A32  0101               	movlb	1	; () banked
  5746  001A34  5133               	movf	_f_can_distributed& (0+255),w,b
  5747  001A36  0101               	movlb	1	; () banked
  5748  001A38  1134               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5749  001A3A  B4D8               	btfsc	status,2,c
  5750  001A3C  D7FA               	goto	l8135
  5751                           
  5752                           ; BSR set to: 1
  5753                           ;sort.c: 363: for(int i=0;i<10000;i++)
  5754                           
  5755                           ; BSR set to: 1
  5756  001A3E  0E00               	movlw	0
  5757  001A40  0100               	movlb	0	; () banked
  5758  001A42  6FB8               	movwf	(ID@i_1151+1)& (0+255),b
  5759  001A44  0E00               	movlw	0
  5760  001A46  6FB7               	movwf	ID@i_1151& (0+255),b
  5761  001A48                     l8139:
  5762                           
  5763                           ; BSR set to: 0
  5764  001A48  0100               	movlb	0	; () banked
  5765  001A4A  BFB8               	btfsc	(ID@i_1151+1)& (0+255),7,b
  5766  001A4C  D008               	goto	l875
  5767  001A4E  0E10               	movlw	16
  5768  001A50  0100               	movlb	0	; () banked
  5769  001A52  5DB7               	subwf	ID@i_1151& (0+255),w,b
  5770  001A54  0E27               	movlw	39
  5771  001A56  0100               	movlb	0	; () banked
  5772  001A58  59B8               	subwfb	(ID@i_1151+1)& (0+255),w,b
  5773  001A5A  B0D8               	btfsc	status,0,c
  5774  001A5C  D00D               	goto	l876
  5775  001A5E                     l875:
  5776                           
  5777                           ; BSR set to: 0
  5778                           ;sort.c: 364: {
  5779                           ;sort.c: 365: LATCbits.LATC0 = 1;
  5780  001A5E  808B               	bsf	3979,0,c	;volatile
  5781                           
  5782                           ; BSR set to: 0
  5783                           ;sort.c: 366: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5784  001A60  0E1A               	movlw	26
  5785  001A62                     u9927:
  5786  001A62  2EE8               	decfsz	wreg,f,c
  5787  001A64  D7FE               	bra	u9927
  5788  001A66  D000               	nop2	
  5789                           
  5790                           ;sort.c: 367: LATCbits.LATC0 = 0;
  5791  001A68  908B               	bcf	3979,0,c	;volatile
  5792                           
  5793                           ;sort.c: 368: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5794  001A6A  0EF0               	movlw	240
  5795  001A6C                     u9937:
  5796  001A6C  2EE8               	decfsz	wreg,f,c
  5797  001A6E  D7FE               	bra	u9937
  5798  001A70  0100               	movlb	0	; () banked
  5799  001A72  4BB7               	infsnz	ID@i_1151& (0+255),f,b
  5800  001A74  2BB8               	incf	(ID@i_1151+1)& (0+255),f,b
  5801  001A76  D7E8               	goto	l8139
  5802  001A78                     l876:
  5803                           
  5804                           ; BSR set to: 0
  5805                           ;sort.c: 369: }
  5806                           ;sort.c: 371: LATCbits.LATC0 = 0;
  5807  001A78  908B               	bcf	3979,0,c	;volatile
  5808                           
  5809                           ; BSR set to: 0
  5810                           ;sort.c: 373: f_can_coming_to_distribution = 1;
  5811  001A7A  0E00               	movlw	0
  5812  001A7C  0101               	movlb	1	; () banked
  5813  001A7E  6F32               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5814  001A80  0E01               	movlw	1
  5815  001A82  6F31               	movwf	_f_can_coming_to_distribution& (0+255),b
  5816                           
  5817                           ; BSR set to: 1
  5818                           ;sort.c: 374: _delay((unsigned long)((750)*(32000000/4000.0)));
  5819  001A84  0E1F               	movlw	31
  5820  001A86  0100               	movlb	0	; () banked
  5821  001A88  6FAC               	movwf	(??_ID+1)& (0+255),b
  5822  001A8A  0E71               	movlw	113
  5823  001A8C  0100               	movlb	0	; () banked
  5824  001A8E  6FAB               	movwf	??_ID& (0+255),b
  5825  001A90  0E1E               	movlw	30
  5826  001A92                     u9947:
  5827  001A92  2EE8               	decfsz	wreg,f,c
  5828  001A94  D7FE               	bra	u9947
  5829  001A96  2FAB               	decfsz	??_ID& (0+255),f,b
  5830  001A98  D7FC               	bra	u9947
  5831  001A9A  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5832  001A9C  D7FA               	bra	u9947
  5833  001A9E  F000               	nop	
  5834                           
  5835                           ;sort.c: 375: LATCbits.LATC0 = 1;
  5836  001AA0  808B               	bsf	3979,0,c	;volatile
  5837                           
  5838                           ;sort.c: 378: if(!f_lastCan){
  5839  001AA2  0100               	movlb	0	; () banked
  5840  001AA4  51EC               	movf	_f_lastCan& (0+255),w,b
  5841  001AA6  0100               	movlb	0	; () banked
  5842  001AA8  11ED               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5843  001AAA  A4D8               	btfss	status,2,c
  5844  001AAC  D032               	goto	l8171
  5845                           
  5846                           ; BSR set to: 0
  5847                           ;sort.c: 379: for(int i=0; i<46; i++){
  5848  001AAE  0E00               	movlw	0
  5849  001AB0  0100               	movlb	0	; () banked
  5850  001AB2  6FBA               	movwf	(ID@i_1152+1)& (0+255),b
  5851  001AB4  0E00               	movlw	0
  5852  001AB6  6FB9               	movwf	ID@i_1152& (0+255),b
  5853                           
  5854                           ; BSR set to: 0
  5855  001AB8  0100               	movlb	0	; () banked
  5856  001ABA  BFBA               	btfsc	(ID@i_1152+1)& (0+255),7,b
  5857  001ABC  D008               	goto	l8163
  5858  001ABE  0100               	movlb	0	; () banked
  5859  001AC0  51BA               	movf	(ID@i_1152+1)& (0+255),w,b
  5860  001AC2  E126               	bnz	l879
  5861  001AC4  0E2E               	movlw	46
  5862  001AC6  0100               	movlb	0	; () banked
  5863  001AC8  5DB9               	subwf	ID@i_1152& (0+255),w,b
  5864  001ACA  B0D8               	btfsc	status,0,c
  5865  001ACC  D021               	goto	l879
  5866  001ACE                     l8163:
  5867                           
  5868                           ; BSR set to: 0
  5869                           ;sort.c: 380: LATBbits.LATB2 = !LATBbits.LATB2;
  5870  001ACE  B48A               	btfsc	3978,2,c	;volatile
  5871  001AD0  D004               	goto	u6950
  5872  001AD2  0100               	movlb	0	; () banked
  5873  001AD4  6BAB               	clrf	??_ID& (0+255),b
  5874  001AD6  2BAB               	incf	??_ID& (0+255),f,b
  5875  001AD8  D002               	goto	u6968
  5876  001ADA                     u6950:
  5877  001ADA  0100               	movlb	0	; () banked
  5878  001ADC  6BAB               	clrf	??_ID& (0+255),b
  5879  001ADE                     u6968:
  5880  001ADE  0100               	movlb	0	; () banked
  5881  001AE0  47AB               	rlncf	??_ID& (0+255),f,b
  5882  001AE2  47AB               	rlncf	??_ID& (0+255),f,b
  5883  001AE4  508A               	movf	3978,w,c	;volatile
  5884  001AE6  0100               	movlb	0	; () banked
  5885  001AE8  19AB               	xorwf	??_ID& (0+255),w,b
  5886  001AEA  0BFB               	andlw	-5
  5887  001AEC  19AB               	xorwf	??_ID& (0+255),w,b
  5888  001AEE  6E8A               	movwf	3978,c	;volatile
  5889                           
  5890                           ; BSR set to: 0
  5891                           ;sort.c: 381: delay_ms(45-i);
  5892  001AF0  0100               	movlb	0	; () banked
  5893  001AF2  51B9               	movf	ID@i_1152& (0+255),w,b
  5894  001AF4  0800               	sublw	0
  5895  001AF6  0F2D               	addlw	45
  5896  001AF8  EC5D  F02C         	call	_delay_ms
  5897  001AFC  0100               	movlb	0	; () banked
  5898  001AFE  4BB9               	infsnz	ID@i_1152& (0+255),f,b
  5899  001B00  2BBA               	incf	(ID@i_1152+1)& (0+255),f,b
  5900                           
  5901                           ; BSR set to: 0
  5902  001B02  0100               	movlb	0	; () banked
  5903  001B04  BFBA               	btfsc	(ID@i_1152+1)& (0+255),7,b
  5904  001B06  D7E3               	goto	l8163
  5905  001B08  0100               	movlb	0	; () banked
  5906  001B0A  51BA               	movf	(ID@i_1152+1)& (0+255),w,b
  5907  001B0C  E101               	bnz	u6970
  5908  001B0E  D7DA               	goto	L7
  5909  001B10                     u6970:
  5910  001B10                     l879:
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;sort.c: 382: }
  5914                           ;sort.c: 383: LATBbits.LATB2 = 1;
  5915  001B10  848A               	bsf	3978,2,c	;volatile
  5916  001B12                     l8171:
  5917                           
  5918                           ; BSR set to: 0
  5919                           ;sort.c: 384: }
  5920                           ;sort.c: 386: f_can_coming_to_ID = 0;
  5921  001B12  0E00               	movlw	0
  5922  001B14  0101               	movlb	1	; () banked
  5923  001B16  6F30               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  5924  001B18  0E00               	movlw	0
  5925  001B1A  6F2F               	movwf	_f_can_coming_to_ID& (0+255),b
  5926  001B1C  0012               	return	
  5927  001B1E                     __end_of_ID:
  5928                           	opt stack 0
  5929                           tblptru	equ	0xFF8
  5930                           tblptrh	equ	0xFF7
  5931                           tblptrl	equ	0xFF6
  5932                           tablat	equ	0xFF5
  5933                           prodh	equ	0xFF4
  5934                           prodl	equ	0xFF3
  5935                           postinc0	equ	0xFEE
  5936                           wreg	equ	0xFE8
  5937                           postdec1	equ	0xFE5
  5938                           fsr1l	equ	0xFE1
  5939                           indf2	equ	0xFDF
  5940                           postinc2	equ	0xFDE
  5941                           postdec2	equ	0xFDD
  5942                           fsr2h	equ	0xFDA
  5943                           fsr2l	equ	0xFD9
  5944                           status	equ	0xFD8
  5945                           
  5946 ;; *************** function _readCOND *****************
  5947 ;; Defined at:
  5948 ;;		line 35 in file "ADCFunctionality.c"
  5949 ;; Parameters:    Size  Location     Type
  5950 ;;		None
  5951 ;; Auto vars:     Size  Location     Type
  5952 ;;  res             2    4[BANK0 ] int 
  5953 ;; Return value:  Size  Location     Type
  5954 ;;                  1    wreg      void 
  5955 ;; Registers used:
  5956 ;;		wreg, status,2, status,0, cstack
  5957 ;; Tracked objects:
  5958 ;;		On entry : 0/0
  5959 ;;		On exit  : 0/0
  5960 ;;		Unchanged: 0/0
  5961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5963 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5964 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5965 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5966 ;;Total ram usage:        4 bytes
  5967 ;; Hardware stack levels used:    1
  5968 ;; Hardware stack levels required when called:    8
  5969 ;; This function calls:
  5970 ;;		_readADC
  5971 ;; This function is called by:
  5972 ;;		_ID
  5973 ;; This function uses a non-reentrant model
  5974 ;;
  5975                           
  5976                           	psect	text9
  5977  00531E                     __ptext9:
  5978                           	opt stack 0
  5979  00531E                     _readCOND:
  5980                           	opt stack 20
  5981                           
  5982                           ;ADCFunctionality.c: 36: readADC(2);
  5983                           
  5984                           ; BSR set to: 1
  5985                           ;incstack = 0
  5986  00531E  0E02               	movlw	2
  5987  005320  EC32  F02C         	call	_readADC
  5988                           
  5989                           ;ADCFunctionality.c: 37: int res = ADRESH<<8 | ADRESL;
  5990  005324  50C3               	movf	4035,w,c	;volatile
  5991  005326  CFC4 F082          	movff	4036,??_readCOND	;volatile
  5992  00532A  0100               	movlb	0	; () banked
  5993  00532C  6B83               	clrf	(??_readCOND+1)& (0+255),b
  5994  00532E  C082  F083         	movff	??_readCOND,??_readCOND+1
  5995  005332  0100               	movlb	0	; () banked
  5996  005334  6B82               	clrf	??_readCOND& (0+255),b
  5997  005336  0100               	movlb	0	; () banked
  5998  005338  1182               	iorwf	??_readCOND& (0+255),w,b
  5999  00533A  0100               	movlb	0	; () banked
  6000  00533C  6F84               	movwf	readCOND@res& (0+255),b
  6001  00533E  0100               	movlb	0	; () banked
  6002  005340  5183               	movf	(??_readCOND+1)& (0+255),w,b
  6003  005342  0100               	movlb	0	; () banked
  6004  005344  6F85               	movwf	(readCOND@res+1)& (0+255),b
  6005                           
  6006                           ; BSR set to: 0
  6007                           ;ADCFunctionality.c: 38: COND_signal = (res > 300) ? 1 : 0;
  6008  005346  0100               	movlb	0	; () banked
  6009  005348  BF85               	btfsc	(readCOND@res+1)& (0+255),7,b
  6010  00534A  D00A               	goto	u5820
  6011  00534C  0E2D               	movlw	45
  6012  00534E  0100               	movlb	0	; () banked
  6013  005350  5D84               	subwf	readCOND@res& (0+255),w,b
  6014  005352  0E01               	movlw	1
  6015  005354  0100               	movlb	0	; () banked
  6016  005356  5985               	subwfb	(readCOND@res+1)& (0+255),w,b
  6017  005358  A0D8               	btfss	status,0,c
  6018  00535A  D002               	goto	u5820
  6019  00535C  0E01               	movlw	1
  6020  00535E  D001               	goto	u5830
  6021  005360                     u5820:
  6022  005360  0E00               	movlw	0
  6023  005362                     u5830:
  6024  005362  0100               	movlb	0	; () banked
  6025  005364  6FDE               	movwf	_COND_signal& (0+255),b
  6026  005366  6BDF               	clrf	(_COND_signal+1)& (0+255),b
  6027                           
  6028                           ; BSR set to: 0
  6029  005368  0012               	return		;funcret
  6030  00536A                     __end_of_readCOND:
  6031                           	opt stack 0
  6032                           tblptru	equ	0xFF8
  6033                           tblptrh	equ	0xFF7
  6034                           tblptrl	equ	0xFF6
  6035                           tablat	equ	0xFF5
  6036                           prodh	equ	0xFF4
  6037                           prodl	equ	0xFF3
  6038                           postinc0	equ	0xFEE
  6039                           wreg	equ	0xFE8
  6040                           postdec1	equ	0xFE5
  6041                           fsr1l	equ	0xFE1
  6042                           indf2	equ	0xFDF
  6043                           postinc2	equ	0xFDE
  6044                           postdec2	equ	0xFDD
  6045                           fsr2h	equ	0xFDA
  6046                           fsr2l	equ	0xFD9
  6047                           status	equ	0xFD8
  6048                           
  6049 ;; *************** function _delay_ms *****************
  6050 ;; Defined at:
  6051 ;;		line 680 in file "sort.c"
  6052 ;; Parameters:    Size  Location     Type
  6053 ;;  milliseconds    1    wreg     unsigned char 
  6054 ;; Auto vars:     Size  Location     Type
  6055 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  6056 ;; Return value:  Size  Location     Type
  6057 ;;                  1    wreg      void 
  6058 ;; Registers used:
  6059 ;;		wreg, status,2, status,0, cstack
  6060 ;; Tracked objects:
  6061 ;;		On entry : 0/0
  6062 ;;		On exit  : 0/0
  6063 ;;		Unchanged: 0/0
  6064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6066 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6067 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6068 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6069 ;;Total ram usage:        2 bytes
  6070 ;; Hardware stack levels used:    1
  6071 ;; Hardware stack levels required when called:    7
  6072 ;; This function calls:
  6073 ;;		Nothing
  6074 ;; This function is called by:
  6075 ;;		_Loading
  6076 ;;		_ID
  6077 ;; This function uses a non-reentrant model
  6078 ;;
  6079                           
  6080                           	psect	text10
  6081  0058BA                     __ptext10:
  6082                           	opt stack 0
  6083  0058BA                     _delay_ms:
  6084                           	opt stack 21
  6085                           
  6086                           ; BSR set to: 0
  6087                           ;incstack = 0
  6088                           ;delay_ms@milliseconds stored from wreg
  6089  0058BA  0100               	movlb	0	; () banked
  6090  0058BC  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  6091                           
  6092                           ;sort.c: 681: while(milliseconds > 0)
  6093  0058BE  D00B               	goto	l7373
  6094  0058C0                     l7369:
  6095                           
  6096                           ;sort.c: 682: {
  6097                           ;sort.c: 683: milliseconds--;
  6098  0058C0  0100               	movlb	0	; () banked
  6099  0058C2  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;sort.c: 684: _delay((unsigned long)((990)*(32000000/4000000.0)));
  6103  0058C4  0E0B               	movlw	11
  6104  0058C6  0100               	movlb	0	; () banked
  6105  0058C8  6F80               	movwf	??_delay_ms& (0+255),b
  6106  0058CA  0E47               	movlw	71
  6107  0058CC                     u9957:
  6108  0058CC  2EE8               	decfsz	wreg,f,c
  6109  0058CE  D7FE               	bra	u9957
  6110  0058D0  2F80               	decfsz	??_delay_ms& (0+255),f,b
  6111  0058D2  D7FC               	bra	u9957
  6112  0058D4  D000               	nop2	
  6113  0058D6                     l7373:
  6114  0058D6  0100               	movlb	0	; () banked
  6115  0058D8  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  6116  0058DA  0100               	movlb	0	; () banked
  6117  0058DC  B4D8               	btfsc	status,2,c
  6118  0058DE  0012               	return	
  6119  0058E0  D7EF               	goto	l7369
  6120  0058E2                     __end_of_delay_ms:
  6121                           	opt stack 0
  6122                           tblptru	equ	0xFF8
  6123                           tblptrh	equ	0xFF7
  6124                           tblptrl	equ	0xFF6
  6125                           tablat	equ	0xFF5
  6126                           prodh	equ	0xFF4
  6127                           prodl	equ	0xFF3
  6128                           postinc0	equ	0xFEE
  6129                           wreg	equ	0xFE8
  6130                           postdec1	equ	0xFE5
  6131                           fsr1l	equ	0xFE1
  6132                           indf2	equ	0xFDF
  6133                           postinc2	equ	0xFDE
  6134                           postdec2	equ	0xFDD
  6135                           fsr2h	equ	0xFDA
  6136                           fsr2l	equ	0xFD9
  6137                           status	equ	0xFD8
  6138                           
  6139 ;; *************** function ___ftge *****************
  6140 ;; Defined at:
  6141 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  6142 ;; Parameters:    Size  Location     Type
  6143 ;;  ff1             3   18[BANK0 ] float 
  6144 ;;  ff2             3   21[BANK0 ] float 
  6145 ;; Auto vars:     Size  Location     Type
  6146 ;;		None
  6147 ;; Return value:  Size  Location     Type
  6148 ;;		None               void
  6149 ;; Registers used:
  6150 ;;		wreg, status,2, status,0
  6151 ;; Tracked objects:
  6152 ;;		On entry : 0/0
  6153 ;;		On exit  : 0/0
  6154 ;;		Unchanged: 0/0
  6155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6156 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6158 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6159 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6160 ;;Total ram usage:        9 bytes
  6161 ;; Hardware stack levels used:    1
  6162 ;; Hardware stack levels required when called:    7
  6163 ;; This function calls:
  6164 ;;		Nothing
  6165 ;; This function is called by:
  6166 ;;		_ID
  6167 ;; This function uses a non-reentrant model
  6168 ;;
  6169                           
  6170                           	psect	text11
  6171  0047B0                     __ptext11:
  6172                           	opt stack 0
  6173  0047B0                     ___ftge:
  6174                           	opt stack 21
  6175                           
  6176                           ; BSR set to: 0
  6177                           ;incstack = 0
  6178  0047B0  0100               	movlb	0	; () banked
  6179  0047B2  AF94               	btfss	(___ftge@ff1+2)& (0+255),7,b
  6180  0047B4  D01D               	goto	l7491
  6181                           
  6182                           ; BSR set to: 0
  6183  0047B6  C092  F098         	movff	___ftge@ff1,??___ftge
  6184  0047BA  C093  F099         	movff	___ftge@ff1+1,??___ftge+1
  6185  0047BE  C094  F09A         	movff	___ftge@ff1+2,??___ftge+2
  6186  0047C2  0100               	movlb	0	; () banked
  6187  0047C4  1F98               	comf	??___ftge& (0+255),f,b
  6188  0047C6  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6189  0047C8  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6190  0047CA  2B98               	incf	??___ftge& (0+255),f,b
  6191  0047CC  0E00               	movlw	0
  6192  0047CE  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6193  0047D0  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6194  0047D2  0E00               	movlw	0
  6195  0047D4  0100               	movlb	0	; () banked
  6196  0047D6  2598               	addwf	??___ftge& (0+255),w,b
  6197  0047D8  0100               	movlb	0	; () banked
  6198  0047DA  6F92               	movwf	___ftge@ff1& (0+255),b
  6199  0047DC  0E00               	movlw	0
  6200  0047DE  0100               	movlb	0	; () banked
  6201  0047E0  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6202  0047E2  0100               	movlb	0	; () banked
  6203  0047E4  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  6204  0047E6  0E80               	movlw	128
  6205  0047E8  0100               	movlb	0	; () banked
  6206  0047EA  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6207  0047EC  0100               	movlb	0	; () banked
  6208  0047EE  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  6209  0047F0                     l7491:
  6210                           
  6211                           ; BSR set to: 0
  6212  0047F0  0100               	movlb	0	; () banked
  6213  0047F2  AF97               	btfss	(___ftge@ff2+2)& (0+255),7,b
  6214  0047F4  D01D               	goto	l7495
  6215                           
  6216                           ; BSR set to: 0
  6217  0047F6  C095  F098         	movff	___ftge@ff2,??___ftge
  6218  0047FA  C096  F099         	movff	___ftge@ff2+1,??___ftge+1
  6219  0047FE  C097  F09A         	movff	___ftge@ff2+2,??___ftge+2
  6220  004802  0100               	movlb	0	; () banked
  6221  004804  1F98               	comf	??___ftge& (0+255),f,b
  6222  004806  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6223  004808  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6224  00480A  2B98               	incf	??___ftge& (0+255),f,b
  6225  00480C  0E00               	movlw	0
  6226  00480E  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6227  004810  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6228  004812  0E00               	movlw	0
  6229  004814  0100               	movlb	0	; () banked
  6230  004816  2598               	addwf	??___ftge& (0+255),w,b
  6231  004818  0100               	movlb	0	; () banked
  6232  00481A  6F95               	movwf	___ftge@ff2& (0+255),b
  6233  00481C  0E00               	movlw	0
  6234  00481E  0100               	movlb	0	; () banked
  6235  004820  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6236  004822  0100               	movlb	0	; () banked
  6237  004824  6F96               	movwf	(___ftge@ff2+1)& (0+255),b
  6238  004826  0E80               	movlw	128
  6239  004828  0100               	movlb	0	; () banked
  6240  00482A  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6241  00482C  0100               	movlb	0	; () banked
  6242  00482E  6F97               	movwf	(___ftge@ff2+2)& (0+255),b
  6243  004830                     l7495:
  6244                           
  6245                           ; BSR set to: 0
  6246  004830  0E00               	movlw	0
  6247  004832  0100               	movlb	0	; () banked
  6248  004834  1B92               	xorwf	___ftge@ff1& (0+255),f,b
  6249  004836  0E00               	movlw	0
  6250  004838  0100               	movlb	0	; () banked
  6251  00483A  1B93               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  6252  00483C  0E80               	movlw	128
  6253  00483E  0100               	movlb	0	; () banked
  6254  004840  1B94               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  6255                           
  6256                           ; BSR set to: 0
  6257  004842  0E00               	movlw	0
  6258  004844  0100               	movlb	0	; () banked
  6259  004846  1B95               	xorwf	___ftge@ff2& (0+255),f,b
  6260  004848  0E00               	movlw	0
  6261  00484A  0100               	movlb	0	; () banked
  6262  00484C  1B96               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  6263  00484E  0E80               	movlw	128
  6264  004850  0100               	movlb	0	; () banked
  6265  004852  1B97               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  6266  004854  0100               	movlb	0	; () banked
  6267  004856  5195               	movf	___ftge@ff2& (0+255),w,b
  6268  004858  0100               	movlb	0	; () banked
  6269  00485A  5D92               	subwf	___ftge@ff1& (0+255),w,b
  6270  00485C  0100               	movlb	0	; () banked
  6271  00485E  5196               	movf	(___ftge@ff2+1)& (0+255),w,b
  6272  004860  0100               	movlb	0	; () banked
  6273  004862  5993               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  6274  004864  0100               	movlb	0	; () banked
  6275  004866  5197               	movf	(___ftge@ff2+2)& (0+255),w,b
  6276  004868  0100               	movlb	0	; () banked
  6277  00486A  5994               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  6278  00486C  B0D8               	btfsc	status,0,c
  6279  00486E  D002               	goto	l7501
  6280                           
  6281                           ; BSR set to: 0
  6282  004870  90D8               	bcf	status,0,c
  6283  004872  0012               	return	
  6284  004874                     l7501:
  6285                           
  6286                           ; BSR set to: 0
  6287  004874  80D8               	bsf	status,0,c
  6288                           
  6289                           ; BSR set to: 0
  6290  004876  0012               	return	
  6291  004878                     __end_of___ftge:
  6292                           	opt stack 0
  6293                           tblptru	equ	0xFF8
  6294                           tblptrh	equ	0xFF7
  6295                           tblptrl	equ	0xFF6
  6296                           tablat	equ	0xFF5
  6297                           prodh	equ	0xFF4
  6298                           prodl	equ	0xFF3
  6299                           postinc0	equ	0xFEE
  6300                           wreg	equ	0xFE8
  6301                           postdec1	equ	0xFE5
  6302                           fsr1l	equ	0xFE1
  6303                           indf2	equ	0xFDF
  6304                           postinc2	equ	0xFDE
  6305                           postdec2	equ	0xFDD
  6306                           fsr2h	equ	0xFDA
  6307                           fsr2l	equ	0xFD9
  6308                           status	equ	0xFD8
  6309                           
  6310 ;; *************** function ___awtoft *****************
  6311 ;; Defined at:
  6312 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  6313 ;; Parameters:    Size  Location     Type
  6314 ;;  c               2   14[BANK0 ] int 
  6315 ;; Auto vars:     Size  Location     Type
  6316 ;;  sign            1   17[BANK0 ] unsigned char 
  6317 ;; Return value:  Size  Location     Type
  6318 ;;                  3   14[BANK0 ] float 
  6319 ;; Registers used:
  6320 ;;		wreg, status,2, status,0, cstack
  6321 ;; Tracked objects:
  6322 ;;		On entry : 0/0
  6323 ;;		On exit  : 0/0
  6324 ;;		Unchanged: 0/0
  6325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6326 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6327 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6329 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6330 ;;Total ram usage:        4 bytes
  6331 ;; Hardware stack levels used:    1
  6332 ;; Hardware stack levels required when called:    8
  6333 ;; This function calls:
  6334 ;;		___ftpack
  6335 ;; This function is called by:
  6336 ;;		_ID
  6337 ;; This function uses a non-reentrant model
  6338 ;;
  6339                           
  6340                           	psect	text12
  6341  0053FC                     __ptext12:
  6342                           	opt stack 0
  6343  0053FC                     ___awtoft:
  6344                           	opt stack 20
  6345                           
  6346                           ; BSR set to: 0
  6347                           ;incstack = 0
  6348  0053FC  0E00               	movlw	0
  6349  0053FE  0100               	movlb	0	; () banked
  6350  005400  6F91               	movwf	___awtoft@sign& (0+255),b
  6351                           
  6352                           ; BSR set to: 0
  6353  005402  0100               	movlb	0	; () banked
  6354  005404  AF8F               	btfss	(___awtoft@c+1)& (0+255),7,b
  6355  005406  D008               	goto	l7483
  6356                           
  6357                           ; BSR set to: 0
  6358  005408  0100               	movlb	0	; () banked
  6359  00540A  6D8E               	negf	___awtoft@c& (0+255),b
  6360  00540C  1F8F               	comf	(___awtoft@c+1)& (0+255),f,b
  6361  00540E  B0D8               	btfsc	status,0,c
  6362  005410  2B8F               	incf	(___awtoft@c+1)& (0+255),f,b
  6363                           
  6364                           ; BSR set to: 0
  6365  005412  0E01               	movlw	1
  6366  005414  0100               	movlb	0	; () banked
  6367  005416  6F91               	movwf	___awtoft@sign& (0+255),b
  6368  005418                     l7483:
  6369                           
  6370                           ; BSR set to: 0
  6371  005418  C08E  F080         	movff	___awtoft@c,___ftpack@arg
  6372  00541C  C08F  F081         	movff	___awtoft@c+1,___ftpack@arg+1
  6373  005420  0100               	movlb	0	; () banked
  6374  005422  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  6375  005424  0E8E               	movlw	142
  6376  005426  0100               	movlb	0	; () banked
  6377  005428  6F83               	movwf	___ftpack@exp& (0+255),b
  6378  00542A  C091  F084         	movff	___awtoft@sign,___ftpack@sign
  6379  00542E  EC37  F020         	call	___ftpack	;wreg free
  6380  005432  C080  F08E         	movff	?___ftpack,?___awtoft
  6381  005436  C081  F08F         	movff	?___ftpack+1,?___awtoft+1
  6382  00543A  C082  F090         	movff	?___ftpack+2,?___awtoft+2
  6383  00543E  0012               	return	
  6384  005440                     __end_of___awtoft:
  6385                           	opt stack 0
  6386                           tblptru	equ	0xFF8
  6387                           tblptrh	equ	0xFF7
  6388                           tblptrl	equ	0xFF6
  6389                           tablat	equ	0xFF5
  6390                           prodh	equ	0xFF4
  6391                           prodl	equ	0xFF3
  6392                           postinc0	equ	0xFEE
  6393                           wreg	equ	0xFE8
  6394                           postdec1	equ	0xFE5
  6395                           fsr1l	equ	0xFE1
  6396                           indf2	equ	0xFDF
  6397                           postinc2	equ	0xFDE
  6398                           postdec2	equ	0xFDD
  6399                           fsr2h	equ	0xFDA
  6400                           fsr2l	equ	0xFD9
  6401                           status	equ	0xFD8
  6402                           
  6403 ;; *************** function ___ftpack *****************
  6404 ;; Defined at:
  6405 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  6406 ;; Parameters:    Size  Location     Type
  6407 ;;  arg             3    0[BANK0 ] unsigned um
  6408 ;;  exp             1    3[BANK0 ] unsigned char 
  6409 ;;  sign            1    4[BANK0 ] unsigned char 
  6410 ;; Auto vars:     Size  Location     Type
  6411 ;;		None
  6412 ;; Return value:  Size  Location     Type
  6413 ;;                  3    0[BANK0 ] float 
  6414 ;; Registers used:
  6415 ;;		wreg, status,2, status,0
  6416 ;; Tracked objects:
  6417 ;;		On entry : 0/0
  6418 ;;		On exit  : 0/0
  6419 ;;		Unchanged: 0/0
  6420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6421 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6423 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6424 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6425 ;;Total ram usage:        8 bytes
  6426 ;; Hardware stack levels used:    1
  6427 ;; Hardware stack levels required when called:    7
  6428 ;; This function calls:
  6429 ;;		Nothing
  6430 ;; This function is called by:
  6431 ;;		___awtoft
  6432 ;; This function uses a non-reentrant model
  6433 ;;
  6434                           
  6435                           	psect	text13
  6436  00406E                     __ptext13:
  6437                           	opt stack 0
  6438  00406E                     ___ftpack:
  6439                           	opt stack 20
  6440                           
  6441                           ;incstack = 0
  6442  00406E  0100               	movlb	0	; () banked
  6443  004070  5183               	movf	___ftpack@exp& (0+255),w,b
  6444  004072  0100               	movlb	0	; () banked
  6445  004074  B4D8               	btfsc	status,2,c
  6446  004076  D008               	goto	l6867
  6447                           
  6448                           ; BSR set to: 0
  6449  004078  0100               	movlb	0	; () banked
  6450  00407A  5180               	movf	___ftpack@arg& (0+255),w,b
  6451  00407C  0100               	movlb	0	; () banked
  6452  00407E  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  6453  004080  0100               	movlb	0	; () banked
  6454  004082  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  6455  004084  A4D8               	btfss	status,2,c
  6456  004086  D011               	goto	l6873
  6457  004088                     l6867:
  6458                           
  6459                           ; BSR set to: 0
  6460  004088  0E00               	movlw	0
  6461  00408A  0100               	movlb	0	; () banked
  6462  00408C  6F80               	movwf	?___ftpack& (0+255),b
  6463  00408E  0E00               	movlw	0
  6464  004090  0100               	movlb	0	; () banked
  6465  004092  6F81               	movwf	(?___ftpack+1)& (0+255),b
  6466  004094  0E00               	movlw	0
  6467  004096  0100               	movlb	0	; () banked
  6468  004098  6F82               	movwf	(?___ftpack+2)& (0+255),b
  6469                           
  6470                           ; BSR set to: 0
  6471  00409A  0012               	return	
  6472  00409C                     l6871:
  6473                           
  6474                           ; BSR set to: 0
  6475  00409C  0100               	movlb	0	; () banked
  6476  00409E  2B83               	incf	___ftpack@exp& (0+255),f,b
  6477  0040A0  0100               	movlb	0	; () banked
  6478  0040A2  90D8               	bcf	status,0,c
  6479  0040A4  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6480  0040A6  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6481  0040A8  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6482  0040AA                     l6873:
  6483                           
  6484                           ; BSR set to: 0
  6485  0040AA  0E00               	movlw	0
  6486  0040AC  0100               	movlb	0	; () banked
  6487  0040AE  1580               	andwf	___ftpack@arg& (0+255),w,b
  6488  0040B0  0100               	movlb	0	; () banked
  6489  0040B2  6F85               	movwf	??___ftpack& (0+255),b
  6490  0040B4  0E00               	movlw	0
  6491  0040B6  0100               	movlb	0	; () banked
  6492  0040B8  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6493  0040BA  0100               	movlb	0	; () banked
  6494  0040BC  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6495  0040BE  0EFE               	movlw	254
  6496  0040C0  0100               	movlb	0	; () banked
  6497  0040C2  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6498  0040C4  0100               	movlb	0	; () banked
  6499  0040C6  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6500  0040C8  0100               	movlb	0	; () banked
  6501  0040CA  5185               	movf	??___ftpack& (0+255),w,b
  6502  0040CC  0100               	movlb	0	; () banked
  6503  0040CE  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6504  0040D0  0100               	movlb	0	; () banked
  6505  0040D2  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6506  0040D4  B4D8               	btfsc	status,2,c
  6507  0040D6  D011               	goto	l6879
  6508  0040D8  D7E1               	goto	l6871
  6509  0040DA                     l6875:
  6510                           
  6511                           ; BSR set to: 0
  6512  0040DA  0100               	movlb	0	; () banked
  6513  0040DC  2B83               	incf	___ftpack@exp& (0+255),f,b
  6514                           
  6515                           ; BSR set to: 0
  6516  0040DE  0E01               	movlw	1
  6517  0040E0  0100               	movlb	0	; () banked
  6518  0040E2  2780               	addwf	___ftpack@arg& (0+255),f,b
  6519  0040E4  0E00               	movlw	0
  6520  0040E6  0100               	movlb	0	; () banked
  6521  0040E8  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  6522  0040EA  0E00               	movlw	0
  6523  0040EC  0100               	movlb	0	; () banked
  6524  0040EE  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  6525  0040F0  0100               	movlb	0	; () banked
  6526  0040F2  90D8               	bcf	status,0,c
  6527  0040F4  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6528  0040F6  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6529  0040F8  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6530  0040FA                     l6879:
  6531                           
  6532                           ; BSR set to: 0
  6533  0040FA  0E00               	movlw	0
  6534  0040FC  0100               	movlb	0	; () banked
  6535  0040FE  1580               	andwf	___ftpack@arg& (0+255),w,b
  6536  004100  0100               	movlb	0	; () banked
  6537  004102  6F85               	movwf	??___ftpack& (0+255),b
  6538  004104  0E00               	movlw	0
  6539  004106  0100               	movlb	0	; () banked
  6540  004108  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6541  00410A  0100               	movlb	0	; () banked
  6542  00410C  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6543  00410E  0EFF               	movlw	255
  6544  004110  0100               	movlb	0	; () banked
  6545  004112  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6546  004114  0100               	movlb	0	; () banked
  6547  004116  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6548  004118  0100               	movlb	0	; () banked
  6549  00411A  5185               	movf	??___ftpack& (0+255),w,b
  6550  00411C  0100               	movlb	0	; () banked
  6551  00411E  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6552  004120  0100               	movlb	0	; () banked
  6553  004122  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6554  004124  B4D8               	btfsc	status,2,c
  6555  004126  D008               	goto	l6883
  6556  004128  D7D8               	goto	l6875
  6557  00412A                     l6881:
  6558                           
  6559                           ; BSR set to: 0
  6560  00412A  0100               	movlb	0	; () banked
  6561  00412C  0783               	decf	___ftpack@exp& (0+255),f,b
  6562  00412E  0100               	movlb	0	; () banked
  6563  004130  90D8               	bcf	status,0,c
  6564  004132  3780               	rlcf	___ftpack@arg& (0+255),f,b
  6565  004134  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  6566  004136  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  6567  004138                     l6883:
  6568                           
  6569                           ; BSR set to: 0
  6570  004138  0100               	movlb	0	; () banked
  6571  00413A  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  6572  00413C  D004               	goto	l1789
  6573                           
  6574                           ; BSR set to: 0
  6575  00413E  0E02               	movlw	2
  6576  004140  0100               	movlb	0	; () banked
  6577  004142  6183               	cpfslt	___ftpack@exp& (0+255),b
  6578  004144  D7F2               	goto	l6881
  6579  004146                     l1789:
  6580                           
  6581                           ; BSR set to: 0
  6582  004146  0100               	movlb	0	; () banked
  6583  004148  B183               	btfsc	___ftpack@exp& (0+255),0,b
  6584  00414A  D002               	goto	l6889
  6585                           
  6586                           ; BSR set to: 0
  6587  00414C  0100               	movlb	0	; () banked
  6588  00414E  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  6589  004150                     l6889:
  6590                           
  6591                           ; BSR set to: 0
  6592  004150  0100               	movlb	0	; () banked
  6593  004152  90D8               	bcf	status,0,c
  6594  004154  3383               	rrcf	___ftpack@exp& (0+255),f,b
  6595  004156  0100               	movlb	0	; () banked
  6596  004158  5183               	movf	___ftpack@exp& (0+255),w,b
  6597  00415A  0100               	movlb	0	; () banked
  6598  00415C  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  6599                           
  6600                           ; BSR set to: 0
  6601  00415E  0100               	movlb	0	; () banked
  6602  004160  5184               	movf	___ftpack@sign& (0+255),w,b
  6603  004162  0100               	movlb	0	; () banked
  6604  004164  B4D8               	btfsc	status,2,c
  6605  004166  D002               	goto	l6895
  6606                           
  6607                           ; BSR set to: 0
  6608  004168  0100               	movlb	0	; () banked
  6609  00416A  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  6610  00416C                     l6895:
  6611                           
  6612                           ; BSR set to: 0
  6613  00416C  C080  F080         	movff	___ftpack@arg,?___ftpack
  6614  004170  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  6615  004174  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  6616  004178  0012               	return	
  6617  00417A                     __end_of___ftpack:
  6618                           	opt stack 0
  6619                           tblptru	equ	0xFF8
  6620                           tblptrh	equ	0xFF7
  6621                           tblptrl	equ	0xFF6
  6622                           tablat	equ	0xFF5
  6623                           prodh	equ	0xFF4
  6624                           prodl	equ	0xFF3
  6625                           postinc0	equ	0xFEE
  6626                           wreg	equ	0xFE8
  6627                           postdec1	equ	0xFE5
  6628                           fsr1l	equ	0xFE1
  6629                           indf2	equ	0xFDF
  6630                           postinc2	equ	0xFDE
  6631                           postdec2	equ	0xFDD
  6632                           fsr2h	equ	0xFDA
  6633                           fsr2l	equ	0xFD9
  6634                           status	equ	0xFD8
  6635                           
  6636 ;; *************** function _Distribution *****************
  6637 ;; Defined at:
  6638 ;;		line 389 in file "sort.c"
  6639 ;; Parameters:    Size  Location     Type
  6640 ;;		None
  6641 ;; Auto vars:     Size  Location     Type
  6642 ;;		None
  6643 ;; Return value:  Size  Location     Type
  6644 ;;                  1    wreg      void 
  6645 ;; Registers used:
  6646 ;;		wreg, status,2, status,0, cstack
  6647 ;; Tracked objects:
  6648 ;;		On entry : 0/0
  6649 ;;		On exit  : 0/0
  6650 ;;		Unchanged: 0/0
  6651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6654 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6655 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6656 ;;Total ram usage:        2 bytes
  6657 ;; Hardware stack levels used:    1
  6658 ;; Hardware stack levels required when called:    8
  6659 ;; This function calls:
  6660 ;;		_updateServoPosition
  6661 ;; This function is called by:
  6662 ;;		_sort
  6663 ;; This function uses a non-reentrant model
  6664 ;;
  6665                           
  6666                           	psect	text14
  6667  004466                     __ptext14:
  6668                           	opt stack 0
  6669  004466                     _Distribution:
  6670                           	opt stack 21
  6671                           
  6672                           ;sort.c: 390: if(f_can_coming_to_distribution){
  6673                           
  6674                           ; BSR set to: 0
  6675                           ;incstack = 0
  6676  004466  0101               	movlb	1	; () banked
  6677  004468  5131               	movf	_f_can_coming_to_distribution& (0+255),w,b
  6678  00446A  0101               	movlb	1	; () banked
  6679  00446C  1132               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  6680  00446E  B4D8               	btfsc	status,2,c
  6681  004470  0012               	return	
  6682                           
  6683                           ; BSR set to: 1
  6684                           ;sort.c: 391: f_can_distributed = 0;
  6685  004472  0E00               	movlw	0
  6686  004474  0101               	movlb	1	; () banked
  6687  004476  6F34               	movwf	(_f_can_distributed+1)& (0+255),b
  6688  004478  0E00               	movlw	0
  6689  00447A  6F33               	movwf	_f_can_distributed& (0+255),b
  6690                           
  6691                           ;sort.c: 398: switch(cur_can){
  6692  00447C  D034               	goto	l8187
  6693  00447E                     l8177:
  6694                           
  6695                           ;sort.c: 400: updateServoPosition(500, 1);
  6696  00447E  0E01               	movlw	1
  6697  004480  0100               	movlb	0	; () banked
  6698  004482  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6699  004484  0EF4               	movlw	244
  6700  004486  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6701  004488  0E00               	movlw	0
  6702  00448A  0100               	movlb	0	; () banked
  6703  00448C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6704  00448E  0E01               	movlw	1
  6705  004490  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6706  004492  EC6A  F026         	call	_updateServoPosition	;wreg free
  6707                           
  6708                           ;sort.c: 401: break;
  6709  004496  D03E               	goto	l8189
  6710  004498                     l8179:
  6711                           
  6712                           ;sort.c: 403: updateServoPosition(850, 1);
  6713  004498  0E03               	movlw	3
  6714  00449A  0100               	movlb	0	; () banked
  6715  00449C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6716  00449E  0E52               	movlw	82
  6717  0044A0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6718  0044A2  0E00               	movlw	0
  6719  0044A4  0100               	movlb	0	; () banked
  6720  0044A6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6721  0044A8  0E01               	movlw	1
  6722  0044AA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6723  0044AC  EC6A  F026         	call	_updateServoPosition	;wreg free
  6724                           
  6725                           ;sort.c: 404: break;
  6726  0044B0  D031               	goto	l8189
  6727  0044B2                     l8181:
  6728                           
  6729                           ;sort.c: 406: updateServoPosition(1670, 1);
  6730  0044B2  0E06               	movlw	6
  6731  0044B4  0100               	movlb	0	; () banked
  6732  0044B6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6733  0044B8  0E86               	movlw	134
  6734  0044BA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6735  0044BC  0E00               	movlw	0
  6736  0044BE  0100               	movlb	0	; () banked
  6737  0044C0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6738  0044C2  0E01               	movlw	1
  6739  0044C4  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6740  0044C6  EC6A  F026         	call	_updateServoPosition	;wreg free
  6741                           
  6742                           ;sort.c: 407: break;
  6743  0044CA  D024               	goto	l8189
  6744  0044CC                     l8183:
  6745                           
  6746                           ;sort.c: 409: updateServoPosition(2400, 1);
  6747  0044CC  0E09               	movlw	9
  6748  0044CE  0100               	movlb	0	; () banked
  6749  0044D0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6750  0044D2  0E60               	movlw	96
  6751  0044D4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6752  0044D6  0E00               	movlw	0
  6753  0044D8  0100               	movlb	0	; () banked
  6754  0044DA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6755  0044DC  0E01               	movlw	1
  6756  0044DE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6757  0044E0  EC6A  F026         	call	_updateServoPosition	;wreg free
  6758                           
  6759                           ;sort.c: 413: }
  6760                           
  6761                           ;sort.c: 412: break;
  6762                           
  6763                           ;sort.c: 411: default:
  6764                           
  6765                           ;sort.c: 410: break;
  6766  0044E4  D017               	goto	l8189
  6767  0044E6                     l8187:
  6768  0044E6  C12B  F088         	movff	_cur_can,??_Distribution
  6769  0044EA  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  6770                           
  6771                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6772                           ; Switch size 1, requested type "space"
  6773                           ; Number of cases is 1, Range of values is 0 to 0
  6774                           ; switch strategies available:
  6775                           ; Name         Instructions Cycles
  6776                           ; simple_byte            4     3 (average)
  6777                           ;	Chosen strategy is simple_byte
  6778  0044EE  0100               	movlb	0	; () banked
  6779  0044F0  5189               	movf	(??_Distribution+1)& (0+255),w,b
  6780  0044F2  0A00               	xorlw	0	; case 0
  6781  0044F4  A4D8               	btfss	status,2,c
  6782  0044F6  D00E               	goto	l8189
  6783                           
  6784                           ; BSR set to: 0
  6785                           ; Switch size 1, requested type "space"
  6786                           ; Number of cases is 4, Range of values is 0 to 3
  6787                           ; switch strategies available:
  6788                           ; Name         Instructions Cycles
  6789                           ; simple_byte           13     7 (average)
  6790                           ;	Chosen strategy is simple_byte
  6791  0044F8  0100               	movlb	0	; () banked
  6792  0044FA  5188               	movf	??_Distribution& (0+255),w,b
  6793  0044FC  0A00               	xorlw	0	; case 0
  6794  0044FE  B4D8               	btfsc	status,2,c
  6795  004500  D7BE               	goto	l8177
  6796  004502  0A01               	xorlw	1	; case 1
  6797  004504  B4D8               	btfsc	status,2,c
  6798  004506  D7C8               	goto	l8179
  6799  004508  0A03               	xorlw	3	; case 2
  6800  00450A  B4D8               	btfsc	status,2,c
  6801  00450C  D7D2               	goto	l8181
  6802  00450E  0A01               	xorlw	1	; case 3
  6803  004510  B4D8               	btfsc	status,2,c
  6804  004512  D7DC               	goto	l8183
  6805  004514                     l8189:
  6806                           
  6807                           ;sort.c: 414: updateServoPosition(1050, 3);
  6808  004514  0E04               	movlw	4
  6809  004516  0100               	movlb	0	; () banked
  6810  004518  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6811  00451A  0E1A               	movlw	26
  6812  00451C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6813  00451E  0E00               	movlw	0
  6814  004520  0100               	movlb	0	; () banked
  6815  004522  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6816  004524  0E03               	movlw	3
  6817  004526  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6818  004528  EC6A  F026         	call	_updateServoPosition	;wreg free
  6819                           
  6820                           ;sort.c: 415: servo_timer_target = 750;
  6821  00452C  0E02               	movlw	2
  6822  00452E  6E70               	movwf	_servo_timer_target+1,c	;volatile
  6823  004530  0EEE               	movlw	238
  6824  004532  6E6F               	movwf	_servo_timer_target,c	;volatile
  6825                           
  6826                           ;sort.c: 416: f_panning_to_bin = 1;
  6827  004534  0E00               	movlw	0
  6828  004536  6E68               	movwf	_f_panning_to_bin+1,c	;volatile
  6829  004538  0E01               	movlw	1
  6830  00453A  6E67               	movwf	_f_panning_to_bin,c	;volatile
  6831                           
  6832                           ;sort.c: 417: f_can_coming_to_distribution = 0;
  6833  00453C  0E00               	movlw	0
  6834  00453E  0101               	movlb	1	; () banked
  6835  004540  6F32               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  6836  004542  0E00               	movlw	0
  6837  004544  6F31               	movwf	_f_can_coming_to_distribution& (0+255),b
  6838  004546  0012               	return	
  6839  004548                     __end_of_Distribution:
  6840                           	opt stack 0
  6841                           tblptru	equ	0xFF8
  6842                           tblptrh	equ	0xFF7
  6843                           tblptrl	equ	0xFF6
  6844                           tablat	equ	0xFF5
  6845                           prodh	equ	0xFF4
  6846                           prodl	equ	0xFF3
  6847                           postinc0	equ	0xFEE
  6848                           wreg	equ	0xFE8
  6849                           postdec1	equ	0xFE5
  6850                           fsr1l	equ	0xFE1
  6851                           indf2	equ	0xFDF
  6852                           postinc2	equ	0xFDE
  6853                           postdec2	equ	0xFDD
  6854                           fsr2h	equ	0xFDA
  6855                           fsr2l	equ	0xFD9
  6856                           status	equ	0xFD8
  6857                           
  6858 ;; *************** function _machineConfig *****************
  6859 ;; Defined at:
  6860 ;;		line 15 in file "MachineConfig.c"
  6861 ;; Parameters:    Size  Location     Type
  6862 ;;		None
  6863 ;; Auto vars:     Size  Location     Type
  6864 ;;		None
  6865 ;; Return value:  Size  Location     Type
  6866 ;;                  1    wreg      void 
  6867 ;; Registers used:
  6868 ;;		wreg, status,2
  6869 ;; Tracked objects:
  6870 ;;		On entry : 0/0
  6871 ;;		On exit  : 0/0
  6872 ;;		Unchanged: 0/0
  6873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6878 ;;Total ram usage:        0 bytes
  6879 ;; Hardware stack levels used:    1
  6880 ;; Hardware stack levels required when called:    7
  6881 ;; This function calls:
  6882 ;;		Nothing
  6883 ;; This function is called by:
  6884 ;;		_main
  6885 ;; This function uses a non-reentrant model
  6886 ;;
  6887                           
  6888                           	psect	text15
  6889  004FFA                     __ptext15:
  6890                           	opt stack 0
  6891  004FFA                     _machineConfig:
  6892                           	opt stack 23
  6893                           
  6894                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  6895                           
  6896                           ; BSR set to: 1
  6897                           ;incstack = 0
  6898  004FFA  0EF0               	movlw	240
  6899  004FFC  6ED3               	movwf	4051,c	;volatile
  6900                           
  6901                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  6902  004FFE  8C9B               	bsf	3995,6,c	;volatile
  6903                           
  6904                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  6905  005000  0E07               	movlw	7
  6906  005002  6E92               	movwf	3986,c	;volatile
  6907                           
  6908                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  6909  005004  0EF2               	movlw	242
  6910  005006  6E93               	movwf	3987,c	;volatile
  6911                           
  6912                           ;MachineConfig.c: 27: TRISC = 0x00;
  6913  005008  0E00               	movlw	0
  6914  00500A  6E94               	movwf	3988,c	;volatile
  6915                           
  6916                           ;MachineConfig.c: 31: TRISD = 0x00;
  6917  00500C  0E00               	movlw	0
  6918  00500E  6E95               	movwf	3989,c	;volatile
  6919                           
  6920                           ;MachineConfig.c: 34: TRISE = 0x00;
  6921  005010  0E00               	movlw	0
  6922  005012  6E96               	movwf	3990,c	;volatile
  6923                           
  6924                           ;MachineConfig.c: 37: LATA = 0x00;
  6925  005014  0E00               	movlw	0
  6926  005016  6E89               	movwf	3977,c	;volatile
  6927                           
  6928                           ;MachineConfig.c: 38: LATB = 0x00;
  6929  005018  0E00               	movlw	0
  6930  00501A  6E8A               	movwf	3978,c	;volatile
  6931                           
  6932                           ;MachineConfig.c: 39: LATC = 0x00;
  6933  00501C  0E00               	movlw	0
  6934  00501E  6E8B               	movwf	3979,c	;volatile
  6935                           
  6936                           ;MachineConfig.c: 40: LATD = 0x00;
  6937  005020  0E00               	movlw	0
  6938  005022  6E8C               	movwf	3980,c	;volatile
  6939                           
  6940                           ;MachineConfig.c: 41: LATE = 0x00;
  6941  005024  0E00               	movlw	0
  6942  005026  6E8D               	movwf	3981,c	;volatile
  6943                           
  6944                           ;MachineConfig.c: 43: nRBPU = 0;
  6945  005028  9EF1               	bcf	intcon2,7,c	;volatile
  6946                           
  6947                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  6948  00502A  0E00               	movlw	0
  6949  00502C  6EC2               	movwf	4034,c	;volatile
  6950                           
  6951                           ;MachineConfig.c: 47: ADCON1 = 0b00001100;
  6952  00502E  0E0C               	movlw	12
  6953  005030  6EC1               	movwf	4033,c	;volatile
  6954                           
  6955                           ;MachineConfig.c: 51: CVRCON = 0x00;
  6956  005032  0E00               	movlw	0
  6957  005034  6EB5               	movwf	4021,c	;volatile
  6958                           
  6959                           ;MachineConfig.c: 52: CMCONbits.CIS = 0;
  6960  005036  96B4               	bcf	4020,3,c	;volatile
  6961                           
  6962                           ;MachineConfig.c: 53: ADCON2 = 0b10110001;
  6963  005038  0EB1               	movlw	177
  6964  00503A  6EC0               	movwf	4032,c	;volatile
  6965                           
  6966                           ;MachineConfig.c: 56: INT1IE = 1;
  6967  00503C  86F0               	bsf	intcon3,3,c	;volatile
  6968                           
  6969                           ;MachineConfig.c: 58: TMR0IE = 1;
  6970  00503E  8AF2               	bsf	intcon,5,c	;volatile
  6971                           
  6972                           ;MachineConfig.c: 59: TMR1IE = 1;
  6973  005040  809D               	bsf	3997,0,c	;volatile
  6974                           
  6975                           ;MachineConfig.c: 60: TMR2IE = 1;
  6976  005042  829D               	bsf	3997,1,c	;volatile
  6977                           
  6978                           ;MachineConfig.c: 61: TMR3IE = 1;
  6979  005044  82A0               	bsf	4000,1,c	;volatile
  6980                           
  6981                           ;MachineConfig.c: 63: T1CON = 0b10110000;
  6982  005046  0EB0               	movlw	176
  6983  005048  6ECD               	movwf	4045,c	;volatile
  6984                           
  6985                           ;MachineConfig.c: 64: T2CON = 0b01111011;
  6986  00504A  0E7B               	movlw	123
  6987  00504C  6ECA               	movwf	4042,c	;volatile
  6988                           
  6989                           ;MachineConfig.c: 65: PR2 = 0x22;
  6990  00504E  0E22               	movlw	34
  6991  005050  6ECB               	movwf	4043,c	;volatile
  6992                           
  6993                           ;MachineConfig.c: 66: T3CON = 0b10110000;
  6994  005052  0EB0               	movlw	176
  6995  005054  6EB1               	movwf	4017,c	;volatile
  6996                           
  6997                           ;MachineConfig.c: 67: PEIE = 1;
  6998  005056  8CF2               	bsf	intcon,6,c	;volatile
  6999                           
  7000                           ;MachineConfig.c: 68: ADIE = 0;
  7001  005058  9C9D               	bcf	3997,6,c	;volatile
  7002                           
  7003                           ;MachineConfig.c: 69: (INTCONbits.GIE = 0);
  7004  00505A  9EF2               	bcf	intcon,7,c	;volatile
  7005  00505C  0012               	return		;funcret
  7006  00505E                     __end_of_machineConfig:
  7007                           	opt stack 0
  7008                           tblptru	equ	0xFF8
  7009                           tblptrh	equ	0xFF7
  7010                           tblptrl	equ	0xFF6
  7011                           tablat	equ	0xFF5
  7012                           prodh	equ	0xFF4
  7013                           prodl	equ	0xFF3
  7014                           intcon	equ	0xFF2
  7015                           intcon2	equ	0xFF1
  7016                           intcon3	equ	0xFF0
  7017                           postinc0	equ	0xFEE
  7018                           wreg	equ	0xFE8
  7019                           postdec1	equ	0xFE5
  7020                           fsr1l	equ	0xFE1
  7021                           indf2	equ	0xFDF
  7022                           postinc2	equ	0xFDE
  7023                           postdec2	equ	0xFDD
  7024                           fsr2h	equ	0xFDA
  7025                           fsr2l	equ	0xFD9
  7026                           status	equ	0xFD8
  7027                           
  7028 ;; *************** function _logRun *****************
  7029 ;; Defined at:
  7030 ;;		line 88 in file "EEPROM.c"
  7031 ;; Parameters:    Size  Location     Type
  7032 ;;		None
  7033 ;; Auto vars:     Size  Location     Type
  7034 ;;  byte_i          1   53[BANK0 ] unsigned char 
  7035 ;;  i               2   55[BANK0 ] int 
  7036 ;;  num             1   49[BANK0 ] unsigned char 
  7037 ;;  addr            2   57[BANK0 ] unsigned short 
  7038 ;;  byte11          1   54[BANK0 ] unsigned char 
  7039 ;;  byte3           1   52[BANK0 ] unsigned char 
  7040 ;;  byte2           1   51[BANK0 ] unsigned char 
  7041 ;;  byte1           1   50[BANK0 ] unsigned char 
  7042 ;; Return value:  Size  Location     Type
  7043 ;;                  1    wreg      void 
  7044 ;; Registers used:
  7045 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7046 ;; Tracked objects:
  7047 ;;		On entry : 0/0
  7048 ;;		On exit  : 0/0
  7049 ;;		Unchanged: 0/0
  7050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7052 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7054 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7055 ;;Total ram usage:       10 bytes
  7056 ;; Hardware stack levels used:    1
  7057 ;; Hardware stack levels required when called:   11
  7058 ;; This function calls:
  7059 ;;		_EEPROM_read
  7060 ;;		_EEPROM_write
  7061 ;; This function is called by:
  7062 ;;		_main
  7063 ;; This function uses a non-reentrant model
  7064 ;;
  7065                           
  7066                           	psect	text16
  7067  003E06                     __ptext16:
  7068                           	opt stack 0
  7069  003E06                     _logRun:
  7070                           	opt stack 19
  7071                           
  7072                           ;EEPROM.c: 101: sel = EEPROM_read(0);
  7073                           
  7074                           ;incstack = 0
  7075  003E06  0E00               	movlw	0
  7076  003E08  0100               	movlb	0	; () banked
  7077  003E0A  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  7078  003E0C  0E00               	movlw	0
  7079  003E0E  6F80               	movwf	EEPROM_read@address& (0+255),b
  7080  003E10  ECFC  F02C         	call	_EEPROM_read	;wreg free
  7081  003E14  0100               	movlb	0	; () banked
  7082  003E16  6FFD               	movwf	_sel& (0+255),b
  7083                           
  7084                           ; BSR set to: 0
  7085                           ;EEPROM.c: 102: unsigned short addr = 1 + 11 * sel;
  7086  003E18  0100               	movlb	0	; () banked
  7087  003E1A  51FD               	movf	_sel& (0+255),w,b
  7088  003E1C  0D0B               	mullw	11
  7089  003E1E  0E01               	movlw	1
  7090  003E20  24F3               	addwf	prodl,w,c
  7091  003E22  0100               	movlb	0	; () banked
  7092  003E24  6FB9               	movwf	logRun@addr& (0+255),b
  7093  003E26  0E00               	movlw	0
  7094  003E28  20F4               	addwfc	prodh,w,c
  7095  003E2A  0100               	movlb	0	; () banked
  7096  003E2C  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  7097                           
  7098                           ; BSR set to: 0
  7099                           ;EEPROM.c: 105: if (sel < 3){
  7100  003E2E  0E03               	movlw	3
  7101  003E30  0100               	movlb	0	; () banked
  7102  003E32  61FD               	cpfslt	_sel& (0+255),b
  7103  003E34  D00E               	goto	l9821
  7104                           
  7105                           ; BSR set to: 0
  7106                           ;EEPROM.c: 106: unsigned char num = sel+1;
  7107  003E36  0100               	movlb	0	; () banked
  7108  003E38  29FD               	incf	_sel& (0+255),w,b
  7109  003E3A  0100               	movlb	0	; () banked
  7110  003E3C  6FB1               	movwf	logRun@num& (0+255),b
  7111                           
  7112                           ; BSR set to: 0
  7113                           ;EEPROM.c: 107: EEPROM_write(0, num);
  7114  003E3E  0E00               	movlw	0
  7115  003E40  0100               	movlb	0	; () banked
  7116  003E42  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7117  003E44  0E00               	movlw	0
  7118  003E46  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7119  003E48  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  7120  003E4C  ECBF  F021         	call	_EEPROM_write	;wreg free
  7121                           
  7122                           ;EEPROM.c: 108: }
  7123  003E50  D00A               	goto	l9823
  7124  003E52                     l9821:
  7125                           
  7126                           ;EEPROM.c: 109: else{
  7127                           ;EEPROM.c: 110: EEPROM_write(0, 0);
  7128  003E52  0E00               	movlw	0
  7129  003E54  0100               	movlb	0	; () banked
  7130  003E56  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7131  003E58  0E00               	movlw	0
  7132  003E5A  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7133  003E5C  0E00               	movlw	0
  7134  003E5E  0100               	movlb	0	; () banked
  7135  003E60  6FAD               	movwf	EEPROM_write@data& (0+255),b
  7136  003E62  ECBF  F021         	call	_EEPROM_write	;wreg free
  7137  003E66                     l9823:
  7138                           
  7139                           ;EEPROM.c: 111: }
  7140                           ;EEPROM.c: 114: unsigned char byte1 = 0b10000000 | count_total;
  7141  003E66  0100               	movlb	0	; () banked
  7142  003E68  51FE               	movf	_count_total& (0+255),w,b
  7143  003E6A  0980               	iorlw	128
  7144  003E6C  0100               	movlb	0	; () banked
  7145  003E6E  6FB2               	movwf	logRun@byte1& (0+255),b
  7146                           
  7147                           ; BSR set to: 0
  7148                           ;EEPROM.c: 115: EEPROM_write(addr, byte1);
  7149  003E70  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7150  003E74  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7151  003E78  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  7152  003E7C  ECBF  F021         	call	_EEPROM_write	;wreg free
  7153                           
  7154                           ;EEPROM.c: 116: addr++;
  7155  003E80  0100               	movlb	0	; () banked
  7156  003E82  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7157  003E84  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7158                           
  7159                           ; BSR set to: 0
  7160                           ;EEPROM.c: 119: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  7161  003E86  0101               	movlb	1	; () banked
  7162  003E88  3927               	swapf	_count_pop_no_tab& (0+255),w,b
  7163  003E8A  0BF0               	andlw	240
  7164  003E8C  0101               	movlb	1	; () banked
  7165  003E8E  1129               	iorwf	_count_pop_w_tab& (0+255),w,b
  7166  003E90  0100               	movlb	0	; () banked
  7167  003E92  6FB3               	movwf	logRun@byte2& (0+255),b
  7168                           
  7169                           ; BSR set to: 0
  7170                           ;EEPROM.c: 120: EEPROM_write(addr, byte2);
  7171  003E94  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7172  003E98  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7173  003E9C  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  7174  003EA0  ECBF  F021         	call	_EEPROM_write	;wreg free
  7175                           
  7176                           ;EEPROM.c: 121: addr++;
  7177  003EA4  0100               	movlb	0	; () banked
  7178  003EA6  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7179  003EA8  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7180                           
  7181                           ; BSR set to: 0
  7182                           ;EEPROM.c: 122: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  7183  003EAA  0101               	movlb	1	; () banked
  7184  003EAC  3925               	swapf	_count_can_w_lab& (0+255),w,b
  7185  003EAE  0BF0               	andlw	240
  7186  003EB0  0101               	movlb	1	; () banked
  7187  003EB2  1123               	iorwf	_count_can_no_lab& (0+255),w,b
  7188  003EB4  0100               	movlb	0	; () banked
  7189  003EB6  6FB4               	movwf	logRun@byte3& (0+255),b
  7190                           
  7191                           ; BSR set to: 0
  7192                           ;EEPROM.c: 123: EEPROM_write(addr, byte3);
  7193  003EB8  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7194  003EBC  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7195  003EC0  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  7196  003EC4  ECBF  F021         	call	_EEPROM_write	;wreg free
  7197                           
  7198                           ;EEPROM.c: 124: addr++;
  7199  003EC8  0100               	movlb	0	; () banked
  7200  003ECA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7201  003ECC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7202                           
  7203                           ; BSR set to: 0
  7204                           ;EEPROM.c: 127: for(int i = 0; i < 7; i++){
  7205  003ECE  0E00               	movlw	0
  7206  003ED0  0100               	movlb	0	; () banked
  7207  003ED2  6FB8               	movwf	(logRun@i+1)& (0+255),b
  7208  003ED4  0E00               	movlw	0
  7209  003ED6  6FB7               	movwf	logRun@i& (0+255),b
  7210                           
  7211                           ; BSR set to: 0
  7212  003ED8  0100               	movlb	0	; () banked
  7213  003EDA  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7214  003EDC  D008               	goto	l9847
  7215  003EDE  0100               	movlb	0	; () banked
  7216  003EE0  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7217  003EE2  E128               	bnz	l1148
  7218  003EE4  0E07               	movlw	7
  7219  003EE6  0100               	movlb	0	; () banked
  7220  003EE8  5DB7               	subwf	logRun@i& (0+255),w,b
  7221  003EEA  B0D8               	btfsc	status,0,c
  7222  003EEC  D023               	goto	l1148
  7223  003EEE                     l9847:
  7224                           
  7225                           ; BSR set to: 0
  7226                           ;EEPROM.c: 128: unsigned char byte_i = startTime[i];
  7227  003EEE  90D8               	bcf	status,0,c
  7228  003EF0  0100               	movlb	0	; () banked
  7229  003EF2  35B7               	rlcf	logRun@i& (0+255),w,b
  7230  003EF4  6ED9               	movwf	fsr2l,c
  7231  003EF6  0100               	movlb	0	; () banked
  7232  003EF8  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  7233  003EFA  6EDA               	movwf	fsr2h,c
  7234  003EFC  0E0E               	movlw	low _startTime
  7235  003EFE  26D9               	addwf	fsr2l,f,c
  7236  003F00  0E01               	movlw	high _startTime
  7237  003F02  22DA               	addwfc	fsr2h,f,c
  7238  003F04  50DF               	movf	indf2,w,c
  7239  003F06  0100               	movlb	0	; () banked
  7240  003F08  6FB5               	movwf	logRun@byte_i& (0+255),b
  7241                           
  7242                           ; BSR set to: 0
  7243                           ;EEPROM.c: 129: EEPROM_write(addr, byte_i);
  7244  003F0A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7245  003F0E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7246  003F12  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  7247  003F16  ECBF  F021         	call	_EEPROM_write	;wreg free
  7248                           
  7249                           ;EEPROM.c: 130: addr++;
  7250  003F1A  0100               	movlb	0	; () banked
  7251  003F1C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7252  003F1E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7253                           
  7254                           ; BSR set to: 0
  7255  003F20  0100               	movlb	0	; () banked
  7256  003F22  4BB7               	infsnz	logRun@i& (0+255),f,b
  7257  003F24  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  7258                           
  7259                           ; BSR set to: 0
  7260  003F26  0100               	movlb	0	; () banked
  7261  003F28  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7262  003F2A  D7E1               	goto	l9847
  7263  003F2C  0100               	movlb	0	; () banked
  7264  003F2E  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7265  003F30  E101               	bnz	u9260
  7266  003F32  D7D8               	goto	L8
  7267  003F34                     u9260:
  7268  003F34                     l1148:
  7269                           
  7270                           ; BSR set to: 0
  7271                           ;EEPROM.c: 131: }
  7272                           ;EEPROM.c: 134: unsigned char byte11 = total_time;
  7273  003F34  C0FA  F0B6         	movff	_total_time,logRun@byte11
  7274                           
  7275                           ; BSR set to: 0
  7276                           ;EEPROM.c: 135: EEPROM_write(addr, byte11);
  7277  003F38  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7278  003F3C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7279  003F40  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  7280  003F44  ECBF  F021         	call	_EEPROM_write	;wreg free
  7281  003F48  0012               	return		;funcret
  7282  003F4A                     __end_of_logRun:
  7283                           	opt stack 0
  7284                           tblptru	equ	0xFF8
  7285                           tblptrh	equ	0xFF7
  7286                           tblptrl	equ	0xFF6
  7287                           tablat	equ	0xFF5
  7288                           prodh	equ	0xFF4
  7289                           prodl	equ	0xFF3
  7290                           intcon	equ	0xFF2
  7291                           intcon2	equ	0xFF1
  7292                           intcon3	equ	0xFF0
  7293                           postinc0	equ	0xFEE
  7294                           wreg	equ	0xFE8
  7295                           postdec1	equ	0xFE5
  7296                           fsr1l	equ	0xFE1
  7297                           indf2	equ	0xFDF
  7298                           postinc2	equ	0xFDE
  7299                           postdec2	equ	0xFDD
  7300                           fsr2h	equ	0xFDA
  7301                           fsr2l	equ	0xFD9
  7302                           status	equ	0xFD8
  7303                           
  7304 ;; *************** function _initUI *****************
  7305 ;; Defined at:
  7306 ;;		line 62 in file "UI.c"
  7307 ;; Parameters:    Size  Location     Type
  7308 ;;		None
  7309 ;; Auto vars:     Size  Location     Type
  7310 ;;		None
  7311 ;; Return value:  Size  Location     Type
  7312 ;;                  1    wreg      void 
  7313 ;; Registers used:
  7314 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7315 ;; Tracked objects:
  7316 ;;		On entry : 0/0
  7317 ;;		On exit  : 0/0
  7318 ;;		Unchanged: 0/0
  7319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7324 ;;Total ram usage:        0 bytes
  7325 ;; Hardware stack levels used:    1
  7326 ;; Hardware stack levels required when called:   12
  7327 ;; This function calls:
  7328 ;;		_change_state_to_menu_start
  7329 ;;		_loadRTC
  7330 ;; This function is called by:
  7331 ;;		_main
  7332 ;; This function uses a non-reentrant model
  7333 ;;
  7334                           
  7335                           	psect	text17
  7336  0055FC                     __ptext17:
  7337                           	opt stack 0
  7338  0055FC                     _initUI:
  7339                           	opt stack 18
  7340                           
  7341                           ;UI.c: 63: (INTCONbits.GIE = 1);
  7342                           
  7343                           ;incstack = 0
  7344  0055FC  8EF2               	bsf	intcon,7,c	;volatile
  7345                           
  7346                           ;UI.c: 64: machine_state = UI_state;
  7347  0055FE  0E00               	movlw	0
  7348  005600  0100               	movlb	0	; () banked
  7349  005602  6FFC               	movwf	_machine_state& (0+255),b
  7350                           
  7351                           ;UI.c: 65: logstate = 0;
  7352  005604  0E00               	movlw	0
  7353  005606  0100               	movlb	0	; () banked
  7354  005608  6FF9               	movwf	(_logstate+1)& (0+255),b
  7355  00560A  0E00               	movlw	0
  7356  00560C  6FF8               	movwf	_logstate& (0+255),b
  7357                           
  7358                           ; BSR set to: 0
  7359                           ;UI.c: 67: if(RTCflag){
  7360  00560E  0100               	movlb	0	; () banked
  7361  005610  51E4               	movf	_RTCflag& (0+255),w,b
  7362  005612  0100               	movlb	0	; () banked
  7363  005614  11E5               	iorwf	(_RTCflag+1)& (0+255),w,b
  7364  005616  A4D8               	btfss	status,2,c
  7365                           
  7366                           ; BSR set to: 0
  7367                           ;UI.c: 68: loadRTC();
  7368  005618  EC9F  F025         	call	_loadRTC	;wreg free
  7369                           
  7370                           ;UI.c: 69: }
  7371                           ;UI.c: 71: change_state_to_menu_start();
  7372  00561C  EC1C  F02C         	call	_change_state_to_menu_start	;wreg free
  7373                           
  7374                           ;UI.c: 72: firstboot = 1;
  7375  005620  0E00               	movlw	0
  7376  005622  0101               	movlb	1	; () banked
  7377  005624  6F3A               	movwf	(_firstboot+1)& (0+255),b
  7378  005626  0E01               	movlw	1
  7379  005628  6F39               	movwf	_firstboot& (0+255),b
  7380                           
  7381                           ; BSR set to: 1
  7382  00562A  0012               	return		;funcret
  7383  00562C                     __end_of_initUI:
  7384                           	opt stack 0
  7385                           tblptru	equ	0xFF8
  7386                           tblptrh	equ	0xFF7
  7387                           tblptrl	equ	0xFF6
  7388                           tablat	equ	0xFF5
  7389                           prodh	equ	0xFF4
  7390                           prodl	equ	0xFF3
  7391                           intcon	equ	0xFF2
  7392                           intcon2	equ	0xFF1
  7393                           intcon3	equ	0xFF0
  7394                           postinc0	equ	0xFEE
  7395                           wreg	equ	0xFE8
  7396                           postdec1	equ	0xFE5
  7397                           fsr1l	equ	0xFE1
  7398                           indf2	equ	0xFDF
  7399                           postinc2	equ	0xFDE
  7400                           postdec2	equ	0xFDD
  7401                           fsr2h	equ	0xFDA
  7402                           fsr2l	equ	0xFD9
  7403                           status	equ	0xFD8
  7404                           
  7405 ;; *************** function _loadRTC *****************
  7406 ;; Defined at:
  7407 ;;		line 28 in file "RTC.c"
  7408 ;; Parameters:    Size  Location     Type
  7409 ;;		None
  7410 ;; Auto vars:     Size  Location     Type
  7411 ;;  i               2   22[BANK0 ] int 
  7412 ;; Return value:  Size  Location     Type
  7413 ;;                  1    wreg      void 
  7414 ;; Registers used:
  7415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7416 ;; Tracked objects:
  7417 ;;		On entry : 0/0
  7418 ;;		On exit  : 0/0
  7419 ;;		Unchanged: 0/0
  7420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7422 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7423 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7424 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7425 ;;Total ram usage:        3 bytes
  7426 ;; Hardware stack levels used:    1
  7427 ;; Hardware stack levels required when called:    9
  7428 ;; This function calls:
  7429 ;;		_I2C_Master_Init
  7430 ;;		_I2C_Master_Start
  7431 ;;		_I2C_Master_Stop
  7432 ;;		_I2C_Master_Write
  7433 ;; This function is called by:
  7434 ;;		_initUI
  7435 ;; This function uses a non-reentrant model
  7436 ;;
  7437                           
  7438                           	psect	text18
  7439  004B3E                     __ptext18:
  7440                           	opt stack 0
  7441  004B3E                     _loadRTC:
  7442                           	opt stack 20
  7443                           
  7444                           ;RTC.c: 30: I2C_Master_Init(10000);
  7445                           
  7446                           ; BSR set to: 1
  7447                           ;incstack = 0
  7448  004B3E  0E10               	movlw	16
  7449  004B40  0100               	movlb	0	; () banked
  7450  004B42  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  7451  004B44  0E27               	movlw	39
  7452  004B46  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  7453  004B48  0E00               	movlw	0
  7454  004B4A  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  7455  004B4C  0E00               	movlw	0
  7456  004B4E  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  7457  004B50  EC60  F028         	call	_I2C_Master_Init	;wreg free
  7458                           
  7459                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  7460  004B54  9EF2               	bcf	intcon,7,c	;volatile
  7461                           
  7462                           ;RTC.c: 34: I2C_Master_Start();
  7463  004B56  EC5F  F02D         	call	_I2C_Master_Start	;wreg free
  7464                           
  7465                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  7466  004B5A  0E00               	movlw	0
  7467  004B5C  0100               	movlb	0	; () banked
  7468  004B5E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7469  004B60  0ED0               	movlw	208
  7470  004B62  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7471  004B64  EC4D  F02D         	call	_I2C_Master_Write	;wreg free
  7472                           
  7473                           ;RTC.c: 36: I2C_Master_Write(0x00);
  7474  004B68  0E00               	movlw	0
  7475  004B6A  0100               	movlb	0	; () banked
  7476  004B6C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7477  004B6E  0E00               	movlw	0
  7478  004B70  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7479  004B72  EC4D  F02D         	call	_I2C_Master_Write	;wreg free
  7480                           
  7481                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  7482  004B76  0E00               	movlw	0
  7483  004B78  0100               	movlb	0	; () banked
  7484  004B7A  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  7485  004B7C  0E00               	movlw	0
  7486  004B7E  6F96               	movwf	loadRTC@i& (0+255),b
  7487  004B80                     l7583:
  7488                           
  7489                           ; BSR set to: 0
  7490  004B80  0100               	movlb	0	; () banked
  7491  004B82  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  7492  004B84  D008               	goto	l7587
  7493  004B86  0100               	movlb	0	; () banked
  7494  004B88  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  7495  004B8A  E11B               	bnz	l7593
  7496  004B8C  0E07               	movlw	7
  7497  004B8E  0100               	movlb	0	; () banked
  7498  004B90  5D96               	subwf	loadRTC@i& (0+255),w,b
  7499  004B92  B0D8               	btfsc	status,0,c
  7500  004B94  D016               	goto	l7593
  7501  004B96                     l7587:
  7502                           
  7503                           ; BSR set to: 0
  7504                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  7505  004B96  0E1C               	movlw	low _time
  7506  004B98  0100               	movlb	0	; () banked
  7507  004B9A  2596               	addwf	loadRTC@i& (0+255),w,b
  7508  004B9C  6ED9               	movwf	fsr2l,c
  7509  004B9E  0E01               	movlw	high _time
  7510  004BA0  0100               	movlb	0	; () banked
  7511  004BA2  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  7512  004BA4  6EDA               	movwf	fsr2h,c
  7513  004BA6  50DF               	movf	indf2,w,c
  7514  004BA8  0100               	movlb	0	; () banked
  7515  004BAA  6F95               	movwf	??_loadRTC& (0+255),b
  7516  004BAC  0100               	movlb	0	; () banked
  7517  004BAE  5195               	movf	??_loadRTC& (0+255),w,b
  7518  004BB0  0100               	movlb	0	; () banked
  7519  004BB2  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7520  004BB4  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  7521  004BB6  EC4D  F02D         	call	_I2C_Master_Write	;wreg free
  7522  004BBA  0100               	movlb	0	; () banked
  7523  004BBC  4B96               	infsnz	loadRTC@i& (0+255),f,b
  7524  004BBE  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  7525  004BC0  D7DF               	goto	l7583
  7526  004BC2                     l7593:
  7527                           
  7528                           ; BSR set to: 0
  7529                           ;RTC.c: 39: }
  7530                           ;RTC.c: 40: I2C_Master_Stop();
  7531  004BC2  EC5B  F02D         	call	_I2C_Master_Stop	;wreg free
  7532                           
  7533                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  7534  004BC6  8EF2               	bsf	intcon,7,c	;volatile
  7535  004BC8  0012               	return		;funcret
  7536  004BCA                     __end_of_loadRTC:
  7537                           	opt stack 0
  7538                           tblptru	equ	0xFF8
  7539                           tblptrh	equ	0xFF7
  7540                           tblptrl	equ	0xFF6
  7541                           tablat	equ	0xFF5
  7542                           prodh	equ	0xFF4
  7543                           prodl	equ	0xFF3
  7544                           intcon	equ	0xFF2
  7545                           intcon2	equ	0xFF1
  7546                           intcon3	equ	0xFF0
  7547                           postinc0	equ	0xFEE
  7548                           wreg	equ	0xFE8
  7549                           postdec1	equ	0xFE5
  7550                           fsr1l	equ	0xFE1
  7551                           indf2	equ	0xFDF
  7552                           postinc2	equ	0xFDE
  7553                           postdec2	equ	0xFDD
  7554                           fsr2h	equ	0xFDA
  7555                           fsr2l	equ	0xFD9
  7556                           status	equ	0xFD8
  7557                           
  7558 ;; *************** function _I2C_Master_Init *****************
  7559 ;; Defined at:
  7560 ;;		line 15 in file "I2C.c"
  7561 ;; Parameters:    Size  Location     Type
  7562 ;;  c               4   13[BANK0 ] const unsigned long 
  7563 ;; Auto vars:     Size  Location     Type
  7564 ;;		None
  7565 ;; Return value:  Size  Location     Type
  7566 ;;                  1    wreg      void 
  7567 ;; Registers used:
  7568 ;;		wreg, status,2, status,0, cstack
  7569 ;; Tracked objects:
  7570 ;;		On entry : 0/0
  7571 ;;		On exit  : 0/0
  7572 ;;		Unchanged: 0/0
  7573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7574 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7576 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7577 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7578 ;;Total ram usage:        8 bytes
  7579 ;; Hardware stack levels used:    1
  7580 ;; Hardware stack levels required when called:    8
  7581 ;; This function calls:
  7582 ;;		___lldiv
  7583 ;; This function is called by:
  7584 ;;		_main
  7585 ;;		_loadRTC
  7586 ;; This function uses a non-reentrant model
  7587 ;;
  7588                           
  7589                           	psect	text19
  7590  0050C0                     __ptext19:
  7591                           	opt stack 0
  7592  0050C0                     _I2C_Master_Init:
  7593                           	opt stack 20
  7594                           
  7595                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  7596                           
  7597                           ;incstack = 0
  7598  0050C0  0E00               	movlw	0
  7599  0050C2  6EC7               	movwf	4039,c	;volatile
  7600                           
  7601                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  7602  0050C4  0E28               	movlw	40
  7603  0050C6  6EC6               	movwf	4038,c	;volatile
  7604                           
  7605                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  7606  0050C8  0E00               	movlw	0
  7607  0050CA  6EC5               	movwf	4037,c	;volatile
  7608                           
  7609                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  7610  0050CC  0E00               	movlw	0
  7611  0050CE  0100               	movlb	0	; () banked
  7612  0050D0  6F80               	movwf	___lldiv@dividend& (0+255),b
  7613  0050D2  0E48               	movlw	72
  7614  0050D4  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  7615  0050D6  0EE8               	movlw	232
  7616  0050D8  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  7617  0050DA  0E01               	movlw	1
  7618  0050DC  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  7619  0050DE  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  7620  0050E2  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  7621  0050E6  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  7622  0050EA  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  7623  0050EE  0E02               	movlw	2
  7624  0050F0                     u5845:
  7625  0050F0  90D8               	bcf	status,0,c
  7626  0050F2  0100               	movlb	0	; () banked
  7627  0050F4  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  7628  0050F6  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  7629  0050F8  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  7630  0050FA  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  7631  0050FC  2EE8               	decfsz	wreg,f,c
  7632  0050FE  D7F8               	goto	u5845
  7633  005100  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  7634  005104  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  7635  005108  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  7636  00510C  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  7637  005110  EC9B  F024         	call	___lldiv	;wreg free
  7638  005114  0100               	movlb	0	; () banked
  7639  005116  0580               	decf	?___lldiv& (0+255),w,b
  7640  005118  6EC8               	movwf	4040,c	;volatile
  7641                           
  7642                           ; BSR set to: 0
  7643                           ;I2C.c: 22: TRISC3 = 1;
  7644  00511A  8694               	bsf	3988,3,c	;volatile
  7645                           
  7646                           ; BSR set to: 0
  7647                           ;I2C.c: 23: TRISC4 = 1;
  7648  00511C  8894               	bsf	3988,4,c	;volatile
  7649                           
  7650                           ; BSR set to: 0
  7651  00511E  0012               	return		;funcret
  7652  005120                     __end_of_I2C_Master_Init:
  7653                           	opt stack 0
  7654                           tblptru	equ	0xFF8
  7655                           tblptrh	equ	0xFF7
  7656                           tblptrl	equ	0xFF6
  7657                           tablat	equ	0xFF5
  7658                           prodh	equ	0xFF4
  7659                           prodl	equ	0xFF3
  7660                           intcon	equ	0xFF2
  7661                           intcon2	equ	0xFF1
  7662                           intcon3	equ	0xFF0
  7663                           postinc0	equ	0xFEE
  7664                           wreg	equ	0xFE8
  7665                           postdec1	equ	0xFE5
  7666                           fsr1l	equ	0xFE1
  7667                           indf2	equ	0xFDF
  7668                           postinc2	equ	0xFDE
  7669                           postdec2	equ	0xFDD
  7670                           fsr2h	equ	0xFDA
  7671                           fsr2l	equ	0xFD9
  7672                           status	equ	0xFD8
  7673                           
  7674 ;; *************** function ___lldiv *****************
  7675 ;; Defined at:
  7676 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  7677 ;; Parameters:    Size  Location     Type
  7678 ;;  dividend        4    0[BANK0 ] unsigned long 
  7679 ;;  divisor         4    4[BANK0 ] unsigned long 
  7680 ;; Auto vars:     Size  Location     Type
  7681 ;;  quotient        4    8[BANK0 ] unsigned long 
  7682 ;;  counter         1   12[BANK0 ] unsigned char 
  7683 ;; Return value:  Size  Location     Type
  7684 ;;                  4    0[BANK0 ] unsigned long 
  7685 ;; Registers used:
  7686 ;;		wreg, status,2, status,0
  7687 ;; Tracked objects:
  7688 ;;		On entry : 0/0
  7689 ;;		On exit  : 0/0
  7690 ;;		Unchanged: 0/0
  7691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7692 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7693 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7695 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7696 ;;Total ram usage:       13 bytes
  7697 ;; Hardware stack levels used:    1
  7698 ;; Hardware stack levels required when called:    7
  7699 ;; This function calls:
  7700 ;;		Nothing
  7701 ;; This function is called by:
  7702 ;;		_I2C_Master_Init
  7703 ;; This function uses a non-reentrant model
  7704 ;;
  7705                           
  7706                           	psect	text20
  7707  004936                     __ptext20:
  7708                           	opt stack 0
  7709  004936                     ___lldiv:
  7710                           	opt stack 20
  7711                           
  7712                           ; BSR set to: 0
  7713                           ;incstack = 0
  7714  004936  0E00               	movlw	0
  7715  004938  0100               	movlb	0	; () banked
  7716  00493A  6F88               	movwf	___lldiv@quotient& (0+255),b
  7717  00493C  0E00               	movlw	0
  7718  00493E  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  7719  004940  0E00               	movlw	0
  7720  004942  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  7721  004944  0E00               	movlw	0
  7722  004946  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  7723                           
  7724                           ; BSR set to: 0
  7725  004948  0100               	movlb	0	; () banked
  7726  00494A  5184               	movf	___lldiv@divisor& (0+255),w,b
  7727  00494C  0100               	movlb	0	; () banked
  7728  00494E  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7729  004950  0100               	movlb	0	; () banked
  7730  004952  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7731  004954  0100               	movlb	0	; () banked
  7732  004956  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7733  004958  B4D8               	btfsc	status,2,c
  7734  00495A  D042               	goto	l1919
  7735                           
  7736                           ; BSR set to: 0
  7737  00495C  0E01               	movlw	1
  7738  00495E  0100               	movlb	0	; () banked
  7739  004960  6F8C               	movwf	___lldiv@counter& (0+255),b
  7740  004962  D008               	goto	l6907
  7741  004964                     l6905:
  7742                           
  7743                           ; BSR set to: 0
  7744  004964  0100               	movlb	0	; () banked
  7745  004966  90D8               	bcf	status,0,c
  7746  004968  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  7747  00496A  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7748  00496C  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7749  00496E  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7750  004970  0100               	movlb	0	; () banked
  7751  004972  2B8C               	incf	___lldiv@counter& (0+255),f,b
  7752  004974                     l6907:
  7753                           
  7754                           ; BSR set to: 0
  7755  004974  0100               	movlb	0	; () banked
  7756  004976  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7757  004978  D7F5               	goto	l6905
  7758  00497A                     l6909:
  7759                           
  7760                           ; BSR set to: 0
  7761  00497A  0100               	movlb	0	; () banked
  7762  00497C  90D8               	bcf	status,0,c
  7763  00497E  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  7764  004980  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7765  004982  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7766  004984  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7767                           
  7768                           ; BSR set to: 0
  7769  004986  0100               	movlb	0	; () banked
  7770  004988  5184               	movf	___lldiv@divisor& (0+255),w,b
  7771  00498A  0100               	movlb	0	; () banked
  7772  00498C  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  7773  00498E  0100               	movlb	0	; () banked
  7774  004990  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7775  004992  0100               	movlb	0	; () banked
  7776  004994  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7777  004996  0100               	movlb	0	; () banked
  7778  004998  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7779  00499A  0100               	movlb	0	; () banked
  7780  00499C  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7781  00499E  0100               	movlb	0	; () banked
  7782  0049A0  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7783  0049A2  0100               	movlb	0	; () banked
  7784  0049A4  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7785  0049A6  A0D8               	btfss	status,0,c
  7786  0049A8  D012               	goto	l6917
  7787                           
  7788                           ; BSR set to: 0
  7789  0049AA  0100               	movlb	0	; () banked
  7790  0049AC  5184               	movf	___lldiv@divisor& (0+255),w,b
  7791  0049AE  0100               	movlb	0	; () banked
  7792  0049B0  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  7793  0049B2  0100               	movlb	0	; () banked
  7794  0049B4  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7795  0049B6  0100               	movlb	0	; () banked
  7796  0049B8  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7797  0049BA  0100               	movlb	0	; () banked
  7798  0049BC  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7799  0049BE  0100               	movlb	0	; () banked
  7800  0049C0  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7801  0049C2  0100               	movlb	0	; () banked
  7802  0049C4  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7803  0049C6  0100               	movlb	0	; () banked
  7804  0049C8  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7805                           
  7806                           ; BSR set to: 0
  7807  0049CA  0100               	movlb	0	; () banked
  7808  0049CC  8188               	bsf	___lldiv@quotient& (0+255),0,b
  7809  0049CE                     l6917:
  7810                           
  7811                           ; BSR set to: 0
  7812  0049CE  0100               	movlb	0	; () banked
  7813  0049D0  90D8               	bcf	status,0,c
  7814  0049D2  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7815  0049D4  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7816  0049D6  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7817  0049D8  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  7818                           
  7819                           ; BSR set to: 0
  7820  0049DA  0100               	movlb	0	; () banked
  7821  0049DC  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  7822  0049DE  D7CD               	goto	l6909
  7823  0049E0                     l1919:
  7824                           
  7825                           ; BSR set to: 0
  7826  0049E0  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7827  0049E4  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7828  0049E8  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7829  0049EC  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7830                           
  7831                           ; BSR set to: 0
  7832  0049F0  0012               	return		;funcret
  7833  0049F2                     __end_of___lldiv:
  7834                           	opt stack 0
  7835                           tblptru	equ	0xFF8
  7836                           tblptrh	equ	0xFF7
  7837                           tblptrl	equ	0xFF6
  7838                           tablat	equ	0xFF5
  7839                           prodh	equ	0xFF4
  7840                           prodl	equ	0xFF3
  7841                           intcon	equ	0xFF2
  7842                           intcon2	equ	0xFF1
  7843                           intcon3	equ	0xFF0
  7844                           postinc0	equ	0xFEE
  7845                           wreg	equ	0xFE8
  7846                           postdec1	equ	0xFE5
  7847                           fsr1l	equ	0xFE1
  7848                           indf2	equ	0xFDF
  7849                           postinc2	equ	0xFDE
  7850                           postdec2	equ	0xFDD
  7851                           fsr2h	equ	0xFDA
  7852                           fsr2l	equ	0xFD9
  7853                           status	equ	0xFD8
  7854                           
  7855 ;; *************** function _change_state_to_menu_start *****************
  7856 ;; Defined at:
  7857 ;;		line 477 in file "UI.c"
  7858 ;; Parameters:    Size  Location     Type
  7859 ;;		None
  7860 ;; Auto vars:     Size  Location     Type
  7861 ;;		None
  7862 ;; Return value:  Size  Location     Type
  7863 ;;                  1    wreg      void 
  7864 ;; Registers used:
  7865 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7866 ;; Tracked objects:
  7867 ;;		On entry : 0/0
  7868 ;;		On exit  : 0/0
  7869 ;;		Unchanged: 0/0
  7870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7874 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7875 ;;Total ram usage:        0 bytes
  7876 ;; Hardware stack levels used:    1
  7877 ;; Hardware stack levels required when called:   11
  7878 ;; This function calls:
  7879 ;;		_lcdInst
  7880 ;;		_printRTC
  7881 ;;		_printf
  7882 ;; This function is called by:
  7883 ;;		_initUI
  7884 ;; This function uses a non-reentrant model
  7885 ;;
  7886                           
  7887                           	psect	text21
  7888  005838                     __ptext21:
  7889                           	opt stack 0
  7890  005838                     _change_state_to_menu_start:
  7891                           	opt stack 18
  7892                           
  7893                           ;UI.c: 478: cur_state = 0;
  7894                           
  7895                           ; BSR set to: 0
  7896                           ;incstack = 0
  7897  005838  0E00               	movlw	0
  7898  00583A  0100               	movlb	0	; () banked
  7899  00583C  6FE7               	movwf	(_cur_state+1)& (0+255),b
  7900  00583E  0E00               	movlw	0
  7901  005840  6FE6               	movwf	_cur_state& (0+255),b
  7902                           
  7903                           ; BSR set to: 0
  7904                           ;UI.c: 480: lcdInst(0b10000000);;
  7905  005842  0E80               	movlw	128
  7906  005844  EC39  F02D         	call	_lcdInst
  7907                           
  7908                           ;UI.c: 481: printRTC();
  7909  005848  EC63  F016         	call	_printRTC	;wreg free
  7910                           
  7911                           ;UI.c: 482: lcdInst(0b11000000);;
  7912  00584C  0EC0               	movlw	192
  7913  00584E  EC39  F02D         	call	_lcdInst
  7914                           
  7915                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  7916  005852  0EEA               	movlw	low STR_30
  7917  005854  0100               	movlb	0	; () banked
  7918  005856  6F8E               	movwf	printf@f& (0+255),b
  7919  005858  0EFD               	movlw	high STR_30
  7920  00585A  0100               	movlb	0	; () banked
  7921  00585C  6F8F               	movwf	(printf@f+1)& (0+255),b
  7922  00585E  EC8F  F00D         	call	_printf	;wreg free
  7923  005862  0012               	return		;funcret
  7924  005864                     __end_of_change_state_to_menu_start:
  7925                           	opt stack 0
  7926                           tblptru	equ	0xFF8
  7927                           tblptrh	equ	0xFF7
  7928                           tblptrl	equ	0xFF6
  7929                           tablat	equ	0xFF5
  7930                           prodh	equ	0xFF4
  7931                           prodl	equ	0xFF3
  7932                           intcon	equ	0xFF2
  7933                           intcon2	equ	0xFF1
  7934                           intcon3	equ	0xFF0
  7935                           postinc0	equ	0xFEE
  7936                           wreg	equ	0xFE8
  7937                           postdec1	equ	0xFE5
  7938                           fsr1l	equ	0xFE1
  7939                           indf2	equ	0xFDF
  7940                           postinc2	equ	0xFDE
  7941                           postdec2	equ	0xFDD
  7942                           fsr2h	equ	0xFDA
  7943                           fsr2l	equ	0xFD9
  7944                           status	equ	0xFD8
  7945                           
  7946 ;; *************** function _initTime *****************
  7947 ;; Defined at:
  7948 ;;		line 17 in file "RTC.c"
  7949 ;; Parameters:    Size  Location     Type
  7950 ;;  s               1    wreg     unsigned char 
  7951 ;;  m               1    0[BANK0 ] unsigned char 
  7952 ;;  h               1    1[BANK0 ] unsigned char 
  7953 ;;  w               1    2[BANK0 ] unsigned char 
  7954 ;;  DD              1    3[BANK0 ] unsigned char 
  7955 ;;  MM              1    4[BANK0 ] unsigned char 
  7956 ;;  YY              1    5[BANK0 ] unsigned char 
  7957 ;; Auto vars:     Size  Location     Type
  7958 ;;  s               1    6[BANK0 ] unsigned char 
  7959 ;; Return value:  Size  Location     Type
  7960 ;;                  1    wreg      void 
  7961 ;; Registers used:
  7962 ;;		wreg
  7963 ;; Tracked objects:
  7964 ;;		On entry : 0/0
  7965 ;;		On exit  : 0/0
  7966 ;;		Unchanged: 0/0
  7967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7968 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7969 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7971 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7972 ;;Total ram usage:        7 bytes
  7973 ;; Hardware stack levels used:    1
  7974 ;; Hardware stack levels required when called:    7
  7975 ;; This function calls:
  7976 ;;		Nothing
  7977 ;; This function is called by:
  7978 ;;		_main
  7979 ;; This function uses a non-reentrant model
  7980 ;;
  7981                           
  7982                           	psect	text22
  7983  00599C                     __ptext22:
  7984                           	opt stack 0
  7985  00599C                     _initTime:
  7986                           	opt stack 23
  7987                           
  7988                           ;incstack = 0
  7989                           ;initTime@s stored from wreg
  7990  00599C  0100               	movlb	0	; () banked
  7991  00599E  6F86               	movwf	initTime@s& (0+255),b
  7992                           
  7993                           ;RTC.c: 19: time[0] = s;
  7994  0059A0  C086  F11C         	movff	initTime@s,_time
  7995                           
  7996                           ;RTC.c: 20: time[1] = m;
  7997  0059A4  C080  F11D         	movff	initTime@m,_time+1
  7998                           
  7999                           ;RTC.c: 21: time[2] = h;
  8000  0059A8  C081  F11E         	movff	initTime@h,_time+2
  8001                           
  8002                           ;RTC.c: 22: time[3] = w;
  8003  0059AC  C082  F11F         	movff	initTime@w,_time+3
  8004                           
  8005                           ;RTC.c: 23: time[4] = DD;
  8006  0059B0  C083  F120         	movff	initTime@DD,_time+4
  8007                           
  8008                           ;RTC.c: 24: time[5] = MM;
  8009  0059B4  C084  F121         	movff	initTime@MM,_time+5
  8010                           
  8011                           ;RTC.c: 25: time[6] = YY;
  8012  0059B8  C085  F122         	movff	initTime@YY,_time+6
  8013  0059BC  0012               	return		;funcret
  8014  0059BE                     __end_of_initTime:
  8015                           	opt stack 0
  8016                           tblptru	equ	0xFF8
  8017                           tblptrh	equ	0xFF7
  8018                           tblptrl	equ	0xFF6
  8019                           tablat	equ	0xFF5
  8020                           prodh	equ	0xFF4
  8021                           prodl	equ	0xFF3
  8022                           intcon	equ	0xFF2
  8023                           intcon2	equ	0xFF1
  8024                           intcon3	equ	0xFF0
  8025                           postinc0	equ	0xFEE
  8026                           wreg	equ	0xFE8
  8027                           postdec1	equ	0xFE5
  8028                           fsr1l	equ	0xFE1
  8029                           indf2	equ	0xFDF
  8030                           postinc2	equ	0xFDE
  8031                           postdec2	equ	0xFDD
  8032                           fsr2h	equ	0xFDA
  8033                           fsr2l	equ	0xFD9
  8034                           status	equ	0xFD8
  8035                           
  8036 ;; *************** function _initLCD *****************
  8037 ;; Defined at:
  8038 ;;		line 50 in file "lcd.c"
  8039 ;; Parameters:    Size  Location     Type
  8040 ;;		None
  8041 ;; Auto vars:     Size  Location     Type
  8042 ;;		None
  8043 ;; Return value:  Size  Location     Type
  8044 ;;                  1    wreg      void 
  8045 ;; Registers used:
  8046 ;;		wreg, status,2, status,0, cstack
  8047 ;; Tracked objects:
  8048 ;;		On entry : 0/0
  8049 ;;		On exit  : 0/0
  8050 ;;		Unchanged: 0/0
  8051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8054 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8055 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8056 ;;Total ram usage:        1 bytes
  8057 ;; Hardware stack levels used:    1
  8058 ;; Hardware stack levels required when called:    9
  8059 ;; This function calls:
  8060 ;;		_lcdInst
  8061 ;; This function is called by:
  8062 ;;		_main
  8063 ;; This function uses a non-reentrant model
  8064 ;;
  8065                           
  8066                           	psect	text23
  8067  0053B6                     __ptext23:
  8068                           	opt stack 0
  8069  0053B6                     _initLCD:
  8070                           	opt stack 21
  8071                           
  8072                           ;lcd.c: 51: _delay((unsigned long)((15)*(32000000/4000.0)));
  8073                           
  8074                           ;incstack = 0
  8075  0053B6  0E9C               	movlw	156
  8076  0053B8  0100               	movlb	0	; () banked
  8077  0053BA  6F83               	movwf	??_initLCD& (0+255),b
  8078  0053BC  0ED7               	movlw	215
  8079  0053BE                     u9967:
  8080  0053BE  2EE8               	decfsz	wreg,f,c
  8081  0053C0  D7FE               	bra	u9967
  8082  0053C2  2F83               	decfsz	??_initLCD& (0+255),f,b
  8083  0053C4  D7FC               	bra	u9967
  8084                           
  8085                           ;lcd.c: 52: lcdInst(0b00110011);
  8086  0053C6  0E33               	movlw	51
  8087  0053C8  EC39  F02D         	call	_lcdInst
  8088                           
  8089                           ;lcd.c: 53: lcdInst(0b00110010);
  8090  0053CC  0E32               	movlw	50
  8091  0053CE  EC39  F02D         	call	_lcdInst
  8092                           
  8093                           ;lcd.c: 55: lcdInst(0b00101000);
  8094  0053D2  0E28               	movlw	40
  8095  0053D4  EC39  F02D         	call	_lcdInst
  8096                           
  8097                           ;lcd.c: 56: lcdInst(0b00001100);
  8098  0053D8  0E0C               	movlw	12
  8099  0053DA  EC39  F02D         	call	_lcdInst
  8100                           
  8101                           ;lcd.c: 57: lcdInst(0b00000110);
  8102  0053DE  0E06               	movlw	6
  8103  0053E0  EC39  F02D         	call	_lcdInst
  8104                           
  8105                           ;lcd.c: 58: lcdInst(0b00000001);
  8106  0053E4  0E01               	movlw	1
  8107  0053E6  EC39  F02D         	call	_lcdInst
  8108                           
  8109                           ;lcd.c: 59: _delay((unsigned long)((15)*(32000000/4000.0)));
  8110  0053EA  0E9C               	movlw	156
  8111  0053EC  0100               	movlb	0	; () banked
  8112  0053EE  6F83               	movwf	??_initLCD& (0+255),b
  8113  0053F0  0ED7               	movlw	215
  8114  0053F2                     u9977:
  8115  0053F2  2EE8               	decfsz	wreg,f,c
  8116  0053F4  D7FE               	bra	u9977
  8117  0053F6  2F83               	decfsz	??_initLCD& (0+255),f,b
  8118  0053F8  D7FC               	bra	u9977
  8119  0053FA  0012               	return		;funcret
  8120  0053FC                     __end_of_initLCD:
  8121                           	opt stack 0
  8122                           tblptru	equ	0xFF8
  8123                           tblptrh	equ	0xFF7
  8124                           tblptrl	equ	0xFF6
  8125                           tablat	equ	0xFF5
  8126                           prodh	equ	0xFF4
  8127                           prodl	equ	0xFF3
  8128                           intcon	equ	0xFF2
  8129                           intcon2	equ	0xFF1
  8130                           intcon3	equ	0xFF0
  8131                           postinc0	equ	0xFEE
  8132                           wreg	equ	0xFE8
  8133                           postdec1	equ	0xFE5
  8134                           fsr1l	equ	0xFE1
  8135                           indf2	equ	0xFDF
  8136                           postinc2	equ	0xFDE
  8137                           postdec2	equ	0xFDD
  8138                           fsr2h	equ	0xFDA
  8139                           fsr2l	equ	0xFD9
  8140                           status	equ	0xFD8
  8141                           
  8142 ;; *************** function _initEEPROM *****************
  8143 ;; Defined at:
  8144 ;;		line 32 in file "EEPROM.c"
  8145 ;; Parameters:    Size  Location     Type
  8146 ;;		None
  8147 ;; Auto vars:     Size  Location     Type
  8148 ;;		None
  8149 ;; Return value:  Size  Location     Type
  8150 ;;                  1    wreg      void 
  8151 ;; Registers used:
  8152 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8153 ;; Tracked objects:
  8154 ;;		On entry : 0/0
  8155 ;;		On exit  : 0/0
  8156 ;;		Unchanged: 0/0
  8157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8162 ;;Total ram usage:        0 bytes
  8163 ;; Hardware stack levels used:    1
  8164 ;; Hardware stack levels required when called:   11
  8165 ;; This function calls:
  8166 ;;		_EEPROM_write
  8167 ;; This function is called by:
  8168 ;;		_main
  8169 ;; This function uses a non-reentrant model
  8170 ;;
  8171                           
  8172                           	psect	text24
  8173  005A10                     __ptext24:
  8174                           	opt stack 0
  8175  005A10                     _initEEPROM:
  8176                           	opt stack 19
  8177                           
  8178                           ;EEPROM.c: 33: EEPROM_write(0, 0x01);
  8179                           
  8180                           ;incstack = 0
  8181  005A10  0E00               	movlw	0
  8182  005A12  0100               	movlb	0	; () banked
  8183  005A14  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  8184  005A16  0E00               	movlw	0
  8185  005A18  6FAB               	movwf	EEPROM_write@address& (0+255),b
  8186  005A1A  0E01               	movlw	1
  8187  005A1C  0100               	movlb	0	; () banked
  8188  005A1E  6FAD               	movwf	EEPROM_write@data& (0+255),b
  8189  005A20  ECBF  F021         	call	_EEPROM_write	;wreg free
  8190  005A24  0012               	return		;funcret
  8191  005A26                     __end_of_initEEPROM:
  8192                           	opt stack 0
  8193                           tblptru	equ	0xFF8
  8194                           tblptrh	equ	0xFF7
  8195                           tblptrl	equ	0xFF6
  8196                           tablat	equ	0xFF5
  8197                           prodh	equ	0xFF4
  8198                           prodl	equ	0xFF3
  8199                           intcon	equ	0xFF2
  8200                           intcon2	equ	0xFF1
  8201                           intcon3	equ	0xFF0
  8202                           postinc0	equ	0xFEE
  8203                           wreg	equ	0xFE8
  8204                           postdec1	equ	0xFE5
  8205                           fsr1l	equ	0xFE1
  8206                           indf2	equ	0xFDF
  8207                           postinc2	equ	0xFDE
  8208                           postdec2	equ	0xFDD
  8209                           fsr2h	equ	0xFDA
  8210                           fsr2l	equ	0xFD9
  8211                           status	equ	0xFD8
  8212                           
  8213 ;; *************** function _EEPROM_write *****************
  8214 ;; Defined at:
  8215 ;;		line 36 in file "EEPROM.c"
  8216 ;; Parameters:    Size  Location     Type
  8217 ;;  address         2   43[BANK0 ] unsigned short 
  8218 ;;  data            1   45[BANK0 ] unsigned char 
  8219 ;; Auto vars:     Size  Location     Type
  8220 ;;  i               1   48[BANK0 ] unsigned char 
  8221 ;;  i               1   47[BANK0 ] unsigned char 
  8222 ;; Return value:  Size  Location     Type
  8223 ;;                  1    wreg      void 
  8224 ;; Registers used:
  8225 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8226 ;; Tracked objects:
  8227 ;;		On entry : 0/0
  8228 ;;		On exit  : 0/0
  8229 ;;		Unchanged: 0/0
  8230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8231 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8232 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8233 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8234 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8235 ;;Total ram usage:        6 bytes
  8236 ;; Hardware stack levels used:    1
  8237 ;; Hardware stack levels required when called:   10
  8238 ;; This function calls:
  8239 ;;		_EEPROM_read
  8240 ;;		_lcdInst
  8241 ;;		_printf
  8242 ;; This function is called by:
  8243 ;;		_Loading
  8244 ;;		_initEEPROM
  8245 ;;		_logRun
  8246 ;; This function uses a non-reentrant model
  8247 ;;
  8248                           
  8249                           	psect	text25
  8250  00437E                     __ptext25:
  8251                           	opt stack 0
  8252  00437E                     _EEPROM_write:
  8253                           	opt stack 18
  8254                           
  8255                           ;EEPROM.c: 37: EECON1bits.WREN = 1;
  8256                           
  8257                           ;incstack = 0
  8258  00437E  84A6               	bsf	4006,2,c	;volatile
  8259                           
  8260                           ;EEPROM.c: 40: EEADRH = (unsigned char)(address >> 8);
  8261  004380  0100               	movlb	0	; () banked
  8262  004382  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  8263  004384  6EAA               	movwf	4010,c	;volatile
  8264                           
  8265                           ; BSR set to: 0
  8266                           ;EEPROM.c: 41: EEADR = (unsigned char)address;
  8267  004386  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  8268                           
  8269                           ; BSR set to: 0
  8270                           ;EEPROM.c: 43: EEDATA = data;
  8271  00438A  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  8272                           
  8273                           ; BSR set to: 0
  8274                           ;EEPROM.c: 44: EECON1bits.EEPGD = 0;
  8275  00438E  9EA6               	bcf	4006,7,c	;volatile
  8276                           
  8277                           ; BSR set to: 0
  8278                           ;EEPROM.c: 45: EECON1bits.CFGS = 0;
  8279  004390  9CA6               	bcf	4006,6,c	;volatile
  8280                           
  8281                           ; BSR set to: 0
  8282                           ;EEPROM.c: 47: (INTCONbits.GIE = 0);
  8283  004392  9EF2               	bcf	intcon,7,c	;volatile
  8284                           
  8285                           ;EEPROM.c: 49: EECON2 = 0x55;
  8286  004394  0E55               	movlw	85
  8287  004396  6EA7               	movwf	4007,c	;volatile
  8288                           
  8289                           ;EEPROM.c: 50: EECON2 = 0x0AA;
  8290  004398  0EAA               	movlw	170
  8291  00439A  6EA7               	movwf	4007,c	;volatile
  8292                           
  8293                           ; BSR set to: 0
  8294                           ;EEPROM.c: 51: EECON1bits.WR = 1;
  8295  00439C  82A6               	bsf	4006,1,c	;volatile
  8296                           
  8297                           ; BSR set to: 0
  8298                           ;EEPROM.c: 52: (INTCONbits.GIE = 1);
  8299  00439E  8EF2               	bsf	intcon,7,c	;volatile
  8300  0043A0                     l1126:
  8301  0043A0  A8A1               	btfss	4001,4,c	;volatile
  8302  0043A2  D7FE               	goto	l1126
  8303                           
  8304                           ;EEPROM.c: 57: PIR2bits.EEIF = 0;
  8305  0043A4  98A1               	bcf	4001,4,c	;volatile
  8306                           
  8307                           ;EEPROM.c: 58: EECON1bits.WREN = 0;
  8308  0043A6  94A6               	bcf	4006,2,c	;volatile
  8309                           
  8310                           ;EEPROM.c: 61: if(debug){
  8311  0043A8  0100               	movlb	0	; () banked
  8312  0043AA  51E8               	movf	_debug& (0+255),w,b
  8313  0043AC  0100               	movlb	0	; () banked
  8314  0043AE  11E9               	iorwf	(_debug+1)& (0+255),w,b
  8315  0043B0  B4D8               	btfsc	status,2,c
  8316  0043B2  0012               	return	
  8317                           
  8318                           ; BSR set to: 0
  8319                           ;EEPROM.c: 62: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8320  0043B4  0E01               	movlw	1
  8321  0043B6  EC39  F02D         	call	_lcdInst
  8322  0043BA  0E68               	movlw	104
  8323  0043BC  0100               	movlb	0	; () banked
  8324  0043BE  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8325  0043C0  0EE4               	movlw	228
  8326  0043C2                     u9987:
  8327  0043C2  2EE8               	decfsz	wreg,f,c
  8328  0043C4  D7FE               	bra	u9987
  8329  0043C6  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8330  0043C8  D7FC               	bra	u9987
  8331  0043CA  F000               	nop	
  8332                           
  8333                           ;EEPROM.c: 63: lcdInst(0b10000000);;
  8334  0043CC  0E80               	movlw	128
  8335  0043CE  EC39  F02D         	call	_lcdInst
  8336                           
  8337                           ;EEPROM.c: 64: if(EEPROM_read(address)==data){
  8338  0043D2  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  8339  0043D6  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  8340  0043DA  ECFC  F02C         	call	_EEPROM_read	;wreg free
  8341  0043DE  0100               	movlb	0	; () banked
  8342  0043E0  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  8343  0043E2  A4D8               	btfss	status,2,c
  8344  0043E4  D024               	goto	l7355
  8345                           
  8346                           ; BSR set to: 0
  8347                           ;EEPROM.c: 65: printf("(data: %u, addr: %u)", data, address);
  8348  0043E6  0EBE               	movlw	low STR_67
  8349  0043E8  0100               	movlb	0	; () banked
  8350  0043EA  6F8E               	movwf	printf@f& (0+255),b
  8351  0043EC  0EFA               	movlw	high STR_67
  8352  0043EE  0100               	movlb	0	; () banked
  8353  0043F0  6F8F               	movwf	(printf@f+1)& (0+255),b
  8354  0043F2  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  8355  0043F6  0100               	movlb	0	; () banked
  8356  0043F8  6B91               	clrf	(?_printf+3)& (0+255),b
  8357  0043FA  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  8358  0043FE  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  8359  004402  EC8F  F00D         	call	_printf	;wreg free
  8360                           
  8361                           ;EEPROM.c: 66: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  8362  004406  0E00               	movlw	0
  8363  004408  0100               	movlb	0	; () banked
  8364  00440A  6FAF               	movwf	EEPROM_write@i& (0+255),b
  8365  00440C                     l7347:
  8366                           
  8367                           ; BSR set to: 0
  8368  00440C  0E63               	movlw	99
  8369  00440E  0100               	movlb	0	; () banked
  8370  004410  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  8371  004412  D001               	goto	l7351
  8372  004414  0012               	return	
  8373  004416                     l7351:
  8374                           
  8375                           ; BSR set to: 0
  8376  004416  0E68               	movlw	104
  8377  004418  0100               	movlb	0	; () banked
  8378  00441A  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8379  00441C  0EE4               	movlw	228
  8380  00441E                     u9997:
  8381  00441E  2EE8               	decfsz	wreg,f,c
  8382  004420  D7FE               	bra	u9997
  8383  004422  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8384  004424  D7FC               	bra	u9997
  8385  004426  F000               	nop	
  8386  004428  0100               	movlb	0	; () banked
  8387  00442A  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  8388  00442C  D7EF               	goto	l7347
  8389  00442E                     l7355:
  8390                           
  8391                           ; BSR set to: 0
  8392                           ;EEPROM.c: 68: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  8393  00442E  0EBC               	movlw	low STR_68
  8394  004430  0100               	movlb	0	; () banked
  8395  004432  6F8E               	movwf	printf@f& (0+255),b
  8396  004434  0EFF               	movlw	high STR_68
  8397  004436  0100               	movlb	0	; () banked
  8398  004438  6F8F               	movwf	(printf@f+1)& (0+255),b
  8399  00443A  EC8F  F00D         	call	_printf	;wreg free
  8400  00443E  0E00               	movlw	0
  8401  004440  0100               	movlb	0	; () banked
  8402  004442  6FB0               	movwf	EEPROM_write@i_1407& (0+255),b
  8403  004444                     l7359:
  8404                           
  8405                           ; BSR set to: 0
  8406  004444  0E63               	movlw	99
  8407  004446  0100               	movlb	0	; () banked
  8408  004448  65B0               	cpfsgt	EEPROM_write@i_1407& (0+255),b
  8409  00444A  D001               	goto	l7363
  8410  00444C  0012               	return	
  8411  00444E                     l7363:
  8412                           
  8413                           ; BSR set to: 0
  8414  00444E  0E68               	movlw	104
  8415  004450  0100               	movlb	0	; () banked
  8416  004452  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8417  004454  0EE4               	movlw	228
  8418  004456                     u10007:
  8419  004456  2EE8               	decfsz	wreg,f,c
  8420  004458  D7FE               	bra	u10007
  8421  00445A  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8422  00445C  D7FC               	bra	u10007
  8423  00445E  F000               	nop	
  8424  004460  0100               	movlb	0	; () banked
  8425  004462  2BB0               	incf	EEPROM_write@i_1407& (0+255),f,b
  8426  004464  D7EF               	goto	l7359
  8427  004466                     __end_of_EEPROM_write:
  8428                           	opt stack 0
  8429                           tblptru	equ	0xFF8
  8430                           tblptrh	equ	0xFF7
  8431                           tblptrl	equ	0xFF6
  8432                           tablat	equ	0xFF5
  8433                           prodh	equ	0xFF4
  8434                           prodl	equ	0xFF3
  8435                           intcon	equ	0xFF2
  8436                           intcon2	equ	0xFF1
  8437                           intcon3	equ	0xFF0
  8438                           postinc0	equ	0xFEE
  8439                           wreg	equ	0xFE8
  8440                           postdec1	equ	0xFE5
  8441                           fsr1l	equ	0xFE1
  8442                           indf2	equ	0xFDF
  8443                           postinc2	equ	0xFDE
  8444                           postdec2	equ	0xFDD
  8445                           fsr2h	equ	0xFDA
  8446                           fsr2l	equ	0xFD9
  8447                           status	equ	0xFD8
  8448                           
  8449 ;; *************** function _EEPROM_read *****************
  8450 ;; Defined at:
  8451 ;;		line 72 in file "EEPROM.c"
  8452 ;; Parameters:    Size  Location     Type
  8453 ;;  address         2    0[BANK0 ] unsigned short 
  8454 ;; Auto vars:     Size  Location     Type
  8455 ;;		None
  8456 ;; Return value:  Size  Location     Type
  8457 ;;                  1    wreg      unsigned char 
  8458 ;; Registers used:
  8459 ;;		wreg, status,2
  8460 ;; Tracked objects:
  8461 ;;		On entry : 0/0
  8462 ;;		On exit  : 0/0
  8463 ;;		Unchanged: 0/0
  8464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8465 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8468 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8469 ;;Total ram usage:        2 bytes
  8470 ;; Hardware stack levels used:    1
  8471 ;; Hardware stack levels required when called:    7
  8472 ;; This function calls:
  8473 ;;		Nothing
  8474 ;; This function is called by:
  8475 ;;		_Loading
  8476 ;;		_EEPROM_write
  8477 ;;		_logRun
  8478 ;; This function uses a non-reentrant model
  8479 ;;
  8480                           
  8481                           	psect	text26
  8482  0059F8                     __ptext26:
  8483                           	opt stack 0
  8484  0059F8                     _EEPROM_read:
  8485                           	opt stack 20
  8486                           
  8487                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
  8488                           
  8489                           ; BSR set to: 0
  8490                           ;incstack = 0
  8491  0059F8  0100               	movlb	0	; () banked
  8492  0059FA  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  8493  0059FC  6EAA               	movwf	4010,c	;volatile
  8494                           
  8495                           ; BSR set to: 0
  8496                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
  8497  0059FE  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  8498                           
  8499                           ; BSR set to: 0
  8500                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
  8501  005A02  9EA6               	bcf	4006,7,c	;volatile
  8502                           
  8503                           ; BSR set to: 0
  8504                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
  8505  005A04  9CA6               	bcf	4006,6,c	;volatile
  8506                           
  8507                           ; BSR set to: 0
  8508                           ;EEPROM.c: 79: EECON1bits.RD = 1;
  8509  005A06  80A6               	bsf	4006,0,c	;volatile
  8510  005A08                     l1139:
  8511  005A08  B0A6               	btfsc	4006,0,c	;volatile
  8512  005A0A  D7FE               	goto	l1139
  8513                           
  8514                           ;EEPROM.c: 85: return EEDATA;
  8515  005A0C  50A8               	movf	4008,w,c	;volatile
  8516  005A0E  0012               	return	
  8517  005A10                     __end_of_EEPROM_read:
  8518                           	opt stack 0
  8519                           tblptru	equ	0xFF8
  8520                           tblptrh	equ	0xFF7
  8521                           tblptrl	equ	0xFF6
  8522                           tablat	equ	0xFF5
  8523                           prodh	equ	0xFF4
  8524                           prodl	equ	0xFF3
  8525                           intcon	equ	0xFF2
  8526                           intcon2	equ	0xFF1
  8527                           intcon3	equ	0xFF0
  8528                           postinc0	equ	0xFEE
  8529                           wreg	equ	0xFE8
  8530                           postdec1	equ	0xFE5
  8531                           fsr1l	equ	0xFE1
  8532                           indf2	equ	0xFDF
  8533                           postinc2	equ	0xFDE
  8534                           postdec2	equ	0xFDD
  8535                           fsr2h	equ	0xFDA
  8536                           fsr2l	equ	0xFD9
  8537                           status	equ	0xFD8
  8538                           
  8539 ;; *************** function _UI *****************
  8540 ;; Defined at:
  8541 ;;		line 76 in file "UI.c"
  8542 ;; Parameters:    Size  Location     Type
  8543 ;;		None
  8544 ;; Auto vars:     Size  Location     Type
  8545 ;;  i               1   73[BANK0 ] unsigned char 
  8546 ;;  i               1   85[BANK0 ] unsigned char 
  8547 ;;  i               1   84[BANK0 ] unsigned char 
  8548 ;;  i               1   83[BANK0 ] unsigned char 
  8549 ;;  i               1   82[BANK0 ] unsigned char 
  8550 ;;  i               1   81[BANK0 ] unsigned char 
  8551 ;;  i               1   80[BANK0 ] unsigned char 
  8552 ;;  i               1   79[BANK0 ] unsigned char 
  8553 ;;  i               1   78[BANK0 ] unsigned char 
  8554 ;;  i               1   77[BANK0 ] unsigned char 
  8555 ;;  i               1   76[BANK0 ] unsigned char 
  8556 ;;  i               1   75[BANK0 ] unsigned char 
  8557 ;;  i               1   74[BANK0 ] unsigned char 
  8558 ;;  month           4   86[BANK0 ] unsigned char [4]
  8559 ;;  i               1   72[BANK0 ] unsigned char 
  8560 ;; Return value:  Size  Location     Type
  8561 ;;                  1    wreg      void 
  8562 ;; Registers used:
  8563 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8564 ;; Tracked objects:
  8565 ;;		On entry : 0/0
  8566 ;;		On exit  : 0/0
  8567 ;;		Unchanged: 0/0
  8568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8570 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8571 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8572 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8573 ;;Total ram usage:       22 bytes
  8574 ;; Hardware stack levels used:    1
  8575 ;; Hardware stack levels required when called:   11
  8576 ;; This function calls:
  8577 ;;		___awdiv
  8578 ;;		___awmod
  8579 ;;		_change_state_to_menu_12
  8580 ;;		_change_state_to_menu_22
  8581 ;;		_lcdInst
  8582 ;;		_printRTC
  8583 ;;		_printf
  8584 ;;		_strcpy
  8585 ;; This function is called by:
  8586 ;;		_main
  8587 ;; This function uses a non-reentrant model
  8588 ;;
  8589                           
  8590                           	psect	text27
  8591  000012                     __ptext27:
  8592                           	opt stack 0
  8593  000012                     _UI:
  8594                           	opt stack 19
  8595                           
  8596                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  8597                           
  8598                           ;incstack = 0
  8599  000012  0E02               	movlw	2
  8600  000014  0100               	movlb	0	; () banked
  8601  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  8602  000018  A4D8               	btfss	status,2,c
  8603  00001A  D086               	goto	l9249
  8604                           
  8605                           ; BSR set to: 0
  8606                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8607  00001C  0E01               	movlw	1
  8608  00001E  EC39  F02D         	call	_lcdInst
  8609  000022  0E68               	movlw	104
  8610  000024  0100               	movlb	0	; () banked
  8611  000026  6FC4               	movwf	??_UI& (0+255),b
  8612  000028  0EE4               	movlw	228
  8613  00002A                     u10017:
  8614  00002A  2EE8               	decfsz	wreg,f,c
  8615  00002C  D7FE               	bra	u10017
  8616  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  8617  000030  D7FC               	bra	u10017
  8618  000032  F000               	nop	
  8619                           
  8620                           ;UI.c: 79: lcdInst(0b10000000);;
  8621  000034  0E80               	movlw	128
  8622  000036  EC39  F02D         	call	_lcdInst
  8623                           
  8624                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  8625  00003A  0E52               	movlw	low STR_1
  8626  00003C  0100               	movlb	0	; () banked
  8627  00003E  6F8E               	movwf	printf@f& (0+255),b
  8628  000040  0EFB               	movlw	high STR_1
  8629  000042  0100               	movlb	0	; () banked
  8630  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  8631  000046  0E01               	movlw	1
  8632  000048  0100               	movlb	0	; () banked
  8633  00004A  25FD               	addwf	_sel& (0+255),w,b
  8634  00004C  0100               	movlb	0	; () banked
  8635  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  8636  000050  0100               	movlb	0	; () banked
  8637  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  8638  000054  0E00               	movlw	0
  8639  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  8640  000058  EC8F  F00D         	call	_printf	;wreg free
  8641                           
  8642                           ;UI.c: 81: lcdInst(0b11000000);;
  8643  00005C  0EC0               	movlw	192
  8644  00005E  EC39  F02D         	call	_lcdInst
  8645                           
  8646                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  8647  000062  0E0E               	movlw	14
  8648  000064  0100               	movlb	0	; () banked
  8649  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8650  000068  0E10               	movlw	16
  8651  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  8652  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  8653  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  8654  000074  EC4E  F025         	call	___awmod	;wreg free
  8655  000078  C080  F0C6         	movff	?___awmod,_UI$2433
  8656  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2433+1
  8657                           
  8658                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  8659  000080  0E49               	movlw	low STR_2
  8660  000082  0100               	movlb	0	; () banked
  8661  000084  6F8E               	movwf	printf@f& (0+255),b
  8662  000086  0EFF               	movlw	high STR_2
  8663  000088  0100               	movlb	0	; () banked
  8664  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8665  00008C  0E0E               	movlw	14
  8666  00008E  0100               	movlb	0	; () banked
  8667  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8668  000092  0E10               	movlw	16
  8669  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  8670  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  8671  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  8672  00009E  EC4E  F025         	call	___awmod	;wreg free
  8673  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  8674  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8675  0000AA  0E00               	movlw	0
  8676  0000AC  0100               	movlb	0	; () banked
  8677  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8678  0000B0  0E3C               	movlw	60
  8679  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  8680  0000B4  EC3C  F024         	call	___awdiv	;wreg free
  8681  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  8682  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  8683  0000C0  C0C6  F080         	movff	_UI$2433,___awmod@dividend
  8684  0000C4  C0C7  F081         	movff	_UI$2433+1,___awmod@dividend+1
  8685  0000C8  0E00               	movlw	0
  8686  0000CA  0100               	movlb	0	; () banked
  8687  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8688  0000CE  0E3C               	movlw	60
  8689  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  8690  0000D2  EC4E  F025         	call	___awmod	;wreg free
  8691  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  8692  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  8693  0000DE  EC8F  F00D         	call	_printf	;wreg free
  8694  0000E2                     l185:
  8695  0000E2  B281               	btfsc	3969,1,c	;volatile
  8696  0000E4  D7FE               	goto	l185
  8697  0000E6                     l188:
  8698  0000E6  A281               	btfss	3969,1,c	;volatile
  8699  0000E8  D7FE               	goto	l188
  8700                           
  8701                           ;UI.c: 86: }
  8702                           ;UI.c: 87: if(cur_state == 12){
  8703  0000EA  0E0C               	movlw	12
  8704  0000EC  0100               	movlb	0	; () banked
  8705  0000EE  19E6               	xorwf	_cur_state& (0+255),w,b
  8706  0000F0  0100               	movlb	0	; () banked
  8707  0000F2  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8708  0000F4  A4D8               	btfss	status,2,c
  8709  0000F6  D003               	goto	l9243
  8710                           
  8711                           ; BSR set to: 0
  8712                           ;UI.c: 88: change_state_to_menu_12();
  8713  0000F8  EC7A  F02A         	call	_change_state_to_menu_12	;wreg free
  8714                           
  8715                           ;UI.c: 89: }
  8716  0000FC  D002               	goto	l193
  8717  0000FE                     l9243:
  8718                           
  8719                           ;UI.c: 90: else{
  8720                           ;UI.c: 91: change_state_to_menu_22();
  8721  0000FE  EC5E  F02A         	call	_change_state_to_menu_22	;wreg free
  8722  000102                     l193:
  8723  000102  B281               	btfsc	3969,1,c	;volatile
  8724  000104  D7FE               	goto	l193
  8725                           
  8726                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  8727  000106  0E05               	movlw	5
  8728  000108  0100               	movlb	0	; () banked
  8729  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  8730  00010C  0E0F               	movlw	15
  8731  00010E  0100               	movlb	0	; () banked
  8732  000110  6FC4               	movwf	??_UI& (0+255),b
  8733  000112  0EF1               	movlw	241
  8734  000114                     u10027:
  8735  000114  2EE8               	decfsz	wreg,f,c
  8736  000116  D7FE               	bra	u10027
  8737  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  8738  00011A  D7FC               	bra	u10027
  8739  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  8740  00011E  D7FA               	bra	u10027
  8741                           
  8742                           ;UI.c: 95: machine_state = UI_state;
  8743  000120  0E00               	movlw	0
  8744  000122  0100               	movlb	0	; () banked
  8745  000124  6FFC               	movwf	_machine_state& (0+255),b
  8746                           
  8747                           ;UI.c: 96: }
  8748  000126  D3D2               	goto	l9569
  8749  000128                     l9249:
  8750                           
  8751                           ; BSR set to: 0
  8752                           ;UI.c: 97: else if(cur_state == 0){
  8753  000128  0100               	movlb	0	; () banked
  8754  00012A  51E6               	movf	_cur_state& (0+255),w,b
  8755  00012C  0100               	movlb	0	; () banked
  8756  00012E  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8757  000130  A4D8               	btfss	status,2,c
  8758  000132  D3CC               	goto	l9569
  8759                           
  8760                           ; BSR set to: 0
  8761                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  8762  000134  0E00               	movlw	0
  8763  000136  0100               	movlb	0	; () banked
  8764  000138  6FC8               	movwf	UI@i& (0+255),b
  8765  00013A                     l9253:
  8766                           
  8767                           ; BSR set to: 0
  8768  00013A  0E63               	movlw	99
  8769  00013C  0100               	movlb	0	; () banked
  8770  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  8771  000140  D001               	goto	l9257
  8772  000142  D00C               	goto	l9261
  8773  000144                     l9257:
  8774                           
  8775                           ; BSR set to: 0
  8776  000144  0E68               	movlw	104
  8777  000146  0100               	movlb	0	; () banked
  8778  000148  6FC4               	movwf	??_UI& (0+255),b
  8779  00014A  0EE4               	movlw	228
  8780  00014C                     u10037:
  8781  00014C  2EE8               	decfsz	wreg,f,c
  8782  00014E  D7FE               	bra	u10037
  8783  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  8784  000152  D7FC               	bra	u10037
  8785  000154  F000               	nop	
  8786  000156  0100               	movlb	0	; () banked
  8787  000158  2BC8               	incf	UI@i& (0+255),f,b
  8788  00015A  D7EF               	goto	l9253
  8789  00015C                     l9261:
  8790                           
  8791                           ; BSR set to: 0
  8792                           ;UI.c: 99: if(cur_state == 0){
  8793  00015C  0100               	movlb	0	; () banked
  8794  00015E  51E6               	movf	_cur_state& (0+255),w,b
  8795  000160  0100               	movlb	0	; () banked
  8796  000162  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8797  000164  A4D8               	btfss	status,2,c
  8798  000166  D3B2               	goto	l9569
  8799                           
  8800                           ; BSR set to: 0
  8801                           ;UI.c: 100: printRTC();
  8802  000168  EC63  F016         	call	_printRTC	;wreg free
  8803                           
  8804                           ;UI.c: 101: }
  8805                           ;UI.c: 102: }
  8806                           ;UI.c: 103: while(logstate){
  8807  00016C  D3AF               	goto	l9569
  8808  00016E                     l9265:
  8809                           
  8810                           ;UI.c: 105: if(!log_completion){
  8811  00016E  0100               	movlb	0	; () banked
  8812  000170  51F2               	movf	_log_completion& (0+255),w,b
  8813  000172  0100               	movlb	0	; () banked
  8814  000174  11F3               	iorwf	(_log_completion+1)& (0+255),w,b
  8815  000176  A4D8               	btfss	status,2,c
  8816  000178  D041               	goto	l9295
  8817                           
  8818                           ; BSR set to: 0
  8819                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8820  00017A  0E01               	movlw	1
  8821  00017C  EC39  F02D         	call	_lcdInst
  8822  000180  0E68               	movlw	104
  8823  000182  0100               	movlb	0	; () banked
  8824  000184  6FC4               	movwf	??_UI& (0+255),b
  8825  000186  0EE4               	movlw	228
  8826  000188                     u10047:
  8827  000188  2EE8               	decfsz	wreg,f,c
  8828  00018A  D7FE               	bra	u10047
  8829  00018C  2FC4               	decfsz	??_UI& (0+255),f,b
  8830  00018E  D7FC               	bra	u10047
  8831  000190  F000               	nop	
  8832                           
  8833                           ;UI.c: 107: lcdInst(0b10000000);;
  8834  000192  0E80               	movlw	128
  8835  000194  EC39  F02D         	call	_lcdInst
  8836                           
  8837                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  8838  000198  0E40               	movlw	low STR_3
  8839  00019A  0100               	movlb	0	; () banked
  8840  00019C  6F8E               	movwf	printf@f& (0+255),b
  8841  00019E  0EFB               	movlw	high STR_3
  8842  0001A0  0100               	movlb	0	; () banked
  8843  0001A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  8844  0001A4  C0F0  F090         	movff	_log,?_printf+2
  8845  0001A8  C0F1  F091         	movff	_log+1,?_printf+3
  8846  0001AC  EC8F  F00D         	call	_printf	;wreg free
  8847                           
  8848                           ;UI.c: 109: lcdInst(0b11000000);;
  8849  0001B0  0EC0               	movlw	192
  8850  0001B2  EC39  F02D         	call	_lcdInst
  8851                           
  8852                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  8853  0001B6  0E5D               	movlw	low STR_4
  8854  0001B8  0100               	movlb	0	; () banked
  8855  0001BA  6F8E               	movwf	printf@f& (0+255),b
  8856  0001BC  0EFE               	movlw	high STR_4
  8857  0001BE  0100               	movlb	0	; () banked
  8858  0001C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  8859  0001C2  EC8F  F00D         	call	_printf	;wreg free
  8860  0001C6                     l9279:
  8861  0001C6  0E00               	movlw	0
  8862  0001C8  0100               	movlb	0	; () banked
  8863  0001CA  6FC9               	movwf	UI@i_412& (0+255),b
  8864  0001CC                     l9281:
  8865                           
  8866                           ; BSR set to: 0
  8867  0001CC  0E63               	movlw	99
  8868  0001CE  0100               	movlb	0	; () banked
  8869  0001D0  65C9               	cpfsgt	UI@i_412& (0+255),b
  8870  0001D2  D001               	goto	l9285
  8871  0001D4  D00C               	goto	l9289
  8872  0001D6                     l9285:
  8873                           
  8874                           ; BSR set to: 0
  8875  0001D6  0E68               	movlw	104
  8876  0001D8  0100               	movlb	0	; () banked
  8877  0001DA  6FC4               	movwf	??_UI& (0+255),b
  8878  0001DC  0EE4               	movlw	228
  8879  0001DE                     u10057:
  8880  0001DE  2EE8               	decfsz	wreg,f,c
  8881  0001E0  D7FE               	bra	u10057
  8882  0001E2  2FC4               	decfsz	??_UI& (0+255),f,b
  8883  0001E4  D7FC               	bra	u10057
  8884  0001E6  F000               	nop	
  8885  0001E8  0100               	movlb	0	; () banked
  8886  0001EA  2BC9               	incf	UI@i_412& (0+255),f,b
  8887  0001EC  D7EF               	goto	l9281
  8888  0001EE                     l9289:
  8889                           
  8890                           ; BSR set to: 0
  8891  0001EE  0100               	movlb	0	; () banked
  8892  0001F0  51F8               	movf	_logstate& (0+255),w,b
  8893  0001F2  0100               	movlb	0	; () banked
  8894  0001F4  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8895  0001F6  B4D8               	btfsc	status,2,c
  8896  0001F8  0012               	return	
  8897  0001FA  D7E5               	goto	l9279
  8898  0001FC                     l9295:
  8899                           
  8900                           ; BSR set to: 0
  8901                           ;UI.c: 114: else{
  8902                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8903  0001FC  0E01               	movlw	1
  8904  0001FE  EC39  F02D         	call	_lcdInst
  8905  000202  0E68               	movlw	104
  8906  000204  0100               	movlb	0	; () banked
  8907  000206  6FC4               	movwf	??_UI& (0+255),b
  8908  000208  0EE4               	movlw	228
  8909  00020A                     u10067:
  8910  00020A  2EE8               	decfsz	wreg,f,c
  8911  00020C  D7FE               	bra	u10067
  8912  00020E  2FC4               	decfsz	??_UI& (0+255),f,b
  8913  000210  D7FC               	bra	u10067
  8914  000212  F000               	nop	
  8915                           
  8916                           ;UI.c: 116: lcdInst(0b10000000);;
  8917  000214  0E80               	movlw	128
  8918  000216  EC39  F02D         	call	_lcdInst
  8919                           
  8920                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  8921  00021A  0E40               	movlw	low STR_3
  8922  00021C  0100               	movlb	0	; () banked
  8923  00021E  6F8E               	movwf	printf@f& (0+255),b
  8924  000220  0EFB               	movlw	high STR_3
  8925  000222  0100               	movlb	0	; () banked
  8926  000224  6F8F               	movwf	(printf@f+1)& (0+255),b
  8927  000226  C0F0  F090         	movff	_log,?_printf+2
  8928  00022A  C0F1  F091         	movff	_log+1,?_printf+3
  8929  00022E  EC8F  F00D         	call	_printf	;wreg free
  8930                           
  8931                           ;UI.c: 118: lcdInst(0b11000000);;
  8932  000232  0EC0               	movlw	192
  8933  000234  EC39  F02D         	call	_lcdInst
  8934                           
  8935                           ;UI.c: 119: printf("PAUSE < | BACK >");
  8936  000238  0ED9               	movlw	low STR_6
  8937  00023A  0100               	movlb	0	; () banked
  8938  00023C  6F8E               	movwf	printf@f& (0+255),b
  8939  00023E  0EFD               	movlw	high STR_6
  8940  000240  0100               	movlb	0	; () banked
  8941  000242  6F8F               	movwf	(printf@f+1)& (0+255),b
  8942  000244  EC8F  F00D         	call	_printf	;wreg free
  8943                           
  8944                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8945  000248  0E00               	movlw	0
  8946  00024A  0100               	movlb	0	; () banked
  8947  00024C  6FCA               	movwf	UI@i_415& (0+255),b
  8948  00024E                     l9309:
  8949                           
  8950                           ; BSR set to: 0
  8951  00024E  0E63               	movlw	99
  8952  000250  0100               	movlb	0	; () banked
  8953  000252  65CA               	cpfsgt	UI@i_415& (0+255),b
  8954  000254  D001               	goto	l9313
  8955  000256  D00C               	goto	l9317
  8956  000258                     l9313:
  8957                           
  8958                           ; BSR set to: 0
  8959  000258  0E68               	movlw	104
  8960  00025A  0100               	movlb	0	; () banked
  8961  00025C  6FC4               	movwf	??_UI& (0+255),b
  8962  00025E  0EE4               	movlw	228
  8963  000260                     u10077:
  8964  000260  2EE8               	decfsz	wreg,f,c
  8965  000262  D7FE               	bra	u10077
  8966  000264  2FC4               	decfsz	??_UI& (0+255),f,b
  8967  000266  D7FC               	bra	u10077
  8968  000268  F000               	nop	
  8969  00026A  0100               	movlb	0	; () banked
  8970  00026C  2BCA               	incf	UI@i_415& (0+255),f,b
  8971  00026E  D7EF               	goto	l9309
  8972  000270                     l9317:
  8973                           
  8974                           ; BSR set to: 0
  8975  000270  0100               	movlb	0	; () banked
  8976  000272  51F8               	movf	_logstate& (0+255),w,b
  8977  000274  0100               	movlb	0	; () banked
  8978  000276  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8979  000278  B4D8               	btfsc	status,2,c
  8980  00027A  0012               	return	
  8981                           
  8982                           ; BSR set to: 0
  8983                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8984                           
  8985                           ; BSR set to: 0
  8986                           
  8987                           ; BSR set to: 0
  8988  00027C  0E00               	movlw	0
  8989  00027E  0100               	movlb	0	; () banked
  8990  000280  6FCB               	movwf	UI@i_416& (0+255),b
  8991  000282                     l9323:
  8992                           
  8993                           ; BSR set to: 0
  8994  000282  0E63               	movlw	99
  8995  000284  0100               	movlb	0	; () banked
  8996  000286  65CB               	cpfsgt	UI@i_416& (0+255),b
  8997  000288  D001               	goto	l9327
  8998  00028A  D00C               	goto	l9331
  8999  00028C                     l9327:
  9000                           
  9001                           ; BSR set to: 0
  9002  00028C  0E68               	movlw	104
  9003  00028E  0100               	movlb	0	; () banked
  9004  000290  6FC4               	movwf	??_UI& (0+255),b
  9005  000292  0EE4               	movlw	228
  9006  000294                     u10087:
  9007  000294  2EE8               	decfsz	wreg,f,c
  9008  000296  D7FE               	bra	u10087
  9009  000298  2FC4               	decfsz	??_UI& (0+255),f,b
  9010  00029A  D7FC               	bra	u10087
  9011  00029C  F000               	nop	
  9012  00029E  0100               	movlb	0	; () banked
  9013  0002A0  2BCB               	incf	UI@i_416& (0+255),f,b
  9014  0002A2  D7EF               	goto	l9323
  9015  0002A4                     l9331:
  9016                           
  9017                           ; BSR set to: 0
  9018  0002A4  0100               	movlb	0	; () banked
  9019  0002A6  51F8               	movf	_logstate& (0+255),w,b
  9020  0002A8  0100               	movlb	0	; () banked
  9021  0002AA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9022  0002AC  B4D8               	btfsc	status,2,c
  9023  0002AE  0012               	return	
  9024                           
  9025                           ; BSR set to: 0
  9026                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9027                           
  9028                           ; BSR set to: 0
  9029                           
  9030                           ; BSR set to: 0
  9031  0002B0  0E01               	movlw	1
  9032  0002B2  EC39  F02D         	call	_lcdInst
  9033  0002B6  0E68               	movlw	104
  9034  0002B8  0100               	movlb	0	; () banked
  9035  0002BA  6FC4               	movwf	??_UI& (0+255),b
  9036  0002BC  0EE4               	movlw	228
  9037  0002BE                     u10097:
  9038  0002BE  2EE8               	decfsz	wreg,f,c
  9039  0002C0  D7FE               	bra	u10097
  9040  0002C2  2FC4               	decfsz	??_UI& (0+255),f,b
  9041  0002C4  D7FC               	bra	u10097
  9042  0002C6  F000               	nop	
  9043                           
  9044                           ;UI.c: 125: lcdInst(0b10000000);;
  9045  0002C8  0E80               	movlw	128
  9046  0002CA  EC39  F02D         	call	_lcdInst
  9047                           
  9048                           ;UI.c: 126: printf("START:");
  9049  0002CE  0EC3               	movlw	low STR_7
  9050  0002D0  0100               	movlb	0	; () banked
  9051  0002D2  6F8E               	movwf	printf@f& (0+255),b
  9052  0002D4  0EFF               	movlw	high STR_7
  9053  0002D6  0100               	movlb	0	; () banked
  9054  0002D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9055  0002DA  EC8F  F00D         	call	_printf	;wreg free
  9056                           
  9057                           ;UI.c: 127: lcdInst(0b11000000);;
  9058  0002DE  0EC0               	movlw	192
  9059  0002E0  EC39  F02D         	call	_lcdInst
  9060                           
  9061                           ;UI.c: 128: char month[] = "MMM";
  9062  0002E4  C149  F0D6         	movff	UI@F3247,UI@month
  9063  0002E8  C14A  F0D7         	movff	UI@F3247+1,UI@month+1
  9064  0002EC  C14B  F0D8         	movff	UI@F3247+2,UI@month+2
  9065  0002F0  C14C  F0D9         	movff	UI@F3247+3,UI@month+3
  9066                           
  9067                           ;UI.c: 129: switch(log_startTime[5]){
  9068  0002F4  D0C3               	goto	l9375
  9069  0002F6                     l9347:
  9070                           
  9071                           ;UI.c: 131: strcpy(month, "JAN");
  9072  0002F6  0ED6               	movlw	low UI@month
  9073  0002F8  0100               	movlb	0	; () banked
  9074  0002FA  6F80               	movwf	strcpy@to& (0+255),b
  9075  0002FC  0E00               	movlw	high UI@month
  9076  0002FE  0100               	movlb	0	; () banked
  9077  000300  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9078  000302  0EDA               	movlw	low STR_8
  9079  000304  0100               	movlb	0	; () banked
  9080  000306  6F82               	movwf	strcpy@from& (0+255),b
  9081  000308  0EFF               	movlw	high STR_8
  9082  00030A  0100               	movlb	0	; () banked
  9083  00030C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9084  00030E  EC96  F02A         	call	_strcpy	;wreg free
  9085                           
  9086                           ;UI.c: 132: break;
  9087  000312  D0E6               	goto	l9377
  9088  000314                     l9349:
  9089                           
  9090                           ;UI.c: 134: strcpy(month, "FEB");
  9091  000314  0ED6               	movlw	low UI@month
  9092  000316  0100               	movlb	0	; () banked
  9093  000318  6F80               	movwf	strcpy@to& (0+255),b
  9094  00031A  0E00               	movlw	high UI@month
  9095  00031C  0100               	movlb	0	; () banked
  9096  00031E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9097  000320  0ECA               	movlw	low STR_9
  9098  000322  0100               	movlb	0	; () banked
  9099  000324  6F82               	movwf	strcpy@from& (0+255),b
  9100  000326  0EFF               	movlw	high STR_9
  9101  000328  0100               	movlb	0	; () banked
  9102  00032A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9103  00032C  EC96  F02A         	call	_strcpy	;wreg free
  9104                           
  9105                           ;UI.c: 135: break;
  9106  000330  D0D7               	goto	l9377
  9107  000332                     l9351:
  9108                           
  9109                           ;UI.c: 137: strcpy(month, "MAR");
  9110  000332  0ED6               	movlw	low UI@month
  9111  000334  0100               	movlb	0	; () banked
  9112  000336  6F80               	movwf	strcpy@to& (0+255),b
  9113  000338  0E00               	movlw	high UI@month
  9114  00033A  0100               	movlb	0	; () banked
  9115  00033C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9116  00033E  0EE6               	movlw	low STR_10
  9117  000340  0100               	movlb	0	; () banked
  9118  000342  6F82               	movwf	strcpy@from& (0+255),b
  9119  000344  0EFF               	movlw	high STR_10
  9120  000346  0100               	movlb	0	; () banked
  9121  000348  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9122  00034A  EC96  F02A         	call	_strcpy	;wreg free
  9123                           
  9124                           ;UI.c: 138: break;
  9125  00034E  D0C8               	goto	l9377
  9126  000350                     l9353:
  9127                           
  9128                           ;UI.c: 140: strcpy(month, "APR");
  9129  000350  0ED6               	movlw	low UI@month
  9130  000352  0100               	movlb	0	; () banked
  9131  000354  6F80               	movwf	strcpy@to& (0+255),b
  9132  000356  0E00               	movlw	high UI@month
  9133  000358  0100               	movlb	0	; () banked
  9134  00035A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9135  00035C  0EEA               	movlw	low STR_11
  9136  00035E  0100               	movlb	0	; () banked
  9137  000360  6F82               	movwf	strcpy@from& (0+255),b
  9138  000362  0EFF               	movlw	high STR_11
  9139  000364  0100               	movlb	0	; () banked
  9140  000366  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9141  000368  EC96  F02A         	call	_strcpy	;wreg free
  9142                           
  9143                           ;UI.c: 141: break;
  9144  00036C  D0B9               	goto	l9377
  9145  00036E                     l9355:
  9146                           
  9147                           ;UI.c: 143: strcpy(month, "MAY");
  9148  00036E  0ED6               	movlw	low UI@month
  9149  000370  0100               	movlb	0	; () banked
  9150  000372  6F80               	movwf	strcpy@to& (0+255),b
  9151  000374  0E00               	movlw	high UI@month
  9152  000376  0100               	movlb	0	; () banked
  9153  000378  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9154  00037A  0EFA               	movlw	low STR_12
  9155  00037C  0100               	movlb	0	; () banked
  9156  00037E  6F82               	movwf	strcpy@from& (0+255),b
  9157  000380  0EFF               	movlw	high STR_12
  9158  000382  0100               	movlb	0	; () banked
  9159  000384  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9160  000386  EC96  F02A         	call	_strcpy	;wreg free
  9161                           
  9162                           ;UI.c: 144: break;
  9163  00038A  D0AA               	goto	l9377
  9164  00038C                     l9357:
  9165                           
  9166                           ;UI.c: 146: strcpy(month, "JUN");
  9167  00038C  0ED6               	movlw	low UI@month
  9168  00038E  0100               	movlb	0	; () banked
  9169  000390  6F80               	movwf	strcpy@to& (0+255),b
  9170  000392  0E00               	movlw	high UI@month
  9171  000394  0100               	movlb	0	; () banked
  9172  000396  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9173  000398  0EDE               	movlw	low STR_13
  9174  00039A  0100               	movlb	0	; () banked
  9175  00039C  6F82               	movwf	strcpy@from& (0+255),b
  9176  00039E  0EFF               	movlw	high STR_13
  9177  0003A0  0100               	movlb	0	; () banked
  9178  0003A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9179  0003A4  EC96  F02A         	call	_strcpy	;wreg free
  9180                           
  9181                           ;UI.c: 147: break;
  9182  0003A8  D09B               	goto	l9377
  9183  0003AA                     l9359:
  9184                           
  9185                           ;UI.c: 149: strcpy(month, "JUL");
  9186  0003AA  0ED6               	movlw	low UI@month
  9187  0003AC  0100               	movlb	0	; () banked
  9188  0003AE  6F80               	movwf	strcpy@to& (0+255),b
  9189  0003B0  0E00               	movlw	high UI@month
  9190  0003B2  0100               	movlb	0	; () banked
  9191  0003B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9192  0003B6  0ED6               	movlw	low STR_14
  9193  0003B8  0100               	movlb	0	; () banked
  9194  0003BA  6F82               	movwf	strcpy@from& (0+255),b
  9195  0003BC  0EFF               	movlw	high STR_14
  9196  0003BE  0100               	movlb	0	; () banked
  9197  0003C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9198  0003C2  EC96  F02A         	call	_strcpy	;wreg free
  9199                           
  9200                           ;UI.c: 150: break;
  9201  0003C6  D08C               	goto	l9377
  9202  0003C8                     l9361:
  9203                           
  9204                           ;UI.c: 152: strcpy(month, "AUG");
  9205  0003C8  0ED6               	movlw	low UI@month
  9206  0003CA  0100               	movlb	0	; () banked
  9207  0003CC  6F80               	movwf	strcpy@to& (0+255),b
  9208  0003CE  0E00               	movlw	high UI@month
  9209  0003D0  0100               	movlb	0	; () banked
  9210  0003D2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9211  0003D4  0ED2               	movlw	low STR_15
  9212  0003D6  0100               	movlb	0	; () banked
  9213  0003D8  6F82               	movwf	strcpy@from& (0+255),b
  9214  0003DA  0EFF               	movlw	high STR_15
  9215  0003DC  0100               	movlb	0	; () banked
  9216  0003DE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9217  0003E0  EC96  F02A         	call	_strcpy	;wreg free
  9218                           
  9219                           ;UI.c: 153: break;
  9220  0003E4  D07D               	goto	l9377
  9221  0003E6                     l9363:
  9222                           
  9223                           ;UI.c: 155: strcpy(month, "SEP");
  9224  0003E6  0ED6               	movlw	low UI@month
  9225  0003E8  0100               	movlb	0	; () banked
  9226  0003EA  6F80               	movwf	strcpy@to& (0+255),b
  9227  0003EC  0E00               	movlw	high UI@month
  9228  0003EE  0100               	movlb	0	; () banked
  9229  0003F0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9230  0003F2  0EE2               	movlw	low STR_16
  9231  0003F4  0100               	movlb	0	; () banked
  9232  0003F6  6F82               	movwf	strcpy@from& (0+255),b
  9233  0003F8  0EFF               	movlw	high STR_16
  9234  0003FA  0100               	movlb	0	; () banked
  9235  0003FC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9236  0003FE  EC96  F02A         	call	_strcpy	;wreg free
  9237                           
  9238                           ;UI.c: 156: break;
  9239  000402  D06E               	goto	l9377
  9240  000404                     l9365:
  9241                           
  9242                           ;UI.c: 158: strcpy(month, "OCT");
  9243  000404  0ED6               	movlw	low UI@month
  9244  000406  0100               	movlb	0	; () banked
  9245  000408  6F80               	movwf	strcpy@to& (0+255),b
  9246  00040A  0E00               	movlw	high UI@month
  9247  00040C  0100               	movlb	0	; () banked
  9248  00040E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9249  000410  0EF2               	movlw	low STR_17
  9250  000412  0100               	movlb	0	; () banked
  9251  000414  6F82               	movwf	strcpy@from& (0+255),b
  9252  000416  0EFF               	movlw	high STR_17
  9253  000418  0100               	movlb	0	; () banked
  9254  00041A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9255  00041C  EC96  F02A         	call	_strcpy	;wreg free
  9256                           
  9257                           ;UI.c: 159: break;
  9258  000420  D05F               	goto	l9377
  9259  000422                     l9367:
  9260                           
  9261                           ;UI.c: 161: strcpy(month, "NOV");
  9262  000422  0ED6               	movlw	low UI@month
  9263  000424  0100               	movlb	0	; () banked
  9264  000426  6F80               	movwf	strcpy@to& (0+255),b
  9265  000428  0E00               	movlw	high UI@month
  9266  00042A  0100               	movlb	0	; () banked
  9267  00042C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9268  00042E  0EF6               	movlw	low STR_18
  9269  000430  0100               	movlb	0	; () banked
  9270  000432  6F82               	movwf	strcpy@from& (0+255),b
  9271  000434  0EFF               	movlw	high STR_18
  9272  000436  0100               	movlb	0	; () banked
  9273  000438  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9274  00043A  EC96  F02A         	call	_strcpy	;wreg free
  9275                           
  9276                           ;UI.c: 162: break;
  9277  00043E  D050               	goto	l9377
  9278  000440                     l9369:
  9279                           
  9280                           ;UI.c: 164: strcpy(month, "DEC");
  9281  000440  0ED6               	movlw	low UI@month
  9282  000442  0100               	movlb	0	; () banked
  9283  000444  6F80               	movwf	strcpy@to& (0+255),b
  9284  000446  0E00               	movlw	high UI@month
  9285  000448  0100               	movlb	0	; () banked
  9286  00044A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9287  00044C  0ECE               	movlw	low STR_19
  9288  00044E  0100               	movlb	0	; () banked
  9289  000450  6F82               	movwf	strcpy@from& (0+255),b
  9290  000452  0EFF               	movlw	high STR_19
  9291  000454  0100               	movlb	0	; () banked
  9292  000456  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9293  000458  EC96  F02A         	call	_strcpy	;wreg free
  9294                           
  9295                           ;UI.c: 165: break;
  9296  00045C  D041               	goto	l9377
  9297  00045E                     l9371:
  9298                           
  9299                           ;UI.c: 167: strcpy(month, "ERR");
  9300  00045E  0ED6               	movlw	low UI@month
  9301  000460  0100               	movlb	0	; () banked
  9302  000462  6F80               	movwf	strcpy@to& (0+255),b
  9303  000464  0E00               	movlw	high UI@month
  9304  000466  0100               	movlb	0	; () banked
  9305  000468  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9306  00046A  0EEE               	movlw	low STR_20
  9307  00046C  0100               	movlb	0	; () banked
  9308  00046E  6F82               	movwf	strcpy@from& (0+255),b
  9309  000470  0EFF               	movlw	high STR_20
  9310  000472  0100               	movlb	0	; () banked
  9311  000474  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9312  000476  EC96  F02A         	call	_strcpy	;wreg free
  9313                           
  9314                           ;UI.c: 169: }
  9315                           
  9316                           ;UI.c: 168: break;
  9317  00047A  D032               	goto	l9377
  9318  00047C                     l9375:
  9319  00047C  EE21  F00A         	lfsr	2,_log_startTime+10
  9320  000480  CFDE F0C4          	movff	postinc2,??_UI
  9321  000484  CFDD F0C5          	movff	postdec2,??_UI+1
  9322                           
  9323                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9324                           ; Switch size 1, requested type "space"
  9325                           ; Number of cases is 1, Range of values is 0 to 0
  9326                           ; switch strategies available:
  9327                           ; Name         Instructions Cycles
  9328                           ; simple_byte            4     3 (average)
  9329                           ;	Chosen strategy is simple_byte
  9330  000488  0100               	movlb	0	; () banked
  9331  00048A  51C5               	movf	(??_UI+1)& (0+255),w,b
  9332  00048C  0A00               	xorlw	0	; case 0
  9333  00048E  A4D8               	btfss	status,2,c
  9334  000490  D7E6               	goto	l9371
  9335                           
  9336                           ; BSR set to: 0
  9337                           ; Switch size 1, requested type "space"
  9338                           ; Number of cases is 12, Range of values is 1 to 12
  9339                           ; switch strategies available:
  9340                           ; Name         Instructions Cycles
  9341                           ; simple_byte           37    19 (average)
  9342                           ;	Chosen strategy is simple_byte
  9343  000492  0100               	movlb	0	; () banked
  9344  000494  51C4               	movf	??_UI& (0+255),w,b
  9345  000496  0A01               	xorlw	1	; case 1
  9346  000498  B4D8               	btfsc	status,2,c
  9347  00049A  D72D               	goto	l9347
  9348  00049C  0A03               	xorlw	3	; case 2
  9349  00049E  B4D8               	btfsc	status,2,c
  9350  0004A0  D739               	goto	l9349
  9351  0004A2  0A01               	xorlw	1	; case 3
  9352  0004A4  B4D8               	btfsc	status,2,c
  9353  0004A6  D745               	goto	l9351
  9354  0004A8  0A07               	xorlw	7	; case 4
  9355  0004AA  B4D8               	btfsc	status,2,c
  9356  0004AC  D751               	goto	l9353
  9357  0004AE  0A01               	xorlw	1	; case 5
  9358  0004B0  B4D8               	btfsc	status,2,c
  9359  0004B2  D75D               	goto	l9355
  9360  0004B4  0A03               	xorlw	3	; case 6
  9361  0004B6  B4D8               	btfsc	status,2,c
  9362  0004B8  D769               	goto	l9357
  9363  0004BA  0A01               	xorlw	1	; case 7
  9364  0004BC  B4D8               	btfsc	status,2,c
  9365  0004BE  D775               	goto	l9359
  9366  0004C0  0A0F               	xorlw	15	; case 8
  9367  0004C2  B4D8               	btfsc	status,2,c
  9368  0004C4  D781               	goto	l9361
  9369  0004C6  0A01               	xorlw	1	; case 9
  9370  0004C8  B4D8               	btfsc	status,2,c
  9371  0004CA  D78D               	goto	l9363
  9372  0004CC  0A03               	xorlw	3	; case 10
  9373  0004CE  B4D8               	btfsc	status,2,c
  9374  0004D0  D799               	goto	l9365
  9375  0004D2  0A01               	xorlw	1	; case 11
  9376  0004D4  B4D8               	btfsc	status,2,c
  9377  0004D6  D7A5               	goto	l9367
  9378  0004D8  0A07               	xorlw	7	; case 12
  9379  0004DA  B4D8               	btfsc	status,2,c
  9380  0004DC  D7B1               	goto	l9369
  9381  0004DE  D7BF               	goto	l9371
  9382  0004E0                     l9377:
  9383                           
  9384                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  9385  0004E0  0EA6               	movlw	low STR_21
  9386  0004E2  0100               	movlb	0	; () banked
  9387  0004E4  6F8E               	movwf	printf@f& (0+255),b
  9388  0004E6  0EFA               	movlw	high STR_21
  9389  0004E8  0100               	movlb	0	; () banked
  9390  0004EA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9391  0004EC  C108  F090         	movff	_log_startTime+8,?_printf+2
  9392  0004F0  C109  F091         	movff	_log_startTime+9,?_printf+3
  9393  0004F4  0ED6               	movlw	low UI@month
  9394  0004F6  0100               	movlb	0	; () banked
  9395  0004F8  6F92               	movwf	(?_printf+4)& (0+255),b
  9396  0004FA  0E00               	movlw	high UI@month
  9397  0004FC  0100               	movlb	0	; () banked
  9398  0004FE  6F93               	movwf	(?_printf+5)& (0+255),b
  9399  000500  C104  F094         	movff	_log_startTime+4,?_printf+6
  9400  000504  C105  F095         	movff	_log_startTime+5,?_printf+7
  9401  000508  C102  F096         	movff	_log_startTime+2,?_printf+8
  9402  00050C  C103  F097         	movff	_log_startTime+3,?_printf+9
  9403  000510  C100  F098         	movff	_log_startTime,?_printf+10
  9404  000514  C101  F099         	movff	_log_startTime+1,?_printf+11
  9405  000518  EC8F  F00D         	call	_printf	;wreg free
  9406                           
  9407                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9408  00051C  0E00               	movlw	0
  9409  00051E  0100               	movlb	0	; () banked
  9410  000520  6FCC               	movwf	UI@i_434& (0+255),b
  9411  000522                     l9381:
  9412                           
  9413                           ; BSR set to: 0
  9414  000522  0E63               	movlw	99
  9415  000524  0100               	movlb	0	; () banked
  9416  000526  65CC               	cpfsgt	UI@i_434& (0+255),b
  9417  000528  D001               	goto	l9385
  9418  00052A  D00C               	goto	l9389
  9419  00052C                     l9385:
  9420                           
  9421                           ; BSR set to: 0
  9422  00052C  0E68               	movlw	104
  9423  00052E  0100               	movlb	0	; () banked
  9424  000530  6FC4               	movwf	??_UI& (0+255),b
  9425  000532  0EE4               	movlw	228
  9426  000534                     u10107:
  9427  000534  2EE8               	decfsz	wreg,f,c
  9428  000536  D7FE               	bra	u10107
  9429  000538  2FC4               	decfsz	??_UI& (0+255),f,b
  9430  00053A  D7FC               	bra	u10107
  9431  00053C  F000               	nop	
  9432  00053E  0100               	movlb	0	; () banked
  9433  000540  2BCC               	incf	UI@i_434& (0+255),f,b
  9434  000542  D7EF               	goto	l9381
  9435  000544                     l9389:
  9436                           
  9437                           ; BSR set to: 0
  9438  000544  0100               	movlb	0	; () banked
  9439  000546  51F8               	movf	_logstate& (0+255),w,b
  9440  000548  0100               	movlb	0	; () banked
  9441  00054A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9442  00054C  B4D8               	btfsc	status,2,c
  9443  00054E  0012               	return	
  9444                           
  9445                           ; BSR set to: 0
  9446                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9447                           
  9448                           ; BSR set to: 0
  9449                           
  9450                           ; BSR set to: 0
  9451  000550  0E00               	movlw	0
  9452  000552  0100               	movlb	0	; () banked
  9453  000554  6FCD               	movwf	UI@i_435& (0+255),b
  9454  000556                     l9395:
  9455                           
  9456                           ; BSR set to: 0
  9457  000556  0E63               	movlw	99
  9458  000558  0100               	movlb	0	; () banked
  9459  00055A  65CD               	cpfsgt	UI@i_435& (0+255),b
  9460  00055C  D001               	goto	l9399
  9461  00055E  D00C               	goto	l9403
  9462  000560                     l9399:
  9463                           
  9464                           ; BSR set to: 0
  9465  000560  0E68               	movlw	104
  9466  000562  0100               	movlb	0	; () banked
  9467  000564  6FC4               	movwf	??_UI& (0+255),b
  9468  000566  0EE4               	movlw	228
  9469  000568                     u10117:
  9470  000568  2EE8               	decfsz	wreg,f,c
  9471  00056A  D7FE               	bra	u10117
  9472  00056C  2FC4               	decfsz	??_UI& (0+255),f,b
  9473  00056E  D7FC               	bra	u10117
  9474  000570  F000               	nop	
  9475  000572  0100               	movlb	0	; () banked
  9476  000574  2BCD               	incf	UI@i_435& (0+255),f,b
  9477  000576  D7EF               	goto	l9395
  9478  000578                     l9403:
  9479                           
  9480                           ; BSR set to: 0
  9481  000578  0100               	movlb	0	; () banked
  9482  00057A  51F8               	movf	_logstate& (0+255),w,b
  9483  00057C  0100               	movlb	0	; () banked
  9484  00057E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9485  000580  B4D8               	btfsc	status,2,c
  9486  000582  0012               	return	
  9487                           
  9488                           ; BSR set to: 0
  9489                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9490                           
  9491                           ; BSR set to: 0
  9492                           
  9493                           ; BSR set to: 0
  9494  000584  0E01               	movlw	1
  9495  000586  EC39  F02D         	call	_lcdInst
  9496  00058A  0E68               	movlw	104
  9497  00058C  0100               	movlb	0	; () banked
  9498  00058E  6FC4               	movwf	??_UI& (0+255),b
  9499  000590  0EE4               	movlw	228
  9500  000592                     u10127:
  9501  000592  2EE8               	decfsz	wreg,f,c
  9502  000594  D7FE               	bra	u10127
  9503  000596  2FC4               	decfsz	??_UI& (0+255),f,b
  9504  000598  D7FC               	bra	u10127
  9505  00059A  F000               	nop	
  9506                           
  9507                           ;UI.c: 176: lcdInst(0b10000000);;
  9508  00059C  0E80               	movlw	128
  9509  00059E  EC39  F02D         	call	_lcdInst
  9510                           
  9511                           ;UI.c: 177: printf("DURATION:");
  9512  0005A2  0E9A               	movlw	low STR_22
  9513  0005A4  0100               	movlb	0	; () banked
  9514  0005A6  6F8E               	movwf	printf@f& (0+255),b
  9515  0005A8  0EFF               	movlw	high STR_22
  9516  0005AA  0100               	movlb	0	; () banked
  9517  0005AC  6F8F               	movwf	(printf@f+1)& (0+255),b
  9518  0005AE  EC8F  F00D         	call	_printf	;wreg free
  9519                           
  9520                           ;UI.c: 178: lcdInst(0b11000000);;
  9521  0005B2  0EC0               	movlw	192
  9522  0005B4  EC39  F02D         	call	_lcdInst
  9523                           
  9524                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9525  0005B8  0E0E               	movlw	14
  9526  0005BA  0100               	movlb	0	; () banked
  9527  0005BC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9528  0005BE  0E10               	movlw	16
  9529  0005C0  6F82               	movwf	___awmod@divisor& (0+255),b
  9530  0005C2  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9531  0005C6  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9532  0005CA  EC4E  F025         	call	___awmod	;wreg free
  9533  0005CE  C080  F0C6         	movff	?___awmod,_UI$2433
  9534  0005D2  C081  F0C7         	movff	?___awmod+1,_UI$2433+1
  9535                           
  9536                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9537  0005D6  0E3B               	movlw	low STR_23
  9538  0005D8  0100               	movlb	0	; () banked
  9539  0005DA  6F8E               	movwf	printf@f& (0+255),b
  9540  0005DC  0EFF               	movlw	high STR_23
  9541  0005DE  0100               	movlb	0	; () banked
  9542  0005E0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9543  0005E2  0E0E               	movlw	14
  9544  0005E4  0100               	movlb	0	; () banked
  9545  0005E6  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9546  0005E8  0E10               	movlw	16
  9547  0005EA  6F82               	movwf	___awmod@divisor& (0+255),b
  9548  0005EC  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9549  0005F0  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9550  0005F4  EC4E  F025         	call	___awmod	;wreg free
  9551  0005F8  C080  F086         	movff	?___awmod,___awdiv@dividend
  9552  0005FC  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  9553  000600  0E00               	movlw	0
  9554  000602  0100               	movlb	0	; () banked
  9555  000604  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  9556  000606  0E3C               	movlw	60
  9557  000608  6F88               	movwf	___awdiv@divisor& (0+255),b
  9558  00060A  EC3C  F024         	call	___awdiv	;wreg free
  9559  00060E  C086  F090         	movff	?___awdiv,?_printf+2
  9560  000612  C087  F091         	movff	?___awdiv+1,?_printf+3
  9561  000616  C0C6  F080         	movff	_UI$2433,___awmod@dividend
  9562  00061A  C0C7  F081         	movff	_UI$2433+1,___awmod@dividend+1
  9563  00061E  0E00               	movlw	0
  9564  000620  0100               	movlb	0	; () banked
  9565  000622  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9566  000624  0E3C               	movlw	60
  9567  000626  6F82               	movwf	___awmod@divisor& (0+255),b
  9568  000628  EC4E  F025         	call	___awmod	;wreg free
  9569  00062C  C080  F092         	movff	?___awmod,?_printf+4
  9570  000630  C081  F093         	movff	?___awmod+1,?_printf+5
  9571  000634  EC8F  F00D         	call	_printf	;wreg free
  9572                           
  9573                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9574  000638  0E00               	movlw	0
  9575  00063A  0100               	movlb	0	; () banked
  9576  00063C  6FCE               	movwf	UI@i_438& (0+255),b
  9577  00063E                     l9423:
  9578                           
  9579                           ; BSR set to: 0
  9580  00063E  0E63               	movlw	99
  9581  000640  0100               	movlb	0	; () banked
  9582  000642  65CE               	cpfsgt	UI@i_438& (0+255),b
  9583  000644  D001               	goto	l9427
  9584  000646  D00C               	goto	l9431
  9585  000648                     l9427:
  9586                           
  9587                           ; BSR set to: 0
  9588  000648  0E68               	movlw	104
  9589  00064A  0100               	movlb	0	; () banked
  9590  00064C  6FC4               	movwf	??_UI& (0+255),b
  9591  00064E  0EE4               	movlw	228
  9592  000650                     u10137:
  9593  000650  2EE8               	decfsz	wreg,f,c
  9594  000652  D7FE               	bra	u10137
  9595  000654  2FC4               	decfsz	??_UI& (0+255),f,b
  9596  000656  D7FC               	bra	u10137
  9597  000658  F000               	nop	
  9598  00065A  0100               	movlb	0	; () banked
  9599  00065C  2BCE               	incf	UI@i_438& (0+255),f,b
  9600  00065E  D7EF               	goto	l9423
  9601  000660                     l9431:
  9602                           
  9603                           ; BSR set to: 0
  9604  000660  0100               	movlb	0	; () banked
  9605  000662  51F8               	movf	_logstate& (0+255),w,b
  9606  000664  0100               	movlb	0	; () banked
  9607  000666  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9608  000668  B4D8               	btfsc	status,2,c
  9609  00066A  0012               	return	
  9610                           
  9611                           ; BSR set to: 0
  9612                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9613                           
  9614                           ; BSR set to: 0
  9615                           
  9616                           ; BSR set to: 0
  9617  00066C  0E00               	movlw	0
  9618  00066E  0100               	movlb	0	; () banked
  9619  000670  6FCF               	movwf	UI@i_439& (0+255),b
  9620  000672                     l9437:
  9621                           
  9622                           ; BSR set to: 0
  9623  000672  0E63               	movlw	99
  9624  000674  0100               	movlb	0	; () banked
  9625  000676  65CF               	cpfsgt	UI@i_439& (0+255),b
  9626  000678  D001               	goto	l9441
  9627  00067A  D00C               	goto	l9445
  9628  00067C                     l9441:
  9629                           
  9630                           ; BSR set to: 0
  9631  00067C  0E68               	movlw	104
  9632  00067E  0100               	movlb	0	; () banked
  9633  000680  6FC4               	movwf	??_UI& (0+255),b
  9634  000682  0EE4               	movlw	228
  9635  000684                     u10147:
  9636  000684  2EE8               	decfsz	wreg,f,c
  9637  000686  D7FE               	bra	u10147
  9638  000688  2FC4               	decfsz	??_UI& (0+255),f,b
  9639  00068A  D7FC               	bra	u10147
  9640  00068C  F000               	nop	
  9641  00068E  0100               	movlb	0	; () banked
  9642  000690  2BCF               	incf	UI@i_439& (0+255),f,b
  9643  000692  D7EF               	goto	l9437
  9644  000694                     l9445:
  9645                           
  9646                           ; BSR set to: 0
  9647  000694  0100               	movlb	0	; () banked
  9648  000696  51F8               	movf	_logstate& (0+255),w,b
  9649  000698  0100               	movlb	0	; () banked
  9650  00069A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9651  00069C  B4D8               	btfsc	status,2,c
  9652  00069E  0012               	return	
  9653                           
  9654                           ; BSR set to: 0
  9655                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9656                           
  9657                           ; BSR set to: 0
  9658                           
  9659                           ; BSR set to: 0
  9660  0006A0  0E01               	movlw	1
  9661  0006A2  EC39  F02D         	call	_lcdInst
  9662  0006A6  0E68               	movlw	104
  9663  0006A8  0100               	movlb	0	; () banked
  9664  0006AA  6FC4               	movwf	??_UI& (0+255),b
  9665  0006AC  0EE4               	movlw	228
  9666  0006AE                     u10157:
  9667  0006AE  2EE8               	decfsz	wreg,f,c
  9668  0006B0  D7FE               	bra	u10157
  9669  0006B2  2FC4               	decfsz	??_UI& (0+255),f,b
  9670  0006B4  D7FC               	bra	u10157
  9671  0006B6  F000               	nop	
  9672                           
  9673                           ;UI.c: 185: lcdInst(0b10000000);;
  9674  0006B8  0E80               	movlw	128
  9675  0006BA  EC39  F02D         	call	_lcdInst
  9676                           
  9677                           ;UI.c: 186: printf(" -- POP  CAN -- ");
  9678  0006BE  0E2F               	movlw	low STR_24
  9679  0006C0  0100               	movlb	0	; () banked
  9680  0006C2  6F8E               	movwf	printf@f& (0+255),b
  9681  0006C4  0EFD               	movlw	high STR_24
  9682  0006C6  0100               	movlb	0	; () banked
  9683  0006C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9684  0006CA  EC8F  F00D         	call	_printf	;wreg free
  9685                           
  9686                           ;UI.c: 187: lcdInst(0b11000000);;
  9687  0006CE  0EC0               	movlw	192
  9688  0006D0  EC39  F02D         	call	_lcdInst
  9689                           
  9690                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  9691  0006D4  0E0C               	movlw	low STR_25
  9692  0006D6  0100               	movlb	0	; () banked
  9693  0006D8  6F8E               	movwf	printf@f& (0+255),b
  9694  0006DA  0EFE               	movlw	high STR_25
  9695  0006DC  0100               	movlb	0	; () banked
  9696  0006DE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9697  0006E0  C0F4  F090         	movff	_log_count_pop_no_tab,?_printf+2
  9698  0006E4  C0F5  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  9699  0006E8  C069  F092         	movff	_log_count_pop_w_tab,?_printf+4
  9700  0006EC  C06A  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  9701  0006F0  EC8F  F00D         	call	_printf	;wreg free
  9702                           
  9703                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9704  0006F4  0E00               	movlw	0
  9705  0006F6  0100               	movlb	0	; () banked
  9706  0006F8  6FD0               	movwf	UI@i_442& (0+255),b
  9707  0006FA                     l9463:
  9708                           
  9709                           ; BSR set to: 0
  9710  0006FA  0E63               	movlw	99
  9711  0006FC  0100               	movlb	0	; () banked
  9712  0006FE  65D0               	cpfsgt	UI@i_442& (0+255),b
  9713  000700  D001               	goto	l9467
  9714  000702  D00C               	goto	l9471
  9715  000704                     l9467:
  9716                           
  9717                           ; BSR set to: 0
  9718  000704  0E68               	movlw	104
  9719  000706  0100               	movlb	0	; () banked
  9720  000708  6FC4               	movwf	??_UI& (0+255),b
  9721  00070A  0EE4               	movlw	228
  9722  00070C                     u10167:
  9723  00070C  2EE8               	decfsz	wreg,f,c
  9724  00070E  D7FE               	bra	u10167
  9725  000710  2FC4               	decfsz	??_UI& (0+255),f,b
  9726  000712  D7FC               	bra	u10167
  9727  000714  F000               	nop	
  9728  000716  0100               	movlb	0	; () banked
  9729  000718  2BD0               	incf	UI@i_442& (0+255),f,b
  9730  00071A  D7EF               	goto	l9463
  9731  00071C                     l9471:
  9732                           
  9733                           ; BSR set to: 0
  9734  00071C  0100               	movlb	0	; () banked
  9735  00071E  51F8               	movf	_logstate& (0+255),w,b
  9736  000720  0100               	movlb	0	; () banked
  9737  000722  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9738  000724  B4D8               	btfsc	status,2,c
  9739  000726  0012               	return	
  9740                           
  9741                           ; BSR set to: 0
  9742                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9743                           
  9744                           ; BSR set to: 0
  9745                           
  9746                           ; BSR set to: 0
  9747  000728  0E00               	movlw	0
  9748  00072A  0100               	movlb	0	; () banked
  9749  00072C  6FD1               	movwf	UI@i_443& (0+255),b
  9750  00072E                     l9477:
  9751                           
  9752                           ; BSR set to: 0
  9753  00072E  0E63               	movlw	99
  9754  000730  0100               	movlb	0	; () banked
  9755  000732  65D1               	cpfsgt	UI@i_443& (0+255),b
  9756  000734  D001               	goto	l9481
  9757  000736  D00C               	goto	l9485
  9758  000738                     l9481:
  9759                           
  9760                           ; BSR set to: 0
  9761  000738  0E68               	movlw	104
  9762  00073A  0100               	movlb	0	; () banked
  9763  00073C  6FC4               	movwf	??_UI& (0+255),b
  9764  00073E  0EE4               	movlw	228
  9765  000740                     u10177:
  9766  000740  2EE8               	decfsz	wreg,f,c
  9767  000742  D7FE               	bra	u10177
  9768  000744  2FC4               	decfsz	??_UI& (0+255),f,b
  9769  000746  D7FC               	bra	u10177
  9770  000748  F000               	nop	
  9771  00074A  0100               	movlb	0	; () banked
  9772  00074C  2BD1               	incf	UI@i_443& (0+255),f,b
  9773  00074E  D7EF               	goto	l9477
  9774  000750                     l9485:
  9775                           
  9776                           ; BSR set to: 0
  9777  000750  0100               	movlb	0	; () banked
  9778  000752  51F8               	movf	_logstate& (0+255),w,b
  9779  000754  0100               	movlb	0	; () banked
  9780  000756  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9781  000758  B4D8               	btfsc	status,2,c
  9782  00075A  0012               	return	
  9783                           
  9784                           ; BSR set to: 0
  9785                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9786                           
  9787                           ; BSR set to: 0
  9788                           
  9789                           ; BSR set to: 0
  9790  00075C  0E01               	movlw	1
  9791  00075E  EC39  F02D         	call	_lcdInst
  9792  000762  0E68               	movlw	104
  9793  000764  0100               	movlb	0	; () banked
  9794  000766  6FC4               	movwf	??_UI& (0+255),b
  9795  000768  0EE4               	movlw	228
  9796  00076A                     u10187:
  9797  00076A  2EE8               	decfsz	wreg,f,c
  9798  00076C  D7FE               	bra	u10187
  9799  00076E  2FC4               	decfsz	??_UI& (0+255),f,b
  9800  000770  D7FC               	bra	u10187
  9801  000772  F000               	nop	
  9802                           
  9803                           ;UI.c: 194: lcdInst(0b10000000);;
  9804  000774  0E80               	movlw	128
  9805  000776  EC39  F02D         	call	_lcdInst
  9806                           
  9807                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
  9808  00077A  0E40               	movlw	low STR_26
  9809  00077C  0100               	movlb	0	; () banked
  9810  00077E  6F8E               	movwf	printf@f& (0+255),b
  9811  000780  0EFD               	movlw	high STR_26
  9812  000782  0100               	movlb	0	; () banked
  9813  000784  6F8F               	movwf	(printf@f+1)& (0+255),b
  9814  000786  EC8F  F00D         	call	_printf	;wreg free
  9815                           
  9816                           ;UI.c: 196: lcdInst(0b11000000);;
  9817  00078A  0EC0               	movlw	192
  9818  00078C  EC39  F02D         	call	_lcdInst
  9819                           
  9820                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  9821  000790  0EFB               	movlw	low STR_27
  9822  000792  0100               	movlb	0	; () banked
  9823  000794  6F8E               	movwf	printf@f& (0+255),b
  9824  000796  0EFD               	movlw	high STR_27
  9825  000798  0100               	movlb	0	; () banked
  9826  00079A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9827  00079C  C13D  F090         	movff	_log_count_can_no_lab,?_printf+2
  9828  0007A0  C13E  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  9829  0007A4  C13F  F092         	movff	_log_count_can_w_lab,?_printf+4
  9830  0007A8  C140  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  9831  0007AC  EC8F  F00D         	call	_printf	;wreg free
  9832                           
  9833                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9834  0007B0  0E00               	movlw	0
  9835  0007B2  0100               	movlb	0	; () banked
  9836  0007B4  6FD2               	movwf	UI@i_446& (0+255),b
  9837  0007B6                     l9503:
  9838                           
  9839                           ; BSR set to: 0
  9840  0007B6  0E63               	movlw	99
  9841  0007B8  0100               	movlb	0	; () banked
  9842  0007BA  65D2               	cpfsgt	UI@i_446& (0+255),b
  9843  0007BC  D001               	goto	l9507
  9844  0007BE  D00C               	goto	l9511
  9845  0007C0                     l9507:
  9846                           
  9847                           ; BSR set to: 0
  9848  0007C0  0E68               	movlw	104
  9849  0007C2  0100               	movlb	0	; () banked
  9850  0007C4  6FC4               	movwf	??_UI& (0+255),b
  9851  0007C6  0EE4               	movlw	228
  9852  0007C8                     u10197:
  9853  0007C8  2EE8               	decfsz	wreg,f,c
  9854  0007CA  D7FE               	bra	u10197
  9855  0007CC  2FC4               	decfsz	??_UI& (0+255),f,b
  9856  0007CE  D7FC               	bra	u10197
  9857  0007D0  F000               	nop	
  9858  0007D2  0100               	movlb	0	; () banked
  9859  0007D4  2BD2               	incf	UI@i_446& (0+255),f,b
  9860  0007D6  D7EF               	goto	l9503
  9861  0007D8                     l9511:
  9862                           
  9863                           ; BSR set to: 0
  9864  0007D8  0100               	movlb	0	; () banked
  9865  0007DA  51F8               	movf	_logstate& (0+255),w,b
  9866  0007DC  0100               	movlb	0	; () banked
  9867  0007DE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9868  0007E0  B4D8               	btfsc	status,2,c
  9869  0007E2  0012               	return	
  9870                           
  9871                           ; BSR set to: 0
  9872                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9873                           
  9874                           ; BSR set to: 0
  9875                           
  9876                           ; BSR set to: 0
  9877  0007E4  0E00               	movlw	0
  9878  0007E6  0100               	movlb	0	; () banked
  9879  0007E8  6FD3               	movwf	UI@i_447& (0+255),b
  9880  0007EA                     l9517:
  9881                           
  9882                           ; BSR set to: 0
  9883  0007EA  0E63               	movlw	99
  9884  0007EC  0100               	movlb	0	; () banked
  9885  0007EE  65D3               	cpfsgt	UI@i_447& (0+255),b
  9886  0007F0  D001               	goto	l9521
  9887  0007F2  D00C               	goto	l9525
  9888  0007F4                     l9521:
  9889                           
  9890                           ; BSR set to: 0
  9891  0007F4  0E68               	movlw	104
  9892  0007F6  0100               	movlb	0	; () banked
  9893  0007F8  6FC4               	movwf	??_UI& (0+255),b
  9894  0007FA  0EE4               	movlw	228
  9895  0007FC                     u10207:
  9896  0007FC  2EE8               	decfsz	wreg,f,c
  9897  0007FE  D7FE               	bra	u10207
  9898  000800  2FC4               	decfsz	??_UI& (0+255),f,b
  9899  000802  D7FC               	bra	u10207
  9900  000804  F000               	nop	
  9901  000806  0100               	movlb	0	; () banked
  9902  000808  2BD3               	incf	UI@i_447& (0+255),f,b
  9903  00080A  D7EF               	goto	l9517
  9904  00080C                     l9525:
  9905                           
  9906                           ; BSR set to: 0
  9907  00080C  0100               	movlb	0	; () banked
  9908  00080E  51F8               	movf	_logstate& (0+255),w,b
  9909  000810  0100               	movlb	0	; () banked
  9910  000812  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9911  000814  B4D8               	btfsc	status,2,c
  9912  000816  0012               	return	
  9913                           
  9914                           ; BSR set to: 0
  9915                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9916                           
  9917                           ; BSR set to: 0
  9918                           
  9919                           ; BSR set to: 0
  9920  000818  0E01               	movlw	1
  9921  00081A  EC39  F02D         	call	_lcdInst
  9922  00081E  0E68               	movlw	104
  9923  000820  0100               	movlb	0	; () banked
  9924  000822  6FC4               	movwf	??_UI& (0+255),b
  9925  000824  0EE4               	movlw	228
  9926  000826                     u10217:
  9927  000826  2EE8               	decfsz	wreg,f,c
  9928  000828  D7FE               	bra	u10217
  9929  00082A  2FC4               	decfsz	??_UI& (0+255),f,b
  9930  00082C  D7FC               	bra	u10217
  9931  00082E  F000               	nop	
  9932                           
  9933                           ;UI.c: 203: lcdInst(0b10000000);;
  9934  000830  0E80               	movlw	128
  9935  000832  EC39  F02D         	call	_lcdInst
  9936                           
  9937                           ;UI.c: 204: printf("-- TOTAL CANS --");
  9938  000836  0E51               	movlw	low STR_28
  9939  000838  0100               	movlb	0	; () banked
  9940  00083A  6F8E               	movwf	printf@f& (0+255),b
  9941  00083C  0EFD               	movlw	high STR_28
  9942  00083E  0100               	movlb	0	; () banked
  9943  000840  6F8F               	movwf	(printf@f+1)& (0+255),b
  9944  000842  EC8F  F00D         	call	_printf	;wreg free
  9945                           
  9946                           ;UI.c: 205: lcdInst(0b11000000);;
  9947  000846  0EC0               	movlw	192
  9948  000848  EC39  F02D         	call	_lcdInst
  9949                           
  9950                           ;UI.c: 206: printf("%d", log_count_total);
  9951  00084C  0E09               	movlw	low (STR_27+14)
  9952  00084E  0100               	movlb	0	; () banked
  9953  000850  6F8E               	movwf	printf@f& (0+255),b
  9954  000852  0EFE               	movlw	high (STR_27+14)
  9955  000854  0100               	movlb	0	; () banked
  9956  000856  6F8F               	movwf	(printf@f+1)& (0+255),b
  9957  000858  C141  F090         	movff	_log_count_total,?_printf+2
  9958  00085C  C142  F091         	movff	_log_count_total+1,?_printf+3
  9959  000860  EC8F  F00D         	call	_printf	;wreg free
  9960                           
  9961                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9962  000864  0E00               	movlw	0
  9963  000866  0100               	movlb	0	; () banked
  9964  000868  6FD4               	movwf	UI@i_450& (0+255),b
  9965  00086A                     l9543:
  9966                           
  9967                           ; BSR set to: 0
  9968  00086A  0E63               	movlw	99
  9969  00086C  0100               	movlb	0	; () banked
  9970  00086E  65D4               	cpfsgt	UI@i_450& (0+255),b
  9971  000870  D001               	goto	l9547
  9972  000872  D00C               	goto	l9551
  9973  000874                     l9547:
  9974                           
  9975                           ; BSR set to: 0
  9976  000874  0E68               	movlw	104
  9977  000876  0100               	movlb	0	; () banked
  9978  000878  6FC4               	movwf	??_UI& (0+255),b
  9979  00087A  0EE4               	movlw	228
  9980  00087C                     u10227:
  9981  00087C  2EE8               	decfsz	wreg,f,c
  9982  00087E  D7FE               	bra	u10227
  9983  000880  2FC4               	decfsz	??_UI& (0+255),f,b
  9984  000882  D7FC               	bra	u10227
  9985  000884  F000               	nop	
  9986  000886  0100               	movlb	0	; () banked
  9987  000888  2BD4               	incf	UI@i_450& (0+255),f,b
  9988  00088A  D7EF               	goto	l9543
  9989  00088C                     l9551:
  9990                           
  9991                           ; BSR set to: 0
  9992  00088C  0100               	movlb	0	; () banked
  9993  00088E  51F8               	movf	_logstate& (0+255),w,b
  9994  000890  0100               	movlb	0	; () banked
  9995  000892  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9996  000894  B4D8               	btfsc	status,2,c
  9997  000896  0012               	return	
  9998                           
  9999                           ; BSR set to: 0
 10000                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10001                           
 10002                           ; BSR set to: 0
 10003                           
 10004                           ; BSR set to: 0
 10005  000898  0E00               	movlw	0
 10006  00089A  0100               	movlb	0	; () banked
 10007  00089C  6FD5               	movwf	UI@i_451& (0+255),b
 10008  00089E                     l9557:
 10009                           
 10010                           ; BSR set to: 0
 10011  00089E  0E63               	movlw	99
 10012  0008A0  0100               	movlb	0	; () banked
 10013  0008A2  65D5               	cpfsgt	UI@i_451& (0+255),b
 10014  0008A4  D001               	goto	l9561
 10015  0008A6  D00C               	goto	l9565
 10016  0008A8                     l9561:
 10017                           
 10018                           ; BSR set to: 0
 10019  0008A8  0E68               	movlw	104
 10020  0008AA  0100               	movlb	0	; () banked
 10021  0008AC  6FC4               	movwf	??_UI& (0+255),b
 10022  0008AE  0EE4               	movlw	228
 10023  0008B0                     u10237:
 10024  0008B0  2EE8               	decfsz	wreg,f,c
 10025  0008B2  D7FE               	bra	u10237
 10026  0008B4  2FC4               	decfsz	??_UI& (0+255),f,b
 10027  0008B6  D7FC               	bra	u10237
 10028  0008B8  F000               	nop	
 10029  0008BA  0100               	movlb	0	; () banked
 10030  0008BC  2BD5               	incf	UI@i_451& (0+255),f,b
 10031  0008BE  D7EF               	goto	l9557
 10032  0008C0                     l9565:
 10033                           
 10034                           ; BSR set to: 0
 10035  0008C0  0100               	movlb	0	; () banked
 10036  0008C2  51F8               	movf	_logstate& (0+255),w,b
 10037  0008C4  0100               	movlb	0	; () banked
 10038  0008C6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10039  0008C8  B4D8               	btfsc	status,2,c
 10040  0008CA  0012               	return	
 10041  0008CC                     l9569:
 10042  0008CC  0100               	movlb	0	; () banked
 10043  0008CE  51F8               	movf	_logstate& (0+255),w,b
 10044  0008D0  0100               	movlb	0	; () banked
 10045  0008D2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10046  0008D4  B4D8               	btfsc	status,2,c
 10047  0008D6  0012               	return	
 10048  0008D8  D44A               	goto	l9265
 10049  0008DA                     __end_of_UI:
 10050                           	opt stack 0
 10051                           tblptru	equ	0xFF8
 10052                           tblptrh	equ	0xFF7
 10053                           tblptrl	equ	0xFF6
 10054                           tablat	equ	0xFF5
 10055                           prodh	equ	0xFF4
 10056                           prodl	equ	0xFF3
 10057                           intcon	equ	0xFF2
 10058                           intcon2	equ	0xFF1
 10059                           intcon3	equ	0xFF0
 10060                           postinc0	equ	0xFEE
 10061                           wreg	equ	0xFE8
 10062                           postdec1	equ	0xFE5
 10063                           fsr1l	equ	0xFE1
 10064                           indf2	equ	0xFDF
 10065                           postinc2	equ	0xFDE
 10066                           postdec2	equ	0xFDD
 10067                           fsr2h	equ	0xFDA
 10068                           fsr2l	equ	0xFD9
 10069                           status	equ	0xFD8
 10070                           
 10071 ;; *************** function _printRTC *****************
 10072 ;; Defined at:
 10073 ;;		line 63 in file "RTC.c"
 10074 ;; Parameters:    Size  Location     Type
 10075 ;;		None
 10076 ;; Auto vars:     Size  Location     Type
 10077 ;;  i               2   66[BANK0 ] int 
 10078 ;;  INT_time       14   46[BANK0 ] int [7]
 10079 ;;  month           4   62[BANK0 ] unsigned char [4]
 10080 ;;  RTC_month       2   60[BANK0 ] int 
 10081 ;; Return value:  Size  Location     Type
 10082 ;;                  1    wreg      void 
 10083 ;; Registers used:
 10084 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10085 ;; Tracked objects:
 10086 ;;		On entry : 0/0
 10087 ;;		On exit  : 0/0
 10088 ;;		Unchanged: 0/0
 10089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10091 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10092 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10093 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10094 ;;Total ram usage:       25 bytes
 10095 ;; Hardware stack levels used:    1
 10096 ;; Hardware stack levels required when called:   10
 10097 ;; This function calls:
 10098 ;;		_getRTC
 10099 ;;		_lcdInst
 10100 ;;		_printf
 10101 ;;		_strcpy
 10102 ;; This function is called by:
 10103 ;;		_UI
 10104 ;;		_change_state_to_menu_start
 10105 ;; This function uses a non-reentrant model
 10106 ;;
 10107                           
 10108                           	psect	text28
 10109  002CC6                     __ptext28:
 10110                           	opt stack 0
 10111  002CC6                     _printRTC:
 10112                           	opt stack 18
 10113                           
 10114                           ;RTC.c: 64: getRTC();
 10115                           
 10116                           ; BSR set to: 0
 10117                           ;incstack = 0
 10118  002CC6  ECE5  F025         	call	_getRTC	;wreg free
 10119                           
 10120                           ;RTC.c: 65: char month[] = "MMM";
 10121  002CCA  C14D  F0BE         	movff	printRTC@F3237,printRTC@month
 10122  002CCE  C14E  F0BF         	movff	printRTC@F3237+1,printRTC@month+1
 10123  002CD2  C14F  F0C0         	movff	printRTC@F3237+2,printRTC@month+2
 10124  002CD6  C150  F0C1         	movff	printRTC@F3237+3,printRTC@month+3
 10125                           
 10126                           ;RTC.c: 66: int INT_time[7];
 10127                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 10128  002CDA  0E00               	movlw	0
 10129  002CDC  0100               	movlb	0	; () banked
 10130  002CDE  6FC3               	movwf	(printRTC@i+1)& (0+255),b
 10131  002CE0  0E00               	movlw	0
 10132  002CE2  6FC2               	movwf	printRTC@i& (0+255),b
 10133                           
 10134                           ; BSR set to: 0
 10135  002CE4  0100               	movlb	0	; () banked
 10136  002CE6  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10137  002CE8  D008               	goto	l7119
 10138  002CEA  0100               	movlb	0	; () banked
 10139  002CEC  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10140  002CEE  E146               	bnz	l627
 10141  002CF0  0E07               	movlw	7
 10142  002CF2  0100               	movlb	0	; () banked
 10143  002CF4  5DC2               	subwf	printRTC@i& (0+255),w,b
 10144  002CF6  B0D8               	btfsc	status,0,c
 10145  002CF8  D041               	goto	l627
 10146  002CFA                     l7119:
 10147                           
 10148                           ; BSR set to: 0
 10149                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 10150  002CFA  0E1C               	movlw	low _time
 10151  002CFC  0100               	movlb	0	; () banked
 10152  002CFE  25C2               	addwf	printRTC@i& (0+255),w,b
 10153  002D00  6ED9               	movwf	fsr2l,c
 10154  002D02  0E01               	movlw	high _time
 10155  002D04  0100               	movlb	0	; () banked
 10156  002D06  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10157  002D08  6EDA               	movwf	fsr2h,c
 10158  002D0A  50DF               	movf	indf2,w,c
 10159  002D0C  0100               	movlb	0	; () banked
 10160  002D0E  6FAB               	movwf	??_printRTC& (0+255),b
 10161  002D10  0100               	movlb	0	; () banked
 10162  002D12  3BAB               	swapf	??_printRTC& (0+255),f,b
 10163  002D14  0E0F               	movlw	15
 10164  002D16  17AB               	andwf	??_printRTC& (0+255),f,b
 10165  002D18  0E0F               	movlw	15
 10166  002D1A  0100               	movlb	0	; () banked
 10167  002D1C  17AB               	andwf	??_printRTC& (0+255),f,b
 10168  002D1E  0100               	movlb	0	; () banked
 10169  002D20  51AB               	movf	??_printRTC& (0+255),w,b
 10170  002D22  0D0A               	mullw	10
 10171  002D24  0E1C               	movlw	low _time
 10172  002D26  0100               	movlb	0	; () banked
 10173  002D28  25C2               	addwf	printRTC@i& (0+255),w,b
 10174  002D2A  6ED9               	movwf	fsr2l,c
 10175  002D2C  0E01               	movlw	high _time
 10176  002D2E  0100               	movlb	0	; () banked
 10177  002D30  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10178  002D32  6EDA               	movwf	fsr2h,c
 10179  002D34  50DF               	movf	indf2,w,c
 10180  002D36  0B0F               	andlw	15
 10181  002D38  0100               	movlb	0	; () banked
 10182  002D3A  6FAC               	movwf	(??_printRTC+1)& (0+255),b
 10183  002D3C  6BAD               	clrf	(??_printRTC+2)& (0+255),b
 10184  002D3E  50F3               	movf	prodl,w,c
 10185  002D40  0100               	movlb	0	; () banked
 10186  002D42  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
 10187  002D44  50F4               	movf	prodh,w,c
 10188  002D46  0100               	movlb	0	; () banked
 10189  002D48  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
 10190  002D4A  90D8               	bcf	status,0,c
 10191  002D4C  0100               	movlb	0	; () banked
 10192  002D4E  35C2               	rlcf	printRTC@i& (0+255),w,b
 10193  002D50  6ED9               	movwf	fsr2l,c
 10194  002D52  0100               	movlb	0	; () banked
 10195  002D54  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
 10196  002D56  6EDA               	movwf	fsr2h,c
 10197  002D58  0EAE               	movlw	low printRTC@INT_time
 10198  002D5A  26D9               	addwf	fsr2l,f,c
 10199  002D5C  0E00               	movlw	high printRTC@INT_time
 10200  002D5E  22DA               	addwfc	fsr2h,f,c
 10201  002D60  C0AC  FFDE         	movff	??_printRTC+1,postinc2
 10202  002D64  C0AD  FFDD         	movff	??_printRTC+2,postdec2
 10203                           
 10204                           ; BSR set to: 0
 10205  002D68  0100               	movlb	0	; () banked
 10206  002D6A  4BC2               	infsnz	printRTC@i& (0+255),f,b
 10207  002D6C  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
 10208                           
 10209                           ; BSR set to: 0
 10210  002D6E  0100               	movlb	0	; () banked
 10211  002D70  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10212  002D72  D7C3               	goto	l7119
 10213  002D74  0100               	movlb	0	; () banked
 10214  002D76  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10215  002D78  E101               	bnz	u5860
 10216  002D7A  D7BA               	goto	L9
 10217  002D7C                     u5860:
 10218  002D7C                     l627:
 10219                           
 10220                           ; BSR set to: 0
 10221                           ;RTC.c: 69: }
 10222                           ;RTC.c: 70: int RTC_month = INT_time[5];
 10223  002D7C  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
 10224  002D80  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
 10225                           
 10226                           ;RTC.c: 72: switch(RTC_month){
 10227  002D84  D0B4               	goto	l7151
 10228  002D86                     l7125:
 10229                           
 10230                           ; BSR set to: 0
 10231                           ;RTC.c: 74: strcpy(month, "JAN");
 10232  002D86  0EBE               	movlw	low printRTC@month
 10233  002D88  0100               	movlb	0	; () banked
 10234  002D8A  6F80               	movwf	strcpy@to& (0+255),b
 10235  002D8C  0E00               	movlw	high printRTC@month
 10236  002D8E  0100               	movlb	0	; () banked
 10237  002D90  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10238  002D92  0EDA               	movlw	low STR_8
 10239  002D94  0100               	movlb	0	; () banked
 10240  002D96  6F82               	movwf	strcpy@from& (0+255),b
 10241  002D98  0EFF               	movlw	high STR_8
 10242  002D9A  0100               	movlb	0	; () banked
 10243  002D9C  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10244  002D9E  EC96  F02A         	call	_strcpy	;wreg free
 10245                           
 10246                           ;RTC.c: 75: break;
 10247  002DA2  D0D4               	goto	l7153
 10248  002DA4                     l7127:
 10249                           
 10250                           ;RTC.c: 77: strcpy(month, "FEB");
 10251  002DA4  0EBE               	movlw	low printRTC@month
 10252  002DA6  0100               	movlb	0	; () banked
 10253  002DA8  6F80               	movwf	strcpy@to& (0+255),b
 10254  002DAA  0E00               	movlw	high printRTC@month
 10255  002DAC  0100               	movlb	0	; () banked
 10256  002DAE  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10257  002DB0  0ECA               	movlw	low STR_9
 10258  002DB2  0100               	movlb	0	; () banked
 10259  002DB4  6F82               	movwf	strcpy@from& (0+255),b
 10260  002DB6  0EFF               	movlw	high STR_9
 10261  002DB8  0100               	movlb	0	; () banked
 10262  002DBA  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10263  002DBC  EC96  F02A         	call	_strcpy	;wreg free
 10264                           
 10265                           ;RTC.c: 78: break;
 10266  002DC0  D0C5               	goto	l7153
 10267  002DC2                     l7129:
 10268                           
 10269                           ;RTC.c: 80: strcpy(month, "MAR");
 10270  002DC2  0EBE               	movlw	low printRTC@month
 10271  002DC4  0100               	movlb	0	; () banked
 10272  002DC6  6F80               	movwf	strcpy@to& (0+255),b
 10273  002DC8  0E00               	movlw	high printRTC@month
 10274  002DCA  0100               	movlb	0	; () banked
 10275  002DCC  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10276  002DCE  0EE6               	movlw	low STR_10
 10277  002DD0  0100               	movlb	0	; () banked
 10278  002DD2  6F82               	movwf	strcpy@from& (0+255),b
 10279  002DD4  0EFF               	movlw	high STR_10
 10280  002DD6  0100               	movlb	0	; () banked
 10281  002DD8  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10282  002DDA  EC96  F02A         	call	_strcpy	;wreg free
 10283                           
 10284                           ;RTC.c: 81: break;
 10285  002DDE  D0B6               	goto	l7153
 10286  002DE0                     l7131:
 10287                           
 10288                           ;RTC.c: 83: strcpy(month, "APR");
 10289  002DE0  0EBE               	movlw	low printRTC@month
 10290  002DE2  0100               	movlb	0	; () banked
 10291  002DE4  6F80               	movwf	strcpy@to& (0+255),b
 10292  002DE6  0E00               	movlw	high printRTC@month
 10293  002DE8  0100               	movlb	0	; () banked
 10294  002DEA  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10295  002DEC  0EEA               	movlw	low STR_11
 10296  002DEE  0100               	movlb	0	; () banked
 10297  002DF0  6F82               	movwf	strcpy@from& (0+255),b
 10298  002DF2  0EFF               	movlw	high STR_11
 10299  002DF4  0100               	movlb	0	; () banked
 10300  002DF6  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10301  002DF8  EC96  F02A         	call	_strcpy	;wreg free
 10302                           
 10303                           ;RTC.c: 84: break;
 10304  002DFC  D0A7               	goto	l7153
 10305  002DFE                     l7133:
 10306                           
 10307                           ;RTC.c: 86: strcpy(month, "MAY");
 10308  002DFE  0EBE               	movlw	low printRTC@month
 10309  002E00  0100               	movlb	0	; () banked
 10310  002E02  6F80               	movwf	strcpy@to& (0+255),b
 10311  002E04  0E00               	movlw	high printRTC@month
 10312  002E06  0100               	movlb	0	; () banked
 10313  002E08  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10314  002E0A  0EFA               	movlw	low STR_12
 10315  002E0C  0100               	movlb	0	; () banked
 10316  002E0E  6F82               	movwf	strcpy@from& (0+255),b
 10317  002E10  0EFF               	movlw	high STR_12
 10318  002E12  0100               	movlb	0	; () banked
 10319  002E14  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10320  002E16  EC96  F02A         	call	_strcpy	;wreg free
 10321                           
 10322                           ;RTC.c: 87: break;
 10323  002E1A  D098               	goto	l7153
 10324  002E1C                     l7135:
 10325                           
 10326                           ;RTC.c: 89: strcpy(month, "JUN");
 10327  002E1C  0EBE               	movlw	low printRTC@month
 10328  002E1E  0100               	movlb	0	; () banked
 10329  002E20  6F80               	movwf	strcpy@to& (0+255),b
 10330  002E22  0E00               	movlw	high printRTC@month
 10331  002E24  0100               	movlb	0	; () banked
 10332  002E26  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10333  002E28  0EDE               	movlw	low STR_13
 10334  002E2A  0100               	movlb	0	; () banked
 10335  002E2C  6F82               	movwf	strcpy@from& (0+255),b
 10336  002E2E  0EFF               	movlw	high STR_13
 10337  002E30  0100               	movlb	0	; () banked
 10338  002E32  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10339  002E34  EC96  F02A         	call	_strcpy	;wreg free
 10340                           
 10341                           ;RTC.c: 90: break;
 10342  002E38  D089               	goto	l7153
 10343  002E3A                     l7137:
 10344                           
 10345                           ;RTC.c: 92: strcpy(month, "JUL");
 10346  002E3A  0EBE               	movlw	low printRTC@month
 10347  002E3C  0100               	movlb	0	; () banked
 10348  002E3E  6F80               	movwf	strcpy@to& (0+255),b
 10349  002E40  0E00               	movlw	high printRTC@month
 10350  002E42  0100               	movlb	0	; () banked
 10351  002E44  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10352  002E46  0ED6               	movlw	low STR_14
 10353  002E48  0100               	movlb	0	; () banked
 10354  002E4A  6F82               	movwf	strcpy@from& (0+255),b
 10355  002E4C  0EFF               	movlw	high STR_14
 10356  002E4E  0100               	movlb	0	; () banked
 10357  002E50  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10358  002E52  EC96  F02A         	call	_strcpy	;wreg free
 10359                           
 10360                           ;RTC.c: 93: break;
 10361  002E56  D07A               	goto	l7153
 10362  002E58                     l7139:
 10363                           
 10364                           ;RTC.c: 95: strcpy(month, "AUG");
 10365  002E58  0EBE               	movlw	low printRTC@month
 10366  002E5A  0100               	movlb	0	; () banked
 10367  002E5C  6F80               	movwf	strcpy@to& (0+255),b
 10368  002E5E  0E00               	movlw	high printRTC@month
 10369  002E60  0100               	movlb	0	; () banked
 10370  002E62  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10371  002E64  0ED2               	movlw	low STR_15
 10372  002E66  0100               	movlb	0	; () banked
 10373  002E68  6F82               	movwf	strcpy@from& (0+255),b
 10374  002E6A  0EFF               	movlw	high STR_15
 10375  002E6C  0100               	movlb	0	; () banked
 10376  002E6E  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10377  002E70  EC96  F02A         	call	_strcpy	;wreg free
 10378                           
 10379                           ;RTC.c: 96: break;
 10380  002E74  D06B               	goto	l7153
 10381  002E76                     l7141:
 10382                           
 10383                           ;RTC.c: 98: strcpy(month, "SEP");
 10384  002E76  0EBE               	movlw	low printRTC@month
 10385  002E78  0100               	movlb	0	; () banked
 10386  002E7A  6F80               	movwf	strcpy@to& (0+255),b
 10387  002E7C  0E00               	movlw	high printRTC@month
 10388  002E7E  0100               	movlb	0	; () banked
 10389  002E80  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10390  002E82  0EE2               	movlw	low STR_16
 10391  002E84  0100               	movlb	0	; () banked
 10392  002E86  6F82               	movwf	strcpy@from& (0+255),b
 10393  002E88  0EFF               	movlw	high STR_16
 10394  002E8A  0100               	movlb	0	; () banked
 10395  002E8C  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10396  002E8E  EC96  F02A         	call	_strcpy	;wreg free
 10397                           
 10398                           ;RTC.c: 99: break;
 10399  002E92  D05C               	goto	l7153
 10400  002E94                     l7143:
 10401                           
 10402                           ;RTC.c: 101: strcpy(month, "OCT");
 10403  002E94  0EBE               	movlw	low printRTC@month
 10404  002E96  0100               	movlb	0	; () banked
 10405  002E98  6F80               	movwf	strcpy@to& (0+255),b
 10406  002E9A  0E00               	movlw	high printRTC@month
 10407  002E9C  0100               	movlb	0	; () banked
 10408  002E9E  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10409  002EA0  0EF2               	movlw	low STR_17
 10410  002EA2  0100               	movlb	0	; () banked
 10411  002EA4  6F82               	movwf	strcpy@from& (0+255),b
 10412  002EA6  0EFF               	movlw	high STR_17
 10413  002EA8  0100               	movlb	0	; () banked
 10414  002EAA  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10415  002EAC  EC96  F02A         	call	_strcpy	;wreg free
 10416                           
 10417                           ;RTC.c: 102: break;
 10418  002EB0  D04D               	goto	l7153
 10419  002EB2                     l7145:
 10420                           
 10421                           ;RTC.c: 104: strcpy(month, "NOV");
 10422  002EB2  0EBE               	movlw	low printRTC@month
 10423  002EB4  0100               	movlb	0	; () banked
 10424  002EB6  6F80               	movwf	strcpy@to& (0+255),b
 10425  002EB8  0E00               	movlw	high printRTC@month
 10426  002EBA  0100               	movlb	0	; () banked
 10427  002EBC  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10428  002EBE  0EF6               	movlw	low STR_18
 10429  002EC0  0100               	movlb	0	; () banked
 10430  002EC2  6F82               	movwf	strcpy@from& (0+255),b
 10431  002EC4  0EFF               	movlw	high STR_18
 10432  002EC6  0100               	movlb	0	; () banked
 10433  002EC8  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10434  002ECA  EC96  F02A         	call	_strcpy	;wreg free
 10435                           
 10436                           ;RTC.c: 105: break;
 10437  002ECE  D03E               	goto	l7153
 10438  002ED0                     l7147:
 10439                           
 10440                           ;RTC.c: 107: strcpy(month, "DEC");
 10441  002ED0  0EBE               	movlw	low printRTC@month
 10442  002ED2  0100               	movlb	0	; () banked
 10443  002ED4  6F80               	movwf	strcpy@to& (0+255),b
 10444  002ED6  0E00               	movlw	high printRTC@month
 10445  002ED8  0100               	movlb	0	; () banked
 10446  002EDA  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10447  002EDC  0ECE               	movlw	low STR_19
 10448  002EDE  0100               	movlb	0	; () banked
 10449  002EE0  6F82               	movwf	strcpy@from& (0+255),b
 10450  002EE2  0EFF               	movlw	high STR_19
 10451  002EE4  0100               	movlb	0	; () banked
 10452  002EE6  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10453  002EE8  EC96  F02A         	call	_strcpy	;wreg free
 10454                           
 10455                           ;RTC.c: 109: }
 10456                           
 10457                           ;RTC.c: 108: break;
 10458  002EEC  D02F               	goto	l7153
 10459  002EEE                     l7151:
 10460  002EEE  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
 10461  002EF2  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
 10462                           
 10463                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10464                           ; Switch size 1, requested type "space"
 10465                           ; Number of cases is 1, Range of values is 0 to 0
 10466                           ; switch strategies available:
 10467                           ; Name         Instructions Cycles
 10468                           ; simple_byte            4     3 (average)
 10469                           ;	Chosen strategy is simple_byte
 10470  002EF6  0100               	movlb	0	; () banked
 10471  002EF8  51AC               	movf	(??_printRTC+1)& (0+255),w,b
 10472  002EFA  0A00               	xorlw	0	; case 0
 10473  002EFC  A4D8               	btfss	status,2,c
 10474  002EFE  D026               	goto	l7153
 10475                           
 10476                           ; BSR set to: 0
 10477                           ; Switch size 1, requested type "space"
 10478                           ; Number of cases is 12, Range of values is 1 to 12
 10479                           ; switch strategies available:
 10480                           ; Name         Instructions Cycles
 10481                           ; simple_byte           37    19 (average)
 10482                           ;	Chosen strategy is simple_byte
 10483  002F00  0100               	movlb	0	; () banked
 10484  002F02  51AB               	movf	??_printRTC& (0+255),w,b
 10485  002F04  0A01               	xorlw	1	; case 1
 10486  002F06  B4D8               	btfsc	status,2,c
 10487  002F08  D73E               	goto	l7125
 10488  002F0A  0A03               	xorlw	3	; case 2
 10489  002F0C  B4D8               	btfsc	status,2,c
 10490  002F0E  D74A               	goto	l7127
 10491  002F10  0A01               	xorlw	1	; case 3
 10492  002F12  B4D8               	btfsc	status,2,c
 10493  002F14  D756               	goto	l7129
 10494  002F16  0A07               	xorlw	7	; case 4
 10495  002F18  B4D8               	btfsc	status,2,c
 10496  002F1A  D762               	goto	l7131
 10497  002F1C  0A01               	xorlw	1	; case 5
 10498  002F1E  B4D8               	btfsc	status,2,c
 10499  002F20  D76E               	goto	l7133
 10500  002F22  0A03               	xorlw	3	; case 6
 10501  002F24  B4D8               	btfsc	status,2,c
 10502  002F26  D77A               	goto	l7135
 10503  002F28  0A01               	xorlw	1	; case 7
 10504  002F2A  B4D8               	btfsc	status,2,c
 10505  002F2C  D786               	goto	l7137
 10506  002F2E  0A0F               	xorlw	15	; case 8
 10507  002F30  B4D8               	btfsc	status,2,c
 10508  002F32  D792               	goto	l7139
 10509  002F34  0A01               	xorlw	1	; case 9
 10510  002F36  B4D8               	btfsc	status,2,c
 10511  002F38  D79E               	goto	l7141
 10512  002F3A  0A03               	xorlw	3	; case 10
 10513  002F3C  B4D8               	btfsc	status,2,c
 10514  002F3E  D7AA               	goto	l7143
 10515  002F40  0A01               	xorlw	1	; case 11
 10516  002F42  B4D8               	btfsc	status,2,c
 10517  002F44  D7B6               	goto	l7145
 10518  002F46  0A07               	xorlw	7	; case 12
 10519  002F48  B4D8               	btfsc	status,2,c
 10520  002F4A  D7C2               	goto	l7147
 10521  002F4C                     l7153:
 10522                           
 10523                           ;RTC.c: 110: lcdInst(0b10000000);;
 10524  002F4C  0E80               	movlw	128
 10525  002F4E  EC39  F02D         	call	_lcdInst
 10526                           
 10527                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 10528  002F52  0EA6               	movlw	low STR_21
 10529  002F54  0100               	movlb	0	; () banked
 10530  002F56  6F8E               	movwf	printf@f& (0+255),b
 10531  002F58  0EFA               	movlw	high STR_21
 10532  002F5A  0100               	movlb	0	; () banked
 10533  002F5C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10534  002F5E  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
 10535  002F62  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
 10536  002F66  0EBE               	movlw	low printRTC@month
 10537  002F68  0100               	movlb	0	; () banked
 10538  002F6A  6F92               	movwf	(?_printf+4)& (0+255),b
 10539  002F6C  0E00               	movlw	high printRTC@month
 10540  002F6E  0100               	movlb	0	; () banked
 10541  002F70  6F93               	movwf	(?_printf+5)& (0+255),b
 10542  002F72  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
 10543  002F76  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
 10544  002F7A  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
 10545  002F7E  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
 10546  002F82  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
 10547  002F86  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
 10548  002F8A  EC8F  F00D         	call	_printf	;wreg free
 10549  002F8E  0012               	return		;funcret
 10550  002F90                     __end_of_printRTC:
 10551                           	opt stack 0
 10552                           tblptru	equ	0xFF8
 10553                           tblptrh	equ	0xFF7
 10554                           tblptrl	equ	0xFF6
 10555                           tablat	equ	0xFF5
 10556                           prodh	equ	0xFF4
 10557                           prodl	equ	0xFF3
 10558                           intcon	equ	0xFF2
 10559                           intcon2	equ	0xFF1
 10560                           intcon3	equ	0xFF0
 10561                           postinc0	equ	0xFEE
 10562                           wreg	equ	0xFE8
 10563                           postdec1	equ	0xFE5
 10564                           fsr1l	equ	0xFE1
 10565                           indf2	equ	0xFDF
 10566                           postinc2	equ	0xFDE
 10567                           postdec2	equ	0xFDD
 10568                           fsr2h	equ	0xFDA
 10569                           fsr2l	equ	0xFD9
 10570                           status	equ	0xFD8
 10571                           
 10572 ;; *************** function _strcpy *****************
 10573 ;; Defined at:
 10574 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 10575 ;; Parameters:    Size  Location     Type
 10576 ;;  to              2    0[BANK0 ] PTR unsigned char 
 10577 ;;		 -> printRTC@month(4), UI@month(4), 
 10578 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 10579 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 10580 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 10581 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 10582 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 10583 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 10584 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 10585 ;;		 -> STR_8(4), 
 10586 ;; Auto vars:     Size  Location     Type
 10587 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 10588 ;;		 -> printRTC@month(4), UI@month(4), 
 10589 ;; Return value:  Size  Location     Type
 10590 ;;                  2    0[BANK0 ] PTR unsigned char 
 10591 ;; Registers used:
 10592 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10593 ;; Tracked objects:
 10594 ;;		On entry : 0/0
 10595 ;;		On exit  : 0/0
 10596 ;;		Unchanged: 0/0
 10597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10598 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10599 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10601 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10602 ;;Total ram usage:        6 bytes
 10603 ;; Hardware stack levels used:    1
 10604 ;; Hardware stack levels required when called:    7
 10605 ;; This function calls:
 10606 ;;		Nothing
 10607 ;; This function is called by:
 10608 ;;		_UI
 10609 ;;		_printRTC
 10610 ;; This function uses a non-reentrant model
 10611 ;;
 10612                           
 10613                           	psect	text29
 10614  00552C                     __ptext29:
 10615                           	opt stack 0
 10616  00552C                     _strcpy:
 10617                           	opt stack 20
 10618                           
 10619                           ;incstack = 0
 10620  00552C  C080  F084         	movff	strcpy@to,strcpy@cp
 10621  005530  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
 10622  005534  D006               	goto	l6817
 10623  005536                     l6815:
 10624  005536  0100               	movlb	0	; () banked
 10625  005538  4B84               	infsnz	strcpy@cp& (0+255),f,b
 10626  00553A  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
 10627  00553C  0100               	movlb	0	; () banked
 10628  00553E  4B82               	infsnz	strcpy@from& (0+255),f,b
 10629  005540  2B83               	incf	(strcpy@from+1)& (0+255),f,b
 10630  005542                     l6817:
 10631  005542  C082  FFF6         	movff	strcpy@from,tblptrl
 10632  005546  C083  FFF7         	movff	strcpy@from+1,tblptrh
 10633  00554A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10634  00554A  6AF8               	clrf	tblptru,c
 10635  00554C                     	endif
 10636  00554C                     	if	0	;tblptru may be non-zero
 10637  00554C                     	endif
 10638  00554C  C084  FFD9         	movff	strcpy@cp,fsr2l
 10639  005550  C085  FFDA         	movff	strcpy@cp+1,fsr2h
 10640  005554  0008               	tblrd		*
 10641  005556  CFF5 FFDF          	movff	tablat,indf2
 10642  00555A  50DF               	movf	indf2,w,c
 10643  00555C  B4D8               	btfsc	status,2,c
 10644  00555E  0012               	return	
 10645  005560  D7EA               	goto	l6815
 10646  005562                     __end_of_strcpy:
 10647                           	opt stack 0
 10648                           tblptru	equ	0xFF8
 10649                           tblptrh	equ	0xFF7
 10650                           tblptrl	equ	0xFF6
 10651                           tablat	equ	0xFF5
 10652                           prodh	equ	0xFF4
 10653                           prodl	equ	0xFF3
 10654                           intcon	equ	0xFF2
 10655                           intcon2	equ	0xFF1
 10656                           intcon3	equ	0xFF0
 10657                           postinc0	equ	0xFEE
 10658                           wreg	equ	0xFE8
 10659                           postdec1	equ	0xFE5
 10660                           fsr1l	equ	0xFE1
 10661                           indf2	equ	0xFDF
 10662                           postinc2	equ	0xFDE
 10663                           postdec2	equ	0xFDD
 10664                           fsr2h	equ	0xFDA
 10665                           fsr2l	equ	0xFD9
 10666                           status	equ	0xFD8
 10667                           
 10668 ;; *************** function _getRTC *****************
 10669 ;; Defined at:
 10670 ;;		line 44 in file "RTC.c"
 10671 ;; Parameters:    Size  Location     Type
 10672 ;;		None
 10673 ;; Auto vars:     Size  Location     Type
 10674 ;;  i               2    3[BANK0 ] int 
 10675 ;; Return value:  Size  Location     Type
 10676 ;;                  1    wreg      void 
 10677 ;; Registers used:
 10678 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10679 ;; Tracked objects:
 10680 ;;		On entry : 0/0
 10681 ;;		On exit  : 0/0
 10682 ;;		Unchanged: 0/0
 10683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10685 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10687 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10688 ;;Total ram usage:        2 bytes
 10689 ;; Hardware stack levels used:    1
 10690 ;; Hardware stack levels required when called:    9
 10691 ;; This function calls:
 10692 ;;		_I2C_Master_Read
 10693 ;;		_I2C_Master_Start
 10694 ;;		_I2C_Master_Stop
 10695 ;;		_I2C_Master_Write
 10696 ;; This function is called by:
 10697 ;;		_printRTC
 10698 ;;		_initSortTimer
 10699 ;; This function uses a non-reentrant model
 10700 ;;
 10701                           
 10702                           	psect	text30
 10703  004BCA                     __ptext30:
 10704                           	opt stack 0
 10705  004BCA                     _getRTC:
 10706                           	opt stack 18
 10707                           
 10708                           ;RTC.c: 48: I2C_Master_Start();
 10709                           
 10710                           ;incstack = 0
 10711  004BCA  EC5F  F02D         	call	_I2C_Master_Start	;wreg free
 10712                           
 10713                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 10714  004BCE  0E00               	movlw	0
 10715  004BD0  0100               	movlb	0	; () banked
 10716  004BD2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10717  004BD4  0ED0               	movlw	208
 10718  004BD6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10719  004BD8  EC4D  F02D         	call	_I2C_Master_Write	;wreg free
 10720                           
 10721                           ;RTC.c: 50: I2C_Master_Write(0x00);
 10722  004BDC  0E00               	movlw	0
 10723  004BDE  0100               	movlb	0	; () banked
 10724  004BE0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10725  004BE2  0E00               	movlw	0
 10726  004BE4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10727  004BE6  EC4D  F02D         	call	_I2C_Master_Write	;wreg free
 10728                           
 10729                           ;RTC.c: 51: I2C_Master_Stop();
 10730  004BEA  EC5B  F02D         	call	_I2C_Master_Stop	;wreg free
 10731                           
 10732                           ;RTC.c: 54: I2C_Master_Start();
 10733  004BEE  EC5F  F02D         	call	_I2C_Master_Start	;wreg free
 10734                           
 10735                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 10736  004BF2  0E00               	movlw	0
 10737  004BF4  0100               	movlb	0	; () banked
 10738  004BF6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10739  004BF8  0ED1               	movlw	209
 10740  004BFA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10741  004BFC  EC4D  F02D         	call	_I2C_Master_Write	;wreg free
 10742                           
 10743                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 10744  004C00  0E00               	movlw	0
 10745  004C02  0100               	movlb	0	; () banked
 10746  004C04  6F84               	movwf	(getRTC@i+1)& (0+255),b
 10747  004C06  0E00               	movlw	0
 10748  004C08  6F83               	movwf	getRTC@i& (0+255),b
 10749  004C0A                     l6823:
 10750                           
 10751                           ; BSR set to: 0
 10752  004C0A  0100               	movlb	0	; () banked
 10753  004C0C  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
 10754  004C0E  D008               	goto	l6827
 10755  004C10  0100               	movlb	0	; () banked
 10756  004C12  5184               	movf	(getRTC@i+1)& (0+255),w,b
 10757  004C14  E115               	bnz	l6833
 10758  004C16  0E06               	movlw	6
 10759  004C18  0100               	movlb	0	; () banked
 10760  004C1A  5D83               	subwf	getRTC@i& (0+255),w,b
 10761  004C1C  B0D8               	btfsc	status,0,c
 10762  004C1E  D010               	goto	l6833
 10763  004C20                     l6827:
 10764                           
 10765                           ; BSR set to: 0
 10766                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 10767  004C20  0E1C               	movlw	low _time
 10768  004C22  0100               	movlb	0	; () banked
 10769  004C24  2583               	addwf	getRTC@i& (0+255),w,b
 10770  004C26  6ED9               	movwf	fsr2l,c
 10771  004C28  0E01               	movlw	high _time
 10772  004C2A  0100               	movlb	0	; () banked
 10773  004C2C  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
 10774  004C2E  6EDA               	movwf	fsr2h,c
 10775  004C30  0E01               	movlw	1
 10776  004C32  ECEE  F02B         	call	_I2C_Master_Read
 10777  004C36  6EDF               	movwf	indf2,c
 10778  004C38  0100               	movlb	0	; () banked
 10779  004C3A  4B83               	infsnz	getRTC@i& (0+255),f,b
 10780  004C3C  2B84               	incf	(getRTC@i+1)& (0+255),f,b
 10781  004C3E  D7E5               	goto	l6823
 10782  004C40                     l6833:
 10783                           
 10784                           ; BSR set to: 0
 10785                           ;RTC.c: 58: }
 10786                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 10787  004C40  0E00               	movlw	0
 10788  004C42  ECEE  F02B         	call	_I2C_Master_Read
 10789  004C46  0101               	movlb	1	; () banked
 10790  004C48  6F22               	movwf	(_time+6)& (0+255),b
 10791                           
 10792                           ;RTC.c: 60: I2C_Master_Stop();
 10793  004C4A  EC5B  F02D         	call	_I2C_Master_Stop	;wreg free
 10794  004C4E  0012               	return		;funcret
 10795  004C50                     __end_of_getRTC:
 10796                           	opt stack 0
 10797                           tblptru	equ	0xFF8
 10798                           tblptrh	equ	0xFF7
 10799                           tblptrl	equ	0xFF6
 10800                           tablat	equ	0xFF5
 10801                           prodh	equ	0xFF4
 10802                           prodl	equ	0xFF3
 10803                           intcon	equ	0xFF2
 10804                           intcon2	equ	0xFF1
 10805                           intcon3	equ	0xFF0
 10806                           postinc0	equ	0xFEE
 10807                           wreg	equ	0xFE8
 10808                           postdec1	equ	0xFE5
 10809                           fsr1l	equ	0xFE1
 10810                           indf2	equ	0xFDF
 10811                           postinc2	equ	0xFDE
 10812                           postdec2	equ	0xFDD
 10813                           fsr2h	equ	0xFDA
 10814                           fsr2l	equ	0xFD9
 10815                           status	equ	0xFD8
 10816                           
 10817 ;; *************** function _I2C_Master_Write *****************
 10818 ;; Defined at:
 10819 ;;		line 49 in file "I2C.c"
 10820 ;; Parameters:    Size  Location     Type
 10821 ;;  d               2    1[BANK0 ] unsigned int 
 10822 ;; Auto vars:     Size  Location     Type
 10823 ;;		None
 10824 ;; Return value:  Size  Location     Type
 10825 ;;                  1    wreg      void 
 10826 ;; Registers used:
 10827 ;;		wreg, status,2, status,0, cstack
 10828 ;; Tracked objects:
 10829 ;;		On entry : 0/0
 10830 ;;		On exit  : 0/0
 10831 ;;		Unchanged: 0/0
 10832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10833 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10836 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10837 ;;Total ram usage:        2 bytes
 10838 ;; Hardware stack levels used:    1
 10839 ;; Hardware stack levels required when called:    8
 10840 ;; This function calls:
 10841 ;;		_I2C_Master_Wait
 10842 ;; This function is called by:
 10843 ;;		_loadRTC
 10844 ;;		_getRTC
 10845 ;; This function uses a non-reentrant model
 10846 ;;
 10847                           
 10848                           	psect	text31
 10849  005A9A                     __ptext31:
 10850                           	opt stack 0
 10851  005A9A                     _I2C_Master_Write:
 10852                           	opt stack 18
 10853                           
 10854                           ;I2C.c: 51: I2C_Master_Wait();
 10855                           
 10856                           ;incstack = 0
 10857  005A9A  EC1E  F02D         	call	_I2C_Master_Wait	;wreg free
 10858                           
 10859                           ;I2C.c: 52: SSPBUF = d;
 10860  005A9E  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 10861  005AA2  0012               	return		;funcret
 10862  005AA4                     __end_of_I2C_Master_Write:
 10863                           	opt stack 0
 10864                           tblptru	equ	0xFF8
 10865                           tblptrh	equ	0xFF7
 10866                           tblptrl	equ	0xFF6
 10867                           tablat	equ	0xFF5
 10868                           prodh	equ	0xFF4
 10869                           prodl	equ	0xFF3
 10870                           intcon	equ	0xFF2
 10871                           intcon2	equ	0xFF1
 10872                           intcon3	equ	0xFF0
 10873                           postinc0	equ	0xFEE
 10874                           wreg	equ	0xFE8
 10875                           postdec1	equ	0xFE5
 10876                           fsr1l	equ	0xFE1
 10877                           indf2	equ	0xFDF
 10878                           postinc2	equ	0xFDE
 10879                           postdec2	equ	0xFDD
 10880                           fsr2h	equ	0xFDA
 10881                           fsr2l	equ	0xFD9
 10882                           status	equ	0xFD8
 10883                           
 10884 ;; *************** function _I2C_Master_Stop *****************
 10885 ;; Defined at:
 10886 ;;		line 43 in file "I2C.c"
 10887 ;; Parameters:    Size  Location     Type
 10888 ;;		None
 10889 ;; Auto vars:     Size  Location     Type
 10890 ;;		None
 10891 ;; Return value:  Size  Location     Type
 10892 ;;                  1    wreg      void 
 10893 ;; Registers used:
 10894 ;;		wreg, status,2, status,0, cstack
 10895 ;; Tracked objects:
 10896 ;;		On entry : 0/0
 10897 ;;		On exit  : 0/0
 10898 ;;		Unchanged: 0/0
 10899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10904 ;;Total ram usage:        0 bytes
 10905 ;; Hardware stack levels used:    1
 10906 ;; Hardware stack levels required when called:    8
 10907 ;; This function calls:
 10908 ;;		_I2C_Master_Wait
 10909 ;; This function is called by:
 10910 ;;		_loadRTC
 10911 ;;		_getRTC
 10912 ;; This function uses a non-reentrant model
 10913 ;;
 10914                           
 10915                           	psect	text32
 10916  005AB6                     __ptext32:
 10917                           	opt stack 0
 10918  005AB6                     _I2C_Master_Stop:
 10919                           	opt stack 18
 10920                           
 10921                           ;I2C.c: 45: I2C_Master_Wait();
 10922                           
 10923                           ;incstack = 0
 10924  005AB6  EC1E  F02D         	call	_I2C_Master_Wait	;wreg free
 10925                           
 10926                           ;I2C.c: 46: PEN = 1;
 10927  005ABA  84C5               	bsf	4037,2,c	;volatile
 10928  005ABC  0012               	return		;funcret
 10929  005ABE                     __end_of_I2C_Master_Stop:
 10930                           	opt stack 0
 10931                           tblptru	equ	0xFF8
 10932                           tblptrh	equ	0xFF7
 10933                           tblptrl	equ	0xFF6
 10934                           tablat	equ	0xFF5
 10935                           prodh	equ	0xFF4
 10936                           prodl	equ	0xFF3
 10937                           intcon	equ	0xFF2
 10938                           intcon2	equ	0xFF1
 10939                           intcon3	equ	0xFF0
 10940                           postinc0	equ	0xFEE
 10941                           wreg	equ	0xFE8
 10942                           postdec1	equ	0xFE5
 10943                           fsr1l	equ	0xFE1
 10944                           indf2	equ	0xFDF
 10945                           postinc2	equ	0xFDE
 10946                           postdec2	equ	0xFDD
 10947                           fsr2h	equ	0xFDA
 10948                           fsr2l	equ	0xFD9
 10949                           status	equ	0xFD8
 10950                           
 10951 ;; *************** function _I2C_Master_Start *****************
 10952 ;; Defined at:
 10953 ;;		line 31 in file "I2C.c"
 10954 ;; Parameters:    Size  Location     Type
 10955 ;;		None
 10956 ;; Auto vars:     Size  Location     Type
 10957 ;;		None
 10958 ;; Return value:  Size  Location     Type
 10959 ;;                  1    wreg      void 
 10960 ;; Registers used:
 10961 ;;		wreg, status,2, status,0, cstack
 10962 ;; Tracked objects:
 10963 ;;		On entry : 0/0
 10964 ;;		On exit  : 0/0
 10965 ;;		Unchanged: 0/0
 10966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10970 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10971 ;;Total ram usage:        0 bytes
 10972 ;; Hardware stack levels used:    1
 10973 ;; Hardware stack levels required when called:    8
 10974 ;; This function calls:
 10975 ;;		_I2C_Master_Wait
 10976 ;; This function is called by:
 10977 ;;		_loadRTC
 10978 ;;		_getRTC
 10979 ;; This function uses a non-reentrant model
 10980 ;;
 10981                           
 10982                           	psect	text33
 10983  005ABE                     __ptext33:
 10984                           	opt stack 0
 10985  005ABE                     _I2C_Master_Start:
 10986                           	opt stack 18
 10987                           
 10988                           ;I2C.c: 33: I2C_Master_Wait();
 10989                           
 10990                           ;incstack = 0
 10991  005ABE  EC1E  F02D         	call	_I2C_Master_Wait	;wreg free
 10992                           
 10993                           ;I2C.c: 34: SEN = 1;
 10994  005AC2  80C5               	bsf	4037,0,c	;volatile
 10995  005AC4  0012               	return		;funcret
 10996  005AC6                     __end_of_I2C_Master_Start:
 10997                           	opt stack 0
 10998                           tblptru	equ	0xFF8
 10999                           tblptrh	equ	0xFF7
 11000                           tblptrl	equ	0xFF6
 11001                           tablat	equ	0xFF5
 11002                           prodh	equ	0xFF4
 11003                           prodl	equ	0xFF3
 11004                           intcon	equ	0xFF2
 11005                           intcon2	equ	0xFF1
 11006                           intcon3	equ	0xFF0
 11007                           postinc0	equ	0xFEE
 11008                           wreg	equ	0xFE8
 11009                           postdec1	equ	0xFE5
 11010                           fsr1l	equ	0xFE1
 11011                           indf2	equ	0xFDF
 11012                           postinc2	equ	0xFDE
 11013                           postdec2	equ	0xFDD
 11014                           fsr2h	equ	0xFDA
 11015                           fsr2l	equ	0xFD9
 11016                           status	equ	0xFD8
 11017                           
 11018 ;; *************** function _I2C_Master_Read *****************
 11019 ;; Defined at:
 11020 ;;		line 55 in file "I2C.c"
 11021 ;; Parameters:    Size  Location     Type
 11022 ;;  a               1    wreg     unsigned char 
 11023 ;; Auto vars:     Size  Location     Type
 11024 ;;  a               1    1[BANK0 ] unsigned char 
 11025 ;;  temp            1    2[BANK0 ] unsigned char 
 11026 ;; Return value:  Size  Location     Type
 11027 ;;                  1    wreg      unsigned char 
 11028 ;; Registers used:
 11029 ;;		wreg, status,2, status,0, cstack
 11030 ;; Tracked objects:
 11031 ;;		On entry : 0/0
 11032 ;;		On exit  : 0/0
 11033 ;;		Unchanged: 0/0
 11034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11036 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11038 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11039 ;;Total ram usage:        2 bytes
 11040 ;; Hardware stack levels used:    1
 11041 ;; Hardware stack levels required when called:    8
 11042 ;; This function calls:
 11043 ;;		_I2C_Master_Wait
 11044 ;; This function is called by:
 11045 ;;		_getRTC
 11046 ;; This function uses a non-reentrant model
 11047 ;;
 11048                           
 11049                           	psect	text34
 11050  0057DC                     __ptext34:
 11051                           	opt stack 0
 11052  0057DC                     _I2C_Master_Read:
 11053                           	opt stack 18
 11054                           
 11055                           ;incstack = 0
 11056                           ;I2C_Master_Read@a stored from wreg
 11057  0057DC  0100               	movlb	0	; () banked
 11058  0057DE  6F81               	movwf	I2C_Master_Read@a& (0+255),b
 11059                           
 11060                           ;I2C.c: 57: unsigned char temp;
 11061                           ;I2C.c: 58: I2C_Master_Wait();
 11062  0057E0  EC1E  F02D         	call	_I2C_Master_Wait	;wreg free
 11063                           
 11064                           ;I2C.c: 59: RCEN = 1;
 11065  0057E4  86C5               	bsf	4037,3,c	;volatile
 11066                           
 11067                           ;I2C.c: 60: I2C_Master_Wait();
 11068  0057E6  EC1E  F02D         	call	_I2C_Master_Wait	;wreg free
 11069                           
 11070                           ;I2C.c: 61: temp = SSPBUF;
 11071  0057EA  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
 11072                           
 11073                           ;I2C.c: 62: I2C_Master_Wait();
 11074  0057EE  EC1E  F02D         	call	_I2C_Master_Wait	;wreg free
 11075                           
 11076                           ;I2C.c: 63: ACKDT = (a)?0:1;
 11077  0057F2  0100               	movlb	0	; () banked
 11078  0057F4  5181               	movf	I2C_Master_Read@a& (0+255),w,b
 11079  0057F6  0100               	movlb	0	; () banked
 11080  0057F8  A4D8               	btfss	status,2,c
 11081  0057FA  D002               	goto	u4850
 11082  0057FC  8AC5               	bsf	4037,5,c	;volatile
 11083  0057FE  D001               	goto	l6511
 11084  005800                     u4850:
 11085  005800  9AC5               	bcf	4037,5,c	;volatile
 11086  005802                     l6511:
 11087                           
 11088                           ;I2C.c: 64: ACKEN = 1;
 11089  005802  88C5               	bsf	4037,4,c	;volatile
 11090                           
 11091                           ;I2C.c: 65: return temp;
 11092  005804  0100               	movlb	0	; () banked
 11093  005806  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 11094  005808  0012               	return	
 11095  00580A                     __end_of_I2C_Master_Read:
 11096                           	opt stack 0
 11097                           tblptru	equ	0xFF8
 11098                           tblptrh	equ	0xFF7
 11099                           tblptrl	equ	0xFF6
 11100                           tablat	equ	0xFF5
 11101                           prodh	equ	0xFF4
 11102                           prodl	equ	0xFF3
 11103                           intcon	equ	0xFF2
 11104                           intcon2	equ	0xFF1
 11105                           intcon3	equ	0xFF0
 11106                           postinc0	equ	0xFEE
 11107                           wreg	equ	0xFE8
 11108                           postdec1	equ	0xFE5
 11109                           fsr1l	equ	0xFE1
 11110                           indf2	equ	0xFDF
 11111                           postinc2	equ	0xFDE
 11112                           postdec2	equ	0xFDD
 11113                           fsr2h	equ	0xFDA
 11114                           fsr2l	equ	0xFD9
 11115                           status	equ	0xFD8
 11116                           
 11117 ;; *************** function _I2C_Master_Wait *****************
 11118 ;; Defined at:
 11119 ;;		line 26 in file "I2C.c"
 11120 ;; Parameters:    Size  Location     Type
 11121 ;;		None
 11122 ;; Auto vars:     Size  Location     Type
 11123 ;;		None
 11124 ;; Return value:  Size  Location     Type
 11125 ;;                  1    wreg      void 
 11126 ;; Registers used:
 11127 ;;		wreg, status,2, status,0
 11128 ;; Tracked objects:
 11129 ;;		On entry : 0/0
 11130 ;;		On exit  : 0/0
 11131 ;;		Unchanged: 0/0
 11132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11135 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11136 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11137 ;;Total ram usage:        1 bytes
 11138 ;; Hardware stack levels used:    1
 11139 ;; Hardware stack levels required when called:    7
 11140 ;; This function calls:
 11141 ;;		Nothing
 11142 ;; This function is called by:
 11143 ;;		_I2C_Master_Start
 11144 ;;		_I2C_Master_Stop
 11145 ;;		_I2C_Master_Write
 11146 ;;		_I2C_Master_Read
 11147 ;;		_I2C_Master_RepeatedStart
 11148 ;; This function uses a non-reentrant model
 11149 ;;
 11150                           
 11151                           	psect	text35
 11152  005A3C                     __ptext35:
 11153                           	opt stack 0
 11154  005A3C                     _I2C_Master_Wait:
 11155                           	opt stack 18
 11156  005A3C                     l71:
 11157  005A3C  B4C7               	btfsc	4039,2,c	;volatile
 11158  005A3E  D7FE               	goto	l71
 11159  005A40  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 11160  005A44  0E1F               	movlw	31
 11161  005A46  0100               	movlb	0	; () banked
 11162  005A48  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 11163  005A4A  B4D8               	btfsc	status,2,c
 11164  005A4C  0012               	return	
 11165  005A4E  D7F6               	goto	l71
 11166  005A50                     __end_of_I2C_Master_Wait:
 11167                           	opt stack 0
 11168                           tblptru	equ	0xFF8
 11169                           tblptrh	equ	0xFF7
 11170                           tblptrl	equ	0xFF6
 11171                           tablat	equ	0xFF5
 11172                           prodh	equ	0xFF4
 11173                           prodl	equ	0xFF3
 11174                           intcon	equ	0xFF2
 11175                           intcon2	equ	0xFF1
 11176                           intcon3	equ	0xFF0
 11177                           postinc0	equ	0xFEE
 11178                           wreg	equ	0xFE8
 11179                           postdec1	equ	0xFE5
 11180                           fsr1l	equ	0xFE1
 11181                           indf2	equ	0xFDF
 11182                           postinc2	equ	0xFDE
 11183                           postdec2	equ	0xFDD
 11184                           fsr2h	equ	0xFDA
 11185                           fsr2l	equ	0xFD9
 11186                           status	equ	0xFD8
 11187                           
 11188 ;; *************** function _change_state_to_menu_22 *****************
 11189 ;; Defined at:
 11190 ;;		line 501 in file "UI.c"
 11191 ;; Parameters:    Size  Location     Type
 11192 ;;		None
 11193 ;; Auto vars:     Size  Location     Type
 11194 ;;		None
 11195 ;; Return value:  Size  Location     Type
 11196 ;;                  1    wreg      void 
 11197 ;; Registers used:
 11198 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11199 ;; Tracked objects:
 11200 ;;		On entry : 0/0
 11201 ;;		On exit  : 0/0
 11202 ;;		Unchanged: 0/0
 11203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11208 ;;Total ram usage:        0 bytes
 11209 ;; Hardware stack levels used:    1
 11210 ;; Hardware stack levels required when called:   10
 11211 ;; This function calls:
 11212 ;;		_lcdInst
 11213 ;;		_printf
 11214 ;; This function is called by:
 11215 ;;		_UI
 11216 ;; This function uses a non-reentrant model
 11217 ;;
 11218                           
 11219                           	psect	text36
 11220  0054BC                     __ptext36:
 11221                           	opt stack 0
 11222  0054BC                     _change_state_to_menu_22:
 11223                           	opt stack 19
 11224                           
 11225                           ;UI.c: 502: cur_state = 22;
 11226                           
 11227                           ; BSR set to: 0
 11228                           ;incstack = 0
 11229  0054BC  0E00               	movlw	0
 11230  0054BE  0100               	movlb	0	; () banked
 11231  0054C0  6FE7               	movwf	(_cur_state+1)& (0+255),b
 11232  0054C2  0E16               	movlw	22
 11233  0054C4  6FE6               	movwf	_cur_state& (0+255),b
 11234                           
 11235                           ; BSR set to: 0
 11236                           ;UI.c: 504: lcdInst(0b10000000);;
 11237  0054C6  0E80               	movlw	128
 11238  0054C8  EC39  F02D         	call	_lcdInst
 11239                           
 11240                           ;UI.c: 505: printf("2. SORT        <");
 11241  0054CC  0EB7               	movlw	low STR_34
 11242  0054CE  0100               	movlb	0	; () banked
 11243  0054D0  6F8E               	movwf	printf@f& (0+255),b
 11244  0054D2  0EFD               	movlw	high STR_34
 11245  0054D4  0100               	movlb	0	; () banked
 11246  0054D6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11247  0054D8  EC8F  F00D         	call	_printf	;wreg free
 11248                           
 11249                           ;UI.c: 506: lcdInst(0b11000000);;
 11250  0054DC  0EC0               	movlw	192
 11251  0054DE  EC39  F02D         	call	_lcdInst
 11252                           
 11253                           ;UI.c: 507: printf("3. LOGS         ");
 11254  0054E2  0EFC               	movlw	low STR_36
 11255  0054E4  0100               	movlb	0	; () banked
 11256  0054E6  6F8E               	movwf	printf@f& (0+255),b
 11257  0054E8  0EFC               	movlw	high STR_36
 11258  0054EA  0100               	movlb	0	; () banked
 11259  0054EC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11260  0054EE  EC8F  F00D         	call	_printf	;wreg free
 11261  0054F2  0012               	return		;funcret
 11262  0054F4                     __end_of_change_state_to_menu_22:
 11263                           	opt stack 0
 11264                           tblptru	equ	0xFF8
 11265                           tblptrh	equ	0xFF7
 11266                           tblptrl	equ	0xFF6
 11267                           tablat	equ	0xFF5
 11268                           prodh	equ	0xFF4
 11269                           prodl	equ	0xFF3
 11270                           intcon	equ	0xFF2
 11271                           intcon2	equ	0xFF1
 11272                           intcon3	equ	0xFF0
 11273                           postinc0	equ	0xFEE
 11274                           wreg	equ	0xFE8
 11275                           postdec1	equ	0xFE5
 11276                           fsr1l	equ	0xFE1
 11277                           indf2	equ	0xFDF
 11278                           postinc2	equ	0xFDE
 11279                           postdec2	equ	0xFDD
 11280                           fsr2h	equ	0xFDA
 11281                           fsr2l	equ	0xFD9
 11282                           status	equ	0xFD8
 11283                           
 11284 ;; *************** function _change_state_to_menu_12 *****************
 11285 ;; Defined at:
 11286 ;;		line 493 in file "UI.c"
 11287 ;; Parameters:    Size  Location     Type
 11288 ;;		None
 11289 ;; Auto vars:     Size  Location     Type
 11290 ;;		None
 11291 ;; Return value:  Size  Location     Type
 11292 ;;                  1    wreg      void 
 11293 ;; Registers used:
 11294 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11295 ;; Tracked objects:
 11296 ;;		On entry : 0/0
 11297 ;;		On exit  : 0/0
 11298 ;;		Unchanged: 0/0
 11299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11304 ;;Total ram usage:        0 bytes
 11305 ;; Hardware stack levels used:    1
 11306 ;; Hardware stack levels required when called:   10
 11307 ;; This function calls:
 11308 ;;		_lcdInst
 11309 ;;		_printf
 11310 ;; This function is called by:
 11311 ;;		_UI
 11312 ;; This function uses a non-reentrant model
 11313 ;;
 11314                           
 11315                           	psect	text37
 11316  0054F4                     __ptext37:
 11317                           	opt stack 0
 11318  0054F4                     _change_state_to_menu_12:
 11319                           	opt stack 19
 11320                           
 11321                           ;UI.c: 494: cur_state = 12;
 11322                           
 11323                           ;incstack = 0
 11324  0054F4  0E00               	movlw	0
 11325  0054F6  0100               	movlb	0	; () banked
 11326  0054F8  6FE7               	movwf	(_cur_state+1)& (0+255),b
 11327  0054FA  0E0C               	movlw	12
 11328  0054FC  6FE6               	movwf	_cur_state& (0+255),b
 11329                           
 11330                           ; BSR set to: 0
 11331                           ;UI.c: 496: lcdInst(0b10000000);;
 11332  0054FE  0E80               	movlw	128
 11333  005500  EC39  F02D         	call	_lcdInst
 11334                           
 11335                           ;UI.c: 497: printf("1. DATE/TIME    ");
 11336  005504  0E1E               	movlw	low STR_33
 11337  005506  0100               	movlb	0	; () banked
 11338  005508  6F8E               	movwf	printf@f& (0+255),b
 11339  00550A  0EFD               	movlw	high STR_33
 11340  00550C  0100               	movlb	0	; () banked
 11341  00550E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11342  005510  EC8F  F00D         	call	_printf	;wreg free
 11343                           
 11344                           ;UI.c: 498: lcdInst(0b11000000);;
 11345  005514  0EC0               	movlw	192
 11346  005516  EC39  F02D         	call	_lcdInst
 11347                           
 11348                           ;UI.c: 499: printf("2. SORT        <");
 11349  00551A  0EB7               	movlw	low STR_34
 11350  00551C  0100               	movlb	0	; () banked
 11351  00551E  6F8E               	movwf	printf@f& (0+255),b
 11352  005520  0EFD               	movlw	high STR_34
 11353  005522  0100               	movlb	0	; () banked
 11354  005524  6F8F               	movwf	(printf@f+1)& (0+255),b
 11355  005526  EC8F  F00D         	call	_printf	;wreg free
 11356  00552A  0012               	return		;funcret
 11357  00552C                     __end_of_change_state_to_menu_12:
 11358                           	opt stack 0
 11359                           tblptru	equ	0xFF8
 11360                           tblptrh	equ	0xFF7
 11361                           tblptrl	equ	0xFF6
 11362                           tablat	equ	0xFF5
 11363                           prodh	equ	0xFF4
 11364                           prodl	equ	0xFF3
 11365                           intcon	equ	0xFF2
 11366                           intcon2	equ	0xFF1
 11367                           intcon3	equ	0xFF0
 11368                           postinc0	equ	0xFEE
 11369                           wreg	equ	0xFE8
 11370                           postdec1	equ	0xFE5
 11371                           fsr1l	equ	0xFE1
 11372                           indf2	equ	0xFDF
 11373                           postinc2	equ	0xFDE
 11374                           postdec2	equ	0xFDD
 11375                           fsr2h	equ	0xFDA
 11376                           fsr2l	equ	0xFD9
 11377                           status	equ	0xFD8
 11378                           
 11379 ;; *************** function ___awmod *****************
 11380 ;; Defined at:
 11381 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 11382 ;; Parameters:    Size  Location     Type
 11383 ;;  dividend        2    0[BANK0 ] int 
 11384 ;;  divisor         2    2[BANK0 ] int 
 11385 ;; Auto vars:     Size  Location     Type
 11386 ;;  sign            1    5[BANK0 ] unsigned char 
 11387 ;;  counter         1    4[BANK0 ] unsigned char 
 11388 ;; Return value:  Size  Location     Type
 11389 ;;                  2    0[BANK0 ] int 
 11390 ;; Registers used:
 11391 ;;		wreg, status,2, status,0
 11392 ;; Tracked objects:
 11393 ;;		On entry : 0/0
 11394 ;;		On exit  : 0/0
 11395 ;;		Unchanged: 0/0
 11396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11397 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11398 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11400 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11401 ;;Total ram usage:        6 bytes
 11402 ;; Hardware stack levels used:    1
 11403 ;; Hardware stack levels required when called:    7
 11404 ;; This function calls:
 11405 ;;		Nothing
 11406 ;; This function is called by:
 11407 ;;		_UI
 11408 ;; This function uses a non-reentrant model
 11409 ;;
 11410                           
 11411                           	psect	text38
 11412  004A9C                     __ptext38:
 11413                           	opt stack 0
 11414  004A9C                     ___awmod:
 11415                           	opt stack 22
 11416                           
 11417                           ;incstack = 0
 11418  004A9C  0E00               	movlw	0
 11419  004A9E  0100               	movlb	0	; () banked
 11420  004AA0  6F85               	movwf	___awmod@sign& (0+255),b
 11421                           
 11422                           ; BSR set to: 0
 11423  004AA2  0100               	movlb	0	; () banked
 11424  004AA4  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 11425  004AA6  D008               	goto	l9159
 11426                           
 11427                           ; BSR set to: 0
 11428  004AA8  0100               	movlb	0	; () banked
 11429  004AAA  6D80               	negf	___awmod@dividend& (0+255),b
 11430  004AAC  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11431  004AAE  B0D8               	btfsc	status,0,c
 11432  004AB0  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11433                           
 11434                           ; BSR set to: 0
 11435  004AB2  0E01               	movlw	1
 11436  004AB4  0100               	movlb	0	; () banked
 11437  004AB6  6F85               	movwf	___awmod@sign& (0+255),b
 11438  004AB8                     l9159:
 11439                           
 11440                           ; BSR set to: 0
 11441  004AB8  0100               	movlb	0	; () banked
 11442  004ABA  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11443  004ABC  D005               	goto	l9163
 11444                           
 11445                           ; BSR set to: 0
 11446  004ABE  0100               	movlb	0	; () banked
 11447  004AC0  6D82               	negf	___awmod@divisor& (0+255),b
 11448  004AC2  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 11449  004AC4  B0D8               	btfsc	status,0,c
 11450  004AC6  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 11451  004AC8                     l9163:
 11452                           
 11453                           ; BSR set to: 0
 11454  004AC8  0100               	movlb	0	; () banked
 11455  004ACA  5182               	movf	___awmod@divisor& (0+255),w,b
 11456  004ACC  0100               	movlb	0	; () banked
 11457  004ACE  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 11458  004AD0  B4D8               	btfsc	status,2,c
 11459  004AD2  D026               	goto	l9179
 11460                           
 11461                           ; BSR set to: 0
 11462  004AD4  0E01               	movlw	1
 11463  004AD6  0100               	movlb	0	; () banked
 11464  004AD8  6F84               	movwf	___awmod@counter& (0+255),b
 11465  004ADA  D006               	goto	l9169
 11466  004ADC                     l9167:
 11467                           
 11468                           ; BSR set to: 0
 11469  004ADC  0100               	movlb	0	; () banked
 11470  004ADE  90D8               	bcf	status,0,c
 11471  004AE0  3782               	rlcf	___awmod@divisor& (0+255),f,b
 11472  004AE2  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 11473  004AE4  0100               	movlb	0	; () banked
 11474  004AE6  2B84               	incf	___awmod@counter& (0+255),f,b
 11475  004AE8                     l9169:
 11476                           
 11477                           ; BSR set to: 0
 11478  004AE8  0100               	movlb	0	; () banked
 11479  004AEA  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11480  004AEC  D7F7               	goto	l9167
 11481  004AEE                     l9171:
 11482                           
 11483                           ; BSR set to: 0
 11484  004AEE  0100               	movlb	0	; () banked
 11485  004AF0  5182               	movf	___awmod@divisor& (0+255),w,b
 11486  004AF2  0100               	movlb	0	; () banked
 11487  004AF4  5D80               	subwf	___awmod@dividend& (0+255),w,b
 11488  004AF6  0100               	movlb	0	; () banked
 11489  004AF8  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11490  004AFA  0100               	movlb	0	; () banked
 11491  004AFC  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 11492  004AFE  A0D8               	btfss	status,0,c
 11493  004B00  D008               	goto	l9175
 11494                           
 11495                           ; BSR set to: 0
 11496  004B02  0100               	movlb	0	; () banked
 11497  004B04  5182               	movf	___awmod@divisor& (0+255),w,b
 11498  004B06  0100               	movlb	0	; () banked
 11499  004B08  5F80               	subwf	___awmod@dividend& (0+255),f,b
 11500  004B0A  0100               	movlb	0	; () banked
 11501  004B0C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11502  004B0E  0100               	movlb	0	; () banked
 11503  004B10  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 11504  004B12                     l9175:
 11505                           
 11506                           ; BSR set to: 0
 11507  004B12  0100               	movlb	0	; () banked
 11508  004B14  90D8               	bcf	status,0,c
 11509  004B16  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 11510  004B18  3382               	rrcf	___awmod@divisor& (0+255),f,b
 11511                           
 11512                           ; BSR set to: 0
 11513  004B1A  0100               	movlb	0	; () banked
 11514  004B1C  2F84               	decfsz	___awmod@counter& (0+255),f,b
 11515  004B1E  D7E7               	goto	l9171
 11516  004B20                     l9179:
 11517                           
 11518                           ; BSR set to: 0
 11519  004B20  0100               	movlb	0	; () banked
 11520  004B22  5185               	movf	___awmod@sign& (0+255),w,b
 11521  004B24  0100               	movlb	0	; () banked
 11522  004B26  B4D8               	btfsc	status,2,c
 11523  004B28  D005               	goto	l9183
 11524                           
 11525                           ; BSR set to: 0
 11526  004B2A  0100               	movlb	0	; () banked
 11527  004B2C  6D80               	negf	___awmod@dividend& (0+255),b
 11528  004B2E  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11529  004B30  B0D8               	btfsc	status,0,c
 11530  004B32  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11531  004B34                     l9183:
 11532                           
 11533                           ; BSR set to: 0
 11534  004B34  C080  F080         	movff	___awmod@dividend,?___awmod
 11535  004B38  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 11536  004B3C  0012               	return	
 11537  004B3E                     __end_of___awmod:
 11538                           	opt stack 0
 11539                           tblptru	equ	0xFF8
 11540                           tblptrh	equ	0xFF7
 11541                           tblptrl	equ	0xFF6
 11542                           tablat	equ	0xFF5
 11543                           prodh	equ	0xFF4
 11544                           prodl	equ	0xFF3
 11545                           intcon	equ	0xFF2
 11546                           intcon2	equ	0xFF1
 11547                           intcon3	equ	0xFF0
 11548                           postinc0	equ	0xFEE
 11549                           wreg	equ	0xFE8
 11550                           postdec1	equ	0xFE5
 11551                           fsr1l	equ	0xFE1
 11552                           indf2	equ	0xFDF
 11553                           postinc2	equ	0xFDE
 11554                           postdec2	equ	0xFDD
 11555                           fsr2h	equ	0xFDA
 11556                           fsr2l	equ	0xFD9
 11557                           status	equ	0xFD8
 11558                           
 11559 ;; *************** function ___awdiv *****************
 11560 ;; Defined at:
 11561 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 11562 ;; Parameters:    Size  Location     Type
 11563 ;;  dividend        2    6[BANK0 ] int 
 11564 ;;  divisor         2    8[BANK0 ] int 
 11565 ;; Auto vars:     Size  Location     Type
 11566 ;;  quotient        2   12[BANK0 ] int 
 11567 ;;  sign            1   11[BANK0 ] unsigned char 
 11568 ;;  counter         1   10[BANK0 ] unsigned char 
 11569 ;; Return value:  Size  Location     Type
 11570 ;;                  2    6[BANK0 ] int 
 11571 ;; Registers used:
 11572 ;;		wreg, status,2, status,0
 11573 ;; Tracked objects:
 11574 ;;		On entry : 0/0
 11575 ;;		On exit  : 0/0
 11576 ;;		Unchanged: 0/0
 11577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11578 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11579 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11581 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11582 ;;Total ram usage:        8 bytes
 11583 ;; Hardware stack levels used:    1
 11584 ;; Hardware stack levels required when called:    7
 11585 ;; This function calls:
 11586 ;;		Nothing
 11587 ;; This function is called by:
 11588 ;;		_UI
 11589 ;;		_ID
 11590 ;; This function uses a non-reentrant model
 11591 ;;
 11592                           
 11593                           	psect	text39
 11594  004878                     __ptext39:
 11595                           	opt stack 0
 11596  004878                     ___awdiv:
 11597                           	opt stack 21
 11598                           
 11599                           ; BSR set to: 0
 11600                           ;incstack = 0
 11601  004878  0E00               	movlw	0
 11602  00487A  0100               	movlb	0	; () banked
 11603  00487C  6F8B               	movwf	___awdiv@sign& (0+255),b
 11604                           
 11605                           ; BSR set to: 0
 11606  00487E  0100               	movlb	0	; () banked
 11607  004880  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11608  004882  D008               	goto	l7439
 11609                           
 11610                           ; BSR set to: 0
 11611  004884  0100               	movlb	0	; () banked
 11612  004886  6D88               	negf	___awdiv@divisor& (0+255),b
 11613  004888  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 11614  00488A  B0D8               	btfsc	status,0,c
 11615  00488C  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 11616                           
 11617                           ; BSR set to: 0
 11618  00488E  0E01               	movlw	1
 11619  004890  0100               	movlb	0	; () banked
 11620  004892  6F8B               	movwf	___awdiv@sign& (0+255),b
 11621  004894                     l7439:
 11622                           
 11623                           ; BSR set to: 0
 11624  004894  0100               	movlb	0	; () banked
 11625  004896  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 11626  004898  D008               	goto	l7445
 11627                           
 11628                           ; BSR set to: 0
 11629  00489A  0100               	movlb	0	; () banked
 11630  00489C  6D86               	negf	___awdiv@dividend& (0+255),b
 11631  00489E  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 11632  0048A0  B0D8               	btfsc	status,0,c
 11633  0048A2  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 11634                           
 11635                           ; BSR set to: 0
 11636  0048A4  0E01               	movlw	1
 11637  0048A6  0100               	movlb	0	; () banked
 11638  0048A8  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 11639  0048AA                     l7445:
 11640                           
 11641                           ; BSR set to: 0
 11642  0048AA  0E00               	movlw	0
 11643  0048AC  0100               	movlb	0	; () banked
 11644  0048AE  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 11645  0048B0  0E00               	movlw	0
 11646  0048B2  6F8C               	movwf	___awdiv@quotient& (0+255),b
 11647                           
 11648                           ; BSR set to: 0
 11649  0048B4  0100               	movlb	0	; () banked
 11650  0048B6  5188               	movf	___awdiv@divisor& (0+255),w,b
 11651  0048B8  0100               	movlb	0	; () banked
 11652  0048BA  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 11653  0048BC  B4D8               	btfsc	status,2,c
 11654  0048BE  D02C               	goto	l7467
 11655                           
 11656                           ; BSR set to: 0
 11657  0048C0  0E01               	movlw	1
 11658  0048C2  0100               	movlb	0	; () banked
 11659  0048C4  6F8A               	movwf	___awdiv@counter& (0+255),b
 11660  0048C6  D006               	goto	l7453
 11661  0048C8                     l7451:
 11662                           
 11663                           ; BSR set to: 0
 11664  0048C8  0100               	movlb	0	; () banked
 11665  0048CA  90D8               	bcf	status,0,c
 11666  0048CC  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 11667  0048CE  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 11668  0048D0  0100               	movlb	0	; () banked
 11669  0048D2  2B8A               	incf	___awdiv@counter& (0+255),f,b
 11670  0048D4                     l7453:
 11671                           
 11672                           ; BSR set to: 0
 11673  0048D4  0100               	movlb	0	; () banked
 11674  0048D6  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11675  0048D8  D7F7               	goto	l7451
 11676  0048DA                     l7455:
 11677                           
 11678                           ; BSR set to: 0
 11679  0048DA  0100               	movlb	0	; () banked
 11680  0048DC  90D8               	bcf	status,0,c
 11681  0048DE  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 11682  0048E0  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 11683                           
 11684                           ; BSR set to: 0
 11685  0048E2  0100               	movlb	0	; () banked
 11686  0048E4  5188               	movf	___awdiv@divisor& (0+255),w,b
 11687  0048E6  0100               	movlb	0	; () banked
 11688  0048E8  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 11689  0048EA  0100               	movlb	0	; () banked
 11690  0048EC  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 11691  0048EE  0100               	movlb	0	; () banked
 11692  0048F0  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 11693  0048F2  A0D8               	btfss	status,0,c
 11694  0048F4  D00A               	goto	l7463
 11695                           
 11696                           ; BSR set to: 0
 11697  0048F6  0100               	movlb	0	; () banked
 11698  0048F8  5188               	movf	___awdiv@divisor& (0+255),w,b
 11699  0048FA  0100               	movlb	0	; () banked
 11700  0048FC  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 11701  0048FE  0100               	movlb	0	; () banked
 11702  004900  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 11703  004902  0100               	movlb	0	; () banked
 11704  004904  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 11705                           
 11706                           ; BSR set to: 0
 11707  004906  0100               	movlb	0	; () banked
 11708  004908  818C               	bsf	___awdiv@quotient& (0+255),0,b
 11709  00490A                     l7463:
 11710                           
 11711                           ; BSR set to: 0
 11712  00490A  0100               	movlb	0	; () banked
 11713  00490C  90D8               	bcf	status,0,c
 11714  00490E  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 11715  004910  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 11716                           
 11717                           ; BSR set to: 0
 11718  004912  0100               	movlb	0	; () banked
 11719  004914  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 11720  004916  D7E1               	goto	l7455
 11721  004918                     l7467:
 11722                           
 11723                           ; BSR set to: 0
 11724  004918  0100               	movlb	0	; () banked
 11725  00491A  518B               	movf	___awdiv@sign& (0+255),w,b
 11726  00491C  0100               	movlb	0	; () banked
 11727  00491E  B4D8               	btfsc	status,2,c
 11728  004920  D005               	goto	l7471
 11729                           
 11730                           ; BSR set to: 0
 11731  004922  0100               	movlb	0	; () banked
 11732  004924  6D8C               	negf	___awdiv@quotient& (0+255),b
 11733  004926  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 11734  004928  B0D8               	btfsc	status,0,c
 11735  00492A  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 11736  00492C                     l7471:
 11737                           
 11738                           ; BSR set to: 0
 11739  00492C  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 11740  004930  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 11741  004934  0012               	return	
 11742  004936                     __end_of___awdiv:
 11743                           	opt stack 0
 11744                           tblptru	equ	0xFF8
 11745                           tblptrh	equ	0xFF7
 11746                           tblptrl	equ	0xFF6
 11747                           tablat	equ	0xFF5
 11748                           prodh	equ	0xFF4
 11749                           prodl	equ	0xFF3
 11750                           intcon	equ	0xFF2
 11751                           intcon2	equ	0xFF1
 11752                           intcon3	equ	0xFF0
 11753                           postinc0	equ	0xFEE
 11754                           wreg	equ	0xFE8
 11755                           postdec1	equ	0xFE5
 11756                           fsr1l	equ	0xFE1
 11757                           indf2	equ	0xFDF
 11758                           postinc2	equ	0xFDE
 11759                           postdec2	equ	0xFDD
 11760                           fsr2h	equ	0xFDA
 11761                           fsr2l	equ	0xFD9
 11762                           status	equ	0xFD8
 11763                           
 11764 ;; *************** function _Test *****************
 11765 ;; Defined at:
 11766 ;;		line 31 in file "Test.c"
 11767 ;; Parameters:    Size  Location     Type
 11768 ;;		None
 11769 ;; Auto vars:     Size  Location     Type
 11770 ;;		None
 11771 ;; Return value:  Size  Location     Type
 11772 ;;                  1    wreg      void 
 11773 ;; Registers used:
 11774 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11775 ;; Tracked objects:
 11776 ;;		On entry : 0/0
 11777 ;;		On exit  : 0/0
 11778 ;;		Unchanged: 0/0
 11779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11782 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11783 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11784 ;;Total ram usage:        2 bytes
 11785 ;; Hardware stack levels used:    1
 11786 ;; Hardware stack levels required when called:   11
 11787 ;; This function calls:
 11788 ;;		_BlockerTest
 11789 ;;		_BothServos
 11790 ;;		_PlatformTest
 11791 ;;		_PortTestDC
 11792 ;;		_PortTestPusher
 11793 ;;		_SpeedTest
 11794 ;;		_actuatorTest
 11795 ;;		_algorithmTest
 11796 ;;		_arm
 11797 ;;		_lcdInst
 11798 ;;		_printf
 11799 ;;		_sensorTest
 11800 ;; This function is called by:
 11801 ;;		_main
 11802 ;; This function uses a non-reentrant model
 11803 ;;
 11804                           
 11805                           	psect	text40
 11806  00417A                     __ptext40:
 11807                           	opt stack 0
 11808  00417A                     _Test:
 11809                           	opt stack 19
 11810                           
 11811                           ;Test.c: 33: while(machine_state == Testing_state){
 11812                           
 11813                           ; BSR set to: 0
 11814                           ;incstack = 0
 11815  00417A  D07C               	goto	l9901
 11816  00417C                     l9861:
 11817                           
 11818                           ;Test.c: 34: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11819  00417C  0E01               	movlw	1
 11820  00417E  EC39  F02D         	call	_lcdInst
 11821  004182  0E68               	movlw	104
 11822  004184  0100               	movlb	0	; () banked
 11823  004186  6FC6               	movwf	??_Test& (0+255),b
 11824  004188  0EE4               	movlw	228
 11825  00418A                     u10247:
 11826  00418A  2EE8               	decfsz	wreg,f,c
 11827  00418C  D7FE               	bra	u10247
 11828  00418E  2FC6               	decfsz	??_Test& (0+255),f,b
 11829  004190  D7FC               	bra	u10247
 11830  004192  F000               	nop	
 11831  004194  0E80               	movlw	128
 11832  004196  EC39  F02D         	call	_lcdInst
 11833                           
 11834                           ;Test.c: 35: printf("2.SNR|4.HI|5.MED");
 11835  00419A  0E74               	movlw	low STR_69
 11836  00419C  0100               	movlb	0	; () banked
 11837  00419E  6F8E               	movwf	printf@f& (0+255),b
 11838  0041A0  0EFC               	movlw	high STR_69
 11839  0041A2  0100               	movlb	0	; () banked
 11840  0041A4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11841  0041A6  EC8F  F00D         	call	_printf	;wreg free
 11842                           
 11843                           ;Test.c: 36: lcdInst(0b11000000);;
 11844  0041AA  0EC0               	movlw	192
 11845  0041AC  EC39  F02D         	call	_lcdInst
 11846                           
 11847                           ;Test.c: 37: printf("B.PLA|8.SV|9.BLK");
 11848  0041B0  0E85               	movlw	low STR_70
 11849  0041B2  0100               	movlb	0	; () banked
 11850  0041B4  6F8E               	movwf	printf@f& (0+255),b
 11851  0041B6  0EFC               	movlw	high STR_70
 11852  0041B8  0100               	movlb	0	; () banked
 11853  0041BA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11854  0041BC  EC8F  F00D         	call	_printf	;wreg free
 11855  0041C0                     l1241:
 11856  0041C0  A281               	btfss	3969,1,c	;volatile
 11857  0041C2  D7FE               	goto	l1241
 11858                           
 11859                           ;Test.c: 39: var = PORTB >> 4;
 11860  0041C4  CF81 F0C6          	movff	3969,??_Test	;volatile
 11861  0041C8  0100               	movlb	0	; () banked
 11862  0041CA  3BC6               	swapf	??_Test& (0+255),f,b
 11863  0041CC  0E0F               	movlw	15
 11864  0041CE  17C6               	andwf	??_Test& (0+255),f,b
 11865  0041D0  0100               	movlb	0	; () banked
 11866  0041D2  51C6               	movf	??_Test& (0+255),w,b
 11867  0041D4  0101               	movlb	1	; () banked
 11868  0041D6  6F47               	movwf	_var& (0+255),b
 11869  0041D8  6B48               	clrf	(_var+1)& (0+255),b
 11870                           
 11871                           ; BSR set to: 1
 11872                           ;Test.c: 40: var++;
 11873  0041DA  0101               	movlb	1	; () banked
 11874  0041DC  4B47               	infsnz	_var& (0+255),f,b
 11875  0041DE  2B48               	incf	(_var+1)& (0+255),f,b
 11876  0041E0                     l1244:
 11877  0041E0  A281               	btfss	3969,1,c	;volatile
 11878  0041E2  D01F               	goto	l9899
 11879  0041E4  D7FD               	goto	l1244
 11880  0041E6                     l9877:
 11881                           
 11882                           ;Test.c: 44: algorithmTest();
 11883  0041E6  ECA4  F022         	call	_algorithmTest	;wreg free
 11884                           
 11885                           ;Test.c: 45: break;
 11886  0041EA  D044               	goto	l9901
 11887  0041EC                     l9879:
 11888                           
 11889                           ;Test.c: 47: sensorTest();
 11890  0041EC  ECE4  F014         	call	_sensorTest	;wreg free
 11891                           
 11892                           ;Test.c: 48: break;
 11893  0041F0  D041               	goto	l9901
 11894  0041F2                     l9881:
 11895                           
 11896                           ;Test.c: 50: actuatorTest();
 11897  0041F2  EC6D  F004         	call	_actuatorTest	;wreg free
 11898                           
 11899                           ;Test.c: 51: break;
 11900  0041F6  D03E               	goto	l9901
 11901  0041F8                     l9883:
 11902                           
 11903                           ;Test.c: 53: arm();
 11904  0041F8  EC40  F021         	call	_arm	;wreg free
 11905                           
 11906                           ;Test.c: 54: break;
 11907  0041FC  D03B               	goto	l9901
 11908  0041FE                     l9885:
 11909                           
 11910                           ;Test.c: 56: PortTestDC();
 11911  0041FE  ECBE  F028         	call	_PortTestDC	;wreg free
 11912                           
 11913                           ;Test.c: 57: break;
 11914  004202  D038               	goto	l9901
 11915  004204                     l9887:
 11916                           
 11917                           ;Test.c: 59: SpeedTest();
 11918  004204  EC28  F026         	call	_SpeedTest	;wreg free
 11919                           
 11920                           ;Test.c: 60: break;
 11921  004208  D035               	goto	l9901
 11922  00420A                     l9889:
 11923                           
 11924                           ;Test.c: 62: PortTestPusher();
 11925  00420A  EC90  F028         	call	_PortTestPusher	;wreg free
 11926                           
 11927                           ;Test.c: 63: break;
 11928  00420E  D032               	goto	l9901
 11929  004210                     l9891:
 11930                           
 11931                           ;Test.c: 65: PlatformTest();
 11932  004210  EC59  F013         	call	_PlatformTest	;wreg free
 11933                           
 11934                           ;Test.c: 66: break;
 11935  004214  D02F               	goto	l9901
 11936  004216                     l9893:
 11937                           
 11938                           ;Test.c: 68: BothServos();
 11939  004216  ECAB  F00F         	call	_BothServos	;wreg free
 11940                           
 11941                           ;Test.c: 69: break;
 11942  00421A  D02C               	goto	l9901
 11943  00421C                     l9895:
 11944                           
 11945                           ;Test.c: 71: BlockerTest();
 11946  00421C  EC20  F01E         	call	_BlockerTest	;wreg free
 11947                           
 11948                           ;Test.c: 75: }
 11949                           
 11950                           ;Test.c: 74: break;
 11951                           
 11952                           ;Test.c: 73: default:
 11953                           
 11954                           ;Test.c: 72: break;
 11955  004220  D029               	goto	l9901
 11956  004222                     l9899:
 11957  004222  C147  F0C6         	movff	_var,??_Test
 11958  004226  C148  F0C7         	movff	_var+1,??_Test+1
 11959                           
 11960                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11961                           ; Switch size 1, requested type "space"
 11962                           ; Number of cases is 1, Range of values is 0 to 0
 11963                           ; switch strategies available:
 11964                           ; Name         Instructions Cycles
 11965                           ; simple_byte            4     3 (average)
 11966                           ;	Chosen strategy is simple_byte
 11967  00422A  0100               	movlb	0	; () banked
 11968  00422C  51C7               	movf	(??_Test+1)& (0+255),w,b
 11969  00422E  0A00               	xorlw	0	; case 0
 11970  004230  A4D8               	btfss	status,2,c
 11971  004232  D020               	goto	l9901
 11972                           
 11973                           ; BSR set to: 0
 11974                           ; Switch size 1, requested type "space"
 11975                           ; Number of cases is 10, Range of values is 1 to 11
 11976                           ; switch strategies available:
 11977                           ; Name         Instructions Cycles
 11978                           ; simple_byte           31    16 (average)
 11979                           ;	Chosen strategy is simple_byte
 11980  004234  0100               	movlb	0	; () banked
 11981  004236  51C6               	movf	??_Test& (0+255),w,b
 11982  004238  0A01               	xorlw	1	; case 1
 11983  00423A  B4D8               	btfsc	status,2,c
 11984  00423C  D7D4               	goto	l9877
 11985  00423E  0A03               	xorlw	3	; case 2
 11986  004240  B4D8               	btfsc	status,2,c
 11987  004242  D7D4               	goto	l9879
 11988  004244  0A01               	xorlw	1	; case 3
 11989  004246  B4D8               	btfsc	status,2,c
 11990  004248  D7D4               	goto	l9881
 11991  00424A  0A07               	xorlw	7	; case 4
 11992  00424C  B4D8               	btfsc	status,2,c
 11993  00424E  D7D4               	goto	l9883
 11994  004250  0A01               	xorlw	1	; case 5
 11995  004252  B4D8               	btfsc	status,2,c
 11996  004254  D7D4               	goto	l9885
 11997  004256  0A03               	xorlw	3	; case 6
 11998  004258  B4D8               	btfsc	status,2,c
 11999  00425A  D7D4               	goto	l9887
 12000  00425C  0A01               	xorlw	1	; case 7
 12001  00425E  B4D8               	btfsc	status,2,c
 12002  004260  D7D4               	goto	l9889
 12003  004262  0A0F               	xorlw	15	; case 8
 12004  004264  B4D8               	btfsc	status,2,c
 12005  004266  D7D4               	goto	l9891
 12006  004268  0A02               	xorlw	2	; case 10
 12007  00426A  B4D8               	btfsc	status,2,c
 12008  00426C  D7D4               	goto	l9893
 12009  00426E  0A01               	xorlw	1	; case 11
 12010  004270  B4D8               	btfsc	status,2,c
 12011  004272  D7D4               	goto	l9895
 12012  004274                     l9901:
 12013  004274  0E03               	movlw	3
 12014  004276  0100               	movlb	0	; () banked
 12015  004278  19FC               	xorwf	_machine_state& (0+255),w,b
 12016  00427A  A4D8               	btfss	status,2,c
 12017  00427C  0012               	return	
 12018  00427E  D77E               	goto	l9861
 12019  004280                     __end_of_Test:
 12020                           	opt stack 0
 12021                           tblptru	equ	0xFF8
 12022                           tblptrh	equ	0xFF7
 12023                           tblptrl	equ	0xFF6
 12024                           tablat	equ	0xFF5
 12025                           prodh	equ	0xFF4
 12026                           prodl	equ	0xFF3
 12027                           intcon	equ	0xFF2
 12028                           intcon2	equ	0xFF1
 12029                           intcon3	equ	0xFF0
 12030                           postinc0	equ	0xFEE
 12031                           wreg	equ	0xFE8
 12032                           postdec1	equ	0xFE5
 12033                           fsr1l	equ	0xFE1
 12034                           indf2	equ	0xFDF
 12035                           postinc2	equ	0xFDE
 12036                           postdec2	equ	0xFDD
 12037                           fsr2h	equ	0xFDA
 12038                           fsr2l	equ	0xFD9
 12039                           status	equ	0xFD8
 12040                           
 12041 ;; *************** function _sensorTest *****************
 12042 ;; Defined at:
 12043 ;;		line 123 in file "Test.c"
 12044 ;; Parameters:    Size  Location     Type
 12045 ;;		None
 12046 ;; Auto vars:     Size  Location     Type
 12047 ;;  res             2   45[BANK0 ] int 
 12048 ;; Return value:  Size  Location     Type
 12049 ;;                  1    wreg      void 
 12050 ;; Registers used:
 12051 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12052 ;; Tracked objects:
 12053 ;;		On entry : 0/0
 12054 ;;		On exit  : 0/0
 12055 ;;		Unchanged: 0/0
 12056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12058 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12059 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12060 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12061 ;;Total ram usage:        4 bytes
 12062 ;; Hardware stack levels used:    1
 12063 ;; Hardware stack levels required when called:   10
 12064 ;; This function calls:
 12065 ;;		_lcdInst
 12066 ;;		_printf
 12067 ;;		_readADC
 12068 ;;		_readMAG
 12069 ;; This function is called by:
 12070 ;;		_Test
 12071 ;; This function uses a non-reentrant model
 12072 ;;
 12073                           
 12074                           	psect	text41
 12075  0029C8                     __ptext41:
 12076                           	opt stack 0
 12077  0029C8                     _sensorTest:
 12078                           	opt stack 19
 12079                           
 12080                           ;Test.c: 125: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12081                           
 12082                           ; BSR set to: 0
 12083                           ;incstack = 0
 12084  0029C8  0E01               	movlw	1
 12085  0029CA  EC39  F02D         	call	_lcdInst
 12086  0029CE  0E68               	movlw	104
 12087  0029D0  0100               	movlb	0	; () banked
 12088  0029D2  6FAB               	movwf	??_sensorTest& (0+255),b
 12089  0029D4  0EE4               	movlw	228
 12090  0029D6                     u10257:
 12091  0029D6  2EE8               	decfsz	wreg,f,c
 12092  0029D8  D7FE               	bra	u10257
 12093  0029DA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12094  0029DC  D7FC               	bra	u10257
 12095  0029DE  F000               	nop	
 12096  0029E0  0E80               	movlw	128
 12097  0029E2  EC39  F02D         	call	_lcdInst
 12098                           
 12099                           ;Test.c: 126: printf("SENSORS");
 12100  0029E6  0EAD               	movlw	low STR_78
 12101  0029E8  0100               	movlb	0	; () banked
 12102  0029EA  6F8E               	movwf	printf@f& (0+255),b
 12103  0029EC  0EFF               	movlw	high STR_78
 12104  0029EE  0100               	movlb	0	; () banked
 12105  0029F0  6F8F               	movwf	(printf@f+1)& (0+255),b
 12106  0029F2  EC8F  F00D         	call	_printf	;wreg free
 12107                           
 12108                           ;Test.c: 127: lcdInst(0b11000000);;
 12109  0029F6  0EC0               	movlw	192
 12110  0029F8  EC39  F02D         	call	_lcdInst
 12111                           
 12112                           ;Test.c: 128: printf("PUSH TO START");
 12113  0029FC  0E2D               	movlw	low STR_72
 12114  0029FE  0100               	movlb	0	; () banked
 12115  002A00  6F8E               	movwf	printf@f& (0+255),b
 12116  002A02  0EFF               	movlw	high STR_72
 12117  002A04  0100               	movlb	0	; () banked
 12118  002A06  6F8F               	movwf	(printf@f+1)& (0+255),b
 12119  002A08  EC8F  F00D         	call	_printf	;wreg free
 12120                           
 12121                           ;Test.c: 129: _delay((unsigned long)((100)*(32000000/4000.0)));
 12122  002A0C  0E05               	movlw	5
 12123  002A0E  0100               	movlb	0	; () banked
 12124  002A10  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12125  002A12  0E0F               	movlw	15
 12126  002A14  0100               	movlb	0	; () banked
 12127  002A16  6FAB               	movwf	??_sensorTest& (0+255),b
 12128  002A18  0EF1               	movlw	241
 12129  002A1A                     u10267:
 12130  002A1A  2EE8               	decfsz	wreg,f,c
 12131  002A1C  D7FE               	bra	u10267
 12132  002A1E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12133  002A20  D7FC               	bra	u10267
 12134  002A22  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12135  002A24  D7FA               	bra	u10267
 12136  002A26                     l1273:
 12137  002A26  A281               	btfss	3969,1,c	;volatile
 12138  002A28  D7FE               	goto	l1273
 12139  002A2A                     l1276:
 12140  002A2A  B281               	btfsc	3969,1,c	;volatile
 12141  002A2C  D7FE               	goto	l1276
 12142                           
 12143                           ;Test.c: 132: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12144  002A2E  0E01               	movlw	1
 12145  002A30  EC39  F02D         	call	_lcdInst
 12146  002A34  0E68               	movlw	104
 12147  002A36  0100               	movlb	0	; () banked
 12148  002A38  6FAB               	movwf	??_sensorTest& (0+255),b
 12149  002A3A  0EE4               	movlw	228
 12150  002A3C                     u10277:
 12151  002A3C  2EE8               	decfsz	wreg,f,c
 12152  002A3E  D7FE               	bra	u10277
 12153  002A40  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12154  002A42  D7FC               	bra	u10277
 12155  002A44  F000               	nop	
 12156  002A46  0E80               	movlw	128
 12157  002A48  EC39  F02D         	call	_lcdInst
 12158                           
 12159                           ;Test.c: 137: printf("TST: IR SNSR");
 12160  002A4C  0E57               	movlw	low STR_80
 12161  002A4E  0100               	movlb	0	; () banked
 12162  002A50  6F8E               	movwf	printf@f& (0+255),b
 12163  002A52  0EFF               	movlw	high STR_80
 12164  002A54  0100               	movlb	0	; () banked
 12165  002A56  6F8F               	movwf	(printf@f+1)& (0+255),b
 12166  002A58  EC8F  F00D         	call	_printf	;wreg free
 12167                           
 12168                           ;Test.c: 138: _delay((unsigned long)((100)*(32000000/4000.0)));
 12169  002A5C  0E05               	movlw	5
 12170  002A5E  0100               	movlb	0	; () banked
 12171  002A60  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12172  002A62  0E0F               	movlw	15
 12173  002A64  0100               	movlb	0	; () banked
 12174  002A66  6FAB               	movwf	??_sensorTest& (0+255),b
 12175  002A68  0EF1               	movlw	241
 12176  002A6A                     u10287:
 12177  002A6A  2EE8               	decfsz	wreg,f,c
 12178  002A6C  D7FE               	bra	u10287
 12179  002A6E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12180  002A70  D7FC               	bra	u10287
 12181  002A72  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12182  002A74  D7FA               	bra	u10287
 12183                           
 12184                           ;Test.c: 139: LATCbits.LATC5 = 1;
 12185  002A76  8A8B               	bsf	3979,5,c	;volatile
 12186                           
 12187                           ;Test.c: 141: while(PORTBbits.RB1 == 0){
 12188  002A78  D05C               	goto	l8275
 12189  002A7A                     l8257:
 12190                           
 12191                           ;Test.c: 142: readADC(0);
 12192  002A7A  0E00               	movlw	0
 12193  002A7C  EC32  F02C         	call	_readADC
 12194                           
 12195                           ;Test.c: 143: int res = ADRESH<<8 | ADRESL;
 12196  002A80  50C3               	movf	4035,w,c	;volatile
 12197  002A82  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 12198  002A86  0100               	movlb	0	; () banked
 12199  002A88  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 12200  002A8A  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 12201  002A8E  0100               	movlb	0	; () banked
 12202  002A90  6BAB               	clrf	??_sensorTest& (0+255),b
 12203  002A92  0100               	movlb	0	; () banked
 12204  002A94  11AB               	iorwf	??_sensorTest& (0+255),w,b
 12205  002A96  0100               	movlb	0	; () banked
 12206  002A98  6FAD               	movwf	sensorTest@res& (0+255),b
 12207  002A9A  0100               	movlb	0	; () banked
 12208  002A9C  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 12209  002A9E  0100               	movlb	0	; () banked
 12210  002AA0  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 12211                           
 12212                           ; BSR set to: 0
 12213                           ;Test.c: 144: IR_signal = (res > 800) ? 1 : 0;
 12214  002AA2  0100               	movlb	0	; () banked
 12215  002AA4  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 12216  002AA6  D00A               	goto	u7030
 12217  002AA8  0E21               	movlw	33
 12218  002AAA  0100               	movlb	0	; () banked
 12219  002AAC  5DAD               	subwf	sensorTest@res& (0+255),w,b
 12220  002AAE  0E03               	movlw	3
 12221  002AB0  0100               	movlb	0	; () banked
 12222  002AB2  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 12223  002AB4  A0D8               	btfss	status,0,c
 12224  002AB6  D002               	goto	u7030
 12225  002AB8  0E01               	movlw	1
 12226  002ABA  D001               	goto	u7040
 12227  002ABC                     u7030:
 12228  002ABC  0E00               	movlw	0
 12229  002ABE                     u7040:
 12230  002ABE  0100               	movlb	0	; () banked
 12231  002AC0  6FE0               	movwf	_IR_signal& (0+255),b
 12232  002AC2  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 12233                           
 12234                           ;Test.c: 146: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12235  002AC4  0E01               	movlw	1
 12236  002AC6  EC39  F02D         	call	_lcdInst
 12237  002ACA  0E68               	movlw	104
 12238  002ACC  0100               	movlb	0	; () banked
 12239  002ACE  6FAB               	movwf	??_sensorTest& (0+255),b
 12240  002AD0  0EE4               	movlw	228
 12241  002AD2                     u10297:
 12242  002AD2  2EE8               	decfsz	wreg,f,c
 12243  002AD4  D7FE               	bra	u10297
 12244  002AD6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12245  002AD8  D7FC               	bra	u10297
 12246  002ADA  F000               	nop	
 12247  002ADC  0E80               	movlw	128
 12248  002ADE  EC39  F02D         	call	_lcdInst
 12249                           
 12250                           ;Test.c: 147: printf("IR_signal: %d ", IR_signal);
 12251  002AE2  0E7C               	movlw	low STR_81
 12252  002AE4  0100               	movlb	0	; () banked
 12253  002AE6  6F8E               	movwf	printf@f& (0+255),b
 12254  002AE8  0EFE               	movlw	high STR_81
 12255  002AEA  0100               	movlb	0	; () banked
 12256  002AEC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12257  002AEE  C0E0  F090         	movff	_IR_signal,?_printf+2
 12258  002AF2  C0E1  F091         	movff	_IR_signal+1,?_printf+3
 12259  002AF6  EC8F  F00D         	call	_printf	;wreg free
 12260                           
 12261                           ;Test.c: 148: lcdInst(0b11000000);;
 12262  002AFA  0EC0               	movlw	192
 12263  002AFC  EC39  F02D         	call	_lcdInst
 12264                           
 12265                           ;Test.c: 149: printf("%d", res);
 12266  002B00  0E09               	movlw	low (STR_27+14)
 12267  002B02  0100               	movlb	0	; () banked
 12268  002B04  6F8E               	movwf	printf@f& (0+255),b
 12269  002B06  0EFE               	movlw	high (STR_27+14)
 12270  002B08  0100               	movlb	0	; () banked
 12271  002B0A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12272  002B0C  C0AD  F090         	movff	sensorTest@res,?_printf+2
 12273  002B10  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 12274  002B14  EC8F  F00D         	call	_printf	;wreg free
 12275                           
 12276                           ;Test.c: 150: _delay((unsigned long)((100)*(32000000/4000.0)));
 12277  002B18  0E05               	movlw	5
 12278  002B1A  0100               	movlb	0	; () banked
 12279  002B1C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12280  002B1E  0E0F               	movlw	15
 12281  002B20  0100               	movlb	0	; () banked
 12282  002B22  6FAB               	movwf	??_sensorTest& (0+255),b
 12283  002B24  0EF1               	movlw	241
 12284  002B26                     u10307:
 12285  002B26  2EE8               	decfsz	wreg,f,c
 12286  002B28  D7FE               	bra	u10307
 12287  002B2A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12288  002B2C  D7FC               	bra	u10307
 12289  002B2E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12290  002B30  D7FA               	bra	u10307
 12291  002B32                     l8275:
 12292  002B32  A281               	btfss	3969,1,c	;volatile
 12293  002B34  D7A2               	goto	l8257
 12294                           
 12295                           ;Test.c: 151: }
 12296                           ;Test.c: 152: LATCbits.LATC5 = 0;
 12297  002B36  9A8B               	bcf	3979,5,c	;volatile
 12298                           
 12299                           ;Test.c: 160: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12300  002B38  0E01               	movlw	1
 12301  002B3A  EC39  F02D         	call	_lcdInst
 12302  002B3E  0E68               	movlw	104
 12303  002B40  0100               	movlb	0	; () banked
 12304  002B42  6FAB               	movwf	??_sensorTest& (0+255),b
 12305  002B44  0EE4               	movlw	228
 12306  002B46                     u10317:
 12307  002B46  2EE8               	decfsz	wreg,f,c
 12308  002B48  D7FE               	bra	u10317
 12309  002B4A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12310  002B4C  D7FC               	bra	u10317
 12311  002B4E  F000               	nop	
 12312  002B50  0E80               	movlw	128
 12313  002B52  EC39  F02D         	call	_lcdInst
 12314                           
 12315                           ;Test.c: 161: printf("TST: MAGNETISM");
 12316  002B56  0EA9               	movlw	low STR_83
 12317  002B58  0100               	movlb	0	; () banked
 12318  002B5A  6F8E               	movwf	printf@f& (0+255),b
 12319  002B5C  0EFE               	movlw	high STR_83
 12320  002B5E  0100               	movlb	0	; () banked
 12321  002B60  6F8F               	movwf	(printf@f+1)& (0+255),b
 12322  002B62  EC8F  F00D         	call	_printf	;wreg free
 12323                           
 12324                           ;Test.c: 162: _delay((unsigned long)((100)*(32000000/4000.0)));
 12325  002B66  0E05               	movlw	5
 12326  002B68  0100               	movlb	0	; () banked
 12327  002B6A  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12328  002B6C  0E0F               	movlw	15
 12329  002B6E  0100               	movlb	0	; () banked
 12330  002B70  6FAB               	movwf	??_sensorTest& (0+255),b
 12331  002B72  0EF1               	movlw	241
 12332  002B74                     u10327:
 12333  002B74  2EE8               	decfsz	wreg,f,c
 12334  002B76  D7FE               	bra	u10327
 12335  002B78  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12336  002B7A  D7FC               	bra	u10327
 12337  002B7C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12338  002B7E  D7FA               	bra	u10327
 12339                           
 12340                           ;Test.c: 163: while(PORTBbits.RB1 == 0){
 12341  002B80  D021               	goto	l8293
 12342  002B82                     l8287:
 12343                           
 12344                           ;Test.c: 164: readMAG();
 12345  002B82  ECB5  F029         	call	_readMAG	;wreg free
 12346                           
 12347                           ;Test.c: 165: lcdInst(0b10000000);;
 12348  002B86  0E80               	movlw	128
 12349  002B88  EC39  F02D         	call	_lcdInst
 12350                           
 12351                           ;Test.c: 166: lcdInst(0b11000000);;
 12352  002B8C  0EC0               	movlw	192
 12353  002B8E  EC39  F02D         	call	_lcdInst
 12354                           
 12355                           ;Test.c: 167: printf("MAG_signal: %d ", MAG_signal);
 12356  002B92  0E1D               	movlw	low STR_84
 12357  002B94  0100               	movlb	0	; () banked
 12358  002B96  6F8E               	movwf	printf@f& (0+255),b
 12359  002B98  0EFE               	movlw	high STR_84
 12360  002B9A  0100               	movlb	0	; () banked
 12361  002B9C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12362  002B9E  C0E2  F090         	movff	_MAG_signal,?_printf+2
 12363  002BA2  C0E3  F091         	movff	_MAG_signal+1,?_printf+3
 12364  002BA6  EC8F  F00D         	call	_printf	;wreg free
 12365                           
 12366                           ;Test.c: 168: _delay((unsigned long)((100)*(32000000/4000.0)));
 12367  002BAA  0E05               	movlw	5
 12368  002BAC  0100               	movlb	0	; () banked
 12369  002BAE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12370  002BB0  0E0F               	movlw	15
 12371  002BB2  0100               	movlb	0	; () banked
 12372  002BB4  6FAB               	movwf	??_sensorTest& (0+255),b
 12373  002BB6  0EF1               	movlw	241
 12374  002BB8                     u10337:
 12375  002BB8  2EE8               	decfsz	wreg,f,c
 12376  002BBA  D7FE               	bra	u10337
 12377  002BBC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12378  002BBE  D7FC               	bra	u10337
 12379  002BC0  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12380  002BC2  D7FA               	bra	u10337
 12381  002BC4                     l8293:
 12382  002BC4  A281               	btfss	3969,1,c	;volatile
 12383  002BC6  D7DD               	goto	l8287
 12384                           
 12385                           ;Test.c: 169: }
 12386                           ;Test.c: 174: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12387  002BC8  0E01               	movlw	1
 12388  002BCA  EC39  F02D         	call	_lcdInst
 12389  002BCE  0E68               	movlw	104
 12390  002BD0  0100               	movlb	0	; () banked
 12391  002BD2  6FAB               	movwf	??_sensorTest& (0+255),b
 12392  002BD4  0EE4               	movlw	228
 12393  002BD6                     u10347:
 12394  002BD6  2EE8               	decfsz	wreg,f,c
 12395  002BD8  D7FE               	bra	u10347
 12396  002BDA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12397  002BDC  D7FC               	bra	u10347
 12398  002BDE  F000               	nop	
 12399  002BE0  0E80               	movlw	128
 12400  002BE2  EC39  F02D         	call	_lcdInst
 12401                           
 12402                           ;Test.c: 175: printf("TST: COND");
 12403  002BE6  0E86               	movlw	low STR_85
 12404  002BE8  0100               	movlb	0	; () banked
 12405  002BEA  6F8E               	movwf	printf@f& (0+255),b
 12406  002BEC  0EFF               	movlw	high STR_85
 12407  002BEE  0100               	movlb	0	; () banked
 12408  002BF0  6F8F               	movwf	(printf@f+1)& (0+255),b
 12409  002BF2  EC8F  F00D         	call	_printf	;wreg free
 12410                           
 12411                           ;Test.c: 176: _delay((unsigned long)((100)*(32000000/4000.0)));
 12412  002BF6  0E05               	movlw	5
 12413  002BF8  0100               	movlb	0	; () banked
 12414  002BFA  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12415  002BFC  0E0F               	movlw	15
 12416  002BFE  0100               	movlb	0	; () banked
 12417  002C00  6FAB               	movwf	??_sensorTest& (0+255),b
 12418  002C02  0EF1               	movlw	241
 12419  002C04                     u10357:
 12420  002C04  2EE8               	decfsz	wreg,f,c
 12421  002C06  D7FE               	bra	u10357
 12422  002C08  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12423  002C0A  D7FC               	bra	u10357
 12424  002C0C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12425  002C0E  D7FA               	bra	u10357
 12426  002C10                     l8305:
 12427                           
 12428                           ;Test.c: 178: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12429  002C10  0E01               	movlw	1
 12430  002C12  EC39  F02D         	call	_lcdInst
 12431  002C16  0E68               	movlw	104
 12432  002C18  0100               	movlb	0	; () banked
 12433  002C1A  6FAB               	movwf	??_sensorTest& (0+255),b
 12434  002C1C  0EE4               	movlw	228
 12435  002C1E                     u10367:
 12436  002C1E  2EE8               	decfsz	wreg,f,c
 12437  002C20  D7FE               	bra	u10367
 12438  002C22  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12439  002C24  D7FC               	bra	u10367
 12440  002C26  F000               	nop	
 12441  002C28  0E80               	movlw	128
 12442  002C2A  EC39  F02D         	call	_lcdInst
 12443                           
 12444                           ;Test.c: 179: printf("TST: COND");
 12445  002C2E  0E86               	movlw	low STR_85
 12446  002C30  0100               	movlb	0	; () banked
 12447  002C32  6F8E               	movwf	printf@f& (0+255),b
 12448  002C34  0EFF               	movlw	high STR_85
 12449  002C36  0100               	movlb	0	; () banked
 12450  002C38  6F8F               	movwf	(printf@f+1)& (0+255),b
 12451  002C3A  EC8F  F00D         	call	_printf	;wreg free
 12452                           
 12453                           ;Test.c: 180: while(PORTBbits.RB1 == 0){
 12454  002C3E  D01B               	goto	l8317
 12455  002C40                     l8313:
 12456                           
 12457                           ;Test.c: 184: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12458  002C40  0E80               	movlw	128
 12459  002C42  EC39  F02D         	call	_lcdInst
 12460  002C46  0EC0               	movlw	192
 12461  002C48  EC39  F02D         	call	_lcdInst
 12462                           
 12463                           ;Test.c: 185: printf("COND: %d", PORTAbits.RA2);
 12464  002C4C  0EA4               	movlw	low STR_87
 12465  002C4E  0100               	movlb	0	; () banked
 12466  002C50  6F8E               	movwf	printf@f& (0+255),b
 12467  002C52  0EFF               	movlw	high STR_87
 12468  002C54  0100               	movlb	0	; () banked
 12469  002C56  6F8F               	movwf	(printf@f+1)& (0+255),b
 12470  002C58  A480               	btfss	3968,2,c	;volatile
 12471  002C5A  D004               	goto	u7070
 12472  002C5C  0100               	movlb	0	; () banked
 12473  002C5E  6BAB               	clrf	??_sensorTest& (0+255),b
 12474  002C60  2BAB               	incf	??_sensorTest& (0+255),f,b
 12475  002C62  D002               	goto	u7078
 12476  002C64                     u7070:
 12477  002C64  0100               	movlb	0	; () banked
 12478  002C66  6BAB               	clrf	??_sensorTest& (0+255),b
 12479  002C68                     u7078:
 12480  002C68  0100               	movlb	0	; () banked
 12481  002C6A  51AB               	movf	??_sensorTest& (0+255),w,b
 12482  002C6C  0100               	movlb	0	; () banked
 12483  002C6E  6F90               	movwf	(?_printf+2)& (0+255),b
 12484  002C70  6B91               	clrf	(?_printf+3)& (0+255),b
 12485  002C72  EC8F  F00D         	call	_printf	;wreg free
 12486  002C76                     l8317:
 12487  002C76  A281               	btfss	3969,1,c	;volatile
 12488  002C78  D7E3               	goto	l8313
 12489                           
 12490                           ;Test.c: 186: }
 12491                           ;Test.c: 187: if(PORTB >> 4 == 0b1111){
 12492  002C7A  3881               	swapf	3969,w,c	;volatile
 12493  002C7C  0B0F               	andlw	15
 12494  002C7E  0A0F               	xorlw	15
 12495  002C80  B4D8               	btfsc	status,2,c
 12496  002C82  0012               	return	
 12497                           
 12498                           ;Test.c: 190: else{
 12499                           ;Test.c: 191: LATAbits.LATA3 = 1;
 12500                           
 12501                           ;Test.c: 189: }
 12502                           
 12503                           ;Test.c: 188: break;
 12504  002C84  8689               	bsf	3977,3,c	;volatile
 12505                           
 12506                           ;Test.c: 192: while(PORTBbits.RB1 == 1){
 12507  002C86  D01B               	goto	l8329
 12508  002C88                     l8325:
 12509                           
 12510                           ;Test.c: 194: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12511  002C88  0E80               	movlw	128
 12512  002C8A  EC39  F02D         	call	_lcdInst
 12513  002C8E  0EC0               	movlw	192
 12514  002C90  EC39  F02D         	call	_lcdInst
 12515                           
 12516                           ;Test.c: 195: printf("COND: %d", PORTAbits.RA2);
 12517  002C94  0EA4               	movlw	low STR_87
 12518  002C96  0100               	movlb	0	; () banked
 12519  002C98  6F8E               	movwf	printf@f& (0+255),b
 12520  002C9A  0EFF               	movlw	high STR_87
 12521  002C9C  0100               	movlb	0	; () banked
 12522  002C9E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12523  002CA0  A480               	btfss	3968,2,c	;volatile
 12524  002CA2  D004               	goto	u7100
 12525  002CA4  0100               	movlb	0	; () banked
 12526  002CA6  6BAB               	clrf	??_sensorTest& (0+255),b
 12527  002CA8  2BAB               	incf	??_sensorTest& (0+255),f,b
 12528  002CAA  D002               	goto	u7108
 12529  002CAC                     u7100:
 12530  002CAC  0100               	movlb	0	; () banked
 12531  002CAE  6BAB               	clrf	??_sensorTest& (0+255),b
 12532  002CB0                     u7108:
 12533  002CB0  0100               	movlb	0	; () banked
 12534  002CB2  51AB               	movf	??_sensorTest& (0+255),w,b
 12535  002CB4  0100               	movlb	0	; () banked
 12536  002CB6  6F90               	movwf	(?_printf+2)& (0+255),b
 12537  002CB8  6B91               	clrf	(?_printf+3)& (0+255),b
 12538  002CBA  EC8F  F00D         	call	_printf	;wreg free
 12539  002CBE                     l8329:
 12540  002CBE  B281               	btfsc	3969,1,c	;volatile
 12541  002CC0  D7E3               	goto	l8325
 12542                           
 12543                           ;Test.c: 196: }
 12544                           ;Test.c: 197: LATAbits.LATA3 = !1;
 12545  002CC2  9689               	bcf	3977,3,c	;volatile
 12546  002CC4  D7A5               	goto	l8305
 12547  002CC6                     __end_of_sensorTest:
 12548                           	opt stack 0
 12549                           tblptru	equ	0xFF8
 12550                           tblptrh	equ	0xFF7
 12551                           tblptrl	equ	0xFF6
 12552                           tablat	equ	0xFF5
 12553                           prodh	equ	0xFF4
 12554                           prodl	equ	0xFF3
 12555                           intcon	equ	0xFF2
 12556                           intcon2	equ	0xFF1
 12557                           intcon3	equ	0xFF0
 12558                           postinc0	equ	0xFEE
 12559                           wreg	equ	0xFE8
 12560                           postdec1	equ	0xFE5
 12561                           fsr1l	equ	0xFE1
 12562                           indf2	equ	0xFDF
 12563                           postinc2	equ	0xFDE
 12564                           postdec2	equ	0xFDD
 12565                           fsr2h	equ	0xFDA
 12566                           fsr2l	equ	0xFD9
 12567                           status	equ	0xFD8
 12568                           
 12569 ;; *************** function _readMAG *****************
 12570 ;; Defined at:
 12571 ;;		line 29 in file "ADCFunctionality.c"
 12572 ;; Parameters:    Size  Location     Type
 12573 ;;		None
 12574 ;; Auto vars:     Size  Location     Type
 12575 ;;  res             2    4[BANK0 ] int 
 12576 ;; Return value:  Size  Location     Type
 12577 ;;                  1    wreg      void 
 12578 ;; Registers used:
 12579 ;;		wreg, status,2, status,0, cstack
 12580 ;; Tracked objects:
 12581 ;;		On entry : 0/0
 12582 ;;		On exit  : 0/0
 12583 ;;		Unchanged: 0/0
 12584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12586 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12587 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12588 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12589 ;;Total ram usage:        4 bytes
 12590 ;; Hardware stack levels used:    1
 12591 ;; Hardware stack levels required when called:    8
 12592 ;; This function calls:
 12593 ;;		_readADC
 12594 ;; This function is called by:
 12595 ;;		_getMAG
 12596 ;;		_sensorTest
 12597 ;; This function uses a non-reentrant model
 12598 ;;
 12599                           
 12600                           	psect	text42
 12601  00536A                     __ptext42:
 12602                           	opt stack 0
 12603  00536A                     _readMAG:
 12604                           	opt stack 19
 12605                           
 12606                           ;ADCFunctionality.c: 30: readADC(1);
 12607                           
 12608                           ;incstack = 0
 12609  00536A  0E01               	movlw	1
 12610  00536C  EC32  F02C         	call	_readADC
 12611                           
 12612                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 12613  005370  50C3               	movf	4035,w,c	;volatile
 12614  005372  CFC4 F082          	movff	4036,??_readMAG	;volatile
 12615  005376  0100               	movlb	0	; () banked
 12616  005378  6B83               	clrf	(??_readMAG+1)& (0+255),b
 12617  00537A  C082  F083         	movff	??_readMAG,??_readMAG+1
 12618  00537E  0100               	movlb	0	; () banked
 12619  005380  6B82               	clrf	??_readMAG& (0+255),b
 12620  005382  0100               	movlb	0	; () banked
 12621  005384  1182               	iorwf	??_readMAG& (0+255),w,b
 12622  005386  0100               	movlb	0	; () banked
 12623  005388  6F84               	movwf	readMAG@res& (0+255),b
 12624  00538A  0100               	movlb	0	; () banked
 12625  00538C  5183               	movf	(??_readMAG+1)& (0+255),w,b
 12626  00538E  0100               	movlb	0	; () banked
 12627  005390  6F85               	movwf	(readMAG@res+1)& (0+255),b
 12628                           
 12629                           ; BSR set to: 0
 12630                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 12631  005392  0100               	movlb	0	; () banked
 12632  005394  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 12633  005396  D008               	goto	u5071
 12634  005398  0100               	movlb	0	; () banked
 12635  00539A  5185               	movf	(readMAG@res+1)& (0+255),w,b
 12636  00539C  E107               	bnz	u5070
 12637  00539E  0E96               	movlw	150
 12638  0053A0  0100               	movlb	0	; () banked
 12639  0053A2  5D84               	subwf	readMAG@res& (0+255),w,b
 12640  0053A4  B0D8               	btfsc	status,0,c
 12641  0053A6  D002               	goto	u5070
 12642  0053A8                     u5071:
 12643  0053A8  0E01               	movlw	1
 12644  0053AA  D001               	goto	u5080
 12645  0053AC                     u5070:
 12646  0053AC  0E00               	movlw	0
 12647  0053AE                     u5080:
 12648  0053AE  0100               	movlb	0	; () banked
 12649  0053B0  6FE2               	movwf	_MAG_signal& (0+255),b
 12650  0053B2  6BE3               	clrf	(_MAG_signal+1)& (0+255),b
 12651                           
 12652                           ; BSR set to: 0
 12653  0053B4  0012               	return		;funcret
 12654  0053B6                     __end_of_readMAG:
 12655                           	opt stack 0
 12656                           tblptru	equ	0xFF8
 12657                           tblptrh	equ	0xFF7
 12658                           tblptrl	equ	0xFF6
 12659                           tablat	equ	0xFF5
 12660                           prodh	equ	0xFF4
 12661                           prodl	equ	0xFF3
 12662                           intcon	equ	0xFF2
 12663                           intcon2	equ	0xFF1
 12664                           intcon3	equ	0xFF0
 12665                           postinc0	equ	0xFEE
 12666                           wreg	equ	0xFE8
 12667                           postdec1	equ	0xFE5
 12668                           fsr1l	equ	0xFE1
 12669                           indf2	equ	0xFDF
 12670                           postinc2	equ	0xFDE
 12671                           postdec2	equ	0xFDD
 12672                           fsr2h	equ	0xFDA
 12673                           fsr2l	equ	0xFD9
 12674                           status	equ	0xFD8
 12675                           
 12676 ;; *************** function _arm *****************
 12677 ;; Defined at:
 12678 ;;		line 639 in file "Test.c"
 12679 ;; Parameters:    Size  Location     Type
 12680 ;;		None
 12681 ;; Auto vars:     Size  Location     Type
 12682 ;;  on              2   44[BANK0 ] int 
 12683 ;; Return value:  Size  Location     Type
 12684 ;;                  1    wreg      void 
 12685 ;; Registers used:
 12686 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12687 ;; Tracked objects:
 12688 ;;		On entry : 0/0
 12689 ;;		On exit  : 0/0
 12690 ;;		Unchanged: 0/0
 12691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12693 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12694 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12695 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12696 ;;Total ram usage:        3 bytes
 12697 ;; Hardware stack levels used:    1
 12698 ;; Hardware stack levels required when called:   10
 12699 ;; This function calls:
 12700 ;;		_lcdInst
 12701 ;;		_printf
 12702 ;;		_stopSignals
 12703 ;; This function is called by:
 12704 ;;		_Test
 12705 ;; This function uses a non-reentrant model
 12706 ;;
 12707                           
 12708                           	psect	text43
 12709  004280                     __ptext43:
 12710                           	opt stack 0
 12711  004280                     _arm:
 12712                           	opt stack 19
 12713                           
 12714                           ;Test.c: 640: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12715                           
 12716                           ; BSR set to: 0
 12717                           ;incstack = 0
 12718  004280  0E01               	movlw	1
 12719  004282  EC39  F02D         	call	_lcdInst
 12720  004286  0E68               	movlw	104
 12721  004288  0100               	movlb	0	; () banked
 12722  00428A  6FAB               	movwf	??_arm& (0+255),b
 12723  00428C  0EE4               	movlw	228
 12724  00428E                     u10377:
 12725  00428E  2EE8               	decfsz	wreg,f,c
 12726  004290  D7FE               	bra	u10377
 12727  004292  2FAB               	decfsz	??_arm& (0+255),f,b
 12728  004294  D7FC               	bra	u10377
 12729  004296  F000               	nop	
 12730  004298  0E80               	movlw	128
 12731  00429A  EC39  F02D         	call	_lcdInst
 12732                           
 12733                           ;Test.c: 641: printf("D WILL RETURN   ");
 12734  00429E  0EDB               	movlw	low STR_119
 12735  0042A0  0100               	movlb	0	; () banked
 12736  0042A2  6F8E               	movwf	printf@f& (0+255),b
 12737  0042A4  0EFB               	movlw	high STR_119
 12738  0042A6  0100               	movlb	0	; () banked
 12739  0042A8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12740  0042AA  EC8F  F00D         	call	_printf	;wreg free
 12741                           
 12742                           ;Test.c: 642: lcdInst(0b11000000);;
 12743  0042AE  0EC0               	movlw	192
 12744  0042B0  EC39  F02D         	call	_lcdInst
 12745                           
 12746                           ;Test.c: 643: printf("ELSE TOGGLES ARM");
 12747  0042B4  0E96               	movlw	low STR_128
 12748  0042B6  0100               	movlb	0	; () banked
 12749  0042B8  6F8E               	movwf	printf@f& (0+255),b
 12750  0042BA  0EFC               	movlw	high STR_128
 12751  0042BC  0100               	movlb	0	; () banked
 12752  0042BE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12753  0042C0  EC8F  F00D         	call	_printf	;wreg free
 12754                           
 12755                           ;Test.c: 645: (INTCONbits.GIE = 1);
 12756  0042C4  8EF2               	bsf	intcon,7,c	;volatile
 12757                           
 12758                           ;Test.c: 646: machine_state = Sorting_state;
 12759  0042C6  0E01               	movlw	1
 12760  0042C8  0100               	movlb	0	; () banked
 12761  0042CA  6FFC               	movwf	_machine_state& (0+255),b
 12762                           
 12763                           ; BSR set to: 0
 12764                           ;Test.c: 647: f_arm_position = 2;
 12765  0042CC  0E00               	movlw	0
 12766  0042CE  0100               	movlb	0	; () banked
 12767  0042D0  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12768  0042D2  0E02               	movlw	2
 12769  0042D4  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 12770                           
 12771                           ; BSR set to: 0
 12772                           ;Test.c: 648: timer2_counter = 0;
 12773  0042D6  0E00               	movlw	0
 12774  0042D8  6E74               	movwf	_timer2_counter+1,c	;volatile
 12775  0042DA  0E00               	movlw	0
 12776  0042DC  6E73               	movwf	_timer2_counter,c	;volatile
 12777                           
 12778                           ; BSR set to: 0
 12779                           ;Test.c: 649: LATBbits.LATB3 = 1;
 12780  0042DE  868A               	bsf	3978,3,c	;volatile
 12781                           
 12782                           ; BSR set to: 0
 12783                           ;Test.c: 650: TMR2ON = 1;
 12784  0042E0  84CA               	bsf	4042,2,c	;volatile
 12785                           
 12786                           ; BSR set to: 0
 12787                           ;Test.c: 651: was_low_2 = 0;
 12788  0042E2  0E00               	movlw	0
 12789  0042E4  6E7A               	movwf	_was_low_2+1,c	;volatile
 12790  0042E6  0E00               	movlw	0
 12791  0042E8  6E79               	movwf	_was_low_2,c	;volatile
 12792                           
 12793                           ; BSR set to: 0
 12794                           ;Test.c: 653: int on = 0;
 12795  0042EA  0E00               	movlw	0
 12796  0042EC  0100               	movlb	0	; () banked
 12797  0042EE  6FAD               	movwf	(arm@on+1)& (0+255),b
 12798  0042F0  0E00               	movlw	0
 12799  0042F2  6FAC               	movwf	arm@on& (0+255),b
 12800  0042F4                     l8783:
 12801                           
 12802                           ;Test.c: 655: if(on){
 12803  0042F4  0100               	movlb	0	; () banked
 12804  0042F6  51AC               	movf	arm@on& (0+255),w,b
 12805  0042F8  0100               	movlb	0	; () banked
 12806  0042FA  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12807  0042FC  B4D8               	btfsc	status,2,c
 12808  0042FE  D01C               	goto	l8795
 12809                           
 12810                           ; BSR set to: 0
 12811                           ;Test.c: 656: on = !on;
 12812  004300  0100               	movlb	0	; () banked
 12813  004302  51AC               	movf	arm@on& (0+255),w,b
 12814  004304  0100               	movlb	0	; () banked
 12815  004306  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12816  004308  A4D8               	btfss	status,2,c
 12817  00430A  D002               	goto	u7690
 12818  00430C  0E01               	movlw	1
 12819  00430E  D001               	goto	u7700
 12820  004310                     u7690:
 12821  004310  0E00               	movlw	0
 12822  004312                     u7700:
 12823  004312  0100               	movlb	0	; () banked
 12824  004314  6FAC               	movwf	arm@on& (0+255),b
 12825  004316  6BAD               	clrf	(arm@on+1)& (0+255),b
 12826                           
 12827                           ;Test.c: 657: while(PORTBbits.RB1 == 0){
 12828  004318  D005               	goto	l8789
 12829  00431A                     l8787:
 12830                           
 12831                           ; BSR set to: 0
 12832                           ;Test.c: 658: f_arm_position = 0;
 12833  00431A  0E00               	movlw	0
 12834  00431C  0100               	movlb	0	; () banked
 12835  00431E  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12836  004320  0E00               	movlw	0
 12837  004322  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 12838  004324                     l8789:
 12839                           
 12840                           ; BSR set to: 0
 12841  004324  A281               	btfss	3969,1,c	;volatile
 12842  004326  D7F9               	goto	l8787
 12843                           
 12844                           ; BSR set to: 0
 12845                           ;Test.c: 659: }
 12846                           ;Test.c: 660: if(PORTB >> 4 == 0b1111){
 12847                           
 12848                           ; BSR set to: 0
 12849  004328  3881               	swapf	3969,w,c	;volatile
 12850  00432A  0B0F               	andlw	15
 12851  00432C  0A0F               	xorlw	15
 12852  00432E  B4D8               	btfsc	status,2,c
 12853  004330  D01F               	goto	l1468
 12854  004332                     l1469:
 12855  004332  A281               	btfss	3969,1,c	;volatile
 12856  004334  D7DF               	goto	l8783
 12857  004336  D7FD               	goto	l1469
 12858  004338                     l8795:
 12859                           
 12860                           ;Test.c: 665: else{
 12861                           ;Test.c: 666: on = !on;
 12862  004338  0100               	movlb	0	; () banked
 12863  00433A  51AC               	movf	arm@on& (0+255),w,b
 12864  00433C  0100               	movlb	0	; () banked
 12865  00433E  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12866  004340  A4D8               	btfss	status,2,c
 12867  004342  D002               	goto	u7740
 12868  004344  0E01               	movlw	1
 12869  004346  D001               	goto	u7750
 12870  004348                     u7740:
 12871  004348  0E00               	movlw	0
 12872  00434A                     u7750:
 12873  00434A  0100               	movlb	0	; () banked
 12874  00434C  6FAC               	movwf	arm@on& (0+255),b
 12875  00434E  6BAD               	clrf	(arm@on+1)& (0+255),b
 12876                           
 12877                           ;Test.c: 667: while(PORTBbits.RB1 == 0){
 12878  004350  D005               	goto	l8799
 12879  004352                     l8797:
 12880                           
 12881                           ; BSR set to: 0
 12882                           ;Test.c: 668: f_arm_position = 1;
 12883  004352  0E00               	movlw	0
 12884  004354  0100               	movlb	0	; () banked
 12885  004356  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12886  004358  0E01               	movlw	1
 12887  00435A  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 12888  00435C                     l8799:
 12889                           
 12890                           ; BSR set to: 0
 12891  00435C  A281               	btfss	3969,1,c	;volatile
 12892  00435E  D7F9               	goto	l8797
 12893                           
 12894                           ; BSR set to: 0
 12895                           ;Test.c: 669: }
 12896                           ;Test.c: 670: if(PORTB >> 4 == 0b1111){
 12897                           
 12898                           ; BSR set to: 0
 12899  004360  3881               	swapf	3969,w,c	;volatile
 12900  004362  0B0F               	andlw	15
 12901  004364  0A0F               	xorlw	15
 12902  004366  B4D8               	btfsc	status,2,c
 12903  004368  D003               	goto	l1468
 12904  00436A                     l1477:
 12905  00436A  A281               	btfss	3969,1,c	;volatile
 12906  00436C  D7C3               	goto	l8783
 12907  00436E  D7FD               	goto	l1477
 12908  004370                     l1468:
 12909                           
 12910                           ; BSR set to: 0
 12911                           ;Test.c: 674: }
 12912                           ;Test.c: 675: }
 12913                           ;Test.c: 677: (INTCONbits.GIE = 0);
 12914  004370  9EF2               	bcf	intcon,7,c	;volatile
 12915                           
 12916                           ; BSR set to: 0
 12917                           ;Test.c: 678: stopSignals();
 12918  004372  ECEE  F02C         	call	_stopSignals	;wreg free
 12919                           
 12920                           ;Test.c: 679: machine_state = Testing_state;
 12921  004376  0E03               	movlw	3
 12922  004378  0100               	movlb	0	; () banked
 12923  00437A  6FFC               	movwf	_machine_state& (0+255),b
 12924                           
 12925                           ; BSR set to: 0
 12926  00437C  0012               	return		;funcret
 12927  00437E                     __end_of_arm:
 12928                           	opt stack 0
 12929                           tblptru	equ	0xFF8
 12930                           tblptrh	equ	0xFF7
 12931                           tblptrl	equ	0xFF6
 12932                           tablat	equ	0xFF5
 12933                           prodh	equ	0xFF4
 12934                           prodl	equ	0xFF3
 12935                           intcon	equ	0xFF2
 12936                           intcon2	equ	0xFF1
 12937                           intcon3	equ	0xFF0
 12938                           postinc0	equ	0xFEE
 12939                           wreg	equ	0xFE8
 12940                           postdec1	equ	0xFE5
 12941                           fsr1l	equ	0xFE1
 12942                           indf2	equ	0xFDF
 12943                           postinc2	equ	0xFDE
 12944                           postdec2	equ	0xFDD
 12945                           fsr2h	equ	0xFDA
 12946                           fsr2l	equ	0xFD9
 12947                           status	equ	0xFD8
 12948                           
 12949 ;; *************** function _algorithmTest *****************
 12950 ;; Defined at:
 12951 ;;		line 79 in file "Test.c"
 12952 ;; Parameters:    Size  Location     Type
 12953 ;;		None
 12954 ;; Auto vars:     Size  Location     Type
 12955 ;;		None
 12956 ;; Return value:  Size  Location     Type
 12957 ;;                  1    wreg      void 
 12958 ;; Registers used:
 12959 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12960 ;; Tracked objects:
 12961 ;;		On entry : 0/0
 12962 ;;		On exit  : 0/0
 12963 ;;		Unchanged: 0/0
 12964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12967 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12968 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12969 ;;Total ram usage:        2 bytes
 12970 ;; Hardware stack levels used:    1
 12971 ;; Hardware stack levels required when called:   10
 12972 ;; This function calls:
 12973 ;;		_lcdInst
 12974 ;;		_printf
 12975 ;; This function is called by:
 12976 ;;		_Test
 12977 ;; This function uses a non-reentrant model
 12978 ;;
 12979                           
 12980                           	psect	text44
 12981  004548                     __ptext44:
 12982                           	opt stack 0
 12983  004548                     _algorithmTest:
 12984                           	opt stack 19
 12985                           
 12986                           ;Test.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 12987                           
 12988                           ; BSR set to: 0
 12989                           ;incstack = 0
 12990  004548  0E01               	movlw	1
 12991  00454A  EC39  F02D         	call	_lcdInst
 12992  00454E  0E68               	movlw	104
 12993  004550  0100               	movlb	0	; () banked
 12994  004552  6FAB               	movwf	??_algorithmTest& (0+255),b
 12995  004554  0EE4               	movlw	228
 12996  004556                     u10387:
 12997  004556  2EE8               	decfsz	wreg,f,c
 12998  004558  D7FE               	bra	u10387
 12999  00455A  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13000  00455C  D7FC               	bra	u10387
 13001  00455E  F000               	nop	
 13002  004560  0E80               	movlw	128
 13003  004562  EC39  F02D         	call	_lcdInst
 13004                           
 13005                           ;Test.c: 82: printf("ALGORITHM TEST");
 13006  004566  0EF4               	movlw	low STR_71
 13007  004568  0100               	movlb	0	; () banked
 13008  00456A  6F8E               	movwf	printf@f& (0+255),b
 13009  00456C  0EFE               	movlw	high STR_71
 13010  00456E  0100               	movlb	0	; () banked
 13011  004570  6F8F               	movwf	(printf@f+1)& (0+255),b
 13012  004572  EC8F  F00D         	call	_printf	;wreg free
 13013                           
 13014                           ;Test.c: 83: lcdInst(0b11000000);;
 13015  004576  0EC0               	movlw	192
 13016  004578  EC39  F02D         	call	_lcdInst
 13017                           
 13018                           ;Test.c: 84: printf("PUSH TO START");
 13019  00457C  0E2D               	movlw	low STR_72
 13020  00457E  0100               	movlb	0	; () banked
 13021  004580  6F8E               	movwf	printf@f& (0+255),b
 13022  004582  0EFF               	movlw	high STR_72
 13023  004584  0100               	movlb	0	; () banked
 13024  004586  6F8F               	movwf	(printf@f+1)& (0+255),b
 13025  004588  EC8F  F00D         	call	_printf	;wreg free
 13026                           
 13027                           ;Test.c: 85: _delay((unsigned long)((100)*(32000000/4000.0)));
 13028  00458C  0E05               	movlw	5
 13029  00458E  0100               	movlb	0	; () banked
 13030  004590  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 13031  004592  0E0F               	movlw	15
 13032  004594  0100               	movlb	0	; () banked
 13033  004596  6FAB               	movwf	??_algorithmTest& (0+255),b
 13034  004598  0EF1               	movlw	241
 13035  00459A                     u10397:
 13036  00459A  2EE8               	decfsz	wreg,f,c
 13037  00459C  D7FE               	bra	u10397
 13038  00459E  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13039  0045A0  D7FC               	bra	u10397
 13040  0045A2  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 13041  0045A4  D7FA               	bra	u10397
 13042  0045A6                     l1264:
 13043  0045A6  A281               	btfss	3969,1,c	;volatile
 13044  0045A8  D7FE               	goto	l1264
 13045  0045AA                     l1267:
 13046  0045AA  B281               	btfsc	3969,1,c	;volatile
 13047  0045AC  D7FE               	goto	l1267
 13048                           
 13049                           ;Test.c: 88: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13050  0045AE  0E01               	movlw	1
 13051  0045B0  EC39  F02D         	call	_lcdInst
 13052  0045B4  0E68               	movlw	104
 13053  0045B6  0100               	movlb	0	; () banked
 13054  0045B8  6FAB               	movwf	??_algorithmTest& (0+255),b
 13055  0045BA  0EE4               	movlw	228
 13056  0045BC                     u10407:
 13057  0045BC  2EE8               	decfsz	wreg,f,c
 13058  0045BE  D7FE               	bra	u10407
 13059  0045C0  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13060  0045C2  D7FC               	bra	u10407
 13061  0045C4  F000               	nop	
 13062  0045C6  0E80               	movlw	128
 13063  0045C8  EC39  F02D         	call	_lcdInst
 13064                           
 13065                           ;Test.c: 93: printf("ALG1: 9 POPNOTAB");
 13066  0045CC  0E41               	movlw	low STR_73
 13067  0045CE  0100               	movlb	0	; () banked
 13068  0045D0  6F8E               	movwf	printf@f& (0+255),b
 13069  0045D2  0EFC               	movlw	high STR_73
 13070  0045D4  0100               	movlb	0	; () banked
 13071  0045D6  6F8F               	movwf	(printf@f+1)& (0+255),b
 13072  0045D8  EC8F  F00D         	call	_printf	;wreg free
 13073                           
 13074                           ;Test.c: 100: printf("ALG2: 12 CANS");
 13075  0045DC  0E11               	movlw	low STR_74
 13076  0045DE  0100               	movlb	0	; () banked
 13077  0045E0  6F8E               	movwf	printf@f& (0+255),b
 13078  0045E2  0EFF               	movlw	high STR_74
 13079  0045E4  0100               	movlb	0	; () banked
 13080  0045E6  6F8F               	movwf	(printf@f+1)& (0+255),b
 13081  0045E8  EC8F  F00D         	call	_printf	;wreg free
 13082                           
 13083                           ;Test.c: 109: printf("ALG3: 1 CAN");
 13084  0045EC  0E64               	movlw	low STR_75
 13085  0045EE  0100               	movlb	0	; () banked
 13086  0045F0  6F8E               	movwf	printf@f& (0+255),b
 13087  0045F2  0EFF               	movlw	high STR_75
 13088  0045F4  0100               	movlb	0	; () banked
 13089  0045F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 13090  0045F8  EC8F  F00D         	call	_printf	;wreg free
 13091                           
 13092                           ;Test.c: 115: printf("ALG4: ALL CANS");
 13093  0045FC  0ED6               	movlw	low STR_76
 13094  0045FE  0100               	movlb	0	; () banked
 13095  004600  6F8E               	movwf	printf@f& (0+255),b
 13096  004602  0EFE               	movlw	high STR_76
 13097  004604  0100               	movlb	0	; () banked
 13098  004606  6F8F               	movwf	(printf@f+1)& (0+255),b
 13099  004608  EC8F  F00D         	call	_printf	;wreg free
 13100                           
 13101                           ;Test.c: 120: printf("ALG5: NO CANS");
 13102  00460C  0E1F               	movlw	low STR_77
 13103  00460E  0100               	movlb	0	; () banked
 13104  004610  6F8E               	movwf	printf@f& (0+255),b
 13105  004612  0EFF               	movlw	high STR_77
 13106  004614  0100               	movlb	0	; () banked
 13107  004616  6F8F               	movwf	(printf@f+1)& (0+255),b
 13108  004618  EC8F  F00D         	call	_printf	;wreg free
 13109  00461C  0012               	return		;funcret
 13110  00461E                     __end_of_algorithmTest:
 13111                           	opt stack 0
 13112                           tblptru	equ	0xFF8
 13113                           tblptrh	equ	0xFF7
 13114                           tblptrl	equ	0xFF6
 13115                           tablat	equ	0xFF5
 13116                           prodh	equ	0xFF4
 13117                           prodl	equ	0xFF3
 13118                           intcon	equ	0xFF2
 13119                           intcon2	equ	0xFF1
 13120                           intcon3	equ	0xFF0
 13121                           postinc0	equ	0xFEE
 13122                           wreg	equ	0xFE8
 13123                           postdec1	equ	0xFE5
 13124                           fsr1l	equ	0xFE1
 13125                           indf2	equ	0xFDF
 13126                           postinc2	equ	0xFDE
 13127                           postdec2	equ	0xFDD
 13128                           fsr2h	equ	0xFDA
 13129                           fsr2l	equ	0xFD9
 13130                           status	equ	0xFD8
 13131                           
 13132 ;; *************** function _actuatorTest *****************
 13133 ;; Defined at:
 13134 ;;		line 202 in file "Test.c"
 13135 ;; Parameters:    Size  Location     Type
 13136 ;;		None
 13137 ;; Auto vars:     Size  Location     Type
 13138 ;;  i               1   45[BANK0 ] unsigned char 
 13139 ;;  i               1   67[BANK0 ] unsigned char 
 13140 ;;  i               1   66[BANK0 ] unsigned char 
 13141 ;;  i               1   65[BANK0 ] unsigned char 
 13142 ;;  i               1   64[BANK0 ] unsigned char 
 13143 ;;  i               1   63[BANK0 ] unsigned char 
 13144 ;;  i               1   62[BANK0 ] unsigned char 
 13145 ;;  i               1   61[BANK0 ] unsigned char 
 13146 ;;  i               1   60[BANK0 ] unsigned char 
 13147 ;;  i               1   59[BANK0 ] unsigned char 
 13148 ;;  i               1   58[BANK0 ] unsigned char 
 13149 ;;  i               1   57[BANK0 ] unsigned char 
 13150 ;;  i               1   56[BANK0 ] unsigned char 
 13151 ;;  i               1   55[BANK0 ] unsigned char 
 13152 ;;  i               1   54[BANK0 ] unsigned char 
 13153 ;;  i               1   53[BANK0 ] unsigned char 
 13154 ;;  i               1   52[BANK0 ] unsigned char 
 13155 ;;  i               1   51[BANK0 ] unsigned char 
 13156 ;;  i               1   50[BANK0 ] unsigned char 
 13157 ;;  i               1   49[BANK0 ] unsigned char 
 13158 ;;  i               1   48[BANK0 ] unsigned char 
 13159 ;;  i               1   47[BANK0 ] unsigned char 
 13160 ;;  i               1   46[BANK0 ] unsigned char 
 13161 ;;  i               2   68[BANK0 ] int 
 13162 ;; Return value:  Size  Location     Type
 13163 ;;                  1    wreg      void 
 13164 ;; Registers used:
 13165 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13166 ;; Tracked objects:
 13167 ;;		On entry : 0/0
 13168 ;;		On exit  : 0/0
 13169 ;;		Unchanged: 0/0
 13170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13172 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13173 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13174 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13175 ;;Total ram usage:       27 bytes
 13176 ;; Hardware stack levels used:    1
 13177 ;; Hardware stack levels required when called:   10
 13178 ;; This function calls:
 13179 ;;		_lcdInst
 13180 ;;		_printf
 13181 ;;		_updateServoPosition
 13182 ;; This function is called by:
 13183 ;;		_Test
 13184 ;; This function uses a non-reentrant model
 13185 ;;
 13186                           
 13187                           	psect	text45
 13188  0008DA                     __ptext45:
 13189                           	opt stack 0
 13190  0008DA                     _actuatorTest:
 13191                           	opt stack 19
 13192                           
 13193                           ;Test.c: 204: int i = 0;
 13194                           
 13195                           ;incstack = 0
 13196  0008DA  0E00               	movlw	0
 13197  0008DC  0100               	movlb	0	; () banked
 13198  0008DE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13199  0008E0  0E00               	movlw	0
 13200  0008E2  6FC4               	movwf	actuatorTest@i& (0+255),b
 13201                           
 13202                           ; BSR set to: 0
 13203                           ;Test.c: 206: (INTCONbits.GIE = 1);
 13204  0008E4  8EF2               	bsf	intcon,7,c	;volatile
 13205                           
 13206                           ; BSR set to: 0
 13207                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13208  0008E6  0E01               	movlw	1
 13209  0008E8  EC39  F02D         	call	_lcdInst
 13210  0008EC  0E68               	movlw	104
 13211  0008EE  0100               	movlb	0	; () banked
 13212  0008F0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13213  0008F2  0EE4               	movlw	228
 13214  0008F4                     u10417:
 13215  0008F4  2EE8               	decfsz	wreg,f,c
 13216  0008F6  D7FE               	bra	u10417
 13217  0008F8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13218  0008FA  D7FC               	bra	u10417
 13219  0008FC  F000               	nop	
 13220  0008FE  0E80               	movlw	128
 13221  000900  EC39  F02D         	call	_lcdInst
 13222                           
 13223                           ;Test.c: 208: printf("ACTUATORS");
 13224  000904  0E90               	movlw	low STR_89
 13225  000906  0100               	movlb	0	; () banked
 13226  000908  6F8E               	movwf	printf@f& (0+255),b
 13227  00090A  0EFF               	movlw	high STR_89
 13228  00090C  0100               	movlb	0	; () banked
 13229  00090E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13230  000910  EC8F  F00D         	call	_printf	;wreg free
 13231                           
 13232                           ;Test.c: 209: lcdInst(0b11000000);;
 13233  000914  0EC0               	movlw	192
 13234  000916  EC39  F02D         	call	_lcdInst
 13235                           
 13236                           ;Test.c: 210: printf("PUSH TO START");
 13237  00091A  0E2D               	movlw	low STR_72
 13238  00091C  0100               	movlb	0	; () banked
 13239  00091E  6F8E               	movwf	printf@f& (0+255),b
 13240  000920  0EFF               	movlw	high STR_72
 13241  000922  0100               	movlb	0	; () banked
 13242  000924  6F8F               	movwf	(printf@f+1)& (0+255),b
 13243  000926  EC8F  F00D         	call	_printf	;wreg free
 13244                           
 13245                           ;Test.c: 211: _delay((unsigned long)((100)*(32000000/4000.0)));
 13246  00092A  0E05               	movlw	5
 13247  00092C  0100               	movlb	0	; () banked
 13248  00092E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13249  000930  0E0F               	movlw	15
 13250  000932  0100               	movlb	0	; () banked
 13251  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 13252  000936  0EF1               	movlw	241
 13253  000938                     u10427:
 13254  000938  2EE8               	decfsz	wreg,f,c
 13255  00093A  D7FE               	bra	u10427
 13256  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13257  00093E  D7FC               	bra	u10427
 13258  000940  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13259  000942  D7FA               	bra	u10427
 13260  000944                     l1299:
 13261  000944  A281               	btfss	3969,1,c	;volatile
 13262  000946  D7FE               	goto	l1299
 13263  000948                     l1302:
 13264  000948  B281               	btfsc	3969,1,c	;volatile
 13265  00094A  D7FE               	goto	l1302
 13266                           
 13267                           ;Test.c: 214: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13268  00094C  0E01               	movlw	1
 13269  00094E  EC39  F02D         	call	_lcdInst
 13270  000952  0E68               	movlw	104
 13271  000954  0100               	movlb	0	; () banked
 13272  000956  6FAB               	movwf	??_actuatorTest& (0+255),b
 13273  000958  0EE4               	movlw	228
 13274  00095A                     u10437:
 13275  00095A  2EE8               	decfsz	wreg,f,c
 13276  00095C  D7FE               	bra	u10437
 13277  00095E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13278  000960  D7FC               	bra	u10437
 13279  000962  F000               	nop	
 13280  000964  0E80               	movlw	128
 13281  000966  EC39  F02D         	call	_lcdInst
 13282                           
 13283                           ;Test.c: 219: printf("TST: DC MOTORS");
 13284  00096A  0EE5               	movlw	low STR_91
 13285  00096C  0100               	movlb	0	; () banked
 13286  00096E  6F8E               	movwf	printf@f& (0+255),b
 13287  000970  0EFE               	movlw	high STR_91
 13288  000972  0100               	movlb	0	; () banked
 13289  000974  6F8F               	movwf	(printf@f+1)& (0+255),b
 13290  000976  EC8F  F00D         	call	_printf	;wreg free
 13291                           
 13292                           ;Test.c: 220: lcdInst(0b11000000);;
 13293  00097A  0EC0               	movlw	192
 13294  00097C  EC39  F02D         	call	_lcdInst
 13295                           
 13296                           ;Test.c: 221: printf("PIN RA5 HIGH.");
 13297  000980  0E03               	movlw	low STR_92
 13298  000982  0100               	movlb	0	; () banked
 13299  000984  6F8E               	movwf	printf@f& (0+255),b
 13300  000986  0EFF               	movlw	high STR_92
 13301  000988  0100               	movlb	0	; () banked
 13302  00098A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13303  00098C  EC8F  F00D         	call	_printf	;wreg free
 13304                           
 13305                           ;Test.c: 222: LATBbits.LATB2 = 1;
 13306  000990  848A               	bsf	3978,2,c	;volatile
 13307                           
 13308                           ;Test.c: 223: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 13309  000992  0E00               	movlw	0
 13310  000994  0100               	movlb	0	; () banked
 13311  000996  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13312  000998  0E00               	movlw	0
 13313  00099A  6FC4               	movwf	actuatorTest@i& (0+255),b
 13314                           
 13315                           ; BSR set to: 0
 13316  00099C  0100               	movlb	0	; () banked
 13317  00099E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13318  0009A0  D008               	goto	l8369
 13319  0009A2  0100               	movlb	0	; () banked
 13320  0009A4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13321  0009A6  E123               	bnz	l1306
 13322  0009A8  0E05               	movlw	5
 13323  0009AA  0100               	movlb	0	; () banked
 13324  0009AC  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13325  0009AE  B0D8               	btfsc	status,0,c
 13326  0009B0  D01E               	goto	l1306
 13327  0009B2                     l8369:
 13328                           
 13329                           ; BSR set to: 0
 13330  0009B2  0E00               	movlw	0
 13331  0009B4  0100               	movlb	0	; () banked
 13332  0009B6  6FAD               	movwf	actuatorTest@i_1739& (0+255),b
 13333  0009B8                     l8371:
 13334                           
 13335                           ; BSR set to: 0
 13336  0009B8  0E63               	movlw	99
 13337  0009BA  0100               	movlb	0	; () banked
 13338  0009BC  65AD               	cpfsgt	actuatorTest@i_1739& (0+255),b
 13339  0009BE  D001               	goto	l8375
 13340  0009C0  D00C               	goto	l8379
 13341  0009C2                     l8375:
 13342                           
 13343                           ; BSR set to: 0
 13344  0009C2  0E68               	movlw	104
 13345  0009C4  0100               	movlb	0	; () banked
 13346  0009C6  6FAB               	movwf	??_actuatorTest& (0+255),b
 13347  0009C8  0EE4               	movlw	228
 13348  0009CA                     u10447:
 13349  0009CA  2EE8               	decfsz	wreg,f,c
 13350  0009CC  D7FE               	bra	u10447
 13351  0009CE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13352  0009D0  D7FC               	bra	u10447
 13353  0009D2  F000               	nop	
 13354  0009D4  0100               	movlb	0	; () banked
 13355  0009D6  2BAD               	incf	actuatorTest@i_1739& (0+255),f,b
 13356  0009D8  D7EF               	goto	l8371
 13357  0009DA                     l8379:
 13358                           
 13359                           ; BSR set to: 0
 13360  0009DA  0100               	movlb	0	; () banked
 13361  0009DC  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13362  0009DE  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13363                           
 13364                           ; BSR set to: 0
 13365  0009E0  0100               	movlb	0	; () banked
 13366  0009E2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13367  0009E4  D7E6               	goto	l8369
 13368  0009E6  0100               	movlb	0	; () banked
 13369  0009E8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13370  0009EA  E101               	bnz	u7170
 13371  0009EC  D7DD               	goto	L10
 13372  0009EE                     u7170:
 13373  0009EE                     l1306:
 13374                           
 13375                           ; BSR set to: 0
 13376                           ;Test.c: 224: LATBbits.LATB2 = 0;
 13377  0009EE  948A               	bcf	3978,2,c	;volatile
 13378                           
 13379                           ; BSR set to: 0
 13380                           ;Test.c: 225: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13381  0009F0  0E01               	movlw	1
 13382  0009F2  EC39  F02D         	call	_lcdInst
 13383  0009F6  0E68               	movlw	104
 13384  0009F8  0100               	movlb	0	; () banked
 13385  0009FA  6FAB               	movwf	??_actuatorTest& (0+255),b
 13386  0009FC  0EE4               	movlw	228
 13387  0009FE                     u10457:
 13388  0009FE  2EE8               	decfsz	wreg,f,c
 13389  000A00  D7FE               	bra	u10457
 13390  000A02  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13391  000A04  D7FC               	bra	u10457
 13392  000A06  F000               	nop	
 13393  000A08  0E80               	movlw	128
 13394  000A0A  EC39  F02D         	call	_lcdInst
 13395                           
 13396                           ;Test.c: 231: printf("TST: COND SOLN'D");
 13397  000A0E  0E52               	movlw	low STR_93
 13398  000A10  0100               	movlb	0	; () banked
 13399  000A12  6F8E               	movwf	printf@f& (0+255),b
 13400  000A14  0EFC               	movlw	high STR_93
 13401  000A16  0100               	movlb	0	; () banked
 13402  000A18  6F8F               	movwf	(printf@f+1)& (0+255),b
 13403  000A1A  EC8F  F00D         	call	_printf	;wreg free
 13404                           
 13405                           ;Test.c: 232: lcdInst(0b11000000);;
 13406  000A1E  0EC0               	movlw	192
 13407  000A20  EC39  F02D         	call	_lcdInst
 13408                           
 13409                           ;Test.c: 233: printf("PIN RA3...");
 13410  000A24  0E70               	movlw	low STR_94
 13411  000A26  0100               	movlb	0	; () banked
 13412  000A28  6F8E               	movwf	printf@f& (0+255),b
 13413  000A2A  0EFF               	movlw	high STR_94
 13414  000A2C  0100               	movlb	0	; () banked
 13415  000A2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13416  000A30  EC8F  F00D         	call	_printf	;wreg free
 13417                           
 13418                           ;Test.c: 234: for(i=0;i<5;i++){
 13419  000A34  0E00               	movlw	0
 13420  000A36  0100               	movlb	0	; () banked
 13421  000A38  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13422  000A3A  0E00               	movlw	0
 13423  000A3C  6FC4               	movwf	actuatorTest@i& (0+255),b
 13424                           
 13425                           ; BSR set to: 0
 13426  000A3E  0100               	movlb	0	; () banked
 13427  000A40  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13428  000A42  D008               	goto	l1309
 13429  000A44  0100               	movlb	0	; () banked
 13430  000A46  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13431  000A48  E12C               	bnz	l1310
 13432  000A4A  0E05               	movlw	5
 13433  000A4C  0100               	movlb	0	; () banked
 13434  000A4E  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13435  000A50  B0D8               	btfsc	status,0,c
 13436  000A52  D027               	goto	l1310
 13437  000A54                     l1309:
 13438                           
 13439                           ; BSR set to: 0
 13440                           ;Test.c: 235: LATAbits.LATA3 = 1;
 13441  000A54  8689               	bsf	3977,3,c	;volatile
 13442                           
 13443                           ; BSR set to: 0
 13444                           ;Test.c: 236: _delay((unsigned long)((300)*(32000000/4000.0)));
 13445  000A56  0E0D               	movlw	13
 13446  000A58  0100               	movlb	0	; () banked
 13447  000A5A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13448  000A5C  0E2D               	movlw	45
 13449  000A5E  0100               	movlb	0	; () banked
 13450  000A60  6FAB               	movwf	??_actuatorTest& (0+255),b
 13451  000A62  0ED7               	movlw	215
 13452  000A64                     u10467:
 13453  000A64  2EE8               	decfsz	wreg,f,c
 13454  000A66  D7FE               	bra	u10467
 13455  000A68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13456  000A6A  D7FC               	bra	u10467
 13457  000A6C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13458  000A6E  D7FA               	bra	u10467
 13459  000A70  D000               	nop2	
 13460                           
 13461                           ;Test.c: 237: LATAbits.LATA3 = !1;
 13462  000A72  9689               	bcf	3977,3,c	;volatile
 13463                           
 13464                           ;Test.c: 238: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13465  000A74  0E1D               	movlw	29
 13466  000A76  0100               	movlb	0	; () banked
 13467  000A78  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13468  000A7A  0E69               	movlw	105
 13469  000A7C  0100               	movlb	0	; () banked
 13470  000A7E  6FAB               	movwf	??_actuatorTest& (0+255),b
 13471  000A80  0EA5               	movlw	165
 13472  000A82                     u10477:
 13473  000A82  2EE8               	decfsz	wreg,f,c
 13474  000A84  D7FE               	bra	u10477
 13475  000A86  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13476  000A88  D7FC               	bra	u10477
 13477  000A8A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13478  000A8C  D7FA               	bra	u10477
 13479  000A8E  0100               	movlb	0	; () banked
 13480  000A90  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13481  000A92  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13482  000A94  0100               	movlb	0	; () banked
 13483  000A96  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13484  000A98  D7DD               	goto	l1309
 13485  000A9A  0100               	movlb	0	; () banked
 13486  000A9C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13487  000A9E  E101               	bnz	u7190
 13488  000AA0  D7D4               	goto	L11
 13489  000AA2                     u7190:
 13490  000AA2                     l1310:
 13491                           
 13492                           ; BSR set to: 0
 13493                           ;Test.c: 239: }
 13494                           ;Test.c: 240: LATAbits.LATA3 = !1;
 13495  000AA2  9689               	bcf	3977,3,c	;volatile
 13496                           
 13497                           ; BSR set to: 0
 13498                           ;Test.c: 241: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13499  000AA4  0E01               	movlw	1
 13500  000AA6  EC39  F02D         	call	_lcdInst
 13501  000AAA  0E68               	movlw	104
 13502  000AAC  0100               	movlb	0	; () banked
 13503  000AAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13504  000AB0  0EE4               	movlw	228
 13505  000AB2                     u10487:
 13506  000AB2  2EE8               	decfsz	wreg,f,c
 13507  000AB4  D7FE               	bra	u10487
 13508  000AB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13509  000AB8  D7FC               	bra	u10487
 13510  000ABA  F000               	nop	
 13511  000ABC  0E80               	movlw	128
 13512  000ABE  EC39  F02D         	call	_lcdInst
 13513                           
 13514                           ;Test.c: 247: printf("TST: PUSH SOLN'D");
 13515  000AC2  0E63               	movlw	low STR_95
 13516  000AC4  0100               	movlb	0	; () banked
 13517  000AC6  6F8E               	movwf	printf@f& (0+255),b
 13518  000AC8  0EFC               	movlw	high STR_95
 13519  000ACA  0100               	movlb	0	; () banked
 13520  000ACC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13521  000ACE  EC8F  F00D         	call	_printf	;wreg free
 13522                           
 13523                           ;Test.c: 248: lcdInst(0b11000000);;
 13524  000AD2  0EC0               	movlw	192
 13525  000AD4  EC39  F02D         	call	_lcdInst
 13526                           
 13527                           ;Test.c: 249: printf("PIN RA4...");
 13528  000AD8  0E7B               	movlw	low STR_96
 13529  000ADA  0100               	movlb	0	; () banked
 13530  000ADC  6F8E               	movwf	printf@f& (0+255),b
 13531  000ADE  0EFF               	movlw	high STR_96
 13532  000AE0  0100               	movlb	0	; () banked
 13533  000AE2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13534  000AE4  EC8F  F00D         	call	_printf	;wreg free
 13535                           
 13536                           ;Test.c: 250: for(i=0;i<5;i++){
 13537  000AE8  0E00               	movlw	0
 13538  000AEA  0100               	movlb	0	; () banked
 13539  000AEC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13540  000AEE  0E00               	movlw	0
 13541  000AF0  6FC4               	movwf	actuatorTest@i& (0+255),b
 13542                           
 13543                           ; BSR set to: 0
 13544  000AF2  0100               	movlb	0	; () banked
 13545  000AF4  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13546  000AF6  D008               	goto	l1311
 13547  000AF8  0100               	movlb	0	; () banked
 13548  000AFA  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13549  000AFC  E12C               	bnz	l1312
 13550  000AFE  0E05               	movlw	5
 13551  000B00  0100               	movlb	0	; () banked
 13552  000B02  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13553  000B04  B0D8               	btfsc	status,0,c
 13554  000B06  D027               	goto	l1312
 13555  000B08                     l1311:
 13556                           
 13557                           ; BSR set to: 0
 13558                           ;Test.c: 251: LATAbits.LATA4 = 1;
 13559  000B08  8889               	bsf	3977,4,c	;volatile
 13560                           
 13561                           ; BSR set to: 0
 13562                           ;Test.c: 252: _delay((unsigned long)((300)*(32000000/4000.0)));
 13563  000B0A  0E0D               	movlw	13
 13564  000B0C  0100               	movlb	0	; () banked
 13565  000B0E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13566  000B10  0E2D               	movlw	45
 13567  000B12  0100               	movlb	0	; () banked
 13568  000B14  6FAB               	movwf	??_actuatorTest& (0+255),b
 13569  000B16  0ED7               	movlw	215
 13570  000B18                     u10497:
 13571  000B18  2EE8               	decfsz	wreg,f,c
 13572  000B1A  D7FE               	bra	u10497
 13573  000B1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13574  000B1E  D7FC               	bra	u10497
 13575  000B20  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13576  000B22  D7FA               	bra	u10497
 13577  000B24  D000               	nop2	
 13578                           
 13579                           ;Test.c: 253: LATAbits.LATA4 = !1;
 13580  000B26  9889               	bcf	3977,4,c	;volatile
 13581                           
 13582                           ;Test.c: 254: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13583  000B28  0E1D               	movlw	29
 13584  000B2A  0100               	movlb	0	; () banked
 13585  000B2C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13586  000B2E  0E69               	movlw	105
 13587  000B30  0100               	movlb	0	; () banked
 13588  000B32  6FAB               	movwf	??_actuatorTest& (0+255),b
 13589  000B34  0EA5               	movlw	165
 13590  000B36                     u10507:
 13591  000B36  2EE8               	decfsz	wreg,f,c
 13592  000B38  D7FE               	bra	u10507
 13593  000B3A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13594  000B3C  D7FC               	bra	u10507
 13595  000B3E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13596  000B40  D7FA               	bra	u10507
 13597  000B42  0100               	movlb	0	; () banked
 13598  000B44  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13599  000B46  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13600  000B48  0100               	movlb	0	; () banked
 13601  000B4A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13602  000B4C  D7DD               	goto	l1311
 13603  000B4E  0100               	movlb	0	; () banked
 13604  000B50  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13605  000B52  E101               	bnz	u7210
 13606  000B54  D7D4               	goto	L12
 13607  000B56                     u7210:
 13608  000B56                     l1312:
 13609                           
 13610                           ; BSR set to: 0
 13611                           ;Test.c: 255: }
 13612                           ;Test.c: 256: LATAbits.LATA4 = !1;
 13613  000B56  9889               	bcf	3977,4,c	;volatile
 13614                           
 13615                           ; BSR set to: 0
 13616                           ;Test.c: 257: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13617  000B58  0E01               	movlw	1
 13618  000B5A  EC39  F02D         	call	_lcdInst
 13619  000B5E  0E68               	movlw	104
 13620  000B60  0100               	movlb	0	; () banked
 13621  000B62  6FAB               	movwf	??_actuatorTest& (0+255),b
 13622  000B64  0EE4               	movlw	228
 13623  000B66                     u10517:
 13624  000B66  2EE8               	decfsz	wreg,f,c
 13625  000B68  D7FE               	bra	u10517
 13626  000B6A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13627  000B6C  D7FC               	bra	u10517
 13628  000B6E  F000               	nop	
 13629  000B70  0E80               	movlw	128
 13630  000B72  EC39  F02D         	call	_lcdInst
 13631                           
 13632                           ;Test.c: 260: machine_state = Sorting_state;
 13633  000B76  0E01               	movlw	1
 13634  000B78  0100               	movlb	0	; () banked
 13635  000B7A  6FFC               	movwf	_machine_state& (0+255),b
 13636                           
 13637                           ; BSR set to: 0
 13638                           ;Test.c: 261: was_low_1 = 0;
 13639  000B7C  0E00               	movlw	0
 13640  000B7E  6E78               	movwf	_was_low_1+1,c	;volatile
 13641  000B80  0E00               	movlw	0
 13642  000B82  6E77               	movwf	_was_low_1,c	;volatile
 13643                           
 13644                           ; BSR set to: 0
 13645                           ;Test.c: 262: was_low_1 = 0;
 13646  000B84  0E00               	movlw	0
 13647  000B86  6E78               	movwf	_was_low_1+1,c	;volatile
 13648  000B88  0E00               	movlw	0
 13649  000B8A  6E77               	movwf	_was_low_1,c	;volatile
 13650                           
 13651                           ; BSR set to: 0
 13652                           ;Test.c: 269: printf("TST: PAN SERVO");
 13653  000B8C  0EC7               	movlw	low STR_97
 13654  000B8E  0100               	movlb	0	; () banked
 13655  000B90  6F8E               	movwf	printf@f& (0+255),b
 13656  000B92  0EFE               	movlw	high STR_97
 13657  000B94  0100               	movlb	0	; () banked
 13658  000B96  6F8F               	movwf	(printf@f+1)& (0+255),b
 13659  000B98  EC8F  F00D         	call	_printf	;wreg free
 13660                           
 13661                           ;Test.c: 270: lcdInst(0b11000000);;
 13662  000B9C  0EC0               	movlw	192
 13663  000B9E  EC39  F02D         	call	_lcdInst
 13664                           
 13665                           ;Test.c: 271: printf("MIDDLE -- 2s    ");
 13666  000BA2  0EB9               	movlw	low STR_98
 13667  000BA4  0100               	movlb	0	; () banked
 13668  000BA6  6F8E               	movwf	printf@f& (0+255),b
 13669  000BA8  0EFB               	movlw	high STR_98
 13670  000BAA  0100               	movlb	0	; () banked
 13671  000BAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13672  000BAE  EC8F  F00D         	call	_printf	;wreg free
 13673                           
 13674                           ;Test.c: 272: updateServoPosition(1200, 1);
 13675  000BB2  0E04               	movlw	4
 13676  000BB4  0100               	movlb	0	; () banked
 13677  000BB6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13678  000BB8  0EB0               	movlw	176
 13679  000BBA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13680  000BBC  0E00               	movlw	0
 13681  000BBE  0100               	movlb	0	; () banked
 13682  000BC0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13683  000BC2  0E01               	movlw	1
 13684  000BC4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13685  000BC6  EC6A  F026         	call	_updateServoPosition	;wreg free
 13686                           
 13687                           ;Test.c: 273: TMR1ON = 1;
 13688  000BCA  80CD               	bsf	4045,0,c	;volatile
 13689                           
 13690                           ;Test.c: 274: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13691  000BCC  0E00               	movlw	0
 13692  000BCE  0100               	movlb	0	; () banked
 13693  000BD0  6FAE               	movwf	actuatorTest@i_1746& (0+255),b
 13694  000BD2                     l8455:
 13695                           
 13696                           ; BSR set to: 0
 13697  000BD2  0E63               	movlw	99
 13698  000BD4  0100               	movlb	0	; () banked
 13699  000BD6  65AE               	cpfsgt	actuatorTest@i_1746& (0+255),b
 13700  000BD8  D001               	goto	l8459
 13701  000BDA  D00C               	goto	l8463
 13702  000BDC                     l8459:
 13703                           
 13704                           ; BSR set to: 0
 13705  000BDC  0E68               	movlw	104
 13706  000BDE  0100               	movlb	0	; () banked
 13707  000BE0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13708  000BE2  0EE4               	movlw	228
 13709  000BE4                     u10527:
 13710  000BE4  2EE8               	decfsz	wreg,f,c
 13711  000BE6  D7FE               	bra	u10527
 13712  000BE8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13713  000BEA  D7FC               	bra	u10527
 13714  000BEC  F000               	nop	
 13715  000BEE  0100               	movlb	0	; () banked
 13716  000BF0  2BAE               	incf	actuatorTest@i_1746& (0+255),f,b
 13717  000BF2  D7EF               	goto	l8455
 13718  000BF4                     l8463:
 13719                           
 13720                           ; BSR set to: 0
 13721  000BF4  0E00               	movlw	0
 13722  000BF6  0100               	movlb	0	; () banked
 13723  000BF8  6FAF               	movwf	actuatorTest@i_1747& (0+255),b
 13724  000BFA                     l8465:
 13725                           
 13726                           ; BSR set to: 0
 13727  000BFA  0E63               	movlw	99
 13728  000BFC  0100               	movlb	0	; () banked
 13729  000BFE  65AF               	cpfsgt	actuatorTest@i_1747& (0+255),b
 13730  000C00  D001               	goto	l8469
 13731  000C02  D00C               	goto	l8473
 13732  000C04                     l8469:
 13733                           
 13734                           ; BSR set to: 0
 13735  000C04  0E68               	movlw	104
 13736  000C06  0100               	movlb	0	; () banked
 13737  000C08  6FAB               	movwf	??_actuatorTest& (0+255),b
 13738  000C0A  0EE4               	movlw	228
 13739  000C0C                     u10537:
 13740  000C0C  2EE8               	decfsz	wreg,f,c
 13741  000C0E  D7FE               	bra	u10537
 13742  000C10  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13743  000C12  D7FC               	bra	u10537
 13744  000C14  F000               	nop	
 13745  000C16  0100               	movlb	0	; () banked
 13746  000C18  2BAF               	incf	actuatorTest@i_1747& (0+255),f,b
 13747  000C1A  D7EF               	goto	l8465
 13748  000C1C                     l8473:
 13749                           
 13750                           ; BSR set to: 0
 13751                           ;Test.c: 276: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13752  000C1C  0E80               	movlw	128
 13753  000C1E  EC39  F02D         	call	_lcdInst
 13754  000C22  0EC0               	movlw	192
 13755  000C24  EC39  F02D         	call	_lcdInst
 13756                           
 13757                           ;Test.c: 277: printf("RIGHT -- 2s     ");
 13758  000C28  0EA8               	movlw	low STR_99
 13759  000C2A  0100               	movlb	0	; () banked
 13760  000C2C  6F8E               	movwf	printf@f& (0+255),b
 13761  000C2E  0EFB               	movlw	high STR_99
 13762  000C30  0100               	movlb	0	; () banked
 13763  000C32  6F8F               	movwf	(printf@f+1)& (0+255),b
 13764  000C34  EC8F  F00D         	call	_printf	;wreg free
 13765                           
 13766                           ;Test.c: 278: updateServoPosition(500, 1);
 13767  000C38  0E01               	movlw	1
 13768  000C3A  0100               	movlb	0	; () banked
 13769  000C3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13770  000C3E  0EF4               	movlw	244
 13771  000C40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13772  000C42  0E00               	movlw	0
 13773  000C44  0100               	movlb	0	; () banked
 13774  000C46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13775  000C48  0E01               	movlw	1
 13776  000C4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13777  000C4C  EC6A  F026         	call	_updateServoPosition	;wreg free
 13778                           
 13779                           ;Test.c: 279: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13780  000C50  0E00               	movlw	0
 13781  000C52  0100               	movlb	0	; () banked
 13782  000C54  6FB0               	movwf	actuatorTest@i_1749& (0+255),b
 13783  000C56                     l8481:
 13784                           
 13785                           ; BSR set to: 0
 13786  000C56  0E63               	movlw	99
 13787  000C58  0100               	movlb	0	; () banked
 13788  000C5A  65B0               	cpfsgt	actuatorTest@i_1749& (0+255),b
 13789  000C5C  D001               	goto	l8485
 13790  000C5E  D00C               	goto	l8489
 13791  000C60                     l8485:
 13792                           
 13793                           ; BSR set to: 0
 13794  000C60  0E68               	movlw	104
 13795  000C62  0100               	movlb	0	; () banked
 13796  000C64  6FAB               	movwf	??_actuatorTest& (0+255),b
 13797  000C66  0EE4               	movlw	228
 13798  000C68                     u10547:
 13799  000C68  2EE8               	decfsz	wreg,f,c
 13800  000C6A  D7FE               	bra	u10547
 13801  000C6C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13802  000C6E  D7FC               	bra	u10547
 13803  000C70  F000               	nop	
 13804  000C72  0100               	movlb	0	; () banked
 13805  000C74  2BB0               	incf	actuatorTest@i_1749& (0+255),f,b
 13806  000C76  D7EF               	goto	l8481
 13807  000C78                     l8489:
 13808                           
 13809                           ; BSR set to: 0
 13810  000C78  0E00               	movlw	0
 13811  000C7A  0100               	movlb	0	; () banked
 13812  000C7C  6FB1               	movwf	actuatorTest@i_1750& (0+255),b
 13813  000C7E                     l8491:
 13814                           
 13815                           ; BSR set to: 0
 13816  000C7E  0E63               	movlw	99
 13817  000C80  0100               	movlb	0	; () banked
 13818  000C82  65B1               	cpfsgt	actuatorTest@i_1750& (0+255),b
 13819  000C84  D001               	goto	l8495
 13820  000C86  D00C               	goto	l8499
 13821  000C88                     l8495:
 13822                           
 13823                           ; BSR set to: 0
 13824  000C88  0E68               	movlw	104
 13825  000C8A  0100               	movlb	0	; () banked
 13826  000C8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 13827  000C8E  0EE4               	movlw	228
 13828  000C90                     u10557:
 13829  000C90  2EE8               	decfsz	wreg,f,c
 13830  000C92  D7FE               	bra	u10557
 13831  000C94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13832  000C96  D7FC               	bra	u10557
 13833  000C98  F000               	nop	
 13834  000C9A  0100               	movlb	0	; () banked
 13835  000C9C  2BB1               	incf	actuatorTest@i_1750& (0+255),f,b
 13836  000C9E  D7EF               	goto	l8491
 13837  000CA0                     l8499:
 13838                           
 13839                           ; BSR set to: 0
 13840                           ;Test.c: 281: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13841  000CA0  0E80               	movlw	128
 13842  000CA2  EC39  F02D         	call	_lcdInst
 13843  000CA6  0EC0               	movlw	192
 13844  000CA8  EC39  F02D         	call	_lcdInst
 13845                           
 13846                           ;Test.c: 282: printf("LEFT -- 2s      ");
 13847  000CAC  0E86               	movlw	low STR_100
 13848  000CAE  0100               	movlb	0	; () banked
 13849  000CB0  6F8E               	movwf	printf@f& (0+255),b
 13850  000CB2  0EFB               	movlw	high STR_100
 13851  000CB4  0100               	movlb	0	; () banked
 13852  000CB6  6F8F               	movwf	(printf@f+1)& (0+255),b
 13853  000CB8  EC8F  F00D         	call	_printf	;wreg free
 13854                           
 13855                           ;Test.c: 283: updateServoPosition(2400, 1);
 13856  000CBC  0E09               	movlw	9
 13857  000CBE  0100               	movlb	0	; () banked
 13858  000CC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13859  000CC2  0E60               	movlw	96
 13860  000CC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13861  000CC6  0E00               	movlw	0
 13862  000CC8  0100               	movlb	0	; () banked
 13863  000CCA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13864  000CCC  0E01               	movlw	1
 13865  000CCE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13866  000CD0  EC6A  F026         	call	_updateServoPosition	;wreg free
 13867                           
 13868                           ;Test.c: 284: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13869  000CD4  0E00               	movlw	0
 13870  000CD6  0100               	movlb	0	; () banked
 13871  000CD8  6FB2               	movwf	actuatorTest@i_1752& (0+255),b
 13872  000CDA                     l8507:
 13873                           
 13874                           ; BSR set to: 0
 13875  000CDA  0E63               	movlw	99
 13876  000CDC  0100               	movlb	0	; () banked
 13877  000CDE  65B2               	cpfsgt	actuatorTest@i_1752& (0+255),b
 13878  000CE0  D001               	goto	l8511
 13879  000CE2  D00C               	goto	l8515
 13880  000CE4                     l8511:
 13881                           
 13882                           ; BSR set to: 0
 13883  000CE4  0E68               	movlw	104
 13884  000CE6  0100               	movlb	0	; () banked
 13885  000CE8  6FAB               	movwf	??_actuatorTest& (0+255),b
 13886  000CEA  0EE4               	movlw	228
 13887  000CEC                     u10567:
 13888  000CEC  2EE8               	decfsz	wreg,f,c
 13889  000CEE  D7FE               	bra	u10567
 13890  000CF0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13891  000CF2  D7FC               	bra	u10567
 13892  000CF4  F000               	nop	
 13893  000CF6  0100               	movlb	0	; () banked
 13894  000CF8  2BB2               	incf	actuatorTest@i_1752& (0+255),f,b
 13895  000CFA  D7EF               	goto	l8507
 13896  000CFC                     l8515:
 13897                           
 13898                           ; BSR set to: 0
 13899  000CFC  0E00               	movlw	0
 13900  000CFE  0100               	movlb	0	; () banked
 13901  000D00  6FB3               	movwf	actuatorTest@i_1753& (0+255),b
 13902  000D02                     l8517:
 13903                           
 13904                           ; BSR set to: 0
 13905  000D02  0E63               	movlw	99
 13906  000D04  0100               	movlb	0	; () banked
 13907  000D06  65B3               	cpfsgt	actuatorTest@i_1753& (0+255),b
 13908  000D08  D001               	goto	l8521
 13909  000D0A  D00C               	goto	l8525
 13910  000D0C                     l8521:
 13911                           
 13912                           ; BSR set to: 0
 13913  000D0C  0E68               	movlw	104
 13914  000D0E  0100               	movlb	0	; () banked
 13915  000D10  6FAB               	movwf	??_actuatorTest& (0+255),b
 13916  000D12  0EE4               	movlw	228
 13917  000D14                     u10577:
 13918  000D14  2EE8               	decfsz	wreg,f,c
 13919  000D16  D7FE               	bra	u10577
 13920  000D18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13921  000D1A  D7FC               	bra	u10577
 13922  000D1C  F000               	nop	
 13923  000D1E  0100               	movlb	0	; () banked
 13924  000D20  2BB3               	incf	actuatorTest@i_1753& (0+255),f,b
 13925  000D22  D7EF               	goto	l8517
 13926  000D24                     l8525:
 13927                           
 13928                           ; BSR set to: 0
 13929                           ;Test.c: 286: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13930  000D24  0E80               	movlw	128
 13931  000D26  EC39  F02D         	call	_lcdInst
 13932  000D2A  0EC0               	movlw	192
 13933  000D2C  EC39  F02D         	call	_lcdInst
 13934                           
 13935                           ;Test.c: 287: printf("MID-LEFT -- 2s  ");
 13936  000D30  0E0E               	movlw	low STR_101
 13937  000D32  0100               	movlb	0	; () banked
 13938  000D34  6F8E               	movwf	printf@f& (0+255),b
 13939  000D36  0EFC               	movlw	high STR_101
 13940  000D38  0100               	movlb	0	; () banked
 13941  000D3A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13942  000D3C  EC8F  F00D         	call	_printf	;wreg free
 13943                           
 13944                           ;Test.c: 288: updateServoPosition(1670, 1);
 13945  000D40  0E06               	movlw	6
 13946  000D42  0100               	movlb	0	; () banked
 13947  000D44  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13948  000D46  0E86               	movlw	134
 13949  000D48  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13950  000D4A  0E00               	movlw	0
 13951  000D4C  0100               	movlb	0	; () banked
 13952  000D4E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13953  000D50  0E01               	movlw	1
 13954  000D52  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13955  000D54  EC6A  F026         	call	_updateServoPosition	;wreg free
 13956                           
 13957                           ;Test.c: 289: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13958  000D58  0E00               	movlw	0
 13959  000D5A  0100               	movlb	0	; () banked
 13960  000D5C  6FB4               	movwf	actuatorTest@i_1755& (0+255),b
 13961  000D5E                     l8533:
 13962                           
 13963                           ; BSR set to: 0
 13964  000D5E  0E63               	movlw	99
 13965  000D60  0100               	movlb	0	; () banked
 13966  000D62  65B4               	cpfsgt	actuatorTest@i_1755& (0+255),b
 13967  000D64  D001               	goto	l8537
 13968  000D66  D00C               	goto	l8541
 13969  000D68                     l8537:
 13970                           
 13971                           ; BSR set to: 0
 13972  000D68  0E68               	movlw	104
 13973  000D6A  0100               	movlb	0	; () banked
 13974  000D6C  6FAB               	movwf	??_actuatorTest& (0+255),b
 13975  000D6E  0EE4               	movlw	228
 13976  000D70                     u10587:
 13977  000D70  2EE8               	decfsz	wreg,f,c
 13978  000D72  D7FE               	bra	u10587
 13979  000D74  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13980  000D76  D7FC               	bra	u10587
 13981  000D78  F000               	nop	
 13982  000D7A  0100               	movlb	0	; () banked
 13983  000D7C  2BB4               	incf	actuatorTest@i_1755& (0+255),f,b
 13984  000D7E  D7EF               	goto	l8533
 13985  000D80                     l8541:
 13986                           
 13987                           ; BSR set to: 0
 13988  000D80  0E00               	movlw	0
 13989  000D82  0100               	movlb	0	; () banked
 13990  000D84  6FB5               	movwf	actuatorTest@i_1756& (0+255),b
 13991  000D86                     l8543:
 13992                           
 13993                           ; BSR set to: 0
 13994  000D86  0E63               	movlw	99
 13995  000D88  0100               	movlb	0	; () banked
 13996  000D8A  65B5               	cpfsgt	actuatorTest@i_1756& (0+255),b
 13997  000D8C  D001               	goto	l8547
 13998  000D8E  D00C               	goto	l8551
 13999  000D90                     l8547:
 14000                           
 14001                           ; BSR set to: 0
 14002  000D90  0E68               	movlw	104
 14003  000D92  0100               	movlb	0	; () banked
 14004  000D94  6FAB               	movwf	??_actuatorTest& (0+255),b
 14005  000D96  0EE4               	movlw	228
 14006  000D98                     u10597:
 14007  000D98  2EE8               	decfsz	wreg,f,c
 14008  000D9A  D7FE               	bra	u10597
 14009  000D9C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14010  000D9E  D7FC               	bra	u10597
 14011  000DA0  F000               	nop	
 14012  000DA2  0100               	movlb	0	; () banked
 14013  000DA4  2BB5               	incf	actuatorTest@i_1756& (0+255),f,b
 14014  000DA6  D7EF               	goto	l8543
 14015  000DA8                     l8551:
 14016                           
 14017                           ; BSR set to: 0
 14018                           ;Test.c: 291: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14019  000DA8  0E80               	movlw	128
 14020  000DAA  EC39  F02D         	call	_lcdInst
 14021  000DAE  0EC0               	movlw	192
 14022  000DB0  EC39  F02D         	call	_lcdInst
 14023                           
 14024                           ;Test.c: 292: printf("MID-RIGHT -- 2s ");
 14025  000DB4  0E1F               	movlw	low STR_102
 14026  000DB6  0100               	movlb	0	; () banked
 14027  000DB8  6F8E               	movwf	printf@f& (0+255),b
 14028  000DBA  0EFC               	movlw	high STR_102
 14029  000DBC  0100               	movlb	0	; () banked
 14030  000DBE  6F8F               	movwf	(printf@f+1)& (0+255),b
 14031  000DC0  EC8F  F00D         	call	_printf	;wreg free
 14032                           
 14033                           ;Test.c: 293: updateServoPosition(850, 1);
 14034  000DC4  0E03               	movlw	3
 14035  000DC6  0100               	movlb	0	; () banked
 14036  000DC8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14037  000DCA  0E52               	movlw	82
 14038  000DCC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14039  000DCE  0E00               	movlw	0
 14040  000DD0  0100               	movlb	0	; () banked
 14041  000DD2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14042  000DD4  0E01               	movlw	1
 14043  000DD6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14044  000DD8  EC6A  F026         	call	_updateServoPosition	;wreg free
 14045                           
 14046                           ;Test.c: 294: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14047  000DDC  0E00               	movlw	0
 14048  000DDE  0100               	movlb	0	; () banked
 14049  000DE0  6FB6               	movwf	actuatorTest@i_1758& (0+255),b
 14050  000DE2                     l8559:
 14051                           
 14052                           ; BSR set to: 0
 14053  000DE2  0E63               	movlw	99
 14054  000DE4  0100               	movlb	0	; () banked
 14055  000DE6  65B6               	cpfsgt	actuatorTest@i_1758& (0+255),b
 14056  000DE8  D001               	goto	l8563
 14057  000DEA  D00C               	goto	l8567
 14058  000DEC                     l8563:
 14059                           
 14060                           ; BSR set to: 0
 14061  000DEC  0E68               	movlw	104
 14062  000DEE  0100               	movlb	0	; () banked
 14063  000DF0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14064  000DF2  0EE4               	movlw	228
 14065  000DF4                     u10607:
 14066  000DF4  2EE8               	decfsz	wreg,f,c
 14067  000DF6  D7FE               	bra	u10607
 14068  000DF8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14069  000DFA  D7FC               	bra	u10607
 14070  000DFC  F000               	nop	
 14071  000DFE  0100               	movlb	0	; () banked
 14072  000E00  2BB6               	incf	actuatorTest@i_1758& (0+255),f,b
 14073  000E02  D7EF               	goto	l8559
 14074  000E04                     l8567:
 14075                           
 14076                           ; BSR set to: 0
 14077  000E04  0E00               	movlw	0
 14078  000E06  0100               	movlb	0	; () banked
 14079  000E08  6FB7               	movwf	actuatorTest@i_1759& (0+255),b
 14080  000E0A                     l8569:
 14081                           
 14082                           ; BSR set to: 0
 14083  000E0A  0E63               	movlw	99
 14084  000E0C  0100               	movlb	0	; () banked
 14085  000E0E  65B7               	cpfsgt	actuatorTest@i_1759& (0+255),b
 14086  000E10  D001               	goto	l8573
 14087  000E12  D00C               	goto	l8577
 14088  000E14                     l8573:
 14089                           
 14090                           ; BSR set to: 0
 14091  000E14  0E68               	movlw	104
 14092  000E16  0100               	movlb	0	; () banked
 14093  000E18  6FAB               	movwf	??_actuatorTest& (0+255),b
 14094  000E1A  0EE4               	movlw	228
 14095  000E1C                     u10617:
 14096  000E1C  2EE8               	decfsz	wreg,f,c
 14097  000E1E  D7FE               	bra	u10617
 14098  000E20  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14099  000E22  D7FC               	bra	u10617
 14100  000E24  F000               	nop	
 14101  000E26  0100               	movlb	0	; () banked
 14102  000E28  2BB7               	incf	actuatorTest@i_1759& (0+255),f,b
 14103  000E2A  D7EF               	goto	l8569
 14104  000E2C                     l8577:
 14105                           
 14106                           ; BSR set to: 0
 14107                           ;Test.c: 296: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14108  000E2C  0E80               	movlw	128
 14109  000E2E  EC39  F02D         	call	_lcdInst
 14110  000E32  0EC0               	movlw	192
 14111  000E34  EC39  F02D         	call	_lcdInst
 14112                           
 14113                           ;Test.c: 297: printf("MID -- 2s       ");
 14114  000E38  0E64               	movlw	low STR_103
 14115  000E3A  0100               	movlb	0	; () banked
 14116  000E3C  6F8E               	movwf	printf@f& (0+255),b
 14117  000E3E  0EFB               	movlw	high STR_103
 14118  000E40  0100               	movlb	0	; () banked
 14119  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
 14120  000E44  EC8F  F00D         	call	_printf	;wreg free
 14121                           
 14122                           ;Test.c: 298: updateServoPosition(1200, 1);
 14123  000E48  0E04               	movlw	4
 14124  000E4A  0100               	movlb	0	; () banked
 14125  000E4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14126  000E4E  0EB0               	movlw	176
 14127  000E50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14128  000E52  0E00               	movlw	0
 14129  000E54  0100               	movlb	0	; () banked
 14130  000E56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14131  000E58  0E01               	movlw	1
 14132  000E5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14133  000E5C  EC6A  F026         	call	_updateServoPosition	;wreg free
 14134                           
 14135                           ;Test.c: 299: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14136  000E60  0E00               	movlw	0
 14137  000E62  0100               	movlb	0	; () banked
 14138  000E64  6FB8               	movwf	actuatorTest@i_1761& (0+255),b
 14139  000E66                     l8585:
 14140                           
 14141                           ; BSR set to: 0
 14142  000E66  0E63               	movlw	99
 14143  000E68  0100               	movlb	0	; () banked
 14144  000E6A  65B8               	cpfsgt	actuatorTest@i_1761& (0+255),b
 14145  000E6C  D001               	goto	l8589
 14146  000E6E  D00C               	goto	l8593
 14147  000E70                     l8589:
 14148                           
 14149                           ; BSR set to: 0
 14150  000E70  0E68               	movlw	104
 14151  000E72  0100               	movlb	0	; () banked
 14152  000E74  6FAB               	movwf	??_actuatorTest& (0+255),b
 14153  000E76  0EE4               	movlw	228
 14154  000E78                     u10627:
 14155  000E78  2EE8               	decfsz	wreg,f,c
 14156  000E7A  D7FE               	bra	u10627
 14157  000E7C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14158  000E7E  D7FC               	bra	u10627
 14159  000E80  F000               	nop	
 14160  000E82  0100               	movlb	0	; () banked
 14161  000E84  2BB8               	incf	actuatorTest@i_1761& (0+255),f,b
 14162  000E86  D7EF               	goto	l8585
 14163  000E88                     l8593:
 14164                           
 14165                           ; BSR set to: 0
 14166  000E88  0E00               	movlw	0
 14167  000E8A  0100               	movlb	0	; () banked
 14168  000E8C  6FB9               	movwf	actuatorTest@i_1762& (0+255),b
 14169  000E8E                     l8595:
 14170                           
 14171                           ; BSR set to: 0
 14172  000E8E  0E63               	movlw	99
 14173  000E90  0100               	movlb	0	; () banked
 14174  000E92  65B9               	cpfsgt	actuatorTest@i_1762& (0+255),b
 14175  000E94  D001               	goto	l8599
 14176  000E96  D00C               	goto	l1336
 14177  000E98                     l8599:
 14178                           
 14179                           ; BSR set to: 0
 14180  000E98  0E68               	movlw	104
 14181  000E9A  0100               	movlb	0	; () banked
 14182  000E9C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14183  000E9E  0EE4               	movlw	228
 14184  000EA0                     u10637:
 14185  000EA0  2EE8               	decfsz	wreg,f,c
 14186  000EA2  D7FE               	bra	u10637
 14187  000EA4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14188  000EA6  D7FC               	bra	u10637
 14189  000EA8  F000               	nop	
 14190  000EAA  0100               	movlb	0	; () banked
 14191  000EAC  2BB9               	incf	actuatorTest@i_1762& (0+255),f,b
 14192  000EAE  D7EF               	goto	l8595
 14193  000EB0                     l1336:
 14194                           
 14195                           ; BSR set to: 0
 14196                           ;Test.c: 300: TMR1ON = 0;
 14197  000EB0  90CD               	bcf	4045,0,c	;volatile
 14198                           
 14199                           ; BSR set to: 0
 14200                           ;Test.c: 307: printf("TST: TILT SERVO");
 14201  000EB2  0E2D               	movlw	low STR_104
 14202  000EB4  0100               	movlb	0	; () banked
 14203  000EB6  6F8E               	movwf	printf@f& (0+255),b
 14204  000EB8  0EFE               	movlw	high STR_104
 14205  000EBA  0100               	movlb	0	; () banked
 14206  000EBC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14207  000EBE  EC8F  F00D         	call	_printf	;wreg free
 14208                           
 14209                           ;Test.c: 308: lcdInst(0b11000000);;
 14210  000EC2  0EC0               	movlw	192
 14211  000EC4  EC39  F02D         	call	_lcdInst
 14212                           
 14213                           ;Test.c: 309: printf("LEVEL -- 2s     ");
 14214  000EC8  0E97               	movlw	low STR_105
 14215  000ECA  0100               	movlb	0	; () banked
 14216  000ECC  6F8E               	movwf	printf@f& (0+255),b
 14217  000ECE  0EFB               	movlw	high STR_105
 14218  000ED0  0100               	movlb	0	; () banked
 14219  000ED2  6F8F               	movwf	(printf@f+1)& (0+255),b
 14220  000ED4  EC8F  F00D         	call	_printf	;wreg free
 14221                           
 14222                           ;Test.c: 310: updateServoPosition(1050, 3);
 14223  000ED8  0E04               	movlw	4
 14224  000EDA  0100               	movlb	0	; () banked
 14225  000EDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14226  000EDE  0E1A               	movlw	26
 14227  000EE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14228  000EE2  0E00               	movlw	0
 14229  000EE4  0100               	movlb	0	; () banked
 14230  000EE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14231  000EE8  0E03               	movlw	3
 14232  000EEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14233  000EEC  EC6A  F026         	call	_updateServoPosition	;wreg free
 14234                           
 14235                           ;Test.c: 311: TMR3ON = 1;
 14236  000EF0  80B1               	bsf	4017,0,c	;volatile
 14237                           
 14238                           ;Test.c: 312: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14239  000EF2  0E00               	movlw	0
 14240  000EF4  0100               	movlb	0	; () banked
 14241  000EF6  6FBA               	movwf	actuatorTest@i_1765& (0+255),b
 14242  000EF8                     l8613:
 14243                           
 14244                           ; BSR set to: 0
 14245  000EF8  0E63               	movlw	99
 14246  000EFA  0100               	movlb	0	; () banked
 14247  000EFC  65BA               	cpfsgt	actuatorTest@i_1765& (0+255),b
 14248  000EFE  D001               	goto	l8617
 14249  000F00  D00C               	goto	l8621
 14250  000F02                     l8617:
 14251                           
 14252                           ; BSR set to: 0
 14253  000F02  0E68               	movlw	104
 14254  000F04  0100               	movlb	0	; () banked
 14255  000F06  6FAB               	movwf	??_actuatorTest& (0+255),b
 14256  000F08  0EE4               	movlw	228
 14257  000F0A                     u10647:
 14258  000F0A  2EE8               	decfsz	wreg,f,c
 14259  000F0C  D7FE               	bra	u10647
 14260  000F0E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14261  000F10  D7FC               	bra	u10647
 14262  000F12  F000               	nop	
 14263  000F14  0100               	movlb	0	; () banked
 14264  000F16  2BBA               	incf	actuatorTest@i_1765& (0+255),f,b
 14265  000F18  D7EF               	goto	l8613
 14266  000F1A                     l8621:
 14267                           
 14268                           ; BSR set to: 0
 14269  000F1A  0E00               	movlw	0
 14270  000F1C  0100               	movlb	0	; () banked
 14271  000F1E  6FBB               	movwf	actuatorTest@i_1766& (0+255),b
 14272  000F20                     l8623:
 14273                           
 14274                           ; BSR set to: 0
 14275  000F20  0E63               	movlw	99
 14276  000F22  0100               	movlb	0	; () banked
 14277  000F24  65BB               	cpfsgt	actuatorTest@i_1766& (0+255),b
 14278  000F26  D001               	goto	l8627
 14279  000F28  D00C               	goto	l8631
 14280  000F2A                     l8627:
 14281                           
 14282                           ; BSR set to: 0
 14283  000F2A  0E68               	movlw	104
 14284  000F2C  0100               	movlb	0	; () banked
 14285  000F2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14286  000F30  0EE4               	movlw	228
 14287  000F32                     u10657:
 14288  000F32  2EE8               	decfsz	wreg,f,c
 14289  000F34  D7FE               	bra	u10657
 14290  000F36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14291  000F38  D7FC               	bra	u10657
 14292  000F3A  F000               	nop	
 14293  000F3C  0100               	movlb	0	; () banked
 14294  000F3E  2BBB               	incf	actuatorTest@i_1766& (0+255),f,b
 14295  000F40  D7EF               	goto	l8623
 14296  000F42                     l8631:
 14297                           
 14298                           ; BSR set to: 0
 14299                           ;Test.c: 314: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14300  000F42  0E80               	movlw	128
 14301  000F44  EC39  F02D         	call	_lcdInst
 14302  000F48  0EC0               	movlw	192
 14303  000F4A  EC39  F02D         	call	_lcdInst
 14304                           
 14305                           ;Test.c: 315: printf("DROP -- 2s      ");
 14306  000F4E  0E75               	movlw	low STR_106
 14307  000F50  0100               	movlb	0	; () banked
 14308  000F52  6F8E               	movwf	printf@f& (0+255),b
 14309  000F54  0EFB               	movlw	high STR_106
 14310  000F56  0100               	movlb	0	; () banked
 14311  000F58  6F8F               	movwf	(printf@f+1)& (0+255),b
 14312  000F5A  EC8F  F00D         	call	_printf	;wreg free
 14313                           
 14314                           ;Test.c: 316: updateServoPosition(1260, 3);
 14315  000F5E  0E04               	movlw	4
 14316  000F60  0100               	movlb	0	; () banked
 14317  000F62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14318  000F64  0EEC               	movlw	236
 14319  000F66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14320  000F68  0E00               	movlw	0
 14321  000F6A  0100               	movlb	0	; () banked
 14322  000F6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14323  000F6E  0E03               	movlw	3
 14324  000F70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14325  000F72  EC6A  F026         	call	_updateServoPosition	;wreg free
 14326                           
 14327                           ;Test.c: 317: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14328  000F76  0E00               	movlw	0
 14329  000F78  0100               	movlb	0	; () banked
 14330  000F7A  6FBC               	movwf	actuatorTest@i_1768& (0+255),b
 14331  000F7C                     l8639:
 14332                           
 14333                           ; BSR set to: 0
 14334  000F7C  0E63               	movlw	99
 14335  000F7E  0100               	movlb	0	; () banked
 14336  000F80  65BC               	cpfsgt	actuatorTest@i_1768& (0+255),b
 14337  000F82  D001               	goto	l8643
 14338  000F84  D00C               	goto	l8647
 14339  000F86                     l8643:
 14340                           
 14341                           ; BSR set to: 0
 14342  000F86  0E68               	movlw	104
 14343  000F88  0100               	movlb	0	; () banked
 14344  000F8A  6FAB               	movwf	??_actuatorTest& (0+255),b
 14345  000F8C  0EE4               	movlw	228
 14346  000F8E                     u10667:
 14347  000F8E  2EE8               	decfsz	wreg,f,c
 14348  000F90  D7FE               	bra	u10667
 14349  000F92  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14350  000F94  D7FC               	bra	u10667
 14351  000F96  F000               	nop	
 14352  000F98  0100               	movlb	0	; () banked
 14353  000F9A  2BBC               	incf	actuatorTest@i_1768& (0+255),f,b
 14354  000F9C  D7EF               	goto	l8639
 14355  000F9E                     l8647:
 14356                           
 14357                           ; BSR set to: 0
 14358  000F9E  0E00               	movlw	0
 14359  000FA0  0100               	movlb	0	; () banked
 14360  000FA2  6FBD               	movwf	actuatorTest@i_1769& (0+255),b
 14361  000FA4                     l8649:
 14362                           
 14363                           ; BSR set to: 0
 14364  000FA4  0E63               	movlw	99
 14365  000FA6  0100               	movlb	0	; () banked
 14366  000FA8  65BD               	cpfsgt	actuatorTest@i_1769& (0+255),b
 14367  000FAA  D001               	goto	l8653
 14368  000FAC  D00C               	goto	l8657
 14369  000FAE                     l8653:
 14370                           
 14371                           ; BSR set to: 0
 14372  000FAE  0E68               	movlw	104
 14373  000FB0  0100               	movlb	0	; () banked
 14374  000FB2  6FAB               	movwf	??_actuatorTest& (0+255),b
 14375  000FB4  0EE4               	movlw	228
 14376  000FB6                     u10677:
 14377  000FB6  2EE8               	decfsz	wreg,f,c
 14378  000FB8  D7FE               	bra	u10677
 14379  000FBA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14380  000FBC  D7FC               	bra	u10677
 14381  000FBE  F000               	nop	
 14382  000FC0  0100               	movlb	0	; () banked
 14383  000FC2  2BBD               	incf	actuatorTest@i_1769& (0+255),f,b
 14384  000FC4  D7EF               	goto	l8649
 14385  000FC6                     l8657:
 14386                           
 14387                           ; BSR set to: 0
 14388                           ;Test.c: 319: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14389  000FC6  0E80               	movlw	128
 14390  000FC8  EC39  F02D         	call	_lcdInst
 14391  000FCC  0EC0               	movlw	192
 14392  000FCE  EC39  F02D         	call	_lcdInst
 14393                           
 14394                           ;Test.c: 320: printf("LEVEL -- 2s     ");
 14395  000FD2  0E97               	movlw	low STR_105
 14396  000FD4  0100               	movlb	0	; () banked
 14397  000FD6  6F8E               	movwf	printf@f& (0+255),b
 14398  000FD8  0EFB               	movlw	high STR_105
 14399  000FDA  0100               	movlb	0	; () banked
 14400  000FDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14401  000FDE  EC8F  F00D         	call	_printf	;wreg free
 14402                           
 14403                           ;Test.c: 321: updateServoPosition(1050, 3);
 14404  000FE2  0E04               	movlw	4
 14405  000FE4  0100               	movlb	0	; () banked
 14406  000FE6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14407  000FE8  0E1A               	movlw	26
 14408  000FEA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14409  000FEC  0E00               	movlw	0
 14410  000FEE  0100               	movlb	0	; () banked
 14411  000FF0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14412  000FF2  0E03               	movlw	3
 14413  000FF4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14414  000FF6  EC6A  F026         	call	_updateServoPosition	;wreg free
 14415                           
 14416                           ;Test.c: 322: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14417  000FFA  0E00               	movlw	0
 14418  000FFC  0100               	movlb	0	; () banked
 14419  000FFE  6FBE               	movwf	actuatorTest@i_1771& (0+255),b
 14420  001000                     l8665:
 14421                           
 14422                           ; BSR set to: 0
 14423  001000  0E63               	movlw	99
 14424  001002  0100               	movlb	0	; () banked
 14425  001004  65BE               	cpfsgt	actuatorTest@i_1771& (0+255),b
 14426  001006  D001               	goto	l8669
 14427  001008  D00C               	goto	l8673
 14428  00100A                     l8669:
 14429                           
 14430                           ; BSR set to: 0
 14431  00100A  0E68               	movlw	104
 14432  00100C  0100               	movlb	0	; () banked
 14433  00100E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14434  001010  0EE4               	movlw	228
 14435  001012                     u10687:
 14436  001012  2EE8               	decfsz	wreg,f,c
 14437  001014  D7FE               	bra	u10687
 14438  001016  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14439  001018  D7FC               	bra	u10687
 14440  00101A  F000               	nop	
 14441  00101C  0100               	movlb	0	; () banked
 14442  00101E  2BBE               	incf	actuatorTest@i_1771& (0+255),f,b
 14443  001020  D7EF               	goto	l8665
 14444  001022                     l8673:
 14445                           
 14446                           ; BSR set to: 0
 14447  001022  0E00               	movlw	0
 14448  001024  0100               	movlb	0	; () banked
 14449  001026  6FBF               	movwf	actuatorTest@i_1772& (0+255),b
 14450  001028                     l8675:
 14451                           
 14452                           ; BSR set to: 0
 14453  001028  0E63               	movlw	99
 14454  00102A  0100               	movlb	0	; () banked
 14455  00102C  65BF               	cpfsgt	actuatorTest@i_1772& (0+255),b
 14456  00102E  D001               	goto	l8679
 14457  001030  D00C               	goto	l1348
 14458  001032                     l8679:
 14459                           
 14460                           ; BSR set to: 0
 14461  001032  0E68               	movlw	104
 14462  001034  0100               	movlb	0	; () banked
 14463  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 14464  001038  0EE4               	movlw	228
 14465  00103A                     u10697:
 14466  00103A  2EE8               	decfsz	wreg,f,c
 14467  00103C  D7FE               	bra	u10697
 14468  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14469  001040  D7FC               	bra	u10697
 14470  001042  F000               	nop	
 14471  001044  0100               	movlb	0	; () banked
 14472  001046  2BBF               	incf	actuatorTest@i_1772& (0+255),f,b
 14473  001048  D7EF               	goto	l8675
 14474  00104A                     l1348:
 14475                           
 14476                           ; BSR set to: 0
 14477                           ;Test.c: 323: TMR3ON = 0;
 14478  00104A  90B1               	bcf	4017,0,c	;volatile
 14479                           
 14480                           ;Test.c: 324: (INTCONbits.GIE = 0);
 14481  00104C  9EF2               	bcf	intcon,7,c	;volatile
 14482                           
 14483                           ; BSR set to: 0
 14484                           ;Test.c: 329: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14485  00104E  0E01               	movlw	1
 14486  001050  EC39  F02D         	call	_lcdInst
 14487  001054  0E68               	movlw	104
 14488  001056  0100               	movlb	0	; () banked
 14489  001058  6FAB               	movwf	??_actuatorTest& (0+255),b
 14490  00105A  0EE4               	movlw	228
 14491  00105C                     u10707:
 14492  00105C  2EE8               	decfsz	wreg,f,c
 14493  00105E  D7FE               	bra	u10707
 14494  001060  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14495  001062  D7FC               	bra	u10707
 14496  001064  F000               	nop	
 14497  001066  0E80               	movlw	128
 14498  001068  EC39  F02D         	call	_lcdInst
 14499                           
 14500                           ;Test.c: 330: printf("TST: CAM SERVO");
 14501  00106C  0EB8               	movlw	low STR_108
 14502  00106E  0100               	movlb	0	; () banked
 14503  001070  6F8E               	movwf	printf@f& (0+255),b
 14504  001072  0EFE               	movlw	high STR_108
 14505  001074  0100               	movlb	0	; () banked
 14506  001076  6F8F               	movwf	(printf@f+1)& (0+255),b
 14507  001078  EC8F  F00D         	call	_printf	;wreg free
 14508                           
 14509                           ;Test.c: 331: lcdInst(0b11000000);;
 14510  00107C  0EC0               	movlw	192
 14511  00107E  EC39  F02D         	call	_lcdInst
 14512                           
 14513                           ;Test.c: 332: printf("CAM UP  |RC0=1");
 14514  001082  0E9A               	movlw	low STR_109
 14515  001084  0100               	movlb	0	; () banked
 14516  001086  6F8E               	movwf	printf@f& (0+255),b
 14517  001088  0EFE               	movlw	high STR_109
 14518  00108A  0100               	movlb	0	; () banked
 14519  00108C  6F8F               	movwf	(printf@f+1)& (0+255),b
 14520  00108E  EC8F  F00D         	call	_printf	;wreg free
 14521                           
 14522                           ;Test.c: 333: LATCbits.LATC0 = 1;
 14523  001092  808B               	bsf	3979,0,c	;volatile
 14524                           
 14525                           ;Test.c: 334: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14526  001094  0E00               	movlw	0
 14527  001096  0100               	movlb	0	; () banked
 14528  001098  6FC0               	movwf	actuatorTest@i_1775& (0+255),b
 14529  00109A                     l8699:
 14530                           
 14531                           ; BSR set to: 0
 14532  00109A  0E63               	movlw	99
 14533  00109C  0100               	movlb	0	; () banked
 14534  00109E  65C0               	cpfsgt	actuatorTest@i_1775& (0+255),b
 14535  0010A0  D001               	goto	l8703
 14536  0010A2  D00C               	goto	l8707
 14537  0010A4                     l8703:
 14538                           
 14539                           ; BSR set to: 0
 14540  0010A4  0E68               	movlw	104
 14541  0010A6  0100               	movlb	0	; () banked
 14542  0010A8  6FAB               	movwf	??_actuatorTest& (0+255),b
 14543  0010AA  0EE4               	movlw	228
 14544  0010AC                     u10717:
 14545  0010AC  2EE8               	decfsz	wreg,f,c
 14546  0010AE  D7FE               	bra	u10717
 14547  0010B0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14548  0010B2  D7FC               	bra	u10717
 14549  0010B4  F000               	nop	
 14550  0010B6  0100               	movlb	0	; () banked
 14551  0010B8  2BC0               	incf	actuatorTest@i_1775& (0+255),f,b
 14552  0010BA  D7EF               	goto	l8699
 14553  0010BC                     l8707:
 14554                           
 14555                           ; BSR set to: 0
 14556  0010BC  0E00               	movlw	0
 14557  0010BE  0100               	movlb	0	; () banked
 14558  0010C0  6FC1               	movwf	actuatorTest@i_1776& (0+255),b
 14559  0010C2                     l8709:
 14560                           
 14561                           ; BSR set to: 0
 14562  0010C2  0E63               	movlw	99
 14563  0010C4  0100               	movlb	0	; () banked
 14564  0010C6  65C1               	cpfsgt	actuatorTest@i_1776& (0+255),b
 14565  0010C8  D001               	goto	l8713
 14566  0010CA  D00C               	goto	l8717
 14567  0010CC                     l8713:
 14568                           
 14569                           ; BSR set to: 0
 14570  0010CC  0E68               	movlw	104
 14571  0010CE  0100               	movlb	0	; () banked
 14572  0010D0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14573  0010D2  0EE4               	movlw	228
 14574  0010D4                     u10727:
 14575  0010D4  2EE8               	decfsz	wreg,f,c
 14576  0010D6  D7FE               	bra	u10727
 14577  0010D8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14578  0010DA  D7FC               	bra	u10727
 14579  0010DC  F000               	nop	
 14580  0010DE  0100               	movlb	0	; () banked
 14581  0010E0  2BC1               	incf	actuatorTest@i_1776& (0+255),f,b
 14582  0010E2  D7EF               	goto	l8709
 14583  0010E4                     l8717:
 14584                           
 14585                           ; BSR set to: 0
 14586                           ;Test.c: 335: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14587  0010E4  0E80               	movlw	128
 14588  0010E6  EC39  F02D         	call	_lcdInst
 14589  0010EA  0EC0               	movlw	192
 14590  0010EC  EC39  F02D         	call	_lcdInst
 14591                           
 14592                           ;Test.c: 336: printf("CAM DWN |RC0=0");
 14593  0010F0  0E8B               	movlw	low STR_110
 14594  0010F2  0100               	movlb	0	; () banked
 14595  0010F4  6F8E               	movwf	printf@f& (0+255),b
 14596  0010F6  0EFE               	movlw	high STR_110
 14597  0010F8  0100               	movlb	0	; () banked
 14598  0010FA  6F8F               	movwf	(printf@f+1)& (0+255),b
 14599  0010FC  EC8F  F00D         	call	_printf	;wreg free
 14600                           
 14601                           ;Test.c: 339: for(i=0;i<10000;i++)
 14602  001100  0E00               	movlw	0
 14603  001102  0100               	movlb	0	; () banked
 14604  001104  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14605  001106  0E00               	movlw	0
 14606  001108  6FC4               	movwf	actuatorTest@i& (0+255),b
 14607  00110A                     l8723:
 14608                           
 14609                           ; BSR set to: 0
 14610  00110A  0100               	movlb	0	; () banked
 14611  00110C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14612  00110E  D008               	goto	l1353
 14613  001110  0E10               	movlw	16
 14614  001112  0100               	movlb	0	; () banked
 14615  001114  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14616  001116  0E27               	movlw	39
 14617  001118  0100               	movlb	0	; () banked
 14618  00111A  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 14619  00111C  B0D8               	btfsc	status,0,c
 14620  00111E  D00D               	goto	l8733
 14621  001120                     l1353:
 14622                           
 14623                           ; BSR set to: 0
 14624                           ;Test.c: 340: {
 14625                           ;Test.c: 341: LATCbits.LATC0 = 1;
 14626  001120  808B               	bsf	3979,0,c	;volatile
 14627                           
 14628                           ; BSR set to: 0
 14629                           ;Test.c: 342: _delay((unsigned long)((10)*(32000000/4000000.0)));
 14630  001122  0E1A               	movlw	26
 14631  001124                     u10737:
 14632  001124  2EE8               	decfsz	wreg,f,c
 14633  001126  D7FE               	bra	u10737
 14634  001128  D000               	nop2	
 14635                           
 14636                           ;Test.c: 343: LATCbits.LATC0 = 0;
 14637  00112A  908B               	bcf	3979,0,c	;volatile
 14638                           
 14639                           ;Test.c: 344: _delay((unsigned long)((90)*(32000000/4000000.0)));
 14640  00112C  0EF0               	movlw	240
 14641  00112E                     u10747:
 14642  00112E  2EE8               	decfsz	wreg,f,c
 14643  001130  D7FE               	bra	u10747
 14644  001132  0100               	movlb	0	; () banked
 14645  001134  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14646  001136  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14647  001138  D7E8               	goto	l8723
 14648  00113A                     l8733:
 14649                           
 14650                           ; BSR set to: 0
 14651                           ;Test.c: 345: }
 14652                           ;Test.c: 347: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14653  00113A  0E00               	movlw	0
 14654  00113C  0100               	movlb	0	; () banked
 14655  00113E  6FC2               	movwf	actuatorTest@i_1778& (0+255),b
 14656  001140                     l8735:
 14657                           
 14658                           ; BSR set to: 0
 14659  001140  0E63               	movlw	99
 14660  001142  0100               	movlb	0	; () banked
 14661  001144  65C2               	cpfsgt	actuatorTest@i_1778& (0+255),b
 14662  001146  D001               	goto	l8739
 14663  001148  D00C               	goto	l8743
 14664  00114A                     l8739:
 14665                           
 14666                           ; BSR set to: 0
 14667  00114A  0E68               	movlw	104
 14668  00114C  0100               	movlb	0	; () banked
 14669  00114E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14670  001150  0EE4               	movlw	228
 14671  001152                     u10757:
 14672  001152  2EE8               	decfsz	wreg,f,c
 14673  001154  D7FE               	bra	u10757
 14674  001156  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14675  001158  D7FC               	bra	u10757
 14676  00115A  F000               	nop	
 14677  00115C  0100               	movlb	0	; () banked
 14678  00115E  2BC2               	incf	actuatorTest@i_1778& (0+255),f,b
 14679  001160  D7EF               	goto	l8735
 14680  001162                     l8743:
 14681                           
 14682                           ; BSR set to: 0
 14683  001162  0E00               	movlw	0
 14684  001164  0100               	movlb	0	; () banked
 14685  001166  6FC3               	movwf	actuatorTest@i_1779& (0+255),b
 14686  001168                     l8745:
 14687                           
 14688                           ; BSR set to: 0
 14689  001168  0E63               	movlw	99
 14690  00116A  0100               	movlb	0	; () banked
 14691  00116C  65C3               	cpfsgt	actuatorTest@i_1779& (0+255),b
 14692  00116E  D001               	goto	l8749
 14693  001170  D00C               	goto	l8753
 14694  001172                     l8749:
 14695                           
 14696                           ; BSR set to: 0
 14697  001172  0E68               	movlw	104
 14698  001174  0100               	movlb	0	; () banked
 14699  001176  6FAB               	movwf	??_actuatorTest& (0+255),b
 14700  001178  0EE4               	movlw	228
 14701  00117A                     u10767:
 14702  00117A  2EE8               	decfsz	wreg,f,c
 14703  00117C  D7FE               	bra	u10767
 14704  00117E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14705  001180  D7FC               	bra	u10767
 14706  001182  F000               	nop	
 14707  001184  0100               	movlb	0	; () banked
 14708  001186  2BC3               	incf	actuatorTest@i_1779& (0+255),f,b
 14709  001188  D7EF               	goto	l8745
 14710  00118A                     l8753:
 14711                           
 14712                           ; BSR set to: 0
 14713                           ;Test.c: 348: machine_state = Testing_state;
 14714  00118A  0E03               	movlw	3
 14715  00118C  0100               	movlb	0	; () banked
 14716  00118E  6FFC               	movwf	_machine_state& (0+255),b
 14717                           
 14718                           ; BSR set to: 0
 14719  001190  0012               	return		;funcret
 14720  001192                     __end_of_actuatorTest:
 14721                           	opt stack 0
 14722                           tblptru	equ	0xFF8
 14723                           tblptrh	equ	0xFF7
 14724                           tblptrl	equ	0xFF6
 14725                           tablat	equ	0xFF5
 14726                           prodh	equ	0xFF4
 14727                           prodl	equ	0xFF3
 14728                           intcon	equ	0xFF2
 14729                           intcon2	equ	0xFF1
 14730                           intcon3	equ	0xFF0
 14731                           postinc0	equ	0xFEE
 14732                           wreg	equ	0xFE8
 14733                           postdec1	equ	0xFE5
 14734                           fsr1l	equ	0xFE1
 14735                           indf2	equ	0xFDF
 14736                           postinc2	equ	0xFDE
 14737                           postdec2	equ	0xFDD
 14738                           fsr2h	equ	0xFDA
 14739                           fsr2l	equ	0xFD9
 14740                           status	equ	0xFD8
 14741                           
 14742 ;; *************** function _SpeedTest *****************
 14743 ;; Defined at:
 14744 ;;		line 541 in file "Test.c"
 14745 ;; Parameters:    Size  Location     Type
 14746 ;;		None
 14747 ;; Auto vars:     Size  Location     Type
 14748 ;;		None
 14749 ;; Return value:  Size  Location     Type
 14750 ;;                  1    wreg      void 
 14751 ;; Registers used:
 14752 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14753 ;; Tracked objects:
 14754 ;;		On entry : 0/0
 14755 ;;		On exit  : 0/0
 14756 ;;		Unchanged: 0/0
 14757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14760 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14761 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14762 ;;Total ram usage:        1 bytes
 14763 ;; Hardware stack levels used:    1
 14764 ;; Hardware stack levels required when called:   10
 14765 ;; This function calls:
 14766 ;;		_lcdInst
 14767 ;;		_printf
 14768 ;; This function is called by:
 14769 ;;		_Test
 14770 ;; This function uses a non-reentrant model
 14771 ;;
 14772                           
 14773                           	psect	text46
 14774  004C50                     __ptext46:
 14775                           	opt stack 0
 14776  004C50                     _SpeedTest:
 14777                           	opt stack 19
 14778                           
 14779                           ;Test.c: 543: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14780                           
 14781                           ; BSR set to: 0
 14782                           ;incstack = 0
 14783  004C50  0E01               	movlw	1
 14784  004C52  EC39  F02D         	call	_lcdInst
 14785  004C56  0E68               	movlw	104
 14786  004C58  0100               	movlb	0	; () banked
 14787  004C5A  6FAB               	movwf	??_SpeedTest& (0+255),b
 14788  004C5C  0EE4               	movlw	228
 14789  004C5E                     u10777:
 14790  004C5E  2EE8               	decfsz	wreg,f,c
 14791  004C60  D7FE               	bra	u10777
 14792  004C62  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14793  004C64  D7FC               	bra	u10777
 14794  004C66  F000               	nop	
 14795  004C68  0E80               	movlw	128
 14796  004C6A  EC39  F02D         	call	_lcdInst
 14797                           
 14798                           ;Test.c: 544: printf("S: D WILL RETURN ");
 14799  004C6E  0E0A               	movlw	low STR_121
 14800  004C70  0100               	movlb	0	; () banked
 14801  004C72  6F8E               	movwf	printf@f& (0+255),b
 14802  004C74  0EFB               	movlw	high STR_121
 14803  004C76  0100               	movlb	0	; () banked
 14804  004C78  6F8F               	movwf	(printf@f+1)& (0+255),b
 14805  004C7A  EC8F  F00D         	call	_printf	;wreg free
 14806                           
 14807                           ;Test.c: 545: lcdInst(0b11000000);;
 14808  004C7E  0EC0               	movlw	192
 14809  004C80  EC39  F02D         	call	_lcdInst
 14810                           
 14811                           ;Test.c: 546: printf("OTHER SETS RA5   ");
 14812  004C84  0EF8               	movlw	low STR_122
 14813  004C86  0100               	movlb	0	; () banked
 14814  004C88  6F8E               	movwf	printf@f& (0+255),b
 14815  004C8A  0EFA               	movlw	high STR_122
 14816  004C8C  0100               	movlb	0	; () banked
 14817  004C8E  6F8F               	movwf	(printf@f+1)& (0+255),b
 14818  004C90  EC8F  F00D         	call	_printf	;wreg free
 14819  004C94                     l1424:
 14820  004C94  A281               	btfss	3969,1,c	;volatile
 14821  004C96  D7FE               	goto	l1424
 14822                           
 14823                           ;Test.c: 551: }
 14824                           ;Test.c: 552: if(PORTB >> 4 == 0b1111){
 14825  004C98  3881               	swapf	3969,w,c	;volatile
 14826  004C9A  0B0F               	andlw	15
 14827  004C9C  0A0F               	xorlw	15
 14828  004C9E  B4D8               	btfsc	status,2,c
 14829  004CA0  0012               	return	
 14830  004CA2  D014               	goto	l8849
 14831  004CA4                     l1431:
 14832                           
 14833                           ;Test.c: 557: LATBbits.LATB2 = 1;
 14834  004CA4  848A               	bsf	3978,2,c	;volatile
 14835                           
 14836                           ;Test.c: 558: _delay((unsigned long)((5)*(32000000/4000.0)));
 14837  004CA6  0E34               	movlw	52
 14838  004CA8  0100               	movlb	0	; () banked
 14839  004CAA  6FAB               	movwf	??_SpeedTest& (0+255),b
 14840  004CAC  0EF1               	movlw	241
 14841  004CAE                     u10787:
 14842  004CAE  2EE8               	decfsz	wreg,f,c
 14843  004CB0  D7FE               	bra	u10787
 14844  004CB2  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14845  004CB4  D7FC               	bra	u10787
 14846  004CB6  D000               	nop2	
 14847                           
 14848                           ;Test.c: 559: LATBbits.LATB2 = 0;
 14849  004CB8  948A               	bcf	3978,2,c	;volatile
 14850                           
 14851                           ;Test.c: 560: _delay((unsigned long)((5)*(32000000/4000.0)));
 14852  004CBA  0E34               	movlw	52
 14853  004CBC  0100               	movlb	0	; () banked
 14854  004CBE  6FAB               	movwf	??_SpeedTest& (0+255),b
 14855  004CC0  0EF1               	movlw	241
 14856  004CC2                     u10797:
 14857  004CC2  2EE8               	decfsz	wreg,f,c
 14858  004CC4  D7FE               	bra	u10797
 14859  004CC6  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14860  004CC8  D7FC               	bra	u10797
 14861  004CCA  D000               	nop2	
 14862  004CCC                     l8849:
 14863  004CCC  B281               	btfsc	3969,1,c	;volatile
 14864  004CCE  D7EA               	goto	l1431
 14865                           
 14866                           ;Test.c: 563: }
 14867                           ;Test.c: 564: LATBbits.LATB2 = 0;
 14868  004CD0  948A               	bcf	3978,2,c	;volatile
 14869  004CD2  D7E0               	goto	l1424
 14870  004CD4                     __end_of_SpeedTest:
 14871                           	opt stack 0
 14872                           tblptru	equ	0xFF8
 14873                           tblptrh	equ	0xFF7
 14874                           tblptrl	equ	0xFF6
 14875                           tablat	equ	0xFF5
 14876                           prodh	equ	0xFF4
 14877                           prodl	equ	0xFF3
 14878                           intcon	equ	0xFF2
 14879                           intcon2	equ	0xFF1
 14880                           intcon3	equ	0xFF0
 14881                           postinc0	equ	0xFEE
 14882                           wreg	equ	0xFE8
 14883                           postdec1	equ	0xFE5
 14884                           fsr1l	equ	0xFE1
 14885                           indf2	equ	0xFDF
 14886                           postinc2	equ	0xFDE
 14887                           postdec2	equ	0xFDD
 14888                           fsr2h	equ	0xFDA
 14889                           fsr2l	equ	0xFD9
 14890                           status	equ	0xFD8
 14891                           
 14892 ;; *************** function _PortTestPusher *****************
 14893 ;; Defined at:
 14894 ;;		line 682 in file "Test.c"
 14895 ;; Parameters:    Size  Location     Type
 14896 ;;		None
 14897 ;; Auto vars:     Size  Location     Type
 14898 ;;		None
 14899 ;; Return value:  Size  Location     Type
 14900 ;;                  1    wreg      void 
 14901 ;; Registers used:
 14902 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14903 ;; Tracked objects:
 14904 ;;		On entry : 0/0
 14905 ;;		On exit  : 0/0
 14906 ;;		Unchanged: 0/0
 14907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14910 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14911 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14912 ;;Total ram usage:        1 bytes
 14913 ;; Hardware stack levels used:    1
 14914 ;; Hardware stack levels required when called:   10
 14915 ;; This function calls:
 14916 ;;		_lcdInst
 14917 ;;		_printf
 14918 ;; This function is called by:
 14919 ;;		_Test
 14920 ;; This function uses a non-reentrant model
 14921 ;;
 14922                           
 14923                           	psect	text47
 14924  005120                     __ptext47:
 14925                           	opt stack 0
 14926  005120                     _PortTestPusher:
 14927                           	opt stack 19
 14928                           
 14929                           ;Test.c: 683: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14930                           
 14931                           ;incstack = 0
 14932  005120  0E01               	movlw	1
 14933  005122  EC39  F02D         	call	_lcdInst
 14934  005126  0E68               	movlw	104
 14935  005128  0100               	movlb	0	; () banked
 14936  00512A  6FAB               	movwf	??_PortTestPusher& (0+255),b
 14937  00512C  0EE4               	movlw	228
 14938  00512E                     u10807:
 14939  00512E  2EE8               	decfsz	wreg,f,c
 14940  005130  D7FE               	bra	u10807
 14941  005132  2FAB               	decfsz	??_PortTestPusher& (0+255),f,b
 14942  005134  D7FC               	bra	u10807
 14943  005136  F000               	nop	
 14944  005138  0E80               	movlw	128
 14945  00513A  EC39  F02D         	call	_lcdInst
 14946                           
 14947                           ;Test.c: 684: printf("D WILL RETURN    ");
 14948  00513E  0EE6               	movlw	low STR_112
 14949  005140  0100               	movlb	0	; () banked
 14950  005142  6F8E               	movwf	printf@f& (0+255),b
 14951  005144  0EFA               	movlw	high STR_112
 14952  005146  0100               	movlb	0	; () banked
 14953  005148  6F8F               	movwf	(printf@f+1)& (0+255),b
 14954  00514A  EC8F  F00D         	call	_printf	;wreg free
 14955                           
 14956                           ;Test.c: 685: lcdInst(0b11000000);;
 14957  00514E  0EC0               	movlw	192
 14958  005150  EC39  F02D         	call	_lcdInst
 14959                           
 14960                           ;Test.c: 686: printf("OTHER SETS PUSHER");
 14961  005154  0E2E               	movlw	low STR_130
 14962  005156  0100               	movlb	0	; () banked
 14963  005158  6F8E               	movwf	printf@f& (0+255),b
 14964  00515A  0EFB               	movlw	high STR_130
 14965  00515C  0100               	movlb	0	; () banked
 14966  00515E  6F8F               	movwf	(printf@f+1)& (0+255),b
 14967  005160  EC8F  F00D         	call	_printf	;wreg free
 14968  005164                     l1485:
 14969  005164  A281               	btfss	3969,1,c	;volatile
 14970  005166  D7FE               	goto	l1485
 14971                           
 14972                           ;Test.c: 691: }
 14973                           ;Test.c: 692: if(PORTB >> 4 == 0b1111){
 14974  005168  3881               	swapf	3969,w,c	;volatile
 14975  00516A  0B0F               	andlw	15
 14976  00516C  0A0F               	xorlw	15
 14977  00516E  B4D8               	btfsc	status,2,c
 14978  005170  0012               	return	
 14979                           
 14980                           ;Test.c: 695: else{
 14981                           ;Test.c: 696: LATAbits.LATA4 = 1;
 14982                           
 14983                           ;Test.c: 694: }
 14984                           
 14985                           ;Test.c: 693: break;
 14986  005172  8889               	bsf	3977,4,c	;volatile
 14987  005174                     l1491:
 14988  005174  B281               	btfsc	3969,1,c	;volatile
 14989  005176  D7FE               	goto	l1491
 14990                           
 14991                           ;Test.c: 699: }
 14992                           ;Test.c: 700: LATAbits.LATA4 = 0;
 14993  005178  9889               	bcf	3977,4,c	;volatile
 14994  00517A  D7F4               	goto	l1485
 14995  00517C                     __end_of_PortTestPusher:
 14996                           	opt stack 0
 14997                           tblptru	equ	0xFF8
 14998                           tblptrh	equ	0xFF7
 14999                           tblptrl	equ	0xFF6
 15000                           tablat	equ	0xFF5
 15001                           prodh	equ	0xFF4
 15002                           prodl	equ	0xFF3
 15003                           intcon	equ	0xFF2
 15004                           intcon2	equ	0xFF1
 15005                           intcon3	equ	0xFF0
 15006                           postinc0	equ	0xFEE
 15007                           wreg	equ	0xFE8
 15008                           postdec1	equ	0xFE5
 15009                           fsr1l	equ	0xFE1
 15010                           indf2	equ	0xFDF
 15011                           postinc2	equ	0xFDE
 15012                           postdec2	equ	0xFDD
 15013                           fsr2h	equ	0xFDA
 15014                           fsr2l	equ	0xFD9
 15015                           status	equ	0xFD8
 15016                           
 15017 ;; *************** function _PortTestDC *****************
 15018 ;; Defined at:
 15019 ;;		line 411 in file "Test.c"
 15020 ;; Parameters:    Size  Location     Type
 15021 ;;		None
 15022 ;; Auto vars:     Size  Location     Type
 15023 ;;		None
 15024 ;; Return value:  Size  Location     Type
 15025 ;;                  1    wreg      void 
 15026 ;; Registers used:
 15027 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15028 ;; Tracked objects:
 15029 ;;		On entry : 0/0
 15030 ;;		On exit  : 0/0
 15031 ;;		Unchanged: 0/0
 15032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15035 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15036 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15037 ;;Total ram usage:        1 bytes
 15038 ;; Hardware stack levels used:    1
 15039 ;; Hardware stack levels required when called:   10
 15040 ;; This function calls:
 15041 ;;		_lcdInst
 15042 ;;		_printf
 15043 ;; This function is called by:
 15044 ;;		_Test
 15045 ;; This function uses a non-reentrant model
 15046 ;;
 15047                           
 15048                           	psect	text48
 15049  00517C                     __ptext48:
 15050                           	opt stack 0
 15051  00517C                     _PortTestDC:
 15052                           	opt stack 19
 15053                           
 15054                           ;Test.c: 412: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15055                           
 15056                           ;incstack = 0
 15057  00517C  0E01               	movlw	1
 15058  00517E  EC39  F02D         	call	_lcdInst
 15059  005182  0E68               	movlw	104
 15060  005184  0100               	movlb	0	; () banked
 15061  005186  6FAB               	movwf	??_PortTestDC& (0+255),b
 15062  005188  0EE4               	movlw	228
 15063  00518A                     u10817:
 15064  00518A  2EE8               	decfsz	wreg,f,c
 15065  00518C  D7FE               	bra	u10817
 15066  00518E  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 15067  005190  D7FC               	bra	u10817
 15068  005192  F000               	nop	
 15069  005194  0E80               	movlw	128
 15070  005196  EC39  F02D         	call	_lcdInst
 15071                           
 15072                           ;Test.c: 413: printf("D WILL RETURN    ");
 15073  00519A  0EE6               	movlw	low STR_112
 15074  00519C  0100               	movlb	0	; () banked
 15075  00519E  6F8E               	movwf	printf@f& (0+255),b
 15076  0051A0  0EFA               	movlw	high STR_112
 15077  0051A2  0100               	movlb	0	; () banked
 15078  0051A4  6F8F               	movwf	(printf@f+1)& (0+255),b
 15079  0051A6  EC8F  F00D         	call	_printf	;wreg free
 15080                           
 15081                           ;Test.c: 414: lcdInst(0b11000000);;
 15082  0051AA  0EC0               	movlw	192
 15083  0051AC  EC39  F02D         	call	_lcdInst
 15084                           
 15085                           ;Test.c: 415: printf("OTHER SETS DC   ");
 15086  0051B0  0ECA               	movlw	low STR_113
 15087  0051B2  0100               	movlb	0	; () banked
 15088  0051B4  6F8E               	movwf	printf@f& (0+255),b
 15089  0051B6  0EFB               	movlw	high STR_113
 15090  0051B8  0100               	movlb	0	; () banked
 15091  0051BA  6F8F               	movwf	(printf@f+1)& (0+255),b
 15092  0051BC  EC8F  F00D         	call	_printf	;wreg free
 15093  0051C0                     l1366:
 15094  0051C0  A281               	btfss	3969,1,c	;volatile
 15095  0051C2  D7FE               	goto	l1366
 15096                           
 15097                           ;Test.c: 420: }
 15098                           ;Test.c: 421: if(PORTB >> 4 == 0b1111){
 15099  0051C4  3881               	swapf	3969,w,c	;volatile
 15100  0051C6  0B0F               	andlw	15
 15101  0051C8  0A0F               	xorlw	15
 15102  0051CA  B4D8               	btfsc	status,2,c
 15103  0051CC  0012               	return	
 15104                           
 15105                           ;Test.c: 424: else{
 15106                           ;Test.c: 425: LATBbits.LATB2 = 1;
 15107                           
 15108                           ;Test.c: 423: }
 15109                           
 15110                           ;Test.c: 422: break;
 15111  0051CE  848A               	bsf	3978,2,c	;volatile
 15112  0051D0                     l1372:
 15113  0051D0  B281               	btfsc	3969,1,c	;volatile
 15114  0051D2  D7FE               	goto	l1372
 15115                           
 15116                           ;Test.c: 428: }
 15117                           ;Test.c: 429: LATBbits.LATB2 = 0;
 15118  0051D4  948A               	bcf	3978,2,c	;volatile
 15119  0051D6  D7F4               	goto	l1366
 15120  0051D8                     __end_of_PortTestDC:
 15121                           	opt stack 0
 15122                           tblptru	equ	0xFF8
 15123                           tblptrh	equ	0xFF7
 15124                           tblptrl	equ	0xFF6
 15125                           tablat	equ	0xFF5
 15126                           prodh	equ	0xFF4
 15127                           prodl	equ	0xFF3
 15128                           intcon	equ	0xFF2
 15129                           intcon2	equ	0xFF1
 15130                           intcon3	equ	0xFF0
 15131                           postinc0	equ	0xFEE
 15132                           wreg	equ	0xFE8
 15133                           postdec1	equ	0xFE5
 15134                           fsr1l	equ	0xFE1
 15135                           indf2	equ	0xFDF
 15136                           postinc2	equ	0xFDE
 15137                           postdec2	equ	0xFDD
 15138                           fsr2h	equ	0xFDA
 15139                           fsr2l	equ	0xFD9
 15140                           status	equ	0xFD8
 15141                           
 15142 ;; *************** function _PlatformTest *****************
 15143 ;; Defined at:
 15144 ;;		line 434 in file "Test.c"
 15145 ;; Parameters:    Size  Location     Type
 15146 ;;		None
 15147 ;; Auto vars:     Size  Location     Type
 15148 ;;  i               2   51[BANK0 ] int 
 15149 ;;  i               2   49[BANK0 ] int 
 15150 ;;  res             2   47[BANK0 ] int 
 15151 ;;  res             2   45[BANK0 ] int 
 15152 ;;  on              2   53[BANK0 ] int 
 15153 ;; Return value:  Size  Location     Type
 15154 ;;                  1    wreg      void 
 15155 ;; Registers used:
 15156 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15157 ;; Tracked objects:
 15158 ;;		On entry : 0/0
 15159 ;;		On exit  : 0/0
 15160 ;;		Unchanged: 0/0
 15161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15163 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15164 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15165 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15166 ;;Total ram usage:       12 bytes
 15167 ;; Hardware stack levels used:    1
 15168 ;; Hardware stack levels required when called:   10
 15169 ;; This function calls:
 15170 ;;		_lcdInst
 15171 ;;		_printf
 15172 ;;		_readADC
 15173 ;;		_stopSignals
 15174 ;; This function is called by:
 15175 ;;		_Test
 15176 ;; This function uses a non-reentrant model
 15177 ;;
 15178                           
 15179                           	psect	text49
 15180  0026B2                     __ptext49:
 15181                           	opt stack 0
 15182  0026B2                     _PlatformTest:
 15183                           	opt stack 19
 15184                           
 15185                           ;Test.c: 435: LATCbits.LATC5 = 1;
 15186                           
 15187                           ;incstack = 0
 15188  0026B2  8A8B               	bsf	3979,5,c	;volatile
 15189                           
 15190                           ;Test.c: 437: machine_state = Sorting_state;
 15191  0026B4  0E01               	movlw	1
 15192  0026B6  0100               	movlb	0	; () banked
 15193  0026B8  6FFC               	movwf	_machine_state& (0+255),b
 15194                           
 15195                           ;Test.c: 438: f_arm_position = 0;
 15196  0026BA  0E00               	movlw	0
 15197  0026BC  0100               	movlb	0	; () banked
 15198  0026BE  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15199  0026C0  0E00               	movlw	0
 15200  0026C2  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 15201                           
 15202                           ;Test.c: 439: timer2_counter = 0;
 15203  0026C4  0E00               	movlw	0
 15204  0026C6  6E74               	movwf	_timer2_counter+1,c	;volatile
 15205  0026C8  0E00               	movlw	0
 15206  0026CA  6E73               	movwf	_timer2_counter,c	;volatile
 15207                           
 15208                           ; BSR set to: 0
 15209                           ;Test.c: 440: LATBbits.LATB3 = 0;
 15210  0026CC  968A               	bcf	3978,3,c	;volatile
 15211                           
 15212                           ; BSR set to: 0
 15213                           ;Test.c: 441: TMR2ON = 1;
 15214  0026CE  84CA               	bsf	4042,2,c	;volatile
 15215                           
 15216                           ;Test.c: 442: was_low_2 = 0;
 15217  0026D0  0E00               	movlw	0
 15218  0026D2  6E7A               	movwf	_was_low_2+1,c	;volatile
 15219  0026D4  0E00               	movlw	0
 15220  0026D6  6E79               	movwf	_was_low_2,c	;volatile
 15221                           
 15222                           ;Test.c: 444: int on = 1;
 15223  0026D8  0E00               	movlw	0
 15224  0026DA  0100               	movlb	0	; () banked
 15225  0026DC  6FB6               	movwf	(PlatformTest@on+1)& (0+255),b
 15226  0026DE  0E01               	movlw	1
 15227  0026E0  6FB5               	movwf	PlatformTest@on& (0+255),b
 15228                           
 15229                           ; BSR set to: 0
 15230                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15231  0026E2  0E01               	movlw	1
 15232  0026E4  EC39  F02D         	call	_lcdInst
 15233  0026E8  0E68               	movlw	104
 15234  0026EA  0100               	movlb	0	; () banked
 15235  0026EC  6FAB               	movwf	??_PlatformTest& (0+255),b
 15236  0026EE  0EE4               	movlw	228
 15237  0026F0                     u10827:
 15238  0026F0  2EE8               	decfsz	wreg,f,c
 15239  0026F2  D7FE               	bra	u10827
 15240  0026F4  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15241  0026F6  D7FC               	bra	u10827
 15242  0026F8  F000               	nop	
 15243  0026FA  0E80               	movlw	128
 15244  0026FC  EC39  F02D         	call	_lcdInst
 15245                           
 15246                           ;Test.c: 446: printf("1: DC | A: ARM  ");
 15247  002700  0EFD               	movlw	low STR_114
 15248  002702  0100               	movlb	0	; () banked
 15249  002704  6F8E               	movwf	printf@f& (0+255),b
 15250  002706  0EFB               	movlw	high STR_114
 15251  002708  0100               	movlb	0	; () banked
 15252  00270A  6F8F               	movwf	(printf@f+1)& (0+255),b
 15253  00270C  EC8F  F00D         	call	_printf	;wreg free
 15254                           
 15255                           ;Test.c: 448: while(PORTBbits.RB1 == 0){
 15256  002710  D058               	goto	l8903
 15257  002712                     l8885:
 15258                           
 15259                           ;Test.c: 449: readADC(0);
 15260  002712  0E00               	movlw	0
 15261  002714  EC32  F02C         	call	_readADC
 15262                           
 15263                           ;Test.c: 450: int res = ADRESH<<8 | ADRESL;
 15264  002718  50C3               	movf	4035,w,c	;volatile
 15265  00271A  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15266  00271E  0100               	movlb	0	; () banked
 15267  002720  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15268  002722  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15269  002726  0100               	movlb	0	; () banked
 15270  002728  6BAB               	clrf	??_PlatformTest& (0+255),b
 15271  00272A  0100               	movlb	0	; () banked
 15272  00272C  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15273  00272E  0100               	movlb	0	; () banked
 15274  002730  6FAD               	movwf	PlatformTest@res& (0+255),b
 15275  002732  0100               	movlb	0	; () banked
 15276  002734  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15277  002736  0100               	movlb	0	; () banked
 15278  002738  6FAE               	movwf	(PlatformTest@res+1)& (0+255),b
 15279                           
 15280                           ; BSR set to: 0
 15281                           ;Test.c: 451: IR_signal = (res > 800) ? 1 : 0;
 15282  00273A  0100               	movlb	0	; () banked
 15283  00273C  BFAE               	btfsc	(PlatformTest@res+1)& (0+255),7,b
 15284  00273E  D00A               	goto	u7880
 15285  002740  0E21               	movlw	33
 15286  002742  0100               	movlb	0	; () banked
 15287  002744  5DAD               	subwf	PlatformTest@res& (0+255),w,b
 15288  002746  0E03               	movlw	3
 15289  002748  0100               	movlb	0	; () banked
 15290  00274A  59AE               	subwfb	(PlatformTest@res+1)& (0+255),w,b
 15291  00274C  A0D8               	btfss	status,0,c
 15292  00274E  D002               	goto	u7880
 15293  002750  0E01               	movlw	1
 15294  002752  D001               	goto	u7890
 15295  002754                     u7880:
 15296  002754  0E00               	movlw	0
 15297  002756                     u7890:
 15298  002756  0100               	movlb	0	; () banked
 15299  002758  6FE0               	movwf	_IR_signal& (0+255),b
 15300  00275A  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 15301                           
 15302                           ;Test.c: 453: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15303  00275C  0E01               	movlw	1
 15304  00275E  EC39  F02D         	call	_lcdInst
 15305  002762  0E68               	movlw	104
 15306  002764  0100               	movlb	0	; () banked
 15307  002766  6FAB               	movwf	??_PlatformTest& (0+255),b
 15308  002768  0EE4               	movlw	228
 15309  00276A                     u10837:
 15310  00276A  2EE8               	decfsz	wreg,f,c
 15311  00276C  D7FE               	bra	u10837
 15312  00276E  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15313  002770  D7FC               	bra	u10837
 15314  002772  F000               	nop	
 15315  002774  0E80               	movlw	128
 15316  002776  EC39  F02D         	call	_lcdInst
 15317                           
 15318                           ;Test.c: 454: printf("1: DC | A: ARM  ");
 15319  00277A  0EFD               	movlw	low STR_114
 15320  00277C  0100               	movlb	0	; () banked
 15321  00277E  6F8E               	movwf	printf@f& (0+255),b
 15322  002780  0EFB               	movlw	high STR_114
 15323  002782  0100               	movlb	0	; () banked
 15324  002784  6F8F               	movwf	(printf@f+1)& (0+255),b
 15325  002786  EC8F  F00D         	call	_printf	;wreg free
 15326                           
 15327                           ;Test.c: 455: lcdInst(0b11000000);;
 15328  00278A  0EC0               	movlw	192
 15329  00278C  EC39  F02D         	call	_lcdInst
 15330                           
 15331                           ;Test.c: 456: printf("5:H|6:L|IR:%d   ", res);
 15332  002790  0EEC               	movlw	low STR_116
 15333  002792  0100               	movlb	0	; () banked
 15334  002794  6F8E               	movwf	printf@f& (0+255),b
 15335  002796  0EFB               	movlw	high STR_116
 15336  002798  0100               	movlb	0	; () banked
 15337  00279A  6F8F               	movwf	(printf@f+1)& (0+255),b
 15338  00279C  C0AD  F090         	movff	PlatformTest@res,?_printf+2
 15339  0027A0  C0AE  F091         	movff	PlatformTest@res+1,?_printf+3
 15340  0027A4  EC8F  F00D         	call	_printf	;wreg free
 15341                           
 15342                           ;Test.c: 457: _delay((unsigned long)((100)*(32000000/4000.0)));
 15343  0027A8  0E05               	movlw	5
 15344  0027AA  0100               	movlb	0	; () banked
 15345  0027AC  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15346  0027AE  0E0F               	movlw	15
 15347  0027B0  0100               	movlb	0	; () banked
 15348  0027B2  6FAB               	movwf	??_PlatformTest& (0+255),b
 15349  0027B4  0EF1               	movlw	241
 15350  0027B6                     u10847:
 15351  0027B6  2EE8               	decfsz	wreg,f,c
 15352  0027B8  D7FE               	bra	u10847
 15353  0027BA  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15354  0027BC  D7FC               	bra	u10847
 15355  0027BE  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15356  0027C0  D7FA               	bra	u10847
 15357  0027C2                     l8903:
 15358  0027C2  B281               	btfsc	3969,1,c	;volatile
 15359  0027C4  D059               	goto	l8923
 15360  0027C6  D7A5               	goto	l8885
 15361  0027C8                     l8905:
 15362                           
 15363                           ;Test.c: 462: readADC(0);
 15364  0027C8  0E00               	movlw	0
 15365  0027CA  EC32  F02C         	call	_readADC
 15366                           
 15367                           ;Test.c: 463: int res = ADRESH<<8 | ADRESL;
 15368  0027CE  50C3               	movf	4035,w,c	;volatile
 15369  0027D0  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15370  0027D4  0100               	movlb	0	; () banked
 15371  0027D6  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15372  0027D8  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15373  0027DC  0100               	movlb	0	; () banked
 15374  0027DE  6BAB               	clrf	??_PlatformTest& (0+255),b
 15375  0027E0  0100               	movlb	0	; () banked
 15376  0027E2  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15377  0027E4  0100               	movlb	0	; () banked
 15378  0027E6  6FAF               	movwf	PlatformTest@res_1791& (0+255),b
 15379  0027E8  0100               	movlb	0	; () banked
 15380  0027EA  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15381  0027EC  0100               	movlb	0	; () banked
 15382  0027EE  6FB0               	movwf	(PlatformTest@res_1791+1)& (0+255),b
 15383                           
 15384                           ; BSR set to: 0
 15385                           ;Test.c: 464: IR_signal = (res > 800) ? 1 : 0;
 15386  0027F0  0100               	movlb	0	; () banked
 15387  0027F2  BFB0               	btfsc	(PlatformTest@res_1791+1)& (0+255),7,b
 15388  0027F4  D00A               	goto	u7910
 15389  0027F6  0E21               	movlw	33
 15390  0027F8  0100               	movlb	0	; () banked
 15391  0027FA  5DAF               	subwf	PlatformTest@res_1791& (0+255),w,b
 15392  0027FC  0E03               	movlw	3
 15393  0027FE  0100               	movlb	0	; () banked
 15394  002800  59B0               	subwfb	(PlatformTest@res_1791+1)& (0+255),w,b
 15395  002802  A0D8               	btfss	status,0,c
 15396  002804  D002               	goto	u7910
 15397  002806  0E01               	movlw	1
 15398  002808  D001               	goto	u7920
 15399  00280A                     u7910:
 15400  00280A  0E00               	movlw	0
 15401  00280C                     u7920:
 15402  00280C  0100               	movlb	0	; () banked
 15403  00280E  6FE0               	movwf	_IR_signal& (0+255),b
 15404  002810  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 15405                           
 15406                           ;Test.c: 466: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15407  002812  0E01               	movlw	1
 15408  002814  EC39  F02D         	call	_lcdInst
 15409  002818  0E68               	movlw	104
 15410  00281A  0100               	movlb	0	; () banked
 15411  00281C  6FAB               	movwf	??_PlatformTest& (0+255),b
 15412  00281E  0EE4               	movlw	228
 15413  002820                     u10857:
 15414  002820  2EE8               	decfsz	wreg,f,c
 15415  002822  D7FE               	bra	u10857
 15416  002824  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15417  002826  D7FC               	bra	u10857
 15418  002828  F000               	nop	
 15419  00282A  0E80               	movlw	128
 15420  00282C  EC39  F02D         	call	_lcdInst
 15421                           
 15422                           ;Test.c: 467: printf("1: DC | A: ARM  ");
 15423  002830  0EFD               	movlw	low STR_114
 15424  002832  0100               	movlb	0	; () banked
 15425  002834  6F8E               	movwf	printf@f& (0+255),b
 15426  002836  0EFB               	movlw	high STR_114
 15427  002838  0100               	movlb	0	; () banked
 15428  00283A  6F8F               	movwf	(printf@f+1)& (0+255),b
 15429  00283C  EC8F  F00D         	call	_printf	;wreg free
 15430                           
 15431                           ;Test.c: 468: lcdInst(0b11000000);;
 15432  002840  0EC0               	movlw	192
 15433  002842  EC39  F02D         	call	_lcdInst
 15434                           
 15435                           ;Test.c: 469: printf("5:H|6:L|IR:%d   ", res);
 15436  002846  0EEC               	movlw	low STR_116
 15437  002848  0100               	movlb	0	; () banked
 15438  00284A  6F8E               	movwf	printf@f& (0+255),b
 15439  00284C  0EFB               	movlw	high STR_116
 15440  00284E  0100               	movlb	0	; () banked
 15441  002850  6F8F               	movwf	(printf@f+1)& (0+255),b
 15442  002852  C0AF  F090         	movff	PlatformTest@res_1791,?_printf+2
 15443  002856  C0B0  F091         	movff	PlatformTest@res_1791+1,?_printf+3
 15444  00285A  EC8F  F00D         	call	_printf	;wreg free
 15445                           
 15446                           ;Test.c: 470: _delay((unsigned long)((100)*(32000000/4000.0)));
 15447  00285E  0E05               	movlw	5
 15448  002860  0100               	movlb	0	; () banked
 15449  002862  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15450  002864  0E0F               	movlw	15
 15451  002866  0100               	movlb	0	; () banked
 15452  002868  6FAB               	movwf	??_PlatformTest& (0+255),b
 15453  00286A  0EF1               	movlw	241
 15454  00286C                     u10867:
 15455  00286C  2EE8               	decfsz	wreg,f,c
 15456  00286E  D7FE               	bra	u10867
 15457  002870  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15458  002872  D7FC               	bra	u10867
 15459  002874  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15460  002876  D7FA               	bra	u10867
 15461  002878                     l8923:
 15462  002878  A281               	btfss	3969,1,c	;volatile
 15463  00287A  D7A6               	goto	l8905
 15464                           
 15465                           ;Test.c: 471: }
 15466                           ;Test.c: 472: if(PORTB >> 4 == 0b1111){
 15467  00287C  3881               	swapf	3969,w,c	;volatile
 15468  00287E  0B0F               	andlw	15
 15469  002880  0A0F               	xorlw	15
 15470  002882  B4D8               	btfsc	status,2,c
 15471  002884  D09A               	goto	l1387
 15472                           
 15473                           ;Test.c: 475: else if(PORTB >> 4 == 0b0000){
 15474                           
 15475                           ;Test.c: 474: }
 15476                           
 15477                           ;Test.c: 473: break;
 15478  002886  CF81 F0AB          	movff	3969,??_PlatformTest	;volatile
 15479  00288A  0100               	movlb	0	; () banked
 15480  00288C  3BAB               	swapf	??_PlatformTest& (0+255),f,b
 15481  00288E  0E0F               	movlw	15
 15482  002890  17AB               	andwf	??_PlatformTest& (0+255),f,b
 15483  002892  A4D8               	btfss	status,2,c
 15484  002894  D012               	goto	l8935
 15485                           
 15486                           ; BSR set to: 0
 15487                           ;Test.c: 476: LATBbits.LATB2 = !LATBbits.LATB2;
 15488  002896  B48A               	btfsc	3978,2,c	;volatile
 15489  002898  D004               	goto	u7960
 15490  00289A  0100               	movlb	0	; () banked
 15491  00289C  6BAB               	clrf	??_PlatformTest& (0+255),b
 15492  00289E  2BAB               	incf	??_PlatformTest& (0+255),f,b
 15493  0028A0  D002               	goto	u7978
 15494  0028A2                     u7960:
 15495  0028A2  0100               	movlb	0	; () banked
 15496  0028A4  6BAB               	clrf	??_PlatformTest& (0+255),b
 15497  0028A6                     u7978:
 15498  0028A6  0100               	movlb	0	; () banked
 15499  0028A8  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 15500  0028AA  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 15501  0028AC  508A               	movf	3978,w,c	;volatile
 15502  0028AE  0100               	movlb	0	; () banked
 15503  0028B0  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 15504  0028B2  0BFB               	andlw	-5
 15505  0028B4  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 15506  0028B6  6E8A               	movwf	3978,c	;volatile
 15507                           
 15508                           ;Test.c: 477: }
 15509  0028B8  D07D               	goto	l1402
 15510  0028BA                     l8935:
 15511                           
 15512                           ; BSR set to: 0
 15513                           ;Test.c: 478: else if(PORTB >> 4 == 0b0011){
 15514  0028BA  3881               	swapf	3969,w,c	;volatile
 15515  0028BC  0B0F               	andlw	15
 15516  0028BE  0A03               	xorlw	3
 15517  0028C0  A4D8               	btfss	status,2,c
 15518  0028C2  D020               	goto	l8947
 15519                           
 15520                           ; BSR set to: 0
 15521                           ;Test.c: 479: if(on){
 15522  0028C4  0100               	movlb	0	; () banked
 15523  0028C6  51B5               	movf	PlatformTest@on& (0+255),w,b
 15524  0028C8  0100               	movlb	0	; () banked
 15525  0028CA  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 15526  0028CC  B4D8               	btfsc	status,2,c
 15527  0028CE  D010               	goto	l8943
 15528                           
 15529                           ; BSR set to: 0
 15530                           ;Test.c: 480: f_arm_position = 1;
 15531  0028D0  0E00               	movlw	0
 15532  0028D2  0100               	movlb	0	; () banked
 15533  0028D4  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15534  0028D6  0E01               	movlw	1
 15535  0028D8  D00F               	goto	L13
 15536  0028DA                     l8941:
 15537                           
 15538                           ; BSR set to: 0
 15539                           ;Test.c: 481: on = !on;
 15540  0028DA  0100               	movlb	0	; () banked
 15541  0028DC  51B5               	movf	PlatformTest@on& (0+255),w,b
 15542  0028DE  0100               	movlb	0	; () banked
 15543  0028E0  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 15544  0028E2  A4D8               	btfss	status,2,c
 15545  0028E4  D00D               	goto	u8020
 15546  0028E6  D00A               	goto	u8021
 15547  0028E8                     u8010:
 15548  0028E8  0100               	movlb	0	; () banked
 15549  0028EA  6FB5               	movwf	PlatformTest@on& (0+255),b
 15550  0028EC  6BB6               	clrf	(PlatformTest@on+1)& (0+255),b
 15551                           
 15552                           ;Test.c: 482: }
 15553  0028EE  D062               	goto	l1402
 15554  0028F0                     l8943:
 15555                           
 15556                           ; BSR set to: 0
 15557                           ;Test.c: 483: else{
 15558                           ;Test.c: 484: f_arm_position = 0;
 15559  0028F0  0E00               	movlw	0
 15560  0028F2  0100               	movlb	0	; () banked
 15561  0028F4  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15562  0028F6  0E00               	movlw	0
 15563  0028F8                     L13:
 15564  0028F8  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 15565  0028FA  D7EF               	goto	l8941
 15566  0028FC                     u8021:
 15567  0028FC  0E01               	movlw	1
 15568  0028FE  D7F4               	goto	u8010
 15569  002900                     u8020:
 15570  002900  0E00               	movlw	0
 15571  002902  D7F2               	goto	u8010
 15572  002904                     l8947:
 15573                           
 15574                           ; BSR set to: 0
 15575                           ;Test.c: 488: else if(PORTB >> 4 == 0b0101){
 15576  002904  3881               	swapf	3969,w,c	;volatile
 15577  002906  0B0F               	andlw	15
 15578  002908  0A05               	xorlw	5
 15579  00290A  A4D8               	btfss	status,2,c
 15580  00290C  D027               	goto	l8961
 15581                           
 15582                           ; BSR set to: 0
 15583                           ;Test.c: 490: for(int i = 0; i<30; i++){
 15584  00290E  0E00               	movlw	0
 15585  002910  0100               	movlb	0	; () banked
 15586  002912  6FB2               	movwf	(PlatformTest@i+1)& (0+255),b
 15587  002914  0E00               	movlw	0
 15588  002916  6FB1               	movwf	PlatformTest@i& (0+255),b
 15589  002918                     l8951:
 15590                           
 15591                           ; BSR set to: 0
 15592  002918  0100               	movlb	0	; () banked
 15593  00291A  BFB2               	btfsc	(PlatformTest@i+1)& (0+255),7,b
 15594  00291C  D008               	goto	l1396
 15595  00291E  0100               	movlb	0	; () banked
 15596  002920  51B2               	movf	(PlatformTest@i+1)& (0+255),w,b
 15597  002922  E148               	bnz	l1402
 15598  002924  0E1E               	movlw	30
 15599  002926  0100               	movlb	0	; () banked
 15600  002928  5DB1               	subwf	PlatformTest@i& (0+255),w,b
 15601  00292A  B0D8               	btfsc	status,0,c
 15602  00292C  D043               	goto	l1402
 15603  00292E                     l1396:
 15604                           
 15605                           ; BSR set to: 0
 15606                           ;Test.c: 491: LATAbits.LATA4 = 1;
 15607  00292E  8889               	bsf	3977,4,c	;volatile
 15608                           
 15609                           ; BSR set to: 0
 15610                           ;Test.c: 492: _delay((unsigned long)((7500)*(32000000/4000000.0)));
 15611  002930  0E4E               	movlw	78
 15612  002932  0100               	movlb	0	; () banked
 15613  002934  6FAB               	movwf	??_PlatformTest& (0+255),b
 15614  002936  0EEB               	movlw	235
 15615  002938                     u10877:
 15616  002938  2EE8               	decfsz	wreg,f,c
 15617  00293A  D7FE               	bra	u10877
 15618  00293C  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15619  00293E  D7FC               	bra	u10877
 15620                           
 15621                           ;Test.c: 493: LATAbits.LATA4 = 0;
 15622  002940  9889               	bcf	3977,4,c	;volatile
 15623                           
 15624                           ;Test.c: 494: _delay((unsigned long)((2500)*(32000000/4000000.0)));
 15625  002942  0E1A               	movlw	26
 15626  002944  0100               	movlb	0	; () banked
 15627  002946  6FAB               	movwf	??_PlatformTest& (0+255),b
 15628  002948  0EF8               	movlw	248
 15629  00294A                     u10887:
 15630  00294A  2EE8               	decfsz	wreg,f,c
 15631  00294C  D7FE               	bra	u10887
 15632  00294E  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15633  002950  D7FC               	bra	u10887
 15634  002952  F000               	nop	
 15635  002954  0100               	movlb	0	; () banked
 15636  002956  4BB1               	infsnz	PlatformTest@i& (0+255),f,b
 15637  002958  2BB2               	incf	(PlatformTest@i+1)& (0+255),f,b
 15638  00295A  D7DE               	goto	l8951
 15639  00295C                     l8961:
 15640                           
 15641                           ; BSR set to: 0
 15642                           ;Test.c: 497: else if (PORTB >> 4 == 0b0110){
 15643  00295C  3881               	swapf	3969,w,c	;volatile
 15644  00295E  0B0F               	andlw	15
 15645  002960  0A06               	xorlw	6
 15646  002962  A4D8               	btfss	status,2,c
 15647  002964  D027               	goto	l1402
 15648                           
 15649                           ; BSR set to: 0
 15650                           ;Test.c: 499: for(int i = 0; i<30; i++){
 15651  002966  0E00               	movlw	0
 15652  002968  0100               	movlb	0	; () banked
 15653  00296A  6FB4               	movwf	(PlatformTest@i_1795+1)& (0+255),b
 15654  00296C  0E00               	movlw	0
 15655  00296E  6FB3               	movwf	PlatformTest@i_1795& (0+255),b
 15656  002970                     l8965:
 15657                           
 15658                           ; BSR set to: 0
 15659  002970  0100               	movlb	0	; () banked
 15660  002972  BFB4               	btfsc	(PlatformTest@i_1795+1)& (0+255),7,b
 15661  002974  D008               	goto	l1400
 15662  002976  0100               	movlb	0	; () banked
 15663  002978  51B4               	movf	(PlatformTest@i_1795+1)& (0+255),w,b
 15664  00297A  E11C               	bnz	l1402
 15665  00297C  0E1E               	movlw	30
 15666  00297E  0100               	movlb	0	; () banked
 15667  002980  5DB3               	subwf	PlatformTest@i_1795& (0+255),w,b
 15668  002982  B0D8               	btfsc	status,0,c
 15669  002984  D017               	goto	l1402
 15670  002986                     l1400:
 15671                           
 15672                           ; BSR set to: 0
 15673                           ;Test.c: 500: LATAbits.LATA4 = 1;
 15674  002986  8889               	bsf	3977,4,c	;volatile
 15675                           
 15676                           ; BSR set to: 0
 15677                           ;Test.c: 501: _delay((unsigned long)((5800)*(32000000/4000000.0)));
 15678  002988  0E3D               	movlw	61
 15679  00298A  0100               	movlb	0	; () banked
 15680  00298C  6FAB               	movwf	??_PlatformTest& (0+255),b
 15681  00298E  0E41               	movlw	65
 15682  002990                     u10897:
 15683  002990  2EE8               	decfsz	wreg,f,c
 15684  002992  D7FE               	bra	u10897
 15685  002994  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15686  002996  D7FC               	bra	u10897
 15687                           
 15688                           ;Test.c: 502: LATAbits.LATA4 = 0;
 15689  002998  9889               	bcf	3977,4,c	;volatile
 15690                           
 15691                           ;Test.c: 503: _delay((unsigned long)((4200)*(32000000/4000000.0)));
 15692  00299A  0E2C               	movlw	44
 15693  00299C  0100               	movlb	0	; () banked
 15694  00299E  6FAB               	movwf	??_PlatformTest& (0+255),b
 15695  0029A0  0EA1               	movlw	161
 15696  0029A2                     u10907:
 15697  0029A2  2EE8               	decfsz	wreg,f,c
 15698  0029A4  D7FE               	bra	u10907
 15699  0029A6  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15700  0029A8  D7FC               	bra	u10907
 15701  0029AA  D000               	nop2	
 15702  0029AC  0100               	movlb	0	; () banked
 15703  0029AE  4BB3               	infsnz	PlatformTest@i_1795& (0+255),f,b
 15704  0029B0  2BB4               	incf	(PlatformTest@i_1795+1)& (0+255),f,b
 15705  0029B2  D7DE               	goto	l8965
 15706  0029B4                     l1402:
 15707  0029B4  A281               	btfss	3969,1,c	;volatile
 15708  0029B6  D760               	goto	l8923
 15709  0029B8  D7FD               	goto	l1402
 15710  0029BA                     l1387:
 15711                           
 15712                           ;Test.c: 508: }
 15713                           ;Test.c: 510: LATCbits.LATC5 = 0;
 15714  0029BA  9A8B               	bcf	3979,5,c	;volatile
 15715                           
 15716                           ;Test.c: 511: stopSignals();
 15717  0029BC  ECEE  F02C         	call	_stopSignals	;wreg free
 15718                           
 15719                           ;Test.c: 512: machine_state = Testing_state;
 15720  0029C0  0E03               	movlw	3
 15721  0029C2  0100               	movlb	0	; () banked
 15722  0029C4  6FFC               	movwf	_machine_state& (0+255),b
 15723                           
 15724                           ; BSR set to: 0
 15725  0029C6  0012               	return		;funcret
 15726  0029C8                     __end_of_PlatformTest:
 15727                           	opt stack 0
 15728                           tblptru	equ	0xFF8
 15729                           tblptrh	equ	0xFF7
 15730                           tblptrl	equ	0xFF6
 15731                           tablat	equ	0xFF5
 15732                           prodh	equ	0xFF4
 15733                           prodl	equ	0xFF3
 15734                           intcon	equ	0xFF2
 15735                           intcon2	equ	0xFF1
 15736                           intcon3	equ	0xFF0
 15737                           postinc0	equ	0xFEE
 15738                           wreg	equ	0xFE8
 15739                           postdec1	equ	0xFE5
 15740                           fsr1l	equ	0xFE1
 15741                           indf2	equ	0xFDF
 15742                           postinc2	equ	0xFDE
 15743                           postdec2	equ	0xFDD
 15744                           fsr2h	equ	0xFDA
 15745                           fsr2l	equ	0xFD9
 15746                           status	equ	0xFD8
 15747                           
 15748 ;; *************** function _BothServos *****************
 15749 ;; Defined at:
 15750 ;;		line 351 in file "Test.c"
 15751 ;; Parameters:    Size  Location     Type
 15752 ;;		None
 15753 ;; Auto vars:     Size  Location     Type
 15754 ;;		None
 15755 ;; Return value:  Size  Location     Type
 15756 ;;                  1    wreg      void 
 15757 ;; Registers used:
 15758 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15759 ;; Tracked objects:
 15760 ;;		On entry : 0/0
 15761 ;;		On exit  : 0/0
 15762 ;;		Unchanged: 0/0
 15763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15766 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15767 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15768 ;;Total ram usage:        2 bytes
 15769 ;; Hardware stack levels used:    1
 15770 ;; Hardware stack levels required when called:   10
 15771 ;; This function calls:
 15772 ;;		_initServos
 15773 ;;		_lcdInst
 15774 ;;		_printf
 15775 ;;		_stopSignals
 15776 ;;		_updateServoPosition
 15777 ;; This function is called by:
 15778 ;;		_Test
 15779 ;; This function uses a non-reentrant model
 15780 ;;
 15781                           
 15782                           	psect	text50
 15783  001F56                     __ptext50:
 15784                           	opt stack 0
 15785  001F56                     _BothServos:
 15786                           	opt stack 19
 15787                           
 15788                           ;Test.c: 352: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15789                           
 15790                           ; BSR set to: 0
 15791                           ;incstack = 0
 15792  001F56  0E01               	movlw	1
 15793  001F58  EC39  F02D         	call	_lcdInst
 15794  001F5C  0E68               	movlw	104
 15795  001F5E  0100               	movlb	0	; () banked
 15796  001F60  6FAB               	movwf	??_BothServos& (0+255),b
 15797  001F62  0EE4               	movlw	228
 15798  001F64                     u10917:
 15799  001F64  2EE8               	decfsz	wreg,f,c
 15800  001F66  D7FE               	bra	u10917
 15801  001F68  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15802  001F6A  D7FC               	bra	u10917
 15803  001F6C  F000               	nop	
 15804  001F6E  0E80               	movlw	128
 15805  001F70  EC39  F02D         	call	_lcdInst
 15806                           
 15807                           ;Test.c: 353: printf("TST: BOTH SERVOS");
 15808  001F74  0EA7               	movlw	low STR_111
 15809  001F76  0100               	movlb	0	; () banked
 15810  001F78  6F8E               	movwf	printf@f& (0+255),b
 15811  001F7A  0EFC               	movlw	high STR_111
 15812  001F7C  0100               	movlb	0	; () banked
 15813  001F7E  6F8F               	movwf	(printf@f+1)& (0+255),b
 15814  001F80  EC8F  F00D         	call	_printf	;wreg free
 15815                           
 15816                           ;Test.c: 354: TMR1ON = 1;
 15817  001F84  80CD               	bsf	4045,0,c	;volatile
 15818                           
 15819                           ;Test.c: 355: TMR3ON = 1;
 15820  001F86  80B1               	bsf	4017,0,c	;volatile
 15821                           
 15822                           ;Test.c: 356: machine_state = Sorting_state;
 15823  001F88  0E01               	movlw	1
 15824  001F8A  0100               	movlb	0	; () banked
 15825  001F8C  6FFC               	movwf	_machine_state& (0+255),b
 15826                           
 15827                           ; BSR set to: 0
 15828                           ;Test.c: 357: was_low_1 = 0;
 15829  001F8E  0E00               	movlw	0
 15830  001F90  6E78               	movwf	_was_low_1+1,c	;volatile
 15831  001F92  0E00               	movlw	0
 15832  001F94  6E77               	movwf	_was_low_1,c	;volatile
 15833                           
 15834                           ; BSR set to: 0
 15835                           ;Test.c: 358: was_low_3 = 0;
 15836  001F96  0E00               	movlw	0
 15837  001F98  6E7C               	movwf	_was_low_3+1,c	;volatile
 15838  001F9A  0E00               	movlw	0
 15839  001F9C  6E7B               	movwf	_was_low_3,c	;volatile
 15840                           
 15841                           ; BSR set to: 0
 15842                           ;Test.c: 364: initServos();
 15843  001F9E  ECA9  F026         	call	_initServos	;wreg free
 15844                           
 15845                           ;Test.c: 365: _delay((unsigned long)((1500)*(32000000/4000.0)));
 15846  001FA2  0E3D               	movlw	61
 15847  001FA4  0100               	movlb	0	; () banked
 15848  001FA6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15849  001FA8  0EE1               	movlw	225
 15850  001FAA  0100               	movlb	0	; () banked
 15851  001FAC  6FAB               	movwf	??_BothServos& (0+255),b
 15852  001FAE  0E3F               	movlw	63
 15853  001FB0                     u10927:
 15854  001FB0  2EE8               	decfsz	wreg,f,c
 15855  001FB2  D7FE               	bra	u10927
 15856  001FB4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15857  001FB6  D7FC               	bra	u10927
 15858  001FB8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15859  001FBA  D7FA               	bra	u10927
 15860  001FBC  D000               	nop2	
 15861                           
 15862                           ;Test.c: 367: updateServoPosition(500, 1);
 15863  001FBE  0E01               	movlw	1
 15864  001FC0  0100               	movlb	0	; () banked
 15865  001FC2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15866  001FC4  0EF4               	movlw	244
 15867  001FC6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15868  001FC8  0E00               	movlw	0
 15869  001FCA  0100               	movlb	0	; () banked
 15870  001FCC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15871  001FCE  0E01               	movlw	1
 15872  001FD0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15873  001FD2  EC6A  F026         	call	_updateServoPosition	;wreg free
 15874                           
 15875                           ;Test.c: 368: updateServoPosition(1050, 3);
 15876  001FD6  0E04               	movlw	4
 15877  001FD8  0100               	movlb	0	; () banked
 15878  001FDA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15879  001FDC  0E1A               	movlw	26
 15880  001FDE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15881  001FE0  0E00               	movlw	0
 15882  001FE2  0100               	movlb	0	; () banked
 15883  001FE4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15884  001FE6  0E03               	movlw	3
 15885  001FE8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15886  001FEA  EC6A  F026         	call	_updateServoPosition	;wreg free
 15887                           
 15888                           ;Test.c: 369: _delay((unsigned long)((750)*(32000000/4000.0)));
 15889  001FEE  0E1F               	movlw	31
 15890  001FF0  0100               	movlb	0	; () banked
 15891  001FF2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15892  001FF4  0E71               	movlw	113
 15893  001FF6  0100               	movlb	0	; () banked
 15894  001FF8  6FAB               	movwf	??_BothServos& (0+255),b
 15895  001FFA  0E1E               	movlw	30
 15896  001FFC                     u10937:
 15897  001FFC  2EE8               	decfsz	wreg,f,c
 15898  001FFE  D7FE               	bra	u10937
 15899  002000  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15900  002002  D7FC               	bra	u10937
 15901  002004  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15902  002006  D7FA               	bra	u10937
 15903  002008  F000               	nop	
 15904                           
 15905                           ;Test.c: 370: updateServoPosition(1260, 3);
 15906  00200A  0E04               	movlw	4
 15907  00200C  0100               	movlb	0	; () banked
 15908  00200E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15909  002010  0EEC               	movlw	236
 15910  002012  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15911  002014  0E00               	movlw	0
 15912  002016  0100               	movlb	0	; () banked
 15913  002018  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15914  00201A  0E03               	movlw	3
 15915  00201C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15916  00201E  EC6A  F026         	call	_updateServoPosition	;wreg free
 15917                           
 15918                           ;Test.c: 371: _delay((unsigned long)((700)*(32000000/4000.0)));
 15919  002022  0E1D               	movlw	29
 15920  002024  0100               	movlb	0	; () banked
 15921  002026  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15922  002028  0E69               	movlw	105
 15923  00202A  0100               	movlb	0	; () banked
 15924  00202C  6FAB               	movwf	??_BothServos& (0+255),b
 15925  00202E  0EA5               	movlw	165
 15926  002030                     u10947:
 15927  002030  2EE8               	decfsz	wreg,f,c
 15928  002032  D7FE               	bra	u10947
 15929  002034  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15930  002036  D7FC               	bra	u10947
 15931  002038  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15932  00203A  D7FA               	bra	u10947
 15933                           
 15934                           ;Test.c: 372: updateServoPosition(1050, 3);
 15935  00203C  0E04               	movlw	4
 15936  00203E  0100               	movlb	0	; () banked
 15937  002040  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15938  002042  0E1A               	movlw	26
 15939  002044  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15940  002046  0E00               	movlw	0
 15941  002048  0100               	movlb	0	; () banked
 15942  00204A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15943  00204C  0E03               	movlw	3
 15944  00204E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15945  002050  EC6A  F026         	call	_updateServoPosition	;wreg free
 15946                           
 15947                           ;Test.c: 373: _delay((unsigned long)((750)*(32000000/4000.0)));
 15948  002054  0E1F               	movlw	31
 15949  002056  0100               	movlb	0	; () banked
 15950  002058  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15951  00205A  0E71               	movlw	113
 15952  00205C  0100               	movlb	0	; () banked
 15953  00205E  6FAB               	movwf	??_BothServos& (0+255),b
 15954  002060  0E1E               	movlw	30
 15955  002062                     u10957:
 15956  002062  2EE8               	decfsz	wreg,f,c
 15957  002064  D7FE               	bra	u10957
 15958  002066  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15959  002068  D7FC               	bra	u10957
 15960  00206A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15961  00206C  D7FA               	bra	u10957
 15962  00206E  F000               	nop	
 15963                           
 15964                           ;Test.c: 375: updateServoPosition(850, 1);
 15965  002070  0E03               	movlw	3
 15966  002072  0100               	movlb	0	; () banked
 15967  002074  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15968  002076  0E52               	movlw	82
 15969  002078  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15970  00207A  0E00               	movlw	0
 15971  00207C  0100               	movlb	0	; () banked
 15972  00207E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15973  002080  0E01               	movlw	1
 15974  002082  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15975  002084  EC6A  F026         	call	_updateServoPosition	;wreg free
 15976                           
 15977                           ;Test.c: 376: updateServoPosition(1050, 3);
 15978  002088  0E04               	movlw	4
 15979  00208A  0100               	movlb	0	; () banked
 15980  00208C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15981  00208E  0E1A               	movlw	26
 15982  002090  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15983  002092  0E00               	movlw	0
 15984  002094  0100               	movlb	0	; () banked
 15985  002096  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15986  002098  0E03               	movlw	3
 15987  00209A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15988  00209C  EC6A  F026         	call	_updateServoPosition	;wreg free
 15989                           
 15990                           ;Test.c: 377: _delay((unsigned long)((750)*(32000000/4000.0)));
 15991  0020A0  0E1F               	movlw	31
 15992  0020A2  0100               	movlb	0	; () banked
 15993  0020A4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15994  0020A6  0E71               	movlw	113
 15995  0020A8  0100               	movlb	0	; () banked
 15996  0020AA  6FAB               	movwf	??_BothServos& (0+255),b
 15997  0020AC  0E1E               	movlw	30
 15998  0020AE                     u10967:
 15999  0020AE  2EE8               	decfsz	wreg,f,c
 16000  0020B0  D7FE               	bra	u10967
 16001  0020B2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16002  0020B4  D7FC               	bra	u10967
 16003  0020B6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16004  0020B8  D7FA               	bra	u10967
 16005  0020BA  F000               	nop	
 16006                           
 16007                           ;Test.c: 378: updateServoPosition(1260, 3);
 16008  0020BC  0E04               	movlw	4
 16009  0020BE  0100               	movlb	0	; () banked
 16010  0020C0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16011  0020C2  0EEC               	movlw	236
 16012  0020C4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16013  0020C6  0E00               	movlw	0
 16014  0020C8  0100               	movlb	0	; () banked
 16015  0020CA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16016  0020CC  0E03               	movlw	3
 16017  0020CE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16018  0020D0  EC6A  F026         	call	_updateServoPosition	;wreg free
 16019                           
 16020                           ;Test.c: 379: _delay((unsigned long)((700)*(32000000/4000.0)));
 16021  0020D4  0E1D               	movlw	29
 16022  0020D6  0100               	movlb	0	; () banked
 16023  0020D8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16024  0020DA  0E69               	movlw	105
 16025  0020DC  0100               	movlb	0	; () banked
 16026  0020DE  6FAB               	movwf	??_BothServos& (0+255),b
 16027  0020E0  0EA5               	movlw	165
 16028  0020E2                     u10977:
 16029  0020E2  2EE8               	decfsz	wreg,f,c
 16030  0020E4  D7FE               	bra	u10977
 16031  0020E6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16032  0020E8  D7FC               	bra	u10977
 16033  0020EA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16034  0020EC  D7FA               	bra	u10977
 16035                           
 16036                           ;Test.c: 380: updateServoPosition(1050, 3);
 16037  0020EE  0E04               	movlw	4
 16038  0020F0  0100               	movlb	0	; () banked
 16039  0020F2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16040  0020F4  0E1A               	movlw	26
 16041  0020F6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16042  0020F8  0E00               	movlw	0
 16043  0020FA  0100               	movlb	0	; () banked
 16044  0020FC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16045  0020FE  0E03               	movlw	3
 16046  002100  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16047  002102  EC6A  F026         	call	_updateServoPosition	;wreg free
 16048                           
 16049                           ;Test.c: 381: _delay((unsigned long)((750)*(32000000/4000.0)));
 16050  002106  0E1F               	movlw	31
 16051  002108  0100               	movlb	0	; () banked
 16052  00210A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16053  00210C  0E71               	movlw	113
 16054  00210E  0100               	movlb	0	; () banked
 16055  002110  6FAB               	movwf	??_BothServos& (0+255),b
 16056  002112  0E1E               	movlw	30
 16057  002114                     u10987:
 16058  002114  2EE8               	decfsz	wreg,f,c
 16059  002116  D7FE               	bra	u10987
 16060  002118  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16061  00211A  D7FC               	bra	u10987
 16062  00211C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16063  00211E  D7FA               	bra	u10987
 16064  002120  F000               	nop	
 16065                           
 16066                           ;Test.c: 383: updateServoPosition(500, 1);
 16067  002122  0E01               	movlw	1
 16068  002124  0100               	movlb	0	; () banked
 16069  002126  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16070  002128  0EF4               	movlw	244
 16071  00212A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16072  00212C  0E00               	movlw	0
 16073  00212E  0100               	movlb	0	; () banked
 16074  002130  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16075  002132  0E01               	movlw	1
 16076  002134  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16077  002136  EC6A  F026         	call	_updateServoPosition	;wreg free
 16078                           
 16079                           ;Test.c: 384: updateServoPosition(1050, 3);
 16080  00213A  0E04               	movlw	4
 16081  00213C  0100               	movlb	0	; () banked
 16082  00213E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16083  002140  0E1A               	movlw	26
 16084  002142  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16085  002144  0E00               	movlw	0
 16086  002146  0100               	movlb	0	; () banked
 16087  002148  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16088  00214A  0E03               	movlw	3
 16089  00214C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16090  00214E  EC6A  F026         	call	_updateServoPosition	;wreg free
 16091                           
 16092                           ;Test.c: 385: _delay((unsigned long)((750)*(32000000/4000.0)));
 16093  002152  0E1F               	movlw	31
 16094  002154  0100               	movlb	0	; () banked
 16095  002156  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16096  002158  0E71               	movlw	113
 16097  00215A  0100               	movlb	0	; () banked
 16098  00215C  6FAB               	movwf	??_BothServos& (0+255),b
 16099  00215E  0E1E               	movlw	30
 16100  002160                     u10997:
 16101  002160  2EE8               	decfsz	wreg,f,c
 16102  002162  D7FE               	bra	u10997
 16103  002164  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16104  002166  D7FC               	bra	u10997
 16105  002168  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16106  00216A  D7FA               	bra	u10997
 16107  00216C  F000               	nop	
 16108                           
 16109                           ;Test.c: 386: updateServoPosition(1260, 3);
 16110  00216E  0E04               	movlw	4
 16111  002170  0100               	movlb	0	; () banked
 16112  002172  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16113  002174  0EEC               	movlw	236
 16114  002176  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16115  002178  0E00               	movlw	0
 16116  00217A  0100               	movlb	0	; () banked
 16117  00217C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16118  00217E  0E03               	movlw	3
 16119  002180  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16120  002182  EC6A  F026         	call	_updateServoPosition	;wreg free
 16121                           
 16122                           ;Test.c: 387: _delay((unsigned long)((700)*(32000000/4000.0)));
 16123  002186  0E1D               	movlw	29
 16124  002188  0100               	movlb	0	; () banked
 16125  00218A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16126  00218C  0E69               	movlw	105
 16127  00218E  0100               	movlb	0	; () banked
 16128  002190  6FAB               	movwf	??_BothServos& (0+255),b
 16129  002192  0EA5               	movlw	165
 16130  002194                     u11007:
 16131  002194  2EE8               	decfsz	wreg,f,c
 16132  002196  D7FE               	bra	u11007
 16133  002198  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16134  00219A  D7FC               	bra	u11007
 16135  00219C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16136  00219E  D7FA               	bra	u11007
 16137                           
 16138                           ;Test.c: 388: updateServoPosition(1050, 3);
 16139  0021A0  0E04               	movlw	4
 16140  0021A2  0100               	movlb	0	; () banked
 16141  0021A4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16142  0021A6  0E1A               	movlw	26
 16143  0021A8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16144  0021AA  0E00               	movlw	0
 16145  0021AC  0100               	movlb	0	; () banked
 16146  0021AE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16147  0021B0  0E03               	movlw	3
 16148  0021B2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16149  0021B4  EC6A  F026         	call	_updateServoPosition	;wreg free
 16150                           
 16151                           ;Test.c: 389: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16152  0021B8  0E3D               	movlw	61
 16153  0021BA  0100               	movlb	0	; () banked
 16154  0021BC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16155  0021BE  0EE1               	movlw	225
 16156  0021C0  0100               	movlb	0	; () banked
 16157  0021C2  6FAB               	movwf	??_BothServos& (0+255),b
 16158  0021C4  0E3F               	movlw	63
 16159  0021C6                     u11017:
 16160  0021C6  2EE8               	decfsz	wreg,f,c
 16161  0021C8  D7FE               	bra	u11017
 16162  0021CA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16163  0021CC  D7FC               	bra	u11017
 16164  0021CE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16165  0021D0  D7FA               	bra	u11017
 16166  0021D2  D000               	nop2	
 16167                           
 16168                           ;Test.c: 391: updateServoPosition(1670, 1);
 16169  0021D4  0E06               	movlw	6
 16170  0021D6  0100               	movlb	0	; () banked
 16171  0021D8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16172  0021DA  0E86               	movlw	134
 16173  0021DC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16174  0021DE  0E00               	movlw	0
 16175  0021E0  0100               	movlb	0	; () banked
 16176  0021E2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16177  0021E4  0E01               	movlw	1
 16178  0021E6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16179  0021E8  EC6A  F026         	call	_updateServoPosition	;wreg free
 16180                           
 16181                           ;Test.c: 392: updateServoPosition(1050, 3);
 16182  0021EC  0E04               	movlw	4
 16183  0021EE  0100               	movlb	0	; () banked
 16184  0021F0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16185  0021F2  0E1A               	movlw	26
 16186  0021F4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16187  0021F6  0E00               	movlw	0
 16188  0021F8  0100               	movlb	0	; () banked
 16189  0021FA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16190  0021FC  0E03               	movlw	3
 16191  0021FE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16192  002200  EC6A  F026         	call	_updateServoPosition	;wreg free
 16193                           
 16194                           ;Test.c: 393: _delay((unsigned long)((750)*(32000000/4000.0)));
 16195  002204  0E1F               	movlw	31
 16196  002206  0100               	movlb	0	; () banked
 16197  002208  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16198  00220A  0E71               	movlw	113
 16199  00220C  0100               	movlb	0	; () banked
 16200  00220E  6FAB               	movwf	??_BothServos& (0+255),b
 16201  002210  0E1E               	movlw	30
 16202  002212                     u11027:
 16203  002212  2EE8               	decfsz	wreg,f,c
 16204  002214  D7FE               	bra	u11027
 16205  002216  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16206  002218  D7FC               	bra	u11027
 16207  00221A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16208  00221C  D7FA               	bra	u11027
 16209  00221E  F000               	nop	
 16210                           
 16211                           ;Test.c: 394: updateServoPosition(1390, 3);
 16212  002220  0E05               	movlw	5
 16213  002222  0100               	movlb	0	; () banked
 16214  002224  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16215  002226  0E6E               	movlw	110
 16216  002228  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16217  00222A  0E00               	movlw	0
 16218  00222C  0100               	movlb	0	; () banked
 16219  00222E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16220  002230  0E03               	movlw	3
 16221  002232  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16222  002234  EC6A  F026         	call	_updateServoPosition	;wreg free
 16223                           
 16224                           ;Test.c: 395: _delay((unsigned long)((700)*(32000000/4000.0)));
 16225  002238  0E1D               	movlw	29
 16226  00223A  0100               	movlb	0	; () banked
 16227  00223C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16228  00223E  0E69               	movlw	105
 16229  002240  0100               	movlb	0	; () banked
 16230  002242  6FAB               	movwf	??_BothServos& (0+255),b
 16231  002244  0EA5               	movlw	165
 16232  002246                     u11037:
 16233  002246  2EE8               	decfsz	wreg,f,c
 16234  002248  D7FE               	bra	u11037
 16235  00224A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16236  00224C  D7FC               	bra	u11037
 16237  00224E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16238  002250  D7FA               	bra	u11037
 16239                           
 16240                           ;Test.c: 396: updateServoPosition(1050, 3);
 16241  002252  0E04               	movlw	4
 16242  002254  0100               	movlb	0	; () banked
 16243  002256  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16244  002258  0E1A               	movlw	26
 16245  00225A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16246  00225C  0E00               	movlw	0
 16247  00225E  0100               	movlb	0	; () banked
 16248  002260  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16249  002262  0E03               	movlw	3
 16250  002264  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16251  002266  EC6A  F026         	call	_updateServoPosition	;wreg free
 16252                           
 16253                           ;Test.c: 397: _delay((unsigned long)((750)*(32000000/4000.0)));
 16254  00226A  0E1F               	movlw	31
 16255  00226C  0100               	movlb	0	; () banked
 16256  00226E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16257  002270  0E71               	movlw	113
 16258  002272  0100               	movlb	0	; () banked
 16259  002274  6FAB               	movwf	??_BothServos& (0+255),b
 16260  002276  0E1E               	movlw	30
 16261  002278                     u11047:
 16262  002278  2EE8               	decfsz	wreg,f,c
 16263  00227A  D7FE               	bra	u11047
 16264  00227C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16265  00227E  D7FC               	bra	u11047
 16266  002280  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16267  002282  D7FA               	bra	u11047
 16268  002284  F000               	nop	
 16269                           
 16270                           ;Test.c: 399: updateServoPosition(2400, 1);
 16271  002286  0E09               	movlw	9
 16272  002288  0100               	movlb	0	; () banked
 16273  00228A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16274  00228C  0E60               	movlw	96
 16275  00228E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16276  002290  0E00               	movlw	0
 16277  002292  0100               	movlb	0	; () banked
 16278  002294  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16279  002296  0E01               	movlw	1
 16280  002298  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16281  00229A  EC6A  F026         	call	_updateServoPosition	;wreg free
 16282                           
 16283                           ;Test.c: 400: updateServoPosition(1050, 3);
 16284  00229E  0E04               	movlw	4
 16285  0022A0  0100               	movlb	0	; () banked
 16286  0022A2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16287  0022A4  0E1A               	movlw	26
 16288  0022A6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16289  0022A8  0E00               	movlw	0
 16290  0022AA  0100               	movlb	0	; () banked
 16291  0022AC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16292  0022AE  0E03               	movlw	3
 16293  0022B0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16294  0022B2  EC6A  F026         	call	_updateServoPosition	;wreg free
 16295                           
 16296                           ;Test.c: 401: _delay((unsigned long)((750)*(32000000/4000.0)));
 16297  0022B6  0E1F               	movlw	31
 16298  0022B8  0100               	movlb	0	; () banked
 16299  0022BA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16300  0022BC  0E71               	movlw	113
 16301  0022BE  0100               	movlb	0	; () banked
 16302  0022C0  6FAB               	movwf	??_BothServos& (0+255),b
 16303  0022C2  0E1E               	movlw	30
 16304  0022C4                     u11057:
 16305  0022C4  2EE8               	decfsz	wreg,f,c
 16306  0022C6  D7FE               	bra	u11057
 16307  0022C8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16308  0022CA  D7FC               	bra	u11057
 16309  0022CC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16310  0022CE  D7FA               	bra	u11057
 16311  0022D0  F000               	nop	
 16312                           
 16313                           ;Test.c: 402: updateServoPosition(1390, 3);
 16314  0022D2  0E05               	movlw	5
 16315  0022D4  0100               	movlb	0	; () banked
 16316  0022D6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16317  0022D8  0E6E               	movlw	110
 16318  0022DA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16319  0022DC  0E00               	movlw	0
 16320  0022DE  0100               	movlb	0	; () banked
 16321  0022E0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16322  0022E2  0E03               	movlw	3
 16323  0022E4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16324  0022E6  EC6A  F026         	call	_updateServoPosition	;wreg free
 16325                           
 16326                           ;Test.c: 403: _delay((unsigned long)((700)*(32000000/4000.0)));
 16327  0022EA  0E1D               	movlw	29
 16328  0022EC  0100               	movlb	0	; () banked
 16329  0022EE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16330  0022F0  0E69               	movlw	105
 16331  0022F2  0100               	movlb	0	; () banked
 16332  0022F4  6FAB               	movwf	??_BothServos& (0+255),b
 16333  0022F6  0EA5               	movlw	165
 16334  0022F8                     u11067:
 16335  0022F8  2EE8               	decfsz	wreg,f,c
 16336  0022FA  D7FE               	bra	u11067
 16337  0022FC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16338  0022FE  D7FC               	bra	u11067
 16339  002300  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16340  002302  D7FA               	bra	u11067
 16341                           
 16342                           ;Test.c: 404: updateServoPosition(1050, 3);
 16343  002304  0E04               	movlw	4
 16344  002306  0100               	movlb	0	; () banked
 16345  002308  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16346  00230A  0E1A               	movlw	26
 16347  00230C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16348  00230E  0E00               	movlw	0
 16349  002310  0100               	movlb	0	; () banked
 16350  002312  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16351  002314  0E03               	movlw	3
 16352  002316  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16353  002318  EC6A  F026         	call	_updateServoPosition	;wreg free
 16354                           
 16355                           ;Test.c: 405: _delay((unsigned long)((750)*(32000000/4000.0)));
 16356  00231C  0E1F               	movlw	31
 16357  00231E  0100               	movlb	0	; () banked
 16358  002320  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16359  002322  0E71               	movlw	113
 16360  002324  0100               	movlb	0	; () banked
 16361  002326  6FAB               	movwf	??_BothServos& (0+255),b
 16362  002328  0E1E               	movlw	30
 16363  00232A                     u11077:
 16364  00232A  2EE8               	decfsz	wreg,f,c
 16365  00232C  D7FE               	bra	u11077
 16366  00232E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16367  002330  D7FC               	bra	u11077
 16368  002332  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16369  002334  D7FA               	bra	u11077
 16370  002336  F000               	nop	
 16371                           
 16372                           ;Test.c: 407: stopSignals();
 16373  002338  ECEE  F02C         	call	_stopSignals	;wreg free
 16374                           
 16375                           ;Test.c: 408: machine_state = Testing_state;
 16376  00233C  0E03               	movlw	3
 16377  00233E  0100               	movlb	0	; () banked
 16378  002340  6FFC               	movwf	_machine_state& (0+255),b
 16379                           
 16380                           ; BSR set to: 0
 16381  002342  0012               	return		;funcret
 16382  002344                     __end_of_BothServos:
 16383                           	opt stack 0
 16384                           tblptru	equ	0xFF8
 16385                           tblptrh	equ	0xFF7
 16386                           tblptrl	equ	0xFF6
 16387                           tablat	equ	0xFF5
 16388                           prodh	equ	0xFF4
 16389                           prodl	equ	0xFF3
 16390                           intcon	equ	0xFF2
 16391                           intcon2	equ	0xFF1
 16392                           intcon3	equ	0xFF0
 16393                           postinc0	equ	0xFEE
 16394                           wreg	equ	0xFE8
 16395                           postdec1	equ	0xFE5
 16396                           fsr1l	equ	0xFE1
 16397                           indf2	equ	0xFDF
 16398                           postinc2	equ	0xFDE
 16399                           postdec2	equ	0xFDD
 16400                           fsr2h	equ	0xFDA
 16401                           fsr2l	equ	0xFD9
 16402                           status	equ	0xFD8
 16403                           
 16404 ;; *************** function _stopSignals *****************
 16405 ;; Defined at:
 16406 ;;		line 71 in file "main.c"
 16407 ;; Parameters:    Size  Location     Type
 16408 ;;		None
 16409 ;; Auto vars:     Size  Location     Type
 16410 ;;		None
 16411 ;; Return value:  Size  Location     Type
 16412 ;;                  1    wreg      void 
 16413 ;; Registers used:
 16414 ;;		wreg, status,2
 16415 ;; Tracked objects:
 16416 ;;		On entry : 0/0
 16417 ;;		On exit  : 0/0
 16418 ;;		Unchanged: 0/0
 16419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16424 ;;Total ram usage:        0 bytes
 16425 ;; Hardware stack levels used:    1
 16426 ;; Hardware stack levels required when called:    7
 16427 ;; This function calls:
 16428 ;;		Nothing
 16429 ;; This function is called by:
 16430 ;;		_main
 16431 ;;		_BothServos
 16432 ;;		_PlatformTest
 16433 ;;		_arm
 16434 ;; This function uses a non-reentrant model
 16435 ;;
 16436                           
 16437                           	psect	text51
 16438  0059DC                     __ptext51:
 16439                           	opt stack 0
 16440  0059DC                     _stopSignals:
 16441                           	opt stack 23
 16442                           
 16443                           ;main.c: 72: LATA = 0x00;
 16444                           
 16445                           ; BSR set to: 0
 16446                           ;incstack = 0
 16447  0059DC  0E00               	movlw	0
 16448  0059DE  6E89               	movwf	3977,c	;volatile
 16449                           
 16450                           ;main.c: 73: LATB = 0x00;
 16451  0059E0  0E00               	movlw	0
 16452  0059E2  6E8A               	movwf	3978,c	;volatile
 16453                           
 16454                           ;main.c: 74: LATC = 0x00;
 16455  0059E4  0E00               	movlw	0
 16456  0059E6  6E8B               	movwf	3979,c	;volatile
 16457                           
 16458                           ;main.c: 75: LATD = 0x00;
 16459  0059E8  0E00               	movlw	0
 16460  0059EA  6E8C               	movwf	3980,c	;volatile
 16461                           
 16462                           ;main.c: 76: LATE = 0x00;
 16463  0059EC  0E00               	movlw	0
 16464  0059EE  6E8D               	movwf	3981,c	;volatile
 16465                           
 16466                           ;main.c: 77: TMR1IE = 0;
 16467  0059F0  909D               	bcf	3997,0,c	;volatile
 16468                           
 16469                           ;main.c: 78: TMR2IE = 0;
 16470  0059F2  929D               	bcf	3997,1,c	;volatile
 16471                           
 16472                           ;main.c: 79: TMR3IE = 0;
 16473  0059F4  92A0               	bcf	4000,1,c	;volatile
 16474  0059F6  0012               	return		;funcret
 16475  0059F8                     __end_of_stopSignals:
 16476                           	opt stack 0
 16477                           tblptru	equ	0xFF8
 16478                           tblptrh	equ	0xFF7
 16479                           tblptrl	equ	0xFF6
 16480                           tablat	equ	0xFF5
 16481                           prodh	equ	0xFF4
 16482                           prodl	equ	0xFF3
 16483                           intcon	equ	0xFF2
 16484                           intcon2	equ	0xFF1
 16485                           intcon3	equ	0xFF0
 16486                           postinc0	equ	0xFEE
 16487                           wreg	equ	0xFE8
 16488                           postdec1	equ	0xFE5
 16489                           fsr1l	equ	0xFE1
 16490                           indf2	equ	0xFDF
 16491                           postinc2	equ	0xFDE
 16492                           postdec2	equ	0xFDD
 16493                           fsr2h	equ	0xFDA
 16494                           fsr2l	equ	0xFD9
 16495                           status	equ	0xFD8
 16496                           
 16497 ;; *************** function _initServos *****************
 16498 ;; Defined at:
 16499 ;;		line 476 in file "sort.c"
 16500 ;; Parameters:    Size  Location     Type
 16501 ;;		None
 16502 ;; Auto vars:     Size  Location     Type
 16503 ;;		None
 16504 ;; Return value:  Size  Location     Type
 16505 ;;                  1    wreg      void 
 16506 ;; Registers used:
 16507 ;;		wreg, status,2, status,0, cstack
 16508 ;; Tracked objects:
 16509 ;;		On entry : 0/0
 16510 ;;		On exit  : 0/0
 16511 ;;		Unchanged: 0/0
 16512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16515 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16516 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16517 ;;Total ram usage:        1 bytes
 16518 ;; Hardware stack levels used:    1
 16519 ;; Hardware stack levels required when called:    8
 16520 ;; This function calls:
 16521 ;;		_updateServoPosition
 16522 ;; This function is called by:
 16523 ;;		_Loading
 16524 ;;		_BothServos
 16525 ;; This function uses a non-reentrant model
 16526 ;;
 16527                           
 16528                           	psect	text52
 16529  004D52                     __ptext52:
 16530                           	opt stack 0
 16531  004D52                     _initServos:
 16532                           	opt stack 20
 16533                           
 16534                           ;sort.c: 478: updateServoPosition(1200, 1);
 16535                           
 16536                           ;incstack = 0
 16537  004D52  0E04               	movlw	4
 16538  004D54  0100               	movlb	0	; () banked
 16539  004D56  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16540  004D58  0EB0               	movlw	176
 16541  004D5A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16542  004D5C  0E00               	movlw	0
 16543  004D5E  0100               	movlb	0	; () banked
 16544  004D60  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16545  004D62  0E01               	movlw	1
 16546  004D64  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16547  004D66  EC6A  F026         	call	_updateServoPosition	;wreg free
 16548                           
 16549                           ;sort.c: 479: updateServoPosition(1050, 3);
 16550  004D6A  0E04               	movlw	4
 16551  004D6C  0100               	movlb	0	; () banked
 16552  004D6E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16553  004D70  0E1A               	movlw	26
 16554  004D72  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16555  004D74  0E00               	movlw	0
 16556  004D76  0100               	movlb	0	; () banked
 16557  004D78  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16558  004D7A  0E03               	movlw	3
 16559  004D7C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16560  004D7E  EC6A  F026         	call	_updateServoPosition	;wreg free
 16561                           
 16562                           ;sort.c: 480: TMR1ON = 1;
 16563  004D82  80CD               	bsf	4045,0,c	;volatile
 16564                           
 16565                           ;sort.c: 481: was_low_1 = 0;
 16566  004D84  0E00               	movlw	0
 16567  004D86  6E78               	movwf	_was_low_1+1,c	;volatile
 16568  004D88  0E00               	movlw	0
 16569  004D8A  6E77               	movwf	_was_low_1,c	;volatile
 16570                           
 16571                           ;sort.c: 483: _delay((unsigned long)((5)*(32000000/4000.0)));
 16572  004D8C  0E34               	movlw	52
 16573  004D8E  0100               	movlb	0	; () banked
 16574  004D90  6F88               	movwf	??_initServos& (0+255),b
 16575  004D92  0EF1               	movlw	241
 16576  004D94                     u11087:
 16577  004D94  2EE8               	decfsz	wreg,f,c
 16578  004D96  D7FE               	bra	u11087
 16579  004D98  2F88               	decfsz	??_initServos& (0+255),f,b
 16580  004D9A  D7FC               	bra	u11087
 16581  004D9C  D000               	nop2	
 16582                           
 16583                           ;sort.c: 485: TMR3ON = 1;
 16584  004D9E  80B1               	bsf	4017,0,c	;volatile
 16585                           
 16586                           ;sort.c: 486: was_low_3 = 0;
 16587  004DA0  0E00               	movlw	0
 16588  004DA2  6E7C               	movwf	_was_low_3+1,c	;volatile
 16589  004DA4  0E00               	movlw	0
 16590  004DA6  6E7B               	movwf	_was_low_3,c	;volatile
 16591                           
 16592                           ;sort.c: 489: _delay((unsigned long)((1)*(32000000/4000.0)));
 16593  004DA8  0E0B               	movlw	11
 16594  004DAA  0100               	movlb	0	; () banked
 16595  004DAC  6F88               	movwf	??_initServos& (0+255),b
 16596  004DAE  0E62               	movlw	98
 16597  004DB0                     u11097:
 16598  004DB0  2EE8               	decfsz	wreg,f,c
 16599  004DB2  D7FE               	bra	u11097
 16600  004DB4  2F88               	decfsz	??_initServos& (0+255),f,b
 16601  004DB6  D7FC               	bra	u11097
 16602  004DB8  F000               	nop	
 16603                           
 16604                           ;sort.c: 490: LATBbits.LATB3 = 0;
 16605  004DBA  968A               	bcf	3978,3,c	;volatile
 16606                           
 16607                           ;sort.c: 491: TMR2ON = 1;
 16608  004DBC  84CA               	bsf	4042,2,c	;volatile
 16609                           
 16610                           ;sort.c: 492: was_low_2 = 0;
 16611  004DBE  0E00               	movlw	0
 16612  004DC0  6E7A               	movwf	_was_low_2+1,c	;volatile
 16613  004DC2  0E00               	movlw	0
 16614  004DC4  6E79               	movwf	_was_low_2,c	;volatile
 16615                           
 16616                           ;sort.c: 494: LATCbits.LATC0 = 1;
 16617  004DC6  808B               	bsf	3979,0,c	;volatile
 16618  004DC8  0012               	return		;funcret
 16619  004DCA                     __end_of_initServos:
 16620                           	opt stack 0
 16621                           tblptru	equ	0xFF8
 16622                           tblptrh	equ	0xFF7
 16623                           tblptrl	equ	0xFF6
 16624                           tablat	equ	0xFF5
 16625                           prodh	equ	0xFF4
 16626                           prodl	equ	0xFF3
 16627                           intcon	equ	0xFF2
 16628                           intcon2	equ	0xFF1
 16629                           intcon3	equ	0xFF0
 16630                           postinc0	equ	0xFEE
 16631                           wreg	equ	0xFE8
 16632                           postdec1	equ	0xFE5
 16633                           fsr1l	equ	0xFE1
 16634                           indf2	equ	0xFDF
 16635                           postinc2	equ	0xFDE
 16636                           postdec2	equ	0xFDD
 16637                           fsr2h	equ	0xFDA
 16638                           fsr2l	equ	0xFD9
 16639                           status	equ	0xFD8
 16640                           
 16641 ;; *************** function _updateServoPosition *****************
 16642 ;; Defined at:
 16643 ;;		line 570 in file "sort.c"
 16644 ;; Parameters:    Size  Location     Type
 16645 ;;  time_us         2    0[BANK0 ] int 
 16646 ;;  timer           2    2[BANK0 ] int 
 16647 ;; Auto vars:     Size  Location     Type
 16648 ;;  my_time         2    6[BANK0 ] unsigned int 
 16649 ;; Return value:  Size  Location     Type
 16650 ;;                  1    wreg      void 
 16651 ;; Registers used:
 16652 ;;		wreg, status,2, status,0
 16653 ;; Tracked objects:
 16654 ;;		On entry : 0/0
 16655 ;;		On exit  : 0/0
 16656 ;;		Unchanged: 0/0
 16657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16658 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16659 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16660 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16661 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16662 ;;Total ram usage:        8 bytes
 16663 ;; Hardware stack levels used:    1
 16664 ;; Hardware stack levels required when called:    7
 16665 ;; This function calls:
 16666 ;;		Nothing
 16667 ;; This function is called by:
 16668 ;;		_Distribution
 16669 ;;		_initServos
 16670 ;;		_actuatorTest
 16671 ;;		_BothServos
 16672 ;; This function uses a non-reentrant model
 16673 ;;
 16674                           
 16675                           	psect	text53
 16676  004CD4                     __ptext53:
 16677                           	opt stack 0
 16678  004CD4                     _updateServoPosition:
 16679                           	opt stack 20
 16680                           
 16681                           ;sort.c: 571: unsigned int my_time = 65535 - time_us;
 16682                           
 16683                           ;incstack = 0
 16684  004CD4  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 16685  004CD8  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 16686  004CDC  0100               	movlb	0	; () banked
 16687  004CDE  1F84               	comf	??_updateServoPosition& (0+255),f,b
 16688  004CE0  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 16689  004CE2  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 16690  004CE4  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 16691  004CE6  0EFF               	movlw	255
 16692  004CE8  0100               	movlb	0	; () banked
 16693  004CEA  2584               	addwf	??_updateServoPosition& (0+255),w,b
 16694  004CEC  0100               	movlb	0	; () banked
 16695  004CEE  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 16696  004CF0  0EFF               	movlw	255
 16697  004CF2  0100               	movlb	0	; () banked
 16698  004CF4  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 16699  004CF6  0100               	movlb	0	; () banked
 16700  004CF8  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 16701                           
 16702                           ;sort.c: 572: switch(timer){
 16703  004CFA  D019               	goto	l6857
 16704  004CFC                     l6851:
 16705                           
 16706                           ; BSR set to: 0
 16707                           ;sort.c: 574: servoTimes[0] = my_time >> 8;
 16708  004CFC  0100               	movlb	0	; () banked
 16709  004CFE  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 16710  004D00  6E59               	movwf	_servoTimes,c
 16711  004D02  6A5A               	clrf	_servoTimes+1,c
 16712                           
 16713                           ;sort.c: 575: servoTimes[1] = my_time & 0xFF;
 16714  004D04  0100               	movlb	0	; () banked
 16715  004D06  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 16716  004D08  6E5B               	movwf	_servoTimes+2,c
 16717  004D0A  6A5C               	clrf	_servoTimes+3,c
 16718                           
 16719                           ; BSR set to: 0
 16720                           ;sort.c: 577: pan_servo_state = time_us;
 16721  004D0C  C080  F06B         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 16722  004D10  C081  F06C         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 16723  004D14                     l928:
 16724                           
 16725                           ; BSR set to: 0
 16726                           ;sort.c: 579: servoTimes[2] = my_time >> 8;
 16727  004D14  0100               	movlb	0	; () banked
 16728  004D16  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 16729  004D18  6E5D               	movwf	_servoTimes+4,c
 16730  004D1A  6A5E               	clrf	_servoTimes+5,c
 16731                           
 16732                           ;sort.c: 580: servoTimes[3] = my_time & 0xFF;
 16733  004D1C  0100               	movlb	0	; () banked
 16734  004D1E  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 16735  004D20  6E5F               	movwf	_servoTimes+6,c
 16736  004D22  6A60               	clrf	_servoTimes+7,c
 16737                           
 16738                           ; BSR set to: 0
 16739                           ;sort.c: 582: tilt_servo_state = time_us;
 16740  004D24  C080  F071         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 16741  004D28  C081  F072         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 16742                           
 16743                           ;sort.c: 583: }
 16744  004D2C  0012               	return	
 16745  004D2E                     l6857:
 16746                           
 16747                           ; BSR set to: 0
 16748  004D2E  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 16749  004D32  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 16750                           
 16751                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16752                           ; Switch size 1, requested type "space"
 16753                           ; Number of cases is 1, Range of values is 0 to 0
 16754                           ; switch strategies available:
 16755                           ; Name         Instructions Cycles
 16756                           ; simple_byte            4     3 (average)
 16757                           ;	Chosen strategy is simple_byte
 16758  004D36  0100               	movlb	0	; () banked
 16759  004D38  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 16760  004D3A  0A00               	xorlw	0	; case 0
 16761  004D3C  A4D8               	btfss	status,2,c
 16762  004D3E  0012               	return	
 16763                           
 16764                           ; BSR set to: 0
 16765                           ; Switch size 1, requested type "space"
 16766                           ; Number of cases is 2, Range of values is 1 to 3
 16767                           ; switch strategies available:
 16768                           ; Name         Instructions Cycles
 16769                           ; simple_byte            7     4 (average)
 16770                           ;	Chosen strategy is simple_byte
 16771  004D40  0100               	movlb	0	; () banked
 16772  004D42  5184               	movf	??_updateServoPosition& (0+255),w,b
 16773  004D44  0A01               	xorlw	1	; case 1
 16774  004D46  B4D8               	btfsc	status,2,c
 16775  004D48  D7D9               	goto	l6851
 16776  004D4A  0A02               	xorlw	2	; case 3
 16777  004D4C  A4D8               	btfss	status,2,c
 16778  004D4E  0012               	return	
 16779  004D50  D7E1               	goto	l928
 16780  004D52                     __end_of_updateServoPosition:
 16781                           	opt stack 0
 16782                           tblptru	equ	0xFF8
 16783                           tblptrh	equ	0xFF7
 16784                           tblptrl	equ	0xFF6
 16785                           tablat	equ	0xFF5
 16786                           prodh	equ	0xFF4
 16787                           prodl	equ	0xFF3
 16788                           intcon	equ	0xFF2
 16789                           intcon2	equ	0xFF1
 16790                           intcon3	equ	0xFF0
 16791                           postinc0	equ	0xFEE
 16792                           wreg	equ	0xFE8
 16793                           postdec1	equ	0xFE5
 16794                           fsr1l	equ	0xFE1
 16795                           indf2	equ	0xFDF
 16796                           postinc2	equ	0xFDE
 16797                           postdec2	equ	0xFDD
 16798                           fsr2h	equ	0xFDA
 16799                           fsr2l	equ	0xFD9
 16800                           status	equ	0xFD8
 16801                           
 16802 ;; *************** function _BlockerTest *****************
 16803 ;; Defined at:
 16804 ;;		line 581 in file "Test.c"
 16805 ;; Parameters:    Size  Location     Type
 16806 ;;		None
 16807 ;; Auto vars:     Size  Location     Type
 16808 ;;  i               2   45[BANK0 ] int 
 16809 ;;  cond_flag       2   51[BANK0 ] int 
 16810 ;;  cam_flag        2   49[BANK0 ] int 
 16811 ;;  res             2   47[BANK0 ] int 
 16812 ;; Return value:  Size  Location     Type
 16813 ;;                  1    wreg      void 
 16814 ;; Registers used:
 16815 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16816 ;; Tracked objects:
 16817 ;;		On entry : 0/0
 16818 ;;		On exit  : 0/0
 16819 ;;		Unchanged: 0/0
 16820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16822 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16823 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16824 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16825 ;;Total ram usage:       10 bytes
 16826 ;; Hardware stack levels used:    1
 16827 ;; Hardware stack levels required when called:   10
 16828 ;; This function calls:
 16829 ;;		_lcdInst
 16830 ;;		_printf
 16831 ;;		_readADC
 16832 ;; This function is called by:
 16833 ;;		_Test
 16834 ;; This function uses a non-reentrant model
 16835 ;;
 16836                           
 16837                           	psect	text54
 16838  003C40                     __ptext54:
 16839                           	opt stack 0
 16840  003C40                     _BlockerTest:
 16841                           	opt stack 19
 16842                           
 16843                           ;Test.c: 582: readADC(2);
 16844                           
 16845                           ; BSR set to: 0
 16846                           ;incstack = 0
 16847  003C40  0E02               	movlw	2
 16848  003C42  EC32  F02C         	call	_readADC
 16849                           
 16850                           ;Test.c: 583: int res = ADRESH<<8 | ADRESL;
 16851  003C46  50C3               	movf	4035,w,c	;volatile
 16852  003C48  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 16853  003C4C  0100               	movlb	0	; () banked
 16854  003C4E  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 16855  003C50  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 16856  003C54  0100               	movlb	0	; () banked
 16857  003C56  6BAB               	clrf	??_BlockerTest& (0+255),b
 16858  003C58  0100               	movlb	0	; () banked
 16859  003C5A  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 16860  003C5C  0100               	movlb	0	; () banked
 16861  003C5E  6FAF               	movwf	BlockerTest@res& (0+255),b
 16862  003C60  0100               	movlb	0	; () banked
 16863  003C62  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 16864  003C64  0100               	movlb	0	; () banked
 16865  003C66  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 16866                           
 16867                           ; BSR set to: 0
 16868                           ;Test.c: 585: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16869  003C68  0E01               	movlw	1
 16870  003C6A  EC39  F02D         	call	_lcdInst
 16871  003C6E  0E68               	movlw	104
 16872  003C70  0100               	movlb	0	; () banked
 16873  003C72  6FAB               	movwf	??_BlockerTest& (0+255),b
 16874  003C74  0EE4               	movlw	228
 16875  003C76                     u11107:
 16876  003C76  2EE8               	decfsz	wreg,f,c
 16877  003C78  D7FE               	bra	u11107
 16878  003C7A  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 16879  003C7C  D7FC               	bra	u11107
 16880  003C7E  F000               	nop	
 16881  003C80  0E80               	movlw	128
 16882  003C82  EC39  F02D         	call	_lcdInst
 16883                           
 16884                           ;Test.c: 586: printf("D:RET|2:C %d  ", res);
 16885  003C86  0E6D               	movlw	low STR_123
 16886  003C88  0100               	movlb	0	; () banked
 16887  003C8A  6F8E               	movwf	printf@f& (0+255),b
 16888  003C8C  0EFE               	movlw	high STR_123
 16889  003C8E  0100               	movlb	0	; () banked
 16890  003C90  6F8F               	movwf	(printf@f+1)& (0+255),b
 16891  003C92  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 16892  003C96  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 16893  003C9A  EC8F  F00D         	call	_printf	;wreg free
 16894                           
 16895                           ;Test.c: 587: lcdInst(0b11000000);;
 16896  003C9E  0EC0               	movlw	192
 16897  003CA0  EC39  F02D         	call	_lcdInst
 16898                           
 16899                           ;Test.c: 588: printf("OTHER: CAM TOGGLE");
 16900  003CA4  0E1C               	movlw	low STR_124
 16901  003CA6  0100               	movlb	0	; () banked
 16902  003CA8  6F8E               	movwf	printf@f& (0+255),b
 16903  003CAA  0EFB               	movlw	high STR_124
 16904  003CAC  0100               	movlb	0	; () banked
 16905  003CAE  6F8F               	movwf	(printf@f+1)& (0+255),b
 16906  003CB0  EC8F  F00D         	call	_printf	;wreg free
 16907                           
 16908                           ;Test.c: 589: int cam_flag = 1;
 16909  003CB4  0E00               	movlw	0
 16910  003CB6  0100               	movlb	0	; () banked
 16911  003CB8  6FB2               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 16912  003CBA  0E01               	movlw	1
 16913  003CBC  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 16914                           
 16915                           ; BSR set to: 0
 16916                           ;Test.c: 590: int cond_flag = 0;
 16917  003CBE  0E00               	movlw	0
 16918  003CC0  0100               	movlb	0	; () banked
 16919  003CC2  6FB4               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 16920  003CC4  0E00               	movlw	0
 16921  003CC6  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 16922                           
 16923                           ; BSR set to: 0
 16924                           ;Test.c: 593: while(PORTBbits.RB1 == 0){
 16925                           
 16926                           ;Test.c: 592: while(1){
 16927  003CC8  D023               	goto	l9103
 16928  003CCA                     l9095:
 16929                           
 16930                           ;Test.c: 594: readADC(2);
 16931  003CCA  0E02               	movlw	2
 16932  003CCC  EC32  F02C         	call	_readADC
 16933                           
 16934                           ;Test.c: 595: res = ADRESH<<8 | ADRESL;
 16935  003CD0  50C3               	movf	4035,w,c	;volatile
 16936  003CD2  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 16937  003CD6  0100               	movlb	0	; () banked
 16938  003CD8  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 16939  003CDA  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 16940  003CDE  0100               	movlb	0	; () banked
 16941  003CE0  6BAB               	clrf	??_BlockerTest& (0+255),b
 16942  003CE2  0100               	movlb	0	; () banked
 16943  003CE4  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 16944  003CE6  0100               	movlb	0	; () banked
 16945  003CE8  6FAF               	movwf	BlockerTest@res& (0+255),b
 16946  003CEA  0100               	movlb	0	; () banked
 16947  003CEC  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 16948  003CEE  0100               	movlb	0	; () banked
 16949  003CF0  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 16950                           
 16951                           ; BSR set to: 0
 16952                           ;Test.c: 596: lcdInst(0b10000000);;
 16953  003CF2  0E80               	movlw	128
 16954  003CF4  EC39  F02D         	call	_lcdInst
 16955                           
 16956                           ;Test.c: 597: printf("D:RET|2:C %d  ", res);
 16957  003CF8  0E6D               	movlw	low STR_123
 16958  003CFA  0100               	movlb	0	; () banked
 16959  003CFC  6F8E               	movwf	printf@f& (0+255),b
 16960  003CFE  0EFE               	movlw	high STR_123
 16961  003D00  0100               	movlb	0	; () banked
 16962  003D02  6F8F               	movwf	(printf@f+1)& (0+255),b
 16963  003D04  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 16964  003D08  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 16965  003D0C  EC8F  F00D         	call	_printf	;wreg free
 16966  003D10                     l9103:
 16967  003D10  A281               	btfss	3969,1,c	;volatile
 16968  003D12  D7DB               	goto	l9095
 16969                           
 16970                           ;Test.c: 598: }
 16971                           ;Test.c: 599: if(PORTB >> 4 == 0b1111){
 16972  003D14  3881               	swapf	3969,w,c	;volatile
 16973  003D16  0B0F               	andlw	15
 16974  003D18  0A0F               	xorlw	15
 16975  003D1A  B4D8               	btfsc	status,2,c
 16976  003D1C  0012               	return	
 16977                           
 16978                           ;Test.c: 602: else if(PORTB >> 4 == 0b0001){
 16979                           
 16980                           ;Test.c: 601: }
 16981                           
 16982                           ;Test.c: 600: break;
 16983  003D1E  3881               	swapf	3969,w,c	;volatile
 16984  003D20  0B0F               	andlw	15
 16985  003D22  06E8               	decf	wreg,f,c
 16986  003D24  A4D8               	btfss	status,2,c
 16987  003D26  D016               	goto	l9121
 16988                           
 16989                           ;Test.c: 603: if(cond_flag){
 16990  003D28  0100               	movlb	0	; () banked
 16991  003D2A  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 16992  003D2C  0100               	movlb	0	; () banked
 16993  003D2E  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 16994  003D30  B4D8               	btfsc	status,2,c
 16995  003D32  D007               	goto	l1448
 16996                           
 16997                           ; BSR set to: 0
 16998                           ;Test.c: 604: LATAbits.LATA3 = 1;
 16999  003D34  8689               	bsf	3977,3,c	;volatile
 17000  003D36  D006               	goto	l9119
 17001  003D38                     u8151:
 17002  003D38  0E01               	movlw	1
 17003  003D3A                     u8160:
 17004  003D3A  0100               	movlb	0	; () banked
 17005  003D3C  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17006  003D3E  6BB4               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 17007                           
 17008                           ;Test.c: 606: }
 17009  003D40  D05F               	goto	l9149
 17010  003D42                     l1448:
 17011                           
 17012                           ; BSR set to: 0
 17013                           ;Test.c: 607: else{
 17014                           ;Test.c: 608: LATAbits.LATA3 = 0;
 17015  003D42  9689               	bcf	3977,3,c	;volatile
 17016  003D44                     l9119:
 17017                           
 17018                           ; BSR set to: 0
 17019                           ;Test.c: 609: cond_flag = !cond_flag;
 17020  003D44  0100               	movlb	0	; () banked
 17021  003D46  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17022  003D48  0100               	movlb	0	; () banked
 17023  003D4A  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17024  003D4C  B4D8               	btfsc	status,2,c
 17025  003D4E  D7F4               	goto	u8151
 17026  003D50  0E00               	movlw	0
 17027  003D52  D7F3               	goto	u8160
 17028  003D54                     l9121:
 17029                           
 17030                           ;Test.c: 612: else{
 17031                           ;Test.c: 613: if(cam_flag){
 17032  003D54  0100               	movlb	0	; () banked
 17033  003D56  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17034  003D58  0100               	movlb	0	; () banked
 17035  003D5A  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17036  003D5C  B4D8               	btfsc	status,2,c
 17037  003D5E  D007               	goto	l9127
 17038                           
 17039                           ; BSR set to: 0
 17040                           ;Test.c: 614: LATCbits.LATC0 = 1;
 17041  003D60  808B               	bsf	3979,0,c	;volatile
 17042  003D62  D023               	goto	l9139
 17043  003D64                     u8201:
 17044  003D64  0E01               	movlw	1
 17045  003D66                     u8210:
 17046  003D66  0100               	movlb	0	; () banked
 17047  003D68  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17048  003D6A  6BB2               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 17049                           
 17050                           ;Test.c: 616: }
 17051  003D6C  D049               	goto	l9149
 17052  003D6E                     l9127:
 17053                           
 17054                           ; BSR set to: 0
 17055                           ;Test.c: 617: else{
 17056                           ;Test.c: 618: for(int i=0;i<5000;i++)
 17057  003D6E  0E00               	movlw	0
 17058  003D70  0100               	movlb	0	; () banked
 17059  003D72  6FAE               	movwf	(BlockerTest@i+1)& (0+255),b
 17060  003D74  0E00               	movlw	0
 17061  003D76  6FAD               	movwf	BlockerTest@i& (0+255),b
 17062  003D78                     l9129:
 17063                           
 17064                           ; BSR set to: 0
 17065  003D78  0100               	movlb	0	; () banked
 17066  003D7A  BFAE               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 17067  003D7C  D008               	goto	l1453
 17068  003D7E  0E88               	movlw	136
 17069  003D80  0100               	movlb	0	; () banked
 17070  003D82  5DAD               	subwf	BlockerTest@i& (0+255),w,b
 17071  003D84  0E13               	movlw	19
 17072  003D86  0100               	movlb	0	; () banked
 17073  003D88  59AE               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 17074  003D8A  B0D8               	btfsc	status,0,c
 17075  003D8C  D00D               	goto	l1454
 17076  003D8E                     l1453:
 17077                           
 17078                           ; BSR set to: 0
 17079                           ;Test.c: 619: {
 17080                           ;Test.c: 620: LATCbits.LATC0 = 1;
 17081  003D8E  808B               	bsf	3979,0,c	;volatile
 17082                           
 17083                           ; BSR set to: 0
 17084                           ;Test.c: 621: _delay((unsigned long)((10)*(32000000/4000000.0)));
 17085  003D90  0E1A               	movlw	26
 17086  003D92                     u11117:
 17087  003D92  2EE8               	decfsz	wreg,f,c
 17088  003D94  D7FE               	bra	u11117
 17089  003D96  D000               	nop2	
 17090                           
 17091                           ;Test.c: 622: LATCbits.LATC0 = 0;
 17092  003D98  908B               	bcf	3979,0,c	;volatile
 17093                           
 17094                           ;Test.c: 623: _delay((unsigned long)((90)*(32000000/4000000.0)));
 17095  003D9A  0EF0               	movlw	240
 17096  003D9C                     u11127:
 17097  003D9C  2EE8               	decfsz	wreg,f,c
 17098  003D9E  D7FE               	bra	u11127
 17099  003DA0  0100               	movlb	0	; () banked
 17100  003DA2  4BAD               	infsnz	BlockerTest@i& (0+255),f,b
 17101  003DA4  2BAE               	incf	(BlockerTest@i+1)& (0+255),f,b
 17102  003DA6  D7E8               	goto	l9129
 17103  003DA8                     l1454:
 17104                           
 17105                           ; BSR set to: 0
 17106                           ;Test.c: 624: }
 17107                           ;Test.c: 625: LATCbits.LATC0 = 0;
 17108  003DA8  908B               	bcf	3979,0,c	;volatile
 17109  003DAA                     l9139:
 17110                           
 17111                           ; BSR set to: 0
 17112                           ;Test.c: 626: cam_flag = !cam_flag;
 17113  003DAA  0100               	movlb	0	; () banked
 17114  003DAC  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17115  003DAE  0100               	movlb	0	; () banked
 17116  003DB0  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17117  003DB2  B4D8               	btfsc	status,2,c
 17118  003DB4  D7D7               	goto	u8201
 17119  003DB6  0E00               	movlw	0
 17120  003DB8  D7D6               	goto	u8210
 17121  003DBA                     l9141:
 17122                           
 17123                           ;Test.c: 631: readADC(2);
 17124  003DBA  0E02               	movlw	2
 17125  003DBC  EC32  F02C         	call	_readADC
 17126                           
 17127                           ;Test.c: 632: res = ADRESH<<8 | ADRESL;
 17128  003DC0  50C3               	movf	4035,w,c	;volatile
 17129  003DC2  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17130  003DC6  0100               	movlb	0	; () banked
 17131  003DC8  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17132  003DCA  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17133  003DCE  0100               	movlb	0	; () banked
 17134  003DD0  6BAB               	clrf	??_BlockerTest& (0+255),b
 17135  003DD2  0100               	movlb	0	; () banked
 17136  003DD4  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17137  003DD6  0100               	movlb	0	; () banked
 17138  003DD8  6FAF               	movwf	BlockerTest@res& (0+255),b
 17139  003DDA  0100               	movlb	0	; () banked
 17140  003DDC  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17141  003DDE  0100               	movlb	0	; () banked
 17142  003DE0  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17143                           
 17144                           ; BSR set to: 0
 17145                           ;Test.c: 633: lcdInst(0b10000000);;
 17146  003DE2  0E80               	movlw	128
 17147  003DE4  EC39  F02D         	call	_lcdInst
 17148                           
 17149                           ;Test.c: 634: printf("D:RET|2:C %d  ", res);
 17150  003DE8  0E6D               	movlw	low STR_123
 17151  003DEA  0100               	movlb	0	; () banked
 17152  003DEC  6F8E               	movwf	printf@f& (0+255),b
 17153  003DEE  0EFE               	movlw	high STR_123
 17154  003DF0  0100               	movlb	0	; () banked
 17155  003DF2  6F8F               	movwf	(printf@f+1)& (0+255),b
 17156  003DF4  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17157  003DF8  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17158  003DFC  EC8F  F00D         	call	_printf	;wreg free
 17159  003E00                     l9149:
 17160  003E00  A281               	btfss	3969,1,c	;volatile
 17161  003E02  D786               	goto	l9103
 17162  003E04  D7DA               	goto	l9141
 17163  003E06                     __end_of_BlockerTest:
 17164                           	opt stack 0
 17165                           tblptru	equ	0xFF8
 17166                           tblptrh	equ	0xFF7
 17167                           tblptrl	equ	0xFF6
 17168                           tablat	equ	0xFF5
 17169                           prodh	equ	0xFF4
 17170                           prodl	equ	0xFF3
 17171                           intcon	equ	0xFF2
 17172                           intcon2	equ	0xFF1
 17173                           intcon3	equ	0xFF0
 17174                           postinc0	equ	0xFEE
 17175                           wreg	equ	0xFE8
 17176                           postdec1	equ	0xFE5
 17177                           fsr1l	equ	0xFE1
 17178                           indf2	equ	0xFDF
 17179                           postinc2	equ	0xFDE
 17180                           postdec2	equ	0xFDD
 17181                           fsr2h	equ	0xFDA
 17182                           fsr2l	equ	0xFD9
 17183                           status	equ	0xFD8
 17184                           
 17185 ;; *************** function _readADC *****************
 17186 ;; Defined at:
 17187 ;;		line 15 in file "ADCFunctionality.c"
 17188 ;; Parameters:    Size  Location     Type
 17189 ;;  channel         1    wreg     unsigned char 
 17190 ;; Auto vars:     Size  Location     Type
 17191 ;;  channel         1    1[BANK0 ] unsigned char 
 17192 ;; Return value:  Size  Location     Type
 17193 ;;                  1    wreg      void 
 17194 ;; Registers used:
 17195 ;;		wreg, status,2, status,0, cstack
 17196 ;; Tracked objects:
 17197 ;;		On entry : 0/0
 17198 ;;		On exit  : 0/0
 17199 ;;		Unchanged: 0/0
 17200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17202 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17203 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17204 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17205 ;;Total ram usage:        2 bytes
 17206 ;; Hardware stack levels used:    1
 17207 ;; Hardware stack levels required when called:    7
 17208 ;; This function calls:
 17209 ;;		Nothing
 17210 ;; This function is called by:
 17211 ;;		_readIR
 17212 ;;		_readMAG
 17213 ;;		_readCOND
 17214 ;;		_sensorTest
 17215 ;;		_PlatformTest
 17216 ;;		_BlockerTest
 17217 ;; This function uses a non-reentrant model
 17218 ;;
 17219                           
 17220                           	psect	text55
 17221  005864                     __ptext55:
 17222                           	opt stack 0
 17223  005864                     _readADC:
 17224                           	opt stack 20
 17225                           
 17226                           ;incstack = 0
 17227                           ;readADC@channel stored from wreg
 17228  005864  0100               	movlb	0	; () banked
 17229  005866  6F81               	movwf	readADC@channel& (0+255),b
 17230                           
 17231                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 17232  005868  0100               	movlb	0	; () banked
 17233  00586A  4581               	rlncf	readADC@channel& (0+255),w,b
 17234  00586C  46E8               	rlncf	wreg,f,c
 17235  00586E  0BFC               	andlw	252
 17236  005870  6EC2               	movwf	4034,c	;volatile
 17237                           
 17238                           ; BSR set to: 0
 17239                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 17240  005872  80C2               	bsf	4034,0,c	;volatile
 17241                           
 17242                           ; BSR set to: 0
 17243                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 17244  005874  82C2               	bsf	4034,1,c	;volatile
 17245                           
 17246                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 17247  005876  D009               	goto	l6489
 17248  005878                     l6487:
 17249  005878  0E34               	movlw	52
 17250  00587A  0100               	movlb	0	; () banked
 17251  00587C  6F80               	movwf	??_readADC& (0+255),b
 17252  00587E  0EF1               	movlw	241
 17253  005880                     u11137:
 17254  005880  2EE8               	decfsz	wreg,f,c
 17255  005882  D7FE               	bra	u11137
 17256  005884  2F80               	decfsz	??_readADC& (0+255),f,b
 17257  005886  D7FC               	bra	u11137
 17258  005888  D000               	nop2	
 17259  00588A                     l6489:
 17260  00588A  A2C2               	btfss	4034,1,c	;volatile
 17261  00588C  0012               	return	
 17262  00588E  D7F4               	goto	l6487
 17263  005890                     __end_of_readADC:
 17264                           	opt stack 0
 17265                           tblptru	equ	0xFF8
 17266                           tblptrh	equ	0xFF7
 17267                           tblptrl	equ	0xFF6
 17268                           tablat	equ	0xFF5
 17269                           prodh	equ	0xFF4
 17270                           prodl	equ	0xFF3
 17271                           intcon	equ	0xFF2
 17272                           intcon2	equ	0xFF1
 17273                           intcon3	equ	0xFF0
 17274                           postinc0	equ	0xFEE
 17275                           wreg	equ	0xFE8
 17276                           postdec1	equ	0xFE5
 17277                           fsr1l	equ	0xFE1
 17278                           indf2	equ	0xFDF
 17279                           postinc2	equ	0xFDE
 17280                           postdec2	equ	0xFDD
 17281                           fsr2h	equ	0xFDA
 17282                           fsr2l	equ	0xFD9
 17283                           status	equ	0xFD8
 17284                           
 17285 ;; *************** function _printf *****************
 17286 ;; Defined at:
 17287 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 17288 ;; Parameters:    Size  Location     Type
 17289 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 17290 ;;		 -> STR_130(18), STR_129(18), STR_128(17), STR_127(17), 
 17291 ;;		 -> STR_126(15), STR_125(15), STR_124(18), STR_123(15), 
 17292 ;;		 -> STR_122(18), STR_121(18), STR_120(17), STR_119(17), 
 17293 ;;		 -> STR_118(17), STR_117(17), STR_116(17), STR_115(17), 
 17294 ;;		 -> STR_114(17), STR_113(17), STR_112(18), STR_111(17), 
 17295 ;;		 -> STR_110(15), STR_109(15), STR_108(15), STR_107(17), 
 17296 ;;		 -> STR_106(17), STR_105(17), STR_104(16), STR_103(17), 
 17297 ;;		 -> STR_102(17), STR_101(17), STR_100(17), STR_99(17), 
 17298 ;;		 -> STR_98(17), STR_97(15), STR_96(11), STR_95(17), 
 17299 ;;		 -> STR_94(11), STR_93(17), STR_92(14), STR_91(15), 
 17300 ;;		 -> STR_90(14), STR_89(10), STR_88(9), STR_87(9), 
 17301 ;;		 -> STR_86(10), STR_85(10), STR_84(16), STR_83(15), 
 17302 ;;		 -> STR_82(3), STR_81(15), STR_80(13), STR_79(14), 
 17303 ;;		 -> STR_78(8), STR_77(14), STR_76(15), STR_75(12), 
 17304 ;;		 -> STR_74(14), STR_73(17), STR_72(14), STR_71(15), 
 17305 ;;		 -> STR_70(17), STR_69(17), STR_68(7), STR_67(21), 
 17306 ;;		 -> STR_66(16), STR_65(16), STR_64(19), STR_63(24), 
 17307 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 17308 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 17309 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 17310 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 17311 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 17312 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(17), 
 17313 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(14), 
 17314 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 17315 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 17316 ;;		 -> STR_1(18), 
 17317 ;; Auto vars:     Size  Location     Type
 17318 ;;  tmpval          4    0        struct .
 17319 ;;  width           2   41[BANK0 ] int 
 17320 ;;  val             2   37[BANK0 ] unsigned int 
 17321 ;;  len             2   35[BANK0 ] unsigned int 
 17322 ;;  ap              2   33[BANK0 ] PTR void [1]
 17323 ;;		 -> ?i2_printf(2), ?_printf(2), 
 17324 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 17325 ;;		 -> STR_131(7), ID@res2(2), ID@res1(2), count_total(2), 
 17326 ;;		 -> printRTC@month(4), UI@month(4), 
 17327 ;;  c               1   40[BANK0 ] char 
 17328 ;;  flag            1   39[BANK0 ] unsigned char 
 17329 ;;  prec            1   30[BANK0 ] char 
 17330 ;; Return value:  Size  Location     Type
 17331 ;;                  2   14[BANK0 ] int 
 17332 ;; Registers used:
 17333 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17334 ;; Tracked objects:
 17335 ;;		On entry : 0/0
 17336 ;;		On exit  : 0/0
 17337 ;;		Unchanged: 0/0
 17338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17339 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17340 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17341 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17342 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17343 ;;Total ram usage:       29 bytes
 17344 ;; Hardware stack levels used:    1
 17345 ;; Hardware stack levels required when called:    9
 17346 ;; This function calls:
 17347 ;;		___lwdiv
 17348 ;;		___lwmod
 17349 ;;		___wmul
 17350 ;;		_isdigit
 17351 ;;		_putch
 17352 ;; This function is called by:
 17353 ;;		_UI
 17354 ;;		_change_state_to_menu_start
 17355 ;;		_change_state_to_menu_12
 17356 ;;		_change_state_to_menu_22
 17357 ;;		_printRTC
 17358 ;;		_ID
 17359 ;;		_EEPROM_write
 17360 ;;		_Test
 17361 ;;		_algorithmTest
 17362 ;;		_sensorTest
 17363 ;;		_actuatorTest
 17364 ;;		_BothServos
 17365 ;;		_PortTestDC
 17366 ;;		_PlatformTest
 17367 ;;		_SpeedTest
 17368 ;;		_BlockerTest
 17369 ;;		_arm
 17370 ;;		_PortTestPusher
 17371 ;;		_ToggleTestA5
 17372 ;; This function uses a non-reentrant model
 17373 ;;
 17374                           
 17375                           	psect	text56
 17376  001B1E                     __ptext56:
 17377                           	opt stack 0
 17378  001B1E                     _printf:
 17379                           	opt stack 18
 17380                           
 17381                           ;doprnt.c: 466: va_list ap;
 17382                           ;doprnt.c: 499: signed char c;
 17383                           ;doprnt.c: 501: int width;
 17384                           ;doprnt.c: 506: signed char prec;
 17385                           ;doprnt.c: 508: unsigned char flag;
 17386                           ;doprnt.c: 523: union {
 17387                           ;doprnt.c: 524: unsigned long vd;
 17388                           ;doprnt.c: 525: double integ;
 17389                           ;doprnt.c: 526: } tmpval;
 17390                           ;doprnt.c: 528: unsigned int val;
 17391                           ;doprnt.c: 529: unsigned len;
 17392                           ;doprnt.c: 530: const char * cp;
 17393                           ;doprnt.c: 533: *ap = __va_start();
 17394                           
 17395                           ;incstack = 0
 17396  001B1E  0E90               	movlw	low (?_printf+2)
 17397  001B20  0100               	movlb	0	; () banked
 17398  001B22  6FA1               	movwf	printf@ap& (0+255),b
 17399  001B24  0E00               	movlw	high (?_printf+2)
 17400  001B26  0100               	movlb	0	; () banked
 17401  001B28  6FA2               	movwf	(printf@ap+1)& (0+255),b
 17402                           
 17403                           ;doprnt.c: 536: while(c = *f++) {
 17404  001B2A  D205               	goto	l6811
 17405  001B2C                     l6681:
 17406                           
 17407                           ; BSR set to: 0
 17408                           ;doprnt.c: 538: if(c != '%')
 17409  001B2C  0E25               	movlw	37
 17410  001B2E  0100               	movlb	0	; () banked
 17411  001B30  19A8               	xorwf	printf@c& (0+255),w,b
 17412  001B32  B4D8               	btfsc	status,2,c
 17413  001B34  D005               	goto	l6685
 17414                           
 17415                           ; BSR set to: 0
 17416                           ;doprnt.c: 540: {
 17417                           ;doprnt.c: 541: (putch(c) );
 17418  001B36  0100               	movlb	0	; () banked
 17419  001B38  51A8               	movf	printf@c& (0+255),w,b
 17420  001B3A  EC31  F02D         	call	_putch
 17421                           
 17422                           ;doprnt.c: 542: continue;
 17423  001B3E  D1FB               	goto	l6811
 17424  001B40                     l6685:
 17425                           
 17426                           ;doprnt.c: 543: }
 17427                           ;doprnt.c: 546: width = 0;
 17428  001B40  0E00               	movlw	0
 17429  001B42  0100               	movlb	0	; () banked
 17430  001B44  6FAA               	movwf	(printf@width+1)& (0+255),b
 17431  001B46  0E00               	movlw	0
 17432  001B48  6FA9               	movwf	printf@width& (0+255),b
 17433                           
 17434                           ;doprnt.c: 548: flag = 0;
 17435  001B4A  0E00               	movlw	0
 17436  001B4C  0100               	movlb	0	; () banked
 17437  001B4E  6FA7               	movwf	printf@flag& (0+255),b
 17438                           
 17439                           ; BSR set to: 0
 17440                           ;doprnt.c: 551: switch(*f) {
 17441                           
 17442                           ;doprnt.c: 550: for(;;) {
 17443  001B50  D005               	goto	l6691
 17444  001B52                     l6687:
 17445                           
 17446                           ;doprnt.c: 580: flag |= 0x04;
 17447  001B52  0100               	movlb	0	; () banked
 17448  001B54  85A7               	bsf	printf@flag& (0+255),2,b
 17449                           
 17450                           ;doprnt.c: 581: f++;
 17451  001B56  0100               	movlb	0	; () banked
 17452  001B58  4B8E               	infsnz	printf@f& (0+255),f,b
 17453  001B5A  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17454  001B5C                     l6691:
 17455  001B5C  C08E  FFF6         	movff	printf@f,tblptrl
 17456  001B60  C08F  FFF7         	movff	printf@f+1,tblptrh
 17457  001B64                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17458  001B64  6AF8               	clrf	tblptru,c
 17459  001B66                     	endif
 17460  001B66                     	if	0	;tblptru may be non-zero
 17461  001B66                     	endif
 17462  001B66  0008               	tblrd		*
 17463  001B68  50F5               	movf	tablat,w,c
 17464                           
 17465                           ; Switch size 1, requested type "space"
 17466                           ; Number of cases is 1, Range of values is 48 to 48
 17467                           ; switch strategies available:
 17468                           ; Name         Instructions Cycles
 17469                           ; simple_byte            4     3 (average)
 17470                           ;	Chosen strategy is simple_byte
 17471  001B6A  0A30               	xorlw	48	; case 48
 17472  001B6C  B4D8               	btfsc	status,2,c
 17473  001B6E  D7F1               	goto	l6687
 17474                           
 17475                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 17476                           
 17477                           ;doprnt.c: 586: }
 17478                           
 17479                           ;doprnt.c: 585: break;
 17480  001B70  C08E  FFF6         	movff	printf@f,tblptrl
 17481  001B74  C08F  FFF7         	movff	printf@f+1,tblptrh
 17482  001B78                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17483  001B78  6AF8               	clrf	tblptru,c
 17484  001B7A                     	endif
 17485  001B7A                     	if	0	;tblptru may be non-zero
 17486  001B7A                     	endif
 17487  001B7A  0008               	tblrd		*
 17488  001B7C  50F5               	movf	tablat,w,c
 17489  001B7E  EC48  F02C         	call	_isdigit
 17490  001B82  A0D8               	btfss	status,0,c
 17491  001B84  D0D2               	goto	l6739
 17492                           
 17493                           ;doprnt.c: 598: width = 0;
 17494  001B86  0E00               	movlw	0
 17495  001B88  0100               	movlb	0	; () banked
 17496  001B8A  6FAA               	movwf	(printf@width+1)& (0+255),b
 17497  001B8C  0E00               	movlw	0
 17498  001B8E  6FA9               	movwf	printf@width& (0+255),b
 17499  001B90                     l6697:
 17500                           
 17501                           ;doprnt.c: 600: width *= 10;
 17502  001B90  C0A9  F080         	movff	printf@width,___wmul@multiplier
 17503  001B94  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 17504  001B98  0E00               	movlw	0
 17505  001B9A  0100               	movlb	0	; () banked
 17506  001B9C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17507  001B9E  0E0A               	movlw	10
 17508  001BA0  6F82               	movwf	___wmul@multiplicand& (0+255),b
 17509  001BA2  ECB1  F02A         	call	___wmul	;wreg free
 17510  001BA6  C080  F0A9         	movff	?___wmul,printf@width
 17511  001BAA  C081  F0AA         	movff	?___wmul+1,printf@width+1
 17512                           
 17513                           ;doprnt.c: 601: width += *f++ - '0';
 17514  001BAE  0ED0               	movlw	208
 17515  001BB0  0100               	movlb	0	; () banked
 17516  001BB2  6F9A               	movwf	??_printf& (0+255),b
 17517  001BB4  0EFF               	movlw	255
 17518  001BB6  0100               	movlb	0	; () banked
 17519  001BB8  6F9B               	movwf	(??_printf+1)& (0+255),b
 17520  001BBA  C08E  FFF6         	movff	printf@f,tblptrl
 17521  001BBE  C08F  FFF7         	movff	printf@f+1,tblptrh
 17522  001BC2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17523  001BC2  6AF8               	clrf	tblptru,c
 17524  001BC4                     	endif
 17525  001BC4                     	if	0	;tblptru may be non-zero
 17526  001BC4                     	endif
 17527  001BC4  0008               	tblrd		*
 17528  001BC6  50F5               	movf	tablat,w,c
 17529  001BC8  0100               	movlb	0	; () banked
 17530  001BCA  6F9C               	movwf	(??_printf+2)& (0+255),b
 17531  001BCC  6B9D               	clrf	(??_printf+3)& (0+255),b
 17532  001BCE  0100               	movlb	0	; () banked
 17533  001BD0  519A               	movf	??_printf& (0+255),w,b
 17534  001BD2  0100               	movlb	0	; () banked
 17535  001BD4  279C               	addwf	(??_printf+2)& (0+255),f,b
 17536  001BD6  0100               	movlb	0	; () banked
 17537  001BD8  519B               	movf	(??_printf+1)& (0+255),w,b
 17538  001BDA  0100               	movlb	0	; () banked
 17539  001BDC  239D               	addwfc	(??_printf+3)& (0+255),f,b
 17540  001BDE  0100               	movlb	0	; () banked
 17541  001BE0  519C               	movf	(??_printf+2)& (0+255),w,b
 17542  001BE2  0100               	movlb	0	; () banked
 17543  001BE4  27A9               	addwf	printf@width& (0+255),f,b
 17544  001BE6  0100               	movlb	0	; () banked
 17545  001BE8  519D               	movf	(??_printf+3)& (0+255),w,b
 17546  001BEA  0100               	movlb	0	; () banked
 17547  001BEC  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 17548                           
 17549                           ; BSR set to: 0
 17550  001BEE  0100               	movlb	0	; () banked
 17551  001BF0  4B8E               	infsnz	printf@f& (0+255),f,b
 17552  001BF2  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17553                           
 17554                           ; BSR set to: 0
 17555                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 17556  001BF4  C08E  FFF6         	movff	printf@f,tblptrl
 17557  001BF8  C08F  FFF7         	movff	printf@f+1,tblptrh
 17558  001BFC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17559  001BFC  6AF8               	clrf	tblptru,c
 17560  001BFE                     	endif
 17561  001BFE                     	if	0	;tblptru may be non-zero
 17562  001BFE                     	endif
 17563  001BFE  0008               	tblrd		*
 17564  001C00  50F5               	movf	tablat,w,c
 17565  001C02  EC48  F02C         	call	_isdigit
 17566  001C06  A0D8               	btfss	status,0,c
 17567  001C08  D090               	goto	l6739
 17568  001C0A  D7C2               	goto	l6697
 17569  001C0C                     l6705:
 17570                           
 17571                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 17572  001C0C  C0A1  FFD9         	movff	printf@ap,fsr2l
 17573  001C10  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17574  001C14  CFDE F09F          	movff	postinc2,printf@cp
 17575  001C18  CFDD F0A0          	movff	postdec2,printf@cp+1
 17576  001C1C  0E02               	movlw	2
 17577  001C1E  0100               	movlb	0	; () banked
 17578  001C20  27A1               	addwf	printf@ap& (0+255),f,b
 17579  001C22  0E00               	movlw	0
 17580  001C24  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17581                           
 17582                           ; BSR set to: 0
 17583                           ;doprnt.c: 740: if(!cp)
 17584  001C26  0100               	movlb	0	; () banked
 17585  001C28  519F               	movf	printf@cp& (0+255),w,b
 17586  001C2A  0100               	movlb	0	; () banked
 17587  001C2C  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 17588  001C2E  A4D8               	btfss	status,2,c
 17589  001C30  D006               	goto	l6713
 17590                           
 17591                           ; BSR set to: 0
 17592                           ;doprnt.c: 741: cp = "(null)";
 17593  001C32  0EB5               	movlw	low STR_131
 17594  001C34  0100               	movlb	0	; () banked
 17595  001C36  6F9F               	movwf	printf@cp& (0+255),b
 17596  001C38  0EFF               	movlw	high STR_131
 17597  001C3A  0100               	movlb	0	; () banked
 17598  001C3C  6FA0               	movwf	(printf@cp+1)& (0+255),b
 17599  001C3E                     l6713:
 17600                           
 17601                           ; BSR set to: 0
 17602                           ;doprnt.c: 745: len = 0;
 17603  001C3E  0E00               	movlw	0
 17604  001C40  0100               	movlb	0	; () banked
 17605  001C42  6FA4               	movwf	(printf@len+1)& (0+255),b
 17606  001C44  0E00               	movlw	0
 17607  001C46  6FA3               	movwf	printf@len& (0+255),b
 17608                           
 17609                           ;doprnt.c: 746: while(cp[len])
 17610  001C48  D003               	goto	l6717
 17611  001C4A                     l6715:
 17612                           
 17613                           ;doprnt.c: 747: len++;
 17614  001C4A  0100               	movlb	0	; () banked
 17615  001C4C  4BA3               	infsnz	printf@len& (0+255),f,b
 17616  001C4E  2BA4               	incf	(printf@len+1)& (0+255),f,b
 17617  001C50                     l6717:
 17618                           
 17619                           ; BSR set to: 0
 17620  001C50  0100               	movlb	0	; () banked
 17621  001C52  51A3               	movf	printf@len& (0+255),w,b
 17622  001C54  0100               	movlb	0	; () banked
 17623  001C56  259F               	addwf	printf@cp& (0+255),w,b
 17624  001C58  0100               	movlb	0	; () banked
 17625  001C5A  6F9A               	movwf	??_printf& (0+255),b
 17626  001C5C  0100               	movlb	0	; () banked
 17627  001C5E  51A4               	movf	(printf@len+1)& (0+255),w,b
 17628  001C60  0100               	movlb	0	; () banked
 17629  001C62  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 17630  001C64  0100               	movlb	0	; () banked
 17631  001C66  6F9B               	movwf	(??_printf+1)& (0+255),b
 17632  001C68  C09A  FFF6         	movff	??_printf,tblptrl
 17633  001C6C  C09B  FFF7         	movff	??_printf+1,tblptrh
 17634  001C70  0E00               	movlw	low (__mediumconst shr (0+16))
 17635  001C72  6EF8               	movwf	tblptru,c
 17636  001C74  0E0F               	movlw	(high __ramtop+-1)
 17637  001C76  64F7               	cpfsgt	tblptrh,c
 17638  001C78  D003               	bra	u5137
 17639  001C7A  0008               	tblrd		*
 17640  001C7C  50F5               	movf	tablat,w,c
 17641  001C7E  D005               	bra	u5130
 17642  001C80                     u5137:
 17643  001C80  CFF6 FFE9          	movff	tblptrl,fsr0l
 17644  001C84  CFF7 FFEA          	movff	tblptrh,fsr0h
 17645  001C88  50EF               	movf	indf0,w,c
 17646  001C8A                     u5130:
 17647  001C8A  0900               	iorlw	0
 17648  001C8C  A4D8               	btfss	status,2,c
 17649  001C8E  D7DD               	goto	l6715
 17650                           
 17651                           ;doprnt.c: 757: if(width > len)
 17652  001C90  0100               	movlb	0	; () banked
 17653  001C92  51A9               	movf	printf@width& (0+255),w,b
 17654  001C94  0100               	movlb	0	; () banked
 17655  001C96  5DA3               	subwf	printf@len& (0+255),w,b
 17656  001C98  0100               	movlb	0	; () banked
 17657  001C9A  51AA               	movf	(printf@width+1)& (0+255),w,b
 17658  001C9C  0100               	movlb	0	; () banked
 17659  001C9E  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 17660  001CA0  B0D8               	btfsc	status,0,c
 17661  001CA2  D009               	goto	l6723
 17662                           
 17663                           ; BSR set to: 0
 17664                           ;doprnt.c: 758: width -= len;
 17665  001CA4  0100               	movlb	0	; () banked
 17666  001CA6  51A3               	movf	printf@len& (0+255),w,b
 17667  001CA8  0100               	movlb	0	; () banked
 17668  001CAA  5FA9               	subwf	printf@width& (0+255),f,b
 17669  001CAC  0100               	movlb	0	; () banked
 17670  001CAE  51A4               	movf	(printf@len+1)& (0+255),w,b
 17671  001CB0  0100               	movlb	0	; () banked
 17672  001CB2  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 17673  001CB4  D009               	goto	l6727
 17674  001CB6                     l6723:
 17675                           
 17676                           ; BSR set to: 0
 17677                           ;doprnt.c: 759: else
 17678                           ;doprnt.c: 760: width = 0;
 17679  001CB6  0E00               	movlw	0
 17680  001CB8  0100               	movlb	0	; () banked
 17681  001CBA  6FAA               	movwf	(printf@width+1)& (0+255),b
 17682  001CBC  0E00               	movlw	0
 17683  001CBE  6FA9               	movwf	printf@width& (0+255),b
 17684                           
 17685                           ; BSR set to: 0
 17686                           ;doprnt.c: 764: while(width--)
 17687  001CC0  D003               	goto	l6727
 17688  001CC2                     l6725:
 17689                           
 17690                           ; BSR set to: 0
 17691                           ;doprnt.c: 765: (putch(' ') );
 17692  001CC2  0E20               	movlw	32
 17693  001CC4  EC31  F02D         	call	_putch
 17694  001CC8                     l6727:
 17695  001CC8  0100               	movlb	0	; () banked
 17696  001CCA  07A9               	decf	printf@width& (0+255),f,b
 17697  001CCC  A0D8               	btfss	status,0,c
 17698  001CCE  07AA               	decf	(printf@width+1)& (0+255),f,b
 17699  001CD0  0100               	movlb	0	; () banked
 17700  001CD2  29A9               	incf	printf@width& (0+255),w,b
 17701  001CD4  E1F6               	bnz	l6725
 17702  001CD6  0100               	movlb	0	; () banked
 17703  001CD8  29AA               	incf	(printf@width+1)& (0+255),w,b
 17704  001CDA  B4D8               	btfsc	status,2,c
 17705  001CDC  D017               	goto	l6733
 17706  001CDE  D7F1               	goto	l6725
 17707  001CE0                     l6729:
 17708                           
 17709                           ; BSR set to: 0
 17710                           ;doprnt.c: 768: (putch(*cp++) );
 17711  001CE0  C09F  FFF6         	movff	printf@cp,tblptrl
 17712  001CE4  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 17713  001CE8  0E00               	movlw	low (__mediumconst shr (0+16))
 17714  001CEA  6EF8               	movwf	tblptru,c
 17715  001CEC  0E0F               	movlw	(high __ramtop+-1)
 17716  001CEE  64F7               	cpfsgt	tblptrh,c
 17717  001CF0  D003               	bra	u5177
 17718  001CF2  0008               	tblrd		*
 17719  001CF4  50F5               	movf	tablat,w,c
 17720  001CF6  D005               	bra	u5170
 17721  001CF8                     u5177:
 17722  001CF8  CFF6 FFE9          	movff	tblptrl,fsr0l
 17723  001CFC  CFF7 FFEA          	movff	tblptrh,fsr0h
 17724  001D00  50EF               	movf	indf0,w,c
 17725  001D02                     u5170:
 17726  001D02  EC31  F02D         	call	_putch
 17727  001D06  0100               	movlb	0	; () banked
 17728  001D08  4B9F               	infsnz	printf@cp& (0+255),f,b
 17729  001D0A  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 17730  001D0C                     l6733:
 17731                           
 17732                           ; BSR set to: 0
 17733  001D0C  0100               	movlb	0	; () banked
 17734  001D0E  07A3               	decf	printf@len& (0+255),f,b
 17735  001D10  A0D8               	btfss	status,0,c
 17736  001D12  07A4               	decf	(printf@len+1)& (0+255),f,b
 17737  001D14  0100               	movlb	0	; () banked
 17738  001D16  29A3               	incf	printf@len& (0+255),w,b
 17739  001D18  E1E3               	bnz	l6729
 17740  001D1A  0100               	movlb	0	; () banked
 17741  001D1C  29A4               	incf	(printf@len+1)& (0+255),w,b
 17742  001D1E  B4D8               	btfsc	status,2,c
 17743  001D20  D10A               	goto	l6811
 17744  001D22  D7DE               	goto	l6729
 17745  001D24                     l6735:
 17746                           
 17747                           ; BSR set to: 0
 17748                           ;doprnt.c: 818: flag |= 0x40;
 17749  001D24  0100               	movlb	0	; () banked
 17750  001D26  8DA7               	bsf	printf@flag& (0+255),6,b
 17751                           
 17752                           ; BSR set to: 0
 17753                           ;doprnt.c: 822: }
 17754                           
 17755                           ;doprnt.c: 819: break;
 17756  001D28  D01D               	goto	l1525
 17757  001D2A                     l6739:
 17758  001D2A  C08E  FFF6         	movff	printf@f,tblptrl
 17759  001D2E  C08F  FFF7         	movff	printf@f+1,tblptrh
 17760  001D32  0100               	movlb	0	; () banked
 17761  001D34  4B8E               	infsnz	printf@f& (0+255),f,b
 17762  001D36  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17763  001D38                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17764  001D38  6AF8               	clrf	tblptru,c
 17765  001D3A                     	endif
 17766  001D3A                     	if	0	;tblptru may be non-zero
 17767  001D3A                     	endif
 17768  001D3A  0008               	tblrd		*
 17769  001D3C  CFF5 F0A8          	movff	tablat,printf@c
 17770  001D40  0100               	movlb	0	; () banked
 17771  001D42  51A8               	movf	printf@c& (0+255),w,b
 17772                           
 17773                           ; Switch size 1, requested type "space"
 17774                           ; Number of cases is 5, Range of values is 0 to 117
 17775                           ; switch strategies available:
 17776                           ; Name         Instructions Cycles
 17777                           ; simple_byte           16     9 (average)
 17778                           ;	Chosen strategy is simple_byte
 17779  001D44  0A00               	xorlw	0	; case 0
 17780  001D46  B4D8               	btfsc	status,2,c
 17781  001D48  0012               	return	
 17782  001D4A  0A64               	xorlw	100	; case 100
 17783  001D4C  B4D8               	btfsc	status,2,c
 17784  001D4E  D00A               	goto	l1525
 17785  001D50  0A0D               	xorlw	13	; case 105
 17786  001D52  B4D8               	btfsc	status,2,c
 17787  001D54  D007               	goto	l1525
 17788  001D56  0A1A               	xorlw	26	; case 115
 17789  001D58  B4D8               	btfsc	status,2,c
 17790  001D5A  D758               	goto	l6705
 17791  001D5C  0A06               	xorlw	6	; case 117
 17792  001D5E  B4D8               	btfsc	status,2,c
 17793  001D60  D7E1               	goto	l6735
 17794  001D62  D0E9               	goto	l6811
 17795  001D64                     l1525:
 17796                           
 17797                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 17798  001D64  0100               	movlb	0	; () banked
 17799  001D66  BDA7               	btfsc	printf@flag& (0+255),6,b
 17800  001D68  D019               	goto	l6751
 17801                           
 17802                           ; BSR set to: 0
 17803                           ;doprnt.c: 1253: {
 17804                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 17805  001D6A  C0A1  FFD9         	movff	printf@ap,fsr2l
 17806  001D6E  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17807  001D72  CFDE F0A5          	movff	postinc2,printf@val
 17808  001D76  CFDD F0A6          	movff	postdec2,printf@val+1
 17809                           
 17810                           ; BSR set to: 0
 17811  001D7A  0E02               	movlw	2
 17812  001D7C  0100               	movlb	0	; () banked
 17813  001D7E  27A1               	addwf	printf@ap& (0+255),f,b
 17814  001D80  0E00               	movlw	0
 17815  001D82  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17816                           
 17817                           ; BSR set to: 0
 17818                           ;doprnt.c: 1261: if((int)val < 0) {
 17819  001D84  0100               	movlb	0	; () banked
 17820  001D86  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 17821  001D88  D016               	goto	l6755
 17822                           
 17823                           ; BSR set to: 0
 17824                           ;doprnt.c: 1262: flag |= 0x03;
 17825  001D8A  0E03               	movlw	3
 17826  001D8C  0100               	movlb	0	; () banked
 17827  001D8E  13A7               	iorwf	printf@flag& (0+255),f,b
 17828                           
 17829                           ; BSR set to: 0
 17830                           ;doprnt.c: 1263: val = -val;
 17831  001D90  0100               	movlb	0	; () banked
 17832  001D92  6DA5               	negf	printf@val& (0+255),b
 17833  001D94  1FA6               	comf	(printf@val+1)& (0+255),f,b
 17834  001D96  B0D8               	btfsc	status,0,c
 17835  001D98  2BA6               	incf	(printf@val+1)& (0+255),f,b
 17836                           
 17837                           ; BSR set to: 0
 17838                           ;doprnt.c: 1264: }
 17839                           ;doprnt.c: 1266: }
 17840  001D9A  D00D               	goto	l6755
 17841  001D9C                     l6751:
 17842                           
 17843                           ; BSR set to: 0
 17844                           ;doprnt.c: 1268: else
 17845                           ;doprnt.c: 1273: {
 17846                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 17847  001D9C  C0A1  FFD9         	movff	printf@ap,fsr2l
 17848  001DA0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17849  001DA4  CFDE F0A5          	movff	postinc2,printf@val
 17850  001DA8  CFDD F0A6          	movff	postdec2,printf@val+1
 17851                           
 17852                           ; BSR set to: 0
 17853  001DAC  0E02               	movlw	2
 17854  001DAE  0100               	movlb	0	; () banked
 17855  001DB0  27A1               	addwf	printf@ap& (0+255),f,b
 17856  001DB2  0E00               	movlw	0
 17857  001DB4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17858  001DB6                     l6755:
 17859                           
 17860                           ; BSR set to: 0
 17861                           ;doprnt.c: 1287: }
 17862                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 17863  001DB6  0E01               	movlw	1
 17864  001DB8  0100               	movlb	0	; () banked
 17865  001DBA  6FA8               	movwf	printf@c& (0+255),b
 17866  001DBC                     l6757:
 17867                           
 17868                           ; BSR set to: 0
 17869  001DBC  0E05               	movlw	5
 17870  001DBE  0100               	movlb	0	; () banked
 17871  001DC0  19A8               	xorwf	printf@c& (0+255),w,b
 17872  001DC2  B4D8               	btfsc	status,2,c
 17873  001DC4  D019               	goto	l6769
 17874                           
 17875                           ; BSR set to: 0
 17876                           ;doprnt.c: 1306: if(val < dpowers[c])
 17877                           
 17878                           ; BSR set to: 0
 17879                           
 17880                           ; BSR set to: 0
 17881  001DC6  0100               	movlb	0	; () banked
 17882  001DC8  51A8               	movf	printf@c& (0+255),w,b
 17883  001DCA  0D02               	mullw	2
 17884  001DCC  0E9C               	movlw	low _dpowers
 17885  001DCE  24F3               	addwf	prodl,w,c
 17886  001DD0  6EF6               	movwf	tblptrl,c
 17887  001DD2  0EFA               	movlw	high _dpowers
 17888  001DD4  20F4               	addwfc	prodh,w,c
 17889  001DD6  6EF7               	movwf	tblptrh,c
 17890  001DD8                     	if	1	;There are 3 active tblptr bytes
 17891  001DD8  6AF8               	clrf	tblptru,c
 17892  001DDA  0E00               	movlw	low (__mediumconst shr (0+16))
 17893  001DDC  22F8               	addwfc	tblptru,f,c
 17894  001DDE                     	endif
 17895  001DDE  0009               	tblrd		*+
 17896  001DE0  50F5               	movf	tablat,w,c
 17897  001DE2  0100               	movlb	0	; () banked
 17898  001DE4  5DA5               	subwf	printf@val& (0+255),w,b
 17899  001DE6  0009               	tblrd		*+
 17900  001DE8  50F5               	movf	tablat,w,c
 17901  001DEA  0100               	movlb	0	; () banked
 17902  001DEC  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 17903  001DEE  A0D8               	btfss	status,0,c
 17904  001DF0  D003               	goto	l6769
 17905                           
 17906                           ; BSR set to: 0
 17907                           
 17908                           ; BSR set to: 0
 17909                           
 17910                           ; BSR set to: 0
 17911                           ;doprnt.c: 1307: break;
 17912  001DF2  0100               	movlb	0	; () banked
 17913  001DF4  2BA8               	incf	printf@c& (0+255),f,b
 17914  001DF6  D7E2               	goto	l6757
 17915  001DF8                     l6769:
 17916                           
 17917                           ; BSR set to: 0
 17918                           ;doprnt.c: 1345: if(width && flag & 0x03)
 17919  001DF8  0100               	movlb	0	; () banked
 17920  001DFA  51A9               	movf	printf@width& (0+255),w,b
 17921  001DFC  0100               	movlb	0	; () banked
 17922  001DFE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 17923  001E00  B4D8               	btfsc	status,2,c
 17924  001E02  D00B               	goto	l6775
 17925                           
 17926                           ; BSR set to: 0
 17927  001E04  C0A7  F09A         	movff	printf@flag,??_printf
 17928  001E08  0E03               	movlw	3
 17929  001E0A  0100               	movlb	0	; () banked
 17930  001E0C  179A               	andwf	??_printf& (0+255),f,b
 17931  001E0E  B4D8               	btfsc	status,2,c
 17932  001E10  D004               	goto	l6775
 17933                           
 17934                           ; BSR set to: 0
 17935                           ;doprnt.c: 1346: width--;
 17936  001E12  0100               	movlb	0	; () banked
 17937  001E14  07A9               	decf	printf@width& (0+255),f,b
 17938  001E16  A0D8               	btfss	status,0,c
 17939  001E18  07AA               	decf	(printf@width+1)& (0+255),f,b
 17940  001E1A                     l6775:
 17941                           
 17942                           ; BSR set to: 0
 17943                           ;doprnt.c: 1381: if(width > c)
 17944  001E1A  0E80               	movlw	128
 17945  001E1C  0100               	movlb	0	; () banked
 17946  001E1E  BFA8               	btfsc	printf@c& (0+255),7,b
 17947  001E20  0E7F               	movlw	127
 17948  001E22  0100               	movlb	0	; () banked
 17949  001E24  6F9A               	movwf	??_printf& (0+255),b
 17950  001E26  0100               	movlb	0	; () banked
 17951  001E28  51A9               	movf	printf@width& (0+255),w,b
 17952  001E2A  0100               	movlb	0	; () banked
 17953  001E2C  5DA8               	subwf	printf@c& (0+255),w,b
 17954  001E2E  0100               	movlb	0	; () banked
 17955  001E30  51AA               	movf	(printf@width+1)& (0+255),w,b
 17956  001E32  0A80               	xorlw	128
 17957  001E34  0100               	movlb	0	; () banked
 17958  001E36  599A               	subwfb	??_printf& (0+255),w,b
 17959  001E38  B0D8               	btfsc	status,0,c
 17960  001E3A  D00B               	goto	l6779
 17961                           
 17962                           ; BSR set to: 0
 17963                           ;doprnt.c: 1382: width -= c;
 17964  001E3C  0100               	movlb	0	; () banked
 17965  001E3E  51A8               	movf	printf@c& (0+255),w,b
 17966  001E40  0100               	movlb	0	; () banked
 17967  001E42  5FA9               	subwf	printf@width& (0+255),f,b
 17968  001E44  0E00               	movlw	0
 17969  001E46  0100               	movlb	0	; () banked
 17970  001E48  BFA8               	btfsc	printf@c& (0+255),7,b
 17971  001E4A  0EFF               	movlw	255
 17972  001E4C  0100               	movlb	0	; () banked
 17973  001E4E  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 17974  001E50  D005               	goto	l6781
 17975  001E52                     l6779:
 17976                           
 17977                           ; BSR set to: 0
 17978                           ;doprnt.c: 1383: else
 17979                           ;doprnt.c: 1384: width = 0;
 17980  001E52  0E00               	movlw	0
 17981  001E54  0100               	movlb	0	; () banked
 17982  001E56  6FAA               	movwf	(printf@width+1)& (0+255),b
 17983  001E58  0E00               	movlw	0
 17984  001E5A  6FA9               	movwf	printf@width& (0+255),b
 17985  001E5C                     l6781:
 17986                           
 17987                           ; BSR set to: 0
 17988                           ;doprnt.c: 1387: if(flag & 0x04) {
 17989  001E5C  0100               	movlb	0	; () banked
 17990  001E5E  A5A7               	btfss	printf@flag& (0+255),2,b
 17991  001E60  D018               	goto	l6793
 17992                           
 17993                           ; BSR set to: 0
 17994                           ;doprnt.c: 1392: if(flag & 0x03)
 17995  001E62  C0A7  F09A         	movff	printf@flag,??_printf
 17996  001E66  0E03               	movlw	3
 17997  001E68  0100               	movlb	0	; () banked
 17998  001E6A  179A               	andwf	??_printf& (0+255),f,b
 17999  001E6C  B4D8               	btfsc	status,2,c
 18000  001E6E  D003               	goto	l6787
 18001                           
 18002                           ; BSR set to: 0
 18003                           ;doprnt.c: 1393: (putch('-') );
 18004  001E70  0E2D               	movlw	45
 18005  001E72  EC31  F02D         	call	_putch
 18006  001E76                     l6787:
 18007                           
 18008                           ;doprnt.c: 1415: if(width)
 18009  001E76  0100               	movlb	0	; () banked
 18010  001E78  51A9               	movf	printf@width& (0+255),w,b
 18011  001E7A  0100               	movlb	0	; () banked
 18012  001E7C  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18013  001E7E  B4D8               	btfsc	status,2,c
 18014  001E80  D025               	goto	l6803
 18015                           
 18016                           ; BSR set to: 0
 18017                           ;doprnt.c: 1417: (putch('0') );
 18018                           
 18019                           ; BSR set to: 0
 18020                           
 18021                           ;doprnt.c: 1416: do
 18022  001E82  0E30               	movlw	48
 18023  001E84  EC31  F02D         	call	_putch
 18024                           
 18025                           ;doprnt.c: 1418: while(--width);
 18026  001E88  0100               	movlb	0	; () banked
 18027  001E8A  07A9               	decf	printf@width& (0+255),f,b
 18028  001E8C  A0D8               	btfss	status,0,c
 18029  001E8E  07AA               	decf	(printf@width+1)& (0+255),f,b
 18030  001E90  D7F2               	goto	l6787
 18031  001E92                     l6793:
 18032                           
 18033                           ; BSR set to: 0
 18034                           ;doprnt.c: 1422: {
 18035                           ;doprnt.c: 1424: if(width
 18036                           ;doprnt.c: 1428: )
 18037  001E92  0100               	movlb	0	; () banked
 18038  001E94  51A9               	movf	printf@width& (0+255),w,b
 18039  001E96  0100               	movlb	0	; () banked
 18040  001E98  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18041  001E9A  B4D8               	btfsc	status,2,c
 18042  001E9C  D00D               	goto	l6799
 18043  001E9E                     l6795:
 18044                           
 18045                           ; BSR set to: 0
 18046                           ;doprnt.c: 1430: (putch(' ') );
 18047  001E9E  0E20               	movlw	32
 18048  001EA0  EC31  F02D         	call	_putch
 18049                           
 18050                           ;doprnt.c: 1431: while(--width);
 18051  001EA4  0100               	movlb	0	; () banked
 18052  001EA6  07A9               	decf	printf@width& (0+255),f,b
 18053  001EA8  A0D8               	btfss	status,0,c
 18054  001EAA  07AA               	decf	(printf@width+1)& (0+255),f,b
 18055  001EAC  0100               	movlb	0	; () banked
 18056  001EAE  51A9               	movf	printf@width& (0+255),w,b
 18057  001EB0  0100               	movlb	0	; () banked
 18058  001EB2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18059  001EB4  A4D8               	btfss	status,2,c
 18060  001EB6  D7F3               	goto	l6795
 18061  001EB8                     l6799:
 18062                           
 18063                           ; BSR set to: 0
 18064                           ;doprnt.c: 1438: if(flag & 0x03)
 18065  001EB8  C0A7  F09A         	movff	printf@flag,??_printf
 18066  001EBC  0E03               	movlw	3
 18067  001EBE  0100               	movlb	0	; () banked
 18068  001EC0  179A               	andwf	??_printf& (0+255),f,b
 18069  001EC2  B4D8               	btfsc	status,2,c
 18070  001EC4  D003               	goto	l6803
 18071                           
 18072                           ; BSR set to: 0
 18073                           ;doprnt.c: 1439: (putch('-') );
 18074  001EC6  0E2D               	movlw	45
 18075  001EC8  EC31  F02D         	call	_putch
 18076  001ECC                     l6803:
 18077                           
 18078                           ;doprnt.c: 1469: }
 18079                           ;doprnt.c: 1472: prec = c;
 18080  001ECC  C0A8  F09E         	movff	printf@c,printf@prec
 18081                           
 18082                           ;doprnt.c: 1474: while(prec--) {
 18083  001ED0  D02C               	goto	l6809
 18084  001ED2                     l6805:
 18085                           
 18086                           ;doprnt.c: 1478: {
 18087                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18088  001ED2  0100               	movlb	0	; () banked
 18089  001ED4  519E               	movf	printf@prec& (0+255),w,b
 18090  001ED6  0D02               	mullw	2
 18091  001ED8  0E9C               	movlw	low _dpowers
 18092  001EDA  24F3               	addwf	prodl,w,c
 18093  001EDC  6EF6               	movwf	tblptrl,c
 18094  001EDE  0EFA               	movlw	high _dpowers
 18095  001EE0  20F4               	addwfc	prodh,w,c
 18096  001EE2  6EF7               	movwf	tblptrh,c
 18097  001EE4                     	if	1	;There are 3 active tblptr bytes
 18098  001EE4  6AF8               	clrf	tblptru,c
 18099  001EE6  0E00               	movlw	low (__mediumconst shr (0+16))
 18100  001EE8  22F8               	addwfc	tblptru,f,c
 18101  001EEA                     	endif
 18102  001EEA  0009               	tblrd		*+
 18103  001EEC  CFF5 F082          	movff	tablat,___lwdiv@divisor
 18104  001EF0  000A               	tblrd		*-
 18105  001EF2  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 18106  001EF6  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 18107  001EFA  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 18108  001EFE  ECE5  F026         	call	___lwdiv	;wreg free
 18109  001F02  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 18110  001F06  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 18111  001F0A  0E00               	movlw	0
 18112  001F0C  0100               	movlb	0	; () banked
 18113  001F0E  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 18114  001F10  0E0A               	movlw	10
 18115  001F12  6F89               	movwf	___lwmod@divisor& (0+255),b
 18116  001F14  EC2F  F028         	call	___lwmod	;wreg free
 18117  001F18  0100               	movlb	0	; () banked
 18118  001F1A  5187               	movf	?___lwmod& (0+255),w,b
 18119  001F1C  0F30               	addlw	48
 18120  001F1E  0100               	movlb	0	; () banked
 18121  001F20  6FA8               	movwf	printf@c& (0+255),b
 18122                           
 18123                           ; BSR set to: 0
 18124                           ;doprnt.c: 1523: }
 18125                           ;doprnt.c: 1524: (putch(c) );
 18126  001F22  0100               	movlb	0	; () banked
 18127  001F24  51A8               	movf	printf@c& (0+255),w,b
 18128  001F26  EC31  F02D         	call	_putch
 18129  001F2A                     l6809:
 18130  001F2A  0100               	movlb	0	; () banked
 18131  001F2C  079E               	decf	printf@prec& (0+255),f,b
 18132  001F2E  0100               	movlb	0	; () banked
 18133  001F30  299E               	incf	printf@prec& (0+255),w,b
 18134  001F32  A4D8               	btfss	status,2,c
 18135  001F34  D7CE               	goto	l6805
 18136  001F36                     l6811:
 18137  001F36  C08E  FFF6         	movff	printf@f,tblptrl
 18138  001F3A  C08F  FFF7         	movff	printf@f+1,tblptrh
 18139  001F3E  0100               	movlb	0	; () banked
 18140  001F40  4B8E               	infsnz	printf@f& (0+255),f,b
 18141  001F42  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18142  001F44                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18143  001F44  6AF8               	clrf	tblptru,c
 18144  001F46                     	endif
 18145  001F46                     	if	0	;tblptru may be non-zero
 18146  001F46                     	endif
 18147  001F46  0008               	tblrd		*
 18148  001F48  CFF5 F0A8          	movff	tablat,printf@c
 18149  001F4C  0100               	movlb	0	; () banked
 18150  001F4E  51A8               	movf	printf@c& (0+255),w,b
 18151  001F50  B4D8               	btfsc	status,2,c
 18152  001F52  0012               	return	
 18153  001F54  D5EB               	goto	l6681
 18154  001F56                     __end_of_printf:
 18155                           	opt stack 0
 18156                           tblptru	equ	0xFF8
 18157                           tblptrh	equ	0xFF7
 18158                           tblptrl	equ	0xFF6
 18159                           tablat	equ	0xFF5
 18160                           prodh	equ	0xFF4
 18161                           prodl	equ	0xFF3
 18162                           intcon	equ	0xFF2
 18163                           intcon2	equ	0xFF1
 18164                           intcon3	equ	0xFF0
 18165                           indf0	equ	0xFEF
 18166                           postinc0	equ	0xFEE
 18167                           fsr0h	equ	0xFEA
 18168                           fsr0l	equ	0xFE9
 18169                           wreg	equ	0xFE8
 18170                           postdec1	equ	0xFE5
 18171                           fsr1l	equ	0xFE1
 18172                           indf2	equ	0xFDF
 18173                           postinc2	equ	0xFDE
 18174                           postdec2	equ	0xFDD
 18175                           fsr2h	equ	0xFDA
 18176                           fsr2l	equ	0xFD9
 18177                           status	equ	0xFD8
 18178                           
 18179 ;; *************** function _putch *****************
 18180 ;; Defined at:
 18181 ;;		line 20 in file "lcd.c"
 18182 ;; Parameters:    Size  Location     Type
 18183 ;;  data            1    wreg     unsigned char 
 18184 ;; Auto vars:     Size  Location     Type
 18185 ;;  data            1    2[BANK0 ] unsigned char 
 18186 ;; Return value:  Size  Location     Type
 18187 ;;                  1    wreg      void 
 18188 ;; Registers used:
 18189 ;;		wreg, status,2, status,0, cstack
 18190 ;; Tracked objects:
 18191 ;;		On entry : 0/0
 18192 ;;		On exit  : 0/0
 18193 ;;		Unchanged: 0/0
 18194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18196 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18198 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18199 ;;Total ram usage:        1 bytes
 18200 ;; Hardware stack levels used:    1
 18201 ;; Hardware stack levels required when called:    8
 18202 ;; This function calls:
 18203 ;;		_lcdNibble
 18204 ;; This function is called by:
 18205 ;;		_printf
 18206 ;; This function uses a non-reentrant model
 18207 ;;
 18208                           
 18209                           	psect	text57
 18210  005A62                     __ptext57:
 18211                           	opt stack 0
 18212  005A62                     _putch:
 18213                           	opt stack 18
 18214                           
 18215                           ;incstack = 0
 18216                           ;putch@data stored from wreg
 18217  005A62  0100               	movlb	0	; () banked
 18218  005A64  6F82               	movwf	putch@data& (0+255),b
 18219                           
 18220                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 18221  005A66  848C               	bsf	3980,2,c	;volatile
 18222                           
 18223                           ;lcd.c: 22: lcdNibble(data);
 18224  005A68  0100               	movlb	0	; () banked
 18225  005A6A  5182               	movf	putch@data& (0+255),w,b
 18226  005A6C  EC93  F027         	call	_lcdNibble
 18227  005A70  0012               	return		;funcret
 18228  005A72                     __end_of_putch:
 18229                           	opt stack 0
 18230                           tblptru	equ	0xFF8
 18231                           tblptrh	equ	0xFF7
 18232                           tblptrl	equ	0xFF6
 18233                           tablat	equ	0xFF5
 18234                           prodh	equ	0xFF4
 18235                           prodl	equ	0xFF3
 18236                           intcon	equ	0xFF2
 18237                           intcon2	equ	0xFF1
 18238                           intcon3	equ	0xFF0
 18239                           indf0	equ	0xFEF
 18240                           postinc0	equ	0xFEE
 18241                           fsr0h	equ	0xFEA
 18242                           fsr0l	equ	0xFE9
 18243                           wreg	equ	0xFE8
 18244                           postdec1	equ	0xFE5
 18245                           fsr1l	equ	0xFE1
 18246                           indf2	equ	0xFDF
 18247                           postinc2	equ	0xFDE
 18248                           postdec2	equ	0xFDD
 18249                           fsr2h	equ	0xFDA
 18250                           fsr2l	equ	0xFD9
 18251                           status	equ	0xFD8
 18252                           
 18253 ;; *************** function _isdigit *****************
 18254 ;; Defined at:
 18255 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 18256 ;; Parameters:    Size  Location     Type
 18257 ;;  c               1    wreg     unsigned char 
 18258 ;; Auto vars:     Size  Location     Type
 18259 ;;  c               1    2[BANK0 ] unsigned char 
 18260 ;; Return value:  Size  Location     Type
 18261 ;;		None               void
 18262 ;; Registers used:
 18263 ;;		wreg, status,2, status,0
 18264 ;; Tracked objects:
 18265 ;;		On entry : 0/0
 18266 ;;		On exit  : 0/0
 18267 ;;		Unchanged: 0/0
 18268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18270 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18271 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18272 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18273 ;;Total ram usage:        3 bytes
 18274 ;; Hardware stack levels used:    1
 18275 ;; Hardware stack levels required when called:    7
 18276 ;; This function calls:
 18277 ;;		Nothing
 18278 ;; This function is called by:
 18279 ;;		_printf
 18280 ;; This function uses a non-reentrant model
 18281 ;;
 18282                           
 18283                           	psect	text58
 18284  005890                     __ptext58:
 18285                           	opt stack 0
 18286  005890                     _isdigit:
 18287                           	opt stack 19
 18288                           
 18289                           ;incstack = 0
 18290                           ;isdigit@c stored from wreg
 18291  005890  0100               	movlb	0	; () banked
 18292  005892  6F82               	movwf	isdigit@c& (0+255),b
 18293  005894  0E00               	movlw	0
 18294  005896  0100               	movlb	0	; () banked
 18295  005898  6F81               	movwf	_isdigit$2068& (0+255),b
 18296                           
 18297                           ; BSR set to: 0
 18298  00589A  0E3A               	movlw	58
 18299  00589C  0100               	movlb	0	; () banked
 18300  00589E  6182               	cpfslt	isdigit@c& (0+255),b
 18301  0058A0  D007               	goto	l6529
 18302                           
 18303                           ; BSR set to: 0
 18304  0058A2  0E2F               	movlw	47
 18305  0058A4  0100               	movlb	0	; () banked
 18306  0058A6  6582               	cpfsgt	isdigit@c& (0+255),b
 18307  0058A8  D003               	goto	l6529
 18308                           
 18309                           ; BSR set to: 0
 18310  0058AA  0E01               	movlw	1
 18311  0058AC  0100               	movlb	0	; () banked
 18312  0058AE  6F81               	movwf	_isdigit$2068& (0+255),b
 18313  0058B0                     l6529:
 18314                           
 18315                           ; BSR set to: 0
 18316  0058B0  C081  F080         	movff	_isdigit$2068,??_isdigit
 18317  0058B4  0100               	movlb	0	; () banked
 18318  0058B6  3180               	rrcf	??_isdigit& (0+255),w,b
 18319  0058B8  0012               	return	
 18320  0058BA                     __end_of_isdigit:
 18321                           	opt stack 0
 18322                           tblptru	equ	0xFF8
 18323                           tblptrh	equ	0xFF7
 18324                           tblptrl	equ	0xFF6
 18325                           tablat	equ	0xFF5
 18326                           prodh	equ	0xFF4
 18327                           prodl	equ	0xFF3
 18328                           intcon	equ	0xFF2
 18329                           intcon2	equ	0xFF1
 18330                           intcon3	equ	0xFF0
 18331                           indf0	equ	0xFEF
 18332                           postinc0	equ	0xFEE
 18333                           fsr0h	equ	0xFEA
 18334                           fsr0l	equ	0xFE9
 18335                           wreg	equ	0xFE8
 18336                           postdec1	equ	0xFE5
 18337                           fsr1l	equ	0xFE1
 18338                           indf2	equ	0xFDF
 18339                           postinc2	equ	0xFDE
 18340                           postdec2	equ	0xFDD
 18341                           fsr2h	equ	0xFDA
 18342                           fsr2l	equ	0xFD9
 18343                           status	equ	0xFD8
 18344                           
 18345 ;; *************** function ___wmul *****************
 18346 ;; Defined at:
 18347 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 18348 ;; Parameters:    Size  Location     Type
 18349 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18350 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18351 ;; Auto vars:     Size  Location     Type
 18352 ;;  product         2    4[BANK0 ] unsigned int 
 18353 ;; Return value:  Size  Location     Type
 18354 ;;                  2    0[BANK0 ] unsigned int 
 18355 ;; Registers used:
 18356 ;;		wreg, status,2, status,0, prodl, prodh
 18357 ;; Tracked objects:
 18358 ;;		On entry : 0/0
 18359 ;;		On exit  : 0/0
 18360 ;;		Unchanged: 0/0
 18361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18362 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18363 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18365 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18366 ;;Total ram usage:        6 bytes
 18367 ;; Hardware stack levels used:    1
 18368 ;; Hardware stack levels required when called:    7
 18369 ;; This function calls:
 18370 ;;		Nothing
 18371 ;; This function is called by:
 18372 ;;		_printf
 18373 ;; This function uses a non-reentrant model
 18374 ;;
 18375                           
 18376                           	psect	text59
 18377  005562                     __ptext59:
 18378                           	opt stack 0
 18379  005562                     ___wmul:
 18380                           	opt stack 19
 18381                           
 18382                           ; BSR set to: 0
 18383                           ;incstack = 0
 18384  005562  0100               	movlb	0	; () banked
 18385  005564  5180               	movf	___wmul@multiplier& (0+255),w,b
 18386  005566  0100               	movlb	0	; () banked
 18387  005568  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18388  00556A  CFF3 F084          	movff	prodl,___wmul@product
 18389  00556E  CFF4 F085          	movff	prodh,___wmul@product+1
 18390  005572  0100               	movlb	0	; () banked
 18391  005574  5180               	movf	___wmul@multiplier& (0+255),w,b
 18392  005576  0100               	movlb	0	; () banked
 18393  005578  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 18394  00557A  50F3               	movf	prodl,w,c
 18395  00557C  0100               	movlb	0	; () banked
 18396  00557E  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18397  005580  0100               	movlb	0	; () banked
 18398  005582  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 18399  005584  0100               	movlb	0	; () banked
 18400  005586  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18401  005588  50F3               	movf	prodl,w,c
 18402  00558A  0100               	movlb	0	; () banked
 18403  00558C  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18404                           
 18405                           ; BSR set to: 0
 18406  00558E  C084  F080         	movff	___wmul@product,?___wmul
 18407  005592  C085  F081         	movff	___wmul@product+1,?___wmul+1
 18408  005596  0012               	return	
 18409  005598                     __end_of___wmul:
 18410                           	opt stack 0
 18411                           tblptru	equ	0xFF8
 18412                           tblptrh	equ	0xFF7
 18413                           tblptrl	equ	0xFF6
 18414                           tablat	equ	0xFF5
 18415                           prodh	equ	0xFF4
 18416                           prodl	equ	0xFF3
 18417                           intcon	equ	0xFF2
 18418                           intcon2	equ	0xFF1
 18419                           intcon3	equ	0xFF0
 18420                           indf0	equ	0xFEF
 18421                           postinc0	equ	0xFEE
 18422                           fsr0h	equ	0xFEA
 18423                           fsr0l	equ	0xFE9
 18424                           wreg	equ	0xFE8
 18425                           postdec1	equ	0xFE5
 18426                           fsr1l	equ	0xFE1
 18427                           indf2	equ	0xFDF
 18428                           postinc2	equ	0xFDE
 18429                           postdec2	equ	0xFDD
 18430                           fsr2h	equ	0xFDA
 18431                           fsr2l	equ	0xFD9
 18432                           status	equ	0xFD8
 18433                           
 18434 ;; *************** function ___lwmod *****************
 18435 ;; Defined at:
 18436 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 18437 ;; Parameters:    Size  Location     Type
 18438 ;;  dividend        2    7[BANK0 ] unsigned int 
 18439 ;;  divisor         2    9[BANK0 ] unsigned int 
 18440 ;; Auto vars:     Size  Location     Type
 18441 ;;  counter         1   11[BANK0 ] unsigned char 
 18442 ;; Return value:  Size  Location     Type
 18443 ;;                  2    7[BANK0 ] unsigned int 
 18444 ;; Registers used:
 18445 ;;		wreg, status,2, status,0
 18446 ;; Tracked objects:
 18447 ;;		On entry : 0/0
 18448 ;;		On exit  : 0/0
 18449 ;;		Unchanged: 0/0
 18450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18451 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18452 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18454 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18455 ;;Total ram usage:        5 bytes
 18456 ;; Hardware stack levels used:    1
 18457 ;; Hardware stack levels required when called:    7
 18458 ;; This function calls:
 18459 ;;		Nothing
 18460 ;; This function is called by:
 18461 ;;		_printf
 18462 ;; This function uses a non-reentrant model
 18463 ;;
 18464                           
 18465                           	psect	text60
 18466  00505E                     __ptext60:
 18467                           	opt stack 0
 18468  00505E                     ___lwmod:
 18469                           	opt stack 19
 18470                           
 18471                           ; BSR set to: 0
 18472                           ;incstack = 0
 18473  00505E  0100               	movlb	0	; () banked
 18474  005060  5189               	movf	___lwmod@divisor& (0+255),w,b
 18475  005062  0100               	movlb	0	; () banked
 18476  005064  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 18477  005066  B4D8               	btfsc	status,2,c
 18478  005068  D026               	goto	l1982
 18479                           
 18480                           ; BSR set to: 0
 18481  00506A  0E01               	movlw	1
 18482  00506C  0100               	movlb	0	; () banked
 18483  00506E  6F8B               	movwf	___lwmod@counter& (0+255),b
 18484  005070  D006               	goto	l6567
 18485  005072                     l6565:
 18486                           
 18487                           ; BSR set to: 0
 18488  005072  0100               	movlb	0	; () banked
 18489  005074  90D8               	bcf	status,0,c
 18490  005076  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 18491  005078  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 18492  00507A  0100               	movlb	0	; () banked
 18493  00507C  2B8B               	incf	___lwmod@counter& (0+255),f,b
 18494  00507E                     l6567:
 18495                           
 18496                           ; BSR set to: 0
 18497  00507E  0100               	movlb	0	; () banked
 18498  005080  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 18499  005082  D7F7               	goto	l6565
 18500  005084                     l6569:
 18501                           
 18502                           ; BSR set to: 0
 18503  005084  0100               	movlb	0	; () banked
 18504  005086  5189               	movf	___lwmod@divisor& (0+255),w,b
 18505  005088  0100               	movlb	0	; () banked
 18506  00508A  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 18507  00508C  0100               	movlb	0	; () banked
 18508  00508E  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18509  005090  0100               	movlb	0	; () banked
 18510  005092  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 18511  005094  A0D8               	btfss	status,0,c
 18512  005096  D008               	goto	l6573
 18513                           
 18514                           ; BSR set to: 0
 18515  005098  0100               	movlb	0	; () banked
 18516  00509A  5189               	movf	___lwmod@divisor& (0+255),w,b
 18517  00509C  0100               	movlb	0	; () banked
 18518  00509E  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 18519  0050A0  0100               	movlb	0	; () banked
 18520  0050A2  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18521  0050A4  0100               	movlb	0	; () banked
 18522  0050A6  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 18523  0050A8                     l6573:
 18524                           
 18525                           ; BSR set to: 0
 18526  0050A8  0100               	movlb	0	; () banked
 18527  0050AA  90D8               	bcf	status,0,c
 18528  0050AC  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 18529  0050AE  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 18530                           
 18531                           ; BSR set to: 0
 18532  0050B0  0100               	movlb	0	; () banked
 18533  0050B2  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 18534  0050B4  D7E7               	goto	l6569
 18535  0050B6                     l1982:
 18536                           
 18537                           ; BSR set to: 0
 18538  0050B6  C087  F087         	movff	___lwmod@dividend,?___lwmod
 18539  0050BA  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 18540                           
 18541                           ; BSR set to: 0
 18542  0050BE  0012               	return		;funcret
 18543  0050C0                     __end_of___lwmod:
 18544                           	opt stack 0
 18545                           tblptru	equ	0xFF8
 18546                           tblptrh	equ	0xFF7
 18547                           tblptrl	equ	0xFF6
 18548                           tablat	equ	0xFF5
 18549                           prodh	equ	0xFF4
 18550                           prodl	equ	0xFF3
 18551                           intcon	equ	0xFF2
 18552                           intcon2	equ	0xFF1
 18553                           intcon3	equ	0xFF0
 18554                           indf0	equ	0xFEF
 18555                           postinc0	equ	0xFEE
 18556                           fsr0h	equ	0xFEA
 18557                           fsr0l	equ	0xFE9
 18558                           wreg	equ	0xFE8
 18559                           postdec1	equ	0xFE5
 18560                           fsr1l	equ	0xFE1
 18561                           indf2	equ	0xFDF
 18562                           postinc2	equ	0xFDE
 18563                           postdec2	equ	0xFDD
 18564                           fsr2h	equ	0xFDA
 18565                           fsr2l	equ	0xFD9
 18566                           status	equ	0xFD8
 18567                           
 18568 ;; *************** function ___lwdiv *****************
 18569 ;; Defined at:
 18570 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 18571 ;; Parameters:    Size  Location     Type
 18572 ;;  dividend        2    0[BANK0 ] unsigned int 
 18573 ;;  divisor         2    2[BANK0 ] unsigned int 
 18574 ;; Auto vars:     Size  Location     Type
 18575 ;;  quotient        2    4[BANK0 ] unsigned int 
 18576 ;;  counter         1    6[BANK0 ] unsigned char 
 18577 ;; Return value:  Size  Location     Type
 18578 ;;                  2    0[BANK0 ] unsigned int 
 18579 ;; Registers used:
 18580 ;;		wreg, status,2, status,0
 18581 ;; Tracked objects:
 18582 ;;		On entry : 0/0
 18583 ;;		On exit  : 0/0
 18584 ;;		Unchanged: 0/0
 18585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18586 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18587 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18589 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18590 ;;Total ram usage:        7 bytes
 18591 ;; Hardware stack levels used:    1
 18592 ;; Hardware stack levels required when called:    7
 18593 ;; This function calls:
 18594 ;;		Nothing
 18595 ;; This function is called by:
 18596 ;;		_printf
 18597 ;; This function uses a non-reentrant model
 18598 ;;
 18599                           
 18600                           	psect	text61
 18601  004DCA                     __ptext61:
 18602                           	opt stack 0
 18603  004DCA                     ___lwdiv:
 18604                           	opt stack 19
 18605                           
 18606                           ; BSR set to: 0
 18607                           ;incstack = 0
 18608  004DCA  0E00               	movlw	0
 18609  004DCC  0100               	movlb	0	; () banked
 18610  004DCE  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 18611  004DD0  0E00               	movlw	0
 18612  004DD2  6F84               	movwf	___lwdiv@quotient& (0+255),b
 18613                           
 18614                           ; BSR set to: 0
 18615  004DD4  0100               	movlb	0	; () banked
 18616  004DD6  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18617  004DD8  0100               	movlb	0	; () banked
 18618  004DDA  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 18619  004DDC  B4D8               	btfsc	status,2,c
 18620  004DDE  D02C               	goto	l1972
 18621                           
 18622                           ; BSR set to: 0
 18623  004DE0  0E01               	movlw	1
 18624  004DE2  0100               	movlb	0	; () banked
 18625  004DE4  6F86               	movwf	___lwdiv@counter& (0+255),b
 18626  004DE6  D006               	goto	l6547
 18627  004DE8                     l6545:
 18628                           
 18629                           ; BSR set to: 0
 18630  004DE8  0100               	movlb	0	; () banked
 18631  004DEA  90D8               	bcf	status,0,c
 18632  004DEC  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 18633  004DEE  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 18634  004DF0  0100               	movlb	0	; () banked
 18635  004DF2  2B86               	incf	___lwdiv@counter& (0+255),f,b
 18636  004DF4                     l6547:
 18637                           
 18638                           ; BSR set to: 0
 18639  004DF4  0100               	movlb	0	; () banked
 18640  004DF6  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 18641  004DF8  D7F7               	goto	l6545
 18642  004DFA                     l6549:
 18643                           
 18644                           ; BSR set to: 0
 18645  004DFA  0100               	movlb	0	; () banked
 18646  004DFC  90D8               	bcf	status,0,c
 18647  004DFE  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 18648  004E00  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 18649                           
 18650                           ; BSR set to: 0
 18651  004E02  0100               	movlb	0	; () banked
 18652  004E04  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18653  004E06  0100               	movlb	0	; () banked
 18654  004E08  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 18655  004E0A  0100               	movlb	0	; () banked
 18656  004E0C  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18657  004E0E  0100               	movlb	0	; () banked
 18658  004E10  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 18659  004E12  A0D8               	btfss	status,0,c
 18660  004E14  D00A               	goto	l6557
 18661                           
 18662                           ; BSR set to: 0
 18663  004E16  0100               	movlb	0	; () banked
 18664  004E18  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18665  004E1A  0100               	movlb	0	; () banked
 18666  004E1C  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 18667  004E1E  0100               	movlb	0	; () banked
 18668  004E20  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18669  004E22  0100               	movlb	0	; () banked
 18670  004E24  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 18671                           
 18672                           ; BSR set to: 0
 18673  004E26  0100               	movlb	0	; () banked
 18674  004E28  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 18675  004E2A                     l6557:
 18676                           
 18677                           ; BSR set to: 0
 18678  004E2A  0100               	movlb	0	; () banked
 18679  004E2C  90D8               	bcf	status,0,c
 18680  004E2E  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 18681  004E30  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 18682                           
 18683                           ; BSR set to: 0
 18684  004E32  0100               	movlb	0	; () banked
 18685  004E34  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 18686  004E36  D7E1               	goto	l6549
 18687  004E38                     l1972:
 18688                           
 18689                           ; BSR set to: 0
 18690  004E38  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 18691  004E3C  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 18692                           
 18693                           ; BSR set to: 0
 18694  004E40  0012               	return		;funcret
 18695  004E42                     __end_of___lwdiv:
 18696                           	opt stack 0
 18697                           tblptru	equ	0xFF8
 18698                           tblptrh	equ	0xFF7
 18699                           tblptrl	equ	0xFF6
 18700                           tablat	equ	0xFF5
 18701                           prodh	equ	0xFF4
 18702                           prodl	equ	0xFF3
 18703                           intcon	equ	0xFF2
 18704                           intcon2	equ	0xFF1
 18705                           intcon3	equ	0xFF0
 18706                           indf0	equ	0xFEF
 18707                           postinc0	equ	0xFEE
 18708                           fsr0h	equ	0xFEA
 18709                           fsr0l	equ	0xFE9
 18710                           wreg	equ	0xFE8
 18711                           postdec1	equ	0xFE5
 18712                           fsr1l	equ	0xFE1
 18713                           indf2	equ	0xFDF
 18714                           postinc2	equ	0xFDE
 18715                           postdec2	equ	0xFDD
 18716                           fsr2h	equ	0xFDA
 18717                           fsr2l	equ	0xFD9
 18718                           status	equ	0xFD8
 18719                           
 18720 ;; *************** function _lcdInst *****************
 18721 ;; Defined at:
 18722 ;;		line 15 in file "lcd.c"
 18723 ;; Parameters:    Size  Location     Type
 18724 ;;  data            1    wreg     unsigned char 
 18725 ;; Auto vars:     Size  Location     Type
 18726 ;;  data            1    2[BANK0 ] unsigned char 
 18727 ;; Return value:  Size  Location     Type
 18728 ;;                  1    wreg      void 
 18729 ;; Registers used:
 18730 ;;		wreg, status,2, status,0, cstack
 18731 ;; Tracked objects:
 18732 ;;		On entry : 0/0
 18733 ;;		On exit  : 0/0
 18734 ;;		Unchanged: 0/0
 18735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18737 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18739 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18740 ;;Total ram usage:        1 bytes
 18741 ;; Hardware stack levels used:    1
 18742 ;; Hardware stack levels required when called:    8
 18743 ;; This function calls:
 18744 ;;		_lcdNibble
 18745 ;; This function is called by:
 18746 ;;		_UI
 18747 ;;		_change_state_to_menu_start
 18748 ;;		_change_state_to_menu_12
 18749 ;;		_change_state_to_menu_22
 18750 ;;		_initLCD
 18751 ;;		_printRTC
 18752 ;;		_Loading
 18753 ;;		_ID
 18754 ;;		_EEPROM_write
 18755 ;;		_Test
 18756 ;;		_algorithmTest
 18757 ;;		_sensorTest
 18758 ;;		_actuatorTest
 18759 ;;		_BothServos
 18760 ;;		_PortTestDC
 18761 ;;		_PlatformTest
 18762 ;;		_SpeedTest
 18763 ;;		_BlockerTest
 18764 ;;		_arm
 18765 ;;		_PortTestPusher
 18766 ;;		_ToggleTestA5
 18767 ;; This function uses a non-reentrant model
 18768 ;;
 18769                           
 18770                           	psect	text62
 18771  005A72                     __ptext62:
 18772                           	opt stack 0
 18773  005A72                     _lcdInst:
 18774                           	opt stack 20
 18775                           
 18776                           ; BSR set to: 0
 18777                           ;incstack = 0
 18778                           ;lcdInst@data stored from wreg
 18779  005A72  0100               	movlb	0	; () banked
 18780  005A74  6F82               	movwf	lcdInst@data& (0+255),b
 18781                           
 18782                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 18783  005A76  948C               	bcf	3980,2,c	;volatile
 18784                           
 18785                           ;lcd.c: 17: lcdNibble(data);
 18786  005A78  0100               	movlb	0	; () banked
 18787  005A7A  5182               	movf	lcdInst@data& (0+255),w,b
 18788  005A7C  EC93  F027         	call	_lcdNibble
 18789  005A80  0012               	return		;funcret
 18790  005A82                     __end_of_lcdInst:
 18791                           	opt stack 0
 18792                           tblptru	equ	0xFF8
 18793                           tblptrh	equ	0xFF7
 18794                           tblptrl	equ	0xFF6
 18795                           tablat	equ	0xFF5
 18796                           prodh	equ	0xFF4
 18797                           prodl	equ	0xFF3
 18798                           intcon	equ	0xFF2
 18799                           intcon2	equ	0xFF1
 18800                           intcon3	equ	0xFF0
 18801                           indf0	equ	0xFEF
 18802                           postinc0	equ	0xFEE
 18803                           fsr0h	equ	0xFEA
 18804                           fsr0l	equ	0xFE9
 18805                           wreg	equ	0xFE8
 18806                           postdec1	equ	0xFE5
 18807                           fsr1l	equ	0xFE1
 18808                           indf2	equ	0xFDF
 18809                           postinc2	equ	0xFDE
 18810                           postdec2	equ	0xFDD
 18811                           fsr2h	equ	0xFDA
 18812                           fsr2l	equ	0xFD9
 18813                           status	equ	0xFD8
 18814                           
 18815 ;; *************** function _lcdNibble *****************
 18816 ;; Defined at:
 18817 ;;		line 25 in file "lcd.c"
 18818 ;; Parameters:    Size  Location     Type
 18819 ;;  data            1    wreg     unsigned char 
 18820 ;; Auto vars:     Size  Location     Type
 18821 ;;  data            1    1[BANK0 ] unsigned char 
 18822 ;;  temp            1    0[BANK0 ] unsigned char 
 18823 ;; Return value:  Size  Location     Type
 18824 ;;                  1    wreg      void 
 18825 ;; Registers used:
 18826 ;;		wreg, status,2, status,0
 18827 ;; Tracked objects:
 18828 ;;		On entry : 0/0
 18829 ;;		On exit  : 0/0
 18830 ;;		Unchanged: 0/0
 18831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18833 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18835 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18836 ;;Total ram usage:        2 bytes
 18837 ;; Hardware stack levels used:    1
 18838 ;; Hardware stack levels required when called:    7
 18839 ;; This function calls:
 18840 ;;		Nothing
 18841 ;; This function is called by:
 18842 ;;		_lcdInst
 18843 ;;		_putch
 18844 ;; This function uses a non-reentrant model
 18845 ;;
 18846                           
 18847                           	psect	text63
 18848  004F26                     __ptext63:
 18849                           	opt stack 0
 18850  004F26                     _lcdNibble:
 18851                           	opt stack 20
 18852                           
 18853                           ;incstack = 0
 18854                           ;lcdNibble@data stored from wreg
 18855  004F26  0100               	movlb	0	; () banked
 18856  004F28  6F81               	movwf	lcdNibble@data& (0+255),b
 18857                           
 18858                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 18859  004F2A  9EF2               	bcf	intcon,7,c	;volatile
 18860                           
 18861                           ;lcd.c: 28: char temp = data & 0xF0;
 18862  004F2C  0100               	movlb	0	; () banked
 18863  004F2E  5181               	movf	lcdNibble@data& (0+255),w,b
 18864  004F30  0BF0               	andlw	240
 18865  004F32  0100               	movlb	0	; () banked
 18866  004F34  6F80               	movwf	lcdNibble@temp& (0+255),b
 18867                           
 18868                           ;lcd.c: 29: LATD = LATD & 0x0F;
 18869  004F36  508C               	movf	3980,w,c	;volatile
 18870  004F38  0B0F               	andlw	15
 18871  004F3A  6E8C               	movwf	3980,c	;volatile
 18872                           
 18873                           ;lcd.c: 30: LATD = temp | LATD;
 18874  004F3C  0100               	movlb	0	; () banked
 18875  004F3E  5180               	movf	lcdNibble@temp& (0+255),w,b
 18876  004F40  108C               	iorwf	3980,w,c	;volatile
 18877  004F42  6E8C               	movwf	3980,c	;volatile
 18878                           
 18879                           ; BSR set to: 0
 18880                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 18881  004F44  868C               	bsf	3980,3,c	;volatile
 18882                           
 18883                           ; BSR set to: 0
 18884                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18885  004F46  0E42               	movlw	66
 18886  004F48                     u11147:
 18887  004F48  2EE8               	decfsz	wreg,f,c
 18888  004F4A  D7FE               	bra	u11147
 18889  004F4C  D000               	nop2	
 18890                           
 18891                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 18892  004F4E  968C               	bcf	3980,3,c	;volatile
 18893                           
 18894                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18895  004F50  0E42               	movlw	66
 18896  004F52                     u11157:
 18897  004F52  2EE8               	decfsz	wreg,f,c
 18898  004F54  D7FE               	bra	u11157
 18899  004F56  D000               	nop2	
 18900                           
 18901                           ;lcd.c: 37: data = data << 4;
 18902  004F58  0100               	movlb	0	; () banked
 18903  004F5A  3981               	swapf	lcdNibble@data& (0+255),w,b
 18904  004F5C  0BF0               	andlw	240
 18905  004F5E  0100               	movlb	0	; () banked
 18906  004F60  6F81               	movwf	lcdNibble@data& (0+255),b
 18907                           
 18908                           ;lcd.c: 39: temp = data & 0xF0;
 18909  004F62  0100               	movlb	0	; () banked
 18910  004F64  5181               	movf	lcdNibble@data& (0+255),w,b
 18911  004F66  0BF0               	andlw	240
 18912  004F68  0100               	movlb	0	; () banked
 18913  004F6A  6F80               	movwf	lcdNibble@temp& (0+255),b
 18914                           
 18915                           ;lcd.c: 40: LATD = LATD & 0x0F;
 18916  004F6C  508C               	movf	3980,w,c	;volatile
 18917  004F6E  0B0F               	andlw	15
 18918  004F70  6E8C               	movwf	3980,c	;volatile
 18919                           
 18920                           ;lcd.c: 41: LATD = temp | LATD;
 18921  004F72  0100               	movlb	0	; () banked
 18922  004F74  5180               	movf	lcdNibble@temp& (0+255),w,b
 18923  004F76  108C               	iorwf	3980,w,c	;volatile
 18924  004F78  6E8C               	movwf	3980,c	;volatile
 18925                           
 18926                           ; BSR set to: 0
 18927                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 18928  004F7A  868C               	bsf	3980,3,c	;volatile
 18929                           
 18930                           ; BSR set to: 0
 18931                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18932  004F7C  0E42               	movlw	66
 18933  004F7E                     u11167:
 18934  004F7E  2EE8               	decfsz	wreg,f,c
 18935  004F80  D7FE               	bra	u11167
 18936  004F82  D000               	nop2	
 18937                           
 18938                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 18939  004F84  968C               	bcf	3980,3,c	;volatile
 18940                           
 18941                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18942  004F86  0E42               	movlw	66
 18943  004F88                     u11177:
 18944  004F88  2EE8               	decfsz	wreg,f,c
 18945  004F8A  D7FE               	bra	u11177
 18946  004F8C  D000               	nop2	
 18947                           
 18948                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 18949  004F8E  8EF2               	bsf	intcon,7,c	;volatile
 18950  004F90  0012               	return		;funcret
 18951  004F92                     __end_of_lcdNibble:
 18952                           	opt stack 0
 18953                           tblptru	equ	0xFF8
 18954                           tblptrh	equ	0xFF7
 18955                           tblptrl	equ	0xFF6
 18956                           tablat	equ	0xFF5
 18957                           prodh	equ	0xFF4
 18958                           prodl	equ	0xFF3
 18959                           intcon	equ	0xFF2
 18960                           intcon2	equ	0xFF1
 18961                           intcon3	equ	0xFF0
 18962                           indf0	equ	0xFEF
 18963                           postinc0	equ	0xFEE
 18964                           fsr0h	equ	0xFEA
 18965                           fsr0l	equ	0xFE9
 18966                           wreg	equ	0xFE8
 18967                           postdec1	equ	0xFE5
 18968                           fsr1l	equ	0xFE1
 18969                           indf2	equ	0xFDF
 18970                           postinc2	equ	0xFDE
 18971                           postdec2	equ	0xFDD
 18972                           fsr2h	equ	0xFDA
 18973                           fsr2l	equ	0xFD9
 18974                           status	equ	0xFD8
 18975                           
 18976 ;; *************** function _handler *****************
 18977 ;; Defined at:
 18978 ;;		line 16 in file "interruptHandler.c"
 18979 ;; Parameters:    Size  Location     Type
 18980 ;;		None
 18981 ;; Auto vars:     Size  Location     Type
 18982 ;;		None
 18983 ;; Return value:  Size  Location     Type
 18984 ;;                  1    wreg      void 
 18985 ;; Registers used:
 18986 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18987 ;; Tracked objects:
 18988 ;;		On entry : 0/0
 18989 ;;		On exit  : 0/0
 18990 ;;		Unchanged: 0/0
 18991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18994 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18995 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18996 ;;Total ram usage:       16 bytes
 18997 ;; Hardware stack levels used:    1
 18998 ;; Hardware stack levels required when called:    6
 18999 ;; This function calls:
 19000 ;;		_printSortTimer
 19001 ;;		_updateArmState
 19002 ;;		_updateMenu
 19003 ;;		_updateServoStates
 19004 ;;		i2_change_state_to_menu_start
 19005 ;; This function is called by:
 19006 ;;		Interrupt level 2
 19007 ;; This function uses a non-reentrant model
 19008 ;;
 19009                           
 19010                           	psect	intcode
 19011  000008                     __pintcode:
 19012                           	opt stack 0
 19013  000008                     _handler:
 19014                           	opt stack 18
 19015                           
 19016                           ;incstack = 0
 19017  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19018  00000A  ED47  F01C         	call	int_func,f	;refresh shadow registers
 19019                           tblptru	equ	0xFF8
 19020                           tblptrh	equ	0xFF7
 19021                           tblptrl	equ	0xFF6
 19022                           tablat	equ	0xFF5
 19023                           prodh	equ	0xFF4
 19024                           prodl	equ	0xFF3
 19025                           intcon	equ	0xFF2
 19026                           intcon2	equ	0xFF1
 19027                           intcon3	equ	0xFF0
 19028                           indf0	equ	0xFEF
 19029                           postinc0	equ	0xFEE
 19030                           fsr0h	equ	0xFEA
 19031                           fsr0l	equ	0xFE9
 19032                           wreg	equ	0xFE8
 19033                           postdec1	equ	0xFE5
 19034                           fsr1l	equ	0xFE1
 19035                           indf2	equ	0xFDF
 19036                           postinc2	equ	0xFDE
 19037                           postdec2	equ	0xFDD
 19038                           fsr2h	equ	0xFDA
 19039                           fsr2l	equ	0xFD9
 19040                           status	equ	0xFD8
 19041                           
 19042                           	psect	intcode_body
 19043  00388E                     __pintcode_body:
 19044                           	opt stack 18
 19045  00388E                     int_func:
 19046                           	opt stack 18
 19047  00388E  0006               	pop		; remove dummy address from shadow register refresh
 19048  003890  CFFA F04B          	movff	pclath,??_handler+2
 19049  003894  CFFB F04C          	movff	pclatu,??_handler+3
 19050  003898  CFE9 F04D          	movff	fsr0l,??_handler+4
 19051  00389C  CFEA F04E          	movff	fsr0h,??_handler+5
 19052  0038A0  CFE1 F04F          	movff	fsr1l,??_handler+6
 19053  0038A4  CFE2 F050          	movff	fsr1h,??_handler+7
 19054  0038A8  CFD9 F051          	movff	fsr2l,??_handler+8
 19055  0038AC  CFDA F052          	movff	fsr2h,??_handler+9
 19056  0038B0  CFF3 F053          	movff	prodl,??_handler+10
 19057  0038B4  CFF4 F054          	movff	prodh,??_handler+11
 19058  0038B8  CFF6 F055          	movff	tblptrl,??_handler+12
 19059  0038BC  CFF7 F056          	movff	tblptrh,??_handler+13
 19060  0038C0  CFF8 F057          	movff	tblptru,??_handler+14
 19061  0038C4  CFF5 F058          	movff	tablat,??_handler+15
 19062                           
 19063                           ;interruptHandler.c: 18: if(INT1IF){
 19064  0038C8  A0F0               	btfss	intcon3,0,c	;volatile
 19065  0038CA  D034               	goto	i2l10127
 19066                           
 19067                           ;interruptHandler.c: 19: INT1IF = 0;
 19068  0038CC  90F0               	bcf	intcon3,0,c	;volatile
 19069                           
 19070                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 19071  0038CE  3881               	swapf	3969,w,c	;volatile
 19072  0038D0  0B0F               	andlw	15
 19073  0038D2  0B0F               	andlw	15
 19074  0038D4  6E49               	movwf	??_handler& (0+255),c
 19075  0038D6  6A4A               	clrf	(??_handler+1)& (0+255),c
 19076  0038D8  0E8B               	movlw	low _keys
 19077  0038DA  2449               	addwf	??_handler,w,c
 19078  0038DC  6EF6               	movwf	tblptrl,c
 19079  0038DE  0EFA               	movlw	high _keys
 19080  0038E0  204A               	addwfc	??_handler+1,w,c
 19081  0038E2  6EF7               	movwf	tblptrh,c
 19082  0038E4                     	if	1	;There are 3 active tblptr bytes
 19083  0038E4  6AF8               	clrf	tblptru,c
 19084  0038E6  0E00               	movlw	low (__mediumconst shr (0+16))
 19085  0038E8  22F8               	addwfc	tblptru,f,c
 19086  0038EA                     	endif
 19087  0038EA  0008               	tblrd		*
 19088  0038EC  CFF5 F07D          	movff	tablat,_input	;volatile
 19089                           
 19090                           ;interruptHandler.c: 21: if(input == '*'){
 19091  0038F0  0E2A               	movlw	42
 19092  0038F2  187D               	xorwf	_input,w,c	;volatile
 19093  0038F4  B4D8               	btfsc	status,2,c
 19094  0038F6  D00D               	goto	i2l10121
 19095  0038F8  D018               	goto	i2l10123
 19096  0038FA                     i2l10111:
 19097                           
 19098                           ;interruptHandler.c: 24: machine_state = Testing_state;
 19099  0038FA  0E03               	movlw	3
 19100  0038FC  D007               	goto	L14
 19101  0038FE                     i2l10113:
 19102                           
 19103                           ; BSR set to: 0
 19104                           ;interruptHandler.c: 27: machine_state = UI_state;
 19105  0038FE  0E00               	movlw	0
 19106  003900  0100               	movlb	0	; () banked
 19107  003902  6FFC               	movwf	_machine_state& (0+255),b
 19108                           
 19109                           ; BSR set to: 0
 19110                           ;interruptHandler.c: 28: change_state_to_menu_start();
 19111  003904  EC71  F02C         	call	i2_change_state_to_menu_start	;wreg free
 19112                           
 19113                           ;interruptHandler.c: 29: break;
 19114  003908  D015               	goto	i2l10127
 19115  00390A                     i2l10117:
 19116                           
 19117                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 19118  00390A  0E02               	movlw	2
 19119  00390C                     L14:
 19120  00390C  0100               	movlb	0	; () banked
 19121  00390E  6FFC               	movwf	_machine_state& (0+255),b
 19122                           
 19123                           ; BSR set to: 0
 19124                           ;interruptHandler.c: 33: }
 19125                           
 19126                           ;interruptHandler.c: 32: break;
 19127  003910  D011               	goto	i2l10127
 19128  003912                     i2l10121:
 19129  003912  0100               	movlb	0	; () banked
 19130  003914  51FC               	movf	_machine_state& (0+255),w,b
 19131                           
 19132                           ; Switch size 1, requested type "space"
 19133                           ; Number of cases is 3, Range of values is 0 to 3
 19134                           ; switch strategies available:
 19135                           ; Name         Instructions Cycles
 19136                           ; simple_byte           10     6 (average)
 19137                           ;	Chosen strategy is simple_byte
 19138  003916  0A00               	xorlw	0	; case 0
 19139  003918  B4D8               	btfsc	status,2,c
 19140  00391A  D7EF               	goto	i2l10111
 19141  00391C  0A01               	xorlw	1	; case 1
 19142  00391E  B4D8               	btfsc	status,2,c
 19143  003920  D7F4               	goto	i2l10117
 19144  003922  0A02               	xorlw	2	; case 3
 19145  003924  B4D8               	btfsc	status,2,c
 19146  003926  D7EB               	goto	i2l10113
 19147                           
 19148                           ; BSR set to: 0
 19149                           ;interruptHandler.c: 34: }
 19150  003928  D005               	goto	i2l10127
 19151  00392A                     i2l10123:
 19152                           
 19153                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 19154  00392A  0100               	movlb	0	; () banked
 19155  00392C  51FC               	movf	_machine_state& (0+255),w,b
 19156  00392E  B4D8               	btfsc	status,2,c
 19157                           
 19158                           ; BSR set to: 0
 19159                           ;interruptHandler.c: 36: updateMenu();
 19160  003930  ECC8  F017         	call	_updateMenu	;wreg free
 19161  003934                     i2l10127:
 19162                           
 19163                           ;interruptHandler.c: 37: }
 19164                           ;interruptHandler.c: 38: }
 19165                           ;interruptHandler.c: 41: if(TMR0IF){
 19166  003934  A4F2               	btfss	intcon,2,c	;volatile
 19167  003936  D00C               	goto	i2l10141
 19168                           
 19169                           ;interruptHandler.c: 42: TMR0IF = 0;
 19170  003938  94F2               	bcf	intcon,2,c	;volatile
 19171                           
 19172                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 19173  00393A  0100               	movlb	0	; () banked
 19174  00393C  05FC               	decf	_machine_state& (0+255),w,b
 19175  00393E  A4D8               	btfss	status,2,c
 19176  003940  D007               	goto	i2l10141
 19177                           
 19178                           ; BSR set to: 0
 19179                           ;interruptHandler.c: 44: printSortTimer();
 19180  003942  EC43  F01A         	call	_printSortTimer	;wreg free
 19181                           
 19182                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 19183  003946  0E85               	movlw	133
 19184  003948  6ED7               	movwf	4055,c	;volatile
 19185                           
 19186                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 19187  00394A  0EEE               	movlw	238
 19188  00394C  6ED6               	movwf	4054,c	;volatile
 19189                           
 19190                           ;interruptHandler.c: 48: TMR0ON = 1;
 19191  00394E  8ED5               	bsf	4053,7,c	;volatile
 19192  003950                     i2l10141:
 19193                           
 19194                           ;interruptHandler.c: 49: }
 19195                           ;interruptHandler.c: 50: }
 19196                           ;interruptHandler.c: 53: if(TMR1IF){
 19197  003950  A09E               	btfss	3998,0,c	;volatile
 19198  003952  D028               	goto	i2l10169
 19199                           
 19200                           ;interruptHandler.c: 54: TMR1IF = 0;
 19201  003954  909E               	bcf	3998,0,c	;volatile
 19202                           
 19203                           ;interruptHandler.c: 55: TMR1ON = 0;
 19204  003956  90CD               	bcf	4045,0,c	;volatile
 19205                           
 19206                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 19207  003958  0100               	movlb	0	; () banked
 19208  00395A  05FC               	decf	_machine_state& (0+255),w,b
 19209  00395C  A4D8               	btfss	status,2,c
 19210  00395E  D022               	goto	i2l10169
 19211                           
 19212                           ; BSR set to: 0
 19213                           ;interruptHandler.c: 57: if(was_low_1){
 19214  003960  5077               	movf	_was_low_1,w,c	;volatile
 19215  003962  1078               	iorwf	_was_low_1+1,w,c	;volatile
 19216  003964  B4D8               	btfsc	status,2,c
 19217  003966  D00A               	goto	i2l1047
 19218                           
 19219                           ; BSR set to: 0
 19220                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 19221  003968  828B               	bsf	3979,1,c	;volatile
 19222                           
 19223                           ; BSR set to: 0
 19224                           ;interruptHandler.c: 59: was_low_1 = 0;
 19225  00396A  0E00               	movlw	0
 19226  00396C  6E78               	movwf	_was_low_1+1,c	;volatile
 19227  00396E  0E00               	movlw	0
 19228  003970  6E77               	movwf	_was_low_1,c	;volatile
 19229                           
 19230                           ; BSR set to: 0
 19231                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 19232  003972  C059  FFCF         	movff	_servoTimes,4047	;volatile
 19233                           
 19234                           ; BSR set to: 0
 19235                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 19236  003976  C05B  FFCE         	movff	_servoTimes+2,4046	;volatile
 19237                           
 19238                           ;interruptHandler.c: 62: }
 19239  00397A  D00D               	goto	i2l10163
 19240  00397C                     i2l1047:
 19241                           
 19242                           ; BSR set to: 0
 19243                           ;interruptHandler.c: 63: else{
 19244                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 19245  00397C  928B               	bcf	3979,1,c	;volatile
 19246                           
 19247                           ; BSR set to: 0
 19248                           ;interruptHandler.c: 65: was_low_1 = 1;
 19249  00397E  0E00               	movlw	0
 19250  003980  6E78               	movwf	_was_low_1+1,c	;volatile
 19251  003982  0E01               	movlw	1
 19252  003984  6E77               	movwf	_was_low_1,c	;volatile
 19253                           
 19254                           ; BSR set to: 0
 19255                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 19256  003986  5059               	movf	_servoTimes,w,c
 19257  003988  0800               	sublw	0
 19258  00398A  0F20               	addlw	32
 19259  00398C  6ECF               	movwf	4047,c	;volatile
 19260                           
 19261                           ; BSR set to: 0
 19262                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 19263  00398E  505B               	movf	_servoTimes+2,w,c
 19264  003990  0800               	sublw	0
 19265  003992  0F20               	addlw	32
 19266  003994  6ECE               	movwf	4046,c	;volatile
 19267  003996                     i2l10163:
 19268                           
 19269                           ; BSR set to: 0
 19270                           ;interruptHandler.c: 68: }
 19271                           ;interruptHandler.c: 69: TMR1ON = 1;
 19272  003996  80CD               	bsf	4045,0,c	;volatile
 19273                           
 19274                           ; BSR set to: 0
 19275                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 19276  003998  0E0A               	movlw	10
 19277  00399A  266D               	addwf	_servo_timer_counter,f,c	;volatile
 19278  00399C  0E00               	movlw	0
 19279  00399E  226E               	addwfc	_servo_timer_counter+1,f,c	;volatile
 19280                           
 19281                           ; BSR set to: 0
 19282                           ;interruptHandler.c: 72: updateServoStates();
 19283  0039A0  EC3C  F01D         	call	_updateServoStates	;wreg free
 19284  0039A4                     i2l10169:
 19285                           
 19286                           ;interruptHandler.c: 73: }
 19287                           ;interruptHandler.c: 74: }
 19288                           ;interruptHandler.c: 77: if(TMR2IF){
 19289  0039A4  A29E               	btfss	3998,1,c	;volatile
 19290  0039A6  D026               	goto	i2l10195
 19291                           
 19292                           ;interruptHandler.c: 80: TMR2IF = 0;
 19293  0039A8  929E               	bcf	3998,1,c	;volatile
 19294                           
 19295                           ;interruptHandler.c: 81: TMR2ON = 0;
 19296  0039AA  94CA               	bcf	4042,2,c	;volatile
 19297                           
 19298                           ;interruptHandler.c: 82: timer2_counter++;
 19299  0039AC  4A73               	infsnz	_timer2_counter,f,c	;volatile
 19300  0039AE  2A74               	incf	_timer2_counter+1,f,c	;volatile
 19301                           
 19302                           ;interruptHandler.c: 83: if(machine_state == Sorting_state){
 19303  0039B0  0100               	movlb	0	; () banked
 19304  0039B2  05FC               	decf	_machine_state& (0+255),w,b
 19305  0039B4  A4D8               	btfss	status,2,c
 19306  0039B6  D01E               	goto	i2l10195
 19307                           
 19308                           ; BSR set to: 0
 19309                           ;interruptHandler.c: 84: if(was_low_2 && (timer2_counter == 2)){
 19310  0039B8  5079               	movf	_was_low_2,w,c	;volatile
 19311  0039BA  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19312  0039BC  B4D8               	btfsc	status,2,c
 19313  0039BE  D00A               	goto	i2l10185
 19314                           
 19315                           ; BSR set to: 0
 19316  0039C0  0E02               	movlw	2
 19317  0039C2  1873               	xorwf	_timer2_counter,w,c	;volatile
 19318  0039C4  1074               	iorwf	_timer2_counter+1,w,c	;volatile
 19319  0039C6  A4D8               	btfss	status,2,c
 19320  0039C8  D005               	goto	i2l10185
 19321                           
 19322                           ; BSR set to: 0
 19323                           ;interruptHandler.c: 86: LATBbits.LATB3 = 1;
 19324  0039CA  868A               	bsf	3978,3,c	;volatile
 19325                           
 19326                           ; BSR set to: 0
 19327                           ;interruptHandler.c: 87: was_low_2 = 0;
 19328  0039CC  0E00               	movlw	0
 19329  0039CE  6E7A               	movwf	_was_low_2+1,c	;volatile
 19330  0039D0  0E00               	movlw	0
 19331  0039D2  D008               	goto	L15
 19332  0039D4                     i2l10185:
 19333                           
 19334                           ; BSR set to: 0
 19335                           ;interruptHandler.c: 90: else if(!was_low_2){
 19336  0039D4  5079               	movf	_was_low_2,w,c	;volatile
 19337  0039D6  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19338  0039D8  A4D8               	btfss	status,2,c
 19339  0039DA  D009               	goto	i2l10191
 19340                           
 19341                           ; BSR set to: 0
 19342                           ;interruptHandler.c: 91: LATBbits.LATB3 = 0;
 19343  0039DC  968A               	bcf	3978,3,c	;volatile
 19344                           
 19345                           ; BSR set to: 0
 19346                           ;interruptHandler.c: 92: was_low_2 = 1;
 19347  0039DE  0E00               	movlw	0
 19348  0039E0  6E7A               	movwf	_was_low_2+1,c	;volatile
 19349  0039E2  0E01               	movlw	1
 19350  0039E4                     L15:
 19351  0039E4  6E79               	movwf	_was_low_2,c	;volatile
 19352                           
 19353                           ;interruptHandler.c: 93: timer2_counter = 0;
 19354  0039E6  0E00               	movlw	0
 19355  0039E8  6E74               	movwf	_timer2_counter+1,c	;volatile
 19356  0039EA  0E00               	movlw	0
 19357  0039EC  6E73               	movwf	_timer2_counter,c	;volatile
 19358  0039EE                     i2l10191:
 19359                           
 19360                           ; BSR set to: 0
 19361                           ;interruptHandler.c: 94: }
 19362                           ;interruptHandler.c: 95: updateArmState();
 19363  0039EE  EC41  F02A         	call	_updateArmState	;wreg free
 19364                           
 19365                           ;interruptHandler.c: 96: TMR2ON = 1;
 19366  0039F2  84CA               	bsf	4042,2,c	;volatile
 19367  0039F4                     i2l10195:
 19368                           
 19369                           ;interruptHandler.c: 97: }
 19370                           ;interruptHandler.c: 98: }
 19371                           ;interruptHandler.c: 101: if(TMR3IF){
 19372  0039F4  A2A1               	btfss	4001,1,c	;volatile
 19373  0039F6  D022               	goto	i2l1058
 19374                           
 19375                           ;interruptHandler.c: 102: TMR3IF = 0;
 19376  0039F8  92A1               	bcf	4001,1,c	;volatile
 19377                           
 19378                           ;interruptHandler.c: 103: TMR3ON = 0;
 19379  0039FA  90B1               	bcf	4017,0,c	;volatile
 19380                           
 19381                           ;interruptHandler.c: 104: if(machine_state == Sorting_state){
 19382  0039FC  0100               	movlb	0	; () banked
 19383  0039FE  05FC               	decf	_machine_state& (0+255),w,b
 19384  003A00  A4D8               	btfss	status,2,c
 19385  003A02  D01C               	goto	i2l1058
 19386                           
 19387                           ; BSR set to: 0
 19388                           ;interruptHandler.c: 105: if(was_low_3){
 19389  003A04  507B               	movf	_was_low_3,w,c	;volatile
 19390  003A06  107C               	iorwf	_was_low_3+1,w,c	;volatile
 19391  003A08  B4D8               	btfsc	status,2,c
 19392  003A0A  D00A               	goto	i2l1056
 19393                           
 19394                           ; BSR set to: 0
 19395                           ;interruptHandler.c: 106: LATCbits.LATC2 = 1;
 19396  003A0C  848B               	bsf	3979,2,c	;volatile
 19397                           
 19398                           ; BSR set to: 0
 19399                           ;interruptHandler.c: 107: was_low_3 = 0;
 19400  003A0E  0E00               	movlw	0
 19401  003A10  6E7C               	movwf	_was_low_3+1,c	;volatile
 19402  003A12  0E00               	movlw	0
 19403  003A14  6E7B               	movwf	_was_low_3,c	;volatile
 19404                           
 19405                           ; BSR set to: 0
 19406                           ;interruptHandler.c: 108: TMR3H = servoTimes[2];
 19407  003A16  C05D  FFB3         	movff	_servoTimes+4,4019	;volatile
 19408                           
 19409                           ; BSR set to: 0
 19410                           ;interruptHandler.c: 109: TMR3L = servoTimes[3];
 19411  003A1A  C05F  FFB2         	movff	_servoTimes+6,4018	;volatile
 19412                           
 19413                           ;interruptHandler.c: 110: }
 19414  003A1E  D00D               	goto	i2l10217
 19415  003A20                     i2l1056:
 19416                           
 19417                           ; BSR set to: 0
 19418                           ;interruptHandler.c: 111: else{
 19419                           ;interruptHandler.c: 112: LATCbits.LATC2 = 0;
 19420  003A20  948B               	bcf	3979,2,c	;volatile
 19421                           
 19422                           ; BSR set to: 0
 19423                           ;interruptHandler.c: 113: was_low_3 = 1;
 19424  003A22  0E00               	movlw	0
 19425  003A24  6E7C               	movwf	_was_low_3+1,c	;volatile
 19426  003A26  0E01               	movlw	1
 19427  003A28  6E7B               	movwf	_was_low_3,c	;volatile
 19428                           
 19429                           ; BSR set to: 0
 19430                           ;interruptHandler.c: 114: TMR3H = 20000 - servoTimes[2];
 19431  003A2A  505D               	movf	_servoTimes+4,w,c
 19432  003A2C  0800               	sublw	0
 19433  003A2E  0F20               	addlw	32
 19434  003A30  6EB3               	movwf	4019,c	;volatile
 19435                           
 19436                           ; BSR set to: 0
 19437                           ;interruptHandler.c: 115: TMR3L = 20000 - servoTimes[3];
 19438  003A32  505F               	movf	_servoTimes+6,w,c
 19439  003A34  0800               	sublw	0
 19440  003A36  0F20               	addlw	32
 19441  003A38  6EB2               	movwf	4018,c	;volatile
 19442  003A3A                     i2l10217:
 19443                           
 19444                           ; BSR set to: 0
 19445                           ;interruptHandler.c: 116: }
 19446                           ;interruptHandler.c: 117: TMR3ON = 1;
 19447  003A3A  80B1               	bsf	4017,0,c	;volatile
 19448  003A3C                     i2l1058:
 19449  003A3C  C058  FFF5         	movff	??_handler+15,tablat
 19450  003A40  C057  FFF8         	movff	??_handler+14,tblptru
 19451  003A44  C056  FFF7         	movff	??_handler+13,tblptrh
 19452  003A48  C055  FFF6         	movff	??_handler+12,tblptrl
 19453  003A4C  C054  FFF4         	movff	??_handler+11,prodh
 19454  003A50  C053  FFF3         	movff	??_handler+10,prodl
 19455  003A54  C052  FFDA         	movff	??_handler+9,fsr2h
 19456  003A58  C051  FFD9         	movff	??_handler+8,fsr2l
 19457  003A5C  C050  FFE2         	movff	??_handler+7,fsr1h
 19458  003A60  C04F  FFE1         	movff	??_handler+6,fsr1l
 19459  003A64  C04E  FFEA         	movff	??_handler+5,fsr0h
 19460  003A68  C04D  FFE9         	movff	??_handler+4,fsr0l
 19461  003A6C  C04C  FFFB         	movff	??_handler+3,pclatu
 19462  003A70  C04B  FFFA         	movff	??_handler+2,pclath
 19463  003A74  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19464  003A76  0011               	retfie		f
 19465  003A78                     __end_of_handler:
 19466                           	opt stack 0
 19467                           pclatu	equ	0xFFB
 19468                           pclath	equ	0xFFA
 19469                           tblptru	equ	0xFF8
 19470                           tblptrh	equ	0xFF7
 19471                           tblptrl	equ	0xFF6
 19472                           tablat	equ	0xFF5
 19473                           prodh	equ	0xFF4
 19474                           prodl	equ	0xFF3
 19475                           intcon	equ	0xFF2
 19476                           intcon2	equ	0xFF1
 19477                           intcon3	equ	0xFF0
 19478                           indf0	equ	0xFEF
 19479                           postinc0	equ	0xFEE
 19480                           fsr0h	equ	0xFEA
 19481                           fsr0l	equ	0xFE9
 19482                           wreg	equ	0xFE8
 19483                           postdec1	equ	0xFE5
 19484                           fsr1h	equ	0xFE2
 19485                           fsr1l	equ	0xFE1
 19486                           indf2	equ	0xFDF
 19487                           postinc2	equ	0xFDE
 19488                           postdec2	equ	0xFDD
 19489                           fsr2h	equ	0xFDA
 19490                           fsr2l	equ	0xFD9
 19491                           status	equ	0xFD8
 19492                           
 19493 ;; *************** function _updateServoStates *****************
 19494 ;; Defined at:
 19495 ;;		line 585 in file "sort.c"
 19496 ;; Parameters:    Size  Location     Type
 19497 ;;		None
 19498 ;; Auto vars:     Size  Location     Type
 19499 ;;		None
 19500 ;; Return value:  Size  Location     Type
 19501 ;;                  1    wreg      void 
 19502 ;; Registers used:
 19503 ;;		wreg, status,2, status,0, cstack
 19504 ;; Tracked objects:
 19505 ;;		On entry : 0/0
 19506 ;;		On exit  : 0/0
 19507 ;;		Unchanged: 0/0
 19508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19511 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19512 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19513 ;;Total ram usage:        2 bytes
 19514 ;; Hardware stack levels used:    1
 19515 ;; Hardware stack levels required when called:    1
 19516 ;; This function calls:
 19517 ;;		i2_updateServoPosition
 19518 ;; This function is called by:
 19519 ;;		_handler
 19520 ;; This function uses a non-reentrant model
 19521 ;;
 19522                           
 19523                           	psect	text65
 19524  003A78                     __ptext65:
 19525                           	opt stack 0
 19526  003A78                     _updateServoStates:
 19527                           	opt stack 22
 19528                           
 19529                           ;sort.c: 587: if(servo_timer_counter >= servo_timer_target){
 19530                           
 19531                           ;incstack = 0
 19532  003A78  506F               	movf	_servo_timer_target,w,c	;volatile
 19533  003A7A  5C6D               	subwf	_servo_timer_counter,w,c	;volatile
 19534  003A7C  506E               	movf	_servo_timer_counter+1,w,c	;volatile
 19535  003A7E  0A80               	xorlw	128
 19536  003A80  6E09               	movwf	??_updateServoStates& (0+255),c
 19537  003A82  5070               	movf	_servo_timer_target+1,w,c	;volatile
 19538  003A84  0A80               	xorlw	128
 19539  003A86  5809               	subwfb	??_updateServoStates& (0+255),w,c
 19540  003A88  A0D8               	btfss	status,0,c
 19541  003A8A  0012               	return	
 19542                           
 19543                           ;sort.c: 589: if(f_panning_to_bin){
 19544  003A8C  5067               	movf	_f_panning_to_bin,w,c	;volatile
 19545  003A8E  1068               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 19546  003A90  A4D8               	btfss	status,2,c
 19547  003A92  D036               	goto	i2l9985
 19548  003A94  D05F               	goto	i2l9989
 19549  003A96                     i2l9959:
 19550                           
 19551                           ;sort.c: 593: updateServoPosition(1260, 3);
 19552  003A96  0E04               	movlw	4
 19553  003A98  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19554  003A9A  0EEC               	movlw	236
 19555  003A9C  6E01               	movwf	i2updateServoPosition@time_us,c
 19556  003A9E  0E00               	movlw	0
 19557  003AA0  6E04               	movwf	i2updateServoPosition@timer+1,c
 19558  003AA2  0E03               	movlw	3
 19559  003AA4  6E03               	movwf	i2updateServoPosition@timer,c
 19560  003AA6  ECC9  F027         	call	i2_updateServoPosition	;wreg free
 19561  003AAA  D025               	goto	i2l9979
 19562  003AAC                     i2l9963:
 19563                           
 19564                           ;sort.c: 595: servo_timer_target = 700;
 19565  003AAC  0E02               	movlw	2
 19566  003AAE  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19567  003AB0  0EBC               	movlw	188
 19568  003AB2  6E6F               	movwf	_servo_timer_target,c	;volatile
 19569                           
 19570                           ;sort.c: 596: break;
 19571  003AB4  D04A               	goto	i2l9987
 19572  003AB6                     i2l9965:
 19573                           
 19574                           ;sort.c: 598: updateServoPosition(1260, 3);
 19575  003AB6  0E04               	movlw	4
 19576  003AB8  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19577  003ABA  0EEC               	movlw	236
 19578  003ABC  6E01               	movwf	i2updateServoPosition@time_us,c
 19579  003ABE  0E00               	movlw	0
 19580  003AC0  6E04               	movwf	i2updateServoPosition@timer+1,c
 19581  003AC2  0E03               	movlw	3
 19582  003AC4  6E03               	movwf	i2updateServoPosition@timer,c
 19583  003AC6  ECC9  F027         	call	i2_updateServoPosition	;wreg free
 19584  003ACA  D015               	goto	i2l9979
 19585  003ACC                     i2l9971:
 19586                           
 19587                           ;sort.c: 604: updateServoPosition(1390, 3);
 19588  003ACC  0E05               	movlw	5
 19589  003ACE  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19590  003AD0  0E6E               	movlw	110
 19591  003AD2  6E01               	movwf	i2updateServoPosition@time_us,c
 19592  003AD4  0E00               	movlw	0
 19593  003AD6  6E04               	movwf	i2updateServoPosition@timer+1,c
 19594  003AD8  0E03               	movlw	3
 19595  003ADA  6E03               	movwf	i2updateServoPosition@timer,c
 19596  003ADC  ECC9  F027         	call	i2_updateServoPosition	;wreg free
 19597  003AE0  D00A               	goto	i2l9979
 19598  003AE2                     i2l9977:
 19599                           
 19600                           ;sort.c: 609: updateServoPosition(1390, 3);
 19601  003AE2  0E05               	movlw	5
 19602  003AE4  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19603  003AE6  0E6E               	movlw	110
 19604  003AE8  6E01               	movwf	i2updateServoPosition@time_us,c
 19605  003AEA  0E00               	movlw	0
 19606  003AEC  6E04               	movwf	i2updateServoPosition@timer+1,c
 19607  003AEE  0E03               	movlw	3
 19608  003AF0  6E03               	movwf	i2updateServoPosition@timer,c
 19609  003AF2  ECC9  F027         	call	i2_updateServoPosition	;wreg free
 19610  003AF6                     i2l9979:
 19611                           
 19612                           ;sort.c: 610: servo_timer_counter = 0;
 19613  003AF6  0E00               	movlw	0
 19614  003AF8  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19615  003AFA  0E00               	movlw	0
 19616  003AFC  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19617  003AFE  D7D6               	goto	i2l9963
 19618  003B00                     i2l9985:
 19619  003B00  C06B  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 19620  003B04  C06C  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 19621                           
 19622                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 19623                           ; Switch size 1, requested type "space"
 19624                           ; Number of cases is 4, Range of values is 1 to 9
 19625                           ; switch strategies available:
 19626                           ; Name         Instructions Cycles
 19627                           ; simple_byte           13     7 (average)
 19628                           ;	Chosen strategy is simple_byte
 19629  003B08  500A               	movf	??_updateServoStates+1,w,c
 19630  003B0A  0A01               	xorlw	1	; case 1
 19631  003B0C  B4D8               	btfsc	status,2,c
 19632  003B0E  D00A               	goto	i2l10665
 19633  003B10  0A02               	xorlw	2	; case 3
 19634  003B12  B4D8               	btfsc	status,2,c
 19635  003B14  D00C               	goto	i2l10667
 19636  003B16  0A05               	xorlw	5	; case 6
 19637  003B18  B4D8               	btfsc	status,2,c
 19638  003B1A  D00E               	goto	i2l10669
 19639  003B1C  0A0F               	xorlw	15	; case 9
 19640  003B1E  B4D8               	btfsc	status,2,c
 19641  003B20  D010               	goto	i2l10671
 19642  003B22  D013               	goto	i2l9987
 19643  003B24                     i2l10665:
 19644                           
 19645                           ; Switch size 1, requested type "space"
 19646                           ; Number of cases is 1, Range of values is 244 to 244
 19647                           ; switch strategies available:
 19648                           ; Name         Instructions Cycles
 19649                           ; simple_byte            4     3 (average)
 19650                           ;	Chosen strategy is simple_byte
 19651  003B24  5009               	movf	??_updateServoStates,w,c
 19652  003B26  0AF4               	xorlw	244	; case 244
 19653  003B28  B4D8               	btfsc	status,2,c
 19654  003B2A  D7B5               	goto	i2l9959
 19655  003B2C  D00E               	goto	i2l9987
 19656  003B2E                     i2l10667:
 19657                           
 19658                           ; Switch size 1, requested type "space"
 19659                           ; Number of cases is 1, Range of values is 82 to 82
 19660                           ; switch strategies available:
 19661                           ; Name         Instructions Cycles
 19662                           ; simple_byte            4     3 (average)
 19663                           ;	Chosen strategy is simple_byte
 19664  003B2E  5009               	movf	??_updateServoStates,w,c
 19665  003B30  0A52               	xorlw	82	; case 82
 19666  003B32  B4D8               	btfsc	status,2,c
 19667  003B34  D7C0               	goto	i2l9965
 19668  003B36  D009               	goto	i2l9987
 19669  003B38                     i2l10669:
 19670                           
 19671                           ; Switch size 1, requested type "space"
 19672                           ; Number of cases is 1, Range of values is 134 to 134
 19673                           ; switch strategies available:
 19674                           ; Name         Instructions Cycles
 19675                           ; simple_byte            4     3 (average)
 19676                           ;	Chosen strategy is simple_byte
 19677  003B38  5009               	movf	??_updateServoStates,w,c
 19678  003B3A  0A86               	xorlw	134	; case 134
 19679  003B3C  B4D8               	btfsc	status,2,c
 19680  003B3E  D7C6               	goto	i2l9971
 19681  003B40  D004               	goto	i2l9987
 19682  003B42                     i2l10671:
 19683                           
 19684                           ; Switch size 1, requested type "space"
 19685                           ; Number of cases is 1, Range of values is 96 to 96
 19686                           ; switch strategies available:
 19687                           ; Name         Instructions Cycles
 19688                           ; simple_byte            4     3 (average)
 19689                           ;	Chosen strategy is simple_byte
 19690  003B42  5009               	movf	??_updateServoStates,w,c
 19691  003B44  0A60               	xorlw	96	; case 96
 19692  003B46  B4D8               	btfsc	status,2,c
 19693  003B48  D7CC               	goto	i2l9977
 19694  003B4A                     i2l9987:
 19695                           
 19696                           ;sort.c: 616: f_panning_to_bin = 0;
 19697  003B4A  0E00               	movlw	0
 19698  003B4C  6E68               	movwf	_f_panning_to_bin+1,c	;volatile
 19699  003B4E  0E00               	movlw	0
 19700  003B50  6E67               	movwf	_f_panning_to_bin,c	;volatile
 19701                           
 19702                           ;sort.c: 617: }
 19703  003B52  0012               	return	
 19704  003B54                     i2l9989:
 19705                           
 19706                           ;sort.c: 618: else if(pan_servo_state == 1200){
 19707  003B54  0EB0               	movlw	176
 19708  003B56  186B               	xorwf	_pan_servo_state,w,c	;volatile
 19709  003B58  E15A               	bnz	i2l10019
 19710  003B5A  0E04               	movlw	4
 19711  003B5C  186C               	xorwf	_pan_servo_state+1,w,c	;volatile
 19712  003B5E  A4D8               	btfss	status,2,c
 19713  003B60  D056               	goto	i2l10019
 19714                           
 19715                           ;sort.c: 620: servo_timer_counter = 0;
 19716  003B62  0E00               	movlw	0
 19717  003B64  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19718  003B66  0E00               	movlw	0
 19719  003B68  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19720                           
 19721                           ;sort.c: 621: }
 19722  003B6A  0012               	return	
 19723  003B6C                     i2l9993:
 19724                           
 19725                           ;sort.c: 626: updateServoPosition(1050, 3);
 19726  003B6C  0E04               	movlw	4
 19727  003B6E  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19728  003B70  0E1A               	movlw	26
 19729  003B72  6E01               	movwf	i2updateServoPosition@time_us,c
 19730  003B74  0E00               	movlw	0
 19731  003B76  6E04               	movwf	i2updateServoPosition@timer+1,c
 19732  003B78  0E03               	movlw	3
 19733  003B7A  6E03               	movwf	i2updateServoPosition@timer,c
 19734  003B7C  ECC9  F027         	call	i2_updateServoPosition	;wreg free
 19735                           
 19736                           ;sort.c: 627: servo_timer_counter = 0;
 19737  003B80  0E00               	movlw	0
 19738  003B82  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19739  003B84  0E00               	movlw	0
 19740  003B86  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19741                           
 19742                           ;sort.c: 628: servo_timer_target = 750;
 19743  003B88  0E02               	movlw	2
 19744  003B8A  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19745  003B8C  0EEE               	movlw	238
 19746  003B8E  6E6F               	movwf	_servo_timer_target,c	;volatile
 19747                           
 19748                           ;sort.c: 629: break;
 19749  003B90  0012               	return	
 19750  003B92                     i2l9999:
 19751                           
 19752                           ;sort.c: 631: updateServoPosition(1050, 3);
 19753  003B92  0E04               	movlw	4
 19754  003B94  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19755  003B96  0E1A               	movlw	26
 19756  003B98  6E01               	movwf	i2updateServoPosition@time_us,c
 19757  003B9A  0E00               	movlw	0
 19758  003B9C  6E04               	movwf	i2updateServoPosition@timer+1,c
 19759  003B9E  0E03               	movlw	3
 19760  003BA0  6E03               	movwf	i2updateServoPosition@timer,c
 19761  003BA2  ECC9  F027         	call	i2_updateServoPosition	;wreg free
 19762                           
 19763                           ;sort.c: 632: servo_timer_counter = 0;
 19764  003BA6  0E00               	movlw	0
 19765  003BA8  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19766  003BAA  0E00               	movlw	0
 19767  003BAC  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19768                           
 19769                           ;sort.c: 633: servo_timer_target = 750;
 19770  003BAE  0E02               	movlw	2
 19771  003BB0  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19772  003BB2  0EEE               	movlw	238
 19773  003BB4  6E6F               	movwf	_servo_timer_target,c	;volatile
 19774                           
 19775                           ;sort.c: 634: break;
 19776  003BB6  0012               	return	
 19777  003BB8                     i2l10005:
 19778                           
 19779                           ;sort.c: 637: updateServoPosition(1200, 1);
 19780  003BB8  0E04               	movlw	4
 19781  003BBA  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19782  003BBC  0EB0               	movlw	176
 19783  003BBE  6E01               	movwf	i2updateServoPosition@time_us,c
 19784  003BC0  0E00               	movlw	0
 19785  003BC2  6E04               	movwf	i2updateServoPosition@timer+1,c
 19786  003BC4  0E01               	movlw	1
 19787  003BC6  6E03               	movwf	i2updateServoPosition@timer,c
 19788  003BC8  ECC9  F027         	call	i2_updateServoPosition	;wreg free
 19789                           
 19790                           ;sort.c: 638: updateServoPosition(1050, 3);
 19791  003BCC  0E04               	movlw	4
 19792  003BCE  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19793  003BD0  0E1A               	movlw	26
 19794  003BD2  6E01               	movwf	i2updateServoPosition@time_us,c
 19795  003BD4  0E00               	movlw	0
 19796  003BD6  6E04               	movwf	i2updateServoPosition@timer+1,c
 19797  003BD8  0E03               	movlw	3
 19798  003BDA  6E03               	movwf	i2updateServoPosition@timer,c
 19799  003BDC  ECC9  F027         	call	i2_updateServoPosition	;wreg free
 19800                           
 19801                           ;sort.c: 639: servo_timer_counter = 0;
 19802  003BE0  0E00               	movlw	0
 19803  003BE2  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19804  003BE4  0E00               	movlw	0
 19805  003BE6  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19806                           
 19807                           ;sort.c: 640: servo_timer_target = 9999;
 19808  003BE8  0E27               	movlw	39
 19809  003BEA  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19810  003BEC  0E0F               	movlw	15
 19811  003BEE  6E6F               	movwf	_servo_timer_target,c	;volatile
 19812                           
 19813                           ;sort.c: 642: f_can_distributed = 1;
 19814  003BF0  0E00               	movlw	0
 19815  003BF2  0101               	movlb	1	; () banked
 19816  003BF4  6F34               	movwf	(_f_can_distributed+1)& (0+255),b
 19817  003BF6  0E01               	movlw	1
 19818  003BF8  6F33               	movwf	_f_can_distributed& (0+255),b
 19819                           
 19820                           ; BSR set to: 1
 19821                           ;sort.c: 643: if(f_lastCan == 1){
 19822  003BFA  0100               	movlb	0	; () banked
 19823  003BFC  05EC               	decf	_f_lastCan& (0+255),w,b
 19824  003BFE  0100               	movlb	0	; () banked
 19825  003C00  11ED               	iorwf	(_f_lastCan+1)& (0+255),w,b
 19826  003C02  A4D8               	btfss	status,2,c
 19827  003C04  0012               	return	
 19828                           
 19829                           ; BSR set to: 0
 19830                           ;sort.c: 644: machine_state = DoneSorting_state;
 19831  003C06  0E02               	movlw	2
 19832  003C08  0100               	movlb	0	; () banked
 19833  003C0A  6FFC               	movwf	_machine_state& (0+255),b
 19834                           
 19835                           ; BSR set to: 0
 19836                           ;sort.c: 650: }
 19837                           
 19838                           ; BSR set to: 0
 19839                           ;sort.c: 649: break;
 19840                           
 19841                           ;sort.c: 648: default:
 19842                           
 19843                           ; BSR set to: 0
 19844                           ;sort.c: 645: }
 19845                           ;sort.c: 646: break;
 19846  003C0C  0012               	return	
 19847  003C0E                     i2l10019:
 19848  003C0E  C071  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 19849  003C12  C072  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 19850                           
 19851                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 19852                           ; Switch size 1, requested type "space"
 19853                           ; Number of cases is 2, Range of values is 4 to 5
 19854                           ; switch strategies available:
 19855                           ; Name         Instructions Cycles
 19856                           ; simple_byte            7     4 (average)
 19857                           ;	Chosen strategy is simple_byte
 19858  003C16  500A               	movf	??_updateServoStates+1,w,c
 19859  003C18  0A04               	xorlw	4	; case 4
 19860  003C1A  B4D8               	btfsc	status,2,c
 19861  003C1C  D004               	goto	i2l10673
 19862  003C1E  0A01               	xorlw	1	; case 5
 19863  003C20  A4D8               	btfss	status,2,c
 19864  003C22  0012               	return	
 19865  003C24  D008               	goto	i2l10675
 19866  003C26                     i2l10673:
 19867                           
 19868                           ; Switch size 1, requested type "space"
 19869                           ; Number of cases is 2, Range of values is 26 to 236
 19870                           ; switch strategies available:
 19871                           ; Name         Instructions Cycles
 19872                           ; simple_byte            7     4 (average)
 19873                           ;	Chosen strategy is simple_byte
 19874  003C26  5009               	movf	??_updateServoStates,w,c
 19875  003C28  0A1A               	xorlw	26	; case 26
 19876  003C2A  B4D8               	btfsc	status,2,c
 19877  003C2C  D7C5               	goto	i2l10005
 19878  003C2E  0AF6               	xorlw	246	; case 236
 19879  003C30  A4D8               	btfss	status,2,c
 19880  003C32  0012               	return	
 19881  003C34  D79B               	goto	i2l9993
 19882  003C36                     i2l10675:
 19883                           
 19884                           ; Switch size 1, requested type "space"
 19885                           ; Number of cases is 1, Range of values is 110 to 110
 19886                           ; switch strategies available:
 19887                           ; Name         Instructions Cycles
 19888                           ; simple_byte            4     3 (average)
 19889                           ;	Chosen strategy is simple_byte
 19890  003C36  5009               	movf	??_updateServoStates,w,c
 19891  003C38  0A6E               	xorlw	110	; case 110
 19892  003C3A  A4D8               	btfss	status,2,c
 19893  003C3C  0012               	return	
 19894  003C3E  D7A9               	goto	i2l9999
 19895  003C40                     __end_of_updateServoStates:
 19896                           	opt stack 0
 19897                           pclatu	equ	0xFFB
 19898                           pclath	equ	0xFFA
 19899                           tblptru	equ	0xFF8
 19900                           tblptrh	equ	0xFF7
 19901                           tblptrl	equ	0xFF6
 19902                           tablat	equ	0xFF5
 19903                           prodh	equ	0xFF4
 19904                           prodl	equ	0xFF3
 19905                           intcon	equ	0xFF2
 19906                           intcon2	equ	0xFF1
 19907                           intcon3	equ	0xFF0
 19908                           indf0	equ	0xFEF
 19909                           postinc0	equ	0xFEE
 19910                           fsr0h	equ	0xFEA
 19911                           fsr0l	equ	0xFE9
 19912                           wreg	equ	0xFE8
 19913                           postdec1	equ	0xFE5
 19914                           fsr1h	equ	0xFE2
 19915                           fsr1l	equ	0xFE1
 19916                           indf2	equ	0xFDF
 19917                           postinc2	equ	0xFDE
 19918                           postdec2	equ	0xFDD
 19919                           fsr2h	equ	0xFDA
 19920                           fsr2l	equ	0xFD9
 19921                           status	equ	0xFD8
 19922                           
 19923 ;; *************** function i2_updateServoPosition *****************
 19924 ;; Defined at:
 19925 ;;		line 570 in file "sort.c"
 19926 ;; Parameters:    Size  Location     Type
 19927 ;;  time_us         2    0[COMRAM] int 
 19928 ;;  timer           2    2[COMRAM] int 
 19929 ;; Auto vars:     Size  Location     Type
 19930 ;;  updateServoP    2    6[COMRAM] unsigned int 
 19931 ;; Return value:  Size  Location     Type
 19932 ;;                  1    wreg      void 
 19933 ;; Registers used:
 19934 ;;		wreg, status,2, status,0
 19935 ;; Tracked objects:
 19936 ;;		On entry : 0/0
 19937 ;;		On exit  : 0/0
 19938 ;;		Unchanged: 0/0
 19939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19940 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19941 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19942 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19943 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19944 ;;Total ram usage:        8 bytes
 19945 ;; Hardware stack levels used:    1
 19946 ;; This function calls:
 19947 ;;		Nothing
 19948 ;; This function is called by:
 19949 ;;		_updateServoStates
 19950 ;; This function uses a non-reentrant model
 19951 ;;
 19952                           
 19953                           	psect	text66
 19954  004F92                     __ptext66:
 19955                           	opt stack 0
 19956  004F92                     i2_updateServoPosition:
 19957                           	opt stack 22
 19958                           
 19959                           ;sort.c: 571: unsigned int my_time = 65535 - time_us;
 19960                           
 19961                           ;incstack = 0
 19962  004F92  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 19963  004F96  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 19964  004F9A  1E05               	comf	??i2_updateServoPosition,f,c
 19965  004F9C  1E06               	comf	??i2_updateServoPosition+1,f,c
 19966  004F9E  4A05               	infsnz	??i2_updateServoPosition,f,c
 19967  004FA0  2A06               	incf	??i2_updateServoPosition+1,f,c
 19968  004FA2  0EFF               	movlw	255
 19969  004FA4  2405               	addwf	??i2_updateServoPosition,w,c
 19970  004FA6  6E07               	movwf	i2updateServoPosition@my_time,c
 19971  004FA8  0EFF               	movlw	255
 19972  004FAA  2006               	addwfc	??i2_updateServoPosition+1,w,c
 19973  004FAC  6E08               	movwf	i2updateServoPosition@my_time+1,c
 19974                           
 19975                           ;sort.c: 572: switch(timer){
 19976  004FAE  D015               	goto	i2l9205
 19977  004FB0                     i2l9199:
 19978                           
 19979                           ;sort.c: 574: servoTimes[0] = my_time >> 8;
 19980  004FB0  5008               	movf	i2updateServoPosition@my_time+1,w,c
 19981  004FB2  6E59               	movwf	_servoTimes,c
 19982  004FB4  6A5A               	clrf	_servoTimes+1,c
 19983                           
 19984                           ;sort.c: 575: servoTimes[1] = my_time & 0xFF;
 19985  004FB6  5007               	movf	i2updateServoPosition@my_time,w,c
 19986  004FB8  6E5B               	movwf	_servoTimes+2,c
 19987  004FBA  6A5C               	clrf	_servoTimes+3,c
 19988                           
 19989                           ;sort.c: 577: pan_servo_state = time_us;
 19990  004FBC  C001  F06B         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 19991  004FC0  C002  F06C         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 19992  004FC4                     i2l928:
 19993                           
 19994                           ;sort.c: 579: servoTimes[2] = my_time >> 8;
 19995  004FC4  5008               	movf	i2updateServoPosition@my_time+1,w,c
 19996  004FC6  6E5D               	movwf	_servoTimes+4,c
 19997  004FC8  6A5E               	clrf	_servoTimes+5,c
 19998                           
 19999                           ;sort.c: 580: servoTimes[3] = my_time & 0xFF;
 20000  004FCA  5007               	movf	i2updateServoPosition@my_time,w,c
 20001  004FCC  6E5F               	movwf	_servoTimes+6,c
 20002  004FCE  6A60               	clrf	_servoTimes+7,c
 20003                           
 20004                           ;sort.c: 582: tilt_servo_state = time_us;
 20005  004FD0  C001  F071         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 20006  004FD4  C002  F072         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 20007                           
 20008                           ;sort.c: 583: }
 20009  004FD8  0012               	return	
 20010  004FDA                     i2l9205:
 20011  004FDA  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 20012  004FDE  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 20013                           
 20014                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20015                           ; Switch size 1, requested type "space"
 20016                           ; Number of cases is 1, Range of values is 0 to 0
 20017                           ; switch strategies available:
 20018                           ; Name         Instructions Cycles
 20019                           ; simple_byte            4     3 (average)
 20020                           ;	Chosen strategy is simple_byte
 20021  004FE2  5006               	movf	??i2_updateServoPosition+1,w,c
 20022  004FE4  0A00               	xorlw	0	; case 0
 20023  004FE6  A4D8               	btfss	status,2,c
 20024  004FE8  0012               	return	
 20025                           
 20026                           ; Switch size 1, requested type "space"
 20027                           ; Number of cases is 2, Range of values is 1 to 3
 20028                           ; switch strategies available:
 20029                           ; Name         Instructions Cycles
 20030                           ; simple_byte            7     4 (average)
 20031                           ;	Chosen strategy is simple_byte
 20032  004FEA  5005               	movf	??i2_updateServoPosition,w,c
 20033  004FEC  0A01               	xorlw	1	; case 1
 20034  004FEE  B4D8               	btfsc	status,2,c
 20035  004FF0  D7DF               	goto	i2l9199
 20036  004FF2  0A02               	xorlw	2	; case 3
 20037  004FF4  A4D8               	btfss	status,2,c
 20038  004FF6  0012               	return	
 20039  004FF8  D7E5               	goto	i2l928
 20040  004FFA                     __end_ofi2_updateServoPosition:
 20041                           	opt stack 0
 20042                           pclatu	equ	0xFFB
 20043                           pclath	equ	0xFFA
 20044                           tblptru	equ	0xFF8
 20045                           tblptrh	equ	0xFF7
 20046                           tblptrl	equ	0xFF6
 20047                           tablat	equ	0xFF5
 20048                           prodh	equ	0xFF4
 20049                           prodl	equ	0xFF3
 20050                           intcon	equ	0xFF2
 20051                           intcon2	equ	0xFF1
 20052                           intcon3	equ	0xFF0
 20053                           indf0	equ	0xFEF
 20054                           postinc0	equ	0xFEE
 20055                           fsr0h	equ	0xFEA
 20056                           fsr0l	equ	0xFE9
 20057                           wreg	equ	0xFE8
 20058                           postdec1	equ	0xFE5
 20059                           fsr1h	equ	0xFE2
 20060                           fsr1l	equ	0xFE1
 20061                           indf2	equ	0xFDF
 20062                           postinc2	equ	0xFDE
 20063                           postdec2	equ	0xFDD
 20064                           fsr2h	equ	0xFDA
 20065                           fsr2l	equ	0xFD9
 20066                           status	equ	0xFD8
 20067                           
 20068 ;; *************** function _updateMenu *****************
 20069 ;; Defined at:
 20070 ;;		line 216 in file "UI.c"
 20071 ;; Parameters:    Size  Location     Type
 20072 ;;		None
 20073 ;; Auto vars:     Size  Location     Type
 20074 ;;		None
 20075 ;; Return value:  Size  Location     Type
 20076 ;;                  1    wreg      void 
 20077 ;; Registers used:
 20078 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20079 ;; Tracked objects:
 20080 ;;		On entry : 0/0
 20081 ;;		On exit  : 0/0
 20082 ;;		Unchanged: 0/0
 20083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20086 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20087 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20088 ;;Total ram usage:        2 bytes
 20089 ;; Hardware stack levels used:    1
 20090 ;; Hardware stack levels required when called:    5
 20091 ;; This function calls:
 20092 ;;		_change_state_to_logs_11
 20093 ;;		_change_state_to_logs_12
 20094 ;;		_change_state_to_logs_22
 20095 ;;		_change_state_to_logs_23
 20096 ;;		_change_state_to_logs_33
 20097 ;;		_change_state_to_logs_34
 20098 ;;		_change_state_to_menu_11
 20099 ;;		_change_state_to_menu_23
 20100 ;;		_dispLogs
 20101 ;;		_inputHandler
 20102 ;;		i2_change_state_to_menu_12
 20103 ;;		i2_change_state_to_menu_22
 20104 ;;		i2_change_state_to_menu_start
 20105 ;; This function is called by:
 20106 ;;		_handler
 20107 ;; This function uses a non-reentrant model
 20108 ;;
 20109                           
 20110                           	psect	text67
 20111  002F90                     __ptext67:
 20112                           	opt stack 0
 20113  002F90                     _updateMenu:
 20114                           	opt stack 18
 20115                           
 20116                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 20117                           
 20118                           ;incstack = 0
 20119  002F90  0E00               	movlw	0
 20120  002F92  6E76               	movwf	_up+1,c
 20121  002F94  0E00               	movlw	0
 20122  002F96  6E75               	movwf	_up,c
 20123  002F98  0E00               	movlw	0
 20124  002F9A  6E64               	movwf	_down+1,c
 20125  002F9C  0E00               	movlw	0
 20126  002F9E  6E63               	movwf	_down,c
 20127  002FA0  0E00               	movlw	0
 20128  002FA2  6E66               	movwf	_enter+1,c
 20129  002FA4  0E00               	movlw	0
 20130  002FA6  6E65               	movwf	_enter,c
 20131  002FA8  0E00               	movlw	0
 20132  002FAA  6E62               	movwf	_back+1,c
 20133  002FAC  0E00               	movlw	0
 20134  002FAE  6E61               	movwf	_back,c
 20135                           
 20136                           ;UI.c: 218: (INTCONbits.GIE = 0);
 20137  002FB0  9EF2               	bcf	intcon,7,c	;volatile
 20138                           
 20139                           ;UI.c: 220: if (inputHandler()
 20140                           ;UI.c: 223: ){
 20141  002FB2  EC51  F01B         	call	_inputHandler	;wreg free
 20142  002FB6  502A               	movf	?_inputHandler,w,c
 20143  002FB8  102B               	iorwf	?_inputHandler+1,w,c
 20144  002FBA  A4D8               	btfss	status,2,c
 20145  002FBC  D112               	goto	i2l9731
 20146  002FBE  D146               	goto	i2l268
 20147  002FC0                     i2l9583:
 20148                           
 20149                           ;UI.c: 227: change_state_to_menu_11();
 20150  002FC0  EC5E  F02B         	call	_change_state_to_menu_11	;wreg free
 20151                           
 20152                           ;UI.c: 228: break;
 20153  002FC4  D143               	goto	i2l268
 20154  002FC6                     i2l9585:
 20155                           
 20156                           ;UI.c: 231: if(up){
 20157  002FC6  5075               	movf	_up,w,c
 20158  002FC8  1076               	iorwf	_up+1,w,c
 20159  002FCA  B4D8               	btfsc	status,2,c
 20160  002FCC  D003               	goto	i2l9589
 20161                           
 20162                           ;UI.c: 232: change_state_to_menu_23();
 20163  002FCE  EC46  F02B         	call	_change_state_to_menu_23	;wreg free
 20164                           
 20165                           ;UI.c: 233: }
 20166  002FD2  D13C               	goto	i2l268
 20167  002FD4                     i2l9589:
 20168                           
 20169                           ;UI.c: 234: else if(down){
 20170  002FD4  5063               	movf	_down,w,c
 20171  002FD6  1064               	iorwf	_down+1,w,c
 20172  002FD8  B4D8               	btfsc	status,2,c
 20173  002FDA  D003               	goto	i2l9593
 20174                           
 20175                           ;UI.c: 235: change_state_to_menu_12();
 20176  002FDC  EC2E  F02B         	call	i2_change_state_to_menu_12	;wreg free
 20177                           
 20178                           ;UI.c: 236: }
 20179  002FE0  D135               	goto	i2l268
 20180  002FE2                     i2l9593:
 20181                           
 20182                           ;UI.c: 237: else if(enter){
 20183  002FE2  5065               	movf	_enter,w,c
 20184  002FE4  1066               	iorwf	_enter+1,w,c
 20185  002FE6  B4D8               	btfsc	status,2,c
 20186  002FE8  D131               	goto	i2l268
 20187                           
 20188                           ;UI.c: 238: change_state_to_menu_start();
 20189  002FEA  EC71  F02C         	call	i2_change_state_to_menu_start	;wreg free
 20190                           
 20191                           ;UI.c: 239: }
 20192                           ;UI.c: 240: break;
 20193  002FEE  D12E               	goto	i2l268
 20194  002FF0                     i2l9597:
 20195                           
 20196                           ;UI.c: 243: if(up){
 20197  002FF0  5075               	movf	_up,w,c
 20198  002FF2  1076               	iorwf	_up+1,w,c
 20199  002FF4  B4D8               	btfsc	status,2,c
 20200  002FF6  D003               	goto	i2l9601
 20201                           
 20202                           ;UI.c: 244: change_state_to_menu_11();
 20203  002FF8  EC5E  F02B         	call	_change_state_to_menu_11	;wreg free
 20204                           
 20205                           ;UI.c: 245: }
 20206  002FFC  D127               	goto	i2l268
 20207  002FFE                     i2l9601:
 20208                           
 20209                           ;UI.c: 246: else if(down){
 20210  002FFE  5063               	movf	_down,w,c
 20211  003000  1064               	iorwf	_down+1,w,c
 20212  003002  B4D8               	btfsc	status,2,c
 20213  003004  D011               	goto	i2l9617
 20214                           
 20215                           ;UI.c: 247: change_state_to_menu_23();
 20216  003006  EC46  F02B         	call	_change_state_to_menu_23	;wreg free
 20217                           
 20218                           ;UI.c: 248: }
 20219  00300A  D120               	goto	i2l268
 20220  00300C                     i2l9609:
 20221                           
 20222                           ;UI.c: 255: if(up){
 20223  00300C  5075               	movf	_up,w,c
 20224  00300E  1076               	iorwf	_up+1,w,c
 20225  003010  B4D8               	btfsc	status,2,c
 20226  003012  D003               	goto	i2l9613
 20227                           
 20228                           ;UI.c: 256: change_state_to_menu_11();
 20229  003014  EC5E  F02B         	call	_change_state_to_menu_11	;wreg free
 20230                           
 20231                           ;UI.c: 257: }
 20232  003018  D119               	goto	i2l268
 20233  00301A                     i2l9613:
 20234                           
 20235                           ;UI.c: 258: else if(down){
 20236  00301A  5063               	movf	_down,w,c
 20237  00301C  1064               	iorwf	_down+1,w,c
 20238  00301E  B4D8               	btfsc	status,2,c
 20239  003020  D003               	goto	i2l9617
 20240                           
 20241                           ;UI.c: 259: change_state_to_menu_23();
 20242  003022  EC46  F02B         	call	_change_state_to_menu_23	;wreg free
 20243                           
 20244                           ;UI.c: 260: }
 20245  003026  D112               	goto	i2l268
 20246  003028                     i2l9617:
 20247                           
 20248                           ;UI.c: 261: else if(enter){
 20249  003028  5065               	movf	_enter,w,c
 20250  00302A  1066               	iorwf	_enter+1,w,c
 20251  00302C  B4D8               	btfsc	status,2,c
 20252  00302E  D10E               	goto	i2l268
 20253                           
 20254                           ;UI.c: 262: machine_state = Sorting_state;
 20255  003030  0E01               	movlw	1
 20256  003032  0100               	movlb	0	; () banked
 20257  003034  6FFC               	movwf	_machine_state& (0+255),b
 20258                           
 20259                           ; BSR set to: 0
 20260                           ;UI.c: 263: }
 20261                           ;UI.c: 264: break;
 20262                           
 20263                           ; BSR set to: 0
 20264                           
 20265                           ; BSR set to: 0
 20266  003036  D10A               	goto	i2l268
 20267  003038                     i2l9621:
 20268                           
 20269                           ;UI.c: 267: if(up){
 20270  003038  5075               	movf	_up,w,c
 20271  00303A  1076               	iorwf	_up+1,w,c
 20272  00303C  B4D8               	btfsc	status,2,c
 20273  00303E  D003               	goto	i2l9625
 20274                           
 20275                           ;UI.c: 268: change_state_to_menu_22();
 20276  003040  EC16  F02B         	call	i2_change_state_to_menu_22	;wreg free
 20277                           
 20278                           ;UI.c: 269: }
 20279  003044  D103               	goto	i2l268
 20280  003046                     i2l9625:
 20281                           
 20282                           ;UI.c: 270: else if(down){
 20283  003046  5063               	movf	_down,w,c
 20284  003048  1064               	iorwf	_down+1,w,c
 20285  00304A  B4D8               	btfsc	status,2,c
 20286  00304C  D003               	goto	i2l9629
 20287                           
 20288                           ;UI.c: 271: change_state_to_menu_11();
 20289  00304E  EC5E  F02B         	call	_change_state_to_menu_11	;wreg free
 20290                           
 20291                           ;UI.c: 272: }
 20292  003052  D0FC               	goto	i2l268
 20293  003054                     i2l9629:
 20294                           
 20295                           ;UI.c: 273: else if(enter){
 20296  003054  5065               	movf	_enter,w,c
 20297  003056  1066               	iorwf	_enter+1,w,c
 20298  003058  B4D8               	btfsc	status,2,c
 20299  00305A  D0F8               	goto	i2l268
 20300                           
 20301                           ;UI.c: 274: change_state_to_logs_11();
 20302  00305C  ECD6  F02B         	call	_change_state_to_logs_11	;wreg free
 20303                           
 20304                           ;UI.c: 275: }
 20305                           ;UI.c: 276: break;
 20306  003060  D0F5               	goto	i2l268
 20307  003062                     i2l9633:
 20308                           
 20309                           ;UI.c: 279: if(up){
 20310  003062  5075               	movf	_up,w,c
 20311  003064  1076               	iorwf	_up+1,w,c
 20312  003066  B4D8               	btfsc	status,2,c
 20313  003068  D003               	goto	i2l9637
 20314                           
 20315                           ;UI.c: 280: change_state_to_logs_34();
 20316  00306A  EC76  F02B         	call	_change_state_to_logs_34	;wreg free
 20317                           
 20318                           ;UI.c: 281: }
 20319  00306E  D0EE               	goto	i2l268
 20320  003070                     i2l9637:
 20321                           
 20322                           ;UI.c: 282: else if(down){
 20323  003070  5063               	movf	_down,w,c
 20324  003072  1064               	iorwf	_down+1,w,c
 20325  003074  B4D8               	btfsc	status,2,c
 20326  003076  D003               	goto	i2l9641
 20327                           
 20328                           ;UI.c: 283: change_state_to_logs_12();
 20329  003078  ECBE  F02B         	call	_change_state_to_logs_12	;wreg free
 20330                           
 20331                           ;UI.c: 284: }
 20332  00307C  D0E7               	goto	i2l268
 20333  00307E                     i2l9641:
 20334                           
 20335                           ;UI.c: 285: else if(enter){
 20336  00307E  5065               	movf	_enter,w,c
 20337  003080  1066               	iorwf	_enter+1,w,c
 20338  003082  B4D8               	btfsc	status,2,c
 20339  003084  D007               	goto	i2l9645
 20340                           
 20341                           ;UI.c: 286: dispLogs(1);
 20342  003086  0E00               	movlw	0
 20343  003088  6E13               	movwf	dispLogs@myLog+1,c
 20344  00308A  0E01               	movlw	1
 20345  00308C  6E12               	movwf	dispLogs@myLog,c
 20346  00308E  ECAB  F02C         	call	_dispLogs	;wreg free
 20347                           
 20348                           ;UI.c: 287: }
 20349  003092  D0DC               	goto	i2l268
 20350  003094                     i2l9645:
 20351                           
 20352                           ;UI.c: 288: else if(back){
 20353  003094  5061               	movf	_back,w,c
 20354  003096  1062               	iorwf	_back+1,w,c
 20355  003098  B4D8               	btfsc	status,2,c
 20356  00309A  D0D8               	goto	i2l268
 20357                           
 20358                           ;UI.c: 289: change_state_to_menu_23();
 20359  00309C  EC46  F02B         	call	_change_state_to_menu_23	;wreg free
 20360                           
 20361                           ;UI.c: 290: }
 20362                           ;UI.c: 291: break;
 20363  0030A0  D0D5               	goto	i2l268
 20364  0030A2                     i2l9649:
 20365                           
 20366                           ;UI.c: 294: if(up){
 20367  0030A2  5075               	movf	_up,w,c
 20368  0030A4  1076               	iorwf	_up+1,w,c
 20369  0030A6  B4D8               	btfsc	status,2,c
 20370  0030A8  D003               	goto	i2l9653
 20371                           
 20372                           ;UI.c: 295: change_state_to_logs_11();
 20373  0030AA  ECD6  F02B         	call	_change_state_to_logs_11	;wreg free
 20374                           
 20375                           ;UI.c: 296: }
 20376  0030AE  D0CE               	goto	i2l268
 20377  0030B0                     i2l9653:
 20378                           
 20379                           ;UI.c: 297: else if(down){
 20380  0030B0  5063               	movf	_down,w,c
 20381  0030B2  1064               	iorwf	_down+1,w,c
 20382  0030B4  B4D8               	btfsc	status,2,c
 20383  0030B6  D003               	goto	i2l9657
 20384                           
 20385                           ;UI.c: 298: change_state_to_logs_23();
 20386  0030B8  EC05  F02C         	call	_change_state_to_logs_23	;wreg free
 20387                           
 20388                           ;UI.c: 299: }
 20389  0030BC  D0C7               	goto	i2l268
 20390  0030BE                     i2l9657:
 20391                           
 20392                           ;UI.c: 300: else if(enter){
 20393  0030BE  5065               	movf	_enter,w,c
 20394  0030C0  1066               	iorwf	_enter+1,w,c
 20395  0030C2  B4D8               	btfsc	status,2,c
 20396  0030C4  D007               	goto	i2l9661
 20397                           
 20398                           ;UI.c: 301: dispLogs(2);
 20399  0030C6  0E00               	movlw	0
 20400  0030C8  6E13               	movwf	dispLogs@myLog+1,c
 20401  0030CA  0E02               	movlw	2
 20402  0030CC  6E12               	movwf	dispLogs@myLog,c
 20403  0030CE  ECAB  F02C         	call	_dispLogs	;wreg free
 20404                           
 20405                           ;UI.c: 302: }
 20406  0030D2  D0BC               	goto	i2l268
 20407  0030D4                     i2l9661:
 20408                           
 20409                           ;UI.c: 303: else if(back){
 20410  0030D4  5061               	movf	_back,w,c
 20411  0030D6  1062               	iorwf	_back+1,w,c
 20412  0030D8  B4D8               	btfsc	status,2,c
 20413  0030DA  D0B8               	goto	i2l268
 20414                           
 20415                           ;UI.c: 304: change_state_to_menu_23();
 20416  0030DC  EC46  F02B         	call	_change_state_to_menu_23	;wreg free
 20417                           
 20418                           ;UI.c: 305: }
 20419                           ;UI.c: 306: break;
 20420  0030E0  D0B5               	goto	i2l268
 20421  0030E2                     i2l9665:
 20422                           
 20423                           ;UI.c: 309: if(up){
 20424  0030E2  5075               	movf	_up,w,c
 20425  0030E4  1076               	iorwf	_up+1,w,c
 20426  0030E6  B4D8               	btfsc	status,2,c
 20427  0030E8  D003               	goto	i2l9669
 20428                           
 20429                           ;UI.c: 310: change_state_to_logs_11();
 20430  0030EA  ECD6  F02B         	call	_change_state_to_logs_11	;wreg free
 20431                           
 20432                           ;UI.c: 311: }
 20433  0030EE  D0AE               	goto	i2l268
 20434  0030F0                     i2l9669:
 20435                           
 20436                           ;UI.c: 312: else if(down){
 20437  0030F0  5063               	movf	_down,w,c
 20438  0030F2  1064               	iorwf	_down+1,w,c
 20439  0030F4  B4D8               	btfsc	status,2,c
 20440  0030F6  D003               	goto	i2l9673
 20441                           
 20442                           ;UI.c: 313: change_state_to_logs_23();
 20443  0030F8  EC05  F02C         	call	_change_state_to_logs_23	;wreg free
 20444                           
 20445                           ;UI.c: 314: }
 20446  0030FC  D0A7               	goto	i2l268
 20447  0030FE                     i2l9673:
 20448                           
 20449                           ;UI.c: 315: else if(enter){
 20450  0030FE  5065               	movf	_enter,w,c
 20451  003100  1066               	iorwf	_enter+1,w,c
 20452  003102  B4D8               	btfsc	status,2,c
 20453  003104  D007               	goto	i2l9677
 20454                           
 20455                           ;UI.c: 316: dispLogs(2);
 20456  003106  0E00               	movlw	0
 20457  003108  6E13               	movwf	dispLogs@myLog+1,c
 20458  00310A  0E02               	movlw	2
 20459  00310C  6E12               	movwf	dispLogs@myLog,c
 20460  00310E  ECAB  F02C         	call	_dispLogs	;wreg free
 20461                           
 20462                           ;UI.c: 317: }
 20463  003112  D09C               	goto	i2l268
 20464  003114                     i2l9677:
 20465                           
 20466                           ;UI.c: 318: else if(back){
 20467  003114  5061               	movf	_back,w,c
 20468  003116  1062               	iorwf	_back+1,w,c
 20469  003118  B4D8               	btfsc	status,2,c
 20470  00311A  D098               	goto	i2l268
 20471                           
 20472                           ;UI.c: 319: change_state_to_menu_23();
 20473  00311C  EC46  F02B         	call	_change_state_to_menu_23	;wreg free
 20474                           
 20475                           ;UI.c: 320: }
 20476                           ;UI.c: 321: break;
 20477  003120  D095               	goto	i2l268
 20478  003122                     i2l9681:
 20479                           
 20480                           ;UI.c: 324: if(up){
 20481  003122  5075               	movf	_up,w,c
 20482  003124  1076               	iorwf	_up+1,w,c
 20483  003126  B4D8               	btfsc	status,2,c
 20484  003128  D003               	goto	i2l9685
 20485                           
 20486                           ;UI.c: 325: change_state_to_logs_22();
 20487  00312A  ECA6  F02B         	call	_change_state_to_logs_22	;wreg free
 20488                           
 20489                           ;UI.c: 326: }
 20490  00312E  D08E               	goto	i2l268
 20491  003130                     i2l9685:
 20492                           
 20493                           ;UI.c: 327: else if(down){
 20494  003130  5063               	movf	_down,w,c
 20495  003132  1064               	iorwf	_down+1,w,c
 20496  003134  B4D8               	btfsc	status,2,c
 20497  003136  D003               	goto	i2l9689
 20498                           
 20499                           ;UI.c: 328: change_state_to_logs_34();
 20500  003138  EC76  F02B         	call	_change_state_to_logs_34	;wreg free
 20501                           
 20502                           ;UI.c: 329: }
 20503  00313C  D087               	goto	i2l268
 20504  00313E                     i2l9689:
 20505                           
 20506                           ;UI.c: 330: else if(enter){
 20507  00313E  5065               	movf	_enter,w,c
 20508  003140  1066               	iorwf	_enter+1,w,c
 20509  003142  B4D8               	btfsc	status,2,c
 20510  003144  D007               	goto	i2l9693
 20511                           
 20512                           ;UI.c: 331: dispLogs(3);
 20513  003146  0E00               	movlw	0
 20514  003148  6E13               	movwf	dispLogs@myLog+1,c
 20515  00314A  0E03               	movlw	3
 20516  00314C  6E12               	movwf	dispLogs@myLog,c
 20517  00314E  ECAB  F02C         	call	_dispLogs	;wreg free
 20518                           
 20519                           ;UI.c: 332: }
 20520  003152  D07C               	goto	i2l268
 20521  003154                     i2l9693:
 20522                           
 20523                           ;UI.c: 333: else if(back){
 20524  003154  5061               	movf	_back,w,c
 20525  003156  1062               	iorwf	_back+1,w,c
 20526  003158  B4D8               	btfsc	status,2,c
 20527  00315A  D078               	goto	i2l268
 20528                           
 20529                           ;UI.c: 334: change_state_to_menu_23();
 20530  00315C  EC46  F02B         	call	_change_state_to_menu_23	;wreg free
 20531                           
 20532                           ;UI.c: 335: }
 20533                           ;UI.c: 336: break;
 20534  003160  D075               	goto	i2l268
 20535  003162                     i2l9697:
 20536                           
 20537                           ;UI.c: 339: if(up){
 20538  003162  5075               	movf	_up,w,c
 20539  003164  1076               	iorwf	_up+1,w,c
 20540  003166  B4D8               	btfsc	status,2,c
 20541  003168  D003               	goto	i2l9701
 20542                           
 20543                           ;UI.c: 340: change_state_to_logs_22();
 20544  00316A  ECA6  F02B         	call	_change_state_to_logs_22	;wreg free
 20545                           
 20546                           ;UI.c: 341: }
 20547  00316E  D06E               	goto	i2l268
 20548  003170                     i2l9701:
 20549                           
 20550                           ;UI.c: 342: else if(down){
 20551  003170  5063               	movf	_down,w,c
 20552  003172  1064               	iorwf	_down+1,w,c
 20553  003174  B4D8               	btfsc	status,2,c
 20554  003176  D003               	goto	i2l9705
 20555                           
 20556                           ;UI.c: 343: change_state_to_logs_34();
 20557  003178  EC76  F02B         	call	_change_state_to_logs_34	;wreg free
 20558                           
 20559                           ;UI.c: 344: }
 20560  00317C  D067               	goto	i2l268
 20561  00317E                     i2l9705:
 20562                           
 20563                           ;UI.c: 345: else if(enter){
 20564  00317E  5065               	movf	_enter,w,c
 20565  003180  1066               	iorwf	_enter+1,w,c
 20566  003182  B4D8               	btfsc	status,2,c
 20567  003184  D007               	goto	i2l9709
 20568                           
 20569                           ;UI.c: 346: dispLogs(3);
 20570  003186  0E00               	movlw	0
 20571  003188  6E13               	movwf	dispLogs@myLog+1,c
 20572  00318A  0E03               	movlw	3
 20573  00318C  6E12               	movwf	dispLogs@myLog,c
 20574  00318E  ECAB  F02C         	call	_dispLogs	;wreg free
 20575                           
 20576                           ;UI.c: 347: }
 20577  003192  D05C               	goto	i2l268
 20578  003194                     i2l9709:
 20579                           
 20580                           ;UI.c: 348: else if(back){
 20581  003194  5061               	movf	_back,w,c
 20582  003196  1062               	iorwf	_back+1,w,c
 20583  003198  B4D8               	btfsc	status,2,c
 20584  00319A  D058               	goto	i2l268
 20585                           
 20586                           ;UI.c: 349: change_state_to_menu_23();
 20587  00319C  EC46  F02B         	call	_change_state_to_menu_23	;wreg free
 20588                           
 20589                           ;UI.c: 350: }
 20590                           ;UI.c: 351: break;
 20591  0031A0  D055               	goto	i2l268
 20592  0031A2                     i2l9713:
 20593                           
 20594                           ;UI.c: 354: if(up){
 20595  0031A2  5075               	movf	_up,w,c
 20596  0031A4  1076               	iorwf	_up+1,w,c
 20597  0031A6  B4D8               	btfsc	status,2,c
 20598  0031A8  D003               	goto	i2l9717
 20599                           
 20600                           ;UI.c: 355: change_state_to_logs_33();
 20601  0031AA  EC8E  F02B         	call	_change_state_to_logs_33	;wreg free
 20602                           
 20603                           ;UI.c: 356: }
 20604  0031AE  D04E               	goto	i2l268
 20605  0031B0                     i2l9717:
 20606                           
 20607                           ;UI.c: 357: else if(down){
 20608  0031B0  5063               	movf	_down,w,c
 20609  0031B2  1064               	iorwf	_down+1,w,c
 20610  0031B4  B4D8               	btfsc	status,2,c
 20611  0031B6  D003               	goto	i2l9721
 20612                           
 20613                           ;UI.c: 358: change_state_to_logs_11();
 20614  0031B8  ECD6  F02B         	call	_change_state_to_logs_11	;wreg free
 20615                           
 20616                           ;UI.c: 359: }
 20617  0031BC  D047               	goto	i2l268
 20618  0031BE                     i2l9721:
 20619                           
 20620                           ;UI.c: 360: else if(enter){
 20621  0031BE  5065               	movf	_enter,w,c
 20622  0031C0  1066               	iorwf	_enter+1,w,c
 20623  0031C2  B4D8               	btfsc	status,2,c
 20624  0031C4  D007               	goto	i2l9725
 20625                           
 20626                           ;UI.c: 361: dispLogs(4);
 20627  0031C6  0E00               	movlw	0
 20628  0031C8  6E13               	movwf	dispLogs@myLog+1,c
 20629  0031CA  0E04               	movlw	4
 20630  0031CC  6E12               	movwf	dispLogs@myLog,c
 20631  0031CE  ECAB  F02C         	call	_dispLogs	;wreg free
 20632                           
 20633                           ;UI.c: 362: }
 20634  0031D2  D03C               	goto	i2l268
 20635  0031D4                     i2l9725:
 20636                           
 20637                           ;UI.c: 363: else if(back){
 20638  0031D4  5061               	movf	_back,w,c
 20639  0031D6  1062               	iorwf	_back+1,w,c
 20640  0031D8  B4D8               	btfsc	status,2,c
 20641  0031DA  D038               	goto	i2l268
 20642                           
 20643                           ;UI.c: 364: change_state_to_menu_23();
 20644  0031DC  EC46  F02B         	call	_change_state_to_menu_23	;wreg free
 20645                           
 20646                           ;UI.c: 370: }
 20647                           
 20648                           ;UI.c: 369: break;
 20649                           
 20650                           ;UI.c: 368: default:
 20651                           
 20652                           ;UI.c: 365: }
 20653                           ;UI.c: 366: break;
 20654  0031E0  D035               	goto	i2l268
 20655  0031E2                     i2l9731:
 20656  0031E2  C0E6  F043         	movff	_cur_state,??_updateMenu
 20657  0031E6  C0E7  F044         	movff	_cur_state+1,??_updateMenu+1
 20658                           
 20659                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 20660                           ; Switch size 1, requested type "space"
 20661                           ; Number of cases is 3, Range of values is 0 to 4
 20662                           ; switch strategies available:
 20663                           ; Name         Instructions Cycles
 20664                           ; simple_byte           10     6 (average)
 20665                           ;	Chosen strategy is simple_byte
 20666  0031EA  5044               	movf	??_updateMenu+1,w,c
 20667  0031EC  0A00               	xorlw	0	; case 0
 20668  0031EE  B4D8               	btfsc	status,2,c
 20669  0031F0  D007               	goto	i2l10679
 20670  0031F2  0A03               	xorlw	3	; case 3
 20671  0031F4  B4D8               	btfsc	status,2,c
 20672  0031F6  D015               	goto	i2l10681
 20673  0031F8  0A07               	xorlw	7	; case 4
 20674  0031FA  B4D8               	btfsc	status,2,c
 20675  0031FC  D020               	goto	i2l10683
 20676  0031FE  D026               	goto	i2l268
 20677  003200                     i2l10679:
 20678                           
 20679                           ; Switch size 1, requested type "space"
 20680                           ; Number of cases is 5, Range of values is 0 to 23
 20681                           ; switch strategies available:
 20682                           ; Name         Instructions Cycles
 20683                           ; simple_byte           16     9 (average)
 20684                           ;	Chosen strategy is simple_byte
 20685  003200  5043               	movf	??_updateMenu,w,c
 20686  003202  0A00               	xorlw	0	; case 0
 20687  003204  B4D8               	btfsc	status,2,c
 20688  003206  D6DC               	goto	i2l9583
 20689  003208  0A0B               	xorlw	11	; case 11
 20690  00320A  B4D8               	btfsc	status,2,c
 20691  00320C  D6DC               	goto	i2l9585
 20692  00320E  0A07               	xorlw	7	; case 12
 20693  003210  B4D8               	btfsc	status,2,c
 20694  003212  D6EE               	goto	i2l9597
 20695  003214  0A1A               	xorlw	26	; case 22
 20696  003216  B4D8               	btfsc	status,2,c
 20697  003218  D6F9               	goto	i2l9609
 20698  00321A  0A01               	xorlw	1	; case 23
 20699  00321C  B4D8               	btfsc	status,2,c
 20700  00321E  D70C               	goto	i2l9621
 20701  003220  D015               	goto	i2l268
 20702  003222                     i2l10681:
 20703                           
 20704                           ; Switch size 1, requested type "space"
 20705                           ; Number of cases is 4, Range of values is 243 to 255
 20706                           ; switch strategies available:
 20707                           ; Name         Instructions Cycles
 20708                           ; simple_byte           13     7 (average)
 20709                           ;	Chosen strategy is simple_byte
 20710  003222  5043               	movf	??_updateMenu,w,c
 20711  003224  0AF3               	xorlw	243	; case 243
 20712  003226  B4D8               	btfsc	status,2,c
 20713  003228  D71C               	goto	i2l9633
 20714  00322A  0A07               	xorlw	7	; case 244
 20715  00322C  B4D8               	btfsc	status,2,c
 20716  00322E  D739               	goto	i2l9649
 20717  003230  0A0A               	xorlw	10	; case 254
 20718  003232  B4D8               	btfsc	status,2,c
 20719  003234  D756               	goto	i2l9665
 20720  003236  0A01               	xorlw	1	; case 255
 20721  003238  B4D8               	btfsc	status,2,c
 20722  00323A  D773               	goto	i2l9681
 20723  00323C  D007               	goto	i2l268
 20724  00323E                     i2l10683:
 20725                           
 20726                           ; Switch size 1, requested type "space"
 20727                           ; Number of cases is 2, Range of values is 9 to 10
 20728                           ; switch strategies available:
 20729                           ; Name         Instructions Cycles
 20730                           ; simple_byte            7     4 (average)
 20731                           ;	Chosen strategy is simple_byte
 20732  00323E  5043               	movf	??_updateMenu,w,c
 20733  003240  0A09               	xorlw	9	; case 9
 20734  003242  B4D8               	btfsc	status,2,c
 20735  003244  D78E               	goto	i2l9697
 20736  003246  0A03               	xorlw	3	; case 10
 20737  003248  B4D8               	btfsc	status,2,c
 20738  00324A  D7AB               	goto	i2l9713
 20739  00324C                     i2l268:
 20740                           
 20741                           ;UI.c: 371: }
 20742                           ;UI.c: 372: (INTCONbits.GIE = 1);
 20743  00324C  8EF2               	bsf	intcon,7,c	;volatile
 20744  00324E  0012               	return		;funcret
 20745  003250                     __end_of_updateMenu:
 20746                           	opt stack 0
 20747                           pclatu	equ	0xFFB
 20748                           pclath	equ	0xFFA
 20749                           tblptru	equ	0xFF8
 20750                           tblptrh	equ	0xFF7
 20751                           tblptrl	equ	0xFF6
 20752                           tablat	equ	0xFF5
 20753                           prodh	equ	0xFF4
 20754                           prodl	equ	0xFF3
 20755                           intcon	equ	0xFF2
 20756                           intcon2	equ	0xFF1
 20757                           intcon3	equ	0xFF0
 20758                           indf0	equ	0xFEF
 20759                           postinc0	equ	0xFEE
 20760                           fsr0h	equ	0xFEA
 20761                           fsr0l	equ	0xFE9
 20762                           wreg	equ	0xFE8
 20763                           postdec1	equ	0xFE5
 20764                           fsr1h	equ	0xFE2
 20765                           fsr1l	equ	0xFE1
 20766                           indf2	equ	0xFDF
 20767                           postinc2	equ	0xFDE
 20768                           postdec2	equ	0xFDD
 20769                           fsr2h	equ	0xFDA
 20770                           fsr2l	equ	0xFD9
 20771                           status	equ	0xFD8
 20772                           
 20773 ;; *************** function i2_change_state_to_menu_start *****************
 20774 ;; Defined at:
 20775 ;;		line 477 in file "UI.c"
 20776 ;; Parameters:    Size  Location     Type
 20777 ;;		None
 20778 ;; Auto vars:     Size  Location     Type
 20779 ;;		None
 20780 ;; Return value:  Size  Location     Type
 20781 ;;                  1    wreg      void 
 20782 ;; Registers used:
 20783 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20784 ;; Tracked objects:
 20785 ;;		On entry : 0/0
 20786 ;;		On exit  : 0/0
 20787 ;;		Unchanged: 0/0
 20788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20793 ;;Total ram usage:        0 bytes
 20794 ;; Hardware stack levels used:    1
 20795 ;; Hardware stack levels required when called:    4
 20796 ;; This function calls:
 20797 ;;		i2_lcdInst
 20798 ;;		i2_printRTC
 20799 ;;		i2_printf
 20800 ;; This function is called by:
 20801 ;;		_updateMenu
 20802 ;;		_handler
 20803 ;; This function uses a non-reentrant model
 20804 ;;
 20805                           
 20806                           	psect	text68
 20807  0058E2                     __ptext68:
 20808                           	opt stack 0
 20809  0058E2                     i2_change_state_to_menu_start:
 20810                           	opt stack 19
 20811                           
 20812                           ;UI.c: 478: cur_state = 0;
 20813                           
 20814                           ;incstack = 0
 20815  0058E2  0E00               	movlw	0
 20816  0058E4  0100               	movlb	0	; () banked
 20817  0058E6  6FE7               	movwf	(_cur_state+1)& (0+255),b
 20818  0058E8  0E00               	movlw	0
 20819  0058EA  6FE6               	movwf	_cur_state& (0+255),b
 20820                           
 20821                           ; BSR set to: 0
 20822                           ;UI.c: 480: lcdInst(0b10000000);;
 20823  0058EC  0E80               	movlw	128
 20824  0058EE  EC47  F02D         	call	i2_lcdInst
 20825                           
 20826                           ;UI.c: 481: printRTC();
 20827  0058F2  EC28  F019         	call	i2_printRTC	;wreg free
 20828                           
 20829                           ;UI.c: 482: lcdInst(0b11000000);;
 20830  0058F6  0EC0               	movlw	192
 20831  0058F8  EC47  F02D         	call	i2_lcdInst
 20832                           
 20833                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 20834  0058FC  0EEA               	movlw	low STR_30
 20835  0058FE  6E0D               	movwf	i2printf@f,c
 20836  005900  0EFD               	movlw	high STR_30
 20837  005902  6E0E               	movwf	i2printf@f+1,c
 20838  005904  ECA2  F011         	call	i2_printf	;wreg free
 20839  005908  0012               	return		;funcret
 20840  00590A                     __end_ofi2_change_state_to_menu_start:
 20841                           	opt stack 0
 20842                           pclatu	equ	0xFFB
 20843                           pclath	equ	0xFFA
 20844                           tblptru	equ	0xFF8
 20845                           tblptrh	equ	0xFF7
 20846                           tblptrl	equ	0xFF6
 20847                           tablat	equ	0xFF5
 20848                           prodh	equ	0xFF4
 20849                           prodl	equ	0xFF3
 20850                           intcon	equ	0xFF2
 20851                           intcon2	equ	0xFF1
 20852                           intcon3	equ	0xFF0
 20853                           indf0	equ	0xFEF
 20854                           postinc0	equ	0xFEE
 20855                           fsr0h	equ	0xFEA
 20856                           fsr0l	equ	0xFE9
 20857                           wreg	equ	0xFE8
 20858                           postdec1	equ	0xFE5
 20859                           fsr1h	equ	0xFE2
 20860                           fsr1l	equ	0xFE1
 20861                           indf2	equ	0xFDF
 20862                           postinc2	equ	0xFDE
 20863                           postdec2	equ	0xFDD
 20864                           fsr2h	equ	0xFDA
 20865                           fsr2l	equ	0xFD9
 20866                           status	equ	0xFD8
 20867                           
 20868 ;; *************** function i2_printRTC *****************
 20869 ;; Defined at:
 20870 ;;		line 63 in file "RTC.c"
 20871 ;; Parameters:    Size  Location     Type
 20872 ;;		None
 20873 ;; Auto vars:     Size  Location     Type
 20874 ;;  printRTC       14   44[COMRAM] int [7]
 20875 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 20876 ;;  printRTC        2   64[COMRAM] int 
 20877 ;;  printRTC        2   58[COMRAM] int 
 20878 ;; Return value:  Size  Location     Type
 20879 ;;                  1    wreg      void 
 20880 ;; Registers used:
 20881 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20882 ;; Tracked objects:
 20883 ;;		On entry : 0/0
 20884 ;;		On exit  : 0/0
 20885 ;;		Unchanged: 0/0
 20886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20888 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20889 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20890 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20891 ;;Total ram usage:       25 bytes
 20892 ;; Hardware stack levels used:    1
 20893 ;; Hardware stack levels required when called:    3
 20894 ;; This function calls:
 20895 ;;		i2_getRTC
 20896 ;;		i2_lcdInst
 20897 ;;		i2_printf
 20898 ;;		i2_strcpy
 20899 ;; This function is called by:
 20900 ;;		i2_change_state_to_menu_start
 20901 ;; This function uses a non-reentrant model
 20902 ;;
 20903                           
 20904                           	psect	text69
 20905  003250                     __ptext69:
 20906                           	opt stack 0
 20907  003250                     i2_printRTC:
 20908                           	opt stack 19
 20909                           
 20910                           ;RTC.c: 64: getRTC();
 20911                           
 20912                           ;incstack = 0
 20913  003250  EC5A  F027         	call	i2_getRTC	;wreg free
 20914                           
 20915                           ;RTC.c: 65: char month[] = "MMM";
 20916  003254  C14D  F03D         	movff	printRTC@F3237,i2printRTC@month
 20917  003258  C14E  F03E         	movff	printRTC@F3237+1,i2printRTC@month+1
 20918  00325C  C14F  F03F         	movff	printRTC@F3237+2,i2printRTC@month+2
 20919  003260  C150  F040         	movff	printRTC@F3237+3,i2printRTC@month+3
 20920                           
 20921                           ;RTC.c: 66: int INT_time[7];
 20922                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 20923  003264  0E00               	movlw	0
 20924  003266  6E42               	movwf	i2printRTC@i+1,c
 20925  003268  0E00               	movlw	0
 20926  00326A  6E41               	movwf	i2printRTC@i,c
 20927  00326C  BE42               	btfsc	i2printRTC@i+1,7,c
 20928  00326E  D006               	goto	i2l7535
 20929  003270  5042               	movf	i2printRTC@i+1,w,c
 20930  003272  E135               	bnz	i2l627
 20931  003274  0E07               	movlw	7
 20932  003276  5C41               	subwf	i2printRTC@i,w,c
 20933  003278  B0D8               	btfsc	status,0,c
 20934  00327A  D031               	goto	i2l627
 20935  00327C                     i2l7535:
 20936                           
 20937                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 20938  00327C  0E1C               	movlw	low _time
 20939  00327E  2441               	addwf	i2printRTC@i,w,c
 20940  003280  6ED9               	movwf	fsr2l,c
 20941  003282  0E01               	movlw	high _time
 20942  003284  2042               	addwfc	i2printRTC@i+1,w,c
 20943  003286  6EDA               	movwf	fsr2h,c
 20944  003288  50DF               	movf	indf2,w,c
 20945  00328A  6E2A               	movwf	??i2_printRTC& (0+255),c
 20946  00328C  3A2A               	swapf	??i2_printRTC,f,c
 20947  00328E  0E0F               	movlw	15
 20948  003290  162A               	andwf	??i2_printRTC,f,c
 20949  003292  0E0F               	movlw	15
 20950  003294  162A               	andwf	??i2_printRTC,f,c
 20951  003296  502A               	movf	??i2_printRTC,w,c
 20952  003298  0D0A               	mullw	10
 20953  00329A  0E1C               	movlw	low _time
 20954  00329C  2441               	addwf	i2printRTC@i,w,c
 20955  00329E  6ED9               	movwf	fsr2l,c
 20956  0032A0  0E01               	movlw	high _time
 20957  0032A2  2042               	addwfc	i2printRTC@i+1,w,c
 20958  0032A4  6EDA               	movwf	fsr2h,c
 20959  0032A6  50DF               	movf	indf2,w,c
 20960  0032A8  0B0F               	andlw	15
 20961  0032AA  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 20962  0032AC  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 20963  0032AE  50F3               	movf	prodl,w,c
 20964  0032B0  262B               	addwf	??i2_printRTC+1,f,c
 20965  0032B2  50F4               	movf	prodh,w,c
 20966  0032B4  222C               	addwfc	??i2_printRTC+2,f,c
 20967  0032B6  90D8               	bcf	status,0,c
 20968  0032B8  3441               	rlcf	i2printRTC@i,w,c
 20969  0032BA  6ED9               	movwf	fsr2l,c
 20970  0032BC  3442               	rlcf	i2printRTC@i+1,w,c
 20971  0032BE  6EDA               	movwf	fsr2h,c
 20972  0032C0  0E2D               	movlw	low i2printRTC@INT_time
 20973  0032C2  26D9               	addwf	fsr2l,f,c
 20974  0032C4  0E00               	movlw	high i2printRTC@INT_time
 20975  0032C6  22DA               	addwfc	fsr2h,f,c
 20976  0032C8  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 20977  0032CC  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 20978  0032D0  4A41               	infsnz	i2printRTC@i,f,c
 20979  0032D2  2A42               	incf	i2printRTC@i+1,f,c
 20980  0032D4  BE42               	btfsc	i2printRTC@i+1,7,c
 20981  0032D6  D7D2               	goto	i2l7535
 20982  0032D8  5042               	movf	i2printRTC@i+1,w,c
 20983  0032DA  E101               	bnz	i2u615_40
 20984  0032DC  D7CB               	goto	L16
 20985  0032DE                     i2u615_40:
 20986  0032DE                     i2l627:
 20987                           
 20988                           ;RTC.c: 69: }
 20989                           ;RTC.c: 70: int RTC_month = INT_time[5];
 20990  0032DE  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 20991  0032E2  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 20992                           
 20993                           ;RTC.c: 72: switch(RTC_month){
 20994  0032E6  D084               	goto	i2l7567
 20995  0032E8                     i2l7541:
 20996                           
 20997                           ;RTC.c: 74: strcpy(month, "JAN");
 20998  0032E8  0E3D               	movlw	low i2printRTC@month
 20999  0032EA  6E01               	movwf	i2strcpy@to,c
 21000  0032EC  0E00               	movlw	high i2printRTC@month
 21001  0032EE  6E02               	movwf	i2strcpy@to+1,c
 21002  0032F0  0EDA               	movlw	low STR_8
 21003  0032F2  6E03               	movwf	i2strcpy@from,c
 21004  0032F4  0EFF               	movlw	high STR_8
 21005  0032F6  6E04               	movwf	i2strcpy@from+1,c
 21006  0032F8  ECE5  F02A         	call	i2_strcpy	;wreg free
 21007                           
 21008                           ;RTC.c: 75: break;
 21009  0032FC  D0A6               	goto	i2l7569
 21010  0032FE                     i2l7543:
 21011                           
 21012                           ;RTC.c: 77: strcpy(month, "FEB");
 21013  0032FE  0E3D               	movlw	low i2printRTC@month
 21014  003300  6E01               	movwf	i2strcpy@to,c
 21015  003302  0E00               	movlw	high i2printRTC@month
 21016  003304  6E02               	movwf	i2strcpy@to+1,c
 21017  003306  0ECA               	movlw	low STR_9
 21018  003308  6E03               	movwf	i2strcpy@from,c
 21019  00330A  0EFF               	movlw	high STR_9
 21020  00330C  6E04               	movwf	i2strcpy@from+1,c
 21021  00330E  ECE5  F02A         	call	i2_strcpy	;wreg free
 21022                           
 21023                           ;RTC.c: 78: break;
 21024  003312  D09B               	goto	i2l7569
 21025  003314                     i2l7545:
 21026                           
 21027                           ;RTC.c: 80: strcpy(month, "MAR");
 21028  003314  0E3D               	movlw	low i2printRTC@month
 21029  003316  6E01               	movwf	i2strcpy@to,c
 21030  003318  0E00               	movlw	high i2printRTC@month
 21031  00331A  6E02               	movwf	i2strcpy@to+1,c
 21032  00331C  0EE6               	movlw	low STR_10
 21033  00331E  6E03               	movwf	i2strcpy@from,c
 21034  003320  0EFF               	movlw	high STR_10
 21035  003322  6E04               	movwf	i2strcpy@from+1,c
 21036  003324  ECE5  F02A         	call	i2_strcpy	;wreg free
 21037                           
 21038                           ;RTC.c: 81: break;
 21039  003328  D090               	goto	i2l7569
 21040  00332A                     i2l7547:
 21041                           
 21042                           ;RTC.c: 83: strcpy(month, "APR");
 21043  00332A  0E3D               	movlw	low i2printRTC@month
 21044  00332C  6E01               	movwf	i2strcpy@to,c
 21045  00332E  0E00               	movlw	high i2printRTC@month
 21046  003330  6E02               	movwf	i2strcpy@to+1,c
 21047  003332  0EEA               	movlw	low STR_11
 21048  003334  6E03               	movwf	i2strcpy@from,c
 21049  003336  0EFF               	movlw	high STR_11
 21050  003338  6E04               	movwf	i2strcpy@from+1,c
 21051  00333A  ECE5  F02A         	call	i2_strcpy	;wreg free
 21052                           
 21053                           ;RTC.c: 84: break;
 21054  00333E  D085               	goto	i2l7569
 21055  003340                     i2l7549:
 21056                           
 21057                           ;RTC.c: 86: strcpy(month, "MAY");
 21058  003340  0E3D               	movlw	low i2printRTC@month
 21059  003342  6E01               	movwf	i2strcpy@to,c
 21060  003344  0E00               	movlw	high i2printRTC@month
 21061  003346  6E02               	movwf	i2strcpy@to+1,c
 21062  003348  0EFA               	movlw	low STR_12
 21063  00334A  6E03               	movwf	i2strcpy@from,c
 21064  00334C  0EFF               	movlw	high STR_12
 21065  00334E  6E04               	movwf	i2strcpy@from+1,c
 21066  003350  ECE5  F02A         	call	i2_strcpy	;wreg free
 21067                           
 21068                           ;RTC.c: 87: break;
 21069  003354  D07A               	goto	i2l7569
 21070  003356                     i2l7551:
 21071                           
 21072                           ;RTC.c: 89: strcpy(month, "JUN");
 21073  003356  0E3D               	movlw	low i2printRTC@month
 21074  003358  6E01               	movwf	i2strcpy@to,c
 21075  00335A  0E00               	movlw	high i2printRTC@month
 21076  00335C  6E02               	movwf	i2strcpy@to+1,c
 21077  00335E  0EDE               	movlw	low STR_13
 21078  003360  6E03               	movwf	i2strcpy@from,c
 21079  003362  0EFF               	movlw	high STR_13
 21080  003364  6E04               	movwf	i2strcpy@from+1,c
 21081  003366  ECE5  F02A         	call	i2_strcpy	;wreg free
 21082                           
 21083                           ;RTC.c: 90: break;
 21084  00336A  D06F               	goto	i2l7569
 21085  00336C                     i2l7553:
 21086                           
 21087                           ;RTC.c: 92: strcpy(month, "JUL");
 21088  00336C  0E3D               	movlw	low i2printRTC@month
 21089  00336E  6E01               	movwf	i2strcpy@to,c
 21090  003370  0E00               	movlw	high i2printRTC@month
 21091  003372  6E02               	movwf	i2strcpy@to+1,c
 21092  003374  0ED6               	movlw	low STR_14
 21093  003376  6E03               	movwf	i2strcpy@from,c
 21094  003378  0EFF               	movlw	high STR_14
 21095  00337A  6E04               	movwf	i2strcpy@from+1,c
 21096  00337C  ECE5  F02A         	call	i2_strcpy	;wreg free
 21097                           
 21098                           ;RTC.c: 93: break;
 21099  003380  D064               	goto	i2l7569
 21100  003382                     i2l7555:
 21101                           
 21102                           ;RTC.c: 95: strcpy(month, "AUG");
 21103  003382  0E3D               	movlw	low i2printRTC@month
 21104  003384  6E01               	movwf	i2strcpy@to,c
 21105  003386  0E00               	movlw	high i2printRTC@month
 21106  003388  6E02               	movwf	i2strcpy@to+1,c
 21107  00338A  0ED2               	movlw	low STR_15
 21108  00338C  6E03               	movwf	i2strcpy@from,c
 21109  00338E  0EFF               	movlw	high STR_15
 21110  003390  6E04               	movwf	i2strcpy@from+1,c
 21111  003392  ECE5  F02A         	call	i2_strcpy	;wreg free
 21112                           
 21113                           ;RTC.c: 96: break;
 21114  003396  D059               	goto	i2l7569
 21115  003398                     i2l7557:
 21116                           
 21117                           ;RTC.c: 98: strcpy(month, "SEP");
 21118  003398  0E3D               	movlw	low i2printRTC@month
 21119  00339A  6E01               	movwf	i2strcpy@to,c
 21120  00339C  0E00               	movlw	high i2printRTC@month
 21121  00339E  6E02               	movwf	i2strcpy@to+1,c
 21122  0033A0  0EE2               	movlw	low STR_16
 21123  0033A2  6E03               	movwf	i2strcpy@from,c
 21124  0033A4  0EFF               	movlw	high STR_16
 21125  0033A6  6E04               	movwf	i2strcpy@from+1,c
 21126  0033A8  ECE5  F02A         	call	i2_strcpy	;wreg free
 21127                           
 21128                           ;RTC.c: 99: break;
 21129  0033AC  D04E               	goto	i2l7569
 21130  0033AE                     i2l7559:
 21131                           
 21132                           ;RTC.c: 101: strcpy(month, "OCT");
 21133  0033AE  0E3D               	movlw	low i2printRTC@month
 21134  0033B0  6E01               	movwf	i2strcpy@to,c
 21135  0033B2  0E00               	movlw	high i2printRTC@month
 21136  0033B4  6E02               	movwf	i2strcpy@to+1,c
 21137  0033B6  0EF2               	movlw	low STR_17
 21138  0033B8  6E03               	movwf	i2strcpy@from,c
 21139  0033BA  0EFF               	movlw	high STR_17
 21140  0033BC  6E04               	movwf	i2strcpy@from+1,c
 21141  0033BE  ECE5  F02A         	call	i2_strcpy	;wreg free
 21142                           
 21143                           ;RTC.c: 102: break;
 21144  0033C2  D043               	goto	i2l7569
 21145  0033C4                     i2l7561:
 21146                           
 21147                           ;RTC.c: 104: strcpy(month, "NOV");
 21148  0033C4  0E3D               	movlw	low i2printRTC@month
 21149  0033C6  6E01               	movwf	i2strcpy@to,c
 21150  0033C8  0E00               	movlw	high i2printRTC@month
 21151  0033CA  6E02               	movwf	i2strcpy@to+1,c
 21152  0033CC  0EF6               	movlw	low STR_18
 21153  0033CE  6E03               	movwf	i2strcpy@from,c
 21154  0033D0  0EFF               	movlw	high STR_18
 21155  0033D2  6E04               	movwf	i2strcpy@from+1,c
 21156  0033D4  ECE5  F02A         	call	i2_strcpy	;wreg free
 21157                           
 21158                           ;RTC.c: 105: break;
 21159  0033D8  D038               	goto	i2l7569
 21160  0033DA                     i2l7563:
 21161                           
 21162                           ;RTC.c: 107: strcpy(month, "DEC");
 21163  0033DA  0E3D               	movlw	low i2printRTC@month
 21164  0033DC  6E01               	movwf	i2strcpy@to,c
 21165  0033DE  0E00               	movlw	high i2printRTC@month
 21166  0033E0  6E02               	movwf	i2strcpy@to+1,c
 21167  0033E2  0ECE               	movlw	low STR_19
 21168  0033E4  6E03               	movwf	i2strcpy@from,c
 21169  0033E6  0EFF               	movlw	high STR_19
 21170  0033E8  6E04               	movwf	i2strcpy@from+1,c
 21171  0033EA  ECE5  F02A         	call	i2_strcpy	;wreg free
 21172                           
 21173                           ;RTC.c: 109: }
 21174                           
 21175                           ;RTC.c: 108: break;
 21176  0033EE  D02D               	goto	i2l7569
 21177  0033F0                     i2l7567:
 21178  0033F0  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 21179  0033F4  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 21180                           
 21181                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21182                           ; Switch size 1, requested type "space"
 21183                           ; Number of cases is 1, Range of values is 0 to 0
 21184                           ; switch strategies available:
 21185                           ; Name         Instructions Cycles
 21186                           ; simple_byte            4     3 (average)
 21187                           ;	Chosen strategy is simple_byte
 21188  0033F8  502B               	movf	??i2_printRTC+1,w,c
 21189  0033FA  0A00               	xorlw	0	; case 0
 21190  0033FC  A4D8               	btfss	status,2,c
 21191  0033FE  D025               	goto	i2l7569
 21192                           
 21193                           ; Switch size 1, requested type "space"
 21194                           ; Number of cases is 12, Range of values is 1 to 12
 21195                           ; switch strategies available:
 21196                           ; Name         Instructions Cycles
 21197                           ; simple_byte           37    19 (average)
 21198                           ;	Chosen strategy is simple_byte
 21199  003400  502A               	movf	??i2_printRTC,w,c
 21200  003402  0A01               	xorlw	1	; case 1
 21201  003404  B4D8               	btfsc	status,2,c
 21202  003406  D770               	goto	i2l7541
 21203  003408  0A03               	xorlw	3	; case 2
 21204  00340A  B4D8               	btfsc	status,2,c
 21205  00340C  D778               	goto	i2l7543
 21206  00340E  0A01               	xorlw	1	; case 3
 21207  003410  B4D8               	btfsc	status,2,c
 21208  003412  D780               	goto	i2l7545
 21209  003414  0A07               	xorlw	7	; case 4
 21210  003416  B4D8               	btfsc	status,2,c
 21211  003418  D788               	goto	i2l7547
 21212  00341A  0A01               	xorlw	1	; case 5
 21213  00341C  B4D8               	btfsc	status,2,c
 21214  00341E  D790               	goto	i2l7549
 21215  003420  0A03               	xorlw	3	; case 6
 21216  003422  B4D8               	btfsc	status,2,c
 21217  003424  D798               	goto	i2l7551
 21218  003426  0A01               	xorlw	1	; case 7
 21219  003428  B4D8               	btfsc	status,2,c
 21220  00342A  D7A0               	goto	i2l7553
 21221  00342C  0A0F               	xorlw	15	; case 8
 21222  00342E  B4D8               	btfsc	status,2,c
 21223  003430  D7A8               	goto	i2l7555
 21224  003432  0A01               	xorlw	1	; case 9
 21225  003434  B4D8               	btfsc	status,2,c
 21226  003436  D7B0               	goto	i2l7557
 21227  003438  0A03               	xorlw	3	; case 10
 21228  00343A  B4D8               	btfsc	status,2,c
 21229  00343C  D7B8               	goto	i2l7559
 21230  00343E  0A01               	xorlw	1	; case 11
 21231  003440  B4D8               	btfsc	status,2,c
 21232  003442  D7C0               	goto	i2l7561
 21233  003444  0A07               	xorlw	7	; case 12
 21234  003446  B4D8               	btfsc	status,2,c
 21235  003448  D7C8               	goto	i2l7563
 21236  00344A                     i2l7569:
 21237                           
 21238                           ;RTC.c: 110: lcdInst(0b10000000);;
 21239  00344A  0E80               	movlw	128
 21240  00344C  EC47  F02D         	call	i2_lcdInst
 21241                           
 21242                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 21243  003450  0EA6               	movlw	low STR_21
 21244  003452  6E0D               	movwf	i2printf@f,c
 21245  003454  0EFA               	movlw	high STR_21
 21246  003456  6E0E               	movwf	i2printf@f+1,c
 21247  003458  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 21248  00345C  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 21249  003460  0E3D               	movlw	low i2printRTC@month
 21250  003462  6E11               	movwf	?i2_printf+4,c
 21251  003464  0E00               	movlw	high i2printRTC@month
 21252  003466  6E12               	movwf	?i2_printf+5,c
 21253  003468  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 21254  00346C  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 21255  003470  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 21256  003474  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 21257  003478  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 21258  00347C  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 21259  003480  ECA2  F011         	call	i2_printf	;wreg free
 21260  003484  0012               	return		;funcret
 21261  003486                     __end_ofi2_printRTC:
 21262                           	opt stack 0
 21263                           pclatu	equ	0xFFB
 21264                           pclath	equ	0xFFA
 21265                           tblptru	equ	0xFF8
 21266                           tblptrh	equ	0xFF7
 21267                           tblptrl	equ	0xFF6
 21268                           tablat	equ	0xFF5
 21269                           prodh	equ	0xFF4
 21270                           prodl	equ	0xFF3
 21271                           intcon	equ	0xFF2
 21272                           intcon2	equ	0xFF1
 21273                           intcon3	equ	0xFF0
 21274                           indf0	equ	0xFEF
 21275                           postinc0	equ	0xFEE
 21276                           fsr0h	equ	0xFEA
 21277                           fsr0l	equ	0xFE9
 21278                           wreg	equ	0xFE8
 21279                           postdec1	equ	0xFE5
 21280                           fsr1h	equ	0xFE2
 21281                           fsr1l	equ	0xFE1
 21282                           indf2	equ	0xFDF
 21283                           postinc2	equ	0xFDE
 21284                           postdec2	equ	0xFDD
 21285                           fsr2h	equ	0xFDA
 21286                           fsr2l	equ	0xFD9
 21287                           status	equ	0xFD8
 21288                           
 21289 ;; *************** function i2_strcpy *****************
 21290 ;; Defined at:
 21291 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 21292 ;; Parameters:    Size  Location     Type
 21293 ;;  to              2    0[COMRAM] PTR unsigned char 
 21294 ;;		 -> printRTC@month(4), UI@month(4), 
 21295 ;;  from            2    2[COMRAM] PTR const unsigned char 
 21296 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 21297 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 21298 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 21299 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 21300 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 21301 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 21302 ;;		 -> STR_8(4), 
 21303 ;; Auto vars:     Size  Location     Type
 21304 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 21305 ;;		 -> printRTC@month(4), UI@month(4), 
 21306 ;; Return value:  Size  Location     Type
 21307 ;;                  2    0[COMRAM] PTR unsigned char 
 21308 ;; Registers used:
 21309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 21310 ;; Tracked objects:
 21311 ;;		On entry : 0/0
 21312 ;;		On exit  : 0/0
 21313 ;;		Unchanged: 0/0
 21314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21315 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21316 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21318 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21319 ;;Total ram usage:        6 bytes
 21320 ;; Hardware stack levels used:    1
 21321 ;; This function calls:
 21322 ;;		Nothing
 21323 ;; This function is called by:
 21324 ;;		i2_printRTC
 21325 ;; This function uses a non-reentrant model
 21326 ;;
 21327                           
 21328                           	psect	text70
 21329  0055CA                     __ptext70:
 21330                           	opt stack 0
 21331  0055CA                     i2_strcpy:
 21332                           	opt stack 21
 21333                           
 21334                           ;incstack = 0
 21335  0055CA  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 21336  0055CE  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 21337  0055D2  D004               	goto	i2l7093
 21338  0055D4                     i2l7091:
 21339  0055D4  4A05               	infsnz	i2strcpy@cp,f,c
 21340  0055D6  2A06               	incf	i2strcpy@cp+1,f,c
 21341  0055D8  4A03               	infsnz	i2strcpy@from,f,c
 21342  0055DA  2A04               	incf	i2strcpy@from+1,f,c
 21343  0055DC                     i2l7093:
 21344  0055DC  C003  FFF6         	movff	i2strcpy@from,tblptrl
 21345  0055E0  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 21346  0055E4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21347  0055E4  6AF8               	clrf	tblptru,c
 21348  0055E6                     	endif
 21349  0055E6                     	if	0	;tblptru may be non-zero
 21350  0055E6                     	endif
 21351  0055E6  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 21352  0055EA  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 21353  0055EE  0008               	tblrd		*
 21354  0055F0  CFF5 FFDF          	movff	tablat,indf2
 21355  0055F4  50DF               	movf	indf2,w,c
 21356  0055F6  B4D8               	btfsc	status,2,c
 21357  0055F8  0012               	return	
 21358  0055FA  D7EC               	goto	i2l7091
 21359  0055FC                     __end_ofi2_strcpy:
 21360                           	opt stack 0
 21361                           pclatu	equ	0xFFB
 21362                           pclath	equ	0xFFA
 21363                           tblptru	equ	0xFF8
 21364                           tblptrh	equ	0xFF7
 21365                           tblptrl	equ	0xFF6
 21366                           tablat	equ	0xFF5
 21367                           prodh	equ	0xFF4
 21368                           prodl	equ	0xFF3
 21369                           intcon	equ	0xFF2
 21370                           intcon2	equ	0xFF1
 21371                           intcon3	equ	0xFF0
 21372                           indf0	equ	0xFEF
 21373                           postinc0	equ	0xFEE
 21374                           fsr0h	equ	0xFEA
 21375                           fsr0l	equ	0xFE9
 21376                           wreg	equ	0xFE8
 21377                           postdec1	equ	0xFE5
 21378                           fsr1h	equ	0xFE2
 21379                           fsr1l	equ	0xFE1
 21380                           indf2	equ	0xFDF
 21381                           postinc2	equ	0xFDE
 21382                           postdec2	equ	0xFDD
 21383                           fsr2h	equ	0xFDA
 21384                           fsr2l	equ	0xFD9
 21385                           status	equ	0xFD8
 21386                           
 21387 ;; *************** function _inputHandler *****************
 21388 ;; Defined at:
 21389 ;;		line 375 in file "UI.c"
 21390 ;; Parameters:    Size  Location     Type
 21391 ;;		None
 21392 ;; Auto vars:     Size  Location     Type
 21393 ;;		None
 21394 ;; Return value:  Size  Location     Type
 21395 ;;                  2   41[COMRAM] int 
 21396 ;; Registers used:
 21397 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21398 ;; Tracked objects:
 21399 ;;		On entry : 0/0
 21400 ;;		On exit  : 0/0
 21401 ;;		Unchanged: 0/0
 21402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21403 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21405 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21406 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21407 ;;Total ram usage:        4 bytes
 21408 ;; Hardware stack levels used:    1
 21409 ;; Hardware stack levels required when called:    4
 21410 ;; This function calls:
 21411 ;;		_change_state_to_logs_11
 21412 ;;		_change_state_to_logs_12
 21413 ;;		_change_state_to_logs_22
 21414 ;;		_change_state_to_logs_23
 21415 ;;		_change_state_to_logs_33
 21416 ;;		_change_state_to_logs_34
 21417 ;;		_change_state_to_menu_11
 21418 ;;		_change_state_to_menu_23
 21419 ;;		i2_change_state_to_menu_12
 21420 ;;		i2_change_state_to_menu_22
 21421 ;; This function is called by:
 21422 ;;		_updateMenu
 21423 ;; This function uses a non-reentrant model
 21424 ;;
 21425                           
 21426                           	psect	text71
 21427  0036A2                     __ptext71:
 21428                           	opt stack 0
 21429  0036A2                     _inputHandler:
 21430                           	opt stack 18
 21431                           
 21432                           ;UI.c: 380: if(firstboot){
 21433                           
 21434                           ;incstack = 0
 21435  0036A2  0101               	movlb	1	; () banked
 21436  0036A4  5139               	movf	_firstboot& (0+255),w,b
 21437  0036A6  0101               	movlb	1	; () banked
 21438  0036A8  113A               	iorwf	(_firstboot+1)& (0+255),w,b
 21439  0036AA  B4D8               	btfsc	status,2,c
 21440  0036AC  D00C               	goto	i2l7637
 21441                           
 21442                           ; BSR set to: 1
 21443                           ;UI.c: 381: change_state_to_menu_11();
 21444  0036AE  EC5E  F02B         	call	_change_state_to_menu_11	;wreg free
 21445                           
 21446                           ;UI.c: 382: firstboot = 0;
 21447  0036B2  0E00               	movlw	0
 21448  0036B4  0101               	movlb	1	; () banked
 21449  0036B6  6F3A               	movwf	(_firstboot+1)& (0+255),b
 21450  0036B8  0E00               	movlw	0
 21451  0036BA  6F39               	movwf	_firstboot& (0+255),b
 21452                           
 21453                           ; BSR set to: 1
 21454                           ;UI.c: 383: return 0;
 21455  0036BC  0E00               	movlw	0
 21456  0036BE  6E2B               	movwf	?_inputHandler+1,c
 21457  0036C0  0E00               	movlw	0
 21458  0036C2  6E2A               	movwf	?_inputHandler,c
 21459                           
 21460                           ; BSR set to: 1
 21461  0036C4  0012               	return	
 21462  0036C6                     i2l7637:
 21463                           
 21464                           ; BSR set to: 1
 21465                           ;UI.c: 384: }
 21466                           ;UI.c: 385: if (logstate){
 21467  0036C6  0100               	movlb	0	; () banked
 21468  0036C8  51F8               	movf	_logstate& (0+255),w,b
 21469  0036CA  0100               	movlb	0	; () banked
 21470  0036CC  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 21471  0036CE  B4D8               	btfsc	status,2,c
 21472  0036D0  D0C7               	goto	i2l7755
 21473                           
 21474                           ; BSR set to: 0
 21475                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 21476  0036D2  0E43               	movlw	67
 21477  0036D4  187D               	xorwf	_input,w,c	;volatile
 21478  0036D6  A4D8               	btfss	status,2,c
 21479  0036D8  D012               	goto	i2l7655
 21480                           
 21481                           ; BSR set to: 0
 21482  0036DA  B281               	btfsc	3969,1,c	;volatile
 21483  0036DC  D009               	goto	i2l7647
 21484  0036DE  D00F               	goto	i2l7655
 21485  0036E0                     i2l7645:
 21486                           
 21487                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 21488  0036E0  0E68               	movlw	104
 21489  0036E2  6E2C               	movwf	??_inputHandler& (0+255),c
 21490  0036E4  0EE4               	movlw	228
 21491  0036E6                     i2u1118_47:
 21492  0036E6  2EE8               	decfsz	wreg,f,c
 21493  0036E8  D7FE               	bra	i2u1118_47
 21494  0036EA  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 21495  0036EC  D7FC               	bra	i2u1118_47
 21496  0036EE  D000               	nop2	
 21497  0036F0                     i2l7647:
 21498  0036F0  B281               	btfsc	3969,1,c	;volatile
 21499  0036F2  D7F6               	goto	i2l7645
 21500  0036F4                     i2l7649:
 21501                           
 21502                           ;UI.c: 390: }
 21503                           ;UI.c: 391: return 0;
 21504  0036F4  0E00               	movlw	0
 21505  0036F6  6E2B               	movwf	?_inputHandler+1,c
 21506  0036F8  0E00               	movlw	0
 21507  0036FA  6E2A               	movwf	?_inputHandler,c
 21508  0036FC  0012               	return	
 21509  0036FE                     i2l7655:
 21510                           
 21511                           ;UI.c: 393: else if (input == 'D'){
 21512  0036FE  0E44               	movlw	68
 21513  003700  187D               	xorwf	_input,w,c	;volatile
 21514  003702  A4D8               	btfss	status,2,c
 21515  003704  D7F7               	goto	i2l7649
 21516                           
 21517                           ;UI.c: 395: logstate = 0;
 21518  003706  0E00               	movlw	0
 21519  003708  0100               	movlb	0	; () banked
 21520  00370A  6FF9               	movwf	(_logstate+1)& (0+255),b
 21521  00370C  0E00               	movlw	0
 21522  00370E  6FF8               	movwf	_logstate& (0+255),b
 21523                           
 21524                           ;UI.c: 396: switch(cur_state){
 21525  003710  D012               	goto	i2l7673
 21526  003712                     i2l7659:
 21527                           
 21528                           ;UI.c: 398: change_state_to_logs_11();
 21529  003712  ECD6  F02B         	call	_change_state_to_logs_11	;wreg free
 21530                           
 21531                           ;UI.c: 399: break;
 21532  003716  D7EE               	goto	i2l7649
 21533  003718                     i2l7661:
 21534                           
 21535                           ;UI.c: 401: change_state_to_logs_12();
 21536  003718  ECBE  F02B         	call	_change_state_to_logs_12	;wreg free
 21537                           
 21538                           ;UI.c: 402: break;
 21539  00371C  D7EB               	goto	i2l7649
 21540  00371E                     i2l7663:
 21541                           
 21542                           ;UI.c: 404: change_state_to_logs_22();
 21543  00371E  ECA6  F02B         	call	_change_state_to_logs_22	;wreg free
 21544                           
 21545                           ;UI.c: 405: break;
 21546  003722  D7E8               	goto	i2l7649
 21547  003724                     i2l7665:
 21548                           
 21549                           ;UI.c: 407: change_state_to_logs_23();
 21550  003724  EC05  F02C         	call	_change_state_to_logs_23	;wreg free
 21551                           
 21552                           ;UI.c: 408: break;
 21553  003728  D7E5               	goto	i2l7649
 21554  00372A                     i2l7667:
 21555                           
 21556                           ;UI.c: 410: change_state_to_logs_33();
 21557  00372A  EC8E  F02B         	call	_change_state_to_logs_33	;wreg free
 21558                           
 21559                           ;UI.c: 411: break;
 21560  00372E  D7E2               	goto	i2l7649
 21561  003730                     i2l7669:
 21562                           
 21563                           ;UI.c: 413: change_state_to_logs_34();
 21564  003730  EC76  F02B         	call	_change_state_to_logs_34	;wreg free
 21565                           
 21566                           ;UI.c: 415: }
 21567                           
 21568                           ;UI.c: 414: break;
 21569  003734  D7DF               	goto	i2l7649
 21570  003736                     i2l7673:
 21571  003736  C0E6  F02C         	movff	_cur_state,??_inputHandler
 21572  00373A  C0E7  F02D         	movff	_cur_state+1,??_inputHandler+1
 21573                           
 21574                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 21575                           ; Switch size 1, requested type "space"
 21576                           ; Number of cases is 2, Range of values is 3 to 4
 21577                           ; switch strategies available:
 21578                           ; Name         Instructions Cycles
 21579                           ; simple_byte            7     4 (average)
 21580                           ;	Chosen strategy is simple_byte
 21581  00373E  502D               	movf	??_inputHandler+1,w,c
 21582  003740  0A03               	xorlw	3	; case 3
 21583  003742  B4D8               	btfsc	status,2,c
 21584  003744  D004               	goto	i2l10687
 21585  003746  0A07               	xorlw	7	; case 4
 21586  003748  B4D8               	btfsc	status,2,c
 21587  00374A  D00F               	goto	i2l10689
 21588  00374C  D7D3               	goto	i2l7649
 21589  00374E                     i2l10687:
 21590                           
 21591                           ; Switch size 1, requested type "space"
 21592                           ; Number of cases is 4, Range of values is 243 to 255
 21593                           ; switch strategies available:
 21594                           ; Name         Instructions Cycles
 21595                           ; simple_byte           13     7 (average)
 21596                           ;	Chosen strategy is simple_byte
 21597  00374E  502C               	movf	??_inputHandler,w,c
 21598  003750  0AF3               	xorlw	243	; case 243
 21599  003752  B4D8               	btfsc	status,2,c
 21600  003754  D7DE               	goto	i2l7659
 21601  003756  0A07               	xorlw	7	; case 244
 21602  003758  B4D8               	btfsc	status,2,c
 21603  00375A  D7DE               	goto	i2l7661
 21604  00375C  0A0A               	xorlw	10	; case 254
 21605  00375E  B4D8               	btfsc	status,2,c
 21606  003760  D7DE               	goto	i2l7663
 21607  003762  0A01               	xorlw	1	; case 255
 21608  003764  B4D8               	btfsc	status,2,c
 21609  003766  D7DE               	goto	i2l7665
 21610  003768  D7C5               	goto	i2l7649
 21611  00376A                     i2l10689:
 21612                           
 21613                           ; Switch size 1, requested type "space"
 21614                           ; Number of cases is 2, Range of values is 9 to 10
 21615                           ; switch strategies available:
 21616                           ; Name         Instructions Cycles
 21617                           ; simple_byte            7     4 (average)
 21618                           ;	Chosen strategy is simple_byte
 21619  00376A  502C               	movf	??_inputHandler,w,c
 21620  00376C  0A09               	xorlw	9	; case 9
 21621  00376E  B4D8               	btfsc	status,2,c
 21622  003770  D7DC               	goto	i2l7667
 21623  003772  0A03               	xorlw	3	; case 10
 21624  003774  B4D8               	btfsc	status,2,c
 21625  003776  D7DC               	goto	i2l7669
 21626  003778  D7BD               	goto	i2l7649
 21627  00377A                     i2l7685:
 21628                           
 21629                           ;UI.c: 425: if(cur_state == 11){
 21630  00377A  0E0B               	movlw	11
 21631  00377C  0100               	movlb	0	; () banked
 21632  00377E  19E6               	xorwf	_cur_state& (0+255),w,b
 21633  003780  0100               	movlb	0	; () banked
 21634  003782  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21635  003784  A4D8               	btfss	status,2,c
 21636  003786  D005               	goto	i2l7693
 21637                           
 21638                           ; BSR set to: 0
 21639                           ;UI.c: 426: return 0;
 21640  003788  0E00               	movlw	0
 21641  00378A  6E2B               	movwf	?_inputHandler+1,c
 21642  00378C  0E00               	movlw	0
 21643  00378E  6E2A               	movwf	?_inputHandler,c
 21644                           
 21645                           ; BSR set to: 0
 21646  003790  0012               	return	
 21647  003792                     i2l7693:
 21648                           
 21649                           ; BSR set to: 0
 21650                           ;UI.c: 428: else{
 21651                           ;UI.c: 429: change_state_to_menu_11();
 21652  003792  EC5E  F02B         	call	_change_state_to_menu_11	;wreg free
 21653                           
 21654                           ;UI.c: 430: }
 21655                           ;UI.c: 431: return 0;
 21656  003796  0E00               	movlw	0
 21657  003798  6E2B               	movwf	?_inputHandler+1,c
 21658  00379A  0E00               	movlw	0
 21659  00379C  6E2A               	movwf	?_inputHandler,c
 21660  00379E  0012               	return	
 21661  0037A0                     i2l7699:
 21662                           
 21663                           ;UI.c: 433: if(cur_state == 22 || cur_state == 12){
 21664  0037A0  0E16               	movlw	22
 21665  0037A2  0100               	movlb	0	; () banked
 21666  0037A4  19E6               	xorwf	_cur_state& (0+255),w,b
 21667  0037A6  0100               	movlb	0	; () banked
 21668  0037A8  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21669  0037AA  B4D8               	btfsc	status,2,c
 21670  0037AC  D007               	goto	i2l7703
 21671                           
 21672                           ; BSR set to: 0
 21673  0037AE  0E0C               	movlw	12
 21674  0037B0  0100               	movlb	0	; () banked
 21675  0037B2  19E6               	xorwf	_cur_state& (0+255),w,b
 21676  0037B4  0100               	movlb	0	; () banked
 21677  0037B6  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21678  0037B8  A4D8               	btfss	status,2,c
 21679  0037BA  D005               	goto	i2l7709
 21680  0037BC                     i2l7703:
 21681                           
 21682                           ; BSR set to: 0
 21683                           ;UI.c: 434: return 0;
 21684  0037BC  0E00               	movlw	0
 21685  0037BE  6E2B               	movwf	?_inputHandler+1,c
 21686  0037C0  0E00               	movlw	0
 21687  0037C2  6E2A               	movwf	?_inputHandler,c
 21688                           
 21689                           ; BSR set to: 0
 21690  0037C4  0012               	return	
 21691  0037C6                     i2l7709:
 21692                           
 21693                           ; BSR set to: 0
 21694                           ;UI.c: 436: else if(cur_state == 23){
 21695  0037C6  0E17               	movlw	23
 21696  0037C8  0100               	movlb	0	; () banked
 21697  0037CA  19E6               	xorwf	_cur_state& (0+255),w,b
 21698  0037CC  0100               	movlb	0	; () banked
 21699  0037CE  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21700  0037D0  A4D8               	btfss	status,2,c
 21701  0037D2  D003               	goto	i2l7713
 21702                           
 21703                           ; BSR set to: 0
 21704                           ;UI.c: 437: change_state_to_menu_22();
 21705  0037D4  EC16  F02B         	call	i2_change_state_to_menu_22	;wreg free
 21706                           
 21707                           ;UI.c: 438: }
 21708  0037D8  D002               	goto	i2l7715
 21709  0037DA                     i2l7713:
 21710                           
 21711                           ;UI.c: 439: else{
 21712                           ;UI.c: 440: change_state_to_menu_12();
 21713  0037DA  EC2E  F02B         	call	i2_change_state_to_menu_12	;wreg free
 21714  0037DE                     i2l7715:
 21715                           
 21716                           ;UI.c: 441: }
 21717                           ;UI.c: 442: return 0;
 21718  0037DE  0E00               	movlw	0
 21719  0037E0  6E2B               	movwf	?_inputHandler+1,c
 21720  0037E2  0E00               	movlw	0
 21721  0037E4  6E2A               	movwf	?_inputHandler,c
 21722  0037E6  0012               	return	
 21723  0037E8                     i2l7719:
 21724                           
 21725                           ;UI.c: 444: if(cur_state == 23){
 21726  0037E8  0E17               	movlw	23
 21727  0037EA  0100               	movlb	0	; () banked
 21728  0037EC  19E6               	xorwf	_cur_state& (0+255),w,b
 21729  0037EE  0100               	movlb	0	; () banked
 21730  0037F0  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21731  0037F2  A4D8               	btfss	status,2,c
 21732  0037F4  D005               	goto	i2l7727
 21733                           
 21734                           ; BSR set to: 0
 21735                           ;UI.c: 445: return 0;
 21736  0037F6  0E00               	movlw	0
 21737  0037F8  6E2B               	movwf	?_inputHandler+1,c
 21738  0037FA  0E00               	movlw	0
 21739  0037FC  6E2A               	movwf	?_inputHandler,c
 21740                           
 21741                           ; BSR set to: 0
 21742  0037FE  0012               	return	
 21743  003800                     i2l7727:
 21744                           
 21745                           ; BSR set to: 0
 21746                           ;UI.c: 447: else{
 21747                           ;UI.c: 448: change_state_to_menu_23();
 21748  003800  EC46  F02B         	call	_change_state_to_menu_23	;wreg free
 21749                           
 21750                           ;UI.c: 449: }
 21751                           ;UI.c: 450: return 0;
 21752  003804  0E00               	movlw	0
 21753  003806  6E2B               	movwf	?_inputHandler+1,c
 21754  003808  0E00               	movlw	0
 21755  00380A  6E2A               	movwf	?_inputHandler,c
 21756  00380C  0012               	return	
 21757  00380E                     i2l7733:
 21758                           
 21759                           ;UI.c: 453: up = 1;
 21760  00380E  0E00               	movlw	0
 21761  003810  6E76               	movwf	_up+1,c
 21762  003812  0E01               	movlw	1
 21763  003814  6E75               	movwf	_up,c
 21764                           
 21765                           ;UI.c: 454: return 1;
 21766  003816  0E00               	movlw	0
 21767  003818  6E2B               	movwf	?_inputHandler+1,c
 21768  00381A  0E01               	movlw	1
 21769  00381C  6E2A               	movwf	?_inputHandler,c
 21770  00381E  0012               	return	
 21771  003820                     i2l7737:
 21772                           
 21773                           ;UI.c: 456: down = 1;
 21774  003820  0E00               	movlw	0
 21775  003822  6E64               	movwf	_down+1,c
 21776  003824  0E01               	movlw	1
 21777  003826  6E63               	movwf	_down,c
 21778                           
 21779                           ;UI.c: 457: return 1;
 21780  003828  0E00               	movlw	0
 21781  00382A  6E2B               	movwf	?_inputHandler+1,c
 21782  00382C  0E01               	movlw	1
 21783  00382E  6E2A               	movwf	?_inputHandler,c
 21784  003830  0012               	return	
 21785  003832                     i2l7741:
 21786                           
 21787                           ;UI.c: 459: enter = 1;
 21788  003832  0E00               	movlw	0
 21789  003834  6E66               	movwf	_enter+1,c
 21790  003836  0E01               	movlw	1
 21791  003838  6E65               	movwf	_enter,c
 21792                           
 21793                           ;UI.c: 460: return 1;
 21794  00383A  0E00               	movlw	0
 21795  00383C  6E2B               	movwf	?_inputHandler+1,c
 21796  00383E  0E01               	movlw	1
 21797  003840  6E2A               	movwf	?_inputHandler,c
 21798  003842  0012               	return	
 21799  003844                     i2l7745:
 21800                           
 21801                           ;UI.c: 462: back = 1;
 21802  003844  0E00               	movlw	0
 21803  003846  6E62               	movwf	_back+1,c
 21804  003848  0E01               	movlw	1
 21805  00384A  6E61               	movwf	_back,c
 21806                           
 21807                           ;UI.c: 463: return 1;
 21808  00384C  0E00               	movlw	0
 21809  00384E  6E2B               	movwf	?_inputHandler+1,c
 21810  003850  0E01               	movlw	1
 21811  003852  6E2A               	movwf	?_inputHandler,c
 21812  003854  0012               	return	
 21813  003856                     i2l7749:
 21814                           
 21815                           ;UI.c: 466: return 1;
 21816  003856  0E00               	movlw	0
 21817  003858  6E2B               	movwf	?_inputHandler+1,c
 21818  00385A  0E01               	movlw	1
 21819  00385C  6E2A               	movwf	?_inputHandler,c
 21820                           
 21821                           ;UI.c: 467: }
 21822  00385E  0012               	return	
 21823  003860                     i2l7755:
 21824  003860  507D               	movf	_input,w,c	;volatile
 21825                           
 21826                           ; Switch size 1, requested type "space"
 21827                           ; Number of cases is 7, Range of values is 49 to 68
 21828                           ; switch strategies available:
 21829                           ; Name         Instructions Cycles
 21830                           ; simple_byte           22    12 (average)
 21831                           ;	Chosen strategy is simple_byte
 21832  003862  0A31               	xorlw	49	; case 49
 21833  003864  B4D8               	btfsc	status,2,c
 21834  003866  D789               	goto	i2l7685
 21835  003868  0A03               	xorlw	3	; case 50
 21836  00386A  B4D8               	btfsc	status,2,c
 21837  00386C  D799               	goto	i2l7699
 21838  00386E  0A01               	xorlw	1	; case 51
 21839  003870  B4D8               	btfsc	status,2,c
 21840  003872  D7BA               	goto	i2l7719
 21841  003874  0A72               	xorlw	114	; case 65
 21842  003876  B4D8               	btfsc	status,2,c
 21843  003878  D7CA               	goto	i2l7733
 21844  00387A  0A03               	xorlw	3	; case 66
 21845  00387C  B4D8               	btfsc	status,2,c
 21846  00387E  D7D0               	goto	i2l7737
 21847  003880  0A01               	xorlw	1	; case 67
 21848  003882  B4D8               	btfsc	status,2,c
 21849  003884  D7D6               	goto	i2l7741
 21850  003886  0A07               	xorlw	7	; case 68
 21851  003888  B4D8               	btfsc	status,2,c
 21852  00388A  D7DC               	goto	i2l7745
 21853  00388C  D7E4               	goto	i2l7749
 21854  00388E                     __end_of_inputHandler:
 21855                           	opt stack 0
 21856                           pclatu	equ	0xFFB
 21857                           pclath	equ	0xFFA
 21858                           tblptru	equ	0xFF8
 21859                           tblptrh	equ	0xFF7
 21860                           tblptrl	equ	0xFF6
 21861                           tablat	equ	0xFF5
 21862                           prodh	equ	0xFF4
 21863                           prodl	equ	0xFF3
 21864                           intcon	equ	0xFF2
 21865                           intcon2	equ	0xFF1
 21866                           intcon3	equ	0xFF0
 21867                           indf0	equ	0xFEF
 21868                           postinc0	equ	0xFEE
 21869                           fsr0h	equ	0xFEA
 21870                           fsr0l	equ	0xFE9
 21871                           wreg	equ	0xFE8
 21872                           postdec1	equ	0xFE5
 21873                           fsr1h	equ	0xFE2
 21874                           fsr1l	equ	0xFE1
 21875                           indf2	equ	0xFDF
 21876                           postinc2	equ	0xFDE
 21877                           postdec2	equ	0xFDD
 21878                           fsr2h	equ	0xFDA
 21879                           fsr2l	equ	0xFD9
 21880                           status	equ	0xFD8
 21881                           
 21882 ;; *************** function i2_change_state_to_menu_22 *****************
 21883 ;; Defined at:
 21884 ;;		line 501 in file "UI.c"
 21885 ;; Parameters:    Size  Location     Type
 21886 ;;		None
 21887 ;; Auto vars:     Size  Location     Type
 21888 ;;		None
 21889 ;; Return value:  Size  Location     Type
 21890 ;;                  1    wreg      void 
 21891 ;; Registers used:
 21892 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21893 ;; Tracked objects:
 21894 ;;		On entry : 0/0
 21895 ;;		On exit  : 0/0
 21896 ;;		Unchanged: 0/0
 21897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21902 ;;Total ram usage:        0 bytes
 21903 ;; Hardware stack levels used:    1
 21904 ;; Hardware stack levels required when called:    3
 21905 ;; This function calls:
 21906 ;;		i2_lcdInst
 21907 ;;		i2_printf
 21908 ;; This function is called by:
 21909 ;;		_updateMenu
 21910 ;;		_inputHandler
 21911 ;; This function uses a non-reentrant model
 21912 ;;
 21913                           
 21914                           	psect	text72
 21915  00562C                     __ptext72:
 21916                           	opt stack 0
 21917  00562C                     i2_change_state_to_menu_22:
 21918                           	opt stack 19
 21919                           
 21920                           ;UI.c: 502: cur_state = 22;
 21921                           
 21922                           ;incstack = 0
 21923  00562C  0E00               	movlw	0
 21924  00562E  0100               	movlb	0	; () banked
 21925  005630  6FE7               	movwf	(_cur_state+1)& (0+255),b
 21926  005632  0E16               	movlw	22
 21927  005634  6FE6               	movwf	_cur_state& (0+255),b
 21928                           
 21929                           ; BSR set to: 0
 21930                           ;UI.c: 504: lcdInst(0b10000000);;
 21931  005636  0E80               	movlw	128
 21932  005638  EC47  F02D         	call	i2_lcdInst
 21933                           
 21934                           ;UI.c: 505: printf("2. SORT        <");
 21935  00563C  0EB7               	movlw	low STR_34
 21936  00563E  6E0D               	movwf	i2printf@f,c
 21937  005640  0EFD               	movlw	high STR_34
 21938  005642  6E0E               	movwf	i2printf@f+1,c
 21939  005644  ECA2  F011         	call	i2_printf	;wreg free
 21940                           
 21941                           ;UI.c: 506: lcdInst(0b11000000);;
 21942  005648  0EC0               	movlw	192
 21943  00564A  EC47  F02D         	call	i2_lcdInst
 21944                           
 21945                           ;UI.c: 507: printf("3. LOGS         ");
 21946  00564E  0EFC               	movlw	low STR_36
 21947  005650  6E0D               	movwf	i2printf@f,c
 21948  005652  0EFC               	movlw	high STR_36
 21949  005654  6E0E               	movwf	i2printf@f+1,c
 21950  005656  ECA2  F011         	call	i2_printf	;wreg free
 21951  00565A  0012               	return		;funcret
 21952  00565C                     __end_ofi2_change_state_to_menu_22:
 21953                           	opt stack 0
 21954                           pclatu	equ	0xFFB
 21955                           pclath	equ	0xFFA
 21956                           tblptru	equ	0xFF8
 21957                           tblptrh	equ	0xFF7
 21958                           tblptrl	equ	0xFF6
 21959                           tablat	equ	0xFF5
 21960                           prodh	equ	0xFF4
 21961                           prodl	equ	0xFF3
 21962                           intcon	equ	0xFF2
 21963                           intcon2	equ	0xFF1
 21964                           intcon3	equ	0xFF0
 21965                           indf0	equ	0xFEF
 21966                           postinc0	equ	0xFEE
 21967                           fsr0h	equ	0xFEA
 21968                           fsr0l	equ	0xFE9
 21969                           wreg	equ	0xFE8
 21970                           postdec1	equ	0xFE5
 21971                           fsr1h	equ	0xFE2
 21972                           fsr1l	equ	0xFE1
 21973                           indf2	equ	0xFDF
 21974                           postinc2	equ	0xFDE
 21975                           postdec2	equ	0xFDD
 21976                           fsr2h	equ	0xFDA
 21977                           fsr2l	equ	0xFD9
 21978                           status	equ	0xFD8
 21979                           
 21980 ;; *************** function i2_change_state_to_menu_12 *****************
 21981 ;; Defined at:
 21982 ;;		line 493 in file "UI.c"
 21983 ;; Parameters:    Size  Location     Type
 21984 ;;		None
 21985 ;; Auto vars:     Size  Location     Type
 21986 ;;		None
 21987 ;; Return value:  Size  Location     Type
 21988 ;;                  1    wreg      void 
 21989 ;; Registers used:
 21990 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21991 ;; Tracked objects:
 21992 ;;		On entry : 0/0
 21993 ;;		On exit  : 0/0
 21994 ;;		Unchanged: 0/0
 21995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22000 ;;Total ram usage:        0 bytes
 22001 ;; Hardware stack levels used:    1
 22002 ;; Hardware stack levels required when called:    3
 22003 ;; This function calls:
 22004 ;;		i2_lcdInst
 22005 ;;		i2_printf
 22006 ;; This function is called by:
 22007 ;;		_updateMenu
 22008 ;;		_inputHandler
 22009 ;; This function uses a non-reentrant model
 22010 ;;
 22011                           
 22012                           	psect	text73
 22013  00565C                     __ptext73:
 22014                           	opt stack 0
 22015  00565C                     i2_change_state_to_menu_12:
 22016                           	opt stack 19
 22017                           
 22018                           ;UI.c: 494: cur_state = 12;
 22019                           
 22020                           ;incstack = 0
 22021  00565C  0E00               	movlw	0
 22022  00565E  0100               	movlb	0	; () banked
 22023  005660  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22024  005662  0E0C               	movlw	12
 22025  005664  6FE6               	movwf	_cur_state& (0+255),b
 22026                           
 22027                           ; BSR set to: 0
 22028                           ;UI.c: 496: lcdInst(0b10000000);;
 22029  005666  0E80               	movlw	128
 22030  005668  EC47  F02D         	call	i2_lcdInst
 22031                           
 22032                           ;UI.c: 497: printf("1. DATE/TIME    ");
 22033  00566C  0E1E               	movlw	low STR_33
 22034  00566E  6E0D               	movwf	i2printf@f,c
 22035  005670  0EFD               	movlw	high STR_33
 22036  005672  6E0E               	movwf	i2printf@f+1,c
 22037  005674  ECA2  F011         	call	i2_printf	;wreg free
 22038                           
 22039                           ;UI.c: 498: lcdInst(0b11000000);;
 22040  005678  0EC0               	movlw	192
 22041  00567A  EC47  F02D         	call	i2_lcdInst
 22042                           
 22043                           ;UI.c: 499: printf("2. SORT        <");
 22044  00567E  0EB7               	movlw	low STR_34
 22045  005680  6E0D               	movwf	i2printf@f,c
 22046  005682  0EFD               	movlw	high STR_34
 22047  005684  6E0E               	movwf	i2printf@f+1,c
 22048  005686  ECA2  F011         	call	i2_printf	;wreg free
 22049  00568A  0012               	return		;funcret
 22050  00568C                     __end_ofi2_change_state_to_menu_12:
 22051                           	opt stack 0
 22052                           pclatu	equ	0xFFB
 22053                           pclath	equ	0xFFA
 22054                           tblptru	equ	0xFF8
 22055                           tblptrh	equ	0xFF7
 22056                           tblptrl	equ	0xFF6
 22057                           tablat	equ	0xFF5
 22058                           prodh	equ	0xFF4
 22059                           prodl	equ	0xFF3
 22060                           intcon	equ	0xFF2
 22061                           intcon2	equ	0xFF1
 22062                           intcon3	equ	0xFF0
 22063                           indf0	equ	0xFEF
 22064                           postinc0	equ	0xFEE
 22065                           fsr0h	equ	0xFEA
 22066                           fsr0l	equ	0xFE9
 22067                           wreg	equ	0xFE8
 22068                           postdec1	equ	0xFE5
 22069                           fsr1h	equ	0xFE2
 22070                           fsr1l	equ	0xFE1
 22071                           indf2	equ	0xFDF
 22072                           postinc2	equ	0xFDE
 22073                           postdec2	equ	0xFDD
 22074                           fsr2h	equ	0xFDA
 22075                           fsr2l	equ	0xFD9
 22076                           status	equ	0xFD8
 22077                           
 22078 ;; *************** function _change_state_to_menu_23 *****************
 22079 ;; Defined at:
 22080 ;;		line 509 in file "UI.c"
 22081 ;; Parameters:    Size  Location     Type
 22082 ;;		None
 22083 ;; Auto vars:     Size  Location     Type
 22084 ;;		None
 22085 ;; Return value:  Size  Location     Type
 22086 ;;                  1    wreg      void 
 22087 ;; Registers used:
 22088 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22089 ;; Tracked objects:
 22090 ;;		On entry : 0/0
 22091 ;;		On exit  : 0/0
 22092 ;;		Unchanged: 0/0
 22093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22098 ;;Total ram usage:        0 bytes
 22099 ;; Hardware stack levels used:    1
 22100 ;; Hardware stack levels required when called:    3
 22101 ;; This function calls:
 22102 ;;		i2_lcdInst
 22103 ;;		i2_printf
 22104 ;; This function is called by:
 22105 ;;		_updateMenu
 22106 ;;		_inputHandler
 22107 ;; This function uses a non-reentrant model
 22108 ;;
 22109                           
 22110                           	psect	text74
 22111  00568C                     __ptext74:
 22112                           	opt stack 0
 22113  00568C                     _change_state_to_menu_23:
 22114                           	opt stack 18
 22115                           
 22116                           ;UI.c: 510: cur_state = 23;
 22117                           
 22118                           ;incstack = 0
 22119  00568C  0E00               	movlw	0
 22120  00568E  0100               	movlb	0	; () banked
 22121  005690  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22122  005692  0E17               	movlw	23
 22123  005694  6FE6               	movwf	_cur_state& (0+255),b
 22124                           
 22125                           ; BSR set to: 0
 22126                           ;UI.c: 512: lcdInst(0b10000000);;
 22127  005696  0E80               	movlw	128
 22128  005698  EC47  F02D         	call	i2_lcdInst
 22129                           
 22130                           ;UI.c: 513: printf("2. SORT         ");
 22131  00569C  0E0D               	movlw	low STR_32
 22132  00569E  6E0D               	movwf	i2printf@f,c
 22133  0056A0  0EFD               	movlw	high STR_32
 22134  0056A2  6E0E               	movwf	i2printf@f+1,c
 22135  0056A4  ECA2  F011         	call	i2_printf	;wreg free
 22136                           
 22137                           ;UI.c: 514: lcdInst(0b11000000);;
 22138  0056A8  0EC0               	movlw	192
 22139  0056AA  EC47  F02D         	call	i2_lcdInst
 22140                           
 22141                           ;UI.c: 515: printf("3. LOGS        <");
 22142  0056AE  0EA6               	movlw	low STR_38
 22143  0056B0  6E0D               	movwf	i2printf@f,c
 22144  0056B2  0EFD               	movlw	high STR_38
 22145  0056B4  6E0E               	movwf	i2printf@f+1,c
 22146  0056B6  ECA2  F011         	call	i2_printf	;wreg free
 22147  0056BA  0012               	return		;funcret
 22148  0056BC                     __end_of_change_state_to_menu_23:
 22149                           	opt stack 0
 22150                           pclatu	equ	0xFFB
 22151                           pclath	equ	0xFFA
 22152                           tblptru	equ	0xFF8
 22153                           tblptrh	equ	0xFF7
 22154                           tblptrl	equ	0xFF6
 22155                           tablat	equ	0xFF5
 22156                           prodh	equ	0xFF4
 22157                           prodl	equ	0xFF3
 22158                           intcon	equ	0xFF2
 22159                           intcon2	equ	0xFF1
 22160                           intcon3	equ	0xFF0
 22161                           indf0	equ	0xFEF
 22162                           postinc0	equ	0xFEE
 22163                           fsr0h	equ	0xFEA
 22164                           fsr0l	equ	0xFE9
 22165                           wreg	equ	0xFE8
 22166                           postdec1	equ	0xFE5
 22167                           fsr1h	equ	0xFE2
 22168                           fsr1l	equ	0xFE1
 22169                           indf2	equ	0xFDF
 22170                           postinc2	equ	0xFDE
 22171                           postdec2	equ	0xFDD
 22172                           fsr2h	equ	0xFDA
 22173                           fsr2l	equ	0xFD9
 22174                           status	equ	0xFD8
 22175                           
 22176 ;; *************** function _change_state_to_menu_11 *****************
 22177 ;; Defined at:
 22178 ;;		line 485 in file "UI.c"
 22179 ;; Parameters:    Size  Location     Type
 22180 ;;		None
 22181 ;; Auto vars:     Size  Location     Type
 22182 ;;		None
 22183 ;; Return value:  Size  Location     Type
 22184 ;;                  1    wreg      void 
 22185 ;; Registers used:
 22186 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22187 ;; Tracked objects:
 22188 ;;		On entry : 0/0
 22189 ;;		On exit  : 0/0
 22190 ;;		Unchanged: 0/0
 22191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22196 ;;Total ram usage:        0 bytes
 22197 ;; Hardware stack levels used:    1
 22198 ;; Hardware stack levels required when called:    3
 22199 ;; This function calls:
 22200 ;;		i2_lcdInst
 22201 ;;		i2_printf
 22202 ;; This function is called by:
 22203 ;;		_updateMenu
 22204 ;;		_inputHandler
 22205 ;; This function uses a non-reentrant model
 22206 ;;
 22207                           
 22208                           	psect	text75
 22209  0056BC                     __ptext75:
 22210                           	opt stack 0
 22211  0056BC                     _change_state_to_menu_11:
 22212                           	opt stack 18
 22213                           
 22214                           ;UI.c: 486: cur_state = 11;
 22215                           
 22216                           ;incstack = 0
 22217  0056BC  0E00               	movlw	0
 22218  0056BE  0100               	movlb	0	; () banked
 22219  0056C0  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22220  0056C2  0E0B               	movlw	11
 22221  0056C4  6FE6               	movwf	_cur_state& (0+255),b
 22222                           
 22223                           ; BSR set to: 0
 22224                           ;UI.c: 488: lcdInst(0b10000000);;
 22225  0056C6  0E80               	movlw	128
 22226  0056C8  EC47  F02D         	call	i2_lcdInst
 22227                           
 22228                           ;UI.c: 489: printf("1. DATE/TIME   <");
 22229  0056CC  0EC8               	movlw	low STR_31
 22230  0056CE  6E0D               	movwf	i2printf@f,c
 22231  0056D0  0EFD               	movlw	high STR_31
 22232  0056D2  6E0E               	movwf	i2printf@f+1,c
 22233  0056D4  ECA2  F011         	call	i2_printf	;wreg free
 22234                           
 22235                           ;UI.c: 490: lcdInst(0b11000000);;
 22236  0056D8  0EC0               	movlw	192
 22237  0056DA  EC47  F02D         	call	i2_lcdInst
 22238                           
 22239                           ;UI.c: 491: printf("2. SORT         ");
 22240  0056DE  0E0D               	movlw	low STR_32
 22241  0056E0  6E0D               	movwf	i2printf@f,c
 22242  0056E2  0EFD               	movlw	high STR_32
 22243  0056E4  6E0E               	movwf	i2printf@f+1,c
 22244  0056E6  ECA2  F011         	call	i2_printf	;wreg free
 22245  0056EA  0012               	return		;funcret
 22246  0056EC                     __end_of_change_state_to_menu_11:
 22247                           	opt stack 0
 22248                           pclatu	equ	0xFFB
 22249                           pclath	equ	0xFFA
 22250                           tblptru	equ	0xFF8
 22251                           tblptrh	equ	0xFF7
 22252                           tblptrl	equ	0xFF6
 22253                           tablat	equ	0xFF5
 22254                           prodh	equ	0xFF4
 22255                           prodl	equ	0xFF3
 22256                           intcon	equ	0xFF2
 22257                           intcon2	equ	0xFF1
 22258                           intcon3	equ	0xFF0
 22259                           indf0	equ	0xFEF
 22260                           postinc0	equ	0xFEE
 22261                           fsr0h	equ	0xFEA
 22262                           fsr0l	equ	0xFE9
 22263                           wreg	equ	0xFE8
 22264                           postdec1	equ	0xFE5
 22265                           fsr1h	equ	0xFE2
 22266                           fsr1l	equ	0xFE1
 22267                           indf2	equ	0xFDF
 22268                           postinc2	equ	0xFDE
 22269                           postdec2	equ	0xFDD
 22270                           fsr2h	equ	0xFDA
 22271                           fsr2l	equ	0xFD9
 22272                           status	equ	0xFD8
 22273                           
 22274 ;; *************** function _change_state_to_logs_34 *****************
 22275 ;; Defined at:
 22276 ;;		line 552 in file "UI.c"
 22277 ;; Parameters:    Size  Location     Type
 22278 ;;		None
 22279 ;; Auto vars:     Size  Location     Type
 22280 ;;		None
 22281 ;; Return value:  Size  Location     Type
 22282 ;;                  1    wreg      void 
 22283 ;; Registers used:
 22284 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22285 ;; Tracked objects:
 22286 ;;		On entry : 0/0
 22287 ;;		On exit  : 0/0
 22288 ;;		Unchanged: 0/0
 22289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22293 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22294 ;;Total ram usage:        0 bytes
 22295 ;; Hardware stack levels used:    1
 22296 ;; Hardware stack levels required when called:    3
 22297 ;; This function calls:
 22298 ;;		i2_lcdInst
 22299 ;;		i2_printf
 22300 ;; This function is called by:
 22301 ;;		_updateMenu
 22302 ;;		_inputHandler
 22303 ;; This function uses a non-reentrant model
 22304 ;;
 22305                           
 22306                           	psect	text76
 22307  0056EC                     __ptext76:
 22308                           	opt stack 0
 22309  0056EC                     _change_state_to_logs_34:
 22310                           	opt stack 18
 22311                           
 22312                           ;UI.c: 553: cur_state = 1034;
 22313                           
 22314                           ;incstack = 0
 22315  0056EC  0E04               	movlw	4
 22316  0056EE  0100               	movlb	0	; () banked
 22317  0056F0  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22318  0056F2  0E0A               	movlw	10
 22319  0056F4  6FE6               	movwf	_cur_state& (0+255),b
 22320                           
 22321                           ; BSR set to: 0
 22322                           ;UI.c: 554: lcdInst(0b10000000);;
 22323  0056F6  0E80               	movlw	128
 22324  0056F8  EC47  F02D         	call	i2_lcdInst
 22325                           
 22326                           ;UI.c: 555: printf("LOG 3           ");
 22327  0056FC  0EDA               	movlw	low STR_44
 22328  0056FE  6E0D               	movwf	i2printf@f,c
 22329  005700  0EFC               	movlw	high STR_44
 22330  005702  6E0E               	movwf	i2printf@f+1,c
 22331  005704  ECA2  F011         	call	i2_printf	;wreg free
 22332                           
 22333                           ;UI.c: 556: lcdInst(0b11000000);;
 22334  005708  0EC0               	movlw	192
 22335  00570A  EC47  F02D         	call	i2_lcdInst
 22336                           
 22337                           ;UI.c: 557: printf("LOG 4          <");
 22338  00570E  0E95               	movlw	low STR_50
 22339  005710  6E0D               	movwf	i2printf@f,c
 22340  005712  0EFD               	movlw	high STR_50
 22341  005714  6E0E               	movwf	i2printf@f+1,c
 22342  005716  ECA2  F011         	call	i2_printf	;wreg free
 22343  00571A  0012               	return		;funcret
 22344  00571C                     __end_of_change_state_to_logs_34:
 22345                           	opt stack 0
 22346                           pclatu	equ	0xFFB
 22347                           pclath	equ	0xFFA
 22348                           tblptru	equ	0xFF8
 22349                           tblptrh	equ	0xFF7
 22350                           tblptrl	equ	0xFF6
 22351                           tablat	equ	0xFF5
 22352                           prodh	equ	0xFF4
 22353                           prodl	equ	0xFF3
 22354                           intcon	equ	0xFF2
 22355                           intcon2	equ	0xFF1
 22356                           intcon3	equ	0xFF0
 22357                           indf0	equ	0xFEF
 22358                           postinc0	equ	0xFEE
 22359                           fsr0h	equ	0xFEA
 22360                           fsr0l	equ	0xFE9
 22361                           wreg	equ	0xFE8
 22362                           postdec1	equ	0xFE5
 22363                           fsr1h	equ	0xFE2
 22364                           fsr1l	equ	0xFE1
 22365                           indf2	equ	0xFDF
 22366                           postinc2	equ	0xFDE
 22367                           postdec2	equ	0xFDD
 22368                           fsr2h	equ	0xFDA
 22369                           fsr2l	equ	0xFD9
 22370                           status	equ	0xFD8
 22371                           
 22372 ;; *************** function _change_state_to_logs_33 *****************
 22373 ;; Defined at:
 22374 ;;		line 545 in file "UI.c"
 22375 ;; Parameters:    Size  Location     Type
 22376 ;;		None
 22377 ;; Auto vars:     Size  Location     Type
 22378 ;;		None
 22379 ;; Return value:  Size  Location     Type
 22380 ;;                  1    wreg      void 
 22381 ;; Registers used:
 22382 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22383 ;; Tracked objects:
 22384 ;;		On entry : 0/0
 22385 ;;		On exit  : 0/0
 22386 ;;		Unchanged: 0/0
 22387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22392 ;;Total ram usage:        0 bytes
 22393 ;; Hardware stack levels used:    1
 22394 ;; Hardware stack levels required when called:    3
 22395 ;; This function calls:
 22396 ;;		i2_lcdInst
 22397 ;;		i2_printf
 22398 ;; This function is called by:
 22399 ;;		_updateMenu
 22400 ;;		_inputHandler
 22401 ;; This function uses a non-reentrant model
 22402 ;;
 22403                           
 22404                           	psect	text77
 22405  00571C                     __ptext77:
 22406                           	opt stack 0
 22407  00571C                     _change_state_to_logs_33:
 22408                           	opt stack 18
 22409                           
 22410                           ;UI.c: 546: cur_state = 1033;
 22411                           
 22412                           ;incstack = 0
 22413  00571C  0E04               	movlw	4
 22414  00571E  0100               	movlb	0	; () banked
 22415  005720  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22416  005722  0E09               	movlw	9
 22417  005724  6FE6               	movwf	_cur_state& (0+255),b
 22418                           
 22419                           ; BSR set to: 0
 22420                           ;UI.c: 547: lcdInst(0b10000000);;
 22421  005726  0E80               	movlw	128
 22422  005728  EC47  F02D         	call	i2_lcdInst
 22423                           
 22424                           ;UI.c: 548: printf("LOG 3          <");
 22425  00572C  0E84               	movlw	low STR_46
 22426  00572E  6E0D               	movwf	i2printf@f,c
 22427  005730  0EFD               	movlw	high STR_46
 22428  005732  6E0E               	movwf	i2printf@f+1,c
 22429  005734  ECA2  F011         	call	i2_printf	;wreg free
 22430                           
 22431                           ;UI.c: 549: lcdInst(0b11000000);;
 22432  005738  0EC0               	movlw	192
 22433  00573A  EC47  F02D         	call	i2_lcdInst
 22434                           
 22435                           ;UI.c: 550: printf("LOG 4           ");
 22436  00573E  0EEB               	movlw	low STR_48
 22437  005740  6E0D               	movwf	i2printf@f,c
 22438  005742  0EFC               	movlw	high STR_48
 22439  005744  6E0E               	movwf	i2printf@f+1,c
 22440  005746  ECA2  F011         	call	i2_printf	;wreg free
 22441  00574A  0012               	return		;funcret
 22442  00574C                     __end_of_change_state_to_logs_33:
 22443                           	opt stack 0
 22444                           pclatu	equ	0xFFB
 22445                           pclath	equ	0xFFA
 22446                           tblptru	equ	0xFF8
 22447                           tblptrh	equ	0xFF7
 22448                           tblptrl	equ	0xFF6
 22449                           tablat	equ	0xFF5
 22450                           prodh	equ	0xFF4
 22451                           prodl	equ	0xFF3
 22452                           intcon	equ	0xFF2
 22453                           intcon2	equ	0xFF1
 22454                           intcon3	equ	0xFF0
 22455                           indf0	equ	0xFEF
 22456                           postinc0	equ	0xFEE
 22457                           fsr0h	equ	0xFEA
 22458                           fsr0l	equ	0xFE9
 22459                           wreg	equ	0xFE8
 22460                           postdec1	equ	0xFE5
 22461                           fsr1h	equ	0xFE2
 22462                           fsr1l	equ	0xFE1
 22463                           indf2	equ	0xFDF
 22464                           postinc2	equ	0xFDE
 22465                           postdec2	equ	0xFDD
 22466                           fsr2h	equ	0xFDA
 22467                           fsr2l	equ	0xFD9
 22468                           status	equ	0xFD8
 22469                           
 22470 ;; *************** function _change_state_to_logs_23 *****************
 22471 ;; Defined at:
 22472 ;;		line 538 in file "UI.c"
 22473 ;; Parameters:    Size  Location     Type
 22474 ;;		None
 22475 ;; Auto vars:     Size  Location     Type
 22476 ;;		None
 22477 ;; Return value:  Size  Location     Type
 22478 ;;                  1    wreg      void 
 22479 ;; Registers used:
 22480 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22481 ;; Tracked objects:
 22482 ;;		On entry : 0/0
 22483 ;;		On exit  : 0/0
 22484 ;;		Unchanged: 0/0
 22485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22490 ;;Total ram usage:        0 bytes
 22491 ;; Hardware stack levels used:    1
 22492 ;; Hardware stack levels required when called:    3
 22493 ;; This function calls:
 22494 ;;		i2_lcdInst
 22495 ;;		i2_printf
 22496 ;; This function is called by:
 22497 ;;		_updateMenu
 22498 ;;		_inputHandler
 22499 ;; This function uses a non-reentrant model
 22500 ;;
 22501                           
 22502                           	psect	text78
 22503  00580A                     __ptext78:
 22504                           	opt stack 0
 22505  00580A                     _change_state_to_logs_23:
 22506                           	opt stack 18
 22507                           
 22508                           ;UI.c: 539: cur_state = 1023;
 22509                           
 22510                           ;incstack = 0
 22511  00580A  0E03               	movlw	3
 22512  00580C  0100               	movlb	0	; () banked
 22513  00580E  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22514  005810  69E6               	setf	_cur_state& (0+255),b
 22515                           
 22516                           ; BSR set to: 0
 22517                           ;UI.c: 540: lcdInst(0b10000000);;
 22518  005812  0E80               	movlw	128
 22519  005814  EC47  F02D         	call	i2_lcdInst
 22520                           
 22521                           ;UI.c: 541: printf("LOG 2           ");
 22522  005818  0EC9               	movlw	low STR_40
 22523  00581A  6E0D               	movwf	i2printf@f,c
 22524  00581C  0EFC               	movlw	high STR_40
 22525  00581E  6E0E               	movwf	i2printf@f+1,c
 22526  005820  ECA2  F011         	call	i2_printf	;wreg free
 22527                           
 22528                           ;UI.c: 542: lcdInst(0b11000000);;
 22529  005824  0EC0               	movlw	192
 22530  005826  EC47  F02D         	call	i2_lcdInst
 22531                           
 22532                           ;UI.c: 543: printf("LOG 3          <");
 22533  00582A  0E84               	movlw	low STR_46
 22534  00582C  6E0D               	movwf	i2printf@f,c
 22535  00582E  0EFD               	movlw	high STR_46
 22536  005830  6E0E               	movwf	i2printf@f+1,c
 22537  005832  ECA2  F011         	call	i2_printf	;wreg free
 22538  005836  0012               	return		;funcret
 22539  005838                     __end_of_change_state_to_logs_23:
 22540                           	opt stack 0
 22541                           pclatu	equ	0xFFB
 22542                           pclath	equ	0xFFA
 22543                           tblptru	equ	0xFF8
 22544                           tblptrh	equ	0xFF7
 22545                           tblptrl	equ	0xFF6
 22546                           tablat	equ	0xFF5
 22547                           prodh	equ	0xFF4
 22548                           prodl	equ	0xFF3
 22549                           intcon	equ	0xFF2
 22550                           intcon2	equ	0xFF1
 22551                           intcon3	equ	0xFF0
 22552                           indf0	equ	0xFEF
 22553                           postinc0	equ	0xFEE
 22554                           fsr0h	equ	0xFEA
 22555                           fsr0l	equ	0xFE9
 22556                           wreg	equ	0xFE8
 22557                           postdec1	equ	0xFE5
 22558                           fsr1h	equ	0xFE2
 22559                           fsr1l	equ	0xFE1
 22560                           indf2	equ	0xFDF
 22561                           postinc2	equ	0xFDE
 22562                           postdec2	equ	0xFDD
 22563                           fsr2h	equ	0xFDA
 22564                           fsr2l	equ	0xFD9
 22565                           status	equ	0xFD8
 22566                           
 22567 ;; *************** function _change_state_to_logs_22 *****************
 22568 ;; Defined at:
 22569 ;;		line 531 in file "UI.c"
 22570 ;; Parameters:    Size  Location     Type
 22571 ;;		None
 22572 ;; Auto vars:     Size  Location     Type
 22573 ;;		None
 22574 ;; Return value:  Size  Location     Type
 22575 ;;                  1    wreg      void 
 22576 ;; Registers used:
 22577 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22578 ;; Tracked objects:
 22579 ;;		On entry : 0/0
 22580 ;;		On exit  : 0/0
 22581 ;;		Unchanged: 0/0
 22582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22587 ;;Total ram usage:        0 bytes
 22588 ;; Hardware stack levels used:    1
 22589 ;; Hardware stack levels required when called:    3
 22590 ;; This function calls:
 22591 ;;		i2_lcdInst
 22592 ;;		i2_printf
 22593 ;; This function is called by:
 22594 ;;		_updateMenu
 22595 ;;		_inputHandler
 22596 ;; This function uses a non-reentrant model
 22597 ;;
 22598                           
 22599                           	psect	text79
 22600  00574C                     __ptext79:
 22601                           	opt stack 0
 22602  00574C                     _change_state_to_logs_22:
 22603                           	opt stack 18
 22604                           
 22605                           ;UI.c: 532: cur_state = 1022;
 22606                           
 22607                           ;incstack = 0
 22608  00574C  0E03               	movlw	3
 22609  00574E  0100               	movlb	0	; () banked
 22610  005750  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22611  005752  0EFE               	movlw	254
 22612  005754  6FE6               	movwf	_cur_state& (0+255),b
 22613                           
 22614                           ; BSR set to: 0
 22615                           ;UI.c: 533: lcdInst(0b10000000);;
 22616  005756  0E80               	movlw	128
 22617  005758  EC47  F02D         	call	i2_lcdInst
 22618                           
 22619                           ;UI.c: 534: printf("LOG 2          <");
 22620  00575C  0E73               	movlw	low STR_42
 22621  00575E  6E0D               	movwf	i2printf@f,c
 22622  005760  0EFD               	movlw	high STR_42
 22623  005762  6E0E               	movwf	i2printf@f+1,c
 22624  005764  ECA2  F011         	call	i2_printf	;wreg free
 22625                           
 22626                           ;UI.c: 535: lcdInst(0b11000000);;
 22627  005768  0EC0               	movlw	192
 22628  00576A  EC47  F02D         	call	i2_lcdInst
 22629                           
 22630                           ;UI.c: 536: printf("LOG 3           ");
 22631  00576E  0EDA               	movlw	low STR_44
 22632  005770  6E0D               	movwf	i2printf@f,c
 22633  005772  0EFC               	movlw	high STR_44
 22634  005774  6E0E               	movwf	i2printf@f+1,c
 22635  005776  ECA2  F011         	call	i2_printf	;wreg free
 22636  00577A  0012               	return		;funcret
 22637  00577C                     __end_of_change_state_to_logs_22:
 22638                           	opt stack 0
 22639                           pclatu	equ	0xFFB
 22640                           pclath	equ	0xFFA
 22641                           tblptru	equ	0xFF8
 22642                           tblptrh	equ	0xFF7
 22643                           tblptrl	equ	0xFF6
 22644                           tablat	equ	0xFF5
 22645                           prodh	equ	0xFF4
 22646                           prodl	equ	0xFF3
 22647                           intcon	equ	0xFF2
 22648                           intcon2	equ	0xFF1
 22649                           intcon3	equ	0xFF0
 22650                           indf0	equ	0xFEF
 22651                           postinc0	equ	0xFEE
 22652                           fsr0h	equ	0xFEA
 22653                           fsr0l	equ	0xFE9
 22654                           wreg	equ	0xFE8
 22655                           postdec1	equ	0xFE5
 22656                           fsr1h	equ	0xFE2
 22657                           fsr1l	equ	0xFE1
 22658                           indf2	equ	0xFDF
 22659                           postinc2	equ	0xFDE
 22660                           postdec2	equ	0xFDD
 22661                           fsr2h	equ	0xFDA
 22662                           fsr2l	equ	0xFD9
 22663                           status	equ	0xFD8
 22664                           
 22665 ;; *************** function _change_state_to_logs_12 *****************
 22666 ;; Defined at:
 22667 ;;		line 524 in file "UI.c"
 22668 ;; Parameters:    Size  Location     Type
 22669 ;;		None
 22670 ;; Auto vars:     Size  Location     Type
 22671 ;;		None
 22672 ;; Return value:  Size  Location     Type
 22673 ;;                  1    wreg      void 
 22674 ;; Registers used:
 22675 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22676 ;; Tracked objects:
 22677 ;;		On entry : 0/0
 22678 ;;		On exit  : 0/0
 22679 ;;		Unchanged: 0/0
 22680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22684 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22685 ;;Total ram usage:        0 bytes
 22686 ;; Hardware stack levels used:    1
 22687 ;; Hardware stack levels required when called:    3
 22688 ;; This function calls:
 22689 ;;		i2_lcdInst
 22690 ;;		i2_printf
 22691 ;; This function is called by:
 22692 ;;		_updateMenu
 22693 ;;		_inputHandler
 22694 ;; This function uses a non-reentrant model
 22695 ;;
 22696                           
 22697                           	psect	text80
 22698  00577C                     __ptext80:
 22699                           	opt stack 0
 22700  00577C                     _change_state_to_logs_12:
 22701                           	opt stack 18
 22702                           
 22703                           ;UI.c: 525: cur_state = 1012;
 22704                           
 22705                           ;incstack = 0
 22706  00577C  0E03               	movlw	3
 22707  00577E  0100               	movlb	0	; () banked
 22708  005780  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22709  005782  0EF4               	movlw	244
 22710  005784  6FE6               	movwf	_cur_state& (0+255),b
 22711                           
 22712                           ; BSR set to: 0
 22713                           ;UI.c: 526: lcdInst(0b10000000);;
 22714  005786  0E80               	movlw	128
 22715  005788  EC47  F02D         	call	i2_lcdInst
 22716                           
 22717                           ;UI.c: 527: printf("LOG 1           ");
 22718  00578C  0EB8               	movlw	low STR_41
 22719  00578E  6E0D               	movwf	i2printf@f,c
 22720  005790  0EFC               	movlw	high STR_41
 22721  005792  6E0E               	movwf	i2printf@f+1,c
 22722  005794  ECA2  F011         	call	i2_printf	;wreg free
 22723                           
 22724                           ;UI.c: 528: lcdInst(0b11000000);;
 22725  005798  0EC0               	movlw	192
 22726  00579A  EC47  F02D         	call	i2_lcdInst
 22727                           
 22728                           ;UI.c: 529: printf("LOG 2          <");
 22729  00579E  0E73               	movlw	low STR_42
 22730  0057A0  6E0D               	movwf	i2printf@f,c
 22731  0057A2  0EFD               	movlw	high STR_42
 22732  0057A4  6E0E               	movwf	i2printf@f+1,c
 22733  0057A6  ECA2  F011         	call	i2_printf	;wreg free
 22734  0057AA  0012               	return		;funcret
 22735  0057AC                     __end_of_change_state_to_logs_12:
 22736                           	opt stack 0
 22737                           pclatu	equ	0xFFB
 22738                           pclath	equ	0xFFA
 22739                           tblptru	equ	0xFF8
 22740                           tblptrh	equ	0xFF7
 22741                           tblptrl	equ	0xFF6
 22742                           tablat	equ	0xFF5
 22743                           prodh	equ	0xFF4
 22744                           prodl	equ	0xFF3
 22745                           intcon	equ	0xFF2
 22746                           intcon2	equ	0xFF1
 22747                           intcon3	equ	0xFF0
 22748                           indf0	equ	0xFEF
 22749                           postinc0	equ	0xFEE
 22750                           fsr0h	equ	0xFEA
 22751                           fsr0l	equ	0xFE9
 22752                           wreg	equ	0xFE8
 22753                           postdec1	equ	0xFE5
 22754                           fsr1h	equ	0xFE2
 22755                           fsr1l	equ	0xFE1
 22756                           indf2	equ	0xFDF
 22757                           postinc2	equ	0xFDE
 22758                           postdec2	equ	0xFDD
 22759                           fsr2h	equ	0xFDA
 22760                           fsr2l	equ	0xFD9
 22761                           status	equ	0xFD8
 22762                           
 22763 ;; *************** function _change_state_to_logs_11 *****************
 22764 ;; Defined at:
 22765 ;;		line 517 in file "UI.c"
 22766 ;; Parameters:    Size  Location     Type
 22767 ;;		None
 22768 ;; Auto vars:     Size  Location     Type
 22769 ;;		None
 22770 ;; Return value:  Size  Location     Type
 22771 ;;                  1    wreg      void 
 22772 ;; Registers used:
 22773 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22774 ;; Tracked objects:
 22775 ;;		On entry : 0/0
 22776 ;;		On exit  : 0/0
 22777 ;;		Unchanged: 0/0
 22778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22783 ;;Total ram usage:        0 bytes
 22784 ;; Hardware stack levels used:    1
 22785 ;; Hardware stack levels required when called:    3
 22786 ;; This function calls:
 22787 ;;		i2_lcdInst
 22788 ;;		i2_printf
 22789 ;; This function is called by:
 22790 ;;		_updateMenu
 22791 ;;		_inputHandler
 22792 ;; This function uses a non-reentrant model
 22793 ;;
 22794                           
 22795                           	psect	text81
 22796  0057AC                     __ptext81:
 22797                           	opt stack 0
 22798  0057AC                     _change_state_to_logs_11:
 22799                           	opt stack 18
 22800                           
 22801                           ;UI.c: 518: cur_state = 1011;
 22802                           
 22803                           ;incstack = 0
 22804  0057AC  0E03               	movlw	3
 22805  0057AE  0100               	movlb	0	; () banked
 22806  0057B0  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22807  0057B2  0EF3               	movlw	243
 22808  0057B4  6FE6               	movwf	_cur_state& (0+255),b
 22809                           
 22810                           ; BSR set to: 0
 22811                           ;UI.c: 519: lcdInst(0b10000000);;
 22812  0057B6  0E80               	movlw	128
 22813  0057B8  EC47  F02D         	call	i2_lcdInst
 22814                           
 22815                           ;UI.c: 520: printf("LOG 1          <");
 22816  0057BC  0E62               	movlw	low STR_39
 22817  0057BE  6E0D               	movwf	i2printf@f,c
 22818  0057C0  0EFD               	movlw	high STR_39
 22819  0057C2  6E0E               	movwf	i2printf@f+1,c
 22820  0057C4  ECA2  F011         	call	i2_printf	;wreg free
 22821                           
 22822                           ;UI.c: 521: lcdInst(0b11000000);;
 22823  0057C8  0EC0               	movlw	192
 22824  0057CA  EC47  F02D         	call	i2_lcdInst
 22825                           
 22826                           ;UI.c: 522: printf("LOG 2           ");
 22827  0057CE  0EC9               	movlw	low STR_40
 22828  0057D0  6E0D               	movwf	i2printf@f,c
 22829  0057D2  0EFC               	movlw	high STR_40
 22830  0057D4  6E0E               	movwf	i2printf@f+1,c
 22831  0057D6  ECA2  F011         	call	i2_printf	;wreg free
 22832  0057DA  0012               	return		;funcret
 22833  0057DC                     __end_of_change_state_to_logs_11:
 22834                           	opt stack 0
 22835                           pclatu	equ	0xFFB
 22836                           pclath	equ	0xFFA
 22837                           tblptru	equ	0xFF8
 22838                           tblptrh	equ	0xFF7
 22839                           tblptrl	equ	0xFF6
 22840                           tablat	equ	0xFF5
 22841                           prodh	equ	0xFF4
 22842                           prodl	equ	0xFF3
 22843                           intcon	equ	0xFF2
 22844                           intcon2	equ	0xFF1
 22845                           intcon3	equ	0xFF0
 22846                           indf0	equ	0xFEF
 22847                           postinc0	equ	0xFEE
 22848                           fsr0h	equ	0xFEA
 22849                           fsr0l	equ	0xFE9
 22850                           wreg	equ	0xFE8
 22851                           postdec1	equ	0xFE5
 22852                           fsr1h	equ	0xFE2
 22853                           fsr1l	equ	0xFE1
 22854                           indf2	equ	0xFDF
 22855                           postinc2	equ	0xFDE
 22856                           postdec2	equ	0xFDD
 22857                           fsr2h	equ	0xFDA
 22858                           fsr2l	equ	0xFD9
 22859                           status	equ	0xFD8
 22860                           
 22861 ;; *************** function _dispLogs *****************
 22862 ;; Defined at:
 22863 ;;		line 470 in file "UI.c"
 22864 ;; Parameters:    Size  Location     Type
 22865 ;;  myLog           2   17[COMRAM] int 
 22866 ;; Auto vars:     Size  Location     Type
 22867 ;;		None
 22868 ;; Return value:  Size  Location     Type
 22869 ;;                  1    wreg      void 
 22870 ;; Registers used:
 22871 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22872 ;; Tracked objects:
 22873 ;;		On entry : 0/0
 22874 ;;		On exit  : 0/0
 22875 ;;		Unchanged: 0/0
 22876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22877 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22880 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22881 ;;Total ram usage:        2 bytes
 22882 ;; Hardware stack levels used:    1
 22883 ;; Hardware stack levels required when called:    2
 22884 ;; This function calls:
 22885 ;;		_retrieveLog
 22886 ;; This function is called by:
 22887 ;;		_updateMenu
 22888 ;; This function uses a non-reentrant model
 22889 ;;
 22890                           
 22891                           	psect	text82
 22892  005956                     __ptext82:
 22893                           	opt stack 0
 22894  005956                     _dispLogs:
 22895                           	opt stack 20
 22896                           
 22897                           ;UI.c: 471: logstate = 1;
 22898                           
 22899                           ;incstack = 0
 22900  005956  0E00               	movlw	0
 22901  005958  0100               	movlb	0	; () banked
 22902  00595A  6FF9               	movwf	(_logstate+1)& (0+255),b
 22903  00595C  0E01               	movlw	1
 22904  00595E  6FF8               	movwf	_logstate& (0+255),b
 22905                           
 22906                           ; BSR set to: 0
 22907                           ;UI.c: 472: log = myLog;
 22908  005960  C012  F0F0         	movff	dispLogs@myLog,_log
 22909  005964  C013  F0F1         	movff	dispLogs@myLog+1,_log+1
 22910                           
 22911                           ; BSR set to: 0
 22912                           ;UI.c: 473: retrieveLog(myLog - 1);
 22913  005968  0EFF               	movlw	255
 22914  00596A  2412               	addwf	dispLogs@myLog,w,c
 22915  00596C  6E07               	movwf	retrieveLog@logNum,c
 22916  00596E  0EFF               	movlw	255
 22917  005970  2013               	addwfc	dispLogs@myLog+1,w,c
 22918  005972  6E08               	movwf	retrieveLog@logNum+1,c
 22919  005974  ECA5  F01F         	call	_retrieveLog	;wreg free
 22920  005978  0012               	return		;funcret
 22921  00597A                     __end_of_dispLogs:
 22922                           	opt stack 0
 22923                           pclatu	equ	0xFFB
 22924                           pclath	equ	0xFFA
 22925                           tblptru	equ	0xFF8
 22926                           tblptrh	equ	0xFF7
 22927                           tblptrl	equ	0xFF6
 22928                           tablat	equ	0xFF5
 22929                           prodh	equ	0xFF4
 22930                           prodl	equ	0xFF3
 22931                           intcon	equ	0xFF2
 22932                           intcon2	equ	0xFF1
 22933                           intcon3	equ	0xFF0
 22934                           indf0	equ	0xFEF
 22935                           postinc0	equ	0xFEE
 22936                           fsr0h	equ	0xFEA
 22937                           fsr0l	equ	0xFE9
 22938                           wreg	equ	0xFE8
 22939                           postdec1	equ	0xFE5
 22940                           fsr1h	equ	0xFE2
 22941                           fsr1l	equ	0xFE1
 22942                           indf2	equ	0xFDF
 22943                           postinc2	equ	0xFDE
 22944                           postdec2	equ	0xFDD
 22945                           fsr2h	equ	0xFDA
 22946                           fsr2l	equ	0xFD9
 22947                           status	equ	0xFD8
 22948                           
 22949 ;; *************** function _retrieveLog *****************
 22950 ;; Defined at:
 22951 ;;		line 138 in file "EEPROM.c"
 22952 ;; Parameters:    Size  Location     Type
 22953 ;;  logNum          2    6[COMRAM] int 
 22954 ;; Auto vars:     Size  Location     Type
 22955 ;;  i               2   13[COMRAM] int 
 22956 ;;  addr            2   15[COMRAM] unsigned short 
 22957 ;;  byte3           1   12[COMRAM] unsigned char 
 22958 ;;  byte2           1   11[COMRAM] unsigned char 
 22959 ;;  byte1           1   10[COMRAM] unsigned char 
 22960 ;; Return value:  Size  Location     Type
 22961 ;;                  1    wreg      void 
 22962 ;; Registers used:
 22963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22964 ;; Tracked objects:
 22965 ;;		On entry : 0/0
 22966 ;;		On exit  : 0/0
 22967 ;;		Unchanged: 0/0
 22968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22969 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22970 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22971 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22972 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22973 ;;Total ram usage:       11 bytes
 22974 ;; Hardware stack levels used:    1
 22975 ;; Hardware stack levels required when called:    1
 22976 ;; This function calls:
 22977 ;;		i2_EEPROM_read
 22978 ;;		i2___wmul
 22979 ;; This function is called by:
 22980 ;;		_dispLogs
 22981 ;; This function uses a non-reentrant model
 22982 ;;
 22983                           
 22984                           	psect	text83
 22985  003F4A                     __ptext83:
 22986                           	opt stack 0
 22987  003F4A                     _retrieveLog:
 22988                           	opt stack 20
 22989                           
 22990                           ;EEPROM.c: 144: unsigned short addr = 1 + logNum * 11;
 22991                           
 22992                           ;incstack = 0
 22993  003F4A  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 22994  003F4E  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 22995  003F52  0E00               	movlw	0
 22996  003F54  6E04               	movwf	i2___wmul@multiplicand+1,c
 22997  003F56  0E0B               	movlw	11
 22998  003F58  6E03               	movwf	i2___wmul@multiplicand,c
 22999  003F5A  EC85  F02C         	call	i2___wmul	;wreg free
 23000  003F5E  0E01               	movlw	1
 23001  003F60  2401               	addwf	?i2___wmul,w,c
 23002  003F62  6E10               	movwf	retrieveLog@addr,c
 23003  003F64  0E00               	movlw	0
 23004  003F66  2002               	addwfc	?i2___wmul+1,w,c
 23005  003F68  6E11               	movwf	retrieveLog@addr+1,c
 23006                           
 23007                           ;EEPROM.c: 147: unsigned char byte1 = EEPROM_read(addr);
 23008  003F6A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23009  003F6E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23010  003F72  EC13  F02D         	call	i2_EEPROM_read	;wreg free
 23011  003F76  6E0B               	movwf	retrieveLog@byte1,c
 23012                           
 23013                           ;EEPROM.c: 148: log_completion = (int)(byte1 & 0b10000000);
 23014  003F78  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23015  003F7C  0E80               	movlw	128
 23016  003F7E  1609               	andwf	??_retrieveLog,f,c
 23017  003F80  5009               	movf	??_retrieveLog,w,c
 23018  003F82  0100               	movlb	0	; () banked
 23019  003F84  6FF2               	movwf	_log_completion& (0+255),b
 23020  003F86  6BF3               	clrf	(_log_completion+1)& (0+255),b
 23021                           
 23022                           ; BSR set to: 0
 23023                           ;EEPROM.c: 149: log_count_total = (int)(byte1 & 0b00001111);
 23024  003F88  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23025  003F8C  0E0F               	movlw	15
 23026  003F8E  1609               	andwf	??_retrieveLog,f,c
 23027  003F90  5009               	movf	??_retrieveLog,w,c
 23028  003F92  0101               	movlb	1	; () banked
 23029  003F94  6F41               	movwf	_log_count_total& (0+255),b
 23030  003F96  6B42               	clrf	(_log_count_total+1)& (0+255),b
 23031                           
 23032                           ; BSR set to: 1
 23033                           ;EEPROM.c: 150: addr++;
 23034  003F98  4A10               	infsnz	retrieveLog@addr,f,c
 23035  003F9A  2A11               	incf	retrieveLog@addr+1,f,c
 23036                           
 23037                           ; BSR set to: 1
 23038                           ;EEPROM.c: 153: unsigned char byte2 = EEPROM_read(addr);
 23039  003F9C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23040  003FA0  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23041  003FA4  EC13  F02D         	call	i2_EEPROM_read	;wreg free
 23042  003FA8  6E0C               	movwf	retrieveLog@byte2,c
 23043                           
 23044                           ;EEPROM.c: 154: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 23045  003FAA  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23046  003FAE  3A09               	swapf	??_retrieveLog,f,c
 23047  003FB0  0E0F               	movlw	15
 23048  003FB2  1609               	andwf	??_retrieveLog,f,c
 23049  003FB4  0E0F               	movlw	15
 23050  003FB6  1609               	andwf	??_retrieveLog,f,c
 23051  003FB8  5009               	movf	??_retrieveLog,w,c
 23052  003FBA  0100               	movlb	0	; () banked
 23053  003FBC  6FF4               	movwf	_log_count_pop_no_tab& (0+255),b
 23054  003FBE  6BF5               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 23055                           
 23056                           ; BSR set to: 0
 23057                           ;EEPROM.c: 155: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 23058  003FC0  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23059  003FC4  0E0F               	movlw	15
 23060  003FC6  1609               	andwf	??_retrieveLog,f,c
 23061  003FC8  5009               	movf	??_retrieveLog,w,c
 23062  003FCA  6E69               	movwf	_log_count_pop_w_tab,c
 23063  003FCC  6A6A               	clrf	_log_count_pop_w_tab+1,c
 23064                           
 23065                           ; BSR set to: 0
 23066                           ;EEPROM.c: 156: addr++;
 23067  003FCE  4A10               	infsnz	retrieveLog@addr,f,c
 23068  003FD0  2A11               	incf	retrieveLog@addr+1,f,c
 23069                           
 23070                           ; BSR set to: 0
 23071                           ;EEPROM.c: 157: unsigned char byte3 = EEPROM_read(addr);
 23072  003FD2  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23073  003FD6  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23074  003FDA  EC13  F02D         	call	i2_EEPROM_read	;wreg free
 23075  003FDE  6E0D               	movwf	retrieveLog@byte3,c
 23076                           
 23077                           ;EEPROM.c: 158: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 23078  003FE0  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23079  003FE4  3A09               	swapf	??_retrieveLog,f,c
 23080  003FE6  0E0F               	movlw	15
 23081  003FE8  1609               	andwf	??_retrieveLog,f,c
 23082  003FEA  0E0F               	movlw	15
 23083  003FEC  1609               	andwf	??_retrieveLog,f,c
 23084  003FEE  5009               	movf	??_retrieveLog,w,c
 23085  003FF0  0101               	movlb	1	; () banked
 23086  003FF2  6F3F               	movwf	_log_count_can_w_lab& (0+255),b
 23087  003FF4  6B40               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 23088                           
 23089                           ; BSR set to: 1
 23090                           ;EEPROM.c: 159: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 23091  003FF6  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23092  003FFA  0E0F               	movlw	15
 23093  003FFC  1609               	andwf	??_retrieveLog,f,c
 23094  003FFE  5009               	movf	??_retrieveLog,w,c
 23095  004000  0101               	movlb	1	; () banked
 23096  004002  6F3D               	movwf	_log_count_can_no_lab& (0+255),b
 23097  004004  6B3E               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 23098                           
 23099                           ; BSR set to: 1
 23100                           ;EEPROM.c: 160: addr++;
 23101  004006  4A10               	infsnz	retrieveLog@addr,f,c
 23102  004008  2A11               	incf	retrieveLog@addr+1,f,c
 23103                           
 23104                           ; BSR set to: 1
 23105                           ;EEPROM.c: 163: for(int i = 0; i < 7; i++){
 23106  00400A  0E00               	movlw	0
 23107  00400C  6E0F               	movwf	retrieveLog@i+1,c
 23108  00400E  0E00               	movlw	0
 23109  004010  6E0E               	movwf	retrieveLog@i,c
 23110  004012                     i2l7269:
 23111                           
 23112                           ; BSR set to: 1
 23113  004012  BE0F               	btfsc	retrieveLog@i+1,7,c
 23114  004014  D006               	goto	i2l7273
 23115  004016  500F               	movf	retrieveLog@i+1,w,c
 23116  004018  E11E               	bnz	i2l7281
 23117  00401A  0E07               	movlw	7
 23118  00401C  5C0E               	subwf	retrieveLog@i,w,c
 23119  00401E  B0D8               	btfsc	status,0,c
 23120  004020  D01A               	goto	i2l7281
 23121  004022                     i2l7273:
 23122                           
 23123                           ;EEPROM.c: 164: log_startTime[i] = (int)EEPROM_read(addr);
 23124  004022  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23125  004026  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23126  00402A  EC13  F02D         	call	i2_EEPROM_read	;wreg free
 23127  00402E  6E09               	movwf	??_retrieveLog& (0+255),c
 23128  004030  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 23129  004032  90D8               	bcf	status,0,c
 23130  004034  340E               	rlcf	retrieveLog@i,w,c
 23131  004036  6ED9               	movwf	fsr2l,c
 23132  004038  340F               	rlcf	retrieveLog@i+1,w,c
 23133  00403A  6EDA               	movwf	fsr2h,c
 23134  00403C  0E00               	movlw	low _log_startTime
 23135  00403E  26D9               	addwf	fsr2l,f,c
 23136  004040  0E01               	movlw	high _log_startTime
 23137  004042  22DA               	addwfc	fsr2h,f,c
 23138  004044  C009  FFDE         	movff	??_retrieveLog,postinc2
 23139  004048  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 23140                           
 23141                           ;EEPROM.c: 165: addr++;
 23142  00404C  4A10               	infsnz	retrieveLog@addr,f,c
 23143  00404E  2A11               	incf	retrieveLog@addr+1,f,c
 23144  004050  4A0E               	infsnz	retrieveLog@i,f,c
 23145  004052  2A0F               	incf	retrieveLog@i+1,f,c
 23146  004054  D7DE               	goto	i2l7269
 23147  004056                     i2l7281:
 23148                           
 23149                           ;EEPROM.c: 166: }
 23150                           ;EEPROM.c: 169: log_total_time = (int)EEPROM_read(addr);
 23151  004056  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23152  00405A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23153  00405E  EC13  F02D         	call	i2_EEPROM_read	;wreg free
 23154  004062  6E09               	movwf	??_retrieveLog& (0+255),c
 23155  004064  5009               	movf	??_retrieveLog,w,c
 23156  004066  0100               	movlb	0	; () banked
 23157  004068  6FF6               	movwf	_log_total_time& (0+255),b
 23158  00406A  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 23159                           
 23160                           ; BSR set to: 0
 23161  00406C  0012               	return		;funcret
 23162  00406E                     __end_of_retrieveLog:
 23163                           	opt stack 0
 23164                           pclatu	equ	0xFFB
 23165                           pclath	equ	0xFFA
 23166                           tblptru	equ	0xFF8
 23167                           tblptrh	equ	0xFF7
 23168                           tblptrl	equ	0xFF6
 23169                           tablat	equ	0xFF5
 23170                           prodh	equ	0xFF4
 23171                           prodl	equ	0xFF3
 23172                           intcon	equ	0xFF2
 23173                           intcon2	equ	0xFF1
 23174                           intcon3	equ	0xFF0
 23175                           indf0	equ	0xFEF
 23176                           postinc0	equ	0xFEE
 23177                           fsr0h	equ	0xFEA
 23178                           fsr0l	equ	0xFE9
 23179                           wreg	equ	0xFE8
 23180                           postdec1	equ	0xFE5
 23181                           fsr1h	equ	0xFE2
 23182                           fsr1l	equ	0xFE1
 23183                           indf2	equ	0xFDF
 23184                           postinc2	equ	0xFDE
 23185                           postdec2	equ	0xFDD
 23186                           fsr2h	equ	0xFDA
 23187                           fsr2l	equ	0xFD9
 23188                           status	equ	0xFD8
 23189                           
 23190 ;; *************** function i2_EEPROM_read *****************
 23191 ;; Defined at:
 23192 ;;		line 72 in file "EEPROM.c"
 23193 ;; Parameters:    Size  Location     Type
 23194 ;;  address         2    0[COMRAM] unsigned short 
 23195 ;; Auto vars:     Size  Location     Type
 23196 ;;		None
 23197 ;; Return value:  Size  Location     Type
 23198 ;;                  1    wreg      unsigned char 
 23199 ;; Registers used:
 23200 ;;		wreg, status,2
 23201 ;; Tracked objects:
 23202 ;;		On entry : 0/0
 23203 ;;		On exit  : 0/0
 23204 ;;		Unchanged: 0/0
 23205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23206 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23209 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23210 ;;Total ram usage:        2 bytes
 23211 ;; Hardware stack levels used:    1
 23212 ;; This function calls:
 23213 ;;		Nothing
 23214 ;; This function is called by:
 23215 ;;		_retrieveLog
 23216 ;; This function uses a non-reentrant model
 23217 ;;
 23218                           
 23219                           	psect	text84
 23220  005A26                     __ptext84:
 23221                           	opt stack 0
 23222  005A26                     i2_EEPROM_read:
 23223                           	opt stack 20
 23224                           
 23225                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
 23226                           
 23227                           ; BSR set to: 0
 23228                           ;incstack = 0
 23229  005A26  5002               	movf	i2EEPROM_read@address+1,w,c
 23230  005A28  6EAA               	movwf	4010,c	;volatile
 23231                           
 23232                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
 23233  005A2A  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 23234                           
 23235                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
 23236  005A2E  9EA6               	bcf	4006,7,c	;volatile
 23237                           
 23238                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
 23239  005A30  9CA6               	bcf	4006,6,c	;volatile
 23240                           
 23241                           ;EEPROM.c: 79: EECON1bits.RD = 1;
 23242  005A32  80A6               	bsf	4006,0,c	;volatile
 23243  005A34                     i2l1139:
 23244  005A34  B0A6               	btfsc	4006,0,c	;volatile
 23245  005A36  D7FE               	goto	i2l1139
 23246                           
 23247                           ;EEPROM.c: 85: return EEDATA;
 23248  005A38  50A8               	movf	4008,w,c	;volatile
 23249  005A3A  0012               	return	
 23250  005A3C                     __end_ofi2_EEPROM_read:
 23251                           	opt stack 0
 23252                           pclatu	equ	0xFFB
 23253                           pclath	equ	0xFFA
 23254                           tblptru	equ	0xFF8
 23255                           tblptrh	equ	0xFF7
 23256                           tblptrl	equ	0xFF6
 23257                           tablat	equ	0xFF5
 23258                           prodh	equ	0xFF4
 23259                           prodl	equ	0xFF3
 23260                           intcon	equ	0xFF2
 23261                           intcon2	equ	0xFF1
 23262                           intcon3	equ	0xFF0
 23263                           indf0	equ	0xFEF
 23264                           postinc0	equ	0xFEE
 23265                           fsr0h	equ	0xFEA
 23266                           fsr0l	equ	0xFE9
 23267                           wreg	equ	0xFE8
 23268                           postdec1	equ	0xFE5
 23269                           fsr1h	equ	0xFE2
 23270                           fsr1l	equ	0xFE1
 23271                           indf2	equ	0xFDF
 23272                           postinc2	equ	0xFDE
 23273                           postdec2	equ	0xFDD
 23274                           fsr2h	equ	0xFDA
 23275                           fsr2l	equ	0xFD9
 23276                           status	equ	0xFD8
 23277                           
 23278 ;; *************** function _updateArmState *****************
 23279 ;; Defined at:
 23280 ;;		line 654 in file "sort.c"
 23281 ;; Parameters:    Size  Location     Type
 23282 ;;		None
 23283 ;; Auto vars:     Size  Location     Type
 23284 ;;		None
 23285 ;; Return value:  Size  Location     Type
 23286 ;;                  1    wreg      void 
 23287 ;; Registers used:
 23288 ;;		wreg, status,2, status,0
 23289 ;; Tracked objects:
 23290 ;;		On entry : 0/0
 23291 ;;		On exit  : 0/0
 23292 ;;		Unchanged: 0/0
 23293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23296 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23297 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23298 ;;Total ram usage:        2 bytes
 23299 ;; Hardware stack levels used:    1
 23300 ;; This function calls:
 23301 ;;		Nothing
 23302 ;; This function is called by:
 23303 ;;		_handler
 23304 ;; This function uses a non-reentrant model
 23305 ;;
 23306                           
 23307                           	psect	text85
 23308  005482                     __ptext85:
 23309                           	opt stack 0
 23310  005482                     _updateArmState:
 23311                           	opt stack 23
 23312                           
 23313                           ;sort.c: 661: if(!was_low_2){
 23314                           
 23315                           ;incstack = 0
 23316  005482  5079               	movf	_was_low_2,w,c	;volatile
 23317  005484  107A               	iorwf	_was_low_2+1,w,c	;volatile
 23318  005486  B4D8               	btfsc	status,2,c
 23319  005488  D007               	goto	i2l10055
 23320  00548A  D016               	goto	i2l955
 23321  00548C                     i2l10049:
 23322                           
 23323                           ;sort.c: 666: PR2 = 0x20;
 23324  00548C  0E20               	movlw	32
 23325  00548E  6ECB               	movwf	4043,c	;volatile
 23326                           
 23327                           ;sort.c: 667: break;
 23328  005490  0012               	return	
 23329  005492                     i2l10051:
 23330                           
 23331                           ;sort.c: 670: PR2 = 0x40;
 23332  005492  0E40               	movlw	64
 23333  005494  6ECB               	movwf	4043,c	;volatile
 23334                           
 23335                           ;sort.c: 672: }
 23336                           
 23337                           ;sort.c: 671: break;
 23338  005496  0012               	return	
 23339  005498                     i2l10055:
 23340  005498  C0EA  F001         	movff	_f_arm_position,??_updateArmState	;volatile
 23341  00549C  C0EB  F002         	movff	_f_arm_position+1,??_updateArmState+1	;volatile
 23342                           
 23343                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 23344                           ; Switch size 1, requested type "space"
 23345                           ; Number of cases is 1, Range of values is 0 to 0
 23346                           ; switch strategies available:
 23347                           ; Name         Instructions Cycles
 23348                           ; simple_byte            4     3 (average)
 23349                           ;	Chosen strategy is simple_byte
 23350  0054A0  5002               	movf	??_updateArmState+1,w,c
 23351  0054A2  0A00               	xorlw	0	; case 0
 23352  0054A4  A4D8               	btfss	status,2,c
 23353  0054A6  0012               	return	
 23354                           
 23355                           ; Switch size 1, requested type "space"
 23356                           ; Number of cases is 2, Range of values is 0 to 1
 23357                           ; switch strategies available:
 23358                           ; Name         Instructions Cycles
 23359                           ; simple_byte            7     4 (average)
 23360                           ;	Chosen strategy is simple_byte
 23361  0054A8  5001               	movf	??_updateArmState,w,c
 23362  0054AA  0A00               	xorlw	0	; case 0
 23363  0054AC  B4D8               	btfsc	status,2,c
 23364  0054AE  D7EE               	goto	i2l10049
 23365  0054B0  0A01               	xorlw	1	; case 1
 23366  0054B2  A4D8               	btfss	status,2,c
 23367                           
 23368                           ;sort.c: 673: }
 23369  0054B4  0012               	return	
 23370  0054B6  D7ED               	goto	i2l10051
 23371  0054B8                     i2l955:
 23372                           
 23373                           ;sort.c: 674: else{
 23374                           ;sort.c: 676: PR2 = 0xFF;
 23375  0054B8  68CB               	setf	4043,c	;volatile
 23376  0054BA  0012               	return	
 23377  0054BC                     __end_of_updateArmState:
 23378                           	opt stack 0
 23379                           pclatu	equ	0xFFB
 23380                           pclath	equ	0xFFA
 23381                           tblptru	equ	0xFF8
 23382                           tblptrh	equ	0xFF7
 23383                           tblptrl	equ	0xFF6
 23384                           tablat	equ	0xFF5
 23385                           prodh	equ	0xFF4
 23386                           prodl	equ	0xFF3
 23387                           intcon	equ	0xFF2
 23388                           intcon2	equ	0xFF1
 23389                           intcon3	equ	0xFF0
 23390                           indf0	equ	0xFEF
 23391                           postinc0	equ	0xFEE
 23392                           fsr0h	equ	0xFEA
 23393                           fsr0l	equ	0xFE9
 23394                           wreg	equ	0xFE8
 23395                           postdec1	equ	0xFE5
 23396                           fsr1h	equ	0xFE2
 23397                           fsr1l	equ	0xFE1
 23398                           indf2	equ	0xFDF
 23399                           postinc2	equ	0xFDE
 23400                           postdec2	equ	0xFDD
 23401                           fsr2h	equ	0xFDA
 23402                           fsr2l	equ	0xFD9
 23403                           status	equ	0xFD8
 23404                           
 23405 ;; *************** function _printSortTimer *****************
 23406 ;; Defined at:
 23407 ;;		line 496 in file "sort.c"
 23408 ;; Parameters:    Size  Location     Type
 23409 ;;		None
 23410 ;; Auto vars:     Size  Location     Type
 23411 ;;  i               2   70[COMRAM] int 
 23412 ;;  curTime        14   44[COMRAM] int [7]
 23413 ;;  timeDiff        2   68[COMRAM] unsigned int 
 23414 ;;  sec             2   64[COMRAM] int 
 23415 ;;  min             2   62[COMRAM] int 
 23416 ;;  cur_sec         2   60[COMRAM] unsigned int 
 23417 ;;  start_sec       2   58[COMRAM] unsigned int 
 23418 ;; Return value:  Size  Location     Type
 23419 ;;                  1    wreg      void 
 23420 ;; Registers used:
 23421 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23422 ;; Tracked objects:
 23423 ;;		On entry : 0/0
 23424 ;;		On exit  : 0/0
 23425 ;;		Unchanged: 0/0
 23426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23428 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23429 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23430 ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23431 ;;Total ram usage:       31 bytes
 23432 ;; Hardware stack levels used:    1
 23433 ;; Hardware stack levels required when called:    3
 23434 ;; This function calls:
 23435 ;;		i2___lwdiv
 23436 ;;		i2___lwmod
 23437 ;;		i2___wmul
 23438 ;;		i2_getRTC
 23439 ;;		i2_lcdInst
 23440 ;;		i2_printf
 23441 ;; This function is called by:
 23442 ;;		_handler
 23443 ;; This function uses a non-reentrant model
 23444 ;;
 23445                           
 23446                           	psect	text86
 23447  003486                     __ptext86:
 23448                           	opt stack 0
 23449  003486                     _printSortTimer:
 23450                           	opt stack 20
 23451                           
 23452                           ;sort.c: 497: getRTC();
 23453                           
 23454                           ;incstack = 0
 23455  003486  EC5A  F027         	call	i2_getRTC	;wreg free
 23456                           
 23457                           ;sort.c: 498: int curTime[7];
 23458                           ;sort.c: 499: for(int i = 0; i < 7; i++){
 23459  00348A  0E00               	movlw	0
 23460  00348C  6E48               	movwf	printSortTimer@i+1,c
 23461  00348E  0E00               	movlw	0
 23462  003490  6E47               	movwf	printSortTimer@i,c
 23463  003492                     i2l9911:
 23464  003492  BE48               	btfsc	printSortTimer@i+1,7,c
 23465  003494  D006               	goto	i2l9915
 23466  003496  5048               	movf	printSortTimer@i+1,w,c
 23467  003498  E131               	bnz	i2l9921
 23468  00349A  0E07               	movlw	7
 23469  00349C  5C47               	subwf	printSortTimer@i,w,c
 23470  00349E  B0D8               	btfsc	status,0,c
 23471  0034A0  D02D               	goto	i2l9921
 23472  0034A2                     i2l9915:
 23473                           
 23474                           ;sort.c: 500: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 23475  0034A2  0E1C               	movlw	low _time
 23476  0034A4  2447               	addwf	printSortTimer@i,w,c
 23477  0034A6  6ED9               	movwf	fsr2l,c
 23478  0034A8  0E01               	movlw	high _time
 23479  0034AA  2048               	addwfc	printSortTimer@i+1,w,c
 23480  0034AC  6EDA               	movwf	fsr2h,c
 23481  0034AE  50DF               	movf	indf2,w,c
 23482  0034B0  6E2A               	movwf	??_printSortTimer& (0+255),c
 23483  0034B2  3A2A               	swapf	??_printSortTimer,f,c
 23484  0034B4  0E0F               	movlw	15
 23485  0034B6  162A               	andwf	??_printSortTimer,f,c
 23486  0034B8  0E0F               	movlw	15
 23487  0034BA  162A               	andwf	??_printSortTimer,f,c
 23488  0034BC  502A               	movf	??_printSortTimer,w,c
 23489  0034BE  0D0A               	mullw	10
 23490  0034C0  0E1C               	movlw	low _time
 23491  0034C2  2447               	addwf	printSortTimer@i,w,c
 23492  0034C4  6ED9               	movwf	fsr2l,c
 23493  0034C6  0E01               	movlw	high _time
 23494  0034C8  2048               	addwfc	printSortTimer@i+1,w,c
 23495  0034CA  6EDA               	movwf	fsr2h,c
 23496  0034CC  50DF               	movf	indf2,w,c
 23497  0034CE  0B0F               	andlw	15
 23498  0034D0  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 23499  0034D2  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 23500  0034D4  50F3               	movf	prodl,w,c
 23501  0034D6  262B               	addwf	??_printSortTimer+1,f,c
 23502  0034D8  50F4               	movf	prodh,w,c
 23503  0034DA  222C               	addwfc	??_printSortTimer+2,f,c
 23504  0034DC  90D8               	bcf	status,0,c
 23505  0034DE  3447               	rlcf	printSortTimer@i,w,c
 23506  0034E0  6ED9               	movwf	fsr2l,c
 23507  0034E2  3448               	rlcf	printSortTimer@i+1,w,c
 23508  0034E4  6EDA               	movwf	fsr2h,c
 23509  0034E6  0E2D               	movlw	low printSortTimer@curTime
 23510  0034E8  26D9               	addwf	fsr2l,f,c
 23511  0034EA  0E00               	movlw	high printSortTimer@curTime
 23512  0034EC  22DA               	addwfc	fsr2h,f,c
 23513  0034EE  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 23514  0034F2  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 23515  0034F6  4A47               	infsnz	printSortTimer@i,f,c
 23516  0034F8  2A48               	incf	printSortTimer@i+1,f,c
 23517  0034FA  D7CB               	goto	i2l9911
 23518  0034FC                     i2l9921:
 23519                           
 23520                           ;sort.c: 501: }
 23521                           ;sort.c: 502: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 23522  0034FC  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 23523  003500  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 23524  003504  0E00               	movlw	0
 23525  003506  6E04               	movwf	i2___wmul@multiplicand+1,c
 23526  003508  0E3C               	movlw	60
 23527  00350A  6E03               	movwf	i2___wmul@multiplicand,c
 23528  00350C  EC85  F02C         	call	i2___wmul	;wreg free
 23529  003510  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 23530  003514  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 23531  003518  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 23532  00351C  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 23533  003520  0E0E               	movlw	14
 23534  003522  6E04               	movwf	i2___wmul@multiplicand+1,c
 23535  003524  0E10               	movlw	16
 23536  003526  6E03               	movwf	i2___wmul@multiplicand,c
 23537  003528  EC85  F02C         	call	i2___wmul	;wreg free
 23538  00352C  5001               	movf	?i2___wmul,w,c
 23539  00352E  262A               	addwf	??_printSortTimer,f,c
 23540  003530  5002               	movf	?i2___wmul+1,w,c
 23541  003532  222B               	addwfc	??_printSortTimer+1,f,c
 23542  003534  0101               	movlb	1	; () banked
 23543  003536  510E               	movf	_startTime& (0+255),w,b
 23544  003538  242A               	addwf	??_printSortTimer,w,c
 23545  00353A  6E3B               	movwf	printSortTimer@start_sec,c
 23546  00353C  0101               	movlb	1	; () banked
 23547  00353E  510F               	movf	(_startTime+1)& (0+255),w,b
 23548  003540  202B               	addwfc	??_printSortTimer+1,w,c
 23549  003542  6E3C               	movwf	printSortTimer@start_sec+1,c
 23550                           
 23551                           ;sort.c: 503: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 23552  003544  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 23553  003548  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 23554  00354C  0E00               	movlw	0
 23555  00354E  6E04               	movwf	i2___wmul@multiplicand+1,c
 23556  003550  0E3C               	movlw	60
 23557  003552  6E03               	movwf	i2___wmul@multiplicand,c
 23558  003554  EC85  F02C         	call	i2___wmul	;wreg free
 23559  003558  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 23560  00355C  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 23561  003560  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 23562  003564  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 23563  003568  0E0E               	movlw	14
 23564  00356A  6E04               	movwf	i2___wmul@multiplicand+1,c
 23565  00356C  0E10               	movlw	16
 23566  00356E  6E03               	movwf	i2___wmul@multiplicand,c
 23567  003570  EC85  F02C         	call	i2___wmul	;wreg free
 23568  003574  5001               	movf	?i2___wmul,w,c
 23569  003576  262A               	addwf	??_printSortTimer,f,c
 23570  003578  5002               	movf	?i2___wmul+1,w,c
 23571  00357A  222B               	addwfc	??_printSortTimer+1,f,c
 23572  00357C  502D               	movf	printSortTimer@curTime,w,c
 23573  00357E  242A               	addwf	??_printSortTimer,w,c
 23574  003580  6E3D               	movwf	printSortTimer@cur_sec,c
 23575  003582  502E               	movf	printSortTimer@curTime+1,w,c
 23576  003584  202B               	addwfc	??_printSortTimer+1,w,c
 23577  003586  6E3E               	movwf	printSortTimer@cur_sec+1,c
 23578                           
 23579                           ;sort.c: 504: unsigned int timeDiff = cur_sec - start_sec;
 23580  003588  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 23581  00358C  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 23582  003590  1E2A               	comf	??_printSortTimer,f,c
 23583  003592  1E2B               	comf	??_printSortTimer+1,f,c
 23584  003594  4A2A               	infsnz	??_printSortTimer,f,c
 23585  003596  2A2B               	incf	??_printSortTimer+1,f,c
 23586  003598  503D               	movf	printSortTimer@cur_sec,w,c
 23587  00359A  242A               	addwf	??_printSortTimer,w,c
 23588  00359C  6E45               	movwf	printSortTimer@timeDiff,c
 23589  00359E  503E               	movf	printSortTimer@cur_sec+1,w,c
 23590  0035A0  202B               	addwfc	??_printSortTimer+1,w,c
 23591  0035A2  6E46               	movwf	printSortTimer@timeDiff+1,c
 23592                           
 23593                           ;sort.c: 506: total_time = timeDiff;
 23594  0035A4  C045  F0FA         	movff	printSortTimer@timeDiff,_total_time
 23595  0035A8  C046  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 23596                           
 23597                           ;sort.c: 508: if(f_most_recent_sort_time){
 23598  0035AC  0101               	movlb	1	; () banked
 23599  0035AE  5135               	movf	_f_most_recent_sort_time& (0+255),w,b
 23600  0035B0  0101               	movlb	1	; () banked
 23601  0035B2  1136               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 23602  0035B4  B4D8               	btfsc	status,2,c
 23603  0035B6  D009               	goto	i2l9933
 23604                           
 23605                           ; BSR set to: 1
 23606                           ;sort.c: 509: most_recent_sort_time = total_time;
 23607  0035B8  C0FA  F143         	movff	_total_time,_most_recent_sort_time
 23608  0035BC  C0FB  F144         	movff	_total_time+1,_most_recent_sort_time+1
 23609                           
 23610                           ; BSR set to: 1
 23611                           ;sort.c: 510: f_most_recent_sort_time = 0;
 23612  0035C0  0E00               	movlw	0
 23613  0035C2  0101               	movlb	1	; () banked
 23614  0035C4  6F36               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 23615  0035C6  0E00               	movlw	0
 23616  0035C8  6F35               	movwf	_f_most_recent_sort_time& (0+255),b
 23617  0035CA                     i2l9933:
 23618                           
 23619                           ; BSR set to: 1
 23620                           ;sort.c: 511: }
 23621                           ;sort.c: 531: if((total_time - most_recent_sort_time == 42) || (total_time == 179)){
 23622  0035CA  C143  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 23623  0035CE  C144  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 23624  0035D2  1E2A               	comf	??_printSortTimer,f,c
 23625  0035D4  1E2B               	comf	??_printSortTimer+1,f,c
 23626  0035D6  4A2A               	infsnz	??_printSortTimer,f,c
 23627  0035D8  2A2B               	incf	??_printSortTimer+1,f,c
 23628  0035DA  0100               	movlb	0	; () banked
 23629  0035DC  51FA               	movf	_total_time& (0+255),w,b
 23630  0035DE  262A               	addwf	??_printSortTimer,f,c
 23631  0035E0  0100               	movlb	0	; () banked
 23632  0035E2  51FB               	movf	(_total_time+1)& (0+255),w,b
 23633  0035E4  222B               	addwfc	??_printSortTimer+1,f,c
 23634  0035E6  0E2A               	movlw	42
 23635  0035E8  182A               	xorwf	??_printSortTimer,w,c
 23636  0035EA  102B               	iorwf	??_printSortTimer+1,w,c
 23637  0035EC  B4D8               	btfsc	status,2,c
 23638  0035EE  D007               	goto	i2l9937
 23639                           
 23640                           ; BSR set to: 0
 23641  0035F0  0EB3               	movlw	179
 23642  0035F2  0100               	movlb	0	; () banked
 23643  0035F4  19FA               	xorwf	_total_time& (0+255),w,b
 23644  0035F6  0100               	movlb	0	; () banked
 23645  0035F8  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 23646  0035FA  A4D8               	btfss	status,2,c
 23647  0035FC  D003               	goto	i2l9939
 23648  0035FE                     i2l9937:
 23649                           
 23650                           ; BSR set to: 0
 23651                           ;sort.c: 532: machine_state = DoneSorting_state;
 23652  0035FE  0E02               	movlw	2
 23653  003600  0100               	movlb	0	; () banked
 23654  003602  6FFC               	movwf	_machine_state& (0+255),b
 23655  003604                     i2l9939:
 23656                           
 23657                           ; BSR set to: 0
 23658                           ;sort.c: 534: }
 23659                           ;sort.c: 536: int min = (timeDiff % 3600) / 60;
 23660  003604  0E0E               	movlw	14
 23661  003606  6E04               	movwf	i2___lwmod@divisor+1,c
 23662  003608  0E10               	movlw	16
 23663  00360A  6E03               	movwf	i2___lwmod@divisor,c
 23664  00360C  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 23665  003610  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 23666  003614  EC20  F02A         	call	i2___lwmod	;wreg free
 23667  003618  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 23668  00361C  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 23669  003620  0E00               	movlw	0
 23670  003622  6E09               	movwf	i2___lwdiv@divisor+1,c
 23671  003624  0E3C               	movlw	60
 23672  003626  6E08               	movwf	i2___lwdiv@divisor,c
 23673  003628  EC19  F029         	call	i2___lwdiv	;wreg free
 23674  00362C  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 23675  003630  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 23676                           
 23677                           ;sort.c: 537: int sec = (timeDiff % 3600) % 60;
 23678  003634  0E0E               	movlw	14
 23679  003636  6E04               	movwf	i2___lwmod@divisor+1,c
 23680  003638  0E10               	movlw	16
 23681  00363A  6E03               	movwf	i2___lwmod@divisor,c
 23682  00363C  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 23683  003640  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 23684  003644  EC20  F02A         	call	i2___lwmod	;wreg free
 23685  003648  C001  F043         	movff	?i2___lwmod,_printSortTimer$2560
 23686  00364C  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2560+1
 23687                           
 23688                           ;sort.c: 537: int sec = (timeDiff % 3600) % 60;
 23689  003650  C043  F001         	movff	_printSortTimer$2560,i2___lwmod@dividend
 23690  003654  C044  F002         	movff	_printSortTimer$2560+1,i2___lwmod@dividend+1
 23691  003658  0E00               	movlw	0
 23692  00365A  6E04               	movwf	i2___lwmod@divisor+1,c
 23693  00365C  0E3C               	movlw	60
 23694  00365E  6E03               	movwf	i2___lwmod@divisor,c
 23695  003660  EC20  F02A         	call	i2___lwmod	;wreg free
 23696  003664  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 23697  003668  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 23698                           
 23699                           ;sort.c: 539: lcdInst(0b10000000);;
 23700  00366C  0E80               	movlw	128
 23701  00366E  EC47  F02D         	call	i2_lcdInst
 23702                           
 23703                           ;sort.c: 540: printf("SORTING...     ");
 23704  003672  0E3D               	movlw	low STR_65
 23705  003674  6E0D               	movwf	i2printf@f,c
 23706  003676  0EFE               	movlw	high STR_65
 23707  003678  6E0E               	movwf	i2printf@f+1,c
 23708  00367A  ECA2  F011         	call	i2_printf	;wreg free
 23709                           
 23710                           ;sort.c: 541: lcdInst(0b11000000);;
 23711  00367E  0EC0               	movlw	192
 23712  003680  EC47  F02D         	call	i2_lcdInst
 23713                           
 23714                           ;sort.c: 542: printf("TIME %d:%02d   ", min, sec);
 23715  003684  0E4D               	movlw	low STR_66
 23716  003686  6E0D               	movwf	i2printf@f,c
 23717  003688  0EFE               	movlw	high STR_66
 23718  00368A  6E0E               	movwf	i2printf@f+1,c
 23719  00368C  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 23720  003690  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 23721  003694  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 23722  003698  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 23723  00369C  ECA2  F011         	call	i2_printf	;wreg free
 23724  0036A0  0012               	return		;funcret
 23725  0036A2                     __end_of_printSortTimer:
 23726                           	opt stack 0
 23727                           pclatu	equ	0xFFB
 23728                           pclath	equ	0xFFA
 23729                           tblptru	equ	0xFF8
 23730                           tblptrh	equ	0xFF7
 23731                           tblptrl	equ	0xFF6
 23732                           tablat	equ	0xFF5
 23733                           prodh	equ	0xFF4
 23734                           prodl	equ	0xFF3
 23735                           intcon	equ	0xFF2
 23736                           intcon2	equ	0xFF1
 23737                           intcon3	equ	0xFF0
 23738                           indf0	equ	0xFEF
 23739                           postinc0	equ	0xFEE
 23740                           fsr0h	equ	0xFEA
 23741                           fsr0l	equ	0xFE9
 23742                           wreg	equ	0xFE8
 23743                           postdec1	equ	0xFE5
 23744                           fsr1h	equ	0xFE2
 23745                           fsr1l	equ	0xFE1
 23746                           indf2	equ	0xFDF
 23747                           postinc2	equ	0xFDE
 23748                           postdec2	equ	0xFDD
 23749                           fsr2h	equ	0xFDA
 23750                           fsr2l	equ	0xFD9
 23751                           status	equ	0xFD8
 23752                           
 23753 ;; *************** function i2_printf *****************
 23754 ;; Defined at:
 23755 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 23756 ;; Parameters:    Size  Location     Type
 23757 ;;  f               2   12[COMRAM] PTR const unsigned char 
 23758 ;;		 -> STR_130(18), STR_129(18), STR_128(17), STR_127(17), 
 23759 ;;		 -> STR_126(15), STR_125(15), STR_124(18), STR_123(15), 
 23760 ;;		 -> STR_122(18), STR_121(18), STR_120(17), STR_119(17), 
 23761 ;;		 -> STR_118(17), STR_117(17), STR_116(17), STR_115(17), 
 23762 ;;		 -> STR_114(17), STR_113(17), STR_112(18), STR_111(17), 
 23763 ;;		 -> STR_110(15), STR_109(15), STR_108(15), STR_107(17), 
 23764 ;;		 -> STR_106(17), STR_105(17), STR_104(16), STR_103(17), 
 23765 ;;		 -> STR_102(17), STR_101(17), STR_100(17), STR_99(17), 
 23766 ;;		 -> STR_98(17), STR_97(15), STR_96(11), STR_95(17), 
 23767 ;;		 -> STR_94(11), STR_93(17), STR_92(14), STR_91(15), 
 23768 ;;		 -> STR_90(14), STR_89(10), STR_88(9), STR_87(9), 
 23769 ;;		 -> STR_86(10), STR_85(10), STR_84(16), STR_83(15), 
 23770 ;;		 -> STR_82(3), STR_81(15), STR_80(13), STR_79(14), 
 23771 ;;		 -> STR_78(8), STR_77(14), STR_76(15), STR_75(12), 
 23772 ;;		 -> STR_74(14), STR_73(17), STR_72(14), STR_71(15), 
 23773 ;;		 -> STR_70(17), STR_69(17), STR_68(7), STR_67(21), 
 23774 ;;		 -> STR_66(16), STR_65(16), STR_64(19), STR_63(24), 
 23775 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 23776 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 23777 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 23778 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 23779 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 23780 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(17), 
 23781 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(14), 
 23782 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 23783 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 23784 ;;		 -> STR_1(18), 
 23785 ;; Auto vars:     Size  Location     Type
 23786 ;;  printf          4    0        struct .
 23787 ;;  printf          2   39[COMRAM] int 
 23788 ;;  printf          2   35[COMRAM] unsigned int 
 23789 ;;  printf          2   33[COMRAM] unsigned int 
 23790 ;;  printf          2   31[COMRAM] PTR void [1]
 23791 ;;		 -> ?i2_printf(2), ?_printf(2), 
 23792 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 23793 ;;		 -> STR_131(7), ID@res2(2), ID@res1(2), count_total(2), 
 23794 ;;		 -> printRTC@month(4), UI@month(4), 
 23795 ;;  printf          1   38[COMRAM] char 
 23796 ;;  printf          1   37[COMRAM] unsigned char 
 23797 ;;  printf          1   28[COMRAM] char 
 23798 ;; Return value:  Size  Location     Type
 23799 ;;                  2   12[COMRAM] int 
 23800 ;; Registers used:
 23801 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23802 ;; Tracked objects:
 23803 ;;		On entry : 0/0
 23804 ;;		On exit  : 0/0
 23805 ;;		Unchanged: 0/0
 23806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23807 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23808 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23809 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23810 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23811 ;;Total ram usage:       29 bytes
 23812 ;; Hardware stack levels used:    1
 23813 ;; Hardware stack levels required when called:    2
 23814 ;; This function calls:
 23815 ;;		i2___lwdiv
 23816 ;;		i2___lwmod
 23817 ;;		i2___wmul
 23818 ;;		i2_isdigit
 23819 ;;		i2_putch
 23820 ;; This function is called by:
 23821 ;;		_change_state_to_menu_11
 23822 ;;		_change_state_to_menu_23
 23823 ;;		_change_state_to_logs_11
 23824 ;;		_change_state_to_logs_12
 23825 ;;		_change_state_to_logs_22
 23826 ;;		_change_state_to_logs_23
 23827 ;;		_change_state_to_logs_33
 23828 ;;		_change_state_to_logs_34
 23829 ;;		_printSortTimer
 23830 ;;		i2_change_state_to_menu_start
 23831 ;;		i2_change_state_to_menu_12
 23832 ;;		i2_change_state_to_menu_22
 23833 ;;		i2_printRTC
 23834 ;; This function uses a non-reentrant model
 23835 ;;
 23836                           
 23837                           	psect	text87
 23838  002344                     __ptext87:
 23839                           	opt stack 0
 23840  002344                     i2_printf:
 23841                           	opt stack 20
 23842                           
 23843                           ;doprnt.c: 466: va_list ap;
 23844                           ;doprnt.c: 499: signed char c;
 23845                           ;doprnt.c: 501: int width;
 23846                           ;doprnt.c: 506: signed char prec;
 23847                           ;doprnt.c: 508: unsigned char flag;
 23848                           ;doprnt.c: 523: union {
 23849                           ;doprnt.c: 524: unsigned long vd;
 23850                           ;doprnt.c: 525: double integ;
 23851                           ;doprnt.c: 526: } tmpval;
 23852                           ;doprnt.c: 528: unsigned int val;
 23853                           ;doprnt.c: 529: unsigned len;
 23854                           ;doprnt.c: 530: const char * cp;
 23855                           ;doprnt.c: 533: *ap = __va_start();
 23856                           
 23857                           ;incstack = 0
 23858  002344  0E0F               	movlw	low (?i2_printf+2)
 23859  002346  6E20               	movwf	i2printf@ap,c
 23860  002348  0E00               	movlw	high (?i2_printf+2)
 23861  00234A  6E21               	movwf	i2printf@ap+1,c
 23862                           
 23863                           ;doprnt.c: 536: while(c = *f++) {
 23864  00234C  D1A4               	goto	i2l7087
 23865  00234E                     i2l6957:
 23866                           
 23867                           ;doprnt.c: 538: if(c != '%')
 23868  00234E  0E25               	movlw	37
 23869  002350  1827               	xorwf	i2printf@c,w,c
 23870  002352  B4D8               	btfsc	status,2,c
 23871  002354  D004               	goto	i2l6961
 23872                           
 23873                           ;doprnt.c: 540: {
 23874                           ;doprnt.c: 541: (putch(c) );
 23875  002356  5027               	movf	i2printf@c,w,c
 23876  002358  EC41  F02D         	call	i2_putch
 23877                           
 23878                           ;doprnt.c: 542: continue;
 23879  00235C  D19C               	goto	i2l7087
 23880  00235E                     i2l6961:
 23881                           
 23882                           ;doprnt.c: 543: }
 23883                           ;doprnt.c: 546: width = 0;
 23884  00235E  0E00               	movlw	0
 23885  002360  6E29               	movwf	i2printf@width+1,c
 23886  002362  0E00               	movlw	0
 23887  002364  6E28               	movwf	i2printf@width,c
 23888                           
 23889                           ;doprnt.c: 548: flag = 0;
 23890  002366  0E00               	movlw	0
 23891  002368  6E26               	movwf	i2printf@flag,c
 23892                           
 23893                           ;doprnt.c: 551: switch(*f) {
 23894                           
 23895                           ;doprnt.c: 550: for(;;) {
 23896  00236A  D003               	goto	i2l6967
 23897  00236C                     i2l6963:
 23898                           
 23899                           ;doprnt.c: 580: flag |= 0x04;
 23900  00236C  8426               	bsf	i2printf@flag,2,c
 23901                           
 23902                           ;doprnt.c: 581: f++;
 23903  00236E  4A0D               	infsnz	i2printf@f,f,c
 23904  002370  2A0E               	incf	i2printf@f+1,f,c
 23905  002372                     i2l6967:
 23906  002372  C00D  FFF6         	movff	i2printf@f,tblptrl
 23907  002376  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23908  00237A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23909  00237A  6AF8               	clrf	tblptru,c
 23910  00237C                     	endif
 23911  00237C                     	if	0	;tblptru may be non-zero
 23912  00237C                     	endif
 23913  00237C  0008               	tblrd		*
 23914  00237E  50F5               	movf	tablat,w,c
 23915                           
 23916                           ; Switch size 1, requested type "space"
 23917                           ; Number of cases is 1, Range of values is 48 to 48
 23918                           ; switch strategies available:
 23919                           ; Name         Instructions Cycles
 23920                           ; simple_byte            4     3 (average)
 23921                           ;	Chosen strategy is simple_byte
 23922  002380  0A30               	xorlw	48	; case 48
 23923  002382  B4D8               	btfsc	status,2,c
 23924  002384  D7F3               	goto	i2l6963
 23925                           
 23926                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 23927                           
 23928                           ;doprnt.c: 586: }
 23929                           
 23930                           ;doprnt.c: 585: break;
 23931  002386  C00D  FFF6         	movff	i2printf@f,tblptrl
 23932  00238A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23933  00238E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23934  00238E  6AF8               	clrf	tblptru,c
 23935  002390                     	endif
 23936  002390                     	if	0	;tblptru may be non-zero
 23937  002390                     	endif
 23938  002390  0008               	tblrd		*
 23939  002392  50F5               	movf	tablat,w,c
 23940  002394  ECDF  F02C         	call	i2_isdigit
 23941  002398  A0D8               	btfss	status,0,c
 23942  00239A  D0A6               	goto	i2l7015
 23943                           
 23944                           ;doprnt.c: 598: width = 0;
 23945  00239C  0E00               	movlw	0
 23946  00239E  6E29               	movwf	i2printf@width+1,c
 23947  0023A0  0E00               	movlw	0
 23948  0023A2  6E28               	movwf	i2printf@width,c
 23949  0023A4                     i2l6973:
 23950                           
 23951                           ;doprnt.c: 600: width *= 10;
 23952  0023A4  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 23953  0023A8  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 23954  0023AC  0E00               	movlw	0
 23955  0023AE  6E04               	movwf	i2___wmul@multiplicand+1,c
 23956  0023B0  0E0A               	movlw	10
 23957  0023B2  6E03               	movwf	i2___wmul@multiplicand,c
 23958  0023B4  EC85  F02C         	call	i2___wmul	;wreg free
 23959  0023B8  C001  F028         	movff	?i2___wmul,i2printf@width
 23960  0023BC  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 23961                           
 23962                           ;doprnt.c: 601: width += *f++ - '0';
 23963  0023C0  0ED0               	movlw	208
 23964  0023C2  6E19               	movwf	??i2_printf& (0+255),c
 23965  0023C4  0EFF               	movlw	255
 23966  0023C6  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 23967  0023C8  C00D  FFF6         	movff	i2printf@f,tblptrl
 23968  0023CC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23969  0023D0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23970  0023D0  6AF8               	clrf	tblptru,c
 23971  0023D2                     	endif
 23972  0023D2                     	if	0	;tblptru may be non-zero
 23973  0023D2                     	endif
 23974  0023D2  0008               	tblrd		*
 23975  0023D4  50F5               	movf	tablat,w,c
 23976  0023D6  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 23977  0023D8  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 23978  0023DA  5019               	movf	??i2_printf,w,c
 23979  0023DC  261B               	addwf	??i2_printf+2,f,c
 23980  0023DE  501A               	movf	??i2_printf+1,w,c
 23981  0023E0  221C               	addwfc	??i2_printf+3,f,c
 23982  0023E2  501B               	movf	??i2_printf+2,w,c
 23983  0023E4  2628               	addwf	i2printf@width,f,c
 23984  0023E6  501C               	movf	??i2_printf+3,w,c
 23985  0023E8  2229               	addwfc	i2printf@width+1,f,c
 23986  0023EA  4A0D               	infsnz	i2printf@f,f,c
 23987  0023EC  2A0E               	incf	i2printf@f+1,f,c
 23988                           
 23989                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 23990  0023EE  C00D  FFF6         	movff	i2printf@f,tblptrl
 23991  0023F2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23992  0023F6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23993  0023F6  6AF8               	clrf	tblptru,c
 23994  0023F8                     	endif
 23995  0023F8                     	if	0	;tblptru may be non-zero
 23996  0023F8                     	endif
 23997  0023F8  0008               	tblrd		*
 23998  0023FA  50F5               	movf	tablat,w,c
 23999  0023FC  ECDF  F02C         	call	i2_isdigit
 24000  002400  A0D8               	btfss	status,0,c
 24001  002402  D072               	goto	i2l7015
 24002  002404  D7CF               	goto	i2l6973
 24003  002406                     i2l6981:
 24004                           
 24005                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 24006  002406  C020  FFD9         	movff	i2printf@ap,fsr2l
 24007  00240A  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24008  00240E  CFDE F01E          	movff	postinc2,i2printf@cp
 24009  002412  CFDD F01F          	movff	postdec2,i2printf@cp+1
 24010  002416  0E02               	movlw	2
 24011  002418  2620               	addwf	i2printf@ap,f,c
 24012  00241A  0E00               	movlw	0
 24013  00241C  2221               	addwfc	i2printf@ap+1,f,c
 24014                           
 24015                           ;doprnt.c: 740: if(!cp)
 24016  00241E  501E               	movf	i2printf@cp,w,c
 24017  002420  101F               	iorwf	i2printf@cp+1,w,c
 24018  002422  A4D8               	btfss	status,2,c
 24019  002424  D004               	goto	i2l6989
 24020                           
 24021                           ;doprnt.c: 741: cp = "(null)";
 24022  002426  0EB5               	movlw	low STR_131
 24023  002428  6E1E               	movwf	i2printf@cp,c
 24024  00242A  0EFF               	movlw	high STR_131
 24025  00242C  6E1F               	movwf	i2printf@cp+1,c
 24026  00242E                     i2l6989:
 24027                           
 24028                           ;doprnt.c: 745: len = 0;
 24029  00242E  0E00               	movlw	0
 24030  002430  6E23               	movwf	i2printf@len+1,c
 24031  002432  0E00               	movlw	0
 24032  002434  6E22               	movwf	i2printf@len,c
 24033                           
 24034                           ;doprnt.c: 746: while(cp[len])
 24035  002436  D002               	goto	i2l6993
 24036  002438                     i2l6991:
 24037                           
 24038                           ;doprnt.c: 747: len++;
 24039  002438  4A22               	infsnz	i2printf@len,f,c
 24040  00243A  2A23               	incf	i2printf@len+1,f,c
 24041  00243C                     i2l6993:
 24042  00243C  5022               	movf	i2printf@len,w,c
 24043  00243E  241E               	addwf	i2printf@cp,w,c
 24044  002440  6E19               	movwf	??i2_printf& (0+255),c
 24045  002442  5023               	movf	i2printf@len+1,w,c
 24046  002444  201F               	addwfc	i2printf@cp+1,w,c
 24047  002446  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24048  002448  C019  FFF6         	movff	??i2_printf,tblptrl
 24049  00244C  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 24050  002450  0E00               	movlw	low (__mediumconst shr (0+16))
 24051  002452  6EF8               	movwf	tblptru,c
 24052  002454  0E0F               	movlw	(high __ramtop+-1)
 24053  002456  64F7               	cpfsgt	tblptrh,c
 24054  002458  D003               	bra	i2u558_47
 24055  00245A  0008               	tblrd		*
 24056  00245C  50F5               	movf	tablat,w,c
 24057  00245E  D005               	bra	i2u558_40
 24058  002460                     i2u558_47:
 24059  002460  CFF6 FFE9          	movff	tblptrl,fsr0l
 24060  002464  CFF7 FFEA          	movff	tblptrh,fsr0h
 24061  002468  50EF               	movf	indf0,w,c
 24062  00246A                     i2u558_40:
 24063  00246A  0900               	iorlw	0
 24064  00246C  A4D8               	btfss	status,2,c
 24065  00246E  D7E4               	goto	i2l6991
 24066                           
 24067                           ;doprnt.c: 757: if(width > len)
 24068  002470  5028               	movf	i2printf@width,w,c
 24069  002472  5C22               	subwf	i2printf@len,w,c
 24070  002474  5029               	movf	i2printf@width+1,w,c
 24071  002476  5823               	subwfb	i2printf@len+1,w,c
 24072  002478  B0D8               	btfsc	status,0,c
 24073  00247A  D005               	goto	i2l6999
 24074                           
 24075                           ;doprnt.c: 758: width -= len;
 24076  00247C  5022               	movf	i2printf@len,w,c
 24077  00247E  5E28               	subwf	i2printf@width,f,c
 24078  002480  5023               	movf	i2printf@len+1,w,c
 24079  002482  5A29               	subwfb	i2printf@width+1,f,c
 24080  002484  D008               	goto	i2l7003
 24081  002486                     i2l6999:
 24082                           
 24083                           ;doprnt.c: 759: else
 24084                           ;doprnt.c: 760: width = 0;
 24085  002486  0E00               	movlw	0
 24086  002488  6E29               	movwf	i2printf@width+1,c
 24087  00248A  0E00               	movlw	0
 24088  00248C  6E28               	movwf	i2printf@width,c
 24089                           
 24090                           ;doprnt.c: 764: while(width--)
 24091  00248E  D003               	goto	i2l7003
 24092  002490                     i2l7001:
 24093                           
 24094                           ;doprnt.c: 765: (putch(' ') );
 24095  002490  0E20               	movlw	32
 24096  002492  EC41  F02D         	call	i2_putch
 24097  002496                     i2l7003:
 24098  002496  0628               	decf	i2printf@width,f,c
 24099  002498  A0D8               	btfss	status,0,c
 24100  00249A  0629               	decf	i2printf@width+1,f,c
 24101  00249C  2828               	incf	i2printf@width,w,c
 24102  00249E  E1F8               	bnz	i2l7001
 24103  0024A0  2829               	incf	i2printf@width+1,w,c
 24104  0024A2  B4D8               	btfsc	status,2,c
 24105  0024A4  D016               	goto	i2l7009
 24106  0024A6  D7F4               	goto	i2l7001
 24107  0024A8                     i2l7005:
 24108                           
 24109                           ;doprnt.c: 768: (putch(*cp++) );
 24110  0024A8  C01E  FFF6         	movff	i2printf@cp,tblptrl
 24111  0024AC  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 24112  0024B0  0E00               	movlw	low (__mediumconst shr (0+16))
 24113  0024B2  6EF8               	movwf	tblptru,c
 24114  0024B4  0E0F               	movlw	(high __ramtop+-1)
 24115  0024B6  64F7               	cpfsgt	tblptrh,c
 24116  0024B8  D003               	bra	i2u562_47
 24117  0024BA  0008               	tblrd		*
 24118  0024BC  50F5               	movf	tablat,w,c
 24119  0024BE  D005               	bra	i2u562_40
 24120  0024C0                     i2u562_47:
 24121  0024C0  CFF6 FFE9          	movff	tblptrl,fsr0l
 24122  0024C4  CFF7 FFEA          	movff	tblptrh,fsr0h
 24123  0024C8  50EF               	movf	indf0,w,c
 24124  0024CA                     i2u562_40:
 24125  0024CA  EC41  F02D         	call	i2_putch
 24126  0024CE  4A1E               	infsnz	i2printf@cp,f,c
 24127  0024D0  2A1F               	incf	i2printf@cp+1,f,c
 24128  0024D2                     i2l7009:
 24129  0024D2  0622               	decf	i2printf@len,f,c
 24130  0024D4  A0D8               	btfss	status,0,c
 24131  0024D6  0623               	decf	i2printf@len+1,f,c
 24132  0024D8  2822               	incf	i2printf@len,w,c
 24133  0024DA  E1E6               	bnz	i2l7005
 24134  0024DC  2823               	incf	i2printf@len+1,w,c
 24135  0024DE  B4D8               	btfsc	status,2,c
 24136  0024E0  D0DA               	goto	i2l7087
 24137  0024E2  D7E2               	goto	i2l7005
 24138  0024E4                     i2l7011:
 24139                           
 24140                           ;doprnt.c: 818: flag |= 0x40;
 24141  0024E4  8C26               	bsf	i2printf@flag,6,c
 24142                           
 24143                           ;doprnt.c: 822: }
 24144                           
 24145                           ;doprnt.c: 819: break;
 24146  0024E6  D01B               	goto	i2l1525
 24147  0024E8                     i2l7015:
 24148  0024E8  C00D  FFF6         	movff	i2printf@f,tblptrl
 24149  0024EC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24150  0024F0  4A0D               	infsnz	i2printf@f,f,c
 24151  0024F2  2A0E               	incf	i2printf@f+1,f,c
 24152  0024F4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24153  0024F4  6AF8               	clrf	tblptru,c
 24154  0024F6                     	endif
 24155  0024F6                     	if	0	;tblptru may be non-zero
 24156  0024F6                     	endif
 24157  0024F6  0008               	tblrd		*
 24158  0024F8  CFF5 F027          	movff	tablat,i2printf@c
 24159  0024FC  5027               	movf	i2printf@c,w,c
 24160                           
 24161                           ; Switch size 1, requested type "space"
 24162                           ; Number of cases is 5, Range of values is 0 to 117
 24163                           ; switch strategies available:
 24164                           ; Name         Instructions Cycles
 24165                           ; simple_byte           16     9 (average)
 24166                           ;	Chosen strategy is simple_byte
 24167  0024FE  0A00               	xorlw	0	; case 0
 24168  002500  B4D8               	btfsc	status,2,c
 24169  002502  0012               	return	
 24170  002504  0A64               	xorlw	100	; case 100
 24171  002506  B4D8               	btfsc	status,2,c
 24172  002508  D00A               	goto	i2l1525
 24173  00250A  0A0D               	xorlw	13	; case 105
 24174  00250C  B4D8               	btfsc	status,2,c
 24175  00250E  D007               	goto	i2l1525
 24176  002510  0A1A               	xorlw	26	; case 115
 24177  002512  B4D8               	btfsc	status,2,c
 24178  002514  D778               	goto	i2l6981
 24179  002516  0A06               	xorlw	6	; case 117
 24180  002518  B4D8               	btfsc	status,2,c
 24181  00251A  D7E4               	goto	i2l7011
 24182  00251C  D0BC               	goto	i2l7087
 24183  00251E                     i2l1525:
 24184                           
 24185                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 24186  00251E  BC26               	btfsc	i2printf@flag,6,c
 24187  002520  D015               	goto	i2l7027
 24188                           
 24189                           ;doprnt.c: 1253: {
 24190                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 24191  002522  C020  FFD9         	movff	i2printf@ap,fsr2l
 24192  002526  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24193  00252A  CFDE F024          	movff	postinc2,i2printf@val
 24194  00252E  CFDD F025          	movff	postdec2,i2printf@val+1
 24195  002532  0E02               	movlw	2
 24196  002534  2620               	addwf	i2printf@ap,f,c
 24197  002536  0E00               	movlw	0
 24198  002538  2221               	addwfc	i2printf@ap+1,f,c
 24199                           
 24200                           ;doprnt.c: 1261: if((int)val < 0) {
 24201  00253A  AE25               	btfss	i2printf@val+1,7,c
 24202  00253C  D013               	goto	i2l7031
 24203                           
 24204                           ;doprnt.c: 1262: flag |= 0x03;
 24205  00253E  0E03               	movlw	3
 24206  002540  1226               	iorwf	i2printf@flag,f,c
 24207                           
 24208                           ;doprnt.c: 1263: val = -val;
 24209  002542  6C24               	negf	i2printf@val,c
 24210  002544  1E25               	comf	i2printf@val+1,f,c
 24211  002546  B0D8               	btfsc	status,0,c
 24212  002548  2A25               	incf	i2printf@val+1,f,c
 24213                           
 24214                           ;doprnt.c: 1264: }
 24215                           ;doprnt.c: 1266: }
 24216  00254A  D00C               	goto	i2l7031
 24217  00254C                     i2l7027:
 24218                           
 24219                           ;doprnt.c: 1268: else
 24220                           ;doprnt.c: 1273: {
 24221                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 24222  00254C  C020  FFD9         	movff	i2printf@ap,fsr2l
 24223  002550  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24224  002554  CFDE F024          	movff	postinc2,i2printf@val
 24225  002558  CFDD F025          	movff	postdec2,i2printf@val+1
 24226  00255C  0E02               	movlw	2
 24227  00255E  2620               	addwf	i2printf@ap,f,c
 24228  002560  0E00               	movlw	0
 24229  002562  2221               	addwfc	i2printf@ap+1,f,c
 24230  002564                     i2l7031:
 24231                           
 24232                           ;doprnt.c: 1287: }
 24233                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 24234  002564  0E01               	movlw	1
 24235  002566  6E27               	movwf	i2printf@c,c
 24236  002568                     i2l7033:
 24237  002568  0E05               	movlw	5
 24238  00256A  1827               	xorwf	i2printf@c,w,c
 24239  00256C  B4D8               	btfsc	status,2,c
 24240  00256E  D015               	goto	i2l7045
 24241                           
 24242                           ;doprnt.c: 1306: if(val < dpowers[c])
 24243  002570  5027               	movf	i2printf@c,w,c
 24244  002572  0D02               	mullw	2
 24245  002574  0E9C               	movlw	low _dpowers
 24246  002576  24F3               	addwf	prodl,w,c
 24247  002578  6EF6               	movwf	tblptrl,c
 24248  00257A  0EFA               	movlw	high _dpowers
 24249  00257C  20F4               	addwfc	prodh,w,c
 24250  00257E  6EF7               	movwf	tblptrh,c
 24251  002580                     	if	1	;There are 3 active tblptr bytes
 24252  002580  6AF8               	clrf	tblptru,c
 24253  002582  0E00               	movlw	low (__mediumconst shr (0+16))
 24254  002584  22F8               	addwfc	tblptru,f,c
 24255  002586                     	endif
 24256  002586  0009               	tblrd		*+
 24257  002588  50F5               	movf	tablat,w,c
 24258  00258A  5C24               	subwf	i2printf@val,w,c
 24259  00258C  0009               	tblrd		*+
 24260  00258E  50F5               	movf	tablat,w,c
 24261  002590  5825               	subwfb	i2printf@val+1,w,c
 24262  002592  A0D8               	btfss	status,0,c
 24263  002594  D002               	goto	i2l7045
 24264                           
 24265                           ;doprnt.c: 1307: break;
 24266  002596  2A27               	incf	i2printf@c,f,c
 24267  002598  D7E7               	goto	i2l7033
 24268  00259A                     i2l7045:
 24269                           
 24270                           ;doprnt.c: 1345: if(width && flag & 0x03)
 24271  00259A  5028               	movf	i2printf@width,w,c
 24272  00259C  1029               	iorwf	i2printf@width+1,w,c
 24273  00259E  B4D8               	btfsc	status,2,c
 24274  0025A0  D009               	goto	i2l7051
 24275  0025A2  C026  F019         	movff	i2printf@flag,??i2_printf
 24276  0025A6  0E03               	movlw	3
 24277  0025A8  1619               	andwf	??i2_printf,f,c
 24278  0025AA  B4D8               	btfsc	status,2,c
 24279  0025AC  D003               	goto	i2l7051
 24280                           
 24281                           ;doprnt.c: 1346: width--;
 24282  0025AE  0628               	decf	i2printf@width,f,c
 24283  0025B0  A0D8               	btfss	status,0,c
 24284  0025B2  0629               	decf	i2printf@width+1,f,c
 24285  0025B4                     i2l7051:
 24286                           
 24287                           ;doprnt.c: 1381: if(width > c)
 24288  0025B4  0E80               	movlw	128
 24289  0025B6  BE27               	btfsc	i2printf@c,7,c
 24290  0025B8  0E7F               	movlw	127
 24291  0025BA  6E19               	movwf	??i2_printf& (0+255),c
 24292  0025BC  5028               	movf	i2printf@width,w,c
 24293  0025BE  5C27               	subwf	i2printf@c,w,c
 24294  0025C0  5029               	movf	i2printf@width+1,w,c
 24295  0025C2  0A80               	xorlw	128
 24296  0025C4  5819               	subwfb	??i2_printf& (0+255),w,c
 24297  0025C6  B0D8               	btfsc	status,0,c
 24298  0025C8  D007               	goto	i2l7055
 24299                           
 24300                           ;doprnt.c: 1382: width -= c;
 24301  0025CA  5027               	movf	i2printf@c,w,c
 24302  0025CC  5E28               	subwf	i2printf@width,f,c
 24303  0025CE  0E00               	movlw	0
 24304  0025D0  BE27               	btfsc	i2printf@c,7,c
 24305  0025D2  0EFF               	movlw	255
 24306  0025D4  5A29               	subwfb	i2printf@width+1,f,c
 24307  0025D6  D004               	goto	i2l7057
 24308  0025D8                     i2l7055:
 24309                           
 24310                           ;doprnt.c: 1383: else
 24311                           ;doprnt.c: 1384: width = 0;
 24312  0025D8  0E00               	movlw	0
 24313  0025DA  6E29               	movwf	i2printf@width+1,c
 24314  0025DC  0E00               	movlw	0
 24315  0025DE  6E28               	movwf	i2printf@width,c
 24316  0025E0                     i2l7057:
 24317                           
 24318                           ;doprnt.c: 1387: if(flag & 0x04) {
 24319  0025E0  A426               	btfss	i2printf@flag,2,c
 24320  0025E2  D014               	goto	i2l7069
 24321                           
 24322                           ;doprnt.c: 1392: if(flag & 0x03)
 24323  0025E4  C026  F019         	movff	i2printf@flag,??i2_printf
 24324  0025E8  0E03               	movlw	3
 24325  0025EA  1619               	andwf	??i2_printf,f,c
 24326  0025EC  B4D8               	btfsc	status,2,c
 24327  0025EE  D003               	goto	i2l7063
 24328                           
 24329                           ;doprnt.c: 1393: (putch('-') );
 24330  0025F0  0E2D               	movlw	45
 24331  0025F2  EC41  F02D         	call	i2_putch
 24332  0025F6                     i2l7063:
 24333                           
 24334                           ;doprnt.c: 1415: if(width)
 24335  0025F6  5028               	movf	i2printf@width,w,c
 24336  0025F8  1029               	iorwf	i2printf@width+1,w,c
 24337  0025FA  B4D8               	btfsc	status,2,c
 24338  0025FC  D01E               	goto	i2l7079
 24339                           
 24340                           ;doprnt.c: 1417: (putch('0') );
 24341                           
 24342                           ;doprnt.c: 1416: do
 24343  0025FE  0E30               	movlw	48
 24344  002600  EC41  F02D         	call	i2_putch
 24345                           
 24346                           ;doprnt.c: 1418: while(--width);
 24347  002604  0628               	decf	i2printf@width,f,c
 24348  002606  A0D8               	btfss	status,0,c
 24349  002608  0629               	decf	i2printf@width+1,f,c
 24350  00260A  D7F5               	goto	i2l7063
 24351  00260C                     i2l7069:
 24352                           
 24353                           ;doprnt.c: 1422: {
 24354                           ;doprnt.c: 1424: if(width
 24355                           ;doprnt.c: 1428: )
 24356  00260C  5028               	movf	i2printf@width,w,c
 24357  00260E  1029               	iorwf	i2printf@width+1,w,c
 24358  002610  B4D8               	btfsc	status,2,c
 24359  002612  D00A               	goto	i2l7075
 24360  002614                     i2l7071:
 24361                           
 24362                           ;doprnt.c: 1430: (putch(' ') );
 24363  002614  0E20               	movlw	32
 24364  002616  EC41  F02D         	call	i2_putch
 24365                           
 24366                           ;doprnt.c: 1431: while(--width);
 24367  00261A  0628               	decf	i2printf@width,f,c
 24368  00261C  A0D8               	btfss	status,0,c
 24369  00261E  0629               	decf	i2printf@width+1,f,c
 24370  002620  5028               	movf	i2printf@width,w,c
 24371  002622  1029               	iorwf	i2printf@width+1,w,c
 24372  002624  A4D8               	btfss	status,2,c
 24373  002626  D7F6               	goto	i2l7071
 24374  002628                     i2l7075:
 24375                           
 24376                           ;doprnt.c: 1438: if(flag & 0x03)
 24377  002628  C026  F019         	movff	i2printf@flag,??i2_printf
 24378  00262C  0E03               	movlw	3
 24379  00262E  1619               	andwf	??i2_printf,f,c
 24380  002630  B4D8               	btfsc	status,2,c
 24381  002632  D003               	goto	i2l7079
 24382                           
 24383                           ;doprnt.c: 1439: (putch('-') );
 24384  002634  0E2D               	movlw	45
 24385  002636  EC41  F02D         	call	i2_putch
 24386  00263A                     i2l7079:
 24387                           
 24388                           ;doprnt.c: 1469: }
 24389                           ;doprnt.c: 1472: prec = c;
 24390  00263A  C027  F01D         	movff	i2printf@c,i2printf@prec
 24391                           
 24392                           ;doprnt.c: 1474: while(prec--) {
 24393  00263E  D027               	goto	i2l7085
 24394  002640                     i2l7081:
 24395                           
 24396                           ;doprnt.c: 1478: {
 24397                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 24398  002640  501D               	movf	i2printf@prec,w,c
 24399  002642  0D02               	mullw	2
 24400  002644  0E9C               	movlw	low _dpowers
 24401  002646  24F3               	addwf	prodl,w,c
 24402  002648  6EF6               	movwf	tblptrl,c
 24403  00264A  0EFA               	movlw	high _dpowers
 24404  00264C  20F4               	addwfc	prodh,w,c
 24405  00264E  6EF7               	movwf	tblptrh,c
 24406  002650                     	if	1	;There are 3 active tblptr bytes
 24407  002650  6AF8               	clrf	tblptru,c
 24408  002652  0E00               	movlw	low (__mediumconst shr (0+16))
 24409  002654  22F8               	addwfc	tblptru,f,c
 24410  002656                     	endif
 24411  002656  0009               	tblrd		*+
 24412  002658  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 24413  00265C  000A               	tblrd		*-
 24414  00265E  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 24415  002662  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 24416  002666  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 24417  00266A  EC19  F029         	call	i2___lwdiv	;wreg free
 24418  00266E  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 24419  002672  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 24420  002676  0E00               	movlw	0
 24421  002678  6E04               	movwf	i2___lwmod@divisor+1,c
 24422  00267A  0E0A               	movlw	10
 24423  00267C  6E03               	movwf	i2___lwmod@divisor,c
 24424  00267E  EC20  F02A         	call	i2___lwmod	;wreg free
 24425  002682  5001               	movf	?i2___lwmod,w,c
 24426  002684  0F30               	addlw	48
 24427  002686  6E27               	movwf	i2printf@c,c
 24428                           
 24429                           ;doprnt.c: 1523: }
 24430                           ;doprnt.c: 1524: (putch(c) );
 24431  002688  5027               	movf	i2printf@c,w,c
 24432  00268A  EC41  F02D         	call	i2_putch
 24433  00268E                     i2l7085:
 24434  00268E  061D               	decf	i2printf@prec,f,c
 24435  002690  281D               	incf	i2printf@prec,w,c
 24436  002692  A4D8               	btfss	status,2,c
 24437  002694  D7D5               	goto	i2l7081
 24438  002696                     i2l7087:
 24439  002696  C00D  FFF6         	movff	i2printf@f,tblptrl
 24440  00269A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24441  00269E  4A0D               	infsnz	i2printf@f,f,c
 24442  0026A0  2A0E               	incf	i2printf@f+1,f,c
 24443  0026A2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24444  0026A2  6AF8               	clrf	tblptru,c
 24445  0026A4                     	endif
 24446  0026A4                     	if	0	;tblptru may be non-zero
 24447  0026A4                     	endif
 24448  0026A4  0008               	tblrd		*
 24449  0026A6  CFF5 F027          	movff	tablat,i2printf@c
 24450  0026AA  5027               	movf	i2printf@c,w,c
 24451  0026AC  B4D8               	btfsc	status,2,c
 24452  0026AE  0012               	return	
 24453  0026B0  D64E               	goto	i2l6957
 24454  0026B2                     __end_ofi2_printf:
 24455                           	opt stack 0
 24456                           pclatu	equ	0xFFB
 24457                           pclath	equ	0xFFA
 24458                           tblptru	equ	0xFF8
 24459                           tblptrh	equ	0xFF7
 24460                           tblptrl	equ	0xFF6
 24461                           tablat	equ	0xFF5
 24462                           prodh	equ	0xFF4
 24463                           prodl	equ	0xFF3
 24464                           intcon	equ	0xFF2
 24465                           intcon2	equ	0xFF1
 24466                           intcon3	equ	0xFF0
 24467                           indf0	equ	0xFEF
 24468                           postinc0	equ	0xFEE
 24469                           fsr0h	equ	0xFEA
 24470                           fsr0l	equ	0xFE9
 24471                           wreg	equ	0xFE8
 24472                           postdec1	equ	0xFE5
 24473                           fsr1h	equ	0xFE2
 24474                           fsr1l	equ	0xFE1
 24475                           indf2	equ	0xFDF
 24476                           postinc2	equ	0xFDE
 24477                           postdec2	equ	0xFDD
 24478                           fsr2h	equ	0xFDA
 24479                           fsr2l	equ	0xFD9
 24480                           status	equ	0xFD8
 24481                           
 24482 ;; *************** function i2_putch *****************
 24483 ;; Defined at:
 24484 ;;		line 20 in file "lcd.c"
 24485 ;; Parameters:    Size  Location     Type
 24486 ;;  data            1    wreg     unsigned char 
 24487 ;; Auto vars:     Size  Location     Type
 24488 ;;  data            1    2[COMRAM] unsigned char 
 24489 ;; Return value:  Size  Location     Type
 24490 ;;                  1    wreg      void 
 24491 ;; Registers used:
 24492 ;;		wreg, status,2, status,0, cstack
 24493 ;; Tracked objects:
 24494 ;;		On entry : 0/0
 24495 ;;		On exit  : 0/0
 24496 ;;		Unchanged: 0/0
 24497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24499 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24501 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24502 ;;Total ram usage:        1 bytes
 24503 ;; Hardware stack levels used:    1
 24504 ;; Hardware stack levels required when called:    1
 24505 ;; This function calls:
 24506 ;;		i2_lcdNibble
 24507 ;; This function is called by:
 24508 ;;		i2_printf
 24509 ;; This function uses a non-reentrant model
 24510 ;;
 24511                           
 24512                           	psect	text88
 24513  005A82                     __ptext88:
 24514                           	opt stack 0
 24515  005A82                     i2_putch:
 24516                           	opt stack 20
 24517                           
 24518                           ;incstack = 0
 24519                           ;i2putch@data stored from wreg
 24520  005A82  6E03               	movwf	i2putch@data,c
 24521                           
 24522                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 24523  005A84  848C               	bsf	3980,2,c	;volatile
 24524                           
 24525                           ;lcd.c: 22: lcdNibble(data);
 24526  005A86  5003               	movf	i2putch@data,w,c
 24527  005A88  ECEC  F028         	call	i2_lcdNibble
 24528  005A8C  0012               	return		;funcret
 24529  005A8E                     __end_ofi2_putch:
 24530                           	opt stack 0
 24531                           pclatu	equ	0xFFB
 24532                           pclath	equ	0xFFA
 24533                           tblptru	equ	0xFF8
 24534                           tblptrh	equ	0xFF7
 24535                           tblptrl	equ	0xFF6
 24536                           tablat	equ	0xFF5
 24537                           prodh	equ	0xFF4
 24538                           prodl	equ	0xFF3
 24539                           intcon	equ	0xFF2
 24540                           intcon2	equ	0xFF1
 24541                           intcon3	equ	0xFF0
 24542                           indf0	equ	0xFEF
 24543                           postinc0	equ	0xFEE
 24544                           fsr0h	equ	0xFEA
 24545                           fsr0l	equ	0xFE9
 24546                           wreg	equ	0xFE8
 24547                           postdec1	equ	0xFE5
 24548                           fsr1h	equ	0xFE2
 24549                           fsr1l	equ	0xFE1
 24550                           indf2	equ	0xFDF
 24551                           postinc2	equ	0xFDE
 24552                           postdec2	equ	0xFDD
 24553                           fsr2h	equ	0xFDA
 24554                           fsr2l	equ	0xFD9
 24555                           status	equ	0xFD8
 24556                           
 24557 ;; *************** function i2_isdigit *****************
 24558 ;; Defined at:
 24559 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 24560 ;; Parameters:    Size  Location     Type
 24561 ;;  c               1    wreg     unsigned char 
 24562 ;; Auto vars:     Size  Location     Type
 24563 ;;  c               1    2[COMRAM] unsigned char 
 24564 ;; Return value:  Size  Location     Type
 24565 ;;		None               void
 24566 ;; Registers used:
 24567 ;;		wreg, status,2, status,0
 24568 ;; Tracked objects:
 24569 ;;		On entry : 0/0
 24570 ;;		On exit  : 0/0
 24571 ;;		Unchanged: 0/0
 24572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24574 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24575 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24576 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24577 ;;Total ram usage:        3 bytes
 24578 ;; Hardware stack levels used:    1
 24579 ;; This function calls:
 24580 ;;		Nothing
 24581 ;; This function is called by:
 24582 ;;		i2_printf
 24583 ;; This function uses a non-reentrant model
 24584 ;;
 24585                           
 24586                           	psect	text89
 24587  0059BE                     __ptext89:
 24588                           	opt stack 0
 24589  0059BE                     i2_isdigit:
 24590                           	opt stack 21
 24591                           
 24592                           ;incstack = 0
 24593                           ;i2isdigit@c stored from wreg
 24594  0059BE  6E03               	movwf	i2isdigit@c,c
 24595  0059C0  0E00               	movlw	0
 24596  0059C2  6E02               	movwf	i2_isdigit$2068,c
 24597  0059C4  0E3A               	movlw	58
 24598  0059C6  6003               	cpfslt	i2isdigit@c,c
 24599  0059C8  D005               	goto	i2l6621
 24600  0059CA  0E2F               	movlw	47
 24601  0059CC  6403               	cpfsgt	i2isdigit@c,c
 24602  0059CE  D002               	goto	i2l6621
 24603  0059D0  0E01               	movlw	1
 24604  0059D2  6E02               	movwf	i2_isdigit$2068,c
 24605  0059D4                     i2l6621:
 24606  0059D4  C002  F001         	movff	i2_isdigit$2068,??i2_isdigit
 24607  0059D8  3001               	rrcf	??i2_isdigit,w,c
 24608  0059DA  0012               	return	
 24609  0059DC                     __end_ofi2_isdigit:
 24610                           	opt stack 0
 24611                           pclatu	equ	0xFFB
 24612                           pclath	equ	0xFFA
 24613                           tblptru	equ	0xFF8
 24614                           tblptrh	equ	0xFF7
 24615                           tblptrl	equ	0xFF6
 24616                           tablat	equ	0xFF5
 24617                           prodh	equ	0xFF4
 24618                           prodl	equ	0xFF3
 24619                           intcon	equ	0xFF2
 24620                           intcon2	equ	0xFF1
 24621                           intcon3	equ	0xFF0
 24622                           indf0	equ	0xFEF
 24623                           postinc0	equ	0xFEE
 24624                           fsr0h	equ	0xFEA
 24625                           fsr0l	equ	0xFE9
 24626                           wreg	equ	0xFE8
 24627                           postdec1	equ	0xFE5
 24628                           fsr1h	equ	0xFE2
 24629                           fsr1l	equ	0xFE1
 24630                           indf2	equ	0xFDF
 24631                           postinc2	equ	0xFDE
 24632                           postdec2	equ	0xFDD
 24633                           fsr2h	equ	0xFDA
 24634                           fsr2l	equ	0xFD9
 24635                           status	equ	0xFD8
 24636                           
 24637 ;; *************** function i2___wmul *****************
 24638 ;; Defined at:
 24639 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 24640 ;; Parameters:    Size  Location     Type
 24641 ;;  multiplier      2    0[COMRAM] unsigned int 
 24642 ;;  multiplicand    2    2[COMRAM] unsigned int 
 24643 ;; Auto vars:     Size  Location     Type
 24644 ;;  __wmul          2    4[COMRAM] unsigned int 
 24645 ;; Return value:  Size  Location     Type
 24646 ;;                  2    0[COMRAM] unsigned int 
 24647 ;; Registers used:
 24648 ;;		wreg, status,2, status,0, prodl, prodh
 24649 ;; Tracked objects:
 24650 ;;		On entry : 0/0
 24651 ;;		On exit  : 0/0
 24652 ;;		Unchanged: 0/0
 24653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24654 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24655 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24657 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24658 ;;Total ram usage:        6 bytes
 24659 ;; Hardware stack levels used:    1
 24660 ;; This function calls:
 24661 ;;		Nothing
 24662 ;; This function is called by:
 24663 ;;		_printSortTimer
 24664 ;;		_retrieveLog
 24665 ;;		i2_printf
 24666 ;; This function uses a non-reentrant model
 24667 ;;
 24668                           
 24669                           	psect	text90
 24670  00590A                     __ptext90:
 24671                           	opt stack 0
 24672  00590A                     i2___wmul:
 24673                           	opt stack 21
 24674                           
 24675                           ;incstack = 0
 24676  00590A  5001               	movf	i2___wmul@multiplier,w,c
 24677  00590C  0203               	mulwf	i2___wmul@multiplicand,c
 24678  00590E  CFF3 F005          	movff	prodl,i2___wmul@product
 24679  005912  CFF4 F006          	movff	prodh,i2___wmul@product+1
 24680  005916  5001               	movf	i2___wmul@multiplier,w,c
 24681  005918  0204               	mulwf	i2___wmul@multiplicand+1,c
 24682  00591A  50F3               	movf	prodl,w,c
 24683  00591C  2606               	addwf	i2___wmul@product+1,f,c
 24684  00591E  5002               	movf	i2___wmul@multiplier+1,w,c
 24685  005920  0203               	mulwf	i2___wmul@multiplicand,c
 24686  005922  50F3               	movf	prodl,w,c
 24687  005924  2606               	addwf	i2___wmul@product+1,f,c
 24688  005926  C005  F001         	movff	i2___wmul@product,?i2___wmul
 24689  00592A  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 24690  00592E  0012               	return	
 24691  005930                     __end_ofi2___wmul:
 24692                           	opt stack 0
 24693                           pclatu	equ	0xFFB
 24694                           pclath	equ	0xFFA
 24695                           tblptru	equ	0xFF8
 24696                           tblptrh	equ	0xFF7
 24697                           tblptrl	equ	0xFF6
 24698                           tablat	equ	0xFF5
 24699                           prodh	equ	0xFF4
 24700                           prodl	equ	0xFF3
 24701                           intcon	equ	0xFF2
 24702                           intcon2	equ	0xFF1
 24703                           intcon3	equ	0xFF0
 24704                           indf0	equ	0xFEF
 24705                           postinc0	equ	0xFEE
 24706                           fsr0h	equ	0xFEA
 24707                           fsr0l	equ	0xFE9
 24708                           wreg	equ	0xFE8
 24709                           postdec1	equ	0xFE5
 24710                           fsr1h	equ	0xFE2
 24711                           fsr1l	equ	0xFE1
 24712                           indf2	equ	0xFDF
 24713                           postinc2	equ	0xFDE
 24714                           postdec2	equ	0xFDD
 24715                           fsr2h	equ	0xFDA
 24716                           fsr2l	equ	0xFD9
 24717                           status	equ	0xFD8
 24718                           
 24719 ;; *************** function i2___lwmod *****************
 24720 ;; Defined at:
 24721 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 24722 ;; Parameters:    Size  Location     Type
 24723 ;;  dividend        2    0[COMRAM] unsigned int 
 24724 ;;  divisor         2    2[COMRAM] unsigned int 
 24725 ;; Auto vars:     Size  Location     Type
 24726 ;;  __lwmod         1    4[COMRAM] unsigned char 
 24727 ;; Return value:  Size  Location     Type
 24728 ;;                  2    0[COMRAM] unsigned int 
 24729 ;; Registers used:
 24730 ;;		wreg, status,2, status,0
 24731 ;; Tracked objects:
 24732 ;;		On entry : 0/0
 24733 ;;		On exit  : 0/0
 24734 ;;		Unchanged: 0/0
 24735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24736 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24737 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24739 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24740 ;;Total ram usage:        5 bytes
 24741 ;; Hardware stack levels used:    1
 24742 ;; This function calls:
 24743 ;;		Nothing
 24744 ;; This function is called by:
 24745 ;;		_printSortTimer
 24746 ;;		i2_printf
 24747 ;; This function uses a non-reentrant model
 24748 ;;
 24749                           
 24750                           	psect	text91
 24751  005440                     __ptext91:
 24752                           	opt stack 0
 24753  005440                     i2___lwmod:
 24754                           	opt stack 21
 24755                           
 24756                           ;incstack = 0
 24757  005440  5003               	movf	i2___lwmod@divisor,w,c
 24758  005442  1004               	iorwf	i2___lwmod@divisor+1,w,c
 24759  005444  B4D8               	btfsc	status,2,c
 24760  005446  D018               	goto	i2l1982
 24761  005448  0E01               	movlw	1
 24762  00544A  6E05               	movwf	i2___lwmod@counter,c
 24763  00544C  D004               	goto	i2l6653
 24764  00544E                     i2l6651:
 24765  00544E  90D8               	bcf	status,0,c
 24766  005450  3603               	rlcf	i2___lwmod@divisor,f,c
 24767  005452  3604               	rlcf	i2___lwmod@divisor+1,f,c
 24768  005454  2A05               	incf	i2___lwmod@counter,f,c
 24769  005456                     i2l6653:
 24770  005456  AE04               	btfss	i2___lwmod@divisor+1,7,c
 24771  005458  D7FA               	goto	i2l6651
 24772  00545A                     i2l6655:
 24773  00545A  5003               	movf	i2___lwmod@divisor,w,c
 24774  00545C  5C01               	subwf	i2___lwmod@dividend,w,c
 24775  00545E  5004               	movf	i2___lwmod@divisor+1,w,c
 24776  005460  5802               	subwfb	i2___lwmod@dividend+1,w,c
 24777  005462  A0D8               	btfss	status,0,c
 24778  005464  D004               	goto	i2l6659
 24779  005466  5003               	movf	i2___lwmod@divisor,w,c
 24780  005468  5E01               	subwf	i2___lwmod@dividend,f,c
 24781  00546A  5004               	movf	i2___lwmod@divisor+1,w,c
 24782  00546C  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 24783  00546E                     i2l6659:
 24784  00546E  90D8               	bcf	status,0,c
 24785  005470  3204               	rrcf	i2___lwmod@divisor+1,f,c
 24786  005472  3203               	rrcf	i2___lwmod@divisor,f,c
 24787  005474  2E05               	decfsz	i2___lwmod@counter,f,c
 24788  005476  D7F1               	goto	i2l6655
 24789  005478                     i2l1982:
 24790  005478  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 24791  00547C  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 24792  005480  0012               	return		;funcret
 24793  005482                     __end_ofi2___lwmod:
 24794                           	opt stack 0
 24795                           pclatu	equ	0xFFB
 24796                           pclath	equ	0xFFA
 24797                           tblptru	equ	0xFF8
 24798                           tblptrh	equ	0xFF7
 24799                           tblptrl	equ	0xFF6
 24800                           tablat	equ	0xFF5
 24801                           prodh	equ	0xFF4
 24802                           prodl	equ	0xFF3
 24803                           intcon	equ	0xFF2
 24804                           intcon2	equ	0xFF1
 24805                           intcon3	equ	0xFF0
 24806                           indf0	equ	0xFEF
 24807                           postinc0	equ	0xFEE
 24808                           fsr0h	equ	0xFEA
 24809                           fsr0l	equ	0xFE9
 24810                           wreg	equ	0xFE8
 24811                           postdec1	equ	0xFE5
 24812                           fsr1h	equ	0xFE2
 24813                           fsr1l	equ	0xFE1
 24814                           indf2	equ	0xFDF
 24815                           postinc2	equ	0xFDE
 24816                           postdec2	equ	0xFDD
 24817                           fsr2h	equ	0xFDA
 24818                           fsr2l	equ	0xFD9
 24819                           status	equ	0xFD8
 24820                           
 24821 ;; *************** function i2___lwdiv *****************
 24822 ;; Defined at:
 24823 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 24824 ;; Parameters:    Size  Location     Type
 24825 ;;  dividend        2    5[COMRAM] unsigned int 
 24826 ;;  divisor         2    7[COMRAM] unsigned int 
 24827 ;; Auto vars:     Size  Location     Type
 24828 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 24829 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 24830 ;; Return value:  Size  Location     Type
 24831 ;;                  2    5[COMRAM] unsigned int 
 24832 ;; Registers used:
 24833 ;;		wreg, status,2, status,0
 24834 ;; Tracked objects:
 24835 ;;		On entry : 0/0
 24836 ;;		On exit  : 0/0
 24837 ;;		Unchanged: 0/0
 24838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24839 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24840 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24842 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24843 ;;Total ram usage:        7 bytes
 24844 ;; Hardware stack levels used:    1
 24845 ;; This function calls:
 24846 ;;		Nothing
 24847 ;; This function is called by:
 24848 ;;		_printSortTimer
 24849 ;;		i2_printf
 24850 ;; This function uses a non-reentrant model
 24851 ;;
 24852                           
 24853                           	psect	text92
 24854  005232                     __ptext92:
 24855                           	opt stack 0
 24856  005232                     i2___lwdiv:
 24857                           	opt stack 21
 24858                           
 24859                           ;incstack = 0
 24860  005232  0E00               	movlw	0
 24861  005234  6E0B               	movwf	i2___lwdiv@quotient+1,c
 24862  005236  0E00               	movlw	0
 24863  005238  6E0A               	movwf	i2___lwdiv@quotient,c
 24864  00523A  5008               	movf	i2___lwdiv@divisor,w,c
 24865  00523C  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 24866  00523E  B4D8               	btfsc	status,2,c
 24867  005240  D01C               	goto	i2l1972
 24868  005242  0E01               	movlw	1
 24869  005244  6E0C               	movwf	i2___lwdiv@counter,c
 24870  005246  D004               	goto	i2l6633
 24871  005248                     i2l6631:
 24872  005248  90D8               	bcf	status,0,c
 24873  00524A  3608               	rlcf	i2___lwdiv@divisor,f,c
 24874  00524C  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 24875  00524E  2A0C               	incf	i2___lwdiv@counter,f,c
 24876  005250                     i2l6633:
 24877  005250  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 24878  005252  D7FA               	goto	i2l6631
 24879  005254                     i2l6635:
 24880  005254  90D8               	bcf	status,0,c
 24881  005256  360A               	rlcf	i2___lwdiv@quotient,f,c
 24882  005258  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 24883  00525A  5008               	movf	i2___lwdiv@divisor,w,c
 24884  00525C  5C06               	subwf	i2___lwdiv@dividend,w,c
 24885  00525E  5009               	movf	i2___lwdiv@divisor+1,w,c
 24886  005260  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 24887  005262  A0D8               	btfss	status,0,c
 24888  005264  D005               	goto	i2l6643
 24889  005266  5008               	movf	i2___lwdiv@divisor,w,c
 24890  005268  5E06               	subwf	i2___lwdiv@dividend,f,c
 24891  00526A  5009               	movf	i2___lwdiv@divisor+1,w,c
 24892  00526C  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 24893  00526E  800A               	bsf	i2___lwdiv@quotient,0,c
 24894  005270                     i2l6643:
 24895  005270  90D8               	bcf	status,0,c
 24896  005272  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 24897  005274  3208               	rrcf	i2___lwdiv@divisor,f,c
 24898  005276  2E0C               	decfsz	i2___lwdiv@counter,f,c
 24899  005278  D7ED               	goto	i2l6635
 24900  00527A                     i2l1972:
 24901  00527A  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 24902  00527E  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 24903  005282  0012               	return		;funcret
 24904  005284                     __end_ofi2___lwdiv:
 24905                           	opt stack 0
 24906                           pclatu	equ	0xFFB
 24907                           pclath	equ	0xFFA
 24908                           tblptru	equ	0xFF8
 24909                           tblptrh	equ	0xFF7
 24910                           tblptrl	equ	0xFF6
 24911                           tablat	equ	0xFF5
 24912                           prodh	equ	0xFF4
 24913                           prodl	equ	0xFF3
 24914                           intcon	equ	0xFF2
 24915                           intcon2	equ	0xFF1
 24916                           intcon3	equ	0xFF0
 24917                           indf0	equ	0xFEF
 24918                           postinc0	equ	0xFEE
 24919                           fsr0h	equ	0xFEA
 24920                           fsr0l	equ	0xFE9
 24921                           wreg	equ	0xFE8
 24922                           postdec1	equ	0xFE5
 24923                           fsr1h	equ	0xFE2
 24924                           fsr1l	equ	0xFE1
 24925                           indf2	equ	0xFDF
 24926                           postinc2	equ	0xFDE
 24927                           postdec2	equ	0xFDD
 24928                           fsr2h	equ	0xFDA
 24929                           fsr2l	equ	0xFD9
 24930                           status	equ	0xFD8
 24931                           
 24932 ;; *************** function i2_lcdInst *****************
 24933 ;; Defined at:
 24934 ;;		line 15 in file "lcd.c"
 24935 ;; Parameters:    Size  Location     Type
 24936 ;;  data            1    wreg     unsigned char 
 24937 ;; Auto vars:     Size  Location     Type
 24938 ;;  data            1    2[COMRAM] unsigned char 
 24939 ;; Return value:  Size  Location     Type
 24940 ;;                  1    wreg      void 
 24941 ;; Registers used:
 24942 ;;		wreg, status,2, status,0, cstack
 24943 ;; Tracked objects:
 24944 ;;		On entry : 0/0
 24945 ;;		On exit  : 0/0
 24946 ;;		Unchanged: 0/0
 24947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24949 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24951 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24952 ;;Total ram usage:        1 bytes
 24953 ;; Hardware stack levels used:    1
 24954 ;; Hardware stack levels required when called:    1
 24955 ;; This function calls:
 24956 ;;		i2_lcdNibble
 24957 ;; This function is called by:
 24958 ;;		_change_state_to_menu_11
 24959 ;;		_change_state_to_menu_23
 24960 ;;		_change_state_to_logs_11
 24961 ;;		_change_state_to_logs_12
 24962 ;;		_change_state_to_logs_22
 24963 ;;		_change_state_to_logs_23
 24964 ;;		_change_state_to_logs_33
 24965 ;;		_change_state_to_logs_34
 24966 ;;		_printSortTimer
 24967 ;;		i2_change_state_to_menu_start
 24968 ;;		i2_change_state_to_menu_12
 24969 ;;		i2_change_state_to_menu_22
 24970 ;;		i2_printRTC
 24971 ;; This function uses a non-reentrant model
 24972 ;;
 24973                           
 24974                           	psect	text93
 24975  005A8E                     __ptext93:
 24976                           	opt stack 0
 24977  005A8E                     i2_lcdInst:
 24978                           	opt stack 20
 24979                           
 24980                           ;incstack = 0
 24981                           ;i2lcdInst@data stored from wreg
 24982  005A8E  6E03               	movwf	i2lcdInst@data,c
 24983                           
 24984                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 24985  005A90  948C               	bcf	3980,2,c	;volatile
 24986                           
 24987                           ;lcd.c: 17: lcdNibble(data);
 24988  005A92  5003               	movf	i2lcdInst@data,w,c
 24989  005A94  ECEC  F028         	call	i2_lcdNibble
 24990  005A98  0012               	return		;funcret
 24991  005A9A                     __end_ofi2_lcdInst:
 24992                           	opt stack 0
 24993                           pclatu	equ	0xFFB
 24994                           pclath	equ	0xFFA
 24995                           tblptru	equ	0xFF8
 24996                           tblptrh	equ	0xFF7
 24997                           tblptrl	equ	0xFF6
 24998                           tablat	equ	0xFF5
 24999                           prodh	equ	0xFF4
 25000                           prodl	equ	0xFF3
 25001                           intcon	equ	0xFF2
 25002                           intcon2	equ	0xFF1
 25003                           intcon3	equ	0xFF0
 25004                           indf0	equ	0xFEF
 25005                           postinc0	equ	0xFEE
 25006                           fsr0h	equ	0xFEA
 25007                           fsr0l	equ	0xFE9
 25008                           wreg	equ	0xFE8
 25009                           postdec1	equ	0xFE5
 25010                           fsr1h	equ	0xFE2
 25011                           fsr1l	equ	0xFE1
 25012                           indf2	equ	0xFDF
 25013                           postinc2	equ	0xFDE
 25014                           postdec2	equ	0xFDD
 25015                           fsr2h	equ	0xFDA
 25016                           fsr2l	equ	0xFD9
 25017                           status	equ	0xFD8
 25018                           
 25019 ;; *************** function i2_lcdNibble *****************
 25020 ;; Defined at:
 25021 ;;		line 25 in file "lcd.c"
 25022 ;; Parameters:    Size  Location     Type
 25023 ;;  data            1    wreg     unsigned char 
 25024 ;; Auto vars:     Size  Location     Type
 25025 ;;  data            1    1[COMRAM] unsigned char 
 25026 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 25027 ;; Return value:  Size  Location     Type
 25028 ;;                  1    wreg      void 
 25029 ;; Registers used:
 25030 ;;		wreg, status,2, status,0
 25031 ;; Tracked objects:
 25032 ;;		On entry : 0/0
 25033 ;;		On exit  : 0/0
 25034 ;;		Unchanged: 0/0
 25035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25037 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25039 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25040 ;;Total ram usage:        2 bytes
 25041 ;; Hardware stack levels used:    1
 25042 ;; This function calls:
 25043 ;;		Nothing
 25044 ;; This function is called by:
 25045 ;;		i2_lcdInst
 25046 ;;		i2_putch
 25047 ;; This function uses a non-reentrant model
 25048 ;;
 25049                           
 25050                           	psect	text94
 25051  0051D8                     __ptext94:
 25052                           	opt stack 0
 25053  0051D8                     i2_lcdNibble:
 25054                           	opt stack 20
 25055                           
 25056                           ;incstack = 0
 25057                           ;i2lcdNibble@data stored from wreg
 25058  0051D8  6E02               	movwf	i2lcdNibble@data,c
 25059                           
 25060                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 25061  0051DA  9EF2               	bcf	intcon,7,c	;volatile
 25062                           
 25063                           ;lcd.c: 28: char temp = data & 0xF0;
 25064  0051DC  5002               	movf	i2lcdNibble@data,w,c
 25065  0051DE  0BF0               	andlw	240
 25066  0051E0  6E01               	movwf	i2lcdNibble@temp,c
 25067                           
 25068                           ;lcd.c: 29: LATD = LATD & 0x0F;
 25069  0051E2  508C               	movf	3980,w,c	;volatile
 25070  0051E4  0B0F               	andlw	15
 25071  0051E6  6E8C               	movwf	3980,c	;volatile
 25072                           
 25073                           ;lcd.c: 30: LATD = temp | LATD;
 25074  0051E8  5001               	movf	i2lcdNibble@temp,w,c
 25075  0051EA  108C               	iorwf	3980,w,c	;volatile
 25076  0051EC  6E8C               	movwf	3980,c	;volatile
 25077                           
 25078                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 25079  0051EE  868C               	bsf	3980,3,c	;volatile
 25080                           
 25081                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25082  0051F0  0E42               	movlw	66
 25083  0051F2                     i2u1119_47:
 25084  0051F2  2EE8               	decfsz	wreg,f,c
 25085  0051F4  D7FE               	bra	i2u1119_47
 25086  0051F6  D000               	nop2	
 25087                           
 25088                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 25089  0051F8  968C               	bcf	3980,3,c	;volatile
 25090                           
 25091                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25092  0051FA  0E42               	movlw	66
 25093  0051FC                     i2u1120_47:
 25094  0051FC  2EE8               	decfsz	wreg,f,c
 25095  0051FE  D7FE               	bra	i2u1120_47
 25096  005200  D000               	nop2	
 25097                           
 25098                           ;lcd.c: 37: data = data << 4;
 25099  005202  3802               	swapf	i2lcdNibble@data,w,c
 25100  005204  0BF0               	andlw	240
 25101  005206  6E02               	movwf	i2lcdNibble@data,c
 25102                           
 25103                           ;lcd.c: 39: temp = data & 0xF0;
 25104  005208  5002               	movf	i2lcdNibble@data,w,c
 25105  00520A  0BF0               	andlw	240
 25106  00520C  6E01               	movwf	i2lcdNibble@temp,c
 25107                           
 25108                           ;lcd.c: 40: LATD = LATD & 0x0F;
 25109  00520E  508C               	movf	3980,w,c	;volatile
 25110  005210  0B0F               	andlw	15
 25111  005212  6E8C               	movwf	3980,c	;volatile
 25112                           
 25113                           ;lcd.c: 41: LATD = temp | LATD;
 25114  005214  5001               	movf	i2lcdNibble@temp,w,c
 25115  005216  108C               	iorwf	3980,w,c	;volatile
 25116  005218  6E8C               	movwf	3980,c	;volatile
 25117                           
 25118                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 25119  00521A  868C               	bsf	3980,3,c	;volatile
 25120                           
 25121                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25122  00521C  0E42               	movlw	66
 25123  00521E                     i2u1121_47:
 25124  00521E  2EE8               	decfsz	wreg,f,c
 25125  005220  D7FE               	bra	i2u1121_47
 25126  005222  D000               	nop2	
 25127                           
 25128                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 25129  005224  968C               	bcf	3980,3,c	;volatile
 25130                           
 25131                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25132  005226  0E42               	movlw	66
 25133  005228                     i2u1122_47:
 25134  005228  2EE8               	decfsz	wreg,f,c
 25135  00522A  D7FE               	bra	i2u1122_47
 25136  00522C  D000               	nop2	
 25137                           
 25138                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 25139  00522E  8EF2               	bsf	intcon,7,c	;volatile
 25140  005230  0012               	return		;funcret
 25141  005232                     __end_ofi2_lcdNibble:
 25142                           	opt stack 0
 25143                           pclatu	equ	0xFFB
 25144                           pclath	equ	0xFFA
 25145                           tblptru	equ	0xFF8
 25146                           tblptrh	equ	0xFF7
 25147                           tblptrl	equ	0xFF6
 25148                           tablat	equ	0xFF5
 25149                           prodh	equ	0xFF4
 25150                           prodl	equ	0xFF3
 25151                           intcon	equ	0xFF2
 25152                           intcon2	equ	0xFF1
 25153                           intcon3	equ	0xFF0
 25154                           indf0	equ	0xFEF
 25155                           postinc0	equ	0xFEE
 25156                           fsr0h	equ	0xFEA
 25157                           fsr0l	equ	0xFE9
 25158                           wreg	equ	0xFE8
 25159                           postdec1	equ	0xFE5
 25160                           fsr1h	equ	0xFE2
 25161                           fsr1l	equ	0xFE1
 25162                           indf2	equ	0xFDF
 25163                           postinc2	equ	0xFDE
 25164                           postdec2	equ	0xFDD
 25165                           fsr2h	equ	0xFDA
 25166                           fsr2l	equ	0xFD9
 25167                           status	equ	0xFD8
 25168                           
 25169 ;; *************** function i2_getRTC *****************
 25170 ;; Defined at:
 25171 ;;		line 44 in file "RTC.c"
 25172 ;; Parameters:    Size  Location     Type
 25173 ;;		None
 25174 ;; Auto vars:     Size  Location     Type
 25175 ;;  getRTC          2    3[COMRAM] int 
 25176 ;; Return value:  Size  Location     Type
 25177 ;;                  1    wreg      void 
 25178 ;; Registers used:
 25179 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25180 ;; Tracked objects:
 25181 ;;		On entry : 0/0
 25182 ;;		On exit  : 0/0
 25183 ;;		Unchanged: 0/0
 25184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25186 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25188 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25189 ;;Total ram usage:        2 bytes
 25190 ;; Hardware stack levels used:    1
 25191 ;; Hardware stack levels required when called:    2
 25192 ;; This function calls:
 25193 ;;		i2_I2C_Master_Read
 25194 ;;		i2_I2C_Master_Start
 25195 ;;		i2_I2C_Master_Stop
 25196 ;;		i2_I2C_Master_Write
 25197 ;; This function is called by:
 25198 ;;		_printSortTimer
 25199 ;;		i2_printRTC
 25200 ;; This function uses a non-reentrant model
 25201 ;;
 25202                           
 25203                           	psect	text95
 25204  004EB4                     __ptext95:
 25205                           	opt stack 0
 25206  004EB4                     i2_getRTC:
 25207                           	opt stack 19
 25208                           
 25209                           ;RTC.c: 48: I2C_Master_Start();
 25210                           
 25211                           ;incstack = 0
 25212  004EB4  EC67  F02D         	call	i2_I2C_Master_Start	;wreg free
 25213                           
 25214                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 25215  004EB8  0E00               	movlw	0
 25216  004EBA  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25217  004EBC  0ED0               	movlw	208
 25218  004EBE  6E02               	movwf	i2I2C_Master_Write@d,c
 25219  004EC0  EC52  F02D         	call	i2_I2C_Master_Write	;wreg free
 25220                           
 25221                           ;RTC.c: 50: I2C_Master_Write(0x00);
 25222  004EC4  0E00               	movlw	0
 25223  004EC6  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25224  004EC8  0E00               	movlw	0
 25225  004ECA  6E02               	movwf	i2I2C_Master_Write@d,c
 25226  004ECC  EC52  F02D         	call	i2_I2C_Master_Write	;wreg free
 25227                           
 25228                           ;RTC.c: 51: I2C_Master_Stop();
 25229  004ED0  EC63  F02D         	call	i2_I2C_Master_Stop	;wreg free
 25230                           
 25231                           ;RTC.c: 54: I2C_Master_Start();
 25232  004ED4  EC67  F02D         	call	i2_I2C_Master_Start	;wreg free
 25233                           
 25234                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 25235  004ED8  0E00               	movlw	0
 25236  004EDA  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25237  004EDC  0ED1               	movlw	209
 25238  004EDE  6E02               	movwf	i2I2C_Master_Write@d,c
 25239  004EE0  EC52  F02D         	call	i2_I2C_Master_Write	;wreg free
 25240                           
 25241                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 25242  004EE4  0E00               	movlw	0
 25243  004EE6  6E05               	movwf	i2getRTC@i+1,c
 25244  004EE8  0E00               	movlw	0
 25245  004EEA  6E04               	movwf	i2getRTC@i,c
 25246  004EEC                     i2l6929:
 25247  004EEC  BE05               	btfsc	i2getRTC@i+1,7,c
 25248  004EEE  D006               	goto	i2l6933
 25249  004EF0  5005               	movf	i2getRTC@i+1,w,c
 25250  004EF2  E111               	bnz	i2l6939
 25251  004EF4  0E06               	movlw	6
 25252  004EF6  5C04               	subwf	i2getRTC@i,w,c
 25253  004EF8  B0D8               	btfsc	status,0,c
 25254  004EFA  D00D               	goto	i2l6939
 25255  004EFC                     i2l6933:
 25256                           
 25257                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 25258  004EFC  0E1C               	movlw	low _time
 25259  004EFE  2404               	addwf	i2getRTC@i,w,c
 25260  004F00  6ED9               	movwf	fsr2l,c
 25261  004F02  0E01               	movlw	high _time
 25262  004F04  2005               	addwfc	i2getRTC@i+1,w,c
 25263  004F06  6EDA               	movwf	fsr2h,c
 25264  004F08  0E01               	movlw	1
 25265  004F0A  EC98  F02C         	call	i2_I2C_Master_Read
 25266  004F0E  6EDF               	movwf	indf2,c
 25267  004F10  4A04               	infsnz	i2getRTC@i,f,c
 25268  004F12  2A05               	incf	i2getRTC@i+1,f,c
 25269  004F14  D7EB               	goto	i2l6929
 25270  004F16                     i2l6939:
 25271                           
 25272                           ;RTC.c: 58: }
 25273                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 25274  004F16  0E00               	movlw	0
 25275  004F18  EC98  F02C         	call	i2_I2C_Master_Read
 25276  004F1C  0101               	movlb	1	; () banked
 25277  004F1E  6F22               	movwf	(_time+6)& (0+255),b
 25278                           
 25279                           ;RTC.c: 60: I2C_Master_Stop();
 25280  004F20  EC63  F02D         	call	i2_I2C_Master_Stop	;wreg free
 25281  004F24  0012               	return		;funcret
 25282  004F26                     __end_ofi2_getRTC:
 25283                           	opt stack 0
 25284                           pclatu	equ	0xFFB
 25285                           pclath	equ	0xFFA
 25286                           tblptru	equ	0xFF8
 25287                           tblptrh	equ	0xFF7
 25288                           tblptrl	equ	0xFF6
 25289                           tablat	equ	0xFF5
 25290                           prodh	equ	0xFF4
 25291                           prodl	equ	0xFF3
 25292                           intcon	equ	0xFF2
 25293                           intcon2	equ	0xFF1
 25294                           intcon3	equ	0xFF0
 25295                           indf0	equ	0xFEF
 25296                           postinc0	equ	0xFEE
 25297                           fsr0h	equ	0xFEA
 25298                           fsr0l	equ	0xFE9
 25299                           wreg	equ	0xFE8
 25300                           postdec1	equ	0xFE5
 25301                           fsr1h	equ	0xFE2
 25302                           fsr1l	equ	0xFE1
 25303                           indf2	equ	0xFDF
 25304                           postinc2	equ	0xFDE
 25305                           postdec2	equ	0xFDD
 25306                           fsr2h	equ	0xFDA
 25307                           fsr2l	equ	0xFD9
 25308                           status	equ	0xFD8
 25309                           
 25310 ;; *************** function i2_I2C_Master_Write *****************
 25311 ;; Defined at:
 25312 ;;		line 49 in file "I2C.c"
 25313 ;; Parameters:    Size  Location     Type
 25314 ;;  d               2    1[COMRAM] unsigned int 
 25315 ;; Auto vars:     Size  Location     Type
 25316 ;;		None
 25317 ;; Return value:  Size  Location     Type
 25318 ;;                  1    wreg      void 
 25319 ;; Registers used:
 25320 ;;		wreg, status,2, status,0, cstack
 25321 ;; Tracked objects:
 25322 ;;		On entry : 0/0
 25323 ;;		On exit  : 0/0
 25324 ;;		Unchanged: 0/0
 25325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25326 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25329 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25330 ;;Total ram usage:        2 bytes
 25331 ;; Hardware stack levels used:    1
 25332 ;; Hardware stack levels required when called:    1
 25333 ;; This function calls:
 25334 ;;		i2_I2C_Master_Wait
 25335 ;; This function is called by:
 25336 ;;		i2_getRTC
 25337 ;; This function uses a non-reentrant model
 25338 ;;
 25339                           
 25340                           	psect	text96
 25341  005AA4                     __ptext96:
 25342                           	opt stack 0
 25343  005AA4                     i2_I2C_Master_Write:
 25344                           	opt stack 19
 25345                           
 25346                           ;I2C.c: 51: I2C_Master_Wait();
 25347                           
 25348                           ;incstack = 0
 25349  005AA4  EC28  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25350                           
 25351                           ;I2C.c: 52: SSPBUF = d;
 25352  005AA8  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 25353  005AAC  0012               	return		;funcret
 25354  005AAE                     __end_ofi2_I2C_Master_Write:
 25355                           	opt stack 0
 25356                           pclatu	equ	0xFFB
 25357                           pclath	equ	0xFFA
 25358                           tblptru	equ	0xFF8
 25359                           tblptrh	equ	0xFF7
 25360                           tblptrl	equ	0xFF6
 25361                           tablat	equ	0xFF5
 25362                           prodh	equ	0xFF4
 25363                           prodl	equ	0xFF3
 25364                           intcon	equ	0xFF2
 25365                           intcon2	equ	0xFF1
 25366                           intcon3	equ	0xFF0
 25367                           indf0	equ	0xFEF
 25368                           postinc0	equ	0xFEE
 25369                           fsr0h	equ	0xFEA
 25370                           fsr0l	equ	0xFE9
 25371                           wreg	equ	0xFE8
 25372                           postdec1	equ	0xFE5
 25373                           fsr1h	equ	0xFE2
 25374                           fsr1l	equ	0xFE1
 25375                           indf2	equ	0xFDF
 25376                           postinc2	equ	0xFDE
 25377                           postdec2	equ	0xFDD
 25378                           fsr2h	equ	0xFDA
 25379                           fsr2l	equ	0xFD9
 25380                           status	equ	0xFD8
 25381                           
 25382 ;; *************** function i2_I2C_Master_Stop *****************
 25383 ;; Defined at:
 25384 ;;		line 43 in file "I2C.c"
 25385 ;; Parameters:    Size  Location     Type
 25386 ;;		None
 25387 ;; Auto vars:     Size  Location     Type
 25388 ;;		None
 25389 ;; Return value:  Size  Location     Type
 25390 ;;                  1    wreg      void 
 25391 ;; Registers used:
 25392 ;;		wreg, status,2, status,0, cstack
 25393 ;; Tracked objects:
 25394 ;;		On entry : 0/0
 25395 ;;		On exit  : 0/0
 25396 ;;		Unchanged: 0/0
 25397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25402 ;;Total ram usage:        0 bytes
 25403 ;; Hardware stack levels used:    1
 25404 ;; Hardware stack levels required when called:    1
 25405 ;; This function calls:
 25406 ;;		i2_I2C_Master_Wait
 25407 ;; This function is called by:
 25408 ;;		i2_getRTC
 25409 ;; This function uses a non-reentrant model
 25410 ;;
 25411                           
 25412                           	psect	text97
 25413  005AC6                     __ptext97:
 25414                           	opt stack 0
 25415  005AC6                     i2_I2C_Master_Stop:
 25416                           	opt stack 19
 25417                           
 25418                           ;I2C.c: 45: I2C_Master_Wait();
 25419                           
 25420                           ;incstack = 0
 25421  005AC6  EC28  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25422                           
 25423                           ;I2C.c: 46: PEN = 1;
 25424  005ACA  84C5               	bsf	4037,2,c	;volatile
 25425  005ACC  0012               	return		;funcret
 25426  005ACE                     __end_ofi2_I2C_Master_Stop:
 25427                           	opt stack 0
 25428                           pclatu	equ	0xFFB
 25429                           pclath	equ	0xFFA
 25430                           tblptru	equ	0xFF8
 25431                           tblptrh	equ	0xFF7
 25432                           tblptrl	equ	0xFF6
 25433                           tablat	equ	0xFF5
 25434                           prodh	equ	0xFF4
 25435                           prodl	equ	0xFF3
 25436                           intcon	equ	0xFF2
 25437                           intcon2	equ	0xFF1
 25438                           intcon3	equ	0xFF0
 25439                           indf0	equ	0xFEF
 25440                           postinc0	equ	0xFEE
 25441                           fsr0h	equ	0xFEA
 25442                           fsr0l	equ	0xFE9
 25443                           wreg	equ	0xFE8
 25444                           postdec1	equ	0xFE5
 25445                           fsr1h	equ	0xFE2
 25446                           fsr1l	equ	0xFE1
 25447                           indf2	equ	0xFDF
 25448                           postinc2	equ	0xFDE
 25449                           postdec2	equ	0xFDD
 25450                           fsr2h	equ	0xFDA
 25451                           fsr2l	equ	0xFD9
 25452                           status	equ	0xFD8
 25453                           
 25454 ;; *************** function i2_I2C_Master_Start *****************
 25455 ;; Defined at:
 25456 ;;		line 31 in file "I2C.c"
 25457 ;; Parameters:    Size  Location     Type
 25458 ;;		None
 25459 ;; Auto vars:     Size  Location     Type
 25460 ;;		None
 25461 ;; Return value:  Size  Location     Type
 25462 ;;                  1    wreg      void 
 25463 ;; Registers used:
 25464 ;;		wreg, status,2, status,0, cstack
 25465 ;; Tracked objects:
 25466 ;;		On entry : 0/0
 25467 ;;		On exit  : 0/0
 25468 ;;		Unchanged: 0/0
 25469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25473 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25474 ;;Total ram usage:        0 bytes
 25475 ;; Hardware stack levels used:    1
 25476 ;; Hardware stack levels required when called:    1
 25477 ;; This function calls:
 25478 ;;		i2_I2C_Master_Wait
 25479 ;; This function is called by:
 25480 ;;		i2_getRTC
 25481 ;; This function uses a non-reentrant model
 25482 ;;
 25483                           
 25484                           	psect	text98
 25485  005ACE                     __ptext98:
 25486                           	opt stack 0
 25487  005ACE                     i2_I2C_Master_Start:
 25488                           	opt stack 19
 25489                           
 25490                           ;I2C.c: 33: I2C_Master_Wait();
 25491                           
 25492                           ;incstack = 0
 25493  005ACE  EC28  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25494                           
 25495                           ;I2C.c: 34: SEN = 1;
 25496  005AD2  80C5               	bsf	4037,0,c	;volatile
 25497  005AD4  0012               	return		;funcret
 25498  005AD6                     __end_ofi2_I2C_Master_Start:
 25499                           	opt stack 0
 25500                           pclatu	equ	0xFFB
 25501                           pclath	equ	0xFFA
 25502                           tblptru	equ	0xFF8
 25503                           tblptrh	equ	0xFF7
 25504                           tblptrl	equ	0xFF6
 25505                           tablat	equ	0xFF5
 25506                           prodh	equ	0xFF4
 25507                           prodl	equ	0xFF3
 25508                           intcon	equ	0xFF2
 25509                           intcon2	equ	0xFF1
 25510                           intcon3	equ	0xFF0
 25511                           indf0	equ	0xFEF
 25512                           postinc0	equ	0xFEE
 25513                           fsr0h	equ	0xFEA
 25514                           fsr0l	equ	0xFE9
 25515                           wreg	equ	0xFE8
 25516                           postdec1	equ	0xFE5
 25517                           fsr1h	equ	0xFE2
 25518                           fsr1l	equ	0xFE1
 25519                           indf2	equ	0xFDF
 25520                           postinc2	equ	0xFDE
 25521                           postdec2	equ	0xFDD
 25522                           fsr2h	equ	0xFDA
 25523                           fsr2l	equ	0xFD9
 25524                           status	equ	0xFD8
 25525                           
 25526 ;; *************** function i2_I2C_Master_Read *****************
 25527 ;; Defined at:
 25528 ;;		line 55 in file "I2C.c"
 25529 ;; Parameters:    Size  Location     Type
 25530 ;;  a               1    wreg     unsigned char 
 25531 ;; Auto vars:     Size  Location     Type
 25532 ;;  a               1    1[COMRAM] unsigned char 
 25533 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 25534 ;; Return value:  Size  Location     Type
 25535 ;;                  1    wreg      unsigned char 
 25536 ;; Registers used:
 25537 ;;		wreg, status,2, status,0, cstack
 25538 ;; Tracked objects:
 25539 ;;		On entry : 0/0
 25540 ;;		On exit  : 0/0
 25541 ;;		Unchanged: 0/0
 25542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25544 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25546 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25547 ;;Total ram usage:        2 bytes
 25548 ;; Hardware stack levels used:    1
 25549 ;; Hardware stack levels required when called:    1
 25550 ;; This function calls:
 25551 ;;		i2_I2C_Master_Wait
 25552 ;; This function is called by:
 25553 ;;		i2_getRTC
 25554 ;; This function uses a non-reentrant model
 25555 ;;
 25556                           
 25557                           	psect	text99
 25558  005930                     __ptext99:
 25559                           	opt stack 0
 25560  005930                     i2_I2C_Master_Read:
 25561                           	opt stack 19
 25562                           
 25563                           ;incstack = 0
 25564                           ;i2I2C_Master_Read@a stored from wreg
 25565  005930  6E02               	movwf	i2I2C_Master_Read@a,c
 25566                           
 25567                           ;I2C.c: 57: unsigned char temp;
 25568                           ;I2C.c: 58: I2C_Master_Wait();
 25569  005932  EC28  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25570                           
 25571                           ;I2C.c: 59: RCEN = 1;
 25572  005936  86C5               	bsf	4037,3,c	;volatile
 25573                           
 25574                           ;I2C.c: 60: I2C_Master_Wait();
 25575  005938  EC28  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25576                           
 25577                           ;I2C.c: 61: temp = SSPBUF;
 25578  00593C  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 25579                           
 25580                           ;I2C.c: 62: I2C_Master_Wait();
 25581  005940  EC28  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25582                           
 25583                           ;I2C.c: 63: ACKDT = (a)?0:1;
 25584  005944  5002               	movf	i2I2C_Master_Read@a,w,c
 25585  005946  A4D8               	btfss	status,2,c
 25586  005948  D002               	goto	i2u495_40
 25587  00594A  8AC5               	bsf	4037,5,c	;volatile
 25588  00594C  D001               	goto	i2l6597
 25589  00594E                     i2u495_40:
 25590  00594E  9AC5               	bcf	4037,5,c	;volatile
 25591  005950                     i2l6597:
 25592                           
 25593                           ;I2C.c: 64: ACKEN = 1;
 25594  005950  88C5               	bsf	4037,4,c	;volatile
 25595                           
 25596                           ;I2C.c: 65: return temp;
 25597  005952  5003               	movf	i2I2C_Master_Read@temp,w,c
 25598  005954  0012               	return	
 25599  005956                     __end_ofi2_I2C_Master_Read:
 25600                           	opt stack 0
 25601                           pclatu	equ	0xFFB
 25602                           pclath	equ	0xFFA
 25603                           tblptru	equ	0xFF8
 25604                           tblptrh	equ	0xFF7
 25605                           tblptrl	equ	0xFF6
 25606                           tablat	equ	0xFF5
 25607                           prodh	equ	0xFF4
 25608                           prodl	equ	0xFF3
 25609                           intcon	equ	0xFF2
 25610                           intcon2	equ	0xFF1
 25611                           intcon3	equ	0xFF0
 25612                           indf0	equ	0xFEF
 25613                           postinc0	equ	0xFEE
 25614                           fsr0h	equ	0xFEA
 25615                           fsr0l	equ	0xFE9
 25616                           wreg	equ	0xFE8
 25617                           postdec1	equ	0xFE5
 25618                           fsr1h	equ	0xFE2
 25619                           fsr1l	equ	0xFE1
 25620                           indf2	equ	0xFDF
 25621                           postinc2	equ	0xFDE
 25622                           postdec2	equ	0xFDD
 25623                           fsr2h	equ	0xFDA
 25624                           fsr2l	equ	0xFD9
 25625                           status	equ	0xFD8
 25626                           
 25627 ;; *************** function i2_I2C_Master_Wait *****************
 25628 ;; Defined at:
 25629 ;;		line 26 in file "I2C.c"
 25630 ;; Parameters:    Size  Location     Type
 25631 ;;		None
 25632 ;; Auto vars:     Size  Location     Type
 25633 ;;		None
 25634 ;; Return value:  Size  Location     Type
 25635 ;;                  1    wreg      void 
 25636 ;; Registers used:
 25637 ;;		wreg, status,2, status,0
 25638 ;; Tracked objects:
 25639 ;;		On entry : 0/0
 25640 ;;		On exit  : 0/0
 25641 ;;		Unchanged: 0/0
 25642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25645 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25646 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25647 ;;Total ram usage:        1 bytes
 25648 ;; Hardware stack levels used:    1
 25649 ;; This function calls:
 25650 ;;		Nothing
 25651 ;; This function is called by:
 25652 ;;		i2_I2C_Master_Start
 25653 ;;		i2_I2C_Master_Stop
 25654 ;;		i2_I2C_Master_Write
 25655 ;;		i2_I2C_Master_Read
 25656 ;; This function uses a non-reentrant model
 25657 ;;
 25658                           
 25659                           	psect	text100
 25660  005A50                     __ptext100:
 25661                           	opt stack 0
 25662  005A50                     i2_I2C_Master_Wait:
 25663                           	opt stack 19
 25664  005A50                     i2l71:
 25665  005A50  B4C7               	btfsc	4039,2,c	;volatile
 25666  005A52  D7FE               	goto	i2l71
 25667  005A54  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 25668  005A58  0E1F               	movlw	31
 25669  005A5A  1601               	andwf	??i2_I2C_Master_Wait,f,c
 25670  005A5C  B4D8               	btfsc	status,2,c
 25671  005A5E  0012               	return	
 25672  005A60  D7F7               	goto	i2l71
 25673  005A62                     __end_ofi2_I2C_Master_Wait:
 25674                           	opt stack 0
 25675                           pclatu	equ	0xFFB
 25676                           pclath	equ	0xFFA
 25677                           tblptru	equ	0xFF8
 25678                           tblptrh	equ	0xFF7
 25679                           tblptrl	equ	0xFF6
 25680                           tablat	equ	0xFF5
 25681                           prodh	equ	0xFF4
 25682                           prodl	equ	0xFF3
 25683                           intcon	equ	0xFF2
 25684                           intcon2	equ	0xFF1
 25685                           intcon3	equ	0xFF0
 25686                           indf0	equ	0xFEF
 25687                           postinc0	equ	0xFEE
 25688                           fsr0h	equ	0xFEA
 25689                           fsr0l	equ	0xFE9
 25690                           wreg	equ	0xFE8
 25691                           postdec1	equ	0xFE5
 25692                           fsr1h	equ	0xFE2
 25693                           fsr1l	equ	0xFE1
 25694                           indf2	equ	0xFDF
 25695                           postinc2	equ	0xFDE
 25696                           postdec2	equ	0xFDD
 25697                           fsr2h	equ	0xFDA
 25698                           fsr2l	equ	0xFD9
 25699                           status	equ	0xFD8
 25700                           pclatu	equ	0xFFB
 25701                           pclath	equ	0xFFA
 25702                           tblptru	equ	0xFF8
 25703                           tblptrh	equ	0xFF7
 25704                           tblptrl	equ	0xFF6
 25705                           tablat	equ	0xFF5
 25706                           prodh	equ	0xFF4
 25707                           prodl	equ	0xFF3
 25708                           intcon	equ	0xFF2
 25709                           intcon2	equ	0xFF1
 25710                           intcon3	equ	0xFF0
 25711                           indf0	equ	0xFEF
 25712                           postinc0	equ	0xFEE
 25713                           fsr0h	equ	0xFEA
 25714                           fsr0l	equ	0xFE9
 25715                           wreg	equ	0xFE8
 25716                           postdec1	equ	0xFE5
 25717                           fsr1h	equ	0xFE2
 25718                           fsr1l	equ	0xFE1
 25719                           indf2	equ	0xFDF
 25720                           postinc2	equ	0xFDE
 25721                           postdec2	equ	0xFDD
 25722                           fsr2h	equ	0xFDA
 25723                           fsr2l	equ	0xFD9
 25724                           status	equ	0xFD8
 25725                           
 25726                           	psect	rparam
 25727  0000                     pclatu	equ	0xFFB
 25728                           pclath	equ	0xFFA
 25729                           tblptru	equ	0xFF8
 25730                           tblptrh	equ	0xFF7
 25731                           tblptrl	equ	0xFF6
 25732                           tablat	equ	0xFF5
 25733                           prodh	equ	0xFF4
 25734                           prodl	equ	0xFF3
 25735                           intcon	equ	0xFF2
 25736                           intcon2	equ	0xFF1
 25737                           intcon3	equ	0xFF0
 25738                           indf0	equ	0xFEF
 25739                           postinc0	equ	0xFEE
 25740                           fsr0h	equ	0xFEA
 25741                           fsr0l	equ	0xFE9
 25742                           wreg	equ	0xFE8
 25743                           postdec1	equ	0xFE5
 25744                           fsr1h	equ	0xFE2
 25745                           fsr1l	equ	0xFE1
 25746                           indf2	equ	0xFDF
 25747                           postinc2	equ	0xFDE
 25748                           postdec2	equ	0xFDD
 25749                           fsr2h	equ	0xFDA
 25750                           fsr2l	equ	0xFD9
 25751                           status	equ	0xFD8
 25752                           
 25753                           	psect	temp
 25754  00007E                     btemp:
 25755                           	opt stack 0
 25756  00007E                     	ds	1
 25757  0000                     int$flags	set	btemp
 25758                           pclatu	equ	0xFFB
 25759                           pclath	equ	0xFFA
 25760                           tblptru	equ	0xFF8
 25761                           tblptrh	equ	0xFF7
 25762                           tblptrl	equ	0xFF6
 25763                           tablat	equ	0xFF5
 25764                           prodh	equ	0xFF4
 25765                           prodl	equ	0xFF3
 25766                           intcon	equ	0xFF2
 25767                           intcon2	equ	0xFF1
 25768                           intcon3	equ	0xFF0
 25769                           indf0	equ	0xFEF
 25770                           postinc0	equ	0xFEE
 25771                           fsr0h	equ	0xFEA
 25772                           fsr0l	equ	0xFE9
 25773                           wreg	equ	0xFE8
 25774                           postdec1	equ	0xFE5
 25775                           fsr1h	equ	0xFE2
 25776                           fsr1l	equ	0xFE1
 25777                           indf2	equ	0xFDF
 25778                           postinc2	equ	0xFDE
 25779                           postdec2	equ	0xFDD
 25780                           fsr2h	equ	0xFDA
 25781                           fsr2l	equ	0xFD9
 25782                           status	equ	0xFD8


Data Sizes:
    Strings     1368
    Constant    27
    Data        8
    BSS         148
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     88     125
    BANK0           128     90     128
    BANK1           256      0      81
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_131(CODE[7]), ID@res2(BANK0[2]), ID@res1(BANK0[2]), count_total(BANK0[2]), 
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_130(CODE[18]), STR_129(CODE[18]), STR_128(CODE[17]), STR_127(CODE[17]), 
		 -> STR_126(CODE[15]), STR_125(CODE[15]), STR_124(CODE[18]), STR_123(CODE[15]), 
		 -> STR_122(CODE[18]), STR_121(CODE[18]), STR_120(CODE[17]), STR_119(CODE[17]), 
		 -> STR_118(CODE[17]), STR_117(CODE[17]), STR_116(CODE[17]), STR_115(CODE[17]), 
		 -> STR_114(CODE[17]), STR_113(CODE[17]), STR_112(CODE[18]), STR_111(CODE[17]), 
		 -> STR_110(CODE[15]), STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[17]), 
		 -> STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[16]), STR_103(CODE[17]), 
		 -> STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), 
		 -> STR_98(CODE[17]), STR_97(CODE[15]), STR_96(CODE[11]), STR_95(CODE[17]), 
		 -> STR_94(CODE[11]), STR_93(CODE[17]), STR_92(CODE[14]), STR_91(CODE[15]), 
		 -> STR_90(CODE[14]), STR_89(CODE[10]), STR_88(CODE[9]), STR_87(CODE[9]), 
		 -> STR_86(CODE[10]), STR_85(CODE[10]), STR_84(CODE[16]), STR_83(CODE[15]), 
		 -> STR_82(CODE[3]), STR_81(CODE[15]), STR_80(CODE[13]), STR_79(CODE[14]), 
		 -> STR_78(CODE[8]), STR_77(CODE[14]), STR_76(CODE[15]), STR_75(CODE[12]), 
		 -> STR_74(CODE[14]), STR_73(CODE[17]), STR_72(CODE[14]), STR_71(CODE[15]), 
		 -> STR_70(CODE[17]), STR_69(CODE[17]), STR_68(CODE[7]), STR_67(CODE[21]), 
		 -> STR_66(CODE[16]), STR_65(CODE[16]), STR_64(CODE[19]), STR_63(CODE[24]), 
		 -> STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), 
		 -> STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), 
		 -> STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), 
		 -> STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), 
		 -> STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), 
		 -> STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), 
		 -> STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_printf
    _readCOND->_readADC
    ___ftge->___awtoft
    ___awtoft->___awdiv
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _initEEPROM->_EEPROM_write
    _EEPROM_write->_printf
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PortTestPusher->_printf
    _PortTestDC->_printf
    _PlatformTest->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  250900
                    _I2C_Master_Init
                               _Test
                                 _UI
                         _initEEPROM
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   37162
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   18298
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                  23    23      0   13471
                                             43 BANK0     23    23      0
                            ___awdiv
                           ___awtoft
                             ___ftge
                           _delay_ms
                            _lcdInst
                             _printf
                           _readCOND
 ---------------------------------------------------------------------------------
 (3) _readCOND                                             4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     392
                                             18 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2172
                                             14 BANK0      4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1953
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5393
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11734
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23608
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22694
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initEEPROM                                           0     0      0   10987
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10987
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   47352
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13531
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    9163
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    9163
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     940
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  118944
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                       _PlatformTest
                         _PortTestDC
                     _PortTestPusher
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    9275
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9232
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    9163
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15799
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    9163
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestPusher                                       1     1      0    9163
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    9163
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PlatformTest                                        12    12      0    9436
                                             43 BANK0     12    12      0
                            _lcdInst
                             _printf
                            _readADC
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19949
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                        _stopSignals
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5393
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5393
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                         10    10      0    9438
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    9028
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   83876
                                             72 COMRAM    16    16      0
                     _printSortTimer
                     _updateArmState
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _updateArmState                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      31    31      0    4788
                                             41 COMRAM    31    31      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
       _updateServoPosition
     _PlatformTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _stopSignals
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTestPusher
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initEEPROM
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       ___awdiv
         ___awmod (ARG)
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftge
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
       _delay_ms
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readCOND
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateArmState
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      51       7       31.6%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     58      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14E      34        0.0%
DATA                 0      0     14E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Apr 10 17:48:37 2017

                                    _i 013B                     i2_I2C_Master_Start 5ACE  
                   i2_I2C_Master_Write 5AA4                                     l71 5A3C  
                                   _ID 16C8                       _f_panning_to_bin 0067  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
               __end_of_updateArmState 54BC                                    ID@i 00B1  
                                  ID@n 00C0                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C8  
                                  l193 0102                                    l185 00E2  
                                  l188 00E6                                    l508 478A  
                                  l627 2D7C                                    l813 140A  
                                  l805 1332                                    l823 1536  
                                  l807 1386                                    l840 15BE  
                                  l816 1444                                    l808 136C  
                                  l850 16BA                                    l842 15D0  
                                  l834 166E                                    l826 14CA  
                                  l843 15E4                                    l835 159A  
                                  l844 15F8                                    l828 14F6  
                                  l845 160C                                    l862 194A  
                                  l846 1622                                    l838 166C  
                                  l855 1784                                    l928 4D14  
                                  l875 1A5E                                    l795 1268  
                                  l876 1A78                                    l879 1B10  
                         __CFG_CPB$OFF 000000                                    _PR2 000FCB  
                                  _PEN 007E2A                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001              __end_of_updateServoStates 3C40  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _arm 4280                                    _log 00F0  
                                  _sel 00FD                                    _var 0147  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B                    __end_of_BlockerTest 3E06  
                  _log_count_can_w_lab 013F        __end_of_change_state_to_menu_11 56EC  
      __end_of_change_state_to_menu_12 552C        __end_of_change_state_to_menu_22 54F4  
      __end_of_change_state_to_menu_23 56BC           _f_can_coming_to_distribution 0131  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 57DC  
      __end_of_change_state_to_logs_12 57AC        __end_of_change_state_to_logs_22 577C  
      __end_of_change_state_to_logs_23 5838        __end_of_change_state_to_logs_33 574C  
      __end_of_change_state_to_logs_34 571C                                   ??_ID 00AB  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1310 0AA2  
                                 l1302 0948                                   l1126 43A0  
                                 l1311 0B08                                   l1400 2986  
                                 l1312 0B56                                   l1241 41C0  
                                 l1402 29B4                                   l1306 09EE  
                                 l1139 5A08                                   l1244 41E0  
                                 l1148 3F34                                   l1309 0A54  
                                 l1431 4CA4                                   l1424 4C94  
                                 l1336 0EB0                                   l1264 45A6  
                                 l1353 1120                                   l1273 2A26  
                                 l1267 45AA                                   l1372 51D0  
                                 l1348 104A                                   l1276 2A2A  
                                 l1525 1D64                                   l1453 3D8E  
                                 l1454 3DA8                                   l1366 51C0  
                                 l1448 3D42                                   l1387 29BA  
                                 l1491 5174                                   l1299 0944  
                                 l1396 292E                                   l1468 4370  
                                 l1485 5164                                   l1477 436A  
                                 l1469 4332                                   ?_arm 0001  
                                 l1919 49E0                                   l1972 4E38  
                                 l1789 4146                                   l1982 50B6  
                                 l7131 2DE0                                   l7141 2E76  
                                 l7133 2DFE                                   l7125 2D86  
                                 l8101 1978                                   l7301 4A00  
                                 l6511 5802                                   l7143 2E94  
                                 l7135 2E1C                                   l7127 2DA4  
                                 l7151 2EEE                                   l7119 2CFA  
                                 l7311 4A8C                                   l7145 2EB2  
                                 l7137 2E3A                                   l7129 2DC2  
                                 l7153 2F4C                                   l8121 19D8  
                                 l8113 19B0                                   l8025 1740  
                                 l7401 4E50                                   l7305 4A16  
                                 l7147 2ED0                                   l7139 2E58  
                                 l8043 17AE                                   l7501 4874  
                                 l8125 19E8                                   l8109 19A0  
                                 l7421 4EA8                                   l7405 4E66  
                                 l9103 3D10                                   l7351 4416  
                                 l8135 1A32                                   l8055 17F2  
                                 _ADIE 007CEE                                   l6545 4DE8  
                                 l6529 58B0                                   l6713 1C3E  
                                 l6705 1C0C                                   l9121 3D54  
                                 l8313 2C40                                   l8305 2C10  
                                 l8065 18BE                                   l7417 4E90  
                                 l6547 4DF4                                   l6803 1ECC  
                                 l6723 1CB6                                   l6715 1C4A  
                                 l6811 1F36                                   l7451 48C8  
                                 l7363 444E                                   l7347 440C  
                                 l7355 442E                                   l8163 1ACE  
                                 l8171 1B12                                   l8139 1A48  
                                 l6557 4E2A                                   l6549 4DFA  
                                 l6573 50A8                                   l6565 5072  
                                 l6805 1ED2                                   l6733 1D0C  
                                 l6725 1CC2                                   l6717 1C50  
                                 l9141 3DBA                                   l8325 2C88  
                                 l8317 2C76                                   l7453 48D4  
                                 l7445 48AA                                   l8181 44B2  
                                 l7373 58D6                                   l6567 507E  
                                 l6751 1D9C                                   l6735 1D24  
                                 l6727 1CC8                                   l6487 5878  
                                 l9127 3D6E                                   l9119 3D44  
                                 l8511 0CE4                                   l7471 492C  
                                 l7463 490A                                   l7455 48DA  
                                 l7439 4894                                   l6823 4C0A  
                                 l6815 5536                                   l7359 4444  
                                 l8183 44CC                                   l8079 1906  
                                 l6569 5084                                   l6809 1F2A  
                                 l6729 1CE0                                   l6681 1B2C  
                                 l6489 588A                                   l9129 3D78  
                                 l8521 0D0C                                   l8329 2CBE  
                                 l8257 2A7A                                   l6833 4C40  
                                 l6817 5542                                   l9313 0258  
                                 l6905 4964                                   l8177 447E  
                                 l7369 58C0                                   l7801 1226  
                                 l6755 1DB6                                   l6739 1D2A  
                                 l6691 1B5C                                   l9139 3DAA  
                                 l6851 4CFC                                   l8515 0CFC  
                                 l8507 0CDA                                   l8371 09B8  
                                 l8275 2B32                                   l7467 4918  
                                 l9171 4AEE                                   l9163 4AC8  
                                 l6827 4C20                                   l9403 0578  
                                 l9331 02A4                                   l9323 0282  
                                 l9243 00FE                                   l6907 4974  
                                 l8179 4498                                   l8187 44E6  
                                 l7483 5418                                   l7491 47F0  
                                 l8099 1970                                   l7811 1270  
                                 l6781 1E5C                                   l6757 1DBC  
                                 l6685 1B40                                   l9149 3E00  
                                 l8621 0F1A                                   l8613 0EF8  
                                 l8541 0D80                                   l8533 0D5E  
                                 l8525 0D24                                   l8517 0D02  
                                 l8293 2BC4                                   l9317 0270  
                                 l9309 024E                                   l9261 015C  
                                 l9253 013A                                   l6917 49CE  
                                 l6909 497A                                   l8189 4514  
                                 l6775 1E1A                                   l6687 1B52  
                                 l9095 3CCA                                   l8703 10A4  
                                 l8631 0F42                                   l8623 0F20  
                                 l8551 0DA8                                   l8543 0D86  
                                 l8463 0BF4                                   l8455 0BD2  
                                 l8375 09C2                                   l8287 2B82  
                                 l9183 4B34                                   l9175 4B12  
                                 l9167 4ADC                                   l9159 4AB8  
                                 l9511 07D8                                   l9503 07B6  
                                 l9431 0660                                   l9423 063E  
                                 l9351 0332                                   l9327 028C  
                                 l7583 4B80                                   l6871 409C  
                                 l7495 4830                                   l6793 1E92  
                                 l6769 1DF8                                   l6697 1B90  
                                 l6857 4D2E                                   l8713 10CC  
                                 l8617 0F02                                   l8537 0D68  
                                 l8481 0C56                                   l8473 0C1C  
                                 l8465 0BFA                                   l8369 09B2  
                                 l9169 4AE8                                   l9521 07F4  
                                 l9441 067C                                   l9361 03C8  
                                 l9353 0350                                   l9281 01CC  
                                 l9265 016E                                   l9257 0144  
                                 l9249 0128                                   l7593 4BC2  
                                 l6881 412A                                   l6873 40AA  
                                 l7921 14AE                                   l7913 1484  
                                 l6795 1E9E                                   l6787 1E76  
                                 l6779 1E52                                   l8723 110A  
                                 l8707 10BC                                   l8643 0F86  
                                 l8627 0F2A                                   l8563 0DEC  
                                 l8547 0D90                                   l8491 0C7E  
                                 l8459 0BDC                                   l8379 09DA  
                                 l9179 4B20                                   l9507 07C0  
                                 l9427 0648                                   l9371 045E  
                                 l9363 03E6                                   l9355 036E  
                                 l9347 02F6                                   l7587 4B96  
                                 l6883 4138                                   l6875 40DA  
                                 l6867 4088                                   l7827 12AC  
                                 l8733 113A                                   l8717 10E4  
                                 l8709 10C2                                   l8653 0FAE  
                                 l8573 0E14                                   l8485 0C60  
                                 l8469 0C04                                   l9525 080C  
                                 l9517 07EA                                   l9445 0694  
                                 l9437 0672                                   l9381 0522  
                                 l9365 0404                                   l9357 038C  
                                 l9349 0314                                   l9285 01D6  
                                 l7925 14CE                                   l7909 145E  
                                 l7861 1356                                   l6799 1EB8  
                                 l8903 27C2                                   l8743 1162  
                                 l8735 1140                                   l8647 0F9E  
                                 l8639 0F7C                                   l8567 0E04  
                                 l8559 0DE2                                   l8495 0C88  
                                 l9551 088C                                   l9543 086A  
                                 l9471 071C                                   l9463 06FA  
                                 l9367 0422                                   l9359 03AA  
                                 l9375 047C                                   l9279 01C6  
                                 l9295 01FC                                   l6895 416C  
                                 l6879 40FA                                   l7919 14A4  
                                 l8905 27C8                                   l8753 118A  
                                 l8745 1168                                   l8673 1022  
                                 l8665 1000                                   l8657 0FC6  
                                 l8649 0FA4                                   l8593 0E88  
                                 l8585 0E66                                   l8577 0E2C  
                                 l8569 0E0A                                   l8489 0C78  
                                 l9561 08A8                                   l9481 0738  
                                 l9385 052C                                   l9369 0440  
                                 l9377 04E0                                   l9289 01EE  
                                 l6889 4150                                   l7929 14EA  
                                 l7849 131C                                   l8923 2878  
                                 l8739 114A                                   l8675 1028  
                                 l8595 0E8E                                   l8499 0CA0  
                                 l9547 0874                                   l9467 0704  
                                 l9395 0556                                   l7859 134C  
                                 l8941 28DA                                   l8749 1172  
                                 l8669 100A                                   l8589 0E70  
                                 l9901 4274                                   l9565 08C0  
                                 l9557 089E                                   l9485 0750  
                                 l9477 072E                                   l9389 0544  
                                 l9821 3E52                                   l7949 15A6  
                                 l8951 2918                                   l8943 28F0  
                                 l8935 28BA                                   l8679 1032  
                                 l8599 0E98                                   l8783 42F4  
                                 l9399 0560                                   l9823 3E66  
                                 l7887 13F4                                   l8961 295C  
                                 l8849 4CCC                                   l9569 08CC  
                                 l7977 162E                                   l7985 1676  
                                 l7897 1424                                   l8947 2904  
                                 l8699 109A                                   l8787 431A  
                                 l8795 4338                                   l7979 1664  
                                 l7899 142E                                   l8965 2970  
                                 l8885 2712                                   l8797 4352  
                                 l8789 4324                                   l9861 417C  
                                 l7997 16AE                                   l8799 435C  
                                 l9847 3EEE                                   l7999 16BC  
                                 STR_1 FB52                                   STR_2 FF49  
                                 l9881 41F2                                   STR_3 FB40  
                                 STR_4 FE5D                                   l9891 4210  
                                 l9883 41F8                                   STR_5 FB40  
                                 STR_6 FDD9                                   l9893 4216  
                                 l9885 41FE                                   l9877 41E6  
                                 STR_7 FFC3                                   STR_8 FFDA  
                                 l9895 421C                                   l9887 4204  
                                 l9879 41EC                                   STR_9 FFCA  
                                 l9889 420A                                   l9899 4222  
              ??i2_updateServoPosition 0005                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u5130 1C8A                                   u5050 5314  
                                 u5060 5316                                   u5070 53AC  
                                 u5071 53A8                                   u5080 53AE  
                                 u5137 1C80                                   u5170 1D02  
                                 _PEIE 007F96                                   u7100 2CAC  
                                 u7030 2ABC                                   u6310 1232  
                                 u7040 2ABE                                   u5177 1CF8  
                                 u8010 28E8                                   u7210 0B56  
                                 u6330 1268                                   u8020 2900  
                                 u7108 2CB0                                   _RCEN 007E2B  
                                 u8021 28FC                                   u7070 2C64  
                                 u6600 1530                                   u6328 1236  
                                 u8201 3D64                                   u8210 3D66  
                                 u7170 09EE                                   u4850 5800  
                                 u5820 5360                                   u7190 0AA2  
                                 u7078 2C68                                   u5830 5362  
                                 i2l71 5A50                                   u8151 3D38  
                                 u8160 3D3A                                   u6570 1508  
                                 u7700 4312                                   u5860 2D7C  
                                 u6740 183E                                   u5845 50F0  
                                 u6750 1840                                   u6590 152E  
                                 u6760 1892                                   u6770 1894  
                                 u7740 4348                                   u9260 3F34  
                                 u6588 150C                                   u7910 280A  
                                 u7750 434A                                   u6950 1ADA  
                                 u7920 280C                                   u7690 4310  
                                 u6970 1B10                                   u9607 12DA  
                                 u7960 28A2                                   u7880 2754  
                                 u6968 1ADE                                   u9617 1336  
                                 u7890 2756                                   u9707 1452  
                                 u9627 133E                                   u9717 146C  
                                 u9637 1370                                   u9807 15FC  
                                 u9727 1550                                   u9647 137A  
                                 u9817 1604                                   u9737 1588  
                                 u9657 1396                                   u7978 28A6  
                                 u9907 18E2                                   u9827 1610  
                                 u9747 15C2                                   u9667 13C0  
                                 u9917 1A02                                   u9837 161A  
                                 u9757 15CA                                   u9677 140E  
                                 u9597 11B6                                   u9927 1A62  
                                 u9847 1626                                   u9767 15D4  
                                 u9687 1416                                   u9937 1A6C  
                                 u9857 1690                                   u9777 15DE  
                                 u9697 1448                                   u9947 1A92  
                                 u9867 55B6                                   u9787 15E8  
                                 u9957 58CC                                   u9877 4E6E  
                                 u9797 15F2                                   u9967 53BE  
                                 u9887 16E2                                   u9977 53F2  
                                 u9897 1794                                   u9987 43C2  
                                 _RSEN 007E29                                   u9997 441E  
                          _stopSignals 59DC                                   _Test 417A  
                                 _back 0061                                   _main 46E8  
                                 _down 0063                           ___ftpack@arg 0080  
                                 _keys FA8B                           ___ftpack@exp 0083  
                                 _time 011C                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 597A                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 013D                        __end_ofi2_putch 5A8E  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 3250                            i2_lcdNibble 51D8  
                      __end_of_Loading 16C8                   __end_of_actuatorTest 1192  
                                ??_arm 00AB             i2updateServoPosition@timer 0003  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                                  l10081 475C  
                                l10073 4732                                  l10083 4762  
                                l10075 4748                                  l10093 4780  
                                l10085 4768                                  l10095 4786  
                                l10099 478C                   __end_of_EEPROM_write 4466  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 4936  
                      ?_updateArmState 0001                                  _EEADR 000FA9  
                                STR_10 FFE6                                  STR_11 FFEA  
                                STR_12 FFFA                                  STR_20 FFEE  
                                STR_13 FFDE                                  STR_21 FAA6  
                                STR_14 FFD6                                  STR_22 FF9A  
                                STR_30 FDEA                                  STR_15 FFD2  
                                STR_23 FF3B                                  STR_31 FDC8  
                                STR_16 FFE2                                  STR_24 FD2F  
                                STR_32 FD0D                                  STR_40 FCC9  
                                STR_17 FFF2                                  STR_25 FE0C  
                                STR_33 FD1E                                  STR_41 FCB8  
                                STR_18 FFF6                                  STR_34 FDB7  
                                STR_50 FD95                                  STR_42 FD73  
                                STR_26 FD40                                  STR_43 FD73  
                                STR_35 FDB7                                  STR_51 FFDA  
                                STR_19 FFCE                                  STR_27 FDFB  
                                STR_52 FFCA                                  STR_60 FFF2  
                                STR_28 FD51                                  STR_36 FCFC  
                                STR_44 FCDA                        __end_of___awmod 4B3E  
                                STR_45 FCC9                                  STR_37 FD0D  
                                STR_53 FFE6                                  STR_61 FFF6  
                                STR_29 FE09                                  STR_62 FFCE  
                                STR_54 FFEA                                  STR_38 FDA6  
                                STR_46 FD84                                  STR_70 FC85  
                                STR_47 FD84                                  STR_55 FFFA  
                                STR_63 FAA6                                  STR_71 FEF4  
                                STR_39 FD62                                  STR_56 FFDE  
                                STR_80 FF57                                  STR_72 FF2D  
                                STR_48 FCEB                                  STR_64 FAD3  
                                STR_49 FCDA                                  STR_57 FFD6  
                                STR_81 FE7C                                  STR_65 FE3D  
                                STR_73 FC41                                  STR_58 FFD2  
                                STR_90 FF2D                                  STR_82 FE09  
                                STR_74 FF11                                  STR_66 FE4D  
                                STR_59 FFE2                                  STR_75 FF64  
                                STR_91 FEE5                                  STR_83 FEA9  
                                STR_67 FABE                                  STR_68 FFBC  
                                STR_92 FF03                                  STR_76 FED6  
                                STR_84 FE1D                                  STR_85 FF86  
                                STR_77 FF1F                                  STR_69 FC74  
                                STR_93 FC52                                  STR_86 FF86  
                                STR_78 FFAD                                  STR_94 FF70  
                                STR_79 FF2D                                  STR_87 FFA4  
                                STR_95 FC63                                  STR_88 FFA4  
                                STR_96 FF7B                                  STR_89 FF90  
                                STR_97 FEC7                                  STR_98 FBB9  
                                STR_99 FBA8           i2updateServoPosition@my_time 0007  
                                ?_sort 0001                        __end_of___lldiv 49F2  
         i2updateServoPosition@time_us 0001                                  u10007 4456  
                                u10017 002A                                  u10107 0534  
                                u10027 0114                                  u10117 0568  
                                u10037 014C                                  u11007 2194  
                                u10207 07FC                                  u10127 0592  
                                u10047 0188                                  u11017 21C6  
                                u10217 0826                                  u10137 0650  
                                u10057 01DE                                  u11107 3C76  
                                u11027 2212                                  u10307 2B26  
                                u10227 087C                                  u10147 0684  
                                u10067 020A                                  u11117 3D92  
                                u11037 2246                                  u10317 2B46  
                                u10237 08B0                                  u10157 06AE  
                                u10077 0260                                  u11127 3D9C  
                                u11047 2278                                  u10407 45BC  
                                u10327 2B74                                  u10247 418A  
                                u10167 070C                                  u10087 0294  
                                _T0CON 000FD5                                  u11137 5880  
                                u11057 22C4                                  u10417 08F4  
                                u10337 2BB8                                  u10257 29D6  
                                u10177 0740                                  u10097 02BE  
                                u11147 4F48                                  u11067 22F8  
                                u10507 0B36                                  u10427 0938  
                                u10347 2BD6                                  u10267 2A1A  
                                u10187 076A                        ___awdiv@divisor 0088  
                                u11157 4F52                                  u11077 232A  
                                u10517 0B66                                  u10437 095A  
                                u10357 2C04                                  u10277 2A3C  
                                u10197 07C8                                  u11167 4F7E  
                                u11087 4D94                                  u10607 0DF4  
                                u10527 0BE4                                  u10447 09CA  
                                u10367 2C1E                                  u10287 2A6A  
                                _T1CON 000FCD                                  u11177 4F88  
                                u11097 4DB0                                  u10617 0E1C  
                                u10537 0C0C                                  u10457 09FE  
                                u10377 428E                                  u10297 2AD2  
                                u10707 105C                                  u10627 0E78  
                                u10547 0C68                                  u10467 0A64  
                                u10387 4556                                  u10717 10AC  
                                u10637 0EA0                                  u10557 0C90  
                                u10477 0A82                                  u10397 459A  
                                u10807 512E                                  u10727 10D4  
                                u10647 0F0A                                  u10567 0CEC  
                                u10487 0AB2                                  _T2CON 000FCA  
                                u10817 518A                                  u10737 1124  
                                u10657 0F32                                  u10577 0D14  
                                u10497 0B18                                  u10907 29A2  
                                u10827 26F0                                  u10747 112E  
                                u10667 0F8E                                  u10587 0D70  
                                u10917 1F64                                  u10837 276A  
                                u10757 1152                                  u10677 0FB6  
                                u10597 0D98                                  u10927 1FB0  
                                u10847 27B6                                  u10767 117A  
                                u10687 1012                                  _T3CON 000FB1  
                                u10937 1FFC                                  u10857 2820  
                                u10777 4C5E                                  u10697 103A  
                                u10947 2030                                  u10867 286C  
                                u10787 4CAE                                  u10957 2062  
                                u10877 2938                                  u10797 4CC2  
                                u10967 20AE                                  u10887 294A  
                                u10977 20E2                                  u10897 2990  
                                u10987 2114                                  u10997 2160  
                      __end_of___lwdiv 4E42                        __end_of___lwmod 50C0  
                                i2l268 324C                                  i2l627 32DE  
                                i2l928 4FC4                                  i2l955 54B8  
                      ___awdiv@counter 008A                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 1F56  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 5A82  
                      __end_of_handler 3A78                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 5890                        __end_of_initLCD 53FC  
                       __CFG_EBTRB$OFF 000000                                  _debug 00E8  
                           i2isdigit@c 0003                          ___awtoft@sign 0091  
                                _getIR 4E42                        __end_of_loadRTC 4BCA  
                      __end_of_readMAG 53B6                        __end_of_dpowers FAA6  
                                _first 0137                                  _enter 0065  
                                arm@on 00AC                        __end_of_isdigit 58BA  
                                _input 007D                          ___ftpack@sign 0084  
                                _putch 5A62                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 5930  
                     __end_ofi2_getRTC 4F26                    _log_count_pop_w_tab 0069  
                                status 000FD8                            readCOND@res 0084  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 26B2                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 55FC  
                          Loading@addr 00B3                       _count_can_no_lab 0123  
                 __size_of_EEPROM_read 0018                        __initialization 5284  
                         __end_of_Test 4280                     __size_ofi2_lcdInst 000C  
                         __end_of_main 47B0                           __end_of_keys FA9C  
                         __end_of_sort 599C                             i2printf@ap 0020  
                           i2printf@cp 001E                     __size_ofi2_isdigit 001E  
                          _BlockerTest 3C40                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00C4  
                        __activetblptr 000003                                 ID@res1 00BC  
                               ID@res2 00BE             __size_of_updateServoStates 01C8  
                               ID@res3 00AD                                 ID@time 00BB  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FB86                                 STR_101 FC0E  
                               STR_110 FE8B                                 STR_102 FC1F  
                               STR_111 FCA7                                 STR_103 FB64  
                               STR_104 FE2D                                 STR_120 FC30  
                               STR_112 FAE6                                 STR_113 FBCA  
                               STR_105 FB97                                 STR_121 FB0A  
                               STR_114 FBFD                                 STR_106 FB75  
                               STR_130 FB2E                                 STR_122 FAF8  
                               _ADRESH 000FC4                                 STR_107 FB97  
                               STR_115 FBFD                                 STR_131 FFB5  
                               STR_123 FE6D                                 STR_108 FEB8  
                               STR_116 FBEC                                 STR_124 FB1C  
                               _EEADRH 000FAA                                 STR_117 FBFD  
                               STR_125 FE6D                                 STR_109 FE9A  
                               STR_118 FBEC                                 STR_126 FE6D  
                               _ADRESL 000FC3                                 STR_127 FBDB  
                               STR_119 FBDB                                 STR_128 FC96  
                               STR_129 FAE6                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                       __end_of___awtoft 5440  
                               ?_putch 0001                       __end_of___ftpack 417A  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 565C              i2_change_state_to_menu_22 562C  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1047 397C  
                               i2l1056 3A20                                 i2l1058 3A3C  
                               i2l1139 5A34                                 i2l1525 251E  
                               i2l7001 2490                                 i2l7011 24E4  
                               i2l7003 2496                                 i2l1972 527A  
                               i2l7005 24A8                                 i2l1982 5478  
                               i2l7031 2564                                 i2l7015 24E8  
                               i2l7033 2568                                 i2l7009 24D2  
                               i2l7051 25B4                                 i2l7027 254C  
                               i2l7045 259A                                 i2l7071 2614  
                               i2l7063 25F6                                 i2l7055 25D8  
                               i2l7081 2640                                 i2l7057 25E0  
                               i2l7075 2628                                 i2l7091 55D4  
                               i2l6621 59D4                                 i2l7085 268E  
                               i2l7069 260C                                 i2l7093 55DC  
                               i2l6631 5248                                 i2l7079 263A  
                               i2l7087 2696                                 i2l6633 5250  
                               i2l7281 4056                                 i2l7273 4022  
                               i2l6643 5270                                 i2l6635 5254  
                               i2l6651 544E                                 i2l6653 5456  
                               i2l7269 4012                                 i2l7541 32E8  
                               i2l9205 4FDA                                 i2l6655 545A  
                               i2l7703 37BC                                 i2l7551 3356  
                               i2l7543 32FE                                 i2l7535 327C  
                               i2l7713 37DA                                 i2l7561 33C4  
                               i2l7553 336C                                 i2l7545 3314  
                               i2l6659 546E                                 i2l7715 37DE  
                               i2l7563 33DA                                 i2l7555 3382  
                               i2l7547 332A                                 i2l6597 5950  
                               i2l6933 4EFC                                 i2l7741 3832  
                               i2l7733 380E                                 i2l7709 37C6  
                               i2l7661 3718                                 i2l7645 36E0  
                               i2l7637 36C6                                 i2l7557 3398  
                               i2l7549 3340                                 i2l7727 3800  
                               i2l7719 37E8                                 i2l7663 371E  
                               i2l7647 36F0                                 i2l7655 36FE  
                               i2l7559 33AE                                 i2l7567 33F0  
                               i2l6929 4EEC                                 i2l6961 235E  
                               i2l7745 3844                                 i2l7737 3820  
                               i2l7665 3724                                 i2l7673 3736  
                               i2l7649 36F4                                 i2l7569 344A  
                               i2l9601 2FFE                                 i2l6939 4F16  
                               i2l6963 236C                                 i2l7667 372A  
                               i2l7659 3712                                 i2l7755 3860  
                               i2l6981 2406                                 i2l6973 23A4  
                               i2l6957 234E                                 i2l7749 3856  
                               i2l7693 3792                                 i2l7685 377A  
                               i2l7669 3730                                 i2l9701 3170  
                               i2l9621 3038                                 i2l9613 301A  
                               i2l6991 2438                                 i2l6967 2372  
                               i2l9199 4FB0                                 i2l6993 243C  
                               i2l9721 31BE                                 i2l9713 31A2  
                               i2l9705 317E                                 i2l9641 307E  
                               i2l9633 3062                                 i2l9625 3046  
                               i2l9617 3028                                 i2l9609 300C  
                               i2l7699 37A0                                 i2l9731 31E2  
                               i2l6989 242E                                 i2l9725 31D4  
                               i2l9717 31B0                                 i2l9709 3194  
                               i2l9661 30D4                                 i2l9653 30B0  
                               i2l9645 3094                                 i2l9637 3070  
                               i2l9629 3054                                 i2l6999 2486  
                               i2l9911 3492                                 i2l9583 2FC0  
                               i2l9921 34FC                                 i2l9681 3122  
                               i2l9673 30FE                                 i2l9665 30E2  
                               i2l9657 30BE                                 i2l9649 30A2  
                               i2l9593 2FE2                                 i2l9585 2FC6  
                               i2l9915 34A2                                 i2l9933 35CA  
                               i2l9693 3154                                 i2l9685 3130  
                               i2l9677 3114                                 i2l9669 30F0  
                               i2l9597 2FF0                                 i2l9589 2FD4  
                               i2l9937 35FE                                 i2l9697 3162  
                               i2l9689 313E                                 i2l9939 3604  
                               i2l9971 3ACC                                 i2l9963 3AAC  
                               i2l9965 3AB6                                 i2l9959 3A96  
                               i2l9993 3B6C                                 i2l9977 3AE2  
                               i2l9985 3B00                                 i2l9979 3AF6  
                               i2l9987 3B4A                _f_most_recent_sort_time 0135  
                               i2l9989 3B54                                 i2l9999 3B92  
                        PlatformTest@i 00B1                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR2IF 007CF1                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR2ON 007E52  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                     __end_of_delay_ms 58E2                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 597A  
                               ___ftge 47B0                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 4548  
                               ___wmul 5562                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 5598  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                     __end_of_readCOND 536A                                 _getRTC 4BCA  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 59BE                                 _initUI 55FC  
                               _readIR 52D2                                 _logRun 3E06  
                               getIR@i 0087                                 clear_0 52AA  
                               clear_1 52B6                                 clear_2 52C2  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestDC 517C                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1B1E  
                            ??_handler 0049                __size_of_initGlobalVars 00CA  
                         ?_retrieveLog 0007                                 _strcpy 552C  
                   __size_of_SpeedTest 0084                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 590A  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 58E2  
                          ?_BothServos 0001                              ??_isdigit 0080  
                    __end_ofi2___lwdiv 5284                       __end_of_printRTC 2F90  
                         __mediumconst FA8A                      __end_ofi2___lwmod 5482  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00F4  
                __end_of_algorithmTest 461E                      __end_ofi2_lcdInst 5A9A  
                    __end_ofi2_isdigit 59DC                             __accesstop 0080  
              __end_of__initialization 52C8                          ?_inputHandler 002A  
                           ___ftge@ff1 0092                             ___ftge@ff2 0095  
                _most_recent_sort_time 0143                          ___rparam_used 000001  
                        ?_PlatformTest 0001                printSortTimer@start_sec 003B  
                __size_of_actuatorTest 08B8                             ___awtoft@c 008E  
                        i2_EEPROM_read 5A26                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E8                           __pidataBANK1 5AAE  
                  BlockerTest@cam_flag 00B1                          __end_of_getIR 4EB4  
                          i2printRTC@i 0041                          _initSortTimer 49F2  
          __end_of_updateServoPosition 4D52                          __end_of_putch 5A72  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 1B1E                             __end_of_UI 08DA  
                            ?i2___wmul 0001                     __size_of_lcdNibble 006C  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 5864  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 5838  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0127                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 08DA  
              __size_of_PortTestPusher 005C                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C         __size_ofi2_updateServoPosition 0068  
        __end_ofi2_updateServoPosition 4FFA                           _EEPROM_write 437E  
                       ??_PlatformTest 00AB               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                                UI@F3247 0149  
                    __end_of_SpeedTest 4CD4                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 03EE                      printRTC@RTC_month 00BC  
                              ?___ftge 0092                                _ID$1146 00AF  
                              _ID$1149 00B0                           ?i2_lcdNibble 0001  
                              UI@i_412 00C9                                UI@i_415 00CA  
                              UI@i_416 00CB                                UI@i_450 00D4  
                              UI@i_442 00D0                                UI@i_434 00CC  
                              UI@i_451 00D5                                UI@i_443 00D1  
                              UI@i_435 00CD                                UI@i_446 00D2  
                              UI@i_438 00CE                                UI@i_447 00D3  
                              UI@i_439 00CF                       ??_updateArmState 0001  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getMAG 0001                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                              ?___awtoft 008E  
                            ?___ftpack 0080                            ?_PortTestDC 0001  
                              ?_printf 008E                                _UI$2433 00C6  
                              ?_strcpy 0080                        _pan_servo_state 006B  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                              i2l10005 3BB8                                i2l10111 38FA  
                              i2l10113 38FE                                i2l10121 3912  
                              i2l10051 5492                                i2l10019 3C0E  
                              i2l10123 392A                                i2l10141 3950  
                              i2l10117 390A                                i2l10055 5498  
                              i2l10127 3934                                i2l10049 548C  
                              i2l10217 3A3A                                i2l10163 3996  
                              i2l10191 39EE                                i2l10185 39D4  
                              i2l10169 39A4                                i2l10195 39F4  
                              i2l10671 3B42                                i2l10681 3222  
                              i2l10673 3C26                                i2l10665 3B24  
                              i2l10683 323E                                i2l10675 3C36  
                              i2l10667 3B2E                                i2l10669 3B38  
                              i2l10687 374E                                i2l10679 3200  
                              i2l10689 376A                              ?_delay_ms 0001  
                       PlatformTest@on 00B5                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                _RTCflag 00E4  
                            ?_readCOND 0001                             _initEEPROM 5A10  
                              i2_putch 5A82                              ?_initTime 0080  
                      _f_loadingNewCan 00EE                        i2printRTC@month 003D  
                __size_of_Distribution 00E2            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 4F92                                _Loading 1192  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                        __size_of___ftge 00C8  
                              ___awdiv 4878                                ___awmod 4A9C  
                           _initServos 4D52                                ___lldiv 4936  
                      __size_of___wmul 0036                        __size_of_getMAG 0032  
                              ___lwdiv 4DCA                                ___lwmod 505E  
                      __size_of_getRTC 0086                        printSortTimer@i 0047  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                           ?_BlockerTest 0001  
                      __size_of_initUI 0030                        __size_of_readIR 004C  
                              __pcinit 5284                             ??___awtoft 0091  
                 i2EEPROM_read@address 0001                        __size_of_logRun 0144  
                           ??___ftpack 0085                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 461E  
                              _lcdInst 5A72                                _handler 0008  
                              __ptext0 46E8                                __ptext1 597A  
                              __ptext2 1192                                __ptext3 49F2  
                              __ptext4 461E                                __ptext5 5598  
                              __ptext6 4E42                                __ptext7 52D2  
                              __ptext8 16C8                                __ptext9 531E  
                      __size_of_printf 0438                                _readADC 5864  
                      __size_of_strcpy 0036                                _initLCD 53B6  
                              _cur_can 012B                                _loadRTC 4B3E  
                              _readMAG 536A                                _dpowers FA9C  
                   actuatorTest@i_1750 00B1                     actuatorTest@i_1752 00B2  
                   actuatorTest@i_1761 00B8                     actuatorTest@i_1753 00B3  
                   actuatorTest@i_1762 00B9                     actuatorTest@i_1746 00AE  
                   actuatorTest@i_1771 00BE                     actuatorTest@i_1755 00B4  
                   actuatorTest@i_1747 00AF                     actuatorTest@i_1739 00AD  
                         __size_of_arm 00FE                     actuatorTest@i_1772 00BF  
                   actuatorTest@i_1756 00B5                     actuatorTest@i_1765 00BA  
                   actuatorTest@i_1749 00B0                     actuatorTest@i_1766 00BB  
                   actuatorTest@i_1758 00B6                     actuatorTest@i_1775 00C0  
                   actuatorTest@i_1759 00B7                     actuatorTest@i_1776 00C1  
                   actuatorTest@i_1768 00BC                     actuatorTest@i_1769 00BD  
                   actuatorTest@i_1778 00C2                     actuatorTest@i_1779 00C3  
                              _isdigit 5890                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 0124  
                   _motor_toggle_count 0145                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 4466                         __pintcode_body 388E  
                 PlatformTest@res_1791 00AF                   end_of_initialization 52C8  
                           ??_readCOND 0082                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 388E                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestDC 005C  
                            i2u1120_47 51FC                              i2u1121_47 521E  
                            i2u1122_47 5228                              i2u1118_47 36E6  
                            i2u1119_47 51F2              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
               __end_of_initGlobalVars 46E8                             _sensorTest 29C8  
                           _servoTimes 0059                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 388E  
                         ??_BothServos 00AB                  __end_of_machineConfig 505E  
                 __end_of_PlatformTest 29C8                             _updateMenu 2F90  
                    i2_I2C_Master_Read 5930                              _IR_signal 00E0  
                    i2_I2C_Master_Wait 5A50                      i2_I2C_Master_Stop 5AC6  
                    i2___lwdiv@divisor 0008                        _log_count_total 0141  
                       _PortTestPusher 5120                              i2___lwdiv 5232  
                            i2___lwmod 5440                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 3486                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                          ?_initEEPROM 0001                              i2_lcdInst 5A8E  
                        Loading@i_1123 00B6                          Loading@i_1132 00B8  
                        Loading@i_1134 00BA                          Loading@i_1135 00BC  
                        Loading@i_1137 00BE                             _total_time 00FA  
                          printf@width 00A9                   __size_of_stopSignals 001C  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 59BE  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 2344  
                  __end_of_EEPROM_read 5A10                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___ftge 4878  
                       __end_of___wmul 5598                         __end_of_getMAG 55CA  
                       __end_of_getRTC 4C50                   __size_ofi2_lcdNibble 005A  
                       _timer2_counter 0073                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 562C  
                       __end_of_readIR 531E                         __end_of_logRun 3F4A  
                     i2___wmul@product 0005                         __end_of_printf 1F56  
                         i2printf@flag 0026                         __end_of_strcpy 5562  
            __end_ofi2_I2C_Master_Read 5956              __end_ofi2_I2C_Master_Wait 5A62  
                         i2printf@prec 001D                    start_initialization 5284  
            __end_ofi2_I2C_Master_Stop 5ACE                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 0125  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
               __end_of_PortTestPusher 517C                            __end_of_arm 437E  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1407 00B0                  i2I2C_Master_Read@temp 0003  
                 BlockerTest@cond_flag 00B3                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                               ??___ftge 0098  
                            _SpeedTest 4C50                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                            ?_sensorTest 0001  
                          __pdataBANK1 0149                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                               ID@i_1151 00B7  
                             ID@i_1152 00B9                               ID@i_1145 00B3  
                             ID@i_1148 00B5                           ??_PortTestDC 00AB  
               printSortTimer@timeDiff 0045       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    __size_of_initEEPROM 0016  
                  _printSortTimer$2560 0043                   __size_of_BlockerTest 01C6  
                    __size_of___awtoft 0044                      __size_of___ftpack 010C  
                          __pbssCOMRAM 0059           __size_of_updateServoPosition 007E  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
                      ?_PortTestPusher 0001                __size_of_printSortTimer 021C  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$2068 0081                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 003F  
                    printSortTimer@sec 0041                    __size_of_initServos 0078  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                     _tilt_servo_state 0071                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 0129  
                    __size_of_readCOND 004C                            _EEPROM_read 59F8  
                     _I2C_Master_Start 5ABE                     __end_of_PortTestDC 51D8  
                            _f_lastCan 00EC                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 5A9A  
                    __size_of_initTime 0022                  i2_updateServoPosition 4F92  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FA8A                              _lcdNibble 4F26  
                __size_of_inputHandler 01EC                               ?___awdiv 0086  
                            __ptext100 5A50                               ?___awmod 0080  
                             ?___lldiv 0080                         _sensor_outputs 00DA  
                             ?___lwdiv 0080                               ?___lwmod 0087  
                __size_of_PlatformTest 0316                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0139                              _cur_state 00E6  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0072  
                        _algorithmTest 4548                            ??i2___lwdiv 000A  
                          _COND_signal 00DE                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0456  
                          __size_of_UI 08C8                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 5AD6             __end_ofi2_I2C_Master_Write 5AAE  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATBbits 000F8A  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                         _inputHandler 36A2                            ??i2_isdigit 0001  
                         _PlatformTest 26B2                           BlockerTest@i 00AD  
                             _PIR2bits 000FA1                               i2u615_40 32DE  
                      PlatformTest@res 00AD                               i2u562_40 24CA  
                             i2u562_47 24C0                               i2u558_40 246A  
                             i2u558_47 2460                               i2u495_40 594E  
                  __size_of_updateMenu 02C0                         _log_completion 00F2  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0077                              _was_low_2 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 590A  
                        lcdNibble@data 0081                               i2_getRTC 4EB4  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                __size_of_updateArmState 003A  
                             Loading@i 00C0                               Loading@j 00C2  
                             i2_printf 2344                               i2_strcpy 55CA  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 5298                           ??_initEEPROM 00B1  
                            readIR@res 0084                 ?i2_updateServoPosition 0001  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 5A3C                            _count_total 00FE  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 0536                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                          ??_SpeedTest 00AB                  __end_of_initSortTimer 4A9C  
                         ??_initServos 0088                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 56BC  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 54F4  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 54BC  
              _change_state_to_menu_23 568C                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 57AC                _change_state_to_logs_12 577C  
              _change_state_to_logs_22 574C                _change_state_to_logs_23 580A  
              _change_state_to_logs_33 571C                _change_state_to_logs_34 56EC  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                             ___awtoft 53FC                               ___ftpack 406E  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 3A70                     __end_of_initEEPROM 5A26  
                      _I2C_Master_Init 50C0                       __size_of_readADC 002C  
                      _I2C_Master_Read 57DC                       __size_of_initLCD 0046  
                         _f_ID_receive 012D                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 5A3C  
                      _I2C_Master_Stop 5AB6                       __size_of_isdigit 002A  
                             _delay_ms 58BA                         _printSortTimer 3486  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 406E                               __ptext10 58BA  
                             __ptext11 47B0                               __ptext20 4936  
                             __ptext12 53FC                               __ptext21 5838  
                             __ptext13 406E                               __ptext30 4BCA  
                             __ptext22 599C                               __ptext14 4466  
                             __ptext31 5A9A                               __ptext23 53B6  
                             __ptext15 4FFA                               __ptext40 417A  
                             __ptext32 5AB6                               __ptext24 5A10  
                             __ptext16 3E06                               __ptext41 29C8  
                             __ptext33 5ABE                               __ptext25 437E  
                             __ptext17 55FC                               __ptext50 1F56  
                             __ptext42 536A                               __ptext34 57DC  
                             __ptext26 59F8                               __ptext18 4B3E  
                             __ptext51 59DC                               __ptext43 4280  
                             __ptext35 5A3C                               __ptext27 0012  
                             __ptext19 50C0                               __ptext60 505E  
                             __ptext52 4D52                               __ptext44 4548  
                             __ptext36 54BC                               __ptext28 2CC6  
                             __ptext61 4DCA                               __ptext53 4CD4  
                             __ptext45 08DA                               __ptext37 54F4  
                             __ptext29 552C                               __ptext70 55CA  
                             __ptext62 5A72                               __ptext54 3C40  
                             __ptext46 4C50                               __ptext38 4A9C  
                             __ptext71 36A2                               __ptext63 4F26  
                             __ptext55 5864                               __ptext47 5120  
                             __ptext39 4878                               __ptext80 577C  
                             __ptext72 562C                               __ptext56 1B1E  
                             __ptext48 517C                               __ptext81 57AC  
                             __ptext73 565C                               __ptext65 3A78  
                             __ptext57 5A62                               __ptext49 26B2  
                             __ptext90 590A                               __ptext82 5956  
                             __ptext74 568C                               __ptext66 4F92  
                             __ptext58 5890                               __ptext91 5440  
                             __ptext83 3F4A                               __ptext75 56BC  
                             __ptext67 2F90                               __ptext59 5562  
                             __ptext92 5232                               __ptext84 5A26  
                             __ptext76 56EC                               __ptext68 58E2  
                             __ptext93 5A8E                               __ptext85 5482  
                             __ptext77 571C                               __ptext69 3250  
                             __ptext94 51D8                               __ptext86 3486  
                             __ptext78 580A                               __ptext95 4EB4  
                             __ptext87 2344                               __ptext79 574C  
                             __ptext96 5AA4                               __ptext88 5A82  
                             __ptext97 5AC6                               __ptext89 59BE  
                             __ptext98 5ACE                               __ptext99 5930  
                             _dispLogs 5956                          ?_actuatorTest 0001  
                   PlatformTest@i_1795 00B3                               _readCOND 531E  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$2068 0002                     __end_of_initServos 4DCA  
                        __size_of_Test 0106                          ?_EEPROM_write 00AB  
                             _initTime 599C                          __size_of_main 00C8  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F8                    _updateServoPosition 4CD4  
               __size_of_machineConfig 0064                          ??i2_lcdNibble 0001  
                             _printRTC 2CC6                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F6  
                   _f_can_coming_to_ID 012F                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 568C  
    __end_ofi2_change_state_to_menu_22 565C                       ??_PortTestPusher 00AB  
                             loadRTC@i 0096                 __end_of_printSortTimer 36A2  
                            putch@data 0082               __end_of_I2C_Master_Start 5AC6  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 5AA4  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00E2                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                  _servo_timer_counter 006D                               intlevel2 0000  
                       ??_EEPROM_write 00AE                         BlockerTest@res 00AF  
                   __end_of_sensorTest 2CC6                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 59F8              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 3250  
              __end_of_I2C_Master_Init 5120                __end_of_I2C_Master_Read 580A  
              __end_of_I2C_Master_Wait 5A50                          ??_BlockerTest 00AB  
              __end_of_I2C_Master_Stop 5ABE                            lcdInst@data 0082  
                        printRTC@F3237 014D                           retrieveLog@i 000E  
                          _retrieveLog 3F4A                    __end_ofi2_lcdNibble 5232  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                   _servo_timer_target 006F                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                        ___lwmod@divisor 0089  
                       _updateArmState 5482                      _f_can_distributed 0133  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 4FFA                        ___lwmod@counter 008B  
                    _updateServoStates 3A78                          printRTC@month 00BE  
                        ?_Distribution 0001                     ?_updateServoStates 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                       _f_arm_position 00EA                    ??_updateServoStates 0009  
                   i2printRTC@INT_time 002D  
