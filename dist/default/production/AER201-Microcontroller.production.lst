

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Apr 05 17:49:52 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    75                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   113                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   114                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   115  0000                     
   116                           ; Version 1.40
   117                           ; Generated 01/12/2016 GMT
   118                           ; 
   119                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   120                           ; All rights reserved.
   121                           ; 
   122                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   123                           ; 
   124                           ; Redistribution and use in source and binary forms, with or without modification, are
   125                           ; permitted provided that the following conditions are met:
   126                           ; 
   127                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   128                           ;        conditions and the following disclaimer.
   129                           ; 
   130                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   131                           ;        of conditions and the following disclaimer in the documentation and/or other
   132                           ;        materials provided with the distribution.
   133                           ; 
   134                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   135                           ;        software without specific prior written permission.
   136                           ; 
   137                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   138                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   139                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   140                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   141                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   142                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   143                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   144                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   145                           ; 
   146                           ; 
   147                           ; Code-generator required, PIC18F4620 Definitions
   148                           ; 
   149                           ; SFR Addresses
   150  0000                     
   151                           	psect	idataBANK1
   152  00542C                     __pidataBANK1:
   153                           	opt stack 0
   154                           
   155                           ;initializer for UI@F3235
   156  00542C  4D                 	db	77
   157  00542D  4D                 	db	77
   158  00542E  4D                 	db	77
   159  00542F  00                 	db	0
   160                           
   161                           ;initializer for printRTC@F3226
   162  005430  4D                 	db	77
   163  005431  4D                 	db	77
   164  005432  4D                 	db	77
   165  005433  00                 	db	0
   166                           
   167                           	psect	mediumconst
   168  00FADC                     __pmediumconst:
   169                           	opt stack 0
   170  00FADC  00                 	db	0
   171  00FADD                     _keys:
   172                           	opt stack 0
   173  00FADD  31                 	db	49
   174  00FADE  32                 	db	50
   175  00FADF  33                 	db	51
   176  00FAE0  41                 	db	65
   177  00FAE1  34                 	db	52
   178  00FAE2  35                 	db	53
   179  00FAE3  36                 	db	54
   180  00FAE4  42                 	db	66
   181  00FAE5  37                 	db	55
   182  00FAE6  38                 	db	56
   183  00FAE7  39                 	db	57
   184  00FAE8  43                 	db	67
   185  00FAE9  2A                 	db	42
   186  00FAEA  30                 	db	48
   187  00FAEB  23                 	db	35
   188  00FAEC  44                 	db	68
   189  00FAED  00                 	db	0
   190  00FAEE                     __end_of_keys:
   191                           	opt stack 0
   192  00FAEE                     _dpowers:
   193                           	opt stack 0
   194  00FAEE  0001               	dw	1
   195  00FAF0  000A               	dw	10
   196  00FAF2  0064               	dw	100
   197  00FAF4  03E8               	dw	1000
   198  00FAF6  2710               	dw	10000
   199  00FAF8                     __end_of_dpowers:
   200                           	opt stack 0
   201  0000                     _ADCON0	set	4034
   202  0000                     _ADCON0bits	set	4034
   203  0000                     _ADCON1	set	4033
   204  0000                     _ADCON2	set	4032
   205  0000                     _ADRESH	set	4036
   206  0000                     _ADRESL	set	4035
   207  0000                     _CMCONbits	set	4020
   208  0000                     _CVRCON	set	4021
   209  0000                     _EEADR	set	4009
   210  0000                     _EEADRH	set	4010
   211  0000                     _EECON1bits	set	4006
   212  0000                     _EECON2	set	4007
   213  0000                     _EEDATA	set	4008
   214  0000                     _INTCONbits	set	4082
   215  0000                     _LATA	set	3977
   216  0000                     _LATAbits	set	3977
   217  0000                     _LATB	set	3978
   218  0000                     _LATBbits	set	3978
   219  0000                     _LATC	set	3979
   220  0000                     _LATCbits	set	3979
   221  0000                     _LATD	set	3980
   222  0000                     _LATDbits	set	3980
   223  0000                     _LATE	set	3981
   224  0000                     _LATEbits	set	3981
   225  0000                     _OSCCON	set	4051
   226  0000                     _OSCTUNEbits	set	3995
   227  0000                     _PIR2bits	set	4001
   228  0000                     _PORTAbits	set	3968
   229  0000                     _PORTB	set	3969
   230  0000                     _PORTBbits	set	3969
   231  0000                     _SSPADD	set	4040
   232  0000                     _SSPBUF	set	4041
   233  0000                     _SSPCON1	set	4038
   234  0000                     _SSPCON2	set	4037
   235  0000                     _SSPSTAT	set	4039
   236  0000                     _T0CON	set	4053
   237  0000                     _T1CON	set	4045
   238  0000                     _T2CON	set	4042
   239  0000                     _T3CON	set	4017
   240  0000                     _TMR0H	set	4055
   241  0000                     _TMR0L	set	4054
   242  0000                     _TMR1H	set	4047
   243  0000                     _TMR1L	set	4046
   244  0000                     _TMR3H	set	4019
   245  0000                     _TMR3L	set	4018
   246  0000                     _TRISA	set	3986
   247  0000                     _TRISB	set	3987
   248  0000                     _TRISC	set	3988
   249  0000                     _TRISD	set	3989
   250  0000                     _TRISE	set	3990
   251  0000                     _ACKDT	set	32301
   252  0000                     _ACKEN	set	32300
   253  0000                     _ADIE	set	31982
   254  0000                     _INT1IE	set	32643
   255  0000                     _INT1IF	set	32640
   256  0000                     _PEIE	set	32662
   257  0000                     _PEN	set	32298
   258  0000                     _RCEN	set	32299
   259  0000                     _RSEN	set	32297
   260  0000                     _SEN	set	32296
   261  0000                     _TMR0IE	set	32661
   262  0000                     _TMR0IF	set	32658
   263  0000                     _TMR0ON	set	32431
   264  0000                     _TMR1IE	set	31976
   265  0000                     _TMR1IF	set	31984
   266  0000                     _TMR1ON	set	32360
   267  0000                     _TMR2IE	set	31977
   268  0000                     _TMR3IE	set	32001
   269  0000                     _TMR3IF	set	32009
   270  0000                     _TMR3ON	set	32136
   271  0000                     _TRISC3	set	31907
   272  0000                     _TRISC4	set	31908
   273  0000                     _nRBPU	set	32655
   274  00FAF8                     STR_21:
   275  00FAF8  25                 	db	37
   276  00FAF9  30                 	db	48	;'0'
   277  00FAFA  32                 	db	50	;'2'
   278  00FAFB  64                 	db	100	;'d'
   279  00FAFC  25                 	db	37
   280  00FAFD  73                 	db	115	;'s'
   281  00FAFE  20                 	db	32
   282  00FAFF  7C                 	db	124
   283  00FB00  20                 	db	32
   284  00FB01  25                 	db	37
   285  00FB02  30                 	db	48	;'0'
   286  00FB03  32                 	db	50	;'2'
   287  00FB04  64                 	db	100	;'d'
   288  00FB05  3A                 	db	58	;':'
   289  00FB06  25                 	db	37
   290  00FB07  30                 	db	48	;'0'
   291  00FB08  32                 	db	50	;'2'
   292  00FB09  64                 	db	100	;'d'
   293  00FB0A  3A                 	db	58	;':'
   294  00FB0B  25                 	db	37
   295  00FB0C  30                 	db	48	;'0'
   296  00FB0D  32                 	db	50	;'2'
   297  00FB0E  64                 	db	100	;'d'
   298  00FB0F  00                 	db	0
   299  00FB10                     STR_66:
   300  00FB10  28                 	db	40
   301  00FB11  64                 	db	100	;'d'
   302  00FB12  61                 	db	97	;'a'
   303  00FB13  74                 	db	116	;'t'
   304  00FB14  61                 	db	97	;'a'
   305  00FB15  3A                 	db	58	;':'
   306  00FB16  20                 	db	32
   307  00FB17  25                 	db	37
   308  00FB18  75                 	db	117	;'u'
   309  00FB19  2C                 	db	44
   310  00FB1A  20                 	db	32
   311  00FB1B  61                 	db	97	;'a'
   312  00FB1C  64                 	db	100	;'d'
   313  00FB1D  64                 	db	100	;'d'
   314  00FB1E  72                 	db	114	;'r'
   315  00FB1F  3A                 	db	58	;':'
   316  00FB20  20                 	db	32
   317  00FB21  25                 	db	37
   318  00FB22  75                 	db	117	;'u'
   319  00FB23  29                 	db	41
   320  00FB24  00                 	db	0
   321  00FB25                     STR_111:
   322  00FB25  44                 	db	68	;'D'
   323  00FB26  20                 	db	32
   324  00FB27  57                 	db	87	;'W'
   325  00FB28  49                 	db	73	;'I'
   326  00FB29  4C                 	db	76	;'L'
   327  00FB2A  4C                 	db	76	;'L'
   328  00FB2B  20                 	db	32
   329  00FB2C  52                 	db	82	;'R'
   330  00FB2D  45                 	db	69	;'E'
   331  00FB2E  54                 	db	84	;'T'
   332  00FB2F  55                 	db	85	;'U'
   333  00FB30  52                 	db	82	;'R'
   334  00FB31  4E                 	db	78	;'N'
   335  00FB32  20                 	db	32
   336  00FB33  20                 	db	32
   337  00FB34  20                 	db	32
   338  00FB35  20                 	db	32
   339  00FB36  00                 	db	0
   340  00FB37                     STR_112:
   341  00FB37  4F                 	db	79	;'O'
   342  00FB38  54                 	db	84	;'T'
   343  00FB39  48                 	db	72	;'H'
   344  00FB3A  45                 	db	69	;'E'
   345  00FB3B  52                 	db	82	;'R'
   346  00FB3C  20                 	db	32
   347  00FB3D  53                 	db	83	;'S'
   348  00FB3E  45                 	db	69	;'E'
   349  00FB3F  54                 	db	84	;'T'
   350  00FB40  53                 	db	83	;'S'
   351  00FB41  20                 	db	32
   352  00FB42  52                 	db	82	;'R'
   353  00FB43  41                 	db	65	;'A'
   354  00FB44  35                 	db	53	;'5'
   355  00FB45  20                 	db	32
   356  00FB46  20                 	db	32
   357  00FB47  20                 	db	32
   358  00FB48  00                 	db	0
   359  00FB49                     STR_120:
   360  00FB49  53                 	db	83	;'S'
   361  00FB4A  3A                 	db	58	;':'
   362  00FB4B  20                 	db	32
   363  00FB4C  44                 	db	68	;'D'
   364  00FB4D  20                 	db	32
   365  00FB4E  57                 	db	87	;'W'
   366  00FB4F  49                 	db	73	;'I'
   367  00FB50  4C                 	db	76	;'L'
   368  00FB51  4C                 	db	76	;'L'
   369  00FB52  20                 	db	32
   370  00FB53  52                 	db	82	;'R'
   371  00FB54  45                 	db	69	;'E'
   372  00FB55  54                 	db	84	;'T'
   373  00FB56  55                 	db	85	;'U'
   374  00FB57  52                 	db	82	;'R'
   375  00FB58  4E                 	db	78	;'N'
   376  00FB59  20                 	db	32
   377  00FB5A  00                 	db	0
   378  00FB5B                     STR_123:
   379  00FB5B  4F                 	db	79	;'O'
   380  00FB5C  54                 	db	84	;'T'
   381  00FB5D  48                 	db	72	;'H'
   382  00FB5E  45                 	db	69	;'E'
   383  00FB5F  52                 	db	82	;'R'
   384  00FB60  3A                 	db	58	;':'
   385  00FB61  20                 	db	32
   386  00FB62  43                 	db	67	;'C'
   387  00FB63  41                 	db	65	;'A'
   388  00FB64  4D                 	db	77	;'M'
   389  00FB65  20                 	db	32
   390  00FB66  54                 	db	84	;'T'
   391  00FB67  4F                 	db	79	;'O'
   392  00FB68  47                 	db	71	;'G'
   393  00FB69  47                 	db	71	;'G'
   394  00FB6A  4C                 	db	76	;'L'
   395  00FB6B  45                 	db	69	;'E'
   396  00FB6C  00                 	db	0
   397  00FB6D                     STR_122:
   398  00FB6D  44                 	db	68	;'D'
   399  00FB6E  3A                 	db	58	;':'
   400  00FB6F  20                 	db	32
   401  00FB70  52                 	db	82	;'R'
   402  00FB71  45                 	db	69	;'E'
   403  00FB72  54                 	db	84	;'T'
   404  00FB73  7C                 	db	124
   405  00FB74  32                 	db	50	;'2'
   406  00FB75  3A                 	db	58	;':'
   407  00FB76  20                 	db	32
   408  00FB77  43                 	db	67	;'C'
   409  00FB78  4F                 	db	79	;'O'
   410  00FB79  4E                 	db	78	;'N'
   411  00FB7A  44                 	db	68	;'D'
   412  00FB7B  20                 	db	32
   413  00FB7C  25                 	db	37
   414  00FB7D  64                 	db	100	;'d'
   415  00FB7E  00                 	db	0
   416  00FB7F                     STR_3:
   417  00FB7F  2D                 	db	45
   418  00FB80  2D                 	db	45
   419  00FB81  20                 	db	32
   420  00FB82  4C                 	db	76	;'L'
   421  00FB83  4F                 	db	79	;'O'
   422  00FB84  47                 	db	71	;'G'
   423  00FB85  20                 	db	32
   424  00FB86  25                 	db	37
   425  00FB87  32                 	db	50	;'2'
   426  00FB88  64                 	db	100	;'d'
   427  00FB89  20                 	db	32
   428  00FB8A  48                 	db	72	;'H'
   429  00FB8B  45                 	db	69	;'E'
   430  00FB8C  52                 	db	82	;'R'
   431  00FB8D  45                 	db	69	;'E'
   432  00FB8E  2D                 	db	45
   433  00FB8F  2D                 	db	45
   434  00FB90  00                 	db	0
   435  00FB91                     STR_1:
   436  00FB91  52                 	db	82	;'R'
   437  00FB92  45                 	db	69	;'E'
   438  00FB93  53                 	db	83	;'S'
   439  00FB94  55                 	db	85	;'U'
   440  00FB95  4C                 	db	76	;'L'
   441  00FB96  54                 	db	84	;'T'
   442  00FB97  53                 	db	83	;'S'
   443  00FB98  20                 	db	32
   444  00FB99  49                 	db	73	;'I'
   445  00FB9A  4E                 	db	78	;'N'
   446  00FB9B  20                 	db	32
   447  00FB9C  4C                 	db	76	;'L'
   448  00FB9D  4F                 	db	79	;'O'
   449  00FB9E  47                 	db	71	;'G'
   450  00FB9F  20                 	db	32
   451  00FBA0  25                 	db	37
   452  00FBA1  64                 	db	100	;'d'
   453  00FBA2  00                 	db	0
   454  00FBA3                     STR_102:
   455  00FBA3  4D                 	db	77	;'M'
   456  00FBA4  49                 	db	73	;'I'
   457  00FBA5  44                 	db	68	;'D'
   458  00FBA6  20                 	db	32
   459  00FBA7  2D                 	db	45
   460  00FBA8  2D                 	db	45
   461  00FBA9  20                 	db	32
   462  00FBAA  32                 	db	50	;'2'
   463  00FBAB  73                 	db	115	;'s'
   464  00FBAC  20                 	db	32
   465  00FBAD  20                 	db	32
   466  00FBAE  20                 	db	32
   467  00FBAF  20                 	db	32
   468  00FBB0  20                 	db	32
   469  00FBB1  20                 	db	32
   470  00FBB2  20                 	db	32
   471  00FBB3  00                 	db	0
   472  00FBB4                     STR_105:
   473  00FBB4  44                 	db	68	;'D'
   474  00FBB5  52                 	db	82	;'R'
   475  00FBB6  4F                 	db	79	;'O'
   476  00FBB7  50                 	db	80	;'P'
   477  00FBB8  20                 	db	32
   478  00FBB9  2D                 	db	45
   479  00FBBA  2D                 	db	45
   480  00FBBB  20                 	db	32
   481  00FBBC  32                 	db	50	;'2'
   482  00FBBD  73                 	db	115	;'s'
   483  00FBBE  20                 	db	32
   484  00FBBF  20                 	db	32
   485  00FBC0  20                 	db	32
   486  00FBC1  20                 	db	32
   487  00FBC2  20                 	db	32
   488  00FBC3  20                 	db	32
   489  00FBC4  00                 	db	0
   490  00FBC5                     STR_99:
   491  00FBC5  4C                 	db	76	;'L'
   492  00FBC6  45                 	db	69	;'E'
   493  00FBC7  46                 	db	70	;'F'
   494  00FBC8  54                 	db	84	;'T'
   495  00FBC9  20                 	db	32
   496  00FBCA  2D                 	db	45
   497  00FBCB  2D                 	db	45
   498  00FBCC  20                 	db	32
   499  00FBCD  32                 	db	50	;'2'
   500  00FBCE  73                 	db	115	;'s'
   501  00FBCF  20                 	db	32
   502  00FBD0  20                 	db	32
   503  00FBD1  20                 	db	32
   504  00FBD2  20                 	db	32
   505  00FBD3  20                 	db	32
   506  00FBD4  20                 	db	32
   507  00FBD5  00                 	db	0
   508  00FBD6                     STR_104:
   509  00FBD6  4C                 	db	76	;'L'
   510  00FBD7  45                 	db	69	;'E'
   511  00FBD8  56                 	db	86	;'V'
   512  00FBD9  45                 	db	69	;'E'
   513  00FBDA  4C                 	db	76	;'L'
   514  00FBDB  20                 	db	32
   515  00FBDC  2D                 	db	45
   516  00FBDD  2D                 	db	45
   517  00FBDE  20                 	db	32
   518  00FBDF  32                 	db	50	;'2'
   519  00FBE0  73                 	db	115	;'s'
   520  00FBE1  20                 	db	32
   521  00FBE2  20                 	db	32
   522  00FBE3  20                 	db	32
   523  00FBE4  20                 	db	32
   524  00FBE5  20                 	db	32
   525  00FBE6  00                 	db	0
   526  00FBE7                     STR_98:
   527  00FBE7  52                 	db	82	;'R'
   528  00FBE8  49                 	db	73	;'I'
   529  00FBE9  47                 	db	71	;'G'
   530  00FBEA  48                 	db	72	;'H'
   531  00FBEB  54                 	db	84	;'T'
   532  00FBEC  20                 	db	32
   533  00FBED  2D                 	db	45
   534  00FBEE  2D                 	db	45
   535  00FBEF  20                 	db	32
   536  00FBF0  32                 	db	50	;'2'
   537  00FBF1  73                 	db	115	;'s'
   538  00FBF2  20                 	db	32
   539  00FBF3  20                 	db	32
   540  00FBF4  20                 	db	32
   541  00FBF5  20                 	db	32
   542  00FBF6  20                 	db	32
   543  00FBF7  00                 	db	0
   544  00FBF8                     STR_97:
   545  00FBF8  4D                 	db	77	;'M'
   546  00FBF9  49                 	db	73	;'I'
   547  00FBFA  44                 	db	68	;'D'
   548  00FBFB  44                 	db	68	;'D'
   549  00FBFC  4C                 	db	76	;'L'
   550  00FBFD  45                 	db	69	;'E'
   551  00FBFE  20                 	db	32
   552  00FBFF  2D                 	db	45
   553  00FC00  2D                 	db	45
   554  00FC01  20                 	db	32
   555  00FC02  32                 	db	50	;'2'
   556  00FC03  73                 	db	115	;'s'
   557  00FC04  20                 	db	32
   558  00FC05  20                 	db	32
   559  00FC06  20                 	db	32
   560  00FC07  20                 	db	32
   561  00FC08  00                 	db	0
   562  00FC09                     STR_118:
   563  00FC09  44                 	db	68	;'D'
   564  00FC0A  20                 	db	32
   565  00FC0B  57                 	db	87	;'W'
   566  00FC0C  49                 	db	73	;'I'
   567  00FC0D  4C                 	db	76	;'L'
   568  00FC0E  4C                 	db	76	;'L'
   569  00FC0F  20                 	db	32
   570  00FC10  52                 	db	82	;'R'
   571  00FC11  45                 	db	69	;'E'
   572  00FC12  54                 	db	84	;'T'
   573  00FC13  55                 	db	85	;'U'
   574  00FC14  52                 	db	82	;'R'
   575  00FC15  4E                 	db	78	;'N'
   576  00FC16  20                 	db	32
   577  00FC17  20                 	db	32
   578  00FC18  20                 	db	32
   579  00FC19  00                 	db	0
   580  00FC1A                     STR_100:
   581  00FC1A  4D                 	db	77	;'M'
   582  00FC1B  49                 	db	73	;'I'
   583  00FC1C  44                 	db	68	;'D'
   584  00FC1D  2D                 	db	45
   585  00FC1E  4C                 	db	76	;'L'
   586  00FC1F  45                 	db	69	;'E'
   587  00FC20  46                 	db	70	;'F'
   588  00FC21  54                 	db	84	;'T'
   589  00FC22  20                 	db	32
   590  00FC23  2D                 	db	45
   591  00FC24  2D                 	db	45
   592  00FC25  20                 	db	32
   593  00FC26  32                 	db	50	;'2'
   594  00FC27  73                 	db	115	;'s'
   595  00FC28  20                 	db	32
   596  00FC29  20                 	db	32
   597  00FC2A  00                 	db	0
   598  00FC2B                     STR_101:
   599  00FC2B  4D                 	db	77	;'M'
   600  00FC2C  49                 	db	73	;'I'
   601  00FC2D  44                 	db	68	;'D'
   602  00FC2E  2D                 	db	45
   603  00FC2F  52                 	db	82	;'R'
   604  00FC30  49                 	db	73	;'I'
   605  00FC31  47                 	db	71	;'G'
   606  00FC32  48                 	db	72	;'H'
   607  00FC33  54                 	db	84	;'T'
   608  00FC34  20                 	db	32
   609  00FC35  2D                 	db	45
   610  00FC36  2D                 	db	45
   611  00FC37  20                 	db	32
   612  00FC38  32                 	db	50	;'2'
   613  00FC39  73                 	db	115	;'s'
   614  00FC3A  20                 	db	32
   615  00FC3B  00                 	db	0
   616  00FC3C  45                 	db	69	;'E'
   617  00FC3D  4C                 	db	76	;'L'
   618  00FC3E  53                 	db	83	;'S'
   619  00FC3F  45                 	db	69	;'E'
   620  00FC40  20                 	db	32
   621  00FC41  54                 	db	84	;'T'
   622  00FC42  4F                 	db	79	;'O'
   623  00FC43  47                 	db	71	;'G'
   624  00FC44  47                 	db	71	;'G'
   625  00FC45  4C                 	db	76	;'L'
   626  00FC46  45                 	db	69	;'E'
   627  00FC47  53                 	db	83	;'S'
   628  00FC48  20                 	db	32
   629  00FC49  52                 	db	82	;'R'
   630  00FC4A  41                 	db	65	;'A'
   631  00FC4B  35                 	db	53	;'5'
   632  00FC4C  00                 	db	0
   633  00FC4D                     STR_72:
   634  00FC4D  41                 	db	65	;'A'
   635  00FC4E  4C                 	db	76	;'L'
   636  00FC4F  47                 	db	71	;'G'
   637  00FC50  31                 	db	49	;'1'
   638  00FC51  3A                 	db	58	;':'
   639  00FC52  20                 	db	32
   640  00FC53  39                 	db	57	;'9'
   641  00FC54  20                 	db	32
   642  00FC55  50                 	db	80	;'P'
   643  00FC56  4F                 	db	79	;'O'
   644  00FC57  50                 	db	80	;'P'
   645  00FC58  4E                 	db	78	;'N'
   646  00FC59  4F                 	db	79	;'O'
   647  00FC5A  54                 	db	84	;'T'
   648  00FC5B  41                 	db	65	;'A'
   649  00FC5C  42                 	db	66	;'B'
   650  00FC5D  00                 	db	0
   651  00FC5E                     STR_92:
   652  00FC5E  54                 	db	84	;'T'
   653  00FC5F  53                 	db	83	;'S'
   654  00FC60  54                 	db	84	;'T'
   655  00FC61  3A                 	db	58	;':'
   656  00FC62  20                 	db	32
   657  00FC63  43                 	db	67	;'C'
   658  00FC64  4F                 	db	79	;'O'
   659  00FC65  4E                 	db	78	;'N'
   660  00FC66  44                 	db	68	;'D'
   661  00FC67  20                 	db	32
   662  00FC68  53                 	db	83	;'S'
   663  00FC69  4F                 	db	79	;'O'
   664  00FC6A  4C                 	db	76	;'L'
   665  00FC6B  4E                 	db	78	;'N'
   666  00FC6C  27                 	db	39
   667  00FC6D  44                 	db	68	;'D'
   668  00FC6E  00                 	db	0
   669  00FC6F                     STR_94:
   670  00FC6F  54                 	db	84	;'T'
   671  00FC70  53                 	db	83	;'S'
   672  00FC71  54                 	db	84	;'T'
   673  00FC72  3A                 	db	58	;':'
   674  00FC73  20                 	db	32
   675  00FC74  50                 	db	80	;'P'
   676  00FC75  55                 	db	85	;'U'
   677  00FC76  53                 	db	83	;'S'
   678  00FC77  48                 	db	72	;'H'
   679  00FC78  20                 	db	32
   680  00FC79  53                 	db	83	;'S'
   681  00FC7A  4F                 	db	79	;'O'
   682  00FC7B  4C                 	db	76	;'L'
   683  00FC7C  4E                 	db	78	;'N'
   684  00FC7D  27                 	db	39
   685  00FC7E  44                 	db	68	;'D'
   686  00FC7F  00                 	db	0
   687  00FC80                     STR_68:
   688  00FC80  32                 	db	50	;'2'
   689  00FC81  2E                 	db	46
   690  00FC82  53                 	db	83	;'S'
   691  00FC83  4E                 	db	78	;'N'
   692  00FC84  52                 	db	82	;'R'
   693  00FC85  7C                 	db	124
   694  00FC86  34                 	db	52	;'4'
   695  00FC87  2E                 	db	46
   696  00FC88  48                 	db	72	;'H'
   697  00FC89  49                 	db	73	;'I'
   698  00FC8A  7C                 	db	124
   699  00FC8B  35                 	db	53	;'5'
   700  00FC8C  2E                 	db	46
   701  00FC8D  4D                 	db	77	;'M'
   702  00FC8E  45                 	db	69	;'E'
   703  00FC8F  44                 	db	68	;'D'
   704  00FC90  00                 	db	0
   705  00FC91                     STR_69:
   706  00FC91  42                 	db	66	;'B'
   707  00FC92  2E                 	db	46
   708  00FC93  50                 	db	80	;'P'
   709  00FC94  53                 	db	83	;'S'
   710  00FC95  48                 	db	72	;'H'
   711  00FC96  7C                 	db	124
   712  00FC97  38                 	db	56	;'8'
   713  00FC98  2E                 	db	46
   714  00FC99  53                 	db	83	;'S'
   715  00FC9A  56                 	db	86	;'V'
   716  00FC9B  7C                 	db	124
   717  00FC9C  39                 	db	57	;'9'
   718  00FC9D  2E                 	db	46
   719  00FC9E  42                 	db	66	;'B'
   720  00FC9F  4C                 	db	76	;'L'
   721  00FCA0  4B                 	db	75	;'K'
   722  00FCA1  00                 	db	0
   723  00FCA2                     STR_127:
   724  00FCA2  45                 	db	69	;'E'
   725  00FCA3  4C                 	db	76	;'L'
   726  00FCA4  53                 	db	83	;'S'
   727  00FCA5  45                 	db	69	;'E'
   728  00FCA6  20                 	db	32
   729  00FCA7  54                 	db	84	;'T'
   730  00FCA8  4F                 	db	79	;'O'
   731  00FCA9  47                 	db	71	;'G'
   732  00FCAA  47                 	db	71	;'G'
   733  00FCAB  4C                 	db	76	;'L'
   734  00FCAC  45                 	db	69	;'E'
   735  00FCAD  53                 	db	83	;'S'
   736  00FCAE  20                 	db	32
   737  00FCAF  41                 	db	65	;'A'
   738  00FCB0  52                 	db	82	;'R'
   739  00FCB1  4D                 	db	77	;'M'
   740  00FCB2  00                 	db	0
   741  00FCB3                     STR_110:
   742  00FCB3  54                 	db	84	;'T'
   743  00FCB4  53                 	db	83	;'S'
   744  00FCB5  54                 	db	84	;'T'
   745  00FCB6  3A                 	db	58	;':'
   746  00FCB7  20                 	db	32
   747  00FCB8  42                 	db	66	;'B'
   748  00FCB9  4F                 	db	79	;'O'
   749  00FCBA  54                 	db	84	;'T'
   750  00FCBB  48                 	db	72	;'H'
   751  00FCBC  20                 	db	32
   752  00FCBD  53                 	db	83	;'S'
   753  00FCBE  45                 	db	69	;'E'
   754  00FCBF  52                 	db	82	;'R'
   755  00FCC0  56                 	db	86	;'V'
   756  00FCC1  4F                 	db	79	;'O'
   757  00FCC2  53                 	db	83	;'S'
   758  00FCC3  00                 	db	0
   759  00FCC4                     STR_41:
   760  00FCC4  4C                 	db	76	;'L'
   761  00FCC5  4F                 	db	79	;'O'
   762  00FCC6  47                 	db	71	;'G'
   763  00FCC7  20                 	db	32
   764  00FCC8  31                 	db	49	;'1'
   765  00FCC9  20                 	db	32
   766  00FCCA  20                 	db	32
   767  00FCCB  20                 	db	32
   768  00FCCC  20                 	db	32
   769  00FCCD  20                 	db	32
   770  00FCCE  20                 	db	32
   771  00FCCF  20                 	db	32
   772  00FCD0  20                 	db	32
   773  00FCD1  20                 	db	32
   774  00FCD2  20                 	db	32
   775  00FCD3  20                 	db	32
   776  00FCD4  00                 	db	0
   777  00FCD5                     STR_40:
   778  00FCD5  4C                 	db	76	;'L'
   779  00FCD6  4F                 	db	79	;'O'
   780  00FCD7  47                 	db	71	;'G'
   781  00FCD8  20                 	db	32
   782  00FCD9  32                 	db	50	;'2'
   783  00FCDA  20                 	db	32
   784  00FCDB  20                 	db	32
   785  00FCDC  20                 	db	32
   786  00FCDD  20                 	db	32
   787  00FCDE  20                 	db	32
   788  00FCDF  20                 	db	32
   789  00FCE0  20                 	db	32
   790  00FCE1  20                 	db	32
   791  00FCE2  20                 	db	32
   792  00FCE3  20                 	db	32
   793  00FCE4  20                 	db	32
   794  00FCE5  00                 	db	0
   795  00FCE6                     STR_44:
   796  00FCE6  4C                 	db	76	;'L'
   797  00FCE7  4F                 	db	79	;'O'
   798  00FCE8  47                 	db	71	;'G'
   799  00FCE9  20                 	db	32
   800  00FCEA  33                 	db	51	;'3'
   801  00FCEB  20                 	db	32
   802  00FCEC  20                 	db	32
   803  00FCED  20                 	db	32
   804  00FCEE  20                 	db	32
   805  00FCEF  20                 	db	32
   806  00FCF0  20                 	db	32
   807  00FCF1  20                 	db	32
   808  00FCF2  20                 	db	32
   809  00FCF3  20                 	db	32
   810  00FCF4  20                 	db	32
   811  00FCF5  20                 	db	32
   812  00FCF6  00                 	db	0
   813  00FCF7                     STR_48:
   814  00FCF7  4C                 	db	76	;'L'
   815  00FCF8  4F                 	db	79	;'O'
   816  00FCF9  47                 	db	71	;'G'
   817  00FCFA  20                 	db	32
   818  00FCFB  34                 	db	52	;'4'
   819  00FCFC  20                 	db	32
   820  00FCFD  20                 	db	32
   821  00FCFE  20                 	db	32
   822  00FCFF  20                 	db	32
   823  00FD00  20                 	db	32
   824  00FD01  20                 	db	32
   825  00FD02  20                 	db	32
   826  00FD03  20                 	db	32
   827  00FD04  20                 	db	32
   828  00FD05  20                 	db	32
   829  00FD06  20                 	db	32
   830  00FD07  00                 	db	0
   831  00FD08                     STR_36:
   832  00FD08  33                 	db	51	;'3'
   833  00FD09  2E                 	db	46
   834  00FD0A  20                 	db	32
   835  00FD0B  4C                 	db	76	;'L'
   836  00FD0C  4F                 	db	79	;'O'
   837  00FD0D  47                 	db	71	;'G'
   838  00FD0E  53                 	db	83	;'S'
   839  00FD0F  20                 	db	32
   840  00FD10  20                 	db	32
   841  00FD11  20                 	db	32
   842  00FD12  20                 	db	32
   843  00FD13  20                 	db	32
   844  00FD14  20                 	db	32
   845  00FD15  20                 	db	32
   846  00FD16  20                 	db	32
   847  00FD17  20                 	db	32
   848  00FD18  00                 	db	0
   849  00FD19                     STR_32:
   850  00FD19  32                 	db	50	;'2'
   851  00FD1A  2E                 	db	46
   852  00FD1B  20                 	db	32
   853  00FD1C  53                 	db	83	;'S'
   854  00FD1D  4F                 	db	79	;'O'
   855  00FD1E  52                 	db	82	;'R'
   856  00FD1F  54                 	db	84	;'T'
   857  00FD20  20                 	db	32
   858  00FD21  20                 	db	32
   859  00FD22  20                 	db	32
   860  00FD23  20                 	db	32
   861  00FD24  20                 	db	32
   862  00FD25  20                 	db	32
   863  00FD26  20                 	db	32
   864  00FD27  20                 	db	32
   865  00FD28  20                 	db	32
   866  00FD29  00                 	db	0
   867  00FD2A                     STR_33:
   868  00FD2A  31                 	db	49	;'1'
   869  00FD2B  2E                 	db	46
   870  00FD2C  20                 	db	32
   871  00FD2D  44                 	db	68	;'D'
   872  00FD2E  41                 	db	65	;'A'
   873  00FD2F  54                 	db	84	;'T'
   874  00FD30  45                 	db	69	;'E'
   875  00FD31  2F                 	db	47
   876  00FD32  54                 	db	84	;'T'
   877  00FD33  49                 	db	73	;'I'
   878  00FD34  4D                 	db	77	;'M'
   879  00FD35  45                 	db	69	;'E'
   880  00FD36  20                 	db	32
   881  00FD37  20                 	db	32
   882  00FD38  20                 	db	32
   883  00FD39  20                 	db	32
   884  00FD3A  00                 	db	0
   885  00FD3B                     STR_24:
   886  00FD3B  20                 	db	32
   887  00FD3C  2D                 	db	45
   888  00FD3D  2D                 	db	45
   889  00FD3E  20                 	db	32
   890  00FD3F  50                 	db	80	;'P'
   891  00FD40  4F                 	db	79	;'O'
   892  00FD41  50                 	db	80	;'P'
   893  00FD42  20                 	db	32
   894  00FD43  20                 	db	32
   895  00FD44  43                 	db	67	;'C'
   896  00FD45  41                 	db	65	;'A'
   897  00FD46  4E                 	db	78	;'N'
   898  00FD47  20                 	db	32
   899  00FD48  2D                 	db	45
   900  00FD49  2D                 	db	45
   901  00FD4A  20                 	db	32
   902  00FD4B  00                 	db	0
   903  00FD4C                     STR_26:
   904  00FD4C  20                 	db	32
   905  00FD4D  2D                 	db	45
   906  00FD4E  2D                 	db	45
   907  00FD4F  20                 	db	32
   908  00FD50  53                 	db	83	;'S'
   909  00FD51  4F                 	db	79	;'O'
   910  00FD52  55                 	db	85	;'U'
   911  00FD53  50                 	db	80	;'P'
   912  00FD54  20                 	db	32
   913  00FD55  43                 	db	67	;'C'
   914  00FD56  41                 	db	65	;'A'
   915  00FD57  4E                 	db	78	;'N'
   916  00FD58  20                 	db	32
   917  00FD59  2D                 	db	45
   918  00FD5A  2D                 	db	45
   919  00FD5B  20                 	db	32
   920  00FD5C  00                 	db	0
   921  00FD5D                     STR_28:
   922  00FD5D  2D                 	db	45
   923  00FD5E  2D                 	db	45
   924  00FD5F  20                 	db	32
   925  00FD60  54                 	db	84	;'T'
   926  00FD61  4F                 	db	79	;'O'
   927  00FD62  54                 	db	84	;'T'
   928  00FD63  41                 	db	65	;'A'
   929  00FD64  4C                 	db	76	;'L'
   930  00FD65  20                 	db	32
   931  00FD66  43                 	db	67	;'C'
   932  00FD67  41                 	db	65	;'A'
   933  00FD68  4E                 	db	78	;'N'
   934  00FD69  53                 	db	83	;'S'
   935  00FD6A  20                 	db	32
   936  00FD6B  2D                 	db	45
   937  00FD6C  2D                 	db	45
   938  00FD6D  00                 	db	0
   939  00FD6E                     STR_39:
   940  00FD6E  4C                 	db	76	;'L'
   941  00FD6F  4F                 	db	79	;'O'
   942  00FD70  47                 	db	71	;'G'
   943  00FD71  20                 	db	32
   944  00FD72  31                 	db	49	;'1'
   945  00FD73  20                 	db	32
   946  00FD74  20                 	db	32
   947  00FD75  20                 	db	32
   948  00FD76  20                 	db	32
   949  00FD77  20                 	db	32
   950  00FD78  20                 	db	32
   951  00FD79  20                 	db	32
   952  00FD7A  20                 	db	32
   953  00FD7B  20                 	db	32
   954  00FD7C  20                 	db	32
   955  00FD7D  3C                 	db	60	;'<'
   956  00FD7E  00                 	db	0
   957  00FD7F                     STR_42:
   958  00FD7F  4C                 	db	76	;'L'
   959  00FD80  4F                 	db	79	;'O'
   960  00FD81  47                 	db	71	;'G'
   961  00FD82  20                 	db	32
   962  00FD83  32                 	db	50	;'2'
   963  00FD84  20                 	db	32
   964  00FD85  20                 	db	32
   965  00FD86  20                 	db	32
   966  00FD87  20                 	db	32
   967  00FD88  20                 	db	32
   968  00FD89  20                 	db	32
   969  00FD8A  20                 	db	32
   970  00FD8B  20                 	db	32
   971  00FD8C  20                 	db	32
   972  00FD8D  20                 	db	32
   973  00FD8E  3C                 	db	60	;'<'
   974  00FD8F  00                 	db	0
   975  00FD90                     STR_46:
   976  00FD90  4C                 	db	76	;'L'
   977  00FD91  4F                 	db	79	;'O'
   978  00FD92  47                 	db	71	;'G'
   979  00FD93  20                 	db	32
   980  00FD94  33                 	db	51	;'3'
   981  00FD95  20                 	db	32
   982  00FD96  20                 	db	32
   983  00FD97  20                 	db	32
   984  00FD98  20                 	db	32
   985  00FD99  20                 	db	32
   986  00FD9A  20                 	db	32
   987  00FD9B  20                 	db	32
   988  00FD9C  20                 	db	32
   989  00FD9D  20                 	db	32
   990  00FD9E  20                 	db	32
   991  00FD9F  3C                 	db	60	;'<'
   992  00FDA0  00                 	db	0
   993  00FDA1                     STR_50:
   994  00FDA1  4C                 	db	76	;'L'
   995  00FDA2  4F                 	db	79	;'O'
   996  00FDA3  47                 	db	71	;'G'
   997  00FDA4  20                 	db	32
   998  00FDA5  34                 	db	52	;'4'
   999  00FDA6  20                 	db	32
  1000  00FDA7  20                 	db	32
  1001  00FDA8  20                 	db	32
  1002  00FDA9  20                 	db	32
  1003  00FDAA  20                 	db	32
  1004  00FDAB  20                 	db	32
  1005  00FDAC  20                 	db	32
  1006  00FDAD  20                 	db	32
  1007  00FDAE  20                 	db	32
  1008  00FDAF  20                 	db	32
  1009  00FDB0  3C                 	db	60	;'<'
  1010  00FDB1  00                 	db	0
  1011  00FDB2                     STR_38:
  1012  00FDB2  33                 	db	51	;'3'
  1013  00FDB3  2E                 	db	46
  1014  00FDB4  20                 	db	32
  1015  00FDB5  4C                 	db	76	;'L'
  1016  00FDB6  4F                 	db	79	;'O'
  1017  00FDB7  47                 	db	71	;'G'
  1018  00FDB8  53                 	db	83	;'S'
  1019  00FDB9  20                 	db	32
  1020  00FDBA  20                 	db	32
  1021  00FDBB  20                 	db	32
  1022  00FDBC  20                 	db	32
  1023  00FDBD  20                 	db	32
  1024  00FDBE  20                 	db	32
  1025  00FDBF  20                 	db	32
  1026  00FDC0  20                 	db	32
  1027  00FDC1  3C                 	db	60	;'<'
  1028  00FDC2  00                 	db	0
  1029  00FDC3                     STR_34:
  1030  00FDC3  32                 	db	50	;'2'
  1031  00FDC4  2E                 	db	46
  1032  00FDC5  20                 	db	32
  1033  00FDC6  53                 	db	83	;'S'
  1034  00FDC7  4F                 	db	79	;'O'
  1035  00FDC8  52                 	db	82	;'R'
  1036  00FDC9  54                 	db	84	;'T'
  1037  00FDCA  20                 	db	32
  1038  00FDCB  20                 	db	32
  1039  00FDCC  20                 	db	32
  1040  00FDCD  20                 	db	32
  1041  00FDCE  20                 	db	32
  1042  00FDCF  20                 	db	32
  1043  00FDD0  20                 	db	32
  1044  00FDD1  20                 	db	32
  1045  00FDD2  3C                 	db	60	;'<'
  1046  00FDD3  00                 	db	0
  1047  00FDD4                     STR_31:
  1048  00FDD4  31                 	db	49	;'1'
  1049  00FDD5  2E                 	db	46
  1050  00FDD6  20                 	db	32
  1051  00FDD7  44                 	db	68	;'D'
  1052  00FDD8  41                 	db	65	;'A'
  1053  00FDD9  54                 	db	84	;'T'
  1054  00FDDA  45                 	db	69	;'E'
  1055  00FDDB  2F                 	db	47
  1056  00FDDC  54                 	db	84	;'T'
  1057  00FDDD  49                 	db	73	;'I'
  1058  00FDDE  4D                 	db	77	;'M'
  1059  00FDDF  45                 	db	69	;'E'
  1060  00FDE0  20                 	db	32
  1061  00FDE1  20                 	db	32
  1062  00FDE2  20                 	db	32
  1063  00FDE3  3C                 	db	60	;'<'
  1064  00FDE4  00                 	db	0
  1065  00FDE5                     STR_6:
  1066  00FDE5  50                 	db	80	;'P'
  1067  00FDE6  41                 	db	65	;'A'
  1068  00FDE7  55                 	db	85	;'U'
  1069  00FDE8  53                 	db	83	;'S'
  1070  00FDE9  45                 	db	69	;'E'
  1071  00FDEA  20                 	db	32
  1072  00FDEB  3C                 	db	60	;'<'
  1073  00FDEC  20                 	db	32
  1074  00FDED  7C                 	db	124
  1075  00FDEE  20                 	db	32
  1076  00FDEF  42                 	db	66	;'B'
  1077  00FDF0  41                 	db	65	;'A'
  1078  00FDF1  43                 	db	67	;'C'
  1079  00FDF2  4B                 	db	75	;'K'
  1080  00FDF3  20                 	db	32
  1081  00FDF4  3E                 	db	62	;'>'
  1082  00FDF5  00                 	db	0
  1083  00FDF6                     STR_30:
  1084  00FDF6  50                 	db	80	;'P'
  1085  00FDF7  55                 	db	85	;'U'
  1086  00FDF8  53                 	db	83	;'S'
  1087  00FDF9  48                 	db	72	;'H'
  1088  00FDFA  20                 	db	32
  1089  00FDFB  54                 	db	84	;'T'
  1090  00FDFC  4F                 	db	79	;'O'
  1091  00FDFD  20                 	db	32
  1092  00FDFE  43                 	db	67	;'C'
  1093  00FDFF  4F                 	db	79	;'O'
  1094  00FE00  4E                 	db	78	;'N'
  1095  00FE01  54                 	db	84	;'T'
  1096  00FE02  49                 	db	73	;'I'
  1097  00FE03  4E                 	db	78	;'N'
  1098  00FE04  55                 	db	85	;'U'
  1099  00FE05  45                 	db	69	;'E'
  1100  00FE06  00                 	db	0
  1101  00FE07                     STR_27:
  1102  00FE07  4E                 	db	78	;'N'
  1103  00FE08  4C                 	db	76	;'L'
  1104  00FE09  41                 	db	65	;'A'
  1105  00FE0A  42                 	db	66	;'B'
  1106  00FE0B  3A                 	db	58	;':'
  1107  00FE0C  20                 	db	32
  1108  00FE0D  25                 	db	37
  1109  00FE0E  64                 	db	100	;'d'
  1110  00FE0F  7C                 	db	124
  1111  00FE10  4C                 	db	76	;'L'
  1112  00FE11  41                 	db	65	;'A'
  1113  00FE12  42                 	db	66	;'B'
  1114  00FE13  3A                 	db	58	;':'
  1115  00FE14  20                 	db	32
  1116  00FE15  25                 	db	37
  1117  00FE16  64                 	db	100	;'d'
  1118  00FE17  00                 	db	0
  1119  00FE18                     STR_25:
  1120  00FE18  4E                 	db	78	;'N'
  1121  00FE19  54                 	db	84	;'T'
  1122  00FE1A  41                 	db	65	;'A'
  1123  00FE1B  42                 	db	66	;'B'
  1124  00FE1C  3A                 	db	58	;':'
  1125  00FE1D  20                 	db	32
  1126  00FE1E  25                 	db	37
  1127  00FE1F  64                 	db	100	;'d'
  1128  00FE20  7C                 	db	124
  1129  00FE21  54                 	db	84	;'T'
  1130  00FE22  41                 	db	65	;'A'
  1131  00FE23  42                 	db	66	;'B'
  1132  00FE24  3A                 	db	58	;':'
  1133  00FE25  20                 	db	32
  1134  00FE26  25                 	db	37
  1135  00FE27  64                 	db	100	;'d'
  1136  00FE28  00                 	db	0
  1137  00FE29                     STR_83:
  1138  00FE29  4D                 	db	77	;'M'
  1139  00FE2A  41                 	db	65	;'A'
  1140  00FE2B  47                 	db	71	;'G'
  1141  00FE2C  5F                 	db	95	;'_'
  1142  00FE2D  73                 	db	115	;'s'
  1143  00FE2E  69                 	db	105	;'i'
  1144  00FE2F  67                 	db	103	;'g'
  1145  00FE30  6E                 	db	110	;'n'
  1146  00FE31  61                 	db	97	;'a'
  1147  00FE32  6C                 	db	108	;'l'
  1148  00FE33  3A                 	db	58	;':'
  1149  00FE34  20                 	db	32
  1150  00FE35  25                 	db	37
  1151  00FE36  64                 	db	100	;'d'
  1152  00FE37  20                 	db	32
  1153  00FE38  00                 	db	0
  1154  00FE39                     STR_103:
  1155  00FE39  54                 	db	84	;'T'
  1156  00FE3A  53                 	db	83	;'S'
  1157  00FE3B  54                 	db	84	;'T'
  1158  00FE3C  3A                 	db	58	;':'
  1159  00FE3D  20                 	db	32
  1160  00FE3E  54                 	db	84	;'T'
  1161  00FE3F  49                 	db	73	;'I'
  1162  00FE40  4C                 	db	76	;'L'
  1163  00FE41  54                 	db	84	;'T'
  1164  00FE42  20                 	db	32
  1165  00FE43  53                 	db	83	;'S'
  1166  00FE44  45                 	db	69	;'E'
  1167  00FE45  52                 	db	82	;'R'
  1168  00FE46  56                 	db	86	;'V'
  1169  00FE47  4F                 	db	79	;'O'
  1170  00FE48  00                 	db	0
  1171  00FE49                     STR_4:
  1172  00FE49  44                 	db	68	;'D'
  1173  00FE4A  49                 	db	73	;'I'
  1174  00FE4B  44                 	db	68	;'D'
  1175  00FE4C  4E                 	db	78	;'N'
  1176  00FE4D  27                 	db	39
  1177  00FE4E  54                 	db	84	;'T'
  1178  00FE4F  20                 	db	32
  1179  00FE50  43                 	db	67	;'C'
  1180  00FE51  4F                 	db	79	;'O'
  1181  00FE52  4D                 	db	77	;'M'
  1182  00FE53  50                 	db	80	;'P'
  1183  00FE54  4C                 	db	76	;'L'
  1184  00FE55  45                 	db	69	;'E'
  1185  00FE56  54                 	db	84	;'T'
  1186  00FE57  45                 	db	69	;'E'
  1187  00FE58  00                 	db	0
  1188  00FE59                     STR_80:
  1189  00FE59  49                 	db	73	;'I'
  1190  00FE5A  52                 	db	82	;'R'
  1191  00FE5B  5F                 	db	95	;'_'
  1192  00FE5C  73                 	db	115	;'s'
  1193  00FE5D  69                 	db	105	;'i'
  1194  00FE5E  67                 	db	103	;'g'
  1195  00FE5F  6E                 	db	110	;'n'
  1196  00FE60  61                 	db	97	;'a'
  1197  00FE61  6C                 	db	108	;'l'
  1198  00FE62  3A                 	db	58	;':'
  1199  00FE63  20                 	db	32
  1200  00FE64  25                 	db	37
  1201  00FE65  64                 	db	100	;'d'
  1202  00FE66  20                 	db	32
  1203  00FE67  00                 	db	0
  1204  00FE68                     STR_109:
  1205  00FE68  43                 	db	67	;'C'
  1206  00FE69  41                 	db	65	;'A'
  1207  00FE6A  4D                 	db	77	;'M'
  1208  00FE6B  20                 	db	32
  1209  00FE6C  44                 	db	68	;'D'
  1210  00FE6D  57                 	db	87	;'W'
  1211  00FE6E  4E                 	db	78	;'N'
  1212  00FE6F  20                 	db	32
  1213  00FE70  7C                 	db	124
  1214  00FE71  52                 	db	82	;'R'
  1215  00FE72  43                 	db	67	;'C'
  1216  00FE73  30                 	db	48	;'0'
  1217  00FE74  3D                 	db	61	;'='
  1218  00FE75  30                 	db	48	;'0'
  1219  00FE76  00                 	db	0
  1220  00FE77                     STR_108:
  1221  00FE77  43                 	db	67	;'C'
  1222  00FE78  41                 	db	65	;'A'
  1223  00FE79  4D                 	db	77	;'M'
  1224  00FE7A  20                 	db	32
  1225  00FE7B  55                 	db	85	;'U'
  1226  00FE7C  50                 	db	80	;'P'
  1227  00FE7D  20                 	db	32
  1228  00FE7E  20                 	db	32
  1229  00FE7F  7C                 	db	124
  1230  00FE80  52                 	db	82	;'R'
  1231  00FE81  43                 	db	67	;'C'
  1232  00FE82  30                 	db	48	;'0'
  1233  00FE83  3D                 	db	61	;'='
  1234  00FE84  31                 	db	49	;'1'
  1235  00FE85  00                 	db	0
  1236  00FE86                     STR_82:
  1237  00FE86  54                 	db	84	;'T'
  1238  00FE87  53                 	db	83	;'S'
  1239  00FE88  54                 	db	84	;'T'
  1240  00FE89  3A                 	db	58	;':'
  1241  00FE8A  20                 	db	32
  1242  00FE8B  4D                 	db	77	;'M'
  1243  00FE8C  41                 	db	65	;'A'
  1244  00FE8D  47                 	db	71	;'G'
  1245  00FE8E  4E                 	db	78	;'N'
  1246  00FE8F  45                 	db	69	;'E'
  1247  00FE90  54                 	db	84	;'T'
  1248  00FE91  49                 	db	73	;'I'
  1249  00FE92  53                 	db	83	;'S'
  1250  00FE93  4D                 	db	77	;'M'
  1251  00FE94  00                 	db	0
  1252  00FE95                     STR_107:
  1253  00FE95  54                 	db	84	;'T'
  1254  00FE96  53                 	db	83	;'S'
  1255  00FE97  54                 	db	84	;'T'
  1256  00FE98  3A                 	db	58	;':'
  1257  00FE99  20                 	db	32
  1258  00FE9A  43                 	db	67	;'C'
  1259  00FE9B  41                 	db	65	;'A'
  1260  00FE9C  4D                 	db	77	;'M'
  1261  00FE9D  20                 	db	32
  1262  00FE9E  53                 	db	83	;'S'
  1263  00FE9F  45                 	db	69	;'E'
  1264  00FEA0  52                 	db	82	;'R'
  1265  00FEA1  56                 	db	86	;'V'
  1266  00FEA2  4F                 	db	79	;'O'
  1267  00FEA3  00                 	db	0
  1268  00FEA4                     STR_96:
  1269  00FEA4  54                 	db	84	;'T'
  1270  00FEA5  53                 	db	83	;'S'
  1271  00FEA6  54                 	db	84	;'T'
  1272  00FEA7  3A                 	db	58	;':'
  1273  00FEA8  20                 	db	32
  1274  00FEA9  50                 	db	80	;'P'
  1275  00FEAA  41                 	db	65	;'A'
  1276  00FEAB  4E                 	db	78	;'N'
  1277  00FEAC  20                 	db	32
  1278  00FEAD  53                 	db	83	;'S'
  1279  00FEAE  45                 	db	69	;'E'
  1280  00FEAF  52                 	db	82	;'R'
  1281  00FEB0  56                 	db	86	;'V'
  1282  00FEB1  4F                 	db	79	;'O'
  1283  00FEB2  00                 	db	0
  1284  00FEB3                     STR_75:
  1285  00FEB3  41                 	db	65	;'A'
  1286  00FEB4  4C                 	db	76	;'L'
  1287  00FEB5  47                 	db	71	;'G'
  1288  00FEB6  34                 	db	52	;'4'
  1289  00FEB7  3A                 	db	58	;':'
  1290  00FEB8  20                 	db	32
  1291  00FEB9  41                 	db	65	;'A'
  1292  00FEBA  4C                 	db	76	;'L'
  1293  00FEBB  4C                 	db	76	;'L'
  1294  00FEBC  20                 	db	32
  1295  00FEBD  43                 	db	67	;'C'
  1296  00FEBE  41                 	db	65	;'A'
  1297  00FEBF  4E                 	db	78	;'N'
  1298  00FEC0  53                 	db	83	;'S'
  1299  00FEC1  00                 	db	0
  1300  00FEC2                     STR_90:
  1301  00FEC2  54                 	db	84	;'T'
  1302  00FEC3  53                 	db	83	;'S'
  1303  00FEC4  54                 	db	84	;'T'
  1304  00FEC5  3A                 	db	58	;':'
  1305  00FEC6  20                 	db	32
  1306  00FEC7  44                 	db	68	;'D'
  1307  00FEC8  43                 	db	67	;'C'
  1308  00FEC9  20                 	db	32
  1309  00FECA  4D                 	db	77	;'M'
  1310  00FECB  4F                 	db	79	;'O'
  1311  00FECC  54                 	db	84	;'T'
  1312  00FECD  4F                 	db	79	;'O'
  1313  00FECE  52                 	db	82	;'R'
  1314  00FECF  53                 	db	83	;'S'
  1315  00FED0  00                 	db	0
  1316  00FED1                     STR_70:
  1317  00FED1  41                 	db	65	;'A'
  1318  00FED2  4C                 	db	76	;'L'
  1319  00FED3  47                 	db	71	;'G'
  1320  00FED4  4F                 	db	79	;'O'
  1321  00FED5  52                 	db	82	;'R'
  1322  00FED6  49                 	db	73	;'I'
  1323  00FED7  54                 	db	84	;'T'
  1324  00FED8  48                 	db	72	;'H'
  1325  00FED9  4D                 	db	77	;'M'
  1326  00FEDA  20                 	db	32
  1327  00FEDB  54                 	db	84	;'T'
  1328  00FEDC  45                 	db	69	;'E'
  1329  00FEDD  53                 	db	83	;'S'
  1330  00FEDE  54                 	db	84	;'T'
  1331  00FEDF  00                 	db	0
  1332  00FEE0                     STR_91:
  1333  00FEE0  50                 	db	80	;'P'
  1334  00FEE1  49                 	db	73	;'I'
  1335  00FEE2  4E                 	db	78	;'N'
  1336  00FEE3  20                 	db	32
  1337  00FEE4  52                 	db	82	;'R'
  1338  00FEE5  41                 	db	65	;'A'
  1339  00FEE6  35                 	db	53	;'5'
  1340  00FEE7  20                 	db	32
  1341  00FEE8  48                 	db	72	;'H'
  1342  00FEE9  49                 	db	73	;'I'
  1343  00FEEA  47                 	db	71	;'G'
  1344  00FEEB  48                 	db	72	;'H'
  1345  00FEEC  2E                 	db	46
  1346  00FEED  00                 	db	0
  1347  00FEEE                     STR_73:
  1348  00FEEE  41                 	db	65	;'A'
  1349  00FEEF  4C                 	db	76	;'L'
  1350  00FEF0  47                 	db	71	;'G'
  1351  00FEF1  32                 	db	50	;'2'
  1352  00FEF2  3A                 	db	58	;':'
  1353  00FEF3  20                 	db	32
  1354  00FEF4  31                 	db	49	;'1'
  1355  00FEF5  32                 	db	50	;'2'
  1356  00FEF6  20                 	db	32
  1357  00FEF7  43                 	db	67	;'C'
  1358  00FEF8  41                 	db	65	;'A'
  1359  00FEF9  4E                 	db	78	;'N'
  1360  00FEFA  53                 	db	83	;'S'
  1361  00FEFB  00                 	db	0
  1362  00FEFC                     STR_76:
  1363  00FEFC  41                 	db	65	;'A'
  1364  00FEFD  4C                 	db	76	;'L'
  1365  00FEFE  47                 	db	71	;'G'
  1366  00FEFF  35                 	db	53	;'5'
  1367  00FF00  3A                 	db	58	;':'
  1368  00FF01  20                 	db	32
  1369  00FF02  4E                 	db	78	;'N'
  1370  00FF03  4F                 	db	79	;'O'
  1371  00FF04  20                 	db	32
  1372  00FF05  43                 	db	67	;'C'
  1373  00FF06  41                 	db	65	;'A'
  1374  00FF07  4E                 	db	78	;'N'
  1375  00FF08  53                 	db	83	;'S'
  1376  00FF09  00                 	db	0
  1377  00FF0A                     STR_71:
  1378  00FF0A  50                 	db	80	;'P'
  1379  00FF0B  55                 	db	85	;'U'
  1380  00FF0C  53                 	db	83	;'S'
  1381  00FF0D  48                 	db	72	;'H'
  1382  00FF0E  20                 	db	32
  1383  00FF0F  54                 	db	84	;'T'
  1384  00FF10  4F                 	db	79	;'O'
  1385  00FF11  20                 	db	32
  1386  00FF12  53                 	db	83	;'S'
  1387  00FF13  54                 	db	84	;'T'
  1388  00FF14  41                 	db	65	;'A'
  1389  00FF15  52                 	db	82	;'R'
  1390  00FF16  54                 	db	84	;'T'
  1391  00FF17  00                 	db	0
  1392  00FF18                     STR_23:
  1393  00FF18  25                 	db	37
  1394  00FF19  64                 	db	100	;'d'
  1395  00FF1A  20                 	db	32
  1396  00FF1B  4D                 	db	77	;'M'
  1397  00FF1C  49                 	db	73	;'I'
  1398  00FF1D  4E                 	db	78	;'N'
  1399  00FF1E  20                 	db	32
  1400  00FF1F  25                 	db	37
  1401  00FF20  64                 	db	100	;'d'
  1402  00FF21  20                 	db	32
  1403  00FF22  53                 	db	83	;'S'
  1404  00FF23  45                 	db	69	;'E'
  1405  00FF24  43                 	db	67	;'C'
  1406  00FF25  00                 	db	0
  1407  00FF26                     STR_2:
  1408  00FF26  54                 	db	84	;'T'
  1409  00FF27  49                 	db	73	;'I'
  1410  00FF28  4D                 	db	77	;'M'
  1411  00FF29  45                 	db	69	;'E'
  1412  00FF2A  3A                 	db	58	;':'
  1413  00FF2B  20                 	db	32
  1414  00FF2C  25                 	db	37
  1415  00FF2D  64                 	db	100	;'d'
  1416  00FF2E  3A                 	db	58	;':'
  1417  00FF2F  25                 	db	37
  1418  00FF30  30                 	db	48	;'0'
  1419  00FF31  32                 	db	50	;'2'
  1420  00FF32  64                 	db	100	;'d'
  1421  00FF33  00                 	db	0
  1422  00FF34                     STR_79:
  1423  00FF34  54                 	db	84	;'T'
  1424  00FF35  53                 	db	83	;'S'
  1425  00FF36  54                 	db	84	;'T'
  1426  00FF37  3A                 	db	58	;':'
  1427  00FF38  20                 	db	32
  1428  00FF39  49                 	db	73	;'I'
  1429  00FF3A  52                 	db	82	;'R'
  1430  00FF3B  20                 	db	32
  1431  00FF3C  53                 	db	83	;'S'
  1432  00FF3D  4E                 	db	78	;'N'
  1433  00FF3E  53                 	db	83	;'S'
  1434  00FF3F  52                 	db	82	;'R'
  1435  00FF40  00                 	db	0
  1436  00FF41                     STR_65:
  1437  00FF41  54                 	db	84	;'T'
  1438  00FF42  49                 	db	73	;'I'
  1439  00FF43  4D                 	db	77	;'M'
  1440  00FF44  45                 	db	69	;'E'
  1441  00FF45  20                 	db	32
  1442  00FF46  25                 	db	37
  1443  00FF47  64                 	db	100	;'d'
  1444  00FF48  3A                 	db	58	;':'
  1445  00FF49  25                 	db	37
  1446  00FF4A  30                 	db	48	;'0'
  1447  00FF4B  32                 	db	50	;'2'
  1448  00FF4C  64                 	db	100	;'d'
  1449  00FF4D  00                 	db	0
  1450  00FF4E                     STR_74:
  1451  00FF4E  41                 	db	65	;'A'
  1452  00FF4F  4C                 	db	76	;'L'
  1453  00FF50  47                 	db	71	;'G'
  1454  00FF51  33                 	db	51	;'3'
  1455  00FF52  3A                 	db	58	;':'
  1456  00FF53  20                 	db	32
  1457  00FF54  31                 	db	49	;'1'
  1458  00FF55  20                 	db	32
  1459  00FF56  43                 	db	67	;'C'
  1460  00FF57  41                 	db	65	;'A'
  1461  00FF58  4E                 	db	78	;'N'
  1462  00FF59  00                 	db	0
  1463  00FF5A                     STR_93:
  1464  00FF5A  50                 	db	80	;'P'
  1465  00FF5B  49                 	db	73	;'I'
  1466  00FF5C  4E                 	db	78	;'N'
  1467  00FF5D  20                 	db	32
  1468  00FF5E  52                 	db	82	;'R'
  1469  00FF5F  41                 	db	65	;'A'
  1470  00FF60  33                 	db	51	;'3'
  1471  00FF61  2E                 	db	46
  1472  00FF62  2E                 	db	46
  1473  00FF63  2E                 	db	46
  1474  00FF64  00                 	db	0
  1475  00FF65                     STR_95:
  1476  00FF65  50                 	db	80	;'P'
  1477  00FF66  49                 	db	73	;'I'
  1478  00FF67  4E                 	db	78	;'N'
  1479  00FF68  20                 	db	32
  1480  00FF69  52                 	db	82	;'R'
  1481  00FF6A  41                 	db	65	;'A'
  1482  00FF6B  34                 	db	52	;'4'
  1483  00FF6C  2E                 	db	46
  1484  00FF6D  2E                 	db	46
  1485  00FF6E  2E                 	db	46
  1486  00FF6F  00                 	db	0
  1487  00FF70                     STR_113:
  1488  00FF70  50                 	db	80	;'P'
  1489  00FF71  55                 	db	85	;'U'
  1490  00FF72  53                 	db	83	;'S'
  1491  00FF73  48                 	db	72	;'H'
  1492  00FF74  45                 	db	69	;'E'
  1493  00FF75  52                 	db	82	;'R'
  1494  00FF76  20                 	db	32
  1495  00FF77  54                 	db	84	;'T'
  1496  00FF78  53                 	db	83	;'S'
  1497  00FF79  54                 	db	84	;'T'
  1498  00FF7A  00                 	db	0
  1499  00FF7B                     STR_64:
  1500  00FF7B  53                 	db	83	;'S'
  1501  00FF7C  4F                 	db	79	;'O'
  1502  00FF7D  52                 	db	82	;'R'
  1503  00FF7E  54                 	db	84	;'T'
  1504  00FF7F  49                 	db	73	;'I'
  1505  00FF80  4E                 	db	78	;'N'
  1506  00FF81  47                 	db	71	;'G'
  1507  00FF82  2E                 	db	46
  1508  00FF83  2E                 	db	46
  1509  00FF84  2E                 	db	46
  1510  00FF85  00                 	db	0
  1511  00FF86                     STR_84:
  1512  00FF86  54                 	db	84	;'T'
  1513  00FF87  53                 	db	83	;'S'
  1514  00FF88  54                 	db	84	;'T'
  1515  00FF89  3A                 	db	58	;':'
  1516  00FF8A  20                 	db	32
  1517  00FF8B  43                 	db	67	;'C'
  1518  00FF8C  4F                 	db	79	;'O'
  1519  00FF8D  4E                 	db	78	;'N'
  1520  00FF8E  44                 	db	68	;'D'
  1521  00FF8F  00                 	db	0
  1522  00FF90                     STR_88:
  1523  00FF90  41                 	db	65	;'A'
  1524  00FF91  43                 	db	67	;'C'
  1525  00FF92  54                 	db	84	;'T'
  1526  00FF93  55                 	db	85	;'U'
  1527  00FF94  41                 	db	65	;'A'
  1528  00FF95  54                 	db	84	;'T'
  1529  00FF96  4F                 	db	79	;'O'
  1530  00FF97  52                 	db	82	;'R'
  1531  00FF98  53                 	db	83	;'S'
  1532  00FF99  00                 	db	0
  1533  00FF9A                     STR_22:
  1534  00FF9A  44                 	db	68	;'D'
  1535  00FF9B  55                 	db	85	;'U'
  1536  00FF9C  52                 	db	82	;'R'
  1537  00FF9D  41                 	db	65	;'A'
  1538  00FF9E  54                 	db	84	;'T'
  1539  00FF9F  49                 	db	73	;'I'
  1540  00FFA0  4F                 	db	79	;'O'
  1541  00FFA1  4E                 	db	78	;'N'
  1542  00FFA2  3A                 	db	58	;':'
  1543  00FFA3  00                 	db	0
  1544  00FFA4                     STR_86:
  1545  00FFA4  43                 	db	67	;'C'
  1546  00FFA5  4F                 	db	79	;'O'
  1547  00FFA6  4E                 	db	78	;'N'
  1548  00FFA7  44                 	db	68	;'D'
  1549  00FFA8  3A                 	db	58	;':'
  1550  00FFA9  20                 	db	32
  1551  00FFAA  25                 	db	37
  1552  00FFAB  64                 	db	100	;'d'
  1553  00FFAC  00                 	db	0
  1554  00FFAD                     STR_77:
  1555  00FFAD  53                 	db	83	;'S'
  1556  00FFAE  45                 	db	69	;'E'
  1557  00FFAF  4E                 	db	78	;'N'
  1558  00FFB0  53                 	db	83	;'S'
  1559  00FFB1  4F                 	db	79	;'O'
  1560  00FFB2  52                 	db	82	;'R'
  1561  00FFB3  53                 	db	83	;'S'
  1562  00FFB4  00                 	db	0
  1563  00FFB5                     STR_128:
  1564  00FFB5  28                 	db	40
  1565  00FFB6  6E                 	db	110	;'n'
  1566  00FFB7  75                 	db	117	;'u'
  1567  00FFB8  6C                 	db	108	;'l'
  1568  00FFB9  6C                 	db	108	;'l'
  1569  00FFBA  29                 	db	41
  1570  00FFBB  00                 	db	0
  1571  00FFBC                     STR_67:
  1572  00FFBC  46                 	db	70	;'F'
  1573  00FFBD  41                 	db	65	;'A'
  1574  00FFBE  49                 	db	73	;'I'
  1575  00FFBF  4C                 	db	76	;'L'
  1576  00FFC0  45                 	db	69	;'E'
  1577  00FFC1  44                 	db	68	;'D'
  1578  00FFC2  00                 	db	0
  1579  00FFC3                     STR_7:
  1580  00FFC3  53                 	db	83	;'S'
  1581  00FFC4  54                 	db	84	;'T'
  1582  00FFC5  41                 	db	65	;'A'
  1583  00FFC6  52                 	db	82	;'R'
  1584  00FFC7  54                 	db	84	;'T'
  1585  00FFC8  3A                 	db	58	;':'
  1586  00FFC9  00                 	db	0
  1587  00FFCA                     STR_9:
  1588  00FFCA  46                 	db	70	;'F'
  1589  00FFCB  45                 	db	69	;'E'
  1590  00FFCC  42                 	db	66	;'B'
  1591  00FFCD  00                 	db	0
  1592  00FFCE                     STR_19:
  1593  00FFCE  44                 	db	68	;'D'
  1594  00FFCF  45                 	db	69	;'E'
  1595  00FFD0  43                 	db	67	;'C'
  1596  00FFD1  00                 	db	0
  1597  00FFD2                     STR_15:
  1598  00FFD2  41                 	db	65	;'A'
  1599  00FFD3  55                 	db	85	;'U'
  1600  00FFD4  47                 	db	71	;'G'
  1601  00FFD5  00                 	db	0
  1602  00FFD6                     STR_14:
  1603  00FFD6  4A                 	db	74	;'J'
  1604  00FFD7  55                 	db	85	;'U'
  1605  00FFD8  4C                 	db	76	;'L'
  1606  00FFD9  00                 	db	0
  1607  00FFDA                     STR_8:
  1608  00FFDA  4A                 	db	74	;'J'
  1609  00FFDB  41                 	db	65	;'A'
  1610  00FFDC  4E                 	db	78	;'N'
  1611  00FFDD  00                 	db	0
  1612  00FFDE                     STR_13:
  1613  00FFDE  4A                 	db	74	;'J'
  1614  00FFDF  55                 	db	85	;'U'
  1615  00FFE0  4E                 	db	78	;'N'
  1616  00FFE1  00                 	db	0
  1617  00FFE2                     STR_16:
  1618  00FFE2  53                 	db	83	;'S'
  1619  00FFE3  45                 	db	69	;'E'
  1620  00FFE4  50                 	db	80	;'P'
  1621  00FFE5  00                 	db	0
  1622  00FFE6                     STR_10:
  1623  00FFE6  4D                 	db	77	;'M'
  1624  00FFE7  41                 	db	65	;'A'
  1625  00FFE8  52                 	db	82	;'R'
  1626  00FFE9  00                 	db	0
  1627  00FFEA                     STR_11:
  1628  00FFEA  41                 	db	65	;'A'
  1629  00FFEB  50                 	db	80	;'P'
  1630  00FFEC  52                 	db	82	;'R'
  1631  00FFED  00                 	db	0
  1632  00FFEE                     STR_20:
  1633  00FFEE  45                 	db	69	;'E'
  1634  00FFEF  52                 	db	82	;'R'
  1635  00FFF0  52                 	db	82	;'R'
  1636  00FFF1  00                 	db	0
  1637  00FFF2                     STR_17:
  1638  00FFF2  4F                 	db	79	;'O'
  1639  00FFF3  43                 	db	67	;'C'
  1640  00FFF4  54                 	db	84	;'T'
  1641  00FFF5  00                 	db	0
  1642  00FFF6                     STR_18:
  1643  00FFF6  4E                 	db	78	;'N'
  1644  00FFF7  4F                 	db	79	;'O'
  1645  00FFF8  56                 	db	86	;'V'
  1646  00FFF9  00                 	db	0
  1647  00FFFA                     STR_12:
  1648  00FFFA  4D                 	db	77	;'M'
  1649  00FFFB  41                 	db	65	;'A'
  1650  00FFFC  59                 	db	89	;'Y'
  1651  00FFFD  00                 	db	0
  1652  0000                     
  1653                           ; #config settings
  1654  00FFFE  00                 	db	0	; dummy byte at the end
  1655  0000                     
  1656                           	psect	cinit
  1657  004CC8                     __pcinit:
  1658                           	opt stack 0
  1659  004CC8                     start_initialization:
  1660                           	opt stack 0
  1661  004CC8                     __initialization:
  1662                           	opt stack 0
  1663                           
  1664                           ; Initialize objects allocated to BANK1 (8 bytes)
  1665                           ; load TBLPTR registers with __pidataBANK1
  1666  004CC8  0E2C               	movlw	low __pidataBANK1
  1667  004CCA  6EF6               	movwf	tblptrl,c
  1668  004CCC  0E54               	movlw	high __pidataBANK1
  1669  004CCE  6EF7               	movwf	tblptrh,c
  1670  004CD0  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1671  004CD2  6EF8               	movwf	tblptru,c
  1672  004CD4  EE01  F041         	lfsr	0,__pdataBANK1
  1673  004CD8  EE10 F008          	lfsr	1,8
  1674  004CDC                     copy_data0:
  1675  004CDC  0009               	tblrd		*+
  1676  004CDE  CFF5 FFEE          	movff	tablat,postinc0
  1677  004CE2  50E5               	movf	postdec1,w,c
  1678  004CE4  50E1               	movf	fsr1l,w,c
  1679  004CE6  E1FA               	bnz	copy_data0
  1680                           
  1681                           ; Clear objects allocated to BANK1 (65 bytes)
  1682  004CE8  EE01  F000         	lfsr	0,__pbssBANK1
  1683  004CEC  0E41               	movlw	65
  1684  004CEE                     clear_0:
  1685  004CEE  6AEE               	clrf	postinc0,c
  1686  004CF0  06E8               	decf	wreg,f,c
  1687  004CF2  E1FD               	bnz	clear_0
  1688                           
  1689                           ; Clear objects allocated to BANK0 (38 bytes)
  1690  004CF4  EE00  F0DA         	lfsr	0,__pbssBANK0
  1691  004CF8  0E26               	movlw	38
  1692  004CFA                     clear_1:
  1693  004CFA  6AEE               	clrf	postinc0,c
  1694  004CFC  06E8               	decf	wreg,f,c
  1695  004CFE  E1FD               	bnz	clear_1
  1696                           
  1697                           ; Clear objects allocated to COMRAM (35 bytes)
  1698  004D00  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1699  004D04  0E23               	movlw	35
  1700  004D06                     clear_2:
  1701  004D06  6AEE               	clrf	postinc0,c
  1702  004D08  06E8               	decf	wreg,f,c
  1703  004D0A  E1FD               	bnz	clear_2
  1704  004D0C                     end_of_initialization:
  1705                           	opt stack 0
  1706  004D0C                     __end_of__initialization:
  1707                           	opt stack 0
  1708  004D0C  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1709  004D0E  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1710  004D10  0100               	movlb	0
  1711  004D12  EF9F  F020         	goto	_main	;jump to C main() function
  1712                           tblptru	equ	0xFF8
  1713                           tblptrh	equ	0xFF7
  1714                           tblptrl	equ	0xFF6
  1715                           tablat	equ	0xFF5
  1716                           postinc0	equ	0xFEE
  1717                           wreg	equ	0xFE8
  1718                           postdec1	equ	0xFE5
  1719                           fsr1l	equ	0xFE1
  1720                           
  1721                           	psect	bssCOMRAM
  1722  00005B                     __pbssCOMRAM:
  1723                           	opt stack 0
  1724  00005B                     _back:
  1725                           	opt stack 0
  1726  00005B                     	ds	2
  1727  00005D                     _down:
  1728                           	opt stack 0
  1729  00005D                     	ds	2
  1730  00005F                     _enter:
  1731                           	opt stack 0
  1732  00005F                     	ds	2
  1733  000061                     _f_panning_to_bin:
  1734                           	opt stack 0
  1735  000061                     	ds	2
  1736  000063                     _log_completion:
  1737                           	opt stack 0
  1738  000063                     	ds	2
  1739  000065                     _log_count_can_no_lab:
  1740                           	opt stack 0
  1741  000065                     	ds	2
  1742  000067                     _log_count_can_w_lab:
  1743                           	opt stack 0
  1744  000067                     	ds	2
  1745  000069                     _log_count_pop_no_tab:
  1746                           	opt stack 0
  1747  000069                     	ds	2
  1748  00006B                     _log_count_pop_w_tab:
  1749                           	opt stack 0
  1750  00006B                     	ds	2
  1751  00006D                     _most_recent_sort_time:
  1752                           	opt stack 0
  1753  00006D                     	ds	2
  1754  00006F                     _pan_servo_state:
  1755                           	opt stack 0
  1756  00006F                     	ds	2
  1757  000071                     _servo_timer_counter:
  1758                           	opt stack 0
  1759  000071                     	ds	2
  1760  000073                     _servo_timer_target:
  1761                           	opt stack 0
  1762  000073                     	ds	2
  1763  000075                     _tilt_servo_state:
  1764                           	opt stack 0
  1765  000075                     	ds	2
  1766  000077                     _up:
  1767                           	opt stack 0
  1768  000077                     	ds	2
  1769  000079                     _was_low_1:
  1770                           	opt stack 0
  1771  000079                     	ds	2
  1772  00007B                     _was_low_3:
  1773                           	opt stack 0
  1774  00007B                     	ds	2
  1775  00007D                     _input:
  1776                           	opt stack 0
  1777  00007D                     	ds	1
  1778                           tblptru	equ	0xFF8
  1779                           tblptrh	equ	0xFF7
  1780                           tblptrl	equ	0xFF6
  1781                           tablat	equ	0xFF5
  1782                           postinc0	equ	0xFEE
  1783                           wreg	equ	0xFE8
  1784                           postdec1	equ	0xFE5
  1785                           fsr1l	equ	0xFE1
  1786                           
  1787                           	psect	bssBANK0
  1788  0000DA                     __pbssBANK0:
  1789                           	opt stack 0
  1790  0000DA                     _servoTimes:
  1791                           	opt stack 0
  1792  0000DA                     	ds	8
  1793  0000E2                     _sensor_outputs:
  1794                           	opt stack 0
  1795  0000E2                     	ds	4
  1796  0000E6                     _IR_signal:
  1797                           	opt stack 0
  1798  0000E6                     	ds	2
  1799  0000E8                     _MAG_signal:
  1800                           	opt stack 0
  1801  0000E8                     	ds	2
  1802  0000EA                     _RTCflag:
  1803                           	opt stack 0
  1804  0000EA                     	ds	2
  1805  0000EC                     _cur_state:
  1806                           	opt stack 0
  1807  0000EC                     	ds	2
  1808  0000EE                     _f_lastCan:
  1809                           	opt stack 0
  1810  0000EE                     	ds	2
  1811  0000F0                     _f_loadingNewCan:
  1812                           	opt stack 0
  1813  0000F0                     	ds	2
  1814  0000F2                     _log:
  1815                           	opt stack 0
  1816  0000F2                     	ds	2
  1817  0000F4                     _log_total_time:
  1818                           	opt stack 0
  1819  0000F4                     	ds	2
  1820  0000F6                     _logstate:
  1821                           	opt stack 0
  1822  0000F6                     	ds	2
  1823  0000F8                     _total_time:
  1824                           	opt stack 0
  1825  0000F8                     	ds	2
  1826  0000FA                     _var:
  1827                           	opt stack 0
  1828  0000FA                     	ds	2
  1829  0000FC                     _machine_state:
  1830                           	opt stack 0
  1831  0000FC                     	ds	1
  1832  0000FD                     _sel:
  1833                           	opt stack 0
  1834  0000FD                     	ds	1
  1835  0000FE                     _count_total:
  1836                           	opt stack 0
  1837  0000FE                     	ds	2
  1838                           tblptru	equ	0xFF8
  1839                           tblptrh	equ	0xFF7
  1840                           tblptrl	equ	0xFF6
  1841                           tablat	equ	0xFF5
  1842                           postinc0	equ	0xFEE
  1843                           wreg	equ	0xFE8
  1844                           postdec1	equ	0xFE5
  1845                           fsr1l	equ	0xFE1
  1846                           
  1847                           	psect	bssBANK1
  1848  000100                     __pbssBANK1:
  1849                           	opt stack 0
  1850  000100                     _log_startTime:
  1851                           	opt stack 0
  1852  000100                     	ds	14
  1853  00010E                     _startTime:
  1854                           	opt stack 0
  1855  00010E                     	ds	14
  1856  00011C                     _time:
  1857                           	opt stack 0
  1858  00011C                     	ds	7
  1859  000123                     _count_can_no_lab:
  1860                           	opt stack 0
  1861  000123                     	ds	2
  1862  000125                     _count_can_w_lab:
  1863                           	opt stack 0
  1864  000125                     	ds	2
  1865  000127                     _count_pop_no_tab:
  1866                           	opt stack 0
  1867  000127                     	ds	2
  1868  000129                     _count_pop_w_tab:
  1869                           	opt stack 0
  1870  000129                     	ds	2
  1871  00012B                     _cur_can:
  1872                           	opt stack 0
  1873  00012B                     	ds	2
  1874  00012D                     _debug:
  1875                           	opt stack 0
  1876  00012D                     	ds	2
  1877  00012F                     _f_ID_receive:
  1878                           	opt stack 0
  1879  00012F                     	ds	2
  1880  000131                     _f_can_coming_to_ID:
  1881                           	opt stack 0
  1882  000131                     	ds	2
  1883  000133                     _f_can_coming_to_distribution:
  1884                           	opt stack 0
  1885  000133                     	ds	2
  1886  000135                     _f_can_distributed:
  1887                           	opt stack 0
  1888  000135                     	ds	2
  1889  000137                     _f_most_recent_sort_time:
  1890                           	opt stack 0
  1891  000137                     	ds	2
  1892  000139                     _first:
  1893                           	opt stack 0
  1894  000139                     	ds	2
  1895  00013B                     _firstboot:
  1896                           	opt stack 0
  1897  00013B                     	ds	2
  1898  00013D                     _i:
  1899                           	opt stack 0
  1900  00013D                     	ds	2
  1901  00013F                     _log_count_total:
  1902                           	opt stack 0
  1903  00013F                     	ds	2
  1904                           tblptru	equ	0xFF8
  1905                           tblptrh	equ	0xFF7
  1906                           tblptrl	equ	0xFF6
  1907                           tablat	equ	0xFF5
  1908                           postinc0	equ	0xFEE
  1909                           wreg	equ	0xFE8
  1910                           postdec1	equ	0xFE5
  1911                           fsr1l	equ	0xFE1
  1912                           
  1913                           	psect	dataBANK1
  1914  000141                     __pdataBANK1:
  1915                           	opt stack 0
  1916  000141                     UI@F3235:
  1917                           	opt stack 0
  1918  000141                     	ds	4
  1919  000145                     printRTC@F3226:
  1920                           	opt stack 0
  1921  000145                     	ds	4
  1922                           tblptru	equ	0xFF8
  1923                           tblptrh	equ	0xFF7
  1924                           tblptrl	equ	0xFF6
  1925                           tablat	equ	0xFF5
  1926                           postinc0	equ	0xFEE
  1927                           wreg	equ	0xFE8
  1928                           postdec1	equ	0xFE5
  1929                           fsr1l	equ	0xFE1
  1930                           
  1931                           	psect	cstackBANK0
  1932  000080                     __pcstackBANK0:
  1933                           	opt stack 0
  1934  000080                     ??_delay_ms:
  1935  000080                     ??_PortTests:
  1936  000080                     ??_isdigit:
  1937  000080                     ??_readADC:
  1938  000080                     ??_I2C_Master_Wait:
  1939  000080                     ?___wmul:
  1940                           	opt stack 0
  1941  000080                     ?___awmod:
  1942                           	opt stack 0
  1943  000080                     ?___lwdiv:
  1944                           	opt stack 0
  1945  000080                     ?___lldiv:
  1946                           	opt stack 0
  1947  000080                     lcdNibble@temp:
  1948                           	opt stack 0
  1949  000080                     initTime@m:
  1950                           	opt stack 0
  1951  000080                     updateServoPosition@time_us:
  1952                           	opt stack 0
  1953  000080                     EEPROM_read@address:
  1954                           	opt stack 0
  1955  000080                     ___wmul@multiplier:
  1956                           	opt stack 0
  1957  000080                     ___awmod@dividend:
  1958                           	opt stack 0
  1959  000080                     ___lwdiv@dividend:
  1960                           	opt stack 0
  1961  000080                     strcpy@to:
  1962                           	opt stack 0
  1963  000080                     ___lldiv@dividend:
  1964                           	opt stack 0
  1965                           
  1966                           ; 4 bytes @ 0x0
  1967  000080                     	ds	1
  1968  000081                     readADC@channel:
  1969                           	opt stack 0
  1970  000081                     I2C_Master_Read@a:
  1971                           	opt stack 0
  1972  000081                     lcdNibble@data:
  1973                           	opt stack 0
  1974  000081                     initTime@h:
  1975                           	opt stack 0
  1976  000081                     delay_ms@milliseconds:
  1977                           	opt stack 0
  1978  000081                     _isdigit$2067:
  1979                           	opt stack 0
  1980  000081                     I2C_Master_Write@d:
  1981                           	opt stack 0
  1982                           
  1983                           ; 2 bytes @ 0x1
  1984  000081                     	ds	1
  1985  000082                     ??_ID:
  1986  000082                     ??_readIR:
  1987  000082                     ??_readMAG:
  1988  000082                     I2C_Master_Read@temp:
  1989                           	opt stack 0
  1990  000082                     lcdInst@data:
  1991                           	opt stack 0
  1992  000082                     putch@data:
  1993                           	opt stack 0
  1994  000082                     initTime@w:
  1995                           	opt stack 0
  1996  000082                     isdigit@c:
  1997                           	opt stack 0
  1998  000082                     updateServoPosition@timer:
  1999                           	opt stack 0
  2000  000082                     ___wmul@multiplicand:
  2001                           	opt stack 0
  2002  000082                     ___awmod@divisor:
  2003                           	opt stack 0
  2004  000082                     ___lwdiv@divisor:
  2005                           	opt stack 0
  2006  000082                     strcpy@from:
  2007                           	opt stack 0
  2008                           
  2009                           ; 2 bytes @ 0x2
  2010  000082                     	ds	1
  2011  000083                     ??_initLCD:
  2012  000083                     initTime@DD:
  2013                           	opt stack 0
  2014  000083                     getRTC@i:
  2015                           	opt stack 0
  2016                           
  2017                           ; 2 bytes @ 0x3
  2018  000083                     	ds	1
  2019  000084                     ??_updateServoPosition:
  2020  000084                     initTime@MM:
  2021                           	opt stack 0
  2022  000084                     ___awmod@counter:
  2023                           	opt stack 0
  2024  000084                     readIR@res:
  2025                           	opt stack 0
  2026  000084                     readMAG@res:
  2027                           	opt stack 0
  2028  000084                     ID@i:
  2029                           	opt stack 0
  2030  000084                     ___wmul@product:
  2031                           	opt stack 0
  2032  000084                     ___lwdiv@quotient:
  2033                           	opt stack 0
  2034  000084                     strcpy@cp:
  2035                           	opt stack 0
  2036  000084                     ___lldiv@divisor:
  2037                           	opt stack 0
  2038                           
  2039                           ; 4 bytes @ 0x4
  2040  000084                     	ds	1
  2041  000085                     ??_initSortTimer:
  2042  000085                     initTime@YY:
  2043                           	opt stack 0
  2044  000085                     ___awmod@sign:
  2045                           	opt stack 0
  2046                           
  2047                           ; 1 bytes @ 0x5
  2048  000085                     	ds	1
  2049  000086                     ??_getIR:
  2050  000086                     ??_getMAG:
  2051  000086                     ?___awdiv:
  2052                           	opt stack 0
  2053  000086                     initTime@s:
  2054                           	opt stack 0
  2055  000086                     ___lwdiv@counter:
  2056                           	opt stack 0
  2057  000086                     ID@i_1174:
  2058                           	opt stack 0
  2059  000086                     updateServoPosition@my_time:
  2060                           	opt stack 0
  2061  000086                     ___awdiv@dividend:
  2062                           	opt stack 0
  2063                           
  2064                           ; 2 bytes @ 0x6
  2065  000086                     	ds	1
  2066  000087                     ?___lwmod:
  2067                           	opt stack 0
  2068  000087                     getIR@i:
  2069                           	opt stack 0
  2070  000087                     ___lwmod@dividend:
  2071                           	opt stack 0
  2072                           
  2073                           ; 2 bytes @ 0x7
  2074  000087                     	ds	1
  2075  000088                     ??_Distribution:
  2076  000088                     ??_initServos:
  2077  000088                     ID@i_1175:
  2078                           	opt stack 0
  2079  000088                     initSortTimer@i:
  2080                           	opt stack 0
  2081  000088                     ___awdiv@divisor:
  2082                           	opt stack 0
  2083  000088                     ___lldiv@quotient:
  2084                           	opt stack 0
  2085                           
  2086                           ; 4 bytes @ 0x8
  2087  000088                     	ds	1
  2088  000089                     ___lwmod@divisor:
  2089                           	opt stack 0
  2090                           
  2091                           ; 2 bytes @ 0x9
  2092  000089                     	ds	1
  2093  00008A                     ___awdiv@counter:
  2094                           	opt stack 0
  2095                           
  2096                           ; 1 bytes @ 0xA
  2097  00008A                     	ds	1
  2098  00008B                     ___awdiv@sign:
  2099                           	opt stack 0
  2100  00008B                     ___lwmod@counter:
  2101                           	opt stack 0
  2102                           
  2103                           ; 1 bytes @ 0xB
  2104  00008B                     	ds	1
  2105  00008C                     ___lldiv@counter:
  2106                           	opt stack 0
  2107  00008C                     ___awdiv@quotient:
  2108                           	opt stack 0
  2109                           
  2110                           ; 2 bytes @ 0xC
  2111  00008C                     	ds	1
  2112  00008D                     I2C_Master_Init@c:
  2113                           	opt stack 0
  2114                           
  2115                           ; 4 bytes @ 0xD
  2116  00008D                     	ds	1
  2117  00008E                     ?_printf:
  2118                           	opt stack 0
  2119  00008E                     printf@f:
  2120                           	opt stack 0
  2121                           
  2122                           ; 2 bytes @ 0xE
  2123  00008E                     	ds	3
  2124  000091                     ??_I2C_Master_Init:
  2125                           
  2126                           ; 1 bytes @ 0x11
  2127  000091                     	ds	4
  2128  000095                     ??_loadRTC:
  2129                           
  2130                           ; 1 bytes @ 0x15
  2131  000095                     	ds	1
  2132  000096                     loadRTC@i:
  2133                           	opt stack 0
  2134                           
  2135                           ; 2 bytes @ 0x16
  2136  000096                     	ds	4
  2137  00009A                     ??_printf:
  2138                           
  2139                           ; 1 bytes @ 0x1A
  2140  00009A                     	ds	4
  2141  00009E                     printf@prec:
  2142                           	opt stack 0
  2143                           
  2144                           ; 1 bytes @ 0x1E
  2145  00009E                     	ds	1
  2146  00009F                     printf@cp:
  2147                           	opt stack 0
  2148                           
  2149                           ; 2 bytes @ 0x1F
  2150  00009F                     	ds	2
  2151  0000A1                     printf@ap:
  2152                           	opt stack 0
  2153                           
  2154                           ; 2 bytes @ 0x21
  2155  0000A1                     	ds	2
  2156  0000A3                     printf@len:
  2157                           	opt stack 0
  2158                           
  2159                           ; 2 bytes @ 0x23
  2160  0000A3                     	ds	2
  2161  0000A5                     printf@val:
  2162                           	opt stack 0
  2163                           
  2164                           ; 2 bytes @ 0x25
  2165  0000A5                     	ds	2
  2166  0000A7                     printf@flag:
  2167                           	opt stack 0
  2168                           
  2169                           ; 1 bytes @ 0x27
  2170  0000A7                     	ds	1
  2171  0000A8                     printf@c:
  2172                           	opt stack 0
  2173                           
  2174                           ; 1 bytes @ 0x28
  2175  0000A8                     	ds	1
  2176  0000A9                     printf@width:
  2177                           	opt stack 0
  2178                           
  2179                           ; 2 bytes @ 0x29
  2180  0000A9                     	ds	2
  2181  0000AB                     ??_printRTC:
  2182  0000AB                     ??_algorithmTest:
  2183  0000AB                     ??_sensorTest:
  2184  0000AB                     ??_actuatorTest:
  2185  0000AB                     ??_arm:
  2186  0000AB                     ??_PortTestA5:
  2187  0000AB                     ??_SpeedTest:
  2188  0000AB                     ??_PusherTest:
  2189  0000AB                     ??_BothServos:
  2190  0000AB                     ??_BlockerTest:
  2191  0000AB                     EEPROM_write@address:
  2192                           	opt stack 0
  2193                           
  2194                           ; 2 bytes @ 0x2B
  2195  0000AB                     	ds	1
  2196  0000AC                     BlockerTest@i:
  2197                           	opt stack 0
  2198  0000AC                     arm@on:
  2199                           	opt stack 0
  2200                           
  2201                           ; 2 bytes @ 0x2C
  2202  0000AC                     	ds	1
  2203  0000AD                     EEPROM_write@data:
  2204                           	opt stack 0
  2205  0000AD                     actuatorTest@i_1739:
  2206                           	opt stack 0
  2207  0000AD                     sensorTest@res:
  2208                           	opt stack 0
  2209  0000AD                     PusherTest@res:
  2210                           	opt stack 0
  2211                           
  2212                           ; 2 bytes @ 0x2D
  2213  0000AD                     	ds	1
  2214  0000AE                     ??_EEPROM_write:
  2215  0000AE                     actuatorTest@i_1746:
  2216                           	opt stack 0
  2217  0000AE                     BlockerTest@cam_flag:
  2218                           	opt stack 0
  2219  0000AE                     printRTC@INT_time:
  2220                           	opt stack 0
  2221                           
  2222                           ; 14 bytes @ 0x2E
  2223  0000AE                     	ds	1
  2224  0000AF                     EEPROM_write@i:
  2225                           	opt stack 0
  2226  0000AF                     actuatorTest@i_1747:
  2227                           	opt stack 0
  2228  0000AF                     PusherTest@res_1794:
  2229                           	opt stack 0
  2230                           
  2231                           ; 2 bytes @ 0x2F
  2232  0000AF                     	ds	1
  2233  0000B0                     EEPROM_write@i_1399:
  2234                           	opt stack 0
  2235  0000B0                     actuatorTest@i_1749:
  2236                           	opt stack 0
  2237  0000B0                     BlockerTest@cond_flag:
  2238                           	opt stack 0
  2239                           
  2240                           ; 2 bytes @ 0x30
  2241  0000B0                     	ds	1
  2242  0000B1                     ??_Loading:
  2243  0000B1                     logRun@num:
  2244                           	opt stack 0
  2245  0000B1                     actuatorTest@i_1750:
  2246                           	opt stack 0
  2247  0000B1                     PusherTest@i:
  2248                           	opt stack 0
  2249                           
  2250                           ; 2 bytes @ 0x31
  2251  0000B1                     	ds	1
  2252  0000B2                     logRun@byte1:
  2253                           	opt stack 0
  2254  0000B2                     actuatorTest@i_1752:
  2255                           	opt stack 0
  2256                           
  2257                           ; 1 bytes @ 0x32
  2258  0000B2                     	ds	1
  2259  0000B3                     logRun@byte2:
  2260                           	opt stack 0
  2261  0000B3                     actuatorTest@i_1753:
  2262                           	opt stack 0
  2263  0000B3                     Loading@addr:
  2264                           	opt stack 0
  2265  0000B3                     PusherTest@i_1798:
  2266                           	opt stack 0
  2267                           
  2268                           ; 2 bytes @ 0x33
  2269  0000B3                     	ds	1
  2270  0000B4                     logRun@byte3:
  2271                           	opt stack 0
  2272  0000B4                     actuatorTest@i_1755:
  2273                           	opt stack 0
  2274                           
  2275                           ; 1 bytes @ 0x34
  2276  0000B4                     	ds	1
  2277  0000B5                     Loading@byte1:
  2278                           	opt stack 0
  2279  0000B5                     logRun@byte_i:
  2280                           	opt stack 0
  2281  0000B5                     actuatorTest@i_1756:
  2282                           	opt stack 0
  2283                           
  2284                           ; 1 bytes @ 0x35
  2285  0000B5                     	ds	1
  2286  0000B6                     logRun@byte11:
  2287                           	opt stack 0
  2288  0000B6                     actuatorTest@i_1758:
  2289                           	opt stack 0
  2290  0000B6                     Loading@i_1149:
  2291                           	opt stack 0
  2292                           
  2293                           ; 2 bytes @ 0x36
  2294  0000B6                     	ds	1
  2295  0000B7                     actuatorTest@i_1759:
  2296                           	opt stack 0
  2297  0000B7                     logRun@i:
  2298                           	opt stack 0
  2299                           
  2300                           ; 2 bytes @ 0x37
  2301  0000B7                     	ds	1
  2302  0000B8                     actuatorTest@i_1761:
  2303                           	opt stack 0
  2304  0000B8                     Loading@i_1158:
  2305                           	opt stack 0
  2306                           
  2307                           ; 2 bytes @ 0x38
  2308  0000B8                     	ds	1
  2309  0000B9                     actuatorTest@i_1762:
  2310                           	opt stack 0
  2311  0000B9                     logRun@addr:
  2312                           	opt stack 0
  2313                           
  2314                           ; 2 bytes @ 0x39
  2315  0000B9                     	ds	1
  2316  0000BA                     actuatorTest@i_1765:
  2317                           	opt stack 0
  2318  0000BA                     Loading@i_1160:
  2319                           	opt stack 0
  2320                           
  2321                           ; 2 bytes @ 0x3A
  2322  0000BA                     	ds	1
  2323  0000BB                     actuatorTest@i_1766:
  2324                           	opt stack 0
  2325                           
  2326                           ; 1 bytes @ 0x3B
  2327  0000BB                     	ds	1
  2328  0000BC                     actuatorTest@i_1768:
  2329                           	opt stack 0
  2330  0000BC                     printRTC@RTC_month:
  2331                           	opt stack 0
  2332  0000BC                     Loading@i_1161:
  2333                           	opt stack 0
  2334                           
  2335                           ; 2 bytes @ 0x3C
  2336  0000BC                     	ds	1
  2337  0000BD                     actuatorTest@i_1769:
  2338                           	opt stack 0
  2339                           
  2340                           ; 1 bytes @ 0x3D
  2341  0000BD                     	ds	1
  2342  0000BE                     actuatorTest@i_1771:
  2343                           	opt stack 0
  2344  0000BE                     Loading@i_1163:
  2345                           	opt stack 0
  2346  0000BE                     printRTC@month:
  2347                           	opt stack 0
  2348                           
  2349                           ; 4 bytes @ 0x3E
  2350  0000BE                     	ds	1
  2351  0000BF                     actuatorTest@i_1772:
  2352                           	opt stack 0
  2353                           
  2354                           ; 1 bytes @ 0x3F
  2355  0000BF                     	ds	1
  2356  0000C0                     actuatorTest@i_1775:
  2357                           	opt stack 0
  2358  0000C0                     Loading@j:
  2359                           	opt stack 0
  2360                           
  2361                           ; 2 bytes @ 0x40
  2362  0000C0                     	ds	1
  2363  0000C1                     actuatorTest@i_1776:
  2364                           	opt stack 0
  2365                           
  2366                           ; 1 bytes @ 0x41
  2367  0000C1                     	ds	1
  2368  0000C2                     actuatorTest@i_1778:
  2369                           	opt stack 0
  2370  0000C2                     printRTC@i:
  2371                           	opt stack 0
  2372  0000C2                     Loading@i:
  2373                           	opt stack 0
  2374                           
  2375                           ; 2 bytes @ 0x42
  2376  0000C2                     	ds	1
  2377  0000C3                     actuatorTest@i_1779:
  2378                           	opt stack 0
  2379                           
  2380                           ; 1 bytes @ 0x43
  2381  0000C3                     	ds	1
  2382  0000C4                     ??_UI:
  2383  0000C4                     actuatorTest@i:
  2384                           	opt stack 0
  2385                           
  2386                           ; 2 bytes @ 0x44
  2387  0000C4                     	ds	2
  2388  0000C6                     ??_Test:
  2389  0000C6                     _UI$2425:
  2390                           	opt stack 0
  2391                           
  2392                           ; 2 bytes @ 0x46
  2393  0000C6                     	ds	2
  2394  0000C8                     UI@i:
  2395                           	opt stack 0
  2396                           
  2397                           ; 1 bytes @ 0x48
  2398  0000C8                     	ds	1
  2399  0000C9                     UI@i_409:
  2400                           	opt stack 0
  2401                           
  2402                           ; 1 bytes @ 0x49
  2403  0000C9                     	ds	1
  2404  0000CA                     UI@i_412:
  2405                           	opt stack 0
  2406                           
  2407                           ; 1 bytes @ 0x4A
  2408  0000CA                     	ds	1
  2409  0000CB                     UI@i_413:
  2410                           	opt stack 0
  2411                           
  2412                           ; 1 bytes @ 0x4B
  2413  0000CB                     	ds	1
  2414  0000CC                     UI@i_431:
  2415                           	opt stack 0
  2416                           
  2417                           ; 1 bytes @ 0x4C
  2418  0000CC                     	ds	1
  2419  0000CD                     UI@i_432:
  2420                           	opt stack 0
  2421                           
  2422                           ; 1 bytes @ 0x4D
  2423  0000CD                     	ds	1
  2424  0000CE                     UI@i_435:
  2425                           	opt stack 0
  2426                           
  2427                           ; 1 bytes @ 0x4E
  2428  0000CE                     	ds	1
  2429  0000CF                     UI@i_436:
  2430                           	opt stack 0
  2431                           
  2432                           ; 1 bytes @ 0x4F
  2433  0000CF                     	ds	1
  2434  0000D0                     UI@i_439:
  2435                           	opt stack 0
  2436                           
  2437                           ; 1 bytes @ 0x50
  2438  0000D0                     	ds	1
  2439  0000D1                     UI@i_440:
  2440                           	opt stack 0
  2441                           
  2442                           ; 1 bytes @ 0x51
  2443  0000D1                     	ds	1
  2444  0000D2                     UI@i_443:
  2445                           	opt stack 0
  2446                           
  2447                           ; 1 bytes @ 0x52
  2448  0000D2                     	ds	1
  2449  0000D3                     UI@i_444:
  2450                           	opt stack 0
  2451                           
  2452                           ; 1 bytes @ 0x53
  2453  0000D3                     	ds	1
  2454  0000D4                     UI@i_447:
  2455                           	opt stack 0
  2456                           
  2457                           ; 1 bytes @ 0x54
  2458  0000D4                     	ds	1
  2459  0000D5                     UI@i_448:
  2460                           	opt stack 0
  2461                           
  2462                           ; 1 bytes @ 0x55
  2463  0000D5                     	ds	1
  2464  0000D6                     UI@month:
  2465                           	opt stack 0
  2466                           
  2467                           ; 4 bytes @ 0x56
  2468  0000D6                     	ds	4
  2469  0000DA                     tblptru	equ	0xFF8
  2470                           tblptrh	equ	0xFF7
  2471                           tblptrl	equ	0xFF6
  2472                           tablat	equ	0xFF5
  2473                           postinc0	equ	0xFEE
  2474                           wreg	equ	0xFE8
  2475                           postdec1	equ	0xFE5
  2476                           fsr1l	equ	0xFE1
  2477                           
  2478                           ; 1 bytes @ 0x5A
  2479                           
  2480                           	psect	cstackCOMRAM
  2481  000001                     __pcstackCOMRAM:
  2482                           	opt stack 0
  2483  000001                     ??i2_I2C_Master_Wait:
  2484  000001                     ??i2_delay_ms:
  2485  000001                     ??i2_isdigit:
  2486  000001                     ?i2___wmul:
  2487                           	opt stack 0
  2488  000001                     ?i2___lwmod:
  2489                           	opt stack 0
  2490  000001                     i2lcdNibble@temp:
  2491                           	opt stack 0
  2492  000001                     i2updateServoPosition@time_us:
  2493                           	opt stack 0
  2494  000001                     i2EEPROM_read@address:
  2495                           	opt stack 0
  2496  000001                     i2___wmul@multiplier:
  2497                           	opt stack 0
  2498  000001                     i2___lwmod@dividend:
  2499                           	opt stack 0
  2500  000001                     i2strcpy@to:
  2501                           	opt stack 0
  2502                           
  2503                           ; 2 bytes @ 0x0
  2504  000001                     	ds	1
  2505  000002                     i2I2C_Master_Read@a:
  2506                           	opt stack 0
  2507  000002                     i2lcdNibble@data:
  2508                           	opt stack 0
  2509  000002                     i2delay_ms@milliseconds:
  2510                           	opt stack 0
  2511  000002                     i2_isdigit$2067:
  2512                           	opt stack 0
  2513  000002                     i2I2C_Master_Write@d:
  2514                           	opt stack 0
  2515                           
  2516                           ; 2 bytes @ 0x1
  2517  000002                     	ds	1
  2518  000003                     i2I2C_Master_Read@temp:
  2519                           	opt stack 0
  2520  000003                     i2lcdInst@data:
  2521                           	opt stack 0
  2522  000003                     i2putch@data:
  2523                           	opt stack 0
  2524  000003                     i2isdigit@c:
  2525                           	opt stack 0
  2526  000003                     i2updateServoPosition@timer:
  2527                           	opt stack 0
  2528  000003                     i2___wmul@multiplicand:
  2529                           	opt stack 0
  2530  000003                     i2___lwmod@divisor:
  2531                           	opt stack 0
  2532  000003                     i2strcpy@from:
  2533                           	opt stack 0
  2534                           
  2535                           ; 2 bytes @ 0x2
  2536  000003                     	ds	1
  2537  000004                     i2getRTC@i:
  2538                           	opt stack 0
  2539                           
  2540                           ; 2 bytes @ 0x3
  2541  000004                     	ds	1
  2542  000005                     ??i2_updateServoPosition:
  2543  000005                     i2___lwmod@counter:
  2544                           	opt stack 0
  2545  000005                     i2___wmul@product:
  2546                           	opt stack 0
  2547  000005                     i2strcpy@cp:
  2548                           	opt stack 0
  2549                           
  2550                           ; 2 bytes @ 0x4
  2551  000005                     	ds	1
  2552  000006                     ?i2___lwdiv:
  2553                           	opt stack 0
  2554  000006                     i2___lwdiv@dividend:
  2555                           	opt stack 0
  2556                           
  2557                           ; 2 bytes @ 0x5
  2558  000006                     	ds	1
  2559  000007                     retrieveLog@logNum:
  2560                           	opt stack 0
  2561  000007                     i2updateServoPosition@my_time:
  2562                           	opt stack 0
  2563                           
  2564                           ; 2 bytes @ 0x6
  2565  000007                     	ds	1
  2566  000008                     i2___lwdiv@divisor:
  2567                           	opt stack 0
  2568                           
  2569                           ; 2 bytes @ 0x7
  2570  000008                     	ds	1
  2571  000009                     ??_retrieveLog:
  2572  000009                     ??_updateServoStates:
  2573                           
  2574                           ; 1 bytes @ 0x8
  2575  000009                     	ds	1
  2576  00000A                     i2___lwdiv@quotient:
  2577                           	opt stack 0
  2578                           
  2579                           ; 2 bytes @ 0x9
  2580  00000A                     	ds	1
  2581  00000B                     retrieveLog@byte1:
  2582                           	opt stack 0
  2583                           
  2584                           ; 1 bytes @ 0xA
  2585  00000B                     	ds	1
  2586  00000C                     retrieveLog@byte2:
  2587                           	opt stack 0
  2588  00000C                     i2___lwdiv@counter:
  2589                           	opt stack 0
  2590                           
  2591                           ; 1 bytes @ 0xB
  2592  00000C                     	ds	1
  2593  00000D                     ?i2_printf:
  2594                           	opt stack 0
  2595  00000D                     retrieveLog@byte3:
  2596                           	opt stack 0
  2597  00000D                     i2printf@f:
  2598                           	opt stack 0
  2599                           
  2600                           ; 2 bytes @ 0xC
  2601  00000D                     	ds	1
  2602  00000E                     retrieveLog@i:
  2603                           	opt stack 0
  2604                           
  2605                           ; 2 bytes @ 0xD
  2606  00000E                     	ds	2
  2607  000010                     retrieveLog@addr:
  2608                           	opt stack 0
  2609                           
  2610                           ; 2 bytes @ 0xF
  2611  000010                     	ds	2
  2612  000012                     dispLogs@myLog:
  2613                           	opt stack 0
  2614                           
  2615                           ; 2 bytes @ 0x11
  2616  000012                     	ds	2
  2617  000014                     
  2618                           ; 1 bytes @ 0x13
  2619  000014                     	ds	5
  2620  000019                     ??i2_printf:
  2621                           
  2622                           ; 1 bytes @ 0x18
  2623  000019                     	ds	4
  2624  00001D                     i2printf@prec:
  2625                           	opt stack 0
  2626                           
  2627                           ; 1 bytes @ 0x1C
  2628  00001D                     	ds	1
  2629  00001E                     i2printf@cp:
  2630                           	opt stack 0
  2631                           
  2632                           ; 2 bytes @ 0x1D
  2633  00001E                     	ds	2
  2634  000020                     i2printf@ap:
  2635                           	opt stack 0
  2636                           
  2637                           ; 2 bytes @ 0x1F
  2638  000020                     	ds	2
  2639  000022                     i2printf@len:
  2640                           	opt stack 0
  2641                           
  2642                           ; 2 bytes @ 0x21
  2643  000022                     	ds	2
  2644  000024                     i2printf@val:
  2645                           	opt stack 0
  2646                           
  2647                           ; 2 bytes @ 0x23
  2648  000024                     	ds	2
  2649  000026                     i2printf@flag:
  2650                           	opt stack 0
  2651                           
  2652                           ; 1 bytes @ 0x25
  2653  000026                     	ds	1
  2654  000027                     i2printf@c:
  2655                           	opt stack 0
  2656                           
  2657                           ; 1 bytes @ 0x26
  2658  000027                     	ds	1
  2659  000028                     i2printf@width:
  2660                           	opt stack 0
  2661                           
  2662                           ; 2 bytes @ 0x27
  2663  000028                     	ds	2
  2664  00002A                     ??_printSortTimer:
  2665  00002A                     ??i2_printRTC:
  2666  00002A                     ?_inputHandler:
  2667                           	opt stack 0
  2668                           
  2669                           ; 2 bytes @ 0x29
  2670  00002A                     	ds	2
  2671  00002C                     ??_inputHandler:
  2672                           
  2673                           ; 1 bytes @ 0x2B
  2674  00002C                     	ds	1
  2675  00002D                     printSortTimer@curTime:
  2676                           	opt stack 0
  2677  00002D                     i2printRTC@INT_time:
  2678                           	opt stack 0
  2679                           
  2680                           ; 14 bytes @ 0x2C
  2681  00002D                     	ds	14
  2682  00003B                     printSortTimer@start_sec:
  2683                           	opt stack 0
  2684  00003B                     i2printRTC@RTC_month:
  2685                           	opt stack 0
  2686                           
  2687                           ; 2 bytes @ 0x3A
  2688  00003B                     	ds	2
  2689  00003D                     printSortTimer@cur_sec:
  2690                           	opt stack 0
  2691  00003D                     i2printRTC@month:
  2692                           	opt stack 0
  2693                           
  2694                           ; 4 bytes @ 0x3C
  2695  00003D                     	ds	2
  2696  00003F                     printSortTimer@min:
  2697                           	opt stack 0
  2698                           
  2699                           ; 2 bytes @ 0x3E
  2700  00003F                     	ds	2
  2701  000041                     printSortTimer@sec:
  2702                           	opt stack 0
  2703  000041                     i2printRTC@i:
  2704                           	opt stack 0
  2705                           
  2706                           ; 2 bytes @ 0x40
  2707  000041                     	ds	2
  2708  000043                     ??_updateMenu:
  2709  000043                     _printSortTimer$2557:
  2710                           	opt stack 0
  2711                           
  2712                           ; 2 bytes @ 0x42
  2713  000043                     	ds	2
  2714  000045                     printSortTimer@timeDiff:
  2715                           	opt stack 0
  2716                           
  2717                           ; 2 bytes @ 0x44
  2718  000045                     	ds	2
  2719  000047                     printSortTimer@i_1187:
  2720                           	opt stack 0
  2721                           
  2722                           ; 2 bytes @ 0x46
  2723  000047                     	ds	2
  2724  000049                     printSortTimer@i:
  2725                           	opt stack 0
  2726                           
  2727                           ; 2 bytes @ 0x48
  2728  000049                     	ds	2
  2729  00004B                     ??_handler:
  2730                           
  2731                           ; 1 bytes @ 0x4A
  2732  00004B                     	ds	16
  2733                           tblptru	equ	0xFF8
  2734                           tblptrh	equ	0xFF7
  2735                           tblptrl	equ	0xFF6
  2736                           tablat	equ	0xFF5
  2737                           postinc0	equ	0xFEE
  2738                           wreg	equ	0xFE8
  2739                           postdec1	equ	0xFE5
  2740                           fsr1l	equ	0xFE1
  2741                           
  2742 ;;
  2743 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2744 ;;
  2745 ;; *************** function _main *****************
  2746 ;; Defined at:
  2747 ;;		line 19 in file "main.c"
  2748 ;; Parameters:    Size  Location     Type
  2749 ;;		None
  2750 ;; Auto vars:     Size  Location     Type
  2751 ;;		None
  2752 ;; Return value:  Size  Location     Type
  2753 ;;                  1    wreg      void 
  2754 ;; Registers used:
  2755 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2756 ;; Tracked objects:
  2757 ;;		On entry : 0/0
  2758 ;;		On exit  : 0/0
  2759 ;;		Unchanged: 0/0
  2760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2764 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2765 ;;Total ram usage:        0 bytes
  2766 ;; Hardware stack levels required when called:   13
  2767 ;; This function calls:
  2768 ;;		_I2C_Master_Init
  2769 ;;		_Test
  2770 ;;		_UI
  2771 ;;		_initLCD
  2772 ;;		_initTime
  2773 ;;		_initUI
  2774 ;;		_logRun
  2775 ;;		_machineConfig
  2776 ;;		_sort
  2777 ;;		_stopSignals
  2778 ;; This function is called by:
  2779 ;;		Startup code after reset
  2780 ;; This function uses a non-reentrant model
  2781 ;;
  2782                           
  2783                           	psect	text0
  2784  00413E                     __ptext0:
  2785                           	opt stack 0
  2786  00413E                     _main:
  2787                           	opt stack 18
  2788                           
  2789                           ;main.c: 20: machineConfig();
  2790                           
  2791                           ;incstack = 0
  2792  00413E  EC55  F025         	call	_machineConfig	;wreg free
  2793                           
  2794                           ;main.c: 21: initLCD();
  2795  004142  ECD7  F026         	call	_initLCD	;wreg free
  2796                           
  2797                           ;main.c: 24: RTCflag = 0;
  2798  004146  0E00               	movlw	0
  2799  004148  0100               	movlb	0	; () banked
  2800  00414A  6FEB               	movwf	(_RTCflag+1)& (0+255),b
  2801  00414C  0E00               	movlw	0
  2802  00414E  6FEA               	movwf	_RTCflag& (0+255),b
  2803                           
  2804                           ;main.c: 25: if(RTCflag){
  2805  004150  0100               	movlb	0	; () banked
  2806  004152  51EA               	movf	_RTCflag& (0+255),w,b
  2807  004154  0100               	movlb	0	; () banked
  2808  004156  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  2809  004158  B4D8               	btfsc	status,2,c
  2810  00415A  D016               	goto	l9485
  2811                           
  2812                           ; BSR set to: 0
  2813                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2814  00415C  0E20               	movlw	32
  2815  00415E  0100               	movlb	0	; () banked
  2816  004160  6F80               	movwf	initTime@m& (0+255),b
  2817  004162  0E15               	movlw	21
  2818  004164  0100               	movlb	0	; () banked
  2819  004166  6F81               	movwf	initTime@h& (0+255),b
  2820  004168  0E04               	movlw	4
  2821  00416A  0100               	movlb	0	; () banked
  2822  00416C  6F82               	movwf	initTime@w& (0+255),b
  2823  00416E  0E15               	movlw	21
  2824  004170  0100               	movlb	0	; () banked
  2825  004172  6F83               	movwf	initTime@DD& (0+255),b
  2826  004174  0E03               	movlw	3
  2827  004176  0100               	movlb	0	; () banked
  2828  004178  6F84               	movwf	initTime@MM& (0+255),b
  2829  00417A  0E17               	movlw	23
  2830  00417C  0100               	movlb	0	; () banked
  2831  00417E  6F85               	movwf	initTime@YY& (0+255),b
  2832  004180  0E42               	movlw	66
  2833  004182  EC8B  F029         	call	_initTime
  2834                           
  2835                           ;main.c: 27: }
  2836  004186  D00B               	goto	l9487
  2837  004188                     l9485:
  2838                           
  2839                           ;main.c: 28: else{
  2840                           ;main.c: 29: I2C_Master_Init(10000);
  2841  004188  0E10               	movlw	16
  2842  00418A  0100               	movlb	0	; () banked
  2843  00418C  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2844  00418E  0E27               	movlw	39
  2845  004190  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2846  004192  0E00               	movlw	0
  2847  004194  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2848  004196  0E00               	movlw	0
  2849  004198  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2850  00419A  EC85  F025         	call	_I2C_Master_Init	;wreg free
  2851  00419E                     l9487:
  2852                           
  2853                           ;main.c: 30: }
  2854                           ;main.c: 32: initUI();
  2855  00419E  ECBB  F027         	call	_initUI	;wreg free
  2856                           
  2857                           ;main.c: 33: first = 1;
  2858  0041A2  0E00               	movlw	0
  2859  0041A4  0101               	movlb	1	; () banked
  2860  0041A6  6F3A               	movwf	(_first+1)& (0+255),b
  2861  0041A8  0E01               	movlw	1
  2862  0041AA  6F39               	movwf	_first& (0+255),b
  2863                           
  2864                           ; BSR set to: 1
  2865                           ;main.c: 44: switch(machine_state){
  2866                           
  2867                           ;main.c: 43: while(1){
  2868  0041AC  D018               	goto	l9509
  2869  0041AE                     l9491:
  2870                           
  2871                           ;main.c: 46: UI();
  2872  0041AE  EC65  F004         	call	_UI	;wreg free
  2873                           
  2874                           ;main.c: 47: break;
  2875  0041B2  D015               	goto	l9509
  2876  0041B4                     l9493:
  2877                           
  2878                           ;main.c: 49: sort();
  2879  0041B4  EC7A  F029         	call	_sort	;wreg free
  2880                           
  2881                           ;main.c: 50: break;
  2882  0041B8  D012               	goto	l9509
  2883  0041BA                     l9495:
  2884                           
  2885                           ;main.c: 52: stopSignals();
  2886  0041BA  ECB9  F029         	call	_stopSignals	;wreg free
  2887                           
  2888                           ;main.c: 53: logRun();
  2889  0041BE  EC0C  F01D         	call	_logRun	;wreg free
  2890                           
  2891                           ;main.c: 54: first = 1;
  2892  0041C2  0E00               	movlw	0
  2893  0041C4  0101               	movlb	1	; () banked
  2894  0041C6  6F3A               	movwf	(_first+1)& (0+255),b
  2895  0041C8  0E01               	movlw	1
  2896  0041CA  6F39               	movwf	_first& (0+255),b
  2897                           
  2898                           ; BSR set to: 1
  2899                           ;main.c: 55: UI();
  2900  0041CC  EC65  F004         	call	_UI	;wreg free
  2901                           
  2902                           ;main.c: 56: break;
  2903  0041D0  D006               	goto	l9509
  2904  0041D2                     l9503:
  2905                           
  2906                           ;main.c: 58: Test();
  2907  0041D2  ECAE  F01D         	call	_Test	;wreg free
  2908                           
  2909                           ;main.c: 59: break;
  2910  0041D6  D003               	goto	l9509
  2911  0041D8                     l9505:
  2912                           
  2913                           ;main.c: 61: stopSignals();
  2914  0041D8  ECB9  F029         	call	_stopSignals	;wreg free
  2915  0041DC                     l491:
  2916  0041DC  D7FF               	goto	l491
  2917  0041DE                     l9509:
  2918  0041DE  0100               	movlb	0	; () banked
  2919  0041E0  51FC               	movf	_machine_state& (0+255),w,b
  2920                           
  2921                           ; Switch size 1, requested type "space"
  2922                           ; Number of cases is 5, Range of values is 0 to 4
  2923                           ; switch strategies available:
  2924                           ; Name         Instructions Cycles
  2925                           ; simple_byte           16     9 (average)
  2926                           ;	Chosen strategy is simple_byte
  2927  0041E2  0A00               	xorlw	0	; case 0
  2928  0041E4  B4D8               	btfsc	status,2,c
  2929  0041E6  D7E3               	goto	l9491
  2930  0041E8  0A01               	xorlw	1	; case 1
  2931  0041EA  B4D8               	btfsc	status,2,c
  2932  0041EC  D7E3               	goto	l9493
  2933  0041EE  0A03               	xorlw	3	; case 2
  2934  0041F0  B4D8               	btfsc	status,2,c
  2935  0041F2  D7E3               	goto	l9495
  2936  0041F4  0A01               	xorlw	1	; case 3
  2937  0041F6  B4D8               	btfsc	status,2,c
  2938  0041F8  D7EC               	goto	l9503
  2939  0041FA  0A07               	xorlw	7	; case 4
  2940  0041FC  B4D8               	btfsc	status,2,c
  2941  0041FE  D7EC               	goto	l9505
  2942                           
  2943                           ; BSR set to: 0
  2944                           
  2945                           ; BSR set to: 0
  2946  004200  D7EE               	goto	l9509
  2947  004202                     __end_of_main:
  2948                           	opt stack 0
  2949                           tblptru	equ	0xFF8
  2950                           tblptrh	equ	0xFF7
  2951                           tblptrl	equ	0xFF6
  2952                           tablat	equ	0xFF5
  2953                           postinc0	equ	0xFEE
  2954                           wreg	equ	0xFE8
  2955                           postdec1	equ	0xFE5
  2956                           fsr1l	equ	0xFE1
  2957                           status	equ	0xFD8
  2958                           
  2959 ;; *************** function _stopSignals *****************
  2960 ;; Defined at:
  2961 ;;		line 70 in file "main.c"
  2962 ;; Parameters:    Size  Location     Type
  2963 ;;		None
  2964 ;; Auto vars:     Size  Location     Type
  2965 ;;		None
  2966 ;; Return value:  Size  Location     Type
  2967 ;;                  1    wreg      void 
  2968 ;; Registers used:
  2969 ;;		wreg, status,2
  2970 ;; Tracked objects:
  2971 ;;		On entry : 0/0
  2972 ;;		On exit  : 0/0
  2973 ;;		Unchanged: 0/0
  2974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2978 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2979 ;;Total ram usage:        0 bytes
  2980 ;; Hardware stack levels used:    1
  2981 ;; Hardware stack levels required when called:    7
  2982 ;; This function calls:
  2983 ;;		Nothing
  2984 ;; This function is called by:
  2985 ;;		_main
  2986 ;; This function uses a non-reentrant model
  2987 ;;
  2988                           
  2989                           	psect	text1
  2990  005372                     __ptext1:
  2991                           	opt stack 0
  2992  005372                     _stopSignals:
  2993                           	opt stack 23
  2994                           
  2995                           ;main.c: 71: LATA = 0x00;
  2996                           
  2997                           ; BSR set to: 0
  2998                           ;incstack = 0
  2999  005372  0E00               	movlw	0
  3000  005374  6E89               	movwf	3977,c	;volatile
  3001                           
  3002                           ;main.c: 72: LATB = 0x00;
  3003  005376  0E00               	movlw	0
  3004  005378  6E8A               	movwf	3978,c	;volatile
  3005                           
  3006                           ;main.c: 73: LATC = 0x00;
  3007  00537A  0E00               	movlw	0
  3008  00537C  6E8B               	movwf	3979,c	;volatile
  3009                           
  3010                           ;main.c: 74: LATD = 0x00;
  3011  00537E  0E00               	movlw	0
  3012  005380  6E8C               	movwf	3980,c	;volatile
  3013                           
  3014                           ;main.c: 75: LATE = 0x00;
  3015  005382  0E00               	movlw	0
  3016  005384  6E8D               	movwf	3981,c	;volatile
  3017                           
  3018                           ;main.c: 76: TMR1ON = 0;
  3019  005386  90CD               	bcf	4045,0,c	;volatile
  3020                           
  3021                           ;main.c: 77: TMR3ON = 0;
  3022  005388  90B1               	bcf	4017,0,c	;volatile
  3023  00538A  0012               	return		;funcret
  3024  00538C                     __end_of_stopSignals:
  3025                           	opt stack 0
  3026                           tblptru	equ	0xFF8
  3027                           tblptrh	equ	0xFF7
  3028                           tblptrl	equ	0xFF6
  3029                           tablat	equ	0xFF5
  3030                           postinc0	equ	0xFEE
  3031                           wreg	equ	0xFE8
  3032                           postdec1	equ	0xFE5
  3033                           fsr1l	equ	0xFE1
  3034                           status	equ	0xFD8
  3035                           
  3036 ;; *************** function _sort *****************
  3037 ;; Defined at:
  3038 ;;		line 63 in file "sort.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;		None
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;		None
  3043 ;; Return value:  Size  Location     Type
  3044 ;;                  1    wreg      void 
  3045 ;; Registers used:
  3046 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3047 ;; Tracked objects:
  3048 ;;		On entry : 0/0
  3049 ;;		On exit  : 0/0
  3050 ;;		Unchanged: 0/0
  3051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3056 ;;Total ram usage:        0 bytes
  3057 ;; Hardware stack levels used:    1
  3058 ;; Hardware stack levels required when called:   12
  3059 ;; This function calls:
  3060 ;;		_Distribution
  3061 ;;		_ID
  3062 ;;		_Loading
  3063 ;; This function is called by:
  3064 ;;		_main
  3065 ;; This function uses a non-reentrant model
  3066 ;;
  3067                           
  3068                           	psect	text2
  3069  0052F4                     __ptext2:
  3070                           	opt stack 0
  3071  0052F4                     _sort:
  3072                           	opt stack 18
  3073                           
  3074                           ;sort.c: 64: if(machine_state == Sorting_state){
  3075                           
  3076                           ;incstack = 0
  3077  0052F4  0100               	movlb	0	; () banked
  3078  0052F6  05FC               	decf	_machine_state& (0+255),w,b
  3079  0052F8  B4D8               	btfsc	status,2,c
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;sort.c: 65: Loading();
  3083  0052FA  ECB6  F008         	call	_Loading	;wreg free
  3084                           
  3085                           ;sort.c: 66: }
  3086                           ;sort.c: 67: if(machine_state == Sorting_state){
  3087  0052FE  0100               	movlb	0	; () banked
  3088  005300  05FC               	decf	_machine_state& (0+255),w,b
  3089  005302  B4D8               	btfsc	status,2,c
  3090                           
  3091                           ; BSR set to: 0
  3092                           ;sort.c: 68: ID();
  3093  005304  EC35  F016         	call	_ID	;wreg free
  3094                           
  3095                           ;sort.c: 69: }
  3096                           ;sort.c: 70: if(machine_state == Sorting_state){
  3097  005308  0100               	movlb	0	; () banked
  3098  00530A  05FC               	decf	_machine_state& (0+255),w,b
  3099  00530C  A4D8               	btfss	status,2,c
  3100  00530E  0012               	return	
  3101                           
  3102                           ; BSR set to: 0
  3103                           ;sort.c: 71: Distribution();
  3104  005310  ECC3  F01F         	call	_Distribution	;wreg free
  3105  005314  0012               	return	
  3106  005316                     __end_of_sort:
  3107                           	opt stack 0
  3108                           tblptru	equ	0xFF8
  3109                           tblptrh	equ	0xFF7
  3110                           tblptrl	equ	0xFF6
  3111                           tablat	equ	0xFF5
  3112                           postinc0	equ	0xFEE
  3113                           wreg	equ	0xFE8
  3114                           postdec1	equ	0xFE5
  3115                           fsr1l	equ	0xFE1
  3116                           status	equ	0xFD8
  3117                           
  3118 ;; *************** function _Loading *****************
  3119 ;; Defined at:
  3120 ;;		line 75 in file "sort.c"
  3121 ;; Parameters:    Size  Location     Type
  3122 ;;		None
  3123 ;; Auto vars:     Size  Location     Type
  3124 ;;  i               2   62[BANK0 ] int 
  3125 ;;  i               2   60[BANK0 ] int 
  3126 ;;  i               2   58[BANK0 ] int 
  3127 ;;  i               2   56[BANK0 ] int 
  3128 ;;  i               2   54[BANK0 ] int 
  3129 ;;  j               2   64[BANK0 ] int 
  3130 ;;  i               2   66[BANK0 ] int 
  3131 ;;  addr            2   51[BANK0 ] unsigned short 
  3132 ;;  byte1           1   53[BANK0 ] unsigned char 
  3133 ;; Return value:  Size  Location     Type
  3134 ;;                  1    wreg      void 
  3135 ;; Registers used:
  3136 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3137 ;; Tracked objects:
  3138 ;;		On entry : 0/0
  3139 ;;		On exit  : 0/0
  3140 ;;		Unchanged: 0/0
  3141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3143 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3144 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3145 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3146 ;;Total ram usage:       19 bytes
  3147 ;; Hardware stack levels used:    1
  3148 ;; Hardware stack levels required when called:   11
  3149 ;; This function calls:
  3150 ;;		_EEPROM_read
  3151 ;;		_EEPROM_write
  3152 ;;		_delay_ms
  3153 ;;		_getIR
  3154 ;;		_getMAG
  3155 ;;		_initGlobalVars
  3156 ;;		_initServos
  3157 ;;		_initSortTimer
  3158 ;;		_lcdInst
  3159 ;;		_readIR
  3160 ;; This function is called by:
  3161 ;;		_sort
  3162 ;; This function uses a non-reentrant model
  3163 ;;
  3164                           
  3165                           	psect	text3
  3166  00116C                     __ptext3:
  3167                           	opt stack 0
  3168  00116C                     _Loading:
  3169                           	opt stack 18
  3170                           
  3171                           ;sort.c: 76: if(first){
  3172                           
  3173                           ;incstack = 0
  3174  00116C  0101               	movlb	1	; () banked
  3175  00116E  5139               	movf	_first& (0+255),w,b
  3176  001170  0101               	movlb	1	; () banked
  3177  001172  113A               	iorwf	(_first+1)& (0+255),w,b
  3178  001174  B4D8               	btfsc	status,2,c
  3179  001176  D066               	goto	l7311
  3180                           
  3181                           ; BSR set to: 1
  3182                           ;sort.c: 77: initGlobalVars();
  3183  001178  ECBE  F021         	call	_initGlobalVars	;wreg free
  3184                           
  3185                           ;sort.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3186  00117C  0E01               	movlw	1
  3187  00117E  ECF8  F029         	call	_lcdInst
  3188  001182  0E68               	movlw	104
  3189  001184  0100               	movlb	0	; () banked
  3190  001186  6FB1               	movwf	??_Loading& (0+255),b
  3191  001188  0EE4               	movlw	228
  3192  00118A                     u8777:
  3193  00118A  2EE8               	decfsz	wreg,f,c
  3194  00118C  D7FE               	bra	u8777
  3195  00118E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3196  001190  D7FC               	bra	u8777
  3197  001192  F000               	nop	
  3198                           
  3199                           ;sort.c: 79: initSortTimer();
  3200  001194  EC14  F022         	call	_initSortTimer	;wreg free
  3201                           
  3202                           ;sort.c: 80: LATCbits.LATC5 = 1;
  3203  001198  8A8B               	bsf	3979,5,c	;volatile
  3204                           
  3205                           ;sort.c: 85: sel = EEPROM_read(0);
  3206  00119A  0E00               	movlw	0
  3207  00119C  0100               	movlb	0	; () banked
  3208  00119E  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3209  0011A0  0E00               	movlw	0
  3210  0011A2  6F80               	movwf	EEPROM_read@address& (0+255),b
  3211  0011A4  ECC6  F029         	call	_EEPROM_read	;wreg free
  3212  0011A8  0100               	movlb	0	; () banked
  3213  0011AA  6FFD               	movwf	_sel& (0+255),b
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;sort.c: 86: unsigned short addr = 1 + 11 * sel;
  3217  0011AC  0100               	movlb	0	; () banked
  3218  0011AE  51FD               	movf	_sel& (0+255),w,b
  3219  0011B0  0D0B               	mullw	11
  3220  0011B2  0E01               	movlw	1
  3221  0011B4  24F3               	addwf	prodl,w,c
  3222  0011B6  0100               	movlb	0	; () banked
  3223  0011B8  6FB3               	movwf	Loading@addr& (0+255),b
  3224  0011BA  0E00               	movlw	0
  3225  0011BC  20F4               	addwfc	prodh,w,c
  3226  0011BE  0100               	movlb	0	; () banked
  3227  0011C0  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;sort.c: 87: unsigned char byte1 = 0b01111111;
  3231  0011C2  0E7F               	movlw	127
  3232  0011C4  0100               	movlb	0	; () banked
  3233  0011C6  6FB5               	movwf	Loading@byte1& (0+255),b
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;sort.c: 88: EEPROM_write(addr, byte1);
  3237  0011C8  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3238  0011CC  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3239  0011D0  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3240  0011D4  EC4F  F01F         	call	_EEPROM_write	;wreg free
  3241                           
  3242                           ;sort.c: 91: LATBbits.LATB2 = 0;
  3243  0011D8  948A               	bcf	3978,2,c	;volatile
  3244                           
  3245                           ;sort.c: 93: for(int i=0; i<46; i++){
  3246  0011DA  0E00               	movlw	0
  3247  0011DC  0100               	movlb	0	; () banked
  3248  0011DE  6FC3               	movwf	(Loading@i+1)& (0+255),b
  3249  0011E0  0E00               	movlw	0
  3250  0011E2  6FC2               	movwf	Loading@i& (0+255),b
  3251                           
  3252                           ; BSR set to: 0
  3253  0011E4  0100               	movlb	0	; () banked
  3254  0011E6  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3255  0011E8  D008               	goto	l7301
  3256  0011EA  0100               	movlb	0	; () banked
  3257  0011EC  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3258  0011EE  E126               	bnz	l754
  3259  0011F0  0E2E               	movlw	46
  3260  0011F2  0100               	movlb	0	; () banked
  3261  0011F4  5DC2               	subwf	Loading@i& (0+255),w,b
  3262  0011F6  B0D8               	btfsc	status,0,c
  3263  0011F8  D021               	goto	l754
  3264  0011FA                     l7301:
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;sort.c: 94: LATBbits.LATB2 = !LATBbits.LATB2;
  3268  0011FA  B48A               	btfsc	3978,2,c	;volatile
  3269  0011FC  D004               	goto	u5700
  3270  0011FE  0100               	movlb	0	; () banked
  3271  001200  6BB1               	clrf	??_Loading& (0+255),b
  3272  001202  2BB1               	incf	??_Loading& (0+255),f,b
  3273  001204  D002               	goto	u5718
  3274  001206                     u5700:
  3275  001206  0100               	movlb	0	; () banked
  3276  001208  6BB1               	clrf	??_Loading& (0+255),b
  3277  00120A                     u5718:
  3278  00120A  0100               	movlb	0	; () banked
  3279  00120C  47B1               	rlncf	??_Loading& (0+255),f,b
  3280  00120E  47B1               	rlncf	??_Loading& (0+255),f,b
  3281  001210  508A               	movf	3978,w,c	;volatile
  3282  001212  0100               	movlb	0	; () banked
  3283  001214  19B1               	xorwf	??_Loading& (0+255),w,b
  3284  001216  0BFB               	andlw	-5
  3285  001218  19B1               	xorwf	??_Loading& (0+255),w,b
  3286  00121A  6E8A               	movwf	3978,c	;volatile
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;sort.c: 95: delay_ms(45-i);
  3290  00121C  0100               	movlb	0	; () banked
  3291  00121E  51C2               	movf	Loading@i& (0+255),w,b
  3292  001220  0800               	sublw	0
  3293  001222  0F2D               	addlw	45
  3294  001224  EC1A  F029         	call	_delay_ms
  3295  001228  0100               	movlb	0	; () banked
  3296  00122A  4BC2               	infsnz	Loading@i& (0+255),f,b
  3297  00122C  2BC3               	incf	(Loading@i+1)& (0+255),f,b
  3298                           
  3299                           ; BSR set to: 0
  3300  00122E  0100               	movlb	0	; () banked
  3301  001230  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3302  001232  D7E3               	goto	l7301
  3303  001234  0100               	movlb	0	; () banked
  3304  001236  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3305  001238  E101               	bnz	u5720
  3306  00123A  D7DA               	goto	L1
  3307  00123C                     u5720:
  3308  00123C                     l754:
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;sort.c: 96: }
  3312                           ;sort.c: 97: LATBbits.LATB2 = 1;
  3313  00123C  848A               	bsf	3978,2,c	;volatile
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;sort.c: 100: initServos();
  3317  00123E  ECE3  F025         	call	_initServos	;wreg free
  3318                           
  3319                           ;sort.c: 101: }
  3320  001242  0012               	return	
  3321  001244                     l7311:
  3322                           
  3323                           ;sort.c: 102: else{
  3324                           ;sort.c: 105: if(!f_loadingNewCan){
  3325  001244  0100               	movlb	0	; () banked
  3326  001246  51F0               	movf	_f_loadingNewCan& (0+255),w,b
  3327  001248  0100               	movlb	0	; () banked
  3328  00124A  11F1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3329  00124C  A4D8               	btfss	status,2,c
  3330  00124E  D018               	goto	l7327
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;sort.c: 107: getIR();
  3334  001250  EC46  F024         	call	_getIR	;wreg free
  3335                           
  3336                           ;sort.c: 109: if(!f_loadingNewCan){
  3337  001254  0100               	movlb	0	; () banked
  3338  001256  51F0               	movf	_f_loadingNewCan& (0+255),w,b
  3339  001258  0100               	movlb	0	; () banked
  3340  00125A  11F1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3341  00125C  B4D8               	btfsc	status,2,c
  3342  00125E  0012               	return	
  3343                           
  3344                           ; BSR set to: 0
  3345                           ;sort.c: 113: else{
  3346                           ;sort.c: 114: count_total++;
  3347                           
  3348                           ; BSR set to: 0
  3349                           
  3350                           ; BSR set to: 0
  3351                           ;sort.c: 111: }
  3352                           
  3353                           ; BSR set to: 0
  3354                           ;sort.c: 110: return;
  3355  001260  0100               	movlb	0	; () banked
  3356  001262  4BFE               	infsnz	_count_total& (0+255),f,b
  3357  001264  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;sort.c: 115: if(count_total == 12){
  3361  001266  0E0C               	movlw	12
  3362  001268  0100               	movlb	0	; () banked
  3363  00126A  19FE               	xorwf	_count_total& (0+255),w,b
  3364  00126C  0100               	movlb	0	; () banked
  3365  00126E  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3366  001270  A4D8               	btfss	status,2,c
  3367  001272  0012               	return	
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;sort.c: 116: f_lastCan = 1;
  3371  001274  0E00               	movlw	0
  3372  001276  0100               	movlb	0	; () banked
  3373  001278  6FEF               	movwf	(_f_lastCan+1)& (0+255),b
  3374  00127A  0E01               	movlw	1
  3375  00127C  6FEE               	movwf	_f_lastCan& (0+255),b
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;sort.c: 117: }
  3379                           ;sort.c: 118: }
  3380                           ;sort.c: 119: }
  3381                           
  3382                           ; BSR set to: 0
  3383  00127E  0012               	return	
  3384  001280                     l7327:
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;sort.c: 122: else if(f_ID_receive){
  3388  001280  0101               	movlb	1	; () banked
  3389  001282  512F               	movf	_f_ID_receive& (0+255),w,b
  3390  001284  0101               	movlb	1	; () banked
  3391  001286  1130               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3392  001288  B4D8               	btfsc	status,2,c
  3393  00128A  0012               	return	
  3394                           
  3395                           ; BSR set to: 1
  3396                           ;sort.c: 123: f_most_recent_sort_time = 1;
  3397  00128C  0E00               	movlw	0
  3398  00128E  0101               	movlb	1	; () banked
  3399  001290  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3400  001292  0E01               	movlw	1
  3401  001294  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  3402                           
  3403                           ;sort.c: 124: f_loadingNewCan = 0;
  3404  001296  0E00               	movlw	0
  3405  001298  0100               	movlb	0	; () banked
  3406  00129A  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3407  00129C  0E00               	movlw	0
  3408  00129E  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;sort.c: 125: _delay((unsigned long)((750)*(32000000/4000.0)));
  3412  0012A0  0E1F               	movlw	31
  3413  0012A2  0100               	movlb	0	; () banked
  3414  0012A4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3415  0012A6  0E71               	movlw	113
  3416  0012A8  0100               	movlb	0	; () banked
  3417  0012AA  6FB1               	movwf	??_Loading& (0+255),b
  3418  0012AC  0E1E               	movlw	30
  3419  0012AE                     u8787:
  3420  0012AE  2EE8               	decfsz	wreg,f,c
  3421  0012B0  D7FE               	bra	u8787
  3422  0012B2  2FB1               	decfsz	??_Loading& (0+255),f,b
  3423  0012B4  D7FC               	bra	u8787
  3424  0012B6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3425  0012B8  D7FA               	bra	u8787
  3426  0012BA  F000               	nop	
  3427                           
  3428                           ;sort.c: 126: LATBbits.LATB2 = 0;
  3429  0012BC  948A               	bcf	3978,2,c	;volatile
  3430                           
  3431                           ;sort.c: 130: getMAG();
  3432  0012BE  EC89  F027         	call	_getMAG	;wreg free
  3433                           
  3434                           ;sort.c: 131: sensor_outputs[0] = MAG_signal;
  3435  0012C2  C0E8  F0E2         	movff	_MAG_signal,_sensor_outputs
  3436  0012C6  C0E9  F0E3         	movff	_MAG_signal+1,_sensor_outputs+1
  3437                           
  3438                           ;sort.c: 133: if(sensor_outputs[0]){
  3439  0012CA  0100               	movlb	0	; () banked
  3440  0012CC  51E2               	movf	_sensor_outputs& (0+255),w,b
  3441  0012CE  0100               	movlb	0	; () banked
  3442  0012D0  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3443  0012D2  B4D8               	btfsc	status,2,c
  3444  0012D4  D01D               	goto	l7353
  3445                           
  3446                           ; BSR set to: 0
  3447                           ;sort.c: 134: for(int i = 0; i<2500; i++){
  3448  0012D6  0E00               	movlw	0
  3449  0012D8  0100               	movlb	0	; () banked
  3450  0012DA  6FB7               	movwf	(Loading@i_1149+1)& (0+255),b
  3451  0012DC  0E00               	movlw	0
  3452  0012DE  6FB6               	movwf	Loading@i_1149& (0+255),b
  3453  0012E0                     l7343:
  3454                           
  3455                           ; BSR set to: 0
  3456  0012E0  0100               	movlb	0	; () banked
  3457  0012E2  BFB7               	btfsc	(Loading@i_1149+1)& (0+255),7,b
  3458  0012E4  D008               	goto	l764
  3459  0012E6  0EC4               	movlw	196
  3460  0012E8  0100               	movlb	0	; () banked
  3461  0012EA  5DB6               	subwf	Loading@i_1149& (0+255),w,b
  3462  0012EC  0E09               	movlw	9
  3463  0012EE  0100               	movlb	0	; () banked
  3464  0012F0  59B7               	subwfb	(Loading@i_1149+1)& (0+255),w,b
  3465  0012F2  B0D8               	btfsc	status,0,c
  3466  0012F4  D02A               	goto	l7365
  3467  0012F6                     l764:
  3468                           
  3469                           ; BSR set to: 0
  3470                           ;sort.c: 135: LATAbits.LATA4 = 1;
  3471  0012F6  8889               	bsf	3977,4,c	;volatile
  3472                           
  3473                           ; BSR set to: 0
  3474                           ;sort.c: 136: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3475  0012F8  0EC8               	movlw	200
  3476  0012FA                     u8797:
  3477  0012FA  2EE8               	decfsz	wreg,f,c
  3478  0012FC  D7FE               	bra	u8797
  3479                           
  3480                           ;sort.c: 137: LATAbits.LATA4 = 0;
  3481  0012FE  9889               	bcf	3977,4,c	;volatile
  3482                           
  3483                           ;sort.c: 138: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3484  001300  0E42               	movlw	66
  3485  001302                     u8807:
  3486  001302  2EE8               	decfsz	wreg,f,c
  3487  001304  D7FE               	bra	u8807
  3488  001306  D000               	nop2	
  3489  001308  0100               	movlb	0	; () banked
  3490  00130A  4BB6               	infsnz	Loading@i_1149& (0+255),f,b
  3491  00130C  2BB7               	incf	(Loading@i_1149+1)& (0+255),f,b
  3492  00130E  D7E8               	goto	l7343
  3493  001310                     l7353:
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;sort.c: 141: else{
  3497                           ;sort.c: 142: for(int i = 0; i<2500; i++){
  3498  001310  0E00               	movlw	0
  3499  001312  0100               	movlb	0	; () banked
  3500  001314  6FB9               	movwf	(Loading@i_1158+1)& (0+255),b
  3501  001316  0E00               	movlw	0
  3502  001318  6FB8               	movwf	Loading@i_1158& (0+255),b
  3503  00131A                     l7355:
  3504                           
  3505                           ; BSR set to: 0
  3506  00131A  0100               	movlb	0	; () banked
  3507  00131C  BFB9               	btfsc	(Loading@i_1158+1)& (0+255),7,b
  3508  00131E  D008               	goto	l767
  3509  001320  0EC4               	movlw	196
  3510  001322  0100               	movlb	0	; () banked
  3511  001324  5DB8               	subwf	Loading@i_1158& (0+255),w,b
  3512  001326  0E09               	movlw	9
  3513  001328  0100               	movlb	0	; () banked
  3514  00132A  59B9               	subwfb	(Loading@i_1158+1)& (0+255),w,b
  3515  00132C  B0D8               	btfsc	status,0,c
  3516  00132E  D00D               	goto	l7365
  3517  001330                     l767:
  3518                           
  3519                           ; BSR set to: 0
  3520                           ;sort.c: 143: LATAbits.LATA4 = 1;
  3521  001330  8889               	bsf	3977,4,c	;volatile
  3522                           
  3523                           ; BSR set to: 0
  3524                           ;sort.c: 144: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3525  001332  0E9A               	movlw	154
  3526  001334                     u8817:
  3527  001334  2EE8               	decfsz	wreg,f,c
  3528  001336  D7FE               	bra	u8817
  3529  001338  D000               	nop2	
  3530                           
  3531                           ;sort.c: 145: LATAbits.LATA4 = 0;
  3532  00133A  9889               	bcf	3977,4,c	;volatile
  3533                           
  3534                           ;sort.c: 146: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3535  00133C  0E70               	movlw	112
  3536  00133E                     u8827:
  3537  00133E  2EE8               	decfsz	wreg,f,c
  3538  001340  D7FE               	bra	u8827
  3539  001342  0100               	movlb	0	; () banked
  3540  001344  4BB8               	infsnz	Loading@i_1158& (0+255),f,b
  3541  001346  2BB9               	incf	(Loading@i_1158+1)& (0+255),f,b
  3542  001348  D7E8               	goto	l7355
  3543  00134A                     l7365:
  3544                           
  3545                           ; BSR set to: 0
  3546                           ;sort.c: 147: }
  3547                           ;sort.c: 148: }
  3548                           ;sort.c: 150: _delay((unsigned long)((350)*(32000000/4000.0)));
  3549  00134A  0E0F               	movlw	15
  3550  00134C  0100               	movlb	0	; () banked
  3551  00134E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3552  001350  0E35               	movlw	53
  3553  001352  0100               	movlb	0	; () banked
  3554  001354  6FB1               	movwf	??_Loading& (0+255),b
  3555  001356  0E51               	movlw	81
  3556  001358                     u8837:
  3557  001358  2EE8               	decfsz	wreg,f,c
  3558  00135A  D7FE               	bra	u8837
  3559  00135C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3560  00135E  D7FC               	bra	u8837
  3561  001360  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3562  001362  D7FA               	bra	u8837
  3563                           
  3564                           ;sort.c: 152: readIR();
  3565  001364  EC8B  F026         	call	_readIR	;wreg free
  3566                           
  3567                           ;sort.c: 153: if(IR_signal==1){
  3568  001368  0100               	movlb	0	; () banked
  3569  00136A  05E6               	decf	_IR_signal& (0+255),w,b
  3570  00136C  0100               	movlb	0	; () banked
  3571  00136E  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3572  001370  A4D8               	btfss	status,2,c
  3573  001372  D148               	goto	l7483
  3574                           
  3575                           ; BSR set to: 0
  3576                           ;sort.c: 154: _delay((unsigned long)((100)*(32000000/4000.0)));
  3577  001374  0E05               	movlw	5
  3578  001376  0100               	movlb	0	; () banked
  3579  001378  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3580  00137A  0E0F               	movlw	15
  3581  00137C  0100               	movlb	0	; () banked
  3582  00137E  6FB1               	movwf	??_Loading& (0+255),b
  3583  001380  0EF1               	movlw	241
  3584  001382                     u8847:
  3585  001382  2EE8               	decfsz	wreg,f,c
  3586  001384  D7FE               	bra	u8847
  3587  001386  2FB1               	decfsz	??_Loading& (0+255),f,b
  3588  001388  D7FC               	bra	u8847
  3589  00138A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3590  00138C  D7FA               	bra	u8847
  3591                           
  3592                           ;sort.c: 155: readIR();
  3593  00138E  EC8B  F026         	call	_readIR	;wreg free
  3594                           
  3595                           ;sort.c: 156: if(IR_signal==1){
  3596  001392  0100               	movlb	0	; () banked
  3597  001394  05E6               	decf	_IR_signal& (0+255),w,b
  3598  001396  0100               	movlb	0	; () banked
  3599  001398  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3600  00139A  A4D8               	btfss	status,2,c
  3601  00139C  D040               	goto	l7403
  3602                           
  3603                           ; BSR set to: 0
  3604                           ;sort.c: 157: if(sensor_outputs[0]){
  3605  00139E  0100               	movlb	0	; () banked
  3606  0013A0  51E2               	movf	_sensor_outputs& (0+255),w,b
  3607  0013A2  0100               	movlb	0	; () banked
  3608  0013A4  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3609  0013A6  B4D8               	btfsc	status,2,c
  3610  0013A8  D01D               	goto	l7391
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;sort.c: 158: for(int i = 0; i<2500; i++){
  3614  0013AA  0E00               	movlw	0
  3615  0013AC  0100               	movlb	0	; () banked
  3616  0013AE  6FBB               	movwf	(Loading@i_1160+1)& (0+255),b
  3617  0013B0  0E00               	movlw	0
  3618  0013B2  6FBA               	movwf	Loading@i_1160& (0+255),b
  3619  0013B4                     l7381:
  3620                           
  3621                           ; BSR set to: 0
  3622  0013B4  0100               	movlb	0	; () banked
  3623  0013B6  BFBB               	btfsc	(Loading@i_1160+1)& (0+255),7,b
  3624  0013B8  D008               	goto	l772
  3625  0013BA  0EC4               	movlw	196
  3626  0013BC  0100               	movlb	0	; () banked
  3627  0013BE  5DBA               	subwf	Loading@i_1160& (0+255),w,b
  3628  0013C0  0E09               	movlw	9
  3629  0013C2  0100               	movlb	0	; () banked
  3630  0013C4  59BB               	subwfb	(Loading@i_1160+1)& (0+255),w,b
  3631  0013C6  B0D8               	btfsc	status,0,c
  3632  0013C8  D02A               	goto	l7403
  3633  0013CA                     l772:
  3634                           
  3635                           ; BSR set to: 0
  3636                           ;sort.c: 159: LATAbits.LATA4 = 1;
  3637  0013CA  8889               	bsf	3977,4,c	;volatile
  3638                           
  3639                           ; BSR set to: 0
  3640                           ;sort.c: 160: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3641  0013CC  0EC8               	movlw	200
  3642  0013CE                     u8857:
  3643  0013CE  2EE8               	decfsz	wreg,f,c
  3644  0013D0  D7FE               	bra	u8857
  3645                           
  3646                           ;sort.c: 161: LATAbits.LATA4 = 0;
  3647  0013D2  9889               	bcf	3977,4,c	;volatile
  3648                           
  3649                           ;sort.c: 162: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3650  0013D4  0E42               	movlw	66
  3651  0013D6                     u8867:
  3652  0013D6  2EE8               	decfsz	wreg,f,c
  3653  0013D8  D7FE               	bra	u8867
  3654  0013DA  D000               	nop2	
  3655  0013DC  0100               	movlb	0	; () banked
  3656  0013DE  4BBA               	infsnz	Loading@i_1160& (0+255),f,b
  3657  0013E0  2BBB               	incf	(Loading@i_1160+1)& (0+255),f,b
  3658  0013E2  D7E8               	goto	l7381
  3659  0013E4                     l7391:
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;sort.c: 165: else{
  3663                           ;sort.c: 166: for(int i = 0; i<2500; i++){
  3664  0013E4  0E00               	movlw	0
  3665  0013E6  0100               	movlb	0	; () banked
  3666  0013E8  6FBD               	movwf	(Loading@i_1161+1)& (0+255),b
  3667  0013EA  0E00               	movlw	0
  3668  0013EC  6FBC               	movwf	Loading@i_1161& (0+255),b
  3669  0013EE                     l7393:
  3670                           
  3671                           ; BSR set to: 0
  3672  0013EE  0100               	movlb	0	; () banked
  3673  0013F0  BFBD               	btfsc	(Loading@i_1161+1)& (0+255),7,b
  3674  0013F2  D008               	goto	l775
  3675  0013F4  0EC4               	movlw	196
  3676  0013F6  0100               	movlb	0	; () banked
  3677  0013F8  5DBC               	subwf	Loading@i_1161& (0+255),w,b
  3678  0013FA  0E09               	movlw	9
  3679  0013FC  0100               	movlb	0	; () banked
  3680  0013FE  59BD               	subwfb	(Loading@i_1161+1)& (0+255),w,b
  3681  001400  B0D8               	btfsc	status,0,c
  3682  001402  D00D               	goto	l7403
  3683  001404                     l775:
  3684                           
  3685                           ; BSR set to: 0
  3686                           ;sort.c: 167: LATAbits.LATA4 = 1;
  3687  001404  8889               	bsf	3977,4,c	;volatile
  3688                           
  3689                           ; BSR set to: 0
  3690                           ;sort.c: 168: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3691  001406  0E9A               	movlw	154
  3692  001408                     u8877:
  3693  001408  2EE8               	decfsz	wreg,f,c
  3694  00140A  D7FE               	bra	u8877
  3695  00140C  D000               	nop2	
  3696                           
  3697                           ;sort.c: 169: LATAbits.LATA4 = 0;
  3698  00140E  9889               	bcf	3977,4,c	;volatile
  3699                           
  3700                           ;sort.c: 170: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3701  001410  0E70               	movlw	112
  3702  001412                     u8887:
  3703  001412  2EE8               	decfsz	wreg,f,c
  3704  001414  D7FE               	bra	u8887
  3705  001416  0100               	movlb	0	; () banked
  3706  001418  4BBC               	infsnz	Loading@i_1161& (0+255),f,b
  3707  00141A  2BBD               	incf	(Loading@i_1161+1)& (0+255),f,b
  3708  00141C  D7E8               	goto	l7393
  3709  00141E                     l7403:
  3710                           
  3711                           ; BSR set to: 0
  3712                           ;sort.c: 171: }
  3713                           ;sort.c: 172: }
  3714                           ;sort.c: 173: }
  3715                           ;sort.c: 175: _delay((unsigned long)((350)*(32000000/4000.0)));
  3716  00141E  0E0F               	movlw	15
  3717  001420  0100               	movlb	0	; () banked
  3718  001422  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3719  001424  0E35               	movlw	53
  3720  001426  0100               	movlb	0	; () banked
  3721  001428  6FB1               	movwf	??_Loading& (0+255),b
  3722  00142A  0E51               	movlw	81
  3723  00142C                     u8897:
  3724  00142C  2EE8               	decfsz	wreg,f,c
  3725  00142E  D7FE               	bra	u8897
  3726  001430  2FB1               	decfsz	??_Loading& (0+255),f,b
  3727  001432  D7FC               	bra	u8897
  3728  001434  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3729  001436  D7FA               	bra	u8897
  3730                           
  3731                           ;sort.c: 177: int j = 1;
  3732  001438  0E00               	movlw	0
  3733  00143A  0100               	movlb	0	; () banked
  3734  00143C  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3735  00143E  0E01               	movlw	1
  3736  001440  6FC0               	movwf	Loading@j& (0+255),b
  3737                           
  3738                           ;sort.c: 178: while(IR_signal == 1){
  3739  001442  D0D9               	goto	l7481
  3740  001444                     l7407:
  3741                           
  3742                           ; BSR set to: 0
  3743                           ;sort.c: 179: readIR();
  3744  001444  EC8B  F026         	call	_readIR	;wreg free
  3745                           
  3746                           ;sort.c: 180: if(j == 10){
  3747  001448  0E0A               	movlw	10
  3748  00144A  0100               	movlb	0	; () banked
  3749  00144C  19C0               	xorwf	Loading@j& (0+255),w,b
  3750  00144E  0100               	movlb	0	; () banked
  3751  001450  11C1               	iorwf	(Loading@j+1)& (0+255),w,b
  3752  001452  A4D8               	btfss	status,2,c
  3753  001454  D016               	goto	l7415
  3754                           
  3755                           ; BSR set to: 0
  3756                           ;sort.c: 181: LATBbits.LATB2 = !LATBbits.LATB2;
  3757  001456  B48A               	btfsc	3978,2,c	;volatile
  3758  001458  D004               	goto	u5900
  3759  00145A  0100               	movlb	0	; () banked
  3760  00145C  6BB1               	clrf	??_Loading& (0+255),b
  3761  00145E  2BB1               	incf	??_Loading& (0+255),f,b
  3762  001460  D002               	goto	u5918
  3763  001462                     u5900:
  3764  001462  0100               	movlb	0	; () banked
  3765  001464  6BB1               	clrf	??_Loading& (0+255),b
  3766  001466                     u5918:
  3767  001466  0100               	movlb	0	; () banked
  3768  001468  47B1               	rlncf	??_Loading& (0+255),f,b
  3769  00146A  47B1               	rlncf	??_Loading& (0+255),f,b
  3770  00146C  508A               	movf	3978,w,c	;volatile
  3771  00146E  0100               	movlb	0	; () banked
  3772  001470  19B1               	xorwf	??_Loading& (0+255),w,b
  3773  001472  0BFB               	andlw	-5
  3774  001474  19B1               	xorwf	??_Loading& (0+255),w,b
  3775  001476  6E8A               	movwf	3978,c	;volatile
  3776                           
  3777                           ; BSR set to: 0
  3778                           ;sort.c: 182: j = 0;
  3779  001478  0E00               	movlw	0
  3780  00147A  0100               	movlb	0	; () banked
  3781  00147C  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3782  00147E  0E00               	movlw	0
  3783  001480  6FC0               	movwf	Loading@j& (0+255),b
  3784  001482                     l7415:
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;sort.c: 183: }
  3788                           ;sort.c: 184: if(IR_signal==1){
  3789  001482  0100               	movlb	0	; () banked
  3790  001484  05E6               	decf	_IR_signal& (0+255),w,b
  3791  001486  0100               	movlb	0	; () banked
  3792  001488  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3793  00148A  A4D8               	btfss	status,2,c
  3794  00148C  D098               	goto	l7469
  3795                           
  3796                           ; BSR set to: 0
  3797                           ;sort.c: 185: _delay((unsigned long)((350)*(32000000/4000.0)));
  3798  00148E  0E0F               	movlw	15
  3799  001490  0100               	movlb	0	; () banked
  3800  001492  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3801  001494  0E35               	movlw	53
  3802  001496  0100               	movlb	0	; () banked
  3803  001498  6FB1               	movwf	??_Loading& (0+255),b
  3804  00149A  0E51               	movlw	81
  3805  00149C                     u8907:
  3806  00149C  2EE8               	decfsz	wreg,f,c
  3807  00149E  D7FE               	bra	u8907
  3808  0014A0  2FB1               	decfsz	??_Loading& (0+255),f,b
  3809  0014A2  D7FC               	bra	u8907
  3810  0014A4  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3811  0014A6  D7FA               	bra	u8907
  3812                           
  3813                           ;sort.c: 186: readIR();
  3814  0014A8  EC8B  F026         	call	_readIR	;wreg free
  3815                           
  3816                           ;sort.c: 187: if(IR_signal==1){
  3817  0014AC  0100               	movlb	0	; () banked
  3818  0014AE  05E6               	decf	_IR_signal& (0+255),w,b
  3819  0014B0  0100               	movlb	0	; () banked
  3820  0014B2  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3821  0014B4  A4D8               	btfss	status,2,c
  3822  0014B6  D07F               	goto	l781
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;sort.c: 188: if(sensor_outputs[0]){
  3826  0014B8  0100               	movlb	0	; () banked
  3827  0014BA  51E2               	movf	_sensor_outputs& (0+255),w,b
  3828  0014BC  0100               	movlb	0	; () banked
  3829  0014BE  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3830  0014C0  B4D8               	btfsc	status,2,c
  3831  0014C2  D011               	goto	l7431
  3832                           
  3833                           ; BSR set to: 0
  3834                           ;sort.c: 189: LATAbits.LATA4 = 1;
  3835  0014C4  8889               	bsf	3977,4,c	;volatile
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;sort.c: 190: _delay((unsigned long)((250)*(32000000/4000.0)));
  3839  0014C6  0E0B               	movlw	11
  3840  0014C8  0100               	movlb	0	; () banked
  3841  0014CA  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3842  0014CC  0E26               	movlw	38
  3843  0014CE  0100               	movlb	0	; () banked
  3844  0014D0  6FB1               	movwf	??_Loading& (0+255),b
  3845  0014D2  0E5D               	movlw	93
  3846  0014D4                     u8917:
  3847  0014D4  2EE8               	decfsz	wreg,f,c
  3848  0014D6  D7FE               	bra	u8917
  3849  0014D8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3850  0014DA  D7FC               	bra	u8917
  3851  0014DC  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3852  0014DE  D7FA               	bra	u8917
  3853  0014E0  D000               	nop2	
  3854                           
  3855                           ;sort.c: 191: LATAbits.LATA4 = 0;
  3856  0014E2  9889               	bcf	3977,4,c	;volatile
  3857                           
  3858                           ;sort.c: 192: }
  3859  0014E4  D068               	goto	l781
  3860  0014E6                     l7431:
  3861                           
  3862                           ;sort.c: 193: else{
  3863                           ;sort.c: 194: for(int i = 0; i<2500; i++){
  3864  0014E6  0E00               	movlw	0
  3865  0014E8  0100               	movlb	0	; () banked
  3866  0014EA  6FBF               	movwf	(Loading@i_1163+1)& (0+255),b
  3867  0014EC  0E00               	movlw	0
  3868  0014EE  6FBE               	movwf	Loading@i_1163& (0+255),b
  3869  0014F0                     l7433:
  3870                           
  3871                           ; BSR set to: 0
  3872  0014F0  0100               	movlb	0	; () banked
  3873  0014F2  BFBF               	btfsc	(Loading@i_1163+1)& (0+255),7,b
  3874  0014F4  D041               	goto	l7461
  3875  0014F6  0EC4               	movlw	196
  3876  0014F8  0100               	movlb	0	; () banked
  3877  0014FA  5DBE               	subwf	Loading@i_1163& (0+255),w,b
  3878  0014FC  0E09               	movlw	9
  3879  0014FE  0100               	movlb	0	; () banked
  3880  001500  59BF               	subwfb	(Loading@i_1163+1)& (0+255),w,b
  3881  001502  B0D8               	btfsc	status,0,c
  3882  001504  D058               	goto	l781
  3883  001506  D038               	goto	l7461
  3884  001508                     l787:
  3885                           
  3886                           ; BSR set to: 0
  3887                           ;sort.c: 197: LATAbits.LATA4 = 1;
  3888  001508  8889               	bsf	3977,4,c	;volatile
  3889                           
  3890                           ; BSR set to: 0
  3891                           ;sort.c: 198: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3892  00150A  0EC8               	movlw	200
  3893  00150C                     u8927:
  3894  00150C  2EE8               	decfsz	wreg,f,c
  3895  00150E  D7FE               	bra	u8927
  3896                           
  3897                           ;sort.c: 199: LATAbits.LATA4 = 0;
  3898  001510  9889               	bcf	3977,4,c	;volatile
  3899                           
  3900                           ;sort.c: 200: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3901  001512  0E42               	movlw	66
  3902  001514                     u8937:
  3903  001514  2EE8               	decfsz	wreg,f,c
  3904  001516  D7FE               	bra	u8937
  3905  001518  D01C               	goto	L2
  3906  00151A                     l789:
  3907                           
  3908                           ; BSR set to: 0
  3909                           ;sort.c: 203: LATAbits.LATA4 = 1;
  3910  00151A  8889               	bsf	3977,4,c	;volatile
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;sort.c: 204: _delay((unsigned long)((80)*(32000000/4000000.0)));
  3914  00151C  0ED5               	movlw	213
  3915  00151E                     u8947:
  3916  00151E  2EE8               	decfsz	wreg,f,c
  3917  001520  D7FE               	bra	u8947
  3918  001522  F000               	nop	
  3919                           
  3920                           ;sort.c: 205: LATAbits.LATA4 = 0;
  3921  001524  9889               	bcf	3977,4,c	;volatile
  3922                           
  3923                           ;sort.c: 206: _delay((unsigned long)((20)*(32000000/4000000.0)));
  3924  001526  0E35               	movlw	53
  3925  001528                     u8957:
  3926  001528  2EE8               	decfsz	wreg,f,c
  3927  00152A  D7FE               	bra	u8957
  3928  00152C  D01D               	goto	L3
  3929  00152E                     l790:
  3930                           
  3931                           ; BSR set to: 0
  3932                           ;sort.c: 209: LATAbits.LATA4 = 1;
  3933  00152E  8889               	bsf	3977,4,c	;volatile
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;sort.c: 210: _delay((unsigned long)((85)*(32000000/4000000.0)));
  3937  001530  0EE2               	movlw	226
  3938  001532                     u8967:
  3939  001532  2EE8               	decfsz	wreg,f,c
  3940  001534  D7FE               	bra	u8967
  3941  001536  D000               	nop2	
  3942                           
  3943                           ;sort.c: 211: LATAbits.LATA4 = 0;
  3944  001538  9889               	bcf	3977,4,c	;volatile
  3945                           
  3946                           ;sort.c: 212: _delay((unsigned long)((15)*(32000000/4000000.0)));
  3947  00153A  0E28               	movlw	40
  3948  00153C                     u8977:
  3949  00153C  2EE8               	decfsz	wreg,f,c
  3950  00153E  D7FE               	bra	u8977
  3951                           
  3952                           ;sort.c: 213: break;
  3953  001540  D036               	goto	l7463
  3954  001542                     l791:
  3955                           
  3956                           ; BSR set to: 0
  3957                           ;sort.c: 215: LATAbits.LATA4 = 1;
  3958  001542  8889               	bsf	3977,4,c	;volatile
  3959                           
  3960                           ; BSR set to: 0
  3961                           ;sort.c: 216: _delay((unsigned long)((90)*(32000000/4000000.0)));
  3962  001544  0EF0               	movlw	240
  3963  001546                     u8987:
  3964  001546  2EE8               	decfsz	wreg,f,c
  3965  001548  D7FE               	bra	u8987
  3966                           
  3967                           ;sort.c: 217: LATAbits.LATA4 = 0;
  3968  00154A  9889               	bcf	3977,4,c	;volatile
  3969                           
  3970                           ;sort.c: 218: _delay((unsigned long)((10)*(32000000/4000000.0)));
  3971  00154C  0E1A               	movlw	26
  3972  00154E                     u8997:
  3973  00154E  2EE8               	decfsz	wreg,f,c
  3974  001550  D7FE               	bra	u8997
  3975  001552                     L2:
  3976  001552  D000               	nop2	
  3977                           
  3978                           ;sort.c: 219: break;
  3979  001554  D02C               	goto	l7463
  3980  001556                     l792:
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;sort.c: 221: LATAbits.LATA4 = 1;
  3984  001556  8889               	bsf	3977,4,c	;volatile
  3985                           
  3986                           ; BSR set to: 0
  3987                           ;sort.c: 222: _delay((unsigned long)((95)*(32000000/4000000.0)));
  3988  001558  0EFD               	movlw	253
  3989  00155A                     u9007:
  3990  00155A  2EE8               	decfsz	wreg,f,c
  3991  00155C  D7FE               	bra	u9007
  3992  00155E  F000               	nop	
  3993                           
  3994                           ;sort.c: 223: LATAbits.LATA4 = 0;
  3995  001560  9889               	bcf	3977,4,c	;volatile
  3996                           
  3997                           ;sort.c: 224: _delay((unsigned long)((5)*(32000000/4000000.0)));
  3998  001562  0E0D               	movlw	13
  3999  001564                     u9017:
  4000  001564  2EE8               	decfsz	wreg,f,c
  4001  001566  D7FE               	bra	u9017
  4002  001568                     L3:
  4003  001568  F000               	nop	
  4004                           
  4005                           ;sort.c: 225: break;
  4006  00156A  D021               	goto	l7463
  4007  00156C                     l793:
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;sort.c: 227: LATAbits.LATA4 = 1;
  4011  00156C  8889               	bsf	3977,4,c	;volatile
  4012                           
  4013                           ; BSR set to: 0
  4014                           ;sort.c: 228: _delay((unsigned long)((100)*(32000000/4000000.0)));
  4015  00156E  0EA0               	movlw	160
  4016  001570                     u9027:
  4017  001570  D000               	nop2	
  4018  001572  2EE8               	decfsz	wreg,f,c
  4019  001574  D7FD               	bra	u9027
  4020                           
  4021                           ;sort.c: 230: }
  4022                           
  4023                           ;sort.c: 229: break;
  4024  001576  D01B               	goto	l7463
  4025  001578                     l7461:
  4026  001578  C0C0  F0B1         	movff	Loading@j,??_Loading
  4027  00157C  C0C1  F0B2         	movff	Loading@j+1,??_Loading+1
  4028                           
  4029                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4030                           ; Switch size 1, requested type "space"
  4031                           ; Number of cases is 1, Range of values is 0 to 0
  4032                           ; switch strategies available:
  4033                           ; Name         Instructions Cycles
  4034                           ; simple_byte            4     3 (average)
  4035                           ;	Chosen strategy is simple_byte
  4036  001580  0100               	movlb	0	; () banked
  4037  001582  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4038  001584  0A00               	xorlw	0	; case 0
  4039  001586  A4D8               	btfss	status,2,c
  4040  001588  D7F1               	goto	l793
  4041                           
  4042                           ; BSR set to: 0
  4043                           ; Switch size 1, requested type "space"
  4044                           ; Number of cases is 5, Range of values is 1 to 5
  4045                           ; switch strategies available:
  4046                           ; Name         Instructions Cycles
  4047                           ; simple_byte           16     9 (average)
  4048                           ;	Chosen strategy is simple_byte
  4049  00158A  0100               	movlb	0	; () banked
  4050  00158C  51B1               	movf	??_Loading& (0+255),w,b
  4051  00158E  0A01               	xorlw	1	; case 1
  4052  001590  B4D8               	btfsc	status,2,c
  4053  001592  D7BA               	goto	l787
  4054  001594  0A03               	xorlw	3	; case 2
  4055  001596  B4D8               	btfsc	status,2,c
  4056  001598  D7C0               	goto	l789
  4057  00159A  0A01               	xorlw	1	; case 3
  4058  00159C  B4D8               	btfsc	status,2,c
  4059  00159E  D7C7               	goto	l790
  4060  0015A0  0A07               	xorlw	7	; case 4
  4061  0015A2  B4D8               	btfsc	status,2,c
  4062  0015A4  D7CE               	goto	l791
  4063  0015A6  0A01               	xorlw	1	; case 5
  4064  0015A8  B4D8               	btfsc	status,2,c
  4065  0015AA  D7D5               	goto	l792
  4066  0015AC  D7DF               	goto	l793
  4067  0015AE                     l7463:
  4068  0015AE  0100               	movlb	0	; () banked
  4069  0015B0  4BBE               	infsnz	Loading@i_1163& (0+255),f,b
  4070  0015B2  2BBF               	incf	(Loading@i_1163+1)& (0+255),f,b
  4071  0015B4  D79D               	goto	l7433
  4072  0015B6                     l781:
  4073                           
  4074                           ;sort.c: 231: }
  4075                           ;sort.c: 232: }
  4076                           ;sort.c: 233: }
  4077                           ;sort.c: 234: LATAbits.LATA4 = 0;
  4078  0015B6  9889               	bcf	3977,4,c	;volatile
  4079                           
  4080                           ;sort.c: 235: j++;
  4081  0015B8  0100               	movlb	0	; () banked
  4082  0015BA  4BC0               	infsnz	Loading@j& (0+255),f,b
  4083  0015BC  2BC1               	incf	(Loading@j+1)& (0+255),f,b
  4084  0015BE                     l7469:
  4085                           
  4086                           ; BSR set to: 0
  4087                           ;sort.c: 236: }
  4088                           ;sort.c: 238: if(!IR_signal){
  4089  0015BE  0100               	movlb	0	; () banked
  4090  0015C0  51E6               	movf	_IR_signal& (0+255),w,b
  4091  0015C2  0100               	movlb	0	; () banked
  4092  0015C4  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4093  0015C6  A4D8               	btfss	status,2,c
  4094  0015C8  D016               	goto	l7481
  4095                           
  4096                           ; BSR set to: 0
  4097                           ;sort.c: 239: _delay((unsigned long)((500)*(32000000/4000.0)));
  4098  0015CA  0E15               	movlw	21
  4099  0015CC  0100               	movlb	0	; () banked
  4100  0015CE  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4101  0015D0  0E4B               	movlw	75
  4102  0015D2  0100               	movlb	0	; () banked
  4103  0015D4  6FB1               	movwf	??_Loading& (0+255),b
  4104  0015D6  0EBE               	movlw	190
  4105  0015D8                     u9037:
  4106  0015D8  2EE8               	decfsz	wreg,f,c
  4107  0015DA  D7FE               	bra	u9037
  4108  0015DC  2FB1               	decfsz	??_Loading& (0+255),f,b
  4109  0015DE  D7FC               	bra	u9037
  4110  0015E0  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4111  0015E2  D7FA               	bra	u9037
  4112  0015E4  F000               	nop	
  4113                           
  4114                           ;sort.c: 240: readIR();
  4115  0015E6  EC8B  F026         	call	_readIR	;wreg free
  4116                           
  4117                           ;sort.c: 241: if(IR_signal==1){
  4118  0015EA  0100               	movlb	0	; () banked
  4119  0015EC  05E6               	decf	_IR_signal& (0+255),w,b
  4120  0015EE  0100               	movlb	0	; () banked
  4121  0015F0  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4122  0015F2  A4D8               	btfss	status,2,c
  4123  0015F4  D006               	goto	l797
  4124  0015F6                     l7481:
  4125                           
  4126                           ; BSR set to: 0
  4127  0015F6  0100               	movlb	0	; () banked
  4128  0015F8  05E6               	decf	_IR_signal& (0+255),w,b
  4129  0015FA  0100               	movlb	0	; () banked
  4130  0015FC  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4131  0015FE  B4D8               	btfsc	status,2,c
  4132  001600  D721               	goto	l7407
  4133  001602                     l797:
  4134                           
  4135                           ; BSR set to: 0
  4136                           ;sort.c: 246: }
  4137                           ;sort.c: 247: }
  4138                           ;sort.c: 248: }
  4139                           ;sort.c: 249: LATBbits.LATB2 = 0;
  4140  001602  948A               	bcf	3978,2,c	;volatile
  4141  001604                     l7483:
  4142                           
  4143                           ; BSR set to: 0
  4144                           ;sort.c: 250: }
  4145                           ;sort.c: 251: f_can_coming_to_ID = 1;
  4146  001604  0E00               	movlw	0
  4147  001606  0101               	movlb	1	; () banked
  4148  001608  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4149  00160A  0E01               	movlw	1
  4150  00160C  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4151                           
  4152                           ; BSR set to: 1
  4153                           
  4154                           ; BSR set to: 1
  4155  00160E  0012               	return	
  4156  001610                     __end_of_Loading:
  4157                           	opt stack 0
  4158                           tblptru	equ	0xFF8
  4159                           tblptrh	equ	0xFF7
  4160                           tblptrl	equ	0xFF6
  4161                           tablat	equ	0xFF5
  4162                           prodh	equ	0xFF4
  4163                           prodl	equ	0xFF3
  4164                           postinc0	equ	0xFEE
  4165                           wreg	equ	0xFE8
  4166                           postdec1	equ	0xFE5
  4167                           fsr1l	equ	0xFE1
  4168                           status	equ	0xFD8
  4169                           
  4170 ;; *************** function _initSortTimer *****************
  4171 ;; Defined at:
  4172 ;;		line 408 in file "sort.c"
  4173 ;; Parameters:    Size  Location     Type
  4174 ;;		None
  4175 ;; Auto vars:     Size  Location     Type
  4176 ;;  i               2    8[BANK0 ] int 
  4177 ;; Return value:  Size  Location     Type
  4178 ;;                  1    wreg      void 
  4179 ;; Registers used:
  4180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4181 ;; Tracked objects:
  4182 ;;		On entry : 0/0
  4183 ;;		On exit  : 0/0
  4184 ;;		Unchanged: 0/0
  4185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4187 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4188 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4189 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4190 ;;Total ram usage:        5 bytes
  4191 ;; Hardware stack levels used:    1
  4192 ;; Hardware stack levels required when called:   10
  4193 ;; This function calls:
  4194 ;;		_getRTC
  4195 ;; This function is called by:
  4196 ;;		_Loading
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           	psect	text4
  4201  004428                     __ptext4:
  4202                           	opt stack 0
  4203  004428                     _initSortTimer:
  4204                           	opt stack 18
  4205                           
  4206                           ;sort.c: 410: getRTC();
  4207                           
  4208                           ;incstack = 0
  4209  004428  EC00  F023         	call	_getRTC	;wreg free
  4210                           
  4211                           ;sort.c: 411: for(int i = 0; i < 7; i++){
  4212  00442C  0E00               	movlw	0
  4213  00442E  0100               	movlb	0	; () banked
  4214  004430  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4215  004432  0E00               	movlw	0
  4216  004434  6F88               	movwf	initSortTimer@i& (0+255),b
  4217  004436                     l6885:
  4218                           
  4219                           ; BSR set to: 0
  4220  004436  0100               	movlb	0	; () banked
  4221  004438  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4222  00443A  D008               	goto	l6889
  4223  00443C  0100               	movlb	0	; () banked
  4224  00443E  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4225  004440  E140               	bnz	l6895
  4226  004442  0E07               	movlw	7
  4227  004444  0100               	movlb	0	; () banked
  4228  004446  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4229  004448  B0D8               	btfsc	status,0,c
  4230  00444A  D03B               	goto	l6895
  4231  00444C                     l6889:
  4232                           
  4233                           ; BSR set to: 0
  4234                           ;sort.c: 412: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4235  00444C  0E1C               	movlw	low _time
  4236  00444E  0100               	movlb	0	; () banked
  4237  004450  2588               	addwf	initSortTimer@i& (0+255),w,b
  4238  004452  6ED9               	movwf	fsr2l,c
  4239  004454  0E01               	movlw	high _time
  4240  004456  0100               	movlb	0	; () banked
  4241  004458  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4242  00445A  6EDA               	movwf	fsr2h,c
  4243  00445C  50DF               	movf	indf2,w,c
  4244  00445E  0100               	movlb	0	; () banked
  4245  004460  6F85               	movwf	??_initSortTimer& (0+255),b
  4246  004462  0100               	movlb	0	; () banked
  4247  004464  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4248  004466  0E0F               	movlw	15
  4249  004468  1785               	andwf	??_initSortTimer& (0+255),f,b
  4250  00446A  0E0F               	movlw	15
  4251  00446C  0100               	movlb	0	; () banked
  4252  00446E  1785               	andwf	??_initSortTimer& (0+255),f,b
  4253  004470  0100               	movlb	0	; () banked
  4254  004472  5185               	movf	??_initSortTimer& (0+255),w,b
  4255  004474  0D0A               	mullw	10
  4256  004476  0E1C               	movlw	low _time
  4257  004478  0100               	movlb	0	; () banked
  4258  00447A  2588               	addwf	initSortTimer@i& (0+255),w,b
  4259  00447C  6ED9               	movwf	fsr2l,c
  4260  00447E  0E01               	movlw	high _time
  4261  004480  0100               	movlb	0	; () banked
  4262  004482  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4263  004484  6EDA               	movwf	fsr2h,c
  4264  004486  50DF               	movf	indf2,w,c
  4265  004488  0B0F               	andlw	15
  4266  00448A  0100               	movlb	0	; () banked
  4267  00448C  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4268  00448E  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4269  004490  50F3               	movf	prodl,w,c
  4270  004492  0100               	movlb	0	; () banked
  4271  004494  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4272  004496  50F4               	movf	prodh,w,c
  4273  004498  0100               	movlb	0	; () banked
  4274  00449A  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4275  00449C  90D8               	bcf	status,0,c
  4276  00449E  0100               	movlb	0	; () banked
  4277  0044A0  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4278  0044A2  6ED9               	movwf	fsr2l,c
  4279  0044A4  0100               	movlb	0	; () banked
  4280  0044A6  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4281  0044A8  6EDA               	movwf	fsr2h,c
  4282  0044AA  0E0E               	movlw	low _startTime
  4283  0044AC  26D9               	addwf	fsr2l,f,c
  4284  0044AE  0E01               	movlw	high _startTime
  4285  0044B0  22DA               	addwfc	fsr2h,f,c
  4286  0044B2  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4287  0044B6  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4288                           
  4289                           ; BSR set to: 0
  4290  0044BA  0100               	movlb	0	; () banked
  4291  0044BC  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4292  0044BE  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4293  0044C0  D7BA               	goto	l6885
  4294  0044C2                     l6895:
  4295                           
  4296                           ; BSR set to: 0
  4297                           ;sort.c: 413: }
  4298                           ;sort.c: 415: T0CON = 0b00010111;
  4299  0044C2  0E17               	movlw	23
  4300  0044C4  6ED5               	movwf	4053,c	;volatile
  4301                           
  4302                           ;sort.c: 424: TMR0H = 0b10000101;
  4303  0044C6  0E85               	movlw	133
  4304  0044C8  6ED7               	movwf	4055,c	;volatile
  4305                           
  4306                           ;sort.c: 425: TMR0L = 0b11101110;
  4307  0044CA  0EEE               	movlw	238
  4308  0044CC  6ED6               	movwf	4054,c	;volatile
  4309                           
  4310                           ; BSR set to: 0
  4311                           ;sort.c: 426: TMR0ON = 1;
  4312  0044CE  8ED5               	bsf	4053,7,c	;volatile
  4313                           
  4314                           ; BSR set to: 0
  4315  0044D0  0012               	return		;funcret
  4316  0044D2                     __end_of_initSortTimer:
  4317                           	opt stack 0
  4318                           tblptru	equ	0xFF8
  4319                           tblptrh	equ	0xFF7
  4320                           tblptrl	equ	0xFF6
  4321                           tablat	equ	0xFF5
  4322                           prodh	equ	0xFF4
  4323                           prodl	equ	0xFF3
  4324                           postinc0	equ	0xFEE
  4325                           wreg	equ	0xFE8
  4326                           postdec1	equ	0xFE5
  4327                           fsr1l	equ	0xFE1
  4328                           indf2	equ	0xFDF
  4329                           postinc2	equ	0xFDE
  4330                           postdec2	equ	0xFDD
  4331                           fsr2h	equ	0xFDA
  4332                           fsr2l	equ	0xFD9
  4333                           status	equ	0xFD8
  4334                           
  4335 ;; *************** function _initGlobalVars *****************
  4336 ;; Defined at:
  4337 ;;		line 378 in file "sort.c"
  4338 ;; Parameters:    Size  Location     Type
  4339 ;;		None
  4340 ;; Auto vars:     Size  Location     Type
  4341 ;;		None
  4342 ;; Return value:  Size  Location     Type
  4343 ;;                  1    wreg      void 
  4344 ;; Registers used:
  4345 ;;		wreg, status,2
  4346 ;; Tracked objects:
  4347 ;;		On entry : 0/0
  4348 ;;		On exit  : 0/0
  4349 ;;		Unchanged: 0/0
  4350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4355 ;;Total ram usage:        0 bytes
  4356 ;; Hardware stack levels used:    1
  4357 ;; Hardware stack levels required when called:    7
  4358 ;; This function calls:
  4359 ;;		Nothing
  4360 ;; This function is called by:
  4361 ;;		_Loading
  4362 ;; This function uses a non-reentrant model
  4363 ;;
  4364                           
  4365                           	psect	text5
  4366  00437C                     __ptext5:
  4367                           	opt stack 0
  4368  00437C                     _initGlobalVars:
  4369                           	opt stack 21
  4370                           
  4371                           ;sort.c: 380: first = 0;
  4372                           
  4373                           ; BSR set to: 0
  4374                           ;incstack = 0
  4375  00437C  0E00               	movlw	0
  4376  00437E  0101               	movlb	1	; () banked
  4377  004380  6F3A               	movwf	(_first+1)& (0+255),b
  4378  004382  0E00               	movlw	0
  4379  004384  6F39               	movwf	_first& (0+255),b
  4380                           
  4381                           ;sort.c: 383: f_loadingNewCan = 0;
  4382  004386  0E00               	movlw	0
  4383  004388  0100               	movlb	0	; () banked
  4384  00438A  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4385  00438C  0E00               	movlw	0
  4386  00438E  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  4387                           
  4388                           ;sort.c: 384: f_lastCan = 0;
  4389  004390  0E00               	movlw	0
  4390  004392  0100               	movlb	0	; () banked
  4391  004394  6FEF               	movwf	(_f_lastCan+1)& (0+255),b
  4392  004396  0E00               	movlw	0
  4393  004398  6FEE               	movwf	_f_lastCan& (0+255),b
  4394                           
  4395                           ;sort.c: 385: f_ID_receive = 1;
  4396  00439A  0E00               	movlw	0
  4397  00439C  0101               	movlb	1	; () banked
  4398  00439E  6F30               	movwf	(_f_ID_receive+1)& (0+255),b
  4399  0043A0  0E01               	movlw	1
  4400  0043A2  6F2F               	movwf	_f_ID_receive& (0+255),b
  4401                           
  4402                           ;sort.c: 386: f_can_coming_to_ID = 0;
  4403  0043A4  0E00               	movlw	0
  4404  0043A6  0101               	movlb	1	; () banked
  4405  0043A8  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4406  0043AA  0E00               	movlw	0
  4407  0043AC  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4408                           
  4409                           ;sort.c: 387: f_can_coming_to_distribution = 0;
  4410  0043AE  0E00               	movlw	0
  4411  0043B0  0101               	movlb	1	; () banked
  4412  0043B2  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4413  0043B4  0E00               	movlw	0
  4414  0043B6  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  4415                           
  4416                           ;sort.c: 388: f_can_distributed = 1;
  4417  0043B8  0E00               	movlw	0
  4418  0043BA  0101               	movlb	1	; () banked
  4419  0043BC  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  4420  0043BE  0E01               	movlw	1
  4421  0043C0  6F35               	movwf	_f_can_distributed& (0+255),b
  4422                           
  4423                           ;sort.c: 389: f_most_recent_sort_time = 0;
  4424  0043C2  0E00               	movlw	0
  4425  0043C4  0101               	movlb	1	; () banked
  4426  0043C6  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4427  0043C8  0E00               	movlw	0
  4428  0043CA  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  4429                           
  4430                           ;sort.c: 392: count_total = 0;
  4431  0043CC  0E00               	movlw	0
  4432  0043CE  0100               	movlb	0	; () banked
  4433  0043D0  6FFF               	movwf	(_count_total+1)& (0+255),b
  4434  0043D2  0E00               	movlw	0
  4435  0043D4  6FFE               	movwf	_count_total& (0+255),b
  4436                           
  4437                           ;sort.c: 393: count_pop_no_tab = 0;
  4438  0043D6  0E00               	movlw	0
  4439  0043D8  0101               	movlb	1	; () banked
  4440  0043DA  6F28               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4441  0043DC  0E00               	movlw	0
  4442  0043DE  6F27               	movwf	_count_pop_no_tab& (0+255),b
  4443                           
  4444                           ;sort.c: 394: count_pop_w_tab = 0;
  4445  0043E0  0E00               	movlw	0
  4446  0043E2  0101               	movlb	1	; () banked
  4447  0043E4  6F2A               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4448  0043E6  0E00               	movlw	0
  4449  0043E8  6F29               	movwf	_count_pop_w_tab& (0+255),b
  4450                           
  4451                           ;sort.c: 395: count_can_w_lab = 0;
  4452  0043EA  0E00               	movlw	0
  4453  0043EC  0101               	movlb	1	; () banked
  4454  0043EE  6F26               	movwf	(_count_can_w_lab+1)& (0+255),b
  4455  0043F0  0E00               	movlw	0
  4456  0043F2  6F25               	movwf	_count_can_w_lab& (0+255),b
  4457                           
  4458                           ;sort.c: 396: count_can_no_lab = 0;
  4459  0043F4  0E00               	movlw	0
  4460  0043F6  0101               	movlb	1	; () banked
  4461  0043F8  6F24               	movwf	(_count_can_no_lab+1)& (0+255),b
  4462  0043FA  0E00               	movlw	0
  4463  0043FC  6F23               	movwf	_count_can_no_lab& (0+255),b
  4464                           
  4465                           ;sort.c: 399: most_recent_sort_time = 999;
  4466  0043FE  0E03               	movlw	3
  4467  004400  6E6E               	movwf	_most_recent_sort_time+1,c
  4468  004402  0EE7               	movlw	231
  4469  004404  6E6D               	movwf	_most_recent_sort_time,c
  4470                           
  4471                           ;sort.c: 402: servo_timer_counter = 0;
  4472  004406  0E00               	movlw	0
  4473  004408  6E72               	movwf	_servo_timer_counter+1,c	;volatile
  4474  00440A  0E00               	movlw	0
  4475  00440C  6E71               	movwf	_servo_timer_counter,c	;volatile
  4476                           
  4477                           ;sort.c: 403: servo_timer_target = 9999;
  4478  00440E  0E27               	movlw	39
  4479  004410  6E74               	movwf	_servo_timer_target+1,c	;volatile
  4480  004412  0E0F               	movlw	15
  4481  004414  6E73               	movwf	_servo_timer_target,c	;volatile
  4482                           
  4483                           ; BSR set to: 1
  4484                           ;sort.c: 404: pan_servo_state = -1;
  4485  004416  686F               	setf	_pan_servo_state,c	;volatile
  4486  004418  6870               	setf	_pan_servo_state+1,c	;volatile
  4487                           
  4488                           ; BSR set to: 1
  4489                           ;sort.c: 405: tilt_servo_state = -1;
  4490  00441A  6875               	setf	_tilt_servo_state,c	;volatile
  4491  00441C  6876               	setf	_tilt_servo_state+1,c	;volatile
  4492                           
  4493                           ;sort.c: 406: f_panning_to_bin = 0;
  4494  00441E  0E00               	movlw	0
  4495  004420  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  4496  004422  0E00               	movlw	0
  4497  004424  6E61               	movwf	_f_panning_to_bin,c	;volatile
  4498                           
  4499                           ; BSR set to: 1
  4500  004426  0012               	return		;funcret
  4501  004428                     __end_of_initGlobalVars:
  4502                           	opt stack 0
  4503                           tblptru	equ	0xFF8
  4504                           tblptrh	equ	0xFF7
  4505                           tblptrl	equ	0xFF6
  4506                           tablat	equ	0xFF5
  4507                           prodh	equ	0xFF4
  4508                           prodl	equ	0xFF3
  4509                           postinc0	equ	0xFEE
  4510                           wreg	equ	0xFE8
  4511                           postdec1	equ	0xFE5
  4512                           fsr1l	equ	0xFE1
  4513                           indf2	equ	0xFDF
  4514                           postinc2	equ	0xFDE
  4515                           postdec2	equ	0xFDD
  4516                           fsr2h	equ	0xFDA
  4517                           fsr2l	equ	0xFD9
  4518                           status	equ	0xFD8
  4519                           
  4520 ;; *************** function _getMAG *****************
  4521 ;; Defined at:
  4522 ;;		line 496 in file "sort.c"
  4523 ;; Parameters:    Size  Location     Type
  4524 ;;		None
  4525 ;; Auto vars:     Size  Location     Type
  4526 ;;		None
  4527 ;; Return value:  Size  Location     Type
  4528 ;;                  1    wreg      void 
  4529 ;; Registers used:
  4530 ;;		wreg, status,2, status,0, cstack
  4531 ;; Tracked objects:
  4532 ;;		On entry : 0/0
  4533 ;;		On exit  : 0/0
  4534 ;;		Unchanged: 0/0
  4535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4538 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4539 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4540 ;;Total ram usage:        2 bytes
  4541 ;; Hardware stack levels used:    1
  4542 ;; Hardware stack levels required when called:    9
  4543 ;; This function calls:
  4544 ;;		_readMAG
  4545 ;; This function is called by:
  4546 ;;		_Loading
  4547 ;; This function uses a non-reentrant model
  4548 ;;
  4549                           
  4550                           	psect	text6
  4551  004F12                     __ptext6:
  4552                           	opt stack 0
  4553  004F12                     _getMAG:
  4554                           	opt stack 19
  4555                           
  4556                           ;sort.c: 497: readMAG();
  4557                           
  4558                           ; BSR set to: 1
  4559                           ;incstack = 0
  4560  004F12  ECB1  F026         	call	_readMAG	;wreg free
  4561                           
  4562                           ;sort.c: 499: if(MAG_signal==1){
  4563  004F16  0100               	movlb	0	; () banked
  4564  004F18  05E8               	decf	_MAG_signal& (0+255),w,b
  4565  004F1A  0100               	movlb	0	; () banked
  4566  004F1C  11E9               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4567  004F1E  A4D8               	btfss	status,2,c
  4568  004F20  0012               	return	
  4569                           
  4570                           ; BSR set to: 0
  4571                           ;sort.c: 500: _delay((unsigned long)((500)*(32000000/4000.0)));
  4572  004F22  0E15               	movlw	21
  4573  004F24  0100               	movlb	0	; () banked
  4574  004F26  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4575  004F28  0E4B               	movlw	75
  4576  004F2A  0100               	movlb	0	; () banked
  4577  004F2C  6F86               	movwf	??_getMAG& (0+255),b
  4578  004F2E  0EBE               	movlw	190
  4579  004F30                     u9047:
  4580  004F30  2EE8               	decfsz	wreg,f,c
  4581  004F32  D7FE               	bra	u9047
  4582  004F34  2F86               	decfsz	??_getMAG& (0+255),f,b
  4583  004F36  D7FC               	bra	u9047
  4584  004F38  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4585  004F3A  D7FA               	bra	u9047
  4586  004F3C  F000               	nop	
  4587                           
  4588                           ;sort.c: 501: readMAG();
  4589  004F3E  ECB1  F026         	call	_readMAG	;wreg free
  4590  004F42  0012               	return	
  4591  004F44                     __end_of_getMAG:
  4592                           	opt stack 0
  4593                           tblptru	equ	0xFF8
  4594                           tblptrh	equ	0xFF7
  4595                           tblptrl	equ	0xFF6
  4596                           tablat	equ	0xFF5
  4597                           prodh	equ	0xFF4
  4598                           prodl	equ	0xFF3
  4599                           postinc0	equ	0xFEE
  4600                           wreg	equ	0xFE8
  4601                           postdec1	equ	0xFE5
  4602                           fsr1l	equ	0xFE1
  4603                           indf2	equ	0xFDF
  4604                           postinc2	equ	0xFDE
  4605                           postdec2	equ	0xFDD
  4606                           fsr2h	equ	0xFDA
  4607                           fsr2l	equ	0xFD9
  4608                           status	equ	0xFD8
  4609                           
  4610 ;; *************** function _getIR *****************
  4611 ;; Defined at:
  4612 ;;		line 480 in file "sort.c"
  4613 ;; Parameters:    Size  Location     Type
  4614 ;;		None
  4615 ;; Auto vars:     Size  Location     Type
  4616 ;;  i               2    7[BANK0 ] int 
  4617 ;; Return value:  Size  Location     Type
  4618 ;;                  1    wreg      void 
  4619 ;; Registers used:
  4620 ;;		wreg, status,2, status,0, cstack
  4621 ;; Tracked objects:
  4622 ;;		On entry : 0/0
  4623 ;;		On exit  : 0/0
  4624 ;;		Unchanged: 0/0
  4625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4627 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4628 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4629 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4630 ;;Total ram usage:        3 bytes
  4631 ;; Hardware stack levels used:    1
  4632 ;; Hardware stack levels required when called:    9
  4633 ;; This function calls:
  4634 ;;		_readIR
  4635 ;; This function is called by:
  4636 ;;		_Loading
  4637 ;; This function uses a non-reentrant model
  4638 ;;
  4639                           
  4640                           	psect	text7
  4641  00488C                     __ptext7:
  4642                           	opt stack 0
  4643  00488C                     _getIR:
  4644                           	opt stack 19
  4645                           
  4646                           ;sort.c: 481: readIR();
  4647                           
  4648                           ;incstack = 0
  4649  00488C  EC8B  F026         	call	_readIR	;wreg free
  4650                           
  4651                           ;sort.c: 482: for(int i = 0; i < 150; i++){
  4652  004890  0E00               	movlw	0
  4653  004892  0100               	movlb	0	; () banked
  4654  004894  6F88               	movwf	(getIR@i+1)& (0+255),b
  4655  004896  0E00               	movlw	0
  4656  004898  6F87               	movwf	getIR@i& (0+255),b
  4657  00489A                     l6977:
  4658                           
  4659                           ; BSR set to: 0
  4660  00489A  0100               	movlb	0	; () banked
  4661  00489C  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4662  00489E  D008               	goto	l6981
  4663  0048A0  0100               	movlb	0	; () banked
  4664  0048A2  5188               	movf	(getIR@i+1)& (0+255),w,b
  4665  0048A4  E11A               	bnz	l6993
  4666  0048A6  0E96               	movlw	150
  4667  0048A8  0100               	movlb	0	; () banked
  4668  0048AA  5D87               	subwf	getIR@i& (0+255),w,b
  4669  0048AC  B0D8               	btfsc	status,0,c
  4670  0048AE  D015               	goto	l6993
  4671  0048B0                     l6981:
  4672                           
  4673                           ; BSR set to: 0
  4674                           ;sort.c: 483: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4675  0048B0  0E06               	movlw	6
  4676  0048B2  0100               	movlb	0	; () banked
  4677  0048B4  6F86               	movwf	??_getIR& (0+255),b
  4678  0048B6  0E30               	movlw	48
  4679  0048B8                     u9057:
  4680  0048B8  2EE8               	decfsz	wreg,f,c
  4681  0048BA  D7FE               	bra	u9057
  4682  0048BC  2F86               	decfsz	??_getIR& (0+255),f,b
  4683  0048BE  D7FC               	bra	u9057
  4684  0048C0  F000               	nop	
  4685                           
  4686                           ;sort.c: 484: readIR();
  4687  0048C2  EC8B  F026         	call	_readIR	;wreg free
  4688                           
  4689                           ;sort.c: 485: if(!IR_signal){
  4690  0048C6  0100               	movlb	0	; () banked
  4691  0048C8  51E6               	movf	_IR_signal& (0+255),w,b
  4692  0048CA  0100               	movlb	0	; () banked
  4693  0048CC  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4694  0048CE  B4D8               	btfsc	status,2,c
  4695  0048D0  D004               	goto	l6993
  4696                           
  4697                           ; BSR set to: 0
  4698                           
  4699                           ; BSR set to: 0
  4700                           
  4701                           ; BSR set to: 0
  4702                           ;sort.c: 486: break;
  4703  0048D2  0100               	movlb	0	; () banked
  4704  0048D4  4B87               	infsnz	getIR@i& (0+255),f,b
  4705  0048D6  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4706  0048D8  D7E0               	goto	l6977
  4707  0048DA                     l6993:
  4708                           
  4709                           ; BSR set to: 0
  4710                           ;sort.c: 487: }
  4711                           ;sort.c: 488: }
  4712                           ;sort.c: 489: if(IR_signal==1){
  4713  0048DA  0100               	movlb	0	; () banked
  4714  0048DC  05E6               	decf	_IR_signal& (0+255),w,b
  4715  0048DE  0100               	movlb	0	; () banked
  4716  0048E0  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4717  0048E2  A4D8               	btfss	status,2,c
  4718  0048E4  D006               	goto	l6997
  4719                           
  4720                           ; BSR set to: 0
  4721                           ;sort.c: 490: f_loadingNewCan = 1;
  4722  0048E6  0E00               	movlw	0
  4723  0048E8  0100               	movlb	0	; () banked
  4724  0048EA  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4725  0048EC  0E01               	movlw	1
  4726  0048EE  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  4727                           
  4728                           ;sort.c: 491: }
  4729  0048F0  0012               	return	
  4730  0048F2                     l6997:
  4731                           
  4732                           ; BSR set to: 0
  4733                           ;sort.c: 492: else{
  4734                           ;sort.c: 493: f_loadingNewCan = 0;
  4735  0048F2  0E00               	movlw	0
  4736  0048F4  0100               	movlb	0	; () banked
  4737  0048F6  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4738  0048F8  0E00               	movlw	0
  4739  0048FA  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  4740  0048FC  0012               	return	
  4741  0048FE                     __end_of_getIR:
  4742                           	opt stack 0
  4743                           tblptru	equ	0xFF8
  4744                           tblptrh	equ	0xFF7
  4745                           tblptrl	equ	0xFF6
  4746                           tablat	equ	0xFF5
  4747                           prodh	equ	0xFF4
  4748                           prodl	equ	0xFF3
  4749                           postinc0	equ	0xFEE
  4750                           wreg	equ	0xFE8
  4751                           postdec1	equ	0xFE5
  4752                           fsr1l	equ	0xFE1
  4753                           indf2	equ	0xFDF
  4754                           postinc2	equ	0xFDE
  4755                           postdec2	equ	0xFDD
  4756                           fsr2h	equ	0xFDA
  4757                           fsr2l	equ	0xFD9
  4758                           status	equ	0xFD8
  4759                           
  4760 ;; *************** function _readIR *****************
  4761 ;; Defined at:
  4762 ;;		line 23 in file "ADCFunctionality.c"
  4763 ;; Parameters:    Size  Location     Type
  4764 ;;		None
  4765 ;; Auto vars:     Size  Location     Type
  4766 ;;  res             2    4[BANK0 ] int 
  4767 ;; Return value:  Size  Location     Type
  4768 ;;                  1    wreg      void 
  4769 ;; Registers used:
  4770 ;;		wreg, status,2, status,0, cstack
  4771 ;; Tracked objects:
  4772 ;;		On entry : 0/0
  4773 ;;		On exit  : 0/0
  4774 ;;		Unchanged: 0/0
  4775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4777 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4778 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4779 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4780 ;;Total ram usage:        4 bytes
  4781 ;; Hardware stack levels used:    1
  4782 ;; Hardware stack levels required when called:    8
  4783 ;; This function calls:
  4784 ;;		_readADC
  4785 ;; This function is called by:
  4786 ;;		_Loading
  4787 ;;		_getIR
  4788 ;; This function uses a non-reentrant model
  4789 ;;
  4790                           
  4791                           	psect	text8
  4792  004D16                     __ptext8:
  4793                           	opt stack 0
  4794  004D16                     _readIR:
  4795                           	opt stack 20
  4796                           
  4797                           ;ADCFunctionality.c: 24: readADC(0);
  4798                           
  4799                           ; BSR set to: 0
  4800                           ;incstack = 0
  4801  004D16  0E00               	movlw	0
  4802  004D18  ECEF  F028         	call	_readADC
  4803                           
  4804                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  4805  004D1C  50C3               	movf	4035,w,c	;volatile
  4806  004D1E  CFC4 F082          	movff	4036,??_readIR	;volatile
  4807  004D22  0100               	movlb	0	; () banked
  4808  004D24  6B83               	clrf	(??_readIR+1)& (0+255),b
  4809  004D26  C082  F083         	movff	??_readIR,??_readIR+1
  4810  004D2A  0100               	movlb	0	; () banked
  4811  004D2C  6B82               	clrf	??_readIR& (0+255),b
  4812  004D2E  0100               	movlb	0	; () banked
  4813  004D30  1182               	iorwf	??_readIR& (0+255),w,b
  4814  004D32  0100               	movlb	0	; () banked
  4815  004D34  6F84               	movwf	readIR@res& (0+255),b
  4816  004D36  0100               	movlb	0	; () banked
  4817  004D38  5183               	movf	(??_readIR+1)& (0+255),w,b
  4818  004D3A  0100               	movlb	0	; () banked
  4819  004D3C  6F85               	movwf	(readIR@res+1)& (0+255),b
  4820                           
  4821                           ; BSR set to: 0
  4822                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  4823  004D3E  0100               	movlb	0	; () banked
  4824  004D40  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  4825  004D42  D00A               	goto	u4640
  4826  004D44  0E21               	movlw	33
  4827  004D46  0100               	movlb	0	; () banked
  4828  004D48  5D84               	subwf	readIR@res& (0+255),w,b
  4829  004D4A  0E03               	movlw	3
  4830  004D4C  0100               	movlb	0	; () banked
  4831  004D4E  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  4832  004D50  A0D8               	btfss	status,0,c
  4833  004D52  D002               	goto	u4640
  4834  004D54  0E01               	movlw	1
  4835  004D56  D001               	goto	u4650
  4836  004D58                     u4640:
  4837  004D58  0E00               	movlw	0
  4838  004D5A                     u4650:
  4839  004D5A  0100               	movlb	0	; () banked
  4840  004D5C  6FE6               	movwf	_IR_signal& (0+255),b
  4841  004D5E  6BE7               	clrf	(_IR_signal+1)& (0+255),b
  4842                           
  4843                           ; BSR set to: 0
  4844  004D60  0012               	return		;funcret
  4845  004D62                     __end_of_readIR:
  4846                           	opt stack 0
  4847                           tblptru	equ	0xFF8
  4848                           tblptrh	equ	0xFF7
  4849                           tblptrl	equ	0xFF6
  4850                           tablat	equ	0xFF5
  4851                           prodh	equ	0xFF4
  4852                           prodl	equ	0xFF3
  4853                           postinc0	equ	0xFEE
  4854                           wreg	equ	0xFE8
  4855                           postdec1	equ	0xFE5
  4856                           fsr1l	equ	0xFE1
  4857                           indf2	equ	0xFDF
  4858                           postinc2	equ	0xFDE
  4859                           postdec2	equ	0xFDD
  4860                           fsr2h	equ	0xFDA
  4861                           fsr2l	equ	0xFD9
  4862                           status	equ	0xFD8
  4863                           
  4864 ;; *************** function _ID *****************
  4865 ;; Defined at:
  4866 ;;		line 255 in file "sort.c"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;		None
  4869 ;; Auto vars:     Size  Location     Type
  4870 ;;  i               2    8[BANK0 ] int 
  4871 ;;  i               2    6[BANK0 ] int 
  4872 ;;  i               2    4[BANK0 ] int 
  4873 ;; Return value:  Size  Location     Type
  4874 ;;                  1    wreg      void 
  4875 ;; Registers used:
  4876 ;;		wreg, status,2, status,0, cstack
  4877 ;; Tracked objects:
  4878 ;;		On entry : 0/0
  4879 ;;		On exit  : 0/0
  4880 ;;		Unchanged: 0/0
  4881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4883 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4884 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4885 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4886 ;;Total ram usage:        8 bytes
  4887 ;; Hardware stack levels used:    1
  4888 ;; Hardware stack levels required when called:    8
  4889 ;; This function calls:
  4890 ;;		_delay_ms
  4891 ;; This function is called by:
  4892 ;;		_sort
  4893 ;; This function uses a non-reentrant model
  4894 ;;
  4895                           
  4896                           	psect	text9
  4897  002C6A                     __ptext9:
  4898                           	opt stack 0
  4899  002C6A                     _ID:
  4900                           	opt stack 21
  4901                           
  4902                           ;sort.c: 256: if(f_can_coming_to_ID){
  4903                           
  4904                           ; BSR set to: 0
  4905                           ;incstack = 0
  4906  002C6A  0101               	movlb	1	; () banked
  4907  002C6C  5131               	movf	_f_can_coming_to_ID& (0+255),w,b
  4908  002C6E  0101               	movlb	1	; () banked
  4909  002C70  1132               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  4910  002C72  B4D8               	btfsc	status,2,c
  4911  002C74  0012               	return	
  4912                           
  4913                           ; BSR set to: 1
  4914                           ;sort.c: 258: _delay((unsigned long)((1000)*(32000000/4000.0)));
  4915  002C76  0E29               	movlw	41
  4916  002C78  0100               	movlb	0	; () banked
  4917  002C7A  6F83               	movwf	(??_ID+1)& (0+255),b
  4918  002C7C  0E96               	movlw	150
  4919  002C7E  0100               	movlb	0	; () banked
  4920  002C80  6F82               	movwf	??_ID& (0+255),b
  4921  002C82  0E7F               	movlw	127
  4922  002C84                     u9067:
  4923  002C84  2EE8               	decfsz	wreg,f,c
  4924  002C86  D7FE               	bra	u9067
  4925  002C88  2F82               	decfsz	??_ID& (0+255),f,b
  4926  002C8A  D7FC               	bra	u9067
  4927  002C8C  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4928  002C8E  D7FA               	bra	u9067
  4929                           
  4930                           ;sort.c: 260: LATAbits.LATA3 = 1;
  4931  002C90  8689               	bsf	3977,3,c	;volatile
  4932                           
  4933                           ;sort.c: 261: _delay((unsigned long)((600)*(32000000/4000.0)));
  4934  002C92  0E19               	movlw	25
  4935  002C94  0100               	movlb	0	; () banked
  4936  002C96  6F83               	movwf	(??_ID+1)& (0+255),b
  4937  002C98  0E5A               	movlw	90
  4938  002C9A  0100               	movlb	0	; () banked
  4939  002C9C  6F82               	movwf	??_ID& (0+255),b
  4940  002C9E  0EB1               	movlw	177
  4941  002CA0                     u9077:
  4942  002CA0  2EE8               	decfsz	wreg,f,c
  4943  002CA2  D7FE               	bra	u9077
  4944  002CA4  2F82               	decfsz	??_ID& (0+255),f,b
  4945  002CA6  D7FC               	bra	u9077
  4946  002CA8  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4947  002CAA  D7FA               	bra	u9077
  4948  002CAC  D000               	nop2	
  4949                           
  4950                           ;sort.c: 262: sensor_outputs[1] = PORTAbits.RA2;
  4951  002CAE  A480               	btfss	3968,2,c	;volatile
  4952  002CB0  D004               	goto	u6010
  4953  002CB2  0100               	movlb	0	; () banked
  4954  002CB4  6B82               	clrf	??_ID& (0+255),b
  4955  002CB6  2B82               	incf	??_ID& (0+255),f,b
  4956  002CB8  D002               	goto	u6018
  4957  002CBA                     u6010:
  4958  002CBA  0100               	movlb	0	; () banked
  4959  002CBC  6B82               	clrf	??_ID& (0+255),b
  4960  002CBE                     u6018:
  4961  002CBE  0100               	movlb	0	; () banked
  4962  002CC0  5182               	movf	??_ID& (0+255),w,b
  4963  002CC2  0100               	movlb	0	; () banked
  4964  002CC4  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  4965  002CC6  6BE5               	clrf	(_sensor_outputs+3)& (0+255),b
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;sort.c: 263: LATAbits.LATA3 = 0;
  4969  002CC8  9689               	bcf	3977,3,c	;volatile
  4970                           
  4971                           ; BSR set to: 0
  4972                           ;sort.c: 265: _delay((unsigned long)((200)*(32000000/4000.0)));
  4973  002CCA  0E09               	movlw	9
  4974  002CCC  0100               	movlb	0	; () banked
  4975  002CCE  6F83               	movwf	(??_ID+1)& (0+255),b
  4976  002CD0  0E1E               	movlw	30
  4977  002CD2  0100               	movlb	0	; () banked
  4978  002CD4  6F82               	movwf	??_ID& (0+255),b
  4979  002CD6  0EE4               	movlw	228
  4980  002CD8                     u9087:
  4981  002CD8  2EE8               	decfsz	wreg,f,c
  4982  002CDA  D7FE               	bra	u9087
  4983  002CDC  2F82               	decfsz	??_ID& (0+255),f,b
  4984  002CDE  D7FC               	bra	u9087
  4985  002CE0  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4986  002CE2  D7FA               	bra	u9087
  4987  002CE4  F000               	nop	
  4988                           
  4989                           ;sort.c: 266: LATAbits.LATA3 = 1;
  4990  002CE6  8689               	bsf	3977,3,c	;volatile
  4991                           
  4992                           ;sort.c: 267: _delay((unsigned long)((600)*(32000000/4000.0)));
  4993  002CE8  0E19               	movlw	25
  4994  002CEA  0100               	movlb	0	; () banked
  4995  002CEC  6F83               	movwf	(??_ID+1)& (0+255),b
  4996  002CEE  0E5A               	movlw	90
  4997  002CF0  0100               	movlb	0	; () banked
  4998  002CF2  6F82               	movwf	??_ID& (0+255),b
  4999  002CF4  0EB1               	movlw	177
  5000  002CF6                     u9097:
  5001  002CF6  2EE8               	decfsz	wreg,f,c
  5002  002CF8  D7FE               	bra	u9097
  5003  002CFA  2F82               	decfsz	??_ID& (0+255),f,b
  5004  002CFC  D7FC               	bra	u9097
  5005  002CFE  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5006  002D00  D7FA               	bra	u9097
  5007  002D02  D000               	nop2	
  5008                           
  5009                           ;sort.c: 268: sensor_outputs[1] = (sensor_outputs[1] | PORTAbits.RA2);
  5010  002D04  A480               	btfss	3968,2,c	;volatile
  5011  002D06  D004               	goto	u6020
  5012  002D08  0100               	movlb	0	; () banked
  5013  002D0A  6B82               	clrf	??_ID& (0+255),b
  5014  002D0C  2B82               	incf	??_ID& (0+255),f,b
  5015  002D0E  D002               	goto	u6028
  5016  002D10                     u6020:
  5017  002D10  0100               	movlb	0	; () banked
  5018  002D12  6B82               	clrf	??_ID& (0+255),b
  5019  002D14                     u6028:
  5020  002D14  0100               	movlb	0	; () banked
  5021  002D16  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5022  002D18  0100               	movlb	0	; () banked
  5023  002D1A  1182               	iorwf	??_ID& (0+255),w,b
  5024  002D1C  0100               	movlb	0	; () banked
  5025  002D1E  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  5026  002D20  0100               	movlb	0	; () banked
  5027  002D22  51E5               	movf	(_sensor_outputs+3)& (0+255),w,b
  5028  002D24  0100               	movlb	0	; () banked
  5029  002D26  6FE5               	movwf	(_sensor_outputs+3)& (0+255),b
  5030                           
  5031                           ; BSR set to: 0
  5032                           ;sort.c: 276: if(!sensor_outputs[0]){
  5033  002D28  0100               	movlb	0	; () banked
  5034  002D2A  51E2               	movf	_sensor_outputs& (0+255),w,b
  5035  002D2C  0100               	movlb	0	; () banked
  5036  002D2E  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5037  002D30  A4D8               	btfss	status,2,c
  5038  002D32  D016               	goto	l7521
  5039                           
  5040                           ; BSR set to: 0
  5041                           ;sort.c: 277: if(!sensor_outputs[1]){
  5042  002D34  0100               	movlb	0	; () banked
  5043  002D36  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5044  002D38  0100               	movlb	0	; () banked
  5045  002D3A  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5046  002D3C  A4D8               	btfss	status,2,c
  5047  002D3E  D008               	goto	l7517
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;sort.c: 278: count_pop_no_tab++;
  5051  002D40  0101               	movlb	1	; () banked
  5052  002D42  4B27               	infsnz	_count_pop_no_tab& (0+255),f,b
  5053  002D44  2B28               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5054                           
  5055                           ; BSR set to: 1
  5056                           ;sort.c: 279: cur_can = 0;
  5057  002D46  0E00               	movlw	0
  5058  002D48  0101               	movlb	1	; () banked
  5059  002D4A  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5060  002D4C  0E00               	movlw	0
  5061  002D4E  D007               	goto	L4
  5062  002D50                     l7517:
  5063                           
  5064                           ;sort.c: 281: else{
  5065                           ;sort.c: 282: count_pop_w_tab++;
  5066  002D50  0101               	movlb	1	; () banked
  5067  002D52  4B29               	infsnz	_count_pop_w_tab& (0+255),f,b
  5068  002D54  2B2A               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5069                           
  5070                           ; BSR set to: 1
  5071                           ;sort.c: 283: cur_can = 1;
  5072  002D56  0E00               	movlw	0
  5073  002D58  0101               	movlb	1	; () banked
  5074  002D5A  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5075  002D5C  0E01               	movlw	1
  5076  002D5E                     L4:
  5077  002D5E  6F2B               	movwf	_cur_can& (0+255),b
  5078  002D60                     l7521:
  5079                           
  5080                           ;sort.c: 284: }
  5081                           ;sort.c: 285: }
  5082                           ;sort.c: 286: if(sensor_outputs[0]){
  5083  002D60  0100               	movlb	0	; () banked
  5084  002D62  51E2               	movf	_sensor_outputs& (0+255),w,b
  5085  002D64  0100               	movlb	0	; () banked
  5086  002D66  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5087  002D68  B4D8               	btfsc	status,2,c
  5088  002D6A  D016               	goto	l7533
  5089                           
  5090                           ; BSR set to: 0
  5091                           ;sort.c: 287: if(!sensor_outputs[1]){
  5092  002D6C  0100               	movlb	0	; () banked
  5093  002D6E  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5094  002D70  0100               	movlb	0	; () banked
  5095  002D72  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5096  002D74  A4D8               	btfss	status,2,c
  5097  002D76  D008               	goto	l7529
  5098                           
  5099                           ; BSR set to: 0
  5100                           ;sort.c: 288: count_can_w_lab++;
  5101  002D78  0101               	movlb	1	; () banked
  5102  002D7A  4B25               	infsnz	_count_can_w_lab& (0+255),f,b
  5103  002D7C  2B26               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5104                           
  5105                           ; BSR set to: 1
  5106                           ;sort.c: 289: cur_can = 2;
  5107  002D7E  0E00               	movlw	0
  5108  002D80  0101               	movlb	1	; () banked
  5109  002D82  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5110  002D84  0E02               	movlw	2
  5111  002D86  D007               	goto	L5
  5112  002D88                     l7529:
  5113                           
  5114                           ;sort.c: 291: else{
  5115                           ;sort.c: 292: count_can_no_lab++;
  5116  002D88  0101               	movlb	1	; () banked
  5117  002D8A  4B23               	infsnz	_count_can_no_lab& (0+255),f,b
  5118  002D8C  2B24               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5119                           
  5120                           ; BSR set to: 1
  5121                           ;sort.c: 293: cur_can = 3;
  5122  002D8E  0E00               	movlw	0
  5123  002D90  0101               	movlb	1	; () banked
  5124  002D92  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5125  002D94  0E03               	movlw	3
  5126  002D96                     L5:
  5127  002D96  6F2B               	movwf	_cur_can& (0+255),b
  5128  002D98                     l7533:
  5129                           
  5130                           ;sort.c: 294: }
  5131                           ;sort.c: 295: }
  5132                           ;sort.c: 296: LATAbits.LATA3 = 0;
  5133  002D98  9689               	bcf	3977,3,c	;volatile
  5134  002D9A                     l7535:
  5135  002D9A  0101               	movlb	1	; () banked
  5136  002D9C  5135               	movf	_f_can_distributed& (0+255),w,b
  5137  002D9E  0101               	movlb	1	; () banked
  5138  002DA0  1136               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5139  002DA2  B4D8               	btfsc	status,2,c
  5140  002DA4  D7FA               	goto	l7535
  5141                           
  5142                           ; BSR set to: 1
  5143                           ;sort.c: 300: if(sensor_outputs[0]){
  5144                           
  5145                           ; BSR set to: 1
  5146  002DA6  0100               	movlb	0	; () banked
  5147  002DA8  51E2               	movf	_sensor_outputs& (0+255),w,b
  5148  002DAA  0100               	movlb	0	; () banked
  5149  002DAC  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5150  002DAE  B4D8               	btfsc	status,2,c
  5151  002DB0  D020               	goto	l7553
  5152                           
  5153                           ; BSR set to: 0
  5154                           ;sort.c: 302: LATAbits.LATA3 = 1;
  5155  002DB2  8689               	bsf	3977,3,c	;volatile
  5156                           
  5157                           ; BSR set to: 0
  5158                           ;sort.c: 305: for(int i=0;i<10000;i++)
  5159  002DB4  0E00               	movlw	0
  5160  002DB6  0100               	movlb	0	; () banked
  5161  002DB8  6F85               	movwf	(ID@i+1)& (0+255),b
  5162  002DBA  0E00               	movlw	0
  5163  002DBC  6F84               	movwf	ID@i& (0+255),b
  5164  002DBE                     l7543:
  5165                           
  5166                           ; BSR set to: 0
  5167  002DBE  0100               	movlb	0	; () banked
  5168  002DC0  BF85               	btfsc	(ID@i+1)& (0+255),7,b
  5169  002DC2  D008               	goto	l811
  5170  002DC4  0E10               	movlw	16
  5171  002DC6  0100               	movlb	0	; () banked
  5172  002DC8  5D84               	subwf	ID@i& (0+255),w,b
  5173  002DCA  0E27               	movlw	39
  5174  002DCC  0100               	movlb	0	; () banked
  5175  002DCE  5985               	subwfb	(ID@i+1)& (0+255),w,b
  5176  002DD0  B0D8               	btfsc	status,0,c
  5177  002DD2  D00D               	goto	l812
  5178  002DD4                     l811:
  5179                           
  5180                           ; BSR set to: 0
  5181                           ;sort.c: 306: {
  5182                           ;sort.c: 307: LATCbits.LATC0 = 1;
  5183  002DD4  808B               	bsf	3979,0,c	;volatile
  5184                           
  5185                           ; BSR set to: 0
  5186                           ;sort.c: 308: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5187  002DD6  0E1A               	movlw	26
  5188  002DD8                     u9107:
  5189  002DD8  2EE8               	decfsz	wreg,f,c
  5190  002DDA  D7FE               	bra	u9107
  5191  002DDC  D000               	nop2	
  5192                           
  5193                           ;sort.c: 309: LATCbits.LATC0 = 0;
  5194  002DDE  908B               	bcf	3979,0,c	;volatile
  5195                           
  5196                           ;sort.c: 310: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5197  002DE0  0EF0               	movlw	240
  5198  002DE2                     u9117:
  5199  002DE2  2EE8               	decfsz	wreg,f,c
  5200  002DE4  D7FE               	bra	u9117
  5201  002DE6  0100               	movlb	0	; () banked
  5202  002DE8  4B84               	infsnz	ID@i& (0+255),f,b
  5203  002DEA  2B85               	incf	(ID@i+1)& (0+255),f,b
  5204  002DEC  D7E8               	goto	l7543
  5205  002DEE                     l812:
  5206                           
  5207                           ; BSR set to: 0
  5208                           ;sort.c: 311: }
  5209                           ;sort.c: 313: LATAbits.LATA3 = 0;
  5210  002DEE  9689               	bcf	3977,3,c	;volatile
  5211                           
  5212                           ;sort.c: 316: }
  5213  002DF0  D01D               	goto	l813
  5214  002DF2                     l7553:
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;sort.c: 317: else{
  5218                           ;sort.c: 319: for(int i=0;i<10000;i++)
  5219  002DF2  0E00               	movlw	0
  5220  002DF4  0100               	movlb	0	; () banked
  5221  002DF6  6F87               	movwf	(ID@i_1174+1)& (0+255),b
  5222  002DF8  0E00               	movlw	0
  5223  002DFA  6F86               	movwf	ID@i_1174& (0+255),b
  5224  002DFC                     l7555:
  5225                           
  5226                           ; BSR set to: 0
  5227  002DFC  0100               	movlb	0	; () banked
  5228  002DFE  BF87               	btfsc	(ID@i_1174+1)& (0+255),7,b
  5229  002E00  D008               	goto	l814
  5230  002E02  0E10               	movlw	16
  5231  002E04  0100               	movlb	0	; () banked
  5232  002E06  5D86               	subwf	ID@i_1174& (0+255),w,b
  5233  002E08  0E27               	movlw	39
  5234  002E0A  0100               	movlb	0	; () banked
  5235  002E0C  5987               	subwfb	(ID@i_1174+1)& (0+255),w,b
  5236  002E0E  B0D8               	btfsc	status,0,c
  5237  002E10  D00D               	goto	l813
  5238  002E12                     l814:
  5239                           
  5240                           ; BSR set to: 0
  5241                           ;sort.c: 320: {
  5242                           ;sort.c: 321: LATCbits.LATC0 = 1;
  5243  002E12  808B               	bsf	3979,0,c	;volatile
  5244                           
  5245                           ; BSR set to: 0
  5246                           ;sort.c: 322: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5247  002E14  0E1A               	movlw	26
  5248  002E16                     u9127:
  5249  002E16  2EE8               	decfsz	wreg,f,c
  5250  002E18  D7FE               	bra	u9127
  5251  002E1A  D000               	nop2	
  5252                           
  5253                           ;sort.c: 323: LATCbits.LATC0 = 0;
  5254  002E1C  908B               	bcf	3979,0,c	;volatile
  5255                           
  5256                           ;sort.c: 324: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5257  002E1E  0EF0               	movlw	240
  5258  002E20                     u9137:
  5259  002E20  2EE8               	decfsz	wreg,f,c
  5260  002E22  D7FE               	bra	u9137
  5261  002E24  0100               	movlb	0	; () banked
  5262  002E26  4B86               	infsnz	ID@i_1174& (0+255),f,b
  5263  002E28  2B87               	incf	(ID@i_1174+1)& (0+255),f,b
  5264  002E2A  D7E8               	goto	l7555
  5265  002E2C                     l813:
  5266                           
  5267                           ; BSR set to: 0
  5268                           ;sort.c: 325: }
  5269                           ;sort.c: 326: }
  5270                           ;sort.c: 328: LATCbits.LATC0 = 0;
  5271  002E2C  908B               	bcf	3979,0,c	;volatile
  5272                           
  5273                           ; BSR set to: 0
  5274                           ;sort.c: 330: f_can_coming_to_distribution = 1;
  5275  002E2E  0E00               	movlw	0
  5276  002E30  0101               	movlb	1	; () banked
  5277  002E32  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5278  002E34  0E01               	movlw	1
  5279  002E36  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5280                           
  5281                           ; BSR set to: 1
  5282                           ;sort.c: 331: _delay((unsigned long)((750)*(32000000/4000.0)));
  5283  002E38  0E1F               	movlw	31
  5284  002E3A  0100               	movlb	0	; () banked
  5285  002E3C  6F83               	movwf	(??_ID+1)& (0+255),b
  5286  002E3E  0E71               	movlw	113
  5287  002E40  0100               	movlb	0	; () banked
  5288  002E42  6F82               	movwf	??_ID& (0+255),b
  5289  002E44  0E1E               	movlw	30
  5290  002E46                     u9147:
  5291  002E46  2EE8               	decfsz	wreg,f,c
  5292  002E48  D7FE               	bra	u9147
  5293  002E4A  2F82               	decfsz	??_ID& (0+255),f,b
  5294  002E4C  D7FC               	bra	u9147
  5295  002E4E  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5296  002E50  D7FA               	bra	u9147
  5297  002E52  F000               	nop	
  5298                           
  5299                           ;sort.c: 332: LATCbits.LATC0 = 1;
  5300  002E54  808B               	bsf	3979,0,c	;volatile
  5301                           
  5302                           ;sort.c: 335: if(!f_lastCan){
  5303  002E56  0100               	movlb	0	; () banked
  5304  002E58  51EE               	movf	_f_lastCan& (0+255),w,b
  5305  002E5A  0100               	movlb	0	; () banked
  5306  002E5C  11EF               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5307  002E5E  A4D8               	btfss	status,2,c
  5308  002E60  D032               	goto	l7587
  5309                           
  5310                           ; BSR set to: 0
  5311                           ;sort.c: 336: for(int i=0; i<46; i++){
  5312  002E62  0E00               	movlw	0
  5313  002E64  0100               	movlb	0	; () banked
  5314  002E66  6F89               	movwf	(ID@i_1175+1)& (0+255),b
  5315  002E68  0E00               	movlw	0
  5316  002E6A  6F88               	movwf	ID@i_1175& (0+255),b
  5317                           
  5318                           ; BSR set to: 0
  5319  002E6C  0100               	movlb	0	; () banked
  5320  002E6E  BF89               	btfsc	(ID@i_1175+1)& (0+255),7,b
  5321  002E70  D008               	goto	l7579
  5322  002E72  0100               	movlb	0	; () banked
  5323  002E74  5189               	movf	(ID@i_1175+1)& (0+255),w,b
  5324  002E76  E126               	bnz	l818
  5325  002E78  0E2E               	movlw	46
  5326  002E7A  0100               	movlb	0	; () banked
  5327  002E7C  5D88               	subwf	ID@i_1175& (0+255),w,b
  5328  002E7E  B0D8               	btfsc	status,0,c
  5329  002E80  D021               	goto	l818
  5330  002E82                     l7579:
  5331                           
  5332                           ; BSR set to: 0
  5333                           ;sort.c: 337: LATBbits.LATB2 = !LATBbits.LATB2;
  5334  002E82  B48A               	btfsc	3978,2,c	;volatile
  5335  002E84  D004               	goto	u6150
  5336  002E86  0100               	movlb	0	; () banked
  5337  002E88  6B82               	clrf	??_ID& (0+255),b
  5338  002E8A  2B82               	incf	??_ID& (0+255),f,b
  5339  002E8C  D002               	goto	u6168
  5340  002E8E                     u6150:
  5341  002E8E  0100               	movlb	0	; () banked
  5342  002E90  6B82               	clrf	??_ID& (0+255),b
  5343  002E92                     u6168:
  5344  002E92  0100               	movlb	0	; () banked
  5345  002E94  4782               	rlncf	??_ID& (0+255),f,b
  5346  002E96  4782               	rlncf	??_ID& (0+255),f,b
  5347  002E98  508A               	movf	3978,w,c	;volatile
  5348  002E9A  0100               	movlb	0	; () banked
  5349  002E9C  1982               	xorwf	??_ID& (0+255),w,b
  5350  002E9E  0BFB               	andlw	-5
  5351  002EA0  1982               	xorwf	??_ID& (0+255),w,b
  5352  002EA2  6E8A               	movwf	3978,c	;volatile
  5353                           
  5354                           ; BSR set to: 0
  5355                           ;sort.c: 338: delay_ms(45-i);
  5356  002EA4  0100               	movlb	0	; () banked
  5357  002EA6  5188               	movf	ID@i_1175& (0+255),w,b
  5358  002EA8  0800               	sublw	0
  5359  002EAA  0F2D               	addlw	45
  5360  002EAC  EC1A  F029         	call	_delay_ms
  5361  002EB0  0100               	movlb	0	; () banked
  5362  002EB2  4B88               	infsnz	ID@i_1175& (0+255),f,b
  5363  002EB4  2B89               	incf	(ID@i_1175+1)& (0+255),f,b
  5364                           
  5365                           ; BSR set to: 0
  5366  002EB6  0100               	movlb	0	; () banked
  5367  002EB8  BF89               	btfsc	(ID@i_1175+1)& (0+255),7,b
  5368  002EBA  D7E3               	goto	l7579
  5369  002EBC  0100               	movlb	0	; () banked
  5370  002EBE  5189               	movf	(ID@i_1175+1)& (0+255),w,b
  5371  002EC0  E101               	bnz	u6170
  5372  002EC2  D7DA               	goto	L6
  5373  002EC4                     u6170:
  5374  002EC4                     l818:
  5375                           
  5376                           ; BSR set to: 0
  5377                           ;sort.c: 339: }
  5378                           ;sort.c: 340: LATBbits.LATB2 = 1;
  5379  002EC4  848A               	bsf	3978,2,c	;volatile
  5380  002EC6                     l7587:
  5381                           
  5382                           ; BSR set to: 0
  5383                           ;sort.c: 341: }
  5384                           ;sort.c: 343: f_can_coming_to_ID = 0;
  5385  002EC6  0E00               	movlw	0
  5386  002EC8  0101               	movlb	1	; () banked
  5387  002ECA  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  5388  002ECC  0E00               	movlw	0
  5389  002ECE  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  5390  002ED0  0012               	return	
  5391  002ED2                     __end_of_ID:
  5392                           	opt stack 0
  5393                           tblptru	equ	0xFF8
  5394                           tblptrh	equ	0xFF7
  5395                           tblptrl	equ	0xFF6
  5396                           tablat	equ	0xFF5
  5397                           prodh	equ	0xFF4
  5398                           prodl	equ	0xFF3
  5399                           postinc0	equ	0xFEE
  5400                           wreg	equ	0xFE8
  5401                           postdec1	equ	0xFE5
  5402                           fsr1l	equ	0xFE1
  5403                           indf2	equ	0xFDF
  5404                           postinc2	equ	0xFDE
  5405                           postdec2	equ	0xFDD
  5406                           fsr2h	equ	0xFDA
  5407                           fsr2l	equ	0xFD9
  5408                           status	equ	0xFD8
  5409                           
  5410 ;; *************** function _delay_ms *****************
  5411 ;; Defined at:
  5412 ;;		line 590 in file "sort.c"
  5413 ;; Parameters:    Size  Location     Type
  5414 ;;  milliseconds    1    wreg     unsigned char 
  5415 ;; Auto vars:     Size  Location     Type
  5416 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  5417 ;; Return value:  Size  Location     Type
  5418 ;;                  1    wreg      void 
  5419 ;; Registers used:
  5420 ;;		wreg, status,2, status,0, cstack
  5421 ;; Tracked objects:
  5422 ;;		On entry : 0/0
  5423 ;;		On exit  : 0/0
  5424 ;;		Unchanged: 0/0
  5425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5427 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5428 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5429 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5430 ;;Total ram usage:        2 bytes
  5431 ;; Hardware stack levels used:    1
  5432 ;; Hardware stack levels required when called:    7
  5433 ;; This function calls:
  5434 ;;		Nothing
  5435 ;; This function is called by:
  5436 ;;		_Loading
  5437 ;;		_ID
  5438 ;; This function uses a non-reentrant model
  5439 ;;
  5440                           
  5441                           	psect	text10
  5442  005234                     __ptext10:
  5443                           	opt stack 0
  5444  005234                     _delay_ms:
  5445                           	opt stack 21
  5446                           
  5447                           ; BSR set to: 1
  5448                           ;incstack = 0
  5449                           ;delay_ms@milliseconds stored from wreg
  5450  005234  0100               	movlb	0	; () banked
  5451  005236  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  5452                           
  5453                           ;sort.c: 591: while(milliseconds > 0)
  5454  005238  D00B               	goto	l6957
  5455  00523A                     l6953:
  5456                           
  5457                           ;sort.c: 592: {
  5458                           ;sort.c: 593: milliseconds--;
  5459  00523A  0100               	movlb	0	; () banked
  5460  00523C  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  5461                           
  5462                           ; BSR set to: 0
  5463                           ;sort.c: 594: _delay((unsigned long)((990)*(32000000/4000000.0)));
  5464  00523E  0E0B               	movlw	11
  5465  005240  0100               	movlb	0	; () banked
  5466  005242  6F80               	movwf	??_delay_ms& (0+255),b
  5467  005244  0E47               	movlw	71
  5468  005246                     u9157:
  5469  005246  2EE8               	decfsz	wreg,f,c
  5470  005248  D7FE               	bra	u9157
  5471  00524A  2F80               	decfsz	??_delay_ms& (0+255),f,b
  5472  00524C  D7FC               	bra	u9157
  5473  00524E  D000               	nop2	
  5474  005250                     l6957:
  5475  005250  0100               	movlb	0	; () banked
  5476  005252  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  5477  005254  0100               	movlb	0	; () banked
  5478  005256  B4D8               	btfsc	status,2,c
  5479  005258  0012               	return	
  5480  00525A  D7EF               	goto	l6953
  5481  00525C                     __end_of_delay_ms:
  5482                           	opt stack 0
  5483                           tblptru	equ	0xFF8
  5484                           tblptrh	equ	0xFF7
  5485                           tblptrl	equ	0xFF6
  5486                           tablat	equ	0xFF5
  5487                           prodh	equ	0xFF4
  5488                           prodl	equ	0xFF3
  5489                           postinc0	equ	0xFEE
  5490                           wreg	equ	0xFE8
  5491                           postdec1	equ	0xFE5
  5492                           fsr1l	equ	0xFE1
  5493                           indf2	equ	0xFDF
  5494                           postinc2	equ	0xFDE
  5495                           postdec2	equ	0xFDD
  5496                           fsr2h	equ	0xFDA
  5497                           fsr2l	equ	0xFD9
  5498                           status	equ	0xFD8
  5499                           
  5500 ;; *************** function _Distribution *****************
  5501 ;; Defined at:
  5502 ;;		line 346 in file "sort.c"
  5503 ;; Parameters:    Size  Location     Type
  5504 ;;		None
  5505 ;; Auto vars:     Size  Location     Type
  5506 ;;		None
  5507 ;; Return value:  Size  Location     Type
  5508 ;;                  1    wreg      void 
  5509 ;; Registers used:
  5510 ;;		wreg, status,2, status,0, cstack
  5511 ;; Tracked objects:
  5512 ;;		On entry : 0/0
  5513 ;;		On exit  : 0/0
  5514 ;;		Unchanged: 0/0
  5515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5518 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5519 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5520 ;;Total ram usage:        2 bytes
  5521 ;; Hardware stack levels used:    1
  5522 ;; Hardware stack levels required when called:    8
  5523 ;; This function calls:
  5524 ;;		_updateServoPosition
  5525 ;; This function is called by:
  5526 ;;		_sort
  5527 ;; This function uses a non-reentrant model
  5528 ;;
  5529                           
  5530                           	psect	text11
  5531  003F86                     __ptext11:
  5532                           	opt stack 0
  5533  003F86                     _Distribution:
  5534                           	opt stack 21
  5535                           
  5536                           ;sort.c: 347: if(f_can_coming_to_distribution){
  5537                           
  5538                           ; BSR set to: 0
  5539                           ;incstack = 0
  5540  003F86  0101               	movlb	1	; () banked
  5541  003F88  5133               	movf	_f_can_coming_to_distribution& (0+255),w,b
  5542  003F8A  0101               	movlb	1	; () banked
  5543  003F8C  1134               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  5544  003F8E  B4D8               	btfsc	status,2,c
  5545  003F90  0012               	return	
  5546                           
  5547                           ; BSR set to: 1
  5548                           ;sort.c: 348: f_can_distributed = 0;
  5549  003F92  0E00               	movlw	0
  5550  003F94  0101               	movlb	1	; () banked
  5551  003F96  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  5552  003F98  0E00               	movlw	0
  5553  003F9A  6F35               	movwf	_f_can_distributed& (0+255),b
  5554                           
  5555                           ;sort.c: 355: switch(cur_can){
  5556  003F9C  D034               	goto	l7603
  5557  003F9E                     l7593:
  5558                           
  5559                           ;sort.c: 357: updateServoPosition(500, 1);
  5560  003F9E  0E01               	movlw	1
  5561  003FA0  0100               	movlb	0	; () banked
  5562  003FA2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5563  003FA4  0EF4               	movlw	244
  5564  003FA6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5565  003FA8  0E00               	movlw	0
  5566  003FAA  0100               	movlb	0	; () banked
  5567  003FAC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5568  003FAE  0E01               	movlw	1
  5569  003FB0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5570  003FB2  EC43  F023         	call	_updateServoPosition	;wreg free
  5571                           
  5572                           ;sort.c: 358: break;
  5573  003FB6  D03E               	goto	l7605
  5574  003FB8                     l7595:
  5575                           
  5576                           ;sort.c: 360: updateServoPosition(850, 1);
  5577  003FB8  0E03               	movlw	3
  5578  003FBA  0100               	movlb	0	; () banked
  5579  003FBC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5580  003FBE  0E52               	movlw	82
  5581  003FC0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5582  003FC2  0E00               	movlw	0
  5583  003FC4  0100               	movlb	0	; () banked
  5584  003FC6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5585  003FC8  0E01               	movlw	1
  5586  003FCA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5587  003FCC  EC43  F023         	call	_updateServoPosition	;wreg free
  5588                           
  5589                           ;sort.c: 361: break;
  5590  003FD0  D031               	goto	l7605
  5591  003FD2                     l7597:
  5592                           
  5593                           ;sort.c: 363: updateServoPosition(1670, 1);
  5594  003FD2  0E06               	movlw	6
  5595  003FD4  0100               	movlb	0	; () banked
  5596  003FD6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5597  003FD8  0E86               	movlw	134
  5598  003FDA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5599  003FDC  0E00               	movlw	0
  5600  003FDE  0100               	movlb	0	; () banked
  5601  003FE0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5602  003FE2  0E01               	movlw	1
  5603  003FE4  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5604  003FE6  EC43  F023         	call	_updateServoPosition	;wreg free
  5605                           
  5606                           ;sort.c: 364: break;
  5607  003FEA  D024               	goto	l7605
  5608  003FEC                     l7599:
  5609                           
  5610                           ;sort.c: 366: updateServoPosition(2400, 1);
  5611  003FEC  0E09               	movlw	9
  5612  003FEE  0100               	movlb	0	; () banked
  5613  003FF0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5614  003FF2  0E60               	movlw	96
  5615  003FF4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5616  003FF6  0E00               	movlw	0
  5617  003FF8  0100               	movlb	0	; () banked
  5618  003FFA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5619  003FFC  0E01               	movlw	1
  5620  003FFE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5621  004000  EC43  F023         	call	_updateServoPosition	;wreg free
  5622                           
  5623                           ;sort.c: 370: }
  5624                           
  5625                           ;sort.c: 369: break;
  5626                           
  5627                           ;sort.c: 368: default:
  5628                           
  5629                           ;sort.c: 367: break;
  5630  004004  D017               	goto	l7605
  5631  004006                     l7603:
  5632  004006  C12B  F088         	movff	_cur_can,??_Distribution
  5633  00400A  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  5634                           
  5635                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5636                           ; Switch size 1, requested type "space"
  5637                           ; Number of cases is 1, Range of values is 0 to 0
  5638                           ; switch strategies available:
  5639                           ; Name         Instructions Cycles
  5640                           ; simple_byte            4     3 (average)
  5641                           ;	Chosen strategy is simple_byte
  5642  00400E  0100               	movlb	0	; () banked
  5643  004010  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5644  004012  0A00               	xorlw	0	; case 0
  5645  004014  A4D8               	btfss	status,2,c
  5646  004016  D00E               	goto	l7605
  5647                           
  5648                           ; BSR set to: 0
  5649                           ; Switch size 1, requested type "space"
  5650                           ; Number of cases is 4, Range of values is 0 to 3
  5651                           ; switch strategies available:
  5652                           ; Name         Instructions Cycles
  5653                           ; simple_byte           13     7 (average)
  5654                           ;	Chosen strategy is simple_byte
  5655  004018  0100               	movlb	0	; () banked
  5656  00401A  5188               	movf	??_Distribution& (0+255),w,b
  5657  00401C  0A00               	xorlw	0	; case 0
  5658  00401E  B4D8               	btfsc	status,2,c
  5659  004020  D7BE               	goto	l7593
  5660  004022  0A01               	xorlw	1	; case 1
  5661  004024  B4D8               	btfsc	status,2,c
  5662  004026  D7C8               	goto	l7595
  5663  004028  0A03               	xorlw	3	; case 2
  5664  00402A  B4D8               	btfsc	status,2,c
  5665  00402C  D7D2               	goto	l7597
  5666  00402E  0A01               	xorlw	1	; case 3
  5667  004030  B4D8               	btfsc	status,2,c
  5668  004032  D7DC               	goto	l7599
  5669  004034                     l7605:
  5670                           
  5671                           ;sort.c: 371: updateServoPosition(1050, 3);
  5672  004034  0E04               	movlw	4
  5673  004036  0100               	movlb	0	; () banked
  5674  004038  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5675  00403A  0E1A               	movlw	26
  5676  00403C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5677  00403E  0E00               	movlw	0
  5678  004040  0100               	movlb	0	; () banked
  5679  004042  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5680  004044  0E03               	movlw	3
  5681  004046  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5682  004048  EC43  F023         	call	_updateServoPosition	;wreg free
  5683                           
  5684                           ;sort.c: 372: servo_timer_target = 750;
  5685  00404C  0E02               	movlw	2
  5686  00404E  6E74               	movwf	_servo_timer_target+1,c	;volatile
  5687  004050  0EEE               	movlw	238
  5688  004052  6E73               	movwf	_servo_timer_target,c	;volatile
  5689                           
  5690                           ;sort.c: 373: f_panning_to_bin = 1;
  5691  004054  0E00               	movlw	0
  5692  004056  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  5693  004058  0E01               	movlw	1
  5694  00405A  6E61               	movwf	_f_panning_to_bin,c	;volatile
  5695                           
  5696                           ;sort.c: 374: f_can_coming_to_distribution = 0;
  5697  00405C  0E00               	movlw	0
  5698  00405E  0101               	movlb	1	; () banked
  5699  004060  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5700  004062  0E00               	movlw	0
  5701  004064  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5702  004066  0012               	return	
  5703  004068                     __end_of_Distribution:
  5704                           	opt stack 0
  5705                           tblptru	equ	0xFF8
  5706                           tblptrh	equ	0xFF7
  5707                           tblptrl	equ	0xFF6
  5708                           tablat	equ	0xFF5
  5709                           prodh	equ	0xFF4
  5710                           prodl	equ	0xFF3
  5711                           postinc0	equ	0xFEE
  5712                           wreg	equ	0xFE8
  5713                           postdec1	equ	0xFE5
  5714                           fsr1l	equ	0xFE1
  5715                           indf2	equ	0xFDF
  5716                           postinc2	equ	0xFDE
  5717                           postdec2	equ	0xFDD
  5718                           fsr2h	equ	0xFDA
  5719                           fsr2l	equ	0xFD9
  5720                           status	equ	0xFD8
  5721                           
  5722 ;; *************** function _machineConfig *****************
  5723 ;; Defined at:
  5724 ;;		line 15 in file "MachineConfig.c"
  5725 ;; Parameters:    Size  Location     Type
  5726 ;;		None
  5727 ;; Auto vars:     Size  Location     Type
  5728 ;;		None
  5729 ;; Return value:  Size  Location     Type
  5730 ;;                  1    wreg      void 
  5731 ;; Registers used:
  5732 ;;		wreg, status,2
  5733 ;; Tracked objects:
  5734 ;;		On entry : 0/0
  5735 ;;		On exit  : 0/0
  5736 ;;		Unchanged: 0/0
  5737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5742 ;;Total ram usage:        0 bytes
  5743 ;; Hardware stack levels used:    1
  5744 ;; Hardware stack levels required when called:    7
  5745 ;; This function calls:
  5746 ;;		Nothing
  5747 ;; This function is called by:
  5748 ;;		_main
  5749 ;; This function uses a non-reentrant model
  5750 ;;
  5751                           
  5752                           	psect	text12
  5753  004AAA                     __ptext12:
  5754                           	opt stack 0
  5755  004AAA                     _machineConfig:
  5756                           	opt stack 23
  5757                           
  5758                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  5759                           
  5760                           ; BSR set to: 1
  5761                           ;incstack = 0
  5762  004AAA  0EF0               	movlw	240
  5763  004AAC  6ED3               	movwf	4051,c	;volatile
  5764                           
  5765                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  5766  004AAE  8C9B               	bsf	3995,6,c	;volatile
  5767                           
  5768                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  5769  004AB0  0E07               	movlw	7
  5770  004AB2  6E92               	movwf	3986,c	;volatile
  5771                           
  5772                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  5773  004AB4  0EF2               	movlw	242
  5774  004AB6  6E93               	movwf	3987,c	;volatile
  5775                           
  5776                           ;MachineConfig.c: 27: TRISC = 0x00;
  5777  004AB8  0E00               	movlw	0
  5778  004ABA  6E94               	movwf	3988,c	;volatile
  5779                           
  5780                           ;MachineConfig.c: 31: TRISD = 0x00;
  5781  004ABC  0E00               	movlw	0
  5782  004ABE  6E95               	movwf	3989,c	;volatile
  5783                           
  5784                           ;MachineConfig.c: 34: TRISE = 0x00;
  5785  004AC0  0E00               	movlw	0
  5786  004AC2  6E96               	movwf	3990,c	;volatile
  5787                           
  5788                           ;MachineConfig.c: 37: LATA = 0x00;
  5789  004AC4  0E00               	movlw	0
  5790  004AC6  6E89               	movwf	3977,c	;volatile
  5791                           
  5792                           ;MachineConfig.c: 38: LATB = 0x00;
  5793  004AC8  0E00               	movlw	0
  5794  004ACA  6E8A               	movwf	3978,c	;volatile
  5795                           
  5796                           ;MachineConfig.c: 39: LATC = 0x00;
  5797  004ACC  0E00               	movlw	0
  5798  004ACE  6E8B               	movwf	3979,c	;volatile
  5799                           
  5800                           ;MachineConfig.c: 40: LATD = 0x00;
  5801  004AD0  0E00               	movlw	0
  5802  004AD2  6E8C               	movwf	3980,c	;volatile
  5803                           
  5804                           ;MachineConfig.c: 41: LATE = 0x00;
  5805  004AD4  0E00               	movlw	0
  5806  004AD6  6E8D               	movwf	3981,c	;volatile
  5807                           
  5808                           ;MachineConfig.c: 43: nRBPU = 0;
  5809  004AD8  9EF1               	bcf	intcon2,7,c	;volatile
  5810                           
  5811                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  5812  004ADA  0E00               	movlw	0
  5813  004ADC  6EC2               	movwf	4034,c	;volatile
  5814                           
  5815                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  5816  004ADE  0E0D               	movlw	13
  5817  004AE0  6EC1               	movwf	4033,c	;volatile
  5818                           
  5819                           ;MachineConfig.c: 50: CVRCON = 0x00;
  5820  004AE2  0E00               	movlw	0
  5821  004AE4  6EB5               	movwf	4021,c	;volatile
  5822                           
  5823                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  5824  004AE6  96B4               	bcf	4020,3,c	;volatile
  5825                           
  5826                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  5827  004AE8  0EB1               	movlw	177
  5828  004AEA  6EC0               	movwf	4032,c	;volatile
  5829                           
  5830                           ;MachineConfig.c: 55: INT1IE = 1;
  5831  004AEC  86F0               	bsf	intcon3,3,c	;volatile
  5832                           
  5833                           ;MachineConfig.c: 57: TMR0IE = 1;
  5834  004AEE  8AF2               	bsf	intcon,5,c	;volatile
  5835                           
  5836                           ;MachineConfig.c: 58: TMR1IE = 1;
  5837  004AF0  809D               	bsf	3997,0,c	;volatile
  5838                           
  5839                           ;MachineConfig.c: 59: TMR2IE = 1;
  5840  004AF2  829D               	bsf	3997,1,c	;volatile
  5841                           
  5842                           ;MachineConfig.c: 60: TMR3IE = 1;
  5843  004AF4  82A0               	bsf	4000,1,c	;volatile
  5844                           
  5845                           ;MachineConfig.c: 62: T1CON = 0b10110000;
  5846  004AF6  0EB0               	movlw	176
  5847  004AF8  6ECD               	movwf	4045,c	;volatile
  5848                           
  5849                           ;MachineConfig.c: 63: T2CON = 0b01111011;
  5850  004AFA  0E7B               	movlw	123
  5851  004AFC  6ECA               	movwf	4042,c	;volatile
  5852                           
  5853                           ;MachineConfig.c: 64: T3CON = 0b10110000;
  5854  004AFE  0EB0               	movlw	176
  5855  004B00  6EB1               	movwf	4017,c	;volatile
  5856                           
  5857                           ;MachineConfig.c: 65: PEIE = 1;
  5858  004B02  8CF2               	bsf	intcon,6,c	;volatile
  5859                           
  5860                           ;MachineConfig.c: 66: ADIE = 0;
  5861  004B04  9C9D               	bcf	3997,6,c	;volatile
  5862                           
  5863                           ;MachineConfig.c: 67: (INTCONbits.GIE = 0);
  5864  004B06  9EF2               	bcf	intcon,7,c	;volatile
  5865  004B08  0012               	return		;funcret
  5866  004B0A                     __end_of_machineConfig:
  5867                           	opt stack 0
  5868                           tblptru	equ	0xFF8
  5869                           tblptrh	equ	0xFF7
  5870                           tblptrl	equ	0xFF6
  5871                           tablat	equ	0xFF5
  5872                           prodh	equ	0xFF4
  5873                           prodl	equ	0xFF3
  5874                           intcon	equ	0xFF2
  5875                           intcon2	equ	0xFF1
  5876                           intcon3	equ	0xFF0
  5877                           postinc0	equ	0xFEE
  5878                           wreg	equ	0xFE8
  5879                           postdec1	equ	0xFE5
  5880                           fsr1l	equ	0xFE1
  5881                           indf2	equ	0xFDF
  5882                           postinc2	equ	0xFDE
  5883                           postdec2	equ	0xFDD
  5884                           fsr2h	equ	0xFDA
  5885                           fsr2l	equ	0xFD9
  5886                           status	equ	0xFD8
  5887                           
  5888 ;; *************** function _logRun *****************
  5889 ;; Defined at:
  5890 ;;		line 84 in file "EEPROM.c"
  5891 ;; Parameters:    Size  Location     Type
  5892 ;;		None
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;  byte_i          1   53[BANK0 ] unsigned char 
  5895 ;;  i               2   55[BANK0 ] int 
  5896 ;;  num             1   49[BANK0 ] unsigned char 
  5897 ;;  addr            2   57[BANK0 ] unsigned short 
  5898 ;;  byte11          1   54[BANK0 ] unsigned char 
  5899 ;;  byte3           1   52[BANK0 ] unsigned char 
  5900 ;;  byte2           1   51[BANK0 ] unsigned char 
  5901 ;;  byte1           1   50[BANK0 ] unsigned char 
  5902 ;; Return value:  Size  Location     Type
  5903 ;;                  1    wreg      void 
  5904 ;; Registers used:
  5905 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5906 ;; Tracked objects:
  5907 ;;		On entry : 0/0
  5908 ;;		On exit  : 0/0
  5909 ;;		Unchanged: 0/0
  5910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5912 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5914 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5915 ;;Total ram usage:       10 bytes
  5916 ;; Hardware stack levels used:    1
  5917 ;; Hardware stack levels required when called:   11
  5918 ;; This function calls:
  5919 ;;		_EEPROM_read
  5920 ;;		_EEPROM_write
  5921 ;; This function is called by:
  5922 ;;		_main
  5923 ;; This function uses a non-reentrant model
  5924 ;;
  5925                           
  5926                           	psect	text13
  5927  003A18                     __ptext13:
  5928                           	opt stack 0
  5929  003A18                     _logRun:
  5930                           	opt stack 19
  5931                           
  5932                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  5933                           
  5934                           ;incstack = 0
  5935  003A18  0E00               	movlw	0
  5936  003A1A  0100               	movlb	0	; () banked
  5937  003A1C  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  5938  003A1E  0E00               	movlw	0
  5939  003A20  6F80               	movwf	EEPROM_read@address& (0+255),b
  5940  003A22  ECC6  F029         	call	_EEPROM_read	;wreg free
  5941  003A26  0100               	movlb	0	; () banked
  5942  003A28  6FFD               	movwf	_sel& (0+255),b
  5943                           
  5944                           ; BSR set to: 0
  5945                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  5946  003A2A  0100               	movlb	0	; () banked
  5947  003A2C  51FD               	movf	_sel& (0+255),w,b
  5948  003A2E  0D0B               	mullw	11
  5949  003A30  0E01               	movlw	1
  5950  003A32  24F3               	addwf	prodl,w,c
  5951  003A34  0100               	movlb	0	; () banked
  5952  003A36  6FB9               	movwf	logRun@addr& (0+255),b
  5953  003A38  0E00               	movlw	0
  5954  003A3A  20F4               	addwfc	prodh,w,c
  5955  003A3C  0100               	movlb	0	; () banked
  5956  003A3E  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  5957                           
  5958                           ; BSR set to: 0
  5959                           ;EEPROM.c: 101: if (sel < 3){
  5960  003A40  0E03               	movlw	3
  5961  003A42  0100               	movlb	0	; () banked
  5962  003A44  61FD               	cpfslt	_sel& (0+255),b
  5963  003A46  D00E               	goto	l9229
  5964                           
  5965                           ; BSR set to: 0
  5966                           ;EEPROM.c: 102: unsigned char num = sel+1;
  5967  003A48  0100               	movlb	0	; () banked
  5968  003A4A  29FD               	incf	_sel& (0+255),w,b
  5969  003A4C  0100               	movlb	0	; () banked
  5970  003A4E  6FB1               	movwf	logRun@num& (0+255),b
  5971                           
  5972                           ; BSR set to: 0
  5973                           ;EEPROM.c: 103: EEPROM_write(0, num);
  5974  003A50  0E00               	movlw	0
  5975  003A52  0100               	movlb	0	; () banked
  5976  003A54  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5977  003A56  0E00               	movlw	0
  5978  003A58  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5979  003A5A  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  5980  003A5E  EC4F  F01F         	call	_EEPROM_write	;wreg free
  5981                           
  5982                           ;EEPROM.c: 104: }
  5983  003A62  D00A               	goto	l9231
  5984  003A64                     l9229:
  5985                           
  5986                           ;EEPROM.c: 105: else{
  5987                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  5988  003A64  0E00               	movlw	0
  5989  003A66  0100               	movlb	0	; () banked
  5990  003A68  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5991  003A6A  0E00               	movlw	0
  5992  003A6C  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5993  003A6E  0E00               	movlw	0
  5994  003A70  0100               	movlb	0	; () banked
  5995  003A72  6FAD               	movwf	EEPROM_write@data& (0+255),b
  5996  003A74  EC4F  F01F         	call	_EEPROM_write	;wreg free
  5997  003A78                     l9231:
  5998                           
  5999                           ;EEPROM.c: 107: }
  6000                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  6001  003A78  0100               	movlb	0	; () banked
  6002  003A7A  51FE               	movf	_count_total& (0+255),w,b
  6003  003A7C  0980               	iorlw	128
  6004  003A7E  0100               	movlb	0	; () banked
  6005  003A80  6FB2               	movwf	logRun@byte1& (0+255),b
  6006                           
  6007                           ; BSR set to: 0
  6008                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  6009  003A82  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6010  003A86  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6011  003A8A  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  6012  003A8E  EC4F  F01F         	call	_EEPROM_write	;wreg free
  6013                           
  6014                           ;EEPROM.c: 112: addr++;
  6015  003A92  0100               	movlb	0	; () banked
  6016  003A94  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6017  003A96  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6018                           
  6019                           ; BSR set to: 0
  6020                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  6021  003A98  0101               	movlb	1	; () banked
  6022  003A9A  3927               	swapf	_count_pop_no_tab& (0+255),w,b
  6023  003A9C  0BF0               	andlw	240
  6024  003A9E  0101               	movlb	1	; () banked
  6025  003AA0  1129               	iorwf	_count_pop_w_tab& (0+255),w,b
  6026  003AA2  0100               	movlb	0	; () banked
  6027  003AA4  6FB3               	movwf	logRun@byte2& (0+255),b
  6028                           
  6029                           ; BSR set to: 0
  6030                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  6031  003AA6  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6032  003AAA  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6033  003AAE  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  6034  003AB2  EC4F  F01F         	call	_EEPROM_write	;wreg free
  6035                           
  6036                           ;EEPROM.c: 117: addr++;
  6037  003AB6  0100               	movlb	0	; () banked
  6038  003AB8  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6039  003ABA  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6040                           
  6041                           ; BSR set to: 0
  6042                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  6043  003ABC  0101               	movlb	1	; () banked
  6044  003ABE  3925               	swapf	_count_can_w_lab& (0+255),w,b
  6045  003AC0  0BF0               	andlw	240
  6046  003AC2  0101               	movlb	1	; () banked
  6047  003AC4  1123               	iorwf	_count_can_no_lab& (0+255),w,b
  6048  003AC6  0100               	movlb	0	; () banked
  6049  003AC8  6FB4               	movwf	logRun@byte3& (0+255),b
  6050                           
  6051                           ; BSR set to: 0
  6052                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  6053  003ACA  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6054  003ACE  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6055  003AD2  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  6056  003AD6  EC4F  F01F         	call	_EEPROM_write	;wreg free
  6057                           
  6058                           ;EEPROM.c: 120: addr++;
  6059  003ADA  0100               	movlb	0	; () banked
  6060  003ADC  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6061  003ADE  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6062                           
  6063                           ; BSR set to: 0
  6064                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  6065  003AE0  0E00               	movlw	0
  6066  003AE2  0100               	movlb	0	; () banked
  6067  003AE4  6FB8               	movwf	(logRun@i+1)& (0+255),b
  6068  003AE6  0E00               	movlw	0
  6069  003AE8  6FB7               	movwf	logRun@i& (0+255),b
  6070                           
  6071                           ; BSR set to: 0
  6072  003AEA  0100               	movlb	0	; () banked
  6073  003AEC  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6074  003AEE  D008               	goto	l9255
  6075  003AF0  0100               	movlb	0	; () banked
  6076  003AF2  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6077  003AF4  E128               	bnz	l1054
  6078  003AF6  0E07               	movlw	7
  6079  003AF8  0100               	movlb	0	; () banked
  6080  003AFA  5DB7               	subwf	logRun@i& (0+255),w,b
  6081  003AFC  B0D8               	btfsc	status,0,c
  6082  003AFE  D023               	goto	l1054
  6083  003B00                     l9255:
  6084                           
  6085                           ; BSR set to: 0
  6086                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  6087  003B00  90D8               	bcf	status,0,c
  6088  003B02  0100               	movlb	0	; () banked
  6089  003B04  35B7               	rlcf	logRun@i& (0+255),w,b
  6090  003B06  6ED9               	movwf	fsr2l,c
  6091  003B08  0100               	movlb	0	; () banked
  6092  003B0A  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  6093  003B0C  6EDA               	movwf	fsr2h,c
  6094  003B0E  0E0E               	movlw	low _startTime
  6095  003B10  26D9               	addwf	fsr2l,f,c
  6096  003B12  0E01               	movlw	high _startTime
  6097  003B14  22DA               	addwfc	fsr2h,f,c
  6098  003B16  50DF               	movf	indf2,w,c
  6099  003B18  0100               	movlb	0	; () banked
  6100  003B1A  6FB5               	movwf	logRun@byte_i& (0+255),b
  6101                           
  6102                           ; BSR set to: 0
  6103                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  6104  003B1C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6105  003B20  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6106  003B24  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  6107  003B28  EC4F  F01F         	call	_EEPROM_write	;wreg free
  6108                           
  6109                           ;EEPROM.c: 126: addr++;
  6110  003B2C  0100               	movlb	0	; () banked
  6111  003B2E  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6112  003B30  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6113                           
  6114                           ; BSR set to: 0
  6115  003B32  0100               	movlb	0	; () banked
  6116  003B34  4BB7               	infsnz	logRun@i& (0+255),f,b
  6117  003B36  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  6118                           
  6119                           ; BSR set to: 0
  6120  003B38  0100               	movlb	0	; () banked
  6121  003B3A  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6122  003B3C  D7E1               	goto	l9255
  6123  003B3E  0100               	movlb	0	; () banked
  6124  003B40  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6125  003B42  E101               	bnz	u8440
  6126  003B44  D7D8               	goto	L7
  6127  003B46                     u8440:
  6128  003B46                     l1054:
  6129                           
  6130                           ; BSR set to: 0
  6131                           ;EEPROM.c: 127: }
  6132                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  6133  003B46  C0F8  F0B6         	movff	_total_time,logRun@byte11
  6134                           
  6135                           ; BSR set to: 0
  6136                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  6137  003B4A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6138  003B4E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6139  003B52  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  6140  003B56  EC4F  F01F         	call	_EEPROM_write	;wreg free
  6141  003B5A  0012               	return		;funcret
  6142  003B5C                     __end_of_logRun:
  6143                           	opt stack 0
  6144                           tblptru	equ	0xFF8
  6145                           tblptrh	equ	0xFF7
  6146                           tblptrl	equ	0xFF6
  6147                           tablat	equ	0xFF5
  6148                           prodh	equ	0xFF4
  6149                           prodl	equ	0xFF3
  6150                           intcon	equ	0xFF2
  6151                           intcon2	equ	0xFF1
  6152                           intcon3	equ	0xFF0
  6153                           postinc0	equ	0xFEE
  6154                           wreg	equ	0xFE8
  6155                           postdec1	equ	0xFE5
  6156                           fsr1l	equ	0xFE1
  6157                           indf2	equ	0xFDF
  6158                           postinc2	equ	0xFDE
  6159                           postdec2	equ	0xFDD
  6160                           fsr2h	equ	0xFDA
  6161                           fsr2l	equ	0xFD9
  6162                           status	equ	0xFD8
  6163                           
  6164 ;; *************** function _EEPROM_write *****************
  6165 ;; Defined at:
  6166 ;;		line 32 in file "EEPROM.c"
  6167 ;; Parameters:    Size  Location     Type
  6168 ;;  address         2   43[BANK0 ] unsigned short 
  6169 ;;  data            1   45[BANK0 ] unsigned char 
  6170 ;; Auto vars:     Size  Location     Type
  6171 ;;  i               1   48[BANK0 ] unsigned char 
  6172 ;;  i               1   47[BANK0 ] unsigned char 
  6173 ;; Return value:  Size  Location     Type
  6174 ;;                  1    wreg      void 
  6175 ;; Registers used:
  6176 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6177 ;; Tracked objects:
  6178 ;;		On entry : 0/0
  6179 ;;		On exit  : 0/0
  6180 ;;		Unchanged: 0/0
  6181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6182 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6183 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6184 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6185 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6186 ;;Total ram usage:        6 bytes
  6187 ;; Hardware stack levels used:    1
  6188 ;; Hardware stack levels required when called:   10
  6189 ;; This function calls:
  6190 ;;		_EEPROM_read
  6191 ;;		_lcdInst
  6192 ;;		_printf
  6193 ;; This function is called by:
  6194 ;;		_Loading
  6195 ;;		_logRun
  6196 ;; This function uses a non-reentrant model
  6197 ;;
  6198                           
  6199                           	psect	text14
  6200  003E9E                     __ptext14:
  6201                           	opt stack 0
  6202  003E9E                     _EEPROM_write:
  6203                           	opt stack 18
  6204                           
  6205                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  6206                           
  6207                           ;incstack = 0
  6208  003E9E  84A6               	bsf	4006,2,c	;volatile
  6209                           
  6210                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  6211  003EA0  0100               	movlb	0	; () banked
  6212  003EA2  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  6213  003EA4  6EAA               	movwf	4010,c	;volatile
  6214                           
  6215                           ; BSR set to: 0
  6216                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  6217  003EA6  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  6218                           
  6219                           ; BSR set to: 0
  6220                           ;EEPROM.c: 39: EEDATA = data;
  6221  003EAA  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  6222                           
  6223                           ; BSR set to: 0
  6224                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  6225  003EAE  9EA6               	bcf	4006,7,c	;volatile
  6226                           
  6227                           ; BSR set to: 0
  6228                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  6229  003EB0  9CA6               	bcf	4006,6,c	;volatile
  6230                           
  6231                           ; BSR set to: 0
  6232                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  6233  003EB2  9EF2               	bcf	intcon,7,c	;volatile
  6234                           
  6235                           ;EEPROM.c: 45: EECON2 = 0x55;
  6236  003EB4  0E55               	movlw	85
  6237  003EB6  6EA7               	movwf	4007,c	;volatile
  6238                           
  6239                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  6240  003EB8  0EAA               	movlw	170
  6241  003EBA  6EA7               	movwf	4007,c	;volatile
  6242                           
  6243                           ; BSR set to: 0
  6244                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  6245  003EBC  82A6               	bsf	4006,1,c	;volatile
  6246                           
  6247                           ; BSR set to: 0
  6248                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  6249  003EBE  8EF2               	bsf	intcon,7,c	;volatile
  6250  003EC0                     l1032:
  6251  003EC0  A8A1               	btfss	4001,4,c	;volatile
  6252  003EC2  D7FE               	goto	l1032
  6253                           
  6254                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  6255  003EC4  98A1               	bcf	4001,4,c	;volatile
  6256                           
  6257                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  6258  003EC6  94A6               	bcf	4006,2,c	;volatile
  6259                           
  6260                           ;EEPROM.c: 57: if(debug){
  6261  003EC8  0101               	movlb	1	; () banked
  6262  003ECA  512D               	movf	_debug& (0+255),w,b
  6263  003ECC  0101               	movlb	1	; () banked
  6264  003ECE  112E               	iorwf	(_debug+1)& (0+255),w,b
  6265  003ED0  B4D8               	btfsc	status,2,c
  6266  003ED2  0012               	return	
  6267                           
  6268                           ; BSR set to: 1
  6269                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6270  003ED4  0E01               	movlw	1
  6271  003ED6  ECF8  F029         	call	_lcdInst
  6272  003EDA  0E68               	movlw	104
  6273  003EDC  0100               	movlb	0	; () banked
  6274  003EDE  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6275  003EE0  0EE4               	movlw	228
  6276  003EE2                     u9167:
  6277  003EE2  2EE8               	decfsz	wreg,f,c
  6278  003EE4  D7FE               	bra	u9167
  6279  003EE6  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6280  003EE8  D7FC               	bra	u9167
  6281  003EEA  F000               	nop	
  6282                           
  6283                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  6284  003EEC  0E80               	movlw	128
  6285  003EEE  ECF8  F029         	call	_lcdInst
  6286                           
  6287                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  6288  003EF2  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  6289  003EF6  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  6290  003EFA  ECC6  F029         	call	_EEPROM_read	;wreg free
  6291  003EFE  0100               	movlb	0	; () banked
  6292  003F00  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  6293  003F02  A4D8               	btfss	status,2,c
  6294  003F04  D024               	goto	l6939
  6295                           
  6296                           ; BSR set to: 0
  6297                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  6298  003F06  0E10               	movlw	low STR_66
  6299  003F08  0100               	movlb	0	; () banked
  6300  003F0A  6F8E               	movwf	printf@f& (0+255),b
  6301  003F0C  0EFB               	movlw	high STR_66
  6302  003F0E  0100               	movlb	0	; () banked
  6303  003F10  6F8F               	movwf	(printf@f+1)& (0+255),b
  6304  003F12  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  6305  003F16  0100               	movlb	0	; () banked
  6306  003F18  6B91               	clrf	(?_printf+3)& (0+255),b
  6307  003F1A  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  6308  003F1E  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  6309  003F22  EC08  F00B         	call	_printf	;wreg free
  6310                           
  6311                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  6312  003F26  0E00               	movlw	0
  6313  003F28  0100               	movlb	0	; () banked
  6314  003F2A  6FAF               	movwf	EEPROM_write@i& (0+255),b
  6315  003F2C                     l6931:
  6316                           
  6317                           ; BSR set to: 0
  6318  003F2C  0E63               	movlw	99
  6319  003F2E  0100               	movlb	0	; () banked
  6320  003F30  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  6321  003F32  D001               	goto	l6935
  6322  003F34  0012               	return	
  6323  003F36                     l6935:
  6324                           
  6325                           ; BSR set to: 0
  6326  003F36  0E68               	movlw	104
  6327  003F38  0100               	movlb	0	; () banked
  6328  003F3A  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6329  003F3C  0EE4               	movlw	228
  6330  003F3E                     u9177:
  6331  003F3E  2EE8               	decfsz	wreg,f,c
  6332  003F40  D7FE               	bra	u9177
  6333  003F42  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6334  003F44  D7FC               	bra	u9177
  6335  003F46  F000               	nop	
  6336  003F48  0100               	movlb	0	; () banked
  6337  003F4A  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  6338  003F4C  D7EF               	goto	l6931
  6339  003F4E                     l6939:
  6340                           
  6341                           ; BSR set to: 0
  6342                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  6343  003F4E  0EBC               	movlw	low STR_67
  6344  003F50  0100               	movlb	0	; () banked
  6345  003F52  6F8E               	movwf	printf@f& (0+255),b
  6346  003F54  0EFF               	movlw	high STR_67
  6347  003F56  0100               	movlb	0	; () banked
  6348  003F58  6F8F               	movwf	(printf@f+1)& (0+255),b
  6349  003F5A  EC08  F00B         	call	_printf	;wreg free
  6350  003F5E  0E00               	movlw	0
  6351  003F60  0100               	movlb	0	; () banked
  6352  003F62  6FB0               	movwf	EEPROM_write@i_1399& (0+255),b
  6353  003F64                     l6943:
  6354                           
  6355                           ; BSR set to: 0
  6356  003F64  0E63               	movlw	99
  6357  003F66  0100               	movlb	0	; () banked
  6358  003F68  65B0               	cpfsgt	EEPROM_write@i_1399& (0+255),b
  6359  003F6A  D001               	goto	l6947
  6360  003F6C  0012               	return	
  6361  003F6E                     l6947:
  6362                           
  6363                           ; BSR set to: 0
  6364  003F6E  0E68               	movlw	104
  6365  003F70  0100               	movlb	0	; () banked
  6366  003F72  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6367  003F74  0EE4               	movlw	228
  6368  003F76                     u9187:
  6369  003F76  2EE8               	decfsz	wreg,f,c
  6370  003F78  D7FE               	bra	u9187
  6371  003F7A  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6372  003F7C  D7FC               	bra	u9187
  6373  003F7E  F000               	nop	
  6374  003F80  0100               	movlb	0	; () banked
  6375  003F82  2BB0               	incf	EEPROM_write@i_1399& (0+255),f,b
  6376  003F84  D7EF               	goto	l6943
  6377  003F86                     __end_of_EEPROM_write:
  6378                           	opt stack 0
  6379                           tblptru	equ	0xFF8
  6380                           tblptrh	equ	0xFF7
  6381                           tblptrl	equ	0xFF6
  6382                           tablat	equ	0xFF5
  6383                           prodh	equ	0xFF4
  6384                           prodl	equ	0xFF3
  6385                           intcon	equ	0xFF2
  6386                           intcon2	equ	0xFF1
  6387                           intcon3	equ	0xFF0
  6388                           postinc0	equ	0xFEE
  6389                           wreg	equ	0xFE8
  6390                           postdec1	equ	0xFE5
  6391                           fsr1l	equ	0xFE1
  6392                           indf2	equ	0xFDF
  6393                           postinc2	equ	0xFDE
  6394                           postdec2	equ	0xFDD
  6395                           fsr2h	equ	0xFDA
  6396                           fsr2l	equ	0xFD9
  6397                           status	equ	0xFD8
  6398                           
  6399 ;; *************** function _EEPROM_read *****************
  6400 ;; Defined at:
  6401 ;;		line 68 in file "EEPROM.c"
  6402 ;; Parameters:    Size  Location     Type
  6403 ;;  address         2    0[BANK0 ] unsigned short 
  6404 ;; Auto vars:     Size  Location     Type
  6405 ;;		None
  6406 ;; Return value:  Size  Location     Type
  6407 ;;                  1    wreg      unsigned char 
  6408 ;; Registers used:
  6409 ;;		wreg, status,2
  6410 ;; Tracked objects:
  6411 ;;		On entry : 0/0
  6412 ;;		On exit  : 0/0
  6413 ;;		Unchanged: 0/0
  6414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6415 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6418 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6419 ;;Total ram usage:        2 bytes
  6420 ;; Hardware stack levels used:    1
  6421 ;; Hardware stack levels required when called:    7
  6422 ;; This function calls:
  6423 ;;		Nothing
  6424 ;; This function is called by:
  6425 ;;		_Loading
  6426 ;;		_EEPROM_write
  6427 ;;		_logRun
  6428 ;; This function uses a non-reentrant model
  6429 ;;
  6430                           
  6431                           	psect	text15
  6432  00538C                     __ptext15:
  6433                           	opt stack 0
  6434  00538C                     _EEPROM_read:
  6435                           	opt stack 20
  6436                           
  6437                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  6438                           
  6439                           ;incstack = 0
  6440  00538C  0100               	movlb	0	; () banked
  6441  00538E  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  6442  005390  6EAA               	movwf	4010,c	;volatile
  6443                           
  6444                           ; BSR set to: 0
  6445                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  6446  005392  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  6447                           
  6448                           ; BSR set to: 0
  6449                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  6450  005396  9EA6               	bcf	4006,7,c	;volatile
  6451                           
  6452                           ; BSR set to: 0
  6453                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  6454  005398  9CA6               	bcf	4006,6,c	;volatile
  6455                           
  6456                           ; BSR set to: 0
  6457                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  6458  00539A  80A6               	bsf	4006,0,c	;volatile
  6459  00539C                     l1045:
  6460  00539C  B0A6               	btfsc	4006,0,c	;volatile
  6461  00539E  D7FE               	goto	l1045
  6462                           
  6463                           ;EEPROM.c: 81: return EEDATA;
  6464  0053A0  50A8               	movf	4008,w,c	;volatile
  6465  0053A2  0012               	return	
  6466  0053A4                     __end_of_EEPROM_read:
  6467                           	opt stack 0
  6468                           tblptru	equ	0xFF8
  6469                           tblptrh	equ	0xFF7
  6470                           tblptrl	equ	0xFF6
  6471                           tablat	equ	0xFF5
  6472                           prodh	equ	0xFF4
  6473                           prodl	equ	0xFF3
  6474                           intcon	equ	0xFF2
  6475                           intcon2	equ	0xFF1
  6476                           intcon3	equ	0xFF0
  6477                           postinc0	equ	0xFEE
  6478                           wreg	equ	0xFE8
  6479                           postdec1	equ	0xFE5
  6480                           fsr1l	equ	0xFE1
  6481                           indf2	equ	0xFDF
  6482                           postinc2	equ	0xFDE
  6483                           postdec2	equ	0xFDD
  6484                           fsr2h	equ	0xFDA
  6485                           fsr2l	equ	0xFD9
  6486                           status	equ	0xFD8
  6487                           
  6488 ;; *************** function _initUI *****************
  6489 ;; Defined at:
  6490 ;;		line 62 in file "UI.c"
  6491 ;; Parameters:    Size  Location     Type
  6492 ;;		None
  6493 ;; Auto vars:     Size  Location     Type
  6494 ;;		None
  6495 ;; Return value:  Size  Location     Type
  6496 ;;                  1    wreg      void 
  6497 ;; Registers used:
  6498 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6499 ;; Tracked objects:
  6500 ;;		On entry : 0/0
  6501 ;;		On exit  : 0/0
  6502 ;;		Unchanged: 0/0
  6503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6508 ;;Total ram usage:        0 bytes
  6509 ;; Hardware stack levels used:    1
  6510 ;; Hardware stack levels required when called:   12
  6511 ;; This function calls:
  6512 ;;		_change_state_to_menu_start
  6513 ;;		_loadRTC
  6514 ;; This function is called by:
  6515 ;;		_main
  6516 ;; This function uses a non-reentrant model
  6517 ;;
  6518                           
  6519                           	psect	text16
  6520  004F76                     __ptext16:
  6521                           	opt stack 0
  6522  004F76                     _initUI:
  6523                           	opt stack 18
  6524                           
  6525                           ;UI.c: 63: (INTCONbits.GIE = 1);
  6526                           
  6527                           ;incstack = 0
  6528  004F76  8EF2               	bsf	intcon,7,c	;volatile
  6529                           
  6530                           ;UI.c: 64: machine_state = UI_state;
  6531  004F78  0E00               	movlw	0
  6532  004F7A  0100               	movlb	0	; () banked
  6533  004F7C  6FFC               	movwf	_machine_state& (0+255),b
  6534                           
  6535                           ;UI.c: 65: logstate = 0;
  6536  004F7E  0E00               	movlw	0
  6537  004F80  0100               	movlb	0	; () banked
  6538  004F82  6FF7               	movwf	(_logstate+1)& (0+255),b
  6539  004F84  0E00               	movlw	0
  6540  004F86  6FF6               	movwf	_logstate& (0+255),b
  6541                           
  6542                           ; BSR set to: 0
  6543                           ;UI.c: 67: if(RTCflag){
  6544  004F88  0100               	movlb	0	; () banked
  6545  004F8A  51EA               	movf	_RTCflag& (0+255),w,b
  6546  004F8C  0100               	movlb	0	; () banked
  6547  004F8E  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  6548  004F90  A4D8               	btfss	status,2,c
  6549                           
  6550                           ; BSR set to: 0
  6551                           ;UI.c: 68: loadRTC();
  6552  004F92  ECBA  F022         	call	_loadRTC	;wreg free
  6553                           
  6554                           ;UI.c: 69: }
  6555                           ;UI.c: 71: change_state_to_menu_start();
  6556  004F96  ECD9  F028         	call	_change_state_to_menu_start	;wreg free
  6557                           
  6558                           ;UI.c: 72: firstboot = 1;
  6559  004F9A  0E00               	movlw	0
  6560  004F9C  0101               	movlb	1	; () banked
  6561  004F9E  6F3C               	movwf	(_firstboot+1)& (0+255),b
  6562  004FA0  0E01               	movlw	1
  6563  004FA2  6F3B               	movwf	_firstboot& (0+255),b
  6564                           
  6565                           ; BSR set to: 1
  6566  004FA4  0012               	return		;funcret
  6567  004FA6                     __end_of_initUI:
  6568                           	opt stack 0
  6569                           tblptru	equ	0xFF8
  6570                           tblptrh	equ	0xFF7
  6571                           tblptrl	equ	0xFF6
  6572                           tablat	equ	0xFF5
  6573                           prodh	equ	0xFF4
  6574                           prodl	equ	0xFF3
  6575                           intcon	equ	0xFF2
  6576                           intcon2	equ	0xFF1
  6577                           intcon3	equ	0xFF0
  6578                           postinc0	equ	0xFEE
  6579                           wreg	equ	0xFE8
  6580                           postdec1	equ	0xFE5
  6581                           fsr1l	equ	0xFE1
  6582                           indf2	equ	0xFDF
  6583                           postinc2	equ	0xFDE
  6584                           postdec2	equ	0xFDD
  6585                           fsr2h	equ	0xFDA
  6586                           fsr2l	equ	0xFD9
  6587                           status	equ	0xFD8
  6588                           
  6589 ;; *************** function _loadRTC *****************
  6590 ;; Defined at:
  6591 ;;		line 28 in file "RTC.c"
  6592 ;; Parameters:    Size  Location     Type
  6593 ;;		None
  6594 ;; Auto vars:     Size  Location     Type
  6595 ;;  i               2   22[BANK0 ] int 
  6596 ;; Return value:  Size  Location     Type
  6597 ;;                  1    wreg      void 
  6598 ;; Registers used:
  6599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6600 ;; Tracked objects:
  6601 ;;		On entry : 0/0
  6602 ;;		On exit  : 0/0
  6603 ;;		Unchanged: 0/0
  6604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6606 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6607 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6608 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6609 ;;Total ram usage:        3 bytes
  6610 ;; Hardware stack levels used:    1
  6611 ;; Hardware stack levels required when called:    9
  6612 ;; This function calls:
  6613 ;;		_I2C_Master_Init
  6614 ;;		_I2C_Master_Start
  6615 ;;		_I2C_Master_Stop
  6616 ;;		_I2C_Master_Write
  6617 ;; This function is called by:
  6618 ;;		_initUI
  6619 ;; This function uses a non-reentrant model
  6620 ;;
  6621                           
  6622                           	psect	text17
  6623  004574                     __ptext17:
  6624                           	opt stack 0
  6625  004574                     _loadRTC:
  6626                           	opt stack 20
  6627                           
  6628                           ;RTC.c: 30: I2C_Master_Init(10000);
  6629                           
  6630                           ; BSR set to: 1
  6631                           ;incstack = 0
  6632  004574  0E10               	movlw	16
  6633  004576  0100               	movlb	0	; () banked
  6634  004578  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  6635  00457A  0E27               	movlw	39
  6636  00457C  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  6637  00457E  0E00               	movlw	0
  6638  004580  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  6639  004582  0E00               	movlw	0
  6640  004584  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  6641  004586  EC85  F025         	call	_I2C_Master_Init	;wreg free
  6642                           
  6643                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  6644  00458A  9EF2               	bcf	intcon,7,c	;volatile
  6645                           
  6646                           ;RTC.c: 34: I2C_Master_Start();
  6647  00458C  EC1E  F02A         	call	_I2C_Master_Start	;wreg free
  6648                           
  6649                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  6650  004590  0E00               	movlw	0
  6651  004592  0100               	movlb	0	; () banked
  6652  004594  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6653  004596  0ED0               	movlw	208
  6654  004598  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6655  00459A  EC0C  F02A         	call	_I2C_Master_Write	;wreg free
  6656                           
  6657                           ;RTC.c: 36: I2C_Master_Write(0x00);
  6658  00459E  0E00               	movlw	0
  6659  0045A0  0100               	movlb	0	; () banked
  6660  0045A2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6661  0045A4  0E00               	movlw	0
  6662  0045A6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6663  0045A8  EC0C  F02A         	call	_I2C_Master_Write	;wreg free
  6664                           
  6665                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  6666  0045AC  0E00               	movlw	0
  6667  0045AE  0100               	movlb	0	; () banked
  6668  0045B0  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  6669  0045B2  0E00               	movlw	0
  6670  0045B4  6F96               	movwf	loadRTC@i& (0+255),b
  6671  0045B6                     l7085:
  6672                           
  6673                           ; BSR set to: 0
  6674  0045B6  0100               	movlb	0	; () banked
  6675  0045B8  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  6676  0045BA  D008               	goto	l7089
  6677  0045BC  0100               	movlb	0	; () banked
  6678  0045BE  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  6679  0045C0  E11B               	bnz	l7095
  6680  0045C2  0E07               	movlw	7
  6681  0045C4  0100               	movlb	0	; () banked
  6682  0045C6  5D96               	subwf	loadRTC@i& (0+255),w,b
  6683  0045C8  B0D8               	btfsc	status,0,c
  6684  0045CA  D016               	goto	l7095
  6685  0045CC                     l7089:
  6686                           
  6687                           ; BSR set to: 0
  6688                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  6689  0045CC  0E1C               	movlw	low _time
  6690  0045CE  0100               	movlb	0	; () banked
  6691  0045D0  2596               	addwf	loadRTC@i& (0+255),w,b
  6692  0045D2  6ED9               	movwf	fsr2l,c
  6693  0045D4  0E01               	movlw	high _time
  6694  0045D6  0100               	movlb	0	; () banked
  6695  0045D8  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  6696  0045DA  6EDA               	movwf	fsr2h,c
  6697  0045DC  50DF               	movf	indf2,w,c
  6698  0045DE  0100               	movlb	0	; () banked
  6699  0045E0  6F95               	movwf	??_loadRTC& (0+255),b
  6700  0045E2  0100               	movlb	0	; () banked
  6701  0045E4  5195               	movf	??_loadRTC& (0+255),w,b
  6702  0045E6  0100               	movlb	0	; () banked
  6703  0045E8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6704  0045EA  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  6705  0045EC  EC0C  F02A         	call	_I2C_Master_Write	;wreg free
  6706  0045F0  0100               	movlb	0	; () banked
  6707  0045F2  4B96               	infsnz	loadRTC@i& (0+255),f,b
  6708  0045F4  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  6709  0045F6  D7DF               	goto	l7085
  6710  0045F8                     l7095:
  6711                           
  6712                           ; BSR set to: 0
  6713                           ;RTC.c: 39: }
  6714                           ;RTC.c: 40: I2C_Master_Stop();
  6715  0045F8  EC1A  F02A         	call	_I2C_Master_Stop	;wreg free
  6716                           
  6717                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  6718  0045FC  8EF2               	bsf	intcon,7,c	;volatile
  6719  0045FE  0012               	return		;funcret
  6720  004600                     __end_of_loadRTC:
  6721                           	opt stack 0
  6722                           tblptru	equ	0xFF8
  6723                           tblptrh	equ	0xFF7
  6724                           tblptrl	equ	0xFF6
  6725                           tablat	equ	0xFF5
  6726                           prodh	equ	0xFF4
  6727                           prodl	equ	0xFF3
  6728                           intcon	equ	0xFF2
  6729                           intcon2	equ	0xFF1
  6730                           intcon3	equ	0xFF0
  6731                           postinc0	equ	0xFEE
  6732                           wreg	equ	0xFE8
  6733                           postdec1	equ	0xFE5
  6734                           fsr1l	equ	0xFE1
  6735                           indf2	equ	0xFDF
  6736                           postinc2	equ	0xFDE
  6737                           postdec2	equ	0xFDD
  6738                           fsr2h	equ	0xFDA
  6739                           fsr2l	equ	0xFD9
  6740                           status	equ	0xFD8
  6741                           
  6742 ;; *************** function _I2C_Master_Init *****************
  6743 ;; Defined at:
  6744 ;;		line 15 in file "I2C.c"
  6745 ;; Parameters:    Size  Location     Type
  6746 ;;  c               4   13[BANK0 ] const unsigned long 
  6747 ;; Auto vars:     Size  Location     Type
  6748 ;;		None
  6749 ;; Return value:  Size  Location     Type
  6750 ;;                  1    wreg      void 
  6751 ;; Registers used:
  6752 ;;		wreg, status,2, status,0, cstack
  6753 ;; Tracked objects:
  6754 ;;		On entry : 0/0
  6755 ;;		On exit  : 0/0
  6756 ;;		Unchanged: 0/0
  6757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6758 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6760 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6761 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6762 ;;Total ram usage:        8 bytes
  6763 ;; Hardware stack levels used:    1
  6764 ;; Hardware stack levels required when called:    8
  6765 ;; This function calls:
  6766 ;;		___lldiv
  6767 ;; This function is called by:
  6768 ;;		_main
  6769 ;;		_loadRTC
  6770 ;; This function uses a non-reentrant model
  6771 ;;
  6772                           
  6773                           	psect	text18
  6774  004B0A                     __ptext18:
  6775                           	opt stack 0
  6776  004B0A                     _I2C_Master_Init:
  6777                           	opt stack 20
  6778                           
  6779                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  6780                           
  6781                           ;incstack = 0
  6782  004B0A  0E00               	movlw	0
  6783  004B0C  6EC7               	movwf	4039,c	;volatile
  6784                           
  6785                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  6786  004B0E  0E28               	movlw	40
  6787  004B10  6EC6               	movwf	4038,c	;volatile
  6788                           
  6789                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  6790  004B12  0E00               	movlw	0
  6791  004B14  6EC5               	movwf	4037,c	;volatile
  6792                           
  6793                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  6794  004B16  0E00               	movlw	0
  6795  004B18  0100               	movlb	0	; () banked
  6796  004B1A  6F80               	movwf	___lldiv@dividend& (0+255),b
  6797  004B1C  0E48               	movlw	72
  6798  004B1E  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  6799  004B20  0EE8               	movlw	232
  6800  004B22  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  6801  004B24  0E01               	movlw	1
  6802  004B26  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  6803  004B28  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6804  004B2C  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6805  004B30  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6806  004B34  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6807  004B38  0E02               	movlw	2
  6808  004B3A                     u5335:
  6809  004B3A  90D8               	bcf	status,0,c
  6810  004B3C  0100               	movlb	0	; () banked
  6811  004B3E  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6812  004B40  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6813  004B42  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6814  004B44  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6815  004B46  2EE8               	decfsz	wreg,f,c
  6816  004B48  D7F8               	goto	u5335
  6817  004B4A  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  6818  004B4E  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6819  004B52  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6820  004B56  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6821  004B5A  EC60  F021         	call	___lldiv	;wreg free
  6822  004B5E  0100               	movlb	0	; () banked
  6823  004B60  0580               	decf	?___lldiv& (0+255),w,b
  6824  004B62  6EC8               	movwf	4040,c	;volatile
  6825                           
  6826                           ; BSR set to: 0
  6827                           ;I2C.c: 22: TRISC3 = 1;
  6828  004B64  8694               	bsf	3988,3,c	;volatile
  6829                           
  6830                           ; BSR set to: 0
  6831                           ;I2C.c: 23: TRISC4 = 1;
  6832  004B66  8894               	bsf	3988,4,c	;volatile
  6833                           
  6834                           ; BSR set to: 0
  6835  004B68  0012               	return		;funcret
  6836  004B6A                     __end_of_I2C_Master_Init:
  6837                           	opt stack 0
  6838                           tblptru	equ	0xFF8
  6839                           tblptrh	equ	0xFF7
  6840                           tblptrl	equ	0xFF6
  6841                           tablat	equ	0xFF5
  6842                           prodh	equ	0xFF4
  6843                           prodl	equ	0xFF3
  6844                           intcon	equ	0xFF2
  6845                           intcon2	equ	0xFF1
  6846                           intcon3	equ	0xFF0
  6847                           postinc0	equ	0xFEE
  6848                           wreg	equ	0xFE8
  6849                           postdec1	equ	0xFE5
  6850                           fsr1l	equ	0xFE1
  6851                           indf2	equ	0xFDF
  6852                           postinc2	equ	0xFDE
  6853                           postdec2	equ	0xFDD
  6854                           fsr2h	equ	0xFDA
  6855                           fsr2l	equ	0xFD9
  6856                           status	equ	0xFD8
  6857                           
  6858 ;; *************** function ___lldiv *****************
  6859 ;; Defined at:
  6860 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6861 ;; Parameters:    Size  Location     Type
  6862 ;;  dividend        4    0[BANK0 ] unsigned long 
  6863 ;;  divisor         4    4[BANK0 ] unsigned long 
  6864 ;; Auto vars:     Size  Location     Type
  6865 ;;  quotient        4    8[BANK0 ] unsigned long 
  6866 ;;  counter         1   12[BANK0 ] unsigned char 
  6867 ;; Return value:  Size  Location     Type
  6868 ;;                  4    0[BANK0 ] unsigned long 
  6869 ;; Registers used:
  6870 ;;		wreg, status,2, status,0
  6871 ;; Tracked objects:
  6872 ;;		On entry : 0/0
  6873 ;;		On exit  : 0/0
  6874 ;;		Unchanged: 0/0
  6875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6876 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6877 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6879 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6880 ;;Total ram usage:       13 bytes
  6881 ;; Hardware stack levels used:    1
  6882 ;; Hardware stack levels required when called:    7
  6883 ;; This function calls:
  6884 ;;		Nothing
  6885 ;; This function is called by:
  6886 ;;		_I2C_Master_Init
  6887 ;; This function uses a non-reentrant model
  6888 ;;
  6889                           
  6890                           	psect	text19
  6891  0042C0                     __ptext19:
  6892                           	opt stack 0
  6893  0042C0                     ___lldiv:
  6894                           	opt stack 20
  6895                           
  6896                           ; BSR set to: 0
  6897                           ;incstack = 0
  6898  0042C0  0E00               	movlw	0
  6899  0042C2  0100               	movlb	0	; () banked
  6900  0042C4  6F88               	movwf	___lldiv@quotient& (0+255),b
  6901  0042C6  0E00               	movlw	0
  6902  0042C8  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  6903  0042CA  0E00               	movlw	0
  6904  0042CC  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6905  0042CE  0E00               	movlw	0
  6906  0042D0  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6907                           
  6908                           ; BSR set to: 0
  6909  0042D2  0100               	movlb	0	; () banked
  6910  0042D4  5184               	movf	___lldiv@divisor& (0+255),w,b
  6911  0042D6  0100               	movlb	0	; () banked
  6912  0042D8  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6913  0042DA  0100               	movlb	0	; () banked
  6914  0042DC  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6915  0042DE  0100               	movlb	0	; () banked
  6916  0042E0  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6917  0042E2  B4D8               	btfsc	status,2,c
  6918  0042E4  D042               	goto	l1831
  6919                           
  6920                           ; BSR set to: 0
  6921  0042E6  0E01               	movlw	1
  6922  0042E8  0100               	movlb	0	; () banked
  6923  0042EA  6F8C               	movwf	___lldiv@counter& (0+255),b
  6924  0042EC  D008               	goto	l6505
  6925  0042EE                     l6503:
  6926                           
  6927                           ; BSR set to: 0
  6928  0042EE  0100               	movlb	0	; () banked
  6929  0042F0  90D8               	bcf	status,0,c
  6930  0042F2  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  6931  0042F4  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6932  0042F6  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6933  0042F8  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6934  0042FA  0100               	movlb	0	; () banked
  6935  0042FC  2B8C               	incf	___lldiv@counter& (0+255),f,b
  6936  0042FE                     l6505:
  6937                           
  6938                           ; BSR set to: 0
  6939  0042FE  0100               	movlb	0	; () banked
  6940  004300  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6941  004302  D7F5               	goto	l6503
  6942  004304                     l6507:
  6943                           
  6944                           ; BSR set to: 0
  6945  004304  0100               	movlb	0	; () banked
  6946  004306  90D8               	bcf	status,0,c
  6947  004308  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  6948  00430A  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6949  00430C  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6950  00430E  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6951                           
  6952                           ; BSR set to: 0
  6953  004310  0100               	movlb	0	; () banked
  6954  004312  5184               	movf	___lldiv@divisor& (0+255),w,b
  6955  004314  0100               	movlb	0	; () banked
  6956  004316  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  6957  004318  0100               	movlb	0	; () banked
  6958  00431A  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6959  00431C  0100               	movlb	0	; () banked
  6960  00431E  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6961  004320  0100               	movlb	0	; () banked
  6962  004322  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6963  004324  0100               	movlb	0	; () banked
  6964  004326  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6965  004328  0100               	movlb	0	; () banked
  6966  00432A  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6967  00432C  0100               	movlb	0	; () banked
  6968  00432E  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6969  004330  A0D8               	btfss	status,0,c
  6970  004332  D012               	goto	l6515
  6971                           
  6972                           ; BSR set to: 0
  6973  004334  0100               	movlb	0	; () banked
  6974  004336  5184               	movf	___lldiv@divisor& (0+255),w,b
  6975  004338  0100               	movlb	0	; () banked
  6976  00433A  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  6977  00433C  0100               	movlb	0	; () banked
  6978  00433E  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6979  004340  0100               	movlb	0	; () banked
  6980  004342  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6981  004344  0100               	movlb	0	; () banked
  6982  004346  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6983  004348  0100               	movlb	0	; () banked
  6984  00434A  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6985  00434C  0100               	movlb	0	; () banked
  6986  00434E  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6987  004350  0100               	movlb	0	; () banked
  6988  004352  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6989                           
  6990                           ; BSR set to: 0
  6991  004354  0100               	movlb	0	; () banked
  6992  004356  8188               	bsf	___lldiv@quotient& (0+255),0,b
  6993  004358                     l6515:
  6994                           
  6995                           ; BSR set to: 0
  6996  004358  0100               	movlb	0	; () banked
  6997  00435A  90D8               	bcf	status,0,c
  6998  00435C  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6999  00435E  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7000  004360  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7001  004362  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  7002                           
  7003                           ; BSR set to: 0
  7004  004364  0100               	movlb	0	; () banked
  7005  004366  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  7006  004368  D7CD               	goto	l6507
  7007  00436A                     l1831:
  7008                           
  7009                           ; BSR set to: 0
  7010  00436A  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7011  00436E  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7012  004372  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7013  004376  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7014                           
  7015                           ; BSR set to: 0
  7016  00437A  0012               	return		;funcret
  7017  00437C                     __end_of___lldiv:
  7018                           	opt stack 0
  7019                           tblptru	equ	0xFF8
  7020                           tblptrh	equ	0xFF7
  7021                           tblptrl	equ	0xFF6
  7022                           tablat	equ	0xFF5
  7023                           prodh	equ	0xFF4
  7024                           prodl	equ	0xFF3
  7025                           intcon	equ	0xFF2
  7026                           intcon2	equ	0xFF1
  7027                           intcon3	equ	0xFF0
  7028                           postinc0	equ	0xFEE
  7029                           wreg	equ	0xFE8
  7030                           postdec1	equ	0xFE5
  7031                           fsr1l	equ	0xFE1
  7032                           indf2	equ	0xFDF
  7033                           postinc2	equ	0xFDE
  7034                           postdec2	equ	0xFDD
  7035                           fsr2h	equ	0xFDA
  7036                           fsr2l	equ	0xFD9
  7037                           status	equ	0xFD8
  7038                           
  7039 ;; *************** function _change_state_to_menu_start *****************
  7040 ;; Defined at:
  7041 ;;		line 474 in file "UI.c"
  7042 ;; Parameters:    Size  Location     Type
  7043 ;;		None
  7044 ;; Auto vars:     Size  Location     Type
  7045 ;;		None
  7046 ;; Return value:  Size  Location     Type
  7047 ;;                  1    wreg      void 
  7048 ;; Registers used:
  7049 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7050 ;; Tracked objects:
  7051 ;;		On entry : 0/0
  7052 ;;		On exit  : 0/0
  7053 ;;		Unchanged: 0/0
  7054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7059 ;;Total ram usage:        0 bytes
  7060 ;; Hardware stack levels used:    1
  7061 ;; Hardware stack levels required when called:   11
  7062 ;; This function calls:
  7063 ;;		_lcdInst
  7064 ;;		_printRTC
  7065 ;;		_printf
  7066 ;; This function is called by:
  7067 ;;		_initUI
  7068 ;; This function uses a non-reentrant model
  7069 ;;
  7070                           
  7071                           	psect	text20
  7072  0051B2                     __ptext20:
  7073                           	opt stack 0
  7074  0051B2                     _change_state_to_menu_start:
  7075                           	opt stack 18
  7076                           
  7077                           ;UI.c: 475: cur_state = 0;
  7078                           
  7079                           ; BSR set to: 0
  7080                           ;incstack = 0
  7081  0051B2  0E00               	movlw	0
  7082  0051B4  0100               	movlb	0	; () banked
  7083  0051B6  6FED               	movwf	(_cur_state+1)& (0+255),b
  7084  0051B8  0E00               	movlw	0
  7085  0051BA  6FEC               	movwf	_cur_state& (0+255),b
  7086                           
  7087                           ; BSR set to: 0
  7088                           ;UI.c: 477: lcdInst(0b10000000);;
  7089  0051BC  0E80               	movlw	128
  7090  0051BE  ECF8  F029         	call	_lcdInst
  7091                           
  7092                           ;UI.c: 478: printRTC();
  7093  0051C2  EC1C  F012         	call	_printRTC	;wreg free
  7094                           
  7095                           ;UI.c: 479: lcdInst(0b11000000);;
  7096  0051C6  0EC0               	movlw	192
  7097  0051C8  ECF8  F029         	call	_lcdInst
  7098                           
  7099                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  7100  0051CC  0EF6               	movlw	low STR_30
  7101  0051CE  0100               	movlb	0	; () banked
  7102  0051D0  6F8E               	movwf	printf@f& (0+255),b
  7103  0051D2  0EFD               	movlw	high STR_30
  7104  0051D4  0100               	movlb	0	; () banked
  7105  0051D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7106  0051D8  EC08  F00B         	call	_printf	;wreg free
  7107  0051DC  0012               	return		;funcret
  7108  0051DE                     __end_of_change_state_to_menu_start:
  7109                           	opt stack 0
  7110                           tblptru	equ	0xFF8
  7111                           tblptrh	equ	0xFF7
  7112                           tblptrl	equ	0xFF6
  7113                           tablat	equ	0xFF5
  7114                           prodh	equ	0xFF4
  7115                           prodl	equ	0xFF3
  7116                           intcon	equ	0xFF2
  7117                           intcon2	equ	0xFF1
  7118                           intcon3	equ	0xFF0
  7119                           postinc0	equ	0xFEE
  7120                           wreg	equ	0xFE8
  7121                           postdec1	equ	0xFE5
  7122                           fsr1l	equ	0xFE1
  7123                           indf2	equ	0xFDF
  7124                           postinc2	equ	0xFDE
  7125                           postdec2	equ	0xFDD
  7126                           fsr2h	equ	0xFDA
  7127                           fsr2l	equ	0xFD9
  7128                           status	equ	0xFD8
  7129                           
  7130 ;; *************** function _initTime *****************
  7131 ;; Defined at:
  7132 ;;		line 17 in file "RTC.c"
  7133 ;; Parameters:    Size  Location     Type
  7134 ;;  s               1    wreg     unsigned char 
  7135 ;;  m               1    0[BANK0 ] unsigned char 
  7136 ;;  h               1    1[BANK0 ] unsigned char 
  7137 ;;  w               1    2[BANK0 ] unsigned char 
  7138 ;;  DD              1    3[BANK0 ] unsigned char 
  7139 ;;  MM              1    4[BANK0 ] unsigned char 
  7140 ;;  YY              1    5[BANK0 ] unsigned char 
  7141 ;; Auto vars:     Size  Location     Type
  7142 ;;  s               1    6[BANK0 ] unsigned char 
  7143 ;; Return value:  Size  Location     Type
  7144 ;;                  1    wreg      void 
  7145 ;; Registers used:
  7146 ;;		wreg
  7147 ;; Tracked objects:
  7148 ;;		On entry : 0/0
  7149 ;;		On exit  : 0/0
  7150 ;;		Unchanged: 0/0
  7151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7152 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7153 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7155 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7156 ;;Total ram usage:        7 bytes
  7157 ;; Hardware stack levels used:    1
  7158 ;; Hardware stack levels required when called:    7
  7159 ;; This function calls:
  7160 ;;		Nothing
  7161 ;; This function is called by:
  7162 ;;		_main
  7163 ;; This function uses a non-reentrant model
  7164 ;;
  7165                           
  7166                           	psect	text21
  7167  005316                     __ptext21:
  7168                           	opt stack 0
  7169  005316                     _initTime:
  7170                           	opt stack 23
  7171                           
  7172                           ;incstack = 0
  7173                           ;initTime@s stored from wreg
  7174  005316  0100               	movlb	0	; () banked
  7175  005318  6F86               	movwf	initTime@s& (0+255),b
  7176                           
  7177                           ;RTC.c: 19: time[0] = s;
  7178  00531A  C086  F11C         	movff	initTime@s,_time
  7179                           
  7180                           ;RTC.c: 20: time[1] = m;
  7181  00531E  C080  F11D         	movff	initTime@m,_time+1
  7182                           
  7183                           ;RTC.c: 21: time[2] = h;
  7184  005322  C081  F11E         	movff	initTime@h,_time+2
  7185                           
  7186                           ;RTC.c: 22: time[3] = w;
  7187  005326  C082  F11F         	movff	initTime@w,_time+3
  7188                           
  7189                           ;RTC.c: 23: time[4] = DD;
  7190  00532A  C083  F120         	movff	initTime@DD,_time+4
  7191                           
  7192                           ;RTC.c: 24: time[5] = MM;
  7193  00532E  C084  F121         	movff	initTime@MM,_time+5
  7194                           
  7195                           ;RTC.c: 25: time[6] = YY;
  7196  005332  C085  F122         	movff	initTime@YY,_time+6
  7197  005336  0012               	return		;funcret
  7198  005338                     __end_of_initTime:
  7199                           	opt stack 0
  7200                           tblptru	equ	0xFF8
  7201                           tblptrh	equ	0xFF7
  7202                           tblptrl	equ	0xFF6
  7203                           tablat	equ	0xFF5
  7204                           prodh	equ	0xFF4
  7205                           prodl	equ	0xFF3
  7206                           intcon	equ	0xFF2
  7207                           intcon2	equ	0xFF1
  7208                           intcon3	equ	0xFF0
  7209                           postinc0	equ	0xFEE
  7210                           wreg	equ	0xFE8
  7211                           postdec1	equ	0xFE5
  7212                           fsr1l	equ	0xFE1
  7213                           indf2	equ	0xFDF
  7214                           postinc2	equ	0xFDE
  7215                           postdec2	equ	0xFDD
  7216                           fsr2h	equ	0xFDA
  7217                           fsr2l	equ	0xFD9
  7218                           status	equ	0xFD8
  7219                           
  7220 ;; *************** function _initLCD *****************
  7221 ;; Defined at:
  7222 ;;		line 48 in file "lcd.c"
  7223 ;; Parameters:    Size  Location     Type
  7224 ;;		None
  7225 ;; Auto vars:     Size  Location     Type
  7226 ;;		None
  7227 ;; Return value:  Size  Location     Type
  7228 ;;                  1    wreg      void 
  7229 ;; Registers used:
  7230 ;;		wreg, status,2, status,0, cstack
  7231 ;; Tracked objects:
  7232 ;;		On entry : 0/0
  7233 ;;		On exit  : 0/0
  7234 ;;		Unchanged: 0/0
  7235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7238 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7239 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7240 ;;Total ram usage:        1 bytes
  7241 ;; Hardware stack levels used:    1
  7242 ;; Hardware stack levels required when called:    9
  7243 ;; This function calls:
  7244 ;;		_lcdInst
  7245 ;; This function is called by:
  7246 ;;		_main
  7247 ;; This function uses a non-reentrant model
  7248 ;;
  7249                           
  7250                           	psect	text22
  7251  004DAE                     __ptext22:
  7252                           	opt stack 0
  7253  004DAE                     _initLCD:
  7254                           	opt stack 21
  7255                           
  7256                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  7257                           
  7258                           ;incstack = 0
  7259  004DAE  0E9C               	movlw	156
  7260  004DB0  0100               	movlb	0	; () banked
  7261  004DB2  6F83               	movwf	??_initLCD& (0+255),b
  7262  004DB4  0ED7               	movlw	215
  7263  004DB6                     u9197:
  7264  004DB6  2EE8               	decfsz	wreg,f,c
  7265  004DB8  D7FE               	bra	u9197
  7266  004DBA  2F83               	decfsz	??_initLCD& (0+255),f,b
  7267  004DBC  D7FC               	bra	u9197
  7268                           
  7269                           ;lcd.c: 50: lcdInst(0b00110011);
  7270  004DBE  0E33               	movlw	51
  7271  004DC0  ECF8  F029         	call	_lcdInst
  7272                           
  7273                           ;lcd.c: 51: lcdInst(0b00110010);
  7274  004DC4  0E32               	movlw	50
  7275  004DC6  ECF8  F029         	call	_lcdInst
  7276                           
  7277                           ;lcd.c: 53: lcdInst(0b00101000);
  7278  004DCA  0E28               	movlw	40
  7279  004DCC  ECF8  F029         	call	_lcdInst
  7280                           
  7281                           ;lcd.c: 54: lcdInst(0b00001100);
  7282  004DD0  0E0C               	movlw	12
  7283  004DD2  ECF8  F029         	call	_lcdInst
  7284                           
  7285                           ;lcd.c: 55: lcdInst(0b00000110);
  7286  004DD6  0E06               	movlw	6
  7287  004DD8  ECF8  F029         	call	_lcdInst
  7288                           
  7289                           ;lcd.c: 56: lcdInst(0b00000001);
  7290  004DDC  0E01               	movlw	1
  7291  004DDE  ECF8  F029         	call	_lcdInst
  7292                           
  7293                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  7294  004DE2  0E9C               	movlw	156
  7295  004DE4  0100               	movlb	0	; () banked
  7296  004DE6  6F83               	movwf	??_initLCD& (0+255),b
  7297  004DE8  0ED7               	movlw	215
  7298  004DEA                     u9207:
  7299  004DEA  2EE8               	decfsz	wreg,f,c
  7300  004DEC  D7FE               	bra	u9207
  7301  004DEE  2F83               	decfsz	??_initLCD& (0+255),f,b
  7302  004DF0  D7FC               	bra	u9207
  7303  004DF2  0012               	return		;funcret
  7304  004DF4                     __end_of_initLCD:
  7305                           	opt stack 0
  7306                           tblptru	equ	0xFF8
  7307                           tblptrh	equ	0xFF7
  7308                           tblptrl	equ	0xFF6
  7309                           tablat	equ	0xFF5
  7310                           prodh	equ	0xFF4
  7311                           prodl	equ	0xFF3
  7312                           intcon	equ	0xFF2
  7313                           intcon2	equ	0xFF1
  7314                           intcon3	equ	0xFF0
  7315                           postinc0	equ	0xFEE
  7316                           wreg	equ	0xFE8
  7317                           postdec1	equ	0xFE5
  7318                           fsr1l	equ	0xFE1
  7319                           indf2	equ	0xFDF
  7320                           postinc2	equ	0xFDE
  7321                           postdec2	equ	0xFDD
  7322                           fsr2h	equ	0xFDA
  7323                           fsr2l	equ	0xFD9
  7324                           status	equ	0xFD8
  7325                           
  7326 ;; *************** function _UI *****************
  7327 ;; Defined at:
  7328 ;;		line 76 in file "UI.c"
  7329 ;; Parameters:    Size  Location     Type
  7330 ;;		None
  7331 ;; Auto vars:     Size  Location     Type
  7332 ;;  i               1   73[BANK0 ] unsigned char 
  7333 ;;  i               1   85[BANK0 ] unsigned char 
  7334 ;;  i               1   84[BANK0 ] unsigned char 
  7335 ;;  i               1   83[BANK0 ] unsigned char 
  7336 ;;  i               1   82[BANK0 ] unsigned char 
  7337 ;;  i               1   81[BANK0 ] unsigned char 
  7338 ;;  i               1   80[BANK0 ] unsigned char 
  7339 ;;  i               1   79[BANK0 ] unsigned char 
  7340 ;;  i               1   78[BANK0 ] unsigned char 
  7341 ;;  i               1   77[BANK0 ] unsigned char 
  7342 ;;  i               1   76[BANK0 ] unsigned char 
  7343 ;;  i               1   75[BANK0 ] unsigned char 
  7344 ;;  i               1   74[BANK0 ] unsigned char 
  7345 ;;  month           4   86[BANK0 ] unsigned char [4]
  7346 ;;  i               1   72[BANK0 ] unsigned char 
  7347 ;; Return value:  Size  Location     Type
  7348 ;;                  1    wreg      void 
  7349 ;; Registers used:
  7350 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7351 ;; Tracked objects:
  7352 ;;		On entry : 0/0
  7353 ;;		On exit  : 0/0
  7354 ;;		Unchanged: 0/0
  7355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7357 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7358 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7359 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7360 ;;Total ram usage:       22 bytes
  7361 ;; Hardware stack levels used:    1
  7362 ;; Hardware stack levels required when called:   11
  7363 ;; This function calls:
  7364 ;;		___awdiv
  7365 ;;		___awmod
  7366 ;;		_change_state_to_menu_12
  7367 ;;		_change_state_to_menu_22
  7368 ;;		_lcdInst
  7369 ;;		_printRTC
  7370 ;;		_printf
  7371 ;;		_strcpy
  7372 ;; This function is called by:
  7373 ;;		_main
  7374 ;; This function uses a non-reentrant model
  7375 ;;
  7376                           
  7377                           	psect	text23
  7378  0008CA                     __ptext23:
  7379                           	opt stack 0
  7380  0008CA                     _UI:
  7381                           	opt stack 19
  7382                           
  7383                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  7384                           
  7385                           ;incstack = 0
  7386  0008CA  0E02               	movlw	2
  7387  0008CC  0100               	movlb	0	; () banked
  7388  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  7389  0008D0  A4D8               	btfss	status,2,c
  7390  0008D2  D075               	goto	l8653
  7391                           
  7392                           ; BSR set to: 0
  7393                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7394  0008D4  0E01               	movlw	1
  7395  0008D6  ECF8  F029         	call	_lcdInst
  7396  0008DA  0E68               	movlw	104
  7397  0008DC  0100               	movlb	0	; () banked
  7398  0008DE  6FC4               	movwf	??_UI& (0+255),b
  7399  0008E0  0EE4               	movlw	228
  7400  0008E2                     u9217:
  7401  0008E2  2EE8               	decfsz	wreg,f,c
  7402  0008E4  D7FE               	bra	u9217
  7403  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7404  0008E8  D7FC               	bra	u9217
  7405  0008EA  F000               	nop	
  7406                           
  7407                           ;UI.c: 79: lcdInst(0b10000000);;
  7408  0008EC  0E80               	movlw	128
  7409  0008EE  ECF8  F029         	call	_lcdInst
  7410                           
  7411                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  7412  0008F2  0E91               	movlw	low STR_1
  7413  0008F4  0100               	movlb	0	; () banked
  7414  0008F6  6F8E               	movwf	printf@f& (0+255),b
  7415  0008F8  0EFB               	movlw	high STR_1
  7416  0008FA  0100               	movlb	0	; () banked
  7417  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7418  0008FE  0E01               	movlw	1
  7419  000900  0100               	movlb	0	; () banked
  7420  000902  25FD               	addwf	_sel& (0+255),w,b
  7421  000904  0100               	movlb	0	; () banked
  7422  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  7423  000908  0100               	movlb	0	; () banked
  7424  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  7425  00090C  0E00               	movlw	0
  7426  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  7427  000910  EC08  F00B         	call	_printf	;wreg free
  7428                           
  7429                           ;UI.c: 81: lcdInst(0b11000000);;
  7430  000914  0EC0               	movlw	192
  7431  000916  ECF8  F029         	call	_lcdInst
  7432                           
  7433                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7434  00091A  0E0E               	movlw	14
  7435  00091C  0100               	movlb	0	; () banked
  7436  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7437  000920  0E10               	movlw	16
  7438  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  7439  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  7440  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  7441  00092C  EC69  F022         	call	___awmod	;wreg free
  7442  000930  C080  F0C6         	movff	?___awmod,_UI$2425
  7443  000934  C081  F0C7         	movff	?___awmod+1,_UI$2425+1
  7444                           
  7445                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7446  000938  0E26               	movlw	low STR_2
  7447  00093A  0100               	movlb	0	; () banked
  7448  00093C  6F8E               	movwf	printf@f& (0+255),b
  7449  00093E  0EFF               	movlw	high STR_2
  7450  000940  0100               	movlb	0	; () banked
  7451  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  7452  000944  0E0E               	movlw	14
  7453  000946  0100               	movlb	0	; () banked
  7454  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7455  00094A  0E10               	movlw	16
  7456  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  7457  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  7458  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  7459  000956  EC69  F022         	call	___awmod	;wreg free
  7460  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  7461  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7462  000962  0E00               	movlw	0
  7463  000964  0100               	movlb	0	; () banked
  7464  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7465  000968  0E3C               	movlw	60
  7466  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  7467  00096C  EC01  F021         	call	___awdiv	;wreg free
  7468  000970  C086  F090         	movff	?___awdiv,?_printf+2
  7469  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  7470  000978  C0C6  F080         	movff	_UI$2425,___awmod@dividend
  7471  00097C  C0C7  F081         	movff	_UI$2425+1,___awmod@dividend+1
  7472  000980  0E00               	movlw	0
  7473  000982  0100               	movlb	0	; () banked
  7474  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7475  000986  0E3C               	movlw	60
  7476  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  7477  00098A  EC69  F022         	call	___awmod	;wreg free
  7478  00098E  C080  F092         	movff	?___awmod,?_printf+4
  7479  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  7480  000996  EC08  F00B         	call	_printf	;wreg free
  7481                           
  7482                           ;UI.c: 83: machine_state = UI_state;
  7483  00099A  0E00               	movlw	0
  7484  00099C  0100               	movlb	0	; () banked
  7485  00099E  6FFC               	movwf	_machine_state& (0+255),b
  7486  0009A0                     l180:
  7487  0009A0  A281               	btfss	3969,1,c	;volatile
  7488  0009A2  D7FE               	goto	l180
  7489                           
  7490                           ;UI.c: 86: }
  7491                           ;UI.c: 87: if(cur_state==12){
  7492  0009A4  0E0C               	movlw	12
  7493  0009A6  0100               	movlb	0	; () banked
  7494  0009A8  19EC               	xorwf	_cur_state& (0+255),w,b
  7495  0009AA  0100               	movlb	0	; () banked
  7496  0009AC  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7497  0009AE  A4D8               	btfss	status,2,c
  7498  0009B0  D003               	goto	l8651
  7499                           
  7500                           ; BSR set to: 0
  7501                           ;UI.c: 88: change_state_to_menu_12();
  7502  0009B2  EC37  F027         	call	_change_state_to_menu_12	;wreg free
  7503                           
  7504                           ;UI.c: 89: }
  7505  0009B6  D3D3               	goto	l8973
  7506  0009B8                     l8651:
  7507                           
  7508                           ;UI.c: 90: else{
  7509                           ;UI.c: 91: change_state_to_menu_22();
  7510  0009B8  EC1B  F027         	call	_change_state_to_menu_22	;wreg free
  7511                           
  7512                           ;UI.c: 92: }
  7513                           ;UI.c: 93: }
  7514  0009BC  D3D0               	goto	l8973
  7515  0009BE                     l8653:
  7516                           
  7517                           ;UI.c: 94: else if(cur_state == 0){
  7518  0009BE  0100               	movlb	0	; () banked
  7519  0009C0  51EC               	movf	_cur_state& (0+255),w,b
  7520  0009C2  0100               	movlb	0	; () banked
  7521  0009C4  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7522  0009C6  A4D8               	btfss	status,2,c
  7523  0009C8  D3CA               	goto	l8973
  7524                           
  7525                           ; BSR set to: 0
  7526                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  7527  0009CA  0E00               	movlw	0
  7528  0009CC  0100               	movlb	0	; () banked
  7529  0009CE  6FC8               	movwf	UI@i& (0+255),b
  7530  0009D0                     l8657:
  7531                           
  7532                           ; BSR set to: 0
  7533  0009D0  0E63               	movlw	99
  7534  0009D2  0100               	movlb	0	; () banked
  7535  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  7536  0009D6  D001               	goto	l8661
  7537  0009D8  D00C               	goto	l8665
  7538  0009DA                     l8661:
  7539                           
  7540                           ; BSR set to: 0
  7541  0009DA  0E68               	movlw	104
  7542  0009DC  0100               	movlb	0	; () banked
  7543  0009DE  6FC4               	movwf	??_UI& (0+255),b
  7544  0009E0  0EE4               	movlw	228
  7545  0009E2                     u9227:
  7546  0009E2  2EE8               	decfsz	wreg,f,c
  7547  0009E4  D7FE               	bra	u9227
  7548  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7549  0009E8  D7FC               	bra	u9227
  7550  0009EA  F000               	nop	
  7551  0009EC  0100               	movlb	0	; () banked
  7552  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  7553  0009F0  D7EF               	goto	l8657
  7554  0009F2                     l8665:
  7555                           
  7556                           ; BSR set to: 0
  7557                           ;UI.c: 96: if(cur_state == 0){
  7558  0009F2  0100               	movlb	0	; () banked
  7559  0009F4  51EC               	movf	_cur_state& (0+255),w,b
  7560  0009F6  0100               	movlb	0	; () banked
  7561  0009F8  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7562  0009FA  A4D8               	btfss	status,2,c
  7563  0009FC  D3B0               	goto	l8973
  7564                           
  7565                           ; BSR set to: 0
  7566                           ;UI.c: 97: printRTC();
  7567  0009FE  EC1C  F012         	call	_printRTC	;wreg free
  7568                           
  7569                           ;UI.c: 98: }
  7570                           ;UI.c: 99: }
  7571                           ;UI.c: 100: while(logstate){
  7572  000A02  D3AD               	goto	l8973
  7573  000A04                     l8669:
  7574                           
  7575                           ;UI.c: 102: if(!log_completion){
  7576  000A04  5063               	movf	_log_completion,w,c
  7577  000A06  1064               	iorwf	_log_completion+1,w,c
  7578  000A08  A4D8               	btfss	status,2,c
  7579  000A0A  D041               	goto	l8699
  7580                           
  7581                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7582  000A0C  0E01               	movlw	1
  7583  000A0E  ECF8  F029         	call	_lcdInst
  7584  000A12  0E68               	movlw	104
  7585  000A14  0100               	movlb	0	; () banked
  7586  000A16  6FC4               	movwf	??_UI& (0+255),b
  7587  000A18  0EE4               	movlw	228
  7588  000A1A                     u9237:
  7589  000A1A  2EE8               	decfsz	wreg,f,c
  7590  000A1C  D7FE               	bra	u9237
  7591  000A1E  2FC4               	decfsz	??_UI& (0+255),f,b
  7592  000A20  D7FC               	bra	u9237
  7593  000A22  F000               	nop	
  7594                           
  7595                           ;UI.c: 104: lcdInst(0b10000000);;
  7596  000A24  0E80               	movlw	128
  7597  000A26  ECF8  F029         	call	_lcdInst
  7598                           
  7599                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  7600  000A2A  0E7F               	movlw	low STR_3
  7601  000A2C  0100               	movlb	0	; () banked
  7602  000A2E  6F8E               	movwf	printf@f& (0+255),b
  7603  000A30  0EFB               	movlw	high STR_3
  7604  000A32  0100               	movlb	0	; () banked
  7605  000A34  6F8F               	movwf	(printf@f+1)& (0+255),b
  7606  000A36  C0F2  F090         	movff	_log,?_printf+2
  7607  000A3A  C0F3  F091         	movff	_log+1,?_printf+3
  7608  000A3E  EC08  F00B         	call	_printf	;wreg free
  7609                           
  7610                           ;UI.c: 106: lcdInst(0b11000000);;
  7611  000A42  0EC0               	movlw	192
  7612  000A44  ECF8  F029         	call	_lcdInst
  7613                           
  7614                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  7615  000A48  0E49               	movlw	low STR_4
  7616  000A4A  0100               	movlb	0	; () banked
  7617  000A4C  6F8E               	movwf	printf@f& (0+255),b
  7618  000A4E  0EFE               	movlw	high STR_4
  7619  000A50  0100               	movlb	0	; () banked
  7620  000A52  6F8F               	movwf	(printf@f+1)& (0+255),b
  7621  000A54  EC08  F00B         	call	_printf	;wreg free
  7622  000A58                     l8683:
  7623  000A58  0E00               	movlw	0
  7624  000A5A  0100               	movlb	0	; () banked
  7625  000A5C  6FC9               	movwf	UI@i_409& (0+255),b
  7626  000A5E                     l8685:
  7627                           
  7628                           ; BSR set to: 0
  7629  000A5E  0E63               	movlw	99
  7630  000A60  0100               	movlb	0	; () banked
  7631  000A62  65C9               	cpfsgt	UI@i_409& (0+255),b
  7632  000A64  D001               	goto	l8689
  7633  000A66  D00C               	goto	l8693
  7634  000A68                     l8689:
  7635                           
  7636                           ; BSR set to: 0
  7637  000A68  0E68               	movlw	104
  7638  000A6A  0100               	movlb	0	; () banked
  7639  000A6C  6FC4               	movwf	??_UI& (0+255),b
  7640  000A6E  0EE4               	movlw	228
  7641  000A70                     u9247:
  7642  000A70  2EE8               	decfsz	wreg,f,c
  7643  000A72  D7FE               	bra	u9247
  7644  000A74  2FC4               	decfsz	??_UI& (0+255),f,b
  7645  000A76  D7FC               	bra	u9247
  7646  000A78  F000               	nop	
  7647  000A7A  0100               	movlb	0	; () banked
  7648  000A7C  2BC9               	incf	UI@i_409& (0+255),f,b
  7649  000A7E  D7EF               	goto	l8685
  7650  000A80                     l8693:
  7651                           
  7652                           ; BSR set to: 0
  7653  000A80  0100               	movlb	0	; () banked
  7654  000A82  51F6               	movf	_logstate& (0+255),w,b
  7655  000A84  0100               	movlb	0	; () banked
  7656  000A86  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7657  000A88  B4D8               	btfsc	status,2,c
  7658  000A8A  0012               	return	
  7659  000A8C  D7E5               	goto	l8683
  7660  000A8E                     l8699:
  7661                           
  7662                           ;UI.c: 111: else{
  7663                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7664  000A8E  0E01               	movlw	1
  7665  000A90  ECF8  F029         	call	_lcdInst
  7666  000A94  0E68               	movlw	104
  7667  000A96  0100               	movlb	0	; () banked
  7668  000A98  6FC4               	movwf	??_UI& (0+255),b
  7669  000A9A  0EE4               	movlw	228
  7670  000A9C                     u9257:
  7671  000A9C  2EE8               	decfsz	wreg,f,c
  7672  000A9E  D7FE               	bra	u9257
  7673  000AA0  2FC4               	decfsz	??_UI& (0+255),f,b
  7674  000AA2  D7FC               	bra	u9257
  7675  000AA4  F000               	nop	
  7676                           
  7677                           ;UI.c: 113: lcdInst(0b10000000);;
  7678  000AA6  0E80               	movlw	128
  7679  000AA8  ECF8  F029         	call	_lcdInst
  7680                           
  7681                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  7682  000AAC  0E7F               	movlw	low STR_3
  7683  000AAE  0100               	movlb	0	; () banked
  7684  000AB0  6F8E               	movwf	printf@f& (0+255),b
  7685  000AB2  0EFB               	movlw	high STR_3
  7686  000AB4  0100               	movlb	0	; () banked
  7687  000AB6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7688  000AB8  C0F2  F090         	movff	_log,?_printf+2
  7689  000ABC  C0F3  F091         	movff	_log+1,?_printf+3
  7690  000AC0  EC08  F00B         	call	_printf	;wreg free
  7691                           
  7692                           ;UI.c: 115: lcdInst(0b11000000);;
  7693  000AC4  0EC0               	movlw	192
  7694  000AC6  ECF8  F029         	call	_lcdInst
  7695                           
  7696                           ;UI.c: 116: printf("PAUSE < | BACK >");
  7697  000ACA  0EE5               	movlw	low STR_6
  7698  000ACC  0100               	movlb	0	; () banked
  7699  000ACE  6F8E               	movwf	printf@f& (0+255),b
  7700  000AD0  0EFD               	movlw	high STR_6
  7701  000AD2  0100               	movlb	0	; () banked
  7702  000AD4  6F8F               	movwf	(printf@f+1)& (0+255),b
  7703  000AD6  EC08  F00B         	call	_printf	;wreg free
  7704                           
  7705                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7706  000ADA  0E00               	movlw	0
  7707  000ADC  0100               	movlb	0	; () banked
  7708  000ADE  6FCA               	movwf	UI@i_412& (0+255),b
  7709  000AE0                     l8713:
  7710                           
  7711                           ; BSR set to: 0
  7712  000AE0  0E63               	movlw	99
  7713  000AE2  0100               	movlb	0	; () banked
  7714  000AE4  65CA               	cpfsgt	UI@i_412& (0+255),b
  7715  000AE6  D001               	goto	l8717
  7716  000AE8  D00C               	goto	l8721
  7717  000AEA                     l8717:
  7718                           
  7719                           ; BSR set to: 0
  7720  000AEA  0E68               	movlw	104
  7721  000AEC  0100               	movlb	0	; () banked
  7722  000AEE  6FC4               	movwf	??_UI& (0+255),b
  7723  000AF0  0EE4               	movlw	228
  7724  000AF2                     u9267:
  7725  000AF2  2EE8               	decfsz	wreg,f,c
  7726  000AF4  D7FE               	bra	u9267
  7727  000AF6  2FC4               	decfsz	??_UI& (0+255),f,b
  7728  000AF8  D7FC               	bra	u9267
  7729  000AFA  F000               	nop	
  7730  000AFC  0100               	movlb	0	; () banked
  7731  000AFE  2BCA               	incf	UI@i_412& (0+255),f,b
  7732  000B00  D7EF               	goto	l8713
  7733  000B02                     l8721:
  7734                           
  7735                           ; BSR set to: 0
  7736  000B02  0100               	movlb	0	; () banked
  7737  000B04  51F6               	movf	_logstate& (0+255),w,b
  7738  000B06  0100               	movlb	0	; () banked
  7739  000B08  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7740  000B0A  B4D8               	btfsc	status,2,c
  7741  000B0C  0012               	return	
  7742                           
  7743                           ; BSR set to: 0
  7744                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7745                           
  7746                           ; BSR set to: 0
  7747                           
  7748                           ; BSR set to: 0
  7749  000B0E  0E00               	movlw	0
  7750  000B10  0100               	movlb	0	; () banked
  7751  000B12  6FCB               	movwf	UI@i_413& (0+255),b
  7752  000B14                     l8727:
  7753                           
  7754                           ; BSR set to: 0
  7755  000B14  0E63               	movlw	99
  7756  000B16  0100               	movlb	0	; () banked
  7757  000B18  65CB               	cpfsgt	UI@i_413& (0+255),b
  7758  000B1A  D001               	goto	l8731
  7759  000B1C  D00C               	goto	l8735
  7760  000B1E                     l8731:
  7761                           
  7762                           ; BSR set to: 0
  7763  000B1E  0E68               	movlw	104
  7764  000B20  0100               	movlb	0	; () banked
  7765  000B22  6FC4               	movwf	??_UI& (0+255),b
  7766  000B24  0EE4               	movlw	228
  7767  000B26                     u9277:
  7768  000B26  2EE8               	decfsz	wreg,f,c
  7769  000B28  D7FE               	bra	u9277
  7770  000B2A  2FC4               	decfsz	??_UI& (0+255),f,b
  7771  000B2C  D7FC               	bra	u9277
  7772  000B2E  F000               	nop	
  7773  000B30  0100               	movlb	0	; () banked
  7774  000B32  2BCB               	incf	UI@i_413& (0+255),f,b
  7775  000B34  D7EF               	goto	l8727
  7776  000B36                     l8735:
  7777                           
  7778                           ; BSR set to: 0
  7779  000B36  0100               	movlb	0	; () banked
  7780  000B38  51F6               	movf	_logstate& (0+255),w,b
  7781  000B3A  0100               	movlb	0	; () banked
  7782  000B3C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7783  000B3E  B4D8               	btfsc	status,2,c
  7784  000B40  0012               	return	
  7785                           
  7786                           ; BSR set to: 0
  7787                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7788                           
  7789                           ; BSR set to: 0
  7790                           
  7791                           ; BSR set to: 0
  7792  000B42  0E01               	movlw	1
  7793  000B44  ECF8  F029         	call	_lcdInst
  7794  000B48  0E68               	movlw	104
  7795  000B4A  0100               	movlb	0	; () banked
  7796  000B4C  6FC4               	movwf	??_UI& (0+255),b
  7797  000B4E  0EE4               	movlw	228
  7798  000B50                     u9287:
  7799  000B50  2EE8               	decfsz	wreg,f,c
  7800  000B52  D7FE               	bra	u9287
  7801  000B54  2FC4               	decfsz	??_UI& (0+255),f,b
  7802  000B56  D7FC               	bra	u9287
  7803  000B58  F000               	nop	
  7804                           
  7805                           ;UI.c: 122: lcdInst(0b10000000);;
  7806  000B5A  0E80               	movlw	128
  7807  000B5C  ECF8  F029         	call	_lcdInst
  7808                           
  7809                           ;UI.c: 123: printf("START:");
  7810  000B60  0EC3               	movlw	low STR_7
  7811  000B62  0100               	movlb	0	; () banked
  7812  000B64  6F8E               	movwf	printf@f& (0+255),b
  7813  000B66  0EFF               	movlw	high STR_7
  7814  000B68  0100               	movlb	0	; () banked
  7815  000B6A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7816  000B6C  EC08  F00B         	call	_printf	;wreg free
  7817                           
  7818                           ;UI.c: 124: lcdInst(0b11000000);;
  7819  000B70  0EC0               	movlw	192
  7820  000B72  ECF8  F029         	call	_lcdInst
  7821                           
  7822                           ;UI.c: 125: char month[] = "MMM";
  7823  000B76  C141  F0D6         	movff	UI@F3235,UI@month
  7824  000B7A  C142  F0D7         	movff	UI@F3235+1,UI@month+1
  7825  000B7E  C143  F0D8         	movff	UI@F3235+2,UI@month+2
  7826  000B82  C144  F0D9         	movff	UI@F3235+3,UI@month+3
  7827                           
  7828                           ;UI.c: 126: switch(log_startTime[5]){
  7829  000B86  D0C3               	goto	l8779
  7830  000B88                     l8751:
  7831                           
  7832                           ;UI.c: 128: strcpy(month, "JAN");
  7833  000B88  0ED6               	movlw	low UI@month
  7834  000B8A  0100               	movlb	0	; () banked
  7835  000B8C  6F80               	movwf	strcpy@to& (0+255),b
  7836  000B8E  0E00               	movlw	high UI@month
  7837  000B90  0100               	movlb	0	; () banked
  7838  000B92  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7839  000B94  0EDA               	movlw	low STR_8
  7840  000B96  0100               	movlb	0	; () banked
  7841  000B98  6F82               	movwf	strcpy@from& (0+255),b
  7842  000B9A  0EFF               	movlw	high STR_8
  7843  000B9C  0100               	movlb	0	; () banked
  7844  000B9E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7845  000BA0  EC53  F027         	call	_strcpy	;wreg free
  7846                           
  7847                           ;UI.c: 129: break;
  7848  000BA4  D0E6               	goto	l8781
  7849  000BA6                     l8753:
  7850                           
  7851                           ;UI.c: 131: strcpy(month, "FEB");
  7852  000BA6  0ED6               	movlw	low UI@month
  7853  000BA8  0100               	movlb	0	; () banked
  7854  000BAA  6F80               	movwf	strcpy@to& (0+255),b
  7855  000BAC  0E00               	movlw	high UI@month
  7856  000BAE  0100               	movlb	0	; () banked
  7857  000BB0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7858  000BB2  0ECA               	movlw	low STR_9
  7859  000BB4  0100               	movlb	0	; () banked
  7860  000BB6  6F82               	movwf	strcpy@from& (0+255),b
  7861  000BB8  0EFF               	movlw	high STR_9
  7862  000BBA  0100               	movlb	0	; () banked
  7863  000BBC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7864  000BBE  EC53  F027         	call	_strcpy	;wreg free
  7865                           
  7866                           ;UI.c: 132: break;
  7867  000BC2  D0D7               	goto	l8781
  7868  000BC4                     l8755:
  7869                           
  7870                           ;UI.c: 134: strcpy(month, "MAR");
  7871  000BC4  0ED6               	movlw	low UI@month
  7872  000BC6  0100               	movlb	0	; () banked
  7873  000BC8  6F80               	movwf	strcpy@to& (0+255),b
  7874  000BCA  0E00               	movlw	high UI@month
  7875  000BCC  0100               	movlb	0	; () banked
  7876  000BCE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7877  000BD0  0EE6               	movlw	low STR_10
  7878  000BD2  0100               	movlb	0	; () banked
  7879  000BD4  6F82               	movwf	strcpy@from& (0+255),b
  7880  000BD6  0EFF               	movlw	high STR_10
  7881  000BD8  0100               	movlb	0	; () banked
  7882  000BDA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7883  000BDC  EC53  F027         	call	_strcpy	;wreg free
  7884                           
  7885                           ;UI.c: 135: break;
  7886  000BE0  D0C8               	goto	l8781
  7887  000BE2                     l8757:
  7888                           
  7889                           ;UI.c: 137: strcpy(month, "APR");
  7890  000BE2  0ED6               	movlw	low UI@month
  7891  000BE4  0100               	movlb	0	; () banked
  7892  000BE6  6F80               	movwf	strcpy@to& (0+255),b
  7893  000BE8  0E00               	movlw	high UI@month
  7894  000BEA  0100               	movlb	0	; () banked
  7895  000BEC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7896  000BEE  0EEA               	movlw	low STR_11
  7897  000BF0  0100               	movlb	0	; () banked
  7898  000BF2  6F82               	movwf	strcpy@from& (0+255),b
  7899  000BF4  0EFF               	movlw	high STR_11
  7900  000BF6  0100               	movlb	0	; () banked
  7901  000BF8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7902  000BFA  EC53  F027         	call	_strcpy	;wreg free
  7903                           
  7904                           ;UI.c: 138: break;
  7905  000BFE  D0B9               	goto	l8781
  7906  000C00                     l8759:
  7907                           
  7908                           ;UI.c: 140: strcpy(month, "MAY");
  7909  000C00  0ED6               	movlw	low UI@month
  7910  000C02  0100               	movlb	0	; () banked
  7911  000C04  6F80               	movwf	strcpy@to& (0+255),b
  7912  000C06  0E00               	movlw	high UI@month
  7913  000C08  0100               	movlb	0	; () banked
  7914  000C0A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7915  000C0C  0EFA               	movlw	low STR_12
  7916  000C0E  0100               	movlb	0	; () banked
  7917  000C10  6F82               	movwf	strcpy@from& (0+255),b
  7918  000C12  0EFF               	movlw	high STR_12
  7919  000C14  0100               	movlb	0	; () banked
  7920  000C16  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7921  000C18  EC53  F027         	call	_strcpy	;wreg free
  7922                           
  7923                           ;UI.c: 141: break;
  7924  000C1C  D0AA               	goto	l8781
  7925  000C1E                     l8761:
  7926                           
  7927                           ;UI.c: 143: strcpy(month, "JUN");
  7928  000C1E  0ED6               	movlw	low UI@month
  7929  000C20  0100               	movlb	0	; () banked
  7930  000C22  6F80               	movwf	strcpy@to& (0+255),b
  7931  000C24  0E00               	movlw	high UI@month
  7932  000C26  0100               	movlb	0	; () banked
  7933  000C28  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7934  000C2A  0EDE               	movlw	low STR_13
  7935  000C2C  0100               	movlb	0	; () banked
  7936  000C2E  6F82               	movwf	strcpy@from& (0+255),b
  7937  000C30  0EFF               	movlw	high STR_13
  7938  000C32  0100               	movlb	0	; () banked
  7939  000C34  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7940  000C36  EC53  F027         	call	_strcpy	;wreg free
  7941                           
  7942                           ;UI.c: 144: break;
  7943  000C3A  D09B               	goto	l8781
  7944  000C3C                     l8763:
  7945                           
  7946                           ;UI.c: 146: strcpy(month, "JUL");
  7947  000C3C  0ED6               	movlw	low UI@month
  7948  000C3E  0100               	movlb	0	; () banked
  7949  000C40  6F80               	movwf	strcpy@to& (0+255),b
  7950  000C42  0E00               	movlw	high UI@month
  7951  000C44  0100               	movlb	0	; () banked
  7952  000C46  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7953  000C48  0ED6               	movlw	low STR_14
  7954  000C4A  0100               	movlb	0	; () banked
  7955  000C4C  6F82               	movwf	strcpy@from& (0+255),b
  7956  000C4E  0EFF               	movlw	high STR_14
  7957  000C50  0100               	movlb	0	; () banked
  7958  000C52  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7959  000C54  EC53  F027         	call	_strcpy	;wreg free
  7960                           
  7961                           ;UI.c: 147: break;
  7962  000C58  D08C               	goto	l8781
  7963  000C5A                     l8765:
  7964                           
  7965                           ;UI.c: 149: strcpy(month, "AUG");
  7966  000C5A  0ED6               	movlw	low UI@month
  7967  000C5C  0100               	movlb	0	; () banked
  7968  000C5E  6F80               	movwf	strcpy@to& (0+255),b
  7969  000C60  0E00               	movlw	high UI@month
  7970  000C62  0100               	movlb	0	; () banked
  7971  000C64  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7972  000C66  0ED2               	movlw	low STR_15
  7973  000C68  0100               	movlb	0	; () banked
  7974  000C6A  6F82               	movwf	strcpy@from& (0+255),b
  7975  000C6C  0EFF               	movlw	high STR_15
  7976  000C6E  0100               	movlb	0	; () banked
  7977  000C70  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7978  000C72  EC53  F027         	call	_strcpy	;wreg free
  7979                           
  7980                           ;UI.c: 150: break;
  7981  000C76  D07D               	goto	l8781
  7982  000C78                     l8767:
  7983                           
  7984                           ;UI.c: 152: strcpy(month, "SEP");
  7985  000C78  0ED6               	movlw	low UI@month
  7986  000C7A  0100               	movlb	0	; () banked
  7987  000C7C  6F80               	movwf	strcpy@to& (0+255),b
  7988  000C7E  0E00               	movlw	high UI@month
  7989  000C80  0100               	movlb	0	; () banked
  7990  000C82  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7991  000C84  0EE2               	movlw	low STR_16
  7992  000C86  0100               	movlb	0	; () banked
  7993  000C88  6F82               	movwf	strcpy@from& (0+255),b
  7994  000C8A  0EFF               	movlw	high STR_16
  7995  000C8C  0100               	movlb	0	; () banked
  7996  000C8E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7997  000C90  EC53  F027         	call	_strcpy	;wreg free
  7998                           
  7999                           ;UI.c: 153: break;
  8000  000C94  D06E               	goto	l8781
  8001  000C96                     l8769:
  8002                           
  8003                           ;UI.c: 155: strcpy(month, "OCT");
  8004  000C96  0ED6               	movlw	low UI@month
  8005  000C98  0100               	movlb	0	; () banked
  8006  000C9A  6F80               	movwf	strcpy@to& (0+255),b
  8007  000C9C  0E00               	movlw	high UI@month
  8008  000C9E  0100               	movlb	0	; () banked
  8009  000CA0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8010  000CA2  0EF2               	movlw	low STR_17
  8011  000CA4  0100               	movlb	0	; () banked
  8012  000CA6  6F82               	movwf	strcpy@from& (0+255),b
  8013  000CA8  0EFF               	movlw	high STR_17
  8014  000CAA  0100               	movlb	0	; () banked
  8015  000CAC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8016  000CAE  EC53  F027         	call	_strcpy	;wreg free
  8017                           
  8018                           ;UI.c: 156: break;
  8019  000CB2  D05F               	goto	l8781
  8020  000CB4                     l8771:
  8021                           
  8022                           ;UI.c: 158: strcpy(month, "NOV");
  8023  000CB4  0ED6               	movlw	low UI@month
  8024  000CB6  0100               	movlb	0	; () banked
  8025  000CB8  6F80               	movwf	strcpy@to& (0+255),b
  8026  000CBA  0E00               	movlw	high UI@month
  8027  000CBC  0100               	movlb	0	; () banked
  8028  000CBE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8029  000CC0  0EF6               	movlw	low STR_18
  8030  000CC2  0100               	movlb	0	; () banked
  8031  000CC4  6F82               	movwf	strcpy@from& (0+255),b
  8032  000CC6  0EFF               	movlw	high STR_18
  8033  000CC8  0100               	movlb	0	; () banked
  8034  000CCA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8035  000CCC  EC53  F027         	call	_strcpy	;wreg free
  8036                           
  8037                           ;UI.c: 159: break;
  8038  000CD0  D050               	goto	l8781
  8039  000CD2                     l8773:
  8040                           
  8041                           ;UI.c: 161: strcpy(month, "DEC");
  8042  000CD2  0ED6               	movlw	low UI@month
  8043  000CD4  0100               	movlb	0	; () banked
  8044  000CD6  6F80               	movwf	strcpy@to& (0+255),b
  8045  000CD8  0E00               	movlw	high UI@month
  8046  000CDA  0100               	movlb	0	; () banked
  8047  000CDC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8048  000CDE  0ECE               	movlw	low STR_19
  8049  000CE0  0100               	movlb	0	; () banked
  8050  000CE2  6F82               	movwf	strcpy@from& (0+255),b
  8051  000CE4  0EFF               	movlw	high STR_19
  8052  000CE6  0100               	movlb	0	; () banked
  8053  000CE8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8054  000CEA  EC53  F027         	call	_strcpy	;wreg free
  8055                           
  8056                           ;UI.c: 162: break;
  8057  000CEE  D041               	goto	l8781
  8058  000CF0                     l8775:
  8059                           
  8060                           ;UI.c: 164: strcpy(month, "ERR");
  8061  000CF0  0ED6               	movlw	low UI@month
  8062  000CF2  0100               	movlb	0	; () banked
  8063  000CF4  6F80               	movwf	strcpy@to& (0+255),b
  8064  000CF6  0E00               	movlw	high UI@month
  8065  000CF8  0100               	movlb	0	; () banked
  8066  000CFA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8067  000CFC  0EEE               	movlw	low STR_20
  8068  000CFE  0100               	movlb	0	; () banked
  8069  000D00  6F82               	movwf	strcpy@from& (0+255),b
  8070  000D02  0EFF               	movlw	high STR_20
  8071  000D04  0100               	movlb	0	; () banked
  8072  000D06  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8073  000D08  EC53  F027         	call	_strcpy	;wreg free
  8074                           
  8075                           ;UI.c: 166: }
  8076                           
  8077                           ;UI.c: 165: break;
  8078  000D0C  D032               	goto	l8781
  8079  000D0E                     l8779:
  8080  000D0E  EE21  F00A         	lfsr	2,_log_startTime+10
  8081  000D12  CFDE F0C4          	movff	postinc2,??_UI
  8082  000D16  CFDD F0C5          	movff	postdec2,??_UI+1
  8083                           
  8084                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8085                           ; Switch size 1, requested type "space"
  8086                           ; Number of cases is 1, Range of values is 0 to 0
  8087                           ; switch strategies available:
  8088                           ; Name         Instructions Cycles
  8089                           ; simple_byte            4     3 (average)
  8090                           ;	Chosen strategy is simple_byte
  8091  000D1A  0100               	movlb	0	; () banked
  8092  000D1C  51C5               	movf	(??_UI+1)& (0+255),w,b
  8093  000D1E  0A00               	xorlw	0	; case 0
  8094  000D20  A4D8               	btfss	status,2,c
  8095  000D22  D7E6               	goto	l8775
  8096                           
  8097                           ; BSR set to: 0
  8098                           ; Switch size 1, requested type "space"
  8099                           ; Number of cases is 12, Range of values is 1 to 12
  8100                           ; switch strategies available:
  8101                           ; Name         Instructions Cycles
  8102                           ; simple_byte           37    19 (average)
  8103                           ;	Chosen strategy is simple_byte
  8104  000D24  0100               	movlb	0	; () banked
  8105  000D26  51C4               	movf	??_UI& (0+255),w,b
  8106  000D28  0A01               	xorlw	1	; case 1
  8107  000D2A  B4D8               	btfsc	status,2,c
  8108  000D2C  D72D               	goto	l8751
  8109  000D2E  0A03               	xorlw	3	; case 2
  8110  000D30  B4D8               	btfsc	status,2,c
  8111  000D32  D739               	goto	l8753
  8112  000D34  0A01               	xorlw	1	; case 3
  8113  000D36  B4D8               	btfsc	status,2,c
  8114  000D38  D745               	goto	l8755
  8115  000D3A  0A07               	xorlw	7	; case 4
  8116  000D3C  B4D8               	btfsc	status,2,c
  8117  000D3E  D751               	goto	l8757
  8118  000D40  0A01               	xorlw	1	; case 5
  8119  000D42  B4D8               	btfsc	status,2,c
  8120  000D44  D75D               	goto	l8759
  8121  000D46  0A03               	xorlw	3	; case 6
  8122  000D48  B4D8               	btfsc	status,2,c
  8123  000D4A  D769               	goto	l8761
  8124  000D4C  0A01               	xorlw	1	; case 7
  8125  000D4E  B4D8               	btfsc	status,2,c
  8126  000D50  D775               	goto	l8763
  8127  000D52  0A0F               	xorlw	15	; case 8
  8128  000D54  B4D8               	btfsc	status,2,c
  8129  000D56  D781               	goto	l8765
  8130  000D58  0A01               	xorlw	1	; case 9
  8131  000D5A  B4D8               	btfsc	status,2,c
  8132  000D5C  D78D               	goto	l8767
  8133  000D5E  0A03               	xorlw	3	; case 10
  8134  000D60  B4D8               	btfsc	status,2,c
  8135  000D62  D799               	goto	l8769
  8136  000D64  0A01               	xorlw	1	; case 11
  8137  000D66  B4D8               	btfsc	status,2,c
  8138  000D68  D7A5               	goto	l8771
  8139  000D6A  0A07               	xorlw	7	; case 12
  8140  000D6C  B4D8               	btfsc	status,2,c
  8141  000D6E  D7B1               	goto	l8773
  8142  000D70  D7BF               	goto	l8775
  8143  000D72                     l8781:
  8144                           
  8145                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  8146  000D72  0EF8               	movlw	low STR_21
  8147  000D74  0100               	movlb	0	; () banked
  8148  000D76  6F8E               	movwf	printf@f& (0+255),b
  8149  000D78  0EFA               	movlw	high STR_21
  8150  000D7A  0100               	movlb	0	; () banked
  8151  000D7C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8152  000D7E  C108  F090         	movff	_log_startTime+8,?_printf+2
  8153  000D82  C109  F091         	movff	_log_startTime+9,?_printf+3
  8154  000D86  0ED6               	movlw	low UI@month
  8155  000D88  0100               	movlb	0	; () banked
  8156  000D8A  6F92               	movwf	(?_printf+4)& (0+255),b
  8157  000D8C  0E00               	movlw	high UI@month
  8158  000D8E  0100               	movlb	0	; () banked
  8159  000D90  6F93               	movwf	(?_printf+5)& (0+255),b
  8160  000D92  C104  F094         	movff	_log_startTime+4,?_printf+6
  8161  000D96  C105  F095         	movff	_log_startTime+5,?_printf+7
  8162  000D9A  C102  F096         	movff	_log_startTime+2,?_printf+8
  8163  000D9E  C103  F097         	movff	_log_startTime+3,?_printf+9
  8164  000DA2  C100  F098         	movff	_log_startTime,?_printf+10
  8165  000DA6  C101  F099         	movff	_log_startTime+1,?_printf+11
  8166  000DAA  EC08  F00B         	call	_printf	;wreg free
  8167                           
  8168                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8169  000DAE  0E00               	movlw	0
  8170  000DB0  0100               	movlb	0	; () banked
  8171  000DB2  6FCC               	movwf	UI@i_431& (0+255),b
  8172  000DB4                     l8785:
  8173                           
  8174                           ; BSR set to: 0
  8175  000DB4  0E63               	movlw	99
  8176  000DB6  0100               	movlb	0	; () banked
  8177  000DB8  65CC               	cpfsgt	UI@i_431& (0+255),b
  8178  000DBA  D001               	goto	l8789
  8179  000DBC  D00C               	goto	l8793
  8180  000DBE                     l8789:
  8181                           
  8182                           ; BSR set to: 0
  8183  000DBE  0E68               	movlw	104
  8184  000DC0  0100               	movlb	0	; () banked
  8185  000DC2  6FC4               	movwf	??_UI& (0+255),b
  8186  000DC4  0EE4               	movlw	228
  8187  000DC6                     u9297:
  8188  000DC6  2EE8               	decfsz	wreg,f,c
  8189  000DC8  D7FE               	bra	u9297
  8190  000DCA  2FC4               	decfsz	??_UI& (0+255),f,b
  8191  000DCC  D7FC               	bra	u9297
  8192  000DCE  F000               	nop	
  8193  000DD0  0100               	movlb	0	; () banked
  8194  000DD2  2BCC               	incf	UI@i_431& (0+255),f,b
  8195  000DD4  D7EF               	goto	l8785
  8196  000DD6                     l8793:
  8197                           
  8198                           ; BSR set to: 0
  8199  000DD6  0100               	movlb	0	; () banked
  8200  000DD8  51F6               	movf	_logstate& (0+255),w,b
  8201  000DDA  0100               	movlb	0	; () banked
  8202  000DDC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8203  000DDE  B4D8               	btfsc	status,2,c
  8204  000DE0  0012               	return	
  8205                           
  8206                           ; BSR set to: 0
  8207                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8208                           
  8209                           ; BSR set to: 0
  8210                           
  8211                           ; BSR set to: 0
  8212  000DE2  0E00               	movlw	0
  8213  000DE4  0100               	movlb	0	; () banked
  8214  000DE6  6FCD               	movwf	UI@i_432& (0+255),b
  8215  000DE8                     l8799:
  8216                           
  8217                           ; BSR set to: 0
  8218  000DE8  0E63               	movlw	99
  8219  000DEA  0100               	movlb	0	; () banked
  8220  000DEC  65CD               	cpfsgt	UI@i_432& (0+255),b
  8221  000DEE  D001               	goto	l8803
  8222  000DF0  D00C               	goto	l8807
  8223  000DF2                     l8803:
  8224                           
  8225                           ; BSR set to: 0
  8226  000DF2  0E68               	movlw	104
  8227  000DF4  0100               	movlb	0	; () banked
  8228  000DF6  6FC4               	movwf	??_UI& (0+255),b
  8229  000DF8  0EE4               	movlw	228
  8230  000DFA                     u9307:
  8231  000DFA  2EE8               	decfsz	wreg,f,c
  8232  000DFC  D7FE               	bra	u9307
  8233  000DFE  2FC4               	decfsz	??_UI& (0+255),f,b
  8234  000E00  D7FC               	bra	u9307
  8235  000E02  F000               	nop	
  8236  000E04  0100               	movlb	0	; () banked
  8237  000E06  2BCD               	incf	UI@i_432& (0+255),f,b
  8238  000E08  D7EF               	goto	l8799
  8239  000E0A                     l8807:
  8240                           
  8241                           ; BSR set to: 0
  8242  000E0A  0100               	movlb	0	; () banked
  8243  000E0C  51F6               	movf	_logstate& (0+255),w,b
  8244  000E0E  0100               	movlb	0	; () banked
  8245  000E10  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8246  000E12  B4D8               	btfsc	status,2,c
  8247  000E14  0012               	return	
  8248                           
  8249                           ; BSR set to: 0
  8250                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8251                           
  8252                           ; BSR set to: 0
  8253                           
  8254                           ; BSR set to: 0
  8255  000E16  0E01               	movlw	1
  8256  000E18  ECF8  F029         	call	_lcdInst
  8257  000E1C  0E68               	movlw	104
  8258  000E1E  0100               	movlb	0	; () banked
  8259  000E20  6FC4               	movwf	??_UI& (0+255),b
  8260  000E22  0EE4               	movlw	228
  8261  000E24                     u9317:
  8262  000E24  2EE8               	decfsz	wreg,f,c
  8263  000E26  D7FE               	bra	u9317
  8264  000E28  2FC4               	decfsz	??_UI& (0+255),f,b
  8265  000E2A  D7FC               	bra	u9317
  8266  000E2C  F000               	nop	
  8267                           
  8268                           ;UI.c: 173: lcdInst(0b10000000);;
  8269  000E2E  0E80               	movlw	128
  8270  000E30  ECF8  F029         	call	_lcdInst
  8271                           
  8272                           ;UI.c: 174: printf("DURATION:");
  8273  000E34  0E9A               	movlw	low STR_22
  8274  000E36  0100               	movlb	0	; () banked
  8275  000E38  6F8E               	movwf	printf@f& (0+255),b
  8276  000E3A  0EFF               	movlw	high STR_22
  8277  000E3C  0100               	movlb	0	; () banked
  8278  000E3E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8279  000E40  EC08  F00B         	call	_printf	;wreg free
  8280                           
  8281                           ;UI.c: 175: lcdInst(0b11000000);;
  8282  000E44  0EC0               	movlw	192
  8283  000E46  ECF8  F029         	call	_lcdInst
  8284                           
  8285                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8286  000E4A  0E0E               	movlw	14
  8287  000E4C  0100               	movlb	0	; () banked
  8288  000E4E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8289  000E50  0E10               	movlw	16
  8290  000E52  6F82               	movwf	___awmod@divisor& (0+255),b
  8291  000E54  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  8292  000E58  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8293  000E5C  EC69  F022         	call	___awmod	;wreg free
  8294  000E60  C080  F0C6         	movff	?___awmod,_UI$2425
  8295  000E64  C081  F0C7         	movff	?___awmod+1,_UI$2425+1
  8296                           
  8297                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8298  000E68  0E18               	movlw	low STR_23
  8299  000E6A  0100               	movlb	0	; () banked
  8300  000E6C  6F8E               	movwf	printf@f& (0+255),b
  8301  000E6E  0EFF               	movlw	high STR_23
  8302  000E70  0100               	movlb	0	; () banked
  8303  000E72  6F8F               	movwf	(printf@f+1)& (0+255),b
  8304  000E74  0E0E               	movlw	14
  8305  000E76  0100               	movlb	0	; () banked
  8306  000E78  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8307  000E7A  0E10               	movlw	16
  8308  000E7C  6F82               	movwf	___awmod@divisor& (0+255),b
  8309  000E7E  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  8310  000E82  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8311  000E86  EC69  F022         	call	___awmod	;wreg free
  8312  000E8A  C080  F086         	movff	?___awmod,___awdiv@dividend
  8313  000E8E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8314  000E92  0E00               	movlw	0
  8315  000E94  0100               	movlb	0	; () banked
  8316  000E96  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8317  000E98  0E3C               	movlw	60
  8318  000E9A  6F88               	movwf	___awdiv@divisor& (0+255),b
  8319  000E9C  EC01  F021         	call	___awdiv	;wreg free
  8320  000EA0  C086  F090         	movff	?___awdiv,?_printf+2
  8321  000EA4  C087  F091         	movff	?___awdiv+1,?_printf+3
  8322  000EA8  C0C6  F080         	movff	_UI$2425,___awmod@dividend
  8323  000EAC  C0C7  F081         	movff	_UI$2425+1,___awmod@dividend+1
  8324  000EB0  0E00               	movlw	0
  8325  000EB2  0100               	movlb	0	; () banked
  8326  000EB4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8327  000EB6  0E3C               	movlw	60
  8328  000EB8  6F82               	movwf	___awmod@divisor& (0+255),b
  8329  000EBA  EC69  F022         	call	___awmod	;wreg free
  8330  000EBE  C080  F092         	movff	?___awmod,?_printf+4
  8331  000EC2  C081  F093         	movff	?___awmod+1,?_printf+5
  8332  000EC6  EC08  F00B         	call	_printf	;wreg free
  8333                           
  8334                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8335  000ECA  0E00               	movlw	0
  8336  000ECC  0100               	movlb	0	; () banked
  8337  000ECE  6FCE               	movwf	UI@i_435& (0+255),b
  8338  000ED0                     l8827:
  8339                           
  8340                           ; BSR set to: 0
  8341  000ED0  0E63               	movlw	99
  8342  000ED2  0100               	movlb	0	; () banked
  8343  000ED4  65CE               	cpfsgt	UI@i_435& (0+255),b
  8344  000ED6  D001               	goto	l8831
  8345  000ED8  D00C               	goto	l8835
  8346  000EDA                     l8831:
  8347                           
  8348                           ; BSR set to: 0
  8349  000EDA  0E68               	movlw	104
  8350  000EDC  0100               	movlb	0	; () banked
  8351  000EDE  6FC4               	movwf	??_UI& (0+255),b
  8352  000EE0  0EE4               	movlw	228
  8353  000EE2                     u9327:
  8354  000EE2  2EE8               	decfsz	wreg,f,c
  8355  000EE4  D7FE               	bra	u9327
  8356  000EE6  2FC4               	decfsz	??_UI& (0+255),f,b
  8357  000EE8  D7FC               	bra	u9327
  8358  000EEA  F000               	nop	
  8359  000EEC  0100               	movlb	0	; () banked
  8360  000EEE  2BCE               	incf	UI@i_435& (0+255),f,b
  8361  000EF0  D7EF               	goto	l8827
  8362  000EF2                     l8835:
  8363                           
  8364                           ; BSR set to: 0
  8365  000EF2  0100               	movlb	0	; () banked
  8366  000EF4  51F6               	movf	_logstate& (0+255),w,b
  8367  000EF6  0100               	movlb	0	; () banked
  8368  000EF8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8369  000EFA  B4D8               	btfsc	status,2,c
  8370  000EFC  0012               	return	
  8371                           
  8372                           ; BSR set to: 0
  8373                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8374                           
  8375                           ; BSR set to: 0
  8376                           
  8377                           ; BSR set to: 0
  8378  000EFE  0E00               	movlw	0
  8379  000F00  0100               	movlb	0	; () banked
  8380  000F02  6FCF               	movwf	UI@i_436& (0+255),b
  8381  000F04                     l8841:
  8382                           
  8383                           ; BSR set to: 0
  8384  000F04  0E63               	movlw	99
  8385  000F06  0100               	movlb	0	; () banked
  8386  000F08  65CF               	cpfsgt	UI@i_436& (0+255),b
  8387  000F0A  D001               	goto	l8845
  8388  000F0C  D00C               	goto	l8849
  8389  000F0E                     l8845:
  8390                           
  8391                           ; BSR set to: 0
  8392  000F0E  0E68               	movlw	104
  8393  000F10  0100               	movlb	0	; () banked
  8394  000F12  6FC4               	movwf	??_UI& (0+255),b
  8395  000F14  0EE4               	movlw	228
  8396  000F16                     u9337:
  8397  000F16  2EE8               	decfsz	wreg,f,c
  8398  000F18  D7FE               	bra	u9337
  8399  000F1A  2FC4               	decfsz	??_UI& (0+255),f,b
  8400  000F1C  D7FC               	bra	u9337
  8401  000F1E  F000               	nop	
  8402  000F20  0100               	movlb	0	; () banked
  8403  000F22  2BCF               	incf	UI@i_436& (0+255),f,b
  8404  000F24  D7EF               	goto	l8841
  8405  000F26                     l8849:
  8406                           
  8407                           ; BSR set to: 0
  8408  000F26  0100               	movlb	0	; () banked
  8409  000F28  51F6               	movf	_logstate& (0+255),w,b
  8410  000F2A  0100               	movlb	0	; () banked
  8411  000F2C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8412  000F2E  B4D8               	btfsc	status,2,c
  8413  000F30  0012               	return	
  8414                           
  8415                           ; BSR set to: 0
  8416                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8417                           
  8418                           ; BSR set to: 0
  8419                           
  8420                           ; BSR set to: 0
  8421  000F32  0E01               	movlw	1
  8422  000F34  ECF8  F029         	call	_lcdInst
  8423  000F38  0E68               	movlw	104
  8424  000F3A  0100               	movlb	0	; () banked
  8425  000F3C  6FC4               	movwf	??_UI& (0+255),b
  8426  000F3E  0EE4               	movlw	228
  8427  000F40                     u9347:
  8428  000F40  2EE8               	decfsz	wreg,f,c
  8429  000F42  D7FE               	bra	u9347
  8430  000F44  2FC4               	decfsz	??_UI& (0+255),f,b
  8431  000F46  D7FC               	bra	u9347
  8432  000F48  F000               	nop	
  8433                           
  8434                           ;UI.c: 182: lcdInst(0b10000000);;
  8435  000F4A  0E80               	movlw	128
  8436  000F4C  ECF8  F029         	call	_lcdInst
  8437                           
  8438                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  8439  000F50  0E3B               	movlw	low STR_24
  8440  000F52  0100               	movlb	0	; () banked
  8441  000F54  6F8E               	movwf	printf@f& (0+255),b
  8442  000F56  0EFD               	movlw	high STR_24
  8443  000F58  0100               	movlb	0	; () banked
  8444  000F5A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8445  000F5C  EC08  F00B         	call	_printf	;wreg free
  8446                           
  8447                           ;UI.c: 184: lcdInst(0b11000000);;
  8448  000F60  0EC0               	movlw	192
  8449  000F62  ECF8  F029         	call	_lcdInst
  8450                           
  8451                           ;UI.c: 185: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  8452  000F66  0E18               	movlw	low STR_25
  8453  000F68  0100               	movlb	0	; () banked
  8454  000F6A  6F8E               	movwf	printf@f& (0+255),b
  8455  000F6C  0EFE               	movlw	high STR_25
  8456  000F6E  0100               	movlb	0	; () banked
  8457  000F70  6F8F               	movwf	(printf@f+1)& (0+255),b
  8458  000F72  C069  F090         	movff	_log_count_pop_no_tab,?_printf+2
  8459  000F76  C06A  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  8460  000F7A  C06B  F092         	movff	_log_count_pop_w_tab,?_printf+4
  8461  000F7E  C06C  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  8462  000F82  EC08  F00B         	call	_printf	;wreg free
  8463                           
  8464                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8465  000F86  0E00               	movlw	0
  8466  000F88  0100               	movlb	0	; () banked
  8467  000F8A  6FD0               	movwf	UI@i_439& (0+255),b
  8468  000F8C                     l8867:
  8469                           
  8470                           ; BSR set to: 0
  8471  000F8C  0E63               	movlw	99
  8472  000F8E  0100               	movlb	0	; () banked
  8473  000F90  65D0               	cpfsgt	UI@i_439& (0+255),b
  8474  000F92  D001               	goto	l8871
  8475  000F94  D00C               	goto	l8875
  8476  000F96                     l8871:
  8477                           
  8478                           ; BSR set to: 0
  8479  000F96  0E68               	movlw	104
  8480  000F98  0100               	movlb	0	; () banked
  8481  000F9A  6FC4               	movwf	??_UI& (0+255),b
  8482  000F9C  0EE4               	movlw	228
  8483  000F9E                     u9357:
  8484  000F9E  2EE8               	decfsz	wreg,f,c
  8485  000FA0  D7FE               	bra	u9357
  8486  000FA2  2FC4               	decfsz	??_UI& (0+255),f,b
  8487  000FA4  D7FC               	bra	u9357
  8488  000FA6  F000               	nop	
  8489  000FA8  0100               	movlb	0	; () banked
  8490  000FAA  2BD0               	incf	UI@i_439& (0+255),f,b
  8491  000FAC  D7EF               	goto	l8867
  8492  000FAE                     l8875:
  8493                           
  8494                           ; BSR set to: 0
  8495  000FAE  0100               	movlb	0	; () banked
  8496  000FB0  51F6               	movf	_logstate& (0+255),w,b
  8497  000FB2  0100               	movlb	0	; () banked
  8498  000FB4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8499  000FB6  B4D8               	btfsc	status,2,c
  8500  000FB8  0012               	return	
  8501                           
  8502                           ; BSR set to: 0
  8503                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8504                           
  8505                           ; BSR set to: 0
  8506                           
  8507                           ; BSR set to: 0
  8508  000FBA  0E00               	movlw	0
  8509  000FBC  0100               	movlb	0	; () banked
  8510  000FBE  6FD1               	movwf	UI@i_440& (0+255),b
  8511  000FC0                     l8881:
  8512                           
  8513                           ; BSR set to: 0
  8514  000FC0  0E63               	movlw	99
  8515  000FC2  0100               	movlb	0	; () banked
  8516  000FC4  65D1               	cpfsgt	UI@i_440& (0+255),b
  8517  000FC6  D001               	goto	l8885
  8518  000FC8  D00C               	goto	l8889
  8519  000FCA                     l8885:
  8520                           
  8521                           ; BSR set to: 0
  8522  000FCA  0E68               	movlw	104
  8523  000FCC  0100               	movlb	0	; () banked
  8524  000FCE  6FC4               	movwf	??_UI& (0+255),b
  8525  000FD0  0EE4               	movlw	228
  8526  000FD2                     u9367:
  8527  000FD2  2EE8               	decfsz	wreg,f,c
  8528  000FD4  D7FE               	bra	u9367
  8529  000FD6  2FC4               	decfsz	??_UI& (0+255),f,b
  8530  000FD8  D7FC               	bra	u9367
  8531  000FDA  F000               	nop	
  8532  000FDC  0100               	movlb	0	; () banked
  8533  000FDE  2BD1               	incf	UI@i_440& (0+255),f,b
  8534  000FE0  D7EF               	goto	l8881
  8535  000FE2                     l8889:
  8536                           
  8537                           ; BSR set to: 0
  8538  000FE2  0100               	movlb	0	; () banked
  8539  000FE4  51F6               	movf	_logstate& (0+255),w,b
  8540  000FE6  0100               	movlb	0	; () banked
  8541  000FE8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8542  000FEA  B4D8               	btfsc	status,2,c
  8543  000FEC  0012               	return	
  8544                           
  8545                           ; BSR set to: 0
  8546                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8547                           
  8548                           ; BSR set to: 0
  8549                           
  8550                           ; BSR set to: 0
  8551  000FEE  0E01               	movlw	1
  8552  000FF0  ECF8  F029         	call	_lcdInst
  8553  000FF4  0E68               	movlw	104
  8554  000FF6  0100               	movlb	0	; () banked
  8555  000FF8  6FC4               	movwf	??_UI& (0+255),b
  8556  000FFA  0EE4               	movlw	228
  8557  000FFC                     u9377:
  8558  000FFC  2EE8               	decfsz	wreg,f,c
  8559  000FFE  D7FE               	bra	u9377
  8560  001000  2FC4               	decfsz	??_UI& (0+255),f,b
  8561  001002  D7FC               	bra	u9377
  8562  001004  F000               	nop	
  8563                           
  8564                           ;UI.c: 191: lcdInst(0b10000000);;
  8565  001006  0E80               	movlw	128
  8566  001008  ECF8  F029         	call	_lcdInst
  8567                           
  8568                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  8569  00100C  0E4C               	movlw	low STR_26
  8570  00100E  0100               	movlb	0	; () banked
  8571  001010  6F8E               	movwf	printf@f& (0+255),b
  8572  001012  0EFD               	movlw	high STR_26
  8573  001014  0100               	movlb	0	; () banked
  8574  001016  6F8F               	movwf	(printf@f+1)& (0+255),b
  8575  001018  EC08  F00B         	call	_printf	;wreg free
  8576                           
  8577                           ;UI.c: 193: lcdInst(0b11000000);;
  8578  00101C  0EC0               	movlw	192
  8579  00101E  ECF8  F029         	call	_lcdInst
  8580                           
  8581                           ;UI.c: 194: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  8582  001022  0E07               	movlw	low STR_27
  8583  001024  0100               	movlb	0	; () banked
  8584  001026  6F8E               	movwf	printf@f& (0+255),b
  8585  001028  0EFE               	movlw	high STR_27
  8586  00102A  0100               	movlb	0	; () banked
  8587  00102C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8588  00102E  C065  F090         	movff	_log_count_can_no_lab,?_printf+2
  8589  001032  C066  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  8590  001036  C067  F092         	movff	_log_count_can_w_lab,?_printf+4
  8591  00103A  C068  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  8592  00103E  EC08  F00B         	call	_printf	;wreg free
  8593                           
  8594                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8595  001042  0E00               	movlw	0
  8596  001044  0100               	movlb	0	; () banked
  8597  001046  6FD2               	movwf	UI@i_443& (0+255),b
  8598  001048                     l8907:
  8599                           
  8600                           ; BSR set to: 0
  8601  001048  0E63               	movlw	99
  8602  00104A  0100               	movlb	0	; () banked
  8603  00104C  65D2               	cpfsgt	UI@i_443& (0+255),b
  8604  00104E  D001               	goto	l8911
  8605  001050  D00C               	goto	l8915
  8606  001052                     l8911:
  8607                           
  8608                           ; BSR set to: 0
  8609  001052  0E68               	movlw	104
  8610  001054  0100               	movlb	0	; () banked
  8611  001056  6FC4               	movwf	??_UI& (0+255),b
  8612  001058  0EE4               	movlw	228
  8613  00105A                     u9387:
  8614  00105A  2EE8               	decfsz	wreg,f,c
  8615  00105C  D7FE               	bra	u9387
  8616  00105E  2FC4               	decfsz	??_UI& (0+255),f,b
  8617  001060  D7FC               	bra	u9387
  8618  001062  F000               	nop	
  8619  001064  0100               	movlb	0	; () banked
  8620  001066  2BD2               	incf	UI@i_443& (0+255),f,b
  8621  001068  D7EF               	goto	l8907
  8622  00106A                     l8915:
  8623                           
  8624                           ; BSR set to: 0
  8625  00106A  0100               	movlb	0	; () banked
  8626  00106C  51F6               	movf	_logstate& (0+255),w,b
  8627  00106E  0100               	movlb	0	; () banked
  8628  001070  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8629  001072  B4D8               	btfsc	status,2,c
  8630  001074  0012               	return	
  8631                           
  8632                           ; BSR set to: 0
  8633                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8634                           
  8635                           ; BSR set to: 0
  8636                           
  8637                           ; BSR set to: 0
  8638  001076  0E00               	movlw	0
  8639  001078  0100               	movlb	0	; () banked
  8640  00107A  6FD3               	movwf	UI@i_444& (0+255),b
  8641  00107C                     l8921:
  8642                           
  8643                           ; BSR set to: 0
  8644  00107C  0E63               	movlw	99
  8645  00107E  0100               	movlb	0	; () banked
  8646  001080  65D3               	cpfsgt	UI@i_444& (0+255),b
  8647  001082  D001               	goto	l8925
  8648  001084  D00C               	goto	l8929
  8649  001086                     l8925:
  8650                           
  8651                           ; BSR set to: 0
  8652  001086  0E68               	movlw	104
  8653  001088  0100               	movlb	0	; () banked
  8654  00108A  6FC4               	movwf	??_UI& (0+255),b
  8655  00108C  0EE4               	movlw	228
  8656  00108E                     u9397:
  8657  00108E  2EE8               	decfsz	wreg,f,c
  8658  001090  D7FE               	bra	u9397
  8659  001092  2FC4               	decfsz	??_UI& (0+255),f,b
  8660  001094  D7FC               	bra	u9397
  8661  001096  F000               	nop	
  8662  001098  0100               	movlb	0	; () banked
  8663  00109A  2BD3               	incf	UI@i_444& (0+255),f,b
  8664  00109C  D7EF               	goto	l8921
  8665  00109E                     l8929:
  8666                           
  8667                           ; BSR set to: 0
  8668  00109E  0100               	movlb	0	; () banked
  8669  0010A0  51F6               	movf	_logstate& (0+255),w,b
  8670  0010A2  0100               	movlb	0	; () banked
  8671  0010A4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8672  0010A6  B4D8               	btfsc	status,2,c
  8673  0010A8  0012               	return	
  8674                           
  8675                           ; BSR set to: 0
  8676                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8677                           
  8678                           ; BSR set to: 0
  8679                           
  8680                           ; BSR set to: 0
  8681  0010AA  0E01               	movlw	1
  8682  0010AC  ECF8  F029         	call	_lcdInst
  8683  0010B0  0E68               	movlw	104
  8684  0010B2  0100               	movlb	0	; () banked
  8685  0010B4  6FC4               	movwf	??_UI& (0+255),b
  8686  0010B6  0EE4               	movlw	228
  8687  0010B8                     u9407:
  8688  0010B8  2EE8               	decfsz	wreg,f,c
  8689  0010BA  D7FE               	bra	u9407
  8690  0010BC  2FC4               	decfsz	??_UI& (0+255),f,b
  8691  0010BE  D7FC               	bra	u9407
  8692  0010C0  F000               	nop	
  8693                           
  8694                           ;UI.c: 200: lcdInst(0b10000000);;
  8695  0010C2  0E80               	movlw	128
  8696  0010C4  ECF8  F029         	call	_lcdInst
  8697                           
  8698                           ;UI.c: 201: printf("-- TOTAL CANS --");
  8699  0010C8  0E5D               	movlw	low STR_28
  8700  0010CA  0100               	movlb	0	; () banked
  8701  0010CC  6F8E               	movwf	printf@f& (0+255),b
  8702  0010CE  0EFD               	movlw	high STR_28
  8703  0010D0  0100               	movlb	0	; () banked
  8704  0010D2  6F8F               	movwf	(printf@f+1)& (0+255),b
  8705  0010D4  EC08  F00B         	call	_printf	;wreg free
  8706                           
  8707                           ;UI.c: 202: lcdInst(0b11000000);;
  8708  0010D8  0EC0               	movlw	192
  8709  0010DA  ECF8  F029         	call	_lcdInst
  8710                           
  8711                           ;UI.c: 203: printf("%d", log_count_total);
  8712  0010DE  0E15               	movlw	low (STR_27+14)
  8713  0010E0  0100               	movlb	0	; () banked
  8714  0010E2  6F8E               	movwf	printf@f& (0+255),b
  8715  0010E4  0EFE               	movlw	high (STR_27+14)
  8716  0010E6  0100               	movlb	0	; () banked
  8717  0010E8  6F8F               	movwf	(printf@f+1)& (0+255),b
  8718  0010EA  C13F  F090         	movff	_log_count_total,?_printf+2
  8719  0010EE  C140  F091         	movff	_log_count_total+1,?_printf+3
  8720  0010F2  EC08  F00B         	call	_printf	;wreg free
  8721                           
  8722                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8723  0010F6  0E00               	movlw	0
  8724  0010F8  0100               	movlb	0	; () banked
  8725  0010FA  6FD4               	movwf	UI@i_447& (0+255),b
  8726  0010FC                     l8947:
  8727                           
  8728                           ; BSR set to: 0
  8729  0010FC  0E63               	movlw	99
  8730  0010FE  0100               	movlb	0	; () banked
  8731  001100  65D4               	cpfsgt	UI@i_447& (0+255),b
  8732  001102  D001               	goto	l8951
  8733  001104  D00C               	goto	l8955
  8734  001106                     l8951:
  8735                           
  8736                           ; BSR set to: 0
  8737  001106  0E68               	movlw	104
  8738  001108  0100               	movlb	0	; () banked
  8739  00110A  6FC4               	movwf	??_UI& (0+255),b
  8740  00110C  0EE4               	movlw	228
  8741  00110E                     u9417:
  8742  00110E  2EE8               	decfsz	wreg,f,c
  8743  001110  D7FE               	bra	u9417
  8744  001112  2FC4               	decfsz	??_UI& (0+255),f,b
  8745  001114  D7FC               	bra	u9417
  8746  001116  F000               	nop	
  8747  001118  0100               	movlb	0	; () banked
  8748  00111A  2BD4               	incf	UI@i_447& (0+255),f,b
  8749  00111C  D7EF               	goto	l8947
  8750  00111E                     l8955:
  8751                           
  8752                           ; BSR set to: 0
  8753  00111E  0100               	movlb	0	; () banked
  8754  001120  51F6               	movf	_logstate& (0+255),w,b
  8755  001122  0100               	movlb	0	; () banked
  8756  001124  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8757  001126  B4D8               	btfsc	status,2,c
  8758  001128  0012               	return	
  8759                           
  8760                           ; BSR set to: 0
  8761                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8762                           
  8763                           ; BSR set to: 0
  8764                           
  8765                           ; BSR set to: 0
  8766  00112A  0E00               	movlw	0
  8767  00112C  0100               	movlb	0	; () banked
  8768  00112E  6FD5               	movwf	UI@i_448& (0+255),b
  8769  001130                     l8961:
  8770                           
  8771                           ; BSR set to: 0
  8772  001130  0E63               	movlw	99
  8773  001132  0100               	movlb	0	; () banked
  8774  001134  65D5               	cpfsgt	UI@i_448& (0+255),b
  8775  001136  D001               	goto	l8965
  8776  001138  D00C               	goto	l8969
  8777  00113A                     l8965:
  8778                           
  8779                           ; BSR set to: 0
  8780  00113A  0E68               	movlw	104
  8781  00113C  0100               	movlb	0	; () banked
  8782  00113E  6FC4               	movwf	??_UI& (0+255),b
  8783  001140  0EE4               	movlw	228
  8784  001142                     u9427:
  8785  001142  2EE8               	decfsz	wreg,f,c
  8786  001144  D7FE               	bra	u9427
  8787  001146  2FC4               	decfsz	??_UI& (0+255),f,b
  8788  001148  D7FC               	bra	u9427
  8789  00114A  F000               	nop	
  8790  00114C  0100               	movlb	0	; () banked
  8791  00114E  2BD5               	incf	UI@i_448& (0+255),f,b
  8792  001150  D7EF               	goto	l8961
  8793  001152                     l8969:
  8794                           
  8795                           ; BSR set to: 0
  8796  001152  0100               	movlb	0	; () banked
  8797  001154  51F6               	movf	_logstate& (0+255),w,b
  8798  001156  0100               	movlb	0	; () banked
  8799  001158  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8800  00115A  B4D8               	btfsc	status,2,c
  8801  00115C  0012               	return	
  8802  00115E                     l8973:
  8803  00115E  0100               	movlb	0	; () banked
  8804  001160  51F6               	movf	_logstate& (0+255),w,b
  8805  001162  0100               	movlb	0	; () banked
  8806  001164  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8807  001166  B4D8               	btfsc	status,2,c
  8808  001168  0012               	return	
  8809  00116A  D44C               	goto	l8669
  8810  00116C                     __end_of_UI:
  8811                           	opt stack 0
  8812                           tblptru	equ	0xFF8
  8813                           tblptrh	equ	0xFF7
  8814                           tblptrl	equ	0xFF6
  8815                           tablat	equ	0xFF5
  8816                           prodh	equ	0xFF4
  8817                           prodl	equ	0xFF3
  8818                           intcon	equ	0xFF2
  8819                           intcon2	equ	0xFF1
  8820                           intcon3	equ	0xFF0
  8821                           postinc0	equ	0xFEE
  8822                           wreg	equ	0xFE8
  8823                           postdec1	equ	0xFE5
  8824                           fsr1l	equ	0xFE1
  8825                           indf2	equ	0xFDF
  8826                           postinc2	equ	0xFDE
  8827                           postdec2	equ	0xFDD
  8828                           fsr2h	equ	0xFDA
  8829                           fsr2l	equ	0xFD9
  8830                           status	equ	0xFD8
  8831                           
  8832 ;; *************** function _printRTC *****************
  8833 ;; Defined at:
  8834 ;;		line 63 in file "RTC.c"
  8835 ;; Parameters:    Size  Location     Type
  8836 ;;		None
  8837 ;; Auto vars:     Size  Location     Type
  8838 ;;  i               2   66[BANK0 ] int 
  8839 ;;  INT_time       14   46[BANK0 ] int [7]
  8840 ;;  month           4   62[BANK0 ] unsigned char [4]
  8841 ;;  RTC_month       2   60[BANK0 ] int 
  8842 ;; Return value:  Size  Location     Type
  8843 ;;                  1    wreg      void 
  8844 ;; Registers used:
  8845 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8846 ;; Tracked objects:
  8847 ;;		On entry : 0/0
  8848 ;;		On exit  : 0/0
  8849 ;;		Unchanged: 0/0
  8850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8852 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8853 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8854 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8855 ;;Total ram usage:       25 bytes
  8856 ;; Hardware stack levels used:    1
  8857 ;; Hardware stack levels required when called:   10
  8858 ;; This function calls:
  8859 ;;		_getRTC
  8860 ;;		_lcdInst
  8861 ;;		_printf
  8862 ;;		_strcpy
  8863 ;; This function is called by:
  8864 ;;		_UI
  8865 ;;		_change_state_to_menu_start
  8866 ;; This function uses a non-reentrant model
  8867 ;;
  8868                           
  8869                           	psect	text24
  8870  002438                     __ptext24:
  8871                           	opt stack 0
  8872  002438                     _printRTC:
  8873                           	opt stack 18
  8874                           
  8875                           ;RTC.c: 64: getRTC();
  8876                           
  8877                           ; BSR set to: 0
  8878                           ;incstack = 0
  8879  002438  EC00  F023         	call	_getRTC	;wreg free
  8880                           
  8881                           ;RTC.c: 65: char month[] = "MMM";
  8882  00243C  C145  F0BE         	movff	printRTC@F3226,printRTC@month
  8883  002440  C146  F0BF         	movff	printRTC@F3226+1,printRTC@month+1
  8884  002444  C147  F0C0         	movff	printRTC@F3226+2,printRTC@month+2
  8885  002448  C148  F0C1         	movff	printRTC@F3226+3,printRTC@month+3
  8886                           
  8887                           ;RTC.c: 66: int INT_time[7];
  8888                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  8889  00244C  0E00               	movlw	0
  8890  00244E  0100               	movlb	0	; () banked
  8891  002450  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  8892  002452  0E00               	movlw	0
  8893  002454  6FC2               	movwf	printRTC@i& (0+255),b
  8894                           
  8895                           ; BSR set to: 0
  8896  002456  0100               	movlb	0	; () banked
  8897  002458  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8898  00245A  D008               	goto	l6711
  8899  00245C  0100               	movlb	0	; () banked
  8900  00245E  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8901  002460  E146               	bnz	l608
  8902  002462  0E07               	movlw	7
  8903  002464  0100               	movlb	0	; () banked
  8904  002466  5DC2               	subwf	printRTC@i& (0+255),w,b
  8905  002468  B0D8               	btfsc	status,0,c
  8906  00246A  D041               	goto	l608
  8907  00246C                     l6711:
  8908                           
  8909                           ; BSR set to: 0
  8910                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  8911  00246C  0E1C               	movlw	low _time
  8912  00246E  0100               	movlb	0	; () banked
  8913  002470  25C2               	addwf	printRTC@i& (0+255),w,b
  8914  002472  6ED9               	movwf	fsr2l,c
  8915  002474  0E01               	movlw	high _time
  8916  002476  0100               	movlb	0	; () banked
  8917  002478  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8918  00247A  6EDA               	movwf	fsr2h,c
  8919  00247C  50DF               	movf	indf2,w,c
  8920  00247E  0100               	movlb	0	; () banked
  8921  002480  6FAB               	movwf	??_printRTC& (0+255),b
  8922  002482  0100               	movlb	0	; () banked
  8923  002484  3BAB               	swapf	??_printRTC& (0+255),f,b
  8924  002486  0E0F               	movlw	15
  8925  002488  17AB               	andwf	??_printRTC& (0+255),f,b
  8926  00248A  0E0F               	movlw	15
  8927  00248C  0100               	movlb	0	; () banked
  8928  00248E  17AB               	andwf	??_printRTC& (0+255),f,b
  8929  002490  0100               	movlb	0	; () banked
  8930  002492  51AB               	movf	??_printRTC& (0+255),w,b
  8931  002494  0D0A               	mullw	10
  8932  002496  0E1C               	movlw	low _time
  8933  002498  0100               	movlb	0	; () banked
  8934  00249A  25C2               	addwf	printRTC@i& (0+255),w,b
  8935  00249C  6ED9               	movwf	fsr2l,c
  8936  00249E  0E01               	movlw	high _time
  8937  0024A0  0100               	movlb	0	; () banked
  8938  0024A2  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8939  0024A4  6EDA               	movwf	fsr2h,c
  8940  0024A6  50DF               	movf	indf2,w,c
  8941  0024A8  0B0F               	andlw	15
  8942  0024AA  0100               	movlb	0	; () banked
  8943  0024AC  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  8944  0024AE  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  8945  0024B0  50F3               	movf	prodl,w,c
  8946  0024B2  0100               	movlb	0	; () banked
  8947  0024B4  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  8948  0024B6  50F4               	movf	prodh,w,c
  8949  0024B8  0100               	movlb	0	; () banked
  8950  0024BA  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  8951  0024BC  90D8               	bcf	status,0,c
  8952  0024BE  0100               	movlb	0	; () banked
  8953  0024C0  35C2               	rlcf	printRTC@i& (0+255),w,b
  8954  0024C2  6ED9               	movwf	fsr2l,c
  8955  0024C4  0100               	movlb	0	; () banked
  8956  0024C6  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  8957  0024C8  6EDA               	movwf	fsr2h,c
  8958  0024CA  0EAE               	movlw	low printRTC@INT_time
  8959  0024CC  26D9               	addwf	fsr2l,f,c
  8960  0024CE  0E00               	movlw	high printRTC@INT_time
  8961  0024D0  22DA               	addwfc	fsr2h,f,c
  8962  0024D2  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  8963  0024D6  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  8964                           
  8965                           ; BSR set to: 0
  8966  0024DA  0100               	movlb	0	; () banked
  8967  0024DC  4BC2               	infsnz	printRTC@i& (0+255),f,b
  8968  0024DE  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  8969                           
  8970                           ; BSR set to: 0
  8971  0024E0  0100               	movlb	0	; () banked
  8972  0024E2  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8973  0024E4  D7C3               	goto	l6711
  8974  0024E6  0100               	movlb	0	; () banked
  8975  0024E8  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8976  0024EA  E101               	bnz	u5350
  8977  0024EC  D7BA               	goto	L8
  8978  0024EE                     u5350:
  8979  0024EE                     l608:
  8980                           
  8981                           ; BSR set to: 0
  8982                           ;RTC.c: 69: }
  8983                           ;RTC.c: 70: int RTC_month = INT_time[5];
  8984  0024EE  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  8985  0024F2  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  8986                           
  8987                           ;RTC.c: 71: switch(RTC_month){
  8988  0024F6  D0B4               	goto	l6743
  8989  0024F8                     l6717:
  8990                           
  8991                           ; BSR set to: 0
  8992                           ;RTC.c: 73: strcpy(month, "JAN");
  8993  0024F8  0EBE               	movlw	low printRTC@month
  8994  0024FA  0100               	movlb	0	; () banked
  8995  0024FC  6F80               	movwf	strcpy@to& (0+255),b
  8996  0024FE  0E00               	movlw	high printRTC@month
  8997  002500  0100               	movlb	0	; () banked
  8998  002502  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8999  002504  0EDA               	movlw	low STR_8
  9000  002506  0100               	movlb	0	; () banked
  9001  002508  6F82               	movwf	strcpy@from& (0+255),b
  9002  00250A  0EFF               	movlw	high STR_8
  9003  00250C  0100               	movlb	0	; () banked
  9004  00250E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9005  002510  EC53  F027         	call	_strcpy	;wreg free
  9006                           
  9007                           ;RTC.c: 74: break;
  9008  002514  D0D4               	goto	l6745
  9009  002516                     l6719:
  9010                           
  9011                           ;RTC.c: 76: strcpy(month, "FEB");
  9012  002516  0EBE               	movlw	low printRTC@month
  9013  002518  0100               	movlb	0	; () banked
  9014  00251A  6F80               	movwf	strcpy@to& (0+255),b
  9015  00251C  0E00               	movlw	high printRTC@month
  9016  00251E  0100               	movlb	0	; () banked
  9017  002520  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9018  002522  0ECA               	movlw	low STR_9
  9019  002524  0100               	movlb	0	; () banked
  9020  002526  6F82               	movwf	strcpy@from& (0+255),b
  9021  002528  0EFF               	movlw	high STR_9
  9022  00252A  0100               	movlb	0	; () banked
  9023  00252C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9024  00252E  EC53  F027         	call	_strcpy	;wreg free
  9025                           
  9026                           ;RTC.c: 77: break;
  9027  002532  D0C5               	goto	l6745
  9028  002534                     l6721:
  9029                           
  9030                           ;RTC.c: 79: strcpy(month, "MAR");
  9031  002534  0EBE               	movlw	low printRTC@month
  9032  002536  0100               	movlb	0	; () banked
  9033  002538  6F80               	movwf	strcpy@to& (0+255),b
  9034  00253A  0E00               	movlw	high printRTC@month
  9035  00253C  0100               	movlb	0	; () banked
  9036  00253E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9037  002540  0EE6               	movlw	low STR_10
  9038  002542  0100               	movlb	0	; () banked
  9039  002544  6F82               	movwf	strcpy@from& (0+255),b
  9040  002546  0EFF               	movlw	high STR_10
  9041  002548  0100               	movlb	0	; () banked
  9042  00254A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9043  00254C  EC53  F027         	call	_strcpy	;wreg free
  9044                           
  9045                           ;RTC.c: 80: break;
  9046  002550  D0B6               	goto	l6745
  9047  002552                     l6723:
  9048                           
  9049                           ;RTC.c: 82: strcpy(month, "APR");
  9050  002552  0EBE               	movlw	low printRTC@month
  9051  002554  0100               	movlb	0	; () banked
  9052  002556  6F80               	movwf	strcpy@to& (0+255),b
  9053  002558  0E00               	movlw	high printRTC@month
  9054  00255A  0100               	movlb	0	; () banked
  9055  00255C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9056  00255E  0EEA               	movlw	low STR_11
  9057  002560  0100               	movlb	0	; () banked
  9058  002562  6F82               	movwf	strcpy@from& (0+255),b
  9059  002564  0EFF               	movlw	high STR_11
  9060  002566  0100               	movlb	0	; () banked
  9061  002568  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9062  00256A  EC53  F027         	call	_strcpy	;wreg free
  9063                           
  9064                           ;RTC.c: 83: break;
  9065  00256E  D0A7               	goto	l6745
  9066  002570                     l6725:
  9067                           
  9068                           ;RTC.c: 85: strcpy(month, "MAY");
  9069  002570  0EBE               	movlw	low printRTC@month
  9070  002572  0100               	movlb	0	; () banked
  9071  002574  6F80               	movwf	strcpy@to& (0+255),b
  9072  002576  0E00               	movlw	high printRTC@month
  9073  002578  0100               	movlb	0	; () banked
  9074  00257A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9075  00257C  0EFA               	movlw	low STR_12
  9076  00257E  0100               	movlb	0	; () banked
  9077  002580  6F82               	movwf	strcpy@from& (0+255),b
  9078  002582  0EFF               	movlw	high STR_12
  9079  002584  0100               	movlb	0	; () banked
  9080  002586  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9081  002588  EC53  F027         	call	_strcpy	;wreg free
  9082                           
  9083                           ;RTC.c: 86: break;
  9084  00258C  D098               	goto	l6745
  9085  00258E                     l6727:
  9086                           
  9087                           ;RTC.c: 88: strcpy(month, "JUN");
  9088  00258E  0EBE               	movlw	low printRTC@month
  9089  002590  0100               	movlb	0	; () banked
  9090  002592  6F80               	movwf	strcpy@to& (0+255),b
  9091  002594  0E00               	movlw	high printRTC@month
  9092  002596  0100               	movlb	0	; () banked
  9093  002598  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9094  00259A  0EDE               	movlw	low STR_13
  9095  00259C  0100               	movlb	0	; () banked
  9096  00259E  6F82               	movwf	strcpy@from& (0+255),b
  9097  0025A0  0EFF               	movlw	high STR_13
  9098  0025A2  0100               	movlb	0	; () banked
  9099  0025A4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9100  0025A6  EC53  F027         	call	_strcpy	;wreg free
  9101                           
  9102                           ;RTC.c: 89: break;
  9103  0025AA  D089               	goto	l6745
  9104  0025AC                     l6729:
  9105                           
  9106                           ;RTC.c: 91: strcpy(month, "JUL");
  9107  0025AC  0EBE               	movlw	low printRTC@month
  9108  0025AE  0100               	movlb	0	; () banked
  9109  0025B0  6F80               	movwf	strcpy@to& (0+255),b
  9110  0025B2  0E00               	movlw	high printRTC@month
  9111  0025B4  0100               	movlb	0	; () banked
  9112  0025B6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9113  0025B8  0ED6               	movlw	low STR_14
  9114  0025BA  0100               	movlb	0	; () banked
  9115  0025BC  6F82               	movwf	strcpy@from& (0+255),b
  9116  0025BE  0EFF               	movlw	high STR_14
  9117  0025C0  0100               	movlb	0	; () banked
  9118  0025C2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9119  0025C4  EC53  F027         	call	_strcpy	;wreg free
  9120                           
  9121                           ;RTC.c: 92: break;
  9122  0025C8  D07A               	goto	l6745
  9123  0025CA                     l6731:
  9124                           
  9125                           ;RTC.c: 94: strcpy(month, "AUG");
  9126  0025CA  0EBE               	movlw	low printRTC@month
  9127  0025CC  0100               	movlb	0	; () banked
  9128  0025CE  6F80               	movwf	strcpy@to& (0+255),b
  9129  0025D0  0E00               	movlw	high printRTC@month
  9130  0025D2  0100               	movlb	0	; () banked
  9131  0025D4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9132  0025D6  0ED2               	movlw	low STR_15
  9133  0025D8  0100               	movlb	0	; () banked
  9134  0025DA  6F82               	movwf	strcpy@from& (0+255),b
  9135  0025DC  0EFF               	movlw	high STR_15
  9136  0025DE  0100               	movlb	0	; () banked
  9137  0025E0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9138  0025E2  EC53  F027         	call	_strcpy	;wreg free
  9139                           
  9140                           ;RTC.c: 95: break;
  9141  0025E6  D06B               	goto	l6745
  9142  0025E8                     l6733:
  9143                           
  9144                           ;RTC.c: 97: strcpy(month, "SEP");
  9145  0025E8  0EBE               	movlw	low printRTC@month
  9146  0025EA  0100               	movlb	0	; () banked
  9147  0025EC  6F80               	movwf	strcpy@to& (0+255),b
  9148  0025EE  0E00               	movlw	high printRTC@month
  9149  0025F0  0100               	movlb	0	; () banked
  9150  0025F2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9151  0025F4  0EE2               	movlw	low STR_16
  9152  0025F6  0100               	movlb	0	; () banked
  9153  0025F8  6F82               	movwf	strcpy@from& (0+255),b
  9154  0025FA  0EFF               	movlw	high STR_16
  9155  0025FC  0100               	movlb	0	; () banked
  9156  0025FE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9157  002600  EC53  F027         	call	_strcpy	;wreg free
  9158                           
  9159                           ;RTC.c: 98: break;
  9160  002604  D05C               	goto	l6745
  9161  002606                     l6735:
  9162                           
  9163                           ;RTC.c: 100: strcpy(month, "OCT");
  9164  002606  0EBE               	movlw	low printRTC@month
  9165  002608  0100               	movlb	0	; () banked
  9166  00260A  6F80               	movwf	strcpy@to& (0+255),b
  9167  00260C  0E00               	movlw	high printRTC@month
  9168  00260E  0100               	movlb	0	; () banked
  9169  002610  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9170  002612  0EF2               	movlw	low STR_17
  9171  002614  0100               	movlb	0	; () banked
  9172  002616  6F82               	movwf	strcpy@from& (0+255),b
  9173  002618  0EFF               	movlw	high STR_17
  9174  00261A  0100               	movlb	0	; () banked
  9175  00261C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9176  00261E  EC53  F027         	call	_strcpy	;wreg free
  9177                           
  9178                           ;RTC.c: 101: break;
  9179  002622  D04D               	goto	l6745
  9180  002624                     l6737:
  9181                           
  9182                           ;RTC.c: 103: strcpy(month, "NOV");
  9183  002624  0EBE               	movlw	low printRTC@month
  9184  002626  0100               	movlb	0	; () banked
  9185  002628  6F80               	movwf	strcpy@to& (0+255),b
  9186  00262A  0E00               	movlw	high printRTC@month
  9187  00262C  0100               	movlb	0	; () banked
  9188  00262E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9189  002630  0EF6               	movlw	low STR_18
  9190  002632  0100               	movlb	0	; () banked
  9191  002634  6F82               	movwf	strcpy@from& (0+255),b
  9192  002636  0EFF               	movlw	high STR_18
  9193  002638  0100               	movlb	0	; () banked
  9194  00263A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9195  00263C  EC53  F027         	call	_strcpy	;wreg free
  9196                           
  9197                           ;RTC.c: 104: break;
  9198  002640  D03E               	goto	l6745
  9199  002642                     l6739:
  9200                           
  9201                           ;RTC.c: 106: strcpy(month, "DEC");
  9202  002642  0EBE               	movlw	low printRTC@month
  9203  002644  0100               	movlb	0	; () banked
  9204  002646  6F80               	movwf	strcpy@to& (0+255),b
  9205  002648  0E00               	movlw	high printRTC@month
  9206  00264A  0100               	movlb	0	; () banked
  9207  00264C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9208  00264E  0ECE               	movlw	low STR_19
  9209  002650  0100               	movlb	0	; () banked
  9210  002652  6F82               	movwf	strcpy@from& (0+255),b
  9211  002654  0EFF               	movlw	high STR_19
  9212  002656  0100               	movlb	0	; () banked
  9213  002658  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9214  00265A  EC53  F027         	call	_strcpy	;wreg free
  9215                           
  9216                           ;RTC.c: 108: }
  9217                           
  9218                           ;RTC.c: 107: break;
  9219  00265E  D02F               	goto	l6745
  9220  002660                     l6743:
  9221  002660  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  9222  002664  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  9223                           
  9224                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9225                           ; Switch size 1, requested type "space"
  9226                           ; Number of cases is 1, Range of values is 0 to 0
  9227                           ; switch strategies available:
  9228                           ; Name         Instructions Cycles
  9229                           ; simple_byte            4     3 (average)
  9230                           ;	Chosen strategy is simple_byte
  9231  002668  0100               	movlb	0	; () banked
  9232  00266A  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  9233  00266C  0A00               	xorlw	0	; case 0
  9234  00266E  A4D8               	btfss	status,2,c
  9235  002670  D026               	goto	l6745
  9236                           
  9237                           ; BSR set to: 0
  9238                           ; Switch size 1, requested type "space"
  9239                           ; Number of cases is 12, Range of values is 1 to 12
  9240                           ; switch strategies available:
  9241                           ; Name         Instructions Cycles
  9242                           ; simple_byte           37    19 (average)
  9243                           ;	Chosen strategy is simple_byte
  9244  002672  0100               	movlb	0	; () banked
  9245  002674  51AB               	movf	??_printRTC& (0+255),w,b
  9246  002676  0A01               	xorlw	1	; case 1
  9247  002678  B4D8               	btfsc	status,2,c
  9248  00267A  D73E               	goto	l6717
  9249  00267C  0A03               	xorlw	3	; case 2
  9250  00267E  B4D8               	btfsc	status,2,c
  9251  002680  D74A               	goto	l6719
  9252  002682  0A01               	xorlw	1	; case 3
  9253  002684  B4D8               	btfsc	status,2,c
  9254  002686  D756               	goto	l6721
  9255  002688  0A07               	xorlw	7	; case 4
  9256  00268A  B4D8               	btfsc	status,2,c
  9257  00268C  D762               	goto	l6723
  9258  00268E  0A01               	xorlw	1	; case 5
  9259  002690  B4D8               	btfsc	status,2,c
  9260  002692  D76E               	goto	l6725
  9261  002694  0A03               	xorlw	3	; case 6
  9262  002696  B4D8               	btfsc	status,2,c
  9263  002698  D77A               	goto	l6727
  9264  00269A  0A01               	xorlw	1	; case 7
  9265  00269C  B4D8               	btfsc	status,2,c
  9266  00269E  D786               	goto	l6729
  9267  0026A0  0A0F               	xorlw	15	; case 8
  9268  0026A2  B4D8               	btfsc	status,2,c
  9269  0026A4  D792               	goto	l6731
  9270  0026A6  0A01               	xorlw	1	; case 9
  9271  0026A8  B4D8               	btfsc	status,2,c
  9272  0026AA  D79E               	goto	l6733
  9273  0026AC  0A03               	xorlw	3	; case 10
  9274  0026AE  B4D8               	btfsc	status,2,c
  9275  0026B0  D7AA               	goto	l6735
  9276  0026B2  0A01               	xorlw	1	; case 11
  9277  0026B4  B4D8               	btfsc	status,2,c
  9278  0026B6  D7B6               	goto	l6737
  9279  0026B8  0A07               	xorlw	7	; case 12
  9280  0026BA  B4D8               	btfsc	status,2,c
  9281  0026BC  D7C2               	goto	l6739
  9282  0026BE                     l6745:
  9283                           
  9284                           ;RTC.c: 109: lcdInst(0b10000000);;
  9285  0026BE  0E80               	movlw	128
  9286  0026C0  ECF8  F029         	call	_lcdInst
  9287                           
  9288                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  9289  0026C4  0EF8               	movlw	low STR_21
  9290  0026C6  0100               	movlb	0	; () banked
  9291  0026C8  6F8E               	movwf	printf@f& (0+255),b
  9292  0026CA  0EFA               	movlw	high STR_21
  9293  0026CC  0100               	movlb	0	; () banked
  9294  0026CE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9295  0026D0  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  9296  0026D4  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  9297  0026D8  0EBE               	movlw	low printRTC@month
  9298  0026DA  0100               	movlb	0	; () banked
  9299  0026DC  6F92               	movwf	(?_printf+4)& (0+255),b
  9300  0026DE  0E00               	movlw	high printRTC@month
  9301  0026E0  0100               	movlb	0	; () banked
  9302  0026E2  6F93               	movwf	(?_printf+5)& (0+255),b
  9303  0026E4  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  9304  0026E8  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  9305  0026EC  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  9306  0026F0  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  9307  0026F4  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  9308  0026F8  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  9309  0026FC  EC08  F00B         	call	_printf	;wreg free
  9310  002700  0012               	return		;funcret
  9311  002702                     __end_of_printRTC:
  9312                           	opt stack 0
  9313                           tblptru	equ	0xFF8
  9314                           tblptrh	equ	0xFF7
  9315                           tblptrl	equ	0xFF6
  9316                           tablat	equ	0xFF5
  9317                           prodh	equ	0xFF4
  9318                           prodl	equ	0xFF3
  9319                           intcon	equ	0xFF2
  9320                           intcon2	equ	0xFF1
  9321                           intcon3	equ	0xFF0
  9322                           postinc0	equ	0xFEE
  9323                           wreg	equ	0xFE8
  9324                           postdec1	equ	0xFE5
  9325                           fsr1l	equ	0xFE1
  9326                           indf2	equ	0xFDF
  9327                           postinc2	equ	0xFDE
  9328                           postdec2	equ	0xFDD
  9329                           fsr2h	equ	0xFDA
  9330                           fsr2l	equ	0xFD9
  9331                           status	equ	0xFD8
  9332                           
  9333 ;; *************** function _strcpy *****************
  9334 ;; Defined at:
  9335 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9336 ;; Parameters:    Size  Location     Type
  9337 ;;  to              2    0[BANK0 ] PTR unsigned char 
  9338 ;;		 -> printRTC@month(4), UI@month(4), 
  9339 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  9340 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  9341 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  9342 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  9343 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  9344 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  9345 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  9346 ;;		 -> STR_8(4), 
  9347 ;; Auto vars:     Size  Location     Type
  9348 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  9349 ;;		 -> printRTC@month(4), UI@month(4), 
  9350 ;; Return value:  Size  Location     Type
  9351 ;;                  2    0[BANK0 ] PTR unsigned char 
  9352 ;; Registers used:
  9353 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9354 ;; Tracked objects:
  9355 ;;		On entry : 0/0
  9356 ;;		On exit  : 0/0
  9357 ;;		Unchanged: 0/0
  9358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9359 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9360 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9362 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9363 ;;Total ram usage:        6 bytes
  9364 ;; Hardware stack levels used:    1
  9365 ;; Hardware stack levels required when called:    7
  9366 ;; This function calls:
  9367 ;;		Nothing
  9368 ;; This function is called by:
  9369 ;;		_UI
  9370 ;;		_printRTC
  9371 ;; This function uses a non-reentrant model
  9372 ;;
  9373                           
  9374                           	psect	text25
  9375  004EA6                     __ptext25:
  9376                           	opt stack 0
  9377  004EA6                     _strcpy:
  9378                           	opt stack 20
  9379                           
  9380                           ;incstack = 0
  9381  004EA6  C080  F084         	movff	strcpy@to,strcpy@cp
  9382  004EAA  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  9383  004EAE  D006               	goto	l6451
  9384  004EB0                     l6449:
  9385  004EB0  0100               	movlb	0	; () banked
  9386  004EB2  4B84               	infsnz	strcpy@cp& (0+255),f,b
  9387  004EB4  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  9388  004EB6  0100               	movlb	0	; () banked
  9389  004EB8  4B82               	infsnz	strcpy@from& (0+255),f,b
  9390  004EBA  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  9391  004EBC                     l6451:
  9392  004EBC  C082  FFF6         	movff	strcpy@from,tblptrl
  9393  004EC0  C083  FFF7         	movff	strcpy@from+1,tblptrh
  9394  004EC4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9395  004EC4  6AF8               	clrf	tblptru,c
  9396  004EC6                     	endif
  9397  004EC6                     	if	0	;tblptru may be non-zero
  9398  004EC6                     	endif
  9399  004EC6  C084  FFD9         	movff	strcpy@cp,fsr2l
  9400  004ECA  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  9401  004ECE  0008               	tblrd		*
  9402  004ED0  CFF5 FFDF          	movff	tablat,indf2
  9403  004ED4  50DF               	movf	indf2,w,c
  9404  004ED6  B4D8               	btfsc	status,2,c
  9405  004ED8  0012               	return	
  9406  004EDA  D7EA               	goto	l6449
  9407  004EDC                     __end_of_strcpy:
  9408                           	opt stack 0
  9409                           tblptru	equ	0xFF8
  9410                           tblptrh	equ	0xFF7
  9411                           tblptrl	equ	0xFF6
  9412                           tablat	equ	0xFF5
  9413                           prodh	equ	0xFF4
  9414                           prodl	equ	0xFF3
  9415                           intcon	equ	0xFF2
  9416                           intcon2	equ	0xFF1
  9417                           intcon3	equ	0xFF0
  9418                           postinc0	equ	0xFEE
  9419                           wreg	equ	0xFE8
  9420                           postdec1	equ	0xFE5
  9421                           fsr1l	equ	0xFE1
  9422                           indf2	equ	0xFDF
  9423                           postinc2	equ	0xFDE
  9424                           postdec2	equ	0xFDD
  9425                           fsr2h	equ	0xFDA
  9426                           fsr2l	equ	0xFD9
  9427                           status	equ	0xFD8
  9428                           
  9429 ;; *************** function _getRTC *****************
  9430 ;; Defined at:
  9431 ;;		line 44 in file "RTC.c"
  9432 ;; Parameters:    Size  Location     Type
  9433 ;;		None
  9434 ;; Auto vars:     Size  Location     Type
  9435 ;;  i               2    3[BANK0 ] int 
  9436 ;; Return value:  Size  Location     Type
  9437 ;;                  1    wreg      void 
  9438 ;; Registers used:
  9439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9440 ;; Tracked objects:
  9441 ;;		On entry : 0/0
  9442 ;;		On exit  : 0/0
  9443 ;;		Unchanged: 0/0
  9444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9446 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9448 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9449 ;;Total ram usage:        2 bytes
  9450 ;; Hardware stack levels used:    1
  9451 ;; Hardware stack levels required when called:    9
  9452 ;; This function calls:
  9453 ;;		_I2C_Master_Read
  9454 ;;		_I2C_Master_Start
  9455 ;;		_I2C_Master_Stop
  9456 ;;		_I2C_Master_Write
  9457 ;; This function is called by:
  9458 ;;		_printRTC
  9459 ;;		_initSortTimer
  9460 ;; This function uses a non-reentrant model
  9461 ;;
  9462                           
  9463                           	psect	text26
  9464  004600                     __ptext26:
  9465                           	opt stack 0
  9466  004600                     _getRTC:
  9467                           	opt stack 18
  9468                           
  9469                           ;RTC.c: 48: I2C_Master_Start();
  9470                           
  9471                           ;incstack = 0
  9472  004600  EC1E  F02A         	call	_I2C_Master_Start	;wreg free
  9473                           
  9474                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  9475  004604  0E00               	movlw	0
  9476  004606  0100               	movlb	0	; () banked
  9477  004608  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9478  00460A  0ED0               	movlw	208
  9479  00460C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9480  00460E  EC0C  F02A         	call	_I2C_Master_Write	;wreg free
  9481                           
  9482                           ;RTC.c: 50: I2C_Master_Write(0x00);
  9483  004612  0E00               	movlw	0
  9484  004614  0100               	movlb	0	; () banked
  9485  004616  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9486  004618  0E00               	movlw	0
  9487  00461A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9488  00461C  EC0C  F02A         	call	_I2C_Master_Write	;wreg free
  9489                           
  9490                           ;RTC.c: 51: I2C_Master_Stop();
  9491  004620  EC1A  F02A         	call	_I2C_Master_Stop	;wreg free
  9492                           
  9493                           ;RTC.c: 54: I2C_Master_Start();
  9494  004624  EC1E  F02A         	call	_I2C_Master_Start	;wreg free
  9495                           
  9496                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  9497  004628  0E00               	movlw	0
  9498  00462A  0100               	movlb	0	; () banked
  9499  00462C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9500  00462E  0ED1               	movlw	209
  9501  004630  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9502  004632  EC0C  F02A         	call	_I2C_Master_Write	;wreg free
  9503                           
  9504                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  9505  004636  0E00               	movlw	0
  9506  004638  0100               	movlb	0	; () banked
  9507  00463A  6F84               	movwf	(getRTC@i+1)& (0+255),b
  9508  00463C  0E00               	movlw	0
  9509  00463E  6F83               	movwf	getRTC@i& (0+255),b
  9510  004640                     l6457:
  9511                           
  9512                           ; BSR set to: 0
  9513  004640  0100               	movlb	0	; () banked
  9514  004642  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  9515  004644  D008               	goto	l6461
  9516  004646  0100               	movlb	0	; () banked
  9517  004648  5184               	movf	(getRTC@i+1)& (0+255),w,b
  9518  00464A  E115               	bnz	l6467
  9519  00464C  0E06               	movlw	6
  9520  00464E  0100               	movlb	0	; () banked
  9521  004650  5D83               	subwf	getRTC@i& (0+255),w,b
  9522  004652  B0D8               	btfsc	status,0,c
  9523  004654  D010               	goto	l6467
  9524  004656                     l6461:
  9525                           
  9526                           ; BSR set to: 0
  9527                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  9528  004656  0E1C               	movlw	low _time
  9529  004658  0100               	movlb	0	; () banked
  9530  00465A  2583               	addwf	getRTC@i& (0+255),w,b
  9531  00465C  6ED9               	movwf	fsr2l,c
  9532  00465E  0E01               	movlw	high _time
  9533  004660  0100               	movlb	0	; () banked
  9534  004662  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  9535  004664  6EDA               	movwf	fsr2h,c
  9536  004666  0E01               	movlw	1
  9537  004668  ECAB  F028         	call	_I2C_Master_Read
  9538  00466C  6EDF               	movwf	indf2,c
  9539  00466E  0100               	movlb	0	; () banked
  9540  004670  4B83               	infsnz	getRTC@i& (0+255),f,b
  9541  004672  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  9542  004674  D7E5               	goto	l6457
  9543  004676                     l6467:
  9544                           
  9545                           ; BSR set to: 0
  9546                           ;RTC.c: 58: }
  9547                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  9548  004676  0E00               	movlw	0
  9549  004678  ECAB  F028         	call	_I2C_Master_Read
  9550  00467C  0101               	movlb	1	; () banked
  9551  00467E  6F22               	movwf	(_time+6)& (0+255),b
  9552                           
  9553                           ;RTC.c: 60: I2C_Master_Stop();
  9554  004680  EC1A  F02A         	call	_I2C_Master_Stop	;wreg free
  9555  004684  0012               	return		;funcret
  9556  004686                     __end_of_getRTC:
  9557                           	opt stack 0
  9558                           tblptru	equ	0xFF8
  9559                           tblptrh	equ	0xFF7
  9560                           tblptrl	equ	0xFF6
  9561                           tablat	equ	0xFF5
  9562                           prodh	equ	0xFF4
  9563                           prodl	equ	0xFF3
  9564                           intcon	equ	0xFF2
  9565                           intcon2	equ	0xFF1
  9566                           intcon3	equ	0xFF0
  9567                           postinc0	equ	0xFEE
  9568                           wreg	equ	0xFE8
  9569                           postdec1	equ	0xFE5
  9570                           fsr1l	equ	0xFE1
  9571                           indf2	equ	0xFDF
  9572                           postinc2	equ	0xFDE
  9573                           postdec2	equ	0xFDD
  9574                           fsr2h	equ	0xFDA
  9575                           fsr2l	equ	0xFD9
  9576                           status	equ	0xFD8
  9577                           
  9578 ;; *************** function _I2C_Master_Write *****************
  9579 ;; Defined at:
  9580 ;;		line 49 in file "I2C.c"
  9581 ;; Parameters:    Size  Location     Type
  9582 ;;  d               2    1[BANK0 ] unsigned int 
  9583 ;; Auto vars:     Size  Location     Type
  9584 ;;		None
  9585 ;; Return value:  Size  Location     Type
  9586 ;;                  1    wreg      void 
  9587 ;; Registers used:
  9588 ;;		wreg, status,2, status,0, cstack
  9589 ;; Tracked objects:
  9590 ;;		On entry : 0/0
  9591 ;;		On exit  : 0/0
  9592 ;;		Unchanged: 0/0
  9593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9594 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9597 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9598 ;;Total ram usage:        2 bytes
  9599 ;; Hardware stack levels used:    1
  9600 ;; Hardware stack levels required when called:    8
  9601 ;; This function calls:
  9602 ;;		_I2C_Master_Wait
  9603 ;; This function is called by:
  9604 ;;		_loadRTC
  9605 ;;		_getRTC
  9606 ;; This function uses a non-reentrant model
  9607 ;;
  9608                           
  9609                           	psect	text27
  9610  005418                     __ptext27:
  9611                           	opt stack 0
  9612  005418                     _I2C_Master_Write:
  9613                           	opt stack 18
  9614                           
  9615                           ;I2C.c: 51: I2C_Master_Wait();
  9616                           
  9617                           ;incstack = 0
  9618  005418  ECDD  F029         	call	_I2C_Master_Wait	;wreg free
  9619                           
  9620                           ;I2C.c: 52: SSPBUF = d;
  9621  00541C  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9622  005420  0012               	return		;funcret
  9623  005422                     __end_of_I2C_Master_Write:
  9624                           	opt stack 0
  9625                           tblptru	equ	0xFF8
  9626                           tblptrh	equ	0xFF7
  9627                           tblptrl	equ	0xFF6
  9628                           tablat	equ	0xFF5
  9629                           prodh	equ	0xFF4
  9630                           prodl	equ	0xFF3
  9631                           intcon	equ	0xFF2
  9632                           intcon2	equ	0xFF1
  9633                           intcon3	equ	0xFF0
  9634                           postinc0	equ	0xFEE
  9635                           wreg	equ	0xFE8
  9636                           postdec1	equ	0xFE5
  9637                           fsr1l	equ	0xFE1
  9638                           indf2	equ	0xFDF
  9639                           postinc2	equ	0xFDE
  9640                           postdec2	equ	0xFDD
  9641                           fsr2h	equ	0xFDA
  9642                           fsr2l	equ	0xFD9
  9643                           status	equ	0xFD8
  9644                           
  9645 ;; *************** function _I2C_Master_Stop *****************
  9646 ;; Defined at:
  9647 ;;		line 43 in file "I2C.c"
  9648 ;; Parameters:    Size  Location     Type
  9649 ;;		None
  9650 ;; Auto vars:     Size  Location     Type
  9651 ;;		None
  9652 ;; Return value:  Size  Location     Type
  9653 ;;                  1    wreg      void 
  9654 ;; Registers used:
  9655 ;;		wreg, status,2, status,0, cstack
  9656 ;; Tracked objects:
  9657 ;;		On entry : 0/0
  9658 ;;		On exit  : 0/0
  9659 ;;		Unchanged: 0/0
  9660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9665 ;;Total ram usage:        0 bytes
  9666 ;; Hardware stack levels used:    1
  9667 ;; Hardware stack levels required when called:    8
  9668 ;; This function calls:
  9669 ;;		_I2C_Master_Wait
  9670 ;; This function is called by:
  9671 ;;		_loadRTC
  9672 ;;		_getRTC
  9673 ;; This function uses a non-reentrant model
  9674 ;;
  9675                           
  9676                           	psect	text28
  9677  005434                     __ptext28:
  9678                           	opt stack 0
  9679  005434                     _I2C_Master_Stop:
  9680                           	opt stack 18
  9681                           
  9682                           ;I2C.c: 45: I2C_Master_Wait();
  9683                           
  9684                           ;incstack = 0
  9685  005434  ECDD  F029         	call	_I2C_Master_Wait	;wreg free
  9686                           
  9687                           ;I2C.c: 46: PEN = 1;
  9688  005438  84C5               	bsf	4037,2,c	;volatile
  9689  00543A  0012               	return		;funcret
  9690  00543C                     __end_of_I2C_Master_Stop:
  9691                           	opt stack 0
  9692                           tblptru	equ	0xFF8
  9693                           tblptrh	equ	0xFF7
  9694                           tblptrl	equ	0xFF6
  9695                           tablat	equ	0xFF5
  9696                           prodh	equ	0xFF4
  9697                           prodl	equ	0xFF3
  9698                           intcon	equ	0xFF2
  9699                           intcon2	equ	0xFF1
  9700                           intcon3	equ	0xFF0
  9701                           postinc0	equ	0xFEE
  9702                           wreg	equ	0xFE8
  9703                           postdec1	equ	0xFE5
  9704                           fsr1l	equ	0xFE1
  9705                           indf2	equ	0xFDF
  9706                           postinc2	equ	0xFDE
  9707                           postdec2	equ	0xFDD
  9708                           fsr2h	equ	0xFDA
  9709                           fsr2l	equ	0xFD9
  9710                           status	equ	0xFD8
  9711                           
  9712 ;; *************** function _I2C_Master_Start *****************
  9713 ;; Defined at:
  9714 ;;		line 31 in file "I2C.c"
  9715 ;; Parameters:    Size  Location     Type
  9716 ;;		None
  9717 ;; Auto vars:     Size  Location     Type
  9718 ;;		None
  9719 ;; Return value:  Size  Location     Type
  9720 ;;                  1    wreg      void 
  9721 ;; Registers used:
  9722 ;;		wreg, status,2, status,0, cstack
  9723 ;; Tracked objects:
  9724 ;;		On entry : 0/0
  9725 ;;		On exit  : 0/0
  9726 ;;		Unchanged: 0/0
  9727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9732 ;;Total ram usage:        0 bytes
  9733 ;; Hardware stack levels used:    1
  9734 ;; Hardware stack levels required when called:    8
  9735 ;; This function calls:
  9736 ;;		_I2C_Master_Wait
  9737 ;; This function is called by:
  9738 ;;		_loadRTC
  9739 ;;		_getRTC
  9740 ;; This function uses a non-reentrant model
  9741 ;;
  9742                           
  9743                           	psect	text29
  9744  00543C                     __ptext29:
  9745                           	opt stack 0
  9746  00543C                     _I2C_Master_Start:
  9747                           	opt stack 18
  9748                           
  9749                           ;I2C.c: 33: I2C_Master_Wait();
  9750                           
  9751                           ;incstack = 0
  9752  00543C  ECDD  F029         	call	_I2C_Master_Wait	;wreg free
  9753                           
  9754                           ;I2C.c: 34: SEN = 1;
  9755  005440  80C5               	bsf	4037,0,c	;volatile
  9756  005442  0012               	return		;funcret
  9757  005444                     __end_of_I2C_Master_Start:
  9758                           	opt stack 0
  9759                           tblptru	equ	0xFF8
  9760                           tblptrh	equ	0xFF7
  9761                           tblptrl	equ	0xFF6
  9762                           tablat	equ	0xFF5
  9763                           prodh	equ	0xFF4
  9764                           prodl	equ	0xFF3
  9765                           intcon	equ	0xFF2
  9766                           intcon2	equ	0xFF1
  9767                           intcon3	equ	0xFF0
  9768                           postinc0	equ	0xFEE
  9769                           wreg	equ	0xFE8
  9770                           postdec1	equ	0xFE5
  9771                           fsr1l	equ	0xFE1
  9772                           indf2	equ	0xFDF
  9773                           postinc2	equ	0xFDE
  9774                           postdec2	equ	0xFDD
  9775                           fsr2h	equ	0xFDA
  9776                           fsr2l	equ	0xFD9
  9777                           status	equ	0xFD8
  9778                           
  9779 ;; *************** function _I2C_Master_Read *****************
  9780 ;; Defined at:
  9781 ;;		line 55 in file "I2C.c"
  9782 ;; Parameters:    Size  Location     Type
  9783 ;;  a               1    wreg     unsigned char 
  9784 ;; Auto vars:     Size  Location     Type
  9785 ;;  a               1    1[BANK0 ] unsigned char 
  9786 ;;  temp            1    2[BANK0 ] unsigned char 
  9787 ;; Return value:  Size  Location     Type
  9788 ;;                  1    wreg      unsigned char 
  9789 ;; Registers used:
  9790 ;;		wreg, status,2, status,0, cstack
  9791 ;; Tracked objects:
  9792 ;;		On entry : 0/0
  9793 ;;		On exit  : 0/0
  9794 ;;		Unchanged: 0/0
  9795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9797 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9799 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9800 ;;Total ram usage:        2 bytes
  9801 ;; Hardware stack levels used:    1
  9802 ;; Hardware stack levels required when called:    8
  9803 ;; This function calls:
  9804 ;;		_I2C_Master_Wait
  9805 ;; This function is called by:
  9806 ;;		_getRTC
  9807 ;; This function uses a non-reentrant model
  9808 ;;
  9809                           
  9810                           	psect	text30
  9811  005156                     __ptext30:
  9812                           	opt stack 0
  9813  005156                     _I2C_Master_Read:
  9814                           	opt stack 18
  9815                           
  9816                           ;incstack = 0
  9817                           ;I2C_Master_Read@a stored from wreg
  9818  005156  0100               	movlb	0	; () banked
  9819  005158  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  9820                           
  9821                           ;I2C.c: 57: unsigned char temp;
  9822                           ;I2C.c: 58: I2C_Master_Wait();
  9823  00515A  ECDD  F029         	call	_I2C_Master_Wait	;wreg free
  9824                           
  9825                           ;I2C.c: 59: RCEN = 1;
  9826  00515E  86C5               	bsf	4037,3,c	;volatile
  9827                           
  9828                           ;I2C.c: 60: I2C_Master_Wait();
  9829  005160  ECDD  F029         	call	_I2C_Master_Wait	;wreg free
  9830                           
  9831                           ;I2C.c: 61: temp = SSPBUF;
  9832  005164  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  9833                           
  9834                           ;I2C.c: 62: I2C_Master_Wait();
  9835  005168  ECDD  F029         	call	_I2C_Master_Wait	;wreg free
  9836                           
  9837                           ;I2C.c: 63: ACKDT = (a)?0:1;
  9838  00516C  0100               	movlb	0	; () banked
  9839  00516E  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  9840  005170  0100               	movlb	0	; () banked
  9841  005172  A4D8               	btfss	status,2,c
  9842  005174  D002               	goto	u4440
  9843  005176  8AC5               	bsf	4037,5,c	;volatile
  9844  005178  D001               	goto	l6145
  9845  00517A                     u4440:
  9846  00517A  9AC5               	bcf	4037,5,c	;volatile
  9847  00517C                     l6145:
  9848                           
  9849                           ;I2C.c: 64: ACKEN = 1;
  9850  00517C  88C5               	bsf	4037,4,c	;volatile
  9851                           
  9852                           ;I2C.c: 65: return temp;
  9853  00517E  0100               	movlb	0	; () banked
  9854  005180  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  9855  005182  0012               	return	
  9856  005184                     __end_of_I2C_Master_Read:
  9857                           	opt stack 0
  9858                           tblptru	equ	0xFF8
  9859                           tblptrh	equ	0xFF7
  9860                           tblptrl	equ	0xFF6
  9861                           tablat	equ	0xFF5
  9862                           prodh	equ	0xFF4
  9863                           prodl	equ	0xFF3
  9864                           intcon	equ	0xFF2
  9865                           intcon2	equ	0xFF1
  9866                           intcon3	equ	0xFF0
  9867                           postinc0	equ	0xFEE
  9868                           wreg	equ	0xFE8
  9869                           postdec1	equ	0xFE5
  9870                           fsr1l	equ	0xFE1
  9871                           indf2	equ	0xFDF
  9872                           postinc2	equ	0xFDE
  9873                           postdec2	equ	0xFDD
  9874                           fsr2h	equ	0xFDA
  9875                           fsr2l	equ	0xFD9
  9876                           status	equ	0xFD8
  9877                           
  9878 ;; *************** function _I2C_Master_Wait *****************
  9879 ;; Defined at:
  9880 ;;		line 26 in file "I2C.c"
  9881 ;; Parameters:    Size  Location     Type
  9882 ;;		None
  9883 ;; Auto vars:     Size  Location     Type
  9884 ;;		None
  9885 ;; Return value:  Size  Location     Type
  9886 ;;                  1    wreg      void 
  9887 ;; Registers used:
  9888 ;;		wreg, status,2, status,0
  9889 ;; Tracked objects:
  9890 ;;		On entry : 0/0
  9891 ;;		On exit  : 0/0
  9892 ;;		Unchanged: 0/0
  9893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9896 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9897 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9898 ;;Total ram usage:        1 bytes
  9899 ;; Hardware stack levels used:    1
  9900 ;; Hardware stack levels required when called:    7
  9901 ;; This function calls:
  9902 ;;		Nothing
  9903 ;; This function is called by:
  9904 ;;		_I2C_Master_Start
  9905 ;;		_I2C_Master_Stop
  9906 ;;		_I2C_Master_Write
  9907 ;;		_I2C_Master_Read
  9908 ;;		_I2C_Master_RepeatedStart
  9909 ;; This function uses a non-reentrant model
  9910 ;;
  9911                           
  9912                           	psect	text31
  9913  0053BA                     __ptext31:
  9914                           	opt stack 0
  9915  0053BA                     _I2C_Master_Wait:
  9916                           	opt stack 18
  9917  0053BA                     l66:
  9918  0053BA  B4C7               	btfsc	4039,2,c	;volatile
  9919  0053BC  D7FE               	goto	l66
  9920  0053BE  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  9921  0053C2  0E1F               	movlw	31
  9922  0053C4  0100               	movlb	0	; () banked
  9923  0053C6  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  9924  0053C8  B4D8               	btfsc	status,2,c
  9925  0053CA  0012               	return	
  9926  0053CC  D7F6               	goto	l66
  9927  0053CE                     __end_of_I2C_Master_Wait:
  9928                           	opt stack 0
  9929                           tblptru	equ	0xFF8
  9930                           tblptrh	equ	0xFF7
  9931                           tblptrl	equ	0xFF6
  9932                           tablat	equ	0xFF5
  9933                           prodh	equ	0xFF4
  9934                           prodl	equ	0xFF3
  9935                           intcon	equ	0xFF2
  9936                           intcon2	equ	0xFF1
  9937                           intcon3	equ	0xFF0
  9938                           postinc0	equ	0xFEE
  9939                           wreg	equ	0xFE8
  9940                           postdec1	equ	0xFE5
  9941                           fsr1l	equ	0xFE1
  9942                           indf2	equ	0xFDF
  9943                           postinc2	equ	0xFDE
  9944                           postdec2	equ	0xFDD
  9945                           fsr2h	equ	0xFDA
  9946                           fsr2l	equ	0xFD9
  9947                           status	equ	0xFD8
  9948                           
  9949 ;; *************** function _change_state_to_menu_22 *****************
  9950 ;; Defined at:
  9951 ;;		line 498 in file "UI.c"
  9952 ;; Parameters:    Size  Location     Type
  9953 ;;		None
  9954 ;; Auto vars:     Size  Location     Type
  9955 ;;		None
  9956 ;; Return value:  Size  Location     Type
  9957 ;;                  1    wreg      void 
  9958 ;; Registers used:
  9959 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9960 ;; Tracked objects:
  9961 ;;		On entry : 0/0
  9962 ;;		On exit  : 0/0
  9963 ;;		Unchanged: 0/0
  9964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9969 ;;Total ram usage:        0 bytes
  9970 ;; Hardware stack levels used:    1
  9971 ;; Hardware stack levels required when called:   10
  9972 ;; This function calls:
  9973 ;;		_lcdInst
  9974 ;;		_printf
  9975 ;; This function is called by:
  9976 ;;		_UI
  9977 ;; This function uses a non-reentrant model
  9978 ;;
  9979                           
  9980                           	psect	text32
  9981  004E36                     __ptext32:
  9982                           	opt stack 0
  9983  004E36                     _change_state_to_menu_22:
  9984                           	opt stack 19
  9985                           
  9986                           ;UI.c: 499: cur_state = 22;
  9987                           
  9988                           ; BSR set to: 0
  9989                           ;incstack = 0
  9990  004E36  0E00               	movlw	0
  9991  004E38  0100               	movlb	0	; () banked
  9992  004E3A  6FED               	movwf	(_cur_state+1)& (0+255),b
  9993  004E3C  0E16               	movlw	22
  9994  004E3E  6FEC               	movwf	_cur_state& (0+255),b
  9995                           
  9996                           ; BSR set to: 0
  9997                           ;UI.c: 501: lcdInst(0b10000000);;
  9998  004E40  0E80               	movlw	128
  9999  004E42  ECF8  F029         	call	_lcdInst
 10000                           
 10001                           ;UI.c: 502: printf("2. SORT        <");
 10002  004E46  0EC3               	movlw	low STR_34
 10003  004E48  0100               	movlb	0	; () banked
 10004  004E4A  6F8E               	movwf	printf@f& (0+255),b
 10005  004E4C  0EFD               	movlw	high STR_34
 10006  004E4E  0100               	movlb	0	; () banked
 10007  004E50  6F8F               	movwf	(printf@f+1)& (0+255),b
 10008  004E52  EC08  F00B         	call	_printf	;wreg free
 10009                           
 10010                           ;UI.c: 503: lcdInst(0b11000000);;
 10011  004E56  0EC0               	movlw	192
 10012  004E58  ECF8  F029         	call	_lcdInst
 10013                           
 10014                           ;UI.c: 504: printf("3. LOGS         ");
 10015  004E5C  0E08               	movlw	low STR_36
 10016  004E5E  0100               	movlb	0	; () banked
 10017  004E60  6F8E               	movwf	printf@f& (0+255),b
 10018  004E62  0EFD               	movlw	high STR_36
 10019  004E64  0100               	movlb	0	; () banked
 10020  004E66  6F8F               	movwf	(printf@f+1)& (0+255),b
 10021  004E68  EC08  F00B         	call	_printf	;wreg free
 10022  004E6C  0012               	return		;funcret
 10023  004E6E                     __end_of_change_state_to_menu_22:
 10024                           	opt stack 0
 10025                           tblptru	equ	0xFF8
 10026                           tblptrh	equ	0xFF7
 10027                           tblptrl	equ	0xFF6
 10028                           tablat	equ	0xFF5
 10029                           prodh	equ	0xFF4
 10030                           prodl	equ	0xFF3
 10031                           intcon	equ	0xFF2
 10032                           intcon2	equ	0xFF1
 10033                           intcon3	equ	0xFF0
 10034                           postinc0	equ	0xFEE
 10035                           wreg	equ	0xFE8
 10036                           postdec1	equ	0xFE5
 10037                           fsr1l	equ	0xFE1
 10038                           indf2	equ	0xFDF
 10039                           postinc2	equ	0xFDE
 10040                           postdec2	equ	0xFDD
 10041                           fsr2h	equ	0xFDA
 10042                           fsr2l	equ	0xFD9
 10043                           status	equ	0xFD8
 10044                           
 10045 ;; *************** function _change_state_to_menu_12 *****************
 10046 ;; Defined at:
 10047 ;;		line 490 in file "UI.c"
 10048 ;; Parameters:    Size  Location     Type
 10049 ;;		None
 10050 ;; Auto vars:     Size  Location     Type
 10051 ;;		None
 10052 ;; Return value:  Size  Location     Type
 10053 ;;                  1    wreg      void 
 10054 ;; Registers used:
 10055 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10056 ;; Tracked objects:
 10057 ;;		On entry : 0/0
 10058 ;;		On exit  : 0/0
 10059 ;;		Unchanged: 0/0
 10060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10065 ;;Total ram usage:        0 bytes
 10066 ;; Hardware stack levels used:    1
 10067 ;; Hardware stack levels required when called:   10
 10068 ;; This function calls:
 10069 ;;		_lcdInst
 10070 ;;		_printf
 10071 ;; This function is called by:
 10072 ;;		_UI
 10073 ;; This function uses a non-reentrant model
 10074 ;;
 10075                           
 10076                           	psect	text33
 10077  004E6E                     __ptext33:
 10078                           	opt stack 0
 10079  004E6E                     _change_state_to_menu_12:
 10080                           	opt stack 19
 10081                           
 10082                           ;UI.c: 491: cur_state = 12;
 10083                           
 10084                           ;incstack = 0
 10085  004E6E  0E00               	movlw	0
 10086  004E70  0100               	movlb	0	; () banked
 10087  004E72  6FED               	movwf	(_cur_state+1)& (0+255),b
 10088  004E74  0E0C               	movlw	12
 10089  004E76  6FEC               	movwf	_cur_state& (0+255),b
 10090                           
 10091                           ; BSR set to: 0
 10092                           ;UI.c: 493: lcdInst(0b10000000);;
 10093  004E78  0E80               	movlw	128
 10094  004E7A  ECF8  F029         	call	_lcdInst
 10095                           
 10096                           ;UI.c: 494: printf("1. DATE/TIME    ");
 10097  004E7E  0E2A               	movlw	low STR_33
 10098  004E80  0100               	movlb	0	; () banked
 10099  004E82  6F8E               	movwf	printf@f& (0+255),b
 10100  004E84  0EFD               	movlw	high STR_33
 10101  004E86  0100               	movlb	0	; () banked
 10102  004E88  6F8F               	movwf	(printf@f+1)& (0+255),b
 10103  004E8A  EC08  F00B         	call	_printf	;wreg free
 10104                           
 10105                           ;UI.c: 495: lcdInst(0b11000000);;
 10106  004E8E  0EC0               	movlw	192
 10107  004E90  ECF8  F029         	call	_lcdInst
 10108                           
 10109                           ;UI.c: 496: printf("2. SORT        <");
 10110  004E94  0EC3               	movlw	low STR_34
 10111  004E96  0100               	movlb	0	; () banked
 10112  004E98  6F8E               	movwf	printf@f& (0+255),b
 10113  004E9A  0EFD               	movlw	high STR_34
 10114  004E9C  0100               	movlb	0	; () banked
 10115  004E9E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10116  004EA0  EC08  F00B         	call	_printf	;wreg free
 10117  004EA4  0012               	return		;funcret
 10118  004EA6                     __end_of_change_state_to_menu_12:
 10119                           	opt stack 0
 10120                           tblptru	equ	0xFF8
 10121                           tblptrh	equ	0xFF7
 10122                           tblptrl	equ	0xFF6
 10123                           tablat	equ	0xFF5
 10124                           prodh	equ	0xFF4
 10125                           prodl	equ	0xFF3
 10126                           intcon	equ	0xFF2
 10127                           intcon2	equ	0xFF1
 10128                           intcon3	equ	0xFF0
 10129                           postinc0	equ	0xFEE
 10130                           wreg	equ	0xFE8
 10131                           postdec1	equ	0xFE5
 10132                           fsr1l	equ	0xFE1
 10133                           indf2	equ	0xFDF
 10134                           postinc2	equ	0xFDE
 10135                           postdec2	equ	0xFDD
 10136                           fsr2h	equ	0xFDA
 10137                           fsr2l	equ	0xFD9
 10138                           status	equ	0xFD8
 10139                           
 10140 ;; *************** function ___awmod *****************
 10141 ;; Defined at:
 10142 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 10143 ;; Parameters:    Size  Location     Type
 10144 ;;  dividend        2    0[BANK0 ] int 
 10145 ;;  divisor         2    2[BANK0 ] int 
 10146 ;; Auto vars:     Size  Location     Type
 10147 ;;  sign            1    5[BANK0 ] unsigned char 
 10148 ;;  counter         1    4[BANK0 ] unsigned char 
 10149 ;; Return value:  Size  Location     Type
 10150 ;;                  2    0[BANK0 ] int 
 10151 ;; Registers used:
 10152 ;;		wreg, status,2, status,0
 10153 ;; Tracked objects:
 10154 ;;		On entry : 0/0
 10155 ;;		On exit  : 0/0
 10156 ;;		Unchanged: 0/0
 10157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10158 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10159 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10161 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10162 ;;Total ram usage:        6 bytes
 10163 ;; Hardware stack levels used:    1
 10164 ;; Hardware stack levels required when called:    7
 10165 ;; This function calls:
 10166 ;;		Nothing
 10167 ;; This function is called by:
 10168 ;;		_UI
 10169 ;; This function uses a non-reentrant model
 10170 ;;
 10171                           
 10172                           	psect	text34
 10173  0044D2                     __ptext34:
 10174                           	opt stack 0
 10175  0044D2                     ___awmod:
 10176                           	opt stack 22
 10177                           
 10178                           ;incstack = 0
 10179  0044D2  0E00               	movlw	0
 10180  0044D4  0100               	movlb	0	; () banked
 10181  0044D6  6F85               	movwf	___awmod@sign& (0+255),b
 10182                           
 10183                           ; BSR set to: 0
 10184  0044D8  0100               	movlb	0	; () banked
 10185  0044DA  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 10186  0044DC  D008               	goto	l8557
 10187                           
 10188                           ; BSR set to: 0
 10189  0044DE  0100               	movlb	0	; () banked
 10190  0044E0  6D80               	negf	___awmod@dividend& (0+255),b
 10191  0044E2  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10192  0044E4  B0D8               	btfsc	status,0,c
 10193  0044E6  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10194                           
 10195                           ; BSR set to: 0
 10196  0044E8  0E01               	movlw	1
 10197  0044EA  0100               	movlb	0	; () banked
 10198  0044EC  6F85               	movwf	___awmod@sign& (0+255),b
 10199  0044EE                     l8557:
 10200                           
 10201                           ; BSR set to: 0
 10202  0044EE  0100               	movlb	0	; () banked
 10203  0044F0  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10204  0044F2  D005               	goto	l8561
 10205                           
 10206                           ; BSR set to: 0
 10207  0044F4  0100               	movlb	0	; () banked
 10208  0044F6  6D82               	negf	___awmod@divisor& (0+255),b
 10209  0044F8  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 10210  0044FA  B0D8               	btfsc	status,0,c
 10211  0044FC  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 10212  0044FE                     l8561:
 10213                           
 10214                           ; BSR set to: 0
 10215  0044FE  0100               	movlb	0	; () banked
 10216  004500  5182               	movf	___awmod@divisor& (0+255),w,b
 10217  004502  0100               	movlb	0	; () banked
 10218  004504  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 10219  004506  B4D8               	btfsc	status,2,c
 10220  004508  D026               	goto	l8577
 10221                           
 10222                           ; BSR set to: 0
 10223  00450A  0E01               	movlw	1
 10224  00450C  0100               	movlb	0	; () banked
 10225  00450E  6F84               	movwf	___awmod@counter& (0+255),b
 10226  004510  D006               	goto	l8567
 10227  004512                     l8565:
 10228                           
 10229                           ; BSR set to: 0
 10230  004512  0100               	movlb	0	; () banked
 10231  004514  90D8               	bcf	status,0,c
 10232  004516  3782               	rlcf	___awmod@divisor& (0+255),f,b
 10233  004518  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 10234  00451A  0100               	movlb	0	; () banked
 10235  00451C  2B84               	incf	___awmod@counter& (0+255),f,b
 10236  00451E                     l8567:
 10237                           
 10238                           ; BSR set to: 0
 10239  00451E  0100               	movlb	0	; () banked
 10240  004520  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10241  004522  D7F7               	goto	l8565
 10242  004524                     l8569:
 10243                           
 10244                           ; BSR set to: 0
 10245  004524  0100               	movlb	0	; () banked
 10246  004526  5182               	movf	___awmod@divisor& (0+255),w,b
 10247  004528  0100               	movlb	0	; () banked
 10248  00452A  5D80               	subwf	___awmod@dividend& (0+255),w,b
 10249  00452C  0100               	movlb	0	; () banked
 10250  00452E  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10251  004530  0100               	movlb	0	; () banked
 10252  004532  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 10253  004534  A0D8               	btfss	status,0,c
 10254  004536  D008               	goto	l8573
 10255                           
 10256                           ; BSR set to: 0
 10257  004538  0100               	movlb	0	; () banked
 10258  00453A  5182               	movf	___awmod@divisor& (0+255),w,b
 10259  00453C  0100               	movlb	0	; () banked
 10260  00453E  5F80               	subwf	___awmod@dividend& (0+255),f,b
 10261  004540  0100               	movlb	0	; () banked
 10262  004542  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10263  004544  0100               	movlb	0	; () banked
 10264  004546  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 10265  004548                     l8573:
 10266                           
 10267                           ; BSR set to: 0
 10268  004548  0100               	movlb	0	; () banked
 10269  00454A  90D8               	bcf	status,0,c
 10270  00454C  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 10271  00454E  3382               	rrcf	___awmod@divisor& (0+255),f,b
 10272                           
 10273                           ; BSR set to: 0
 10274  004550  0100               	movlb	0	; () banked
 10275  004552  2F84               	decfsz	___awmod@counter& (0+255),f,b
 10276  004554  D7E7               	goto	l8569
 10277  004556                     l8577:
 10278                           
 10279                           ; BSR set to: 0
 10280  004556  0100               	movlb	0	; () banked
 10281  004558  5185               	movf	___awmod@sign& (0+255),w,b
 10282  00455A  0100               	movlb	0	; () banked
 10283  00455C  B4D8               	btfsc	status,2,c
 10284  00455E  D005               	goto	l8581
 10285                           
 10286                           ; BSR set to: 0
 10287  004560  0100               	movlb	0	; () banked
 10288  004562  6D80               	negf	___awmod@dividend& (0+255),b
 10289  004564  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10290  004566  B0D8               	btfsc	status,0,c
 10291  004568  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10292  00456A                     l8581:
 10293                           
 10294                           ; BSR set to: 0
 10295  00456A  C080  F080         	movff	___awmod@dividend,?___awmod
 10296  00456E  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 10297  004572  0012               	return	
 10298  004574                     __end_of___awmod:
 10299                           	opt stack 0
 10300                           tblptru	equ	0xFF8
 10301                           tblptrh	equ	0xFF7
 10302                           tblptrl	equ	0xFF6
 10303                           tablat	equ	0xFF5
 10304                           prodh	equ	0xFF4
 10305                           prodl	equ	0xFF3
 10306                           intcon	equ	0xFF2
 10307                           intcon2	equ	0xFF1
 10308                           intcon3	equ	0xFF0
 10309                           postinc0	equ	0xFEE
 10310                           wreg	equ	0xFE8
 10311                           postdec1	equ	0xFE5
 10312                           fsr1l	equ	0xFE1
 10313                           indf2	equ	0xFDF
 10314                           postinc2	equ	0xFDE
 10315                           postdec2	equ	0xFDD
 10316                           fsr2h	equ	0xFDA
 10317                           fsr2l	equ	0xFD9
 10318                           status	equ	0xFD8
 10319                           
 10320 ;; *************** function ___awdiv *****************
 10321 ;; Defined at:
 10322 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10323 ;; Parameters:    Size  Location     Type
 10324 ;;  dividend        2    6[BANK0 ] int 
 10325 ;;  divisor         2    8[BANK0 ] int 
 10326 ;; Auto vars:     Size  Location     Type
 10327 ;;  quotient        2   12[BANK0 ] int 
 10328 ;;  sign            1   11[BANK0 ] unsigned char 
 10329 ;;  counter         1   10[BANK0 ] unsigned char 
 10330 ;; Return value:  Size  Location     Type
 10331 ;;                  2    6[BANK0 ] int 
 10332 ;; Registers used:
 10333 ;;		wreg, status,2, status,0
 10334 ;; Tracked objects:
 10335 ;;		On entry : 0/0
 10336 ;;		On exit  : 0/0
 10337 ;;		Unchanged: 0/0
 10338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10339 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10340 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10342 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10343 ;;Total ram usage:        8 bytes
 10344 ;; Hardware stack levels used:    1
 10345 ;; Hardware stack levels required when called:    7
 10346 ;; This function calls:
 10347 ;;		Nothing
 10348 ;; This function is called by:
 10349 ;;		_UI
 10350 ;; This function uses a non-reentrant model
 10351 ;;
 10352                           
 10353                           	psect	text35
 10354  004202                     __ptext35:
 10355                           	opt stack 0
 10356  004202                     ___awdiv:
 10357                           	opt stack 22
 10358                           
 10359                           ; BSR set to: 0
 10360                           ;incstack = 0
 10361  004202  0E00               	movlw	0
 10362  004204  0100               	movlb	0	; () banked
 10363  004206  6F8B               	movwf	___awdiv@sign& (0+255),b
 10364                           
 10365                           ; BSR set to: 0
 10366  004208  0100               	movlb	0	; () banked
 10367  00420A  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10368  00420C  D008               	goto	l8513
 10369                           
 10370                           ; BSR set to: 0
 10371  00420E  0100               	movlb	0	; () banked
 10372  004210  6D88               	negf	___awdiv@divisor& (0+255),b
 10373  004212  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 10374  004214  B0D8               	btfsc	status,0,c
 10375  004216  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 10376                           
 10377                           ; BSR set to: 0
 10378  004218  0E01               	movlw	1
 10379  00421A  0100               	movlb	0	; () banked
 10380  00421C  6F8B               	movwf	___awdiv@sign& (0+255),b
 10381  00421E                     l8513:
 10382                           
 10383                           ; BSR set to: 0
 10384  00421E  0100               	movlb	0	; () banked
 10385  004220  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 10386  004222  D008               	goto	l8519
 10387                           
 10388                           ; BSR set to: 0
 10389  004224  0100               	movlb	0	; () banked
 10390  004226  6D86               	negf	___awdiv@dividend& (0+255),b
 10391  004228  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 10392  00422A  B0D8               	btfsc	status,0,c
 10393  00422C  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 10394                           
 10395                           ; BSR set to: 0
 10396  00422E  0E01               	movlw	1
 10397  004230  0100               	movlb	0	; () banked
 10398  004232  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 10399  004234                     l8519:
 10400                           
 10401                           ; BSR set to: 0
 10402  004234  0E00               	movlw	0
 10403  004236  0100               	movlb	0	; () banked
 10404  004238  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10405  00423A  0E00               	movlw	0
 10406  00423C  6F8C               	movwf	___awdiv@quotient& (0+255),b
 10407                           
 10408                           ; BSR set to: 0
 10409  00423E  0100               	movlb	0	; () banked
 10410  004240  5188               	movf	___awdiv@divisor& (0+255),w,b
 10411  004242  0100               	movlb	0	; () banked
 10412  004244  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10413  004246  B4D8               	btfsc	status,2,c
 10414  004248  D02C               	goto	l8541
 10415                           
 10416                           ; BSR set to: 0
 10417  00424A  0E01               	movlw	1
 10418  00424C  0100               	movlb	0	; () banked
 10419  00424E  6F8A               	movwf	___awdiv@counter& (0+255),b
 10420  004250  D006               	goto	l8527
 10421  004252                     l8525:
 10422                           
 10423                           ; BSR set to: 0
 10424  004252  0100               	movlb	0	; () banked
 10425  004254  90D8               	bcf	status,0,c
 10426  004256  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 10427  004258  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10428  00425A  0100               	movlb	0	; () banked
 10429  00425C  2B8A               	incf	___awdiv@counter& (0+255),f,b
 10430  00425E                     l8527:
 10431                           
 10432                           ; BSR set to: 0
 10433  00425E  0100               	movlb	0	; () banked
 10434  004260  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10435  004262  D7F7               	goto	l8525
 10436  004264                     l8529:
 10437                           
 10438                           ; BSR set to: 0
 10439  004264  0100               	movlb	0	; () banked
 10440  004266  90D8               	bcf	status,0,c
 10441  004268  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 10442  00426A  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10443                           
 10444                           ; BSR set to: 0
 10445  00426C  0100               	movlb	0	; () banked
 10446  00426E  5188               	movf	___awdiv@divisor& (0+255),w,b
 10447  004270  0100               	movlb	0	; () banked
 10448  004272  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 10449  004274  0100               	movlb	0	; () banked
 10450  004276  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10451  004278  0100               	movlb	0	; () banked
 10452  00427A  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10453  00427C  A0D8               	btfss	status,0,c
 10454  00427E  D00A               	goto	l8537
 10455                           
 10456                           ; BSR set to: 0
 10457  004280  0100               	movlb	0	; () banked
 10458  004282  5188               	movf	___awdiv@divisor& (0+255),w,b
 10459  004284  0100               	movlb	0	; () banked
 10460  004286  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 10461  004288  0100               	movlb	0	; () banked
 10462  00428A  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10463  00428C  0100               	movlb	0	; () banked
 10464  00428E  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10465                           
 10466                           ; BSR set to: 0
 10467  004290  0100               	movlb	0	; () banked
 10468  004292  818C               	bsf	___awdiv@quotient& (0+255),0,b
 10469  004294                     l8537:
 10470                           
 10471                           ; BSR set to: 0
 10472  004294  0100               	movlb	0	; () banked
 10473  004296  90D8               	bcf	status,0,c
 10474  004298  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10475  00429A  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 10476                           
 10477                           ; BSR set to: 0
 10478  00429C  0100               	movlb	0	; () banked
 10479  00429E  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 10480  0042A0  D7E1               	goto	l8529
 10481  0042A2                     l8541:
 10482                           
 10483                           ; BSR set to: 0
 10484  0042A2  0100               	movlb	0	; () banked
 10485  0042A4  518B               	movf	___awdiv@sign& (0+255),w,b
 10486  0042A6  0100               	movlb	0	; () banked
 10487  0042A8  B4D8               	btfsc	status,2,c
 10488  0042AA  D005               	goto	l8545
 10489                           
 10490                           ; BSR set to: 0
 10491  0042AC  0100               	movlb	0	; () banked
 10492  0042AE  6D8C               	negf	___awdiv@quotient& (0+255),b
 10493  0042B0  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10494  0042B2  B0D8               	btfsc	status,0,c
 10495  0042B4  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10496  0042B6                     l8545:
 10497                           
 10498                           ; BSR set to: 0
 10499  0042B6  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 10500  0042BA  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 10501  0042BE  0012               	return	
 10502  0042C0                     __end_of___awdiv:
 10503                           	opt stack 0
 10504                           tblptru	equ	0xFF8
 10505                           tblptrh	equ	0xFF7
 10506                           tblptrl	equ	0xFF6
 10507                           tablat	equ	0xFF5
 10508                           prodh	equ	0xFF4
 10509                           prodl	equ	0xFF3
 10510                           intcon	equ	0xFF2
 10511                           intcon2	equ	0xFF1
 10512                           intcon3	equ	0xFF0
 10513                           postinc0	equ	0xFEE
 10514                           wreg	equ	0xFE8
 10515                           postdec1	equ	0xFE5
 10516                           fsr1l	equ	0xFE1
 10517                           indf2	equ	0xFDF
 10518                           postinc2	equ	0xFDE
 10519                           postdec2	equ	0xFDD
 10520                           fsr2h	equ	0xFDA
 10521                           fsr2l	equ	0xFD9
 10522                           status	equ	0xFD8
 10523                           
 10524 ;; *************** function _Test *****************
 10525 ;; Defined at:
 10526 ;;		line 31 in file "Test.c"
 10527 ;; Parameters:    Size  Location     Type
 10528 ;;		None
 10529 ;; Auto vars:     Size  Location     Type
 10530 ;;		None
 10531 ;; Return value:  Size  Location     Type
 10532 ;;                  1    wreg      void 
 10533 ;; Registers used:
 10534 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10535 ;; Tracked objects:
 10536 ;;		On entry : 0/0
 10537 ;;		On exit  : 0/0
 10538 ;;		Unchanged: 0/0
 10539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10542 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10543 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10544 ;;Total ram usage:        2 bytes
 10545 ;; Hardware stack levels used:    1
 10546 ;; Hardware stack levels required when called:   11
 10547 ;; This function calls:
 10548 ;;		_BlockerTest
 10549 ;;		_BothServos
 10550 ;;		_EEPROMTest
 10551 ;;		_PortTestA5
 10552 ;;		_PortTests
 10553 ;;		_PusherTest
 10554 ;;		_SpeedTest
 10555 ;;		_actuatorTest
 10556 ;;		_algorithmTest
 10557 ;;		_arm
 10558 ;;		_lcdInst
 10559 ;;		_printf
 10560 ;;		_sensorTest
 10561 ;; This function is called by:
 10562 ;;		_main
 10563 ;; This function uses a non-reentrant model
 10564 ;;
 10565                           
 10566                           	psect	text36
 10567  003B5C                     __ptext36:
 10568                           	opt stack 0
 10569  003B5C                     _Test:
 10570                           	opt stack 19
 10571  003B5C                     
 10572                           ;Test.c: 34: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10573  003B5C  0E01               	movlw	1
 10574  003B5E  ECF8  F029         	call	_lcdInst
 10575  003B62  0E68               	movlw	104
 10576  003B64  0100               	movlb	0	; () banked
 10577  003B66  6FC6               	movwf	??_Test& (0+255),b
 10578  003B68  0EE4               	movlw	228
 10579  003B6A                     u9437:
 10580  003B6A  2EE8               	decfsz	wreg,f,c
 10581  003B6C  D7FE               	bra	u9437
 10582  003B6E  2FC6               	decfsz	??_Test& (0+255),f,b
 10583  003B70  D7FC               	bra	u9437
 10584  003B72  F000               	nop	
 10585  003B74  0E80               	movlw	128
 10586  003B76  ECF8  F029         	call	_lcdInst
 10587                           
 10588                           ;Test.c: 35: printf("2.SNR|4.HI|5.MED");
 10589  003B7A  0E80               	movlw	low STR_68
 10590  003B7C  0100               	movlb	0	; () banked
 10591  003B7E  6F8E               	movwf	printf@f& (0+255),b
 10592  003B80  0EFC               	movlw	high STR_68
 10593  003B82  0100               	movlb	0	; () banked
 10594  003B84  6F8F               	movwf	(printf@f+1)& (0+255),b
 10595  003B86  EC08  F00B         	call	_printf	;wreg free
 10596                           
 10597                           ;Test.c: 36: lcdInst(0b11000000);;
 10598  003B8A  0EC0               	movlw	192
 10599  003B8C  ECF8  F029         	call	_lcdInst
 10600                           
 10601                           ;Test.c: 37: printf("B.PSH|8.SV|9.BLK");
 10602  003B90  0E91               	movlw	low STR_69
 10603  003B92  0100               	movlb	0	; () banked
 10604  003B94  6F8E               	movwf	printf@f& (0+255),b
 10605  003B96  0EFC               	movlw	high STR_69
 10606  003B98  0100               	movlb	0	; () banked
 10607  003B9A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10608  003B9C  EC08  F00B         	call	_printf	;wreg free
 10609                           
 10610                           ;Test.c: 38: _delay((unsigned long)((100)*(32000000/4000.0)));
 10611  003BA0  0E05               	movlw	5
 10612  003BA2  0100               	movlb	0	; () banked
 10613  003BA4  6FC7               	movwf	(??_Test+1)& (0+255),b
 10614  003BA6  0E0F               	movlw	15
 10615  003BA8  0100               	movlb	0	; () banked
 10616  003BAA  6FC6               	movwf	??_Test& (0+255),b
 10617  003BAC  0EF1               	movlw	241
 10618  003BAE                     u9447:
 10619  003BAE  2EE8               	decfsz	wreg,f,c
 10620  003BB0  D7FE               	bra	u9447
 10621  003BB2  2FC6               	decfsz	??_Test& (0+255),f,b
 10622  003BB4  D7FC               	bra	u9447
 10623  003BB6  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
 10624  003BB8  D7FA               	bra	u9447
 10625  003BBA                     l1150:
 10626  003BBA  A281               	btfss	3969,1,c	;volatile
 10627  003BBC  D7FE               	goto	l1150
 10628                           
 10629                           ;Test.c: 40: var = PORTB >> 4;
 10630  003BBE  CF81 F0C6          	movff	3969,??_Test	;volatile
 10631  003BC2  0100               	movlb	0	; () banked
 10632  003BC4  3BC6               	swapf	??_Test& (0+255),f,b
 10633  003BC6  0E0F               	movlw	15
 10634  003BC8  17C6               	andwf	??_Test& (0+255),f,b
 10635  003BCA  0100               	movlb	0	; () banked
 10636  003BCC  51C6               	movf	??_Test& (0+255),w,b
 10637  003BCE  0100               	movlb	0	; () banked
 10638  003BD0  6FFA               	movwf	_var& (0+255),b
 10639  003BD2  6BFB               	clrf	(_var+1)& (0+255),b
 10640                           
 10641                           ; BSR set to: 0
 10642                           ;Test.c: 41: var++;
 10643  003BD4  0100               	movlb	0	; () banked
 10644  003BD6  4BFA               	infsnz	_var& (0+255),f,b
 10645  003BD8  2BFB               	incf	(_var+1)& (0+255),f,b
 10646  003BDA                     l1153:
 10647  003BDA  A281               	btfss	3969,1,c	;volatile
 10648  003BDC  D022               	goto	l9309
 10649  003BDE  D7FD               	goto	l1153
 10650  003BE0                     l9285:
 10651                           
 10652                           ;Test.c: 45: algorithmTest();
 10653  003BE0  EC34  F020         	call	_algorithmTest	;wreg free
 10654                           
 10655                           ;Test.c: 46: break;
 10656  003BE4  D7BB               	goto	l9267
 10657  003BE6                     l9287:
 10658                           
 10659                           ;Test.c: 48: sensorTest();
 10660  003BE6  EC9D  F010         	call	_sensorTest	;wreg free
 10661                           
 10662                           ;Test.c: 49: break;
 10663  003BEA  D7B8               	goto	l9267
 10664  003BEC                     l9289:
 10665                           
 10666                           ;Test.c: 51: actuatorTest();
 10667  003BEC  EC09  F000         	call	_actuatorTest	;wreg free
 10668                           
 10669                           ;Test.c: 52: break;
 10670  003BF0  D7B5               	goto	l9267
 10671  003BF2                     l9291:
 10672                           
 10673                           ;Test.c: 54: arm();
 10674  003BF2  ECCC  F01E         	call	_arm	;wreg free
 10675                           
 10676                           ;Test.c: 55: break;
 10677  003BF6  D7B2               	goto	l9267
 10678  003BF8                     l9293:
 10679                           
 10680                           ;Test.c: 57: PortTestA5();
 10681  003BF8  ECB5  F025         	call	_PortTestA5	;wreg free
 10682                           
 10683                           ;Test.c: 58: break;
 10684  003BFC  D7AF               	goto	l9267
 10685  003BFE                     l9295:
 10686                           
 10687                           ;Test.c: 61: SpeedTest();
 10688  003BFE  EC86  F023         	call	_SpeedTest	;wreg free
 10689                           
 10690                           ;Test.c: 62: break;
 10691  003C02  D7AC               	goto	l9267
 10692  003C04                     l9297:
 10693                           
 10694                           ;Test.c: 64: EEPROMTest();
 10695  003C04  EC2A  F02A         	call	_EEPROMTest	;wreg free
 10696                           
 10697                           ;Test.c: 65: break;
 10698  003C08  D7A9               	goto	l9267
 10699  003C0A                     l9299:
 10700                           
 10701                           ;Test.c: 67: PusherTest();
 10702  003C0A  EC69  F017         	call	_PusherTest	;wreg free
 10703                           
 10704                           ;Test.c: 68: break;
 10705  003C0E  D7A6               	goto	l9267
 10706  003C10                     l9301:
 10707                           
 10708                           ;Test.c: 70: PortTests();
 10709  003C10  ECC8  F023         	call	_PortTests	;wreg free
 10710                           
 10711                           ;Test.c: 71: break;
 10712  003C14  D7A3               	goto	l9267
 10713  003C16                     l9303:
 10714                           
 10715                           ;Test.c: 73: BothServos();
 10716  003C16  EC24  F00D         	call	_BothServos	;wreg free
 10717                           
 10718                           ;Test.c: 74: break;
 10719  003C1A  D7A0               	goto	l9267
 10720  003C1C                     l9305:
 10721                           
 10722                           ;Test.c: 76: BlockerTest();
 10723  003C1C  EC4A  F01C         	call	_BlockerTest	;wreg free
 10724                           
 10725                           ;Test.c: 80: }
 10726                           
 10727                           ;Test.c: 79: break;
 10728                           
 10729                           ;Test.c: 78: default:
 10730                           
 10731                           ;Test.c: 77: break;
 10732  003C20  D79D               	goto	l9267
 10733  003C22                     l9309:
 10734  003C22  C0FA  F0C6         	movff	_var,??_Test
 10735  003C26  C0FB  F0C7         	movff	_var+1,??_Test+1
 10736                           
 10737                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10738                           ; Switch size 1, requested type "space"
 10739                           ; Number of cases is 1, Range of values is 0 to 0
 10740                           ; switch strategies available:
 10741                           ; Name         Instructions Cycles
 10742                           ; simple_byte            4     3 (average)
 10743                           ;	Chosen strategy is simple_byte
 10744  003C2A  0100               	movlb	0	; () banked
 10745  003C2C  51C7               	movf	(??_Test+1)& (0+255),w,b
 10746  003C2E  0A00               	xorlw	0	; case 0
 10747  003C30  A4D8               	btfss	status,2,c
 10748  003C32  D794               	goto	l9267
 10749                           
 10750                           ; BSR set to: 0
 10751                           ; Switch size 1, requested type "space"
 10752                           ; Number of cases is 11, Range of values is 1 to 11
 10753                           ; switch strategies available:
 10754                           ; Name         Instructions Cycles
 10755                           ; simple_byte           34    18 (average)
 10756                           ;	Chosen strategy is simple_byte
 10757  003C34  0100               	movlb	0	; () banked
 10758  003C36  51C6               	movf	??_Test& (0+255),w,b
 10759  003C38  0A01               	xorlw	1	; case 1
 10760  003C3A  B4D8               	btfsc	status,2,c
 10761  003C3C  D7D1               	goto	l9285
 10762  003C3E  0A03               	xorlw	3	; case 2
 10763  003C40  B4D8               	btfsc	status,2,c
 10764  003C42  D7D1               	goto	l9287
 10765  003C44  0A01               	xorlw	1	; case 3
 10766  003C46  B4D8               	btfsc	status,2,c
 10767  003C48  D7D1               	goto	l9289
 10768  003C4A  0A07               	xorlw	7	; case 4
 10769  003C4C  B4D8               	btfsc	status,2,c
 10770  003C4E  D7D1               	goto	l9291
 10771  003C50  0A01               	xorlw	1	; case 5
 10772  003C52  B4D8               	btfsc	status,2,c
 10773  003C54  D7D1               	goto	l9293
 10774  003C56  0A03               	xorlw	3	; case 6
 10775  003C58  B4D8               	btfsc	status,2,c
 10776  003C5A  D7D1               	goto	l9295
 10777  003C5C  0A01               	xorlw	1	; case 7
 10778  003C5E  B4D8               	btfsc	status,2,c
 10779  003C60  D7D1               	goto	l9297
 10780  003C62  0A0F               	xorlw	15	; case 8
 10781  003C64  B4D8               	btfsc	status,2,c
 10782  003C66  D7D1               	goto	l9299
 10783  003C68  0A01               	xorlw	1	; case 9
 10784  003C6A  B4D8               	btfsc	status,2,c
 10785  003C6C  D7D1               	goto	l9301
 10786  003C6E  0A03               	xorlw	3	; case 10
 10787  003C70  B4D8               	btfsc	status,2,c
 10788  003C72  D7D1               	goto	l9303
 10789  003C74  0A01               	xorlw	1	; case 11
 10790  003C76  B4D8               	btfsc	status,2,c
 10791  003C78  D7D1               	goto	l9305
 10792                           
 10793                           ; BSR set to: 0
 10794                           
 10795                           ; BSR set to: 0
 10796  003C7A  D770               	goto	l9267
 10797  003C7C                     __end_of_Test:
 10798                           	opt stack 0
 10799                           tblptru	equ	0xFF8
 10800                           tblptrh	equ	0xFF7
 10801                           tblptrl	equ	0xFF6
 10802                           tablat	equ	0xFF5
 10803                           prodh	equ	0xFF4
 10804                           prodl	equ	0xFF3
 10805                           intcon	equ	0xFF2
 10806                           intcon2	equ	0xFF1
 10807                           intcon3	equ	0xFF0
 10808                           postinc0	equ	0xFEE
 10809                           wreg	equ	0xFE8
 10810                           postdec1	equ	0xFE5
 10811                           fsr1l	equ	0xFE1
 10812                           indf2	equ	0xFDF
 10813                           postinc2	equ	0xFDE
 10814                           postdec2	equ	0xFDD
 10815                           fsr2h	equ	0xFDA
 10816                           fsr2l	equ	0xFD9
 10817                           status	equ	0xFD8
 10818                           
 10819 ;; *************** function _sensorTest *****************
 10820 ;; Defined at:
 10821 ;;		line 128 in file "Test.c"
 10822 ;; Parameters:    Size  Location     Type
 10823 ;;		None
 10824 ;; Auto vars:     Size  Location     Type
 10825 ;;  res             2   45[BANK0 ] int 
 10826 ;; Return value:  Size  Location     Type
 10827 ;;                  1    wreg      void 
 10828 ;; Registers used:
 10829 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10830 ;; Tracked objects:
 10831 ;;		On entry : 0/0
 10832 ;;		On exit  : 0/0
 10833 ;;		Unchanged: 0/0
 10834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10836 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10837 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10838 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10839 ;;Total ram usage:        4 bytes
 10840 ;; Hardware stack levels used:    1
 10841 ;; Hardware stack levels required when called:   10
 10842 ;; This function calls:
 10843 ;;		_lcdInst
 10844 ;;		_printf
 10845 ;;		_readADC
 10846 ;;		_readMAG
 10847 ;; This function is called by:
 10848 ;;		_Test
 10849 ;; This function uses a non-reentrant model
 10850 ;;
 10851                           
 10852                           	psect	text37
 10853  00213A                     __ptext37:
 10854                           	opt stack 0
 10855  00213A                     _sensorTest:
 10856                           	opt stack 19
 10857                           
 10858                           ;Test.c: 130: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10859                           
 10860                           ; BSR set to: 0
 10861                           ;incstack = 0
 10862  00213A  0E01               	movlw	1
 10863  00213C  ECF8  F029         	call	_lcdInst
 10864  002140  0E68               	movlw	104
 10865  002142  0100               	movlb	0	; () banked
 10866  002144  6FAB               	movwf	??_sensorTest& (0+255),b
 10867  002146  0EE4               	movlw	228
 10868  002148                     u9457:
 10869  002148  2EE8               	decfsz	wreg,f,c
 10870  00214A  D7FE               	bra	u9457
 10871  00214C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10872  00214E  D7FC               	bra	u9457
 10873  002150  F000               	nop	
 10874  002152  0E80               	movlw	128
 10875  002154  ECF8  F029         	call	_lcdInst
 10876                           
 10877                           ;Test.c: 131: printf("SENSORS");
 10878  002158  0EAD               	movlw	low STR_77
 10879  00215A  0100               	movlb	0	; () banked
 10880  00215C  6F8E               	movwf	printf@f& (0+255),b
 10881  00215E  0EFF               	movlw	high STR_77
 10882  002160  0100               	movlb	0	; () banked
 10883  002162  6F8F               	movwf	(printf@f+1)& (0+255),b
 10884  002164  EC08  F00B         	call	_printf	;wreg free
 10885                           
 10886                           ;Test.c: 132: lcdInst(0b11000000);;
 10887  002168  0EC0               	movlw	192
 10888  00216A  ECF8  F029         	call	_lcdInst
 10889                           
 10890                           ;Test.c: 133: printf("PUSH TO START");
 10891  00216E  0E0A               	movlw	low STR_71
 10892  002170  0100               	movlb	0	; () banked
 10893  002172  6F8E               	movwf	printf@f& (0+255),b
 10894  002174  0EFF               	movlw	high STR_71
 10895  002176  0100               	movlb	0	; () banked
 10896  002178  6F8F               	movwf	(printf@f+1)& (0+255),b
 10897  00217A  EC08  F00B         	call	_printf	;wreg free
 10898                           
 10899                           ;Test.c: 134: _delay((unsigned long)((100)*(32000000/4000.0)));
 10900  00217E  0E05               	movlw	5
 10901  002180  0100               	movlb	0	; () banked
 10902  002182  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10903  002184  0E0F               	movlw	15
 10904  002186  0100               	movlb	0	; () banked
 10905  002188  6FAB               	movwf	??_sensorTest& (0+255),b
 10906  00218A  0EF1               	movlw	241
 10907  00218C                     u9467:
 10908  00218C  2EE8               	decfsz	wreg,f,c
 10909  00218E  D7FE               	bra	u9467
 10910  002190  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10911  002192  D7FC               	bra	u9467
 10912  002194  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10913  002196  D7FA               	bra	u9467
 10914  002198                     l1184:
 10915  002198  A281               	btfss	3969,1,c	;volatile
 10916  00219A  D7FE               	goto	l1184
 10917  00219C                     l1187:
 10918  00219C  B281               	btfsc	3969,1,c	;volatile
 10919  00219E  D7FE               	goto	l1187
 10920                           
 10921                           ;Test.c: 137: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10922  0021A0  0E01               	movlw	1
 10923  0021A2  ECF8  F029         	call	_lcdInst
 10924  0021A6  0E68               	movlw	104
 10925  0021A8  0100               	movlb	0	; () banked
 10926  0021AA  6FAB               	movwf	??_sensorTest& (0+255),b
 10927  0021AC  0EE4               	movlw	228
 10928  0021AE                     u9477:
 10929  0021AE  2EE8               	decfsz	wreg,f,c
 10930  0021B0  D7FE               	bra	u9477
 10931  0021B2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10932  0021B4  D7FC               	bra	u9477
 10933  0021B6  F000               	nop	
 10934  0021B8  0E80               	movlw	128
 10935  0021BA  ECF8  F029         	call	_lcdInst
 10936                           
 10937                           ;Test.c: 142: printf("TST: IR SNSR");
 10938  0021BE  0E34               	movlw	low STR_79
 10939  0021C0  0100               	movlb	0	; () banked
 10940  0021C2  6F8E               	movwf	printf@f& (0+255),b
 10941  0021C4  0EFF               	movlw	high STR_79
 10942  0021C6  0100               	movlb	0	; () banked
 10943  0021C8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10944  0021CA  EC08  F00B         	call	_printf	;wreg free
 10945                           
 10946                           ;Test.c: 143: _delay((unsigned long)((100)*(32000000/4000.0)));
 10947  0021CE  0E05               	movlw	5
 10948  0021D0  0100               	movlb	0	; () banked
 10949  0021D2  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10950  0021D4  0E0F               	movlw	15
 10951  0021D6  0100               	movlb	0	; () banked
 10952  0021D8  6FAB               	movwf	??_sensorTest& (0+255),b
 10953  0021DA  0EF1               	movlw	241
 10954  0021DC                     u9487:
 10955  0021DC  2EE8               	decfsz	wreg,f,c
 10956  0021DE  D7FE               	bra	u9487
 10957  0021E0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10958  0021E2  D7FC               	bra	u9487
 10959  0021E4  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10960  0021E6  D7FA               	bra	u9487
 10961                           
 10962                           ;Test.c: 144: LATCbits.LATC5 = 1;
 10963  0021E8  8A8B               	bsf	3979,5,c	;volatile
 10964                           
 10965                           ;Test.c: 146: while(PORTBbits.RB1 == 0){
 10966  0021EA  D05C               	goto	l7691
 10967  0021EC                     l7673:
 10968                           
 10969                           ;Test.c: 147: readADC(0);
 10970  0021EC  0E00               	movlw	0
 10971  0021EE  ECEF  F028         	call	_readADC
 10972                           
 10973                           ;Test.c: 148: int res = ADRESH<<8 | ADRESL;
 10974  0021F2  50C3               	movf	4035,w,c	;volatile
 10975  0021F4  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 10976  0021F8  0100               	movlb	0	; () banked
 10977  0021FA  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 10978  0021FC  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 10979  002200  0100               	movlb	0	; () banked
 10980  002202  6BAB               	clrf	??_sensorTest& (0+255),b
 10981  002204  0100               	movlb	0	; () banked
 10982  002206  11AB               	iorwf	??_sensorTest& (0+255),w,b
 10983  002208  0100               	movlb	0	; () banked
 10984  00220A  6FAD               	movwf	sensorTest@res& (0+255),b
 10985  00220C  0100               	movlb	0	; () banked
 10986  00220E  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 10987  002210  0100               	movlb	0	; () banked
 10988  002212  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 10989                           
 10990                           ; BSR set to: 0
 10991                           ;Test.c: 149: IR_signal = (res > 800) ? 1 : 0;
 10992  002214  0100               	movlb	0	; () banked
 10993  002216  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 10994  002218  D00A               	goto	u6230
 10995  00221A  0E21               	movlw	33
 10996  00221C  0100               	movlb	0	; () banked
 10997  00221E  5DAD               	subwf	sensorTest@res& (0+255),w,b
 10998  002220  0E03               	movlw	3
 10999  002222  0100               	movlb	0	; () banked
 11000  002224  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 11001  002226  A0D8               	btfss	status,0,c
 11002  002228  D002               	goto	u6230
 11003  00222A  0E01               	movlw	1
 11004  00222C  D001               	goto	u6240
 11005  00222E                     u6230:
 11006  00222E  0E00               	movlw	0
 11007  002230                     u6240:
 11008  002230  0100               	movlb	0	; () banked
 11009  002232  6FE6               	movwf	_IR_signal& (0+255),b
 11010  002234  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 11011                           
 11012                           ;Test.c: 151: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11013  002236  0E01               	movlw	1
 11014  002238  ECF8  F029         	call	_lcdInst
 11015  00223C  0E68               	movlw	104
 11016  00223E  0100               	movlb	0	; () banked
 11017  002240  6FAB               	movwf	??_sensorTest& (0+255),b
 11018  002242  0EE4               	movlw	228
 11019  002244                     u9497:
 11020  002244  2EE8               	decfsz	wreg,f,c
 11021  002246  D7FE               	bra	u9497
 11022  002248  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11023  00224A  D7FC               	bra	u9497
 11024  00224C  F000               	nop	
 11025  00224E  0E80               	movlw	128
 11026  002250  ECF8  F029         	call	_lcdInst
 11027                           
 11028                           ;Test.c: 152: printf("IR_signal: %d ", IR_signal);
 11029  002254  0E59               	movlw	low STR_80
 11030  002256  0100               	movlb	0	; () banked
 11031  002258  6F8E               	movwf	printf@f& (0+255),b
 11032  00225A  0EFE               	movlw	high STR_80
 11033  00225C  0100               	movlb	0	; () banked
 11034  00225E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11035  002260  C0E6  F090         	movff	_IR_signal,?_printf+2
 11036  002264  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 11037  002268  EC08  F00B         	call	_printf	;wreg free
 11038                           
 11039                           ;Test.c: 153: lcdInst(0b11000000);;
 11040  00226C  0EC0               	movlw	192
 11041  00226E  ECF8  F029         	call	_lcdInst
 11042                           
 11043                           ;Test.c: 154: printf("%d", res);
 11044  002272  0E15               	movlw	low (STR_27+14)
 11045  002274  0100               	movlb	0	; () banked
 11046  002276  6F8E               	movwf	printf@f& (0+255),b
 11047  002278  0EFE               	movlw	high (STR_27+14)
 11048  00227A  0100               	movlb	0	; () banked
 11049  00227C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11050  00227E  C0AD  F090         	movff	sensorTest@res,?_printf+2
 11051  002282  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 11052  002286  EC08  F00B         	call	_printf	;wreg free
 11053                           
 11054                           ;Test.c: 155: _delay((unsigned long)((100)*(32000000/4000.0)));
 11055  00228A  0E05               	movlw	5
 11056  00228C  0100               	movlb	0	; () banked
 11057  00228E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11058  002290  0E0F               	movlw	15
 11059  002292  0100               	movlb	0	; () banked
 11060  002294  6FAB               	movwf	??_sensorTest& (0+255),b
 11061  002296  0EF1               	movlw	241
 11062  002298                     u9507:
 11063  002298  2EE8               	decfsz	wreg,f,c
 11064  00229A  D7FE               	bra	u9507
 11065  00229C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11066  00229E  D7FC               	bra	u9507
 11067  0022A0  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11068  0022A2  D7FA               	bra	u9507
 11069  0022A4                     l7691:
 11070  0022A4  A281               	btfss	3969,1,c	;volatile
 11071  0022A6  D7A2               	goto	l7673
 11072                           
 11073                           ;Test.c: 156: }
 11074                           ;Test.c: 157: LATCbits.LATC5 = 0;
 11075  0022A8  9A8B               	bcf	3979,5,c	;volatile
 11076                           
 11077                           ;Test.c: 165: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11078  0022AA  0E01               	movlw	1
 11079  0022AC  ECF8  F029         	call	_lcdInst
 11080  0022B0  0E68               	movlw	104
 11081  0022B2  0100               	movlb	0	; () banked
 11082  0022B4  6FAB               	movwf	??_sensorTest& (0+255),b
 11083  0022B6  0EE4               	movlw	228
 11084  0022B8                     u9517:
 11085  0022B8  2EE8               	decfsz	wreg,f,c
 11086  0022BA  D7FE               	bra	u9517
 11087  0022BC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11088  0022BE  D7FC               	bra	u9517
 11089  0022C0  F000               	nop	
 11090  0022C2  0E80               	movlw	128
 11091  0022C4  ECF8  F029         	call	_lcdInst
 11092                           
 11093                           ;Test.c: 166: printf("TST: MAGNETISM");
 11094  0022C8  0E86               	movlw	low STR_82
 11095  0022CA  0100               	movlb	0	; () banked
 11096  0022CC  6F8E               	movwf	printf@f& (0+255),b
 11097  0022CE  0EFE               	movlw	high STR_82
 11098  0022D0  0100               	movlb	0	; () banked
 11099  0022D2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11100  0022D4  EC08  F00B         	call	_printf	;wreg free
 11101                           
 11102                           ;Test.c: 167: _delay((unsigned long)((100)*(32000000/4000.0)));
 11103  0022D8  0E05               	movlw	5
 11104  0022DA  0100               	movlb	0	; () banked
 11105  0022DC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11106  0022DE  0E0F               	movlw	15
 11107  0022E0  0100               	movlb	0	; () banked
 11108  0022E2  6FAB               	movwf	??_sensorTest& (0+255),b
 11109  0022E4  0EF1               	movlw	241
 11110  0022E6                     u9527:
 11111  0022E6  2EE8               	decfsz	wreg,f,c
 11112  0022E8  D7FE               	bra	u9527
 11113  0022EA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11114  0022EC  D7FC               	bra	u9527
 11115  0022EE  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11116  0022F0  D7FA               	bra	u9527
 11117                           
 11118                           ;Test.c: 168: while(PORTBbits.RB1 == 0){
 11119  0022F2  D021               	goto	l7709
 11120  0022F4                     l7703:
 11121                           
 11122                           ;Test.c: 169: readMAG();
 11123  0022F4  ECB1  F026         	call	_readMAG	;wreg free
 11124                           
 11125                           ;Test.c: 170: lcdInst(0b10000000);;
 11126  0022F8  0E80               	movlw	128
 11127  0022FA  ECF8  F029         	call	_lcdInst
 11128                           
 11129                           ;Test.c: 171: lcdInst(0b11000000);;
 11130  0022FE  0EC0               	movlw	192
 11131  002300  ECF8  F029         	call	_lcdInst
 11132                           
 11133                           ;Test.c: 172: printf("MAG_signal: %d ", MAG_signal);
 11134  002304  0E29               	movlw	low STR_83
 11135  002306  0100               	movlb	0	; () banked
 11136  002308  6F8E               	movwf	printf@f& (0+255),b
 11137  00230A  0EFE               	movlw	high STR_83
 11138  00230C  0100               	movlb	0	; () banked
 11139  00230E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11140  002310  C0E8  F090         	movff	_MAG_signal,?_printf+2
 11141  002314  C0E9  F091         	movff	_MAG_signal+1,?_printf+3
 11142  002318  EC08  F00B         	call	_printf	;wreg free
 11143                           
 11144                           ;Test.c: 173: _delay((unsigned long)((100)*(32000000/4000.0)));
 11145  00231C  0E05               	movlw	5
 11146  00231E  0100               	movlb	0	; () banked
 11147  002320  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11148  002322  0E0F               	movlw	15
 11149  002324  0100               	movlb	0	; () banked
 11150  002326  6FAB               	movwf	??_sensorTest& (0+255),b
 11151  002328  0EF1               	movlw	241
 11152  00232A                     u9537:
 11153  00232A  2EE8               	decfsz	wreg,f,c
 11154  00232C  D7FE               	bra	u9537
 11155  00232E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11156  002330  D7FC               	bra	u9537
 11157  002332  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11158  002334  D7FA               	bra	u9537
 11159  002336                     l7709:
 11160  002336  A281               	btfss	3969,1,c	;volatile
 11161  002338  D7DD               	goto	l7703
 11162                           
 11163                           ;Test.c: 174: }
 11164                           ;Test.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11165  00233A  0E01               	movlw	1
 11166  00233C  ECF8  F029         	call	_lcdInst
 11167  002340  0E68               	movlw	104
 11168  002342  0100               	movlb	0	; () banked
 11169  002344  6FAB               	movwf	??_sensorTest& (0+255),b
 11170  002346  0EE4               	movlw	228
 11171  002348                     u9547:
 11172  002348  2EE8               	decfsz	wreg,f,c
 11173  00234A  D7FE               	bra	u9547
 11174  00234C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11175  00234E  D7FC               	bra	u9547
 11176  002350  F000               	nop	
 11177  002352  0E80               	movlw	128
 11178  002354  ECF8  F029         	call	_lcdInst
 11179                           
 11180                           ;Test.c: 180: printf("TST: COND");
 11181  002358  0E86               	movlw	low STR_84
 11182  00235A  0100               	movlb	0	; () banked
 11183  00235C  6F8E               	movwf	printf@f& (0+255),b
 11184  00235E  0EFF               	movlw	high STR_84
 11185  002360  0100               	movlb	0	; () banked
 11186  002362  6F8F               	movwf	(printf@f+1)& (0+255),b
 11187  002364  EC08  F00B         	call	_printf	;wreg free
 11188                           
 11189                           ;Test.c: 181: _delay((unsigned long)((100)*(32000000/4000.0)));
 11190  002368  0E05               	movlw	5
 11191  00236A  0100               	movlb	0	; () banked
 11192  00236C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11193  00236E  0E0F               	movlw	15
 11194  002370  0100               	movlb	0	; () banked
 11195  002372  6FAB               	movwf	??_sensorTest& (0+255),b
 11196  002374  0EF1               	movlw	241
 11197  002376                     u9557:
 11198  002376  2EE8               	decfsz	wreg,f,c
 11199  002378  D7FE               	bra	u9557
 11200  00237A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11201  00237C  D7FC               	bra	u9557
 11202  00237E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11203  002380  D7FA               	bra	u9557
 11204  002382                     l7721:
 11205                           
 11206                           ;Test.c: 183: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11207  002382  0E01               	movlw	1
 11208  002384  ECF8  F029         	call	_lcdInst
 11209  002388  0E68               	movlw	104
 11210  00238A  0100               	movlb	0	; () banked
 11211  00238C  6FAB               	movwf	??_sensorTest& (0+255),b
 11212  00238E  0EE4               	movlw	228
 11213  002390                     u9567:
 11214  002390  2EE8               	decfsz	wreg,f,c
 11215  002392  D7FE               	bra	u9567
 11216  002394  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11217  002396  D7FC               	bra	u9567
 11218  002398  F000               	nop	
 11219  00239A  0E80               	movlw	128
 11220  00239C  ECF8  F029         	call	_lcdInst
 11221                           
 11222                           ;Test.c: 184: printf("TST: COND");
 11223  0023A0  0E86               	movlw	low STR_84
 11224  0023A2  0100               	movlb	0	; () banked
 11225  0023A4  6F8E               	movwf	printf@f& (0+255),b
 11226  0023A6  0EFF               	movlw	high STR_84
 11227  0023A8  0100               	movlb	0	; () banked
 11228  0023AA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11229  0023AC  EC08  F00B         	call	_printf	;wreg free
 11230                           
 11231                           ;Test.c: 185: while(PORTBbits.RB1 == 0){
 11232  0023B0  D01B               	goto	l7733
 11233  0023B2                     l7729:
 11234                           
 11235                           ;Test.c: 189: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11236  0023B2  0E80               	movlw	128
 11237  0023B4  ECF8  F029         	call	_lcdInst
 11238  0023B8  0EC0               	movlw	192
 11239  0023BA  ECF8  F029         	call	_lcdInst
 11240                           
 11241                           ;Test.c: 190: printf("COND: %d", PORTAbits.RA2);
 11242  0023BE  0EA4               	movlw	low STR_86
 11243  0023C0  0100               	movlb	0	; () banked
 11244  0023C2  6F8E               	movwf	printf@f& (0+255),b
 11245  0023C4  0EFF               	movlw	high STR_86
 11246  0023C6  0100               	movlb	0	; () banked
 11247  0023C8  6F8F               	movwf	(printf@f+1)& (0+255),b
 11248  0023CA  A480               	btfss	3968,2,c	;volatile
 11249  0023CC  D004               	goto	u6270
 11250  0023CE  0100               	movlb	0	; () banked
 11251  0023D0  6BAB               	clrf	??_sensorTest& (0+255),b
 11252  0023D2  2BAB               	incf	??_sensorTest& (0+255),f,b
 11253  0023D4  D002               	goto	u6278
 11254  0023D6                     u6270:
 11255  0023D6  0100               	movlb	0	; () banked
 11256  0023D8  6BAB               	clrf	??_sensorTest& (0+255),b
 11257  0023DA                     u6278:
 11258  0023DA  0100               	movlb	0	; () banked
 11259  0023DC  51AB               	movf	??_sensorTest& (0+255),w,b
 11260  0023DE  0100               	movlb	0	; () banked
 11261  0023E0  6F90               	movwf	(?_printf+2)& (0+255),b
 11262  0023E2  6B91               	clrf	(?_printf+3)& (0+255),b
 11263  0023E4  EC08  F00B         	call	_printf	;wreg free
 11264  0023E8                     l7733:
 11265  0023E8  A281               	btfss	3969,1,c	;volatile
 11266  0023EA  D7E3               	goto	l7729
 11267                           
 11268                           ;Test.c: 191: }
 11269                           ;Test.c: 192: if(PORTB >> 4 == 0b1111){
 11270  0023EC  3881               	swapf	3969,w,c	;volatile
 11271  0023EE  0B0F               	andlw	15
 11272  0023F0  0A0F               	xorlw	15
 11273  0023F2  B4D8               	btfsc	status,2,c
 11274  0023F4  0012               	return	
 11275                           
 11276                           ;Test.c: 195: else{
 11277                           ;Test.c: 196: LATAbits.LATA3 = 1;
 11278                           
 11279                           ;Test.c: 194: }
 11280                           
 11281                           ;Test.c: 193: break;
 11282  0023F6  8689               	bsf	3977,3,c	;volatile
 11283                           
 11284                           ;Test.c: 197: while(PORTBbits.RB1 == 1){
 11285  0023F8  D01B               	goto	l7745
 11286  0023FA                     l7741:
 11287                           
 11288                           ;Test.c: 199: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11289  0023FA  0E80               	movlw	128
 11290  0023FC  ECF8  F029         	call	_lcdInst
 11291  002400  0EC0               	movlw	192
 11292  002402  ECF8  F029         	call	_lcdInst
 11293                           
 11294                           ;Test.c: 200: printf("COND: %d", PORTAbits.RA2);
 11295  002406  0EA4               	movlw	low STR_86
 11296  002408  0100               	movlb	0	; () banked
 11297  00240A  6F8E               	movwf	printf@f& (0+255),b
 11298  00240C  0EFF               	movlw	high STR_86
 11299  00240E  0100               	movlb	0	; () banked
 11300  002410  6F8F               	movwf	(printf@f+1)& (0+255),b
 11301  002412  A480               	btfss	3968,2,c	;volatile
 11302  002414  D004               	goto	u6300
 11303  002416  0100               	movlb	0	; () banked
 11304  002418  6BAB               	clrf	??_sensorTest& (0+255),b
 11305  00241A  2BAB               	incf	??_sensorTest& (0+255),f,b
 11306  00241C  D002               	goto	u6308
 11307  00241E                     u6300:
 11308  00241E  0100               	movlb	0	; () banked
 11309  002420  6BAB               	clrf	??_sensorTest& (0+255),b
 11310  002422                     u6308:
 11311  002422  0100               	movlb	0	; () banked
 11312  002424  51AB               	movf	??_sensorTest& (0+255),w,b
 11313  002426  0100               	movlb	0	; () banked
 11314  002428  6F90               	movwf	(?_printf+2)& (0+255),b
 11315  00242A  6B91               	clrf	(?_printf+3)& (0+255),b
 11316  00242C  EC08  F00B         	call	_printf	;wreg free
 11317  002430                     l7745:
 11318  002430  B281               	btfsc	3969,1,c	;volatile
 11319  002432  D7E3               	goto	l7741
 11320                           
 11321                           ;Test.c: 201: }
 11322                           ;Test.c: 202: LATAbits.LATA3 = !1;
 11323  002434  9689               	bcf	3977,3,c	;volatile
 11324  002436  D7A5               	goto	l7721
 11325  002438                     __end_of_sensorTest:
 11326                           	opt stack 0
 11327                           tblptru	equ	0xFF8
 11328                           tblptrh	equ	0xFF7
 11329                           tblptrl	equ	0xFF6
 11330                           tablat	equ	0xFF5
 11331                           prodh	equ	0xFF4
 11332                           prodl	equ	0xFF3
 11333                           intcon	equ	0xFF2
 11334                           intcon2	equ	0xFF1
 11335                           intcon3	equ	0xFF0
 11336                           postinc0	equ	0xFEE
 11337                           wreg	equ	0xFE8
 11338                           postdec1	equ	0xFE5
 11339                           fsr1l	equ	0xFE1
 11340                           indf2	equ	0xFDF
 11341                           postinc2	equ	0xFDE
 11342                           postdec2	equ	0xFDD
 11343                           fsr2h	equ	0xFDA
 11344                           fsr2l	equ	0xFD9
 11345                           status	equ	0xFD8
 11346                           
 11347 ;; *************** function _readMAG *****************
 11348 ;; Defined at:
 11349 ;;		line 29 in file "ADCFunctionality.c"
 11350 ;; Parameters:    Size  Location     Type
 11351 ;;		None
 11352 ;; Auto vars:     Size  Location     Type
 11353 ;;  res             2    4[BANK0 ] int 
 11354 ;; Return value:  Size  Location     Type
 11355 ;;                  1    wreg      void 
 11356 ;; Registers used:
 11357 ;;		wreg, status,2, status,0, cstack
 11358 ;; Tracked objects:
 11359 ;;		On entry : 0/0
 11360 ;;		On exit  : 0/0
 11361 ;;		Unchanged: 0/0
 11362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11364 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11365 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11366 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11367 ;;Total ram usage:        4 bytes
 11368 ;; Hardware stack levels used:    1
 11369 ;; Hardware stack levels required when called:    8
 11370 ;; This function calls:
 11371 ;;		_readADC
 11372 ;; This function is called by:
 11373 ;;		_getMAG
 11374 ;;		_sensorTest
 11375 ;; This function uses a non-reentrant model
 11376 ;;
 11377                           
 11378                           	psect	text38
 11379  004D62                     __ptext38:
 11380                           	opt stack 0
 11381  004D62                     _readMAG:
 11382                           	opt stack 19
 11383                           
 11384                           ;ADCFunctionality.c: 30: readADC(1);
 11385                           
 11386                           ;incstack = 0
 11387  004D62  0E01               	movlw	1
 11388  004D64  ECEF  F028         	call	_readADC
 11389                           
 11390                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 11391  004D68  50C3               	movf	4035,w,c	;volatile
 11392  004D6A  CFC4 F082          	movff	4036,??_readMAG	;volatile
 11393  004D6E  0100               	movlb	0	; () banked
 11394  004D70  6B83               	clrf	(??_readMAG+1)& (0+255),b
 11395  004D72  C082  F083         	movff	??_readMAG,??_readMAG+1
 11396  004D76  0100               	movlb	0	; () banked
 11397  004D78  6B82               	clrf	??_readMAG& (0+255),b
 11398  004D7A  0100               	movlb	0	; () banked
 11399  004D7C  1182               	iorwf	??_readMAG& (0+255),w,b
 11400  004D7E  0100               	movlb	0	; () banked
 11401  004D80  6F84               	movwf	readMAG@res& (0+255),b
 11402  004D82  0100               	movlb	0	; () banked
 11403  004D84  5183               	movf	(??_readMAG+1)& (0+255),w,b
 11404  004D86  0100               	movlb	0	; () banked
 11405  004D88  6F85               	movwf	(readMAG@res+1)& (0+255),b
 11406                           
 11407                           ; BSR set to: 0
 11408                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 11409  004D8A  0100               	movlb	0	; () banked
 11410  004D8C  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 11411  004D8E  D008               	goto	u4661
 11412  004D90  0100               	movlb	0	; () banked
 11413  004D92  5185               	movf	(readMAG@res+1)& (0+255),w,b
 11414  004D94  E107               	bnz	u4660
 11415  004D96  0E96               	movlw	150
 11416  004D98  0100               	movlb	0	; () banked
 11417  004D9A  5D84               	subwf	readMAG@res& (0+255),w,b
 11418  004D9C  B0D8               	btfsc	status,0,c
 11419  004D9E  D002               	goto	u4660
 11420  004DA0                     u4661:
 11421  004DA0  0E01               	movlw	1
 11422  004DA2  D001               	goto	u4670
 11423  004DA4                     u4660:
 11424  004DA4  0E00               	movlw	0
 11425  004DA6                     u4670:
 11426  004DA6  0100               	movlb	0	; () banked
 11427  004DA8  6FE8               	movwf	_MAG_signal& (0+255),b
 11428  004DAA  6BE9               	clrf	(_MAG_signal+1)& (0+255),b
 11429                           
 11430                           ; BSR set to: 0
 11431  004DAC  0012               	return		;funcret
 11432  004DAE                     __end_of_readMAG:
 11433                           	opt stack 0
 11434                           tblptru	equ	0xFF8
 11435                           tblptrh	equ	0xFF7
 11436                           tblptrl	equ	0xFF6
 11437                           tablat	equ	0xFF5
 11438                           prodh	equ	0xFF4
 11439                           prodl	equ	0xFF3
 11440                           intcon	equ	0xFF2
 11441                           intcon2	equ	0xFF1
 11442                           intcon3	equ	0xFF0
 11443                           postinc0	equ	0xFEE
 11444                           wreg	equ	0xFE8
 11445                           postdec1	equ	0xFE5
 11446                           fsr1l	equ	0xFE1
 11447                           indf2	equ	0xFDF
 11448                           postinc2	equ	0xFDE
 11449                           postdec2	equ	0xFDD
 11450                           fsr2h	equ	0xFDA
 11451                           fsr2l	equ	0xFD9
 11452                           status	equ	0xFD8
 11453                           
 11454 ;; *************** function _arm *****************
 11455 ;; Defined at:
 11456 ;;		line 643 in file "Test.c"
 11457 ;; Parameters:    Size  Location     Type
 11458 ;;		None
 11459 ;; Auto vars:     Size  Location     Type
 11460 ;;  on              2   44[BANK0 ] int 
 11461 ;; Return value:  Size  Location     Type
 11462 ;;                  1    wreg      void 
 11463 ;; Registers used:
 11464 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11465 ;; Tracked objects:
 11466 ;;		On entry : 0/0
 11467 ;;		On exit  : 0/0
 11468 ;;		Unchanged: 0/0
 11469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11471 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11472 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11473 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11474 ;;Total ram usage:        3 bytes
 11475 ;; Hardware stack levels used:    1
 11476 ;; Hardware stack levels required when called:   10
 11477 ;; This function calls:
 11478 ;;		_lcdInst
 11479 ;;		_printf
 11480 ;; This function is called by:
 11481 ;;		_Test
 11482 ;; This function uses a non-reentrant model
 11483 ;;
 11484                           
 11485                           	psect	text39
 11486  003D98                     __ptext39:
 11487                           	opt stack 0
 11488  003D98                     _arm:
 11489                           	opt stack 19
 11490                           
 11491                           ;Test.c: 644: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11492                           
 11493                           ; BSR set to: 0
 11494                           ;incstack = 0
 11495  003D98  0E01               	movlw	1
 11496  003D9A  ECF8  F029         	call	_lcdInst
 11497  003D9E  0E68               	movlw	104
 11498  003DA0  0100               	movlb	0	; () banked
 11499  003DA2  6FAB               	movwf	??_arm& (0+255),b
 11500  003DA4  0EE4               	movlw	228
 11501  003DA6                     u9577:
 11502  003DA6  2EE8               	decfsz	wreg,f,c
 11503  003DA8  D7FE               	bra	u9577
 11504  003DAA  2FAB               	decfsz	??_arm& (0+255),f,b
 11505  003DAC  D7FC               	bra	u9577
 11506  003DAE  F000               	nop	
 11507  003DB0  0E80               	movlw	128
 11508  003DB2  ECF8  F029         	call	_lcdInst
 11509                           
 11510                           ;Test.c: 645: printf("D WILL RETURN   ");
 11511  003DB6  0E09               	movlw	low STR_118
 11512  003DB8  0100               	movlb	0	; () banked
 11513  003DBA  6F8E               	movwf	printf@f& (0+255),b
 11514  003DBC  0EFC               	movlw	high STR_118
 11515  003DBE  0100               	movlb	0	; () banked
 11516  003DC0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11517  003DC2  EC08  F00B         	call	_printf	;wreg free
 11518                           
 11519                           ;Test.c: 646: lcdInst(0b11000000);;
 11520  003DC6  0EC0               	movlw	192
 11521  003DC8  ECF8  F029         	call	_lcdInst
 11522                           
 11523                           ;Test.c: 647: printf("ELSE TOGGLES ARM");
 11524  003DCC  0EA2               	movlw	low STR_127
 11525  003DCE  0100               	movlb	0	; () banked
 11526  003DD0  6F8E               	movwf	printf@f& (0+255),b
 11527  003DD2  0EFC               	movlw	high STR_127
 11528  003DD4  0100               	movlb	0	; () banked
 11529  003DD6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11530  003DD8  EC08  F00B         	call	_printf	;wreg free
 11531                           
 11532                           ;Test.c: 648: int on = 0;
 11533  003DDC  0E00               	movlw	0
 11534  003DDE  0100               	movlb	0	; () banked
 11535  003DE0  6FAD               	movwf	(arm@on+1)& (0+255),b
 11536  003DE2  0E00               	movlw	0
 11537  003DE4  6FAC               	movwf	arm@on& (0+255),b
 11538  003DE6                     l8185:
 11539                           
 11540                           ;Test.c: 650: if(on){
 11541  003DE6  0100               	movlb	0	; () banked
 11542  003DE8  51AC               	movf	arm@on& (0+255),w,b
 11543  003DEA  0100               	movlb	0	; () banked
 11544  003DEC  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11545  003DEE  B4D8               	btfsc	status,2,c
 11546  003DF0  D02B               	goto	l8199
 11547                           
 11548                           ; BSR set to: 0
 11549                           ;Test.c: 651: on = !on;
 11550  003DF2  0100               	movlb	0	; () banked
 11551  003DF4  51AC               	movf	arm@on& (0+255),w,b
 11552  003DF6  0100               	movlb	0	; () banked
 11553  003DF8  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11554  003DFA  A4D8               	btfss	status,2,c
 11555  003DFC  D002               	goto	u6890
 11556  003DFE  0E01               	movlw	1
 11557  003E00  D001               	goto	u6900
 11558  003E02                     u6890:
 11559  003E02  0E00               	movlw	0
 11560  003E04                     u6900:
 11561  003E04  0100               	movlb	0	; () banked
 11562  003E06  6FAC               	movwf	arm@on& (0+255),b
 11563  003E08  6BAD               	clrf	(arm@on+1)& (0+255),b
 11564                           
 11565                           ;Test.c: 652: while(PORTBbits.RB1 == 0){
 11566  003E0A  D014               	goto	l8193
 11567  003E0C                     l1391:
 11568                           
 11569                           ;Test.c: 653: LATBbits.LATB3 = 1;
 11570  003E0C  868A               	bsf	3978,3,c	;volatile
 11571                           
 11572                           ;Test.c: 654: _delay((unsigned long)((1200)*(32000000/4000000.0)));
 11573  003E0E  0E0D               	movlw	13
 11574  003E10  0100               	movlb	0	; () banked
 11575  003E12  6FAB               	movwf	??_arm& (0+255),b
 11576  003E14  0E76               	movlw	118
 11577  003E16                     u9587:
 11578  003E16  2EE8               	decfsz	wreg,f,c
 11579  003E18  D7FE               	bra	u9587
 11580  003E1A  2FAB               	decfsz	??_arm& (0+255),f,b
 11581  003E1C  D7FC               	bra	u9587
 11582  003E1E  F000               	nop	
 11583                           
 11584                           ;Test.c: 655: LATBbits.LATB3 = 0;
 11585  003E20  968A               	bcf	3978,3,c	;volatile
 11586                           
 11587                           ;Test.c: 656: _delay((unsigned long)((19)*(32000000/4000.0)));
 11588  003E22  0EC6               	movlw	198
 11589  003E24  0100               	movlb	0	; () banked
 11590  003E26  6FAB               	movwf	??_arm& (0+255),b
 11591  003E28  0E65               	movlw	101
 11592  003E2A                     u9597:
 11593  003E2A  2EE8               	decfsz	wreg,f,c
 11594  003E2C  D7FE               	bra	u9597
 11595  003E2E  2FAB               	decfsz	??_arm& (0+255),f,b
 11596  003E30  D7FC               	bra	u9597
 11597  003E32  D000               	nop2	
 11598  003E34                     l8193:
 11599  003E34  A281               	btfss	3969,1,c	;volatile
 11600  003E36  D7EA               	goto	l1391
 11601                           
 11602                           ;Test.c: 657: }
 11603                           ;Test.c: 658: if(PORTB >> 4 == 0b1111){
 11604  003E38  3881               	swapf	3969,w,c	;volatile
 11605  003E3A  0B0F               	andlw	15
 11606  003E3C  0A0F               	xorlw	15
 11607  003E3E  B4D8               	btfsc	status,2,c
 11608  003E40  0012               	return	
 11609  003E42                     l1395:
 11610  003E42  A281               	btfss	3969,1,c	;volatile
 11611  003E44  D7D0               	goto	l8185
 11612  003E46  D7FD               	goto	l1395
 11613  003E48                     l8199:
 11614                           
 11615                           ;Test.c: 663: else{
 11616                           ;Test.c: 664: on = !on;
 11617  003E48  0100               	movlb	0	; () banked
 11618  003E4A  51AC               	movf	arm@on& (0+255),w,b
 11619  003E4C  0100               	movlb	0	; () banked
 11620  003E4E  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11621  003E50  A4D8               	btfss	status,2,c
 11622  003E52  D002               	goto	u6940
 11623  003E54  0E01               	movlw	1
 11624  003E56  D001               	goto	u6950
 11625  003E58                     u6940:
 11626  003E58  0E00               	movlw	0
 11627  003E5A                     u6950:
 11628  003E5A  0100               	movlb	0	; () banked
 11629  003E5C  6FAC               	movwf	arm@on& (0+255),b
 11630  003E5E  6BAD               	clrf	(arm@on+1)& (0+255),b
 11631                           
 11632                           ;Test.c: 665: while(PORTBbits.RB1 == 0){
 11633  003E60  D014               	goto	l8205
 11634  003E62                     l1400:
 11635                           
 11636                           ;Test.c: 666: LATBbits.LATB3 = 1;
 11637  003E62  868A               	bsf	3978,3,c	;volatile
 11638                           
 11639                           ;Test.c: 667: _delay((unsigned long)((2400)*(32000000/4000000.0)));
 11640  003E64  0E19               	movlw	25
 11641  003E66  0100               	movlb	0	; () banked
 11642  003E68  6FAB               	movwf	??_arm& (0+255),b
 11643  003E6A  0EEE               	movlw	238
 11644  003E6C                     u9607:
 11645  003E6C  2EE8               	decfsz	wreg,f,c
 11646  003E6E  D7FE               	bra	u9607
 11647  003E70  2FAB               	decfsz	??_arm& (0+255),f,b
 11648  003E72  D7FC               	bra	u9607
 11649  003E74  F000               	nop	
 11650                           
 11651                           ;Test.c: 668: LATBbits.LATB3 = 0;
 11652  003E76  968A               	bcf	3978,3,c	;volatile
 11653                           
 11654                           ;Test.c: 669: _delay((unsigned long)((17)*(32000000/4000.0)));
 11655  003E78  0EB1               	movlw	177
 11656  003E7A  0100               	movlb	0	; () banked
 11657  003E7C  6FAB               	movwf	??_arm& (0+255),b
 11658  003E7E  0E9E               	movlw	158
 11659  003E80                     u9617:
 11660  003E80  2EE8               	decfsz	wreg,f,c
 11661  003E82  D7FE               	bra	u9617
 11662  003E84  2FAB               	decfsz	??_arm& (0+255),f,b
 11663  003E86  D7FC               	bra	u9617
 11664  003E88  F000               	nop	
 11665  003E8A                     l8205:
 11666  003E8A  A281               	btfss	3969,1,c	;volatile
 11667  003E8C  D7EA               	goto	l1400
 11668                           
 11669                           ;Test.c: 670: }
 11670                           ;Test.c: 671: if(PORTB >> 4 == 0b1111){
 11671  003E8E  3881               	swapf	3969,w,c	;volatile
 11672  003E90  0B0F               	andlw	15
 11673  003E92  0A0F               	xorlw	15
 11674  003E94  B4D8               	btfsc	status,2,c
 11675  003E96  0012               	return	
 11676  003E98                     l1403:
 11677  003E98  A281               	btfss	3969,1,c	;volatile
 11678  003E9A  D7A5               	goto	l8185
 11679  003E9C  D7FD               	goto	l1403
 11680  003E9E                     __end_of_arm:
 11681                           	opt stack 0
 11682                           tblptru	equ	0xFF8
 11683                           tblptrh	equ	0xFF7
 11684                           tblptrl	equ	0xFF6
 11685                           tablat	equ	0xFF5
 11686                           prodh	equ	0xFF4
 11687                           prodl	equ	0xFF3
 11688                           intcon	equ	0xFF2
 11689                           intcon2	equ	0xFF1
 11690                           intcon3	equ	0xFF0
 11691                           postinc0	equ	0xFEE
 11692                           wreg	equ	0xFE8
 11693                           postdec1	equ	0xFE5
 11694                           fsr1l	equ	0xFE1
 11695                           indf2	equ	0xFDF
 11696                           postinc2	equ	0xFDE
 11697                           postdec2	equ	0xFDD
 11698                           fsr2h	equ	0xFDA
 11699                           fsr2l	equ	0xFD9
 11700                           status	equ	0xFD8
 11701                           
 11702 ;; *************** function _algorithmTest *****************
 11703 ;; Defined at:
 11704 ;;		line 84 in file "Test.c"
 11705 ;; Parameters:    Size  Location     Type
 11706 ;;		None
 11707 ;; Auto vars:     Size  Location     Type
 11708 ;;		None
 11709 ;; Return value:  Size  Location     Type
 11710 ;;                  1    wreg      void 
 11711 ;; Registers used:
 11712 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11713 ;; Tracked objects:
 11714 ;;		On entry : 0/0
 11715 ;;		On exit  : 0/0
 11716 ;;		Unchanged: 0/0
 11717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11720 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11721 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11722 ;;Total ram usage:        2 bytes
 11723 ;; Hardware stack levels used:    1
 11724 ;; Hardware stack levels required when called:   10
 11725 ;; This function calls:
 11726 ;;		_lcdInst
 11727 ;;		_printf
 11728 ;; This function is called by:
 11729 ;;		_Test
 11730 ;; This function uses a non-reentrant model
 11731 ;;
 11732                           
 11733                           	psect	text40
 11734  004068                     __ptext40:
 11735                           	opt stack 0
 11736  004068                     _algorithmTest:
 11737                           	opt stack 19
 11738                           
 11739                           ;Test.c: 86: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11740                           
 11741                           ;incstack = 0
 11742  004068  0E01               	movlw	1
 11743  00406A  ECF8  F029         	call	_lcdInst
 11744  00406E  0E68               	movlw	104
 11745  004070  0100               	movlb	0	; () banked
 11746  004072  6FAB               	movwf	??_algorithmTest& (0+255),b
 11747  004074  0EE4               	movlw	228
 11748  004076                     u9627:
 11749  004076  2EE8               	decfsz	wreg,f,c
 11750  004078  D7FE               	bra	u9627
 11751  00407A  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11752  00407C  D7FC               	bra	u9627
 11753  00407E  F000               	nop	
 11754  004080  0E80               	movlw	128
 11755  004082  ECF8  F029         	call	_lcdInst
 11756                           
 11757                           ;Test.c: 87: printf("ALGORITHM TEST");
 11758  004086  0ED1               	movlw	low STR_70
 11759  004088  0100               	movlb	0	; () banked
 11760  00408A  6F8E               	movwf	printf@f& (0+255),b
 11761  00408C  0EFE               	movlw	high STR_70
 11762  00408E  0100               	movlb	0	; () banked
 11763  004090  6F8F               	movwf	(printf@f+1)& (0+255),b
 11764  004092  EC08  F00B         	call	_printf	;wreg free
 11765                           
 11766                           ;Test.c: 88: lcdInst(0b11000000);;
 11767  004096  0EC0               	movlw	192
 11768  004098  ECF8  F029         	call	_lcdInst
 11769                           
 11770                           ;Test.c: 89: printf("PUSH TO START");
 11771  00409C  0E0A               	movlw	low STR_71
 11772  00409E  0100               	movlb	0	; () banked
 11773  0040A0  6F8E               	movwf	printf@f& (0+255),b
 11774  0040A2  0EFF               	movlw	high STR_71
 11775  0040A4  0100               	movlb	0	; () banked
 11776  0040A6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11777  0040A8  EC08  F00B         	call	_printf	;wreg free
 11778                           
 11779                           ;Test.c: 90: _delay((unsigned long)((100)*(32000000/4000.0)));
 11780  0040AC  0E05               	movlw	5
 11781  0040AE  0100               	movlb	0	; () banked
 11782  0040B0  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 11783  0040B2  0E0F               	movlw	15
 11784  0040B4  0100               	movlb	0	; () banked
 11785  0040B6  6FAB               	movwf	??_algorithmTest& (0+255),b
 11786  0040B8  0EF1               	movlw	241
 11787  0040BA                     u9637:
 11788  0040BA  2EE8               	decfsz	wreg,f,c
 11789  0040BC  D7FE               	bra	u9637
 11790  0040BE  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11791  0040C0  D7FC               	bra	u9637
 11792  0040C2  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 11793  0040C4  D7FA               	bra	u9637
 11794  0040C6                     l1175:
 11795  0040C6  A281               	btfss	3969,1,c	;volatile
 11796  0040C8  D7FE               	goto	l1175
 11797  0040CA                     l1178:
 11798  0040CA  B281               	btfsc	3969,1,c	;volatile
 11799  0040CC  D7FE               	goto	l1178
 11800                           
 11801                           ;Test.c: 93: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11802  0040CE  0E01               	movlw	1
 11803  0040D0  ECF8  F029         	call	_lcdInst
 11804  0040D4  0E68               	movlw	104
 11805  0040D6  0100               	movlb	0	; () banked
 11806  0040D8  6FAB               	movwf	??_algorithmTest& (0+255),b
 11807  0040DA  0EE4               	movlw	228
 11808  0040DC                     u9647:
 11809  0040DC  2EE8               	decfsz	wreg,f,c
 11810  0040DE  D7FE               	bra	u9647
 11811  0040E0  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11812  0040E2  D7FC               	bra	u9647
 11813  0040E4  F000               	nop	
 11814  0040E6  0E80               	movlw	128
 11815  0040E8  ECF8  F029         	call	_lcdInst
 11816                           
 11817                           ;Test.c: 98: printf("ALG1: 9 POPNOTAB");
 11818  0040EC  0E4D               	movlw	low STR_72
 11819  0040EE  0100               	movlb	0	; () banked
 11820  0040F0  6F8E               	movwf	printf@f& (0+255),b
 11821  0040F2  0EFC               	movlw	high STR_72
 11822  0040F4  0100               	movlb	0	; () banked
 11823  0040F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11824  0040F8  EC08  F00B         	call	_printf	;wreg free
 11825                           
 11826                           ;Test.c: 105: printf("ALG2: 12 CANS");
 11827  0040FC  0EEE               	movlw	low STR_73
 11828  0040FE  0100               	movlb	0	; () banked
 11829  004100  6F8E               	movwf	printf@f& (0+255),b
 11830  004102  0EFE               	movlw	high STR_73
 11831  004104  0100               	movlb	0	; () banked
 11832  004106  6F8F               	movwf	(printf@f+1)& (0+255),b
 11833  004108  EC08  F00B         	call	_printf	;wreg free
 11834                           
 11835                           ;Test.c: 114: printf("ALG3: 1 CAN");
 11836  00410C  0E4E               	movlw	low STR_74
 11837  00410E  0100               	movlb	0	; () banked
 11838  004110  6F8E               	movwf	printf@f& (0+255),b
 11839  004112  0EFF               	movlw	high STR_74
 11840  004114  0100               	movlb	0	; () banked
 11841  004116  6F8F               	movwf	(printf@f+1)& (0+255),b
 11842  004118  EC08  F00B         	call	_printf	;wreg free
 11843                           
 11844                           ;Test.c: 120: printf("ALG4: ALL CANS");
 11845  00411C  0EB3               	movlw	low STR_75
 11846  00411E  0100               	movlb	0	; () banked
 11847  004120  6F8E               	movwf	printf@f& (0+255),b
 11848  004122  0EFE               	movlw	high STR_75
 11849  004124  0100               	movlb	0	; () banked
 11850  004126  6F8F               	movwf	(printf@f+1)& (0+255),b
 11851  004128  EC08  F00B         	call	_printf	;wreg free
 11852                           
 11853                           ;Test.c: 125: printf("ALG5: NO CANS");
 11854  00412C  0EFC               	movlw	low STR_76
 11855  00412E  0100               	movlb	0	; () banked
 11856  004130  6F8E               	movwf	printf@f& (0+255),b
 11857  004132  0EFE               	movlw	high STR_76
 11858  004134  0100               	movlb	0	; () banked
 11859  004136  6F8F               	movwf	(printf@f+1)& (0+255),b
 11860  004138  EC08  F00B         	call	_printf	;wreg free
 11861  00413C  0012               	return		;funcret
 11862  00413E                     __end_of_algorithmTest:
 11863                           	opt stack 0
 11864                           tblptru	equ	0xFF8
 11865                           tblptrh	equ	0xFF7
 11866                           tblptrl	equ	0xFF6
 11867                           tablat	equ	0xFF5
 11868                           prodh	equ	0xFF4
 11869                           prodl	equ	0xFF3
 11870                           intcon	equ	0xFF2
 11871                           intcon2	equ	0xFF1
 11872                           intcon3	equ	0xFF0
 11873                           postinc0	equ	0xFEE
 11874                           wreg	equ	0xFE8
 11875                           postdec1	equ	0xFE5
 11876                           fsr1l	equ	0xFE1
 11877                           indf2	equ	0xFDF
 11878                           postinc2	equ	0xFDE
 11879                           postdec2	equ	0xFDD
 11880                           fsr2h	equ	0xFDA
 11881                           fsr2l	equ	0xFD9
 11882                           status	equ	0xFD8
 11883                           
 11884 ;; *************** function _actuatorTest *****************
 11885 ;; Defined at:
 11886 ;;		line 207 in file "Test.c"
 11887 ;; Parameters:    Size  Location     Type
 11888 ;;		None
 11889 ;; Auto vars:     Size  Location     Type
 11890 ;;  i               1   45[BANK0 ] unsigned char 
 11891 ;;  i               1   67[BANK0 ] unsigned char 
 11892 ;;  i               1   66[BANK0 ] unsigned char 
 11893 ;;  i               1   65[BANK0 ] unsigned char 
 11894 ;;  i               1   64[BANK0 ] unsigned char 
 11895 ;;  i               1   63[BANK0 ] unsigned char 
 11896 ;;  i               1   62[BANK0 ] unsigned char 
 11897 ;;  i               1   61[BANK0 ] unsigned char 
 11898 ;;  i               1   60[BANK0 ] unsigned char 
 11899 ;;  i               1   59[BANK0 ] unsigned char 
 11900 ;;  i               1   58[BANK0 ] unsigned char 
 11901 ;;  i               1   57[BANK0 ] unsigned char 
 11902 ;;  i               1   56[BANK0 ] unsigned char 
 11903 ;;  i               1   55[BANK0 ] unsigned char 
 11904 ;;  i               1   54[BANK0 ] unsigned char 
 11905 ;;  i               1   53[BANK0 ] unsigned char 
 11906 ;;  i               1   52[BANK0 ] unsigned char 
 11907 ;;  i               1   51[BANK0 ] unsigned char 
 11908 ;;  i               1   50[BANK0 ] unsigned char 
 11909 ;;  i               1   49[BANK0 ] unsigned char 
 11910 ;;  i               1   48[BANK0 ] unsigned char 
 11911 ;;  i               1   47[BANK0 ] unsigned char 
 11912 ;;  i               1   46[BANK0 ] unsigned char 
 11913 ;;  i               2   68[BANK0 ] int 
 11914 ;; Return value:  Size  Location     Type
 11915 ;;                  1    wreg      void 
 11916 ;; Registers used:
 11917 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11918 ;; Tracked objects:
 11919 ;;		On entry : 0/0
 11920 ;;		On exit  : 0/0
 11921 ;;		Unchanged: 0/0
 11922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11924 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11925 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11926 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11927 ;;Total ram usage:       27 bytes
 11928 ;; Hardware stack levels used:    1
 11929 ;; Hardware stack levels required when called:   10
 11930 ;; This function calls:
 11931 ;;		_lcdInst
 11932 ;;		_printf
 11933 ;;		_updateServoPosition
 11934 ;; This function is called by:
 11935 ;;		_Test
 11936 ;; This function uses a non-reentrant model
 11937 ;;
 11938                           
 11939                           	psect	text41
 11940  000012                     __ptext41:
 11941                           	opt stack 0
 11942  000012                     _actuatorTest:
 11943                           	opt stack 19
 11944                           
 11945                           ;Test.c: 209: int i = 0;
 11946                           
 11947                           ;incstack = 0
 11948  000012  0E00               	movlw	0
 11949  000014  0100               	movlb	0	; () banked
 11950  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11951  000018  0E00               	movlw	0
 11952  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 11953                           
 11954                           ; BSR set to: 0
 11955                           ;Test.c: 211: (INTCONbits.GIE = 1);
 11956  00001C  8EF2               	bsf	intcon,7,c	;volatile
 11957                           
 11958                           ; BSR set to: 0
 11959                           ;Test.c: 212: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11960  00001E  0E01               	movlw	1
 11961  000020  ECF8  F029         	call	_lcdInst
 11962  000024  0E68               	movlw	104
 11963  000026  0100               	movlb	0	; () banked
 11964  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 11965  00002A  0EE4               	movlw	228
 11966  00002C                     u9657:
 11967  00002C  2EE8               	decfsz	wreg,f,c
 11968  00002E  D7FE               	bra	u9657
 11969  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11970  000032  D7FC               	bra	u9657
 11971  000034  F000               	nop	
 11972  000036  0E80               	movlw	128
 11973  000038  ECF8  F029         	call	_lcdInst
 11974                           
 11975                           ;Test.c: 213: printf("ACTUATORS");
 11976  00003C  0E90               	movlw	low STR_88
 11977  00003E  0100               	movlb	0	; () banked
 11978  000040  6F8E               	movwf	printf@f& (0+255),b
 11979  000042  0EFF               	movlw	high STR_88
 11980  000044  0100               	movlb	0	; () banked
 11981  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 11982  000048  EC08  F00B         	call	_printf	;wreg free
 11983                           
 11984                           ;Test.c: 214: lcdInst(0b11000000);;
 11985  00004C  0EC0               	movlw	192
 11986  00004E  ECF8  F029         	call	_lcdInst
 11987                           
 11988                           ;Test.c: 215: printf("PUSH TO START");
 11989  000052  0E0A               	movlw	low STR_71
 11990  000054  0100               	movlb	0	; () banked
 11991  000056  6F8E               	movwf	printf@f& (0+255),b
 11992  000058  0EFF               	movlw	high STR_71
 11993  00005A  0100               	movlb	0	; () banked
 11994  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11995  00005E  EC08  F00B         	call	_printf	;wreg free
 11996                           
 11997                           ;Test.c: 216: _delay((unsigned long)((100)*(32000000/4000.0)));
 11998  000062  0E05               	movlw	5
 11999  000064  0100               	movlb	0	; () banked
 12000  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12001  000068  0E0F               	movlw	15
 12002  00006A  0100               	movlb	0	; () banked
 12003  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12004  00006E  0EF1               	movlw	241
 12005  000070                     u9667:
 12006  000070  2EE8               	decfsz	wreg,f,c
 12007  000072  D7FE               	bra	u9667
 12008  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12009  000076  D7FC               	bra	u9667
 12010  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12011  00007A  D7FA               	bra	u9667
 12012  00007C                     l1210:
 12013  00007C  A281               	btfss	3969,1,c	;volatile
 12014  00007E  D7FE               	goto	l1210
 12015  000080                     l1213:
 12016  000080  B281               	btfsc	3969,1,c	;volatile
 12017  000082  D7FE               	goto	l1213
 12018                           
 12019                           ;Test.c: 219: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12020  000084  0E01               	movlw	1
 12021  000086  ECF8  F029         	call	_lcdInst
 12022  00008A  0E68               	movlw	104
 12023  00008C  0100               	movlb	0	; () banked
 12024  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12025  000090  0EE4               	movlw	228
 12026  000092                     u9677:
 12027  000092  2EE8               	decfsz	wreg,f,c
 12028  000094  D7FE               	bra	u9677
 12029  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12030  000098  D7FC               	bra	u9677
 12031  00009A  F000               	nop	
 12032  00009C  0E80               	movlw	128
 12033  00009E  ECF8  F029         	call	_lcdInst
 12034                           
 12035                           ;Test.c: 224: printf("TST: DC MOTORS");
 12036  0000A2  0EC2               	movlw	low STR_90
 12037  0000A4  0100               	movlb	0	; () banked
 12038  0000A6  6F8E               	movwf	printf@f& (0+255),b
 12039  0000A8  0EFE               	movlw	high STR_90
 12040  0000AA  0100               	movlb	0	; () banked
 12041  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12042  0000AE  EC08  F00B         	call	_printf	;wreg free
 12043                           
 12044                           ;Test.c: 225: lcdInst(0b11000000);;
 12045  0000B2  0EC0               	movlw	192
 12046  0000B4  ECF8  F029         	call	_lcdInst
 12047                           
 12048                           ;Test.c: 226: printf("PIN RA5 HIGH.");
 12049  0000B8  0EE0               	movlw	low STR_91
 12050  0000BA  0100               	movlb	0	; () banked
 12051  0000BC  6F8E               	movwf	printf@f& (0+255),b
 12052  0000BE  0EFE               	movlw	high STR_91
 12053  0000C0  0100               	movlb	0	; () banked
 12054  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12055  0000C4  EC08  F00B         	call	_printf	;wreg free
 12056                           
 12057                           ;Test.c: 227: LATBbits.LATB2 = 1;
 12058  0000C8  848A               	bsf	3978,2,c	;volatile
 12059                           
 12060                           ;Test.c: 228: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 12061  0000CA  0E00               	movlw	0
 12062  0000CC  0100               	movlb	0	; () banked
 12063  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12064  0000D0  0E00               	movlw	0
 12065  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 12066                           
 12067                           ; BSR set to: 0
 12068  0000D4  0100               	movlb	0	; () banked
 12069  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12070  0000D8  D008               	goto	l7785
 12071  0000DA  0100               	movlb	0	; () banked
 12072  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12073  0000DE  E123               	bnz	l1217
 12074  0000E0  0E05               	movlw	5
 12075  0000E2  0100               	movlb	0	; () banked
 12076  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12077  0000E6  B0D8               	btfsc	status,0,c
 12078  0000E8  D01E               	goto	l1217
 12079  0000EA                     l7785:
 12080                           
 12081                           ; BSR set to: 0
 12082  0000EA  0E00               	movlw	0
 12083  0000EC  0100               	movlb	0	; () banked
 12084  0000EE  6FAD               	movwf	actuatorTest@i_1739& (0+255),b
 12085  0000F0                     l7787:
 12086                           
 12087                           ; BSR set to: 0
 12088  0000F0  0E63               	movlw	99
 12089  0000F2  0100               	movlb	0	; () banked
 12090  0000F4  65AD               	cpfsgt	actuatorTest@i_1739& (0+255),b
 12091  0000F6  D001               	goto	l7791
 12092  0000F8  D00C               	goto	l7795
 12093  0000FA                     l7791:
 12094                           
 12095                           ; BSR set to: 0
 12096  0000FA  0E68               	movlw	104
 12097  0000FC  0100               	movlb	0	; () banked
 12098  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 12099  000100  0EE4               	movlw	228
 12100  000102                     u9687:
 12101  000102  2EE8               	decfsz	wreg,f,c
 12102  000104  D7FE               	bra	u9687
 12103  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12104  000108  D7FC               	bra	u9687
 12105  00010A  F000               	nop	
 12106  00010C  0100               	movlb	0	; () banked
 12107  00010E  2BAD               	incf	actuatorTest@i_1739& (0+255),f,b
 12108  000110  D7EF               	goto	l7787
 12109  000112                     l7795:
 12110                           
 12111                           ; BSR set to: 0
 12112  000112  0100               	movlb	0	; () banked
 12113  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12114  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12115                           
 12116                           ; BSR set to: 0
 12117  000118  0100               	movlb	0	; () banked
 12118  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12119  00011C  D7E6               	goto	l7785
 12120  00011E  0100               	movlb	0	; () banked
 12121  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12122  000122  E101               	bnz	u6370
 12123  000124  D7DD               	goto	L9
 12124  000126                     u6370:
 12125  000126                     l1217:
 12126                           
 12127                           ; BSR set to: 0
 12128                           ;Test.c: 229: LATBbits.LATB2 = 0;
 12129  000126  948A               	bcf	3978,2,c	;volatile
 12130                           
 12131                           ; BSR set to: 0
 12132                           ;Test.c: 230: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12133  000128  0E01               	movlw	1
 12134  00012A  ECF8  F029         	call	_lcdInst
 12135  00012E  0E68               	movlw	104
 12136  000130  0100               	movlb	0	; () banked
 12137  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 12138  000134  0EE4               	movlw	228
 12139  000136                     u9697:
 12140  000136  2EE8               	decfsz	wreg,f,c
 12141  000138  D7FE               	bra	u9697
 12142  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12143  00013C  D7FC               	bra	u9697
 12144  00013E  F000               	nop	
 12145  000140  0E80               	movlw	128
 12146  000142  ECF8  F029         	call	_lcdInst
 12147                           
 12148                           ;Test.c: 236: printf("TST: COND SOLN'D");
 12149  000146  0E5E               	movlw	low STR_92
 12150  000148  0100               	movlb	0	; () banked
 12151  00014A  6F8E               	movwf	printf@f& (0+255),b
 12152  00014C  0EFC               	movlw	high STR_92
 12153  00014E  0100               	movlb	0	; () banked
 12154  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 12155  000152  EC08  F00B         	call	_printf	;wreg free
 12156                           
 12157                           ;Test.c: 237: lcdInst(0b11000000);;
 12158  000156  0EC0               	movlw	192
 12159  000158  ECF8  F029         	call	_lcdInst
 12160                           
 12161                           ;Test.c: 238: printf("PIN RA3...");
 12162  00015C  0E5A               	movlw	low STR_93
 12163  00015E  0100               	movlb	0	; () banked
 12164  000160  6F8E               	movwf	printf@f& (0+255),b
 12165  000162  0EFF               	movlw	high STR_93
 12166  000164  0100               	movlb	0	; () banked
 12167  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 12168  000168  EC08  F00B         	call	_printf	;wreg free
 12169                           
 12170                           ;Test.c: 239: for(i=0;i<5;i++){
 12171  00016C  0E00               	movlw	0
 12172  00016E  0100               	movlb	0	; () banked
 12173  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12174  000172  0E00               	movlw	0
 12175  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 12176                           
 12177                           ; BSR set to: 0
 12178  000176  0100               	movlb	0	; () banked
 12179  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12180  00017A  D008               	goto	l1220
 12181  00017C  0100               	movlb	0	; () banked
 12182  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12183  000180  E12C               	bnz	l1221
 12184  000182  0E05               	movlw	5
 12185  000184  0100               	movlb	0	; () banked
 12186  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12187  000188  B0D8               	btfsc	status,0,c
 12188  00018A  D027               	goto	l1221
 12189  00018C                     l1220:
 12190                           
 12191                           ; BSR set to: 0
 12192                           ;Test.c: 240: LATAbits.LATA3 = 1;
 12193  00018C  8689               	bsf	3977,3,c	;volatile
 12194                           
 12195                           ; BSR set to: 0
 12196                           ;Test.c: 241: _delay((unsigned long)((300)*(32000000/4000.0)));
 12197  00018E  0E0D               	movlw	13
 12198  000190  0100               	movlb	0	; () banked
 12199  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12200  000194  0E2D               	movlw	45
 12201  000196  0100               	movlb	0	; () banked
 12202  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 12203  00019A  0ED7               	movlw	215
 12204  00019C                     u9707:
 12205  00019C  2EE8               	decfsz	wreg,f,c
 12206  00019E  D7FE               	bra	u9707
 12207  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12208  0001A2  D7FC               	bra	u9707
 12209  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12210  0001A6  D7FA               	bra	u9707
 12211  0001A8  D000               	nop2	
 12212                           
 12213                           ;Test.c: 242: LATAbits.LATA3 = !1;
 12214  0001AA  9689               	bcf	3977,3,c	;volatile
 12215                           
 12216                           ;Test.c: 243: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 12217  0001AC  0E1D               	movlw	29
 12218  0001AE  0100               	movlb	0	; () banked
 12219  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12220  0001B2  0E69               	movlw	105
 12221  0001B4  0100               	movlb	0	; () banked
 12222  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 12223  0001B8  0EA5               	movlw	165
 12224  0001BA                     u9717:
 12225  0001BA  2EE8               	decfsz	wreg,f,c
 12226  0001BC  D7FE               	bra	u9717
 12227  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12228  0001C0  D7FC               	bra	u9717
 12229  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12230  0001C4  D7FA               	bra	u9717
 12231  0001C6  0100               	movlb	0	; () banked
 12232  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12233  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12234  0001CC  0100               	movlb	0	; () banked
 12235  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12236  0001D0  D7DD               	goto	l1220
 12237  0001D2  0100               	movlb	0	; () banked
 12238  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12239  0001D6  E101               	bnz	u6390
 12240  0001D8  D7D4               	goto	L10
 12241  0001DA                     u6390:
 12242  0001DA                     l1221:
 12243                           
 12244                           ; BSR set to: 0
 12245                           ;Test.c: 244: }
 12246                           ;Test.c: 245: LATAbits.LATA3 = !1;
 12247  0001DA  9689               	bcf	3977,3,c	;volatile
 12248                           
 12249                           ; BSR set to: 0
 12250                           ;Test.c: 246: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12251  0001DC  0E01               	movlw	1
 12252  0001DE  ECF8  F029         	call	_lcdInst
 12253  0001E2  0E68               	movlw	104
 12254  0001E4  0100               	movlb	0	; () banked
 12255  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 12256  0001E8  0EE4               	movlw	228
 12257  0001EA                     u9727:
 12258  0001EA  2EE8               	decfsz	wreg,f,c
 12259  0001EC  D7FE               	bra	u9727
 12260  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12261  0001F0  D7FC               	bra	u9727
 12262  0001F2  F000               	nop	
 12263  0001F4  0E80               	movlw	128
 12264  0001F6  ECF8  F029         	call	_lcdInst
 12265                           
 12266                           ;Test.c: 252: printf("TST: PUSH SOLN'D");
 12267  0001FA  0E6F               	movlw	low STR_94
 12268  0001FC  0100               	movlb	0	; () banked
 12269  0001FE  6F8E               	movwf	printf@f& (0+255),b
 12270  000200  0EFC               	movlw	high STR_94
 12271  000202  0100               	movlb	0	; () banked
 12272  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 12273  000206  EC08  F00B         	call	_printf	;wreg free
 12274                           
 12275                           ;Test.c: 253: lcdInst(0b11000000);;
 12276  00020A  0EC0               	movlw	192
 12277  00020C  ECF8  F029         	call	_lcdInst
 12278                           
 12279                           ;Test.c: 254: printf("PIN RA4...");
 12280  000210  0E65               	movlw	low STR_95
 12281  000212  0100               	movlb	0	; () banked
 12282  000214  6F8E               	movwf	printf@f& (0+255),b
 12283  000216  0EFF               	movlw	high STR_95
 12284  000218  0100               	movlb	0	; () banked
 12285  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12286  00021C  EC08  F00B         	call	_printf	;wreg free
 12287                           
 12288                           ;Test.c: 255: for(i=0;i<5;i++){
 12289  000220  0E00               	movlw	0
 12290  000222  0100               	movlb	0	; () banked
 12291  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12292  000226  0E00               	movlw	0
 12293  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 12294                           
 12295                           ; BSR set to: 0
 12296  00022A  0100               	movlb	0	; () banked
 12297  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12298  00022E  D008               	goto	l1222
 12299  000230  0100               	movlb	0	; () banked
 12300  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12301  000234  E12C               	bnz	l1223
 12302  000236  0E05               	movlw	5
 12303  000238  0100               	movlb	0	; () banked
 12304  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12305  00023C  B0D8               	btfsc	status,0,c
 12306  00023E  D027               	goto	l1223
 12307  000240                     l1222:
 12308                           
 12309                           ; BSR set to: 0
 12310                           ;Test.c: 256: LATAbits.LATA4 = 1;
 12311  000240  8889               	bsf	3977,4,c	;volatile
 12312                           
 12313                           ; BSR set to: 0
 12314                           ;Test.c: 257: _delay((unsigned long)((300)*(32000000/4000.0)));
 12315  000242  0E0D               	movlw	13
 12316  000244  0100               	movlb	0	; () banked
 12317  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12318  000248  0E2D               	movlw	45
 12319  00024A  0100               	movlb	0	; () banked
 12320  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12321  00024E  0ED7               	movlw	215
 12322  000250                     u9737:
 12323  000250  2EE8               	decfsz	wreg,f,c
 12324  000252  D7FE               	bra	u9737
 12325  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12326  000256  D7FC               	bra	u9737
 12327  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12328  00025A  D7FA               	bra	u9737
 12329  00025C  D000               	nop2	
 12330                           
 12331                           ;Test.c: 258: LATAbits.LATA4 = !1;
 12332  00025E  9889               	bcf	3977,4,c	;volatile
 12333                           
 12334                           ;Test.c: 259: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 12335  000260  0E1D               	movlw	29
 12336  000262  0100               	movlb	0	; () banked
 12337  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12338  000266  0E69               	movlw	105
 12339  000268  0100               	movlb	0	; () banked
 12340  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 12341  00026C  0EA5               	movlw	165
 12342  00026E                     u9747:
 12343  00026E  2EE8               	decfsz	wreg,f,c
 12344  000270  D7FE               	bra	u9747
 12345  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12346  000274  D7FC               	bra	u9747
 12347  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12348  000278  D7FA               	bra	u9747
 12349  00027A  0100               	movlb	0	; () banked
 12350  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12351  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12352  000280  0100               	movlb	0	; () banked
 12353  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12354  000284  D7DD               	goto	l1222
 12355  000286  0100               	movlb	0	; () banked
 12356  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12357  00028A  E101               	bnz	u6410
 12358  00028C  D7D4               	goto	L11
 12359  00028E                     u6410:
 12360  00028E                     l1223:
 12361                           
 12362                           ; BSR set to: 0
 12363                           ;Test.c: 260: }
 12364                           ;Test.c: 261: LATAbits.LATA4 = !1;
 12365  00028E  9889               	bcf	3977,4,c	;volatile
 12366                           
 12367                           ; BSR set to: 0
 12368                           ;Test.c: 262: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12369  000290  0E01               	movlw	1
 12370  000292  ECF8  F029         	call	_lcdInst
 12371  000296  0E68               	movlw	104
 12372  000298  0100               	movlb	0	; () banked
 12373  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 12374  00029C  0EE4               	movlw	228
 12375  00029E                     u9757:
 12376  00029E  2EE8               	decfsz	wreg,f,c
 12377  0002A0  D7FE               	bra	u9757
 12378  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12379  0002A4  D7FC               	bra	u9757
 12380  0002A6  F000               	nop	
 12381  0002A8  0E80               	movlw	128
 12382  0002AA  ECF8  F029         	call	_lcdInst
 12383                           
 12384                           ;Test.c: 265: machine_state = Sorting_state;
 12385  0002AE  0E01               	movlw	1
 12386  0002B0  0100               	movlb	0	; () banked
 12387  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 12388                           
 12389                           ; BSR set to: 0
 12390                           ;Test.c: 266: was_low_1 = 0;
 12391  0002B4  0E00               	movlw	0
 12392  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 12393  0002B8  0E00               	movlw	0
 12394  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 12395                           
 12396                           ; BSR set to: 0
 12397                           ;Test.c: 267: was_low_1 = 0;
 12398  0002BC  0E00               	movlw	0
 12399  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 12400  0002C0  0E00               	movlw	0
 12401  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 12402                           
 12403                           ; BSR set to: 0
 12404                           ;Test.c: 274: printf("TST: PAN SERVO");
 12405  0002C4  0EA4               	movlw	low STR_96
 12406  0002C6  0100               	movlb	0	; () banked
 12407  0002C8  6F8E               	movwf	printf@f& (0+255),b
 12408  0002CA  0EFE               	movlw	high STR_96
 12409  0002CC  0100               	movlb	0	; () banked
 12410  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12411  0002D0  EC08  F00B         	call	_printf	;wreg free
 12412                           
 12413                           ;Test.c: 275: lcdInst(0b11000000);;
 12414  0002D4  0EC0               	movlw	192
 12415  0002D6  ECF8  F029         	call	_lcdInst
 12416                           
 12417                           ;Test.c: 276: printf("MIDDLE -- 2s    ");
 12418  0002DA  0EF8               	movlw	low STR_97
 12419  0002DC  0100               	movlb	0	; () banked
 12420  0002DE  6F8E               	movwf	printf@f& (0+255),b
 12421  0002E0  0EFB               	movlw	high STR_97
 12422  0002E2  0100               	movlb	0	; () banked
 12423  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12424  0002E6  EC08  F00B         	call	_printf	;wreg free
 12425                           
 12426                           ;Test.c: 277: updateServoPosition(1200, 1);
 12427  0002EA  0E04               	movlw	4
 12428  0002EC  0100               	movlb	0	; () banked
 12429  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12430  0002F0  0EB0               	movlw	176
 12431  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12432  0002F4  0E00               	movlw	0
 12433  0002F6  0100               	movlb	0	; () banked
 12434  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12435  0002FA  0E01               	movlw	1
 12436  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12437  0002FE  EC43  F023         	call	_updateServoPosition	;wreg free
 12438                           
 12439                           ;Test.c: 278: TMR1ON = 1;
 12440  000302  80CD               	bsf	4045,0,c	;volatile
 12441                           
 12442                           ;Test.c: 279: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12443  000304  0E00               	movlw	0
 12444  000306  0100               	movlb	0	; () banked
 12445  000308  6FAE               	movwf	actuatorTest@i_1746& (0+255),b
 12446  00030A                     l7871:
 12447                           
 12448                           ; BSR set to: 0
 12449  00030A  0E63               	movlw	99
 12450  00030C  0100               	movlb	0	; () banked
 12451  00030E  65AE               	cpfsgt	actuatorTest@i_1746& (0+255),b
 12452  000310  D001               	goto	l7875
 12453  000312  D00C               	goto	l7879
 12454  000314                     l7875:
 12455                           
 12456                           ; BSR set to: 0
 12457  000314  0E68               	movlw	104
 12458  000316  0100               	movlb	0	; () banked
 12459  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 12460  00031A  0EE4               	movlw	228
 12461  00031C                     u9767:
 12462  00031C  2EE8               	decfsz	wreg,f,c
 12463  00031E  D7FE               	bra	u9767
 12464  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12465  000322  D7FC               	bra	u9767
 12466  000324  F000               	nop	
 12467  000326  0100               	movlb	0	; () banked
 12468  000328  2BAE               	incf	actuatorTest@i_1746& (0+255),f,b
 12469  00032A  D7EF               	goto	l7871
 12470  00032C                     l7879:
 12471                           
 12472                           ; BSR set to: 0
 12473  00032C  0E00               	movlw	0
 12474  00032E  0100               	movlb	0	; () banked
 12475  000330  6FAF               	movwf	actuatorTest@i_1747& (0+255),b
 12476  000332                     l7881:
 12477                           
 12478                           ; BSR set to: 0
 12479  000332  0E63               	movlw	99
 12480  000334  0100               	movlb	0	; () banked
 12481  000336  65AF               	cpfsgt	actuatorTest@i_1747& (0+255),b
 12482  000338  D001               	goto	l7885
 12483  00033A  D00C               	goto	l7889
 12484  00033C                     l7885:
 12485                           
 12486                           ; BSR set to: 0
 12487  00033C  0E68               	movlw	104
 12488  00033E  0100               	movlb	0	; () banked
 12489  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 12490  000342  0EE4               	movlw	228
 12491  000344                     u9777:
 12492  000344  2EE8               	decfsz	wreg,f,c
 12493  000346  D7FE               	bra	u9777
 12494  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12495  00034A  D7FC               	bra	u9777
 12496  00034C  F000               	nop	
 12497  00034E  0100               	movlb	0	; () banked
 12498  000350  2BAF               	incf	actuatorTest@i_1747& (0+255),f,b
 12499  000352  D7EF               	goto	l7881
 12500  000354                     l7889:
 12501                           
 12502                           ; BSR set to: 0
 12503                           ;Test.c: 281: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12504  000354  0E80               	movlw	128
 12505  000356  ECF8  F029         	call	_lcdInst
 12506  00035A  0EC0               	movlw	192
 12507  00035C  ECF8  F029         	call	_lcdInst
 12508                           
 12509                           ;Test.c: 282: printf("RIGHT -- 2s     ");
 12510  000360  0EE7               	movlw	low STR_98
 12511  000362  0100               	movlb	0	; () banked
 12512  000364  6F8E               	movwf	printf@f& (0+255),b
 12513  000366  0EFB               	movlw	high STR_98
 12514  000368  0100               	movlb	0	; () banked
 12515  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12516  00036C  EC08  F00B         	call	_printf	;wreg free
 12517                           
 12518                           ;Test.c: 283: updateServoPosition(500, 1);
 12519  000370  0E01               	movlw	1
 12520  000372  0100               	movlb	0	; () banked
 12521  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12522  000376  0EF4               	movlw	244
 12523  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12524  00037A  0E00               	movlw	0
 12525  00037C  0100               	movlb	0	; () banked
 12526  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12527  000380  0E01               	movlw	1
 12528  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12529  000384  EC43  F023         	call	_updateServoPosition	;wreg free
 12530                           
 12531                           ;Test.c: 284: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12532  000388  0E00               	movlw	0
 12533  00038A  0100               	movlb	0	; () banked
 12534  00038C  6FB0               	movwf	actuatorTest@i_1749& (0+255),b
 12535  00038E                     l7897:
 12536                           
 12537                           ; BSR set to: 0
 12538  00038E  0E63               	movlw	99
 12539  000390  0100               	movlb	0	; () banked
 12540  000392  65B0               	cpfsgt	actuatorTest@i_1749& (0+255),b
 12541  000394  D001               	goto	l7901
 12542  000396  D00C               	goto	l7905
 12543  000398                     l7901:
 12544                           
 12545                           ; BSR set to: 0
 12546  000398  0E68               	movlw	104
 12547  00039A  0100               	movlb	0	; () banked
 12548  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12549  00039E  0EE4               	movlw	228
 12550  0003A0                     u9787:
 12551  0003A0  2EE8               	decfsz	wreg,f,c
 12552  0003A2  D7FE               	bra	u9787
 12553  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12554  0003A6  D7FC               	bra	u9787
 12555  0003A8  F000               	nop	
 12556  0003AA  0100               	movlb	0	; () banked
 12557  0003AC  2BB0               	incf	actuatorTest@i_1749& (0+255),f,b
 12558  0003AE  D7EF               	goto	l7897
 12559  0003B0                     l7905:
 12560                           
 12561                           ; BSR set to: 0
 12562  0003B0  0E00               	movlw	0
 12563  0003B2  0100               	movlb	0	; () banked
 12564  0003B4  6FB1               	movwf	actuatorTest@i_1750& (0+255),b
 12565  0003B6                     l7907:
 12566                           
 12567                           ; BSR set to: 0
 12568  0003B6  0E63               	movlw	99
 12569  0003B8  0100               	movlb	0	; () banked
 12570  0003BA  65B1               	cpfsgt	actuatorTest@i_1750& (0+255),b
 12571  0003BC  D001               	goto	l7911
 12572  0003BE  D00C               	goto	l7915
 12573  0003C0                     l7911:
 12574                           
 12575                           ; BSR set to: 0
 12576  0003C0  0E68               	movlw	104
 12577  0003C2  0100               	movlb	0	; () banked
 12578  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12579  0003C6  0EE4               	movlw	228
 12580  0003C8                     u9797:
 12581  0003C8  2EE8               	decfsz	wreg,f,c
 12582  0003CA  D7FE               	bra	u9797
 12583  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12584  0003CE  D7FC               	bra	u9797
 12585  0003D0  F000               	nop	
 12586  0003D2  0100               	movlb	0	; () banked
 12587  0003D4  2BB1               	incf	actuatorTest@i_1750& (0+255),f,b
 12588  0003D6  D7EF               	goto	l7907
 12589  0003D8                     l7915:
 12590                           
 12591                           ; BSR set to: 0
 12592                           ;Test.c: 286: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12593  0003D8  0E80               	movlw	128
 12594  0003DA  ECF8  F029         	call	_lcdInst
 12595  0003DE  0EC0               	movlw	192
 12596  0003E0  ECF8  F029         	call	_lcdInst
 12597                           
 12598                           ;Test.c: 287: printf("LEFT -- 2s      ");
 12599  0003E4  0EC5               	movlw	low STR_99
 12600  0003E6  0100               	movlb	0	; () banked
 12601  0003E8  6F8E               	movwf	printf@f& (0+255),b
 12602  0003EA  0EFB               	movlw	high STR_99
 12603  0003EC  0100               	movlb	0	; () banked
 12604  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12605  0003F0  EC08  F00B         	call	_printf	;wreg free
 12606                           
 12607                           ;Test.c: 288: updateServoPosition(2400, 1);
 12608  0003F4  0E09               	movlw	9
 12609  0003F6  0100               	movlb	0	; () banked
 12610  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12611  0003FA  0E60               	movlw	96
 12612  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12613  0003FE  0E00               	movlw	0
 12614  000400  0100               	movlb	0	; () banked
 12615  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12616  000404  0E01               	movlw	1
 12617  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12618  000408  EC43  F023         	call	_updateServoPosition	;wreg free
 12619                           
 12620                           ;Test.c: 289: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12621  00040C  0E00               	movlw	0
 12622  00040E  0100               	movlb	0	; () banked
 12623  000410  6FB2               	movwf	actuatorTest@i_1752& (0+255),b
 12624  000412                     l7923:
 12625                           
 12626                           ; BSR set to: 0
 12627  000412  0E63               	movlw	99
 12628  000414  0100               	movlb	0	; () banked
 12629  000416  65B2               	cpfsgt	actuatorTest@i_1752& (0+255),b
 12630  000418  D001               	goto	l7927
 12631  00041A  D00C               	goto	l7931
 12632  00041C                     l7927:
 12633                           
 12634                           ; BSR set to: 0
 12635  00041C  0E68               	movlw	104
 12636  00041E  0100               	movlb	0	; () banked
 12637  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 12638  000422  0EE4               	movlw	228
 12639  000424                     u9807:
 12640  000424  2EE8               	decfsz	wreg,f,c
 12641  000426  D7FE               	bra	u9807
 12642  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12643  00042A  D7FC               	bra	u9807
 12644  00042C  F000               	nop	
 12645  00042E  0100               	movlb	0	; () banked
 12646  000430  2BB2               	incf	actuatorTest@i_1752& (0+255),f,b
 12647  000432  D7EF               	goto	l7923
 12648  000434                     l7931:
 12649                           
 12650                           ; BSR set to: 0
 12651  000434  0E00               	movlw	0
 12652  000436  0100               	movlb	0	; () banked
 12653  000438  6FB3               	movwf	actuatorTest@i_1753& (0+255),b
 12654  00043A                     l7933:
 12655                           
 12656                           ; BSR set to: 0
 12657  00043A  0E63               	movlw	99
 12658  00043C  0100               	movlb	0	; () banked
 12659  00043E  65B3               	cpfsgt	actuatorTest@i_1753& (0+255),b
 12660  000440  D001               	goto	l7937
 12661  000442  D00C               	goto	l7941
 12662  000444                     l7937:
 12663                           
 12664                           ; BSR set to: 0
 12665  000444  0E68               	movlw	104
 12666  000446  0100               	movlb	0	; () banked
 12667  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 12668  00044A  0EE4               	movlw	228
 12669  00044C                     u9817:
 12670  00044C  2EE8               	decfsz	wreg,f,c
 12671  00044E  D7FE               	bra	u9817
 12672  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12673  000452  D7FC               	bra	u9817
 12674  000454  F000               	nop	
 12675  000456  0100               	movlb	0	; () banked
 12676  000458  2BB3               	incf	actuatorTest@i_1753& (0+255),f,b
 12677  00045A  D7EF               	goto	l7933
 12678  00045C                     l7941:
 12679                           
 12680                           ; BSR set to: 0
 12681                           ;Test.c: 291: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12682  00045C  0E80               	movlw	128
 12683  00045E  ECF8  F029         	call	_lcdInst
 12684  000462  0EC0               	movlw	192
 12685  000464  ECF8  F029         	call	_lcdInst
 12686                           
 12687                           ;Test.c: 292: printf("MID-LEFT -- 2s  ");
 12688  000468  0E1A               	movlw	low STR_100
 12689  00046A  0100               	movlb	0	; () banked
 12690  00046C  6F8E               	movwf	printf@f& (0+255),b
 12691  00046E  0EFC               	movlw	high STR_100
 12692  000470  0100               	movlb	0	; () banked
 12693  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 12694  000474  EC08  F00B         	call	_printf	;wreg free
 12695                           
 12696                           ;Test.c: 293: updateServoPosition(1670, 1);
 12697  000478  0E06               	movlw	6
 12698  00047A  0100               	movlb	0	; () banked
 12699  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12700  00047E  0E86               	movlw	134
 12701  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12702  000482  0E00               	movlw	0
 12703  000484  0100               	movlb	0	; () banked
 12704  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12705  000488  0E01               	movlw	1
 12706  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12707  00048C  EC43  F023         	call	_updateServoPosition	;wreg free
 12708                           
 12709                           ;Test.c: 294: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12710  000490  0E00               	movlw	0
 12711  000492  0100               	movlb	0	; () banked
 12712  000494  6FB4               	movwf	actuatorTest@i_1755& (0+255),b
 12713  000496                     l7949:
 12714                           
 12715                           ; BSR set to: 0
 12716  000496  0E63               	movlw	99
 12717  000498  0100               	movlb	0	; () banked
 12718  00049A  65B4               	cpfsgt	actuatorTest@i_1755& (0+255),b
 12719  00049C  D001               	goto	l7953
 12720  00049E  D00C               	goto	l7957
 12721  0004A0                     l7953:
 12722                           
 12723                           ; BSR set to: 0
 12724  0004A0  0E68               	movlw	104
 12725  0004A2  0100               	movlb	0	; () banked
 12726  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12727  0004A6  0EE4               	movlw	228
 12728  0004A8                     u9827:
 12729  0004A8  2EE8               	decfsz	wreg,f,c
 12730  0004AA  D7FE               	bra	u9827
 12731  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12732  0004AE  D7FC               	bra	u9827
 12733  0004B0  F000               	nop	
 12734  0004B2  0100               	movlb	0	; () banked
 12735  0004B4  2BB4               	incf	actuatorTest@i_1755& (0+255),f,b
 12736  0004B6  D7EF               	goto	l7949
 12737  0004B8                     l7957:
 12738                           
 12739                           ; BSR set to: 0
 12740  0004B8  0E00               	movlw	0
 12741  0004BA  0100               	movlb	0	; () banked
 12742  0004BC  6FB5               	movwf	actuatorTest@i_1756& (0+255),b
 12743  0004BE                     l7959:
 12744                           
 12745                           ; BSR set to: 0
 12746  0004BE  0E63               	movlw	99
 12747  0004C0  0100               	movlb	0	; () banked
 12748  0004C2  65B5               	cpfsgt	actuatorTest@i_1756& (0+255),b
 12749  0004C4  D001               	goto	l7963
 12750  0004C6  D00C               	goto	l7967
 12751  0004C8                     l7963:
 12752                           
 12753                           ; BSR set to: 0
 12754  0004C8  0E68               	movlw	104
 12755  0004CA  0100               	movlb	0	; () banked
 12756  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12757  0004CE  0EE4               	movlw	228
 12758  0004D0                     u9837:
 12759  0004D0  2EE8               	decfsz	wreg,f,c
 12760  0004D2  D7FE               	bra	u9837
 12761  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12762  0004D6  D7FC               	bra	u9837
 12763  0004D8  F000               	nop	
 12764  0004DA  0100               	movlb	0	; () banked
 12765  0004DC  2BB5               	incf	actuatorTest@i_1756& (0+255),f,b
 12766  0004DE  D7EF               	goto	l7959
 12767  0004E0                     l7967:
 12768                           
 12769                           ; BSR set to: 0
 12770                           ;Test.c: 296: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12771  0004E0  0E80               	movlw	128
 12772  0004E2  ECF8  F029         	call	_lcdInst
 12773  0004E6  0EC0               	movlw	192
 12774  0004E8  ECF8  F029         	call	_lcdInst
 12775                           
 12776                           ;Test.c: 297: printf("MID-RIGHT -- 2s ");
 12777  0004EC  0E2B               	movlw	low STR_101
 12778  0004EE  0100               	movlb	0	; () banked
 12779  0004F0  6F8E               	movwf	printf@f& (0+255),b
 12780  0004F2  0EFC               	movlw	high STR_101
 12781  0004F4  0100               	movlb	0	; () banked
 12782  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12783  0004F8  EC08  F00B         	call	_printf	;wreg free
 12784                           
 12785                           ;Test.c: 298: updateServoPosition(850, 1);
 12786  0004FC  0E03               	movlw	3
 12787  0004FE  0100               	movlb	0	; () banked
 12788  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12789  000502  0E52               	movlw	82
 12790  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12791  000506  0E00               	movlw	0
 12792  000508  0100               	movlb	0	; () banked
 12793  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12794  00050C  0E01               	movlw	1
 12795  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12796  000510  EC43  F023         	call	_updateServoPosition	;wreg free
 12797                           
 12798                           ;Test.c: 299: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12799  000514  0E00               	movlw	0
 12800  000516  0100               	movlb	0	; () banked
 12801  000518  6FB6               	movwf	actuatorTest@i_1758& (0+255),b
 12802  00051A                     l7975:
 12803                           
 12804                           ; BSR set to: 0
 12805  00051A  0E63               	movlw	99
 12806  00051C  0100               	movlb	0	; () banked
 12807  00051E  65B6               	cpfsgt	actuatorTest@i_1758& (0+255),b
 12808  000520  D001               	goto	l7979
 12809  000522  D00C               	goto	l7983
 12810  000524                     l7979:
 12811                           
 12812                           ; BSR set to: 0
 12813  000524  0E68               	movlw	104
 12814  000526  0100               	movlb	0	; () banked
 12815  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 12816  00052A  0EE4               	movlw	228
 12817  00052C                     u9847:
 12818  00052C  2EE8               	decfsz	wreg,f,c
 12819  00052E  D7FE               	bra	u9847
 12820  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12821  000532  D7FC               	bra	u9847
 12822  000534  F000               	nop	
 12823  000536  0100               	movlb	0	; () banked
 12824  000538  2BB6               	incf	actuatorTest@i_1758& (0+255),f,b
 12825  00053A  D7EF               	goto	l7975
 12826  00053C                     l7983:
 12827                           
 12828                           ; BSR set to: 0
 12829  00053C  0E00               	movlw	0
 12830  00053E  0100               	movlb	0	; () banked
 12831  000540  6FB7               	movwf	actuatorTest@i_1759& (0+255),b
 12832  000542                     l7985:
 12833                           
 12834                           ; BSR set to: 0
 12835  000542  0E63               	movlw	99
 12836  000544  0100               	movlb	0	; () banked
 12837  000546  65B7               	cpfsgt	actuatorTest@i_1759& (0+255),b
 12838  000548  D001               	goto	l7989
 12839  00054A  D00C               	goto	l7993
 12840  00054C                     l7989:
 12841                           
 12842                           ; BSR set to: 0
 12843  00054C  0E68               	movlw	104
 12844  00054E  0100               	movlb	0	; () banked
 12845  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 12846  000552  0EE4               	movlw	228
 12847  000554                     u9857:
 12848  000554  2EE8               	decfsz	wreg,f,c
 12849  000556  D7FE               	bra	u9857
 12850  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12851  00055A  D7FC               	bra	u9857
 12852  00055C  F000               	nop	
 12853  00055E  0100               	movlb	0	; () banked
 12854  000560  2BB7               	incf	actuatorTest@i_1759& (0+255),f,b
 12855  000562  D7EF               	goto	l7985
 12856  000564                     l7993:
 12857                           
 12858                           ; BSR set to: 0
 12859                           ;Test.c: 301: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12860  000564  0E80               	movlw	128
 12861  000566  ECF8  F029         	call	_lcdInst
 12862  00056A  0EC0               	movlw	192
 12863  00056C  ECF8  F029         	call	_lcdInst
 12864                           
 12865                           ;Test.c: 302: printf("MID -- 2s       ");
 12866  000570  0EA3               	movlw	low STR_102
 12867  000572  0100               	movlb	0	; () banked
 12868  000574  6F8E               	movwf	printf@f& (0+255),b
 12869  000576  0EFB               	movlw	high STR_102
 12870  000578  0100               	movlb	0	; () banked
 12871  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12872  00057C  EC08  F00B         	call	_printf	;wreg free
 12873                           
 12874                           ;Test.c: 303: updateServoPosition(1200, 1);
 12875  000580  0E04               	movlw	4
 12876  000582  0100               	movlb	0	; () banked
 12877  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12878  000586  0EB0               	movlw	176
 12879  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12880  00058A  0E00               	movlw	0
 12881  00058C  0100               	movlb	0	; () banked
 12882  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12883  000590  0E01               	movlw	1
 12884  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12885  000594  EC43  F023         	call	_updateServoPosition	;wreg free
 12886                           
 12887                           ;Test.c: 304: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12888  000598  0E00               	movlw	0
 12889  00059A  0100               	movlb	0	; () banked
 12890  00059C  6FB8               	movwf	actuatorTest@i_1761& (0+255),b
 12891  00059E                     l8001:
 12892                           
 12893                           ; BSR set to: 0
 12894  00059E  0E63               	movlw	99
 12895  0005A0  0100               	movlb	0	; () banked
 12896  0005A2  65B8               	cpfsgt	actuatorTest@i_1761& (0+255),b
 12897  0005A4  D001               	goto	l8005
 12898  0005A6  D00C               	goto	l8009
 12899  0005A8                     l8005:
 12900                           
 12901                           ; BSR set to: 0
 12902  0005A8  0E68               	movlw	104
 12903  0005AA  0100               	movlb	0	; () banked
 12904  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12905  0005AE  0EE4               	movlw	228
 12906  0005B0                     u9867:
 12907  0005B0  2EE8               	decfsz	wreg,f,c
 12908  0005B2  D7FE               	bra	u9867
 12909  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12910  0005B6  D7FC               	bra	u9867
 12911  0005B8  F000               	nop	
 12912  0005BA  0100               	movlb	0	; () banked
 12913  0005BC  2BB8               	incf	actuatorTest@i_1761& (0+255),f,b
 12914  0005BE  D7EF               	goto	l8001
 12915  0005C0                     l8009:
 12916                           
 12917                           ; BSR set to: 0
 12918  0005C0  0E00               	movlw	0
 12919  0005C2  0100               	movlb	0	; () banked
 12920  0005C4  6FB9               	movwf	actuatorTest@i_1762& (0+255),b
 12921  0005C6                     l8011:
 12922                           
 12923                           ; BSR set to: 0
 12924  0005C6  0E63               	movlw	99
 12925  0005C8  0100               	movlb	0	; () banked
 12926  0005CA  65B9               	cpfsgt	actuatorTest@i_1762& (0+255),b
 12927  0005CC  D001               	goto	l8015
 12928  0005CE  D00C               	goto	l1247
 12929  0005D0                     l8015:
 12930                           
 12931                           ; BSR set to: 0
 12932  0005D0  0E68               	movlw	104
 12933  0005D2  0100               	movlb	0	; () banked
 12934  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12935  0005D6  0EE4               	movlw	228
 12936  0005D8                     u9877:
 12937  0005D8  2EE8               	decfsz	wreg,f,c
 12938  0005DA  D7FE               	bra	u9877
 12939  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12940  0005DE  D7FC               	bra	u9877
 12941  0005E0  F000               	nop	
 12942  0005E2  0100               	movlb	0	; () banked
 12943  0005E4  2BB9               	incf	actuatorTest@i_1762& (0+255),f,b
 12944  0005E6  D7EF               	goto	l8011
 12945  0005E8                     l1247:
 12946                           
 12947                           ; BSR set to: 0
 12948                           ;Test.c: 305: TMR1ON = 0;
 12949  0005E8  90CD               	bcf	4045,0,c	;volatile
 12950                           
 12951                           ; BSR set to: 0
 12952                           ;Test.c: 312: printf("TST: TILT SERVO");
 12953  0005EA  0E39               	movlw	low STR_103
 12954  0005EC  0100               	movlb	0	; () banked
 12955  0005EE  6F8E               	movwf	printf@f& (0+255),b
 12956  0005F0  0EFE               	movlw	high STR_103
 12957  0005F2  0100               	movlb	0	; () banked
 12958  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12959  0005F6  EC08  F00B         	call	_printf	;wreg free
 12960                           
 12961                           ;Test.c: 313: lcdInst(0b11000000);;
 12962  0005FA  0EC0               	movlw	192
 12963  0005FC  ECF8  F029         	call	_lcdInst
 12964                           
 12965                           ;Test.c: 314: printf("LEVEL -- 2s     ");
 12966  000600  0ED6               	movlw	low STR_104
 12967  000602  0100               	movlb	0	; () banked
 12968  000604  6F8E               	movwf	printf@f& (0+255),b
 12969  000606  0EFB               	movlw	high STR_104
 12970  000608  0100               	movlb	0	; () banked
 12971  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12972  00060C  EC08  F00B         	call	_printf	;wreg free
 12973                           
 12974                           ;Test.c: 315: updateServoPosition(1050, 3);
 12975  000610  0E04               	movlw	4
 12976  000612  0100               	movlb	0	; () banked
 12977  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12978  000616  0E1A               	movlw	26
 12979  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12980  00061A  0E00               	movlw	0
 12981  00061C  0100               	movlb	0	; () banked
 12982  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12983  000620  0E03               	movlw	3
 12984  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12985  000624  EC43  F023         	call	_updateServoPosition	;wreg free
 12986                           
 12987                           ;Test.c: 316: TMR3ON = 1;
 12988  000628  80B1               	bsf	4017,0,c	;volatile
 12989                           
 12990                           ;Test.c: 317: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12991  00062A  0E00               	movlw	0
 12992  00062C  0100               	movlb	0	; () banked
 12993  00062E  6FBA               	movwf	actuatorTest@i_1765& (0+255),b
 12994  000630                     l8029:
 12995                           
 12996                           ; BSR set to: 0
 12997  000630  0E63               	movlw	99
 12998  000632  0100               	movlb	0	; () banked
 12999  000634  65BA               	cpfsgt	actuatorTest@i_1765& (0+255),b
 13000  000636  D001               	goto	l8033
 13001  000638  D00C               	goto	l8037
 13002  00063A                     l8033:
 13003                           
 13004                           ; BSR set to: 0
 13005  00063A  0E68               	movlw	104
 13006  00063C  0100               	movlb	0	; () banked
 13007  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 13008  000640  0EE4               	movlw	228
 13009  000642                     u9887:
 13010  000642  2EE8               	decfsz	wreg,f,c
 13011  000644  D7FE               	bra	u9887
 13012  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13013  000648  D7FC               	bra	u9887
 13014  00064A  F000               	nop	
 13015  00064C  0100               	movlb	0	; () banked
 13016  00064E  2BBA               	incf	actuatorTest@i_1765& (0+255),f,b
 13017  000650  D7EF               	goto	l8029
 13018  000652                     l8037:
 13019                           
 13020                           ; BSR set to: 0
 13021  000652  0E00               	movlw	0
 13022  000654  0100               	movlb	0	; () banked
 13023  000656  6FBB               	movwf	actuatorTest@i_1766& (0+255),b
 13024  000658                     l8039:
 13025                           
 13026                           ; BSR set to: 0
 13027  000658  0E63               	movlw	99
 13028  00065A  0100               	movlb	0	; () banked
 13029  00065C  65BB               	cpfsgt	actuatorTest@i_1766& (0+255),b
 13030  00065E  D001               	goto	l8043
 13031  000660  D00C               	goto	l8047
 13032  000662                     l8043:
 13033                           
 13034                           ; BSR set to: 0
 13035  000662  0E68               	movlw	104
 13036  000664  0100               	movlb	0	; () banked
 13037  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 13038  000668  0EE4               	movlw	228
 13039  00066A                     u9897:
 13040  00066A  2EE8               	decfsz	wreg,f,c
 13041  00066C  D7FE               	bra	u9897
 13042  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13043  000670  D7FC               	bra	u9897
 13044  000672  F000               	nop	
 13045  000674  0100               	movlb	0	; () banked
 13046  000676  2BBB               	incf	actuatorTest@i_1766& (0+255),f,b
 13047  000678  D7EF               	goto	l8039
 13048  00067A                     l8047:
 13049                           
 13050                           ; BSR set to: 0
 13051                           ;Test.c: 319: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13052  00067A  0E80               	movlw	128
 13053  00067C  ECF8  F029         	call	_lcdInst
 13054  000680  0EC0               	movlw	192
 13055  000682  ECF8  F029         	call	_lcdInst
 13056                           
 13057                           ;Test.c: 320: printf("DROP -- 2s      ");
 13058  000686  0EB4               	movlw	low STR_105
 13059  000688  0100               	movlb	0	; () banked
 13060  00068A  6F8E               	movwf	printf@f& (0+255),b
 13061  00068C  0EFB               	movlw	high STR_105
 13062  00068E  0100               	movlb	0	; () banked
 13063  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 13064  000692  EC08  F00B         	call	_printf	;wreg free
 13065                           
 13066                           ;Test.c: 321: updateServoPosition(1260, 3);
 13067  000696  0E04               	movlw	4
 13068  000698  0100               	movlb	0	; () banked
 13069  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13070  00069C  0EEC               	movlw	236
 13071  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13072  0006A0  0E00               	movlw	0
 13073  0006A2  0100               	movlb	0	; () banked
 13074  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13075  0006A6  0E03               	movlw	3
 13076  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13077  0006AA  EC43  F023         	call	_updateServoPosition	;wreg free
 13078                           
 13079                           ;Test.c: 322: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13080  0006AE  0E00               	movlw	0
 13081  0006B0  0100               	movlb	0	; () banked
 13082  0006B2  6FBC               	movwf	actuatorTest@i_1768& (0+255),b
 13083  0006B4                     l8055:
 13084                           
 13085                           ; BSR set to: 0
 13086  0006B4  0E63               	movlw	99
 13087  0006B6  0100               	movlb	0	; () banked
 13088  0006B8  65BC               	cpfsgt	actuatorTest@i_1768& (0+255),b
 13089  0006BA  D001               	goto	l8059
 13090  0006BC  D00C               	goto	l8063
 13091  0006BE                     l8059:
 13092                           
 13093                           ; BSR set to: 0
 13094  0006BE  0E68               	movlw	104
 13095  0006C0  0100               	movlb	0	; () banked
 13096  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 13097  0006C4  0EE4               	movlw	228
 13098  0006C6                     u9907:
 13099  0006C6  2EE8               	decfsz	wreg,f,c
 13100  0006C8  D7FE               	bra	u9907
 13101  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13102  0006CC  D7FC               	bra	u9907
 13103  0006CE  F000               	nop	
 13104  0006D0  0100               	movlb	0	; () banked
 13105  0006D2  2BBC               	incf	actuatorTest@i_1768& (0+255),f,b
 13106  0006D4  D7EF               	goto	l8055
 13107  0006D6                     l8063:
 13108                           
 13109                           ; BSR set to: 0
 13110  0006D6  0E00               	movlw	0
 13111  0006D8  0100               	movlb	0	; () banked
 13112  0006DA  6FBD               	movwf	actuatorTest@i_1769& (0+255),b
 13113  0006DC                     l8065:
 13114                           
 13115                           ; BSR set to: 0
 13116  0006DC  0E63               	movlw	99
 13117  0006DE  0100               	movlb	0	; () banked
 13118  0006E0  65BD               	cpfsgt	actuatorTest@i_1769& (0+255),b
 13119  0006E2  D001               	goto	l8069
 13120  0006E4  D00C               	goto	l8073
 13121  0006E6                     l8069:
 13122                           
 13123                           ; BSR set to: 0
 13124  0006E6  0E68               	movlw	104
 13125  0006E8  0100               	movlb	0	; () banked
 13126  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 13127  0006EC  0EE4               	movlw	228
 13128  0006EE                     u9917:
 13129  0006EE  2EE8               	decfsz	wreg,f,c
 13130  0006F0  D7FE               	bra	u9917
 13131  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13132  0006F4  D7FC               	bra	u9917
 13133  0006F6  F000               	nop	
 13134  0006F8  0100               	movlb	0	; () banked
 13135  0006FA  2BBD               	incf	actuatorTest@i_1769& (0+255),f,b
 13136  0006FC  D7EF               	goto	l8065
 13137  0006FE                     l8073:
 13138                           
 13139                           ; BSR set to: 0
 13140                           ;Test.c: 324: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13141  0006FE  0E80               	movlw	128
 13142  000700  ECF8  F029         	call	_lcdInst
 13143  000704  0EC0               	movlw	192
 13144  000706  ECF8  F029         	call	_lcdInst
 13145                           
 13146                           ;Test.c: 325: printf("LEVEL -- 2s     ");
 13147  00070A  0ED6               	movlw	low STR_104
 13148  00070C  0100               	movlb	0	; () banked
 13149  00070E  6F8E               	movwf	printf@f& (0+255),b
 13150  000710  0EFB               	movlw	high STR_104
 13151  000712  0100               	movlb	0	; () banked
 13152  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 13153  000716  EC08  F00B         	call	_printf	;wreg free
 13154                           
 13155                           ;Test.c: 326: updateServoPosition(1050, 3);
 13156  00071A  0E04               	movlw	4
 13157  00071C  0100               	movlb	0	; () banked
 13158  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13159  000720  0E1A               	movlw	26
 13160  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13161  000724  0E00               	movlw	0
 13162  000726  0100               	movlb	0	; () banked
 13163  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13164  00072A  0E03               	movlw	3
 13165  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13166  00072E  EC43  F023         	call	_updateServoPosition	;wreg free
 13167                           
 13168                           ;Test.c: 327: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13169  000732  0E00               	movlw	0
 13170  000734  0100               	movlb	0	; () banked
 13171  000736  6FBE               	movwf	actuatorTest@i_1771& (0+255),b
 13172  000738                     l8081:
 13173                           
 13174                           ; BSR set to: 0
 13175  000738  0E63               	movlw	99
 13176  00073A  0100               	movlb	0	; () banked
 13177  00073C  65BE               	cpfsgt	actuatorTest@i_1771& (0+255),b
 13178  00073E  D001               	goto	l8085
 13179  000740  D00C               	goto	l8089
 13180  000742                     l8085:
 13181                           
 13182                           ; BSR set to: 0
 13183  000742  0E68               	movlw	104
 13184  000744  0100               	movlb	0	; () banked
 13185  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 13186  000748  0EE4               	movlw	228
 13187  00074A                     u9927:
 13188  00074A  2EE8               	decfsz	wreg,f,c
 13189  00074C  D7FE               	bra	u9927
 13190  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13191  000750  D7FC               	bra	u9927
 13192  000752  F000               	nop	
 13193  000754  0100               	movlb	0	; () banked
 13194  000756  2BBE               	incf	actuatorTest@i_1771& (0+255),f,b
 13195  000758  D7EF               	goto	l8081
 13196  00075A                     l8089:
 13197                           
 13198                           ; BSR set to: 0
 13199  00075A  0E00               	movlw	0
 13200  00075C  0100               	movlb	0	; () banked
 13201  00075E  6FBF               	movwf	actuatorTest@i_1772& (0+255),b
 13202  000760                     l8091:
 13203                           
 13204                           ; BSR set to: 0
 13205  000760  0E63               	movlw	99
 13206  000762  0100               	movlb	0	; () banked
 13207  000764  65BF               	cpfsgt	actuatorTest@i_1772& (0+255),b
 13208  000766  D001               	goto	l8095
 13209  000768  D00C               	goto	l1259
 13210  00076A                     l8095:
 13211                           
 13212                           ; BSR set to: 0
 13213  00076A  0E68               	movlw	104
 13214  00076C  0100               	movlb	0	; () banked
 13215  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 13216  000770  0EE4               	movlw	228
 13217  000772                     u9937:
 13218  000772  2EE8               	decfsz	wreg,f,c
 13219  000774  D7FE               	bra	u9937
 13220  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13221  000778  D7FC               	bra	u9937
 13222  00077A  F000               	nop	
 13223  00077C  0100               	movlb	0	; () banked
 13224  00077E  2BBF               	incf	actuatorTest@i_1772& (0+255),f,b
 13225  000780  D7EF               	goto	l8091
 13226  000782                     l1259:
 13227                           
 13228                           ; BSR set to: 0
 13229                           ;Test.c: 328: TMR3ON = 0;
 13230  000782  90B1               	bcf	4017,0,c	;volatile
 13231                           
 13232                           ;Test.c: 329: (INTCONbits.GIE = 0);
 13233  000784  9EF2               	bcf	intcon,7,c	;volatile
 13234                           
 13235                           ; BSR set to: 0
 13236                           ;Test.c: 334: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13237  000786  0E01               	movlw	1
 13238  000788  ECF8  F029         	call	_lcdInst
 13239  00078C  0E68               	movlw	104
 13240  00078E  0100               	movlb	0	; () banked
 13241  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 13242  000792  0EE4               	movlw	228
 13243  000794                     u9947:
 13244  000794  2EE8               	decfsz	wreg,f,c
 13245  000796  D7FE               	bra	u9947
 13246  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13247  00079A  D7FC               	bra	u9947
 13248  00079C  F000               	nop	
 13249  00079E  0E80               	movlw	128
 13250  0007A0  ECF8  F029         	call	_lcdInst
 13251                           
 13252                           ;Test.c: 335: printf("TST: CAM SERVO");
 13253  0007A4  0E95               	movlw	low STR_107
 13254  0007A6  0100               	movlb	0	; () banked
 13255  0007A8  6F8E               	movwf	printf@f& (0+255),b
 13256  0007AA  0EFE               	movlw	high STR_107
 13257  0007AC  0100               	movlb	0	; () banked
 13258  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 13259  0007B0  EC08  F00B         	call	_printf	;wreg free
 13260                           
 13261                           ;Test.c: 336: lcdInst(0b11000000);;
 13262  0007B4  0EC0               	movlw	192
 13263  0007B6  ECF8  F029         	call	_lcdInst
 13264                           
 13265                           ;Test.c: 337: printf("CAM UP  |RC0=1");
 13266  0007BA  0E77               	movlw	low STR_108
 13267  0007BC  0100               	movlb	0	; () banked
 13268  0007BE  6F8E               	movwf	printf@f& (0+255),b
 13269  0007C0  0EFE               	movlw	high STR_108
 13270  0007C2  0100               	movlb	0	; () banked
 13271  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13272  0007C6  EC08  F00B         	call	_printf	;wreg free
 13273                           
 13274                           ;Test.c: 338: LATCbits.LATC0 = 1;
 13275  0007CA  808B               	bsf	3979,0,c	;volatile
 13276                           
 13277                           ;Test.c: 339: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13278  0007CC  0E00               	movlw	0
 13279  0007CE  0100               	movlb	0	; () banked
 13280  0007D0  6FC0               	movwf	actuatorTest@i_1775& (0+255),b
 13281  0007D2                     l8115:
 13282                           
 13283                           ; BSR set to: 0
 13284  0007D2  0E63               	movlw	99
 13285  0007D4  0100               	movlb	0	; () banked
 13286  0007D6  65C0               	cpfsgt	actuatorTest@i_1775& (0+255),b
 13287  0007D8  D001               	goto	l8119
 13288  0007DA  D00C               	goto	l8123
 13289  0007DC                     l8119:
 13290                           
 13291                           ; BSR set to: 0
 13292  0007DC  0E68               	movlw	104
 13293  0007DE  0100               	movlb	0	; () banked
 13294  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13295  0007E2  0EE4               	movlw	228
 13296  0007E4                     u9957:
 13297  0007E4  2EE8               	decfsz	wreg,f,c
 13298  0007E6  D7FE               	bra	u9957
 13299  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13300  0007EA  D7FC               	bra	u9957
 13301  0007EC  F000               	nop	
 13302  0007EE  0100               	movlb	0	; () banked
 13303  0007F0  2BC0               	incf	actuatorTest@i_1775& (0+255),f,b
 13304  0007F2  D7EF               	goto	l8115
 13305  0007F4                     l8123:
 13306                           
 13307                           ; BSR set to: 0
 13308  0007F4  0E00               	movlw	0
 13309  0007F6  0100               	movlb	0	; () banked
 13310  0007F8  6FC1               	movwf	actuatorTest@i_1776& (0+255),b
 13311  0007FA                     l8125:
 13312                           
 13313                           ; BSR set to: 0
 13314  0007FA  0E63               	movlw	99
 13315  0007FC  0100               	movlb	0	; () banked
 13316  0007FE  65C1               	cpfsgt	actuatorTest@i_1776& (0+255),b
 13317  000800  D001               	goto	l8129
 13318  000802  D00C               	goto	l8133
 13319  000804                     l8129:
 13320                           
 13321                           ; BSR set to: 0
 13322  000804  0E68               	movlw	104
 13323  000806  0100               	movlb	0	; () banked
 13324  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 13325  00080A  0EE4               	movlw	228
 13326  00080C                     u9967:
 13327  00080C  2EE8               	decfsz	wreg,f,c
 13328  00080E  D7FE               	bra	u9967
 13329  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13330  000812  D7FC               	bra	u9967
 13331  000814  F000               	nop	
 13332  000816  0100               	movlb	0	; () banked
 13333  000818  2BC1               	incf	actuatorTest@i_1776& (0+255),f,b
 13334  00081A  D7EF               	goto	l8125
 13335  00081C                     l8133:
 13336                           
 13337                           ; BSR set to: 0
 13338                           ;Test.c: 340: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13339  00081C  0E80               	movlw	128
 13340  00081E  ECF8  F029         	call	_lcdInst
 13341  000822  0EC0               	movlw	192
 13342  000824  ECF8  F029         	call	_lcdInst
 13343                           
 13344                           ;Test.c: 341: printf("CAM DWN |RC0=0");
 13345  000828  0E68               	movlw	low STR_109
 13346  00082A  0100               	movlb	0	; () banked
 13347  00082C  6F8E               	movwf	printf@f& (0+255),b
 13348  00082E  0EFE               	movlw	high STR_109
 13349  000830  0100               	movlb	0	; () banked
 13350  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 13351  000834  EC08  F00B         	call	_printf	;wreg free
 13352                           
 13353                           ;Test.c: 344: for(i=0;i<10000;i++)
 13354  000838  0E00               	movlw	0
 13355  00083A  0100               	movlb	0	; () banked
 13356  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13357  00083E  0E00               	movlw	0
 13358  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 13359  000842                     l8139:
 13360                           
 13361                           ; BSR set to: 0
 13362  000842  0100               	movlb	0	; () banked
 13363  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13364  000846  D008               	goto	l1264
 13365  000848  0E10               	movlw	16
 13366  00084A  0100               	movlb	0	; () banked
 13367  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13368  00084E  0E27               	movlw	39
 13369  000850  0100               	movlb	0	; () banked
 13370  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 13371  000854  B0D8               	btfsc	status,0,c
 13372  000856  D00D               	goto	l8149
 13373  000858                     l1264:
 13374                           
 13375                           ; BSR set to: 0
 13376                           ;Test.c: 345: {
 13377                           ;Test.c: 346: LATCbits.LATC0 = 1;
 13378  000858  808B               	bsf	3979,0,c	;volatile
 13379                           
 13380                           ; BSR set to: 0
 13381                           ;Test.c: 347: _delay((unsigned long)((10)*(32000000/4000000.0)));
 13382  00085A  0E1A               	movlw	26
 13383  00085C                     u9977:
 13384  00085C  2EE8               	decfsz	wreg,f,c
 13385  00085E  D7FE               	bra	u9977
 13386  000860  D000               	nop2	
 13387                           
 13388                           ;Test.c: 348: LATCbits.LATC0 = 0;
 13389  000862  908B               	bcf	3979,0,c	;volatile
 13390                           
 13391                           ;Test.c: 349: _delay((unsigned long)((90)*(32000000/4000000.0)));
 13392  000864  0EF0               	movlw	240
 13393  000866                     u9987:
 13394  000866  2EE8               	decfsz	wreg,f,c
 13395  000868  D7FE               	bra	u9987
 13396  00086A  0100               	movlb	0	; () banked
 13397  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13398  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13399  000870  D7E8               	goto	l8139
 13400  000872                     l8149:
 13401                           
 13402                           ; BSR set to: 0
 13403                           ;Test.c: 350: }
 13404                           ;Test.c: 352: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13405  000872  0E00               	movlw	0
 13406  000874  0100               	movlb	0	; () banked
 13407  000876  6FC2               	movwf	actuatorTest@i_1778& (0+255),b
 13408  000878                     l8151:
 13409                           
 13410                           ; BSR set to: 0
 13411  000878  0E63               	movlw	99
 13412  00087A  0100               	movlb	0	; () banked
 13413  00087C  65C2               	cpfsgt	actuatorTest@i_1778& (0+255),b
 13414  00087E  D001               	goto	l8155
 13415  000880  D00C               	goto	l8159
 13416  000882                     l8155:
 13417                           
 13418                           ; BSR set to: 0
 13419  000882  0E68               	movlw	104
 13420  000884  0100               	movlb	0	; () banked
 13421  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 13422  000888  0EE4               	movlw	228
 13423  00088A                     u9997:
 13424  00088A  2EE8               	decfsz	wreg,f,c
 13425  00088C  D7FE               	bra	u9997
 13426  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13427  000890  D7FC               	bra	u9997
 13428  000892  F000               	nop	
 13429  000894  0100               	movlb	0	; () banked
 13430  000896  2BC2               	incf	actuatorTest@i_1778& (0+255),f,b
 13431  000898  D7EF               	goto	l8151
 13432  00089A                     l8159:
 13433                           
 13434                           ; BSR set to: 0
 13435  00089A  0E00               	movlw	0
 13436  00089C  0100               	movlb	0	; () banked
 13437  00089E  6FC3               	movwf	actuatorTest@i_1779& (0+255),b
 13438  0008A0                     l8161:
 13439                           
 13440                           ; BSR set to: 0
 13441  0008A0  0E63               	movlw	99
 13442  0008A2  0100               	movlb	0	; () banked
 13443  0008A4  65C3               	cpfsgt	actuatorTest@i_1779& (0+255),b
 13444  0008A6  D001               	goto	l8165
 13445  0008A8  D00C               	goto	l8169
 13446  0008AA                     l8165:
 13447                           
 13448                           ; BSR set to: 0
 13449  0008AA  0E68               	movlw	104
 13450  0008AC  0100               	movlb	0	; () banked
 13451  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13452  0008B0  0EE4               	movlw	228
 13453  0008B2                     u10007:
 13454  0008B2  2EE8               	decfsz	wreg,f,c
 13455  0008B4  D7FE               	bra	u10007
 13456  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13457  0008B8  D7FC               	bra	u10007
 13458  0008BA  F000               	nop	
 13459  0008BC  0100               	movlb	0	; () banked
 13460  0008BE  2BC3               	incf	actuatorTest@i_1779& (0+255),f,b
 13461  0008C0  D7EF               	goto	l8161
 13462  0008C2                     l8169:
 13463                           
 13464                           ; BSR set to: 0
 13465                           ;Test.c: 353: machine_state = Testing_state;
 13466  0008C2  0E03               	movlw	3
 13467  0008C4  0100               	movlb	0	; () banked
 13468  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 13469                           
 13470                           ; BSR set to: 0
 13471  0008C8  0012               	return		;funcret
 13472  0008CA                     __end_of_actuatorTest:
 13473                           	opt stack 0
 13474                           tblptru	equ	0xFF8
 13475                           tblptrh	equ	0xFF7
 13476                           tblptrl	equ	0xFF6
 13477                           tablat	equ	0xFF5
 13478                           prodh	equ	0xFF4
 13479                           prodl	equ	0xFF3
 13480                           intcon	equ	0xFF2
 13481                           intcon2	equ	0xFF1
 13482                           intcon3	equ	0xFF0
 13483                           postinc0	equ	0xFEE
 13484                           wreg	equ	0xFE8
 13485                           postdec1	equ	0xFE5
 13486                           fsr1l	equ	0xFE1
 13487                           indf2	equ	0xFDF
 13488                           postinc2	equ	0xFDE
 13489                           postdec2	equ	0xFDD
 13490                           fsr2h	equ	0xFDA
 13491                           fsr2l	equ	0xFD9
 13492                           status	equ	0xFD8
 13493                           
 13494 ;; *************** function _SpeedTest *****************
 13495 ;; Defined at:
 13496 ;;		line 553 in file "Test.c"
 13497 ;; Parameters:    Size  Location     Type
 13498 ;;		None
 13499 ;; Auto vars:     Size  Location     Type
 13500 ;;		None
 13501 ;; Return value:  Size  Location     Type
 13502 ;;                  1    wreg      void 
 13503 ;; Registers used:
 13504 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13505 ;; Tracked objects:
 13506 ;;		On entry : 0/0
 13507 ;;		On exit  : 0/0
 13508 ;;		Unchanged: 0/0
 13509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13512 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13513 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13514 ;;Total ram usage:        1 bytes
 13515 ;; Hardware stack levels used:    1
 13516 ;; Hardware stack levels required when called:   10
 13517 ;; This function calls:
 13518 ;;		_lcdInst
 13519 ;;		_printf
 13520 ;; This function is called by:
 13521 ;;		_Test
 13522 ;; This function uses a non-reentrant model
 13523 ;;
 13524                           
 13525                           	psect	text42
 13526  00470C                     __ptext42:
 13527                           	opt stack 0
 13528  00470C                     _SpeedTest:
 13529                           	opt stack 19
 13530                           
 13531                           ;Test.c: 555: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13532                           
 13533                           ; BSR set to: 0
 13534                           ;incstack = 0
 13535  00470C  0E01               	movlw	1
 13536  00470E  ECF8  F029         	call	_lcdInst
 13537  004712  0E68               	movlw	104
 13538  004714  0100               	movlb	0	; () banked
 13539  004716  6FAB               	movwf	??_SpeedTest& (0+255),b
 13540  004718  0EE4               	movlw	228
 13541  00471A                     u10017:
 13542  00471A  2EE8               	decfsz	wreg,f,c
 13543  00471C  D7FE               	bra	u10017
 13544  00471E  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13545  004720  D7FC               	bra	u10017
 13546  004722  F000               	nop	
 13547  004724  0E80               	movlw	128
 13548  004726  ECF8  F029         	call	_lcdInst
 13549                           
 13550                           ;Test.c: 556: printf("S: D WILL RETURN ");
 13551  00472A  0E49               	movlw	low STR_120
 13552  00472C  0100               	movlb	0	; () banked
 13553  00472E  6F8E               	movwf	printf@f& (0+255),b
 13554  004730  0EFB               	movlw	high STR_120
 13555  004732  0100               	movlb	0	; () banked
 13556  004734  6F8F               	movwf	(printf@f+1)& (0+255),b
 13557  004736  EC08  F00B         	call	_printf	;wreg free
 13558                           
 13559                           ;Test.c: 557: lcdInst(0b11000000);;
 13560  00473A  0EC0               	movlw	192
 13561  00473C  ECF8  F029         	call	_lcdInst
 13562                           
 13563                           ;Test.c: 558: printf("OTHER SETS RA5   ");
 13564  004740  0E37               	movlw	low STR_112
 13565  004742  0100               	movlb	0	; () banked
 13566  004744  6F8E               	movwf	printf@f& (0+255),b
 13567  004746  0EFB               	movlw	high STR_112
 13568  004748  0100               	movlb	0	; () banked
 13569  00474A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13570  00474C  EC08  F00B         	call	_printf	;wreg free
 13571  004750                     l1350:
 13572  004750  A281               	btfss	3969,1,c	;volatile
 13573  004752  D7FE               	goto	l1350
 13574                           
 13575                           ;Test.c: 563: }
 13576                           ;Test.c: 564: if(PORTB >> 4 == 0b1111){
 13577  004754  3881               	swapf	3969,w,c	;volatile
 13578  004756  0B0F               	andlw	15
 13579  004758  0A0F               	xorlw	15
 13580  00475A  B4D8               	btfsc	status,2,c
 13581  00475C  0012               	return	
 13582  00475E  D014               	goto	l8251
 13583  004760                     l1357:
 13584                           
 13585                           ;Test.c: 569: LATAbits.LATA5 = 1;
 13586  004760  8A89               	bsf	3977,5,c	;volatile
 13587                           
 13588                           ;Test.c: 570: _delay((unsigned long)((5)*(32000000/4000.0)));
 13589  004762  0E34               	movlw	52
 13590  004764  0100               	movlb	0	; () banked
 13591  004766  6FAB               	movwf	??_SpeedTest& (0+255),b
 13592  004768  0EF1               	movlw	241
 13593  00476A                     u10027:
 13594  00476A  2EE8               	decfsz	wreg,f,c
 13595  00476C  D7FE               	bra	u10027
 13596  00476E  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13597  004770  D7FC               	bra	u10027
 13598  004772  D000               	nop2	
 13599                           
 13600                           ;Test.c: 571: LATAbits.LATA5 = 0;
 13601  004774  9A89               	bcf	3977,5,c	;volatile
 13602                           
 13603                           ;Test.c: 572: _delay((unsigned long)((5)*(32000000/4000.0)));
 13604  004776  0E34               	movlw	52
 13605  004778  0100               	movlb	0	; () banked
 13606  00477A  6FAB               	movwf	??_SpeedTest& (0+255),b
 13607  00477C  0EF1               	movlw	241
 13608  00477E                     u10037:
 13609  00477E  2EE8               	decfsz	wreg,f,c
 13610  004780  D7FE               	bra	u10037
 13611  004782  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13612  004784  D7FC               	bra	u10037
 13613  004786  D000               	nop2	
 13614  004788                     l8251:
 13615  004788  B281               	btfsc	3969,1,c	;volatile
 13616  00478A  D7EA               	goto	l1357
 13617                           
 13618                           ;Test.c: 575: }
 13619                           ;Test.c: 576: LATAbits.LATA5 = 0;
 13620  00478C  9A89               	bcf	3977,5,c	;volatile
 13621  00478E  D7E0               	goto	l1350
 13622  004790                     __end_of_SpeedTest:
 13623                           	opt stack 0
 13624                           tblptru	equ	0xFF8
 13625                           tblptrh	equ	0xFF7
 13626                           tblptrl	equ	0xFF6
 13627                           tablat	equ	0xFF5
 13628                           prodh	equ	0xFF4
 13629                           prodl	equ	0xFF3
 13630                           intcon	equ	0xFF2
 13631                           intcon2	equ	0xFF1
 13632                           intcon3	equ	0xFF0
 13633                           postinc0	equ	0xFEE
 13634                           wreg	equ	0xFE8
 13635                           postdec1	equ	0xFE5
 13636                           fsr1l	equ	0xFE1
 13637                           indf2	equ	0xFDF
 13638                           postinc2	equ	0xFDE
 13639                           postdec2	equ	0xFDD
 13640                           fsr2h	equ	0xFDA
 13641                           fsr2l	equ	0xFD9
 13642                           status	equ	0xFD8
 13643                           
 13644 ;; *************** function _PusherTest *****************
 13645 ;; Defined at:
 13646 ;;		line 471 in file "Test.c"
 13647 ;; Parameters:    Size  Location     Type
 13648 ;;		None
 13649 ;; Auto vars:     Size  Location     Type
 13650 ;;  i               2   51[BANK0 ] int 
 13651 ;;  i               2   49[BANK0 ] int 
 13652 ;;  res             2   47[BANK0 ] int 
 13653 ;;  res             2   45[BANK0 ] int 
 13654 ;; Return value:  Size  Location     Type
 13655 ;;                  1    wreg      void 
 13656 ;; Registers used:
 13657 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13658 ;; Tracked objects:
 13659 ;;		On entry : 0/0
 13660 ;;		On exit  : 0/0
 13661 ;;		Unchanged: 0/0
 13662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13664 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13665 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13666 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13667 ;;Total ram usage:       10 bytes
 13668 ;; Hardware stack levels used:    1
 13669 ;; Hardware stack levels required when called:   10
 13670 ;; This function calls:
 13671 ;;		_lcdInst
 13672 ;;		_printf
 13673 ;;		_readADC
 13674 ;; This function is called by:
 13675 ;;		_Test
 13676 ;; This function uses a non-reentrant model
 13677 ;;
 13678                           
 13679                           	psect	text43
 13680  002ED2                     __ptext43:
 13681                           	opt stack 0
 13682  002ED2                     _PusherTest:
 13683                           	opt stack 19
 13684                           
 13685                           ;Test.c: 472: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13686                           
 13687                           ;incstack = 0
 13688  002ED2  0E01               	movlw	1
 13689  002ED4  ECF8  F029         	call	_lcdInst
 13690  002ED8  0E68               	movlw	104
 13691  002EDA  0100               	movlb	0	; () banked
 13692  002EDC  6FAB               	movwf	??_PusherTest& (0+255),b
 13693  002EDE  0EE4               	movlw	228
 13694  002EE0                     u10047:
 13695  002EE0  2EE8               	decfsz	wreg,f,c
 13696  002EE2  D7FE               	bra	u10047
 13697  002EE4  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13698  002EE6  D7FC               	bra	u10047
 13699  002EE8  F000               	nop	
 13700  002EEA  0E80               	movlw	128
 13701  002EEC  ECF8  F029         	call	_lcdInst
 13702                           
 13703                           ;Test.c: 473: printf("PUSHER TST");
 13704  002EF0  0E70               	movlw	low STR_113
 13705  002EF2  0100               	movlb	0	; () banked
 13706  002EF4  6F8E               	movwf	printf@f& (0+255),b
 13707  002EF6  0EFF               	movlw	high STR_113
 13708  002EF8  0100               	movlb	0	; () banked
 13709  002EFA  6F8F               	movwf	(printf@f+1)& (0+255),b
 13710  002EFC  EC08  F00B         	call	_printf	;wreg free
 13711                           
 13712                           ;Test.c: 474: LATCbits.LATC5 = 1;
 13713  002F00  8A8B               	bsf	3979,5,c	;volatile
 13714                           
 13715                           ;Test.c: 476: while(PORTBbits.RB1 == 0){
 13716  002F02  D05C               	goto	l8281
 13717  002F04                     l8263:
 13718                           
 13719                           ;Test.c: 477: readADC(0);
 13720  002F04  0E00               	movlw	0
 13721  002F06  ECEF  F028         	call	_readADC
 13722                           
 13723                           ;Test.c: 478: int res = ADRESH<<8 | ADRESL;
 13724  002F0A  50C3               	movf	4035,w,c	;volatile
 13725  002F0C  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13726  002F10  0100               	movlb	0	; () banked
 13727  002F12  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13728  002F14  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13729  002F18  0100               	movlb	0	; () banked
 13730  002F1A  6BAB               	clrf	??_PusherTest& (0+255),b
 13731  002F1C  0100               	movlb	0	; () banked
 13732  002F1E  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13733  002F20  0100               	movlb	0	; () banked
 13734  002F22  6FAD               	movwf	PusherTest@res& (0+255),b
 13735  002F24  0100               	movlb	0	; () banked
 13736  002F26  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13737  002F28  0100               	movlb	0	; () banked
 13738  002F2A  6FAE               	movwf	(PusherTest@res+1)& (0+255),b
 13739                           
 13740                           ; BSR set to: 0
 13741                           ;Test.c: 479: IR_signal = (res > 800) ? 1 : 0;
 13742  002F2C  0100               	movlb	0	; () banked
 13743  002F2E  BFAE               	btfsc	(PusherTest@res+1)& (0+255),7,b
 13744  002F30  D00A               	goto	u7050
 13745  002F32  0E21               	movlw	33
 13746  002F34  0100               	movlb	0	; () banked
 13747  002F36  5DAD               	subwf	PusherTest@res& (0+255),w,b
 13748  002F38  0E03               	movlw	3
 13749  002F3A  0100               	movlb	0	; () banked
 13750  002F3C  59AE               	subwfb	(PusherTest@res+1)& (0+255),w,b
 13751  002F3E  A0D8               	btfss	status,0,c
 13752  002F40  D002               	goto	u7050
 13753  002F42  0E01               	movlw	1
 13754  002F44  D001               	goto	u7060
 13755  002F46                     u7050:
 13756  002F46  0E00               	movlw	0
 13757  002F48                     u7060:
 13758  002F48  0100               	movlb	0	; () banked
 13759  002F4A  6FE6               	movwf	_IR_signal& (0+255),b
 13760  002F4C  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 13761                           
 13762                           ;Test.c: 481: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13763  002F4E  0E01               	movlw	1
 13764  002F50  ECF8  F029         	call	_lcdInst
 13765  002F54  0E68               	movlw	104
 13766  002F56  0100               	movlb	0	; () banked
 13767  002F58  6FAB               	movwf	??_PusherTest& (0+255),b
 13768  002F5A  0EE4               	movlw	228
 13769  002F5C                     u10057:
 13770  002F5C  2EE8               	decfsz	wreg,f,c
 13771  002F5E  D7FE               	bra	u10057
 13772  002F60  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13773  002F62  D7FC               	bra	u10057
 13774  002F64  F000               	nop	
 13775  002F66  0E80               	movlw	128
 13776  002F68  ECF8  F029         	call	_lcdInst
 13777                           
 13778                           ;Test.c: 482: printf("IR_signal: %d ", IR_signal);
 13779  002F6C  0E59               	movlw	low STR_80
 13780  002F6E  0100               	movlb	0	; () banked
 13781  002F70  6F8E               	movwf	printf@f& (0+255),b
 13782  002F72  0EFE               	movlw	high STR_80
 13783  002F74  0100               	movlb	0	; () banked
 13784  002F76  6F8F               	movwf	(printf@f+1)& (0+255),b
 13785  002F78  C0E6  F090         	movff	_IR_signal,?_printf+2
 13786  002F7C  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 13787  002F80  EC08  F00B         	call	_printf	;wreg free
 13788                           
 13789                           ;Test.c: 483: lcdInst(0b11000000);;
 13790  002F84  0EC0               	movlw	192
 13791  002F86  ECF8  F029         	call	_lcdInst
 13792                           
 13793                           ;Test.c: 484: printf("%d", res);
 13794  002F8A  0E15               	movlw	low (STR_27+14)
 13795  002F8C  0100               	movlb	0	; () banked
 13796  002F8E  6F8E               	movwf	printf@f& (0+255),b
 13797  002F90  0EFE               	movlw	high (STR_27+14)
 13798  002F92  0100               	movlb	0	; () banked
 13799  002F94  6F8F               	movwf	(printf@f+1)& (0+255),b
 13800  002F96  C0AD  F090         	movff	PusherTest@res,?_printf+2
 13801  002F9A  C0AE  F091         	movff	PusherTest@res+1,?_printf+3
 13802  002F9E  EC08  F00B         	call	_printf	;wreg free
 13803                           
 13804                           ;Test.c: 485: _delay((unsigned long)((100)*(32000000/4000.0)));
 13805  002FA2  0E05               	movlw	5
 13806  002FA4  0100               	movlb	0	; () banked
 13807  002FA6  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13808  002FA8  0E0F               	movlw	15
 13809  002FAA  0100               	movlb	0	; () banked
 13810  002FAC  6FAB               	movwf	??_PusherTest& (0+255),b
 13811  002FAE  0EF1               	movlw	241
 13812  002FB0                     u10067:
 13813  002FB0  2EE8               	decfsz	wreg,f,c
 13814  002FB2  D7FE               	bra	u10067
 13815  002FB4  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13816  002FB6  D7FC               	bra	u10067
 13817  002FB8  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13818  002FBA  D7FA               	bra	u10067
 13819  002FBC                     l8281:
 13820  002FBC  B281               	btfsc	3969,1,c	;volatile
 13821  002FBE  D05D               	goto	l8301
 13822  002FC0  D7A1               	goto	l8263
 13823  002FC2                     l8283:
 13824                           
 13825                           ;Test.c: 491: readADC(0);
 13826  002FC2  0E00               	movlw	0
 13827  002FC4  ECEF  F028         	call	_readADC
 13828                           
 13829                           ;Test.c: 492: int res = ADRESH<<8 | ADRESL;
 13830  002FC8  50C3               	movf	4035,w,c	;volatile
 13831  002FCA  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13832  002FCE  0100               	movlb	0	; () banked
 13833  002FD0  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13834  002FD2  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13835  002FD6  0100               	movlb	0	; () banked
 13836  002FD8  6BAB               	clrf	??_PusherTest& (0+255),b
 13837  002FDA  0100               	movlb	0	; () banked
 13838  002FDC  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13839  002FDE  0100               	movlb	0	; () banked
 13840  002FE0  6FAF               	movwf	PusherTest@res_1794& (0+255),b
 13841  002FE2  0100               	movlb	0	; () banked
 13842  002FE4  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13843  002FE6  0100               	movlb	0	; () banked
 13844  002FE8  6FB0               	movwf	(PusherTest@res_1794+1)& (0+255),b
 13845                           
 13846                           ; BSR set to: 0
 13847                           ;Test.c: 493: IR_signal = (res > 800) ? 1 : 0;
 13848  002FEA  0100               	movlb	0	; () banked
 13849  002FEC  BFB0               	btfsc	(PusherTest@res_1794+1)& (0+255),7,b
 13850  002FEE  D00A               	goto	u7080
 13851  002FF0  0E21               	movlw	33
 13852  002FF2  0100               	movlb	0	; () banked
 13853  002FF4  5DAF               	subwf	PusherTest@res_1794& (0+255),w,b
 13854  002FF6  0E03               	movlw	3
 13855  002FF8  0100               	movlb	0	; () banked
 13856  002FFA  59B0               	subwfb	(PusherTest@res_1794+1)& (0+255),w,b
 13857  002FFC  A0D8               	btfss	status,0,c
 13858  002FFE  D002               	goto	u7080
 13859  003000  0E01               	movlw	1
 13860  003002  D001               	goto	u7090
 13861  003004                     u7080:
 13862  003004  0E00               	movlw	0
 13863  003006                     u7090:
 13864  003006  0100               	movlb	0	; () banked
 13865  003008  6FE6               	movwf	_IR_signal& (0+255),b
 13866  00300A  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 13867                           
 13868                           ;Test.c: 494: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13869  00300C  0E01               	movlw	1
 13870  00300E  ECF8  F029         	call	_lcdInst
 13871  003012  0E68               	movlw	104
 13872  003014  0100               	movlb	0	; () banked
 13873  003016  6FAB               	movwf	??_PusherTest& (0+255),b
 13874  003018  0EE4               	movlw	228
 13875  00301A                     u10077:
 13876  00301A  2EE8               	decfsz	wreg,f,c
 13877  00301C  D7FE               	bra	u10077
 13878  00301E  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13879  003020  D7FC               	bra	u10077
 13880  003022  F000               	nop	
 13881  003024  0E80               	movlw	128
 13882  003026  ECF8  F029         	call	_lcdInst
 13883                           
 13884                           ;Test.c: 495: printf("IR_signal: %d ", IR_signal);
 13885  00302A  0E59               	movlw	low STR_80
 13886  00302C  0100               	movlb	0	; () banked
 13887  00302E  6F8E               	movwf	printf@f& (0+255),b
 13888  003030  0EFE               	movlw	high STR_80
 13889  003032  0100               	movlb	0	; () banked
 13890  003034  6F8F               	movwf	(printf@f+1)& (0+255),b
 13891  003036  C0E6  F090         	movff	_IR_signal,?_printf+2
 13892  00303A  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 13893  00303E  EC08  F00B         	call	_printf	;wreg free
 13894                           
 13895                           ;Test.c: 496: lcdInst(0b11000000);;
 13896  003042  0EC0               	movlw	192
 13897  003044  ECF8  F029         	call	_lcdInst
 13898                           
 13899                           ;Test.c: 497: printf("%d", res);
 13900  003048  0E15               	movlw	low (STR_27+14)
 13901  00304A  0100               	movlb	0	; () banked
 13902  00304C  6F8E               	movwf	printf@f& (0+255),b
 13903  00304E  0EFE               	movlw	high (STR_27+14)
 13904  003050  0100               	movlb	0	; () banked
 13905  003052  6F8F               	movwf	(printf@f+1)& (0+255),b
 13906  003054  C0AF  F090         	movff	PusherTest@res_1794,?_printf+2
 13907  003058  C0B0  F091         	movff	PusherTest@res_1794+1,?_printf+3
 13908  00305C  EC08  F00B         	call	_printf	;wreg free
 13909                           
 13910                           ;Test.c: 498: _delay((unsigned long)((100)*(32000000/4000.0)));
 13911  003060  0E05               	movlw	5
 13912  003062  0100               	movlb	0	; () banked
 13913  003064  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13914  003066  0E0F               	movlw	15
 13915  003068  0100               	movlb	0	; () banked
 13916  00306A  6FAB               	movwf	??_PusherTest& (0+255),b
 13917  00306C  0EF1               	movlw	241
 13918  00306E                     u10087:
 13919  00306E  2EE8               	decfsz	wreg,f,c
 13920  003070  D7FE               	bra	u10087
 13921  003072  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13922  003074  D7FC               	bra	u10087
 13923  003076  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13924  003078  D7FA               	bra	u10087
 13925  00307A                     l8301:
 13926  00307A  A281               	btfss	3969,1,c	;volatile
 13927  00307C  D7A2               	goto	l8283
 13928                           
 13929                           ;Test.c: 499: }
 13930                           ;Test.c: 500: if(PORTB >> 4 == 0b1111){
 13931  00307E  3881               	swapf	3969,w,c	;volatile
 13932  003080  0B0F               	andlw	15
 13933  003082  0A0F               	xorlw	15
 13934  003084  B4D8               	btfsc	status,2,c
 13935  003086  D047               	goto	l1319
 13936                           
 13937                           ;Test.c: 505: else if(PORTB >> 4 == 0b0101){
 13938                           
 13939                           ;Test.c: 502: }
 13940                           
 13941                           ;Test.c: 501: break;
 13942  003088  3881               	swapf	3969,w,c	;volatile
 13943  00308A  0B0F               	andlw	15
 13944  00308C  0A05               	xorlw	5
 13945  00308E  A4D8               	btfss	status,2,c
 13946  003090  D01D               	goto	l8323
 13947                           
 13948                           ;Test.c: 506: for(int i = 0; i<3000; i++){
 13949  003092  0E00               	movlw	0
 13950  003094  0100               	movlb	0	; () banked
 13951  003096  6FB2               	movwf	(PusherTest@i+1)& (0+255),b
 13952  003098  0E00               	movlw	0
 13953  00309A  6FB1               	movwf	PusherTest@i& (0+255),b
 13954  00309C                     l8313:
 13955                           
 13956                           ; BSR set to: 0
 13957  00309C  0100               	movlb	0	; () banked
 13958  00309E  BFB2               	btfsc	(PusherTest@i+1)& (0+255),7,b
 13959  0030A0  D008               	goto	l1322
 13960  0030A2  0EB8               	movlw	184
 13961  0030A4  0100               	movlb	0	; () banked
 13962  0030A6  5DB1               	subwf	PusherTest@i& (0+255),w,b
 13963  0030A8  0E0B               	movlw	11
 13964  0030AA  0100               	movlb	0	; () banked
 13965  0030AC  59B2               	subwfb	(PusherTest@i+1)& (0+255),w,b
 13966  0030AE  B0D8               	btfsc	status,0,c
 13967  0030B0  D02F               	goto	l1328
 13968  0030B2                     l1322:
 13969                           
 13970                           ; BSR set to: 0
 13971                           ;Test.c: 507: LATAbits.LATA4 = 1;
 13972  0030B2  8889               	bsf	3977,4,c	;volatile
 13973                           
 13974                           ; BSR set to: 0
 13975                           ;Test.c: 508: _delay((unsigned long)((75)*(32000000/4000000.0)));
 13976  0030B4  0EC8               	movlw	200
 13977  0030B6                     u10097:
 13978  0030B6  2EE8               	decfsz	wreg,f,c
 13979  0030B8  D7FE               	bra	u10097
 13980                           
 13981                           ;Test.c: 509: LATAbits.LATA4 = 0;
 13982  0030BA  9889               	bcf	3977,4,c	;volatile
 13983                           
 13984                           ;Test.c: 510: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13985  0030BC  0E42               	movlw	66
 13986  0030BE                     u10107:
 13987  0030BE  2EE8               	decfsz	wreg,f,c
 13988  0030C0  D7FE               	bra	u10107
 13989  0030C2  D000               	nop2	
 13990  0030C4  0100               	movlb	0	; () banked
 13991  0030C6  4BB1               	infsnz	PusherTest@i& (0+255),f,b
 13992  0030C8  2BB2               	incf	(PusherTest@i+1)& (0+255),f,b
 13993  0030CA  D7E8               	goto	l8313
 13994  0030CC                     l8323:
 13995                           
 13996                           ;Test.c: 513: else if (PORTB >> 4 == 0b110){
 13997  0030CC  3881               	swapf	3969,w,c	;volatile
 13998  0030CE  0B0F               	andlw	15
 13999  0030D0  0A06               	xorlw	6
 14000  0030D2  A4D8               	btfss	status,2,c
 14001  0030D4  D01D               	goto	l1328
 14002                           
 14003                           ;Test.c: 514: for(int i = 0; i<3000; i++){
 14004  0030D6  0E00               	movlw	0
 14005  0030D8  0100               	movlb	0	; () banked
 14006  0030DA  6FB4               	movwf	(PusherTest@i_1798+1)& (0+255),b
 14007  0030DC  0E00               	movlw	0
 14008  0030DE  6FB3               	movwf	PusherTest@i_1798& (0+255),b
 14009  0030E0                     l8327:
 14010                           
 14011                           ; BSR set to: 0
 14012  0030E0  0100               	movlb	0	; () banked
 14013  0030E2  BFB4               	btfsc	(PusherTest@i_1798+1)& (0+255),7,b
 14014  0030E4  D008               	goto	l1326
 14015  0030E6  0EB8               	movlw	184
 14016  0030E8  0100               	movlb	0	; () banked
 14017  0030EA  5DB3               	subwf	PusherTest@i_1798& (0+255),w,b
 14018  0030EC  0E0B               	movlw	11
 14019  0030EE  0100               	movlb	0	; () banked
 14020  0030F0  59B4               	subwfb	(PusherTest@i_1798+1)& (0+255),w,b
 14021  0030F2  B0D8               	btfsc	status,0,c
 14022  0030F4  D00D               	goto	l1328
 14023  0030F6                     l1326:
 14024                           
 14025                           ; BSR set to: 0
 14026                           ;Test.c: 515: LATAbits.LATA4 = 1;
 14027  0030F6  8889               	bsf	3977,4,c	;volatile
 14028                           
 14029                           ; BSR set to: 0
 14030                           ;Test.c: 516: _delay((unsigned long)((58)*(32000000/4000000.0)));
 14031  0030F8  0E9A               	movlw	154
 14032  0030FA                     u10117:
 14033  0030FA  2EE8               	decfsz	wreg,f,c
 14034  0030FC  D7FE               	bra	u10117
 14035  0030FE  D000               	nop2	
 14036                           
 14037                           ;Test.c: 517: LATAbits.LATA4 = 0;
 14038  003100  9889               	bcf	3977,4,c	;volatile
 14039                           
 14040                           ;Test.c: 518: _delay((unsigned long)((42)*(32000000/4000000.0)));
 14041  003102  0E70               	movlw	112
 14042  003104                     u10127:
 14043  003104  2EE8               	decfsz	wreg,f,c
 14044  003106  D7FE               	bra	u10127
 14045  003108  0100               	movlb	0	; () banked
 14046  00310A  4BB3               	infsnz	PusherTest@i_1798& (0+255),f,b
 14047  00310C  2BB4               	incf	(PusherTest@i_1798+1)& (0+255),f,b
 14048  00310E  D7E8               	goto	l8327
 14049  003110                     l1328:
 14050  003110  A281               	btfss	3969,1,c	;volatile
 14051  003112  D7B3               	goto	l8301
 14052  003114  D7FD               	goto	l1328
 14053  003116                     l1319:
 14054                           
 14055                           ;Test.c: 523: }
 14056                           ;Test.c: 524: LATCbits.LATC5 = 0;
 14057  003116  9A8B               	bcf	3979,5,c	;volatile
 14058  003118  0012               	return		;funcret
 14059  00311A                     __end_of_PusherTest:
 14060                           	opt stack 0
 14061                           tblptru	equ	0xFF8
 14062                           tblptrh	equ	0xFF7
 14063                           tblptrl	equ	0xFF6
 14064                           tablat	equ	0xFF5
 14065                           prodh	equ	0xFF4
 14066                           prodl	equ	0xFF3
 14067                           intcon	equ	0xFF2
 14068                           intcon2	equ	0xFF1
 14069                           intcon3	equ	0xFF0
 14070                           postinc0	equ	0xFEE
 14071                           wreg	equ	0xFE8
 14072                           postdec1	equ	0xFE5
 14073                           fsr1l	equ	0xFE1
 14074                           indf2	equ	0xFDF
 14075                           postinc2	equ	0xFDE
 14076                           postdec2	equ	0xFDD
 14077                           fsr2h	equ	0xFDA
 14078                           fsr2l	equ	0xFD9
 14079                           status	equ	0xFD8
 14080                           
 14081 ;; *************** function _readADC *****************
 14082 ;; Defined at:
 14083 ;;		line 15 in file "ADCFunctionality.c"
 14084 ;; Parameters:    Size  Location     Type
 14085 ;;  channel         1    wreg     unsigned char 
 14086 ;; Auto vars:     Size  Location     Type
 14087 ;;  channel         1    1[BANK0 ] unsigned char 
 14088 ;; Return value:  Size  Location     Type
 14089 ;;                  1    wreg      void 
 14090 ;; Registers used:
 14091 ;;		wreg, status,2, status,0, cstack
 14092 ;; Tracked objects:
 14093 ;;		On entry : 0/0
 14094 ;;		On exit  : 0/0
 14095 ;;		Unchanged: 0/0
 14096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14098 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14099 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14100 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14101 ;;Total ram usage:        2 bytes
 14102 ;; Hardware stack levels used:    1
 14103 ;; Hardware stack levels required when called:    7
 14104 ;; This function calls:
 14105 ;;		Nothing
 14106 ;; This function is called by:
 14107 ;;		_readIR
 14108 ;;		_readMAG
 14109 ;;		_sensorTest
 14110 ;;		_PusherTest
 14111 ;; This function uses a non-reentrant model
 14112 ;;
 14113                           
 14114                           	psect	text44
 14115  0051DE                     __ptext44:
 14116                           	opt stack 0
 14117  0051DE                     _readADC:
 14118                           	opt stack 20
 14119                           
 14120                           ;incstack = 0
 14121                           ;readADC@channel stored from wreg
 14122  0051DE  0100               	movlb	0	; () banked
 14123  0051E0  6F81               	movwf	readADC@channel& (0+255),b
 14124                           
 14125                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 14126  0051E2  0100               	movlb	0	; () banked
 14127  0051E4  4581               	rlncf	readADC@channel& (0+255),w,b
 14128  0051E6  46E8               	rlncf	wreg,f,c
 14129  0051E8  0BFC               	andlw	252
 14130  0051EA  6EC2               	movwf	4034,c	;volatile
 14131                           
 14132                           ; BSR set to: 0
 14133                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 14134  0051EC  80C2               	bsf	4034,0,c	;volatile
 14135                           
 14136                           ; BSR set to: 0
 14137                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 14138  0051EE  82C2               	bsf	4034,1,c	;volatile
 14139                           
 14140                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 14141  0051F0  D009               	goto	l6123
 14142  0051F2                     l6121:
 14143  0051F2  0E34               	movlw	52
 14144  0051F4  0100               	movlb	0	; () banked
 14145  0051F6  6F80               	movwf	??_readADC& (0+255),b
 14146  0051F8  0EF1               	movlw	241
 14147  0051FA                     u10137:
 14148  0051FA  2EE8               	decfsz	wreg,f,c
 14149  0051FC  D7FE               	bra	u10137
 14150  0051FE  2F80               	decfsz	??_readADC& (0+255),f,b
 14151  005200  D7FC               	bra	u10137
 14152  005202  D000               	nop2	
 14153  005204                     l6123:
 14154  005204  A2C2               	btfss	4034,1,c	;volatile
 14155  005206  0012               	return	
 14156  005208  D7F4               	goto	l6121
 14157  00520A                     __end_of_readADC:
 14158                           	opt stack 0
 14159                           tblptru	equ	0xFF8
 14160                           tblptrh	equ	0xFF7
 14161                           tblptrl	equ	0xFF6
 14162                           tablat	equ	0xFF5
 14163                           prodh	equ	0xFF4
 14164                           prodl	equ	0xFF3
 14165                           intcon	equ	0xFF2
 14166                           intcon2	equ	0xFF1
 14167                           intcon3	equ	0xFF0
 14168                           postinc0	equ	0xFEE
 14169                           wreg	equ	0xFE8
 14170                           postdec1	equ	0xFE5
 14171                           fsr1l	equ	0xFE1
 14172                           indf2	equ	0xFDF
 14173                           postinc2	equ	0xFDE
 14174                           postdec2	equ	0xFDD
 14175                           fsr2h	equ	0xFDA
 14176                           fsr2l	equ	0xFD9
 14177                           status	equ	0xFD8
 14178                           
 14179 ;; *************** function _PortTests *****************
 14180 ;; Defined at:
 14181 ;;		line 413 in file "Test.c"
 14182 ;; Parameters:    Size  Location     Type
 14183 ;;		None
 14184 ;; Auto vars:     Size  Location     Type
 14185 ;;		None
 14186 ;; Return value:  Size  Location     Type
 14187 ;;                  1    wreg      void 
 14188 ;; Registers used:
 14189 ;;		wreg, status,2, status,0
 14190 ;; Tracked objects:
 14191 ;;		On entry : 0/0
 14192 ;;		On exit  : 0/0
 14193 ;;		Unchanged: 0/0
 14194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14197 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14198 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14199 ;;Total ram usage:        2 bytes
 14200 ;; Hardware stack levels used:    1
 14201 ;; Hardware stack levels required when called:    7
 14202 ;; This function calls:
 14203 ;;		Nothing
 14204 ;; This function is called by:
 14205 ;;		_Test
 14206 ;; This function uses a non-reentrant model
 14207 ;;
 14208                           
 14209                           	psect	text45
 14210  004790                     __ptext45:
 14211                           	opt stack 0
 14212  004790                     _PortTests:
 14213                           	opt stack 22
 14214  004790                     l1277:
 14215  004790  A281               	btfss	3969,1,c	;volatile
 14216  004792  D7FE               	goto	l1277
 14217                           
 14218                           ;Test.c: 417: var = PORTB >> 4;
 14219  004794  CF81 F080          	movff	3969,??_PortTests	;volatile
 14220  004798  0100               	movlb	0	; () banked
 14221  00479A  3B80               	swapf	??_PortTests& (0+255),f,b
 14222  00479C  0E0F               	movlw	15
 14223  00479E  1780               	andwf	??_PortTests& (0+255),f,b
 14224  0047A0  0100               	movlb	0	; () banked
 14225  0047A2  5180               	movf	??_PortTests& (0+255),w,b
 14226  0047A4  0100               	movlb	0	; () banked
 14227  0047A6  6FFA               	movwf	_var& (0+255),b
 14228  0047A8  6BFB               	clrf	(_var+1)& (0+255),b
 14229                           
 14230                           ;Test.c: 418: switch(var){
 14231  0047AA  D00C               	goto	l8341
 14232  0047AC                     l1281:
 14233                           
 14234                           ; BSR set to: 0
 14235                           ;Test.c: 420: LATEbits.LATE0 = 1;
 14236  0047AC  808D               	bsf	3981,0,c	;volatile
 14237                           
 14238                           ;Test.c: 421: break;
 14239  0047AE  D027               	goto	l1289
 14240  0047B0                     l1283:
 14241                           
 14242                           ; BSR set to: 0
 14243                           ;Test.c: 423: LATEbits.LATE1 = 1;
 14244  0047B0  828D               	bsf	3981,1,c	;volatile
 14245                           
 14246                           ;Test.c: 424: break;
 14247  0047B2  D025               	goto	l1289
 14248  0047B4                     l1284:
 14249                           
 14250                           ; BSR set to: 0
 14251                           ;Test.c: 426: LATDbits.LATD0 = 1;
 14252  0047B4  808C               	bsf	3980,0,c	;volatile
 14253                           
 14254                           ;Test.c: 427: break;
 14255  0047B6  D023               	goto	l1289
 14256  0047B8                     l1285:
 14257                           
 14258                           ; BSR set to: 0
 14259                           ;Test.c: 429: LATAbits.LATA3 = 1;
 14260  0047B8  8689               	bsf	3977,3,c	;volatile
 14261                           
 14262                           ;Test.c: 430: break;
 14263  0047BA  D021               	goto	l1289
 14264  0047BC                     l1286:
 14265                           
 14266                           ; BSR set to: 0
 14267                           ;Test.c: 432: LATAbits.LATA4 = 1;
 14268  0047BC  8889               	bsf	3977,4,c	;volatile
 14269                           
 14270                           ;Test.c: 433: break;
 14271  0047BE  D01F               	goto	l1289
 14272  0047C0                     l1287:
 14273                           
 14274                           ; BSR set to: 0
 14275                           ;Test.c: 435: LATAbits.LATA5 = 1;
 14276  0047C0  8A89               	bsf	3977,5,c	;volatile
 14277                           
 14278                           ; BSR set to: 0
 14279                           ;Test.c: 439: }
 14280                           
 14281                           ; BSR set to: 0
 14282                           ;Test.c: 438: break;
 14283                           
 14284                           ;Test.c: 437: default:
 14285                           
 14286                           ;Test.c: 436: break;
 14287  0047C2  D01D               	goto	l1289
 14288  0047C4                     l8341:
 14289                           
 14290                           ; BSR set to: 0
 14291  0047C4  C0FA  F080         	movff	_var,??_PortTests
 14292  0047C8  C0FB  F081         	movff	_var+1,??_PortTests+1
 14293                           
 14294                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14295                           ; Switch size 1, requested type "space"
 14296                           ; Number of cases is 1, Range of values is 0 to 0
 14297                           ; switch strategies available:
 14298                           ; Name         Instructions Cycles
 14299                           ; simple_byte            4     3 (average)
 14300                           ;	Chosen strategy is simple_byte
 14301  0047CC  0100               	movlb	0	; () banked
 14302  0047CE  5181               	movf	(??_PortTests+1)& (0+255),w,b
 14303  0047D0  0A00               	xorlw	0	; case 0
 14304  0047D2  A4D8               	btfss	status,2,c
 14305  0047D4  D014               	goto	l1289
 14306                           
 14307                           ; BSR set to: 0
 14308                           ; Switch size 1, requested type "space"
 14309                           ; Number of cases is 6, Range of values is 0 to 5
 14310                           ; switch strategies available:
 14311                           ; Name         Instructions Cycles
 14312                           ; simple_byte           19    10 (average)
 14313                           ;	Chosen strategy is simple_byte
 14314  0047D6  0100               	movlb	0	; () banked
 14315  0047D8  5180               	movf	??_PortTests& (0+255),w,b
 14316  0047DA  0A00               	xorlw	0	; case 0
 14317  0047DC  B4D8               	btfsc	status,2,c
 14318  0047DE  D7E6               	goto	l1281
 14319  0047E0  0A01               	xorlw	1	; case 1
 14320  0047E2  B4D8               	btfsc	status,2,c
 14321  0047E4  D7E5               	goto	l1283
 14322  0047E6  0A03               	xorlw	3	; case 2
 14323  0047E8  B4D8               	btfsc	status,2,c
 14324  0047EA  D7E4               	goto	l1284
 14325  0047EC  0A01               	xorlw	1	; case 3
 14326  0047EE  B4D8               	btfsc	status,2,c
 14327  0047F0  D7E3               	goto	l1285
 14328  0047F2  0A07               	xorlw	7	; case 4
 14329  0047F4  B4D8               	btfsc	status,2,c
 14330  0047F6  D7E2               	goto	l1286
 14331  0047F8  0A01               	xorlw	1	; case 5
 14332  0047FA  B4D8               	btfsc	status,2,c
 14333  0047FC  D7E1               	goto	l1287
 14334  0047FE                     l1289:
 14335  0047FE  B281               	btfsc	3969,1,c	;volatile
 14336  004800  D7FE               	goto	l1289
 14337                           
 14338                           ;Test.c: 441: __nop();
 14339  004802  F000               	nop	
 14340                           
 14341                           ;Test.c: 442: __nop();
 14342  004804  F000               	nop	
 14343                           
 14344                           ;Test.c: 443: LATA = 0x00;
 14345  004806  0E00               	movlw	0
 14346  004808  6E89               	movwf	3977,c	;volatile
 14347                           
 14348                           ;Test.c: 444: LATE = 0x00;
 14349  00480A  0E00               	movlw	0
 14350  00480C  6E8D               	movwf	3981,c	;volatile
 14351                           
 14352                           ;Test.c: 445: LATD = 0x00; }
 14353  00480E  0E00               	movlw	0
 14354  004810  6E8C               	movwf	3980,c	;volatile
 14355  004812  D7BE               	goto	l1277
 14356  004814                     __end_of_PortTests:
 14357                           	opt stack 0
 14358                           tblptru	equ	0xFF8
 14359                           tblptrh	equ	0xFF7
 14360                           tblptrl	equ	0xFF6
 14361                           tablat	equ	0xFF5
 14362                           prodh	equ	0xFF4
 14363                           prodl	equ	0xFF3
 14364                           intcon	equ	0xFF2
 14365                           intcon2	equ	0xFF1
 14366                           intcon3	equ	0xFF0
 14367                           postinc0	equ	0xFEE
 14368                           wreg	equ	0xFE8
 14369                           postdec1	equ	0xFE5
 14370                           fsr1l	equ	0xFE1
 14371                           indf2	equ	0xFDF
 14372                           postinc2	equ	0xFDE
 14373                           postdec2	equ	0xFDD
 14374                           fsr2h	equ	0xFDA
 14375                           fsr2l	equ	0xFD9
 14376                           status	equ	0xFD8
 14377                           
 14378 ;; *************** function _PortTestA5 *****************
 14379 ;; Defined at:
 14380 ;;		line 448 in file "Test.c"
 14381 ;; Parameters:    Size  Location     Type
 14382 ;;		None
 14383 ;; Auto vars:     Size  Location     Type
 14384 ;;		None
 14385 ;; Return value:  Size  Location     Type
 14386 ;;                  1    wreg      void 
 14387 ;; Registers used:
 14388 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14389 ;; Tracked objects:
 14390 ;;		On entry : 0/0
 14391 ;;		On exit  : 0/0
 14392 ;;		Unchanged: 0/0
 14393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14396 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14397 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14398 ;;Total ram usage:        1 bytes
 14399 ;; Hardware stack levels used:    1
 14400 ;; Hardware stack levels required when called:   10
 14401 ;; This function calls:
 14402 ;;		_lcdInst
 14403 ;;		_printf
 14404 ;; This function is called by:
 14405 ;;		_Test
 14406 ;; This function uses a non-reentrant model
 14407 ;;
 14408                           
 14409                           	psect	text46
 14410  004B6A                     __ptext46:
 14411                           	opt stack 0
 14412  004B6A                     _PortTestA5:
 14413                           	opt stack 19
 14414                           
 14415                           ;Test.c: 449: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14416                           
 14417                           ;incstack = 0
 14418  004B6A  0E01               	movlw	1
 14419  004B6C  ECF8  F029         	call	_lcdInst
 14420  004B70  0E68               	movlw	104
 14421  004B72  0100               	movlb	0	; () banked
 14422  004B74  6FAB               	movwf	??_PortTestA5& (0+255),b
 14423  004B76  0EE4               	movlw	228
 14424  004B78                     u10147:
 14425  004B78  2EE8               	decfsz	wreg,f,c
 14426  004B7A  D7FE               	bra	u10147
 14427  004B7C  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 14428  004B7E  D7FC               	bra	u10147
 14429  004B80  F000               	nop	
 14430  004B82  0E80               	movlw	128
 14431  004B84  ECF8  F029         	call	_lcdInst
 14432                           
 14433                           ;Test.c: 450: printf("D WILL RETURN    ");
 14434  004B88  0E25               	movlw	low STR_111
 14435  004B8A  0100               	movlb	0	; () banked
 14436  004B8C  6F8E               	movwf	printf@f& (0+255),b
 14437  004B8E  0EFB               	movlw	high STR_111
 14438  004B90  0100               	movlb	0	; () banked
 14439  004B92  6F8F               	movwf	(printf@f+1)& (0+255),b
 14440  004B94  EC08  F00B         	call	_printf	;wreg free
 14441                           
 14442                           ;Test.c: 451: lcdInst(0b11000000);;
 14443  004B98  0EC0               	movlw	192
 14444  004B9A  ECF8  F029         	call	_lcdInst
 14445                           
 14446                           ;Test.c: 452: printf("OTHER SETS RA5   ");
 14447  004B9E  0E37               	movlw	low STR_112
 14448  004BA0  0100               	movlb	0	; () banked
 14449  004BA2  6F8E               	movwf	printf@f& (0+255),b
 14450  004BA4  0EFB               	movlw	high STR_112
 14451  004BA6  0100               	movlb	0	; () banked
 14452  004BA8  6F8F               	movwf	(printf@f+1)& (0+255),b
 14453  004BAA  EC08  F00B         	call	_printf	;wreg free
 14454  004BAE                     l1298:
 14455  004BAE  A281               	btfss	3969,1,c	;volatile
 14456  004BB0  D7FE               	goto	l1298
 14457                           
 14458                           ;Test.c: 457: }
 14459                           ;Test.c: 458: if(PORTB >> 4 == 0b1111){
 14460  004BB2  3881               	swapf	3969,w,c	;volatile
 14461  004BB4  0B0F               	andlw	15
 14462  004BB6  0A0F               	xorlw	15
 14463  004BB8  B4D8               	btfsc	status,2,c
 14464  004BBA  0012               	return	
 14465                           
 14466                           ;Test.c: 461: else{
 14467                           ;Test.c: 462: LATBbits.LATB2 = 1;
 14468                           
 14469                           ;Test.c: 460: }
 14470                           
 14471                           ;Test.c: 459: break;
 14472  004BBC  848A               	bsf	3978,2,c	;volatile
 14473  004BBE                     l1304:
 14474  004BBE  B281               	btfsc	3969,1,c	;volatile
 14475  004BC0  D7FE               	goto	l1304
 14476                           
 14477                           ;Test.c: 465: }
 14478                           ;Test.c: 466: LATBbits.LATB2 = 0;
 14479  004BC2  948A               	bcf	3978,2,c	;volatile
 14480  004BC4  D7F4               	goto	l1298
 14481  004BC6                     __end_of_PortTestA5:
 14482                           	opt stack 0
 14483                           tblptru	equ	0xFF8
 14484                           tblptrh	equ	0xFF7
 14485                           tblptrl	equ	0xFF6
 14486                           tablat	equ	0xFF5
 14487                           prodh	equ	0xFF4
 14488                           prodl	equ	0xFF3
 14489                           intcon	equ	0xFF2
 14490                           intcon2	equ	0xFF1
 14491                           intcon3	equ	0xFF0
 14492                           postinc0	equ	0xFEE
 14493                           wreg	equ	0xFE8
 14494                           postdec1	equ	0xFE5
 14495                           fsr1l	equ	0xFE1
 14496                           indf2	equ	0xFDF
 14497                           postinc2	equ	0xFDE
 14498                           postdec2	equ	0xFDD
 14499                           fsr2h	equ	0xFDA
 14500                           fsr2l	equ	0xFD9
 14501                           status	equ	0xFD8
 14502                           
 14503 ;; *************** function _EEPROMTest *****************
 14504 ;; Defined at:
 14505 ;;		line 581 in file "Test.c"
 14506 ;; Parameters:    Size  Location     Type
 14507 ;;		None
 14508 ;; Auto vars:     Size  Location     Type
 14509 ;;		None
 14510 ;; Return value:  Size  Location     Type
 14511 ;;                  1    wreg      void 
 14512 ;; Registers used:
 14513 ;;		None
 14514 ;; Tracked objects:
 14515 ;;		On entry : 0/0
 14516 ;;		On exit  : 0/0
 14517 ;;		Unchanged: 0/0
 14518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14523 ;;Total ram usage:        0 bytes
 14524 ;; Hardware stack levels used:    1
 14525 ;; Hardware stack levels required when called:    7
 14526 ;; This function calls:
 14527 ;;		Nothing
 14528 ;; This function is called by:
 14529 ;;		_Test
 14530 ;; This function uses a non-reentrant model
 14531 ;;
 14532                           
 14533                           	psect	text47
 14534  005454                     __ptext47:
 14535                           	opt stack 0
 14536  005454                     _EEPROMTest:
 14537                           	opt stack 22
 14538                           
 14539                           ;incstack = 0
 14540  005454  0012               	return		;funcret
 14541  005456                     __end_of_EEPROMTest:
 14542                           	opt stack 0
 14543                           tblptru	equ	0xFF8
 14544                           tblptrh	equ	0xFF7
 14545                           tblptrl	equ	0xFF6
 14546                           tablat	equ	0xFF5
 14547                           prodh	equ	0xFF4
 14548                           prodl	equ	0xFF3
 14549                           intcon	equ	0xFF2
 14550                           intcon2	equ	0xFF1
 14551                           intcon3	equ	0xFF0
 14552                           postinc0	equ	0xFEE
 14553                           wreg	equ	0xFE8
 14554                           postdec1	equ	0xFE5
 14555                           fsr1l	equ	0xFE1
 14556                           indf2	equ	0xFDF
 14557                           postinc2	equ	0xFDE
 14558                           postdec2	equ	0xFDD
 14559                           fsr2h	equ	0xFDA
 14560                           fsr2l	equ	0xFD9
 14561                           status	equ	0xFD8
 14562                           
 14563 ;; *************** function _BothServos *****************
 14564 ;; Defined at:
 14565 ;;		line 356 in file "Test.c"
 14566 ;; Parameters:    Size  Location     Type
 14567 ;;		None
 14568 ;; Auto vars:     Size  Location     Type
 14569 ;;		None
 14570 ;; Return value:  Size  Location     Type
 14571 ;;                  1    wreg      void 
 14572 ;; Registers used:
 14573 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14574 ;; Tracked objects:
 14575 ;;		On entry : 0/0
 14576 ;;		On exit  : 0/0
 14577 ;;		Unchanged: 0/0
 14578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14581 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14582 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14583 ;;Total ram usage:        2 bytes
 14584 ;; Hardware stack levels used:    1
 14585 ;; Hardware stack levels required when called:   10
 14586 ;; This function calls:
 14587 ;;		_initServos
 14588 ;;		_lcdInst
 14589 ;;		_printf
 14590 ;;		_updateServoPosition
 14591 ;; This function is called by:
 14592 ;;		_Test
 14593 ;; This function uses a non-reentrant model
 14594 ;;
 14595                           
 14596                           	psect	text48
 14597  001A48                     __ptext48:
 14598                           	opt stack 0
 14599  001A48                     _BothServos:
 14600                           	opt stack 19
 14601                           
 14602                           ;Test.c: 357: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14603                           
 14604                           ;incstack = 0
 14605  001A48  0E01               	movlw	1
 14606  001A4A  ECF8  F029         	call	_lcdInst
 14607  001A4E  0E68               	movlw	104
 14608  001A50  0100               	movlb	0	; () banked
 14609  001A52  6FAB               	movwf	??_BothServos& (0+255),b
 14610  001A54  0EE4               	movlw	228
 14611  001A56                     u10157:
 14612  001A56  2EE8               	decfsz	wreg,f,c
 14613  001A58  D7FE               	bra	u10157
 14614  001A5A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14615  001A5C  D7FC               	bra	u10157
 14616  001A5E  F000               	nop	
 14617  001A60  0E80               	movlw	128
 14618  001A62  ECF8  F029         	call	_lcdInst
 14619                           
 14620                           ;Test.c: 358: printf("TST: BOTH SERVOS");
 14621  001A66  0EB3               	movlw	low STR_110
 14622  001A68  0100               	movlb	0	; () banked
 14623  001A6A  6F8E               	movwf	printf@f& (0+255),b
 14624  001A6C  0EFC               	movlw	high STR_110
 14625  001A6E  0100               	movlb	0	; () banked
 14626  001A70  6F8F               	movwf	(printf@f+1)& (0+255),b
 14627  001A72  EC08  F00B         	call	_printf	;wreg free
 14628                           
 14629                           ;Test.c: 359: TMR1ON = 1;
 14630  001A76  80CD               	bsf	4045,0,c	;volatile
 14631                           
 14632                           ;Test.c: 360: TMR3ON = 1;
 14633  001A78  80B1               	bsf	4017,0,c	;volatile
 14634                           
 14635                           ;Test.c: 361: machine_state = Sorting_state;
 14636  001A7A  0E01               	movlw	1
 14637  001A7C  0100               	movlb	0	; () banked
 14638  001A7E  6FFC               	movwf	_machine_state& (0+255),b
 14639                           
 14640                           ; BSR set to: 0
 14641                           ;Test.c: 362: was_low_1 = 0;
 14642  001A80  0E00               	movlw	0
 14643  001A82  6E7A               	movwf	_was_low_1+1,c	;volatile
 14644  001A84  0E00               	movlw	0
 14645  001A86  6E79               	movwf	_was_low_1,c	;volatile
 14646                           
 14647                           ; BSR set to: 0
 14648                           ;Test.c: 363: was_low_3 = 0;
 14649  001A88  0E00               	movlw	0
 14650  001A8A  6E7C               	movwf	_was_low_3+1,c	;volatile
 14651  001A8C  0E00               	movlw	0
 14652  001A8E  6E7B               	movwf	_was_low_3,c	;volatile
 14653                           
 14654                           ; BSR set to: 0
 14655                           ;Test.c: 369: initServos();
 14656  001A90  ECE3  F025         	call	_initServos	;wreg free
 14657                           
 14658                           ;Test.c: 370: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14659  001A94  0E3D               	movlw	61
 14660  001A96  0100               	movlb	0	; () banked
 14661  001A98  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14662  001A9A  0EE1               	movlw	225
 14663  001A9C  0100               	movlb	0	; () banked
 14664  001A9E  6FAB               	movwf	??_BothServos& (0+255),b
 14665  001AA0  0E3F               	movlw	63
 14666  001AA2                     u10167:
 14667  001AA2  2EE8               	decfsz	wreg,f,c
 14668  001AA4  D7FE               	bra	u10167
 14669  001AA6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14670  001AA8  D7FC               	bra	u10167
 14671  001AAA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14672  001AAC  D7FA               	bra	u10167
 14673  001AAE  D000               	nop2	
 14674                           
 14675                           ;Test.c: 372: updateServoPosition(500, 1);
 14676  001AB0  0E01               	movlw	1
 14677  001AB2  0100               	movlb	0	; () banked
 14678  001AB4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14679  001AB6  0EF4               	movlw	244
 14680  001AB8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14681  001ABA  0E00               	movlw	0
 14682  001ABC  0100               	movlb	0	; () banked
 14683  001ABE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14684  001AC0  0E01               	movlw	1
 14685  001AC2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14686  001AC4  EC43  F023         	call	_updateServoPosition	;wreg free
 14687                           
 14688                           ;Test.c: 373: updateServoPosition(1050, 3);
 14689  001AC8  0E04               	movlw	4
 14690  001ACA  0100               	movlb	0	; () banked
 14691  001ACC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14692  001ACE  0E1A               	movlw	26
 14693  001AD0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14694  001AD2  0E00               	movlw	0
 14695  001AD4  0100               	movlb	0	; () banked
 14696  001AD6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14697  001AD8  0E03               	movlw	3
 14698  001ADA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14699  001ADC  EC43  F023         	call	_updateServoPosition	;wreg free
 14700                           
 14701                           ;Test.c: 374: _delay((unsigned long)((750)*(32000000/4000.0)));
 14702  001AE0  0E1F               	movlw	31
 14703  001AE2  0100               	movlb	0	; () banked
 14704  001AE4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14705  001AE6  0E71               	movlw	113
 14706  001AE8  0100               	movlb	0	; () banked
 14707  001AEA  6FAB               	movwf	??_BothServos& (0+255),b
 14708  001AEC  0E1E               	movlw	30
 14709  001AEE                     u10177:
 14710  001AEE  2EE8               	decfsz	wreg,f,c
 14711  001AF0  D7FE               	bra	u10177
 14712  001AF2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14713  001AF4  D7FC               	bra	u10177
 14714  001AF6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14715  001AF8  D7FA               	bra	u10177
 14716  001AFA  F000               	nop	
 14717                           
 14718                           ;Test.c: 375: updateServoPosition(1260, 3);
 14719  001AFC  0E04               	movlw	4
 14720  001AFE  0100               	movlb	0	; () banked
 14721  001B00  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14722  001B02  0EEC               	movlw	236
 14723  001B04  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14724  001B06  0E00               	movlw	0
 14725  001B08  0100               	movlb	0	; () banked
 14726  001B0A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14727  001B0C  0E03               	movlw	3
 14728  001B0E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14729  001B10  EC43  F023         	call	_updateServoPosition	;wreg free
 14730                           
 14731                           ;Test.c: 376: _delay((unsigned long)((700)*(32000000/4000.0)));
 14732  001B14  0E1D               	movlw	29
 14733  001B16  0100               	movlb	0	; () banked
 14734  001B18  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14735  001B1A  0E69               	movlw	105
 14736  001B1C  0100               	movlb	0	; () banked
 14737  001B1E  6FAB               	movwf	??_BothServos& (0+255),b
 14738  001B20  0EA5               	movlw	165
 14739  001B22                     u10187:
 14740  001B22  2EE8               	decfsz	wreg,f,c
 14741  001B24  D7FE               	bra	u10187
 14742  001B26  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14743  001B28  D7FC               	bra	u10187
 14744  001B2A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14745  001B2C  D7FA               	bra	u10187
 14746                           
 14747                           ;Test.c: 377: updateServoPosition(1050, 3);
 14748  001B2E  0E04               	movlw	4
 14749  001B30  0100               	movlb	0	; () banked
 14750  001B32  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14751  001B34  0E1A               	movlw	26
 14752  001B36  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14753  001B38  0E00               	movlw	0
 14754  001B3A  0100               	movlb	0	; () banked
 14755  001B3C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14756  001B3E  0E03               	movlw	3
 14757  001B40  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14758  001B42  EC43  F023         	call	_updateServoPosition	;wreg free
 14759                           
 14760                           ;Test.c: 378: _delay((unsigned long)((750)*(32000000/4000.0)));
 14761  001B46  0E1F               	movlw	31
 14762  001B48  0100               	movlb	0	; () banked
 14763  001B4A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14764  001B4C  0E71               	movlw	113
 14765  001B4E  0100               	movlb	0	; () banked
 14766  001B50  6FAB               	movwf	??_BothServos& (0+255),b
 14767  001B52  0E1E               	movlw	30
 14768  001B54                     u10197:
 14769  001B54  2EE8               	decfsz	wreg,f,c
 14770  001B56  D7FE               	bra	u10197
 14771  001B58  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14772  001B5A  D7FC               	bra	u10197
 14773  001B5C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14774  001B5E  D7FA               	bra	u10197
 14775  001B60  F000               	nop	
 14776                           
 14777                           ;Test.c: 380: updateServoPosition(850, 1);
 14778  001B62  0E03               	movlw	3
 14779  001B64  0100               	movlb	0	; () banked
 14780  001B66  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14781  001B68  0E52               	movlw	82
 14782  001B6A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14783  001B6C  0E00               	movlw	0
 14784  001B6E  0100               	movlb	0	; () banked
 14785  001B70  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14786  001B72  0E01               	movlw	1
 14787  001B74  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14788  001B76  EC43  F023         	call	_updateServoPosition	;wreg free
 14789                           
 14790                           ;Test.c: 381: updateServoPosition(1050, 3);
 14791  001B7A  0E04               	movlw	4
 14792  001B7C  0100               	movlb	0	; () banked
 14793  001B7E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14794  001B80  0E1A               	movlw	26
 14795  001B82  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14796  001B84  0E00               	movlw	0
 14797  001B86  0100               	movlb	0	; () banked
 14798  001B88  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14799  001B8A  0E03               	movlw	3
 14800  001B8C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14801  001B8E  EC43  F023         	call	_updateServoPosition	;wreg free
 14802                           
 14803                           ;Test.c: 382: _delay((unsigned long)((750)*(32000000/4000.0)));
 14804  001B92  0E1F               	movlw	31
 14805  001B94  0100               	movlb	0	; () banked
 14806  001B96  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14807  001B98  0E71               	movlw	113
 14808  001B9A  0100               	movlb	0	; () banked
 14809  001B9C  6FAB               	movwf	??_BothServos& (0+255),b
 14810  001B9E  0E1E               	movlw	30
 14811  001BA0                     u10207:
 14812  001BA0  2EE8               	decfsz	wreg,f,c
 14813  001BA2  D7FE               	bra	u10207
 14814  001BA4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14815  001BA6  D7FC               	bra	u10207
 14816  001BA8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14817  001BAA  D7FA               	bra	u10207
 14818  001BAC  F000               	nop	
 14819                           
 14820                           ;Test.c: 383: updateServoPosition(1260, 3);
 14821  001BAE  0E04               	movlw	4
 14822  001BB0  0100               	movlb	0	; () banked
 14823  001BB2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14824  001BB4  0EEC               	movlw	236
 14825  001BB6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14826  001BB8  0E00               	movlw	0
 14827  001BBA  0100               	movlb	0	; () banked
 14828  001BBC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14829  001BBE  0E03               	movlw	3
 14830  001BC0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14831  001BC2  EC43  F023         	call	_updateServoPosition	;wreg free
 14832                           
 14833                           ;Test.c: 384: _delay((unsigned long)((700)*(32000000/4000.0)));
 14834  001BC6  0E1D               	movlw	29
 14835  001BC8  0100               	movlb	0	; () banked
 14836  001BCA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14837  001BCC  0E69               	movlw	105
 14838  001BCE  0100               	movlb	0	; () banked
 14839  001BD0  6FAB               	movwf	??_BothServos& (0+255),b
 14840  001BD2  0EA5               	movlw	165
 14841  001BD4                     u10217:
 14842  001BD4  2EE8               	decfsz	wreg,f,c
 14843  001BD6  D7FE               	bra	u10217
 14844  001BD8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14845  001BDA  D7FC               	bra	u10217
 14846  001BDC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14847  001BDE  D7FA               	bra	u10217
 14848                           
 14849                           ;Test.c: 385: updateServoPosition(1050, 3);
 14850  001BE0  0E04               	movlw	4
 14851  001BE2  0100               	movlb	0	; () banked
 14852  001BE4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14853  001BE6  0E1A               	movlw	26
 14854  001BE8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14855  001BEA  0E00               	movlw	0
 14856  001BEC  0100               	movlb	0	; () banked
 14857  001BEE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14858  001BF0  0E03               	movlw	3
 14859  001BF2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14860  001BF4  EC43  F023         	call	_updateServoPosition	;wreg free
 14861                           
 14862                           ;Test.c: 386: _delay((unsigned long)((750)*(32000000/4000.0)));
 14863  001BF8  0E1F               	movlw	31
 14864  001BFA  0100               	movlb	0	; () banked
 14865  001BFC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14866  001BFE  0E71               	movlw	113
 14867  001C00  0100               	movlb	0	; () banked
 14868  001C02  6FAB               	movwf	??_BothServos& (0+255),b
 14869  001C04  0E1E               	movlw	30
 14870  001C06                     u10227:
 14871  001C06  2EE8               	decfsz	wreg,f,c
 14872  001C08  D7FE               	bra	u10227
 14873  001C0A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14874  001C0C  D7FC               	bra	u10227
 14875  001C0E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14876  001C10  D7FA               	bra	u10227
 14877  001C12  F000               	nop	
 14878                           
 14879                           ;Test.c: 388: updateServoPosition(1200, 1);
 14880  001C14  0E04               	movlw	4
 14881  001C16  0100               	movlb	0	; () banked
 14882  001C18  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14883  001C1A  0EB0               	movlw	176
 14884  001C1C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14885  001C1E  0E00               	movlw	0
 14886  001C20  0100               	movlb	0	; () banked
 14887  001C22  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14888  001C24  0E01               	movlw	1
 14889  001C26  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14890  001C28  EC43  F023         	call	_updateServoPosition	;wreg free
 14891                           
 14892                           ;Test.c: 389: updateServoPosition(1050, 3);
 14893  001C2C  0E04               	movlw	4
 14894  001C2E  0100               	movlb	0	; () banked
 14895  001C30  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14896  001C32  0E1A               	movlw	26
 14897  001C34  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14898  001C36  0E00               	movlw	0
 14899  001C38  0100               	movlb	0	; () banked
 14900  001C3A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14901  001C3C  0E03               	movlw	3
 14902  001C3E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14903  001C40  EC43  F023         	call	_updateServoPosition	;wreg free
 14904                           
 14905                           ;Test.c: 390: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14906  001C44  0E3D               	movlw	61
 14907  001C46  0100               	movlb	0	; () banked
 14908  001C48  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14909  001C4A  0EE1               	movlw	225
 14910  001C4C  0100               	movlb	0	; () banked
 14911  001C4E  6FAB               	movwf	??_BothServos& (0+255),b
 14912  001C50  0E3F               	movlw	63
 14913  001C52                     u10237:
 14914  001C52  2EE8               	decfsz	wreg,f,c
 14915  001C54  D7FE               	bra	u10237
 14916  001C56  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14917  001C58  D7FC               	bra	u10237
 14918  001C5A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14919  001C5C  D7FA               	bra	u10237
 14920  001C5E  D000               	nop2	
 14921                           
 14922                           ;Test.c: 392: updateServoPosition(1670, 1);
 14923  001C60  0E06               	movlw	6
 14924  001C62  0100               	movlb	0	; () banked
 14925  001C64  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14926  001C66  0E86               	movlw	134
 14927  001C68  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14928  001C6A  0E00               	movlw	0
 14929  001C6C  0100               	movlb	0	; () banked
 14930  001C6E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14931  001C70  0E01               	movlw	1
 14932  001C72  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14933  001C74  EC43  F023         	call	_updateServoPosition	;wreg free
 14934                           
 14935                           ;Test.c: 393: updateServoPosition(1050, 3);
 14936  001C78  0E04               	movlw	4
 14937  001C7A  0100               	movlb	0	; () banked
 14938  001C7C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14939  001C7E  0E1A               	movlw	26
 14940  001C80  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14941  001C82  0E00               	movlw	0
 14942  001C84  0100               	movlb	0	; () banked
 14943  001C86  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14944  001C88  0E03               	movlw	3
 14945  001C8A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14946  001C8C  EC43  F023         	call	_updateServoPosition	;wreg free
 14947                           
 14948                           ;Test.c: 394: _delay((unsigned long)((750)*(32000000/4000.0)));
 14949  001C90  0E1F               	movlw	31
 14950  001C92  0100               	movlb	0	; () banked
 14951  001C94  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14952  001C96  0E71               	movlw	113
 14953  001C98  0100               	movlb	0	; () banked
 14954  001C9A  6FAB               	movwf	??_BothServos& (0+255),b
 14955  001C9C  0E1E               	movlw	30
 14956  001C9E                     u10247:
 14957  001C9E  2EE8               	decfsz	wreg,f,c
 14958  001CA0  D7FE               	bra	u10247
 14959  001CA2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14960  001CA4  D7FC               	bra	u10247
 14961  001CA6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14962  001CA8  D7FA               	bra	u10247
 14963  001CAA  F000               	nop	
 14964                           
 14965                           ;Test.c: 395: updateServoPosition(1390, 3);
 14966  001CAC  0E05               	movlw	5
 14967  001CAE  0100               	movlb	0	; () banked
 14968  001CB0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14969  001CB2  0E6E               	movlw	110
 14970  001CB4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14971  001CB6  0E00               	movlw	0
 14972  001CB8  0100               	movlb	0	; () banked
 14973  001CBA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14974  001CBC  0E03               	movlw	3
 14975  001CBE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14976  001CC0  EC43  F023         	call	_updateServoPosition	;wreg free
 14977                           
 14978                           ;Test.c: 396: _delay((unsigned long)((700)*(32000000/4000.0)));
 14979  001CC4  0E1D               	movlw	29
 14980  001CC6  0100               	movlb	0	; () banked
 14981  001CC8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14982  001CCA  0E69               	movlw	105
 14983  001CCC  0100               	movlb	0	; () banked
 14984  001CCE  6FAB               	movwf	??_BothServos& (0+255),b
 14985  001CD0  0EA5               	movlw	165
 14986  001CD2                     u10257:
 14987  001CD2  2EE8               	decfsz	wreg,f,c
 14988  001CD4  D7FE               	bra	u10257
 14989  001CD6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14990  001CD8  D7FC               	bra	u10257
 14991  001CDA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14992  001CDC  D7FA               	bra	u10257
 14993                           
 14994                           ;Test.c: 397: updateServoPosition(1050, 3);
 14995  001CDE  0E04               	movlw	4
 14996  001CE0  0100               	movlb	0	; () banked
 14997  001CE2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14998  001CE4  0E1A               	movlw	26
 14999  001CE6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15000  001CE8  0E00               	movlw	0
 15001  001CEA  0100               	movlb	0	; () banked
 15002  001CEC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15003  001CEE  0E03               	movlw	3
 15004  001CF0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15005  001CF2  EC43  F023         	call	_updateServoPosition	;wreg free
 15006                           
 15007                           ;Test.c: 398: _delay((unsigned long)((750)*(32000000/4000.0)));
 15008  001CF6  0E1F               	movlw	31
 15009  001CF8  0100               	movlb	0	; () banked
 15010  001CFA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15011  001CFC  0E71               	movlw	113
 15012  001CFE  0100               	movlb	0	; () banked
 15013  001D00  6FAB               	movwf	??_BothServos& (0+255),b
 15014  001D02  0E1E               	movlw	30
 15015  001D04                     u10267:
 15016  001D04  2EE8               	decfsz	wreg,f,c
 15017  001D06  D7FE               	bra	u10267
 15018  001D08  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15019  001D0A  D7FC               	bra	u10267
 15020  001D0C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15021  001D0E  D7FA               	bra	u10267
 15022  001D10  F000               	nop	
 15023                           
 15024                           ;Test.c: 400: updateServoPosition(2400, 1);
 15025  001D12  0E09               	movlw	9
 15026  001D14  0100               	movlb	0	; () banked
 15027  001D16  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15028  001D18  0E60               	movlw	96
 15029  001D1A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15030  001D1C  0E00               	movlw	0
 15031  001D1E  0100               	movlb	0	; () banked
 15032  001D20  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15033  001D22  0E01               	movlw	1
 15034  001D24  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15035  001D26  EC43  F023         	call	_updateServoPosition	;wreg free
 15036                           
 15037                           ;Test.c: 401: updateServoPosition(1050, 3);
 15038  001D2A  0E04               	movlw	4
 15039  001D2C  0100               	movlb	0	; () banked
 15040  001D2E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15041  001D30  0E1A               	movlw	26
 15042  001D32  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15043  001D34  0E00               	movlw	0
 15044  001D36  0100               	movlb	0	; () banked
 15045  001D38  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15046  001D3A  0E03               	movlw	3
 15047  001D3C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15048  001D3E  EC43  F023         	call	_updateServoPosition	;wreg free
 15049                           
 15050                           ;Test.c: 402: _delay((unsigned long)((750)*(32000000/4000.0)));
 15051  001D42  0E1F               	movlw	31
 15052  001D44  0100               	movlb	0	; () banked
 15053  001D46  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15054  001D48  0E71               	movlw	113
 15055  001D4A  0100               	movlb	0	; () banked
 15056  001D4C  6FAB               	movwf	??_BothServos& (0+255),b
 15057  001D4E  0E1E               	movlw	30
 15058  001D50                     u10277:
 15059  001D50  2EE8               	decfsz	wreg,f,c
 15060  001D52  D7FE               	bra	u10277
 15061  001D54  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15062  001D56  D7FC               	bra	u10277
 15063  001D58  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15064  001D5A  D7FA               	bra	u10277
 15065  001D5C  F000               	nop	
 15066                           
 15067                           ;Test.c: 403: updateServoPosition(1390, 3);
 15068  001D5E  0E05               	movlw	5
 15069  001D60  0100               	movlb	0	; () banked
 15070  001D62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15071  001D64  0E6E               	movlw	110
 15072  001D66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15073  001D68  0E00               	movlw	0
 15074  001D6A  0100               	movlb	0	; () banked
 15075  001D6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15076  001D6E  0E03               	movlw	3
 15077  001D70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15078  001D72  EC43  F023         	call	_updateServoPosition	;wreg free
 15079                           
 15080                           ;Test.c: 404: _delay((unsigned long)((700)*(32000000/4000.0)));
 15081  001D76  0E1D               	movlw	29
 15082  001D78  0100               	movlb	0	; () banked
 15083  001D7A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15084  001D7C  0E69               	movlw	105
 15085  001D7E  0100               	movlb	0	; () banked
 15086  001D80  6FAB               	movwf	??_BothServos& (0+255),b
 15087  001D82  0EA5               	movlw	165
 15088  001D84                     u10287:
 15089  001D84  2EE8               	decfsz	wreg,f,c
 15090  001D86  D7FE               	bra	u10287
 15091  001D88  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15092  001D8A  D7FC               	bra	u10287
 15093  001D8C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15094  001D8E  D7FA               	bra	u10287
 15095                           
 15096                           ;Test.c: 405: updateServoPosition(1050, 3);
 15097  001D90  0E04               	movlw	4
 15098  001D92  0100               	movlb	0	; () banked
 15099  001D94  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15100  001D96  0E1A               	movlw	26
 15101  001D98  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15102  001D9A  0E00               	movlw	0
 15103  001D9C  0100               	movlb	0	; () banked
 15104  001D9E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15105  001DA0  0E03               	movlw	3
 15106  001DA2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15107  001DA4  EC43  F023         	call	_updateServoPosition	;wreg free
 15108                           
 15109                           ;Test.c: 406: _delay((unsigned long)((750)*(32000000/4000.0)));
 15110  001DA8  0E1F               	movlw	31
 15111  001DAA  0100               	movlb	0	; () banked
 15112  001DAC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15113  001DAE  0E71               	movlw	113
 15114  001DB0  0100               	movlb	0	; () banked
 15115  001DB2  6FAB               	movwf	??_BothServos& (0+255),b
 15116  001DB4  0E1E               	movlw	30
 15117  001DB6                     u10297:
 15118  001DB6  2EE8               	decfsz	wreg,f,c
 15119  001DB8  D7FE               	bra	u10297
 15120  001DBA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15121  001DBC  D7FC               	bra	u10297
 15122  001DBE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15123  001DC0  D7FA               	bra	u10297
 15124  001DC2  F000               	nop	
 15125                           
 15126                           ;Test.c: 408: TMR1ON = 0;
 15127  001DC4  90CD               	bcf	4045,0,c	;volatile
 15128                           
 15129                           ;Test.c: 409: TMR3ON = 0;
 15130  001DC6  90B1               	bcf	4017,0,c	;volatile
 15131                           
 15132                           ;Test.c: 410: (INTCONbits.GIE = 0);
 15133  001DC8  9EF2               	bcf	intcon,7,c	;volatile
 15134  001DCA  0012               	return		;funcret
 15135  001DCC                     __end_of_BothServos:
 15136                           	opt stack 0
 15137                           tblptru	equ	0xFF8
 15138                           tblptrh	equ	0xFF7
 15139                           tblptrl	equ	0xFF6
 15140                           tablat	equ	0xFF5
 15141                           prodh	equ	0xFF4
 15142                           prodl	equ	0xFF3
 15143                           intcon	equ	0xFF2
 15144                           intcon2	equ	0xFF1
 15145                           intcon3	equ	0xFF0
 15146                           postinc0	equ	0xFEE
 15147                           wreg	equ	0xFE8
 15148                           postdec1	equ	0xFE5
 15149                           fsr1l	equ	0xFE1
 15150                           indf2	equ	0xFDF
 15151                           postinc2	equ	0xFDE
 15152                           postdec2	equ	0xFDD
 15153                           fsr2h	equ	0xFDA
 15154                           fsr2l	equ	0xFD9
 15155                           status	equ	0xFD8
 15156                           
 15157 ;; *************** function _initServos *****************
 15158 ;; Defined at:
 15159 ;;		line 428 in file "sort.c"
 15160 ;; Parameters:    Size  Location     Type
 15161 ;;		None
 15162 ;; Auto vars:     Size  Location     Type
 15163 ;;		None
 15164 ;; Return value:  Size  Location     Type
 15165 ;;                  1    wreg      void 
 15166 ;; Registers used:
 15167 ;;		wreg, status,2, status,0, cstack
 15168 ;; Tracked objects:
 15169 ;;		On entry : 0/0
 15170 ;;		On exit  : 0/0
 15171 ;;		Unchanged: 0/0
 15172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15175 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15176 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15177 ;;Total ram usage:        1 bytes
 15178 ;; Hardware stack levels used:    1
 15179 ;; Hardware stack levels required when called:    8
 15180 ;; This function calls:
 15181 ;;		_updateServoPosition
 15182 ;; This function is called by:
 15183 ;;		_Loading
 15184 ;;		_BothServos
 15185 ;; This function uses a non-reentrant model
 15186 ;;
 15187                           
 15188                           	psect	text49
 15189  004BC6                     __ptext49:
 15190                           	opt stack 0
 15191  004BC6                     _initServos:
 15192                           	opt stack 20
 15193                           
 15194                           ;sort.c: 429: updateServoPosition(1200, 1);
 15195                           
 15196                           ;incstack = 0
 15197  004BC6  0E04               	movlw	4
 15198  004BC8  0100               	movlb	0	; () banked
 15199  004BCA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15200  004BCC  0EB0               	movlw	176
 15201  004BCE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15202  004BD0  0E00               	movlw	0
 15203  004BD2  0100               	movlb	0	; () banked
 15204  004BD4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15205  004BD6  0E01               	movlw	1
 15206  004BD8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15207  004BDA  EC43  F023         	call	_updateServoPosition	;wreg free
 15208                           
 15209                           ;sort.c: 430: updateServoPosition(1050, 3);
 15210  004BDE  0E04               	movlw	4
 15211  004BE0  0100               	movlb	0	; () banked
 15212  004BE2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15213  004BE4  0E1A               	movlw	26
 15214  004BE6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15215  004BE8  0E00               	movlw	0
 15216  004BEA  0100               	movlb	0	; () banked
 15217  004BEC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15218  004BEE  0E03               	movlw	3
 15219  004BF0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15220  004BF2  EC43  F023         	call	_updateServoPosition	;wreg free
 15221                           
 15222                           ;sort.c: 431: TMR1ON = 1;
 15223  004BF6  80CD               	bsf	4045,0,c	;volatile
 15224                           
 15225                           ;sort.c: 432: was_low_1 = 0;
 15226  004BF8  0E00               	movlw	0
 15227  004BFA  6E7A               	movwf	_was_low_1+1,c	;volatile
 15228  004BFC  0E00               	movlw	0
 15229  004BFE  6E79               	movwf	_was_low_1,c	;volatile
 15230                           
 15231                           ;sort.c: 433: _delay((unsigned long)((5)*(32000000/4000.0)));
 15232  004C00  0E34               	movlw	52
 15233  004C02  0100               	movlb	0	; () banked
 15234  004C04  6F88               	movwf	??_initServos& (0+255),b
 15235  004C06  0EF1               	movlw	241
 15236  004C08                     u10307:
 15237  004C08  2EE8               	decfsz	wreg,f,c
 15238  004C0A  D7FE               	bra	u10307
 15239  004C0C  2F88               	decfsz	??_initServos& (0+255),f,b
 15240  004C0E  D7FC               	bra	u10307
 15241  004C10  D000               	nop2	
 15242                           
 15243                           ;sort.c: 434: TMR3ON = 1;
 15244  004C12  80B1               	bsf	4017,0,c	;volatile
 15245                           
 15246                           ;sort.c: 435: was_low_3 = 0;
 15247  004C14  0E00               	movlw	0
 15248  004C16  6E7C               	movwf	_was_low_3+1,c	;volatile
 15249  004C18  0E00               	movlw	0
 15250  004C1A  6E7B               	movwf	_was_low_3,c	;volatile
 15251                           
 15252                           ;sort.c: 437: LATCbits.LATC0 = 1;
 15253  004C1C  808B               	bsf	3979,0,c	;volatile
 15254  004C1E  0012               	return		;funcret
 15255  004C20                     __end_of_initServos:
 15256                           	opt stack 0
 15257                           tblptru	equ	0xFF8
 15258                           tblptrh	equ	0xFF7
 15259                           tblptrl	equ	0xFF6
 15260                           tablat	equ	0xFF5
 15261                           prodh	equ	0xFF4
 15262                           prodl	equ	0xFF3
 15263                           intcon	equ	0xFF2
 15264                           intcon2	equ	0xFF1
 15265                           intcon3	equ	0xFF0
 15266                           postinc0	equ	0xFEE
 15267                           wreg	equ	0xFE8
 15268                           postdec1	equ	0xFE5
 15269                           fsr1l	equ	0xFE1
 15270                           indf2	equ	0xFDF
 15271                           postinc2	equ	0xFDE
 15272                           postdec2	equ	0xFDD
 15273                           fsr2h	equ	0xFDA
 15274                           fsr2l	equ	0xFD9
 15275                           status	equ	0xFD8
 15276                           
 15277 ;; *************** function _updateServoPosition *****************
 15278 ;; Defined at:
 15279 ;;		line 505 in file "sort.c"
 15280 ;; Parameters:    Size  Location     Type
 15281 ;;  time_us         2    0[BANK0 ] int 
 15282 ;;  timer           2    2[BANK0 ] int 
 15283 ;; Auto vars:     Size  Location     Type
 15284 ;;  my_time         2    6[BANK0 ] unsigned int 
 15285 ;; Return value:  Size  Location     Type
 15286 ;;                  1    wreg      void 
 15287 ;; Registers used:
 15288 ;;		wreg, status,2, status,0
 15289 ;; Tracked objects:
 15290 ;;		On entry : 0/0
 15291 ;;		On exit  : 0/0
 15292 ;;		Unchanged: 0/0
 15293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15294 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15295 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15296 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15297 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15298 ;;Total ram usage:        8 bytes
 15299 ;; Hardware stack levels used:    1
 15300 ;; Hardware stack levels required when called:    7
 15301 ;; This function calls:
 15302 ;;		Nothing
 15303 ;; This function is called by:
 15304 ;;		_Distribution
 15305 ;;		_initServos
 15306 ;;		_actuatorTest
 15307 ;;		_BothServos
 15308 ;; This function uses a non-reentrant model
 15309 ;;
 15310                           
 15311                           	psect	text50
 15312  004686                     __ptext50:
 15313                           	opt stack 0
 15314  004686                     _updateServoPosition:
 15315                           	opt stack 20
 15316                           
 15317                           ;sort.c: 506: unsigned int my_time = 65535 - time_us;
 15318                           
 15319                           ;incstack = 0
 15320  004686  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 15321  00468A  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 15322  00468E  0100               	movlb	0	; () banked
 15323  004690  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15324  004692  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15325  004694  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15326  004696  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15327  004698  0EFF               	movlw	255
 15328  00469A  0100               	movlb	0	; () banked
 15329  00469C  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15330  00469E  0100               	movlb	0	; () banked
 15331  0046A0  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15332  0046A2  0EFF               	movlw	255
 15333  0046A4  0100               	movlb	0	; () banked
 15334  0046A6  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15335  0046A8  0100               	movlb	0	; () banked
 15336  0046AA  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15337                           
 15338                           ;sort.c: 507: switch(timer){
 15339  0046AC  D01D               	goto	l6491
 15340  0046AE                     l6485:
 15341                           
 15342                           ; BSR set to: 0
 15343                           ;sort.c: 509: servoTimes[0] = my_time >> 8;
 15344  0046AE  0100               	movlb	0	; () banked
 15345  0046B0  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15346  0046B2  0100               	movlb	0	; () banked
 15347  0046B4  6FDA               	movwf	_servoTimes& (0+255),b
 15348  0046B6  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 15349                           
 15350                           ;sort.c: 510: servoTimes[1] = my_time & 0xFF;
 15351  0046B8  0100               	movlb	0	; () banked
 15352  0046BA  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15353  0046BC  0100               	movlb	0	; () banked
 15354  0046BE  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 15355  0046C0  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 15356                           
 15357                           ; BSR set to: 0
 15358                           ;sort.c: 512: pan_servo_state = time_us;
 15359  0046C2  C080  F06F         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 15360  0046C6  C081  F070         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 15361  0046CA                     l870:
 15362                           
 15363                           ; BSR set to: 0
 15364                           ;sort.c: 514: servoTimes[2] = my_time >> 8;
 15365  0046CA  0100               	movlb	0	; () banked
 15366  0046CC  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15367  0046CE  0100               	movlb	0	; () banked
 15368  0046D0  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 15369  0046D2  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 15370                           
 15371                           ;sort.c: 515: servoTimes[3] = my_time & 0xFF;
 15372  0046D4  0100               	movlb	0	; () banked
 15373  0046D6  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15374  0046D8  0100               	movlb	0	; () banked
 15375  0046DA  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 15376  0046DC  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 15377                           
 15378                           ; BSR set to: 0
 15379                           ;sort.c: 517: tilt_servo_state = time_us;
 15380  0046DE  C080  F075         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 15381  0046E2  C081  F076         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 15382                           
 15383                           ;sort.c: 518: }
 15384  0046E6  0012               	return	
 15385  0046E8                     l6491:
 15386                           
 15387                           ; BSR set to: 0
 15388  0046E8  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15389  0046EC  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15390                           
 15391                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15392                           ; Switch size 1, requested type "space"
 15393                           ; Number of cases is 1, Range of values is 0 to 0
 15394                           ; switch strategies available:
 15395                           ; Name         Instructions Cycles
 15396                           ; simple_byte            4     3 (average)
 15397                           ;	Chosen strategy is simple_byte
 15398  0046F0  0100               	movlb	0	; () banked
 15399  0046F2  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15400  0046F4  0A00               	xorlw	0	; case 0
 15401  0046F6  A4D8               	btfss	status,2,c
 15402  0046F8  0012               	return	
 15403                           
 15404                           ; BSR set to: 0
 15405                           ; Switch size 1, requested type "space"
 15406                           ; Number of cases is 2, Range of values is 1 to 3
 15407                           ; switch strategies available:
 15408                           ; Name         Instructions Cycles
 15409                           ; simple_byte            7     4 (average)
 15410                           ;	Chosen strategy is simple_byte
 15411  0046FA  0100               	movlb	0	; () banked
 15412  0046FC  5184               	movf	??_updateServoPosition& (0+255),w,b
 15413  0046FE  0A01               	xorlw	1	; case 1
 15414  004700  B4D8               	btfsc	status,2,c
 15415  004702  D7D5               	goto	l6485
 15416  004704  0A02               	xorlw	2	; case 3
 15417  004706  A4D8               	btfss	status,2,c
 15418  004708  0012               	return	
 15419  00470A  D7DF               	goto	l870
 15420  00470C                     __end_of_updateServoPosition:
 15421                           	opt stack 0
 15422                           tblptru	equ	0xFF8
 15423                           tblptrh	equ	0xFF7
 15424                           tblptrl	equ	0xFF6
 15425                           tablat	equ	0xFF5
 15426                           prodh	equ	0xFF4
 15427                           prodl	equ	0xFF3
 15428                           intcon	equ	0xFF2
 15429                           intcon2	equ	0xFF1
 15430                           intcon3	equ	0xFF0
 15431                           postinc0	equ	0xFEE
 15432                           wreg	equ	0xFE8
 15433                           postdec1	equ	0xFE5
 15434                           fsr1l	equ	0xFE1
 15435                           indf2	equ	0xFDF
 15436                           postinc2	equ	0xFDE
 15437                           postdec2	equ	0xFDD
 15438                           fsr2h	equ	0xFDA
 15439                           fsr2l	equ	0xFD9
 15440                           status	equ	0xFD8
 15441                           
 15442 ;; *************** function _BlockerTest *****************
 15443 ;; Defined at:
 15444 ;;		line 593 in file "Test.c"
 15445 ;; Parameters:    Size  Location     Type
 15446 ;;		None
 15447 ;; Auto vars:     Size  Location     Type
 15448 ;;  i               2   44[BANK0 ] int 
 15449 ;;  cond_flag       2   48[BANK0 ] int 
 15450 ;;  cam_flag        2   46[BANK0 ] int 
 15451 ;; Return value:  Size  Location     Type
 15452 ;;                  1    wreg      void 
 15453 ;; Registers used:
 15454 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15455 ;; Tracked objects:
 15456 ;;		On entry : 0/0
 15457 ;;		On exit  : 0/0
 15458 ;;		Unchanged: 0/0
 15459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15461 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15462 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15463 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15464 ;;Total ram usage:        7 bytes
 15465 ;; Hardware stack levels used:    1
 15466 ;; Hardware stack levels required when called:   10
 15467 ;; This function calls:
 15468 ;;		_lcdInst
 15469 ;;		_printf
 15470 ;; This function is called by:
 15471 ;;		_Test
 15472 ;; This function uses a non-reentrant model
 15473 ;;
 15474                           
 15475                           	psect	text51
 15476  003894                     __ptext51:
 15477                           	opt stack 0
 15478  003894                     _BlockerTest:
 15479                           	opt stack 19
 15480                           
 15481                           ;Test.c: 594: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15482                           
 15483                           ; BSR set to: 0
 15484                           ;incstack = 0
 15485  003894  0E01               	movlw	1
 15486  003896  ECF8  F029         	call	_lcdInst
 15487  00389A  0E68               	movlw	104
 15488  00389C  0100               	movlb	0	; () banked
 15489  00389E  6FAB               	movwf	??_BlockerTest& (0+255),b
 15490  0038A0  0EE4               	movlw	228
 15491  0038A2                     u10317:
 15492  0038A2  2EE8               	decfsz	wreg,f,c
 15493  0038A4  D7FE               	bra	u10317
 15494  0038A6  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 15495  0038A8  D7FC               	bra	u10317
 15496  0038AA  F000               	nop	
 15497  0038AC  0E80               	movlw	128
 15498  0038AE  ECF8  F029         	call	_lcdInst
 15499                           
 15500                           ;Test.c: 595: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15501  0038B2  0E6D               	movlw	low STR_122
 15502  0038B4  0100               	movlb	0	; () banked
 15503  0038B6  6F8E               	movwf	printf@f& (0+255),b
 15504  0038B8  0EFB               	movlw	high STR_122
 15505  0038BA  0100               	movlb	0	; () banked
 15506  0038BC  6F8F               	movwf	(printf@f+1)& (0+255),b
 15507  0038BE  A480               	btfss	3968,2,c	;volatile
 15508  0038C0  D004               	goto	u7210
 15509  0038C2  0100               	movlb	0	; () banked
 15510  0038C4  6BAB               	clrf	??_BlockerTest& (0+255),b
 15511  0038C6  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15512  0038C8  D002               	goto	u7218
 15513  0038CA                     u7210:
 15514  0038CA  0100               	movlb	0	; () banked
 15515  0038CC  6BAB               	clrf	??_BlockerTest& (0+255),b
 15516  0038CE                     u7218:
 15517  0038CE  0100               	movlb	0	; () banked
 15518  0038D0  51AB               	movf	??_BlockerTest& (0+255),w,b
 15519  0038D2  0100               	movlb	0	; () banked
 15520  0038D4  6F90               	movwf	(?_printf+2)& (0+255),b
 15521  0038D6  6B91               	clrf	(?_printf+3)& (0+255),b
 15522  0038D8  EC08  F00B         	call	_printf	;wreg free
 15523                           
 15524                           ;Test.c: 596: lcdInst(0b11000000);;
 15525  0038DC  0EC0               	movlw	192
 15526  0038DE  ECF8  F029         	call	_lcdInst
 15527                           
 15528                           ;Test.c: 597: printf("OTHER: CAM TOGGLE");
 15529  0038E2  0E5B               	movlw	low STR_123
 15530  0038E4  0100               	movlb	0	; () banked
 15531  0038E6  6F8E               	movwf	printf@f& (0+255),b
 15532  0038E8  0EFB               	movlw	high STR_123
 15533  0038EA  0100               	movlb	0	; () banked
 15534  0038EC  6F8F               	movwf	(printf@f+1)& (0+255),b
 15535  0038EE  EC08  F00B         	call	_printf	;wreg free
 15536                           
 15537                           ;Test.c: 598: int cam_flag = 1;
 15538  0038F2  0E00               	movlw	0
 15539  0038F4  0100               	movlb	0	; () banked
 15540  0038F6  6FAF               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 15541  0038F8  0E01               	movlw	1
 15542  0038FA  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15543                           
 15544                           ; BSR set to: 0
 15545                           ;Test.c: 599: int cond_flag = 0;
 15546  0038FC  0E00               	movlw	0
 15547  0038FE  0100               	movlb	0	; () banked
 15548  003900  6FB1               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 15549  003902  0E00               	movlw	0
 15550  003904  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15551                           
 15552                           ; BSR set to: 0
 15553                           ;Test.c: 601: while(PORTBbits.RB1 == 0){
 15554                           
 15555                           ;Test.c: 600: while(1){
 15556  003906  D018               	goto	l8461
 15557  003908                     l8457:
 15558                           
 15559                           ;Test.c: 602: lcdInst(0b10000000);;
 15560  003908  0E80               	movlw	128
 15561  00390A  ECF8  F029         	call	_lcdInst
 15562                           
 15563                           ;Test.c: 603: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15564  00390E  0E6D               	movlw	low STR_122
 15565  003910  0100               	movlb	0	; () banked
 15566  003912  6F8E               	movwf	printf@f& (0+255),b
 15567  003914  0EFB               	movlw	high STR_122
 15568  003916  0100               	movlb	0	; () banked
 15569  003918  6F8F               	movwf	(printf@f+1)& (0+255),b
 15570  00391A  A480               	btfss	3968,2,c	;volatile
 15571  00391C  D004               	goto	u7220
 15572  00391E  0100               	movlb	0	; () banked
 15573  003920  6BAB               	clrf	??_BlockerTest& (0+255),b
 15574  003922  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15575  003924  D002               	goto	u7228
 15576  003926                     u7220:
 15577  003926  0100               	movlb	0	; () banked
 15578  003928  6BAB               	clrf	??_BlockerTest& (0+255),b
 15579  00392A                     u7228:
 15580  00392A  0100               	movlb	0	; () banked
 15581  00392C  51AB               	movf	??_BlockerTest& (0+255),w,b
 15582  00392E  0100               	movlb	0	; () banked
 15583  003930  6F90               	movwf	(?_printf+2)& (0+255),b
 15584  003932  6B91               	clrf	(?_printf+3)& (0+255),b
 15585  003934  EC08  F00B         	call	_printf	;wreg free
 15586  003938                     l8461:
 15587  003938  A281               	btfss	3969,1,c	;volatile
 15588  00393A  D7E6               	goto	l8457
 15589                           
 15590                           ;Test.c: 604: }
 15591                           ;Test.c: 605: if(PORTB >> 4 == 0b1111){
 15592  00393C  3881               	swapf	3969,w,c	;volatile
 15593  00393E  0B0F               	andlw	15
 15594  003940  0A0F               	xorlw	15
 15595  003942  B4D8               	btfsc	status,2,c
 15596  003944  0012               	return	
 15597                           
 15598                           ;Test.c: 608: else if(PORTB >> 4 == 0b0001){
 15599                           
 15600                           ;Test.c: 607: }
 15601                           
 15602                           ;Test.c: 606: break;
 15603  003946  3881               	swapf	3969,w,c	;volatile
 15604  003948  0B0F               	andlw	15
 15605  00394A  06E8               	decf	wreg,f,c
 15606  00394C  A4D8               	btfss	status,2,c
 15607  00394E  D016               	goto	l8479
 15608                           
 15609                           ;Test.c: 609: if(cond_flag){
 15610  003950  0100               	movlb	0	; () banked
 15611  003952  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15612  003954  0100               	movlb	0	; () banked
 15613  003956  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15614  003958  B4D8               	btfsc	status,2,c
 15615  00395A  D007               	goto	l1374
 15616                           
 15617                           ; BSR set to: 0
 15618                           ;Test.c: 610: LATAbits.LATA3 = 1;
 15619  00395C  8689               	bsf	3977,3,c	;volatile
 15620  00395E  D006               	goto	l8477
 15621  003960                     u7271:
 15622  003960  0E01               	movlw	1
 15623  003962                     u7280:
 15624  003962  0100               	movlb	0	; () banked
 15625  003964  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15626  003966  6BB1               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 15627                           
 15628                           ;Test.c: 612: }
 15629  003968  D054               	goto	l8503
 15630  00396A                     l1374:
 15631                           
 15632                           ; BSR set to: 0
 15633                           ;Test.c: 613: else{
 15634                           ;Test.c: 614: LATAbits.LATA3 = 0;
 15635  00396A  9689               	bcf	3977,3,c	;volatile
 15636  00396C                     l8477:
 15637                           
 15638                           ; BSR set to: 0
 15639                           ;Test.c: 615: cond_flag = !cond_flag;
 15640  00396C  0100               	movlb	0	; () banked
 15641  00396E  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15642  003970  0100               	movlb	0	; () banked
 15643  003972  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15644  003974  B4D8               	btfsc	status,2,c
 15645  003976  D7F4               	goto	u7271
 15646  003978  0E00               	movlw	0
 15647  00397A  D7F3               	goto	u7280
 15648  00397C                     l8479:
 15649                           
 15650                           ;Test.c: 618: else{
 15651                           ;Test.c: 619: if(cam_flag){
 15652  00397C  0100               	movlb	0	; () banked
 15653  00397E  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15654  003980  0100               	movlb	0	; () banked
 15655  003982  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15656  003984  B4D8               	btfsc	status,2,c
 15657  003986  D007               	goto	l8485
 15658                           
 15659                           ; BSR set to: 0
 15660                           ;Test.c: 620: LATCbits.LATC0 = 1;
 15661  003988  808B               	bsf	3979,0,c	;volatile
 15662  00398A  D023               	goto	l8497
 15663  00398C                     u7321:
 15664  00398C  0E01               	movlw	1
 15665  00398E                     u7330:
 15666  00398E  0100               	movlb	0	; () banked
 15667  003990  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15668  003992  6BAF               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 15669                           
 15670                           ;Test.c: 622: }
 15671  003994  D03E               	goto	l8503
 15672  003996                     l8485:
 15673                           
 15674                           ; BSR set to: 0
 15675                           ;Test.c: 623: else{
 15676                           ;Test.c: 624: for(int i=0;i<5000;i++)
 15677  003996  0E00               	movlw	0
 15678  003998  0100               	movlb	0	; () banked
 15679  00399A  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 15680  00399C  0E00               	movlw	0
 15681  00399E  6FAC               	movwf	BlockerTest@i& (0+255),b
 15682  0039A0                     l8487:
 15683                           
 15684                           ; BSR set to: 0
 15685  0039A0  0100               	movlb	0	; () banked
 15686  0039A2  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 15687  0039A4  D008               	goto	l1379
 15688  0039A6  0E88               	movlw	136
 15689  0039A8  0100               	movlb	0	; () banked
 15690  0039AA  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 15691  0039AC  0E13               	movlw	19
 15692  0039AE  0100               	movlb	0	; () banked
 15693  0039B0  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 15694  0039B2  B0D8               	btfsc	status,0,c
 15695  0039B4  D00D               	goto	l1380
 15696  0039B6                     l1379:
 15697                           
 15698                           ; BSR set to: 0
 15699                           ;Test.c: 625: {
 15700                           ;Test.c: 626: LATCbits.LATC0 = 1;
 15701  0039B6  808B               	bsf	3979,0,c	;volatile
 15702                           
 15703                           ; BSR set to: 0
 15704                           ;Test.c: 627: _delay((unsigned long)((10)*(32000000/4000000.0)));
 15705  0039B8  0E1A               	movlw	26
 15706  0039BA                     u10327:
 15707  0039BA  2EE8               	decfsz	wreg,f,c
 15708  0039BC  D7FE               	bra	u10327
 15709  0039BE  D000               	nop2	
 15710                           
 15711                           ;Test.c: 628: LATCbits.LATC0 = 0;
 15712  0039C0  908B               	bcf	3979,0,c	;volatile
 15713                           
 15714                           ;Test.c: 629: _delay((unsigned long)((90)*(32000000/4000000.0)));
 15715  0039C2  0EF0               	movlw	240
 15716  0039C4                     u10337:
 15717  0039C4  2EE8               	decfsz	wreg,f,c
 15718  0039C6  D7FE               	bra	u10337
 15719  0039C8  0100               	movlb	0	; () banked
 15720  0039CA  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 15721  0039CC  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 15722  0039CE  D7E8               	goto	l8487
 15723  0039D0                     l1380:
 15724                           
 15725                           ; BSR set to: 0
 15726                           ;Test.c: 630: }
 15727                           ;Test.c: 631: LATCbits.LATC0 = 0;
 15728  0039D0  908B               	bcf	3979,0,c	;volatile
 15729  0039D2                     l8497:
 15730                           
 15731                           ; BSR set to: 0
 15732                           ;Test.c: 632: cam_flag = !cam_flag;
 15733  0039D2  0100               	movlb	0	; () banked
 15734  0039D4  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15735  0039D6  0100               	movlb	0	; () banked
 15736  0039D8  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15737  0039DA  B4D8               	btfsc	status,2,c
 15738  0039DC  D7D7               	goto	u7321
 15739  0039DE  0E00               	movlw	0
 15740  0039E0  D7D6               	goto	u7330
 15741  0039E2                     l8499:
 15742                           
 15743                           ;Test.c: 637: lcdInst(0b10000000);;
 15744  0039E2  0E80               	movlw	128
 15745  0039E4  ECF8  F029         	call	_lcdInst
 15746                           
 15747                           ;Test.c: 638: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15748  0039E8  0E6D               	movlw	low STR_122
 15749  0039EA  0100               	movlb	0	; () banked
 15750  0039EC  6F8E               	movwf	printf@f& (0+255),b
 15751  0039EE  0EFB               	movlw	high STR_122
 15752  0039F0  0100               	movlb	0	; () banked
 15753  0039F2  6F8F               	movwf	(printf@f+1)& (0+255),b
 15754  0039F4  A480               	btfss	3968,2,c	;volatile
 15755  0039F6  D004               	goto	u7380
 15756  0039F8  0100               	movlb	0	; () banked
 15757  0039FA  6BAB               	clrf	??_BlockerTest& (0+255),b
 15758  0039FC  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15759  0039FE  D002               	goto	u7388
 15760  003A00                     u7380:
 15761  003A00  0100               	movlb	0	; () banked
 15762  003A02  6BAB               	clrf	??_BlockerTest& (0+255),b
 15763  003A04                     u7388:
 15764  003A04  0100               	movlb	0	; () banked
 15765  003A06  51AB               	movf	??_BlockerTest& (0+255),w,b
 15766  003A08  0100               	movlb	0	; () banked
 15767  003A0A  6F90               	movwf	(?_printf+2)& (0+255),b
 15768  003A0C  6B91               	clrf	(?_printf+3)& (0+255),b
 15769  003A0E  EC08  F00B         	call	_printf	;wreg free
 15770  003A12                     l8503:
 15771  003A12  A281               	btfss	3969,1,c	;volatile
 15772  003A14  D791               	goto	l8461
 15773  003A16  D7E5               	goto	l8499
 15774  003A18                     __end_of_BlockerTest:
 15775                           	opt stack 0
 15776                           tblptru	equ	0xFF8
 15777                           tblptrh	equ	0xFF7
 15778                           tblptrl	equ	0xFF6
 15779                           tablat	equ	0xFF5
 15780                           prodh	equ	0xFF4
 15781                           prodl	equ	0xFF3
 15782                           intcon	equ	0xFF2
 15783                           intcon2	equ	0xFF1
 15784                           intcon3	equ	0xFF0
 15785                           postinc0	equ	0xFEE
 15786                           wreg	equ	0xFE8
 15787                           postdec1	equ	0xFE5
 15788                           fsr1l	equ	0xFE1
 15789                           indf2	equ	0xFDF
 15790                           postinc2	equ	0xFDE
 15791                           postdec2	equ	0xFDD
 15792                           fsr2h	equ	0xFDA
 15793                           fsr2l	equ	0xFD9
 15794                           status	equ	0xFD8
 15795                           
 15796 ;; *************** function _printf *****************
 15797 ;; Defined at:
 15798 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 15799 ;; Parameters:    Size  Location     Type
 15800 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 15801 ;;		 -> STR_127(17), STR_126(17), STR_125(18), STR_124(18), 
 15802 ;;		 -> STR_123(18), STR_122(18), STR_121(18), STR_120(18), 
 15803 ;;		 -> STR_119(17), STR_118(17), STR_117(3), STR_116(15), 
 15804 ;;		 -> STR_115(3), STR_114(15), STR_113(11), STR_112(18), 
 15805 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 15806 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 15807 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 15808 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 15809 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 15810 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 15811 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 15812 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 15813 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 15814 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 15815 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 15816 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 15817 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 15818 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 15819 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 15820 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 15821 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 15822 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 15823 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 15824 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 15825 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 15826 ;;		 -> STR_2(14), STR_1(18), 
 15827 ;; Auto vars:     Size  Location     Type
 15828 ;;  tmpval          4    0        struct .
 15829 ;;  width           2   41[BANK0 ] int 
 15830 ;;  val             2   37[BANK0 ] unsigned int 
 15831 ;;  len             2   35[BANK0 ] unsigned int 
 15832 ;;  ap              2   33[BANK0 ] PTR void [1]
 15833 ;;		 -> ?i2_printf(2), ?_printf(2), 
 15834 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 15835 ;;		 -> STR_128(7), count_total(2), printRTC@month(4), UI@month(4), 
 15836 ;;  c               1   40[BANK0 ] char 
 15837 ;;  flag            1   39[BANK0 ] unsigned char 
 15838 ;;  prec            1   30[BANK0 ] char 
 15839 ;; Return value:  Size  Location     Type
 15840 ;;                  2   14[BANK0 ] int 
 15841 ;; Registers used:
 15842 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15843 ;; Tracked objects:
 15844 ;;		On entry : 0/0
 15845 ;;		On exit  : 0/0
 15846 ;;		Unchanged: 0/0
 15847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15848 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15849 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15850 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15851 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15852 ;;Total ram usage:       29 bytes
 15853 ;; Hardware stack levels used:    1
 15854 ;; Hardware stack levels required when called:    9
 15855 ;; This function calls:
 15856 ;;		___lwdiv
 15857 ;;		___lwmod
 15858 ;;		___wmul
 15859 ;;		_isdigit
 15860 ;;		_putch
 15861 ;; This function is called by:
 15862 ;;		_UI
 15863 ;;		_change_state_to_menu_start
 15864 ;;		_change_state_to_menu_12
 15865 ;;		_change_state_to_menu_22
 15866 ;;		_printRTC
 15867 ;;		_EEPROM_write
 15868 ;;		_Test
 15869 ;;		_algorithmTest
 15870 ;;		_sensorTest
 15871 ;;		_actuatorTest
 15872 ;;		_BothServos
 15873 ;;		_PortTestA5
 15874 ;;		_PusherTest
 15875 ;;		_SpeedTest
 15876 ;;		_BlockerTest
 15877 ;;		_arm
 15878 ;;		_ToggleTestA5
 15879 ;; This function uses a non-reentrant model
 15880 ;;
 15881                           
 15882                           	psect	text52
 15883  001610                     __ptext52:
 15884                           	opt stack 0
 15885  001610                     _printf:
 15886                           	opt stack 18
 15887                           
 15888                           ;doprnt.c: 466: va_list ap;
 15889                           ;doprnt.c: 499: signed char c;
 15890                           ;doprnt.c: 501: int width;
 15891                           ;doprnt.c: 506: signed char prec;
 15892                           ;doprnt.c: 508: unsigned char flag;
 15893                           ;doprnt.c: 523: union {
 15894                           ;doprnt.c: 524: unsigned long vd;
 15895                           ;doprnt.c: 525: double integ;
 15896                           ;doprnt.c: 526: } tmpval;
 15897                           ;doprnt.c: 528: unsigned int val;
 15898                           ;doprnt.c: 529: unsigned len;
 15899                           ;doprnt.c: 530: const char * cp;
 15900                           ;doprnt.c: 533: *ap = __va_start();
 15901                           
 15902                           ;incstack = 0
 15903  001610  0E90               	movlw	low (?_printf+2)
 15904  001612  0100               	movlb	0	; () banked
 15905  001614  6FA1               	movwf	printf@ap& (0+255),b
 15906  001616  0E00               	movlw	high (?_printf+2)
 15907  001618  0100               	movlb	0	; () banked
 15908  00161A  6FA2               	movwf	(printf@ap+1)& (0+255),b
 15909                           
 15910                           ;doprnt.c: 536: while(c = *f++) {
 15911  00161C  D205               	goto	l6445
 15912  00161E                     l6315:
 15913                           
 15914                           ; BSR set to: 0
 15915                           ;doprnt.c: 538: if(c != '%')
 15916  00161E  0E25               	movlw	37
 15917  001620  0100               	movlb	0	; () banked
 15918  001622  19A8               	xorwf	printf@c& (0+255),w,b
 15919  001624  B4D8               	btfsc	status,2,c
 15920  001626  D005               	goto	l6319
 15921                           
 15922                           ; BSR set to: 0
 15923                           ;doprnt.c: 540: {
 15924                           ;doprnt.c: 541: (putch(c) );
 15925  001628  0100               	movlb	0	; () banked
 15926  00162A  51A8               	movf	printf@c& (0+255),w,b
 15927  00162C  ECF0  F029         	call	_putch
 15928                           
 15929                           ;doprnt.c: 542: continue;
 15930  001630  D1FB               	goto	l6445
 15931  001632                     l6319:
 15932                           
 15933                           ;doprnt.c: 543: }
 15934                           ;doprnt.c: 546: width = 0;
 15935  001632  0E00               	movlw	0
 15936  001634  0100               	movlb	0	; () banked
 15937  001636  6FAA               	movwf	(printf@width+1)& (0+255),b
 15938  001638  0E00               	movlw	0
 15939  00163A  6FA9               	movwf	printf@width& (0+255),b
 15940                           
 15941                           ;doprnt.c: 548: flag = 0;
 15942  00163C  0E00               	movlw	0
 15943  00163E  0100               	movlb	0	; () banked
 15944  001640  6FA7               	movwf	printf@flag& (0+255),b
 15945                           
 15946                           ; BSR set to: 0
 15947                           ;doprnt.c: 551: switch(*f) {
 15948                           
 15949                           ;doprnt.c: 550: for(;;) {
 15950  001642  D005               	goto	l6325
 15951  001644                     l6321:
 15952                           
 15953                           ;doprnt.c: 580: flag |= 0x04;
 15954  001644  0100               	movlb	0	; () banked
 15955  001646  85A7               	bsf	printf@flag& (0+255),2,b
 15956                           
 15957                           ;doprnt.c: 581: f++;
 15958  001648  0100               	movlb	0	; () banked
 15959  00164A  4B8E               	infsnz	printf@f& (0+255),f,b
 15960  00164C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15961  00164E                     l6325:
 15962  00164E  C08E  FFF6         	movff	printf@f,tblptrl
 15963  001652  C08F  FFF7         	movff	printf@f+1,tblptrh
 15964  001656                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15965  001656  6AF8               	clrf	tblptru,c
 15966  001658                     	endif
 15967  001658                     	if	0	;tblptru may be non-zero
 15968  001658                     	endif
 15969  001658  0008               	tblrd		*
 15970  00165A  50F5               	movf	tablat,w,c
 15971                           
 15972                           ; Switch size 1, requested type "space"
 15973                           ; Number of cases is 1, Range of values is 48 to 48
 15974                           ; switch strategies available:
 15975                           ; Name         Instructions Cycles
 15976                           ; simple_byte            4     3 (average)
 15977                           ;	Chosen strategy is simple_byte
 15978  00165C  0A30               	xorlw	48	; case 48
 15979  00165E  B4D8               	btfsc	status,2,c
 15980  001660  D7F1               	goto	l6321
 15981                           
 15982                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15983                           
 15984                           ;doprnt.c: 586: }
 15985                           
 15986                           ;doprnt.c: 585: break;
 15987  001662  C08E  FFF6         	movff	printf@f,tblptrl
 15988  001666  C08F  FFF7         	movff	printf@f+1,tblptrh
 15989  00166A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15990  00166A  6AF8               	clrf	tblptru,c
 15991  00166C                     	endif
 15992  00166C                     	if	0	;tblptru may be non-zero
 15993  00166C                     	endif
 15994  00166C  0008               	tblrd		*
 15995  00166E  50F5               	movf	tablat,w,c
 15996  001670  EC05  F029         	call	_isdigit
 15997  001674  A0D8               	btfss	status,0,c
 15998  001676  D0D2               	goto	l6373
 15999                           
 16000                           ;doprnt.c: 598: width = 0;
 16001  001678  0E00               	movlw	0
 16002  00167A  0100               	movlb	0	; () banked
 16003  00167C  6FAA               	movwf	(printf@width+1)& (0+255),b
 16004  00167E  0E00               	movlw	0
 16005  001680  6FA9               	movwf	printf@width& (0+255),b
 16006  001682                     l6331:
 16007                           
 16008                           ;doprnt.c: 600: width *= 10;
 16009  001682  C0A9  F080         	movff	printf@width,___wmul@multiplier
 16010  001686  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 16011  00168A  0E00               	movlw	0
 16012  00168C  0100               	movlb	0	; () banked
 16013  00168E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 16014  001690  0E0A               	movlw	10
 16015  001692  6F82               	movwf	___wmul@multiplicand& (0+255),b
 16016  001694  EC6E  F027         	call	___wmul	;wreg free
 16017  001698  C080  F0A9         	movff	?___wmul,printf@width
 16018  00169C  C081  F0AA         	movff	?___wmul+1,printf@width+1
 16019                           
 16020                           ;doprnt.c: 601: width += *f++ - '0';
 16021  0016A0  0ED0               	movlw	208
 16022  0016A2  0100               	movlb	0	; () banked
 16023  0016A4  6F9A               	movwf	??_printf& (0+255),b
 16024  0016A6  0EFF               	movlw	255
 16025  0016A8  0100               	movlb	0	; () banked
 16026  0016AA  6F9B               	movwf	(??_printf+1)& (0+255),b
 16027  0016AC  C08E  FFF6         	movff	printf@f,tblptrl
 16028  0016B0  C08F  FFF7         	movff	printf@f+1,tblptrh
 16029  0016B4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16030  0016B4  6AF8               	clrf	tblptru,c
 16031  0016B6                     	endif
 16032  0016B6                     	if	0	;tblptru may be non-zero
 16033  0016B6                     	endif
 16034  0016B6  0008               	tblrd		*
 16035  0016B8  50F5               	movf	tablat,w,c
 16036  0016BA  0100               	movlb	0	; () banked
 16037  0016BC  6F9C               	movwf	(??_printf+2)& (0+255),b
 16038  0016BE  6B9D               	clrf	(??_printf+3)& (0+255),b
 16039  0016C0  0100               	movlb	0	; () banked
 16040  0016C2  519A               	movf	??_printf& (0+255),w,b
 16041  0016C4  0100               	movlb	0	; () banked
 16042  0016C6  279C               	addwf	(??_printf+2)& (0+255),f,b
 16043  0016C8  0100               	movlb	0	; () banked
 16044  0016CA  519B               	movf	(??_printf+1)& (0+255),w,b
 16045  0016CC  0100               	movlb	0	; () banked
 16046  0016CE  239D               	addwfc	(??_printf+3)& (0+255),f,b
 16047  0016D0  0100               	movlb	0	; () banked
 16048  0016D2  519C               	movf	(??_printf+2)& (0+255),w,b
 16049  0016D4  0100               	movlb	0	; () banked
 16050  0016D6  27A9               	addwf	printf@width& (0+255),f,b
 16051  0016D8  0100               	movlb	0	; () banked
 16052  0016DA  519D               	movf	(??_printf+3)& (0+255),w,b
 16053  0016DC  0100               	movlb	0	; () banked
 16054  0016DE  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 16055                           
 16056                           ; BSR set to: 0
 16057  0016E0  0100               	movlb	0	; () banked
 16058  0016E2  4B8E               	infsnz	printf@f& (0+255),f,b
 16059  0016E4  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16060                           
 16061                           ; BSR set to: 0
 16062                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 16063  0016E6  C08E  FFF6         	movff	printf@f,tblptrl
 16064  0016EA  C08F  FFF7         	movff	printf@f+1,tblptrh
 16065  0016EE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16066  0016EE  6AF8               	clrf	tblptru,c
 16067  0016F0                     	endif
 16068  0016F0                     	if	0	;tblptru may be non-zero
 16069  0016F0                     	endif
 16070  0016F0  0008               	tblrd		*
 16071  0016F2  50F5               	movf	tablat,w,c
 16072  0016F4  EC05  F029         	call	_isdigit
 16073  0016F8  A0D8               	btfss	status,0,c
 16074  0016FA  D090               	goto	l6373
 16075  0016FC  D7C2               	goto	l6331
 16076  0016FE                     l6339:
 16077                           
 16078                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 16079  0016FE  C0A1  FFD9         	movff	printf@ap,fsr2l
 16080  001702  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16081  001706  CFDE F09F          	movff	postinc2,printf@cp
 16082  00170A  CFDD F0A0          	movff	postdec2,printf@cp+1
 16083  00170E  0E02               	movlw	2
 16084  001710  0100               	movlb	0	; () banked
 16085  001712  27A1               	addwf	printf@ap& (0+255),f,b
 16086  001714  0E00               	movlw	0
 16087  001716  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16088                           
 16089                           ; BSR set to: 0
 16090                           ;doprnt.c: 740: if(!cp)
 16091  001718  0100               	movlb	0	; () banked
 16092  00171A  519F               	movf	printf@cp& (0+255),w,b
 16093  00171C  0100               	movlb	0	; () banked
 16094  00171E  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 16095  001720  A4D8               	btfss	status,2,c
 16096  001722  D006               	goto	l6347
 16097                           
 16098                           ; BSR set to: 0
 16099                           ;doprnt.c: 741: cp = "(null)";
 16100  001724  0EB5               	movlw	low STR_128
 16101  001726  0100               	movlb	0	; () banked
 16102  001728  6F9F               	movwf	printf@cp& (0+255),b
 16103  00172A  0EFF               	movlw	high STR_128
 16104  00172C  0100               	movlb	0	; () banked
 16105  00172E  6FA0               	movwf	(printf@cp+1)& (0+255),b
 16106  001730                     l6347:
 16107                           
 16108                           ; BSR set to: 0
 16109                           ;doprnt.c: 745: len = 0;
 16110  001730  0E00               	movlw	0
 16111  001732  0100               	movlb	0	; () banked
 16112  001734  6FA4               	movwf	(printf@len+1)& (0+255),b
 16113  001736  0E00               	movlw	0
 16114  001738  6FA3               	movwf	printf@len& (0+255),b
 16115                           
 16116                           ;doprnt.c: 746: while(cp[len])
 16117  00173A  D003               	goto	l6351
 16118  00173C                     l6349:
 16119                           
 16120                           ;doprnt.c: 747: len++;
 16121  00173C  0100               	movlb	0	; () banked
 16122  00173E  4BA3               	infsnz	printf@len& (0+255),f,b
 16123  001740  2BA4               	incf	(printf@len+1)& (0+255),f,b
 16124  001742                     l6351:
 16125                           
 16126                           ; BSR set to: 0
 16127  001742  0100               	movlb	0	; () banked
 16128  001744  51A3               	movf	printf@len& (0+255),w,b
 16129  001746  0100               	movlb	0	; () banked
 16130  001748  259F               	addwf	printf@cp& (0+255),w,b
 16131  00174A  0100               	movlb	0	; () banked
 16132  00174C  6F9A               	movwf	??_printf& (0+255),b
 16133  00174E  0100               	movlb	0	; () banked
 16134  001750  51A4               	movf	(printf@len+1)& (0+255),w,b
 16135  001752  0100               	movlb	0	; () banked
 16136  001754  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 16137  001756  0100               	movlb	0	; () banked
 16138  001758  6F9B               	movwf	(??_printf+1)& (0+255),b
 16139  00175A  C09A  FFF6         	movff	??_printf,tblptrl
 16140  00175E  C09B  FFF7         	movff	??_printf+1,tblptrh
 16141  001762  0E00               	movlw	low (__mediumconst shr (0+16))
 16142  001764  6EF8               	movwf	tblptru,c
 16143  001766  0E0F               	movlw	(high __ramtop+-1)
 16144  001768  64F7               	cpfsgt	tblptrh,c
 16145  00176A  D003               	bra	u4727
 16146  00176C  0008               	tblrd		*
 16147  00176E  50F5               	movf	tablat,w,c
 16148  001770  D005               	bra	u4720
 16149  001772                     u4727:
 16150  001772  CFF6 FFE9          	movff	tblptrl,fsr0l
 16151  001776  CFF7 FFEA          	movff	tblptrh,fsr0h
 16152  00177A  50EF               	movf	indf0,w,c
 16153  00177C                     u4720:
 16154  00177C  0900               	iorlw	0
 16155  00177E  A4D8               	btfss	status,2,c
 16156  001780  D7DD               	goto	l6349
 16157                           
 16158                           ;doprnt.c: 757: if(width > len)
 16159  001782  0100               	movlb	0	; () banked
 16160  001784  51A9               	movf	printf@width& (0+255),w,b
 16161  001786  0100               	movlb	0	; () banked
 16162  001788  5DA3               	subwf	printf@len& (0+255),w,b
 16163  00178A  0100               	movlb	0	; () banked
 16164  00178C  51AA               	movf	(printf@width+1)& (0+255),w,b
 16165  00178E  0100               	movlb	0	; () banked
 16166  001790  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 16167  001792  B0D8               	btfsc	status,0,c
 16168  001794  D009               	goto	l6357
 16169                           
 16170                           ; BSR set to: 0
 16171                           ;doprnt.c: 758: width -= len;
 16172  001796  0100               	movlb	0	; () banked
 16173  001798  51A3               	movf	printf@len& (0+255),w,b
 16174  00179A  0100               	movlb	0	; () banked
 16175  00179C  5FA9               	subwf	printf@width& (0+255),f,b
 16176  00179E  0100               	movlb	0	; () banked
 16177  0017A0  51A4               	movf	(printf@len+1)& (0+255),w,b
 16178  0017A2  0100               	movlb	0	; () banked
 16179  0017A4  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16180  0017A6  D009               	goto	l6361
 16181  0017A8                     l6357:
 16182                           
 16183                           ; BSR set to: 0
 16184                           ;doprnt.c: 759: else
 16185                           ;doprnt.c: 760: width = 0;
 16186  0017A8  0E00               	movlw	0
 16187  0017AA  0100               	movlb	0	; () banked
 16188  0017AC  6FAA               	movwf	(printf@width+1)& (0+255),b
 16189  0017AE  0E00               	movlw	0
 16190  0017B0  6FA9               	movwf	printf@width& (0+255),b
 16191                           
 16192                           ; BSR set to: 0
 16193                           ;doprnt.c: 764: while(width--)
 16194  0017B2  D003               	goto	l6361
 16195  0017B4                     l6359:
 16196                           
 16197                           ; BSR set to: 0
 16198                           ;doprnt.c: 765: (putch(' ') );
 16199  0017B4  0E20               	movlw	32
 16200  0017B6  ECF0  F029         	call	_putch
 16201  0017BA                     l6361:
 16202  0017BA  0100               	movlb	0	; () banked
 16203  0017BC  07A9               	decf	printf@width& (0+255),f,b
 16204  0017BE  A0D8               	btfss	status,0,c
 16205  0017C0  07AA               	decf	(printf@width+1)& (0+255),f,b
 16206  0017C2  0100               	movlb	0	; () banked
 16207  0017C4  29A9               	incf	printf@width& (0+255),w,b
 16208  0017C6  E1F6               	bnz	l6359
 16209  0017C8  0100               	movlb	0	; () banked
 16210  0017CA  29AA               	incf	(printf@width+1)& (0+255),w,b
 16211  0017CC  B4D8               	btfsc	status,2,c
 16212  0017CE  D017               	goto	l6367
 16213  0017D0  D7F1               	goto	l6359
 16214  0017D2                     l6363:
 16215                           
 16216                           ; BSR set to: 0
 16217                           ;doprnt.c: 768: (putch(*cp++) );
 16218  0017D2  C09F  FFF6         	movff	printf@cp,tblptrl
 16219  0017D6  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 16220  0017DA  0E00               	movlw	low (__mediumconst shr (0+16))
 16221  0017DC  6EF8               	movwf	tblptru,c
 16222  0017DE  0E0F               	movlw	(high __ramtop+-1)
 16223  0017E0  64F7               	cpfsgt	tblptrh,c
 16224  0017E2  D003               	bra	u4767
 16225  0017E4  0008               	tblrd		*
 16226  0017E6  50F5               	movf	tablat,w,c
 16227  0017E8  D005               	bra	u4760
 16228  0017EA                     u4767:
 16229  0017EA  CFF6 FFE9          	movff	tblptrl,fsr0l
 16230  0017EE  CFF7 FFEA          	movff	tblptrh,fsr0h
 16231  0017F2  50EF               	movf	indf0,w,c
 16232  0017F4                     u4760:
 16233  0017F4  ECF0  F029         	call	_putch
 16234  0017F8  0100               	movlb	0	; () banked
 16235  0017FA  4B9F               	infsnz	printf@cp& (0+255),f,b
 16236  0017FC  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 16237  0017FE                     l6367:
 16238                           
 16239                           ; BSR set to: 0
 16240  0017FE  0100               	movlb	0	; () banked
 16241  001800  07A3               	decf	printf@len& (0+255),f,b
 16242  001802  A0D8               	btfss	status,0,c
 16243  001804  07A4               	decf	(printf@len+1)& (0+255),f,b
 16244  001806  0100               	movlb	0	; () banked
 16245  001808  29A3               	incf	printf@len& (0+255),w,b
 16246  00180A  E1E3               	bnz	l6363
 16247  00180C  0100               	movlb	0	; () banked
 16248  00180E  29A4               	incf	(printf@len+1)& (0+255),w,b
 16249  001810  B4D8               	btfsc	status,2,c
 16250  001812  D10A               	goto	l6445
 16251  001814  D7DE               	goto	l6363
 16252  001816                     l6369:
 16253                           
 16254                           ; BSR set to: 0
 16255                           ;doprnt.c: 818: flag |= 0x40;
 16256  001816  0100               	movlb	0	; () banked
 16257  001818  8DA7               	bsf	printf@flag& (0+255),6,b
 16258                           
 16259                           ; BSR set to: 0
 16260                           ;doprnt.c: 822: }
 16261                           
 16262                           ;doprnt.c: 819: break;
 16263  00181A  D01D               	goto	l1437
 16264  00181C                     l6373:
 16265  00181C  C08E  FFF6         	movff	printf@f,tblptrl
 16266  001820  C08F  FFF7         	movff	printf@f+1,tblptrh
 16267  001824  0100               	movlb	0	; () banked
 16268  001826  4B8E               	infsnz	printf@f& (0+255),f,b
 16269  001828  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16270  00182A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16271  00182A  6AF8               	clrf	tblptru,c
 16272  00182C                     	endif
 16273  00182C                     	if	0	;tblptru may be non-zero
 16274  00182C                     	endif
 16275  00182C  0008               	tblrd		*
 16276  00182E  CFF5 F0A8          	movff	tablat,printf@c
 16277  001832  0100               	movlb	0	; () banked
 16278  001834  51A8               	movf	printf@c& (0+255),w,b
 16279                           
 16280                           ; Switch size 1, requested type "space"
 16281                           ; Number of cases is 5, Range of values is 0 to 117
 16282                           ; switch strategies available:
 16283                           ; Name         Instructions Cycles
 16284                           ; simple_byte           16     9 (average)
 16285                           ;	Chosen strategy is simple_byte
 16286  001836  0A00               	xorlw	0	; case 0
 16287  001838  B4D8               	btfsc	status,2,c
 16288  00183A  0012               	return	
 16289  00183C  0A64               	xorlw	100	; case 100
 16290  00183E  B4D8               	btfsc	status,2,c
 16291  001840  D00A               	goto	l1437
 16292  001842  0A0D               	xorlw	13	; case 105
 16293  001844  B4D8               	btfsc	status,2,c
 16294  001846  D007               	goto	l1437
 16295  001848  0A1A               	xorlw	26	; case 115
 16296  00184A  B4D8               	btfsc	status,2,c
 16297  00184C  D758               	goto	l6339
 16298  00184E  0A06               	xorlw	6	; case 117
 16299  001850  B4D8               	btfsc	status,2,c
 16300  001852  D7E1               	goto	l6369
 16301  001854  D0E9               	goto	l6445
 16302  001856                     l1437:
 16303                           
 16304                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 16305  001856  0100               	movlb	0	; () banked
 16306  001858  BDA7               	btfsc	printf@flag& (0+255),6,b
 16307  00185A  D019               	goto	l6385
 16308                           
 16309                           ; BSR set to: 0
 16310                           ;doprnt.c: 1253: {
 16311                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 16312  00185C  C0A1  FFD9         	movff	printf@ap,fsr2l
 16313  001860  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16314  001864  CFDE F0A5          	movff	postinc2,printf@val
 16315  001868  CFDD F0A6          	movff	postdec2,printf@val+1
 16316                           
 16317                           ; BSR set to: 0
 16318  00186C  0E02               	movlw	2
 16319  00186E  0100               	movlb	0	; () banked
 16320  001870  27A1               	addwf	printf@ap& (0+255),f,b
 16321  001872  0E00               	movlw	0
 16322  001874  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16323                           
 16324                           ; BSR set to: 0
 16325                           ;doprnt.c: 1261: if((int)val < 0) {
 16326  001876  0100               	movlb	0	; () banked
 16327  001878  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 16328  00187A  D016               	goto	l6389
 16329                           
 16330                           ; BSR set to: 0
 16331                           ;doprnt.c: 1262: flag |= 0x03;
 16332  00187C  0E03               	movlw	3
 16333  00187E  0100               	movlb	0	; () banked
 16334  001880  13A7               	iorwf	printf@flag& (0+255),f,b
 16335                           
 16336                           ; BSR set to: 0
 16337                           ;doprnt.c: 1263: val = -val;
 16338  001882  0100               	movlb	0	; () banked
 16339  001884  6DA5               	negf	printf@val& (0+255),b
 16340  001886  1FA6               	comf	(printf@val+1)& (0+255),f,b
 16341  001888  B0D8               	btfsc	status,0,c
 16342  00188A  2BA6               	incf	(printf@val+1)& (0+255),f,b
 16343                           
 16344                           ; BSR set to: 0
 16345                           ;doprnt.c: 1264: }
 16346                           ;doprnt.c: 1266: }
 16347  00188C  D00D               	goto	l6389
 16348  00188E                     l6385:
 16349                           
 16350                           ; BSR set to: 0
 16351                           ;doprnt.c: 1268: else
 16352                           ;doprnt.c: 1273: {
 16353                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 16354  00188E  C0A1  FFD9         	movff	printf@ap,fsr2l
 16355  001892  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16356  001896  CFDE F0A5          	movff	postinc2,printf@val
 16357  00189A  CFDD F0A6          	movff	postdec2,printf@val+1
 16358                           
 16359                           ; BSR set to: 0
 16360  00189E  0E02               	movlw	2
 16361  0018A0  0100               	movlb	0	; () banked
 16362  0018A2  27A1               	addwf	printf@ap& (0+255),f,b
 16363  0018A4  0E00               	movlw	0
 16364  0018A6  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16365  0018A8                     l6389:
 16366                           
 16367                           ; BSR set to: 0
 16368                           ;doprnt.c: 1287: }
 16369                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16370  0018A8  0E01               	movlw	1
 16371  0018AA  0100               	movlb	0	; () banked
 16372  0018AC  6FA8               	movwf	printf@c& (0+255),b
 16373  0018AE                     l6391:
 16374                           
 16375                           ; BSR set to: 0
 16376  0018AE  0E05               	movlw	5
 16377  0018B0  0100               	movlb	0	; () banked
 16378  0018B2  19A8               	xorwf	printf@c& (0+255),w,b
 16379  0018B4  B4D8               	btfsc	status,2,c
 16380  0018B6  D019               	goto	l6403
 16381                           
 16382                           ; BSR set to: 0
 16383                           ;doprnt.c: 1306: if(val < dpowers[c])
 16384                           
 16385                           ; BSR set to: 0
 16386                           
 16387                           ; BSR set to: 0
 16388  0018B8  0100               	movlb	0	; () banked
 16389  0018BA  51A8               	movf	printf@c& (0+255),w,b
 16390  0018BC  0D02               	mullw	2
 16391  0018BE  0EEE               	movlw	low _dpowers
 16392  0018C0  24F3               	addwf	prodl,w,c
 16393  0018C2  6EF6               	movwf	tblptrl,c
 16394  0018C4  0EFA               	movlw	high _dpowers
 16395  0018C6  20F4               	addwfc	prodh,w,c
 16396  0018C8  6EF7               	movwf	tblptrh,c
 16397  0018CA                     	if	1	;There are 3 active tblptr bytes
 16398  0018CA  6AF8               	clrf	tblptru,c
 16399  0018CC  0E00               	movlw	low (__mediumconst shr (0+16))
 16400  0018CE  22F8               	addwfc	tblptru,f,c
 16401  0018D0                     	endif
 16402  0018D0  0009               	tblrd		*+
 16403  0018D2  50F5               	movf	tablat,w,c
 16404  0018D4  0100               	movlb	0	; () banked
 16405  0018D6  5DA5               	subwf	printf@val& (0+255),w,b
 16406  0018D8  0009               	tblrd		*+
 16407  0018DA  50F5               	movf	tablat,w,c
 16408  0018DC  0100               	movlb	0	; () banked
 16409  0018DE  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 16410  0018E0  A0D8               	btfss	status,0,c
 16411  0018E2  D003               	goto	l6403
 16412                           
 16413                           ; BSR set to: 0
 16414                           
 16415                           ; BSR set to: 0
 16416                           
 16417                           ; BSR set to: 0
 16418                           ;doprnt.c: 1307: break;
 16419  0018E4  0100               	movlb	0	; () banked
 16420  0018E6  2BA8               	incf	printf@c& (0+255),f,b
 16421  0018E8  D7E2               	goto	l6391
 16422  0018EA                     l6403:
 16423                           
 16424                           ; BSR set to: 0
 16425                           ;doprnt.c: 1345: if(width && flag & 0x03)
 16426  0018EA  0100               	movlb	0	; () banked
 16427  0018EC  51A9               	movf	printf@width& (0+255),w,b
 16428  0018EE  0100               	movlb	0	; () banked
 16429  0018F0  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16430  0018F2  B4D8               	btfsc	status,2,c
 16431  0018F4  D00B               	goto	l6409
 16432                           
 16433                           ; BSR set to: 0
 16434  0018F6  C0A7  F09A         	movff	printf@flag,??_printf
 16435  0018FA  0E03               	movlw	3
 16436  0018FC  0100               	movlb	0	; () banked
 16437  0018FE  179A               	andwf	??_printf& (0+255),f,b
 16438  001900  B4D8               	btfsc	status,2,c
 16439  001902  D004               	goto	l6409
 16440                           
 16441                           ; BSR set to: 0
 16442                           ;doprnt.c: 1346: width--;
 16443  001904  0100               	movlb	0	; () banked
 16444  001906  07A9               	decf	printf@width& (0+255),f,b
 16445  001908  A0D8               	btfss	status,0,c
 16446  00190A  07AA               	decf	(printf@width+1)& (0+255),f,b
 16447  00190C                     l6409:
 16448                           
 16449                           ; BSR set to: 0
 16450                           ;doprnt.c: 1381: if(width > c)
 16451  00190C  0E80               	movlw	128
 16452  00190E  0100               	movlb	0	; () banked
 16453  001910  BFA8               	btfsc	printf@c& (0+255),7,b
 16454  001912  0E7F               	movlw	127
 16455  001914  0100               	movlb	0	; () banked
 16456  001916  6F9A               	movwf	??_printf& (0+255),b
 16457  001918  0100               	movlb	0	; () banked
 16458  00191A  51A9               	movf	printf@width& (0+255),w,b
 16459  00191C  0100               	movlb	0	; () banked
 16460  00191E  5DA8               	subwf	printf@c& (0+255),w,b
 16461  001920  0100               	movlb	0	; () banked
 16462  001922  51AA               	movf	(printf@width+1)& (0+255),w,b
 16463  001924  0A80               	xorlw	128
 16464  001926  0100               	movlb	0	; () banked
 16465  001928  599A               	subwfb	??_printf& (0+255),w,b
 16466  00192A  B0D8               	btfsc	status,0,c
 16467  00192C  D00B               	goto	l6413
 16468                           
 16469                           ; BSR set to: 0
 16470                           ;doprnt.c: 1382: width -= c;
 16471  00192E  0100               	movlb	0	; () banked
 16472  001930  51A8               	movf	printf@c& (0+255),w,b
 16473  001932  0100               	movlb	0	; () banked
 16474  001934  5FA9               	subwf	printf@width& (0+255),f,b
 16475  001936  0E00               	movlw	0
 16476  001938  0100               	movlb	0	; () banked
 16477  00193A  BFA8               	btfsc	printf@c& (0+255),7,b
 16478  00193C  0EFF               	movlw	255
 16479  00193E  0100               	movlb	0	; () banked
 16480  001940  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16481  001942  D005               	goto	l6415
 16482  001944                     l6413:
 16483                           
 16484                           ; BSR set to: 0
 16485                           ;doprnt.c: 1383: else
 16486                           ;doprnt.c: 1384: width = 0;
 16487  001944  0E00               	movlw	0
 16488  001946  0100               	movlb	0	; () banked
 16489  001948  6FAA               	movwf	(printf@width+1)& (0+255),b
 16490  00194A  0E00               	movlw	0
 16491  00194C  6FA9               	movwf	printf@width& (0+255),b
 16492  00194E                     l6415:
 16493                           
 16494                           ; BSR set to: 0
 16495                           ;doprnt.c: 1387: if(flag & 0x04) {
 16496  00194E  0100               	movlb	0	; () banked
 16497  001950  A5A7               	btfss	printf@flag& (0+255),2,b
 16498  001952  D018               	goto	l6427
 16499                           
 16500                           ; BSR set to: 0
 16501                           ;doprnt.c: 1392: if(flag & 0x03)
 16502  001954  C0A7  F09A         	movff	printf@flag,??_printf
 16503  001958  0E03               	movlw	3
 16504  00195A  0100               	movlb	0	; () banked
 16505  00195C  179A               	andwf	??_printf& (0+255),f,b
 16506  00195E  B4D8               	btfsc	status,2,c
 16507  001960  D003               	goto	l6421
 16508                           
 16509                           ; BSR set to: 0
 16510                           ;doprnt.c: 1393: (putch('-') );
 16511  001962  0E2D               	movlw	45
 16512  001964  ECF0  F029         	call	_putch
 16513  001968                     l6421:
 16514                           
 16515                           ;doprnt.c: 1415: if(width)
 16516  001968  0100               	movlb	0	; () banked
 16517  00196A  51A9               	movf	printf@width& (0+255),w,b
 16518  00196C  0100               	movlb	0	; () banked
 16519  00196E  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16520  001970  B4D8               	btfsc	status,2,c
 16521  001972  D025               	goto	l6437
 16522                           
 16523                           ; BSR set to: 0
 16524                           ;doprnt.c: 1417: (putch('0') );
 16525                           
 16526                           ; BSR set to: 0
 16527                           
 16528                           ;doprnt.c: 1416: do
 16529  001974  0E30               	movlw	48
 16530  001976  ECF0  F029         	call	_putch
 16531                           
 16532                           ;doprnt.c: 1418: while(--width);
 16533  00197A  0100               	movlb	0	; () banked
 16534  00197C  07A9               	decf	printf@width& (0+255),f,b
 16535  00197E  A0D8               	btfss	status,0,c
 16536  001980  07AA               	decf	(printf@width+1)& (0+255),f,b
 16537  001982  D7F2               	goto	l6421
 16538  001984                     l6427:
 16539                           
 16540                           ; BSR set to: 0
 16541                           ;doprnt.c: 1422: {
 16542                           ;doprnt.c: 1424: if(width
 16543                           ;doprnt.c: 1428: )
 16544  001984  0100               	movlb	0	; () banked
 16545  001986  51A9               	movf	printf@width& (0+255),w,b
 16546  001988  0100               	movlb	0	; () banked
 16547  00198A  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16548  00198C  B4D8               	btfsc	status,2,c
 16549  00198E  D00D               	goto	l6433
 16550  001990                     l6429:
 16551                           
 16552                           ; BSR set to: 0
 16553                           ;doprnt.c: 1430: (putch(' ') );
 16554  001990  0E20               	movlw	32
 16555  001992  ECF0  F029         	call	_putch
 16556                           
 16557                           ;doprnt.c: 1431: while(--width);
 16558  001996  0100               	movlb	0	; () banked
 16559  001998  07A9               	decf	printf@width& (0+255),f,b
 16560  00199A  A0D8               	btfss	status,0,c
 16561  00199C  07AA               	decf	(printf@width+1)& (0+255),f,b
 16562  00199E  0100               	movlb	0	; () banked
 16563  0019A0  51A9               	movf	printf@width& (0+255),w,b
 16564  0019A2  0100               	movlb	0	; () banked
 16565  0019A4  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16566  0019A6  A4D8               	btfss	status,2,c
 16567  0019A8  D7F3               	goto	l6429
 16568  0019AA                     l6433:
 16569                           
 16570                           ; BSR set to: 0
 16571                           ;doprnt.c: 1438: if(flag & 0x03)
 16572  0019AA  C0A7  F09A         	movff	printf@flag,??_printf
 16573  0019AE  0E03               	movlw	3
 16574  0019B0  0100               	movlb	0	; () banked
 16575  0019B2  179A               	andwf	??_printf& (0+255),f,b
 16576  0019B4  B4D8               	btfsc	status,2,c
 16577  0019B6  D003               	goto	l6437
 16578                           
 16579                           ; BSR set to: 0
 16580                           ;doprnt.c: 1439: (putch('-') );
 16581  0019B8  0E2D               	movlw	45
 16582  0019BA  ECF0  F029         	call	_putch
 16583  0019BE                     l6437:
 16584                           
 16585                           ;doprnt.c: 1469: }
 16586                           ;doprnt.c: 1472: prec = c;
 16587  0019BE  C0A8  F09E         	movff	printf@c,printf@prec
 16588                           
 16589                           ;doprnt.c: 1474: while(prec--) {
 16590  0019C2  D02C               	goto	l6443
 16591  0019C4                     l6439:
 16592                           
 16593                           ;doprnt.c: 1478: {
 16594                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16595  0019C4  0100               	movlb	0	; () banked
 16596  0019C6  519E               	movf	printf@prec& (0+255),w,b
 16597  0019C8  0D02               	mullw	2
 16598  0019CA  0EEE               	movlw	low _dpowers
 16599  0019CC  24F3               	addwf	prodl,w,c
 16600  0019CE  6EF6               	movwf	tblptrl,c
 16601  0019D0  0EFA               	movlw	high _dpowers
 16602  0019D2  20F4               	addwfc	prodh,w,c
 16603  0019D4  6EF7               	movwf	tblptrh,c
 16604  0019D6                     	if	1	;There are 3 active tblptr bytes
 16605  0019D6  6AF8               	clrf	tblptru,c
 16606  0019D8  0E00               	movlw	low (__mediumconst shr (0+16))
 16607  0019DA  22F8               	addwfc	tblptru,f,c
 16608  0019DC                     	endif
 16609  0019DC  0009               	tblrd		*+
 16610  0019DE  CFF5 F082          	movff	tablat,___lwdiv@divisor
 16611  0019E2  000A               	tblrd		*-
 16612  0019E4  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 16613  0019E8  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 16614  0019EC  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 16615  0019F0  EC0A  F024         	call	___lwdiv	;wreg free
 16616  0019F4  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 16617  0019F8  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 16618  0019FC  0E00               	movlw	0
 16619  0019FE  0100               	movlb	0	; () banked
 16620  001A00  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 16621  001A02  0E0A               	movlw	10
 16622  001A04  6F89               	movwf	___lwmod@divisor& (0+255),b
 16623  001A06  EC24  F025         	call	___lwmod	;wreg free
 16624  001A0A  0100               	movlb	0	; () banked
 16625  001A0C  5187               	movf	?___lwmod& (0+255),w,b
 16626  001A0E  0F30               	addlw	48
 16627  001A10  0100               	movlb	0	; () banked
 16628  001A12  6FA8               	movwf	printf@c& (0+255),b
 16629                           
 16630                           ; BSR set to: 0
 16631                           ;doprnt.c: 1523: }
 16632                           ;doprnt.c: 1524: (putch(c) );
 16633  001A14  0100               	movlb	0	; () banked
 16634  001A16  51A8               	movf	printf@c& (0+255),w,b
 16635  001A18  ECF0  F029         	call	_putch
 16636  001A1C                     l6443:
 16637  001A1C  0100               	movlb	0	; () banked
 16638  001A1E  079E               	decf	printf@prec& (0+255),f,b
 16639  001A20  0100               	movlb	0	; () banked
 16640  001A22  299E               	incf	printf@prec& (0+255),w,b
 16641  001A24  A4D8               	btfss	status,2,c
 16642  001A26  D7CE               	goto	l6439
 16643  001A28                     l6445:
 16644  001A28  C08E  FFF6         	movff	printf@f,tblptrl
 16645  001A2C  C08F  FFF7         	movff	printf@f+1,tblptrh
 16646  001A30  0100               	movlb	0	; () banked
 16647  001A32  4B8E               	infsnz	printf@f& (0+255),f,b
 16648  001A34  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16649  001A36                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16650  001A36  6AF8               	clrf	tblptru,c
 16651  001A38                     	endif
 16652  001A38                     	if	0	;tblptru may be non-zero
 16653  001A38                     	endif
 16654  001A38  0008               	tblrd		*
 16655  001A3A  CFF5 F0A8          	movff	tablat,printf@c
 16656  001A3E  0100               	movlb	0	; () banked
 16657  001A40  51A8               	movf	printf@c& (0+255),w,b
 16658  001A42  B4D8               	btfsc	status,2,c
 16659  001A44  0012               	return	
 16660  001A46  D5EB               	goto	l6315
 16661  001A48                     __end_of_printf:
 16662                           	opt stack 0
 16663                           tblptru	equ	0xFF8
 16664                           tblptrh	equ	0xFF7
 16665                           tblptrl	equ	0xFF6
 16666                           tablat	equ	0xFF5
 16667                           prodh	equ	0xFF4
 16668                           prodl	equ	0xFF3
 16669                           intcon	equ	0xFF2
 16670                           intcon2	equ	0xFF1
 16671                           intcon3	equ	0xFF0
 16672                           indf0	equ	0xFEF
 16673                           postinc0	equ	0xFEE
 16674                           fsr0h	equ	0xFEA
 16675                           fsr0l	equ	0xFE9
 16676                           wreg	equ	0xFE8
 16677                           postdec1	equ	0xFE5
 16678                           fsr1l	equ	0xFE1
 16679                           indf2	equ	0xFDF
 16680                           postinc2	equ	0xFDE
 16681                           postdec2	equ	0xFDD
 16682                           fsr2h	equ	0xFDA
 16683                           fsr2l	equ	0xFD9
 16684                           status	equ	0xFD8
 16685                           
 16686 ;; *************** function _putch *****************
 16687 ;; Defined at:
 16688 ;;		line 20 in file "lcd.c"
 16689 ;; Parameters:    Size  Location     Type
 16690 ;;  data            1    wreg     unsigned char 
 16691 ;; Auto vars:     Size  Location     Type
 16692 ;;  data            1    2[BANK0 ] unsigned char 
 16693 ;; Return value:  Size  Location     Type
 16694 ;;                  1    wreg      void 
 16695 ;; Registers used:
 16696 ;;		wreg, status,2, status,0, cstack
 16697 ;; Tracked objects:
 16698 ;;		On entry : 0/0
 16699 ;;		On exit  : 0/0
 16700 ;;		Unchanged: 0/0
 16701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16703 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16705 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16706 ;;Total ram usage:        1 bytes
 16707 ;; Hardware stack levels used:    1
 16708 ;; Hardware stack levels required when called:    8
 16709 ;; This function calls:
 16710 ;;		_lcdNibble
 16711 ;; This function is called by:
 16712 ;;		_printf
 16713 ;; This function uses a non-reentrant model
 16714 ;;
 16715                           
 16716                           	psect	text53
 16717  0053E0                     __ptext53:
 16718                           	opt stack 0
 16719  0053E0                     _putch:
 16720                           	opt stack 18
 16721                           
 16722                           ;incstack = 0
 16723                           ;putch@data stored from wreg
 16724  0053E0  0100               	movlb	0	; () banked
 16725  0053E2  6F82               	movwf	putch@data& (0+255),b
 16726                           
 16727                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 16728  0053E4  848C               	bsf	3980,2,c	;volatile
 16729                           
 16730                           ;lcd.c: 22: lcdNibble(data);
 16731  0053E6  0100               	movlb	0	; () banked
 16732  0053E8  5182               	movf	putch@data& (0+255),w,b
 16733  0053EA  ECF0  F024         	call	_lcdNibble
 16734  0053EE  0012               	return		;funcret
 16735  0053F0                     __end_of_putch:
 16736                           	opt stack 0
 16737                           tblptru	equ	0xFF8
 16738                           tblptrh	equ	0xFF7
 16739                           tblptrl	equ	0xFF6
 16740                           tablat	equ	0xFF5
 16741                           prodh	equ	0xFF4
 16742                           prodl	equ	0xFF3
 16743                           intcon	equ	0xFF2
 16744                           intcon2	equ	0xFF1
 16745                           intcon3	equ	0xFF0
 16746                           indf0	equ	0xFEF
 16747                           postinc0	equ	0xFEE
 16748                           fsr0h	equ	0xFEA
 16749                           fsr0l	equ	0xFE9
 16750                           wreg	equ	0xFE8
 16751                           postdec1	equ	0xFE5
 16752                           fsr1l	equ	0xFE1
 16753                           indf2	equ	0xFDF
 16754                           postinc2	equ	0xFDE
 16755                           postdec2	equ	0xFDD
 16756                           fsr2h	equ	0xFDA
 16757                           fsr2l	equ	0xFD9
 16758                           status	equ	0xFD8
 16759                           
 16760 ;; *************** function _isdigit *****************
 16761 ;; Defined at:
 16762 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 16763 ;; Parameters:    Size  Location     Type
 16764 ;;  c               1    wreg     unsigned char 
 16765 ;; Auto vars:     Size  Location     Type
 16766 ;;  c               1    2[BANK0 ] unsigned char 
 16767 ;; Return value:  Size  Location     Type
 16768 ;;		None               void
 16769 ;; Registers used:
 16770 ;;		wreg, status,2, status,0
 16771 ;; Tracked objects:
 16772 ;;		On entry : 0/0
 16773 ;;		On exit  : 0/0
 16774 ;;		Unchanged: 0/0
 16775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16777 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16778 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16779 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16780 ;;Total ram usage:        3 bytes
 16781 ;; Hardware stack levels used:    1
 16782 ;; Hardware stack levels required when called:    7
 16783 ;; This function calls:
 16784 ;;		Nothing
 16785 ;; This function is called by:
 16786 ;;		_printf
 16787 ;; This function uses a non-reentrant model
 16788 ;;
 16789                           
 16790                           	psect	text54
 16791  00520A                     __ptext54:
 16792                           	opt stack 0
 16793  00520A                     _isdigit:
 16794                           	opt stack 19
 16795                           
 16796                           ;incstack = 0
 16797                           ;isdigit@c stored from wreg
 16798  00520A  0100               	movlb	0	; () banked
 16799  00520C  6F82               	movwf	isdigit@c& (0+255),b
 16800  00520E  0E00               	movlw	0
 16801  005210  0100               	movlb	0	; () banked
 16802  005212  6F81               	movwf	_isdigit$2067& (0+255),b
 16803                           
 16804                           ; BSR set to: 0
 16805  005214  0E3A               	movlw	58
 16806  005216  0100               	movlb	0	; () banked
 16807  005218  6182               	cpfslt	isdigit@c& (0+255),b
 16808  00521A  D007               	goto	l6163
 16809                           
 16810                           ; BSR set to: 0
 16811  00521C  0E2F               	movlw	47
 16812  00521E  0100               	movlb	0	; () banked
 16813  005220  6582               	cpfsgt	isdigit@c& (0+255),b
 16814  005222  D003               	goto	l6163
 16815                           
 16816                           ; BSR set to: 0
 16817  005224  0E01               	movlw	1
 16818  005226  0100               	movlb	0	; () banked
 16819  005228  6F81               	movwf	_isdigit$2067& (0+255),b
 16820  00522A                     l6163:
 16821                           
 16822                           ; BSR set to: 0
 16823  00522A  C081  F080         	movff	_isdigit$2067,??_isdigit
 16824  00522E  0100               	movlb	0	; () banked
 16825  005230  3180               	rrcf	??_isdigit& (0+255),w,b
 16826  005232  0012               	return	
 16827  005234                     __end_of_isdigit:
 16828                           	opt stack 0
 16829                           tblptru	equ	0xFF8
 16830                           tblptrh	equ	0xFF7
 16831                           tblptrl	equ	0xFF6
 16832                           tablat	equ	0xFF5
 16833                           prodh	equ	0xFF4
 16834                           prodl	equ	0xFF3
 16835                           intcon	equ	0xFF2
 16836                           intcon2	equ	0xFF1
 16837                           intcon3	equ	0xFF0
 16838                           indf0	equ	0xFEF
 16839                           postinc0	equ	0xFEE
 16840                           fsr0h	equ	0xFEA
 16841                           fsr0l	equ	0xFE9
 16842                           wreg	equ	0xFE8
 16843                           postdec1	equ	0xFE5
 16844                           fsr1l	equ	0xFE1
 16845                           indf2	equ	0xFDF
 16846                           postinc2	equ	0xFDE
 16847                           postdec2	equ	0xFDD
 16848                           fsr2h	equ	0xFDA
 16849                           fsr2l	equ	0xFD9
 16850                           status	equ	0xFD8
 16851                           
 16852 ;; *************** function ___wmul *****************
 16853 ;; Defined at:
 16854 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 16855 ;; Parameters:    Size  Location     Type
 16856 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16857 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16858 ;; Auto vars:     Size  Location     Type
 16859 ;;  product         2    4[BANK0 ] unsigned int 
 16860 ;; Return value:  Size  Location     Type
 16861 ;;                  2    0[BANK0 ] unsigned int 
 16862 ;; Registers used:
 16863 ;;		wreg, status,2, status,0, prodl, prodh
 16864 ;; Tracked objects:
 16865 ;;		On entry : 0/0
 16866 ;;		On exit  : 0/0
 16867 ;;		Unchanged: 0/0
 16868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16869 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16870 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16872 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16873 ;;Total ram usage:        6 bytes
 16874 ;; Hardware stack levels used:    1
 16875 ;; Hardware stack levels required when called:    7
 16876 ;; This function calls:
 16877 ;;		Nothing
 16878 ;; This function is called by:
 16879 ;;		_printf
 16880 ;; This function uses a non-reentrant model
 16881 ;;
 16882                           
 16883                           	psect	text55
 16884  004EDC                     __ptext55:
 16885                           	opt stack 0
 16886  004EDC                     ___wmul:
 16887                           	opt stack 19
 16888                           
 16889                           ; BSR set to: 0
 16890                           ;incstack = 0
 16891  004EDC  0100               	movlb	0	; () banked
 16892  004EDE  5180               	movf	___wmul@multiplier& (0+255),w,b
 16893  004EE0  0100               	movlb	0	; () banked
 16894  004EE2  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16895  004EE4  CFF3 F084          	movff	prodl,___wmul@product
 16896  004EE8  CFF4 F085          	movff	prodh,___wmul@product+1
 16897  004EEC  0100               	movlb	0	; () banked
 16898  004EEE  5180               	movf	___wmul@multiplier& (0+255),w,b
 16899  004EF0  0100               	movlb	0	; () banked
 16900  004EF2  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16901  004EF4  50F3               	movf	prodl,w,c
 16902  004EF6  0100               	movlb	0	; () banked
 16903  004EF8  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16904  004EFA  0100               	movlb	0	; () banked
 16905  004EFC  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16906  004EFE  0100               	movlb	0	; () banked
 16907  004F00  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16908  004F02  50F3               	movf	prodl,w,c
 16909  004F04  0100               	movlb	0	; () banked
 16910  004F06  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16911                           
 16912                           ; BSR set to: 0
 16913  004F08  C084  F080         	movff	___wmul@product,?___wmul
 16914  004F0C  C085  F081         	movff	___wmul@product+1,?___wmul+1
 16915  004F10  0012               	return	
 16916  004F12                     __end_of___wmul:
 16917                           	opt stack 0
 16918                           tblptru	equ	0xFF8
 16919                           tblptrh	equ	0xFF7
 16920                           tblptrl	equ	0xFF6
 16921                           tablat	equ	0xFF5
 16922                           prodh	equ	0xFF4
 16923                           prodl	equ	0xFF3
 16924                           intcon	equ	0xFF2
 16925                           intcon2	equ	0xFF1
 16926                           intcon3	equ	0xFF0
 16927                           indf0	equ	0xFEF
 16928                           postinc0	equ	0xFEE
 16929                           fsr0h	equ	0xFEA
 16930                           fsr0l	equ	0xFE9
 16931                           wreg	equ	0xFE8
 16932                           postdec1	equ	0xFE5
 16933                           fsr1l	equ	0xFE1
 16934                           indf2	equ	0xFDF
 16935                           postinc2	equ	0xFDE
 16936                           postdec2	equ	0xFDD
 16937                           fsr2h	equ	0xFDA
 16938                           fsr2l	equ	0xFD9
 16939                           status	equ	0xFD8
 16940                           
 16941 ;; *************** function ___lwmod *****************
 16942 ;; Defined at:
 16943 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 16944 ;; Parameters:    Size  Location     Type
 16945 ;;  dividend        2    7[BANK0 ] unsigned int 
 16946 ;;  divisor         2    9[BANK0 ] unsigned int 
 16947 ;; Auto vars:     Size  Location     Type
 16948 ;;  counter         1   11[BANK0 ] unsigned char 
 16949 ;; Return value:  Size  Location     Type
 16950 ;;                  2    7[BANK0 ] unsigned int 
 16951 ;; Registers used:
 16952 ;;		wreg, status,2, status,0
 16953 ;; Tracked objects:
 16954 ;;		On entry : 0/0
 16955 ;;		On exit  : 0/0
 16956 ;;		Unchanged: 0/0
 16957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16958 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16959 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16961 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16962 ;;Total ram usage:        5 bytes
 16963 ;; Hardware stack levels used:    1
 16964 ;; Hardware stack levels required when called:    7
 16965 ;; This function calls:
 16966 ;;		Nothing
 16967 ;; This function is called by:
 16968 ;;		_printf
 16969 ;; This function uses a non-reentrant model
 16970 ;;
 16971                           
 16972                           	psect	text56
 16973  004A48                     __ptext56:
 16974                           	opt stack 0
 16975  004A48                     ___lwmod:
 16976                           	opt stack 19
 16977                           
 16978                           ; BSR set to: 0
 16979                           ;incstack = 0
 16980  004A48  0100               	movlb	0	; () banked
 16981  004A4A  5189               	movf	___lwmod@divisor& (0+255),w,b
 16982  004A4C  0100               	movlb	0	; () banked
 16983  004A4E  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 16984  004A50  B4D8               	btfsc	status,2,c
 16985  004A52  D026               	goto	l1894
 16986                           
 16987                           ; BSR set to: 0
 16988  004A54  0E01               	movlw	1
 16989  004A56  0100               	movlb	0	; () banked
 16990  004A58  6F8B               	movwf	___lwmod@counter& (0+255),b
 16991  004A5A  D006               	goto	l6201
 16992  004A5C                     l6199:
 16993                           
 16994                           ; BSR set to: 0
 16995  004A5C  0100               	movlb	0	; () banked
 16996  004A5E  90D8               	bcf	status,0,c
 16997  004A60  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 16998  004A62  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 16999  004A64  0100               	movlb	0	; () banked
 17000  004A66  2B8B               	incf	___lwmod@counter& (0+255),f,b
 17001  004A68                     l6201:
 17002                           
 17003                           ; BSR set to: 0
 17004  004A68  0100               	movlb	0	; () banked
 17005  004A6A  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 17006  004A6C  D7F7               	goto	l6199
 17007  004A6E                     l6203:
 17008                           
 17009                           ; BSR set to: 0
 17010  004A6E  0100               	movlb	0	; () banked
 17011  004A70  5189               	movf	___lwmod@divisor& (0+255),w,b
 17012  004A72  0100               	movlb	0	; () banked
 17013  004A74  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 17014  004A76  0100               	movlb	0	; () banked
 17015  004A78  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 17016  004A7A  0100               	movlb	0	; () banked
 17017  004A7C  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 17018  004A7E  A0D8               	btfss	status,0,c
 17019  004A80  D008               	goto	l6207
 17020                           
 17021                           ; BSR set to: 0
 17022  004A82  0100               	movlb	0	; () banked
 17023  004A84  5189               	movf	___lwmod@divisor& (0+255),w,b
 17024  004A86  0100               	movlb	0	; () banked
 17025  004A88  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 17026  004A8A  0100               	movlb	0	; () banked
 17027  004A8C  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 17028  004A8E  0100               	movlb	0	; () banked
 17029  004A90  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 17030  004A92                     l6207:
 17031                           
 17032                           ; BSR set to: 0
 17033  004A92  0100               	movlb	0	; () banked
 17034  004A94  90D8               	bcf	status,0,c
 17035  004A96  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 17036  004A98  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 17037                           
 17038                           ; BSR set to: 0
 17039  004A9A  0100               	movlb	0	; () banked
 17040  004A9C  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 17041  004A9E  D7E7               	goto	l6203
 17042  004AA0                     l1894:
 17043                           
 17044                           ; BSR set to: 0
 17045  004AA0  C087  F087         	movff	___lwmod@dividend,?___lwmod
 17046  004AA4  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 17047                           
 17048                           ; BSR set to: 0
 17049  004AA8  0012               	return		;funcret
 17050  004AAA                     __end_of___lwmod:
 17051                           	opt stack 0
 17052                           tblptru	equ	0xFF8
 17053                           tblptrh	equ	0xFF7
 17054                           tblptrl	equ	0xFF6
 17055                           tablat	equ	0xFF5
 17056                           prodh	equ	0xFF4
 17057                           prodl	equ	0xFF3
 17058                           intcon	equ	0xFF2
 17059                           intcon2	equ	0xFF1
 17060                           intcon3	equ	0xFF0
 17061                           indf0	equ	0xFEF
 17062                           postinc0	equ	0xFEE
 17063                           fsr0h	equ	0xFEA
 17064                           fsr0l	equ	0xFE9
 17065                           wreg	equ	0xFE8
 17066                           postdec1	equ	0xFE5
 17067                           fsr1l	equ	0xFE1
 17068                           indf2	equ	0xFDF
 17069                           postinc2	equ	0xFDE
 17070                           postdec2	equ	0xFDD
 17071                           fsr2h	equ	0xFDA
 17072                           fsr2l	equ	0xFD9
 17073                           status	equ	0xFD8
 17074                           
 17075 ;; *************** function ___lwdiv *****************
 17076 ;; Defined at:
 17077 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 17078 ;; Parameters:    Size  Location     Type
 17079 ;;  dividend        2    0[BANK0 ] unsigned int 
 17080 ;;  divisor         2    2[BANK0 ] unsigned int 
 17081 ;; Auto vars:     Size  Location     Type
 17082 ;;  quotient        2    4[BANK0 ] unsigned int 
 17083 ;;  counter         1    6[BANK0 ] unsigned char 
 17084 ;; Return value:  Size  Location     Type
 17085 ;;                  2    0[BANK0 ] unsigned int 
 17086 ;; Registers used:
 17087 ;;		wreg, status,2, status,0
 17088 ;; Tracked objects:
 17089 ;;		On entry : 0/0
 17090 ;;		On exit  : 0/0
 17091 ;;		Unchanged: 0/0
 17092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17093 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17094 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17096 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17097 ;;Total ram usage:        7 bytes
 17098 ;; Hardware stack levels used:    1
 17099 ;; Hardware stack levels required when called:    7
 17100 ;; This function calls:
 17101 ;;		Nothing
 17102 ;; This function is called by:
 17103 ;;		_printf
 17104 ;; This function uses a non-reentrant model
 17105 ;;
 17106                           
 17107                           	psect	text57
 17108  004814                     __ptext57:
 17109                           	opt stack 0
 17110  004814                     ___lwdiv:
 17111                           	opt stack 19
 17112                           
 17113                           ; BSR set to: 0
 17114                           ;incstack = 0
 17115  004814  0E00               	movlw	0
 17116  004816  0100               	movlb	0	; () banked
 17117  004818  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 17118  00481A  0E00               	movlw	0
 17119  00481C  6F84               	movwf	___lwdiv@quotient& (0+255),b
 17120                           
 17121                           ; BSR set to: 0
 17122  00481E  0100               	movlb	0	; () banked
 17123  004820  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17124  004822  0100               	movlb	0	; () banked
 17125  004824  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 17126  004826  B4D8               	btfsc	status,2,c
 17127  004828  D02C               	goto	l1884
 17128                           
 17129                           ; BSR set to: 0
 17130  00482A  0E01               	movlw	1
 17131  00482C  0100               	movlb	0	; () banked
 17132  00482E  6F86               	movwf	___lwdiv@counter& (0+255),b
 17133  004830  D006               	goto	l6181
 17134  004832                     l6179:
 17135                           
 17136                           ; BSR set to: 0
 17137  004832  0100               	movlb	0	; () banked
 17138  004834  90D8               	bcf	status,0,c
 17139  004836  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 17140  004838  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 17141  00483A  0100               	movlb	0	; () banked
 17142  00483C  2B86               	incf	___lwdiv@counter& (0+255),f,b
 17143  00483E                     l6181:
 17144                           
 17145                           ; BSR set to: 0
 17146  00483E  0100               	movlb	0	; () banked
 17147  004840  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 17148  004842  D7F7               	goto	l6179
 17149  004844                     l6183:
 17150                           
 17151                           ; BSR set to: 0
 17152  004844  0100               	movlb	0	; () banked
 17153  004846  90D8               	bcf	status,0,c
 17154  004848  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 17155  00484A  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 17156                           
 17157                           ; BSR set to: 0
 17158  00484C  0100               	movlb	0	; () banked
 17159  00484E  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17160  004850  0100               	movlb	0	; () banked
 17161  004852  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 17162  004854  0100               	movlb	0	; () banked
 17163  004856  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17164  004858  0100               	movlb	0	; () banked
 17165  00485A  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 17166  00485C  A0D8               	btfss	status,0,c
 17167  00485E  D00A               	goto	l6191
 17168                           
 17169                           ; BSR set to: 0
 17170  004860  0100               	movlb	0	; () banked
 17171  004862  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17172  004864  0100               	movlb	0	; () banked
 17173  004866  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 17174  004868  0100               	movlb	0	; () banked
 17175  00486A  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17176  00486C  0100               	movlb	0	; () banked
 17177  00486E  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 17178                           
 17179                           ; BSR set to: 0
 17180  004870  0100               	movlb	0	; () banked
 17181  004872  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 17182  004874                     l6191:
 17183                           
 17184                           ; BSR set to: 0
 17185  004874  0100               	movlb	0	; () banked
 17186  004876  90D8               	bcf	status,0,c
 17187  004878  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 17188  00487A  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 17189                           
 17190                           ; BSR set to: 0
 17191  00487C  0100               	movlb	0	; () banked
 17192  00487E  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 17193  004880  D7E1               	goto	l6183
 17194  004882                     l1884:
 17195                           
 17196                           ; BSR set to: 0
 17197  004882  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 17198  004886  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 17199                           
 17200                           ; BSR set to: 0
 17201  00488A  0012               	return		;funcret
 17202  00488C                     __end_of___lwdiv:
 17203                           	opt stack 0
 17204                           tblptru	equ	0xFF8
 17205                           tblptrh	equ	0xFF7
 17206                           tblptrl	equ	0xFF6
 17207                           tablat	equ	0xFF5
 17208                           prodh	equ	0xFF4
 17209                           prodl	equ	0xFF3
 17210                           intcon	equ	0xFF2
 17211                           intcon2	equ	0xFF1
 17212                           intcon3	equ	0xFF0
 17213                           indf0	equ	0xFEF
 17214                           postinc0	equ	0xFEE
 17215                           fsr0h	equ	0xFEA
 17216                           fsr0l	equ	0xFE9
 17217                           wreg	equ	0xFE8
 17218                           postdec1	equ	0xFE5
 17219                           fsr1l	equ	0xFE1
 17220                           indf2	equ	0xFDF
 17221                           postinc2	equ	0xFDE
 17222                           postdec2	equ	0xFDD
 17223                           fsr2h	equ	0xFDA
 17224                           fsr2l	equ	0xFD9
 17225                           status	equ	0xFD8
 17226                           
 17227 ;; *************** function _lcdInst *****************
 17228 ;; Defined at:
 17229 ;;		line 15 in file "lcd.c"
 17230 ;; Parameters:    Size  Location     Type
 17231 ;;  data            1    wreg     unsigned char 
 17232 ;; Auto vars:     Size  Location     Type
 17233 ;;  data            1    2[BANK0 ] unsigned char 
 17234 ;; Return value:  Size  Location     Type
 17235 ;;                  1    wreg      void 
 17236 ;; Registers used:
 17237 ;;		wreg, status,2, status,0, cstack
 17238 ;; Tracked objects:
 17239 ;;		On entry : 0/0
 17240 ;;		On exit  : 0/0
 17241 ;;		Unchanged: 0/0
 17242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17244 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17246 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17247 ;;Total ram usage:        1 bytes
 17248 ;; Hardware stack levels used:    1
 17249 ;; Hardware stack levels required when called:    8
 17250 ;; This function calls:
 17251 ;;		_lcdNibble
 17252 ;; This function is called by:
 17253 ;;		_UI
 17254 ;;		_change_state_to_menu_start
 17255 ;;		_change_state_to_menu_12
 17256 ;;		_change_state_to_menu_22
 17257 ;;		_initLCD
 17258 ;;		_printRTC
 17259 ;;		_Loading
 17260 ;;		_EEPROM_write
 17261 ;;		_Test
 17262 ;;		_algorithmTest
 17263 ;;		_sensorTest
 17264 ;;		_actuatorTest
 17265 ;;		_BothServos
 17266 ;;		_PortTestA5
 17267 ;;		_PusherTest
 17268 ;;		_SpeedTest
 17269 ;;		_BlockerTest
 17270 ;;		_arm
 17271 ;;		_ToggleTestA5
 17272 ;; This function uses a non-reentrant model
 17273 ;;
 17274                           
 17275                           	psect	text58
 17276  0053F0                     __ptext58:
 17277                           	opt stack 0
 17278  0053F0                     _lcdInst:
 17279                           	opt stack 20
 17280                           
 17281                           ; BSR set to: 0
 17282                           ;incstack = 0
 17283                           ;lcdInst@data stored from wreg
 17284  0053F0  0100               	movlb	0	; () banked
 17285  0053F2  6F82               	movwf	lcdInst@data& (0+255),b
 17286                           
 17287                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 17288  0053F4  948C               	bcf	3980,2,c	;volatile
 17289                           
 17290                           ;lcd.c: 17: lcdNibble(data);
 17291  0053F6  0100               	movlb	0	; () banked
 17292  0053F8  5182               	movf	lcdInst@data& (0+255),w,b
 17293  0053FA  ECF0  F024         	call	_lcdNibble
 17294  0053FE  0012               	return		;funcret
 17295  005400                     __end_of_lcdInst:
 17296                           	opt stack 0
 17297                           tblptru	equ	0xFF8
 17298                           tblptrh	equ	0xFF7
 17299                           tblptrl	equ	0xFF6
 17300                           tablat	equ	0xFF5
 17301                           prodh	equ	0xFF4
 17302                           prodl	equ	0xFF3
 17303                           intcon	equ	0xFF2
 17304                           intcon2	equ	0xFF1
 17305                           intcon3	equ	0xFF0
 17306                           indf0	equ	0xFEF
 17307                           postinc0	equ	0xFEE
 17308                           fsr0h	equ	0xFEA
 17309                           fsr0l	equ	0xFE9
 17310                           wreg	equ	0xFE8
 17311                           postdec1	equ	0xFE5
 17312                           fsr1l	equ	0xFE1
 17313                           indf2	equ	0xFDF
 17314                           postinc2	equ	0xFDE
 17315                           postdec2	equ	0xFDD
 17316                           fsr2h	equ	0xFDA
 17317                           fsr2l	equ	0xFD9
 17318                           status	equ	0xFD8
 17319                           
 17320 ;; *************** function _lcdNibble *****************
 17321 ;; Defined at:
 17322 ;;		line 25 in file "lcd.c"
 17323 ;; Parameters:    Size  Location     Type
 17324 ;;  data            1    wreg     unsigned char 
 17325 ;; Auto vars:     Size  Location     Type
 17326 ;;  data            1    1[BANK0 ] unsigned char 
 17327 ;;  temp            1    0[BANK0 ] unsigned char 
 17328 ;; Return value:  Size  Location     Type
 17329 ;;                  1    wreg      void 
 17330 ;; Registers used:
 17331 ;;		wreg, status,2, status,0
 17332 ;; Tracked objects:
 17333 ;;		On entry : 0/0
 17334 ;;		On exit  : 0/0
 17335 ;;		Unchanged: 0/0
 17336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17338 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17340 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17341 ;;Total ram usage:        2 bytes
 17342 ;; Hardware stack levels used:    1
 17343 ;; Hardware stack levels required when called:    7
 17344 ;; This function calls:
 17345 ;;		Nothing
 17346 ;; This function is called by:
 17347 ;;		_lcdInst
 17348 ;;		_putch
 17349 ;; This function uses a non-reentrant model
 17350 ;;
 17351                           
 17352                           	psect	text59
 17353  0049E0                     __ptext59:
 17354                           	opt stack 0
 17355  0049E0                     _lcdNibble:
 17356                           	opt stack 20
 17357                           
 17358                           ;incstack = 0
 17359                           ;lcdNibble@data stored from wreg
 17360  0049E0  0100               	movlb	0	; () banked
 17361  0049E2  6F81               	movwf	lcdNibble@data& (0+255),b
 17362                           
 17363                           ;lcd.c: 27: char temp = data & 0xF0;
 17364  0049E4  0100               	movlb	0	; () banked
 17365  0049E6  5181               	movf	lcdNibble@data& (0+255),w,b
 17366  0049E8  0BF0               	andlw	240
 17367  0049EA  0100               	movlb	0	; () banked
 17368  0049EC  6F80               	movwf	lcdNibble@temp& (0+255),b
 17369                           
 17370                           ;lcd.c: 28: LATD = LATD & 0x0F;
 17371  0049EE  508C               	movf	3980,w,c	;volatile
 17372  0049F0  0B0F               	andlw	15
 17373  0049F2  6E8C               	movwf	3980,c	;volatile
 17374                           
 17375                           ;lcd.c: 29: LATD = temp | LATD;
 17376  0049F4  0100               	movlb	0	; () banked
 17377  0049F6  5180               	movf	lcdNibble@temp& (0+255),w,b
 17378  0049F8  108C               	iorwf	3980,w,c	;volatile
 17379  0049FA  6E8C               	movwf	3980,c	;volatile
 17380                           
 17381                           ; BSR set to: 0
 17382                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 17383  0049FC  868C               	bsf	3980,3,c	;volatile
 17384                           
 17385                           ; BSR set to: 0
 17386                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17387  0049FE  0E42               	movlw	66
 17388  004A00                     u10347:
 17389  004A00  2EE8               	decfsz	wreg,f,c
 17390  004A02  D7FE               	bra	u10347
 17391  004A04  D000               	nop2	
 17392                           
 17393                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 17394  004A06  968C               	bcf	3980,3,c	;volatile
 17395                           
 17396                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17397  004A08  0E42               	movlw	66
 17398  004A0A                     u10357:
 17399  004A0A  2EE8               	decfsz	wreg,f,c
 17400  004A0C  D7FE               	bra	u10357
 17401  004A0E  D000               	nop2	
 17402                           
 17403                           ;lcd.c: 36: data = data << 4;
 17404  004A10  0100               	movlb	0	; () banked
 17405  004A12  3981               	swapf	lcdNibble@data& (0+255),w,b
 17406  004A14  0BF0               	andlw	240
 17407  004A16  0100               	movlb	0	; () banked
 17408  004A18  6F81               	movwf	lcdNibble@data& (0+255),b
 17409                           
 17410                           ;lcd.c: 38: temp = data & 0xF0;
 17411  004A1A  0100               	movlb	0	; () banked
 17412  004A1C  5181               	movf	lcdNibble@data& (0+255),w,b
 17413  004A1E  0BF0               	andlw	240
 17414  004A20  0100               	movlb	0	; () banked
 17415  004A22  6F80               	movwf	lcdNibble@temp& (0+255),b
 17416                           
 17417                           ;lcd.c: 39: LATD = LATD & 0x0F;
 17418  004A24  508C               	movf	3980,w,c	;volatile
 17419  004A26  0B0F               	andlw	15
 17420  004A28  6E8C               	movwf	3980,c	;volatile
 17421                           
 17422                           ;lcd.c: 40: LATD = temp | LATD;
 17423  004A2A  0100               	movlb	0	; () banked
 17424  004A2C  5180               	movf	lcdNibble@temp& (0+255),w,b
 17425  004A2E  108C               	iorwf	3980,w,c	;volatile
 17426  004A30  6E8C               	movwf	3980,c	;volatile
 17427                           
 17428                           ; BSR set to: 0
 17429                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 17430  004A32  868C               	bsf	3980,3,c	;volatile
 17431                           
 17432                           ; BSR set to: 0
 17433                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17434  004A34  0E42               	movlw	66
 17435  004A36                     u10367:
 17436  004A36  2EE8               	decfsz	wreg,f,c
 17437  004A38  D7FE               	bra	u10367
 17438  004A3A  D000               	nop2	
 17439                           
 17440                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 17441  004A3C  968C               	bcf	3980,3,c	;volatile
 17442                           
 17443                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17444  004A3E  0E42               	movlw	66
 17445  004A40                     u10377:
 17446  004A40  2EE8               	decfsz	wreg,f,c
 17447  004A42  D7FE               	bra	u10377
 17448  004A44  D000               	nop2	
 17449  004A46  0012               	return		;funcret
 17450  004A48                     __end_of_lcdNibble:
 17451                           	opt stack 0
 17452                           tblptru	equ	0xFF8
 17453                           tblptrh	equ	0xFF7
 17454                           tblptrl	equ	0xFF6
 17455                           tablat	equ	0xFF5
 17456                           prodh	equ	0xFF4
 17457                           prodl	equ	0xFF3
 17458                           intcon	equ	0xFF2
 17459                           intcon2	equ	0xFF1
 17460                           intcon3	equ	0xFF0
 17461                           indf0	equ	0xFEF
 17462                           postinc0	equ	0xFEE
 17463                           fsr0h	equ	0xFEA
 17464                           fsr0l	equ	0xFE9
 17465                           wreg	equ	0xFE8
 17466                           postdec1	equ	0xFE5
 17467                           fsr1l	equ	0xFE1
 17468                           indf2	equ	0xFDF
 17469                           postinc2	equ	0xFDE
 17470                           postdec2	equ	0xFDD
 17471                           fsr2h	equ	0xFDA
 17472                           fsr2l	equ	0xFD9
 17473                           status	equ	0xFD8
 17474                           
 17475 ;; *************** function _handler *****************
 17476 ;; Defined at:
 17477 ;;		line 16 in file "interruptHandler.c"
 17478 ;; Parameters:    Size  Location     Type
 17479 ;;		None
 17480 ;; Auto vars:     Size  Location     Type
 17481 ;;		None
 17482 ;; Return value:  Size  Location     Type
 17483 ;;                  1    wreg      void 
 17484 ;; Registers used:
 17485 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17486 ;; Tracked objects:
 17487 ;;		On entry : 0/0
 17488 ;;		On exit  : 0/0
 17489 ;;		Unchanged: 0/0
 17490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17493 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17494 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17495 ;;Total ram usage:       16 bytes
 17496 ;; Hardware stack levels used:    1
 17497 ;; Hardware stack levels required when called:    6
 17498 ;; This function calls:
 17499 ;;		_printSortTimer
 17500 ;;		_updateMenu
 17501 ;;		_updateServoStates
 17502 ;; This function is called by:
 17503 ;;		Interrupt level 2
 17504 ;; This function uses a non-reentrant model
 17505 ;;
 17506                           
 17507                           	psect	intcode
 17508  000008                     __pintcode:
 17509                           	opt stack 0
 17510  000008                     _handler:
 17511                           	opt stack 18
 17512                           
 17513                           ;incstack = 0
 17514  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 17515  00000A  ED82  F01B         	call	int_func,f	;refresh shadow registers
 17516                           tblptru	equ	0xFF8
 17517                           tblptrh	equ	0xFF7
 17518                           tblptrl	equ	0xFF6
 17519                           tablat	equ	0xFF5
 17520                           prodh	equ	0xFF4
 17521                           prodl	equ	0xFF3
 17522                           intcon	equ	0xFF2
 17523                           intcon2	equ	0xFF1
 17524                           intcon3	equ	0xFF0
 17525                           indf0	equ	0xFEF
 17526                           postinc0	equ	0xFEE
 17527                           fsr0h	equ	0xFEA
 17528                           fsr0l	equ	0xFE9
 17529                           wreg	equ	0xFE8
 17530                           postdec1	equ	0xFE5
 17531                           fsr1l	equ	0xFE1
 17532                           indf2	equ	0xFDF
 17533                           postinc2	equ	0xFDE
 17534                           postdec2	equ	0xFDD
 17535                           fsr2h	equ	0xFDA
 17536                           fsr2l	equ	0xFD9
 17537                           status	equ	0xFD8
 17538                           
 17539                           	psect	intcode_body
 17540  003704                     __pintcode_body:
 17541                           	opt stack 18
 17542  003704                     int_func:
 17543                           	opt stack 18
 17544  003704  0006               	pop		; remove dummy address from shadow register refresh
 17545  003706  CFFA F04D          	movff	pclath,??_handler+2
 17546  00370A  CFFB F04E          	movff	pclatu,??_handler+3
 17547  00370E  CFE9 F04F          	movff	fsr0l,??_handler+4
 17548  003712  CFEA F050          	movff	fsr0h,??_handler+5
 17549  003716  CFE1 F051          	movff	fsr1l,??_handler+6
 17550  00371A  CFE2 F052          	movff	fsr1h,??_handler+7
 17551  00371E  CFD9 F053          	movff	fsr2l,??_handler+8
 17552  003722  CFDA F054          	movff	fsr2h,??_handler+9
 17553  003726  CFF3 F055          	movff	prodl,??_handler+10
 17554  00372A  CFF4 F056          	movff	prodh,??_handler+11
 17555  00372E  CFF6 F057          	movff	tblptrl,??_handler+12
 17556  003732  CFF7 F058          	movff	tblptrh,??_handler+13
 17557  003736  CFF8 F059          	movff	tblptru,??_handler+14
 17558  00373A  CFF5 F05A          	movff	tablat,??_handler+15
 17559                           
 17560                           ;interruptHandler.c: 18: if(INT1IF){
 17561  00373E  A0F0               	btfss	intcon3,0,c	;volatile
 17562  003740  D02B               	goto	i2l9531
 17563                           
 17564                           ;interruptHandler.c: 19: INT1IF = 0;
 17565  003742  90F0               	bcf	intcon3,0,c	;volatile
 17566                           
 17567                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 17568  003744  0100               	movlb	0	; () banked
 17569  003746  51FC               	movf	_machine_state& (0+255),w,b
 17570  003748  A4D8               	btfss	status,2,c
 17571  00374A  D01B               	goto	i2l9525
 17572                           
 17573                           ; BSR set to: 0
 17574                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 17575  00374C  3881               	swapf	3969,w,c	;volatile
 17576  00374E  0B0F               	andlw	15
 17577  003750  0B0F               	andlw	15
 17578  003752  6E4B               	movwf	??_handler& (0+255),c
 17579  003754  6A4C               	clrf	(??_handler+1)& (0+255),c
 17580  003756  0EDD               	movlw	low _keys
 17581  003758  244B               	addwf	??_handler,w,c
 17582  00375A  6EF6               	movwf	tblptrl,c
 17583  00375C  0EFA               	movlw	high _keys
 17584  00375E  204C               	addwfc	??_handler+1,w,c
 17585  003760  6EF7               	movwf	tblptrh,c
 17586  003762                     	if	1	;There are 3 active tblptr bytes
 17587  003762  6AF8               	clrf	tblptru,c
 17588  003764  0E00               	movlw	low (__mediumconst shr (0+16))
 17589  003766  22F8               	addwfc	tblptru,f,c
 17590  003768                     	endif
 17591  003768  0008               	tblrd		*
 17592  00376A  CFF5 F07D          	movff	tablat,_input	;volatile
 17593                           
 17594                           ; BSR set to: 0
 17595                           ;interruptHandler.c: 23: if(input == '*'){
 17596  00376E  0E2A               	movlw	42
 17597  003770  187D               	xorwf	_input,w,c	;volatile
 17598  003772  A4D8               	btfss	status,2,c
 17599  003774  D004               	goto	i2l9523
 17600                           
 17601                           ; BSR set to: 0
 17602                           ;interruptHandler.c: 24: machine_state = Testing_state;
 17603  003776  0E03               	movlw	3
 17604  003778  0100               	movlb	0	; () banked
 17605  00377A  6FFC               	movwf	_machine_state& (0+255),b
 17606                           
 17607                           ;interruptHandler.c: 25: }
 17608  00377C  D002               	goto	i2l9525
 17609  00377E                     i2l9523:
 17610                           
 17611                           ; BSR set to: 0
 17612                           ;interruptHandler.c: 26: else{
 17613                           ;interruptHandler.c: 27: updateMenu();
 17614  00377E  EC81  F013         	call	_updateMenu	;wreg free
 17615  003782                     i2l9525:
 17616                           
 17617                           ;interruptHandler.c: 28: }
 17618                           ;interruptHandler.c: 29: }
 17619                           ;interruptHandler.c: 30: if(machine_state == Sorting_state){
 17620  003782  0100               	movlb	0	; () banked
 17621  003784  05FC               	decf	_machine_state& (0+255),w,b
 17622  003786  A4D8               	btfss	status,2,c
 17623  003788  D007               	goto	i2l9531
 17624                           
 17625                           ; BSR set to: 0
 17626                           ;interruptHandler.c: 31: if(input == '*'){
 17627  00378A  0E2A               	movlw	42
 17628  00378C  187D               	xorwf	_input,w,c	;volatile
 17629  00378E  A4D8               	btfss	status,2,c
 17630  003790  D003               	goto	i2l9531
 17631                           
 17632                           ; BSR set to: 0
 17633                           ;interruptHandler.c: 32: machine_state = DoneSorting_state;
 17634  003792  0E02               	movlw	2
 17635  003794  0100               	movlb	0	; () banked
 17636  003796  6FFC               	movwf	_machine_state& (0+255),b
 17637  003798                     i2l9531:
 17638                           
 17639                           ;interruptHandler.c: 33: }
 17640                           ;interruptHandler.c: 34: }
 17641                           ;interruptHandler.c: 35: }
 17642                           ;interruptHandler.c: 38: if(TMR0IF){
 17643  003798  A4F2               	btfss	intcon,2,c	;volatile
 17644  00379A  D00C               	goto	i2l9545
 17645                           
 17646                           ;interruptHandler.c: 39: TMR0IF = 0;
 17647  00379C  94F2               	bcf	intcon,2,c	;volatile
 17648                           
 17649                           ;interruptHandler.c: 40: if(machine_state == Sorting_state){
 17650  00379E  0100               	movlb	0	; () banked
 17651  0037A0  05FC               	decf	_machine_state& (0+255),w,b
 17652  0037A2  A4D8               	btfss	status,2,c
 17653  0037A4  D007               	goto	i2l9545
 17654                           
 17655                           ; BSR set to: 0
 17656                           ;interruptHandler.c: 41: printSortTimer();
 17657  0037A6  ECE1  F014         	call	_printSortTimer	;wreg free
 17658                           
 17659                           ;interruptHandler.c: 43: TMR0H = 0b10000101;
 17660  0037AA  0E85               	movlw	133
 17661  0037AC  6ED7               	movwf	4055,c	;volatile
 17662                           
 17663                           ;interruptHandler.c: 44: TMR0L = 0b11101110;
 17664  0037AE  0EEE               	movlw	238
 17665  0037B0  6ED6               	movwf	4054,c	;volatile
 17666                           
 17667                           ;interruptHandler.c: 45: TMR0ON = 1;
 17668  0037B2  8ED5               	bsf	4053,7,c	;volatile
 17669  0037B4                     i2l9545:
 17670                           
 17671                           ;interruptHandler.c: 46: }
 17672                           ;interruptHandler.c: 47: }
 17673                           ;interruptHandler.c: 50: if(TMR1IF){
 17674  0037B4  A09E               	btfss	3998,0,c	;volatile
 17675  0037B6  D02A               	goto	i2l9573
 17676                           
 17677                           ;interruptHandler.c: 51: TMR1IF = 0;
 17678  0037B8  909E               	bcf	3998,0,c	;volatile
 17679                           
 17680                           ;interruptHandler.c: 52: TMR1ON = 0;
 17681  0037BA  90CD               	bcf	4045,0,c	;volatile
 17682                           
 17683                           ;interruptHandler.c: 53: if(machine_state == Sorting_state){
 17684  0037BC  0100               	movlb	0	; () banked
 17685  0037BE  05FC               	decf	_machine_state& (0+255),w,b
 17686  0037C0  A4D8               	btfss	status,2,c
 17687  0037C2  D024               	goto	i2l9573
 17688                           
 17689                           ; BSR set to: 0
 17690                           ;interruptHandler.c: 54: if(was_low_1){
 17691  0037C4  5079               	movf	_was_low_1,w,c	;volatile
 17692  0037C6  107A               	iorwf	_was_low_1+1,w,c	;volatile
 17693  0037C8  B4D8               	btfsc	status,2,c
 17694  0037CA  D00A               	goto	i2l963
 17695                           
 17696                           ; BSR set to: 0
 17697                           ;interruptHandler.c: 55: LATCbits.LATC1 = 1;
 17698  0037CC  828B               	bsf	3979,1,c	;volatile
 17699                           
 17700                           ; BSR set to: 0
 17701                           ;interruptHandler.c: 56: was_low_1 = 0;
 17702  0037CE  0E00               	movlw	0
 17703  0037D0  6E7A               	movwf	_was_low_1+1,c	;volatile
 17704  0037D2  0E00               	movlw	0
 17705  0037D4  6E79               	movwf	_was_low_1,c	;volatile
 17706                           
 17707                           ; BSR set to: 0
 17708                           ;interruptHandler.c: 57: TMR1H = servoTimes[0];
 17709  0037D6  C0DA  FFCF         	movff	_servoTimes,4047	;volatile
 17710                           
 17711                           ; BSR set to: 0
 17712                           ;interruptHandler.c: 58: TMR1L = servoTimes[1];
 17713  0037DA  C0DC  FFCE         	movff	_servoTimes+2,4046	;volatile
 17714                           
 17715                           ;interruptHandler.c: 59: }
 17716  0037DE  D00F               	goto	i2l9567
 17717  0037E0                     i2l963:
 17718                           
 17719                           ; BSR set to: 0
 17720                           ;interruptHandler.c: 60: else{
 17721                           ;interruptHandler.c: 61: LATCbits.LATC1 = 0;
 17722  0037E0  928B               	bcf	3979,1,c	;volatile
 17723                           
 17724                           ; BSR set to: 0
 17725                           ;interruptHandler.c: 62: was_low_1 = 1;
 17726  0037E2  0E00               	movlw	0
 17727  0037E4  6E7A               	movwf	_was_low_1+1,c	;volatile
 17728  0037E6  0E01               	movlw	1
 17729  0037E8  6E79               	movwf	_was_low_1,c	;volatile
 17730                           
 17731                           ; BSR set to: 0
 17732                           ;interruptHandler.c: 63: TMR1H = 20000 - servoTimes[0];
 17733  0037EA  0100               	movlb	0	; () banked
 17734  0037EC  51DA               	movf	_servoTimes& (0+255),w,b
 17735  0037EE  0800               	sublw	0
 17736  0037F0  0F20               	addlw	32
 17737  0037F2  6ECF               	movwf	4047,c	;volatile
 17738                           
 17739                           ; BSR set to: 0
 17740                           ;interruptHandler.c: 64: TMR1L = 20000 - servoTimes[1];
 17741  0037F4  0100               	movlb	0	; () banked
 17742  0037F6  51DC               	movf	(_servoTimes+2)& (0+255),w,b
 17743  0037F8  0800               	sublw	0
 17744  0037FA  0F20               	addlw	32
 17745  0037FC  6ECE               	movwf	4046,c	;volatile
 17746  0037FE                     i2l9567:
 17747                           
 17748                           ; BSR set to: 0
 17749                           ;interruptHandler.c: 65: }
 17750                           ;interruptHandler.c: 66: TMR1ON = 1;
 17751  0037FE  80CD               	bsf	4045,0,c	;volatile
 17752                           
 17753                           ; BSR set to: 0
 17754                           ;interruptHandler.c: 67: servo_timer_counter += 10;
 17755  003800  0E0A               	movlw	10
 17756  003802  2671               	addwf	_servo_timer_counter,f,c	;volatile
 17757  003804  0E00               	movlw	0
 17758  003806  2272               	addwfc	_servo_timer_counter+1,f,c	;volatile
 17759                           
 17760                           ; BSR set to: 0
 17761                           ;interruptHandler.c: 69: updateServoStates();
 17762  003808  EC9E  F01A         	call	_updateServoStates	;wreg free
 17763  00380C                     i2l9573:
 17764                           
 17765                           ;interruptHandler.c: 70: }
 17766                           ;interruptHandler.c: 71: }
 17767                           ;interruptHandler.c: 73: if(TMR3IF){
 17768  00380C  A2A1               	btfss	4001,1,c	;volatile
 17769  00380E  D024               	goto	i2l969
 17770                           
 17771                           ;interruptHandler.c: 74: TMR3IF = 0;
 17772  003810  92A1               	bcf	4001,1,c	;volatile
 17773                           
 17774                           ;interruptHandler.c: 75: TMR3ON = 0;
 17775  003812  90B1               	bcf	4017,0,c	;volatile
 17776                           
 17777                           ;interruptHandler.c: 76: if(machine_state == Sorting_state){
 17778  003814  0100               	movlb	0	; () banked
 17779  003816  05FC               	decf	_machine_state& (0+255),w,b
 17780  003818  A4D8               	btfss	status,2,c
 17781  00381A  D01E               	goto	i2l969
 17782                           
 17783                           ; BSR set to: 0
 17784                           ;interruptHandler.c: 77: if(was_low_3){
 17785  00381C  507B               	movf	_was_low_3,w,c	;volatile
 17786  00381E  107C               	iorwf	_was_low_3+1,w,c	;volatile
 17787  003820  B4D8               	btfsc	status,2,c
 17788  003822  D00A               	goto	i2l967
 17789                           
 17790                           ; BSR set to: 0
 17791                           ;interruptHandler.c: 78: LATCbits.LATC2 = 1;
 17792  003824  848B               	bsf	3979,2,c	;volatile
 17793                           
 17794                           ; BSR set to: 0
 17795                           ;interruptHandler.c: 79: was_low_3 = 0;
 17796  003826  0E00               	movlw	0
 17797  003828  6E7C               	movwf	_was_low_3+1,c	;volatile
 17798  00382A  0E00               	movlw	0
 17799  00382C  6E7B               	movwf	_was_low_3,c	;volatile
 17800                           
 17801                           ; BSR set to: 0
 17802                           ;interruptHandler.c: 80: TMR3H = servoTimes[2];
 17803  00382E  C0DE  FFB3         	movff	_servoTimes+4,4019	;volatile
 17804                           
 17805                           ; BSR set to: 0
 17806                           ;interruptHandler.c: 81: TMR3L = servoTimes[3];
 17807  003832  C0E0  FFB2         	movff	_servoTimes+6,4018	;volatile
 17808                           
 17809                           ;interruptHandler.c: 82: }
 17810  003836  D00F               	goto	i2l9595
 17811  003838                     i2l967:
 17812                           
 17813                           ; BSR set to: 0
 17814                           ;interruptHandler.c: 83: else{
 17815                           ;interruptHandler.c: 84: LATCbits.LATC2 = 0;
 17816  003838  948B               	bcf	3979,2,c	;volatile
 17817                           
 17818                           ; BSR set to: 0
 17819                           ;interruptHandler.c: 85: was_low_3 = 1;
 17820  00383A  0E00               	movlw	0
 17821  00383C  6E7C               	movwf	_was_low_3+1,c	;volatile
 17822  00383E  0E01               	movlw	1
 17823  003840  6E7B               	movwf	_was_low_3,c	;volatile
 17824                           
 17825                           ; BSR set to: 0
 17826                           ;interruptHandler.c: 86: TMR3H = 20000 - servoTimes[2];
 17827  003842  0100               	movlb	0	; () banked
 17828  003844  51DE               	movf	(_servoTimes+4)& (0+255),w,b
 17829  003846  0800               	sublw	0
 17830  003848  0F20               	addlw	32
 17831  00384A  6EB3               	movwf	4019,c	;volatile
 17832                           
 17833                           ; BSR set to: 0
 17834                           ;interruptHandler.c: 87: TMR3L = 20000 - servoTimes[3];
 17835  00384C  0100               	movlb	0	; () banked
 17836  00384E  51E0               	movf	(_servoTimes+6)& (0+255),w,b
 17837  003850  0800               	sublw	0
 17838  003852  0F20               	addlw	32
 17839  003854  6EB2               	movwf	4018,c	;volatile
 17840  003856                     i2l9595:
 17841                           
 17842                           ; BSR set to: 0
 17843                           ;interruptHandler.c: 88: }
 17844                           ;interruptHandler.c: 89: TMR3ON = 1;
 17845  003856  80B1               	bsf	4017,0,c	;volatile
 17846  003858                     i2l969:
 17847  003858  C05A  FFF5         	movff	??_handler+15,tablat
 17848  00385C  C059  FFF8         	movff	??_handler+14,tblptru
 17849  003860  C058  FFF7         	movff	??_handler+13,tblptrh
 17850  003864  C057  FFF6         	movff	??_handler+12,tblptrl
 17851  003868  C056  FFF4         	movff	??_handler+11,prodh
 17852  00386C  C055  FFF3         	movff	??_handler+10,prodl
 17853  003870  C054  FFDA         	movff	??_handler+9,fsr2h
 17854  003874  C053  FFD9         	movff	??_handler+8,fsr2l
 17855  003878  C052  FFE2         	movff	??_handler+7,fsr1h
 17856  00387C  C051  FFE1         	movff	??_handler+6,fsr1l
 17857  003880  C050  FFEA         	movff	??_handler+5,fsr0h
 17858  003884  C04F  FFE9         	movff	??_handler+4,fsr0l
 17859  003888  C04E  FFFB         	movff	??_handler+3,pclatu
 17860  00388C  C04D  FFFA         	movff	??_handler+2,pclath
 17861  003890  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17862  003892  0011               	retfie		f
 17863  003894                     __end_of_handler:
 17864                           	opt stack 0
 17865                           pclatu	equ	0xFFB
 17866                           pclath	equ	0xFFA
 17867                           tblptru	equ	0xFF8
 17868                           tblptrh	equ	0xFF7
 17869                           tblptrl	equ	0xFF6
 17870                           tablat	equ	0xFF5
 17871                           prodh	equ	0xFF4
 17872                           prodl	equ	0xFF3
 17873                           intcon	equ	0xFF2
 17874                           intcon2	equ	0xFF1
 17875                           intcon3	equ	0xFF0
 17876                           indf0	equ	0xFEF
 17877                           postinc0	equ	0xFEE
 17878                           fsr0h	equ	0xFEA
 17879                           fsr0l	equ	0xFE9
 17880                           wreg	equ	0xFE8
 17881                           postdec1	equ	0xFE5
 17882                           fsr1h	equ	0xFE2
 17883                           fsr1l	equ	0xFE1
 17884                           indf2	equ	0xFDF
 17885                           postinc2	equ	0xFDE
 17886                           postdec2	equ	0xFDD
 17887                           fsr2h	equ	0xFDA
 17888                           fsr2l	equ	0xFD9
 17889                           status	equ	0xFD8
 17890                           
 17891 ;; *************** function _updateServoStates *****************
 17892 ;; Defined at:
 17893 ;;		line 520 in file "sort.c"
 17894 ;; Parameters:    Size  Location     Type
 17895 ;;		None
 17896 ;; Auto vars:     Size  Location     Type
 17897 ;;		None
 17898 ;; Return value:  Size  Location     Type
 17899 ;;                  1    wreg      void 
 17900 ;; Registers used:
 17901 ;;		wreg, status,2, status,0, cstack
 17902 ;; Tracked objects:
 17903 ;;		On entry : 0/0
 17904 ;;		On exit  : 0/0
 17905 ;;		Unchanged: 0/0
 17906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17909 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17910 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17911 ;;Total ram usage:        2 bytes
 17912 ;; Hardware stack levels used:    1
 17913 ;; Hardware stack levels required when called:    1
 17914 ;; This function calls:
 17915 ;;		i2_updateServoPosition
 17916 ;; This function is called by:
 17917 ;;		_handler
 17918 ;; This function uses a non-reentrant model
 17919 ;;
 17920                           
 17921                           	psect	text61
 17922  00353C                     __ptext61:
 17923                           	opt stack 0
 17924  00353C                     _updateServoStates:
 17925                           	opt stack 22
 17926                           
 17927                           ;sort.c: 522: if(servo_timer_counter >= servo_timer_target){
 17928                           
 17929                           ;incstack = 0
 17930  00353C  5073               	movf	_servo_timer_target,w,c	;volatile
 17931  00353E  5C71               	subwf	_servo_timer_counter,w,c	;volatile
 17932  003540  5072               	movf	_servo_timer_counter+1,w,c	;volatile
 17933  003542  0A80               	xorlw	128
 17934  003544  6E09               	movwf	??_updateServoStates& (0+255),c
 17935  003546  5074               	movf	_servo_timer_target+1,w,c	;volatile
 17936  003548  0A80               	xorlw	128
 17937  00354A  5809               	subwfb	??_updateServoStates& (0+255),w,c
 17938  00354C  A0D8               	btfss	status,0,c
 17939  00354E  0012               	return	
 17940                           
 17941                           ;sort.c: 524: if(f_panning_to_bin){
 17942  003550  5061               	movf	_f_panning_to_bin,w,c	;volatile
 17943  003552  1062               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 17944  003554  A4D8               	btfss	status,2,c
 17945  003556  D036               	goto	i2l9413
 17946  003558  D05F               	goto	i2l9417
 17947  00355A                     i2l9387:
 17948                           
 17949                           ;sort.c: 528: updateServoPosition(1260, 3);
 17950  00355A  0E04               	movlw	4
 17951  00355C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17952  00355E  0EEC               	movlw	236
 17953  003560  6E01               	movwf	i2updateServoPosition@time_us,c
 17954  003562  0E00               	movlw	0
 17955  003564  6E04               	movwf	i2updateServoPosition@timer+1,c
 17956  003566  0E03               	movlw	3
 17957  003568  6E03               	movwf	i2updateServoPosition@timer,c
 17958  00356A  ECB8  F024         	call	i2_updateServoPosition	;wreg free
 17959  00356E  D025               	goto	i2l9407
 17960  003570                     i2l9391:
 17961                           
 17962                           ;sort.c: 530: servo_timer_target = 700;
 17963  003570  0E02               	movlw	2
 17964  003572  6E74               	movwf	_servo_timer_target+1,c	;volatile
 17965  003574  0EBC               	movlw	188
 17966  003576  6E73               	movwf	_servo_timer_target,c	;volatile
 17967                           
 17968                           ;sort.c: 531: break;
 17969  003578  D04A               	goto	i2l9415
 17970  00357A                     i2l9393:
 17971                           
 17972                           ;sort.c: 533: updateServoPosition(1260, 3);
 17973  00357A  0E04               	movlw	4
 17974  00357C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17975  00357E  0EEC               	movlw	236
 17976  003580  6E01               	movwf	i2updateServoPosition@time_us,c
 17977  003582  0E00               	movlw	0
 17978  003584  6E04               	movwf	i2updateServoPosition@timer+1,c
 17979  003586  0E03               	movlw	3
 17980  003588  6E03               	movwf	i2updateServoPosition@timer,c
 17981  00358A  ECB8  F024         	call	i2_updateServoPosition	;wreg free
 17982  00358E  D015               	goto	i2l9407
 17983  003590                     i2l9399:
 17984                           
 17985                           ;sort.c: 539: updateServoPosition(1390, 3);
 17986  003590  0E05               	movlw	5
 17987  003592  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17988  003594  0E6E               	movlw	110
 17989  003596  6E01               	movwf	i2updateServoPosition@time_us,c
 17990  003598  0E00               	movlw	0
 17991  00359A  6E04               	movwf	i2updateServoPosition@timer+1,c
 17992  00359C  0E03               	movlw	3
 17993  00359E  6E03               	movwf	i2updateServoPosition@timer,c
 17994  0035A0  ECB8  F024         	call	i2_updateServoPosition	;wreg free
 17995  0035A4  D00A               	goto	i2l9407
 17996  0035A6                     i2l9405:
 17997                           
 17998                           ;sort.c: 544: updateServoPosition(1390, 3);
 17999  0035A6  0E05               	movlw	5
 18000  0035A8  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18001  0035AA  0E6E               	movlw	110
 18002  0035AC  6E01               	movwf	i2updateServoPosition@time_us,c
 18003  0035AE  0E00               	movlw	0
 18004  0035B0  6E04               	movwf	i2updateServoPosition@timer+1,c
 18005  0035B2  0E03               	movlw	3
 18006  0035B4  6E03               	movwf	i2updateServoPosition@timer,c
 18007  0035B6  ECB8  F024         	call	i2_updateServoPosition	;wreg free
 18008  0035BA                     i2l9407:
 18009                           
 18010                           ;sort.c: 545: servo_timer_counter = 0;
 18011  0035BA  0E00               	movlw	0
 18012  0035BC  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 18013  0035BE  0E00               	movlw	0
 18014  0035C0  6E71               	movwf	_servo_timer_counter,c	;volatile
 18015  0035C2  D7D6               	goto	i2l9391
 18016  0035C4                     i2l9413:
 18017  0035C4  C06F  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 18018  0035C8  C070  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 18019                           
 18020                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 18021                           ; Switch size 1, requested type "space"
 18022                           ; Number of cases is 4, Range of values is 1 to 9
 18023                           ; switch strategies available:
 18024                           ; Name         Instructions Cycles
 18025                           ; simple_byte           13     7 (average)
 18026                           ;	Chosen strategy is simple_byte
 18027  0035CC  500A               	movf	??_updateServoStates+1,w,c
 18028  0035CE  0A01               	xorlw	1	; case 1
 18029  0035D0  B4D8               	btfsc	status,2,c
 18030  0035D2  D00A               	goto	i2l10055
 18031  0035D4  0A02               	xorlw	2	; case 3
 18032  0035D6  B4D8               	btfsc	status,2,c
 18033  0035D8  D00C               	goto	i2l10057
 18034  0035DA  0A05               	xorlw	5	; case 6
 18035  0035DC  B4D8               	btfsc	status,2,c
 18036  0035DE  D00E               	goto	i2l10059
 18037  0035E0  0A0F               	xorlw	15	; case 9
 18038  0035E2  B4D8               	btfsc	status,2,c
 18039  0035E4  D010               	goto	i2l10061
 18040  0035E6  D013               	goto	i2l9415
 18041  0035E8                     i2l10055:
 18042                           
 18043                           ; Switch size 1, requested type "space"
 18044                           ; Number of cases is 1, Range of values is 244 to 244
 18045                           ; switch strategies available:
 18046                           ; Name         Instructions Cycles
 18047                           ; simple_byte            4     3 (average)
 18048                           ;	Chosen strategy is simple_byte
 18049  0035E8  5009               	movf	??_updateServoStates,w,c
 18050  0035EA  0AF4               	xorlw	244	; case 244
 18051  0035EC  B4D8               	btfsc	status,2,c
 18052  0035EE  D7B5               	goto	i2l9387
 18053  0035F0  D00E               	goto	i2l9415
 18054  0035F2                     i2l10057:
 18055                           
 18056                           ; Switch size 1, requested type "space"
 18057                           ; Number of cases is 1, Range of values is 82 to 82
 18058                           ; switch strategies available:
 18059                           ; Name         Instructions Cycles
 18060                           ; simple_byte            4     3 (average)
 18061                           ;	Chosen strategy is simple_byte
 18062  0035F2  5009               	movf	??_updateServoStates,w,c
 18063  0035F4  0A52               	xorlw	82	; case 82
 18064  0035F6  B4D8               	btfsc	status,2,c
 18065  0035F8  D7C0               	goto	i2l9393
 18066  0035FA  D009               	goto	i2l9415
 18067  0035FC                     i2l10059:
 18068                           
 18069                           ; Switch size 1, requested type "space"
 18070                           ; Number of cases is 1, Range of values is 134 to 134
 18071                           ; switch strategies available:
 18072                           ; Name         Instructions Cycles
 18073                           ; simple_byte            4     3 (average)
 18074                           ;	Chosen strategy is simple_byte
 18075  0035FC  5009               	movf	??_updateServoStates,w,c
 18076  0035FE  0A86               	xorlw	134	; case 134
 18077  003600  B4D8               	btfsc	status,2,c
 18078  003602  D7C6               	goto	i2l9399
 18079  003604  D004               	goto	i2l9415
 18080  003606                     i2l10061:
 18081                           
 18082                           ; Switch size 1, requested type "space"
 18083                           ; Number of cases is 1, Range of values is 96 to 96
 18084                           ; switch strategies available:
 18085                           ; Name         Instructions Cycles
 18086                           ; simple_byte            4     3 (average)
 18087                           ;	Chosen strategy is simple_byte
 18088  003606  5009               	movf	??_updateServoStates,w,c
 18089  003608  0A60               	xorlw	96	; case 96
 18090  00360A  B4D8               	btfsc	status,2,c
 18091  00360C  D7CC               	goto	i2l9405
 18092  00360E                     i2l9415:
 18093                           
 18094                           ;sort.c: 551: f_panning_to_bin = 0;
 18095  00360E  0E00               	movlw	0
 18096  003610  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
 18097  003612  0E00               	movlw	0
 18098  003614  6E61               	movwf	_f_panning_to_bin,c	;volatile
 18099                           
 18100                           ;sort.c: 552: }
 18101  003616  0012               	return	
 18102  003618                     i2l9417:
 18103                           
 18104                           ;sort.c: 553: else if(pan_servo_state == 1200){
 18105  003618  0EB0               	movlw	176
 18106  00361A  186F               	xorwf	_pan_servo_state,w,c	;volatile
 18107  00361C  E15A               	bnz	i2l9447
 18108  00361E  0E04               	movlw	4
 18109  003620  1870               	xorwf	_pan_servo_state+1,w,c	;volatile
 18110  003622  A4D8               	btfss	status,2,c
 18111  003624  D056               	goto	i2l9447
 18112                           
 18113                           ;sort.c: 555: servo_timer_counter = 0;
 18114  003626  0E00               	movlw	0
 18115  003628  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 18116  00362A  0E00               	movlw	0
 18117  00362C  6E71               	movwf	_servo_timer_counter,c	;volatile
 18118                           
 18119                           ;sort.c: 556: }
 18120  00362E  0012               	return	
 18121  003630                     i2l9421:
 18122                           
 18123                           ;sort.c: 561: updateServoPosition(1050, 3);
 18124  003630  0E04               	movlw	4
 18125  003632  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18126  003634  0E1A               	movlw	26
 18127  003636  6E01               	movwf	i2updateServoPosition@time_us,c
 18128  003638  0E00               	movlw	0
 18129  00363A  6E04               	movwf	i2updateServoPosition@timer+1,c
 18130  00363C  0E03               	movlw	3
 18131  00363E  6E03               	movwf	i2updateServoPosition@timer,c
 18132  003640  ECB8  F024         	call	i2_updateServoPosition	;wreg free
 18133                           
 18134                           ;sort.c: 562: servo_timer_counter = 0;
 18135  003644  0E00               	movlw	0
 18136  003646  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 18137  003648  0E00               	movlw	0
 18138  00364A  6E71               	movwf	_servo_timer_counter,c	;volatile
 18139                           
 18140                           ;sort.c: 563: servo_timer_target = 750;
 18141  00364C  0E02               	movlw	2
 18142  00364E  6E74               	movwf	_servo_timer_target+1,c	;volatile
 18143  003650  0EEE               	movlw	238
 18144  003652  6E73               	movwf	_servo_timer_target,c	;volatile
 18145                           
 18146                           ;sort.c: 564: break;
 18147  003654  0012               	return	
 18148  003656                     i2l9427:
 18149                           
 18150                           ;sort.c: 566: updateServoPosition(1050, 3);
 18151  003656  0E04               	movlw	4
 18152  003658  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18153  00365A  0E1A               	movlw	26
 18154  00365C  6E01               	movwf	i2updateServoPosition@time_us,c
 18155  00365E  0E00               	movlw	0
 18156  003660  6E04               	movwf	i2updateServoPosition@timer+1,c
 18157  003662  0E03               	movlw	3
 18158  003664  6E03               	movwf	i2updateServoPosition@timer,c
 18159  003666  ECB8  F024         	call	i2_updateServoPosition	;wreg free
 18160                           
 18161                           ;sort.c: 567: servo_timer_counter = 0;
 18162  00366A  0E00               	movlw	0
 18163  00366C  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 18164  00366E  0E00               	movlw	0
 18165  003670  6E71               	movwf	_servo_timer_counter,c	;volatile
 18166                           
 18167                           ;sort.c: 568: servo_timer_target = 750;
 18168  003672  0E02               	movlw	2
 18169  003674  6E74               	movwf	_servo_timer_target+1,c	;volatile
 18170  003676  0EEE               	movlw	238
 18171  003678  6E73               	movwf	_servo_timer_target,c	;volatile
 18172                           
 18173                           ;sort.c: 569: break;
 18174  00367A  0012               	return	
 18175  00367C                     i2l9433:
 18176                           
 18177                           ;sort.c: 572: updateServoPosition(1200, 1);
 18178  00367C  0E04               	movlw	4
 18179  00367E  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18180  003680  0EB0               	movlw	176
 18181  003682  6E01               	movwf	i2updateServoPosition@time_us,c
 18182  003684  0E00               	movlw	0
 18183  003686  6E04               	movwf	i2updateServoPosition@timer+1,c
 18184  003688  0E01               	movlw	1
 18185  00368A  6E03               	movwf	i2updateServoPosition@timer,c
 18186  00368C  ECB8  F024         	call	i2_updateServoPosition	;wreg free
 18187                           
 18188                           ;sort.c: 573: updateServoPosition(1050, 3);
 18189  003690  0E04               	movlw	4
 18190  003692  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18191  003694  0E1A               	movlw	26
 18192  003696  6E01               	movwf	i2updateServoPosition@time_us,c
 18193  003698  0E00               	movlw	0
 18194  00369A  6E04               	movwf	i2updateServoPosition@timer+1,c
 18195  00369C  0E03               	movlw	3
 18196  00369E  6E03               	movwf	i2updateServoPosition@timer,c
 18197  0036A0  ECB8  F024         	call	i2_updateServoPosition	;wreg free
 18198                           
 18199                           ;sort.c: 574: servo_timer_counter = 0;
 18200  0036A4  0E00               	movlw	0
 18201  0036A6  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 18202  0036A8  0E00               	movlw	0
 18203  0036AA  6E71               	movwf	_servo_timer_counter,c	;volatile
 18204                           
 18205                           ;sort.c: 575: servo_timer_target = 9999;
 18206  0036AC  0E27               	movlw	39
 18207  0036AE  6E74               	movwf	_servo_timer_target+1,c	;volatile
 18208  0036B0  0E0F               	movlw	15
 18209  0036B2  6E73               	movwf	_servo_timer_target,c	;volatile
 18210                           
 18211                           ;sort.c: 577: f_can_distributed = 1;
 18212  0036B4  0E00               	movlw	0
 18213  0036B6  0101               	movlb	1	; () banked
 18214  0036B8  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
 18215  0036BA  0E01               	movlw	1
 18216  0036BC  6F35               	movwf	_f_can_distributed& (0+255),b
 18217                           
 18218                           ; BSR set to: 1
 18219                           ;sort.c: 578: if(f_lastCan == 1){
 18220  0036BE  0100               	movlb	0	; () banked
 18221  0036C0  05EE               	decf	_f_lastCan& (0+255),w,b
 18222  0036C2  0100               	movlb	0	; () banked
 18223  0036C4  11EF               	iorwf	(_f_lastCan+1)& (0+255),w,b
 18224  0036C6  A4D8               	btfss	status,2,c
 18225  0036C8  0012               	return	
 18226                           
 18227                           ; BSR set to: 0
 18228                           ;sort.c: 579: machine_state = DoneSorting_state;
 18229  0036CA  0E02               	movlw	2
 18230  0036CC  0100               	movlb	0	; () banked
 18231  0036CE  6FFC               	movwf	_machine_state& (0+255),b
 18232                           
 18233                           ; BSR set to: 0
 18234                           ;sort.c: 585: }
 18235                           
 18236                           ; BSR set to: 0
 18237                           ;sort.c: 584: break;
 18238                           
 18239                           ;sort.c: 583: default:
 18240                           
 18241                           ; BSR set to: 0
 18242                           ;sort.c: 580: }
 18243                           ;sort.c: 581: break;
 18244  0036D0  0012               	return	
 18245  0036D2                     i2l9447:
 18246  0036D2  C075  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 18247  0036D6  C076  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 18248                           
 18249                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 18250                           ; Switch size 1, requested type "space"
 18251                           ; Number of cases is 2, Range of values is 4 to 5
 18252                           ; switch strategies available:
 18253                           ; Name         Instructions Cycles
 18254                           ; simple_byte            7     4 (average)
 18255                           ;	Chosen strategy is simple_byte
 18256  0036DA  500A               	movf	??_updateServoStates+1,w,c
 18257  0036DC  0A04               	xorlw	4	; case 4
 18258  0036DE  B4D8               	btfsc	status,2,c
 18259  0036E0  D004               	goto	i2l10063
 18260  0036E2  0A01               	xorlw	1	; case 5
 18261  0036E4  A4D8               	btfss	status,2,c
 18262  0036E6  0012               	return	
 18263  0036E8  D008               	goto	i2l10065
 18264  0036EA                     i2l10063:
 18265                           
 18266                           ; Switch size 1, requested type "space"
 18267                           ; Number of cases is 2, Range of values is 26 to 236
 18268                           ; switch strategies available:
 18269                           ; Name         Instructions Cycles
 18270                           ; simple_byte            7     4 (average)
 18271                           ;	Chosen strategy is simple_byte
 18272  0036EA  5009               	movf	??_updateServoStates,w,c
 18273  0036EC  0A1A               	xorlw	26	; case 26
 18274  0036EE  B4D8               	btfsc	status,2,c
 18275  0036F0  D7C5               	goto	i2l9433
 18276  0036F2  0AF6               	xorlw	246	; case 236
 18277  0036F4  A4D8               	btfss	status,2,c
 18278  0036F6  0012               	return	
 18279  0036F8  D79B               	goto	i2l9421
 18280  0036FA                     i2l10065:
 18281                           
 18282                           ; Switch size 1, requested type "space"
 18283                           ; Number of cases is 1, Range of values is 110 to 110
 18284                           ; switch strategies available:
 18285                           ; Name         Instructions Cycles
 18286                           ; simple_byte            4     3 (average)
 18287                           ;	Chosen strategy is simple_byte
 18288  0036FA  5009               	movf	??_updateServoStates,w,c
 18289  0036FC  0A6E               	xorlw	110	; case 110
 18290  0036FE  A4D8               	btfss	status,2,c
 18291  003700  0012               	return	
 18292  003702  D7A9               	goto	i2l9427
 18293  003704                     __end_of_updateServoStates:
 18294                           	opt stack 0
 18295                           pclatu	equ	0xFFB
 18296                           pclath	equ	0xFFA
 18297                           tblptru	equ	0xFF8
 18298                           tblptrh	equ	0xFF7
 18299                           tblptrl	equ	0xFF6
 18300                           tablat	equ	0xFF5
 18301                           prodh	equ	0xFF4
 18302                           prodl	equ	0xFF3
 18303                           intcon	equ	0xFF2
 18304                           intcon2	equ	0xFF1
 18305                           intcon3	equ	0xFF0
 18306                           indf0	equ	0xFEF
 18307                           postinc0	equ	0xFEE
 18308                           fsr0h	equ	0xFEA
 18309                           fsr0l	equ	0xFE9
 18310                           wreg	equ	0xFE8
 18311                           postdec1	equ	0xFE5
 18312                           fsr1h	equ	0xFE2
 18313                           fsr1l	equ	0xFE1
 18314                           indf2	equ	0xFDF
 18315                           postinc2	equ	0xFDE
 18316                           postdec2	equ	0xFDD
 18317                           fsr2h	equ	0xFDA
 18318                           fsr2l	equ	0xFD9
 18319                           status	equ	0xFD8
 18320                           
 18321 ;; *************** function i2_updateServoPosition *****************
 18322 ;; Defined at:
 18323 ;;		line 505 in file "sort.c"
 18324 ;; Parameters:    Size  Location     Type
 18325 ;;  time_us         2    0[COMRAM] int 
 18326 ;;  timer           2    2[COMRAM] int 
 18327 ;; Auto vars:     Size  Location     Type
 18328 ;;  updateServoP    2    6[COMRAM] unsigned int 
 18329 ;; Return value:  Size  Location     Type
 18330 ;;                  1    wreg      void 
 18331 ;; Registers used:
 18332 ;;		wreg, status,2, status,0
 18333 ;; Tracked objects:
 18334 ;;		On entry : 0/0
 18335 ;;		On exit  : 0/0
 18336 ;;		Unchanged: 0/0
 18337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18338 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18339 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18340 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18341 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18342 ;;Total ram usage:        8 bytes
 18343 ;; Hardware stack levels used:    1
 18344 ;; This function calls:
 18345 ;;		Nothing
 18346 ;; This function is called by:
 18347 ;;		_updateServoStates
 18348 ;; This function uses a non-reentrant model
 18349 ;;
 18350                           
 18351                           	psect	text62
 18352  004970                     __ptext62:
 18353                           	opt stack 0
 18354  004970                     i2_updateServoPosition:
 18355                           	opt stack 22
 18356                           
 18357                           ;sort.c: 506: unsigned int my_time = 65535 - time_us;
 18358                           
 18359                           ;incstack = 0
 18360  004970  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 18361  004974  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 18362  004978  1E05               	comf	??i2_updateServoPosition,f,c
 18363  00497A  1E06               	comf	??i2_updateServoPosition+1,f,c
 18364  00497C  4A05               	infsnz	??i2_updateServoPosition,f,c
 18365  00497E  2A06               	incf	??i2_updateServoPosition+1,f,c
 18366  004980  0EFF               	movlw	255
 18367  004982  2405               	addwf	??i2_updateServoPosition,w,c
 18368  004984  6E07               	movwf	i2updateServoPosition@my_time,c
 18369  004986  0EFF               	movlw	255
 18370  004988  2006               	addwfc	??i2_updateServoPosition+1,w,c
 18371  00498A  6E08               	movwf	i2updateServoPosition@my_time+1,c
 18372                           
 18373                           ;sort.c: 507: switch(timer){
 18374  00498C  D019               	goto	i2l8603
 18375  00498E                     i2l8597:
 18376                           
 18377                           ;sort.c: 509: servoTimes[0] = my_time >> 8;
 18378  00498E  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18379  004990  0100               	movlb	0	; () banked
 18380  004992  6FDA               	movwf	_servoTimes& (0+255),b
 18381  004994  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 18382                           
 18383                           ;sort.c: 510: servoTimes[1] = my_time & 0xFF;
 18384  004996  5007               	movf	i2updateServoPosition@my_time,w,c
 18385  004998  0100               	movlb	0	; () banked
 18386  00499A  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 18387  00499C  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 18388                           
 18389                           ; BSR set to: 0
 18390                           ;sort.c: 512: pan_servo_state = time_us;
 18391  00499E  C001  F06F         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 18392  0049A2  C002  F070         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 18393  0049A6                     i2l870:
 18394                           
 18395                           ;sort.c: 514: servoTimes[2] = my_time >> 8;
 18396  0049A6  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18397  0049A8  0100               	movlb	0	; () banked
 18398  0049AA  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 18399  0049AC  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 18400                           
 18401                           ;sort.c: 515: servoTimes[3] = my_time & 0xFF;
 18402  0049AE  5007               	movf	i2updateServoPosition@my_time,w,c
 18403  0049B0  0100               	movlb	0	; () banked
 18404  0049B2  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 18405  0049B4  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 18406                           
 18407                           ; BSR set to: 0
 18408                           ;sort.c: 517: tilt_servo_state = time_us;
 18409  0049B6  C001  F075         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 18410  0049BA  C002  F076         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 18411                           
 18412                           ;sort.c: 518: }
 18413  0049BE  0012               	return	
 18414  0049C0                     i2l8603:
 18415  0049C0  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 18416  0049C4  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 18417                           
 18418                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18419                           ; Switch size 1, requested type "space"
 18420                           ; Number of cases is 1, Range of values is 0 to 0
 18421                           ; switch strategies available:
 18422                           ; Name         Instructions Cycles
 18423                           ; simple_byte            4     3 (average)
 18424                           ;	Chosen strategy is simple_byte
 18425  0049C8  5006               	movf	??i2_updateServoPosition+1,w,c
 18426  0049CA  0A00               	xorlw	0	; case 0
 18427  0049CC  A4D8               	btfss	status,2,c
 18428  0049CE  0012               	return	
 18429                           
 18430                           ; Switch size 1, requested type "space"
 18431                           ; Number of cases is 2, Range of values is 1 to 3
 18432                           ; switch strategies available:
 18433                           ; Name         Instructions Cycles
 18434                           ; simple_byte            7     4 (average)
 18435                           ;	Chosen strategy is simple_byte
 18436  0049D0  5005               	movf	??i2_updateServoPosition,w,c
 18437  0049D2  0A01               	xorlw	1	; case 1
 18438  0049D4  B4D8               	btfsc	status,2,c
 18439  0049D6  D7DB               	goto	i2l8597
 18440  0049D8  0A02               	xorlw	2	; case 3
 18441  0049DA  A4D8               	btfss	status,2,c
 18442  0049DC  0012               	return	
 18443  0049DE  D7E3               	goto	i2l870
 18444  0049E0                     __end_ofi2_updateServoPosition:
 18445                           	opt stack 0
 18446                           pclatu	equ	0xFFB
 18447                           pclath	equ	0xFFA
 18448                           tblptru	equ	0xFF8
 18449                           tblptrh	equ	0xFF7
 18450                           tblptrl	equ	0xFF6
 18451                           tablat	equ	0xFF5
 18452                           prodh	equ	0xFF4
 18453                           prodl	equ	0xFF3
 18454                           intcon	equ	0xFF2
 18455                           intcon2	equ	0xFF1
 18456                           intcon3	equ	0xFF0
 18457                           indf0	equ	0xFEF
 18458                           postinc0	equ	0xFEE
 18459                           fsr0h	equ	0xFEA
 18460                           fsr0l	equ	0xFE9
 18461                           wreg	equ	0xFE8
 18462                           postdec1	equ	0xFE5
 18463                           fsr1h	equ	0xFE2
 18464                           fsr1l	equ	0xFE1
 18465                           indf2	equ	0xFDF
 18466                           postinc2	equ	0xFDE
 18467                           postdec2	equ	0xFDD
 18468                           fsr2h	equ	0xFDA
 18469                           fsr2l	equ	0xFD9
 18470                           status	equ	0xFD8
 18471                           
 18472 ;; *************** function _updateMenu *****************
 18473 ;; Defined at:
 18474 ;;		line 213 in file "UI.c"
 18475 ;; Parameters:    Size  Location     Type
 18476 ;;		None
 18477 ;; Auto vars:     Size  Location     Type
 18478 ;;		None
 18479 ;; Return value:  Size  Location     Type
 18480 ;;                  1    wreg      void 
 18481 ;; Registers used:
 18482 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18483 ;; Tracked objects:
 18484 ;;		On entry : 0/0
 18485 ;;		On exit  : 0/0
 18486 ;;		Unchanged: 0/0
 18487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18490 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18491 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18492 ;;Total ram usage:        2 bytes
 18493 ;; Hardware stack levels used:    1
 18494 ;; Hardware stack levels required when called:    5
 18495 ;; This function calls:
 18496 ;;		_change_state_to_logs_11
 18497 ;;		_change_state_to_logs_12
 18498 ;;		_change_state_to_logs_22
 18499 ;;		_change_state_to_logs_23
 18500 ;;		_change_state_to_logs_33
 18501 ;;		_change_state_to_logs_34
 18502 ;;		_change_state_to_menu_11
 18503 ;;		_change_state_to_menu_23
 18504 ;;		_dispLogs
 18505 ;;		_inputHandler
 18506 ;;		i2_change_state_to_menu_12
 18507 ;;		i2_change_state_to_menu_22
 18508 ;;		i2_change_state_to_menu_start
 18509 ;; This function is called by:
 18510 ;;		_handler
 18511 ;; This function uses a non-reentrant model
 18512 ;;
 18513                           
 18514                           	psect	text63
 18515  002702                     __ptext63:
 18516                           	opt stack 0
 18517  002702                     _updateMenu:
 18518                           	opt stack 18
 18519                           
 18520                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 18521                           
 18522                           ;incstack = 0
 18523  002702  0E00               	movlw	0
 18524  002704  6E78               	movwf	_up+1,c
 18525  002706  0E00               	movlw	0
 18526  002708  6E77               	movwf	_up,c
 18527  00270A  0E00               	movlw	0
 18528  00270C  6E5E               	movwf	_down+1,c
 18529  00270E  0E00               	movlw	0
 18530  002710  6E5D               	movwf	_down,c
 18531  002712  0E00               	movlw	0
 18532  002714  6E60               	movwf	_enter+1,c
 18533  002716  0E00               	movlw	0
 18534  002718  6E5F               	movwf	_enter,c
 18535  00271A  0E00               	movlw	0
 18536  00271C  6E5C               	movwf	_back+1,c
 18537  00271E  0E00               	movlw	0
 18538  002720  6E5B               	movwf	_back,c
 18539                           
 18540                           ;UI.c: 215: (INTCONbits.GIE = 0);
 18541  002722  9EF2               	bcf	intcon,7,c	;volatile
 18542                           
 18543                           ;UI.c: 217: if (inputHandler()
 18544                           ;UI.c: 220: ){
 18545  002724  ECA8  F019         	call	_inputHandler	;wreg free
 18546  002728  502A               	movf	?_inputHandler,w,c
 18547  00272A  102B               	iorwf	?_inputHandler+1,w,c
 18548  00272C  A4D8               	btfss	status,2,c
 18549  00272E  D112               	goto	i2l9135
 18550  002730  D146               	goto	i2l257
 18551  002732                     i2l8987:
 18552                           
 18553                           ;UI.c: 224: change_state_to_menu_11();
 18554  002732  EC1B  F028         	call	_change_state_to_menu_11	;wreg free
 18555                           
 18556                           ;UI.c: 225: break;
 18557  002736  D143               	goto	i2l257
 18558  002738                     i2l8989:
 18559                           
 18560                           ;UI.c: 228: if(up){
 18561  002738  5077               	movf	_up,w,c
 18562  00273A  1078               	iorwf	_up+1,w,c
 18563  00273C  B4D8               	btfsc	status,2,c
 18564  00273E  D003               	goto	i2l8993
 18565                           
 18566                           ;UI.c: 229: change_state_to_menu_23();
 18567  002740  EC03  F028         	call	_change_state_to_menu_23	;wreg free
 18568                           
 18569                           ;UI.c: 230: }
 18570  002744  D13C               	goto	i2l257
 18571  002746                     i2l8993:
 18572                           
 18573                           ;UI.c: 231: else if(down){
 18574  002746  505D               	movf	_down,w,c
 18575  002748  105E               	iorwf	_down+1,w,c
 18576  00274A  B4D8               	btfsc	status,2,c
 18577  00274C  D003               	goto	i2l8997
 18578                           
 18579                           ;UI.c: 232: change_state_to_menu_12();
 18580  00274E  ECEB  F027         	call	i2_change_state_to_menu_12	;wreg free
 18581                           
 18582                           ;UI.c: 233: }
 18583  002752  D135               	goto	i2l257
 18584  002754                     i2l8997:
 18585                           
 18586                           ;UI.c: 234: else if(enter){
 18587  002754  505F               	movf	_enter,w,c
 18588  002756  1060               	iorwf	_enter+1,w,c
 18589  002758  B4D8               	btfsc	status,2,c
 18590  00275A  D131               	goto	i2l257
 18591                           
 18592                           ;UI.c: 235: change_state_to_menu_start();
 18593  00275C  EC2E  F029         	call	i2_change_state_to_menu_start	;wreg free
 18594                           
 18595                           ;UI.c: 236: }
 18596                           ;UI.c: 237: break;
 18597  002760  D12E               	goto	i2l257
 18598  002762                     i2l9001:
 18599                           
 18600                           ;UI.c: 240: if(up){
 18601  002762  5077               	movf	_up,w,c
 18602  002764  1078               	iorwf	_up+1,w,c
 18603  002766  B4D8               	btfsc	status,2,c
 18604  002768  D003               	goto	i2l9005
 18605                           
 18606                           ;UI.c: 241: change_state_to_menu_11();
 18607  00276A  EC1B  F028         	call	_change_state_to_menu_11	;wreg free
 18608                           
 18609                           ;UI.c: 242: }
 18610  00276E  D127               	goto	i2l257
 18611  002770                     i2l9005:
 18612                           
 18613                           ;UI.c: 243: else if(down){
 18614  002770  505D               	movf	_down,w,c
 18615  002772  105E               	iorwf	_down+1,w,c
 18616  002774  B4D8               	btfsc	status,2,c
 18617  002776  D011               	goto	i2l9021
 18618                           
 18619                           ;UI.c: 244: change_state_to_menu_23();
 18620  002778  EC03  F028         	call	_change_state_to_menu_23	;wreg free
 18621                           
 18622                           ;UI.c: 245: }
 18623  00277C  D120               	goto	i2l257
 18624  00277E                     i2l9013:
 18625                           
 18626                           ;UI.c: 252: if(up){
 18627  00277E  5077               	movf	_up,w,c
 18628  002780  1078               	iorwf	_up+1,w,c
 18629  002782  B4D8               	btfsc	status,2,c
 18630  002784  D003               	goto	i2l9017
 18631                           
 18632                           ;UI.c: 253: change_state_to_menu_11();
 18633  002786  EC1B  F028         	call	_change_state_to_menu_11	;wreg free
 18634                           
 18635                           ;UI.c: 254: }
 18636  00278A  D119               	goto	i2l257
 18637  00278C                     i2l9017:
 18638                           
 18639                           ;UI.c: 255: else if(down){
 18640  00278C  505D               	movf	_down,w,c
 18641  00278E  105E               	iorwf	_down+1,w,c
 18642  002790  B4D8               	btfsc	status,2,c
 18643  002792  D003               	goto	i2l9021
 18644                           
 18645                           ;UI.c: 256: change_state_to_menu_23();
 18646  002794  EC03  F028         	call	_change_state_to_menu_23	;wreg free
 18647                           
 18648                           ;UI.c: 257: }
 18649  002798  D112               	goto	i2l257
 18650  00279A                     i2l9021:
 18651                           
 18652                           ;UI.c: 258: else if(enter){
 18653  00279A  505F               	movf	_enter,w,c
 18654  00279C  1060               	iorwf	_enter+1,w,c
 18655  00279E  B4D8               	btfsc	status,2,c
 18656  0027A0  D10E               	goto	i2l257
 18657                           
 18658                           ;UI.c: 259: machine_state = Sorting_state;
 18659  0027A2  0E01               	movlw	1
 18660  0027A4  0100               	movlb	0	; () banked
 18661  0027A6  6FFC               	movwf	_machine_state& (0+255),b
 18662                           
 18663                           ; BSR set to: 0
 18664                           ;UI.c: 260: }
 18665                           ;UI.c: 261: break;
 18666                           
 18667                           ; BSR set to: 0
 18668                           
 18669                           ; BSR set to: 0
 18670  0027A8  D10A               	goto	i2l257
 18671  0027AA                     i2l9025:
 18672                           
 18673                           ;UI.c: 264: if(up){
 18674  0027AA  5077               	movf	_up,w,c
 18675  0027AC  1078               	iorwf	_up+1,w,c
 18676  0027AE  B4D8               	btfsc	status,2,c
 18677  0027B0  D003               	goto	i2l9029
 18678                           
 18679                           ;UI.c: 265: change_state_to_menu_22();
 18680  0027B2  ECD3  F027         	call	i2_change_state_to_menu_22	;wreg free
 18681                           
 18682                           ;UI.c: 266: }
 18683  0027B6  D103               	goto	i2l257
 18684  0027B8                     i2l9029:
 18685                           
 18686                           ;UI.c: 267: else if(down){
 18687  0027B8  505D               	movf	_down,w,c
 18688  0027BA  105E               	iorwf	_down+1,w,c
 18689  0027BC  B4D8               	btfsc	status,2,c
 18690  0027BE  D003               	goto	i2l9033
 18691                           
 18692                           ;UI.c: 268: change_state_to_menu_11();
 18693  0027C0  EC1B  F028         	call	_change_state_to_menu_11	;wreg free
 18694                           
 18695                           ;UI.c: 269: }
 18696  0027C4  D0FC               	goto	i2l257
 18697  0027C6                     i2l9033:
 18698                           
 18699                           ;UI.c: 270: else if(enter){
 18700  0027C6  505F               	movf	_enter,w,c
 18701  0027C8  1060               	iorwf	_enter+1,w,c
 18702  0027CA  B4D8               	btfsc	status,2,c
 18703  0027CC  D0F8               	goto	i2l257
 18704                           
 18705                           ;UI.c: 271: change_state_to_logs_11();
 18706  0027CE  EC93  F028         	call	_change_state_to_logs_11	;wreg free
 18707                           
 18708                           ;UI.c: 272: }
 18709                           ;UI.c: 273: break;
 18710  0027D2  D0F5               	goto	i2l257
 18711  0027D4                     i2l9037:
 18712                           
 18713                           ;UI.c: 276: if(up){
 18714  0027D4  5077               	movf	_up,w,c
 18715  0027D6  1078               	iorwf	_up+1,w,c
 18716  0027D8  B4D8               	btfsc	status,2,c
 18717  0027DA  D003               	goto	i2l9041
 18718                           
 18719                           ;UI.c: 277: change_state_to_logs_34();
 18720  0027DC  EC33  F028         	call	_change_state_to_logs_34	;wreg free
 18721                           
 18722                           ;UI.c: 278: }
 18723  0027E0  D0EE               	goto	i2l257
 18724  0027E2                     i2l9041:
 18725                           
 18726                           ;UI.c: 279: else if(down){
 18727  0027E2  505D               	movf	_down,w,c
 18728  0027E4  105E               	iorwf	_down+1,w,c
 18729  0027E6  B4D8               	btfsc	status,2,c
 18730  0027E8  D003               	goto	i2l9045
 18731                           
 18732                           ;UI.c: 280: change_state_to_logs_12();
 18733  0027EA  EC7B  F028         	call	_change_state_to_logs_12	;wreg free
 18734                           
 18735                           ;UI.c: 281: }
 18736  0027EE  D0E7               	goto	i2l257
 18737  0027F0                     i2l9045:
 18738                           
 18739                           ;UI.c: 282: else if(enter){
 18740  0027F0  505F               	movf	_enter,w,c
 18741  0027F2  1060               	iorwf	_enter+1,w,c
 18742  0027F4  B4D8               	btfsc	status,2,c
 18743  0027F6  D007               	goto	i2l9049
 18744                           
 18745                           ;UI.c: 283: dispLogs(1);
 18746  0027F8  0E00               	movlw	0
 18747  0027FA  6E13               	movwf	dispLogs@myLog+1,c
 18748  0027FC  0E01               	movlw	1
 18749  0027FE  6E12               	movwf	dispLogs@myLog,c
 18750  002800  EC68  F029         	call	_dispLogs	;wreg free
 18751                           
 18752                           ;UI.c: 284: }
 18753  002804  D0DC               	goto	i2l257
 18754  002806                     i2l9049:
 18755                           
 18756                           ;UI.c: 285: else if(back){
 18757  002806  505B               	movf	_back,w,c
 18758  002808  105C               	iorwf	_back+1,w,c
 18759  00280A  B4D8               	btfsc	status,2,c
 18760  00280C  D0D8               	goto	i2l257
 18761                           
 18762                           ;UI.c: 286: change_state_to_menu_23();
 18763  00280E  EC03  F028         	call	_change_state_to_menu_23	;wreg free
 18764                           
 18765                           ;UI.c: 287: }
 18766                           ;UI.c: 288: break;
 18767  002812  D0D5               	goto	i2l257
 18768  002814                     i2l9053:
 18769                           
 18770                           ;UI.c: 291: if(up){
 18771  002814  5077               	movf	_up,w,c
 18772  002816  1078               	iorwf	_up+1,w,c
 18773  002818  B4D8               	btfsc	status,2,c
 18774  00281A  D003               	goto	i2l9057
 18775                           
 18776                           ;UI.c: 292: change_state_to_logs_11();
 18777  00281C  EC93  F028         	call	_change_state_to_logs_11	;wreg free
 18778                           
 18779                           ;UI.c: 293: }
 18780  002820  D0CE               	goto	i2l257
 18781  002822                     i2l9057:
 18782                           
 18783                           ;UI.c: 294: else if(down){
 18784  002822  505D               	movf	_down,w,c
 18785  002824  105E               	iorwf	_down+1,w,c
 18786  002826  B4D8               	btfsc	status,2,c
 18787  002828  D003               	goto	i2l9061
 18788                           
 18789                           ;UI.c: 295: change_state_to_logs_23();
 18790  00282A  ECC2  F028         	call	_change_state_to_logs_23	;wreg free
 18791                           
 18792                           ;UI.c: 296: }
 18793  00282E  D0C7               	goto	i2l257
 18794  002830                     i2l9061:
 18795                           
 18796                           ;UI.c: 297: else if(enter){
 18797  002830  505F               	movf	_enter,w,c
 18798  002832  1060               	iorwf	_enter+1,w,c
 18799  002834  B4D8               	btfsc	status,2,c
 18800  002836  D007               	goto	i2l9065
 18801                           
 18802                           ;UI.c: 298: dispLogs(2);
 18803  002838  0E00               	movlw	0
 18804  00283A  6E13               	movwf	dispLogs@myLog+1,c
 18805  00283C  0E02               	movlw	2
 18806  00283E  6E12               	movwf	dispLogs@myLog,c
 18807  002840  EC68  F029         	call	_dispLogs	;wreg free
 18808                           
 18809                           ;UI.c: 299: }
 18810  002844  D0BC               	goto	i2l257
 18811  002846                     i2l9065:
 18812                           
 18813                           ;UI.c: 300: else if(back){
 18814  002846  505B               	movf	_back,w,c
 18815  002848  105C               	iorwf	_back+1,w,c
 18816  00284A  B4D8               	btfsc	status,2,c
 18817  00284C  D0B8               	goto	i2l257
 18818                           
 18819                           ;UI.c: 301: change_state_to_menu_23();
 18820  00284E  EC03  F028         	call	_change_state_to_menu_23	;wreg free
 18821                           
 18822                           ;UI.c: 302: }
 18823                           ;UI.c: 303: break;
 18824  002852  D0B5               	goto	i2l257
 18825  002854                     i2l9069:
 18826                           
 18827                           ;UI.c: 306: if(up){
 18828  002854  5077               	movf	_up,w,c
 18829  002856  1078               	iorwf	_up+1,w,c
 18830  002858  B4D8               	btfsc	status,2,c
 18831  00285A  D003               	goto	i2l9073
 18832                           
 18833                           ;UI.c: 307: change_state_to_logs_11();
 18834  00285C  EC93  F028         	call	_change_state_to_logs_11	;wreg free
 18835                           
 18836                           ;UI.c: 308: }
 18837  002860  D0AE               	goto	i2l257
 18838  002862                     i2l9073:
 18839                           
 18840                           ;UI.c: 309: else if(down){
 18841  002862  505D               	movf	_down,w,c
 18842  002864  105E               	iorwf	_down+1,w,c
 18843  002866  B4D8               	btfsc	status,2,c
 18844  002868  D003               	goto	i2l9077
 18845                           
 18846                           ;UI.c: 310: change_state_to_logs_23();
 18847  00286A  ECC2  F028         	call	_change_state_to_logs_23	;wreg free
 18848                           
 18849                           ;UI.c: 311: }
 18850  00286E  D0A7               	goto	i2l257
 18851  002870                     i2l9077:
 18852                           
 18853                           ;UI.c: 312: else if(enter){
 18854  002870  505F               	movf	_enter,w,c
 18855  002872  1060               	iorwf	_enter+1,w,c
 18856  002874  B4D8               	btfsc	status,2,c
 18857  002876  D007               	goto	i2l9081
 18858                           
 18859                           ;UI.c: 313: dispLogs(2);
 18860  002878  0E00               	movlw	0
 18861  00287A  6E13               	movwf	dispLogs@myLog+1,c
 18862  00287C  0E02               	movlw	2
 18863  00287E  6E12               	movwf	dispLogs@myLog,c
 18864  002880  EC68  F029         	call	_dispLogs	;wreg free
 18865                           
 18866                           ;UI.c: 314: }
 18867  002884  D09C               	goto	i2l257
 18868  002886                     i2l9081:
 18869                           
 18870                           ;UI.c: 315: else if(back){
 18871  002886  505B               	movf	_back,w,c
 18872  002888  105C               	iorwf	_back+1,w,c
 18873  00288A  B4D8               	btfsc	status,2,c
 18874  00288C  D098               	goto	i2l257
 18875                           
 18876                           ;UI.c: 316: change_state_to_menu_23();
 18877  00288E  EC03  F028         	call	_change_state_to_menu_23	;wreg free
 18878                           
 18879                           ;UI.c: 317: }
 18880                           ;UI.c: 318: break;
 18881  002892  D095               	goto	i2l257
 18882  002894                     i2l9085:
 18883                           
 18884                           ;UI.c: 321: if(up){
 18885  002894  5077               	movf	_up,w,c
 18886  002896  1078               	iorwf	_up+1,w,c
 18887  002898  B4D8               	btfsc	status,2,c
 18888  00289A  D003               	goto	i2l9089
 18889                           
 18890                           ;UI.c: 322: change_state_to_logs_22();
 18891  00289C  EC63  F028         	call	_change_state_to_logs_22	;wreg free
 18892                           
 18893                           ;UI.c: 323: }
 18894  0028A0  D08E               	goto	i2l257
 18895  0028A2                     i2l9089:
 18896                           
 18897                           ;UI.c: 324: else if(down){
 18898  0028A2  505D               	movf	_down,w,c
 18899  0028A4  105E               	iorwf	_down+1,w,c
 18900  0028A6  B4D8               	btfsc	status,2,c
 18901  0028A8  D003               	goto	i2l9093
 18902                           
 18903                           ;UI.c: 325: change_state_to_logs_34();
 18904  0028AA  EC33  F028         	call	_change_state_to_logs_34	;wreg free
 18905                           
 18906                           ;UI.c: 326: }
 18907  0028AE  D087               	goto	i2l257
 18908  0028B0                     i2l9093:
 18909                           
 18910                           ;UI.c: 327: else if(enter){
 18911  0028B0  505F               	movf	_enter,w,c
 18912  0028B2  1060               	iorwf	_enter+1,w,c
 18913  0028B4  B4D8               	btfsc	status,2,c
 18914  0028B6  D007               	goto	i2l9097
 18915                           
 18916                           ;UI.c: 328: dispLogs(3);
 18917  0028B8  0E00               	movlw	0
 18918  0028BA  6E13               	movwf	dispLogs@myLog+1,c
 18919  0028BC  0E03               	movlw	3
 18920  0028BE  6E12               	movwf	dispLogs@myLog,c
 18921  0028C0  EC68  F029         	call	_dispLogs	;wreg free
 18922                           
 18923                           ;UI.c: 329: }
 18924  0028C4  D07C               	goto	i2l257
 18925  0028C6                     i2l9097:
 18926                           
 18927                           ;UI.c: 330: else if(back){
 18928  0028C6  505B               	movf	_back,w,c
 18929  0028C8  105C               	iorwf	_back+1,w,c
 18930  0028CA  B4D8               	btfsc	status,2,c
 18931  0028CC  D078               	goto	i2l257
 18932                           
 18933                           ;UI.c: 331: change_state_to_menu_23();
 18934  0028CE  EC03  F028         	call	_change_state_to_menu_23	;wreg free
 18935                           
 18936                           ;UI.c: 332: }
 18937                           ;UI.c: 333: break;
 18938  0028D2  D075               	goto	i2l257
 18939  0028D4                     i2l9101:
 18940                           
 18941                           ;UI.c: 336: if(up){
 18942  0028D4  5077               	movf	_up,w,c
 18943  0028D6  1078               	iorwf	_up+1,w,c
 18944  0028D8  B4D8               	btfsc	status,2,c
 18945  0028DA  D003               	goto	i2l9105
 18946                           
 18947                           ;UI.c: 337: change_state_to_logs_22();
 18948  0028DC  EC63  F028         	call	_change_state_to_logs_22	;wreg free
 18949                           
 18950                           ;UI.c: 338: }
 18951  0028E0  D06E               	goto	i2l257
 18952  0028E2                     i2l9105:
 18953                           
 18954                           ;UI.c: 339: else if(down){
 18955  0028E2  505D               	movf	_down,w,c
 18956  0028E4  105E               	iorwf	_down+1,w,c
 18957  0028E6  B4D8               	btfsc	status,2,c
 18958  0028E8  D003               	goto	i2l9109
 18959                           
 18960                           ;UI.c: 340: change_state_to_logs_34();
 18961  0028EA  EC33  F028         	call	_change_state_to_logs_34	;wreg free
 18962                           
 18963                           ;UI.c: 341: }
 18964  0028EE  D067               	goto	i2l257
 18965  0028F0                     i2l9109:
 18966                           
 18967                           ;UI.c: 342: else if(enter){
 18968  0028F0  505F               	movf	_enter,w,c
 18969  0028F2  1060               	iorwf	_enter+1,w,c
 18970  0028F4  B4D8               	btfsc	status,2,c
 18971  0028F6  D007               	goto	i2l9113
 18972                           
 18973                           ;UI.c: 343: dispLogs(3);
 18974  0028F8  0E00               	movlw	0
 18975  0028FA  6E13               	movwf	dispLogs@myLog+1,c
 18976  0028FC  0E03               	movlw	3
 18977  0028FE  6E12               	movwf	dispLogs@myLog,c
 18978  002900  EC68  F029         	call	_dispLogs	;wreg free
 18979                           
 18980                           ;UI.c: 344: }
 18981  002904  D05C               	goto	i2l257
 18982  002906                     i2l9113:
 18983                           
 18984                           ;UI.c: 345: else if(back){
 18985  002906  505B               	movf	_back,w,c
 18986  002908  105C               	iorwf	_back+1,w,c
 18987  00290A  B4D8               	btfsc	status,2,c
 18988  00290C  D058               	goto	i2l257
 18989                           
 18990                           ;UI.c: 346: change_state_to_menu_23();
 18991  00290E  EC03  F028         	call	_change_state_to_menu_23	;wreg free
 18992                           
 18993                           ;UI.c: 347: }
 18994                           ;UI.c: 348: break;
 18995  002912  D055               	goto	i2l257
 18996  002914                     i2l9117:
 18997                           
 18998                           ;UI.c: 351: if(up){
 18999  002914  5077               	movf	_up,w,c
 19000  002916  1078               	iorwf	_up+1,w,c
 19001  002918  B4D8               	btfsc	status,2,c
 19002  00291A  D003               	goto	i2l9121
 19003                           
 19004                           ;UI.c: 352: change_state_to_logs_33();
 19005  00291C  EC4B  F028         	call	_change_state_to_logs_33	;wreg free
 19006                           
 19007                           ;UI.c: 353: }
 19008  002920  D04E               	goto	i2l257
 19009  002922                     i2l9121:
 19010                           
 19011                           ;UI.c: 354: else if(down){
 19012  002922  505D               	movf	_down,w,c
 19013  002924  105E               	iorwf	_down+1,w,c
 19014  002926  B4D8               	btfsc	status,2,c
 19015  002928  D003               	goto	i2l9125
 19016                           
 19017                           ;UI.c: 355: change_state_to_logs_11();
 19018  00292A  EC93  F028         	call	_change_state_to_logs_11	;wreg free
 19019                           
 19020                           ;UI.c: 356: }
 19021  00292E  D047               	goto	i2l257
 19022  002930                     i2l9125:
 19023                           
 19024                           ;UI.c: 357: else if(enter){
 19025  002930  505F               	movf	_enter,w,c
 19026  002932  1060               	iorwf	_enter+1,w,c
 19027  002934  B4D8               	btfsc	status,2,c
 19028  002936  D007               	goto	i2l9129
 19029                           
 19030                           ;UI.c: 358: dispLogs(4);
 19031  002938  0E00               	movlw	0
 19032  00293A  6E13               	movwf	dispLogs@myLog+1,c
 19033  00293C  0E04               	movlw	4
 19034  00293E  6E12               	movwf	dispLogs@myLog,c
 19035  002940  EC68  F029         	call	_dispLogs	;wreg free
 19036                           
 19037                           ;UI.c: 359: }
 19038  002944  D03C               	goto	i2l257
 19039  002946                     i2l9129:
 19040                           
 19041                           ;UI.c: 360: else if(back){
 19042  002946  505B               	movf	_back,w,c
 19043  002948  105C               	iorwf	_back+1,w,c
 19044  00294A  B4D8               	btfsc	status,2,c
 19045  00294C  D038               	goto	i2l257
 19046                           
 19047                           ;UI.c: 361: change_state_to_menu_23();
 19048  00294E  EC03  F028         	call	_change_state_to_menu_23	;wreg free
 19049                           
 19050                           ;UI.c: 367: }
 19051                           
 19052                           ;UI.c: 366: break;
 19053                           
 19054                           ;UI.c: 365: default:
 19055                           
 19056                           ;UI.c: 362: }
 19057                           ;UI.c: 363: break;
 19058  002952  D035               	goto	i2l257
 19059  002954                     i2l9135:
 19060  002954  C0EC  F043         	movff	_cur_state,??_updateMenu
 19061  002958  C0ED  F044         	movff	_cur_state+1,??_updateMenu+1
 19062                           
 19063                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 19064                           ; Switch size 1, requested type "space"
 19065                           ; Number of cases is 3, Range of values is 0 to 4
 19066                           ; switch strategies available:
 19067                           ; Name         Instructions Cycles
 19068                           ; simple_byte           10     6 (average)
 19069                           ;	Chosen strategy is simple_byte
 19070  00295C  5044               	movf	??_updateMenu+1,w,c
 19071  00295E  0A00               	xorlw	0	; case 0
 19072  002960  B4D8               	btfsc	status,2,c
 19073  002962  D007               	goto	i2l10069
 19074  002964  0A03               	xorlw	3	; case 3
 19075  002966  B4D8               	btfsc	status,2,c
 19076  002968  D015               	goto	i2l10071
 19077  00296A  0A07               	xorlw	7	; case 4
 19078  00296C  B4D8               	btfsc	status,2,c
 19079  00296E  D020               	goto	i2l10073
 19080  002970  D026               	goto	i2l257
 19081  002972                     i2l10069:
 19082                           
 19083                           ; Switch size 1, requested type "space"
 19084                           ; Number of cases is 5, Range of values is 0 to 23
 19085                           ; switch strategies available:
 19086                           ; Name         Instructions Cycles
 19087                           ; simple_byte           16     9 (average)
 19088                           ;	Chosen strategy is simple_byte
 19089  002972  5043               	movf	??_updateMenu,w,c
 19090  002974  0A00               	xorlw	0	; case 0
 19091  002976  B4D8               	btfsc	status,2,c
 19092  002978  D6DC               	goto	i2l8987
 19093  00297A  0A0B               	xorlw	11	; case 11
 19094  00297C  B4D8               	btfsc	status,2,c
 19095  00297E  D6DC               	goto	i2l8989
 19096  002980  0A07               	xorlw	7	; case 12
 19097  002982  B4D8               	btfsc	status,2,c
 19098  002984  D6EE               	goto	i2l9001
 19099  002986  0A1A               	xorlw	26	; case 22
 19100  002988  B4D8               	btfsc	status,2,c
 19101  00298A  D6F9               	goto	i2l9013
 19102  00298C  0A01               	xorlw	1	; case 23
 19103  00298E  B4D8               	btfsc	status,2,c
 19104  002990  D70C               	goto	i2l9025
 19105  002992  D015               	goto	i2l257
 19106  002994                     i2l10071:
 19107                           
 19108                           ; Switch size 1, requested type "space"
 19109                           ; Number of cases is 4, Range of values is 243 to 255
 19110                           ; switch strategies available:
 19111                           ; Name         Instructions Cycles
 19112                           ; simple_byte           13     7 (average)
 19113                           ;	Chosen strategy is simple_byte
 19114  002994  5043               	movf	??_updateMenu,w,c
 19115  002996  0AF3               	xorlw	243	; case 243
 19116  002998  B4D8               	btfsc	status,2,c
 19117  00299A  D71C               	goto	i2l9037
 19118  00299C  0A07               	xorlw	7	; case 244
 19119  00299E  B4D8               	btfsc	status,2,c
 19120  0029A0  D739               	goto	i2l9053
 19121  0029A2  0A0A               	xorlw	10	; case 254
 19122  0029A4  B4D8               	btfsc	status,2,c
 19123  0029A6  D756               	goto	i2l9069
 19124  0029A8  0A01               	xorlw	1	; case 255
 19125  0029AA  B4D8               	btfsc	status,2,c
 19126  0029AC  D773               	goto	i2l9085
 19127  0029AE  D007               	goto	i2l257
 19128  0029B0                     i2l10073:
 19129                           
 19130                           ; Switch size 1, requested type "space"
 19131                           ; Number of cases is 2, Range of values is 9 to 10
 19132                           ; switch strategies available:
 19133                           ; Name         Instructions Cycles
 19134                           ; simple_byte            7     4 (average)
 19135                           ;	Chosen strategy is simple_byte
 19136  0029B0  5043               	movf	??_updateMenu,w,c
 19137  0029B2  0A09               	xorlw	9	; case 9
 19138  0029B4  B4D8               	btfsc	status,2,c
 19139  0029B6  D78E               	goto	i2l9101
 19140  0029B8  0A03               	xorlw	3	; case 10
 19141  0029BA  B4D8               	btfsc	status,2,c
 19142  0029BC  D7AB               	goto	i2l9117
 19143  0029BE                     i2l257:
 19144                           
 19145                           ;UI.c: 368: }
 19146                           ;UI.c: 369: (INTCONbits.GIE = 1);
 19147  0029BE  8EF2               	bsf	intcon,7,c	;volatile
 19148  0029C0  0012               	return		;funcret
 19149  0029C2                     __end_of_updateMenu:
 19150                           	opt stack 0
 19151                           pclatu	equ	0xFFB
 19152                           pclath	equ	0xFFA
 19153                           tblptru	equ	0xFF8
 19154                           tblptrh	equ	0xFF7
 19155                           tblptrl	equ	0xFF6
 19156                           tablat	equ	0xFF5
 19157                           prodh	equ	0xFF4
 19158                           prodl	equ	0xFF3
 19159                           intcon	equ	0xFF2
 19160                           intcon2	equ	0xFF1
 19161                           intcon3	equ	0xFF0
 19162                           indf0	equ	0xFEF
 19163                           postinc0	equ	0xFEE
 19164                           fsr0h	equ	0xFEA
 19165                           fsr0l	equ	0xFE9
 19166                           wreg	equ	0xFE8
 19167                           postdec1	equ	0xFE5
 19168                           fsr1h	equ	0xFE2
 19169                           fsr1l	equ	0xFE1
 19170                           indf2	equ	0xFDF
 19171                           postinc2	equ	0xFDE
 19172                           postdec2	equ	0xFDD
 19173                           fsr2h	equ	0xFDA
 19174                           fsr2l	equ	0xFD9
 19175                           status	equ	0xFD8
 19176                           
 19177 ;; *************** function i2_change_state_to_menu_start *****************
 19178 ;; Defined at:
 19179 ;;		line 474 in file "UI.c"
 19180 ;; Parameters:    Size  Location     Type
 19181 ;;		None
 19182 ;; Auto vars:     Size  Location     Type
 19183 ;;		None
 19184 ;; Return value:  Size  Location     Type
 19185 ;;                  1    wreg      void 
 19186 ;; Registers used:
 19187 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19188 ;; Tracked objects:
 19189 ;;		On entry : 0/0
 19190 ;;		On exit  : 0/0
 19191 ;;		Unchanged: 0/0
 19192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19197 ;;Total ram usage:        0 bytes
 19198 ;; Hardware stack levels used:    1
 19199 ;; Hardware stack levels required when called:    4
 19200 ;; This function calls:
 19201 ;;		i2_lcdInst
 19202 ;;		i2_printRTC
 19203 ;;		i2_printf
 19204 ;; This function is called by:
 19205 ;;		_updateMenu
 19206 ;; This function uses a non-reentrant model
 19207 ;;
 19208                           
 19209                           	psect	text64
 19210  00525C                     __ptext64:
 19211                           	opt stack 0
 19212  00525C                     i2_change_state_to_menu_start:
 19213                           	opt stack 18
 19214                           
 19215                           ;UI.c: 475: cur_state = 0;
 19216                           
 19217                           ;incstack = 0
 19218  00525C  0E00               	movlw	0
 19219  00525E  0100               	movlb	0	; () banked
 19220  005260  6FED               	movwf	(_cur_state+1)& (0+255),b
 19221  005262  0E00               	movlw	0
 19222  005264  6FEC               	movwf	_cur_state& (0+255),b
 19223                           
 19224                           ; BSR set to: 0
 19225                           ;UI.c: 477: lcdInst(0b10000000);;
 19226  005266  0E80               	movlw	128
 19227  005268  EC06  F02A         	call	i2_lcdInst
 19228                           
 19229                           ;UI.c: 478: printRTC();
 19230  00526C  EC8D  F018         	call	i2_printRTC	;wreg free
 19231                           
 19232                           ;UI.c: 479: lcdInst(0b11000000);;
 19233  005270  0EC0               	movlw	192
 19234  005272  EC06  F02A         	call	i2_lcdInst
 19235                           
 19236                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 19237  005276  0EF6               	movlw	low STR_30
 19238  005278  6E0D               	movwf	i2printf@f,c
 19239  00527A  0EFD               	movlw	high STR_30
 19240  00527C  6E0E               	movwf	i2printf@f+1,c
 19241  00527E  ECE6  F00E         	call	i2_printf	;wreg free
 19242  005282  0012               	return		;funcret
 19243  005284                     __end_ofi2_change_state_to_menu_start:
 19244                           	opt stack 0
 19245                           pclatu	equ	0xFFB
 19246                           pclath	equ	0xFFA
 19247                           tblptru	equ	0xFF8
 19248                           tblptrh	equ	0xFF7
 19249                           tblptrl	equ	0xFF6
 19250                           tablat	equ	0xFF5
 19251                           prodh	equ	0xFF4
 19252                           prodl	equ	0xFF3
 19253                           intcon	equ	0xFF2
 19254                           intcon2	equ	0xFF1
 19255                           intcon3	equ	0xFF0
 19256                           indf0	equ	0xFEF
 19257                           postinc0	equ	0xFEE
 19258                           fsr0h	equ	0xFEA
 19259                           fsr0l	equ	0xFE9
 19260                           wreg	equ	0xFE8
 19261                           postdec1	equ	0xFE5
 19262                           fsr1h	equ	0xFE2
 19263                           fsr1l	equ	0xFE1
 19264                           indf2	equ	0xFDF
 19265                           postinc2	equ	0xFDE
 19266                           postdec2	equ	0xFDD
 19267                           fsr2h	equ	0xFDA
 19268                           fsr2l	equ	0xFD9
 19269                           status	equ	0xFD8
 19270                           
 19271 ;; *************** function i2_printRTC *****************
 19272 ;; Defined at:
 19273 ;;		line 63 in file "RTC.c"
 19274 ;; Parameters:    Size  Location     Type
 19275 ;;		None
 19276 ;; Auto vars:     Size  Location     Type
 19277 ;;  printRTC       14   44[COMRAM] int [7]
 19278 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 19279 ;;  printRTC        2   64[COMRAM] int 
 19280 ;;  printRTC        2   58[COMRAM] int 
 19281 ;; Return value:  Size  Location     Type
 19282 ;;                  1    wreg      void 
 19283 ;; Registers used:
 19284 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19285 ;; Tracked objects:
 19286 ;;		On entry : 0/0
 19287 ;;		On exit  : 0/0
 19288 ;;		Unchanged: 0/0
 19289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19291 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19292 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19293 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19294 ;;Total ram usage:       25 bytes
 19295 ;; Hardware stack levels used:    1
 19296 ;; Hardware stack levels required when called:    3
 19297 ;; This function calls:
 19298 ;;		i2_getRTC
 19299 ;;		i2_lcdInst
 19300 ;;		i2_printf
 19301 ;;		i2_strcpy
 19302 ;; This function is called by:
 19303 ;;		i2_change_state_to_menu_start
 19304 ;; This function uses a non-reentrant model
 19305 ;;
 19306                           
 19307                           	psect	text65
 19308  00311A                     __ptext65:
 19309                           	opt stack 0
 19310  00311A                     i2_printRTC:
 19311                           	opt stack 18
 19312                           
 19313                           ;RTC.c: 64: getRTC();
 19314                           
 19315                           ;incstack = 0
 19316  00311A  EC7F  F024         	call	i2_getRTC	;wreg free
 19317                           
 19318                           ;RTC.c: 65: char month[] = "MMM";
 19319  00311E  C145  F03D         	movff	printRTC@F3226,i2printRTC@month
 19320  003122  C146  F03E         	movff	printRTC@F3226+1,i2printRTC@month+1
 19321  003126  C147  F03F         	movff	printRTC@F3226+2,i2printRTC@month+2
 19322  00312A  C148  F040         	movff	printRTC@F3226+3,i2printRTC@month+3
 19323                           
 19324                           ;RTC.c: 66: int INT_time[7];
 19325                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 19326  00312E  0E00               	movlw	0
 19327  003130  6E42               	movwf	i2printRTC@i+1,c
 19328  003132  0E00               	movlw	0
 19329  003134  6E41               	movwf	i2printRTC@i,c
 19330  003136  BE42               	btfsc	i2printRTC@i+1,7,c
 19331  003138  D006               	goto	i2l7037
 19332  00313A  5042               	movf	i2printRTC@i+1,w,c
 19333  00313C  E135               	bnz	i2l608
 19334  00313E  0E07               	movlw	7
 19335  003140  5C41               	subwf	i2printRTC@i,w,c
 19336  003142  B0D8               	btfsc	status,0,c
 19337  003144  D031               	goto	i2l608
 19338  003146                     i2l7037:
 19339                           
 19340                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 19341  003146  0E1C               	movlw	low _time
 19342  003148  2441               	addwf	i2printRTC@i,w,c
 19343  00314A  6ED9               	movwf	fsr2l,c
 19344  00314C  0E01               	movlw	high _time
 19345  00314E  2042               	addwfc	i2printRTC@i+1,w,c
 19346  003150  6EDA               	movwf	fsr2h,c
 19347  003152  50DF               	movf	indf2,w,c
 19348  003154  6E2A               	movwf	??i2_printRTC& (0+255),c
 19349  003156  3A2A               	swapf	??i2_printRTC,f,c
 19350  003158  0E0F               	movlw	15
 19351  00315A  162A               	andwf	??i2_printRTC,f,c
 19352  00315C  0E0F               	movlw	15
 19353  00315E  162A               	andwf	??i2_printRTC,f,c
 19354  003160  502A               	movf	??i2_printRTC,w,c
 19355  003162  0D0A               	mullw	10
 19356  003164  0E1C               	movlw	low _time
 19357  003166  2441               	addwf	i2printRTC@i,w,c
 19358  003168  6ED9               	movwf	fsr2l,c
 19359  00316A  0E01               	movlw	high _time
 19360  00316C  2042               	addwfc	i2printRTC@i+1,w,c
 19361  00316E  6EDA               	movwf	fsr2h,c
 19362  003170  50DF               	movf	indf2,w,c
 19363  003172  0B0F               	andlw	15
 19364  003174  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 19365  003176  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 19366  003178  50F3               	movf	prodl,w,c
 19367  00317A  262B               	addwf	??i2_printRTC+1,f,c
 19368  00317C  50F4               	movf	prodh,w,c
 19369  00317E  222C               	addwfc	??i2_printRTC+2,f,c
 19370  003180  90D8               	bcf	status,0,c
 19371  003182  3441               	rlcf	i2printRTC@i,w,c
 19372  003184  6ED9               	movwf	fsr2l,c
 19373  003186  3442               	rlcf	i2printRTC@i+1,w,c
 19374  003188  6EDA               	movwf	fsr2h,c
 19375  00318A  0E2D               	movlw	low i2printRTC@INT_time
 19376  00318C  26D9               	addwf	fsr2l,f,c
 19377  00318E  0E00               	movlw	high i2printRTC@INT_time
 19378  003190  22DA               	addwfc	fsr2h,f,c
 19379  003192  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 19380  003196  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 19381  00319A  4A41               	infsnz	i2printRTC@i,f,c
 19382  00319C  2A42               	incf	i2printRTC@i+1,f,c
 19383  00319E  BE42               	btfsc	i2printRTC@i+1,7,c
 19384  0031A0  D7D2               	goto	i2l7037
 19385  0031A2  5042               	movf	i2printRTC@i+1,w,c
 19386  0031A4  E101               	bnz	i2u554_40
 19387  0031A6  D7CB               	goto	L12
 19388  0031A8                     i2u554_40:
 19389  0031A8                     i2l608:
 19390                           
 19391                           ;RTC.c: 69: }
 19392                           ;RTC.c: 70: int RTC_month = INT_time[5];
 19393  0031A8  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 19394  0031AC  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 19395                           
 19396                           ;RTC.c: 71: switch(RTC_month){
 19397  0031B0  D084               	goto	i2l7069
 19398  0031B2                     i2l7043:
 19399                           
 19400                           ;RTC.c: 73: strcpy(month, "JAN");
 19401  0031B2  0E3D               	movlw	low i2printRTC@month
 19402  0031B4  6E01               	movwf	i2strcpy@to,c
 19403  0031B6  0E00               	movlw	high i2printRTC@month
 19404  0031B8  6E02               	movwf	i2strcpy@to+1,c
 19405  0031BA  0EDA               	movlw	low STR_8
 19406  0031BC  6E03               	movwf	i2strcpy@from,c
 19407  0031BE  0EFF               	movlw	high STR_8
 19408  0031C0  6E04               	movwf	i2strcpy@from+1,c
 19409  0031C2  ECA2  F027         	call	i2_strcpy	;wreg free
 19410                           
 19411                           ;RTC.c: 74: break;
 19412  0031C6  D0A6               	goto	i2l7071
 19413  0031C8                     i2l7045:
 19414                           
 19415                           ;RTC.c: 76: strcpy(month, "FEB");
 19416  0031C8  0E3D               	movlw	low i2printRTC@month
 19417  0031CA  6E01               	movwf	i2strcpy@to,c
 19418  0031CC  0E00               	movlw	high i2printRTC@month
 19419  0031CE  6E02               	movwf	i2strcpy@to+1,c
 19420  0031D0  0ECA               	movlw	low STR_9
 19421  0031D2  6E03               	movwf	i2strcpy@from,c
 19422  0031D4  0EFF               	movlw	high STR_9
 19423  0031D6  6E04               	movwf	i2strcpy@from+1,c
 19424  0031D8  ECA2  F027         	call	i2_strcpy	;wreg free
 19425                           
 19426                           ;RTC.c: 77: break;
 19427  0031DC  D09B               	goto	i2l7071
 19428  0031DE                     i2l7047:
 19429                           
 19430                           ;RTC.c: 79: strcpy(month, "MAR");
 19431  0031DE  0E3D               	movlw	low i2printRTC@month
 19432  0031E0  6E01               	movwf	i2strcpy@to,c
 19433  0031E2  0E00               	movlw	high i2printRTC@month
 19434  0031E4  6E02               	movwf	i2strcpy@to+1,c
 19435  0031E6  0EE6               	movlw	low STR_10
 19436  0031E8  6E03               	movwf	i2strcpy@from,c
 19437  0031EA  0EFF               	movlw	high STR_10
 19438  0031EC  6E04               	movwf	i2strcpy@from+1,c
 19439  0031EE  ECA2  F027         	call	i2_strcpy	;wreg free
 19440                           
 19441                           ;RTC.c: 80: break;
 19442  0031F2  D090               	goto	i2l7071
 19443  0031F4                     i2l7049:
 19444                           
 19445                           ;RTC.c: 82: strcpy(month, "APR");
 19446  0031F4  0E3D               	movlw	low i2printRTC@month
 19447  0031F6  6E01               	movwf	i2strcpy@to,c
 19448  0031F8  0E00               	movlw	high i2printRTC@month
 19449  0031FA  6E02               	movwf	i2strcpy@to+1,c
 19450  0031FC  0EEA               	movlw	low STR_11
 19451  0031FE  6E03               	movwf	i2strcpy@from,c
 19452  003200  0EFF               	movlw	high STR_11
 19453  003202  6E04               	movwf	i2strcpy@from+1,c
 19454  003204  ECA2  F027         	call	i2_strcpy	;wreg free
 19455                           
 19456                           ;RTC.c: 83: break;
 19457  003208  D085               	goto	i2l7071
 19458  00320A                     i2l7051:
 19459                           
 19460                           ;RTC.c: 85: strcpy(month, "MAY");
 19461  00320A  0E3D               	movlw	low i2printRTC@month
 19462  00320C  6E01               	movwf	i2strcpy@to,c
 19463  00320E  0E00               	movlw	high i2printRTC@month
 19464  003210  6E02               	movwf	i2strcpy@to+1,c
 19465  003212  0EFA               	movlw	low STR_12
 19466  003214  6E03               	movwf	i2strcpy@from,c
 19467  003216  0EFF               	movlw	high STR_12
 19468  003218  6E04               	movwf	i2strcpy@from+1,c
 19469  00321A  ECA2  F027         	call	i2_strcpy	;wreg free
 19470                           
 19471                           ;RTC.c: 86: break;
 19472  00321E  D07A               	goto	i2l7071
 19473  003220                     i2l7053:
 19474                           
 19475                           ;RTC.c: 88: strcpy(month, "JUN");
 19476  003220  0E3D               	movlw	low i2printRTC@month
 19477  003222  6E01               	movwf	i2strcpy@to,c
 19478  003224  0E00               	movlw	high i2printRTC@month
 19479  003226  6E02               	movwf	i2strcpy@to+1,c
 19480  003228  0EDE               	movlw	low STR_13
 19481  00322A  6E03               	movwf	i2strcpy@from,c
 19482  00322C  0EFF               	movlw	high STR_13
 19483  00322E  6E04               	movwf	i2strcpy@from+1,c
 19484  003230  ECA2  F027         	call	i2_strcpy	;wreg free
 19485                           
 19486                           ;RTC.c: 89: break;
 19487  003234  D06F               	goto	i2l7071
 19488  003236                     i2l7055:
 19489                           
 19490                           ;RTC.c: 91: strcpy(month, "JUL");
 19491  003236  0E3D               	movlw	low i2printRTC@month
 19492  003238  6E01               	movwf	i2strcpy@to,c
 19493  00323A  0E00               	movlw	high i2printRTC@month
 19494  00323C  6E02               	movwf	i2strcpy@to+1,c
 19495  00323E  0ED6               	movlw	low STR_14
 19496  003240  6E03               	movwf	i2strcpy@from,c
 19497  003242  0EFF               	movlw	high STR_14
 19498  003244  6E04               	movwf	i2strcpy@from+1,c
 19499  003246  ECA2  F027         	call	i2_strcpy	;wreg free
 19500                           
 19501                           ;RTC.c: 92: break;
 19502  00324A  D064               	goto	i2l7071
 19503  00324C                     i2l7057:
 19504                           
 19505                           ;RTC.c: 94: strcpy(month, "AUG");
 19506  00324C  0E3D               	movlw	low i2printRTC@month
 19507  00324E  6E01               	movwf	i2strcpy@to,c
 19508  003250  0E00               	movlw	high i2printRTC@month
 19509  003252  6E02               	movwf	i2strcpy@to+1,c
 19510  003254  0ED2               	movlw	low STR_15
 19511  003256  6E03               	movwf	i2strcpy@from,c
 19512  003258  0EFF               	movlw	high STR_15
 19513  00325A  6E04               	movwf	i2strcpy@from+1,c
 19514  00325C  ECA2  F027         	call	i2_strcpy	;wreg free
 19515                           
 19516                           ;RTC.c: 95: break;
 19517  003260  D059               	goto	i2l7071
 19518  003262                     i2l7059:
 19519                           
 19520                           ;RTC.c: 97: strcpy(month, "SEP");
 19521  003262  0E3D               	movlw	low i2printRTC@month
 19522  003264  6E01               	movwf	i2strcpy@to,c
 19523  003266  0E00               	movlw	high i2printRTC@month
 19524  003268  6E02               	movwf	i2strcpy@to+1,c
 19525  00326A  0EE2               	movlw	low STR_16
 19526  00326C  6E03               	movwf	i2strcpy@from,c
 19527  00326E  0EFF               	movlw	high STR_16
 19528  003270  6E04               	movwf	i2strcpy@from+1,c
 19529  003272  ECA2  F027         	call	i2_strcpy	;wreg free
 19530                           
 19531                           ;RTC.c: 98: break;
 19532  003276  D04E               	goto	i2l7071
 19533  003278                     i2l7061:
 19534                           
 19535                           ;RTC.c: 100: strcpy(month, "OCT");
 19536  003278  0E3D               	movlw	low i2printRTC@month
 19537  00327A  6E01               	movwf	i2strcpy@to,c
 19538  00327C  0E00               	movlw	high i2printRTC@month
 19539  00327E  6E02               	movwf	i2strcpy@to+1,c
 19540  003280  0EF2               	movlw	low STR_17
 19541  003282  6E03               	movwf	i2strcpy@from,c
 19542  003284  0EFF               	movlw	high STR_17
 19543  003286  6E04               	movwf	i2strcpy@from+1,c
 19544  003288  ECA2  F027         	call	i2_strcpy	;wreg free
 19545                           
 19546                           ;RTC.c: 101: break;
 19547  00328C  D043               	goto	i2l7071
 19548  00328E                     i2l7063:
 19549                           
 19550                           ;RTC.c: 103: strcpy(month, "NOV");
 19551  00328E  0E3D               	movlw	low i2printRTC@month
 19552  003290  6E01               	movwf	i2strcpy@to,c
 19553  003292  0E00               	movlw	high i2printRTC@month
 19554  003294  6E02               	movwf	i2strcpy@to+1,c
 19555  003296  0EF6               	movlw	low STR_18
 19556  003298  6E03               	movwf	i2strcpy@from,c
 19557  00329A  0EFF               	movlw	high STR_18
 19558  00329C  6E04               	movwf	i2strcpy@from+1,c
 19559  00329E  ECA2  F027         	call	i2_strcpy	;wreg free
 19560                           
 19561                           ;RTC.c: 104: break;
 19562  0032A2  D038               	goto	i2l7071
 19563  0032A4                     i2l7065:
 19564                           
 19565                           ;RTC.c: 106: strcpy(month, "DEC");
 19566  0032A4  0E3D               	movlw	low i2printRTC@month
 19567  0032A6  6E01               	movwf	i2strcpy@to,c
 19568  0032A8  0E00               	movlw	high i2printRTC@month
 19569  0032AA  6E02               	movwf	i2strcpy@to+1,c
 19570  0032AC  0ECE               	movlw	low STR_19
 19571  0032AE  6E03               	movwf	i2strcpy@from,c
 19572  0032B0  0EFF               	movlw	high STR_19
 19573  0032B2  6E04               	movwf	i2strcpy@from+1,c
 19574  0032B4  ECA2  F027         	call	i2_strcpy	;wreg free
 19575                           
 19576                           ;RTC.c: 108: }
 19577                           
 19578                           ;RTC.c: 107: break;
 19579  0032B8  D02D               	goto	i2l7071
 19580  0032BA                     i2l7069:
 19581  0032BA  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 19582  0032BE  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 19583                           
 19584                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19585                           ; Switch size 1, requested type "space"
 19586                           ; Number of cases is 1, Range of values is 0 to 0
 19587                           ; switch strategies available:
 19588                           ; Name         Instructions Cycles
 19589                           ; simple_byte            4     3 (average)
 19590                           ;	Chosen strategy is simple_byte
 19591  0032C2  502B               	movf	??i2_printRTC+1,w,c
 19592  0032C4  0A00               	xorlw	0	; case 0
 19593  0032C6  A4D8               	btfss	status,2,c
 19594  0032C8  D025               	goto	i2l7071
 19595                           
 19596                           ; Switch size 1, requested type "space"
 19597                           ; Number of cases is 12, Range of values is 1 to 12
 19598                           ; switch strategies available:
 19599                           ; Name         Instructions Cycles
 19600                           ; simple_byte           37    19 (average)
 19601                           ;	Chosen strategy is simple_byte
 19602  0032CA  502A               	movf	??i2_printRTC,w,c
 19603  0032CC  0A01               	xorlw	1	; case 1
 19604  0032CE  B4D8               	btfsc	status,2,c
 19605  0032D0  D770               	goto	i2l7043
 19606  0032D2  0A03               	xorlw	3	; case 2
 19607  0032D4  B4D8               	btfsc	status,2,c
 19608  0032D6  D778               	goto	i2l7045
 19609  0032D8  0A01               	xorlw	1	; case 3
 19610  0032DA  B4D8               	btfsc	status,2,c
 19611  0032DC  D780               	goto	i2l7047
 19612  0032DE  0A07               	xorlw	7	; case 4
 19613  0032E0  B4D8               	btfsc	status,2,c
 19614  0032E2  D788               	goto	i2l7049
 19615  0032E4  0A01               	xorlw	1	; case 5
 19616  0032E6  B4D8               	btfsc	status,2,c
 19617  0032E8  D790               	goto	i2l7051
 19618  0032EA  0A03               	xorlw	3	; case 6
 19619  0032EC  B4D8               	btfsc	status,2,c
 19620  0032EE  D798               	goto	i2l7053
 19621  0032F0  0A01               	xorlw	1	; case 7
 19622  0032F2  B4D8               	btfsc	status,2,c
 19623  0032F4  D7A0               	goto	i2l7055
 19624  0032F6  0A0F               	xorlw	15	; case 8
 19625  0032F8  B4D8               	btfsc	status,2,c
 19626  0032FA  D7A8               	goto	i2l7057
 19627  0032FC  0A01               	xorlw	1	; case 9
 19628  0032FE  B4D8               	btfsc	status,2,c
 19629  003300  D7B0               	goto	i2l7059
 19630  003302  0A03               	xorlw	3	; case 10
 19631  003304  B4D8               	btfsc	status,2,c
 19632  003306  D7B8               	goto	i2l7061
 19633  003308  0A01               	xorlw	1	; case 11
 19634  00330A  B4D8               	btfsc	status,2,c
 19635  00330C  D7C0               	goto	i2l7063
 19636  00330E  0A07               	xorlw	7	; case 12
 19637  003310  B4D8               	btfsc	status,2,c
 19638  003312  D7C8               	goto	i2l7065
 19639  003314                     i2l7071:
 19640                           
 19641                           ;RTC.c: 109: lcdInst(0b10000000);;
 19642  003314  0E80               	movlw	128
 19643  003316  EC06  F02A         	call	i2_lcdInst
 19644                           
 19645                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 19646  00331A  0EF8               	movlw	low STR_21
 19647  00331C  6E0D               	movwf	i2printf@f,c
 19648  00331E  0EFA               	movlw	high STR_21
 19649  003320  6E0E               	movwf	i2printf@f+1,c
 19650  003322  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 19651  003326  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 19652  00332A  0E3D               	movlw	low i2printRTC@month
 19653  00332C  6E11               	movwf	?i2_printf+4,c
 19654  00332E  0E00               	movlw	high i2printRTC@month
 19655  003330  6E12               	movwf	?i2_printf+5,c
 19656  003332  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 19657  003336  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 19658  00333A  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 19659  00333E  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 19660  003342  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 19661  003346  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 19662  00334A  ECE6  F00E         	call	i2_printf	;wreg free
 19663  00334E  0012               	return		;funcret
 19664  003350                     __end_ofi2_printRTC:
 19665                           	opt stack 0
 19666                           pclatu	equ	0xFFB
 19667                           pclath	equ	0xFFA
 19668                           tblptru	equ	0xFF8
 19669                           tblptrh	equ	0xFF7
 19670                           tblptrl	equ	0xFF6
 19671                           tablat	equ	0xFF5
 19672                           prodh	equ	0xFF4
 19673                           prodl	equ	0xFF3
 19674                           intcon	equ	0xFF2
 19675                           intcon2	equ	0xFF1
 19676                           intcon3	equ	0xFF0
 19677                           indf0	equ	0xFEF
 19678                           postinc0	equ	0xFEE
 19679                           fsr0h	equ	0xFEA
 19680                           fsr0l	equ	0xFE9
 19681                           wreg	equ	0xFE8
 19682                           postdec1	equ	0xFE5
 19683                           fsr1h	equ	0xFE2
 19684                           fsr1l	equ	0xFE1
 19685                           indf2	equ	0xFDF
 19686                           postinc2	equ	0xFDE
 19687                           postdec2	equ	0xFDD
 19688                           fsr2h	equ	0xFDA
 19689                           fsr2l	equ	0xFD9
 19690                           status	equ	0xFD8
 19691                           
 19692 ;; *************** function i2_strcpy *****************
 19693 ;; Defined at:
 19694 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 19695 ;; Parameters:    Size  Location     Type
 19696 ;;  to              2    0[COMRAM] PTR unsigned char 
 19697 ;;		 -> printRTC@month(4), UI@month(4), 
 19698 ;;  from            2    2[COMRAM] PTR const unsigned char 
 19699 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 19700 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 19701 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 19702 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 19703 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 19704 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 19705 ;;		 -> STR_8(4), 
 19706 ;; Auto vars:     Size  Location     Type
 19707 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 19708 ;;		 -> printRTC@month(4), UI@month(4), 
 19709 ;; Return value:  Size  Location     Type
 19710 ;;                  2    0[COMRAM] PTR unsigned char 
 19711 ;; Registers used:
 19712 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 19713 ;; Tracked objects:
 19714 ;;		On entry : 0/0
 19715 ;;		On exit  : 0/0
 19716 ;;		Unchanged: 0/0
 19717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19718 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19719 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19721 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19722 ;;Total ram usage:        6 bytes
 19723 ;; Hardware stack levels used:    1
 19724 ;; This function calls:
 19725 ;;		Nothing
 19726 ;; This function is called by:
 19727 ;;		i2_printRTC
 19728 ;; This function uses a non-reentrant model
 19729 ;;
 19730                           
 19731                           	psect	text66
 19732  004F44                     __ptext66:
 19733                           	opt stack 0
 19734  004F44                     i2_strcpy:
 19735                           	opt stack 20
 19736                           
 19737                           ;incstack = 0
 19738  004F44  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 19739  004F48  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 19740  004F4C  D004               	goto	i2l6691
 19741  004F4E                     i2l6689:
 19742  004F4E  4A05               	infsnz	i2strcpy@cp,f,c
 19743  004F50  2A06               	incf	i2strcpy@cp+1,f,c
 19744  004F52  4A03               	infsnz	i2strcpy@from,f,c
 19745  004F54  2A04               	incf	i2strcpy@from+1,f,c
 19746  004F56                     i2l6691:
 19747  004F56  C003  FFF6         	movff	i2strcpy@from,tblptrl
 19748  004F5A  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 19749  004F5E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19750  004F5E  6AF8               	clrf	tblptru,c
 19751  004F60                     	endif
 19752  004F60                     	if	0	;tblptru may be non-zero
 19753  004F60                     	endif
 19754  004F60  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 19755  004F64  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 19756  004F68  0008               	tblrd		*
 19757  004F6A  CFF5 FFDF          	movff	tablat,indf2
 19758  004F6E  50DF               	movf	indf2,w,c
 19759  004F70  B4D8               	btfsc	status,2,c
 19760  004F72  0012               	return	
 19761  004F74  D7EC               	goto	i2l6689
 19762  004F76                     __end_ofi2_strcpy:
 19763                           	opt stack 0
 19764                           pclatu	equ	0xFFB
 19765                           pclath	equ	0xFFA
 19766                           tblptru	equ	0xFF8
 19767                           tblptrh	equ	0xFF7
 19768                           tblptrl	equ	0xFF6
 19769                           tablat	equ	0xFF5
 19770                           prodh	equ	0xFF4
 19771                           prodl	equ	0xFF3
 19772                           intcon	equ	0xFF2
 19773                           intcon2	equ	0xFF1
 19774                           intcon3	equ	0xFF0
 19775                           indf0	equ	0xFEF
 19776                           postinc0	equ	0xFEE
 19777                           fsr0h	equ	0xFEA
 19778                           fsr0l	equ	0xFE9
 19779                           wreg	equ	0xFE8
 19780                           postdec1	equ	0xFE5
 19781                           fsr1h	equ	0xFE2
 19782                           fsr1l	equ	0xFE1
 19783                           indf2	equ	0xFDF
 19784                           postinc2	equ	0xFDE
 19785                           postdec2	equ	0xFDD
 19786                           fsr2h	equ	0xFDA
 19787                           fsr2l	equ	0xFD9
 19788                           status	equ	0xFD8
 19789                           
 19790 ;; *************** function _inputHandler *****************
 19791 ;; Defined at:
 19792 ;;		line 372 in file "UI.c"
 19793 ;; Parameters:    Size  Location     Type
 19794 ;;		None
 19795 ;; Auto vars:     Size  Location     Type
 19796 ;;		None
 19797 ;; Return value:  Size  Location     Type
 19798 ;;                  2   41[COMRAM] int 
 19799 ;; Registers used:
 19800 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19801 ;; Tracked objects:
 19802 ;;		On entry : 0/0
 19803 ;;		On exit  : 0/0
 19804 ;;		Unchanged: 0/0
 19805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19806 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19808 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19809 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19810 ;;Total ram usage:        4 bytes
 19811 ;; Hardware stack levels used:    1
 19812 ;; Hardware stack levels required when called:    4
 19813 ;; This function calls:
 19814 ;;		_change_state_to_logs_11
 19815 ;;		_change_state_to_logs_12
 19816 ;;		_change_state_to_logs_22
 19817 ;;		_change_state_to_logs_23
 19818 ;;		_change_state_to_logs_33
 19819 ;;		_change_state_to_logs_34
 19820 ;;		_change_state_to_menu_11
 19821 ;;		_change_state_to_menu_23
 19822 ;;		i2_change_state_to_menu_12
 19823 ;;		i2_change_state_to_menu_22
 19824 ;; This function is called by:
 19825 ;;		_updateMenu
 19826 ;; This function uses a non-reentrant model
 19827 ;;
 19828                           
 19829                           	psect	text67
 19830  003350                     __ptext67:
 19831                           	opt stack 0
 19832  003350                     _inputHandler:
 19833                           	opt stack 18
 19834                           
 19835                           ;UI.c: 377: if(firstboot){
 19836                           
 19837                           ;incstack = 0
 19838  003350  0101               	movlb	1	; () banked
 19839  003352  513B               	movf	_firstboot& (0+255),w,b
 19840  003354  0101               	movlb	1	; () banked
 19841  003356  113C               	iorwf	(_firstboot+1)& (0+255),w,b
 19842  003358  B4D8               	btfsc	status,2,c
 19843  00335A  D00C               	goto	i2l7139
 19844                           
 19845                           ; BSR set to: 1
 19846                           ;UI.c: 378: change_state_to_menu_11();
 19847  00335C  EC1B  F028         	call	_change_state_to_menu_11	;wreg free
 19848                           
 19849                           ;UI.c: 379: firstboot = 0;
 19850  003360  0E00               	movlw	0
 19851  003362  0101               	movlb	1	; () banked
 19852  003364  6F3C               	movwf	(_firstboot+1)& (0+255),b
 19853  003366  0E00               	movlw	0
 19854  003368  6F3B               	movwf	_firstboot& (0+255),b
 19855                           
 19856                           ; BSR set to: 1
 19857                           ;UI.c: 380: return 0;
 19858  00336A  0E00               	movlw	0
 19859  00336C  6E2B               	movwf	?_inputHandler+1,c
 19860  00336E  0E00               	movlw	0
 19861  003370  6E2A               	movwf	?_inputHandler,c
 19862                           
 19863                           ; BSR set to: 1
 19864  003372  0012               	return	
 19865  003374                     i2l7139:
 19866                           
 19867                           ; BSR set to: 1
 19868                           ;UI.c: 381: }
 19869                           ;UI.c: 382: if (logstate){
 19870  003374  0100               	movlb	0	; () banked
 19871  003376  51F6               	movf	_logstate& (0+255),w,b
 19872  003378  0100               	movlb	0	; () banked
 19873  00337A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 19874  00337C  B4D8               	btfsc	status,2,c
 19875  00337E  D0C7               	goto	i2l7257
 19876                           
 19877                           ; BSR set to: 0
 19878                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 19879  003380  0E43               	movlw	67
 19880  003382  187D               	xorwf	_input,w,c	;volatile
 19881  003384  A4D8               	btfss	status,2,c
 19882  003386  D012               	goto	i2l7157
 19883                           
 19884                           ; BSR set to: 0
 19885  003388  B281               	btfsc	3969,1,c	;volatile
 19886  00338A  D009               	goto	i2l7149
 19887  00338C  D00F               	goto	i2l7157
 19888  00338E                     i2l7147:
 19889                           
 19890                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 19891  00338E  0E68               	movlw	104
 19892  003390  6E2C               	movwf	??_inputHandler& (0+255),c
 19893  003392  0EE4               	movlw	228
 19894  003394                     i2u1038_47:
 19895  003394  2EE8               	decfsz	wreg,f,c
 19896  003396  D7FE               	bra	i2u1038_47
 19897  003398  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 19898  00339A  D7FC               	bra	i2u1038_47
 19899  00339C  D000               	nop2	
 19900  00339E                     i2l7149:
 19901  00339E  B281               	btfsc	3969,1,c	;volatile
 19902  0033A0  D7F6               	goto	i2l7147
 19903  0033A2                     i2l7151:
 19904                           
 19905                           ;UI.c: 387: }
 19906                           ;UI.c: 388: return 0;
 19907  0033A2  0E00               	movlw	0
 19908  0033A4  6E2B               	movwf	?_inputHandler+1,c
 19909  0033A6  0E00               	movlw	0
 19910  0033A8  6E2A               	movwf	?_inputHandler,c
 19911  0033AA  0012               	return	
 19912  0033AC                     i2l7157:
 19913                           
 19914                           ;UI.c: 390: else if (input == 'D'){
 19915  0033AC  0E44               	movlw	68
 19916  0033AE  187D               	xorwf	_input,w,c	;volatile
 19917  0033B0  A4D8               	btfss	status,2,c
 19918  0033B2  D7F7               	goto	i2l7151
 19919                           
 19920                           ;UI.c: 392: logstate = 0;
 19921  0033B4  0E00               	movlw	0
 19922  0033B6  0100               	movlb	0	; () banked
 19923  0033B8  6FF7               	movwf	(_logstate+1)& (0+255),b
 19924  0033BA  0E00               	movlw	0
 19925  0033BC  6FF6               	movwf	_logstate& (0+255),b
 19926                           
 19927                           ;UI.c: 393: switch(cur_state){
 19928  0033BE  D012               	goto	i2l7175
 19929  0033C0                     i2l7161:
 19930                           
 19931                           ;UI.c: 395: change_state_to_logs_11();
 19932  0033C0  EC93  F028         	call	_change_state_to_logs_11	;wreg free
 19933                           
 19934                           ;UI.c: 396: break;
 19935  0033C4  D7EE               	goto	i2l7151
 19936  0033C6                     i2l7163:
 19937                           
 19938                           ;UI.c: 398: change_state_to_logs_12();
 19939  0033C6  EC7B  F028         	call	_change_state_to_logs_12	;wreg free
 19940                           
 19941                           ;UI.c: 399: break;
 19942  0033CA  D7EB               	goto	i2l7151
 19943  0033CC                     i2l7165:
 19944                           
 19945                           ;UI.c: 401: change_state_to_logs_22();
 19946  0033CC  EC63  F028         	call	_change_state_to_logs_22	;wreg free
 19947                           
 19948                           ;UI.c: 402: break;
 19949  0033D0  D7E8               	goto	i2l7151
 19950  0033D2                     i2l7167:
 19951                           
 19952                           ;UI.c: 404: change_state_to_logs_23();
 19953  0033D2  ECC2  F028         	call	_change_state_to_logs_23	;wreg free
 19954                           
 19955                           ;UI.c: 405: break;
 19956  0033D6  D7E5               	goto	i2l7151
 19957  0033D8                     i2l7169:
 19958                           
 19959                           ;UI.c: 407: change_state_to_logs_33();
 19960  0033D8  EC4B  F028         	call	_change_state_to_logs_33	;wreg free
 19961                           
 19962                           ;UI.c: 408: break;
 19963  0033DC  D7E2               	goto	i2l7151
 19964  0033DE                     i2l7171:
 19965                           
 19966                           ;UI.c: 410: change_state_to_logs_34();
 19967  0033DE  EC33  F028         	call	_change_state_to_logs_34	;wreg free
 19968                           
 19969                           ;UI.c: 412: }
 19970                           
 19971                           ;UI.c: 411: break;
 19972  0033E2  D7DF               	goto	i2l7151
 19973  0033E4                     i2l7175:
 19974  0033E4  C0EC  F02C         	movff	_cur_state,??_inputHandler
 19975  0033E8  C0ED  F02D         	movff	_cur_state+1,??_inputHandler+1
 19976                           
 19977                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 19978                           ; Switch size 1, requested type "space"
 19979                           ; Number of cases is 2, Range of values is 3 to 4
 19980                           ; switch strategies available:
 19981                           ; Name         Instructions Cycles
 19982                           ; simple_byte            7     4 (average)
 19983                           ;	Chosen strategy is simple_byte
 19984  0033EC  502D               	movf	??_inputHandler+1,w,c
 19985  0033EE  0A03               	xorlw	3	; case 3
 19986  0033F0  B4D8               	btfsc	status,2,c
 19987  0033F2  D004               	goto	i2l10077
 19988  0033F4  0A07               	xorlw	7	; case 4
 19989  0033F6  B4D8               	btfsc	status,2,c
 19990  0033F8  D00F               	goto	i2l10079
 19991  0033FA  D7D3               	goto	i2l7151
 19992  0033FC                     i2l10077:
 19993                           
 19994                           ; Switch size 1, requested type "space"
 19995                           ; Number of cases is 4, Range of values is 243 to 255
 19996                           ; switch strategies available:
 19997                           ; Name         Instructions Cycles
 19998                           ; simple_byte           13     7 (average)
 19999                           ;	Chosen strategy is simple_byte
 20000  0033FC  502C               	movf	??_inputHandler,w,c
 20001  0033FE  0AF3               	xorlw	243	; case 243
 20002  003400  B4D8               	btfsc	status,2,c
 20003  003402  D7DE               	goto	i2l7161
 20004  003404  0A07               	xorlw	7	; case 244
 20005  003406  B4D8               	btfsc	status,2,c
 20006  003408  D7DE               	goto	i2l7163
 20007  00340A  0A0A               	xorlw	10	; case 254
 20008  00340C  B4D8               	btfsc	status,2,c
 20009  00340E  D7DE               	goto	i2l7165
 20010  003410  0A01               	xorlw	1	; case 255
 20011  003412  B4D8               	btfsc	status,2,c
 20012  003414  D7DE               	goto	i2l7167
 20013  003416  D7C5               	goto	i2l7151
 20014  003418                     i2l10079:
 20015                           
 20016                           ; Switch size 1, requested type "space"
 20017                           ; Number of cases is 2, Range of values is 9 to 10
 20018                           ; switch strategies available:
 20019                           ; Name         Instructions Cycles
 20020                           ; simple_byte            7     4 (average)
 20021                           ;	Chosen strategy is simple_byte
 20022  003418  502C               	movf	??_inputHandler,w,c
 20023  00341A  0A09               	xorlw	9	; case 9
 20024  00341C  B4D8               	btfsc	status,2,c
 20025  00341E  D7DC               	goto	i2l7169
 20026  003420  0A03               	xorlw	3	; case 10
 20027  003422  B4D8               	btfsc	status,2,c
 20028  003424  D7DC               	goto	i2l7171
 20029  003426  D7BD               	goto	i2l7151
 20030  003428                     i2l7187:
 20031                           
 20032                           ;UI.c: 422: if(cur_state == 11){
 20033  003428  0E0B               	movlw	11
 20034  00342A  0100               	movlb	0	; () banked
 20035  00342C  19EC               	xorwf	_cur_state& (0+255),w,b
 20036  00342E  0100               	movlb	0	; () banked
 20037  003430  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20038  003432  A4D8               	btfss	status,2,c
 20039  003434  D005               	goto	i2l7195
 20040                           
 20041                           ; BSR set to: 0
 20042                           ;UI.c: 423: return 0;
 20043  003436  0E00               	movlw	0
 20044  003438  6E2B               	movwf	?_inputHandler+1,c
 20045  00343A  0E00               	movlw	0
 20046  00343C  6E2A               	movwf	?_inputHandler,c
 20047                           
 20048                           ; BSR set to: 0
 20049  00343E  0012               	return	
 20050  003440                     i2l7195:
 20051                           
 20052                           ; BSR set to: 0
 20053                           ;UI.c: 425: else{
 20054                           ;UI.c: 426: change_state_to_menu_11();
 20055  003440  EC1B  F028         	call	_change_state_to_menu_11	;wreg free
 20056                           
 20057                           ;UI.c: 427: }
 20058                           ;UI.c: 428: return 0;
 20059  003444  0E00               	movlw	0
 20060  003446  6E2B               	movwf	?_inputHandler+1,c
 20061  003448  0E00               	movlw	0
 20062  00344A  6E2A               	movwf	?_inputHandler,c
 20063  00344C  0012               	return	
 20064  00344E                     i2l7201:
 20065                           
 20066                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 20067  00344E  0E16               	movlw	22
 20068  003450  0100               	movlb	0	; () banked
 20069  003452  19EC               	xorwf	_cur_state& (0+255),w,b
 20070  003454  0100               	movlb	0	; () banked
 20071  003456  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20072  003458  B4D8               	btfsc	status,2,c
 20073  00345A  D007               	goto	i2l7205
 20074                           
 20075                           ; BSR set to: 0
 20076  00345C  0E0C               	movlw	12
 20077  00345E  0100               	movlb	0	; () banked
 20078  003460  19EC               	xorwf	_cur_state& (0+255),w,b
 20079  003462  0100               	movlb	0	; () banked
 20080  003464  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20081  003466  A4D8               	btfss	status,2,c
 20082  003468  D005               	goto	i2l7211
 20083  00346A                     i2l7205:
 20084                           
 20085                           ; BSR set to: 0
 20086                           ;UI.c: 431: return 0;
 20087  00346A  0E00               	movlw	0
 20088  00346C  6E2B               	movwf	?_inputHandler+1,c
 20089  00346E  0E00               	movlw	0
 20090  003470  6E2A               	movwf	?_inputHandler,c
 20091                           
 20092                           ; BSR set to: 0
 20093  003472  0012               	return	
 20094  003474                     i2l7211:
 20095                           
 20096                           ; BSR set to: 0
 20097                           ;UI.c: 433: else if(cur_state == 23){
 20098  003474  0E17               	movlw	23
 20099  003476  0100               	movlb	0	; () banked
 20100  003478  19EC               	xorwf	_cur_state& (0+255),w,b
 20101  00347A  0100               	movlb	0	; () banked
 20102  00347C  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20103  00347E  A4D8               	btfss	status,2,c
 20104  003480  D003               	goto	i2l7215
 20105                           
 20106                           ; BSR set to: 0
 20107                           ;UI.c: 434: change_state_to_menu_22();
 20108  003482  ECD3  F027         	call	i2_change_state_to_menu_22	;wreg free
 20109                           
 20110                           ;UI.c: 435: }
 20111  003486  D002               	goto	i2l7217
 20112  003488                     i2l7215:
 20113                           
 20114                           ;UI.c: 436: else{
 20115                           ;UI.c: 437: change_state_to_menu_12();
 20116  003488  ECEB  F027         	call	i2_change_state_to_menu_12	;wreg free
 20117  00348C                     i2l7217:
 20118                           
 20119                           ;UI.c: 438: }
 20120                           ;UI.c: 439: return 0;
 20121  00348C  0E00               	movlw	0
 20122  00348E  6E2B               	movwf	?_inputHandler+1,c
 20123  003490  0E00               	movlw	0
 20124  003492  6E2A               	movwf	?_inputHandler,c
 20125  003494  0012               	return	
 20126  003496                     i2l7221:
 20127                           
 20128                           ;UI.c: 441: if(cur_state == 23){
 20129  003496  0E17               	movlw	23
 20130  003498  0100               	movlb	0	; () banked
 20131  00349A  19EC               	xorwf	_cur_state& (0+255),w,b
 20132  00349C  0100               	movlb	0	; () banked
 20133  00349E  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20134  0034A0  A4D8               	btfss	status,2,c
 20135  0034A2  D005               	goto	i2l7229
 20136                           
 20137                           ; BSR set to: 0
 20138                           ;UI.c: 442: return 0;
 20139  0034A4  0E00               	movlw	0
 20140  0034A6  6E2B               	movwf	?_inputHandler+1,c
 20141  0034A8  0E00               	movlw	0
 20142  0034AA  6E2A               	movwf	?_inputHandler,c
 20143                           
 20144                           ; BSR set to: 0
 20145  0034AC  0012               	return	
 20146  0034AE                     i2l7229:
 20147                           
 20148                           ; BSR set to: 0
 20149                           ;UI.c: 444: else{
 20150                           ;UI.c: 445: change_state_to_menu_23();
 20151  0034AE  EC03  F028         	call	_change_state_to_menu_23	;wreg free
 20152                           
 20153                           ;UI.c: 446: }
 20154                           ;UI.c: 447: return 0;
 20155  0034B2  0E00               	movlw	0
 20156  0034B4  6E2B               	movwf	?_inputHandler+1,c
 20157  0034B6  0E00               	movlw	0
 20158  0034B8  6E2A               	movwf	?_inputHandler,c
 20159  0034BA  0012               	return	
 20160  0034BC                     i2l7235:
 20161                           
 20162                           ;UI.c: 450: up = 1;
 20163  0034BC  0E00               	movlw	0
 20164  0034BE  6E78               	movwf	_up+1,c
 20165  0034C0  0E01               	movlw	1
 20166  0034C2  6E77               	movwf	_up,c
 20167                           
 20168                           ;UI.c: 451: return 1;
 20169  0034C4  0E00               	movlw	0
 20170  0034C6  6E2B               	movwf	?_inputHandler+1,c
 20171  0034C8  0E01               	movlw	1
 20172  0034CA  6E2A               	movwf	?_inputHandler,c
 20173  0034CC  0012               	return	
 20174  0034CE                     i2l7239:
 20175                           
 20176                           ;UI.c: 453: down = 1;
 20177  0034CE  0E00               	movlw	0
 20178  0034D0  6E5E               	movwf	_down+1,c
 20179  0034D2  0E01               	movlw	1
 20180  0034D4  6E5D               	movwf	_down,c
 20181                           
 20182                           ;UI.c: 454: return 1;
 20183  0034D6  0E00               	movlw	0
 20184  0034D8  6E2B               	movwf	?_inputHandler+1,c
 20185  0034DA  0E01               	movlw	1
 20186  0034DC  6E2A               	movwf	?_inputHandler,c
 20187  0034DE  0012               	return	
 20188  0034E0                     i2l7243:
 20189                           
 20190                           ;UI.c: 456: enter = 1;
 20191  0034E0  0E00               	movlw	0
 20192  0034E2  6E60               	movwf	_enter+1,c
 20193  0034E4  0E01               	movlw	1
 20194  0034E6  6E5F               	movwf	_enter,c
 20195                           
 20196                           ;UI.c: 457: return 1;
 20197  0034E8  0E00               	movlw	0
 20198  0034EA  6E2B               	movwf	?_inputHandler+1,c
 20199  0034EC  0E01               	movlw	1
 20200  0034EE  6E2A               	movwf	?_inputHandler,c
 20201  0034F0  0012               	return	
 20202  0034F2                     i2l7247:
 20203                           
 20204                           ;UI.c: 459: back = 1;
 20205  0034F2  0E00               	movlw	0
 20206  0034F4  6E5C               	movwf	_back+1,c
 20207  0034F6  0E01               	movlw	1
 20208  0034F8  6E5B               	movwf	_back,c
 20209                           
 20210                           ;UI.c: 460: return 1;
 20211  0034FA  0E00               	movlw	0
 20212  0034FC  6E2B               	movwf	?_inputHandler+1,c
 20213  0034FE  0E01               	movlw	1
 20214  003500  6E2A               	movwf	?_inputHandler,c
 20215  003502  0012               	return	
 20216  003504                     i2l7251:
 20217                           
 20218                           ;UI.c: 463: return 1;
 20219  003504  0E00               	movlw	0
 20220  003506  6E2B               	movwf	?_inputHandler+1,c
 20221  003508  0E01               	movlw	1
 20222  00350A  6E2A               	movwf	?_inputHandler,c
 20223                           
 20224                           ;UI.c: 464: }
 20225  00350C  0012               	return	
 20226  00350E                     i2l7257:
 20227  00350E  507D               	movf	_input,w,c	;volatile
 20228                           
 20229                           ; Switch size 1, requested type "space"
 20230                           ; Number of cases is 7, Range of values is 49 to 68
 20231                           ; switch strategies available:
 20232                           ; Name         Instructions Cycles
 20233                           ; simple_byte           22    12 (average)
 20234                           ;	Chosen strategy is simple_byte
 20235  003510  0A31               	xorlw	49	; case 49
 20236  003512  B4D8               	btfsc	status,2,c
 20237  003514  D789               	goto	i2l7187
 20238  003516  0A03               	xorlw	3	; case 50
 20239  003518  B4D8               	btfsc	status,2,c
 20240  00351A  D799               	goto	i2l7201
 20241  00351C  0A01               	xorlw	1	; case 51
 20242  00351E  B4D8               	btfsc	status,2,c
 20243  003520  D7BA               	goto	i2l7221
 20244  003522  0A72               	xorlw	114	; case 65
 20245  003524  B4D8               	btfsc	status,2,c
 20246  003526  D7CA               	goto	i2l7235
 20247  003528  0A03               	xorlw	3	; case 66
 20248  00352A  B4D8               	btfsc	status,2,c
 20249  00352C  D7D0               	goto	i2l7239
 20250  00352E  0A01               	xorlw	1	; case 67
 20251  003530  B4D8               	btfsc	status,2,c
 20252  003532  D7D6               	goto	i2l7243
 20253  003534  0A07               	xorlw	7	; case 68
 20254  003536  B4D8               	btfsc	status,2,c
 20255  003538  D7DC               	goto	i2l7247
 20256  00353A  D7E4               	goto	i2l7251
 20257  00353C                     __end_of_inputHandler:
 20258                           	opt stack 0
 20259                           pclatu	equ	0xFFB
 20260                           pclath	equ	0xFFA
 20261                           tblptru	equ	0xFF8
 20262                           tblptrh	equ	0xFF7
 20263                           tblptrl	equ	0xFF6
 20264                           tablat	equ	0xFF5
 20265                           prodh	equ	0xFF4
 20266                           prodl	equ	0xFF3
 20267                           intcon	equ	0xFF2
 20268                           intcon2	equ	0xFF1
 20269                           intcon3	equ	0xFF0
 20270                           indf0	equ	0xFEF
 20271                           postinc0	equ	0xFEE
 20272                           fsr0h	equ	0xFEA
 20273                           fsr0l	equ	0xFE9
 20274                           wreg	equ	0xFE8
 20275                           postdec1	equ	0xFE5
 20276                           fsr1h	equ	0xFE2
 20277                           fsr1l	equ	0xFE1
 20278                           indf2	equ	0xFDF
 20279                           postinc2	equ	0xFDE
 20280                           postdec2	equ	0xFDD
 20281                           fsr2h	equ	0xFDA
 20282                           fsr2l	equ	0xFD9
 20283                           status	equ	0xFD8
 20284                           
 20285 ;; *************** function i2_change_state_to_menu_22 *****************
 20286 ;; Defined at:
 20287 ;;		line 498 in file "UI.c"
 20288 ;; Parameters:    Size  Location     Type
 20289 ;;		None
 20290 ;; Auto vars:     Size  Location     Type
 20291 ;;		None
 20292 ;; Return value:  Size  Location     Type
 20293 ;;                  1    wreg      void 
 20294 ;; Registers used:
 20295 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20296 ;; Tracked objects:
 20297 ;;		On entry : 0/0
 20298 ;;		On exit  : 0/0
 20299 ;;		Unchanged: 0/0
 20300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20305 ;;Total ram usage:        0 bytes
 20306 ;; Hardware stack levels used:    1
 20307 ;; Hardware stack levels required when called:    3
 20308 ;; This function calls:
 20309 ;;		i2_lcdInst
 20310 ;;		i2_printf
 20311 ;; This function is called by:
 20312 ;;		_updateMenu
 20313 ;;		_inputHandler
 20314 ;; This function uses a non-reentrant model
 20315 ;;
 20316                           
 20317                           	psect	text68
 20318  004FA6                     __ptext68:
 20319                           	opt stack 0
 20320  004FA6                     i2_change_state_to_menu_22:
 20321                           	opt stack 19
 20322                           
 20323                           ;UI.c: 499: cur_state = 22;
 20324                           
 20325                           ;incstack = 0
 20326  004FA6  0E00               	movlw	0
 20327  004FA8  0100               	movlb	0	; () banked
 20328  004FAA  6FED               	movwf	(_cur_state+1)& (0+255),b
 20329  004FAC  0E16               	movlw	22
 20330  004FAE  6FEC               	movwf	_cur_state& (0+255),b
 20331                           
 20332                           ; BSR set to: 0
 20333                           ;UI.c: 501: lcdInst(0b10000000);;
 20334  004FB0  0E80               	movlw	128
 20335  004FB2  EC06  F02A         	call	i2_lcdInst
 20336                           
 20337                           ;UI.c: 502: printf("2. SORT        <");
 20338  004FB6  0EC3               	movlw	low STR_34
 20339  004FB8  6E0D               	movwf	i2printf@f,c
 20340  004FBA  0EFD               	movlw	high STR_34
 20341  004FBC  6E0E               	movwf	i2printf@f+1,c
 20342  004FBE  ECE6  F00E         	call	i2_printf	;wreg free
 20343                           
 20344                           ;UI.c: 503: lcdInst(0b11000000);;
 20345  004FC2  0EC0               	movlw	192
 20346  004FC4  EC06  F02A         	call	i2_lcdInst
 20347                           
 20348                           ;UI.c: 504: printf("3. LOGS         ");
 20349  004FC8  0E08               	movlw	low STR_36
 20350  004FCA  6E0D               	movwf	i2printf@f,c
 20351  004FCC  0EFD               	movlw	high STR_36
 20352  004FCE  6E0E               	movwf	i2printf@f+1,c
 20353  004FD0  ECE6  F00E         	call	i2_printf	;wreg free
 20354  004FD4  0012               	return		;funcret
 20355  004FD6                     __end_ofi2_change_state_to_menu_22:
 20356                           	opt stack 0
 20357                           pclatu	equ	0xFFB
 20358                           pclath	equ	0xFFA
 20359                           tblptru	equ	0xFF8
 20360                           tblptrh	equ	0xFF7
 20361                           tblptrl	equ	0xFF6
 20362                           tablat	equ	0xFF5
 20363                           prodh	equ	0xFF4
 20364                           prodl	equ	0xFF3
 20365                           intcon	equ	0xFF2
 20366                           intcon2	equ	0xFF1
 20367                           intcon3	equ	0xFF0
 20368                           indf0	equ	0xFEF
 20369                           postinc0	equ	0xFEE
 20370                           fsr0h	equ	0xFEA
 20371                           fsr0l	equ	0xFE9
 20372                           wreg	equ	0xFE8
 20373                           postdec1	equ	0xFE5
 20374                           fsr1h	equ	0xFE2
 20375                           fsr1l	equ	0xFE1
 20376                           indf2	equ	0xFDF
 20377                           postinc2	equ	0xFDE
 20378                           postdec2	equ	0xFDD
 20379                           fsr2h	equ	0xFDA
 20380                           fsr2l	equ	0xFD9
 20381                           status	equ	0xFD8
 20382                           
 20383 ;; *************** function i2_change_state_to_menu_12 *****************
 20384 ;; Defined at:
 20385 ;;		line 490 in file "UI.c"
 20386 ;; Parameters:    Size  Location     Type
 20387 ;;		None
 20388 ;; Auto vars:     Size  Location     Type
 20389 ;;		None
 20390 ;; Return value:  Size  Location     Type
 20391 ;;                  1    wreg      void 
 20392 ;; Registers used:
 20393 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20394 ;; Tracked objects:
 20395 ;;		On entry : 0/0
 20396 ;;		On exit  : 0/0
 20397 ;;		Unchanged: 0/0
 20398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20403 ;;Total ram usage:        0 bytes
 20404 ;; Hardware stack levels used:    1
 20405 ;; Hardware stack levels required when called:    3
 20406 ;; This function calls:
 20407 ;;		i2_lcdInst
 20408 ;;		i2_printf
 20409 ;; This function is called by:
 20410 ;;		_updateMenu
 20411 ;;		_inputHandler
 20412 ;; This function uses a non-reentrant model
 20413 ;;
 20414                           
 20415                           	psect	text69
 20416  004FD6                     __ptext69:
 20417                           	opt stack 0
 20418  004FD6                     i2_change_state_to_menu_12:
 20419                           	opt stack 19
 20420                           
 20421                           ;UI.c: 491: cur_state = 12;
 20422                           
 20423                           ;incstack = 0
 20424  004FD6  0E00               	movlw	0
 20425  004FD8  0100               	movlb	0	; () banked
 20426  004FDA  6FED               	movwf	(_cur_state+1)& (0+255),b
 20427  004FDC  0E0C               	movlw	12
 20428  004FDE  6FEC               	movwf	_cur_state& (0+255),b
 20429                           
 20430                           ; BSR set to: 0
 20431                           ;UI.c: 493: lcdInst(0b10000000);;
 20432  004FE0  0E80               	movlw	128
 20433  004FE2  EC06  F02A         	call	i2_lcdInst
 20434                           
 20435                           ;UI.c: 494: printf("1. DATE/TIME    ");
 20436  004FE6  0E2A               	movlw	low STR_33
 20437  004FE8  6E0D               	movwf	i2printf@f,c
 20438  004FEA  0EFD               	movlw	high STR_33
 20439  004FEC  6E0E               	movwf	i2printf@f+1,c
 20440  004FEE  ECE6  F00E         	call	i2_printf	;wreg free
 20441                           
 20442                           ;UI.c: 495: lcdInst(0b11000000);;
 20443  004FF2  0EC0               	movlw	192
 20444  004FF4  EC06  F02A         	call	i2_lcdInst
 20445                           
 20446                           ;UI.c: 496: printf("2. SORT        <");
 20447  004FF8  0EC3               	movlw	low STR_34
 20448  004FFA  6E0D               	movwf	i2printf@f,c
 20449  004FFC  0EFD               	movlw	high STR_34
 20450  004FFE  6E0E               	movwf	i2printf@f+1,c
 20451  005000  ECE6  F00E         	call	i2_printf	;wreg free
 20452  005004  0012               	return		;funcret
 20453  005006                     __end_ofi2_change_state_to_menu_12:
 20454                           	opt stack 0
 20455                           pclatu	equ	0xFFB
 20456                           pclath	equ	0xFFA
 20457                           tblptru	equ	0xFF8
 20458                           tblptrh	equ	0xFF7
 20459                           tblptrl	equ	0xFF6
 20460                           tablat	equ	0xFF5
 20461                           prodh	equ	0xFF4
 20462                           prodl	equ	0xFF3
 20463                           intcon	equ	0xFF2
 20464                           intcon2	equ	0xFF1
 20465                           intcon3	equ	0xFF0
 20466                           indf0	equ	0xFEF
 20467                           postinc0	equ	0xFEE
 20468                           fsr0h	equ	0xFEA
 20469                           fsr0l	equ	0xFE9
 20470                           wreg	equ	0xFE8
 20471                           postdec1	equ	0xFE5
 20472                           fsr1h	equ	0xFE2
 20473                           fsr1l	equ	0xFE1
 20474                           indf2	equ	0xFDF
 20475                           postinc2	equ	0xFDE
 20476                           postdec2	equ	0xFDD
 20477                           fsr2h	equ	0xFDA
 20478                           fsr2l	equ	0xFD9
 20479                           status	equ	0xFD8
 20480                           
 20481 ;; *************** function _change_state_to_menu_23 *****************
 20482 ;; Defined at:
 20483 ;;		line 506 in file "UI.c"
 20484 ;; Parameters:    Size  Location     Type
 20485 ;;		None
 20486 ;; Auto vars:     Size  Location     Type
 20487 ;;		None
 20488 ;; Return value:  Size  Location     Type
 20489 ;;                  1    wreg      void 
 20490 ;; Registers used:
 20491 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20492 ;; Tracked objects:
 20493 ;;		On entry : 0/0
 20494 ;;		On exit  : 0/0
 20495 ;;		Unchanged: 0/0
 20496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20501 ;;Total ram usage:        0 bytes
 20502 ;; Hardware stack levels used:    1
 20503 ;; Hardware stack levels required when called:    3
 20504 ;; This function calls:
 20505 ;;		i2_lcdInst
 20506 ;;		i2_printf
 20507 ;; This function is called by:
 20508 ;;		_updateMenu
 20509 ;;		_inputHandler
 20510 ;; This function uses a non-reentrant model
 20511 ;;
 20512                           
 20513                           	psect	text70
 20514  005006                     __ptext70:
 20515                           	opt stack 0
 20516  005006                     _change_state_to_menu_23:
 20517                           	opt stack 18
 20518                           
 20519                           ;UI.c: 507: cur_state = 23;
 20520                           
 20521                           ;incstack = 0
 20522  005006  0E00               	movlw	0
 20523  005008  0100               	movlb	0	; () banked
 20524  00500A  6FED               	movwf	(_cur_state+1)& (0+255),b
 20525  00500C  0E17               	movlw	23
 20526  00500E  6FEC               	movwf	_cur_state& (0+255),b
 20527                           
 20528                           ; BSR set to: 0
 20529                           ;UI.c: 509: lcdInst(0b10000000);;
 20530  005010  0E80               	movlw	128
 20531  005012  EC06  F02A         	call	i2_lcdInst
 20532                           
 20533                           ;UI.c: 510: printf("2. SORT         ");
 20534  005016  0E19               	movlw	low STR_32
 20535  005018  6E0D               	movwf	i2printf@f,c
 20536  00501A  0EFD               	movlw	high STR_32
 20537  00501C  6E0E               	movwf	i2printf@f+1,c
 20538  00501E  ECE6  F00E         	call	i2_printf	;wreg free
 20539                           
 20540                           ;UI.c: 511: lcdInst(0b11000000);;
 20541  005022  0EC0               	movlw	192
 20542  005024  EC06  F02A         	call	i2_lcdInst
 20543                           
 20544                           ;UI.c: 512: printf("3. LOGS        <");
 20545  005028  0EB2               	movlw	low STR_38
 20546  00502A  6E0D               	movwf	i2printf@f,c
 20547  00502C  0EFD               	movlw	high STR_38
 20548  00502E  6E0E               	movwf	i2printf@f+1,c
 20549  005030  ECE6  F00E         	call	i2_printf	;wreg free
 20550  005034  0012               	return		;funcret
 20551  005036                     __end_of_change_state_to_menu_23:
 20552                           	opt stack 0
 20553                           pclatu	equ	0xFFB
 20554                           pclath	equ	0xFFA
 20555                           tblptru	equ	0xFF8
 20556                           tblptrh	equ	0xFF7
 20557                           tblptrl	equ	0xFF6
 20558                           tablat	equ	0xFF5
 20559                           prodh	equ	0xFF4
 20560                           prodl	equ	0xFF3
 20561                           intcon	equ	0xFF2
 20562                           intcon2	equ	0xFF1
 20563                           intcon3	equ	0xFF0
 20564                           indf0	equ	0xFEF
 20565                           postinc0	equ	0xFEE
 20566                           fsr0h	equ	0xFEA
 20567                           fsr0l	equ	0xFE9
 20568                           wreg	equ	0xFE8
 20569                           postdec1	equ	0xFE5
 20570                           fsr1h	equ	0xFE2
 20571                           fsr1l	equ	0xFE1
 20572                           indf2	equ	0xFDF
 20573                           postinc2	equ	0xFDE
 20574                           postdec2	equ	0xFDD
 20575                           fsr2h	equ	0xFDA
 20576                           fsr2l	equ	0xFD9
 20577                           status	equ	0xFD8
 20578                           
 20579 ;; *************** function _change_state_to_menu_11 *****************
 20580 ;; Defined at:
 20581 ;;		line 482 in file "UI.c"
 20582 ;; Parameters:    Size  Location     Type
 20583 ;;		None
 20584 ;; Auto vars:     Size  Location     Type
 20585 ;;		None
 20586 ;; Return value:  Size  Location     Type
 20587 ;;                  1    wreg      void 
 20588 ;; Registers used:
 20589 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20590 ;; Tracked objects:
 20591 ;;		On entry : 0/0
 20592 ;;		On exit  : 0/0
 20593 ;;		Unchanged: 0/0
 20594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20599 ;;Total ram usage:        0 bytes
 20600 ;; Hardware stack levels used:    1
 20601 ;; Hardware stack levels required when called:    3
 20602 ;; This function calls:
 20603 ;;		i2_lcdInst
 20604 ;;		i2_printf
 20605 ;; This function is called by:
 20606 ;;		_updateMenu
 20607 ;;		_inputHandler
 20608 ;; This function uses a non-reentrant model
 20609 ;;
 20610                           
 20611                           	psect	text71
 20612  005036                     __ptext71:
 20613                           	opt stack 0
 20614  005036                     _change_state_to_menu_11:
 20615                           	opt stack 18
 20616                           
 20617                           ;UI.c: 483: cur_state = 11;
 20618                           
 20619                           ;incstack = 0
 20620  005036  0E00               	movlw	0
 20621  005038  0100               	movlb	0	; () banked
 20622  00503A  6FED               	movwf	(_cur_state+1)& (0+255),b
 20623  00503C  0E0B               	movlw	11
 20624  00503E  6FEC               	movwf	_cur_state& (0+255),b
 20625                           
 20626                           ; BSR set to: 0
 20627                           ;UI.c: 485: lcdInst(0b10000000);;
 20628  005040  0E80               	movlw	128
 20629  005042  EC06  F02A         	call	i2_lcdInst
 20630                           
 20631                           ;UI.c: 486: printf("1. DATE/TIME   <");
 20632  005046  0ED4               	movlw	low STR_31
 20633  005048  6E0D               	movwf	i2printf@f,c
 20634  00504A  0EFD               	movlw	high STR_31
 20635  00504C  6E0E               	movwf	i2printf@f+1,c
 20636  00504E  ECE6  F00E         	call	i2_printf	;wreg free
 20637                           
 20638                           ;UI.c: 487: lcdInst(0b11000000);;
 20639  005052  0EC0               	movlw	192
 20640  005054  EC06  F02A         	call	i2_lcdInst
 20641                           
 20642                           ;UI.c: 488: printf("2. SORT         ");
 20643  005058  0E19               	movlw	low STR_32
 20644  00505A  6E0D               	movwf	i2printf@f,c
 20645  00505C  0EFD               	movlw	high STR_32
 20646  00505E  6E0E               	movwf	i2printf@f+1,c
 20647  005060  ECE6  F00E         	call	i2_printf	;wreg free
 20648  005064  0012               	return		;funcret
 20649  005066                     __end_of_change_state_to_menu_11:
 20650                           	opt stack 0
 20651                           pclatu	equ	0xFFB
 20652                           pclath	equ	0xFFA
 20653                           tblptru	equ	0xFF8
 20654                           tblptrh	equ	0xFF7
 20655                           tblptrl	equ	0xFF6
 20656                           tablat	equ	0xFF5
 20657                           prodh	equ	0xFF4
 20658                           prodl	equ	0xFF3
 20659                           intcon	equ	0xFF2
 20660                           intcon2	equ	0xFF1
 20661                           intcon3	equ	0xFF0
 20662                           indf0	equ	0xFEF
 20663                           postinc0	equ	0xFEE
 20664                           fsr0h	equ	0xFEA
 20665                           fsr0l	equ	0xFE9
 20666                           wreg	equ	0xFE8
 20667                           postdec1	equ	0xFE5
 20668                           fsr1h	equ	0xFE2
 20669                           fsr1l	equ	0xFE1
 20670                           indf2	equ	0xFDF
 20671                           postinc2	equ	0xFDE
 20672                           postdec2	equ	0xFDD
 20673                           fsr2h	equ	0xFDA
 20674                           fsr2l	equ	0xFD9
 20675                           status	equ	0xFD8
 20676                           
 20677 ;; *************** function _change_state_to_logs_34 *****************
 20678 ;; Defined at:
 20679 ;;		line 549 in file "UI.c"
 20680 ;; Parameters:    Size  Location     Type
 20681 ;;		None
 20682 ;; Auto vars:     Size  Location     Type
 20683 ;;		None
 20684 ;; Return value:  Size  Location     Type
 20685 ;;                  1    wreg      void 
 20686 ;; Registers used:
 20687 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20688 ;; Tracked objects:
 20689 ;;		On entry : 0/0
 20690 ;;		On exit  : 0/0
 20691 ;;		Unchanged: 0/0
 20692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20696 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20697 ;;Total ram usage:        0 bytes
 20698 ;; Hardware stack levels used:    1
 20699 ;; Hardware stack levels required when called:    3
 20700 ;; This function calls:
 20701 ;;		i2_lcdInst
 20702 ;;		i2_printf
 20703 ;; This function is called by:
 20704 ;;		_updateMenu
 20705 ;;		_inputHandler
 20706 ;; This function uses a non-reentrant model
 20707 ;;
 20708                           
 20709                           	psect	text72
 20710  005066                     __ptext72:
 20711                           	opt stack 0
 20712  005066                     _change_state_to_logs_34:
 20713                           	opt stack 18
 20714                           
 20715                           ;UI.c: 550: cur_state = 1034;
 20716                           
 20717                           ;incstack = 0
 20718  005066  0E04               	movlw	4
 20719  005068  0100               	movlb	0	; () banked
 20720  00506A  6FED               	movwf	(_cur_state+1)& (0+255),b
 20721  00506C  0E0A               	movlw	10
 20722  00506E  6FEC               	movwf	_cur_state& (0+255),b
 20723                           
 20724                           ; BSR set to: 0
 20725                           ;UI.c: 551: lcdInst(0b10000000);;
 20726  005070  0E80               	movlw	128
 20727  005072  EC06  F02A         	call	i2_lcdInst
 20728                           
 20729                           ;UI.c: 552: printf("LOG 3           ");
 20730  005076  0EE6               	movlw	low STR_44
 20731  005078  6E0D               	movwf	i2printf@f,c
 20732  00507A  0EFC               	movlw	high STR_44
 20733  00507C  6E0E               	movwf	i2printf@f+1,c
 20734  00507E  ECE6  F00E         	call	i2_printf	;wreg free
 20735                           
 20736                           ;UI.c: 553: lcdInst(0b11000000);;
 20737  005082  0EC0               	movlw	192
 20738  005084  EC06  F02A         	call	i2_lcdInst
 20739                           
 20740                           ;UI.c: 554: printf("LOG 4          <");
 20741  005088  0EA1               	movlw	low STR_50
 20742  00508A  6E0D               	movwf	i2printf@f,c
 20743  00508C  0EFD               	movlw	high STR_50
 20744  00508E  6E0E               	movwf	i2printf@f+1,c
 20745  005090  ECE6  F00E         	call	i2_printf	;wreg free
 20746  005094  0012               	return		;funcret
 20747  005096                     __end_of_change_state_to_logs_34:
 20748                           	opt stack 0
 20749                           pclatu	equ	0xFFB
 20750                           pclath	equ	0xFFA
 20751                           tblptru	equ	0xFF8
 20752                           tblptrh	equ	0xFF7
 20753                           tblptrl	equ	0xFF6
 20754                           tablat	equ	0xFF5
 20755                           prodh	equ	0xFF4
 20756                           prodl	equ	0xFF3
 20757                           intcon	equ	0xFF2
 20758                           intcon2	equ	0xFF1
 20759                           intcon3	equ	0xFF0
 20760                           indf0	equ	0xFEF
 20761                           postinc0	equ	0xFEE
 20762                           fsr0h	equ	0xFEA
 20763                           fsr0l	equ	0xFE9
 20764                           wreg	equ	0xFE8
 20765                           postdec1	equ	0xFE5
 20766                           fsr1h	equ	0xFE2
 20767                           fsr1l	equ	0xFE1
 20768                           indf2	equ	0xFDF
 20769                           postinc2	equ	0xFDE
 20770                           postdec2	equ	0xFDD
 20771                           fsr2h	equ	0xFDA
 20772                           fsr2l	equ	0xFD9
 20773                           status	equ	0xFD8
 20774                           
 20775 ;; *************** function _change_state_to_logs_33 *****************
 20776 ;; Defined at:
 20777 ;;		line 542 in file "UI.c"
 20778 ;; Parameters:    Size  Location     Type
 20779 ;;		None
 20780 ;; Auto vars:     Size  Location     Type
 20781 ;;		None
 20782 ;; Return value:  Size  Location     Type
 20783 ;;                  1    wreg      void 
 20784 ;; Registers used:
 20785 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20786 ;; Tracked objects:
 20787 ;;		On entry : 0/0
 20788 ;;		On exit  : 0/0
 20789 ;;		Unchanged: 0/0
 20790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20795 ;;Total ram usage:        0 bytes
 20796 ;; Hardware stack levels used:    1
 20797 ;; Hardware stack levels required when called:    3
 20798 ;; This function calls:
 20799 ;;		i2_lcdInst
 20800 ;;		i2_printf
 20801 ;; This function is called by:
 20802 ;;		_updateMenu
 20803 ;;		_inputHandler
 20804 ;; This function uses a non-reentrant model
 20805 ;;
 20806                           
 20807                           	psect	text73
 20808  005096                     __ptext73:
 20809                           	opt stack 0
 20810  005096                     _change_state_to_logs_33:
 20811                           	opt stack 18
 20812                           
 20813                           ;UI.c: 543: cur_state = 1033;
 20814                           
 20815                           ;incstack = 0
 20816  005096  0E04               	movlw	4
 20817  005098  0100               	movlb	0	; () banked
 20818  00509A  6FED               	movwf	(_cur_state+1)& (0+255),b
 20819  00509C  0E09               	movlw	9
 20820  00509E  6FEC               	movwf	_cur_state& (0+255),b
 20821                           
 20822                           ; BSR set to: 0
 20823                           ;UI.c: 544: lcdInst(0b10000000);;
 20824  0050A0  0E80               	movlw	128
 20825  0050A2  EC06  F02A         	call	i2_lcdInst
 20826                           
 20827                           ;UI.c: 545: printf("LOG 3          <");
 20828  0050A6  0E90               	movlw	low STR_46
 20829  0050A8  6E0D               	movwf	i2printf@f,c
 20830  0050AA  0EFD               	movlw	high STR_46
 20831  0050AC  6E0E               	movwf	i2printf@f+1,c
 20832  0050AE  ECE6  F00E         	call	i2_printf	;wreg free
 20833                           
 20834                           ;UI.c: 546: lcdInst(0b11000000);;
 20835  0050B2  0EC0               	movlw	192
 20836  0050B4  EC06  F02A         	call	i2_lcdInst
 20837                           
 20838                           ;UI.c: 547: printf("LOG 4           ");
 20839  0050B8  0EF7               	movlw	low STR_48
 20840  0050BA  6E0D               	movwf	i2printf@f,c
 20841  0050BC  0EFC               	movlw	high STR_48
 20842  0050BE  6E0E               	movwf	i2printf@f+1,c
 20843  0050C0  ECE6  F00E         	call	i2_printf	;wreg free
 20844  0050C4  0012               	return		;funcret
 20845  0050C6                     __end_of_change_state_to_logs_33:
 20846                           	opt stack 0
 20847                           pclatu	equ	0xFFB
 20848                           pclath	equ	0xFFA
 20849                           tblptru	equ	0xFF8
 20850                           tblptrh	equ	0xFF7
 20851                           tblptrl	equ	0xFF6
 20852                           tablat	equ	0xFF5
 20853                           prodh	equ	0xFF4
 20854                           prodl	equ	0xFF3
 20855                           intcon	equ	0xFF2
 20856                           intcon2	equ	0xFF1
 20857                           intcon3	equ	0xFF0
 20858                           indf0	equ	0xFEF
 20859                           postinc0	equ	0xFEE
 20860                           fsr0h	equ	0xFEA
 20861                           fsr0l	equ	0xFE9
 20862                           wreg	equ	0xFE8
 20863                           postdec1	equ	0xFE5
 20864                           fsr1h	equ	0xFE2
 20865                           fsr1l	equ	0xFE1
 20866                           indf2	equ	0xFDF
 20867                           postinc2	equ	0xFDE
 20868                           postdec2	equ	0xFDD
 20869                           fsr2h	equ	0xFDA
 20870                           fsr2l	equ	0xFD9
 20871                           status	equ	0xFD8
 20872                           
 20873 ;; *************** function _change_state_to_logs_23 *****************
 20874 ;; Defined at:
 20875 ;;		line 535 in file "UI.c"
 20876 ;; Parameters:    Size  Location     Type
 20877 ;;		None
 20878 ;; Auto vars:     Size  Location     Type
 20879 ;;		None
 20880 ;; Return value:  Size  Location     Type
 20881 ;;                  1    wreg      void 
 20882 ;; Registers used:
 20883 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20884 ;; Tracked objects:
 20885 ;;		On entry : 0/0
 20886 ;;		On exit  : 0/0
 20887 ;;		Unchanged: 0/0
 20888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20893 ;;Total ram usage:        0 bytes
 20894 ;; Hardware stack levels used:    1
 20895 ;; Hardware stack levels required when called:    3
 20896 ;; This function calls:
 20897 ;;		i2_lcdInst
 20898 ;;		i2_printf
 20899 ;; This function is called by:
 20900 ;;		_updateMenu
 20901 ;;		_inputHandler
 20902 ;; This function uses a non-reentrant model
 20903 ;;
 20904                           
 20905                           	psect	text74
 20906  005184                     __ptext74:
 20907                           	opt stack 0
 20908  005184                     _change_state_to_logs_23:
 20909                           	opt stack 18
 20910                           
 20911                           ;UI.c: 536: cur_state = 1023;
 20912                           
 20913                           ;incstack = 0
 20914  005184  0E03               	movlw	3
 20915  005186  0100               	movlb	0	; () banked
 20916  005188  6FED               	movwf	(_cur_state+1)& (0+255),b
 20917  00518A  69EC               	setf	_cur_state& (0+255),b
 20918                           
 20919                           ; BSR set to: 0
 20920                           ;UI.c: 537: lcdInst(0b10000000);;
 20921  00518C  0E80               	movlw	128
 20922  00518E  EC06  F02A         	call	i2_lcdInst
 20923                           
 20924                           ;UI.c: 538: printf("LOG 2           ");
 20925  005192  0ED5               	movlw	low STR_40
 20926  005194  6E0D               	movwf	i2printf@f,c
 20927  005196  0EFC               	movlw	high STR_40
 20928  005198  6E0E               	movwf	i2printf@f+1,c
 20929  00519A  ECE6  F00E         	call	i2_printf	;wreg free
 20930                           
 20931                           ;UI.c: 539: lcdInst(0b11000000);;
 20932  00519E  0EC0               	movlw	192
 20933  0051A0  EC06  F02A         	call	i2_lcdInst
 20934                           
 20935                           ;UI.c: 540: printf("LOG 3          <");
 20936  0051A4  0E90               	movlw	low STR_46
 20937  0051A6  6E0D               	movwf	i2printf@f,c
 20938  0051A8  0EFD               	movlw	high STR_46
 20939  0051AA  6E0E               	movwf	i2printf@f+1,c
 20940  0051AC  ECE6  F00E         	call	i2_printf	;wreg free
 20941  0051B0  0012               	return		;funcret
 20942  0051B2                     __end_of_change_state_to_logs_23:
 20943                           	opt stack 0
 20944                           pclatu	equ	0xFFB
 20945                           pclath	equ	0xFFA
 20946                           tblptru	equ	0xFF8
 20947                           tblptrh	equ	0xFF7
 20948                           tblptrl	equ	0xFF6
 20949                           tablat	equ	0xFF5
 20950                           prodh	equ	0xFF4
 20951                           prodl	equ	0xFF3
 20952                           intcon	equ	0xFF2
 20953                           intcon2	equ	0xFF1
 20954                           intcon3	equ	0xFF0
 20955                           indf0	equ	0xFEF
 20956                           postinc0	equ	0xFEE
 20957                           fsr0h	equ	0xFEA
 20958                           fsr0l	equ	0xFE9
 20959                           wreg	equ	0xFE8
 20960                           postdec1	equ	0xFE5
 20961                           fsr1h	equ	0xFE2
 20962                           fsr1l	equ	0xFE1
 20963                           indf2	equ	0xFDF
 20964                           postinc2	equ	0xFDE
 20965                           postdec2	equ	0xFDD
 20966                           fsr2h	equ	0xFDA
 20967                           fsr2l	equ	0xFD9
 20968                           status	equ	0xFD8
 20969                           
 20970 ;; *************** function _change_state_to_logs_22 *****************
 20971 ;; Defined at:
 20972 ;;		line 528 in file "UI.c"
 20973 ;; Parameters:    Size  Location     Type
 20974 ;;		None
 20975 ;; Auto vars:     Size  Location     Type
 20976 ;;		None
 20977 ;; Return value:  Size  Location     Type
 20978 ;;                  1    wreg      void 
 20979 ;; Registers used:
 20980 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20981 ;; Tracked objects:
 20982 ;;		On entry : 0/0
 20983 ;;		On exit  : 0/0
 20984 ;;		Unchanged: 0/0
 20985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20990 ;;Total ram usage:        0 bytes
 20991 ;; Hardware stack levels used:    1
 20992 ;; Hardware stack levels required when called:    3
 20993 ;; This function calls:
 20994 ;;		i2_lcdInst
 20995 ;;		i2_printf
 20996 ;; This function is called by:
 20997 ;;		_updateMenu
 20998 ;;		_inputHandler
 20999 ;; This function uses a non-reentrant model
 21000 ;;
 21001                           
 21002                           	psect	text75
 21003  0050C6                     __ptext75:
 21004                           	opt stack 0
 21005  0050C6                     _change_state_to_logs_22:
 21006                           	opt stack 18
 21007                           
 21008                           ;UI.c: 529: cur_state = 1022;
 21009                           
 21010                           ;incstack = 0
 21011  0050C6  0E03               	movlw	3
 21012  0050C8  0100               	movlb	0	; () banked
 21013  0050CA  6FED               	movwf	(_cur_state+1)& (0+255),b
 21014  0050CC  0EFE               	movlw	254
 21015  0050CE  6FEC               	movwf	_cur_state& (0+255),b
 21016                           
 21017                           ; BSR set to: 0
 21018                           ;UI.c: 530: lcdInst(0b10000000);;
 21019  0050D0  0E80               	movlw	128
 21020  0050D2  EC06  F02A         	call	i2_lcdInst
 21021                           
 21022                           ;UI.c: 531: printf("LOG 2          <");
 21023  0050D6  0E7F               	movlw	low STR_42
 21024  0050D8  6E0D               	movwf	i2printf@f,c
 21025  0050DA  0EFD               	movlw	high STR_42
 21026  0050DC  6E0E               	movwf	i2printf@f+1,c
 21027  0050DE  ECE6  F00E         	call	i2_printf	;wreg free
 21028                           
 21029                           ;UI.c: 532: lcdInst(0b11000000);;
 21030  0050E2  0EC0               	movlw	192
 21031  0050E4  EC06  F02A         	call	i2_lcdInst
 21032                           
 21033                           ;UI.c: 533: printf("LOG 3           ");
 21034  0050E8  0EE6               	movlw	low STR_44
 21035  0050EA  6E0D               	movwf	i2printf@f,c
 21036  0050EC  0EFC               	movlw	high STR_44
 21037  0050EE  6E0E               	movwf	i2printf@f+1,c
 21038  0050F0  ECE6  F00E         	call	i2_printf	;wreg free
 21039  0050F4  0012               	return		;funcret
 21040  0050F6                     __end_of_change_state_to_logs_22:
 21041                           	opt stack 0
 21042                           pclatu	equ	0xFFB
 21043                           pclath	equ	0xFFA
 21044                           tblptru	equ	0xFF8
 21045                           tblptrh	equ	0xFF7
 21046                           tblptrl	equ	0xFF6
 21047                           tablat	equ	0xFF5
 21048                           prodh	equ	0xFF4
 21049                           prodl	equ	0xFF3
 21050                           intcon	equ	0xFF2
 21051                           intcon2	equ	0xFF1
 21052                           intcon3	equ	0xFF0
 21053                           indf0	equ	0xFEF
 21054                           postinc0	equ	0xFEE
 21055                           fsr0h	equ	0xFEA
 21056                           fsr0l	equ	0xFE9
 21057                           wreg	equ	0xFE8
 21058                           postdec1	equ	0xFE5
 21059                           fsr1h	equ	0xFE2
 21060                           fsr1l	equ	0xFE1
 21061                           indf2	equ	0xFDF
 21062                           postinc2	equ	0xFDE
 21063                           postdec2	equ	0xFDD
 21064                           fsr2h	equ	0xFDA
 21065                           fsr2l	equ	0xFD9
 21066                           status	equ	0xFD8
 21067                           
 21068 ;; *************** function _change_state_to_logs_12 *****************
 21069 ;; Defined at:
 21070 ;;		line 521 in file "UI.c"
 21071 ;; Parameters:    Size  Location     Type
 21072 ;;		None
 21073 ;; Auto vars:     Size  Location     Type
 21074 ;;		None
 21075 ;; Return value:  Size  Location     Type
 21076 ;;                  1    wreg      void 
 21077 ;; Registers used:
 21078 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21079 ;; Tracked objects:
 21080 ;;		On entry : 0/0
 21081 ;;		On exit  : 0/0
 21082 ;;		Unchanged: 0/0
 21083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21088 ;;Total ram usage:        0 bytes
 21089 ;; Hardware stack levels used:    1
 21090 ;; Hardware stack levels required when called:    3
 21091 ;; This function calls:
 21092 ;;		i2_lcdInst
 21093 ;;		i2_printf
 21094 ;; This function is called by:
 21095 ;;		_updateMenu
 21096 ;;		_inputHandler
 21097 ;; This function uses a non-reentrant model
 21098 ;;
 21099                           
 21100                           	psect	text76
 21101  0050F6                     __ptext76:
 21102                           	opt stack 0
 21103  0050F6                     _change_state_to_logs_12:
 21104                           	opt stack 18
 21105                           
 21106                           ;UI.c: 522: cur_state = 1012;
 21107                           
 21108                           ;incstack = 0
 21109  0050F6  0E03               	movlw	3
 21110  0050F8  0100               	movlb	0	; () banked
 21111  0050FA  6FED               	movwf	(_cur_state+1)& (0+255),b
 21112  0050FC  0EF4               	movlw	244
 21113  0050FE  6FEC               	movwf	_cur_state& (0+255),b
 21114                           
 21115                           ; BSR set to: 0
 21116                           ;UI.c: 523: lcdInst(0b10000000);;
 21117  005100  0E80               	movlw	128
 21118  005102  EC06  F02A         	call	i2_lcdInst
 21119                           
 21120                           ;UI.c: 524: printf("LOG 1           ");
 21121  005106  0EC4               	movlw	low STR_41
 21122  005108  6E0D               	movwf	i2printf@f,c
 21123  00510A  0EFC               	movlw	high STR_41
 21124  00510C  6E0E               	movwf	i2printf@f+1,c
 21125  00510E  ECE6  F00E         	call	i2_printf	;wreg free
 21126                           
 21127                           ;UI.c: 525: lcdInst(0b11000000);;
 21128  005112  0EC0               	movlw	192
 21129  005114  EC06  F02A         	call	i2_lcdInst
 21130                           
 21131                           ;UI.c: 526: printf("LOG 2          <");
 21132  005118  0E7F               	movlw	low STR_42
 21133  00511A  6E0D               	movwf	i2printf@f,c
 21134  00511C  0EFD               	movlw	high STR_42
 21135  00511E  6E0E               	movwf	i2printf@f+1,c
 21136  005120  ECE6  F00E         	call	i2_printf	;wreg free
 21137  005124  0012               	return		;funcret
 21138  005126                     __end_of_change_state_to_logs_12:
 21139                           	opt stack 0
 21140                           pclatu	equ	0xFFB
 21141                           pclath	equ	0xFFA
 21142                           tblptru	equ	0xFF8
 21143                           tblptrh	equ	0xFF7
 21144                           tblptrl	equ	0xFF6
 21145                           tablat	equ	0xFF5
 21146                           prodh	equ	0xFF4
 21147                           prodl	equ	0xFF3
 21148                           intcon	equ	0xFF2
 21149                           intcon2	equ	0xFF1
 21150                           intcon3	equ	0xFF0
 21151                           indf0	equ	0xFEF
 21152                           postinc0	equ	0xFEE
 21153                           fsr0h	equ	0xFEA
 21154                           fsr0l	equ	0xFE9
 21155                           wreg	equ	0xFE8
 21156                           postdec1	equ	0xFE5
 21157                           fsr1h	equ	0xFE2
 21158                           fsr1l	equ	0xFE1
 21159                           indf2	equ	0xFDF
 21160                           postinc2	equ	0xFDE
 21161                           postdec2	equ	0xFDD
 21162                           fsr2h	equ	0xFDA
 21163                           fsr2l	equ	0xFD9
 21164                           status	equ	0xFD8
 21165                           
 21166 ;; *************** function _change_state_to_logs_11 *****************
 21167 ;; Defined at:
 21168 ;;		line 514 in file "UI.c"
 21169 ;; Parameters:    Size  Location     Type
 21170 ;;		None
 21171 ;; Auto vars:     Size  Location     Type
 21172 ;;		None
 21173 ;; Return value:  Size  Location     Type
 21174 ;;                  1    wreg      void 
 21175 ;; Registers used:
 21176 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21177 ;; Tracked objects:
 21178 ;;		On entry : 0/0
 21179 ;;		On exit  : 0/0
 21180 ;;		Unchanged: 0/0
 21181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21185 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21186 ;;Total ram usage:        0 bytes
 21187 ;; Hardware stack levels used:    1
 21188 ;; Hardware stack levels required when called:    3
 21189 ;; This function calls:
 21190 ;;		i2_lcdInst
 21191 ;;		i2_printf
 21192 ;; This function is called by:
 21193 ;;		_updateMenu
 21194 ;;		_inputHandler
 21195 ;; This function uses a non-reentrant model
 21196 ;;
 21197                           
 21198                           	psect	text77
 21199  005126                     __ptext77:
 21200                           	opt stack 0
 21201  005126                     _change_state_to_logs_11:
 21202                           	opt stack 18
 21203                           
 21204                           ;UI.c: 515: cur_state = 1011;
 21205                           
 21206                           ;incstack = 0
 21207  005126  0E03               	movlw	3
 21208  005128  0100               	movlb	0	; () banked
 21209  00512A  6FED               	movwf	(_cur_state+1)& (0+255),b
 21210  00512C  0EF3               	movlw	243
 21211  00512E  6FEC               	movwf	_cur_state& (0+255),b
 21212                           
 21213                           ; BSR set to: 0
 21214                           ;UI.c: 516: lcdInst(0b10000000);;
 21215  005130  0E80               	movlw	128
 21216  005132  EC06  F02A         	call	i2_lcdInst
 21217                           
 21218                           ;UI.c: 517: printf("LOG 1          <");
 21219  005136  0E6E               	movlw	low STR_39
 21220  005138  6E0D               	movwf	i2printf@f,c
 21221  00513A  0EFD               	movlw	high STR_39
 21222  00513C  6E0E               	movwf	i2printf@f+1,c
 21223  00513E  ECE6  F00E         	call	i2_printf	;wreg free
 21224                           
 21225                           ;UI.c: 518: lcdInst(0b11000000);;
 21226  005142  0EC0               	movlw	192
 21227  005144  EC06  F02A         	call	i2_lcdInst
 21228                           
 21229                           ;UI.c: 519: printf("LOG 2           ");
 21230  005148  0ED5               	movlw	low STR_40
 21231  00514A  6E0D               	movwf	i2printf@f,c
 21232  00514C  0EFC               	movlw	high STR_40
 21233  00514E  6E0E               	movwf	i2printf@f+1,c
 21234  005150  ECE6  F00E         	call	i2_printf	;wreg free
 21235  005154  0012               	return		;funcret
 21236  005156                     __end_of_change_state_to_logs_11:
 21237                           	opt stack 0
 21238                           pclatu	equ	0xFFB
 21239                           pclath	equ	0xFFA
 21240                           tblptru	equ	0xFF8
 21241                           tblptrh	equ	0xFF7
 21242                           tblptrl	equ	0xFF6
 21243                           tablat	equ	0xFF5
 21244                           prodh	equ	0xFF4
 21245                           prodl	equ	0xFF3
 21246                           intcon	equ	0xFF2
 21247                           intcon2	equ	0xFF1
 21248                           intcon3	equ	0xFF0
 21249                           indf0	equ	0xFEF
 21250                           postinc0	equ	0xFEE
 21251                           fsr0h	equ	0xFEA
 21252                           fsr0l	equ	0xFE9
 21253                           wreg	equ	0xFE8
 21254                           postdec1	equ	0xFE5
 21255                           fsr1h	equ	0xFE2
 21256                           fsr1l	equ	0xFE1
 21257                           indf2	equ	0xFDF
 21258                           postinc2	equ	0xFDE
 21259                           postdec2	equ	0xFDD
 21260                           fsr2h	equ	0xFDA
 21261                           fsr2l	equ	0xFD9
 21262                           status	equ	0xFD8
 21263                           
 21264 ;; *************** function _dispLogs *****************
 21265 ;; Defined at:
 21266 ;;		line 467 in file "UI.c"
 21267 ;; Parameters:    Size  Location     Type
 21268 ;;  myLog           2   17[COMRAM] int 
 21269 ;; Auto vars:     Size  Location     Type
 21270 ;;		None
 21271 ;; Return value:  Size  Location     Type
 21272 ;;                  1    wreg      void 
 21273 ;; Registers used:
 21274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21275 ;; Tracked objects:
 21276 ;;		On entry : 0/0
 21277 ;;		On exit  : 0/0
 21278 ;;		Unchanged: 0/0
 21279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21280 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21283 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21284 ;;Total ram usage:        2 bytes
 21285 ;; Hardware stack levels used:    1
 21286 ;; Hardware stack levels required when called:    2
 21287 ;; This function calls:
 21288 ;;		_retrieveLog
 21289 ;; This function is called by:
 21290 ;;		_updateMenu
 21291 ;; This function uses a non-reentrant model
 21292 ;;
 21293                           
 21294                           	psect	text78
 21295  0052D0                     __ptext78:
 21296                           	opt stack 0
 21297  0052D0                     _dispLogs:
 21298                           	opt stack 20
 21299                           
 21300                           ;UI.c: 468: logstate = 1;
 21301                           
 21302                           ;incstack = 0
 21303  0052D0  0E00               	movlw	0
 21304  0052D2  0100               	movlb	0	; () banked
 21305  0052D4  6FF7               	movwf	(_logstate+1)& (0+255),b
 21306  0052D6  0E01               	movlw	1
 21307  0052D8  6FF6               	movwf	_logstate& (0+255),b
 21308                           
 21309                           ; BSR set to: 0
 21310                           ;UI.c: 469: log = myLog;
 21311  0052DA  C012  F0F2         	movff	dispLogs@myLog,_log
 21312  0052DE  C013  F0F3         	movff	dispLogs@myLog+1,_log+1
 21313                           
 21314                           ; BSR set to: 0
 21315                           ;UI.c: 470: retrieveLog(myLog - 1);
 21316  0052E2  0EFF               	movlw	255
 21317  0052E4  2412               	addwf	dispLogs@myLog,w,c
 21318  0052E6  6E07               	movwf	retrieveLog@logNum,c
 21319  0052E8  0EFF               	movlw	255
 21320  0052EA  2013               	addwfc	dispLogs@myLog+1,w,c
 21321  0052EC  6E08               	movwf	retrieveLog@logNum+1,c
 21322  0052EE  EC3E  F01E         	call	_retrieveLog	;wreg free
 21323  0052F2  0012               	return		;funcret
 21324  0052F4                     __end_of_dispLogs:
 21325                           	opt stack 0
 21326                           pclatu	equ	0xFFB
 21327                           pclath	equ	0xFFA
 21328                           tblptru	equ	0xFF8
 21329                           tblptrh	equ	0xFF7
 21330                           tblptrl	equ	0xFF6
 21331                           tablat	equ	0xFF5
 21332                           prodh	equ	0xFF4
 21333                           prodl	equ	0xFF3
 21334                           intcon	equ	0xFF2
 21335                           intcon2	equ	0xFF1
 21336                           intcon3	equ	0xFF0
 21337                           indf0	equ	0xFEF
 21338                           postinc0	equ	0xFEE
 21339                           fsr0h	equ	0xFEA
 21340                           fsr0l	equ	0xFE9
 21341                           wreg	equ	0xFE8
 21342                           postdec1	equ	0xFE5
 21343                           fsr1h	equ	0xFE2
 21344                           fsr1l	equ	0xFE1
 21345                           indf2	equ	0xFDF
 21346                           postinc2	equ	0xFDE
 21347                           postdec2	equ	0xFDD
 21348                           fsr2h	equ	0xFDA
 21349                           fsr2l	equ	0xFD9
 21350                           status	equ	0xFD8
 21351                           
 21352 ;; *************** function _retrieveLog *****************
 21353 ;; Defined at:
 21354 ;;		line 134 in file "EEPROM.c"
 21355 ;; Parameters:    Size  Location     Type
 21356 ;;  logNum          2    6[COMRAM] int 
 21357 ;; Auto vars:     Size  Location     Type
 21358 ;;  i               2   13[COMRAM] int 
 21359 ;;  addr            2   15[COMRAM] unsigned short 
 21360 ;;  byte3           1   12[COMRAM] unsigned char 
 21361 ;;  byte2           1   11[COMRAM] unsigned char 
 21362 ;;  byte1           1   10[COMRAM] unsigned char 
 21363 ;; Return value:  Size  Location     Type
 21364 ;;                  1    wreg      void 
 21365 ;; Registers used:
 21366 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21367 ;; Tracked objects:
 21368 ;;		On entry : 0/0
 21369 ;;		On exit  : 0/0
 21370 ;;		Unchanged: 0/0
 21371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21372 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21373 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21374 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21375 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21376 ;;Total ram usage:       11 bytes
 21377 ;; Hardware stack levels used:    1
 21378 ;; Hardware stack levels required when called:    1
 21379 ;; This function calls:
 21380 ;;		i2_EEPROM_read
 21381 ;;		i2___wmul
 21382 ;; This function is called by:
 21383 ;;		_dispLogs
 21384 ;; This function uses a non-reentrant model
 21385 ;;
 21386                           
 21387                           	psect	text79
 21388  003C7C                     __ptext79:
 21389                           	opt stack 0
 21390  003C7C                     _retrieveLog:
 21391                           	opt stack 20
 21392                           
 21393                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 21394                           
 21395                           ;incstack = 0
 21396  003C7C  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 21397  003C80  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 21398  003C84  0E00               	movlw	0
 21399  003C86  6E04               	movwf	i2___wmul@multiplicand+1,c
 21400  003C88  0E0B               	movlw	11
 21401  003C8A  6E03               	movwf	i2___wmul@multiplicand,c
 21402  003C8C  EC42  F029         	call	i2___wmul	;wreg free
 21403  003C90  0E01               	movlw	1
 21404  003C92  2401               	addwf	?i2___wmul,w,c
 21405  003C94  6E10               	movwf	retrieveLog@addr,c
 21406  003C96  0E00               	movlw	0
 21407  003C98  2002               	addwfc	?i2___wmul+1,w,c
 21408  003C9A  6E11               	movwf	retrieveLog@addr+1,c
 21409                           
 21410                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 21411  003C9C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21412  003CA0  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21413  003CA4  ECD2  F029         	call	i2_EEPROM_read	;wreg free
 21414  003CA8  6E0B               	movwf	retrieveLog@byte1,c
 21415                           
 21416                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 21417  003CAA  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 21418  003CAE  0E80               	movlw	128
 21419  003CB0  1609               	andwf	??_retrieveLog,f,c
 21420  003CB2  5009               	movf	??_retrieveLog,w,c
 21421  003CB4  6E63               	movwf	_log_completion,c
 21422  003CB6  6A64               	clrf	_log_completion+1,c
 21423                           
 21424                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 21425  003CB8  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 21426  003CBC  0E0F               	movlw	15
 21427  003CBE  1609               	andwf	??_retrieveLog,f,c
 21428  003CC0  5009               	movf	??_retrieveLog,w,c
 21429  003CC2  0101               	movlb	1	; () banked
 21430  003CC4  6F3F               	movwf	_log_count_total& (0+255),b
 21431  003CC6  6B40               	clrf	(_log_count_total+1)& (0+255),b
 21432                           
 21433                           ; BSR set to: 1
 21434                           ;EEPROM.c: 146: addr++;
 21435  003CC8  4A10               	infsnz	retrieveLog@addr,f,c
 21436  003CCA  2A11               	incf	retrieveLog@addr+1,f,c
 21437                           
 21438                           ; BSR set to: 1
 21439                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 21440  003CCC  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21441  003CD0  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21442  003CD4  ECD2  F029         	call	i2_EEPROM_read	;wreg free
 21443  003CD8  6E0C               	movwf	retrieveLog@byte2,c
 21444                           
 21445                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 21446  003CDA  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 21447  003CDE  3A09               	swapf	??_retrieveLog,f,c
 21448  003CE0  0E0F               	movlw	15
 21449  003CE2  1609               	andwf	??_retrieveLog,f,c
 21450  003CE4  0E0F               	movlw	15
 21451  003CE6  1609               	andwf	??_retrieveLog,f,c
 21452  003CE8  5009               	movf	??_retrieveLog,w,c
 21453  003CEA  6E69               	movwf	_log_count_pop_no_tab,c
 21454  003CEC  6A6A               	clrf	_log_count_pop_no_tab+1,c
 21455                           
 21456                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 21457  003CEE  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 21458  003CF2  0E0F               	movlw	15
 21459  003CF4  1609               	andwf	??_retrieveLog,f,c
 21460  003CF6  5009               	movf	??_retrieveLog,w,c
 21461  003CF8  6E6B               	movwf	_log_count_pop_w_tab,c
 21462  003CFA  6A6C               	clrf	_log_count_pop_w_tab+1,c
 21463                           
 21464                           ;EEPROM.c: 152: addr++;
 21465  003CFC  4A10               	infsnz	retrieveLog@addr,f,c
 21466  003CFE  2A11               	incf	retrieveLog@addr+1,f,c
 21467                           
 21468                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 21469  003D00  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21470  003D04  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21471  003D08  ECD2  F029         	call	i2_EEPROM_read	;wreg free
 21472  003D0C  6E0D               	movwf	retrieveLog@byte3,c
 21473                           
 21474                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 21475  003D0E  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 21476  003D12  3A09               	swapf	??_retrieveLog,f,c
 21477  003D14  0E0F               	movlw	15
 21478  003D16  1609               	andwf	??_retrieveLog,f,c
 21479  003D18  0E0F               	movlw	15
 21480  003D1A  1609               	andwf	??_retrieveLog,f,c
 21481  003D1C  5009               	movf	??_retrieveLog,w,c
 21482  003D1E  6E67               	movwf	_log_count_can_w_lab,c
 21483  003D20  6A68               	clrf	_log_count_can_w_lab+1,c
 21484                           
 21485                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 21486  003D22  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 21487  003D26  0E0F               	movlw	15
 21488  003D28  1609               	andwf	??_retrieveLog,f,c
 21489  003D2A  5009               	movf	??_retrieveLog,w,c
 21490  003D2C  6E65               	movwf	_log_count_can_no_lab,c
 21491  003D2E  6A66               	clrf	_log_count_can_no_lab+1,c
 21492                           
 21493                           ;EEPROM.c: 156: addr++;
 21494  003D30  4A10               	infsnz	retrieveLog@addr,f,c
 21495  003D32  2A11               	incf	retrieveLog@addr+1,f,c
 21496                           
 21497                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 21498  003D34  0E00               	movlw	0
 21499  003D36  6E0F               	movwf	retrieveLog@i+1,c
 21500  003D38  0E00               	movlw	0
 21501  003D3A  6E0E               	movwf	retrieveLog@i,c
 21502  003D3C                     i2l6861:
 21503  003D3C  BE0F               	btfsc	retrieveLog@i+1,7,c
 21504  003D3E  D006               	goto	i2l6865
 21505  003D40  500F               	movf	retrieveLog@i+1,w,c
 21506  003D42  E11E               	bnz	i2l6873
 21507  003D44  0E07               	movlw	7
 21508  003D46  5C0E               	subwf	retrieveLog@i,w,c
 21509  003D48  B0D8               	btfsc	status,0,c
 21510  003D4A  D01A               	goto	i2l6873
 21511  003D4C                     i2l6865:
 21512                           
 21513                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 21514  003D4C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21515  003D50  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21516  003D54  ECD2  F029         	call	i2_EEPROM_read	;wreg free
 21517  003D58  6E09               	movwf	??_retrieveLog& (0+255),c
 21518  003D5A  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 21519  003D5C  90D8               	bcf	status,0,c
 21520  003D5E  340E               	rlcf	retrieveLog@i,w,c
 21521  003D60  6ED9               	movwf	fsr2l,c
 21522  003D62  340F               	rlcf	retrieveLog@i+1,w,c
 21523  003D64  6EDA               	movwf	fsr2h,c
 21524  003D66  0E00               	movlw	low _log_startTime
 21525  003D68  26D9               	addwf	fsr2l,f,c
 21526  003D6A  0E01               	movlw	high _log_startTime
 21527  003D6C  22DA               	addwfc	fsr2h,f,c
 21528  003D6E  C009  FFDE         	movff	??_retrieveLog,postinc2
 21529  003D72  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 21530                           
 21531                           ;EEPROM.c: 161: addr++;
 21532  003D76  4A10               	infsnz	retrieveLog@addr,f,c
 21533  003D78  2A11               	incf	retrieveLog@addr+1,f,c
 21534  003D7A  4A0E               	infsnz	retrieveLog@i,f,c
 21535  003D7C  2A0F               	incf	retrieveLog@i+1,f,c
 21536  003D7E  D7DE               	goto	i2l6861
 21537  003D80                     i2l6873:
 21538                           
 21539                           ;EEPROM.c: 162: }
 21540                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 21541  003D80  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21542  003D84  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21543  003D88  ECD2  F029         	call	i2_EEPROM_read	;wreg free
 21544  003D8C  6E09               	movwf	??_retrieveLog& (0+255),c
 21545  003D8E  5009               	movf	??_retrieveLog,w,c
 21546  003D90  0100               	movlb	0	; () banked
 21547  003D92  6FF4               	movwf	_log_total_time& (0+255),b
 21548  003D94  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 21549                           
 21550                           ; BSR set to: 0
 21551  003D96  0012               	return		;funcret
 21552  003D98                     __end_of_retrieveLog:
 21553                           	opt stack 0
 21554                           pclatu	equ	0xFFB
 21555                           pclath	equ	0xFFA
 21556                           tblptru	equ	0xFF8
 21557                           tblptrh	equ	0xFF7
 21558                           tblptrl	equ	0xFF6
 21559                           tablat	equ	0xFF5
 21560                           prodh	equ	0xFF4
 21561                           prodl	equ	0xFF3
 21562                           intcon	equ	0xFF2
 21563                           intcon2	equ	0xFF1
 21564                           intcon3	equ	0xFF0
 21565                           indf0	equ	0xFEF
 21566                           postinc0	equ	0xFEE
 21567                           fsr0h	equ	0xFEA
 21568                           fsr0l	equ	0xFE9
 21569                           wreg	equ	0xFE8
 21570                           postdec1	equ	0xFE5
 21571                           fsr1h	equ	0xFE2
 21572                           fsr1l	equ	0xFE1
 21573                           indf2	equ	0xFDF
 21574                           postinc2	equ	0xFDE
 21575                           postdec2	equ	0xFDD
 21576                           fsr2h	equ	0xFDA
 21577                           fsr2l	equ	0xFD9
 21578                           status	equ	0xFD8
 21579                           
 21580 ;; *************** function i2_EEPROM_read *****************
 21581 ;; Defined at:
 21582 ;;		line 68 in file "EEPROM.c"
 21583 ;; Parameters:    Size  Location     Type
 21584 ;;  address         2    0[COMRAM] unsigned short 
 21585 ;; Auto vars:     Size  Location     Type
 21586 ;;		None
 21587 ;; Return value:  Size  Location     Type
 21588 ;;                  1    wreg      unsigned char 
 21589 ;; Registers used:
 21590 ;;		wreg, status,2
 21591 ;; Tracked objects:
 21592 ;;		On entry : 0/0
 21593 ;;		On exit  : 0/0
 21594 ;;		Unchanged: 0/0
 21595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21596 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21599 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21600 ;;Total ram usage:        2 bytes
 21601 ;; Hardware stack levels used:    1
 21602 ;; This function calls:
 21603 ;;		Nothing
 21604 ;; This function is called by:
 21605 ;;		_retrieveLog
 21606 ;; This function uses a non-reentrant model
 21607 ;;
 21608                           
 21609                           	psect	text80
 21610  0053A4                     __ptext80:
 21611                           	opt stack 0
 21612  0053A4                     i2_EEPROM_read:
 21613                           	opt stack 20
 21614                           
 21615                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 21616                           
 21617                           ; BSR set to: 0
 21618                           ;incstack = 0
 21619  0053A4  5002               	movf	i2EEPROM_read@address+1,w,c
 21620  0053A6  6EAA               	movwf	4010,c	;volatile
 21621                           
 21622                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 21623  0053A8  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 21624                           
 21625                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 21626  0053AC  9EA6               	bcf	4006,7,c	;volatile
 21627                           
 21628                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 21629  0053AE  9CA6               	bcf	4006,6,c	;volatile
 21630                           
 21631                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 21632  0053B0  80A6               	bsf	4006,0,c	;volatile
 21633  0053B2                     i2l1045:
 21634  0053B2  B0A6               	btfsc	4006,0,c	;volatile
 21635  0053B4  D7FE               	goto	i2l1045
 21636                           
 21637                           ;EEPROM.c: 81: return EEDATA;
 21638  0053B6  50A8               	movf	4008,w,c	;volatile
 21639  0053B8  0012               	return	
 21640  0053BA                     __end_ofi2_EEPROM_read:
 21641                           	opt stack 0
 21642                           pclatu	equ	0xFFB
 21643                           pclath	equ	0xFFA
 21644                           tblptru	equ	0xFF8
 21645                           tblptrh	equ	0xFF7
 21646                           tblptrl	equ	0xFF6
 21647                           tablat	equ	0xFF5
 21648                           prodh	equ	0xFF4
 21649                           prodl	equ	0xFF3
 21650                           intcon	equ	0xFF2
 21651                           intcon2	equ	0xFF1
 21652                           intcon3	equ	0xFF0
 21653                           indf0	equ	0xFEF
 21654                           postinc0	equ	0xFEE
 21655                           fsr0h	equ	0xFEA
 21656                           fsr0l	equ	0xFE9
 21657                           wreg	equ	0xFE8
 21658                           postdec1	equ	0xFE5
 21659                           fsr1h	equ	0xFE2
 21660                           fsr1l	equ	0xFE1
 21661                           indf2	equ	0xFDF
 21662                           postinc2	equ	0xFDE
 21663                           postdec2	equ	0xFDD
 21664                           fsr2h	equ	0xFDA
 21665                           fsr2l	equ	0xFD9
 21666                           status	equ	0xFD8
 21667                           
 21668 ;; *************** function _printSortTimer *****************
 21669 ;; Defined at:
 21670 ;;		line 439 in file "sort.c"
 21671 ;; Parameters:    Size  Location     Type
 21672 ;;		None
 21673 ;; Auto vars:     Size  Location     Type
 21674 ;;  i               2   70[COMRAM] int 
 21675 ;;  i               2   72[COMRAM] int 
 21676 ;;  curTime        14   44[COMRAM] int [7]
 21677 ;;  timeDiff        2   68[COMRAM] unsigned int 
 21678 ;;  sec             2   64[COMRAM] int 
 21679 ;;  min             2   62[COMRAM] int 
 21680 ;;  cur_sec         2   60[COMRAM] unsigned int 
 21681 ;;  start_sec       2   58[COMRAM] unsigned int 
 21682 ;; Return value:  Size  Location     Type
 21683 ;;                  1    wreg      void 
 21684 ;; Registers used:
 21685 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21686 ;; Tracked objects:
 21687 ;;		On entry : 0/0
 21688 ;;		On exit  : 0/0
 21689 ;;		Unchanged: 0/0
 21690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21692 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21693 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21694 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21695 ;;Total ram usage:       33 bytes
 21696 ;; Hardware stack levels used:    1
 21697 ;; Hardware stack levels required when called:    3
 21698 ;; This function calls:
 21699 ;;		i2___lwdiv
 21700 ;;		i2___lwmod
 21701 ;;		i2___wmul
 21702 ;;		i2_delay_ms
 21703 ;;		i2_getRTC
 21704 ;;		i2_lcdInst
 21705 ;;		i2_printf
 21706 ;; This function is called by:
 21707 ;;		_handler
 21708 ;; This function uses a non-reentrant model
 21709 ;;
 21710                           
 21711                           	psect	text81
 21712  0029C2                     __ptext81:
 21713                           	opt stack 0
 21714  0029C2                     _printSortTimer:
 21715                           	opt stack 20
 21716                           
 21717                           ;sort.c: 440: getRTC();
 21718                           
 21719                           ;incstack = 0
 21720  0029C2  EC7F  F024         	call	i2_getRTC	;wreg free
 21721                           
 21722                           ;sort.c: 441: int curTime[7];
 21723                           ;sort.c: 442: for(int i = 0; i < 7; i++){
 21724  0029C6  0E00               	movlw	0
 21725  0029C8  6E4A               	movwf	printSortTimer@i+1,c
 21726  0029CA  0E00               	movlw	0
 21727  0029CC  6E49               	movwf	printSortTimer@i,c
 21728  0029CE                     i2l9319:
 21729  0029CE  BE4A               	btfsc	printSortTimer@i+1,7,c
 21730  0029D0  D006               	goto	i2l9323
 21731  0029D2  504A               	movf	printSortTimer@i+1,w,c
 21732  0029D4  E131               	bnz	i2l9329
 21733  0029D6  0E07               	movlw	7
 21734  0029D8  5C49               	subwf	printSortTimer@i,w,c
 21735  0029DA  B0D8               	btfsc	status,0,c
 21736  0029DC  D02D               	goto	i2l9329
 21737  0029DE                     i2l9323:
 21738                           
 21739                           ;sort.c: 443: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 21740  0029DE  0E1C               	movlw	low _time
 21741  0029E0  2449               	addwf	printSortTimer@i,w,c
 21742  0029E2  6ED9               	movwf	fsr2l,c
 21743  0029E4  0E01               	movlw	high _time
 21744  0029E6  204A               	addwfc	printSortTimer@i+1,w,c
 21745  0029E8  6EDA               	movwf	fsr2h,c
 21746  0029EA  50DF               	movf	indf2,w,c
 21747  0029EC  6E2A               	movwf	??_printSortTimer& (0+255),c
 21748  0029EE  3A2A               	swapf	??_printSortTimer,f,c
 21749  0029F0  0E0F               	movlw	15
 21750  0029F2  162A               	andwf	??_printSortTimer,f,c
 21751  0029F4  0E0F               	movlw	15
 21752  0029F6  162A               	andwf	??_printSortTimer,f,c
 21753  0029F8  502A               	movf	??_printSortTimer,w,c
 21754  0029FA  0D0A               	mullw	10
 21755  0029FC  0E1C               	movlw	low _time
 21756  0029FE  2449               	addwf	printSortTimer@i,w,c
 21757  002A00  6ED9               	movwf	fsr2l,c
 21758  002A02  0E01               	movlw	high _time
 21759  002A04  204A               	addwfc	printSortTimer@i+1,w,c
 21760  002A06  6EDA               	movwf	fsr2h,c
 21761  002A08  50DF               	movf	indf2,w,c
 21762  002A0A  0B0F               	andlw	15
 21763  002A0C  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 21764  002A0E  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 21765  002A10  50F3               	movf	prodl,w,c
 21766  002A12  262B               	addwf	??_printSortTimer+1,f,c
 21767  002A14  50F4               	movf	prodh,w,c
 21768  002A16  222C               	addwfc	??_printSortTimer+2,f,c
 21769  002A18  90D8               	bcf	status,0,c
 21770  002A1A  3449               	rlcf	printSortTimer@i,w,c
 21771  002A1C  6ED9               	movwf	fsr2l,c
 21772  002A1E  344A               	rlcf	printSortTimer@i+1,w,c
 21773  002A20  6EDA               	movwf	fsr2h,c
 21774  002A22  0E2D               	movlw	low printSortTimer@curTime
 21775  002A24  26D9               	addwf	fsr2l,f,c
 21776  002A26  0E00               	movlw	high printSortTimer@curTime
 21777  002A28  22DA               	addwfc	fsr2h,f,c
 21778  002A2A  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 21779  002A2E  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 21780  002A32  4A49               	infsnz	printSortTimer@i,f,c
 21781  002A34  2A4A               	incf	printSortTimer@i+1,f,c
 21782  002A36  D7CB               	goto	i2l9319
 21783  002A38                     i2l9329:
 21784                           
 21785                           ;sort.c: 444: }
 21786                           ;sort.c: 445: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 21787  002A38  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 21788  002A3C  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 21789  002A40  0E00               	movlw	0
 21790  002A42  6E04               	movwf	i2___wmul@multiplicand+1,c
 21791  002A44  0E3C               	movlw	60
 21792  002A46  6E03               	movwf	i2___wmul@multiplicand,c
 21793  002A48  EC42  F029         	call	i2___wmul	;wreg free
 21794  002A4C  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 21795  002A50  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 21796  002A54  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 21797  002A58  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 21798  002A5C  0E0E               	movlw	14
 21799  002A5E  6E04               	movwf	i2___wmul@multiplicand+1,c
 21800  002A60  0E10               	movlw	16
 21801  002A62  6E03               	movwf	i2___wmul@multiplicand,c
 21802  002A64  EC42  F029         	call	i2___wmul	;wreg free
 21803  002A68  5001               	movf	?i2___wmul,w,c
 21804  002A6A  262A               	addwf	??_printSortTimer,f,c
 21805  002A6C  5002               	movf	?i2___wmul+1,w,c
 21806  002A6E  222B               	addwfc	??_printSortTimer+1,f,c
 21807  002A70  0101               	movlb	1	; () banked
 21808  002A72  510E               	movf	_startTime& (0+255),w,b
 21809  002A74  242A               	addwf	??_printSortTimer,w,c
 21810  002A76  6E3B               	movwf	printSortTimer@start_sec,c
 21811  002A78  0101               	movlb	1	; () banked
 21812  002A7A  510F               	movf	(_startTime+1)& (0+255),w,b
 21813  002A7C  202B               	addwfc	??_printSortTimer+1,w,c
 21814  002A7E  6E3C               	movwf	printSortTimer@start_sec+1,c
 21815                           
 21816                           ;sort.c: 446: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 21817  002A80  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 21818  002A84  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 21819  002A88  0E00               	movlw	0
 21820  002A8A  6E04               	movwf	i2___wmul@multiplicand+1,c
 21821  002A8C  0E3C               	movlw	60
 21822  002A8E  6E03               	movwf	i2___wmul@multiplicand,c
 21823  002A90  EC42  F029         	call	i2___wmul	;wreg free
 21824  002A94  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 21825  002A98  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 21826  002A9C  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 21827  002AA0  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 21828  002AA4  0E0E               	movlw	14
 21829  002AA6  6E04               	movwf	i2___wmul@multiplicand+1,c
 21830  002AA8  0E10               	movlw	16
 21831  002AAA  6E03               	movwf	i2___wmul@multiplicand,c
 21832  002AAC  EC42  F029         	call	i2___wmul	;wreg free
 21833  002AB0  5001               	movf	?i2___wmul,w,c
 21834  002AB2  262A               	addwf	??_printSortTimer,f,c
 21835  002AB4  5002               	movf	?i2___wmul+1,w,c
 21836  002AB6  222B               	addwfc	??_printSortTimer+1,f,c
 21837  002AB8  502D               	movf	printSortTimer@curTime,w,c
 21838  002ABA  242A               	addwf	??_printSortTimer,w,c
 21839  002ABC  6E3D               	movwf	printSortTimer@cur_sec,c
 21840  002ABE  502E               	movf	printSortTimer@curTime+1,w,c
 21841  002AC0  202B               	addwfc	??_printSortTimer+1,w,c
 21842  002AC2  6E3E               	movwf	printSortTimer@cur_sec+1,c
 21843                           
 21844                           ;sort.c: 447: unsigned int timeDiff = cur_sec - start_sec;
 21845  002AC4  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 21846  002AC8  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 21847  002ACC  1E2A               	comf	??_printSortTimer,f,c
 21848  002ACE  1E2B               	comf	??_printSortTimer+1,f,c
 21849  002AD0  4A2A               	infsnz	??_printSortTimer,f,c
 21850  002AD2  2A2B               	incf	??_printSortTimer+1,f,c
 21851  002AD4  503D               	movf	printSortTimer@cur_sec,w,c
 21852  002AD6  242A               	addwf	??_printSortTimer,w,c
 21853  002AD8  6E45               	movwf	printSortTimer@timeDiff,c
 21854  002ADA  503E               	movf	printSortTimer@cur_sec+1,w,c
 21855  002ADC  202B               	addwfc	??_printSortTimer+1,w,c
 21856  002ADE  6E46               	movwf	printSortTimer@timeDiff+1,c
 21857                           
 21858                           ;sort.c: 449: total_time = timeDiff;
 21859  002AE0  C045  F0F8         	movff	printSortTimer@timeDiff,_total_time
 21860  002AE4  C046  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 21861                           
 21862                           ;sort.c: 451: if(f_most_recent_sort_time){
 21863  002AE8  0101               	movlb	1	; () banked
 21864  002AEA  5137               	movf	_f_most_recent_sort_time& (0+255),w,b
 21865  002AEC  0101               	movlb	1	; () banked
 21866  002AEE  1138               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 21867  002AF0  B4D8               	btfsc	status,2,c
 21868  002AF2  D009               	goto	i2l9341
 21869                           
 21870                           ; BSR set to: 1
 21871                           ;sort.c: 452: most_recent_sort_time = total_time;
 21872  002AF4  C0F8  F06D         	movff	_total_time,_most_recent_sort_time
 21873  002AF8  C0F9  F06E         	movff	_total_time+1,_most_recent_sort_time+1
 21874                           
 21875                           ; BSR set to: 1
 21876                           ;sort.c: 453: f_most_recent_sort_time = 0;
 21877  002AFC  0E00               	movlw	0
 21878  002AFE  0101               	movlb	1	; () banked
 21879  002B00  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 21880  002B02  0E00               	movlw	0
 21881  002B04  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
 21882  002B06                     i2l9341:
 21883                           
 21884                           ; BSR set to: 1
 21885                           ;sort.c: 454: }
 21886                           ;sort.c: 456: if(total_time - most_recent_sort_time == 20){
 21887  002B06  C06D  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 21888  002B0A  C06E  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 21889  002B0E  1E2A               	comf	??_printSortTimer,f,c
 21890  002B10  1E2B               	comf	??_printSortTimer+1,f,c
 21891  002B12  4A2A               	infsnz	??_printSortTimer,f,c
 21892  002B14  2A2B               	incf	??_printSortTimer+1,f,c
 21893  002B16  0100               	movlb	0	; () banked
 21894  002B18  51F8               	movf	_total_time& (0+255),w,b
 21895  002B1A  262A               	addwf	??_printSortTimer,f,c
 21896  002B1C  0100               	movlb	0	; () banked
 21897  002B1E  51F9               	movf	(_total_time+1)& (0+255),w,b
 21898  002B20  222B               	addwfc	??_printSortTimer+1,f,c
 21899  002B22  0E14               	movlw	20
 21900  002B24  182A               	xorwf	??_printSortTimer,w,c
 21901  002B26  102B               	iorwf	??_printSortTimer+1,w,c
 21902  002B28  A4D8               	btfss	status,2,c
 21903  002B2A  D033               	goto	i2l9361
 21904                           
 21905                           ; BSR set to: 0
 21906                           ;sort.c: 457: LATBbits.LATB2 = 0;
 21907  002B2C  948A               	bcf	3978,2,c	;volatile
 21908                           
 21909                           ; BSR set to: 0
 21910                           ;sort.c: 458: _delay((unsigned long)((2000)*(32000000/4000.0)));
 21911  002B2E  0E52               	movlw	82
 21912  002B30  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 21913  002B32  0E2B               	movlw	43
 21914  002B34  6E2A               	movwf	??_printSortTimer& (0+255),c
 21915  002B36  0E00               	movlw	0
 21916  002B38                     i2u1039_47:
 21917  002B38  2EE8               	decfsz	wreg,f,c
 21918  002B3A  D7FE               	bra	i2u1039_47
 21919  002B3C  2E2A               	decfsz	??_printSortTimer& (0+255),f,c
 21920  002B3E  D7FC               	bra	i2u1039_47
 21921  002B40  2E2B               	decfsz	(??_printSortTimer+1)& (0+255),f,c
 21922  002B42  D7FA               	bra	i2u1039_47
 21923  002B44  D000               	nop2	
 21924                           
 21925                           ;sort.c: 459: for(int i=0; i<46; i++){
 21926  002B46  0E00               	movlw	0
 21927  002B48  6E48               	movwf	printSortTimer@i_1187+1,c
 21928  002B4A  0E00               	movlw	0
 21929  002B4C  6E47               	movwf	printSortTimer@i_1187,c
 21930  002B4E  BE48               	btfsc	printSortTimer@i_1187+1,7,c
 21931  002B50  D006               	goto	i2l9353
 21932  002B52  5048               	movf	printSortTimer@i_1187+1,w,c
 21933  002B54  E11D               	bnz	i2l849
 21934  002B56  0E2E               	movlw	46
 21935  002B58  5C47               	subwf	printSortTimer@i_1187,w,c
 21936  002B5A  B0D8               	btfsc	status,0,c
 21937  002B5C  D019               	goto	i2l849
 21938  002B5E                     i2l9353:
 21939                           
 21940                           ;sort.c: 460: LATBbits.LATB2 = !LATBbits.LATB2;
 21941  002B5E  B48A               	btfsc	3978,2,c	;volatile
 21942  002B60  D003               	goto	i2u852_40
 21943  002B62  6A2A               	clrf	??_printSortTimer& (0+255),c
 21944  002B64  2A2A               	incf	??_printSortTimer& (0+255),f,c
 21945  002B66  D001               	goto	i2u853_48
 21946  002B68                     i2u852_40:
 21947  002B68  6A2A               	clrf	??_printSortTimer& (0+255),c
 21948  002B6A                     i2u853_48:
 21949  002B6A  462A               	rlncf	??_printSortTimer,f,c
 21950  002B6C  462A               	rlncf	??_printSortTimer,f,c
 21951  002B6E  508A               	movf	3978,w,c	;volatile
 21952  002B70  182A               	xorwf	??_printSortTimer,w,c
 21953  002B72  0BFB               	andlw	-5
 21954  002B74  182A               	xorwf	??_printSortTimer,w,c
 21955  002B76  6E8A               	movwf	3978,c	;volatile
 21956                           
 21957                           ;sort.c: 461: delay_ms(45-i);
 21958  002B78  5047               	movf	printSortTimer@i_1187,w,c
 21959  002B7A  0800               	sublw	0
 21960  002B7C  0F2D               	addlw	45
 21961  002B7E  ECAB  F029         	call	i2_delay_ms
 21962  002B82  4A47               	infsnz	printSortTimer@i_1187,f,c
 21963  002B84  2A48               	incf	printSortTimer@i_1187+1,f,c
 21964  002B86  BE48               	btfsc	printSortTimer@i_1187+1,7,c
 21965  002B88  D7EA               	goto	i2l9353
 21966  002B8A  5048               	movf	printSortTimer@i_1187+1,w,c
 21967  002B8C  E101               	bnz	i2u854_40
 21968  002B8E  D7E3               	goto	L13
 21969  002B90                     i2u854_40:
 21970  002B90                     i2l849:
 21971                           
 21972                           ;sort.c: 462: }
 21973                           ;sort.c: 463: LATBbits.LATB2 = 1;
 21974  002B90  848A               	bsf	3978,2,c	;volatile
 21975  002B92                     i2l9361:
 21976                           
 21977                           ;sort.c: 464: }
 21978                           ;sort.c: 466: if((total_time - most_recent_sort_time == 42) | (total_time == 179)){
 21979  002B92  C06D  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 21980  002B96  C06E  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 21981  002B9A  1E2A               	comf	??_printSortTimer,f,c
 21982  002B9C  1E2B               	comf	??_printSortTimer+1,f,c
 21983  002B9E  4A2A               	infsnz	??_printSortTimer,f,c
 21984  002BA0  2A2B               	incf	??_printSortTimer+1,f,c
 21985  002BA2  0100               	movlb	0	; () banked
 21986  002BA4  51F8               	movf	_total_time& (0+255),w,b
 21987  002BA6  262A               	addwf	??_printSortTimer,f,c
 21988  002BA8  0100               	movlb	0	; () banked
 21989  002BAA  51F9               	movf	(_total_time+1)& (0+255),w,b
 21990  002BAC  222B               	addwfc	??_printSortTimer+1,f,c
 21991  002BAE  0E2A               	movlw	42
 21992  002BB0  182A               	xorwf	??_printSortTimer,w,c
 21993  002BB2  102B               	iorwf	??_printSortTimer+1,w,c
 21994  002BB4  B4D8               	btfsc	status,2,c
 21995  002BB6  D007               	goto	i2l9365
 21996                           
 21997                           ; BSR set to: 0
 21998  002BB8  0EB3               	movlw	179
 21999  002BBA  0100               	movlb	0	; () banked
 22000  002BBC  19F8               	xorwf	_total_time& (0+255),w,b
 22001  002BBE  0100               	movlb	0	; () banked
 22002  002BC0  11F9               	iorwf	(_total_time+1)& (0+255),w,b
 22003  002BC2  A4D8               	btfss	status,2,c
 22004  002BC4  D003               	goto	i2l9367
 22005  002BC6                     i2l9365:
 22006                           
 22007                           ; BSR set to: 0
 22008                           ;sort.c: 467: machine_state = DoneSorting_state;
 22009  002BC6  0E02               	movlw	2
 22010  002BC8  0100               	movlb	0	; () banked
 22011  002BCA  6FFC               	movwf	_machine_state& (0+255),b
 22012  002BCC                     i2l9367:
 22013                           
 22014                           ; BSR set to: 0
 22015                           ;sort.c: 469: }
 22016                           ;sort.c: 471: int min = (timeDiff % 3600) / 60;
 22017  002BCC  0E0E               	movlw	14
 22018  002BCE  6E04               	movwf	i2___lwmod@divisor+1,c
 22019  002BD0  0E10               	movlw	16
 22020  002BD2  6E03               	movwf	i2___lwmod@divisor,c
 22021  002BD4  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 22022  002BD8  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 22023  002BDC  ECFA  F026         	call	i2___lwmod	;wreg free
 22024  002BE0  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 22025  002BE4  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 22026  002BE8  0E00               	movlw	0
 22027  002BEA  6E09               	movwf	i2___lwdiv@divisor+1,c
 22028  002BEC  0E3C               	movlw	60
 22029  002BEE  6E08               	movwf	i2___lwdiv@divisor,c
 22030  002BF0  EC3B  F026         	call	i2___lwdiv	;wreg free
 22031  002BF4  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 22032  002BF8  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 22033                           
 22034                           ;sort.c: 472: int sec = (timeDiff % 3600) % 60;
 22035  002BFC  0E0E               	movlw	14
 22036  002BFE  6E04               	movwf	i2___lwmod@divisor+1,c
 22037  002C00  0E10               	movlw	16
 22038  002C02  6E03               	movwf	i2___lwmod@divisor,c
 22039  002C04  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 22040  002C08  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 22041  002C0C  ECFA  F026         	call	i2___lwmod	;wreg free
 22042  002C10  C001  F043         	movff	?i2___lwmod,_printSortTimer$2557
 22043  002C14  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2557+1
 22044                           
 22045                           ;sort.c: 472: int sec = (timeDiff % 3600) % 60;
 22046  002C18  C043  F001         	movff	_printSortTimer$2557,i2___lwmod@dividend
 22047  002C1C  C044  F002         	movff	_printSortTimer$2557+1,i2___lwmod@dividend+1
 22048  002C20  0E00               	movlw	0
 22049  002C22  6E04               	movwf	i2___lwmod@divisor+1,c
 22050  002C24  0E3C               	movlw	60
 22051  002C26  6E03               	movwf	i2___lwmod@divisor,c
 22052  002C28  ECFA  F026         	call	i2___lwmod	;wreg free
 22053  002C2C  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 22054  002C30  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 22055                           
 22056                           ;sort.c: 474: lcdInst(0b10000000);;
 22057  002C34  0E80               	movlw	128
 22058  002C36  EC06  F02A         	call	i2_lcdInst
 22059                           
 22060                           ;sort.c: 475: printf("SORTING...");
 22061  002C3A  0E7B               	movlw	low STR_64
 22062  002C3C  6E0D               	movwf	i2printf@f,c
 22063  002C3E  0EFF               	movlw	high STR_64
 22064  002C40  6E0E               	movwf	i2printf@f+1,c
 22065  002C42  ECE6  F00E         	call	i2_printf	;wreg free
 22066                           
 22067                           ;sort.c: 476: lcdInst(0b11000000);;
 22068  002C46  0EC0               	movlw	192
 22069  002C48  EC06  F02A         	call	i2_lcdInst
 22070                           
 22071                           ;sort.c: 477: printf("TIME %d:%02d", min, sec);
 22072  002C4C  0E41               	movlw	low STR_65
 22073  002C4E  6E0D               	movwf	i2printf@f,c
 22074  002C50  0EFF               	movlw	high STR_65
 22075  002C52  6E0E               	movwf	i2printf@f+1,c
 22076  002C54  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 22077  002C58  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 22078  002C5C  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 22079  002C60  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 22080  002C64  ECE6  F00E         	call	i2_printf	;wreg free
 22081  002C68  0012               	return		;funcret
 22082  002C6A                     __end_of_printSortTimer:
 22083                           	opt stack 0
 22084                           pclatu	equ	0xFFB
 22085                           pclath	equ	0xFFA
 22086                           tblptru	equ	0xFF8
 22087                           tblptrh	equ	0xFF7
 22088                           tblptrl	equ	0xFF6
 22089                           tablat	equ	0xFF5
 22090                           prodh	equ	0xFF4
 22091                           prodl	equ	0xFF3
 22092                           intcon	equ	0xFF2
 22093                           intcon2	equ	0xFF1
 22094                           intcon3	equ	0xFF0
 22095                           indf0	equ	0xFEF
 22096                           postinc0	equ	0xFEE
 22097                           fsr0h	equ	0xFEA
 22098                           fsr0l	equ	0xFE9
 22099                           wreg	equ	0xFE8
 22100                           postdec1	equ	0xFE5
 22101                           fsr1h	equ	0xFE2
 22102                           fsr1l	equ	0xFE1
 22103                           indf2	equ	0xFDF
 22104                           postinc2	equ	0xFDE
 22105                           postdec2	equ	0xFDD
 22106                           fsr2h	equ	0xFDA
 22107                           fsr2l	equ	0xFD9
 22108                           status	equ	0xFD8
 22109                           
 22110 ;; *************** function i2_printf *****************
 22111 ;; Defined at:
 22112 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 22113 ;; Parameters:    Size  Location     Type
 22114 ;;  f               2   12[COMRAM] PTR const unsigned char 
 22115 ;;		 -> STR_127(17), STR_126(17), STR_125(18), STR_124(18), 
 22116 ;;		 -> STR_123(18), STR_122(18), STR_121(18), STR_120(18), 
 22117 ;;		 -> STR_119(17), STR_118(17), STR_117(3), STR_116(15), 
 22118 ;;		 -> STR_115(3), STR_114(15), STR_113(11), STR_112(18), 
 22119 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 22120 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 22121 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 22122 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 22123 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 22124 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 22125 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 22126 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 22127 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 22128 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 22129 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 22130 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 22131 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 22132 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 22133 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 22134 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 22135 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 22136 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 22137 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 22138 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 22139 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 22140 ;;		 -> STR_2(14), STR_1(18), 
 22141 ;; Auto vars:     Size  Location     Type
 22142 ;;  printf          4    0        struct .
 22143 ;;  printf          2   39[COMRAM] int 
 22144 ;;  printf          2   35[COMRAM] unsigned int 
 22145 ;;  printf          2   33[COMRAM] unsigned int 
 22146 ;;  printf          2   31[COMRAM] PTR void [1]
 22147 ;;		 -> ?i2_printf(2), ?_printf(2), 
 22148 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 22149 ;;		 -> STR_128(7), count_total(2), printRTC@month(4), UI@month(4), 
 22150 ;;  printf          1   38[COMRAM] char 
 22151 ;;  printf          1   37[COMRAM] unsigned char 
 22152 ;;  printf          1   28[COMRAM] char 
 22153 ;; Return value:  Size  Location     Type
 22154 ;;                  2   12[COMRAM] int 
 22155 ;; Registers used:
 22156 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22157 ;; Tracked objects:
 22158 ;;		On entry : 0/0
 22159 ;;		On exit  : 0/0
 22160 ;;		Unchanged: 0/0
 22161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22162 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22163 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22164 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22165 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22166 ;;Total ram usage:       29 bytes
 22167 ;; Hardware stack levels used:    1
 22168 ;; Hardware stack levels required when called:    2
 22169 ;; This function calls:
 22170 ;;		i2___lwdiv
 22171 ;;		i2___lwmod
 22172 ;;		i2___wmul
 22173 ;;		i2_isdigit
 22174 ;;		i2_putch
 22175 ;; This function is called by:
 22176 ;;		_change_state_to_menu_11
 22177 ;;		_change_state_to_menu_23
 22178 ;;		_change_state_to_logs_11
 22179 ;;		_change_state_to_logs_12
 22180 ;;		_change_state_to_logs_22
 22181 ;;		_change_state_to_logs_23
 22182 ;;		_change_state_to_logs_33
 22183 ;;		_change_state_to_logs_34
 22184 ;;		_printSortTimer
 22185 ;;		i2_change_state_to_menu_start
 22186 ;;		i2_change_state_to_menu_12
 22187 ;;		i2_change_state_to_menu_22
 22188 ;;		i2_printRTC
 22189 ;; This function uses a non-reentrant model
 22190 ;;
 22191                           
 22192                           	psect	text82
 22193  001DCC                     __ptext82:
 22194                           	opt stack 0
 22195  001DCC                     i2_printf:
 22196                           	opt stack 19
 22197                           
 22198                           ;doprnt.c: 466: va_list ap;
 22199                           ;doprnt.c: 499: signed char c;
 22200                           ;doprnt.c: 501: int width;
 22201                           ;doprnt.c: 506: signed char prec;
 22202                           ;doprnt.c: 508: unsigned char flag;
 22203                           ;doprnt.c: 523: union {
 22204                           ;doprnt.c: 524: unsigned long vd;
 22205                           ;doprnt.c: 525: double integ;
 22206                           ;doprnt.c: 526: } tmpval;
 22207                           ;doprnt.c: 528: unsigned int val;
 22208                           ;doprnt.c: 529: unsigned len;
 22209                           ;doprnt.c: 530: const char * cp;
 22210                           ;doprnt.c: 533: *ap = __va_start();
 22211                           
 22212                           ;incstack = 0
 22213  001DCC  0E0F               	movlw	low (?i2_printf+2)
 22214  001DCE  6E20               	movwf	i2printf@ap,c
 22215  001DD0  0E00               	movlw	high (?i2_printf+2)
 22216  001DD2  6E21               	movwf	i2printf@ap+1,c
 22217                           
 22218                           ;doprnt.c: 536: while(c = *f++) {
 22219  001DD4  D1A4               	goto	i2l6685
 22220  001DD6                     i2l6555:
 22221                           
 22222                           ;doprnt.c: 538: if(c != '%')
 22223  001DD6  0E25               	movlw	37
 22224  001DD8  1827               	xorwf	i2printf@c,w,c
 22225  001DDA  B4D8               	btfsc	status,2,c
 22226  001DDC  D004               	goto	i2l6559
 22227                           
 22228                           ;doprnt.c: 540: {
 22229                           ;doprnt.c: 541: (putch(c) );
 22230  001DDE  5027               	movf	i2printf@c,w,c
 22231  001DE0  EC00  F02A         	call	i2_putch
 22232                           
 22233                           ;doprnt.c: 542: continue;
 22234  001DE4  D19C               	goto	i2l6685
 22235  001DE6                     i2l6559:
 22236                           
 22237                           ;doprnt.c: 543: }
 22238                           ;doprnt.c: 546: width = 0;
 22239  001DE6  0E00               	movlw	0
 22240  001DE8  6E29               	movwf	i2printf@width+1,c
 22241  001DEA  0E00               	movlw	0
 22242  001DEC  6E28               	movwf	i2printf@width,c
 22243                           
 22244                           ;doprnt.c: 548: flag = 0;
 22245  001DEE  0E00               	movlw	0
 22246  001DF0  6E26               	movwf	i2printf@flag,c
 22247                           
 22248                           ;doprnt.c: 551: switch(*f) {
 22249                           
 22250                           ;doprnt.c: 550: for(;;) {
 22251  001DF2  D003               	goto	i2l6565
 22252  001DF4                     i2l6561:
 22253                           
 22254                           ;doprnt.c: 580: flag |= 0x04;
 22255  001DF4  8426               	bsf	i2printf@flag,2,c
 22256                           
 22257                           ;doprnt.c: 581: f++;
 22258  001DF6  4A0D               	infsnz	i2printf@f,f,c
 22259  001DF8  2A0E               	incf	i2printf@f+1,f,c
 22260  001DFA                     i2l6565:
 22261  001DFA  C00D  FFF6         	movff	i2printf@f,tblptrl
 22262  001DFE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22263  001E02                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22264  001E02  6AF8               	clrf	tblptru,c
 22265  001E04                     	endif
 22266  001E04                     	if	0	;tblptru may be non-zero
 22267  001E04                     	endif
 22268  001E04  0008               	tblrd		*
 22269  001E06  50F5               	movf	tablat,w,c
 22270                           
 22271                           ; Switch size 1, requested type "space"
 22272                           ; Number of cases is 1, Range of values is 48 to 48
 22273                           ; switch strategies available:
 22274                           ; Name         Instructions Cycles
 22275                           ; simple_byte            4     3 (average)
 22276                           ;	Chosen strategy is simple_byte
 22277  001E08  0A30               	xorlw	48	; case 48
 22278  001E0A  B4D8               	btfsc	status,2,c
 22279  001E0C  D7F3               	goto	i2l6561
 22280                           
 22281                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 22282                           
 22283                           ;doprnt.c: 586: }
 22284                           
 22285                           ;doprnt.c: 585: break;
 22286  001E0E  C00D  FFF6         	movff	i2printf@f,tblptrl
 22287  001E12  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22288  001E16                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22289  001E16  6AF8               	clrf	tblptru,c
 22290  001E18                     	endif
 22291  001E18                     	if	0	;tblptru may be non-zero
 22292  001E18                     	endif
 22293  001E18  0008               	tblrd		*
 22294  001E1A  50F5               	movf	tablat,w,c
 22295  001E1C  EC9C  F029         	call	i2_isdigit
 22296  001E20  A0D8               	btfss	status,0,c
 22297  001E22  D0A6               	goto	i2l6613
 22298                           
 22299                           ;doprnt.c: 598: width = 0;
 22300  001E24  0E00               	movlw	0
 22301  001E26  6E29               	movwf	i2printf@width+1,c
 22302  001E28  0E00               	movlw	0
 22303  001E2A  6E28               	movwf	i2printf@width,c
 22304  001E2C                     i2l6571:
 22305                           
 22306                           ;doprnt.c: 600: width *= 10;
 22307  001E2C  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 22308  001E30  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 22309  001E34  0E00               	movlw	0
 22310  001E36  6E04               	movwf	i2___wmul@multiplicand+1,c
 22311  001E38  0E0A               	movlw	10
 22312  001E3A  6E03               	movwf	i2___wmul@multiplicand,c
 22313  001E3C  EC42  F029         	call	i2___wmul	;wreg free
 22314  001E40  C001  F028         	movff	?i2___wmul,i2printf@width
 22315  001E44  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 22316                           
 22317                           ;doprnt.c: 601: width += *f++ - '0';
 22318  001E48  0ED0               	movlw	208
 22319  001E4A  6E19               	movwf	??i2_printf& (0+255),c
 22320  001E4C  0EFF               	movlw	255
 22321  001E4E  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 22322  001E50  C00D  FFF6         	movff	i2printf@f,tblptrl
 22323  001E54  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22324  001E58                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22325  001E58  6AF8               	clrf	tblptru,c
 22326  001E5A                     	endif
 22327  001E5A                     	if	0	;tblptru may be non-zero
 22328  001E5A                     	endif
 22329  001E5A  0008               	tblrd		*
 22330  001E5C  50F5               	movf	tablat,w,c
 22331  001E5E  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 22332  001E60  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 22333  001E62  5019               	movf	??i2_printf,w,c
 22334  001E64  261B               	addwf	??i2_printf+2,f,c
 22335  001E66  501A               	movf	??i2_printf+1,w,c
 22336  001E68  221C               	addwfc	??i2_printf+3,f,c
 22337  001E6A  501B               	movf	??i2_printf+2,w,c
 22338  001E6C  2628               	addwf	i2printf@width,f,c
 22339  001E6E  501C               	movf	??i2_printf+3,w,c
 22340  001E70  2229               	addwfc	i2printf@width+1,f,c
 22341  001E72  4A0D               	infsnz	i2printf@f,f,c
 22342  001E74  2A0E               	incf	i2printf@f+1,f,c
 22343                           
 22344                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 22345  001E76  C00D  FFF6         	movff	i2printf@f,tblptrl
 22346  001E7A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22347  001E7E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22348  001E7E  6AF8               	clrf	tblptru,c
 22349  001E80                     	endif
 22350  001E80                     	if	0	;tblptru may be non-zero
 22351  001E80                     	endif
 22352  001E80  0008               	tblrd		*
 22353  001E82  50F5               	movf	tablat,w,c
 22354  001E84  EC9C  F029         	call	i2_isdigit
 22355  001E88  A0D8               	btfss	status,0,c
 22356  001E8A  D072               	goto	i2l6613
 22357  001E8C  D7CF               	goto	i2l6571
 22358  001E8E                     i2l6579:
 22359                           
 22360                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 22361  001E8E  C020  FFD9         	movff	i2printf@ap,fsr2l
 22362  001E92  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22363  001E96  CFDE F01E          	movff	postinc2,i2printf@cp
 22364  001E9A  CFDD F01F          	movff	postdec2,i2printf@cp+1
 22365  001E9E  0E02               	movlw	2
 22366  001EA0  2620               	addwf	i2printf@ap,f,c
 22367  001EA2  0E00               	movlw	0
 22368  001EA4  2221               	addwfc	i2printf@ap+1,f,c
 22369                           
 22370                           ;doprnt.c: 740: if(!cp)
 22371  001EA6  501E               	movf	i2printf@cp,w,c
 22372  001EA8  101F               	iorwf	i2printf@cp+1,w,c
 22373  001EAA  A4D8               	btfss	status,2,c
 22374  001EAC  D004               	goto	i2l6587
 22375                           
 22376                           ;doprnt.c: 741: cp = "(null)";
 22377  001EAE  0EB5               	movlw	low STR_128
 22378  001EB0  6E1E               	movwf	i2printf@cp,c
 22379  001EB2  0EFF               	movlw	high STR_128
 22380  001EB4  6E1F               	movwf	i2printf@cp+1,c
 22381  001EB6                     i2l6587:
 22382                           
 22383                           ;doprnt.c: 745: len = 0;
 22384  001EB6  0E00               	movlw	0
 22385  001EB8  6E23               	movwf	i2printf@len+1,c
 22386  001EBA  0E00               	movlw	0
 22387  001EBC  6E22               	movwf	i2printf@len,c
 22388                           
 22389                           ;doprnt.c: 746: while(cp[len])
 22390  001EBE  D002               	goto	i2l6591
 22391  001EC0                     i2l6589:
 22392                           
 22393                           ;doprnt.c: 747: len++;
 22394  001EC0  4A22               	infsnz	i2printf@len,f,c
 22395  001EC2  2A23               	incf	i2printf@len+1,f,c
 22396  001EC4                     i2l6591:
 22397  001EC4  5022               	movf	i2printf@len,w,c
 22398  001EC6  241E               	addwf	i2printf@cp,w,c
 22399  001EC8  6E19               	movwf	??i2_printf& (0+255),c
 22400  001ECA  5023               	movf	i2printf@len+1,w,c
 22401  001ECC  201F               	addwfc	i2printf@cp+1,w,c
 22402  001ECE  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 22403  001ED0  C019  FFF6         	movff	??i2_printf,tblptrl
 22404  001ED4  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 22405  001ED8  0E00               	movlw	low (__mediumconst shr (0+16))
 22406  001EDA  6EF8               	movwf	tblptru,c
 22407  001EDC  0E0F               	movlw	(high __ramtop+-1)
 22408  001EDE  64F7               	cpfsgt	tblptrh,c
 22409  001EE0  D003               	bra	i2u509_47
 22410  001EE2  0008               	tblrd		*
 22411  001EE4  50F5               	movf	tablat,w,c
 22412  001EE6  D005               	bra	i2u509_40
 22413  001EE8                     i2u509_47:
 22414  001EE8  CFF6 FFE9          	movff	tblptrl,fsr0l
 22415  001EEC  CFF7 FFEA          	movff	tblptrh,fsr0h
 22416  001EF0  50EF               	movf	indf0,w,c
 22417  001EF2                     i2u509_40:
 22418  001EF2  0900               	iorlw	0
 22419  001EF4  A4D8               	btfss	status,2,c
 22420  001EF6  D7E4               	goto	i2l6589
 22421                           
 22422                           ;doprnt.c: 757: if(width > len)
 22423  001EF8  5028               	movf	i2printf@width,w,c
 22424  001EFA  5C22               	subwf	i2printf@len,w,c
 22425  001EFC  5029               	movf	i2printf@width+1,w,c
 22426  001EFE  5823               	subwfb	i2printf@len+1,w,c
 22427  001F00  B0D8               	btfsc	status,0,c
 22428  001F02  D005               	goto	i2l6597
 22429                           
 22430                           ;doprnt.c: 758: width -= len;
 22431  001F04  5022               	movf	i2printf@len,w,c
 22432  001F06  5E28               	subwf	i2printf@width,f,c
 22433  001F08  5023               	movf	i2printf@len+1,w,c
 22434  001F0A  5A29               	subwfb	i2printf@width+1,f,c
 22435  001F0C  D008               	goto	i2l6601
 22436  001F0E                     i2l6597:
 22437                           
 22438                           ;doprnt.c: 759: else
 22439                           ;doprnt.c: 760: width = 0;
 22440  001F0E  0E00               	movlw	0
 22441  001F10  6E29               	movwf	i2printf@width+1,c
 22442  001F12  0E00               	movlw	0
 22443  001F14  6E28               	movwf	i2printf@width,c
 22444                           
 22445                           ;doprnt.c: 764: while(width--)
 22446  001F16  D003               	goto	i2l6601
 22447  001F18                     i2l6599:
 22448                           
 22449                           ;doprnt.c: 765: (putch(' ') );
 22450  001F18  0E20               	movlw	32
 22451  001F1A  EC00  F02A         	call	i2_putch
 22452  001F1E                     i2l6601:
 22453  001F1E  0628               	decf	i2printf@width,f,c
 22454  001F20  A0D8               	btfss	status,0,c
 22455  001F22  0629               	decf	i2printf@width+1,f,c
 22456  001F24  2828               	incf	i2printf@width,w,c
 22457  001F26  E1F8               	bnz	i2l6599
 22458  001F28  2829               	incf	i2printf@width+1,w,c
 22459  001F2A  B4D8               	btfsc	status,2,c
 22460  001F2C  D016               	goto	i2l6607
 22461  001F2E  D7F4               	goto	i2l6599
 22462  001F30                     i2l6603:
 22463                           
 22464                           ;doprnt.c: 768: (putch(*cp++) );
 22465  001F30  C01E  FFF6         	movff	i2printf@cp,tblptrl
 22466  001F34  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 22467  001F38  0E00               	movlw	low (__mediumconst shr (0+16))
 22468  001F3A  6EF8               	movwf	tblptru,c
 22469  001F3C  0E0F               	movlw	(high __ramtop+-1)
 22470  001F3E  64F7               	cpfsgt	tblptrh,c
 22471  001F40  D003               	bra	i2u513_47
 22472  001F42  0008               	tblrd		*
 22473  001F44  50F5               	movf	tablat,w,c
 22474  001F46  D005               	bra	i2u513_40
 22475  001F48                     i2u513_47:
 22476  001F48  CFF6 FFE9          	movff	tblptrl,fsr0l
 22477  001F4C  CFF7 FFEA          	movff	tblptrh,fsr0h
 22478  001F50  50EF               	movf	indf0,w,c
 22479  001F52                     i2u513_40:
 22480  001F52  EC00  F02A         	call	i2_putch
 22481  001F56  4A1E               	infsnz	i2printf@cp,f,c
 22482  001F58  2A1F               	incf	i2printf@cp+1,f,c
 22483  001F5A                     i2l6607:
 22484  001F5A  0622               	decf	i2printf@len,f,c
 22485  001F5C  A0D8               	btfss	status,0,c
 22486  001F5E  0623               	decf	i2printf@len+1,f,c
 22487  001F60  2822               	incf	i2printf@len,w,c
 22488  001F62  E1E6               	bnz	i2l6603
 22489  001F64  2823               	incf	i2printf@len+1,w,c
 22490  001F66  B4D8               	btfsc	status,2,c
 22491  001F68  D0DA               	goto	i2l6685
 22492  001F6A  D7E2               	goto	i2l6603
 22493  001F6C                     i2l6609:
 22494                           
 22495                           ;doprnt.c: 818: flag |= 0x40;
 22496  001F6C  8C26               	bsf	i2printf@flag,6,c
 22497                           
 22498                           ;doprnt.c: 822: }
 22499                           
 22500                           ;doprnt.c: 819: break;
 22501  001F6E  D01B               	goto	i2l1437
 22502  001F70                     i2l6613:
 22503  001F70  C00D  FFF6         	movff	i2printf@f,tblptrl
 22504  001F74  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22505  001F78  4A0D               	infsnz	i2printf@f,f,c
 22506  001F7A  2A0E               	incf	i2printf@f+1,f,c
 22507  001F7C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22508  001F7C  6AF8               	clrf	tblptru,c
 22509  001F7E                     	endif
 22510  001F7E                     	if	0	;tblptru may be non-zero
 22511  001F7E                     	endif
 22512  001F7E  0008               	tblrd		*
 22513  001F80  CFF5 F027          	movff	tablat,i2printf@c
 22514  001F84  5027               	movf	i2printf@c,w,c
 22515                           
 22516                           ; Switch size 1, requested type "space"
 22517                           ; Number of cases is 5, Range of values is 0 to 117
 22518                           ; switch strategies available:
 22519                           ; Name         Instructions Cycles
 22520                           ; simple_byte           16     9 (average)
 22521                           ;	Chosen strategy is simple_byte
 22522  001F86  0A00               	xorlw	0	; case 0
 22523  001F88  B4D8               	btfsc	status,2,c
 22524  001F8A  0012               	return	
 22525  001F8C  0A64               	xorlw	100	; case 100
 22526  001F8E  B4D8               	btfsc	status,2,c
 22527  001F90  D00A               	goto	i2l1437
 22528  001F92  0A0D               	xorlw	13	; case 105
 22529  001F94  B4D8               	btfsc	status,2,c
 22530  001F96  D007               	goto	i2l1437
 22531  001F98  0A1A               	xorlw	26	; case 115
 22532  001F9A  B4D8               	btfsc	status,2,c
 22533  001F9C  D778               	goto	i2l6579
 22534  001F9E  0A06               	xorlw	6	; case 117
 22535  001FA0  B4D8               	btfsc	status,2,c
 22536  001FA2  D7E4               	goto	i2l6609
 22537  001FA4  D0BC               	goto	i2l6685
 22538  001FA6                     i2l1437:
 22539                           
 22540                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 22541  001FA6  BC26               	btfsc	i2printf@flag,6,c
 22542  001FA8  D015               	goto	i2l6625
 22543                           
 22544                           ;doprnt.c: 1253: {
 22545                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 22546  001FAA  C020  FFD9         	movff	i2printf@ap,fsr2l
 22547  001FAE  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22548  001FB2  CFDE F024          	movff	postinc2,i2printf@val
 22549  001FB6  CFDD F025          	movff	postdec2,i2printf@val+1
 22550  001FBA  0E02               	movlw	2
 22551  001FBC  2620               	addwf	i2printf@ap,f,c
 22552  001FBE  0E00               	movlw	0
 22553  001FC0  2221               	addwfc	i2printf@ap+1,f,c
 22554                           
 22555                           ;doprnt.c: 1261: if((int)val < 0) {
 22556  001FC2  AE25               	btfss	i2printf@val+1,7,c
 22557  001FC4  D013               	goto	i2l6629
 22558                           
 22559                           ;doprnt.c: 1262: flag |= 0x03;
 22560  001FC6  0E03               	movlw	3
 22561  001FC8  1226               	iorwf	i2printf@flag,f,c
 22562                           
 22563                           ;doprnt.c: 1263: val = -val;
 22564  001FCA  6C24               	negf	i2printf@val,c
 22565  001FCC  1E25               	comf	i2printf@val+1,f,c
 22566  001FCE  B0D8               	btfsc	status,0,c
 22567  001FD0  2A25               	incf	i2printf@val+1,f,c
 22568                           
 22569                           ;doprnt.c: 1264: }
 22570                           ;doprnt.c: 1266: }
 22571  001FD2  D00C               	goto	i2l6629
 22572  001FD4                     i2l6625:
 22573                           
 22574                           ;doprnt.c: 1268: else
 22575                           ;doprnt.c: 1273: {
 22576                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 22577  001FD4  C020  FFD9         	movff	i2printf@ap,fsr2l
 22578  001FD8  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22579  001FDC  CFDE F024          	movff	postinc2,i2printf@val
 22580  001FE0  CFDD F025          	movff	postdec2,i2printf@val+1
 22581  001FE4  0E02               	movlw	2
 22582  001FE6  2620               	addwf	i2printf@ap,f,c
 22583  001FE8  0E00               	movlw	0
 22584  001FEA  2221               	addwfc	i2printf@ap+1,f,c
 22585  001FEC                     i2l6629:
 22586                           
 22587                           ;doprnt.c: 1287: }
 22588                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22589  001FEC  0E01               	movlw	1
 22590  001FEE  6E27               	movwf	i2printf@c,c
 22591  001FF0                     i2l6631:
 22592  001FF0  0E05               	movlw	5
 22593  001FF2  1827               	xorwf	i2printf@c,w,c
 22594  001FF4  B4D8               	btfsc	status,2,c
 22595  001FF6  D015               	goto	i2l6643
 22596                           
 22597                           ;doprnt.c: 1306: if(val < dpowers[c])
 22598  001FF8  5027               	movf	i2printf@c,w,c
 22599  001FFA  0D02               	mullw	2
 22600  001FFC  0EEE               	movlw	low _dpowers
 22601  001FFE  24F3               	addwf	prodl,w,c
 22602  002000  6EF6               	movwf	tblptrl,c
 22603  002002  0EFA               	movlw	high _dpowers
 22604  002004  20F4               	addwfc	prodh,w,c
 22605  002006  6EF7               	movwf	tblptrh,c
 22606  002008                     	if	1	;There are 3 active tblptr bytes
 22607  002008  6AF8               	clrf	tblptru,c
 22608  00200A  0E00               	movlw	low (__mediumconst shr (0+16))
 22609  00200C  22F8               	addwfc	tblptru,f,c
 22610  00200E                     	endif
 22611  00200E  0009               	tblrd		*+
 22612  002010  50F5               	movf	tablat,w,c
 22613  002012  5C24               	subwf	i2printf@val,w,c
 22614  002014  0009               	tblrd		*+
 22615  002016  50F5               	movf	tablat,w,c
 22616  002018  5825               	subwfb	i2printf@val+1,w,c
 22617  00201A  A0D8               	btfss	status,0,c
 22618  00201C  D002               	goto	i2l6643
 22619                           
 22620                           ;doprnt.c: 1307: break;
 22621  00201E  2A27               	incf	i2printf@c,f,c
 22622  002020  D7E7               	goto	i2l6631
 22623  002022                     i2l6643:
 22624                           
 22625                           ;doprnt.c: 1345: if(width && flag & 0x03)
 22626  002022  5028               	movf	i2printf@width,w,c
 22627  002024  1029               	iorwf	i2printf@width+1,w,c
 22628  002026  B4D8               	btfsc	status,2,c
 22629  002028  D009               	goto	i2l6649
 22630  00202A  C026  F019         	movff	i2printf@flag,??i2_printf
 22631  00202E  0E03               	movlw	3
 22632  002030  1619               	andwf	??i2_printf,f,c
 22633  002032  B4D8               	btfsc	status,2,c
 22634  002034  D003               	goto	i2l6649
 22635                           
 22636                           ;doprnt.c: 1346: width--;
 22637  002036  0628               	decf	i2printf@width,f,c
 22638  002038  A0D8               	btfss	status,0,c
 22639  00203A  0629               	decf	i2printf@width+1,f,c
 22640  00203C                     i2l6649:
 22641                           
 22642                           ;doprnt.c: 1381: if(width > c)
 22643  00203C  0E80               	movlw	128
 22644  00203E  BE27               	btfsc	i2printf@c,7,c
 22645  002040  0E7F               	movlw	127
 22646  002042  6E19               	movwf	??i2_printf& (0+255),c
 22647  002044  5028               	movf	i2printf@width,w,c
 22648  002046  5C27               	subwf	i2printf@c,w,c
 22649  002048  5029               	movf	i2printf@width+1,w,c
 22650  00204A  0A80               	xorlw	128
 22651  00204C  5819               	subwfb	??i2_printf& (0+255),w,c
 22652  00204E  B0D8               	btfsc	status,0,c
 22653  002050  D007               	goto	i2l6653
 22654                           
 22655                           ;doprnt.c: 1382: width -= c;
 22656  002052  5027               	movf	i2printf@c,w,c
 22657  002054  5E28               	subwf	i2printf@width,f,c
 22658  002056  0E00               	movlw	0
 22659  002058  BE27               	btfsc	i2printf@c,7,c
 22660  00205A  0EFF               	movlw	255
 22661  00205C  5A29               	subwfb	i2printf@width+1,f,c
 22662  00205E  D004               	goto	i2l6655
 22663  002060                     i2l6653:
 22664                           
 22665                           ;doprnt.c: 1383: else
 22666                           ;doprnt.c: 1384: width = 0;
 22667  002060  0E00               	movlw	0
 22668  002062  6E29               	movwf	i2printf@width+1,c
 22669  002064  0E00               	movlw	0
 22670  002066  6E28               	movwf	i2printf@width,c
 22671  002068                     i2l6655:
 22672                           
 22673                           ;doprnt.c: 1387: if(flag & 0x04) {
 22674  002068  A426               	btfss	i2printf@flag,2,c
 22675  00206A  D014               	goto	i2l6667
 22676                           
 22677                           ;doprnt.c: 1392: if(flag & 0x03)
 22678  00206C  C026  F019         	movff	i2printf@flag,??i2_printf
 22679  002070  0E03               	movlw	3
 22680  002072  1619               	andwf	??i2_printf,f,c
 22681  002074  B4D8               	btfsc	status,2,c
 22682  002076  D003               	goto	i2l6661
 22683                           
 22684                           ;doprnt.c: 1393: (putch('-') );
 22685  002078  0E2D               	movlw	45
 22686  00207A  EC00  F02A         	call	i2_putch
 22687  00207E                     i2l6661:
 22688                           
 22689                           ;doprnt.c: 1415: if(width)
 22690  00207E  5028               	movf	i2printf@width,w,c
 22691  002080  1029               	iorwf	i2printf@width+1,w,c
 22692  002082  B4D8               	btfsc	status,2,c
 22693  002084  D01E               	goto	i2l6677
 22694                           
 22695                           ;doprnt.c: 1417: (putch('0') );
 22696                           
 22697                           ;doprnt.c: 1416: do
 22698  002086  0E30               	movlw	48
 22699  002088  EC00  F02A         	call	i2_putch
 22700                           
 22701                           ;doprnt.c: 1418: while(--width);
 22702  00208C  0628               	decf	i2printf@width,f,c
 22703  00208E  A0D8               	btfss	status,0,c
 22704  002090  0629               	decf	i2printf@width+1,f,c
 22705  002092  D7F5               	goto	i2l6661
 22706  002094                     i2l6667:
 22707                           
 22708                           ;doprnt.c: 1422: {
 22709                           ;doprnt.c: 1424: if(width
 22710                           ;doprnt.c: 1428: )
 22711  002094  5028               	movf	i2printf@width,w,c
 22712  002096  1029               	iorwf	i2printf@width+1,w,c
 22713  002098  B4D8               	btfsc	status,2,c
 22714  00209A  D00A               	goto	i2l6673
 22715  00209C                     i2l6669:
 22716                           
 22717                           ;doprnt.c: 1430: (putch(' ') );
 22718  00209C  0E20               	movlw	32
 22719  00209E  EC00  F02A         	call	i2_putch
 22720                           
 22721                           ;doprnt.c: 1431: while(--width);
 22722  0020A2  0628               	decf	i2printf@width,f,c
 22723  0020A4  A0D8               	btfss	status,0,c
 22724  0020A6  0629               	decf	i2printf@width+1,f,c
 22725  0020A8  5028               	movf	i2printf@width,w,c
 22726  0020AA  1029               	iorwf	i2printf@width+1,w,c
 22727  0020AC  A4D8               	btfss	status,2,c
 22728  0020AE  D7F6               	goto	i2l6669
 22729  0020B0                     i2l6673:
 22730                           
 22731                           ;doprnt.c: 1438: if(flag & 0x03)
 22732  0020B0  C026  F019         	movff	i2printf@flag,??i2_printf
 22733  0020B4  0E03               	movlw	3
 22734  0020B6  1619               	andwf	??i2_printf,f,c
 22735  0020B8  B4D8               	btfsc	status,2,c
 22736  0020BA  D003               	goto	i2l6677
 22737                           
 22738                           ;doprnt.c: 1439: (putch('-') );
 22739  0020BC  0E2D               	movlw	45
 22740  0020BE  EC00  F02A         	call	i2_putch
 22741  0020C2                     i2l6677:
 22742                           
 22743                           ;doprnt.c: 1469: }
 22744                           ;doprnt.c: 1472: prec = c;
 22745  0020C2  C027  F01D         	movff	i2printf@c,i2printf@prec
 22746                           
 22747                           ;doprnt.c: 1474: while(prec--) {
 22748  0020C6  D027               	goto	i2l6683
 22749  0020C8                     i2l6679:
 22750                           
 22751                           ;doprnt.c: 1478: {
 22752                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 22753  0020C8  501D               	movf	i2printf@prec,w,c
 22754  0020CA  0D02               	mullw	2
 22755  0020CC  0EEE               	movlw	low _dpowers
 22756  0020CE  24F3               	addwf	prodl,w,c
 22757  0020D0  6EF6               	movwf	tblptrl,c
 22758  0020D2  0EFA               	movlw	high _dpowers
 22759  0020D4  20F4               	addwfc	prodh,w,c
 22760  0020D6  6EF7               	movwf	tblptrh,c
 22761  0020D8                     	if	1	;There are 3 active tblptr bytes
 22762  0020D8  6AF8               	clrf	tblptru,c
 22763  0020DA  0E00               	movlw	low (__mediumconst shr (0+16))
 22764  0020DC  22F8               	addwfc	tblptru,f,c
 22765  0020DE                     	endif
 22766  0020DE  0009               	tblrd		*+
 22767  0020E0  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 22768  0020E4  000A               	tblrd		*-
 22769  0020E6  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 22770  0020EA  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 22771  0020EE  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 22772  0020F2  EC3B  F026         	call	i2___lwdiv	;wreg free
 22773  0020F6  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 22774  0020FA  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 22775  0020FE  0E00               	movlw	0
 22776  002100  6E04               	movwf	i2___lwmod@divisor+1,c
 22777  002102  0E0A               	movlw	10
 22778  002104  6E03               	movwf	i2___lwmod@divisor,c
 22779  002106  ECFA  F026         	call	i2___lwmod	;wreg free
 22780  00210A  5001               	movf	?i2___lwmod,w,c
 22781  00210C  0F30               	addlw	48
 22782  00210E  6E27               	movwf	i2printf@c,c
 22783                           
 22784                           ;doprnt.c: 1523: }
 22785                           ;doprnt.c: 1524: (putch(c) );
 22786  002110  5027               	movf	i2printf@c,w,c
 22787  002112  EC00  F02A         	call	i2_putch
 22788  002116                     i2l6683:
 22789  002116  061D               	decf	i2printf@prec,f,c
 22790  002118  281D               	incf	i2printf@prec,w,c
 22791  00211A  A4D8               	btfss	status,2,c
 22792  00211C  D7D5               	goto	i2l6679
 22793  00211E                     i2l6685:
 22794  00211E  C00D  FFF6         	movff	i2printf@f,tblptrl
 22795  002122  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22796  002126  4A0D               	infsnz	i2printf@f,f,c
 22797  002128  2A0E               	incf	i2printf@f+1,f,c
 22798  00212A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22799  00212A  6AF8               	clrf	tblptru,c
 22800  00212C                     	endif
 22801  00212C                     	if	0	;tblptru may be non-zero
 22802  00212C                     	endif
 22803  00212C  0008               	tblrd		*
 22804  00212E  CFF5 F027          	movff	tablat,i2printf@c
 22805  002132  5027               	movf	i2printf@c,w,c
 22806  002134  B4D8               	btfsc	status,2,c
 22807  002136  0012               	return	
 22808  002138  D64E               	goto	i2l6555
 22809  00213A                     __end_ofi2_printf:
 22810                           	opt stack 0
 22811                           pclatu	equ	0xFFB
 22812                           pclath	equ	0xFFA
 22813                           tblptru	equ	0xFF8
 22814                           tblptrh	equ	0xFF7
 22815                           tblptrl	equ	0xFF6
 22816                           tablat	equ	0xFF5
 22817                           prodh	equ	0xFF4
 22818                           prodl	equ	0xFF3
 22819                           intcon	equ	0xFF2
 22820                           intcon2	equ	0xFF1
 22821                           intcon3	equ	0xFF0
 22822                           indf0	equ	0xFEF
 22823                           postinc0	equ	0xFEE
 22824                           fsr0h	equ	0xFEA
 22825                           fsr0l	equ	0xFE9
 22826                           wreg	equ	0xFE8
 22827                           postdec1	equ	0xFE5
 22828                           fsr1h	equ	0xFE2
 22829                           fsr1l	equ	0xFE1
 22830                           indf2	equ	0xFDF
 22831                           postinc2	equ	0xFDE
 22832                           postdec2	equ	0xFDD
 22833                           fsr2h	equ	0xFDA
 22834                           fsr2l	equ	0xFD9
 22835                           status	equ	0xFD8
 22836                           
 22837 ;; *************** function i2_putch *****************
 22838 ;; Defined at:
 22839 ;;		line 20 in file "lcd.c"
 22840 ;; Parameters:    Size  Location     Type
 22841 ;;  data            1    wreg     unsigned char 
 22842 ;; Auto vars:     Size  Location     Type
 22843 ;;  data            1    2[COMRAM] unsigned char 
 22844 ;; Return value:  Size  Location     Type
 22845 ;;                  1    wreg      void 
 22846 ;; Registers used:
 22847 ;;		wreg, status,2, status,0, cstack
 22848 ;; Tracked objects:
 22849 ;;		On entry : 0/0
 22850 ;;		On exit  : 0/0
 22851 ;;		Unchanged: 0/0
 22852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22854 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22856 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22857 ;;Total ram usage:        1 bytes
 22858 ;; Hardware stack levels used:    1
 22859 ;; Hardware stack levels required when called:    1
 22860 ;; This function calls:
 22861 ;;		i2_lcdNibble
 22862 ;; This function is called by:
 22863 ;;		i2_printf
 22864 ;; This function uses a non-reentrant model
 22865 ;;
 22866                           
 22867                           	psect	text83
 22868  005400                     __ptext83:
 22869                           	opt stack 0
 22870  005400                     i2_putch:
 22871                           	opt stack 19
 22872                           
 22873                           ;incstack = 0
 22874                           ;i2putch@data stored from wreg
 22875  005400  6E03               	movwf	i2putch@data,c
 22876                           
 22877                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 22878  005402  848C               	bsf	3980,2,c	;volatile
 22879                           
 22880                           ;lcd.c: 22: lcdNibble(data);
 22881  005404  5003               	movf	i2putch@data,w,c
 22882  005406  EC10  F026         	call	i2_lcdNibble
 22883  00540A  0012               	return		;funcret
 22884  00540C                     __end_ofi2_putch:
 22885                           	opt stack 0
 22886                           pclatu	equ	0xFFB
 22887                           pclath	equ	0xFFA
 22888                           tblptru	equ	0xFF8
 22889                           tblptrh	equ	0xFF7
 22890                           tblptrl	equ	0xFF6
 22891                           tablat	equ	0xFF5
 22892                           prodh	equ	0xFF4
 22893                           prodl	equ	0xFF3
 22894                           intcon	equ	0xFF2
 22895                           intcon2	equ	0xFF1
 22896                           intcon3	equ	0xFF0
 22897                           indf0	equ	0xFEF
 22898                           postinc0	equ	0xFEE
 22899                           fsr0h	equ	0xFEA
 22900                           fsr0l	equ	0xFE9
 22901                           wreg	equ	0xFE8
 22902                           postdec1	equ	0xFE5
 22903                           fsr1h	equ	0xFE2
 22904                           fsr1l	equ	0xFE1
 22905                           indf2	equ	0xFDF
 22906                           postinc2	equ	0xFDE
 22907                           postdec2	equ	0xFDD
 22908                           fsr2h	equ	0xFDA
 22909                           fsr2l	equ	0xFD9
 22910                           status	equ	0xFD8
 22911                           
 22912 ;; *************** function i2_isdigit *****************
 22913 ;; Defined at:
 22914 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 22915 ;; Parameters:    Size  Location     Type
 22916 ;;  c               1    wreg     unsigned char 
 22917 ;; Auto vars:     Size  Location     Type
 22918 ;;  c               1    2[COMRAM] unsigned char 
 22919 ;; Return value:  Size  Location     Type
 22920 ;;		None               void
 22921 ;; Registers used:
 22922 ;;		wreg, status,2, status,0
 22923 ;; Tracked objects:
 22924 ;;		On entry : 0/0
 22925 ;;		On exit  : 0/0
 22926 ;;		Unchanged: 0/0
 22927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22929 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22930 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22931 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22932 ;;Total ram usage:        3 bytes
 22933 ;; Hardware stack levels used:    1
 22934 ;; This function calls:
 22935 ;;		Nothing
 22936 ;; This function is called by:
 22937 ;;		i2_printf
 22938 ;; This function uses a non-reentrant model
 22939 ;;
 22940                           
 22941                           	psect	text84
 22942  005338                     __ptext84:
 22943                           	opt stack 0
 22944  005338                     i2_isdigit:
 22945                           	opt stack 20
 22946                           
 22947                           ;incstack = 0
 22948                           ;i2isdigit@c stored from wreg
 22949  005338  6E03               	movwf	i2isdigit@c,c
 22950  00533A  0E00               	movlw	0
 22951  00533C  6E02               	movwf	i2_isdigit$2067,c
 22952  00533E  0E3A               	movlw	58
 22953  005340  6003               	cpfslt	i2isdigit@c,c
 22954  005342  D005               	goto	i2l6255
 22955  005344  0E2F               	movlw	47
 22956  005346  6403               	cpfsgt	i2isdigit@c,c
 22957  005348  D002               	goto	i2l6255
 22958  00534A  0E01               	movlw	1
 22959  00534C  6E02               	movwf	i2_isdigit$2067,c
 22960  00534E                     i2l6255:
 22961  00534E  C002  F001         	movff	i2_isdigit$2067,??i2_isdigit
 22962  005352  3001               	rrcf	??i2_isdigit,w,c
 22963  005354  0012               	return	
 22964  005356                     __end_ofi2_isdigit:
 22965                           	opt stack 0
 22966                           pclatu	equ	0xFFB
 22967                           pclath	equ	0xFFA
 22968                           tblptru	equ	0xFF8
 22969                           tblptrh	equ	0xFF7
 22970                           tblptrl	equ	0xFF6
 22971                           tablat	equ	0xFF5
 22972                           prodh	equ	0xFF4
 22973                           prodl	equ	0xFF3
 22974                           intcon	equ	0xFF2
 22975                           intcon2	equ	0xFF1
 22976                           intcon3	equ	0xFF0
 22977                           indf0	equ	0xFEF
 22978                           postinc0	equ	0xFEE
 22979                           fsr0h	equ	0xFEA
 22980                           fsr0l	equ	0xFE9
 22981                           wreg	equ	0xFE8
 22982                           postdec1	equ	0xFE5
 22983                           fsr1h	equ	0xFE2
 22984                           fsr1l	equ	0xFE1
 22985                           indf2	equ	0xFDF
 22986                           postinc2	equ	0xFDE
 22987                           postdec2	equ	0xFDD
 22988                           fsr2h	equ	0xFDA
 22989                           fsr2l	equ	0xFD9
 22990                           status	equ	0xFD8
 22991                           
 22992 ;; *************** function i2___wmul *****************
 22993 ;; Defined at:
 22994 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 22995 ;; Parameters:    Size  Location     Type
 22996 ;;  multiplier      2    0[COMRAM] unsigned int 
 22997 ;;  multiplicand    2    2[COMRAM] unsigned int 
 22998 ;; Auto vars:     Size  Location     Type
 22999 ;;  __wmul          2    4[COMRAM] unsigned int 
 23000 ;; Return value:  Size  Location     Type
 23001 ;;                  2    0[COMRAM] unsigned int 
 23002 ;; Registers used:
 23003 ;;		wreg, status,2, status,0, prodl, prodh
 23004 ;; Tracked objects:
 23005 ;;		On entry : 0/0
 23006 ;;		On exit  : 0/0
 23007 ;;		Unchanged: 0/0
 23008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23009 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23010 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23012 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23013 ;;Total ram usage:        6 bytes
 23014 ;; Hardware stack levels used:    1
 23015 ;; This function calls:
 23016 ;;		Nothing
 23017 ;; This function is called by:
 23018 ;;		_printSortTimer
 23019 ;;		_retrieveLog
 23020 ;;		i2_printf
 23021 ;; This function uses a non-reentrant model
 23022 ;;
 23023                           
 23024                           	psect	text85
 23025  005284                     __ptext85:
 23026                           	opt stack 0
 23027  005284                     i2___wmul:
 23028                           	opt stack 20
 23029                           
 23030                           ;incstack = 0
 23031  005284  5001               	movf	i2___wmul@multiplier,w,c
 23032  005286  0203               	mulwf	i2___wmul@multiplicand,c
 23033  005288  CFF3 F005          	movff	prodl,i2___wmul@product
 23034  00528C  CFF4 F006          	movff	prodh,i2___wmul@product+1
 23035  005290  5001               	movf	i2___wmul@multiplier,w,c
 23036  005292  0204               	mulwf	i2___wmul@multiplicand+1,c
 23037  005294  50F3               	movf	prodl,w,c
 23038  005296  2606               	addwf	i2___wmul@product+1,f,c
 23039  005298  5002               	movf	i2___wmul@multiplier+1,w,c
 23040  00529A  0203               	mulwf	i2___wmul@multiplicand,c
 23041  00529C  50F3               	movf	prodl,w,c
 23042  00529E  2606               	addwf	i2___wmul@product+1,f,c
 23043  0052A0  C005  F001         	movff	i2___wmul@product,?i2___wmul
 23044  0052A4  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 23045  0052A8  0012               	return	
 23046  0052AA                     __end_ofi2___wmul:
 23047                           	opt stack 0
 23048                           pclatu	equ	0xFFB
 23049                           pclath	equ	0xFFA
 23050                           tblptru	equ	0xFF8
 23051                           tblptrh	equ	0xFF7
 23052                           tblptrl	equ	0xFF6
 23053                           tablat	equ	0xFF5
 23054                           prodh	equ	0xFF4
 23055                           prodl	equ	0xFF3
 23056                           intcon	equ	0xFF2
 23057                           intcon2	equ	0xFF1
 23058                           intcon3	equ	0xFF0
 23059                           indf0	equ	0xFEF
 23060                           postinc0	equ	0xFEE
 23061                           fsr0h	equ	0xFEA
 23062                           fsr0l	equ	0xFE9
 23063                           wreg	equ	0xFE8
 23064                           postdec1	equ	0xFE5
 23065                           fsr1h	equ	0xFE2
 23066                           fsr1l	equ	0xFE1
 23067                           indf2	equ	0xFDF
 23068                           postinc2	equ	0xFDE
 23069                           postdec2	equ	0xFDD
 23070                           fsr2h	equ	0xFDA
 23071                           fsr2l	equ	0xFD9
 23072                           status	equ	0xFD8
 23073                           
 23074 ;; *************** function i2___lwmod *****************
 23075 ;; Defined at:
 23076 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 23077 ;; Parameters:    Size  Location     Type
 23078 ;;  dividend        2    0[COMRAM] unsigned int 
 23079 ;;  divisor         2    2[COMRAM] unsigned int 
 23080 ;; Auto vars:     Size  Location     Type
 23081 ;;  __lwmod         1    4[COMRAM] unsigned char 
 23082 ;; Return value:  Size  Location     Type
 23083 ;;                  2    0[COMRAM] unsigned int 
 23084 ;; Registers used:
 23085 ;;		wreg, status,2, status,0
 23086 ;; Tracked objects:
 23087 ;;		On entry : 0/0
 23088 ;;		On exit  : 0/0
 23089 ;;		Unchanged: 0/0
 23090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23091 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23092 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23094 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23095 ;;Total ram usage:        5 bytes
 23096 ;; Hardware stack levels used:    1
 23097 ;; This function calls:
 23098 ;;		Nothing
 23099 ;; This function is called by:
 23100 ;;		_printSortTimer
 23101 ;;		i2_printf
 23102 ;; This function uses a non-reentrant model
 23103 ;;
 23104                           
 23105                           	psect	text86
 23106  004DF4                     __ptext86:
 23107                           	opt stack 0
 23108  004DF4                     i2___lwmod:
 23109                           	opt stack 20
 23110                           
 23111                           ;incstack = 0
 23112  004DF4  5003               	movf	i2___lwmod@divisor,w,c
 23113  004DF6  1004               	iorwf	i2___lwmod@divisor+1,w,c
 23114  004DF8  B4D8               	btfsc	status,2,c
 23115  004DFA  D018               	goto	i2l1894
 23116  004DFC  0E01               	movlw	1
 23117  004DFE  6E05               	movwf	i2___lwmod@counter,c
 23118  004E00  D004               	goto	i2l6287
 23119  004E02                     i2l6285:
 23120  004E02  90D8               	bcf	status,0,c
 23121  004E04  3603               	rlcf	i2___lwmod@divisor,f,c
 23122  004E06  3604               	rlcf	i2___lwmod@divisor+1,f,c
 23123  004E08  2A05               	incf	i2___lwmod@counter,f,c
 23124  004E0A                     i2l6287:
 23125  004E0A  AE04               	btfss	i2___lwmod@divisor+1,7,c
 23126  004E0C  D7FA               	goto	i2l6285
 23127  004E0E                     i2l6289:
 23128  004E0E  5003               	movf	i2___lwmod@divisor,w,c
 23129  004E10  5C01               	subwf	i2___lwmod@dividend,w,c
 23130  004E12  5004               	movf	i2___lwmod@divisor+1,w,c
 23131  004E14  5802               	subwfb	i2___lwmod@dividend+1,w,c
 23132  004E16  A0D8               	btfss	status,0,c
 23133  004E18  D004               	goto	i2l6293
 23134  004E1A  5003               	movf	i2___lwmod@divisor,w,c
 23135  004E1C  5E01               	subwf	i2___lwmod@dividend,f,c
 23136  004E1E  5004               	movf	i2___lwmod@divisor+1,w,c
 23137  004E20  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 23138  004E22                     i2l6293:
 23139  004E22  90D8               	bcf	status,0,c
 23140  004E24  3204               	rrcf	i2___lwmod@divisor+1,f,c
 23141  004E26  3203               	rrcf	i2___lwmod@divisor,f,c
 23142  004E28  2E05               	decfsz	i2___lwmod@counter,f,c
 23143  004E2A  D7F1               	goto	i2l6289
 23144  004E2C                     i2l1894:
 23145  004E2C  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 23146  004E30  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 23147  004E34  0012               	return		;funcret
 23148  004E36                     __end_ofi2___lwmod:
 23149                           	opt stack 0
 23150                           pclatu	equ	0xFFB
 23151                           pclath	equ	0xFFA
 23152                           tblptru	equ	0xFF8
 23153                           tblptrh	equ	0xFF7
 23154                           tblptrl	equ	0xFF6
 23155                           tablat	equ	0xFF5
 23156                           prodh	equ	0xFF4
 23157                           prodl	equ	0xFF3
 23158                           intcon	equ	0xFF2
 23159                           intcon2	equ	0xFF1
 23160                           intcon3	equ	0xFF0
 23161                           indf0	equ	0xFEF
 23162                           postinc0	equ	0xFEE
 23163                           fsr0h	equ	0xFEA
 23164                           fsr0l	equ	0xFE9
 23165                           wreg	equ	0xFE8
 23166                           postdec1	equ	0xFE5
 23167                           fsr1h	equ	0xFE2
 23168                           fsr1l	equ	0xFE1
 23169                           indf2	equ	0xFDF
 23170                           postinc2	equ	0xFDE
 23171                           postdec2	equ	0xFDD
 23172                           fsr2h	equ	0xFDA
 23173                           fsr2l	equ	0xFD9
 23174                           status	equ	0xFD8
 23175                           
 23176 ;; *************** function i2___lwdiv *****************
 23177 ;; Defined at:
 23178 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 23179 ;; Parameters:    Size  Location     Type
 23180 ;;  dividend        2    5[COMRAM] unsigned int 
 23181 ;;  divisor         2    7[COMRAM] unsigned int 
 23182 ;; Auto vars:     Size  Location     Type
 23183 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 23184 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 23185 ;; Return value:  Size  Location     Type
 23186 ;;                  2    5[COMRAM] unsigned int 
 23187 ;; Registers used:
 23188 ;;		wreg, status,2, status,0
 23189 ;; Tracked objects:
 23190 ;;		On entry : 0/0
 23191 ;;		On exit  : 0/0
 23192 ;;		Unchanged: 0/0
 23193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23194 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23195 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23197 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23198 ;;Total ram usage:        7 bytes
 23199 ;; Hardware stack levels used:    1
 23200 ;; This function calls:
 23201 ;;		Nothing
 23202 ;; This function is called by:
 23203 ;;		_printSortTimer
 23204 ;;		i2_printf
 23205 ;; This function uses a non-reentrant model
 23206 ;;
 23207                           
 23208                           	psect	text87
 23209  004C76                     __ptext87:
 23210                           	opt stack 0
 23211  004C76                     i2___lwdiv:
 23212                           	opt stack 20
 23213                           
 23214                           ;incstack = 0
 23215  004C76  0E00               	movlw	0
 23216  004C78  6E0B               	movwf	i2___lwdiv@quotient+1,c
 23217  004C7A  0E00               	movlw	0
 23218  004C7C  6E0A               	movwf	i2___lwdiv@quotient,c
 23219  004C7E  5008               	movf	i2___lwdiv@divisor,w,c
 23220  004C80  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 23221  004C82  B4D8               	btfsc	status,2,c
 23222  004C84  D01C               	goto	i2l1884
 23223  004C86  0E01               	movlw	1
 23224  004C88  6E0C               	movwf	i2___lwdiv@counter,c
 23225  004C8A  D004               	goto	i2l6267
 23226  004C8C                     i2l6265:
 23227  004C8C  90D8               	bcf	status,0,c
 23228  004C8E  3608               	rlcf	i2___lwdiv@divisor,f,c
 23229  004C90  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 23230  004C92  2A0C               	incf	i2___lwdiv@counter,f,c
 23231  004C94                     i2l6267:
 23232  004C94  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 23233  004C96  D7FA               	goto	i2l6265
 23234  004C98                     i2l6269:
 23235  004C98  90D8               	bcf	status,0,c
 23236  004C9A  360A               	rlcf	i2___lwdiv@quotient,f,c
 23237  004C9C  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 23238  004C9E  5008               	movf	i2___lwdiv@divisor,w,c
 23239  004CA0  5C06               	subwf	i2___lwdiv@dividend,w,c
 23240  004CA2  5009               	movf	i2___lwdiv@divisor+1,w,c
 23241  004CA4  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 23242  004CA6  A0D8               	btfss	status,0,c
 23243  004CA8  D005               	goto	i2l6277
 23244  004CAA  5008               	movf	i2___lwdiv@divisor,w,c
 23245  004CAC  5E06               	subwf	i2___lwdiv@dividend,f,c
 23246  004CAE  5009               	movf	i2___lwdiv@divisor+1,w,c
 23247  004CB0  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 23248  004CB2  800A               	bsf	i2___lwdiv@quotient,0,c
 23249  004CB4                     i2l6277:
 23250  004CB4  90D8               	bcf	status,0,c
 23251  004CB6  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 23252  004CB8  3208               	rrcf	i2___lwdiv@divisor,f,c
 23253  004CBA  2E0C               	decfsz	i2___lwdiv@counter,f,c
 23254  004CBC  D7ED               	goto	i2l6269
 23255  004CBE                     i2l1884:
 23256  004CBE  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 23257  004CC2  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 23258  004CC6  0012               	return		;funcret
 23259  004CC8                     __end_ofi2___lwdiv:
 23260                           	opt stack 0
 23261                           pclatu	equ	0xFFB
 23262                           pclath	equ	0xFFA
 23263                           tblptru	equ	0xFF8
 23264                           tblptrh	equ	0xFF7
 23265                           tblptrl	equ	0xFF6
 23266                           tablat	equ	0xFF5
 23267                           prodh	equ	0xFF4
 23268                           prodl	equ	0xFF3
 23269                           intcon	equ	0xFF2
 23270                           intcon2	equ	0xFF1
 23271                           intcon3	equ	0xFF0
 23272                           indf0	equ	0xFEF
 23273                           postinc0	equ	0xFEE
 23274                           fsr0h	equ	0xFEA
 23275                           fsr0l	equ	0xFE9
 23276                           wreg	equ	0xFE8
 23277                           postdec1	equ	0xFE5
 23278                           fsr1h	equ	0xFE2
 23279                           fsr1l	equ	0xFE1
 23280                           indf2	equ	0xFDF
 23281                           postinc2	equ	0xFDE
 23282                           postdec2	equ	0xFDD
 23283                           fsr2h	equ	0xFDA
 23284                           fsr2l	equ	0xFD9
 23285                           status	equ	0xFD8
 23286                           
 23287 ;; *************** function i2_lcdInst *****************
 23288 ;; Defined at:
 23289 ;;		line 15 in file "lcd.c"
 23290 ;; Parameters:    Size  Location     Type
 23291 ;;  data            1    wreg     unsigned char 
 23292 ;; Auto vars:     Size  Location     Type
 23293 ;;  data            1    2[COMRAM] unsigned char 
 23294 ;; Return value:  Size  Location     Type
 23295 ;;                  1    wreg      void 
 23296 ;; Registers used:
 23297 ;;		wreg, status,2, status,0, cstack
 23298 ;; Tracked objects:
 23299 ;;		On entry : 0/0
 23300 ;;		On exit  : 0/0
 23301 ;;		Unchanged: 0/0
 23302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23304 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23306 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23307 ;;Total ram usage:        1 bytes
 23308 ;; Hardware stack levels used:    1
 23309 ;; Hardware stack levels required when called:    1
 23310 ;; This function calls:
 23311 ;;		i2_lcdNibble
 23312 ;; This function is called by:
 23313 ;;		_change_state_to_menu_11
 23314 ;;		_change_state_to_menu_23
 23315 ;;		_change_state_to_logs_11
 23316 ;;		_change_state_to_logs_12
 23317 ;;		_change_state_to_logs_22
 23318 ;;		_change_state_to_logs_23
 23319 ;;		_change_state_to_logs_33
 23320 ;;		_change_state_to_logs_34
 23321 ;;		_printSortTimer
 23322 ;;		i2_change_state_to_menu_start
 23323 ;;		i2_change_state_to_menu_12
 23324 ;;		i2_change_state_to_menu_22
 23325 ;;		i2_printRTC
 23326 ;; This function uses a non-reentrant model
 23327 ;;
 23328                           
 23329                           	psect	text88
 23330  00540C                     __ptext88:
 23331                           	opt stack 0
 23332  00540C                     i2_lcdInst:
 23333                           	opt stack 19
 23334                           
 23335                           ;incstack = 0
 23336                           ;i2lcdInst@data stored from wreg
 23337  00540C  6E03               	movwf	i2lcdInst@data,c
 23338                           
 23339                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 23340  00540E  948C               	bcf	3980,2,c	;volatile
 23341                           
 23342                           ;lcd.c: 17: lcdNibble(data);
 23343  005410  5003               	movf	i2lcdInst@data,w,c
 23344  005412  EC10  F026         	call	i2_lcdNibble
 23345  005416  0012               	return		;funcret
 23346  005418                     __end_ofi2_lcdInst:
 23347                           	opt stack 0
 23348                           pclatu	equ	0xFFB
 23349                           pclath	equ	0xFFA
 23350                           tblptru	equ	0xFF8
 23351                           tblptrh	equ	0xFF7
 23352                           tblptrl	equ	0xFF6
 23353                           tablat	equ	0xFF5
 23354                           prodh	equ	0xFF4
 23355                           prodl	equ	0xFF3
 23356                           intcon	equ	0xFF2
 23357                           intcon2	equ	0xFF1
 23358                           intcon3	equ	0xFF0
 23359                           indf0	equ	0xFEF
 23360                           postinc0	equ	0xFEE
 23361                           fsr0h	equ	0xFEA
 23362                           fsr0l	equ	0xFE9
 23363                           wreg	equ	0xFE8
 23364                           postdec1	equ	0xFE5
 23365                           fsr1h	equ	0xFE2
 23366                           fsr1l	equ	0xFE1
 23367                           indf2	equ	0xFDF
 23368                           postinc2	equ	0xFDE
 23369                           postdec2	equ	0xFDD
 23370                           fsr2h	equ	0xFDA
 23371                           fsr2l	equ	0xFD9
 23372                           status	equ	0xFD8
 23373                           
 23374 ;; *************** function i2_lcdNibble *****************
 23375 ;; Defined at:
 23376 ;;		line 25 in file "lcd.c"
 23377 ;; Parameters:    Size  Location     Type
 23378 ;;  data            1    wreg     unsigned char 
 23379 ;; Auto vars:     Size  Location     Type
 23380 ;;  data            1    1[COMRAM] unsigned char 
 23381 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 23382 ;; Return value:  Size  Location     Type
 23383 ;;                  1    wreg      void 
 23384 ;; Registers used:
 23385 ;;		wreg, status,2, status,0
 23386 ;; Tracked objects:
 23387 ;;		On entry : 0/0
 23388 ;;		On exit  : 0/0
 23389 ;;		Unchanged: 0/0
 23390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23392 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23394 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23395 ;;Total ram usage:        2 bytes
 23396 ;; Hardware stack levels used:    1
 23397 ;; This function calls:
 23398 ;;		Nothing
 23399 ;; This function is called by:
 23400 ;;		i2_lcdInst
 23401 ;;		i2_putch
 23402 ;; This function uses a non-reentrant model
 23403 ;;
 23404                           
 23405                           	psect	text89
 23406  004C20                     __ptext89:
 23407                           	opt stack 0
 23408  004C20                     i2_lcdNibble:
 23409                           	opt stack 19
 23410                           
 23411                           ;incstack = 0
 23412                           ;i2lcdNibble@data stored from wreg
 23413  004C20  6E02               	movwf	i2lcdNibble@data,c
 23414                           
 23415                           ;lcd.c: 27: char temp = data & 0xF0;
 23416  004C22  5002               	movf	i2lcdNibble@data,w,c
 23417  004C24  0BF0               	andlw	240
 23418  004C26  6E01               	movwf	i2lcdNibble@temp,c
 23419                           
 23420                           ;lcd.c: 28: LATD = LATD & 0x0F;
 23421  004C28  508C               	movf	3980,w,c	;volatile
 23422  004C2A  0B0F               	andlw	15
 23423  004C2C  6E8C               	movwf	3980,c	;volatile
 23424                           
 23425                           ;lcd.c: 29: LATD = temp | LATD;
 23426  004C2E  5001               	movf	i2lcdNibble@temp,w,c
 23427  004C30  108C               	iorwf	3980,w,c	;volatile
 23428  004C32  6E8C               	movwf	3980,c	;volatile
 23429                           
 23430                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 23431  004C34  868C               	bsf	3980,3,c	;volatile
 23432                           
 23433                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23434  004C36  0E42               	movlw	66
 23435  004C38                     i2u1040_47:
 23436  004C38  2EE8               	decfsz	wreg,f,c
 23437  004C3A  D7FE               	bra	i2u1040_47
 23438  004C3C  D000               	nop2	
 23439                           
 23440                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 23441  004C3E  968C               	bcf	3980,3,c	;volatile
 23442                           
 23443                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23444  004C40  0E42               	movlw	66
 23445  004C42                     i2u1041_47:
 23446  004C42  2EE8               	decfsz	wreg,f,c
 23447  004C44  D7FE               	bra	i2u1041_47
 23448  004C46  D000               	nop2	
 23449                           
 23450                           ;lcd.c: 36: data = data << 4;
 23451  004C48  3802               	swapf	i2lcdNibble@data,w,c
 23452  004C4A  0BF0               	andlw	240
 23453  004C4C  6E02               	movwf	i2lcdNibble@data,c
 23454                           
 23455                           ;lcd.c: 38: temp = data & 0xF0;
 23456  004C4E  5002               	movf	i2lcdNibble@data,w,c
 23457  004C50  0BF0               	andlw	240
 23458  004C52  6E01               	movwf	i2lcdNibble@temp,c
 23459                           
 23460                           ;lcd.c: 39: LATD = LATD & 0x0F;
 23461  004C54  508C               	movf	3980,w,c	;volatile
 23462  004C56  0B0F               	andlw	15
 23463  004C58  6E8C               	movwf	3980,c	;volatile
 23464                           
 23465                           ;lcd.c: 40: LATD = temp | LATD;
 23466  004C5A  5001               	movf	i2lcdNibble@temp,w,c
 23467  004C5C  108C               	iorwf	3980,w,c	;volatile
 23468  004C5E  6E8C               	movwf	3980,c	;volatile
 23469                           
 23470                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 23471  004C60  868C               	bsf	3980,3,c	;volatile
 23472                           
 23473                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23474  004C62  0E42               	movlw	66
 23475  004C64                     i2u1042_47:
 23476  004C64  2EE8               	decfsz	wreg,f,c
 23477  004C66  D7FE               	bra	i2u1042_47
 23478  004C68  D000               	nop2	
 23479                           
 23480                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 23481  004C6A  968C               	bcf	3980,3,c	;volatile
 23482                           
 23483                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23484  004C6C  0E42               	movlw	66
 23485  004C6E                     i2u1043_47:
 23486  004C6E  2EE8               	decfsz	wreg,f,c
 23487  004C70  D7FE               	bra	i2u1043_47
 23488  004C72  D000               	nop2	
 23489  004C74  0012               	return		;funcret
 23490  004C76                     __end_ofi2_lcdNibble:
 23491                           	opt stack 0
 23492                           pclatu	equ	0xFFB
 23493                           pclath	equ	0xFFA
 23494                           tblptru	equ	0xFF8
 23495                           tblptrh	equ	0xFF7
 23496                           tblptrl	equ	0xFF6
 23497                           tablat	equ	0xFF5
 23498                           prodh	equ	0xFF4
 23499                           prodl	equ	0xFF3
 23500                           intcon	equ	0xFF2
 23501                           intcon2	equ	0xFF1
 23502                           intcon3	equ	0xFF0
 23503                           indf0	equ	0xFEF
 23504                           postinc0	equ	0xFEE
 23505                           fsr0h	equ	0xFEA
 23506                           fsr0l	equ	0xFE9
 23507                           wreg	equ	0xFE8
 23508                           postdec1	equ	0xFE5
 23509                           fsr1h	equ	0xFE2
 23510                           fsr1l	equ	0xFE1
 23511                           indf2	equ	0xFDF
 23512                           postinc2	equ	0xFDE
 23513                           postdec2	equ	0xFDD
 23514                           fsr2h	equ	0xFDA
 23515                           fsr2l	equ	0xFD9
 23516                           status	equ	0xFD8
 23517                           
 23518 ;; *************** function i2_getRTC *****************
 23519 ;; Defined at:
 23520 ;;		line 44 in file "RTC.c"
 23521 ;; Parameters:    Size  Location     Type
 23522 ;;		None
 23523 ;; Auto vars:     Size  Location     Type
 23524 ;;  getRTC          2    3[COMRAM] int 
 23525 ;; Return value:  Size  Location     Type
 23526 ;;                  1    wreg      void 
 23527 ;; Registers used:
 23528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23529 ;; Tracked objects:
 23530 ;;		On entry : 0/0
 23531 ;;		On exit  : 0/0
 23532 ;;		Unchanged: 0/0
 23533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23535 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23537 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23538 ;;Total ram usage:        2 bytes
 23539 ;; Hardware stack levels used:    1
 23540 ;; Hardware stack levels required when called:    2
 23541 ;; This function calls:
 23542 ;;		i2_I2C_Master_Read
 23543 ;;		i2_I2C_Master_Start
 23544 ;;		i2_I2C_Master_Stop
 23545 ;;		i2_I2C_Master_Write
 23546 ;; This function is called by:
 23547 ;;		_printSortTimer
 23548 ;;		i2_printRTC
 23549 ;; This function uses a non-reentrant model
 23550 ;;
 23551                           
 23552                           	psect	text90
 23553  0048FE                     __ptext90:
 23554                           	opt stack 0
 23555  0048FE                     i2_getRTC:
 23556                           	opt stack 18
 23557                           
 23558                           ;RTC.c: 48: I2C_Master_Start();
 23559                           
 23560                           ;incstack = 0
 23561  0048FE  EC26  F02A         	call	i2_I2C_Master_Start	;wreg free
 23562                           
 23563                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 23564  004902  0E00               	movlw	0
 23565  004904  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23566  004906  0ED0               	movlw	208
 23567  004908  6E02               	movwf	i2I2C_Master_Write@d,c
 23568  00490A  EC11  F02A         	call	i2_I2C_Master_Write	;wreg free
 23569                           
 23570                           ;RTC.c: 50: I2C_Master_Write(0x00);
 23571  00490E  0E00               	movlw	0
 23572  004910  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23573  004912  0E00               	movlw	0
 23574  004914  6E02               	movwf	i2I2C_Master_Write@d,c
 23575  004916  EC11  F02A         	call	i2_I2C_Master_Write	;wreg free
 23576                           
 23577                           ;RTC.c: 51: I2C_Master_Stop();
 23578  00491A  EC22  F02A         	call	i2_I2C_Master_Stop	;wreg free
 23579                           
 23580                           ;RTC.c: 54: I2C_Master_Start();
 23581  00491E  EC26  F02A         	call	i2_I2C_Master_Start	;wreg free
 23582                           
 23583                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 23584  004922  0E00               	movlw	0
 23585  004924  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23586  004926  0ED1               	movlw	209
 23587  004928  6E02               	movwf	i2I2C_Master_Write@d,c
 23588  00492A  EC11  F02A         	call	i2_I2C_Master_Write	;wreg free
 23589                           
 23590                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 23591  00492E  0E00               	movlw	0
 23592  004930  6E05               	movwf	i2getRTC@i+1,c
 23593  004932  0E00               	movlw	0
 23594  004934  6E04               	movwf	i2getRTC@i,c
 23595  004936                     i2l6527:
 23596  004936  BE05               	btfsc	i2getRTC@i+1,7,c
 23597  004938  D006               	goto	i2l6531
 23598  00493A  5005               	movf	i2getRTC@i+1,w,c
 23599  00493C  E111               	bnz	i2l6537
 23600  00493E  0E06               	movlw	6
 23601  004940  5C04               	subwf	i2getRTC@i,w,c
 23602  004942  B0D8               	btfsc	status,0,c
 23603  004944  D00D               	goto	i2l6537
 23604  004946                     i2l6531:
 23605                           
 23606                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 23607  004946  0E1C               	movlw	low _time
 23608  004948  2404               	addwf	i2getRTC@i,w,c
 23609  00494A  6ED9               	movwf	fsr2l,c
 23610  00494C  0E01               	movlw	high _time
 23611  00494E  2005               	addwfc	i2getRTC@i+1,w,c
 23612  004950  6EDA               	movwf	fsr2h,c
 23613  004952  0E01               	movlw	1
 23614  004954  EC55  F029         	call	i2_I2C_Master_Read
 23615  004958  6EDF               	movwf	indf2,c
 23616  00495A  4A04               	infsnz	i2getRTC@i,f,c
 23617  00495C  2A05               	incf	i2getRTC@i+1,f,c
 23618  00495E  D7EB               	goto	i2l6527
 23619  004960                     i2l6537:
 23620                           
 23621                           ;RTC.c: 58: }
 23622                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 23623  004960  0E00               	movlw	0
 23624  004962  EC55  F029         	call	i2_I2C_Master_Read
 23625  004966  0101               	movlb	1	; () banked
 23626  004968  6F22               	movwf	(_time+6)& (0+255),b
 23627                           
 23628                           ;RTC.c: 60: I2C_Master_Stop();
 23629  00496A  EC22  F02A         	call	i2_I2C_Master_Stop	;wreg free
 23630  00496E  0012               	return		;funcret
 23631  004970                     __end_ofi2_getRTC:
 23632                           	opt stack 0
 23633                           pclatu	equ	0xFFB
 23634                           pclath	equ	0xFFA
 23635                           tblptru	equ	0xFF8
 23636                           tblptrh	equ	0xFF7
 23637                           tblptrl	equ	0xFF6
 23638                           tablat	equ	0xFF5
 23639                           prodh	equ	0xFF4
 23640                           prodl	equ	0xFF3
 23641                           intcon	equ	0xFF2
 23642                           intcon2	equ	0xFF1
 23643                           intcon3	equ	0xFF0
 23644                           indf0	equ	0xFEF
 23645                           postinc0	equ	0xFEE
 23646                           fsr0h	equ	0xFEA
 23647                           fsr0l	equ	0xFE9
 23648                           wreg	equ	0xFE8
 23649                           postdec1	equ	0xFE5
 23650                           fsr1h	equ	0xFE2
 23651                           fsr1l	equ	0xFE1
 23652                           indf2	equ	0xFDF
 23653                           postinc2	equ	0xFDE
 23654                           postdec2	equ	0xFDD
 23655                           fsr2h	equ	0xFDA
 23656                           fsr2l	equ	0xFD9
 23657                           status	equ	0xFD8
 23658                           
 23659 ;; *************** function i2_I2C_Master_Write *****************
 23660 ;; Defined at:
 23661 ;;		line 49 in file "I2C.c"
 23662 ;; Parameters:    Size  Location     Type
 23663 ;;  d               2    1[COMRAM] unsigned int 
 23664 ;; Auto vars:     Size  Location     Type
 23665 ;;		None
 23666 ;; Return value:  Size  Location     Type
 23667 ;;                  1    wreg      void 
 23668 ;; Registers used:
 23669 ;;		wreg, status,2, status,0, cstack
 23670 ;; Tracked objects:
 23671 ;;		On entry : 0/0
 23672 ;;		On exit  : 0/0
 23673 ;;		Unchanged: 0/0
 23674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23675 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23678 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23679 ;;Total ram usage:        2 bytes
 23680 ;; Hardware stack levels used:    1
 23681 ;; Hardware stack levels required when called:    1
 23682 ;; This function calls:
 23683 ;;		i2_I2C_Master_Wait
 23684 ;; This function is called by:
 23685 ;;		i2_getRTC
 23686 ;; This function uses a non-reentrant model
 23687 ;;
 23688                           
 23689                           	psect	text91
 23690  005422                     __ptext91:
 23691                           	opt stack 0
 23692  005422                     i2_I2C_Master_Write:
 23693                           	opt stack 18
 23694                           
 23695                           ;I2C.c: 51: I2C_Master_Wait();
 23696                           
 23697                           ;incstack = 0
 23698  005422  ECE7  F029         	call	i2_I2C_Master_Wait	;wreg free
 23699                           
 23700                           ;I2C.c: 52: SSPBUF = d;
 23701  005426  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 23702  00542A  0012               	return		;funcret
 23703  00542C                     __end_ofi2_I2C_Master_Write:
 23704                           	opt stack 0
 23705                           pclatu	equ	0xFFB
 23706                           pclath	equ	0xFFA
 23707                           tblptru	equ	0xFF8
 23708                           tblptrh	equ	0xFF7
 23709                           tblptrl	equ	0xFF6
 23710                           tablat	equ	0xFF5
 23711                           prodh	equ	0xFF4
 23712                           prodl	equ	0xFF3
 23713                           intcon	equ	0xFF2
 23714                           intcon2	equ	0xFF1
 23715                           intcon3	equ	0xFF0
 23716                           indf0	equ	0xFEF
 23717                           postinc0	equ	0xFEE
 23718                           fsr0h	equ	0xFEA
 23719                           fsr0l	equ	0xFE9
 23720                           wreg	equ	0xFE8
 23721                           postdec1	equ	0xFE5
 23722                           fsr1h	equ	0xFE2
 23723                           fsr1l	equ	0xFE1
 23724                           indf2	equ	0xFDF
 23725                           postinc2	equ	0xFDE
 23726                           postdec2	equ	0xFDD
 23727                           fsr2h	equ	0xFDA
 23728                           fsr2l	equ	0xFD9
 23729                           status	equ	0xFD8
 23730                           
 23731 ;; *************** function i2_I2C_Master_Stop *****************
 23732 ;; Defined at:
 23733 ;;		line 43 in file "I2C.c"
 23734 ;; Parameters:    Size  Location     Type
 23735 ;;		None
 23736 ;; Auto vars:     Size  Location     Type
 23737 ;;		None
 23738 ;; Return value:  Size  Location     Type
 23739 ;;                  1    wreg      void 
 23740 ;; Registers used:
 23741 ;;		wreg, status,2, status,0, cstack
 23742 ;; Tracked objects:
 23743 ;;		On entry : 0/0
 23744 ;;		On exit  : 0/0
 23745 ;;		Unchanged: 0/0
 23746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23751 ;;Total ram usage:        0 bytes
 23752 ;; Hardware stack levels used:    1
 23753 ;; Hardware stack levels required when called:    1
 23754 ;; This function calls:
 23755 ;;		i2_I2C_Master_Wait
 23756 ;; This function is called by:
 23757 ;;		i2_getRTC
 23758 ;; This function uses a non-reentrant model
 23759 ;;
 23760                           
 23761                           	psect	text92
 23762  005444                     __ptext92:
 23763                           	opt stack 0
 23764  005444                     i2_I2C_Master_Stop:
 23765                           	opt stack 18
 23766                           
 23767                           ;I2C.c: 45: I2C_Master_Wait();
 23768                           
 23769                           ;incstack = 0
 23770  005444  ECE7  F029         	call	i2_I2C_Master_Wait	;wreg free
 23771                           
 23772                           ;I2C.c: 46: PEN = 1;
 23773  005448  84C5               	bsf	4037,2,c	;volatile
 23774  00544A  0012               	return		;funcret
 23775  00544C                     __end_ofi2_I2C_Master_Stop:
 23776                           	opt stack 0
 23777                           pclatu	equ	0xFFB
 23778                           pclath	equ	0xFFA
 23779                           tblptru	equ	0xFF8
 23780                           tblptrh	equ	0xFF7
 23781                           tblptrl	equ	0xFF6
 23782                           tablat	equ	0xFF5
 23783                           prodh	equ	0xFF4
 23784                           prodl	equ	0xFF3
 23785                           intcon	equ	0xFF2
 23786                           intcon2	equ	0xFF1
 23787                           intcon3	equ	0xFF0
 23788                           indf0	equ	0xFEF
 23789                           postinc0	equ	0xFEE
 23790                           fsr0h	equ	0xFEA
 23791                           fsr0l	equ	0xFE9
 23792                           wreg	equ	0xFE8
 23793                           postdec1	equ	0xFE5
 23794                           fsr1h	equ	0xFE2
 23795                           fsr1l	equ	0xFE1
 23796                           indf2	equ	0xFDF
 23797                           postinc2	equ	0xFDE
 23798                           postdec2	equ	0xFDD
 23799                           fsr2h	equ	0xFDA
 23800                           fsr2l	equ	0xFD9
 23801                           status	equ	0xFD8
 23802                           
 23803 ;; *************** function i2_I2C_Master_Start *****************
 23804 ;; Defined at:
 23805 ;;		line 31 in file "I2C.c"
 23806 ;; Parameters:    Size  Location     Type
 23807 ;;		None
 23808 ;; Auto vars:     Size  Location     Type
 23809 ;;		None
 23810 ;; Return value:  Size  Location     Type
 23811 ;;                  1    wreg      void 
 23812 ;; Registers used:
 23813 ;;		wreg, status,2, status,0, cstack
 23814 ;; Tracked objects:
 23815 ;;		On entry : 0/0
 23816 ;;		On exit  : 0/0
 23817 ;;		Unchanged: 0/0
 23818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23823 ;;Total ram usage:        0 bytes
 23824 ;; Hardware stack levels used:    1
 23825 ;; Hardware stack levels required when called:    1
 23826 ;; This function calls:
 23827 ;;		i2_I2C_Master_Wait
 23828 ;; This function is called by:
 23829 ;;		i2_getRTC
 23830 ;; This function uses a non-reentrant model
 23831 ;;
 23832                           
 23833                           	psect	text93
 23834  00544C                     __ptext93:
 23835                           	opt stack 0
 23836  00544C                     i2_I2C_Master_Start:
 23837                           	opt stack 18
 23838                           
 23839                           ;I2C.c: 33: I2C_Master_Wait();
 23840                           
 23841                           ;incstack = 0
 23842  00544C  ECE7  F029         	call	i2_I2C_Master_Wait	;wreg free
 23843                           
 23844                           ;I2C.c: 34: SEN = 1;
 23845  005450  80C5               	bsf	4037,0,c	;volatile
 23846  005452  0012               	return		;funcret
 23847  005454                     __end_ofi2_I2C_Master_Start:
 23848                           	opt stack 0
 23849                           pclatu	equ	0xFFB
 23850                           pclath	equ	0xFFA
 23851                           tblptru	equ	0xFF8
 23852                           tblptrh	equ	0xFF7
 23853                           tblptrl	equ	0xFF6
 23854                           tablat	equ	0xFF5
 23855                           prodh	equ	0xFF4
 23856                           prodl	equ	0xFF3
 23857                           intcon	equ	0xFF2
 23858                           intcon2	equ	0xFF1
 23859                           intcon3	equ	0xFF0
 23860                           indf0	equ	0xFEF
 23861                           postinc0	equ	0xFEE
 23862                           fsr0h	equ	0xFEA
 23863                           fsr0l	equ	0xFE9
 23864                           wreg	equ	0xFE8
 23865                           postdec1	equ	0xFE5
 23866                           fsr1h	equ	0xFE2
 23867                           fsr1l	equ	0xFE1
 23868                           indf2	equ	0xFDF
 23869                           postinc2	equ	0xFDE
 23870                           postdec2	equ	0xFDD
 23871                           fsr2h	equ	0xFDA
 23872                           fsr2l	equ	0xFD9
 23873                           status	equ	0xFD8
 23874                           
 23875 ;; *************** function i2_I2C_Master_Read *****************
 23876 ;; Defined at:
 23877 ;;		line 55 in file "I2C.c"
 23878 ;; Parameters:    Size  Location     Type
 23879 ;;  a               1    wreg     unsigned char 
 23880 ;; Auto vars:     Size  Location     Type
 23881 ;;  a               1    1[COMRAM] unsigned char 
 23882 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 23883 ;; Return value:  Size  Location     Type
 23884 ;;                  1    wreg      unsigned char 
 23885 ;; Registers used:
 23886 ;;		wreg, status,2, status,0, cstack
 23887 ;; Tracked objects:
 23888 ;;		On entry : 0/0
 23889 ;;		On exit  : 0/0
 23890 ;;		Unchanged: 0/0
 23891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23893 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23895 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23896 ;;Total ram usage:        2 bytes
 23897 ;; Hardware stack levels used:    1
 23898 ;; Hardware stack levels required when called:    1
 23899 ;; This function calls:
 23900 ;;		i2_I2C_Master_Wait
 23901 ;; This function is called by:
 23902 ;;		i2_getRTC
 23903 ;; This function uses a non-reentrant model
 23904 ;;
 23905                           
 23906                           	psect	text94
 23907  0052AA                     __ptext94:
 23908                           	opt stack 0
 23909  0052AA                     i2_I2C_Master_Read:
 23910                           	opt stack 18
 23911                           
 23912                           ;incstack = 0
 23913                           ;i2I2C_Master_Read@a stored from wreg
 23914  0052AA  6E02               	movwf	i2I2C_Master_Read@a,c
 23915                           
 23916                           ;I2C.c: 57: unsigned char temp;
 23917                           ;I2C.c: 58: I2C_Master_Wait();
 23918  0052AC  ECE7  F029         	call	i2_I2C_Master_Wait	;wreg free
 23919                           
 23920                           ;I2C.c: 59: RCEN = 1;
 23921  0052B0  86C5               	bsf	4037,3,c	;volatile
 23922                           
 23923                           ;I2C.c: 60: I2C_Master_Wait();
 23924  0052B2  ECE7  F029         	call	i2_I2C_Master_Wait	;wreg free
 23925                           
 23926                           ;I2C.c: 61: temp = SSPBUF;
 23927  0052B6  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 23928                           
 23929                           ;I2C.c: 62: I2C_Master_Wait();
 23930  0052BA  ECE7  F029         	call	i2_I2C_Master_Wait	;wreg free
 23931                           
 23932                           ;I2C.c: 63: ACKDT = (a)?0:1;
 23933  0052BE  5002               	movf	i2I2C_Master_Read@a,w,c
 23934  0052C0  A4D8               	btfss	status,2,c
 23935  0052C2  D002               	goto	i2u454_40
 23936  0052C4  8AC5               	bsf	4037,5,c	;volatile
 23937  0052C6  D001               	goto	i2l6231
 23938  0052C8                     i2u454_40:
 23939  0052C8  9AC5               	bcf	4037,5,c	;volatile
 23940  0052CA                     i2l6231:
 23941                           
 23942                           ;I2C.c: 64: ACKEN = 1;
 23943  0052CA  88C5               	bsf	4037,4,c	;volatile
 23944                           
 23945                           ;I2C.c: 65: return temp;
 23946  0052CC  5003               	movf	i2I2C_Master_Read@temp,w,c
 23947  0052CE  0012               	return	
 23948  0052D0                     __end_ofi2_I2C_Master_Read:
 23949                           	opt stack 0
 23950                           pclatu	equ	0xFFB
 23951                           pclath	equ	0xFFA
 23952                           tblptru	equ	0xFF8
 23953                           tblptrh	equ	0xFF7
 23954                           tblptrl	equ	0xFF6
 23955                           tablat	equ	0xFF5
 23956                           prodh	equ	0xFF4
 23957                           prodl	equ	0xFF3
 23958                           intcon	equ	0xFF2
 23959                           intcon2	equ	0xFF1
 23960                           intcon3	equ	0xFF0
 23961                           indf0	equ	0xFEF
 23962                           postinc0	equ	0xFEE
 23963                           fsr0h	equ	0xFEA
 23964                           fsr0l	equ	0xFE9
 23965                           wreg	equ	0xFE8
 23966                           postdec1	equ	0xFE5
 23967                           fsr1h	equ	0xFE2
 23968                           fsr1l	equ	0xFE1
 23969                           indf2	equ	0xFDF
 23970                           postinc2	equ	0xFDE
 23971                           postdec2	equ	0xFDD
 23972                           fsr2h	equ	0xFDA
 23973                           fsr2l	equ	0xFD9
 23974                           status	equ	0xFD8
 23975                           
 23976 ;; *************** function i2_I2C_Master_Wait *****************
 23977 ;; Defined at:
 23978 ;;		line 26 in file "I2C.c"
 23979 ;; Parameters:    Size  Location     Type
 23980 ;;		None
 23981 ;; Auto vars:     Size  Location     Type
 23982 ;;		None
 23983 ;; Return value:  Size  Location     Type
 23984 ;;                  1    wreg      void 
 23985 ;; Registers used:
 23986 ;;		wreg, status,2, status,0
 23987 ;; Tracked objects:
 23988 ;;		On entry : 0/0
 23989 ;;		On exit  : 0/0
 23990 ;;		Unchanged: 0/0
 23991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23994 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23995 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23996 ;;Total ram usage:        1 bytes
 23997 ;; Hardware stack levels used:    1
 23998 ;; This function calls:
 23999 ;;		Nothing
 24000 ;; This function is called by:
 24001 ;;		i2_I2C_Master_Start
 24002 ;;		i2_I2C_Master_Stop
 24003 ;;		i2_I2C_Master_Write
 24004 ;;		i2_I2C_Master_Read
 24005 ;; This function uses a non-reentrant model
 24006 ;;
 24007                           
 24008                           	psect	text95
 24009  0053CE                     __ptext95:
 24010                           	opt stack 0
 24011  0053CE                     i2_I2C_Master_Wait:
 24012                           	opt stack 18
 24013  0053CE                     i2l66:
 24014  0053CE  B4C7               	btfsc	4039,2,c	;volatile
 24015  0053D0  D7FE               	goto	i2l66
 24016  0053D2  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 24017  0053D6  0E1F               	movlw	31
 24018  0053D8  1601               	andwf	??i2_I2C_Master_Wait,f,c
 24019  0053DA  B4D8               	btfsc	status,2,c
 24020  0053DC  0012               	return	
 24021  0053DE  D7F7               	goto	i2l66
 24022  0053E0                     __end_ofi2_I2C_Master_Wait:
 24023                           	opt stack 0
 24024                           pclatu	equ	0xFFB
 24025                           pclath	equ	0xFFA
 24026                           tblptru	equ	0xFF8
 24027                           tblptrh	equ	0xFF7
 24028                           tblptrl	equ	0xFF6
 24029                           tablat	equ	0xFF5
 24030                           prodh	equ	0xFF4
 24031                           prodl	equ	0xFF3
 24032                           intcon	equ	0xFF2
 24033                           intcon2	equ	0xFF1
 24034                           intcon3	equ	0xFF0
 24035                           indf0	equ	0xFEF
 24036                           postinc0	equ	0xFEE
 24037                           fsr0h	equ	0xFEA
 24038                           fsr0l	equ	0xFE9
 24039                           wreg	equ	0xFE8
 24040                           postdec1	equ	0xFE5
 24041                           fsr1h	equ	0xFE2
 24042                           fsr1l	equ	0xFE1
 24043                           indf2	equ	0xFDF
 24044                           postinc2	equ	0xFDE
 24045                           postdec2	equ	0xFDD
 24046                           fsr2h	equ	0xFDA
 24047                           fsr2l	equ	0xFD9
 24048                           status	equ	0xFD8
 24049                           
 24050 ;; *************** function i2_delay_ms *****************
 24051 ;; Defined at:
 24052 ;;		line 590 in file "sort.c"
 24053 ;; Parameters:    Size  Location     Type
 24054 ;;  milliseconds    1    wreg     unsigned char 
 24055 ;; Auto vars:     Size  Location     Type
 24056 ;;  milliseconds    1    1[COMRAM] unsigned char 
 24057 ;; Return value:  Size  Location     Type
 24058 ;;                  1    wreg      void 
 24059 ;; Registers used:
 24060 ;;		wreg, status,2, status,0, cstack
 24061 ;; Tracked objects:
 24062 ;;		On entry : 0/0
 24063 ;;		On exit  : 0/0
 24064 ;;		Unchanged: 0/0
 24065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24067 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24068 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24069 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24070 ;;Total ram usage:        2 bytes
 24071 ;; Hardware stack levels used:    1
 24072 ;; This function calls:
 24073 ;;		Nothing
 24074 ;; This function is called by:
 24075 ;;		_printSortTimer
 24076 ;; This function uses a non-reentrant model
 24077 ;;
 24078                           
 24079                           	psect	text96
 24080  005356                     __ptext96:
 24081                           	opt stack 0
 24082  005356                     i2_delay_ms:
 24083                           	opt stack 22
 24084                           
 24085                           ;incstack = 0
 24086                           ;i2delay_ms@milliseconds stored from wreg
 24087  005356  6E02               	movwf	i2delay_ms@milliseconds,c
 24088                           
 24089                           ;sort.c: 591: while(milliseconds > 0)
 24090  005358  D008               	goto	i2l8615
 24091  00535A                     i2l8611:
 24092                           
 24093                           ;sort.c: 592: {
 24094                           ;sort.c: 593: milliseconds--;
 24095  00535A  0602               	decf	i2delay_ms@milliseconds,f,c
 24096                           
 24097                           ;sort.c: 594: _delay((unsigned long)((990)*(32000000/4000000.0)));
 24098  00535C  0E0B               	movlw	11
 24099  00535E  6E01               	movwf	??i2_delay_ms& (0+255),c
 24100  005360  0E48               	movlw	72
 24101  005362                     i2u1044_47:
 24102  005362  2EE8               	decfsz	wreg,f,c
 24103  005364  D7FE               	bra	i2u1044_47
 24104  005366  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 24105  005368  D7FC               	bra	i2u1044_47
 24106  00536A                     i2l8615:
 24107  00536A  5002               	movf	i2delay_ms@milliseconds,w,c
 24108  00536C  B4D8               	btfsc	status,2,c
 24109  00536E  0012               	return	
 24110  005370  D7F4               	goto	i2l8611
 24111  005372                     __end_ofi2_delay_ms:
 24112                           	opt stack 0
 24113                           pclatu	equ	0xFFB
 24114                           pclath	equ	0xFFA
 24115                           tblptru	equ	0xFF8
 24116                           tblptrh	equ	0xFF7
 24117                           tblptrl	equ	0xFF6
 24118                           tablat	equ	0xFF5
 24119                           prodh	equ	0xFF4
 24120                           prodl	equ	0xFF3
 24121                           intcon	equ	0xFF2
 24122                           intcon2	equ	0xFF1
 24123                           intcon3	equ	0xFF0
 24124                           indf0	equ	0xFEF
 24125                           postinc0	equ	0xFEE
 24126                           fsr0h	equ	0xFEA
 24127                           fsr0l	equ	0xFE9
 24128                           wreg	equ	0xFE8
 24129                           postdec1	equ	0xFE5
 24130                           fsr1h	equ	0xFE2
 24131                           fsr1l	equ	0xFE1
 24132                           indf2	equ	0xFDF
 24133                           postinc2	equ	0xFDE
 24134                           postdec2	equ	0xFDD
 24135                           fsr2h	equ	0xFDA
 24136                           fsr2l	equ	0xFD9
 24137                           status	equ	0xFD8
 24138                           pclatu	equ	0xFFB
 24139                           pclath	equ	0xFFA
 24140                           tblptru	equ	0xFF8
 24141                           tblptrh	equ	0xFF7
 24142                           tblptrl	equ	0xFF6
 24143                           tablat	equ	0xFF5
 24144                           prodh	equ	0xFF4
 24145                           prodl	equ	0xFF3
 24146                           intcon	equ	0xFF2
 24147                           intcon2	equ	0xFF1
 24148                           intcon3	equ	0xFF0
 24149                           indf0	equ	0xFEF
 24150                           postinc0	equ	0xFEE
 24151                           fsr0h	equ	0xFEA
 24152                           fsr0l	equ	0xFE9
 24153                           wreg	equ	0xFE8
 24154                           postdec1	equ	0xFE5
 24155                           fsr1h	equ	0xFE2
 24156                           fsr1l	equ	0xFE1
 24157                           indf2	equ	0xFDF
 24158                           postinc2	equ	0xFDE
 24159                           postdec2	equ	0xFDD
 24160                           fsr2h	equ	0xFDA
 24161                           fsr2l	equ	0xFD9
 24162                           status	equ	0xFD8
 24163                           
 24164                           	psect	rparam
 24165  0000                     pclatu	equ	0xFFB
 24166                           pclath	equ	0xFFA
 24167                           tblptru	equ	0xFF8
 24168                           tblptrh	equ	0xFF7
 24169                           tblptrl	equ	0xFF6
 24170                           tablat	equ	0xFF5
 24171                           prodh	equ	0xFF4
 24172                           prodl	equ	0xFF3
 24173                           intcon	equ	0xFF2
 24174                           intcon2	equ	0xFF1
 24175                           intcon3	equ	0xFF0
 24176                           indf0	equ	0xFEF
 24177                           postinc0	equ	0xFEE
 24178                           fsr0h	equ	0xFEA
 24179                           fsr0l	equ	0xFE9
 24180                           wreg	equ	0xFE8
 24181                           postdec1	equ	0xFE5
 24182                           fsr1h	equ	0xFE2
 24183                           fsr1l	equ	0xFE1
 24184                           indf2	equ	0xFDF
 24185                           postinc2	equ	0xFDE
 24186                           postdec2	equ	0xFDD
 24187                           fsr2h	equ	0xFDA
 24188                           fsr2l	equ	0xFD9
 24189                           status	equ	0xFD8
 24190                           
 24191                           	psect	temp
 24192  00007E                     btemp:
 24193                           	opt stack 0
 24194  00007E                     	ds	1
 24195  0000                     int$flags	set	btemp
 24196                           pclatu	equ	0xFFB
 24197                           pclath	equ	0xFFA
 24198                           tblptru	equ	0xFF8
 24199                           tblptrh	equ	0xFF7
 24200                           tblptrl	equ	0xFF6
 24201                           tablat	equ	0xFF5
 24202                           prodh	equ	0xFF4
 24203                           prodl	equ	0xFF3
 24204                           intcon	equ	0xFF2
 24205                           intcon2	equ	0xFF1
 24206                           intcon3	equ	0xFF0
 24207                           indf0	equ	0xFEF
 24208                           postinc0	equ	0xFEE
 24209                           fsr0h	equ	0xFEA
 24210                           fsr0l	equ	0xFE9
 24211                           wreg	equ	0xFE8
 24212                           postdec1	equ	0xFE5
 24213                           fsr1h	equ	0xFE2
 24214                           fsr1l	equ	0xFE1
 24215                           indf2	equ	0xFDF
 24216                           postinc2	equ	0xFDE
 24217                           postdec2	equ	0xFDD
 24218                           fsr2h	equ	0xFDA
 24219                           fsr2l	equ	0xFD9
 24220                           status	equ	0xFD8


Data Sizes:
    Strings     1286
    Constant    27
    Data        8
    BSS         138
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      73
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_128(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_127(CODE[17]), STR_126(CODE[17]), STR_125(CODE[18]), STR_124(CODE[18]), 
		 -> STR_123(CODE[18]), STR_122(CODE[18]), STR_121(CODE[18]), STR_120(CODE[18]), 
		 -> STR_119(CODE[17]), STR_118(CODE[17]), STR_117(CODE[3]), STR_116(CODE[15]), 
		 -> STR_115(CODE[3]), STR_114(CODE[15]), STR_113(CODE[11]), STR_112(CODE[18]), 
		 -> STR_111(CODE[18]), STR_110(CODE[17]), STR_109(CODE[15]), STR_108(CODE[15]), 
		 -> STR_107(CODE[15]), STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[17]), 
		 -> STR_103(CODE[16]), STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), 
		 -> STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[17]), STR_96(CODE[15]), 
		 -> STR_95(CODE[11]), STR_94(CODE[17]), STR_93(CODE[11]), STR_92(CODE[17]), 
		 -> STR_91(CODE[14]), STR_90(CODE[15]), STR_89(CODE[14]), STR_88(CODE[10]), 
		 -> STR_87(CODE[9]), STR_86(CODE[9]), STR_85(CODE[10]), STR_84(CODE[10]), 
		 -> STR_83(CODE[16]), STR_82(CODE[15]), STR_81(CODE[3]), STR_80(CODE[15]), 
		 -> STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), 
		 -> STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), 
		 -> STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), 
		 -> STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), 
		 -> STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), 
		 -> STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), 
		 -> STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), 
		 -> STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), 
		 -> STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), 
		 -> STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), 
		 -> STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_delay_ms
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PusherTest->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  211795
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   22911
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   17591
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     183
                                              2 BANK0      8     8      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5137
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11414
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10667
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23224
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22310
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   46200
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13339
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8971
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8971
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  106933
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                         _PusherTest
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    9083
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9040
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8971
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15351
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8971
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTest                                          10    10      0    9175
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8971
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19245
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5137
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5137
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          7     7      0    9155
                                             43 BANK0      7     7      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8836
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76327
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
                  _updateServoStates
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4879
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _delay_ms
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      49       7       28.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     146      34        0.0%
DATA                 0      0     146       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Apr 05 17:49:52 2017

                                    _i 013D                     i2_I2C_Master_Start 544C  
                   i2_I2C_Master_Write 5422                                     l66 53BA  
                                   _ID 2C6A                       _f_panning_to_bin 0061  
                          __CFG_CPD$ON 000000                                     _UI 08CA  
                         ___awdiv@sign 008B                                     _up 0077  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                                  ID@i 0084                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C8  
                                  l180 09A0                                    l608 24EE  
                                  l811 2DD4                                    l491 41DC  
                                  l812 2DEE                                    l813 2E2C  
                                  l814 2E12                                    l818 2EC4  
                                  l754 123C                                    l772 13CA  
                                  l764 12F6                                    l781 15B6  
                                  l870 46CA                                    l790 152E  
                                  l791 1542                                    l775 1404  
                                  l767 1330                                    l792 1556  
                                  l793 156C                                    l787 1508  
                                  l797 1602                                    l789 151A  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 3704                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _arm 3D98  
                                  _log 00F2                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 3A18                    _log_count_can_w_lab 0067  
                           i2_delay_ms 5356        __end_of_change_state_to_menu_11 5066  
      __end_of_change_state_to_menu_12 4EA6        __end_of_change_state_to_menu_22 4E6E  
      __end_of_change_state_to_menu_23 5036           _f_can_coming_to_distribution 0133  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 5156  
      __end_of_change_state_to_logs_12 5126        __end_of_change_state_to_logs_22 50F6  
      __end_of_change_state_to_logs_23 51B2        __end_of_change_state_to_logs_33 50C6  
      __end_of_change_state_to_logs_34 5096                                   ??_ID 0082  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1032 3EC0  
                                 l1210 007C                                   l1220 018C  
                                 l1221 01DA                                   l1213 0080  
                                 l1045 539C                                   l1222 0240  
                                 l1150 3BBA                                   l1054 3B46  
                                 l1223 028E                                   l1304 4BBE  
                                 l1400 3E62                                   l1217 0126  
                                 l1153 3BDA                                   l1322 30B2  
                                 l1403 3E98                                   l1326 30F6  
                                 l1350 4750                                   l1319 3116  
                                 l1247 05E8                                   l1175 40C6  
                                 l1328 3110                                   l1264 0858  
                                 l1184 2198                                   l1281 47AC  
                                 l1178 40CA                                   l1283 47B0  
                                 l1259 0782                                   l1187 219C  
                                 l1380 39D0                                   l1284 47B4  
                                 l1437 1856                                   l1285 47B8  
                                 l1277 4790                                   l1357 4760  
                                 l1374 396A                                   l1286 47BC  
                                 l1287 47C0                                   l1391 3E0C  
                                 l1289 47FE                                   l1298 4BAE  
                                 l1379 39B6                                   l1395 3E42  
                                 ?_arm 0001                                   l1831 436A  
                                 l6201 4A68                                   l6121 51F2  
                                 l6203 4A6E                                   l6123 5204  
                                 l1884 4882                                   l1894 4AA0  
                                 l6207 4A92                                   l6321 1644  
                                 l8001 059E                                   l6145 517C  
                                 l6163 522A                                   l6403 18EA  
                                 l6331 1682                                   l6315 161E  
                                 l8011 05C6                                   l6181 483E  
                                 l6421 1968                                   l6413 1944  
                                 l6325 164E                                   l8005 05A8  
                                 l7301 11FA                                   l6191 4874  
                                 l6183 4844                                   l6415 194E  
                                 l6351 1742                                   l6319 1632  
                                 l8015 05D0                                   l6503 42EE  
                                 l7311 1244                                   l6433 19AA  
                                 l6409 190C                                   l6361 17BA  
                                 l8033 063A                                   l8009 05C0  
                                 l6505 42FE                                   l6179 4832  
                                 l6443 1A1C                                   l6427 1984  
                                 l6363 17D2                                   l6347 1730  
                                 l6339 16FE                                   l8123 07F4  
                                 l8115 07D2                                   l8043 0662  
                                 l6451 4EBC                                   l6515 4358  
                                 l6507 4304                                   l7403 141E  
                                 l6429 1990                                   l6437 19BE  
                                 l6357 17A8                                   l6349 173C  
                                 l6373 181C                                   l6445 1A28  
                                 l8301 307A                                   l8133 081C  
                                 l8125 07FA                                   l8037 0652  
                                 l8029 0630                                   l8205 3E8A  
                                 l6461 4656                                   l7085 45B6  
                                 l6199 4A5C                                   l6439 19C4  
                                 l6391 18AE                                   l6367 17FE  
                                 l6359 17B4                                   l8151 0878  
                                 l8119 07DC                                   l8063 06D6  
                                 l8055 06B4                                   l8047 067A  
                                 l8039 0658                                   l6711 246C  
                                 l7095 45F8                                   l7431 14E6  
                                 l7415 1482                                   l7407 1444  
                                 l7343 12E0                                   l7327 1280  
                                 _ADIE 007CEE                                   l6385 188E  
                                 l6369 1816                                   l8313 309C  
                                 l8161 08A0                                   l8129 0804  
                                 l8081 0738                                   l8073 06FE  
                                 l8065 06DC                                   l6457 4640  
                                 l6449 4EB0                                   l6721 2534  
                                 l7089 45CC                                   l7521 2D60  
                                 l7433 14F0                                   l7353 1310  
                                 l6491 46E8                                   l8323 30CC  
                                 l8251 4788                                   l8155 0882  
                                 l8139 0842                                   l8091 0760  
                                 l8059 06BE                                   l6467 4676  
                                 l6731 25CA                                   l6723 2552  
                                 l7603 4006                                   l7355 131A  
                                 l6389 18A8                                   l6485 46AE  
                                 l8341 47C4                                   l8165 08AA  
                                 l8149 0872                                   l8085 0742  
                                 l8069 06E6                                   l9301 3C10  
                                 l6733 25E8                                   l6725 2570  
                                 l6717 24F8                                   l7605 4034  
                                 l7533 2D98                                   l7517 2D50  
                                 l7461 1578                                   l7381 13B4  
                                 l7365 134A                                   l8503 3A12  
                                 l8327 30E0                                   l8263 2F04  
                                 l8159 089A                                   l8095 076A  
                                 l7703 22F4                                   l9303 3C16  
                                 l6735 2606                                   l6727 258E  
                                 l6719 2516                                   l6743 2660  
                                 l9231 3A78                                   l7543 2DBE  
                                 l7535 2D9A                                   l7463 15AE  
                                 l7391 13E4                                   l8281 2FBC  
                                 l8169 08C2                                   l8089 075A  
                                 l8193 3E34                                   l8185 3DE6  
                                 l7721 2382                                   l9305 3C1C  
                                 l8513 421E                                   l6737 2624  
                                 l6729 25AC                                   l6745 26BE  
                                 l7553 2DF2                                   l7529 2D88  
                                 l7481 15F6                                   l7393 13EE  
                                 l8283 2FC2                                   l6739 2642  
                                 l6931 3F2C                                   l7555 2DFC  
                                 l7483 1604                                   l8461 3938  
                                 l7901 0398                                   l7741 23FA  
                                 l7733 23E8                                   l7709 2336  
                                 l9309 3C22                                   l8525 4252  
                                 l8541 42A2                                   l9229 3A64  
                                 l7469 15BE                                   l7911 03C0  
                                 l8199 3E48                                   l8527 425E  
                                 l8519 4234                                   l6943 3F64  
                                 l6935 3F36                                   l9255 3B00  
                                 l9503 41D2                                   l8457 3908  
                                 l7905 03B0                                   l7745 2430  
                                 l7729 23B2                                   l7673 21EC  
                                 l8545 42B6                                   l8537 4294  
                                 l8529 4264                                   l8561 44FE  
                                 l8721 0B02                                   l8713 0AE0  
                                 l7593 3F9E                                   l6953 523A  
                                 l9505 41D8                                   l7931 0434  
                                 l7923 0412                                   l7915 03D8  
                                 l7907 03B6                                   l7691 22A4  
                                 l9291 3BF2                                   l9267 3B5C  
                                 l8803 0DF2                                   l8731 0B1E  
                                 l8651 09B8                                   l6947 3F6E  
                                 l6939 3F4E                                   l7595 3FB8  
                                 l7579 2E82                                   l7587 2EC6  
                                 l8485 3996                                   l8477 396C  
                                 l7941 045C                                   l7933 043A  
                                 l9293 3BF8                                   l9285 3BE0  
                                 l8581 456A                                   l8573 4548  
                                 l8565 4512                                   l8557 44EE  
                                 l8717 0AEA                                   l8661 09DA  
                                 l8653 09BE                                   l7597 3FD2  
                                 l6957 5250                                   l6981 48B0  
                                 l6885 4436                                   l9509 41DE  
                                 l8487 39A0                                   l8479 397C  
                                 l7927 041C                                   l7871 030A  
                                 l7791 00FA                                   l9295 3BFE  
                                 l9287 3BE6                                   l8567 451E  
                                 l8911 1052                                   l8831 0EDA  
                                 l8807 0E0A                                   l8751 0B88  
                                 l8735 0B36                                   l8727 0B14  
                                 l7599 3FEC                                   l6895 44C2  
                                 l8497 39D2                                   l7953 04A0  
                                 l7937 0444                                   l7881 0332  
                                 l7785 00EA                                   l9297 3C04  
                                 l9289 3BEC                                   l8569 4524  
                                 l8577 4556                                   l8921 107C  
                                 l8841 0F04                                   l8761 0C1E  
                                 l8753 0BA6                                   l8665 09F2  
                                 l8657 09D0                                   l6993 48DA  
                                 l6977 489A                                   l6889 444C  
                                 l8499 39E2                                   l7963 04C8  
                                 l7875 0314                                   l7795 0112  
                                 l7787 00F0                                   l9299 3C0A  
                                 l8915 106A                                   l8907 1048  
                                 l8835 0EF2                                   l8827 0ED0  
                                 l8771 0CB4                                   l8763 0C3C  
                                 l8755 0BC4                                   l8683 0A58  
                                 l9491 41AE                                   l7957 04B8  
                                 l7949 0496                                   l7885 033C  
                                 l8925 1086                                   l8845 0F0E  
                                 l8773 0CD2                                   l8765 0C5A  
                                 l8757 0BE2                                   l8781 0D72  
                                 l8693 0A80                                   l8685 0A5E  
                                 l8669 0A04                                   l6997 48F2  
                                 l9493 41B4                                   l9485 4188  
                                 l7983 053C                                   l7975 051A  
                                 l7967 04E0                                   l7959 04BE  
                                 l7879 032C                                   l8951 1106  
                                 l8871 0F96                                   l8775 0CF0  
                                 l8767 0C78                                   l8759 0C00  
                                 l9495 41BA                                   l9487 419E  
                                 l7993 0564                                   l7985 0542  
                                 l7897 038E                                   l7889 0354  
                                 l8961 1130                                   l8929 109E  
                                 l8881 0FC0                                   l8849 0F26  
                                 l8793 0DD6                                   l8785 0DB4  
                                 l8769 0C96                                   l8689 0A68  
                                 l7979 0524                                   l8955 111E  
                                 l8947 10FC                                   l8875 0FAE  
                                 l8867 0F8C                                   l8779 0D0E  
                                 l8699 0A8E                                   l7989 054C  
                                 l8965 113A                                   l8885 0FCA  
                                 l8789 0DBE                                   l8973 115E  
                                 l8799 0DE8                                   STR_1 FB91  
                                 STR_2 FF26                                   l8969 1152  
                                 l8889 0FE2                                   STR_3 FB7F  
                                 STR_4 FE49                                   STR_5 FB7F  
                                 STR_6 FDE5                                   STR_7 FFC3  
                                 STR_8 FFDA                                   STR_9 FFCA  
              ??i2_updateServoPosition 0005                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u6010 2CBA                                   u6020 2D10  
                                 u4440 517A                                   u6018 2CBE  
                                 _PEIE 007F96                                   u6300 241E  
                                 u6028 2D14                                   u6230 222E  
                                 u5350 24EE                                   u6150 2E8E  
                                 u5335 4B3A                                   u4720 177C  
                                 u6240 2230                                   u4640 4D58  
                                 u7210 38CA                                   u7050 2F46  
                                 u6410 028E                                   u6170 2EC4  
                                 u4650 4D5A                                   u7220 3926  
                                 u7060 2F48                                   u4660 4DA4  
                                 u6308 2422                                   u5700 1206  
                                 _RCEN 007E2B                                   u4661 4DA0  
                                 u4670 4DA6                                   u6270 23D6  
                                 u4727 1772                                   u4760 17F4  
                                 u7080 3004                                   u6168 2E92  
                                 u5720 123C                                   u7321 398C  
                                 u7330 398E                                   u7218 38CE  
                                 u7090 3006                                   u6370 0126  
                                 u7228 392A                                   u5900 1462  
                                 u6390 01DA                                   u6278 23DA  
                                 u5718 120A                                   u4767 17EA  
                                 u7271 3960                                   u9007 155A  
                                 u7280 3962                                   u9017 1564  
                                 i2l66 53CE                                   u9107 2DD8  
                                 u9027 1570                                   u7380 3A00  
                                 u6900 3E04                                   u9117 2DE2  
                                 u9037 15D8                                   u5918 1466  
                                 u9207 4DEA                                   u9127 2E16  
                                 u9047 4F30                                   u8440 3B46  
                                 u9217 08E2                                   u9137 2E20  
                                 u9057 48B8                                   u9307 0DFA  
                                 u9227 09E2                                   u9147 2E46  
                                 u9067 2C84                                   u7388 3A04  
                                 u6940 3E58                                   u9317 0E24  
                                 u9237 0A1A                                   u9157 5246  
                                 u9077 2CA0                                   u6950 3E5A  
                                 u9407 10B8                                   u9327 0EE2  
                                 u9247 0A70                                   u9167 3EE2  
                                 u9087 2CD8                                   u9417 110E  
                                 u9337 0F16                                   u9257 0A9C  
                                 u9177 3F3E                                   u9097 2CF6  
                                 u6890 3E02                                   u9507 2298  
                                 u9427 1142                                   u9347 0F40  
                                 u9267 0AF2                                   u9187 3F76  
                                 u9517 22B8                                   u9437 3B6A  
                                 u9357 0F9E                                   u9277 0B26  
                                 u9197 4DB6                                   u9607 3E6C  
                                 u9527 22E6                                   u9447 3BAE  
                                 u9367 0FD2                                   u9287 0B50  
                                 u8807 1302                                   u9617 3E80  
                                 u9537 232A                                   u9457 2148  
                                 u9377 0FFC                                   u9297 0DC6  
                                 u8817 1334                                   u9707 019C  
                                 u9627 4076                                   u9547 2348  
                                 u9467 218C                                   u9387 105A  
                                 u8907 149C                                   u8827 133E  
                                 u9717 01BA                                   u9637 40BA  
                                 u9557 2376                                   u9477 21AE  
                                 u9397 108E                                   u8917 14D4  
                                 u8837 1358                                   u9807 0424  
                                 u9727 01EA                                   u9647 40DC  
                                 u9567 2390                                   u9487 21DC  
                                 u8927 150C                                   u8847 1382  
                                 u9817 044C                                   u9737 0250  
                                 u9657 002C                                   u9577 3DA6  
                                 u9497 2244                                   u8937 1514  
                                 u8857 13CE                                   u8777 118A  
                                 u9907 06C6                                   u9827 04A8  
                                 u9747 026E                                   u9667 0070  
                                 u9587 3E16                                   u8947 151E  
                                 u8867 13D6                                   u8787 12AE  
                                 u9917 06EE                                   u9837 04D0  
                                 u9757 029E                                   u9677 0092  
                                 u9597 3E2A                                   u8957 1528  
                                 u8877 1408                                   u8797 12FA  
                                 u9927 074A                                   u9847 052C  
                                 u9767 031C                                   u9687 0102  
                                 u8967 1532                                   u8887 1412  
                                 u9937 0772                                   u9857 0554  
                                 u9777 0344                                   u9697 0136  
                                 u8977 153C                                   u8897 142C  
                                 u9947 0794                                   u9867 05B0  
                                 u9787 03A0                                   u8987 1546  
                                 u9957 07E4                                   u9877 05D8  
                                 u9797 03C8                                   u8997 154E  
                                 u9967 080C                                   u9887 0642  
                                 u9977 085C                                   u9897 066A  
                                 u9987 0866                                   _RSEN 007E29  
                                 u9997 088A                            _stopSignals 5372  
                                 _Test 3B5C                                   _back 005B  
                                 _main 413E                                   _down 005D  
                                 _keys FADD                                   _time 011C  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 52F4  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 0065  
                      __end_ofi2_putch 540C                    __size_of_EEPROMTest 0002  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 311A                            i2_lcdNibble 4C20  
                      __end_of_Loading 1610                   __end_of_actuatorTest 08CA  
                                ??_arm 00AB             i2updateServoPosition@timer 0003  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 3F86  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 42C0  
                                _EEADR 000FA9                                  STR_10 FFE6  
                                STR_11 FFEA                                  STR_12 FFFA  
                                STR_20 FFEE                                  STR_13 FFDE  
                                STR_21 FAF8                                  STR_14 FFD6  
                                STR_22 FF9A                                  STR_30 FDF6  
                                STR_15 FFD2                                  STR_23 FF18  
                                STR_31 FDD4                                  STR_16 FFE2  
                                STR_24 FD3B                                  STR_32 FD19  
                                STR_40 FCD5                                  STR_17 FFF2  
                                STR_25 FE18                                  STR_33 FD2A  
                                STR_41 FCC4                                  STR_18 FFF6  
                                STR_34 FDC3                                  STR_50 FDA1  
                                STR_42 FD7F                                  STR_26 FD4C  
                                STR_43 FD7F                                  STR_35 FDC3  
                                STR_51 FFDA                                  STR_19 FFCE  
                                STR_27 FE07                                  STR_52 FFCA  
                                STR_60 FFF2                                  STR_28 FD5D  
                                STR_36 FD08                                  STR_44 FCE6  
                      __end_of___awmod 4574                                  STR_45 FCD5  
                                STR_37 FD19                                  STR_53 FFE6  
                                STR_61 FFF6                                  STR_29 FE15  
                                STR_62 FFCE                                  STR_54 FFEA  
                                STR_70 FED1                                  STR_38 FDB2  
                                STR_46 FD90                                  STR_47 FD90  
                                STR_55 FFFA                                  STR_63 FAF8  
                                STR_71 FF0A                                  STR_39 FD6E  
                                STR_56 FFDE                                  STR_64 FF7B  
                                STR_80 FE59                                  STR_48 FCF7  
                                STR_72 FC4D                                  STR_49 FCE6  
                                STR_57 FFD6                                  STR_81 FE15  
                                STR_65 FF41                                  STR_73 FEEE  
                                STR_58 FFD2                                  STR_74 FF4E  
                                STR_90 FEC2                                  STR_82 FE86  
                                STR_66 FB10                                  STR_59 FFE2  
                                STR_67 FFBC                                  STR_91 FEE0  
                                STR_75 FEB3                                  STR_83 FE29  
                                STR_84 FF86                                  STR_76 FEFC  
                                STR_68 FC80                                  STR_92 FC5E  
                                STR_85 FF86                                  STR_77 FFAD  
                                STR_93 FF5A                                  STR_69 FC91  
                                STR_78 FF0A                                  STR_86 FFA4  
                                STR_94 FC6F                                  STR_87 FFA4  
                                STR_95 FF65                                  STR_79 FF34  
                                STR_88 FF90                                  STR_96 FEA4  
                                STR_89 FF0A                                  STR_97 FBF8  
                                STR_98 FBE7                                  STR_99 FBC5  
         i2updateServoPosition@my_time 0007                                  ?_sort 0001  
                      __end_of___lldiv 437C           i2updateServoPosition@time_us 0001  
                                u10007 08B2                                  u10017 471A  
                                u10107 30BE                                  u10027 476A  
                                u10117 30FA                                  u10037 477E  
                                u10207 1BA0                                  u10127 3104  
                                u10047 2EE0                                  u10217 1BD4  
                                u10137 51FA                                  u10057 2F5C  
                                u10307 4C08                                  u10227 1C06  
                                u10147 4B78                                  u10067 2FB0  
                                u10317 38A2                                  u10237 1C52  
                                u10157 1A56                                  u10077 301A  
                                u10327 39BA                                  u10247 1C9E  
                                u10167 1AA2                                  u10087 306E  
                                _T0CON 000FD5                                  u10337 39C4  
                                u10257 1CD2                                  u10177 1AEE  
                                u10097 30B6                                  u10347 4A00  
                                u10267 1D04                                  u10187 1B22  
                      ___awdiv@divisor 0088                                  u10357 4A0A  
                                u10277 1D50                                  u10197 1B54  
                                u10367 4A36                                  u10287 1D84  
                                _T1CON 000FCD                                  u10377 4A40  
                                u10297 1DB6                                  _T2CON 000FCA  
                                _T3CON 000FB1                        __end_of___lwdiv 488C  
                      __end_of___lwmod 4AAA                                  i2l257 29BE  
                                i2l608 31A8                                  i2l870 49A6  
                                i2l849 2B90                                  i2l963 37E0  
                      ___awdiv@counter 008A                                  i2l967 3838  
                                i2l969 3858                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 1A48  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 5400  
                      __end_of_handler 3894                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 520A                        __end_of_initLCD 4DF4  
                       __CFG_EBTRB$OFF 000000                                  _debug 012D  
                           i2isdigit@c 0003                                  _getIR 488C  
                      __end_of_loadRTC 4600                        __end_of_readMAG 4DAE  
                      __end_of_dpowers FAF8                                  _first 0139  
                                _enter 005F                                  arm@on 00AC  
                      __end_of_isdigit 5234                                  _input 007D  
                                _putch 53E0                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 52AA  
                     __end_ofi2_getRTC 4970                    _log_count_pop_w_tab 006B  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 213A  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 4F76                            Loading@addr 00B3  
                     _count_can_no_lab 0123                   printSortTimer@i_1187 0047  
                 __size_of_EEPROM_read 0018                        __initialization 4CC8  
                         __end_of_Test 3C7C                     __size_ofi2_lcdInst 000C  
                         __end_of_main 4202                           __end_of_keys FAEE  
                         __end_of_sort 5316                             i2printf@ap 0020  
                           i2printf@cp 001E                          PusherTest@res 00AD  
                   __size_ofi2_isdigit 001E                       PusherTest@i_1798 00B3  
                          _BlockerTest 3894                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00C4  
                        __activetblptr 000003             __size_of_updateServoStates 01C8  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                          ?i2_delay_ms 0001                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FC1A  
                               STR_101 FC2B                                 STR_110 FCB3  
                               STR_102 FBA3                                 STR_103 FE39  
                               STR_111 FB25                                 STR_104 FBD6  
                               STR_120 FB49                                 STR_112 FB37  
                               STR_121 FB37                                 STR_113 FF70  
                               STR_105 FBB4                                 STR_106 FBD6  
                               STR_114 FE59                                 STR_122 FB6D  
                               _ADRESH 000FC4                                 STR_115 FE15  
                               STR_107 FE95                                 STR_123 FB5B  
                               STR_116 FE59                                 STR_124 FB6D  
                               STR_108 FE77                                 _EEADRH 000FAA  
                               STR_117 FE15                                 STR_125 FB6D  
                               STR_109 FE68                                 STR_126 FC09  
                               STR_118 FC09                                 _ADRESL 000FC3  
                               STR_127 FCA2                                 STR_119 FC3C  
                               STR_128 FFB5                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 4FD6              i2_change_state_to_menu_22 4FA6  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1045 53B2  
                               i2l1437 1FA6                                 i2l1884 4CBE  
                               i2l1894 4E2C                                 i2l6231 52CA  
                               i2l7201 344E                                 i2l7211 3474  
                               i2l7051 320A                                 i2l7043 31B2  
                               i2l7221 3496                                 i2l7205 346A  
                               i2l7061 3278                                 i2l7053 3220  
                               i2l7045 31C8                                 i2l7037 3146  
                               i2l6255 534E                                 i2l7215 3488  
                               i2l7151 33A2                                 i2l7063 328E  
                               i2l7055 3236                                 i2l7047 31DE  
                               i2l7071 3314                                 i2l6265 4C8C  
                               i2l6601 1F1E                                 i2l7217 348C  
                               i2l7161 33C0                                 i2l7065 32A4  
                               i2l7057 324C                                 i2l7049 31F4  
                               i2l9001 2762                                 i2l6531 4946  
                               i2l6267 4C94                                 i2l6603 1F30  
                               i2l7251 3504                                 i2l7243 34E0  
                               i2l7235 34BC                                 i2l7171 33DE  
                               i2l7163 33C6                                 i2l7147 338E  
                               i2l7139 3374                                 i2l7059 3262  
                               i2l6277 4CB4                                 i2l6269 4C98  
                               i2l6293 4E22                                 i2l6285 4E02  
                               i2l6613 1F70                                 i2l7229 34AE  
                               i2l7165 33CC                                 i2l7149 339E  
                               i2l7157 33AC                                 i2l7069 32BA  
                               i2l9101 28D4                                 i2l9021 279A  
                               i2l9013 277E                                 i2l9005 2770  
                               i2l6527 4936                                 i2l6287 4E0A  
                               i2l6631 1FF0                                 i2l6607 1F5A  
                               i2l7247 34F2                                 i2l7239 34CE  
                               i2l7167 33D2                                 i2l7175 33E4  
                               i2l6537 4960                                 i2l6289 4E0E  
                               i2l6625 1FD4                                 i2l6609 1F6C  
                               i2l6561 1DF4                                 i2l7169 33D8  
                               i2l7257 350E                                 i2l9121 2922  
                               i2l9113 2906                                 i2l9105 28E2  
                               i2l9041 27E2                                 i2l9033 27C6  
                               i2l9025 27AA                                 i2l9017 278C  
                               i2l6643 2022                                 i2l6571 1E2C  
                               i2l6555 1DD6                                 i2l7195 3440  
                               i2l7187 3428                                 i2l6661 207E  
                               i2l6653 2060                                 i2l6629 1FEC  
                               i2l6565 1DFA                                 i2l9125 2930  
                               i2l9117 2914                                 i2l9109 28F0  
                               i2l9061 2830                                 i2l9053 2814  
                               i2l9045 27F0                                 i2l9037 27D4  
                               i2l9029 27B8                                 i2l6655 2068  
                               i2l6591 1EC4                                 i2l6559 1DE6  
                               i2l9135 2954                                 i2l6673 20B0  
                               i2l6649 203C                                 i2l9129 2946  
                               i2l9081 2886                                 i2l9073 2862  
                               i2l9065 2846                                 i2l9057 2822  
                               i2l9049 2806                                 i2l8611 535A  
                               i2l6683 2116                                 i2l6667 2094  
                               i2l6587 1EB6                                 i2l6579 1E8E  
                               i2l9323 29DE                                 i2l6691 4F56  
                               i2l8603 49C0                                 i2l6669 209C  
                               i2l6677 20C2                                 i2l6597 1F0E  
                               i2l6589 1EC0                                 i2l6685 211E  
                               i2l9341 2B06                                 i2l6861 3D3C  
                               i2l9093 28B0                                 i2l9085 2894  
                               i2l9077 2870                                 i2l9069 2854  
                               i2l9421 3630                                 i2l9405 35A6  
                               i2l9413 35C4                                 i2l8615 536A  
                               i2l6679 20C8                                 i2l6599 1F18  
                               i2l9319 29CE                                 i2l9407 35BA  
                               i2l9415 360E                                 i2l9353 2B5E  
                               i2l9361 2B92                                 i2l9329 2A38  
                               i2l6873 3D80                                 i2l6865 3D4C  
                               i2l6689 4F4E                                 i2l9097 28C6  
                               i2l9089 28A2                                 i2l9433 367C  
                               i2l9417 3618                                 i2l9427 3656  
                               i2l9523 377E                                 i2l9531 3798  
                               i2l9365 2BC6                                 i2l9525 3782  
                               i2l9367 2BCC                                 i2l9447 36D2  
                               i2l9391 3570                                 i2l9393 357A  
                               i2l9545 37B4                                 i2l9387 355A  
                               i2l8597 498E                                 i2l9573 380C  
                               i2l9399 3590                                 i2l9567 37FE  
                               i2l9595 3856                                 i2l8993 2746  
                               i2l8987 2732                                 i2l8997 2754  
                               i2l8989 2738                _f_most_recent_sort_time 0137  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 525C  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 52F4                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 4068  
                               ___wmul 4EDC                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 4F12  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 4600                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 5338  
                               _initUI 4F76                                 _readIR 4D16  
                               _logRun 3A18                                 getIR@i 0087  
                               clear_0 4CEE                                 clear_1 4CFA  
                               clear_2 4D06                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestA5 4B6A  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1610                              ??_handler 004B  
              __size_of_initGlobalVars 00AC                           ?_retrieveLog 0007  
                               _strcpy 4EA6                     __size_of_SpeedTest 0084  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 5284  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 525C                            ?_BothServos 0001  
                         ??_EEPROMTest 0080                              ??_isdigit 0080  
                   __size_of_PortTests 0084                      __end_ofi2___lwdiv 4CC8  
                     __end_of_printRTC 2702                           __mediumconst FADC  
                    __end_ofi2___lwmod 4E36                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 0069                  __end_of_algorithmTest 413E  
                    __end_ofi2_lcdInst 5418                             _PusherTest 2ED2  
                    __end_ofi2_isdigit 5356                             __accesstop 0080  
              __end_of__initialization 4D0C                          ?_inputHandler 002A  
                _most_recent_sort_time 006D                          ___rparam_used 000001  
              printSortTimer@start_sec 003B                  __size_of_actuatorTest 08B8  
                        i2_EEPROM_read 53A4                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                     __end_of_EEPROMTest 5456  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E8  
                  __size_ofi2_delay_ms 001C                           __pidataBANK1 542C  
                  BlockerTest@cam_flag 00AE                          __end_of_getIR 48FE  
                          i2printRTC@i 0041                          _initSortTimer 4428  
          __end_of_updateServoPosition 470C                          __end_of_putch 53F0  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 2ED2                             __end_of_UI 116C  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 51DE  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 51B2  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0127                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 0012  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
       __size_ofi2_updateServoPosition 0070          __end_ofi2_updateServoPosition 49E0  
                         _EEPROM_write 3E9E               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                                UI@F3235 0141  
                    __end_of_SpeedTest 4790                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 0384                      __end_of_PortTests 4814  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_412 00CA                                UI@i_413 00CB  
                              UI@i_431 00CC                                UI@i_440 00D1  
                              UI@i_432 00CD                                UI@i_409 00C9  
                              UI@i_443 00D2                                UI@i_435 00CE  
                              UI@i_444 00D3                                UI@i_436 00CF  
                              UI@i_447 00D4                                UI@i_439 00D0  
                              UI@i_448 00D5                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                          ?_PortTestA5 0001                                ?_printf 008E  
                              _UI$2425 00C6                                ?_strcpy 0080  
                      _pan_servo_state 006F                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                                i2l10061 3606  
                              i2l10071 2994                                i2l10063 36EA  
                              i2l10055 35E8                                i2l10073 29B0  
                              i2l10065 36FA                                i2l10057 35F2  
                              i2l10059 35FC                                i2l10077 33FC  
                              i2l10069 2972                                i2l10079 3418  
                            ?_delay_ms 0001                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                          ?_PusherTest 0001                                _SSPSTAT 000FC7  
                              _RTCflag 00EA                                i2_putch 5400  
                            ?_initTime 0080                        _f_loadingNewCan 00F0  
                      i2printRTC@month 003D                  __size_of_Distribution 00E2  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 4A48  
                              _Loading 116C            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 4202                                ___awmod 44D2  
                           _initServos 4BC6                                ___lldiv 42C0  
                      __size_of___wmul 0036                        __size_of_getMAG 0032  
                              ___lwdiv 4814                                ___lwmod 4A48  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                           ?_BlockerTest 0001  
                      __size_of_initUI 0030                        __size_of_readIR 004C  
                              __pcinit 4CC8                   i2EEPROM_read@address 0001  
                      __size_of_logRun 0144                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 437C  
                              _lcdInst 53F0                                _handler 0008  
                              __ptext0 413E                                __ptext1 5372  
                              __ptext2 52F4                                __ptext3 116C  
                              __ptext4 4428                                __ptext5 437C  
                              __ptext6 4F12                                __ptext7 488C  
                              __ptext8 4D16                                __ptext9 2C6A  
                      __size_of_printf 0438                                _readADC 51DE  
                      __size_of_strcpy 0036                                _initLCD 4DAE  
                              _cur_can 012B                                _loadRTC 4574  
                              _readMAG 4D62                                _dpowers FAEE  
                   actuatorTest@i_1750 00B1                     actuatorTest@i_1752 00B2  
                   actuatorTest@i_1761 00B8                     actuatorTest@i_1753 00B3  
                   actuatorTest@i_1762 00B9                     actuatorTest@i_1746 00AE  
                   actuatorTest@i_1771 00BE                     actuatorTest@i_1755 00B4  
                   actuatorTest@i_1747 00AF                     actuatorTest@i_1739 00AD  
                         __size_of_arm 0106                     actuatorTest@i_1772 00BF  
                   actuatorTest@i_1756 00B5                     actuatorTest@i_1765 00BA  
                   actuatorTest@i_1749 00B0                     actuatorTest@i_1766 00BB  
                   actuatorTest@i_1758 00B6                     actuatorTest@i_1775 00C0  
                   actuatorTest@i_1759 00B7                     actuatorTest@i_1776 00C1  
                   actuatorTest@i_1768 00BC                     actuatorTest@i_1769 00BD  
                   actuatorTest@i_1778 00C2                     actuatorTest@i_1779 00C3  
                              _isdigit 520A                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 011C  
                         ??i2_delay_ms 0001                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 3F86                         __pintcode_body 3704  
                 end_of_initialization 4D0C                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 3704                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 005C  
                            i2u1040_47 4C38                              i2u1041_47 4C42  
                            i2u1042_47 4C64                              i2u1043_47 4C6E  
                            i2u1044_47 5362                              i2u1038_47 3394  
                            i2u1039_47 2B38              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                   __end_ofi2_delay_ms 5372                 __end_of_initGlobalVars 4428  
                           _sensorTest 213A                    __size_of_PusherTest 0248  
                           _servoTimes 00DA                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 353C  
                         ??_BothServos 00AB                  __end_of_machineConfig 4B0A  
                           _updateMenu 2702                      i2_I2C_Master_Read 52AA  
                            _IR_signal 00E6                      i2_I2C_Master_Wait 53CE  
                    i2_I2C_Master_Stop 5444                      i2___lwdiv@divisor 0008  
                      _log_count_total 013F                              i2___lwdiv 4C76  
                            i2___lwmod 4DF4                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 3350                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 540C                          Loading@i_1160 00BA  
                        Loading@i_1161 00BC                          Loading@i_1163 00BE  
                        Loading@i_1149 00B6                          Loading@i_1158 00B8  
                           _total_time 00F8                            printf@width 00A9  
                 __size_of_stopSignals 001A                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 5338                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 1DCC                            PusherTest@i 00B1  
                  __end_of_EEPROM_read 53A4                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 4F12  
                       __end_of_getMAG 4F44                         __end_of_getRTC 4686  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 4FA6  
                       __end_of_readIR 4D62                         __end_of_logRun 3B5C  
                     i2___wmul@product 0005                         __end_of_printf 1A48  
                         i2printf@flag 0026                         __end_of_strcpy 4EDC  
            __end_ofi2_I2C_Master_Read 52D0              __end_ofi2_I2C_Master_Wait 53E0  
                         i2printf@prec 001D                    start_initialization 4CC8  
            __end_ofi2_I2C_Master_Stop 544C                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 0125  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                          __end_of_arm 3E9E                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1399 00B0  
                i2I2C_Master_Read@temp 0003                   BlockerTest@cond_flag 00B0  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                            _SpeedTest 470C                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                              _PortTests 4790  
                          ?_sensorTest 0001                            __pdataBANK1 0141  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                             ID@i_1174 0086                               ID@i_1175 0088  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0045  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                 __size_of_BlockerTest 0184                    _printSortTimer$2557 0043  
                          __pbssCOMRAM 005B           __size_of_updateServoPosition 0086  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 02A8                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$2067 0081  
                         ??_PusherTest 00AB                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 003F  
                    printSortTimer@sec 0041                    __size_of_initServos 005A  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                     _tilt_servo_state 0075                           i2strcpy@from 0003  
                             ?i2_putch 0001                     PusherTest@res_1794 00AF  
                      _count_pop_w_tab 0129                            _EEPROM_read 538C  
                   __end_of_PortTestA5 4BC6                       _I2C_Master_Start 543C  
                            _f_lastCan 00EE                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 5418  
                    __size_of_initTime 0022                  i2_updateServoPosition 4970  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FADC                              _lcdNibble 49E0  
                __size_of_inputHandler 01EC                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                       _sensor_outputs 00E2                               ?___lwdiv 0080  
                           ?_PortTests 0001                               ?___lwmod 0087  
                    __size_of_printRTC 02CA                     __end_of_PusherTest 311A  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 013B                              _cur_state 00EC  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0072  
                        _algorithmTest 4068                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 0268                            __size_of_UI 08A2  
                  __size_of_sensorTest 02FE             __end_ofi2_I2C_Master_Start 5454  
           __end_ofi2_I2C_Master_Write 542C                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATBbits 000F8A                               _LATCbits 000F8B  
                             _LATDbits 000F8C                               _LATEbits 000F8D  
                         _inputHandler 3350                            ??i2_isdigit 0001  
                         BlockerTest@i 00AC                               i2u513_40 1F52  
                             i2u513_47 1F48                               _PIR2bits 000FA1  
                             i2u509_40 1EF2                               i2u509_47 1EE8  
                             i2u454_40 52C8                               i2u554_40 31A8  
                             i2u852_40 2B68                               i2u854_40 2B90  
                             i2u853_48 2B6A                    __size_of_updateMenu 02C0  
                       _log_completion 0063                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 5284  
                        lcdNibble@data 0081                               i2_getRTC 48FE  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               Loading@i 00C2  
                             Loading@j 00C0                               i2_printf 1DCC  
                             i2_strcpy 4F44                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 4CDC  
                            readIR@res 0084                 ?i2_updateServoPosition 0001  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 53BA                            _count_total 00FE  
               i2delay_ms@milliseconds 0002                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 04A4  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                            ??_SpeedTest 00AB  
                __end_of_initSortTimer 44D2                           ??_initServos 0088  
                          ??_PortTests 0080                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 5036  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 4E6E  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 4E36  
              _change_state_to_menu_23 5006                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 5126                _change_state_to_logs_12 50F6  
              _change_state_to_logs_22 50C6                _change_state_to_logs_23 5184  
              _change_state_to_logs_33 5096                _change_state_to_logs_34 5066  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 388C                             _EEPROMTest 5454  
                      _I2C_Master_Init 4B0A                       __size_of_readADC 002C  
                      _I2C_Master_Read 5156                       __size_of_initLCD 0046  
                         _f_ID_receive 012F                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 53BA  
                      _I2C_Master_Stop 5434                       __size_of_isdigit 002A  
                             _delay_ms 5234                         _printSortTimer 29C2  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 3D98                               __ptext10 5234  
                             __ptext11 3F86                               __ptext20 51B2  
                             __ptext12 4AAA                               __ptext21 5316  
                             __ptext13 3A18                               __ptext30 5156  
                             __ptext22 4DAE                               __ptext14 3E9E  
                             __ptext31 53BA                               __ptext23 08CA  
                             __ptext15 538C                               __ptext40 4068  
                             __ptext32 4E36                               __ptext24 2438  
                             __ptext16 4F76                               __ptext41 0012  
                             __ptext33 4E6E                               __ptext25 4EA6  
                             __ptext17 4574                               __ptext50 4686  
                             __ptext42 470C                               __ptext34 44D2  
                             __ptext26 4600                               __ptext18 4B0A  
                             __ptext51 3894                               __ptext43 2ED2  
                             __ptext35 4202                               __ptext27 5418  
                             __ptext19 42C0                               __ptext52 1610  
                             __ptext44 51DE                               __ptext36 3B5C  
                             __ptext28 5434                               __ptext61 353C  
                             __ptext53 53E0                               __ptext45 4790  
                             __ptext37 213A                               __ptext29 543C  
                             __ptext70 5006                               __ptext62 4970  
                             __ptext54 520A                               __ptext46 4B6A  
                             __ptext38 4D62                               __ptext71 5036  
                             __ptext63 2702                               __ptext55 4EDC  
                             __ptext47 5454                               __ptext39 3D98  
                             __ptext80 53A4                               __ptext72 5066  
                             __ptext64 525C                               __ptext56 4A48  
                             __ptext48 1A48                               __ptext81 29C2  
                             __ptext73 5096                               __ptext65 311A  
                             __ptext57 4814                               __ptext49 4BC6  
                             __ptext90 48FE                               __ptext82 1DCC  
                             __ptext74 5184                               __ptext66 4F44  
                             __ptext58 53F0                               __ptext91 5422  
                             __ptext83 5400                               __ptext75 50C6  
                             __ptext67 3350                               __ptext59 49E0  
                             __ptext92 5444                               __ptext84 5338  
                             __ptext76 50F6                               __ptext68 4FA6  
                             __ptext93 544C                               __ptext85 5284  
                             __ptext77 5126                               __ptext69 4FD6  
                             __ptext94 52AA                               __ptext86 4DF4  
                             __ptext78 52D0                               __ptext95 53CE  
                             __ptext87 4C76                               __ptext79 3C7C  
                             __ptext96 5356                               __ptext88 540C  
                             __ptext89 4C20                               _dispLogs 52D0  
                        ?_actuatorTest 0001                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$2067 0002  
                   __end_of_initServos 4C20                          __size_of_Test 0120  
                        ?_EEPROM_write 00AB                               _initTime 5316  
                        __size_of_main 00C4                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F6  
                  _updateServoPosition 4686                 __size_of_machineConfig 0060  
                        ??i2_lcdNibble 0001                               _printRTC 2438  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F4                     _f_can_coming_to_ID 0131  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 5006      __end_ofi2_change_state_to_menu_22 4FD6  
                             loadRTC@i 0096                 __end_of_printSortTimer 2C6A  
                            putch@data 0082               __end_of_I2C_Master_Start 5444  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 5422  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00E8                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                  _servo_timer_counter 0071                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 2438  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 538C  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 29C2                __end_of_I2C_Master_Init 4B6A  
              __end_of_I2C_Master_Read 5184                __end_of_I2C_Master_Wait 53CE  
                        ??_BlockerTest 00AB                __end_of_I2C_Master_Stop 543C  
                          lcdInst@data 0082                          printRTC@F3226 0145  
                         retrieveLog@i 000E                            _retrieveLog 3C7C  
                  __end_ofi2_lcdNibble 4C76                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                     _servo_timer_target 0073  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                          ?_EEPROMTest 0001                        ___lwmod@divisor 0089  
                    _f_can_distributed 0135                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 4AAA  
                      ___lwmod@counter 008B                      _updateServoStates 353C  
                        printRTC@month 00BE                          ?_Distribution 0001  
                   ?_updateServoStates 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                    ??_updateServoStates 0009  
                   i2printRTC@INT_time 002D  
