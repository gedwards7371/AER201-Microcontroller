

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Mar 19 18:00:01 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   107                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   108                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   109  0000                     
   110                           ; Version 1.40
   111                           ; Generated 01/12/2016 GMT
   112                           ; 
   113                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   114                           ; All rights reserved.
   115                           ; 
   116                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   117                           ; 
   118                           ; Redistribution and use in source and binary forms, with or without modification, are
   119                           ; permitted provided that the following conditions are met:
   120                           ; 
   121                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   122                           ;        conditions and the following disclaimer.
   123                           ; 
   124                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   125                           ;        of conditions and the following disclaimer in the documentation and/or other
   126                           ;        materials provided with the distribution.
   127                           ; 
   128                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   129                           ;        software without specific prior written permission.
   130                           ; 
   131                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   132                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   133                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   134                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   135                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   136                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   137                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   138                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   139                           ; 
   140                           ; 
   141                           ; Code-generator required, PIC18F4620 Definitions
   142                           ; 
   143                           ; SFR Addresses
   144  0000                     
   145                           	psect	idataBANK1
   146  004772                     __pidataBANK1:
   147                           	opt stack 0
   148                           
   149                           ;initializer for UI@F3225
   150  004772  4D                 	db	77
   151  004773  4D                 	db	77
   152  004774  4D                 	db	77
   153  004775  00                 	db	0
   154                           
   155                           ;initializer for printRTC@F3216
   156  004776  4D                 	db	77
   157  004777  4D                 	db	77
   158  004778  4D                 	db	77
   159  004779  00                 	db	0
   160                           
   161                           	psect	mediumconst
   162  00FB20                     __pmediumconst:
   163                           	opt stack 0
   164  00FB20  00                 	db	0
   165  00FB21                     _keys:
   166                           	opt stack 0
   167  00FB21  31                 	db	49
   168  00FB22  32                 	db	50
   169  00FB23  33                 	db	51
   170  00FB24  41                 	db	65
   171  00FB25  34                 	db	52
   172  00FB26  35                 	db	53
   173  00FB27  36                 	db	54
   174  00FB28  42                 	db	66
   175  00FB29  37                 	db	55
   176  00FB2A  38                 	db	56
   177  00FB2B  39                 	db	57
   178  00FB2C  43                 	db	67
   179  00FB2D  2A                 	db	42
   180  00FB2E  30                 	db	48
   181  00FB2F  23                 	db	35
   182  00FB30  44                 	db	68
   183  00FB31  00                 	db	0
   184  00FB32                     __end_of_keys:
   185                           	opt stack 0
   186  00FB32                     _dpowers:
   187                           	opt stack 0
   188  00FB32  0001               	dw	1
   189  00FB34  000A               	dw	10
   190  00FB36  0064               	dw	100
   191  00FB38  03E8               	dw	1000
   192  00FB3A  2710               	dw	10000
   193  00FB3C                     __end_of_dpowers:
   194                           	opt stack 0
   195  0000                     _ADCON0	set	4034
   196  0000                     _ADCON0bits	set	4034
   197  0000                     _ADCON1	set	4033
   198  0000                     _ADCON2	set	4032
   199  0000                     _ADRESH	set	4036
   200  0000                     _ADRESL	set	4035
   201  0000                     _CMCONbits	set	4020
   202  0000                     _CVRCON	set	4021
   203  0000                     _EEADR	set	4009
   204  0000                     _EEADRH	set	4010
   205  0000                     _EECON1bits	set	4006
   206  0000                     _EECON2	set	4007
   207  0000                     _EEDATA	set	4008
   208  0000                     _INTCONbits	set	4082
   209  0000                     _LATA	set	3977
   210  0000                     _LATAbits	set	3977
   211  0000                     _LATB	set	3978
   212  0000                     _LATC	set	3979
   213  0000                     _LATCbits	set	3979
   214  0000                     _LATD	set	3980
   215  0000                     _LATDbits	set	3980
   216  0000                     _LATE	set	3981
   217  0000                     _LATEbits	set	3981
   218  0000                     _OSCCON	set	4051
   219  0000                     _OSCTUNEbits	set	3995
   220  0000                     _PIR2bits	set	4001
   221  0000                     _PORTAbits	set	3968
   222  0000                     _PORTB	set	3969
   223  0000                     _PORTBbits	set	3969
   224  0000                     _SSPADD	set	4040
   225  0000                     _SSPBUF	set	4041
   226  0000                     _SSPCON1	set	4038
   227  0000                     _SSPCON2	set	4037
   228  0000                     _SSPSTAT	set	4039
   229  0000                     _T0CON	set	4053
   230  0000                     _T1CON	set	4045
   231  0000                     _T3CON	set	4017
   232  0000                     _TMR0H	set	4055
   233  0000                     _TMR0L	set	4054
   234  0000                     _TMR1H	set	4047
   235  0000                     _TMR1L	set	4046
   236  0000                     _TMR3H	set	4019
   237  0000                     _TMR3L	set	4018
   238  0000                     _TRISA	set	3986
   239  0000                     _TRISB	set	3987
   240  0000                     _TRISC	set	3988
   241  0000                     _TRISD	set	3989
   242  0000                     _TRISE	set	3990
   243  0000                     _ACKDT	set	32301
   244  0000                     _ACKEN	set	32300
   245  0000                     _ADIE	set	31982
   246  0000                     _INT1IE	set	32643
   247  0000                     _INT1IF	set	32640
   248  0000                     _PEIE	set	32662
   249  0000                     _PEN	set	32298
   250  0000                     _RCEN	set	32299
   251  0000                     _RSEN	set	32297
   252  0000                     _SEN	set	32296
   253  0000                     _TMR0IE	set	32661
   254  0000                     _TMR0IF	set	32658
   255  0000                     _TMR0ON	set	32431
   256  0000                     _TMR1IE	set	31976
   257  0000                     _TMR1IF	set	31984
   258  0000                     _TMR1ON	set	32360
   259  0000                     _TMR2IE	set	31977
   260  0000                     _TMR3IE	set	32001
   261  0000                     _TMR3IF	set	32009
   262  0000                     _TMR3ON	set	32136
   263  0000                     _TRISC3	set	31907
   264  0000                     _TRISC4	set	31908
   265  0000                     _nRBPU	set	32655
   266  00FB3C                     STR_21:
   267  00FB3C  25                 	db	37
   268  00FB3D  30                 	db	48	;'0'
   269  00FB3E  32                 	db	50	;'2'
   270  00FB3F  64                 	db	100	;'d'
   271  00FB40  25                 	db	37
   272  00FB41  73                 	db	115	;'s'
   273  00FB42  20                 	db	32
   274  00FB43  7C                 	db	124
   275  00FB44  20                 	db	32
   276  00FB45  25                 	db	37
   277  00FB46  30                 	db	48	;'0'
   278  00FB47  32                 	db	50	;'2'
   279  00FB48  64                 	db	100	;'d'
   280  00FB49  3A                 	db	58	;':'
   281  00FB4A  25                 	db	37
   282  00FB4B  30                 	db	48	;'0'
   283  00FB4C  32                 	db	50	;'2'
   284  00FB4D  64                 	db	100	;'d'
   285  00FB4E  3A                 	db	58	;':'
   286  00FB4F  25                 	db	37
   287  00FB50  30                 	db	48	;'0'
   288  00FB51  32                 	db	50	;'2'
   289  00FB52  64                 	db	100	;'d'
   290  00FB53  00                 	db	0
   291  00FB54                     STR_66:
   292  00FB54  28                 	db	40
   293  00FB55  64                 	db	100	;'d'
   294  00FB56  61                 	db	97	;'a'
   295  00FB57  74                 	db	116	;'t'
   296  00FB58  61                 	db	97	;'a'
   297  00FB59  3A                 	db	58	;':'
   298  00FB5A  20                 	db	32
   299  00FB5B  25                 	db	37
   300  00FB5C  75                 	db	117	;'u'
   301  00FB5D  2C                 	db	44
   302  00FB5E  20                 	db	32
   303  00FB5F  61                 	db	97	;'a'
   304  00FB60  64                 	db	100	;'d'
   305  00FB61  64                 	db	100	;'d'
   306  00FB62  72                 	db	114	;'r'
   307  00FB63  3A                 	db	58	;':'
   308  00FB64  20                 	db	32
   309  00FB65  25                 	db	37
   310  00FB66  75                 	db	117	;'u'
   311  00FB67  29                 	db	41
   312  00FB68  00                 	db	0
   313  00FB69                     STR_27:
   314  00FB69  4E                 	db	78	;'N'
   315  00FB6A  4F                 	db	79	;'O'
   316  00FB6B  20                 	db	32
   317  00FB6C  4C                 	db	76	;'L'
   318  00FB6D  41                 	db	65	;'A'
   319  00FB6E  42                 	db	66	;'B'
   320  00FB6F  3A                 	db	58	;':'
   321  00FB70  20                 	db	32
   322  00FB71  25                 	db	37
   323  00FB72  64                 	db	100	;'d'
   324  00FB73  7C                 	db	124
   325  00FB74  4C                 	db	76	;'L'
   326  00FB75  41                 	db	65	;'A'
   327  00FB76  42                 	db	66	;'B'
   328  00FB77  3A                 	db	58	;':'
   329  00FB78  20                 	db	32
   330  00FB79  25                 	db	37
   331  00FB7A  64                 	db	100	;'d'
   332  00FB7B  00                 	db	0
   333  00FB7C                     STR_25:
   334  00FB7C  4E                 	db	78	;'N'
   335  00FB7D  4F                 	db	79	;'O'
   336  00FB7E  20                 	db	32
   337  00FB7F  54                 	db	84	;'T'
   338  00FB80  41                 	db	65	;'A'
   339  00FB81  42                 	db	66	;'B'
   340  00FB82  3A                 	db	58	;':'
   341  00FB83  20                 	db	32
   342  00FB84  25                 	db	37
   343  00FB85  64                 	db	100	;'d'
   344  00FB86  7C                 	db	124
   345  00FB87  54                 	db	84	;'T'
   346  00FB88  41                 	db	65	;'A'
   347  00FB89  42                 	db	66	;'B'
   348  00FB8A  3A                 	db	58	;':'
   349  00FB8B  20                 	db	32
   350  00FB8C  25                 	db	37
   351  00FB8D  64                 	db	100	;'d'
   352  00FB8E  00                 	db	0
   353  00FB8F                     STR_111:
   354  00FB8F  44                 	db	68	;'D'
   355  00FB90  20                 	db	32
   356  00FB91  57                 	db	87	;'W'
   357  00FB92  49                 	db	73	;'I'
   358  00FB93  4C                 	db	76	;'L'
   359  00FB94  4C                 	db	76	;'L'
   360  00FB95  20                 	db	32
   361  00FB96  52                 	db	82	;'R'
   362  00FB97  45                 	db	69	;'E'
   363  00FB98  54                 	db	84	;'T'
   364  00FB99  55                 	db	85	;'U'
   365  00FB9A  52                 	db	82	;'R'
   366  00FB9B  4E                 	db	78	;'N'
   367  00FB9C  20                 	db	32
   368  00FB9D  20                 	db	32
   369  00FB9E  20                 	db	32
   370  00FB9F  20                 	db	32
   371  00FBA0  00                 	db	0
   372  00FBA1                     STR_112:
   373  00FBA1  4F                 	db	79	;'O'
   374  00FBA2  54                 	db	84	;'T'
   375  00FBA3  48                 	db	72	;'H'
   376  00FBA4  45                 	db	69	;'E'
   377  00FBA5  52                 	db	82	;'R'
   378  00FBA6  20                 	db	32
   379  00FBA7  53                 	db	83	;'S'
   380  00FBA8  45                 	db	69	;'E'
   381  00FBA9  54                 	db	84	;'T'
   382  00FBAA  53                 	db	83	;'S'
   383  00FBAB  20                 	db	32
   384  00FBAC  52                 	db	82	;'R'
   385  00FBAD  41                 	db	65	;'A'
   386  00FBAE  35                 	db	53	;'5'
   387  00FBAF  20                 	db	32
   388  00FBB0  20                 	db	32
   389  00FBB1  20                 	db	32
   390  00FBB2  00                 	db	0
   391  00FBB3                     STR_3:
   392  00FBB3  2D                 	db	45
   393  00FBB4  2D                 	db	45
   394  00FBB5  20                 	db	32
   395  00FBB6  4C                 	db	76	;'L'
   396  00FBB7  4F                 	db	79	;'O'
   397  00FBB8  47                 	db	71	;'G'
   398  00FBB9  20                 	db	32
   399  00FBBA  25                 	db	37
   400  00FBBB  32                 	db	50	;'2'
   401  00FBBC  64                 	db	100	;'d'
   402  00FBBD  20                 	db	32
   403  00FBBE  48                 	db	72	;'H'
   404  00FBBF  45                 	db	69	;'E'
   405  00FBC0  52                 	db	82	;'R'
   406  00FBC1  45                 	db	69	;'E'
   407  00FBC2  2D                 	db	45
   408  00FBC3  2D                 	db	45
   409  00FBC4  00                 	db	0
   410  00FBC5                     STR_1:
   411  00FBC5  52                 	db	82	;'R'
   412  00FBC6  45                 	db	69	;'E'
   413  00FBC7  53                 	db	83	;'S'
   414  00FBC8  55                 	db	85	;'U'
   415  00FBC9  4C                 	db	76	;'L'
   416  00FBCA  54                 	db	84	;'T'
   417  00FBCB  53                 	db	83	;'S'
   418  00FBCC  20                 	db	32
   419  00FBCD  49                 	db	73	;'I'
   420  00FBCE  4E                 	db	78	;'N'
   421  00FBCF  20                 	db	32
   422  00FBD0  4C                 	db	76	;'L'
   423  00FBD1  4F                 	db	79	;'O'
   424  00FBD2  47                 	db	71	;'G'
   425  00FBD3  20                 	db	32
   426  00FBD4  25                 	db	37
   427  00FBD5  64                 	db	100	;'d'
   428  00FBD6  00                 	db	0
   429  00FBD7                     STR_102:
   430  00FBD7  4D                 	db	77	;'M'
   431  00FBD8  49                 	db	73	;'I'
   432  00FBD9  44                 	db	68	;'D'
   433  00FBDA  20                 	db	32
   434  00FBDB  2D                 	db	45
   435  00FBDC  2D                 	db	45
   436  00FBDD  20                 	db	32
   437  00FBDE  32                 	db	50	;'2'
   438  00FBDF  73                 	db	115	;'s'
   439  00FBE0  20                 	db	32
   440  00FBE1  20                 	db	32
   441  00FBE2  20                 	db	32
   442  00FBE3  20                 	db	32
   443  00FBE4  20                 	db	32
   444  00FBE5  20                 	db	32
   445  00FBE6  20                 	db	32
   446  00FBE7  00                 	db	0
   447  00FBE8                     STR_105:
   448  00FBE8  44                 	db	68	;'D'
   449  00FBE9  52                 	db	82	;'R'
   450  00FBEA  4F                 	db	79	;'O'
   451  00FBEB  50                 	db	80	;'P'
   452  00FBEC  20                 	db	32
   453  00FBED  2D                 	db	45
   454  00FBEE  2D                 	db	45
   455  00FBEF  20                 	db	32
   456  00FBF0  32                 	db	50	;'2'
   457  00FBF1  73                 	db	115	;'s'
   458  00FBF2  20                 	db	32
   459  00FBF3  20                 	db	32
   460  00FBF4  20                 	db	32
   461  00FBF5  20                 	db	32
   462  00FBF6  20                 	db	32
   463  00FBF7  20                 	db	32
   464  00FBF8  00                 	db	0
   465  00FBF9                     STR_99:
   466  00FBF9  4C                 	db	76	;'L'
   467  00FBFA  45                 	db	69	;'E'
   468  00FBFB  46                 	db	70	;'F'
   469  00FBFC  54                 	db	84	;'T'
   470  00FBFD  20                 	db	32
   471  00FBFE  2D                 	db	45
   472  00FBFF  2D                 	db	45
   473  00FC00  20                 	db	32
   474  00FC01  32                 	db	50	;'2'
   475  00FC02  73                 	db	115	;'s'
   476  00FC03  20                 	db	32
   477  00FC04  20                 	db	32
   478  00FC05  20                 	db	32
   479  00FC06  20                 	db	32
   480  00FC07  20                 	db	32
   481  00FC08  20                 	db	32
   482  00FC09  00                 	db	0
   483  00FC0A                     STR_104:
   484  00FC0A  4C                 	db	76	;'L'
   485  00FC0B  45                 	db	69	;'E'
   486  00FC0C  56                 	db	86	;'V'
   487  00FC0D  45                 	db	69	;'E'
   488  00FC0E  4C                 	db	76	;'L'
   489  00FC0F  20                 	db	32
   490  00FC10  2D                 	db	45
   491  00FC11  2D                 	db	45
   492  00FC12  20                 	db	32
   493  00FC13  32                 	db	50	;'2'
   494  00FC14  73                 	db	115	;'s'
   495  00FC15  20                 	db	32
   496  00FC16  20                 	db	32
   497  00FC17  20                 	db	32
   498  00FC18  20                 	db	32
   499  00FC19  20                 	db	32
   500  00FC1A  00                 	db	0
   501  00FC1B                     STR_98:
   502  00FC1B  52                 	db	82	;'R'
   503  00FC1C  49                 	db	73	;'I'
   504  00FC1D  47                 	db	71	;'G'
   505  00FC1E  48                 	db	72	;'H'
   506  00FC1F  54                 	db	84	;'T'
   507  00FC20  20                 	db	32
   508  00FC21  2D                 	db	45
   509  00FC22  2D                 	db	45
   510  00FC23  20                 	db	32
   511  00FC24  32                 	db	50	;'2'
   512  00FC25  73                 	db	115	;'s'
   513  00FC26  20                 	db	32
   514  00FC27  20                 	db	32
   515  00FC28  20                 	db	32
   516  00FC29  20                 	db	32
   517  00FC2A  20                 	db	32
   518  00FC2B  00                 	db	0
   519  00FC2C                     STR_97:
   520  00FC2C  4D                 	db	77	;'M'
   521  00FC2D  49                 	db	73	;'I'
   522  00FC2E  44                 	db	68	;'D'
   523  00FC2F  44                 	db	68	;'D'
   524  00FC30  4C                 	db	76	;'L'
   525  00FC31  45                 	db	69	;'E'
   526  00FC32  20                 	db	32
   527  00FC33  2D                 	db	45
   528  00FC34  2D                 	db	45
   529  00FC35  20                 	db	32
   530  00FC36  32                 	db	50	;'2'
   531  00FC37  73                 	db	115	;'s'
   532  00FC38  20                 	db	32
   533  00FC39  20                 	db	32
   534  00FC3A  20                 	db	32
   535  00FC3B  20                 	db	32
   536  00FC3C  00                 	db	0
   537  00FC3D                     STR_114:
   538  00FC3D  44                 	db	68	;'D'
   539  00FC3E  20                 	db	32
   540  00FC3F  57                 	db	87	;'W'
   541  00FC40  49                 	db	73	;'I'
   542  00FC41  4C                 	db	76	;'L'
   543  00FC42  4C                 	db	76	;'L'
   544  00FC43  20                 	db	32
   545  00FC44  52                 	db	82	;'R'
   546  00FC45  45                 	db	69	;'E'
   547  00FC46  54                 	db	84	;'T'
   548  00FC47  55                 	db	85	;'U'
   549  00FC48  52                 	db	82	;'R'
   550  00FC49  4E                 	db	78	;'N'
   551  00FC4A  20                 	db	32
   552  00FC4B  20                 	db	32
   553  00FC4C  20                 	db	32
   554  00FC4D  00                 	db	0
   555  00FC4E                     STR_100:
   556  00FC4E  4D                 	db	77	;'M'
   557  00FC4F  49                 	db	73	;'I'
   558  00FC50  44                 	db	68	;'D'
   559  00FC51  2D                 	db	45
   560  00FC52  4C                 	db	76	;'L'
   561  00FC53  45                 	db	69	;'E'
   562  00FC54  46                 	db	70	;'F'
   563  00FC55  54                 	db	84	;'T'
   564  00FC56  20                 	db	32
   565  00FC57  2D                 	db	45
   566  00FC58  2D                 	db	45
   567  00FC59  20                 	db	32
   568  00FC5A  32                 	db	50	;'2'
   569  00FC5B  73                 	db	115	;'s'
   570  00FC5C  20                 	db	32
   571  00FC5D  20                 	db	32
   572  00FC5E  00                 	db	0
   573  00FC5F                     STR_101:
   574  00FC5F  4D                 	db	77	;'M'
   575  00FC60  49                 	db	73	;'I'
   576  00FC61  44                 	db	68	;'D'
   577  00FC62  2D                 	db	45
   578  00FC63  52                 	db	82	;'R'
   579  00FC64  49                 	db	73	;'I'
   580  00FC65  47                 	db	71	;'G'
   581  00FC66  48                 	db	72	;'H'
   582  00FC67  54                 	db	84	;'T'
   583  00FC68  20                 	db	32
   584  00FC69  2D                 	db	45
   585  00FC6A  2D                 	db	45
   586  00FC6B  20                 	db	32
   587  00FC6C  32                 	db	50	;'2'
   588  00FC6D  73                 	db	115	;'s'
   589  00FC6E  20                 	db	32
   590  00FC6F  00                 	db	0
   591  00FC70                     STR_115:
   592  00FC70  45                 	db	69	;'E'
   593  00FC71  4C                 	db	76	;'L'
   594  00FC72  53                 	db	83	;'S'
   595  00FC73  45                 	db	69	;'E'
   596  00FC74  20                 	db	32
   597  00FC75  54                 	db	84	;'T'
   598  00FC76  4F                 	db	79	;'O'
   599  00FC77  47                 	db	71	;'G'
   600  00FC78  47                 	db	71	;'G'
   601  00FC79  4C                 	db	76	;'L'
   602  00FC7A  45                 	db	69	;'E'
   603  00FC7B  53                 	db	83	;'S'
   604  00FC7C  20                 	db	32
   605  00FC7D  52                 	db	82	;'R'
   606  00FC7E  41                 	db	65	;'A'
   607  00FC7F  35                 	db	53	;'5'
   608  00FC80  00                 	db	0
   609  00FC81                     STR_72:
   610  00FC81  41                 	db	65	;'A'
   611  00FC82  4C                 	db	76	;'L'
   612  00FC83  47                 	db	71	;'G'
   613  00FC84  31                 	db	49	;'1'
   614  00FC85  3A                 	db	58	;':'
   615  00FC86  20                 	db	32
   616  00FC87  39                 	db	57	;'9'
   617  00FC88  20                 	db	32
   618  00FC89  50                 	db	80	;'P'
   619  00FC8A  4F                 	db	79	;'O'
   620  00FC8B  50                 	db	80	;'P'
   621  00FC8C  4E                 	db	78	;'N'
   622  00FC8D  4F                 	db	79	;'O'
   623  00FC8E  54                 	db	84	;'T'
   624  00FC8F  41                 	db	65	;'A'
   625  00FC90  42                 	db	66	;'B'
   626  00FC91  00                 	db	0
   627  00FC92                     STR_68:
   628  00FC92  31                 	db	49	;'1'
   629  00FC93  2E                 	db	46
   630  00FC94  41                 	db	65	;'A'
   631  00FC95  4C                 	db	76	;'L'
   632  00FC96  47                 	db	71	;'G'
   633  00FC97  7C                 	db	124
   634  00FC98  32                 	db	50	;'2'
   635  00FC99  2E                 	db	46
   636  00FC9A  53                 	db	83	;'S'
   637  00FC9B  4E                 	db	78	;'N'
   638  00FC9C  52                 	db	82	;'R'
   639  00FC9D  7C                 	db	124
   640  00FC9E  33                 	db	51	;'3'
   641  00FC9F  2E                 	db	46
   642  00FCA0  41                 	db	65	;'A'
   643  00FCA1  43                 	db	67	;'C'
   644  00FCA2  00                 	db	0
   645  00FCA3                     STR_92:
   646  00FCA3  54                 	db	84	;'T'
   647  00FCA4  53                 	db	83	;'S'
   648  00FCA5  54                 	db	84	;'T'
   649  00FCA6  3A                 	db	58	;':'
   650  00FCA7  20                 	db	32
   651  00FCA8  43                 	db	67	;'C'
   652  00FCA9  4F                 	db	79	;'O'
   653  00FCAA  4E                 	db	78	;'N'
   654  00FCAB  44                 	db	68	;'D'
   655  00FCAC  20                 	db	32
   656  00FCAD  53                 	db	83	;'S'
   657  00FCAE  4F                 	db	79	;'O'
   658  00FCAF  4C                 	db	76	;'L'
   659  00FCB0  4E                 	db	78	;'N'
   660  00FCB1  27                 	db	39
   661  00FCB2  44                 	db	68	;'D'
   662  00FCB3  00                 	db	0
   663  00FCB4                     STR_94:
   664  00FCB4  54                 	db	84	;'T'
   665  00FCB5  53                 	db	83	;'S'
   666  00FCB6  54                 	db	84	;'T'
   667  00FCB7  3A                 	db	58	;':'
   668  00FCB8  20                 	db	32
   669  00FCB9  50                 	db	80	;'P'
   670  00FCBA  55                 	db	85	;'U'
   671  00FCBB  53                 	db	83	;'S'
   672  00FCBC  48                 	db	72	;'H'
   673  00FCBD  20                 	db	32
   674  00FCBE  53                 	db	83	;'S'
   675  00FCBF  4F                 	db	79	;'O'
   676  00FCC0  4C                 	db	76	;'L'
   677  00FCC1  4E                 	db	78	;'N'
   678  00FCC2  27                 	db	39
   679  00FCC3  44                 	db	68	;'D'
   680  00FCC4  00                 	db	0
   681  00FCC5                     STR_69:
   682  00FCC5  34                 	db	52	;'4'
   683  00FCC6  2E                 	db	46
   684  00FCC7  48                 	db	72	;'H'
   685  00FCC8  49                 	db	73	;'I'
   686  00FCC9  7C                 	db	124
   687  00FCCA  35                 	db	53	;'5'
   688  00FCCB  2E                 	db	46
   689  00FCCC  54                 	db	84	;'T'
   690  00FCCD  4F                 	db	79	;'O'
   691  00FCCE  47                 	db	71	;'G'
   692  00FCCF  7C                 	db	124
   693  00FCD0  36                 	db	54	;'6'
   694  00FCD1  2E                 	db	46
   695  00FCD2  45                 	db	69	;'E'
   696  00FCD3  45                 	db	69	;'E'
   697  00FCD4  50                 	db	80	;'P'
   698  00FCD5  00                 	db	0
   699  00FCD6                     STR_110:
   700  00FCD6  54                 	db	84	;'T'
   701  00FCD7  53                 	db	83	;'S'
   702  00FCD8  54                 	db	84	;'T'
   703  00FCD9  3A                 	db	58	;':'
   704  00FCDA  20                 	db	32
   705  00FCDB  42                 	db	66	;'B'
   706  00FCDC  4F                 	db	79	;'O'
   707  00FCDD  54                 	db	84	;'T'
   708  00FCDE  48                 	db	72	;'H'
   709  00FCDF  20                 	db	32
   710  00FCE0  53                 	db	83	;'S'
   711  00FCE1  45                 	db	69	;'E'
   712  00FCE2  52                 	db	82	;'R'
   713  00FCE3  56                 	db	86	;'V'
   714  00FCE4  4F                 	db	79	;'O'
   715  00FCE5  53                 	db	83	;'S'
   716  00FCE6  00                 	db	0
   717  00FCE7                     STR_41:
   718  00FCE7  4C                 	db	76	;'L'
   719  00FCE8  4F                 	db	79	;'O'
   720  00FCE9  47                 	db	71	;'G'
   721  00FCEA  20                 	db	32
   722  00FCEB  31                 	db	49	;'1'
   723  00FCEC  20                 	db	32
   724  00FCED  20                 	db	32
   725  00FCEE  20                 	db	32
   726  00FCEF  20                 	db	32
   727  00FCF0  20                 	db	32
   728  00FCF1  20                 	db	32
   729  00FCF2  20                 	db	32
   730  00FCF3  20                 	db	32
   731  00FCF4  20                 	db	32
   732  00FCF5  20                 	db	32
   733  00FCF6  20                 	db	32
   734  00FCF7  00                 	db	0
   735  00FCF8                     STR_40:
   736  00FCF8  4C                 	db	76	;'L'
   737  00FCF9  4F                 	db	79	;'O'
   738  00FCFA  47                 	db	71	;'G'
   739  00FCFB  20                 	db	32
   740  00FCFC  32                 	db	50	;'2'
   741  00FCFD  20                 	db	32
   742  00FCFE  20                 	db	32
   743  00FCFF  20                 	db	32
   744  00FD00  20                 	db	32
   745  00FD01  20                 	db	32
   746  00FD02  20                 	db	32
   747  00FD03  20                 	db	32
   748  00FD04  20                 	db	32
   749  00FD05  20                 	db	32
   750  00FD06  20                 	db	32
   751  00FD07  20                 	db	32
   752  00FD08  00                 	db	0
   753  00FD09                     STR_44:
   754  00FD09  4C                 	db	76	;'L'
   755  00FD0A  4F                 	db	79	;'O'
   756  00FD0B  47                 	db	71	;'G'
   757  00FD0C  20                 	db	32
   758  00FD0D  33                 	db	51	;'3'
   759  00FD0E  20                 	db	32
   760  00FD0F  20                 	db	32
   761  00FD10  20                 	db	32
   762  00FD11  20                 	db	32
   763  00FD12  20                 	db	32
   764  00FD13  20                 	db	32
   765  00FD14  20                 	db	32
   766  00FD15  20                 	db	32
   767  00FD16  20                 	db	32
   768  00FD17  20                 	db	32
   769  00FD18  20                 	db	32
   770  00FD19  00                 	db	0
   771  00FD1A                     STR_48:
   772  00FD1A  4C                 	db	76	;'L'
   773  00FD1B  4F                 	db	79	;'O'
   774  00FD1C  47                 	db	71	;'G'
   775  00FD1D  20                 	db	32
   776  00FD1E  34                 	db	52	;'4'
   777  00FD1F  20                 	db	32
   778  00FD20  20                 	db	32
   779  00FD21  20                 	db	32
   780  00FD22  20                 	db	32
   781  00FD23  20                 	db	32
   782  00FD24  20                 	db	32
   783  00FD25  20                 	db	32
   784  00FD26  20                 	db	32
   785  00FD27  20                 	db	32
   786  00FD28  20                 	db	32
   787  00FD29  20                 	db	32
   788  00FD2A  00                 	db	0
   789  00FD2B                     STR_36:
   790  00FD2B  33                 	db	51	;'3'
   791  00FD2C  2E                 	db	46
   792  00FD2D  20                 	db	32
   793  00FD2E  4C                 	db	76	;'L'
   794  00FD2F  4F                 	db	79	;'O'
   795  00FD30  47                 	db	71	;'G'
   796  00FD31  53                 	db	83	;'S'
   797  00FD32  20                 	db	32
   798  00FD33  20                 	db	32
   799  00FD34  20                 	db	32
   800  00FD35  20                 	db	32
   801  00FD36  20                 	db	32
   802  00FD37  20                 	db	32
   803  00FD38  20                 	db	32
   804  00FD39  20                 	db	32
   805  00FD3A  20                 	db	32
   806  00FD3B  00                 	db	0
   807  00FD3C                     STR_32:
   808  00FD3C  32                 	db	50	;'2'
   809  00FD3D  2E                 	db	46
   810  00FD3E  20                 	db	32
   811  00FD3F  53                 	db	83	;'S'
   812  00FD40  4F                 	db	79	;'O'
   813  00FD41  52                 	db	82	;'R'
   814  00FD42  54                 	db	84	;'T'
   815  00FD43  20                 	db	32
   816  00FD44  20                 	db	32
   817  00FD45  20                 	db	32
   818  00FD46  20                 	db	32
   819  00FD47  20                 	db	32
   820  00FD48  20                 	db	32
   821  00FD49  20                 	db	32
   822  00FD4A  20                 	db	32
   823  00FD4B  20                 	db	32
   824  00FD4C  00                 	db	0
   825  00FD4D                     STR_33:
   826  00FD4D  31                 	db	49	;'1'
   827  00FD4E  2E                 	db	46
   828  00FD4F  20                 	db	32
   829  00FD50  44                 	db	68	;'D'
   830  00FD51  41                 	db	65	;'A'
   831  00FD52  54                 	db	84	;'T'
   832  00FD53  45                 	db	69	;'E'
   833  00FD54  2F                 	db	47
   834  00FD55  54                 	db	84	;'T'
   835  00FD56  49                 	db	73	;'I'
   836  00FD57  4D                 	db	77	;'M'
   837  00FD58  45                 	db	69	;'E'
   838  00FD59  20                 	db	32
   839  00FD5A  20                 	db	32
   840  00FD5B  20                 	db	32
   841  00FD5C  20                 	db	32
   842  00FD5D  00                 	db	0
   843  00FD5E                     STR_24:
   844  00FD5E  20                 	db	32
   845  00FD5F  2D                 	db	45
   846  00FD60  2D                 	db	45
   847  00FD61  20                 	db	32
   848  00FD62  50                 	db	80	;'P'
   849  00FD63  4F                 	db	79	;'O'
   850  00FD64  50                 	db	80	;'P'
   851  00FD65  20                 	db	32
   852  00FD66  20                 	db	32
   853  00FD67  43                 	db	67	;'C'
   854  00FD68  41                 	db	65	;'A'
   855  00FD69  4E                 	db	78	;'N'
   856  00FD6A  20                 	db	32
   857  00FD6B  2D                 	db	45
   858  00FD6C  2D                 	db	45
   859  00FD6D  20                 	db	32
   860  00FD6E  00                 	db	0
   861  00FD6F                     STR_26:
   862  00FD6F  20                 	db	32
   863  00FD70  2D                 	db	45
   864  00FD71  2D                 	db	45
   865  00FD72  20                 	db	32
   866  00FD73  53                 	db	83	;'S'
   867  00FD74  4F                 	db	79	;'O'
   868  00FD75  55                 	db	85	;'U'
   869  00FD76  50                 	db	80	;'P'
   870  00FD77  20                 	db	32
   871  00FD78  43                 	db	67	;'C'
   872  00FD79  41                 	db	65	;'A'
   873  00FD7A  4E                 	db	78	;'N'
   874  00FD7B  20                 	db	32
   875  00FD7C  2D                 	db	45
   876  00FD7D  2D                 	db	45
   877  00FD7E  20                 	db	32
   878  00FD7F  00                 	db	0
   879  00FD80                     STR_28:
   880  00FD80  2D                 	db	45
   881  00FD81  2D                 	db	45
   882  00FD82  20                 	db	32
   883  00FD83  54                 	db	84	;'T'
   884  00FD84  4F                 	db	79	;'O'
   885  00FD85  54                 	db	84	;'T'
   886  00FD86  41                 	db	65	;'A'
   887  00FD87  4C                 	db	76	;'L'
   888  00FD88  20                 	db	32
   889  00FD89  43                 	db	67	;'C'
   890  00FD8A  41                 	db	65	;'A'
   891  00FD8B  4E                 	db	78	;'N'
   892  00FD8C  53                 	db	83	;'S'
   893  00FD8D  20                 	db	32
   894  00FD8E  2D                 	db	45
   895  00FD8F  2D                 	db	45
   896  00FD90  00                 	db	0
   897  00FD91                     STR_39:
   898  00FD91  4C                 	db	76	;'L'
   899  00FD92  4F                 	db	79	;'O'
   900  00FD93  47                 	db	71	;'G'
   901  00FD94  20                 	db	32
   902  00FD95  31                 	db	49	;'1'
   903  00FD96  20                 	db	32
   904  00FD97  20                 	db	32
   905  00FD98  20                 	db	32
   906  00FD99  20                 	db	32
   907  00FD9A  20                 	db	32
   908  00FD9B  20                 	db	32
   909  00FD9C  20                 	db	32
   910  00FD9D  20                 	db	32
   911  00FD9E  20                 	db	32
   912  00FD9F  20                 	db	32
   913  00FDA0  3C                 	db	60	;'<'
   914  00FDA1  00                 	db	0
   915  00FDA2                     STR_42:
   916  00FDA2  4C                 	db	76	;'L'
   917  00FDA3  4F                 	db	79	;'O'
   918  00FDA4  47                 	db	71	;'G'
   919  00FDA5  20                 	db	32
   920  00FDA6  32                 	db	50	;'2'
   921  00FDA7  20                 	db	32
   922  00FDA8  20                 	db	32
   923  00FDA9  20                 	db	32
   924  00FDAA  20                 	db	32
   925  00FDAB  20                 	db	32
   926  00FDAC  20                 	db	32
   927  00FDAD  20                 	db	32
   928  00FDAE  20                 	db	32
   929  00FDAF  20                 	db	32
   930  00FDB0  20                 	db	32
   931  00FDB1  3C                 	db	60	;'<'
   932  00FDB2  00                 	db	0
   933  00FDB3                     STR_46:
   934  00FDB3  4C                 	db	76	;'L'
   935  00FDB4  4F                 	db	79	;'O'
   936  00FDB5  47                 	db	71	;'G'
   937  00FDB6  20                 	db	32
   938  00FDB7  33                 	db	51	;'3'
   939  00FDB8  20                 	db	32
   940  00FDB9  20                 	db	32
   941  00FDBA  20                 	db	32
   942  00FDBB  20                 	db	32
   943  00FDBC  20                 	db	32
   944  00FDBD  20                 	db	32
   945  00FDBE  20                 	db	32
   946  00FDBF  20                 	db	32
   947  00FDC0  20                 	db	32
   948  00FDC1  20                 	db	32
   949  00FDC2  3C                 	db	60	;'<'
   950  00FDC3  00                 	db	0
   951  00FDC4                     STR_50:
   952  00FDC4  4C                 	db	76	;'L'
   953  00FDC5  4F                 	db	79	;'O'
   954  00FDC6  47                 	db	71	;'G'
   955  00FDC7  20                 	db	32
   956  00FDC8  34                 	db	52	;'4'
   957  00FDC9  20                 	db	32
   958  00FDCA  20                 	db	32
   959  00FDCB  20                 	db	32
   960  00FDCC  20                 	db	32
   961  00FDCD  20                 	db	32
   962  00FDCE  20                 	db	32
   963  00FDCF  20                 	db	32
   964  00FDD0  20                 	db	32
   965  00FDD1  20                 	db	32
   966  00FDD2  20                 	db	32
   967  00FDD3  3C                 	db	60	;'<'
   968  00FDD4  00                 	db	0
   969  00FDD5                     STR_38:
   970  00FDD5  33                 	db	51	;'3'
   971  00FDD6  2E                 	db	46
   972  00FDD7  20                 	db	32
   973  00FDD8  4C                 	db	76	;'L'
   974  00FDD9  4F                 	db	79	;'O'
   975  00FDDA  47                 	db	71	;'G'
   976  00FDDB  53                 	db	83	;'S'
   977  00FDDC  20                 	db	32
   978  00FDDD  20                 	db	32
   979  00FDDE  20                 	db	32
   980  00FDDF  20                 	db	32
   981  00FDE0  20                 	db	32
   982  00FDE1  20                 	db	32
   983  00FDE2  20                 	db	32
   984  00FDE3  20                 	db	32
   985  00FDE4  3C                 	db	60	;'<'
   986  00FDE5  00                 	db	0
   987  00FDE6                     STR_34:
   988  00FDE6  32                 	db	50	;'2'
   989  00FDE7  2E                 	db	46
   990  00FDE8  20                 	db	32
   991  00FDE9  53                 	db	83	;'S'
   992  00FDEA  4F                 	db	79	;'O'
   993  00FDEB  52                 	db	82	;'R'
   994  00FDEC  54                 	db	84	;'T'
   995  00FDED  20                 	db	32
   996  00FDEE  20                 	db	32
   997  00FDEF  20                 	db	32
   998  00FDF0  20                 	db	32
   999  00FDF1  20                 	db	32
  1000  00FDF2  20                 	db	32
  1001  00FDF3  20                 	db	32
  1002  00FDF4  20                 	db	32
  1003  00FDF5  3C                 	db	60	;'<'
  1004  00FDF6  00                 	db	0
  1005  00FDF7                     STR_31:
  1006  00FDF7  31                 	db	49	;'1'
  1007  00FDF8  2E                 	db	46
  1008  00FDF9  20                 	db	32
  1009  00FDFA  44                 	db	68	;'D'
  1010  00FDFB  41                 	db	65	;'A'
  1011  00FDFC  54                 	db	84	;'T'
  1012  00FDFD  45                 	db	69	;'E'
  1013  00FDFE  2F                 	db	47
  1014  00FDFF  54                 	db	84	;'T'
  1015  00FE00  49                 	db	73	;'I'
  1016  00FE01  4D                 	db	77	;'M'
  1017  00FE02  45                 	db	69	;'E'
  1018  00FE03  20                 	db	32
  1019  00FE04  20                 	db	32
  1020  00FE05  20                 	db	32
  1021  00FE06  3C                 	db	60	;'<'
  1022  00FE07  00                 	db	0
  1023  00FE08                     STR_6:
  1024  00FE08  50                 	db	80	;'P'
  1025  00FE09  41                 	db	65	;'A'
  1026  00FE0A  55                 	db	85	;'U'
  1027  00FE0B  53                 	db	83	;'S'
  1028  00FE0C  45                 	db	69	;'E'
  1029  00FE0D  20                 	db	32
  1030  00FE0E  3C                 	db	60	;'<'
  1031  00FE0F  20                 	db	32
  1032  00FE10  7C                 	db	124
  1033  00FE11  20                 	db	32
  1034  00FE12  42                 	db	66	;'B'
  1035  00FE13  41                 	db	65	;'A'
  1036  00FE14  43                 	db	67	;'C'
  1037  00FE15  4B                 	db	75	;'K'
  1038  00FE16  20                 	db	32
  1039  00FE17  3E                 	db	62	;'>'
  1040  00FE18  00                 	db	0
  1041  00FE19                     STR_30:
  1042  00FE19  50                 	db	80	;'P'
  1043  00FE1A  55                 	db	85	;'U'
  1044  00FE1B  53                 	db	83	;'S'
  1045  00FE1C  48                 	db	72	;'H'
  1046  00FE1D  20                 	db	32
  1047  00FE1E  54                 	db	84	;'T'
  1048  00FE1F  4F                 	db	79	;'O'
  1049  00FE20  20                 	db	32
  1050  00FE21  43                 	db	67	;'C'
  1051  00FE22  4F                 	db	79	;'O'
  1052  00FE23  4E                 	db	78	;'N'
  1053  00FE24  54                 	db	84	;'T'
  1054  00FE25  49                 	db	73	;'I'
  1055  00FE26  4E                 	db	78	;'N'
  1056  00FE27  55                 	db	85	;'U'
  1057  00FE28  45                 	db	69	;'E'
  1058  00FE29  00                 	db	0
  1059  00FE2A                     STR_83:
  1060  00FE2A  4D                 	db	77	;'M'
  1061  00FE2B  41                 	db	65	;'A'
  1062  00FE2C  47                 	db	71	;'G'
  1063  00FE2D  5F                 	db	95	;'_'
  1064  00FE2E  73                 	db	115	;'s'
  1065  00FE2F  69                 	db	105	;'i'
  1066  00FE30  67                 	db	103	;'g'
  1067  00FE31  6E                 	db	110	;'n'
  1068  00FE32  61                 	db	97	;'a'
  1069  00FE33  6C                 	db	108	;'l'
  1070  00FE34  3A                 	db	58	;':'
  1071  00FE35  20                 	db	32
  1072  00FE36  25                 	db	37
  1073  00FE37  64                 	db	100	;'d'
  1074  00FE38  20                 	db	32
  1075  00FE39  00                 	db	0
  1076  00FE3A                     STR_103:
  1077  00FE3A  54                 	db	84	;'T'
  1078  00FE3B  53                 	db	83	;'S'
  1079  00FE3C  54                 	db	84	;'T'
  1080  00FE3D  3A                 	db	58	;':'
  1081  00FE3E  20                 	db	32
  1082  00FE3F  54                 	db	84	;'T'
  1083  00FE40  49                 	db	73	;'I'
  1084  00FE41  4C                 	db	76	;'L'
  1085  00FE42  54                 	db	84	;'T'
  1086  00FE43  20                 	db	32
  1087  00FE44  53                 	db	83	;'S'
  1088  00FE45  45                 	db	69	;'E'
  1089  00FE46  52                 	db	82	;'R'
  1090  00FE47  56                 	db	86	;'V'
  1091  00FE48  4F                 	db	79	;'O'
  1092  00FE49  00                 	db	0
  1093  00FE4A                     STR_4:
  1094  00FE4A  44                 	db	68	;'D'
  1095  00FE4B  49                 	db	73	;'I'
  1096  00FE4C  44                 	db	68	;'D'
  1097  00FE4D  4E                 	db	78	;'N'
  1098  00FE4E  27                 	db	39
  1099  00FE4F  54                 	db	84	;'T'
  1100  00FE50  20                 	db	32
  1101  00FE51  43                 	db	67	;'C'
  1102  00FE52  4F                 	db	79	;'O'
  1103  00FE53  4D                 	db	77	;'M'
  1104  00FE54  50                 	db	80	;'P'
  1105  00FE55  4C                 	db	76	;'L'
  1106  00FE56  45                 	db	69	;'E'
  1107  00FE57  54                 	db	84	;'T'
  1108  00FE58  45                 	db	69	;'E'
  1109  00FE59  00                 	db	0
  1110  00FE5A                     STR_80:
  1111  00FE5A  49                 	db	73	;'I'
  1112  00FE5B  52                 	db	82	;'R'
  1113  00FE5C  5F                 	db	95	;'_'
  1114  00FE5D  73                 	db	115	;'s'
  1115  00FE5E  69                 	db	105	;'i'
  1116  00FE5F  67                 	db	103	;'g'
  1117  00FE60  6E                 	db	110	;'n'
  1118  00FE61  61                 	db	97	;'a'
  1119  00FE62  6C                 	db	108	;'l'
  1120  00FE63  3A                 	db	58	;':'
  1121  00FE64  20                 	db	32
  1122  00FE65  25                 	db	37
  1123  00FE66  64                 	db	100	;'d'
  1124  00FE67  20                 	db	32
  1125  00FE68  00                 	db	0
  1126  00FE69                     STR_109:
  1127  00FE69  43                 	db	67	;'C'
  1128  00FE6A  41                 	db	65	;'A'
  1129  00FE6B  4D                 	db	77	;'M'
  1130  00FE6C  20                 	db	32
  1131  00FE6D  44                 	db	68	;'D'
  1132  00FE6E  57                 	db	87	;'W'
  1133  00FE6F  4E                 	db	78	;'N'
  1134  00FE70  20                 	db	32
  1135  00FE71  7C                 	db	124
  1136  00FE72  52                 	db	82	;'R'
  1137  00FE73  43                 	db	67	;'C'
  1138  00FE74  30                 	db	48	;'0'
  1139  00FE75  3D                 	db	61	;'='
  1140  00FE76  30                 	db	48	;'0'
  1141  00FE77  00                 	db	0
  1142  00FE78                     STR_108:
  1143  00FE78  43                 	db	67	;'C'
  1144  00FE79  41                 	db	65	;'A'
  1145  00FE7A  4D                 	db	77	;'M'
  1146  00FE7B  20                 	db	32
  1147  00FE7C  55                 	db	85	;'U'
  1148  00FE7D  50                 	db	80	;'P'
  1149  00FE7E  20                 	db	32
  1150  00FE7F  20                 	db	32
  1151  00FE80  7C                 	db	124
  1152  00FE81  52                 	db	82	;'R'
  1153  00FE82  43                 	db	67	;'C'
  1154  00FE83  30                 	db	48	;'0'
  1155  00FE84  3D                 	db	61	;'='
  1156  00FE85  31                 	db	49	;'1'
  1157  00FE86  00                 	db	0
  1158  00FE87                     STR_82:
  1159  00FE87  54                 	db	84	;'T'
  1160  00FE88  53                 	db	83	;'S'
  1161  00FE89  54                 	db	84	;'T'
  1162  00FE8A  3A                 	db	58	;':'
  1163  00FE8B  20                 	db	32
  1164  00FE8C  4D                 	db	77	;'M'
  1165  00FE8D  41                 	db	65	;'A'
  1166  00FE8E  47                 	db	71	;'G'
  1167  00FE8F  4E                 	db	78	;'N'
  1168  00FE90  45                 	db	69	;'E'
  1169  00FE91  54                 	db	84	;'T'
  1170  00FE92  49                 	db	73	;'I'
  1171  00FE93  53                 	db	83	;'S'
  1172  00FE94  4D                 	db	77	;'M'
  1173  00FE95  00                 	db	0
  1174  00FE96                     STR_107:
  1175  00FE96  54                 	db	84	;'T'
  1176  00FE97  53                 	db	83	;'S'
  1177  00FE98  54                 	db	84	;'T'
  1178  00FE99  3A                 	db	58	;':'
  1179  00FE9A  20                 	db	32
  1180  00FE9B  43                 	db	67	;'C'
  1181  00FE9C  41                 	db	65	;'A'
  1182  00FE9D  4D                 	db	77	;'M'
  1183  00FE9E  20                 	db	32
  1184  00FE9F  53                 	db	83	;'S'
  1185  00FEA0  45                 	db	69	;'E'
  1186  00FEA1  52                 	db	82	;'R'
  1187  00FEA2  56                 	db	86	;'V'
  1188  00FEA3  4F                 	db	79	;'O'
  1189  00FEA4  00                 	db	0
  1190  00FEA5                     STR_96:
  1191  00FEA5  54                 	db	84	;'T'
  1192  00FEA6  53                 	db	83	;'S'
  1193  00FEA7  54                 	db	84	;'T'
  1194  00FEA8  3A                 	db	58	;':'
  1195  00FEA9  20                 	db	32
  1196  00FEAA  50                 	db	80	;'P'
  1197  00FEAB  41                 	db	65	;'A'
  1198  00FEAC  4E                 	db	78	;'N'
  1199  00FEAD  20                 	db	32
  1200  00FEAE  53                 	db	83	;'S'
  1201  00FEAF  45                 	db	69	;'E'
  1202  00FEB0  52                 	db	82	;'R'
  1203  00FEB1  56                 	db	86	;'V'
  1204  00FEB2  4F                 	db	79	;'O'
  1205  00FEB3  00                 	db	0
  1206  00FEB4                     STR_75:
  1207  00FEB4  41                 	db	65	;'A'
  1208  00FEB5  4C                 	db	76	;'L'
  1209  00FEB6  47                 	db	71	;'G'
  1210  00FEB7  34                 	db	52	;'4'
  1211  00FEB8  3A                 	db	58	;':'
  1212  00FEB9  20                 	db	32
  1213  00FEBA  41                 	db	65	;'A'
  1214  00FEBB  4C                 	db	76	;'L'
  1215  00FEBC  4C                 	db	76	;'L'
  1216  00FEBD  20                 	db	32
  1217  00FEBE  43                 	db	67	;'C'
  1218  00FEBF  41                 	db	65	;'A'
  1219  00FEC0  4E                 	db	78	;'N'
  1220  00FEC1  53                 	db	83	;'S'
  1221  00FEC2  00                 	db	0
  1222  00FEC3                     STR_90:
  1223  00FEC3  54                 	db	84	;'T'
  1224  00FEC4  53                 	db	83	;'S'
  1225  00FEC5  54                 	db	84	;'T'
  1226  00FEC6  3A                 	db	58	;':'
  1227  00FEC7  20                 	db	32
  1228  00FEC8  44                 	db	68	;'D'
  1229  00FEC9  43                 	db	67	;'C'
  1230  00FECA  20                 	db	32
  1231  00FECB  4D                 	db	77	;'M'
  1232  00FECC  4F                 	db	79	;'O'
  1233  00FECD  54                 	db	84	;'T'
  1234  00FECE  4F                 	db	79	;'O'
  1235  00FECF  52                 	db	82	;'R'
  1236  00FED0  53                 	db	83	;'S'
  1237  00FED1  00                 	db	0
  1238  00FED2                     STR_70:
  1239  00FED2  41                 	db	65	;'A'
  1240  00FED3  4C                 	db	76	;'L'
  1241  00FED4  47                 	db	71	;'G'
  1242  00FED5  4F                 	db	79	;'O'
  1243  00FED6  52                 	db	82	;'R'
  1244  00FED7  49                 	db	73	;'I'
  1245  00FED8  54                 	db	84	;'T'
  1246  00FED9  48                 	db	72	;'H'
  1247  00FEDA  4D                 	db	77	;'M'
  1248  00FEDB  20                 	db	32
  1249  00FEDC  54                 	db	84	;'T'
  1250  00FEDD  45                 	db	69	;'E'
  1251  00FEDE  53                 	db	83	;'S'
  1252  00FEDF  54                 	db	84	;'T'
  1253  00FEE0  00                 	db	0
  1254  00FEE1                     STR_91:
  1255  00FEE1  50                 	db	80	;'P'
  1256  00FEE2  49                 	db	73	;'I'
  1257  00FEE3  4E                 	db	78	;'N'
  1258  00FEE4  20                 	db	32
  1259  00FEE5  52                 	db	82	;'R'
  1260  00FEE6  41                 	db	65	;'A'
  1261  00FEE7  35                 	db	53	;'5'
  1262  00FEE8  20                 	db	32
  1263  00FEE9  48                 	db	72	;'H'
  1264  00FEEA  49                 	db	73	;'I'
  1265  00FEEB  47                 	db	71	;'G'
  1266  00FEEC  48                 	db	72	;'H'
  1267  00FEED  2E                 	db	46
  1268  00FEEE  00                 	db	0
  1269  00FEEF                     STR_73:
  1270  00FEEF  41                 	db	65	;'A'
  1271  00FEF0  4C                 	db	76	;'L'
  1272  00FEF1  47                 	db	71	;'G'
  1273  00FEF2  32                 	db	50	;'2'
  1274  00FEF3  3A                 	db	58	;':'
  1275  00FEF4  20                 	db	32
  1276  00FEF5  31                 	db	49	;'1'
  1277  00FEF6  32                 	db	50	;'2'
  1278  00FEF7  20                 	db	32
  1279  00FEF8  43                 	db	67	;'C'
  1280  00FEF9  41                 	db	65	;'A'
  1281  00FEFA  4E                 	db	78	;'N'
  1282  00FEFB  53                 	db	83	;'S'
  1283  00FEFC  00                 	db	0
  1284  00FEFD                     STR_76:
  1285  00FEFD  41                 	db	65	;'A'
  1286  00FEFE  4C                 	db	76	;'L'
  1287  00FEFF  47                 	db	71	;'G'
  1288  00FF00  35                 	db	53	;'5'
  1289  00FF01  3A                 	db	58	;':'
  1290  00FF02  20                 	db	32
  1291  00FF03  4E                 	db	78	;'N'
  1292  00FF04  4F                 	db	79	;'O'
  1293  00FF05  20                 	db	32
  1294  00FF06  43                 	db	67	;'C'
  1295  00FF07  41                 	db	65	;'A'
  1296  00FF08  4E                 	db	78	;'N'
  1297  00FF09  53                 	db	83	;'S'
  1298  00FF0A  00                 	db	0
  1299  00FF0B                     STR_71:
  1300  00FF0B  50                 	db	80	;'P'
  1301  00FF0C  55                 	db	85	;'U'
  1302  00FF0D  53                 	db	83	;'S'
  1303  00FF0E  48                 	db	72	;'H'
  1304  00FF0F  20                 	db	32
  1305  00FF10  54                 	db	84	;'T'
  1306  00FF11  4F                 	db	79	;'O'
  1307  00FF12  20                 	db	32
  1308  00FF13  53                 	db	83	;'S'
  1309  00FF14  54                 	db	84	;'T'
  1310  00FF15  41                 	db	65	;'A'
  1311  00FF16  52                 	db	82	;'R'
  1312  00FF17  54                 	db	84	;'T'
  1313  00FF18  00                 	db	0
  1314  00FF19                     STR_23:
  1315  00FF19  25                 	db	37
  1316  00FF1A  64                 	db	100	;'d'
  1317  00FF1B  20                 	db	32
  1318  00FF1C  4D                 	db	77	;'M'
  1319  00FF1D  49                 	db	73	;'I'
  1320  00FF1E  4E                 	db	78	;'N'
  1321  00FF1F  20                 	db	32
  1322  00FF20  25                 	db	37
  1323  00FF21  64                 	db	100	;'d'
  1324  00FF22  20                 	db	32
  1325  00FF23  53                 	db	83	;'S'
  1326  00FF24  45                 	db	69	;'E'
  1327  00FF25  43                 	db	67	;'C'
  1328  00FF26  00                 	db	0
  1329  00FF27                     STR_2:
  1330  00FF27  54                 	db	84	;'T'
  1331  00FF28  49                 	db	73	;'I'
  1332  00FF29  4D                 	db	77	;'M'
  1333  00FF2A  45                 	db	69	;'E'
  1334  00FF2B  3A                 	db	58	;':'
  1335  00FF2C  20                 	db	32
  1336  00FF2D  25                 	db	37
  1337  00FF2E  64                 	db	100	;'d'
  1338  00FF2F  3A                 	db	58	;':'
  1339  00FF30  25                 	db	37
  1340  00FF31  30                 	db	48	;'0'
  1341  00FF32  32                 	db	50	;'2'
  1342  00FF33  64                 	db	100	;'d'
  1343  00FF34  00                 	db	0
  1344  00FF35                     STR_79:
  1345  00FF35  54                 	db	84	;'T'
  1346  00FF36  53                 	db	83	;'S'
  1347  00FF37  54                 	db	84	;'T'
  1348  00FF38  3A                 	db	58	;':'
  1349  00FF39  20                 	db	32
  1350  00FF3A  49                 	db	73	;'I'
  1351  00FF3B  52                 	db	82	;'R'
  1352  00FF3C  20                 	db	32
  1353  00FF3D  53                 	db	83	;'S'
  1354  00FF3E  4E                 	db	78	;'N'
  1355  00FF3F  53                 	db	83	;'S'
  1356  00FF40  52                 	db	82	;'R'
  1357  00FF41  00                 	db	0
  1358  00FF42                     STR_65:
  1359  00FF42  54                 	db	84	;'T'
  1360  00FF43  49                 	db	73	;'I'
  1361  00FF44  4D                 	db	77	;'M'
  1362  00FF45  45                 	db	69	;'E'
  1363  00FF46  20                 	db	32
  1364  00FF47  25                 	db	37
  1365  00FF48  64                 	db	100	;'d'
  1366  00FF49  3A                 	db	58	;':'
  1367  00FF4A  25                 	db	37
  1368  00FF4B  30                 	db	48	;'0'
  1369  00FF4C  32                 	db	50	;'2'
  1370  00FF4D  64                 	db	100	;'d'
  1371  00FF4E  00                 	db	0
  1372  00FF4F                     STR_74:
  1373  00FF4F  41                 	db	65	;'A'
  1374  00FF50  4C                 	db	76	;'L'
  1375  00FF51  47                 	db	71	;'G'
  1376  00FF52  33                 	db	51	;'3'
  1377  00FF53  3A                 	db	58	;':'
  1378  00FF54  20                 	db	32
  1379  00FF55  31                 	db	49	;'1'
  1380  00FF56  20                 	db	32
  1381  00FF57  43                 	db	67	;'C'
  1382  00FF58  41                 	db	65	;'A'
  1383  00FF59  4E                 	db	78	;'N'
  1384  00FF5A  00                 	db	0
  1385  00FF5B                     STR_93:
  1386  00FF5B  50                 	db	80	;'P'
  1387  00FF5C  49                 	db	73	;'I'
  1388  00FF5D  4E                 	db	78	;'N'
  1389  00FF5E  20                 	db	32
  1390  00FF5F  52                 	db	82	;'R'
  1391  00FF60  41                 	db	65	;'A'
  1392  00FF61  33                 	db	51	;'3'
  1393  00FF62  2E                 	db	46
  1394  00FF63  2E                 	db	46
  1395  00FF64  2E                 	db	46
  1396  00FF65  00                 	db	0
  1397  00FF66                     STR_95:
  1398  00FF66  50                 	db	80	;'P'
  1399  00FF67  49                 	db	73	;'I'
  1400  00FF68  4E                 	db	78	;'N'
  1401  00FF69  20                 	db	32
  1402  00FF6A  52                 	db	82	;'R'
  1403  00FF6B  41                 	db	65	;'A'
  1404  00FF6C  34                 	db	52	;'4'
  1405  00FF6D  2E                 	db	46
  1406  00FF6E  2E                 	db	46
  1407  00FF6F  2E                 	db	46
  1408  00FF70  00                 	db	0
  1409  00FF71                     STR_113:
  1410  00FF71  50                 	db	80	;'P'
  1411  00FF72  55                 	db	85	;'U'
  1412  00FF73  53                 	db	83	;'S'
  1413  00FF74  48                 	db	72	;'H'
  1414  00FF75  45                 	db	69	;'E'
  1415  00FF76  52                 	db	82	;'R'
  1416  00FF77  20                 	db	32
  1417  00FF78  54                 	db	84	;'T'
  1418  00FF79  53                 	db	83	;'S'
  1419  00FF7A  54                 	db	84	;'T'
  1420  00FF7B  00                 	db	0
  1421  00FF7C                     STR_64:
  1422  00FF7C  53                 	db	83	;'S'
  1423  00FF7D  4F                 	db	79	;'O'
  1424  00FF7E  52                 	db	82	;'R'
  1425  00FF7F  54                 	db	84	;'T'
  1426  00FF80  49                 	db	73	;'I'
  1427  00FF81  4E                 	db	78	;'N'
  1428  00FF82  47                 	db	71	;'G'
  1429  00FF83  2E                 	db	46
  1430  00FF84  2E                 	db	46
  1431  00FF85  2E                 	db	46
  1432  00FF86  00                 	db	0
  1433  00FF87                     STR_84:
  1434  00FF87  54                 	db	84	;'T'
  1435  00FF88  53                 	db	83	;'S'
  1436  00FF89  54                 	db	84	;'T'
  1437  00FF8A  3A                 	db	58	;':'
  1438  00FF8B  20                 	db	32
  1439  00FF8C  43                 	db	67	;'C'
  1440  00FF8D  4F                 	db	79	;'O'
  1441  00FF8E  4E                 	db	78	;'N'
  1442  00FF8F  44                 	db	68	;'D'
  1443  00FF90  00                 	db	0
  1444  00FF91                     STR_88:
  1445  00FF91  41                 	db	65	;'A'
  1446  00FF92  43                 	db	67	;'C'
  1447  00FF93  54                 	db	84	;'T'
  1448  00FF94  55                 	db	85	;'U'
  1449  00FF95  41                 	db	65	;'A'
  1450  00FF96  54                 	db	84	;'T'
  1451  00FF97  4F                 	db	79	;'O'
  1452  00FF98  52                 	db	82	;'R'
  1453  00FF99  53                 	db	83	;'S'
  1454  00FF9A  00                 	db	0
  1455  00FF9B                     STR_22:
  1456  00FF9B  44                 	db	68	;'D'
  1457  00FF9C  55                 	db	85	;'U'
  1458  00FF9D  52                 	db	82	;'R'
  1459  00FF9E  41                 	db	65	;'A'
  1460  00FF9F  54                 	db	84	;'T'
  1461  00FFA0  49                 	db	73	;'I'
  1462  00FFA1  4F                 	db	79	;'O'
  1463  00FFA2  4E                 	db	78	;'N'
  1464  00FFA3  3A                 	db	58	;':'
  1465  00FFA4  00                 	db	0
  1466  00FFA5                     STR_86:
  1467  00FFA5  43                 	db	67	;'C'
  1468  00FFA6  4F                 	db	79	;'O'
  1469  00FFA7  4E                 	db	78	;'N'
  1470  00FFA8  44                 	db	68	;'D'
  1471  00FFA9  3A                 	db	58	;':'
  1472  00FFAA  20                 	db	32
  1473  00FFAB  25                 	db	37
  1474  00FFAC  64                 	db	100	;'d'
  1475  00FFAD  00                 	db	0
  1476  00FFAE                     STR_77:
  1477  00FFAE  53                 	db	83	;'S'
  1478  00FFAF  45                 	db	69	;'E'
  1479  00FFB0  4E                 	db	78	;'N'
  1480  00FFB1  53                 	db	83	;'S'
  1481  00FFB2  4F                 	db	79	;'O'
  1482  00FFB3  52                 	db	82	;'R'
  1483  00FFB4  53                 	db	83	;'S'
  1484  00FFB5  00                 	db	0
  1485  00FFB6                     STR_116:
  1486  00FFB6  28                 	db	40
  1487  00FFB7  6E                 	db	110	;'n'
  1488  00FFB8  75                 	db	117	;'u'
  1489  00FFB9  6C                 	db	108	;'l'
  1490  00FFBA  6C                 	db	108	;'l'
  1491  00FFBB  29                 	db	41
  1492  00FFBC  00                 	db	0
  1493  00FFBD                     STR_67:
  1494  00FFBD  46                 	db	70	;'F'
  1495  00FFBE  41                 	db	65	;'A'
  1496  00FFBF  49                 	db	73	;'I'
  1497  00FFC0  4C                 	db	76	;'L'
  1498  00FFC1  45                 	db	69	;'E'
  1499  00FFC2  44                 	db	68	;'D'
  1500  00FFC3  00                 	db	0
  1501  00FFC4                     STR_7:
  1502  00FFC4  53                 	db	83	;'S'
  1503  00FFC5  54                 	db	84	;'T'
  1504  00FFC6  41                 	db	65	;'A'
  1505  00FFC7  52                 	db	82	;'R'
  1506  00FFC8  54                 	db	84	;'T'
  1507  00FFC9  3A                 	db	58	;':'
  1508  00FFCA  00                 	db	0
  1509  00FFCB                     STR_9:
  1510  00FFCB  46                 	db	70	;'F'
  1511  00FFCC  45                 	db	69	;'E'
  1512  00FFCD  42                 	db	66	;'B'
  1513  00FFCE  00                 	db	0
  1514  00FFCF                     STR_19:
  1515  00FFCF  44                 	db	68	;'D'
  1516  00FFD0  45                 	db	69	;'E'
  1517  00FFD1  43                 	db	67	;'C'
  1518  00FFD2  00                 	db	0
  1519  00FFD3                     STR_15:
  1520  00FFD3  41                 	db	65	;'A'
  1521  00FFD4  55                 	db	85	;'U'
  1522  00FFD5  47                 	db	71	;'G'
  1523  00FFD6  00                 	db	0
  1524  00FFD7                     STR_14:
  1525  00FFD7  4A                 	db	74	;'J'
  1526  00FFD8  55                 	db	85	;'U'
  1527  00FFD9  4C                 	db	76	;'L'
  1528  00FFDA  00                 	db	0
  1529  00FFDB                     STR_8:
  1530  00FFDB  4A                 	db	74	;'J'
  1531  00FFDC  41                 	db	65	;'A'
  1532  00FFDD  4E                 	db	78	;'N'
  1533  00FFDE  00                 	db	0
  1534  00FFDF                     STR_13:
  1535  00FFDF  4A                 	db	74	;'J'
  1536  00FFE0  55                 	db	85	;'U'
  1537  00FFE1  4E                 	db	78	;'N'
  1538  00FFE2  00                 	db	0
  1539  00FFE3                     STR_16:
  1540  00FFE3  53                 	db	83	;'S'
  1541  00FFE4  45                 	db	69	;'E'
  1542  00FFE5  50                 	db	80	;'P'
  1543  00FFE6  00                 	db	0
  1544  00FFE7                     STR_10:
  1545  00FFE7  4D                 	db	77	;'M'
  1546  00FFE8  41                 	db	65	;'A'
  1547  00FFE9  52                 	db	82	;'R'
  1548  00FFEA  00                 	db	0
  1549  00FFEB                     STR_11:
  1550  00FFEB  41                 	db	65	;'A'
  1551  00FFEC  50                 	db	80	;'P'
  1552  00FFED  52                 	db	82	;'R'
  1553  00FFEE  00                 	db	0
  1554  00FFEF                     STR_20:
  1555  00FFEF  45                 	db	69	;'E'
  1556  00FFF0  52                 	db	82	;'R'
  1557  00FFF1  52                 	db	82	;'R'
  1558  00FFF2  00                 	db	0
  1559  00FFF3                     STR_17:
  1560  00FFF3  4F                 	db	79	;'O'
  1561  00FFF4  43                 	db	67	;'C'
  1562  00FFF5  54                 	db	84	;'T'
  1563  00FFF6  00                 	db	0
  1564  00FFF7                     STR_18:
  1565  00FFF7  4E                 	db	78	;'N'
  1566  00FFF8  4F                 	db	79	;'O'
  1567  00FFF9  56                 	db	86	;'V'
  1568  00FFFA  00                 	db	0
  1569  00FFFB                     STR_12:
  1570  00FFFB  4D                 	db	77	;'M'
  1571  00FFFC  41                 	db	65	;'A'
  1572  00FFFD  59                 	db	89	;'Y'
  1573  00FFFE  00                 	db	0
  1574  0000                     
  1575                           ; #config settings
  1576  00FFFF  00                 	db	0	; dummy byte at the end
  1577  0000                     
  1578                           	psect	cinit
  1579  004058                     __pcinit:
  1580                           	opt stack 0
  1581  004058                     start_initialization:
  1582                           	opt stack 0
  1583  004058                     __initialization:
  1584                           	opt stack 0
  1585                           
  1586                           ; Initialize objects allocated to BANK1 (8 bytes)
  1587                           ; load TBLPTR registers with __pidataBANK1
  1588  004058  0E72               	movlw	low __pidataBANK1
  1589  00405A  6EF6               	movwf	tblptrl,c
  1590  00405C  0E47               	movlw	high __pidataBANK1
  1591  00405E  6EF7               	movwf	tblptrh,c
  1592  004060  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1593  004062  6EF8               	movwf	tblptru,c
  1594  004064  EE01  F02F         	lfsr	0,__pdataBANK1
  1595  004068  EE10 F008          	lfsr	1,8
  1596  00406C                     copy_data0:
  1597  00406C  0009               	tblrd		*+
  1598  00406E  CFF5 FFEE          	movff	tablat,postinc0
  1599  004072  50E5               	movf	postdec1,w,c
  1600  004074  50E1               	movf	fsr1l,w,c
  1601  004076  E1FA               	bnz	copy_data0
  1602                           
  1603                           ; Clear objects allocated to BANK1 (47 bytes)
  1604  004078  EE01  F000         	lfsr	0,__pbssBANK1
  1605  00407C  0E2F               	movlw	47
  1606  00407E                     clear_0:
  1607  00407E  6AEE               	clrf	postinc0,c
  1608  004080  06E8               	decf	wreg,f,c
  1609  004082  E1FD               	bnz	clear_0
  1610                           
  1611                           ; Clear objects allocated to BANK0 (38 bytes)
  1612  004084  EE00  F0DA         	lfsr	0,__pbssBANK0
  1613  004088  0E26               	movlw	38
  1614  00408A                     clear_1:
  1615  00408A  6AEE               	clrf	postinc0,c
  1616  00408C  06E8               	decf	wreg,f,c
  1617  00408E  E1FD               	bnz	clear_1
  1618                           
  1619                           ; Clear objects allocated to COMRAM (35 bytes)
  1620  004090  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1621  004094  0E23               	movlw	35
  1622  004096                     clear_2:
  1623  004096  6AEE               	clrf	postinc0,c
  1624  004098  06E8               	decf	wreg,f,c
  1625  00409A  E1FD               	bnz	clear_2
  1626  00409C                     end_of_initialization:
  1627                           	opt stack 0
  1628  00409C                     __end_of__initialization:
  1629                           	opt stack 0
  1630  00409C  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1631  00409E  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1632  0040A0  0100               	movlb	0
  1633  0040A2  EF92  F01A         	goto	_main	;jump to C main() function
  1634                           tblptru	equ	0xFF8
  1635                           tblptrh	equ	0xFF7
  1636                           tblptrl	equ	0xFF6
  1637                           tablat	equ	0xFF5
  1638                           postinc0	equ	0xFEE
  1639                           wreg	equ	0xFE8
  1640                           postdec1	equ	0xFE5
  1641                           fsr1l	equ	0xFE1
  1642                           
  1643                           	psect	bssCOMRAM
  1644  00005B                     __pbssCOMRAM:
  1645                           	opt stack 0
  1646  00005B                     _back:
  1647                           	opt stack 0
  1648  00005B                     	ds	2
  1649  00005D                     _count_can_no_lab:
  1650                           	opt stack 0
  1651  00005D                     	ds	2
  1652  00005F                     _count_can_w_lab:
  1653                           	opt stack 0
  1654  00005F                     	ds	2
  1655  000061                     _count_pop_no_tab:
  1656                           	opt stack 0
  1657  000061                     	ds	2
  1658  000063                     _count_pop_w_tab:
  1659                           	opt stack 0
  1660  000063                     	ds	2
  1661  000065                     _debug:
  1662                           	opt stack 0
  1663  000065                     	ds	2
  1664  000067                     _down:
  1665                           	opt stack 0
  1666  000067                     	ds	2
  1667  000069                     _enter:
  1668                           	opt stack 0
  1669  000069                     	ds	2
  1670  00006B                     _f_ID_receive:
  1671                           	opt stack 0
  1672  00006B                     	ds	2
  1673  00006D                     _f_can_coming_to_ID:
  1674                           	opt stack 0
  1675  00006D                     	ds	2
  1676  00006F                     _f_can_coming_to_distribution:
  1677                           	opt stack 0
  1678  00006F                     	ds	2
  1679  000071                     _f_lastCan:
  1680                           	opt stack 0
  1681  000071                     	ds	2
  1682  000073                     _first:
  1683                           	opt stack 0
  1684  000073                     	ds	2
  1685  000075                     _firstboot:
  1686                           	opt stack 0
  1687  000075                     	ds	2
  1688  000077                     _up:
  1689                           	opt stack 0
  1690  000077                     	ds	2
  1691  000079                     _was_low_1:
  1692                           	opt stack 0
  1693  000079                     	ds	2
  1694  00007B                     _was_low_3:
  1695                           	opt stack 0
  1696  00007B                     	ds	2
  1697  00007D                     _input:
  1698                           	opt stack 0
  1699  00007D                     	ds	1
  1700                           tblptru	equ	0xFF8
  1701                           tblptrh	equ	0xFF7
  1702                           tblptrl	equ	0xFF6
  1703                           tablat	equ	0xFF5
  1704                           postinc0	equ	0xFEE
  1705                           wreg	equ	0xFE8
  1706                           postdec1	equ	0xFE5
  1707                           fsr1l	equ	0xFE1
  1708                           
  1709                           	psect	bssBANK0
  1710  0000DA                     __pbssBANK0:
  1711                           	opt stack 0
  1712  0000DA                     _IR_signal:
  1713                           	opt stack 0
  1714  0000DA                     	ds	2
  1715  0000DC                     _MAG_signal:
  1716                           	opt stack 0
  1717  0000DC                     	ds	2
  1718  0000DE                     _RTCflag:
  1719                           	opt stack 0
  1720  0000DE                     	ds	2
  1721  0000E0                     _cur_state:
  1722                           	opt stack 0
  1723  0000E0                     	ds	2
  1724  0000E2                     _f_loadingNewCan:
  1725                           	opt stack 0
  1726  0000E2                     	ds	2
  1727  0000E4                     _i:
  1728                           	opt stack 0
  1729  0000E4                     	ds	2
  1730  0000E6                     _log:
  1731                           	opt stack 0
  1732  0000E6                     	ds	2
  1733  0000E8                     _log_completion:
  1734                           	opt stack 0
  1735  0000E8                     	ds	2
  1736  0000EA                     _log_count_can_no_lab:
  1737                           	opt stack 0
  1738  0000EA                     	ds	2
  1739  0000EC                     _log_count_can_w_lab:
  1740                           	opt stack 0
  1741  0000EC                     	ds	2
  1742  0000EE                     _log_count_pop_no_tab:
  1743                           	opt stack 0
  1744  0000EE                     	ds	2
  1745  0000F0                     _log_count_pop_w_tab:
  1746                           	opt stack 0
  1747  0000F0                     	ds	2
  1748  0000F2                     _log_count_total:
  1749                           	opt stack 0
  1750  0000F2                     	ds	2
  1751  0000F4                     _log_total_time:
  1752                           	opt stack 0
  1753  0000F4                     	ds	2
  1754  0000F6                     _logstate:
  1755                           	opt stack 0
  1756  0000F6                     	ds	2
  1757  0000F8                     _total_time:
  1758                           	opt stack 0
  1759  0000F8                     	ds	2
  1760  0000FA                     _var:
  1761                           	opt stack 0
  1762  0000FA                     	ds	2
  1763  0000FC                     _machine_state:
  1764                           	opt stack 0
  1765  0000FC                     	ds	1
  1766  0000FD                     _sel:
  1767                           	opt stack 0
  1768  0000FD                     	ds	1
  1769  0000FE                     _count_total:
  1770                           	opt stack 0
  1771  0000FE                     	ds	2
  1772                           tblptru	equ	0xFF8
  1773                           tblptrh	equ	0xFF7
  1774                           tblptrl	equ	0xFF6
  1775                           tablat	equ	0xFF5
  1776                           postinc0	equ	0xFEE
  1777                           wreg	equ	0xFE8
  1778                           postdec1	equ	0xFE5
  1779                           fsr1l	equ	0xFE1
  1780                           
  1781                           	psect	bssBANK1
  1782  000100                     __pbssBANK1:
  1783                           	opt stack 0
  1784  000100                     _log_startTime:
  1785                           	opt stack 0
  1786  000100                     	ds	14
  1787  00010E                     _startTime:
  1788                           	opt stack 0
  1789  00010E                     	ds	14
  1790  00011C                     _servoTimes:
  1791                           	opt stack 0
  1792  00011C                     	ds	8
  1793  000124                     _time:
  1794                           	opt stack 0
  1795  000124                     	ds	7
  1796  00012B                     _cur_can:
  1797                           	opt stack 0
  1798  00012B                     	ds	2
  1799  00012D                     _f_can_distributed:
  1800                           	opt stack 0
  1801  00012D                     	ds	2
  1802                           tblptru	equ	0xFF8
  1803                           tblptrh	equ	0xFF7
  1804                           tblptrl	equ	0xFF6
  1805                           tablat	equ	0xFF5
  1806                           postinc0	equ	0xFEE
  1807                           wreg	equ	0xFE8
  1808                           postdec1	equ	0xFE5
  1809                           fsr1l	equ	0xFE1
  1810                           
  1811                           	psect	dataBANK1
  1812  00012F                     __pdataBANK1:
  1813                           	opt stack 0
  1814  00012F                     UI@F3225:
  1815                           	opt stack 0
  1816  00012F                     	ds	4
  1817  000133                     printRTC@F3216:
  1818                           	opt stack 0
  1819  000133                     	ds	4
  1820                           tblptru	equ	0xFF8
  1821                           tblptrh	equ	0xFF7
  1822                           tblptrl	equ	0xFF6
  1823                           tablat	equ	0xFF5
  1824                           postinc0	equ	0xFEE
  1825                           wreg	equ	0xFE8
  1826                           postdec1	equ	0xFE5
  1827                           fsr1l	equ	0xFE1
  1828                           
  1829                           	psect	cstackBANK0
  1830  000080                     __pcstackBANK0:
  1831                           	opt stack 0
  1832  000080                     ??_PortTests:
  1833  000080                     ??_isdigit:
  1834  000080                     ??_readADC:
  1835  000080                     ??_I2C_Master_Wait:
  1836  000080                     ?___wmul:
  1837                           	opt stack 0
  1838  000080                     ?___awmod:
  1839                           	opt stack 0
  1840  000080                     ?___lwdiv:
  1841                           	opt stack 0
  1842  000080                     ?___lldiv:
  1843                           	opt stack 0
  1844  000080                     lcdNibble@temp:
  1845                           	opt stack 0
  1846  000080                     initTime@m:
  1847                           	opt stack 0
  1848  000080                     updateServoPosition@time_us:
  1849                           	opt stack 0
  1850  000080                     EEPROM_read@address:
  1851                           	opt stack 0
  1852  000080                     ___wmul@multiplier:
  1853                           	opt stack 0
  1854  000080                     ___awmod@dividend:
  1855                           	opt stack 0
  1856  000080                     ___lwdiv@dividend:
  1857                           	opt stack 0
  1858  000080                     strcpy@to:
  1859                           	opt stack 0
  1860  000080                     ___lldiv@dividend:
  1861                           	opt stack 0
  1862                           
  1863                           ; 4 bytes @ 0x0
  1864  000080                     	ds	1
  1865  000081                     readADC@channel:
  1866                           	opt stack 0
  1867  000081                     I2C_Master_Read@a:
  1868                           	opt stack 0
  1869  000081                     lcdNibble@data:
  1870                           	opt stack 0
  1871  000081                     initTime@h:
  1872                           	opt stack 0
  1873  000081                     _isdigit$1936:
  1874                           	opt stack 0
  1875  000081                     I2C_Master_Write@d:
  1876                           	opt stack 0
  1877                           
  1878                           ; 2 bytes @ 0x1
  1879  000081                     	ds	1
  1880  000082                     ??_readIR:
  1881  000082                     ??_readMAG:
  1882  000082                     I2C_Master_Read@temp:
  1883                           	opt stack 0
  1884  000082                     lcdInst@data:
  1885                           	opt stack 0
  1886  000082                     putch@data:
  1887                           	opt stack 0
  1888  000082                     initTime@w:
  1889                           	opt stack 0
  1890  000082                     isdigit@c:
  1891                           	opt stack 0
  1892  000082                     updateServoPosition@timer:
  1893                           	opt stack 0
  1894  000082                     ___wmul@multiplicand:
  1895                           	opt stack 0
  1896  000082                     ___awmod@divisor:
  1897                           	opt stack 0
  1898  000082                     ___lwdiv@divisor:
  1899                           	opt stack 0
  1900  000082                     strcpy@from:
  1901                           	opt stack 0
  1902                           
  1903                           ; 2 bytes @ 0x2
  1904  000082                     	ds	1
  1905  000083                     ??_initLCD:
  1906  000083                     initTime@DD:
  1907                           	opt stack 0
  1908  000083                     getRTC@i:
  1909                           	opt stack 0
  1910                           
  1911                           ; 2 bytes @ 0x3
  1912  000083                     	ds	1
  1913  000084                     ??_updateServoPosition:
  1914  000084                     initTime@MM:
  1915                           	opt stack 0
  1916  000084                     ___awmod@counter:
  1917                           	opt stack 0
  1918  000084                     readIR@res:
  1919                           	opt stack 0
  1920  000084                     readMAG@res:
  1921                           	opt stack 0
  1922  000084                     ___wmul@product:
  1923                           	opt stack 0
  1924  000084                     ___lwdiv@quotient:
  1925                           	opt stack 0
  1926  000084                     strcpy@cp:
  1927                           	opt stack 0
  1928  000084                     ___lldiv@divisor:
  1929                           	opt stack 0
  1930                           
  1931                           ; 4 bytes @ 0x4
  1932  000084                     	ds	1
  1933  000085                     ??_initSortTimer:
  1934  000085                     initTime@YY:
  1935                           	opt stack 0
  1936  000085                     ___awmod@sign:
  1937                           	opt stack 0
  1938                           
  1939                           ; 1 bytes @ 0x5
  1940  000085                     	ds	1
  1941  000086                     ??_getIR:
  1942  000086                     ??_getMAG:
  1943  000086                     ?___awdiv:
  1944                           	opt stack 0
  1945  000086                     initTime@s:
  1946                           	opt stack 0
  1947  000086                     ___lwdiv@counter:
  1948                           	opt stack 0
  1949  000086                     updateServoPosition@my_time:
  1950                           	opt stack 0
  1951  000086                     ___awdiv@dividend:
  1952                           	opt stack 0
  1953                           
  1954                           ; 2 bytes @ 0x6
  1955  000086                     	ds	1
  1956  000087                     ?___lwmod:
  1957                           	opt stack 0
  1958  000087                     ___lwmod@dividend:
  1959                           	opt stack 0
  1960                           
  1961                           ; 2 bytes @ 0x7
  1962  000087                     	ds	1
  1963  000088                     ??_ID:
  1964  000088                     ??_Distribution:
  1965  000088                     ??_initServos:
  1966  000088                     initSortTimer@i:
  1967                           	opt stack 0
  1968  000088                     ___awdiv@divisor:
  1969                           	opt stack 0
  1970  000088                     ___lldiv@quotient:
  1971                           	opt stack 0
  1972                           
  1973                           ; 4 bytes @ 0x8
  1974  000088                     	ds	1
  1975  000089                     ___lwmod@divisor:
  1976                           	opt stack 0
  1977                           
  1978                           ; 2 bytes @ 0x9
  1979  000089                     	ds	1
  1980  00008A                     ___awdiv@counter:
  1981                           	opt stack 0
  1982  00008A                     ID@i:
  1983                           	opt stack 0
  1984                           
  1985                           ; 2 bytes @ 0xA
  1986  00008A                     	ds	1
  1987  00008B                     ___awdiv@sign:
  1988                           	opt stack 0
  1989  00008B                     ___lwmod@counter:
  1990                           	opt stack 0
  1991                           
  1992                           ; 1 bytes @ 0xB
  1993  00008B                     	ds	1
  1994  00008C                     ___lldiv@counter:
  1995                           	opt stack 0
  1996  00008C                     ___awdiv@quotient:
  1997                           	opt stack 0
  1998  00008C                     ID@sensor_outputs:
  1999                           	opt stack 0
  2000                           
  2001                           ; 6 bytes @ 0xC
  2002  00008C                     	ds	1
  2003  00008D                     I2C_Master_Init@c:
  2004                           	opt stack 0
  2005                           
  2006                           ; 4 bytes @ 0xD
  2007  00008D                     	ds	1
  2008  00008E                     ?_printf:
  2009                           	opt stack 0
  2010  00008E                     printf@f:
  2011                           	opt stack 0
  2012                           
  2013                           ; 2 bytes @ 0xE
  2014  00008E                     	ds	3
  2015  000091                     ??_I2C_Master_Init:
  2016                           
  2017                           ; 1 bytes @ 0x11
  2018  000091                     	ds	4
  2019  000095                     ??_loadRTC:
  2020                           
  2021                           ; 1 bytes @ 0x15
  2022  000095                     	ds	1
  2023  000096                     loadRTC@i:
  2024                           	opt stack 0
  2025                           
  2026                           ; 2 bytes @ 0x16
  2027  000096                     	ds	4
  2028  00009A                     ??_printf:
  2029                           
  2030                           ; 1 bytes @ 0x1A
  2031  00009A                     	ds	4
  2032  00009E                     printf@prec:
  2033                           	opt stack 0
  2034                           
  2035                           ; 1 bytes @ 0x1E
  2036  00009E                     	ds	1
  2037  00009F                     printf@cp:
  2038                           	opt stack 0
  2039                           
  2040                           ; 2 bytes @ 0x1F
  2041  00009F                     	ds	2
  2042  0000A1                     printf@ap:
  2043                           	opt stack 0
  2044                           
  2045                           ; 2 bytes @ 0x21
  2046  0000A1                     	ds	2
  2047  0000A3                     printf@len:
  2048                           	opt stack 0
  2049                           
  2050                           ; 2 bytes @ 0x23
  2051  0000A3                     	ds	2
  2052  0000A5                     printf@val:
  2053                           	opt stack 0
  2054                           
  2055                           ; 2 bytes @ 0x25
  2056  0000A5                     	ds	2
  2057  0000A7                     printf@flag:
  2058                           	opt stack 0
  2059                           
  2060                           ; 1 bytes @ 0x27
  2061  0000A7                     	ds	1
  2062  0000A8                     printf@c:
  2063                           	opt stack 0
  2064                           
  2065                           ; 1 bytes @ 0x28
  2066  0000A8                     	ds	1
  2067  0000A9                     printf@width:
  2068                           	opt stack 0
  2069                           
  2070                           ; 2 bytes @ 0x29
  2071  0000A9                     	ds	2
  2072  0000AB                     ??_printRTC:
  2073  0000AB                     ??_algorithmTest:
  2074  0000AB                     ??_sensorTest:
  2075  0000AB                     ??_actuatorTest:
  2076  0000AB                     ??_PortTestA5:
  2077  0000AB                     ??_ToggleTestA5:
  2078  0000AB                     ??_PusherTestA5:
  2079  0000AB                     ??_BothServos:
  2080  0000AB                     EEPROM_write@address:
  2081                           	opt stack 0
  2082                           
  2083                           ; 2 bytes @ 0x2B
  2084  0000AB                     	ds	1
  2085  0000AC                     ToggleTestA5@on:
  2086                           	opt stack 0
  2087                           
  2088                           ; 2 bytes @ 0x2C
  2089  0000AC                     	ds	1
  2090  0000AD                     EEPROM_write@data:
  2091                           	opt stack 0
  2092  0000AD                     actuatorTest@i_1631:
  2093                           	opt stack 0
  2094  0000AD                     sensorTest@res:
  2095                           	opt stack 0
  2096                           
  2097                           ; 2 bytes @ 0x2D
  2098  0000AD                     	ds	1
  2099  0000AE                     ??_EEPROM_write:
  2100  0000AE                     actuatorTest@i_1638:
  2101                           	opt stack 0
  2102  0000AE                     printRTC@INT_time:
  2103                           	opt stack 0
  2104                           
  2105                           ; 14 bytes @ 0x2E
  2106  0000AE                     	ds	1
  2107  0000AF                     EEPROM_write@i:
  2108                           	opt stack 0
  2109  0000AF                     actuatorTest@i_1639:
  2110                           	opt stack 0
  2111                           
  2112                           ; 1 bytes @ 0x2F
  2113  0000AF                     	ds	1
  2114  0000B0                     EEPROM_write@i_1322:
  2115                           	opt stack 0
  2116  0000B0                     actuatorTest@i_1641:
  2117                           	opt stack 0
  2118                           
  2119                           ; 1 bytes @ 0x30
  2120  0000B0                     	ds	1
  2121  0000B1                     ??_Loading:
  2122  0000B1                     logRun@num:
  2123                           	opt stack 0
  2124  0000B1                     actuatorTest@i_1642:
  2125                           	opt stack 0
  2126                           
  2127                           ; 1 bytes @ 0x31
  2128  0000B1                     	ds	1
  2129  0000B2                     logRun@byte1:
  2130                           	opt stack 0
  2131  0000B2                     actuatorTest@i_1644:
  2132                           	opt stack 0
  2133                           
  2134                           ; 1 bytes @ 0x32
  2135  0000B2                     	ds	1
  2136  0000B3                     logRun@byte2:
  2137                           	opt stack 0
  2138  0000B3                     actuatorTest@i_1645:
  2139                           	opt stack 0
  2140  0000B3                     Loading@addr:
  2141                           	opt stack 0
  2142                           
  2143                           ; 2 bytes @ 0x33
  2144  0000B3                     	ds	1
  2145  0000B4                     logRun@byte3:
  2146                           	opt stack 0
  2147  0000B4                     actuatorTest@i_1647:
  2148                           	opt stack 0
  2149                           
  2150                           ; 1 bytes @ 0x34
  2151  0000B4                     	ds	1
  2152  0000B5                     Loading@byte1:
  2153                           	opt stack 0
  2154  0000B5                     logRun@byte_i:
  2155                           	opt stack 0
  2156  0000B5                     actuatorTest@i_1648:
  2157                           	opt stack 0
  2158                           
  2159                           ; 1 bytes @ 0x35
  2160  0000B5                     	ds	1
  2161  0000B6                     logRun@byte11:
  2162                           	opt stack 0
  2163  0000B6                     actuatorTest@i_1650:
  2164                           	opt stack 0
  2165                           
  2166                           ; 1 bytes @ 0x36
  2167  0000B6                     	ds	1
  2168  0000B7                     actuatorTest@i_1651:
  2169                           	opt stack 0
  2170  0000B7                     logRun@i:
  2171                           	opt stack 0
  2172                           
  2173                           ; 2 bytes @ 0x37
  2174  0000B7                     	ds	1
  2175  0000B8                     actuatorTest@i_1653:
  2176                           	opt stack 0
  2177                           
  2178                           ; 1 bytes @ 0x38
  2179  0000B8                     	ds	1
  2180  0000B9                     actuatorTest@i_1654:
  2181                           	opt stack 0
  2182  0000B9                     logRun@addr:
  2183                           	opt stack 0
  2184                           
  2185                           ; 2 bytes @ 0x39
  2186  0000B9                     	ds	1
  2187  0000BA                     actuatorTest@i_1657:
  2188                           	opt stack 0
  2189                           
  2190                           ; 1 bytes @ 0x3A
  2191  0000BA                     	ds	1
  2192  0000BB                     actuatorTest@i_1658:
  2193                           	opt stack 0
  2194                           
  2195                           ; 1 bytes @ 0x3B
  2196  0000BB                     	ds	1
  2197  0000BC                     actuatorTest@i_1660:
  2198                           	opt stack 0
  2199  0000BC                     printRTC@RTC_month:
  2200                           	opt stack 0
  2201                           
  2202                           ; 2 bytes @ 0x3C
  2203  0000BC                     	ds	1
  2204  0000BD                     actuatorTest@i_1661:
  2205                           	opt stack 0
  2206                           
  2207                           ; 1 bytes @ 0x3D
  2208  0000BD                     	ds	1
  2209  0000BE                     actuatorTest@i_1663:
  2210                           	opt stack 0
  2211  0000BE                     printRTC@month:
  2212                           	opt stack 0
  2213                           
  2214                           ; 4 bytes @ 0x3E
  2215  0000BE                     	ds	1
  2216  0000BF                     actuatorTest@i_1664:
  2217                           	opt stack 0
  2218                           
  2219                           ; 1 bytes @ 0x3F
  2220  0000BF                     	ds	1
  2221  0000C0                     actuatorTest@i_1667:
  2222                           	opt stack 0
  2223                           
  2224                           ; 1 bytes @ 0x40
  2225  0000C0                     	ds	1
  2226  0000C1                     actuatorTest@i_1668:
  2227                           	opt stack 0
  2228                           
  2229                           ; 1 bytes @ 0x41
  2230  0000C1                     	ds	1
  2231  0000C2                     actuatorTest@i_1670:
  2232                           	opt stack 0
  2233  0000C2                     printRTC@i:
  2234                           	opt stack 0
  2235                           
  2236                           ; 2 bytes @ 0x42
  2237  0000C2                     	ds	1
  2238  0000C3                     actuatorTest@i_1671:
  2239                           	opt stack 0
  2240                           
  2241                           ; 1 bytes @ 0x43
  2242  0000C3                     	ds	1
  2243  0000C4                     ??_UI:
  2244  0000C4                     actuatorTest@i:
  2245                           	opt stack 0
  2246                           
  2247                           ; 2 bytes @ 0x44
  2248  0000C4                     	ds	2
  2249  0000C6                     ??_Test:
  2250  0000C6                     _UI$2292:
  2251                           	opt stack 0
  2252                           
  2253                           ; 2 bytes @ 0x46
  2254  0000C6                     	ds	2
  2255  0000C8                     UI@i:
  2256                           	opt stack 0
  2257                           
  2258                           ; 1 bytes @ 0x48
  2259  0000C8                     	ds	1
  2260  0000C9                     UI@i_409:
  2261                           	opt stack 0
  2262                           
  2263                           ; 1 bytes @ 0x49
  2264  0000C9                     	ds	1
  2265  0000CA                     UI@i_412:
  2266                           	opt stack 0
  2267                           
  2268                           ; 1 bytes @ 0x4A
  2269  0000CA                     	ds	1
  2270  0000CB                     UI@i_413:
  2271                           	opt stack 0
  2272                           
  2273                           ; 1 bytes @ 0x4B
  2274  0000CB                     	ds	1
  2275  0000CC                     UI@i_431:
  2276                           	opt stack 0
  2277                           
  2278                           ; 1 bytes @ 0x4C
  2279  0000CC                     	ds	1
  2280  0000CD                     UI@i_432:
  2281                           	opt stack 0
  2282                           
  2283                           ; 1 bytes @ 0x4D
  2284  0000CD                     	ds	1
  2285  0000CE                     UI@i_435:
  2286                           	opt stack 0
  2287                           
  2288                           ; 1 bytes @ 0x4E
  2289  0000CE                     	ds	1
  2290  0000CF                     UI@i_436:
  2291                           	opt stack 0
  2292                           
  2293                           ; 1 bytes @ 0x4F
  2294  0000CF                     	ds	1
  2295  0000D0                     UI@i_439:
  2296                           	opt stack 0
  2297                           
  2298                           ; 1 bytes @ 0x50
  2299  0000D0                     	ds	1
  2300  0000D1                     UI@i_440:
  2301                           	opt stack 0
  2302                           
  2303                           ; 1 bytes @ 0x51
  2304  0000D1                     	ds	1
  2305  0000D2                     UI@i_443:
  2306                           	opt stack 0
  2307                           
  2308                           ; 1 bytes @ 0x52
  2309  0000D2                     	ds	1
  2310  0000D3                     UI@i_444:
  2311                           	opt stack 0
  2312                           
  2313                           ; 1 bytes @ 0x53
  2314  0000D3                     	ds	1
  2315  0000D4                     UI@i_447:
  2316                           	opt stack 0
  2317                           
  2318                           ; 1 bytes @ 0x54
  2319  0000D4                     	ds	1
  2320  0000D5                     UI@i_448:
  2321                           	opt stack 0
  2322                           
  2323                           ; 1 bytes @ 0x55
  2324  0000D5                     	ds	1
  2325  0000D6                     UI@month:
  2326                           	opt stack 0
  2327                           
  2328                           ; 4 bytes @ 0x56
  2329  0000D6                     	ds	4
  2330  0000DA                     tblptru	equ	0xFF8
  2331                           tblptrh	equ	0xFF7
  2332                           tblptrl	equ	0xFF6
  2333                           tablat	equ	0xFF5
  2334                           postinc0	equ	0xFEE
  2335                           wreg	equ	0xFE8
  2336                           postdec1	equ	0xFE5
  2337                           fsr1l	equ	0xFE1
  2338                           
  2339                           ; 1 bytes @ 0x5A
  2340                           
  2341                           	psect	cstackCOMRAM
  2342  000001                     __pcstackCOMRAM:
  2343                           	opt stack 0
  2344  000001                     ??i2_I2C_Master_Wait:
  2345  000001                     ??i2_isdigit:
  2346  000001                     ?i2___wmul:
  2347                           	opt stack 0
  2348  000001                     ?i2___lwmod:
  2349                           	opt stack 0
  2350  000001                     i2lcdNibble@temp:
  2351                           	opt stack 0
  2352  000001                     i2EEPROM_read@address:
  2353                           	opt stack 0
  2354  000001                     i2___wmul@multiplier:
  2355                           	opt stack 0
  2356  000001                     i2___lwmod@dividend:
  2357                           	opt stack 0
  2358  000001                     i2strcpy@to:
  2359                           	opt stack 0
  2360                           
  2361                           ; 2 bytes @ 0x0
  2362  000001                     	ds	1
  2363  000002                     i2I2C_Master_Read@a:
  2364                           	opt stack 0
  2365  000002                     i2lcdNibble@data:
  2366                           	opt stack 0
  2367  000002                     i2_isdigit$1936:
  2368                           	opt stack 0
  2369  000002                     i2I2C_Master_Write@d:
  2370                           	opt stack 0
  2371                           
  2372                           ; 2 bytes @ 0x1
  2373  000002                     	ds	1
  2374  000003                     i2I2C_Master_Read@temp:
  2375                           	opt stack 0
  2376  000003                     i2lcdInst@data:
  2377                           	opt stack 0
  2378  000003                     i2putch@data:
  2379                           	opt stack 0
  2380  000003                     i2isdigit@c:
  2381                           	opt stack 0
  2382  000003                     i2___wmul@multiplicand:
  2383                           	opt stack 0
  2384  000003                     i2___lwmod@divisor:
  2385                           	opt stack 0
  2386  000003                     i2strcpy@from:
  2387                           	opt stack 0
  2388                           
  2389                           ; 2 bytes @ 0x2
  2390  000003                     	ds	1
  2391  000004                     i2getRTC@i:
  2392                           	opt stack 0
  2393                           
  2394                           ; 2 bytes @ 0x3
  2395  000004                     	ds	1
  2396  000005                     i2___lwmod@counter:
  2397                           	opt stack 0
  2398  000005                     i2___wmul@product:
  2399                           	opt stack 0
  2400  000005                     i2strcpy@cp:
  2401                           	opt stack 0
  2402                           
  2403                           ; 2 bytes @ 0x4
  2404  000005                     	ds	1
  2405  000006                     ?i2___lwdiv:
  2406                           	opt stack 0
  2407  000006                     i2___lwdiv@dividend:
  2408                           	opt stack 0
  2409                           
  2410                           ; 2 bytes @ 0x5
  2411  000006                     	ds	1
  2412  000007                     retrieveLog@logNum:
  2413                           	opt stack 0
  2414                           
  2415                           ; 2 bytes @ 0x6
  2416  000007                     	ds	1
  2417  000008                     i2___lwdiv@divisor:
  2418                           	opt stack 0
  2419                           
  2420                           ; 2 bytes @ 0x7
  2421  000008                     	ds	1
  2422  000009                     ??_retrieveLog:
  2423                           
  2424                           ; 1 bytes @ 0x8
  2425  000009                     	ds	1
  2426  00000A                     i2___lwdiv@quotient:
  2427                           	opt stack 0
  2428                           
  2429                           ; 2 bytes @ 0x9
  2430  00000A                     	ds	1
  2431  00000B                     retrieveLog@byte1:
  2432                           	opt stack 0
  2433                           
  2434                           ; 1 bytes @ 0xA
  2435  00000B                     	ds	1
  2436  00000C                     retrieveLog@byte2:
  2437                           	opt stack 0
  2438  00000C                     i2___lwdiv@counter:
  2439                           	opt stack 0
  2440                           
  2441                           ; 1 bytes @ 0xB
  2442  00000C                     	ds	1
  2443  00000D                     ?i2_printf:
  2444                           	opt stack 0
  2445  00000D                     retrieveLog@byte3:
  2446                           	opt stack 0
  2447  00000D                     i2printf@f:
  2448                           	opt stack 0
  2449                           
  2450                           ; 2 bytes @ 0xC
  2451  00000D                     	ds	1
  2452  00000E                     retrieveLog@i:
  2453                           	opt stack 0
  2454                           
  2455                           ; 2 bytes @ 0xD
  2456  00000E                     	ds	2
  2457  000010                     retrieveLog@addr:
  2458                           	opt stack 0
  2459                           
  2460                           ; 2 bytes @ 0xF
  2461  000010                     	ds	2
  2462  000012                     dispLogs@myLog:
  2463                           	opt stack 0
  2464                           
  2465                           ; 2 bytes @ 0x11
  2466  000012                     	ds	2
  2467  000014                     
  2468                           ; 1 bytes @ 0x13
  2469  000014                     	ds	5
  2470  000019                     ??i2_printf:
  2471                           
  2472                           ; 1 bytes @ 0x18
  2473  000019                     	ds	4
  2474  00001D                     i2printf@prec:
  2475                           	opt stack 0
  2476                           
  2477                           ; 1 bytes @ 0x1C
  2478  00001D                     	ds	1
  2479  00001E                     i2printf@cp:
  2480                           	opt stack 0
  2481                           
  2482                           ; 2 bytes @ 0x1D
  2483  00001E                     	ds	2
  2484  000020                     i2printf@ap:
  2485                           	opt stack 0
  2486                           
  2487                           ; 2 bytes @ 0x1F
  2488  000020                     	ds	2
  2489  000022                     i2printf@len:
  2490                           	opt stack 0
  2491                           
  2492                           ; 2 bytes @ 0x21
  2493  000022                     	ds	2
  2494  000024                     i2printf@val:
  2495                           	opt stack 0
  2496                           
  2497                           ; 2 bytes @ 0x23
  2498  000024                     	ds	2
  2499  000026                     i2printf@flag:
  2500                           	opt stack 0
  2501                           
  2502                           ; 1 bytes @ 0x25
  2503  000026                     	ds	1
  2504  000027                     i2printf@c:
  2505                           	opt stack 0
  2506                           
  2507                           ; 1 bytes @ 0x26
  2508  000027                     	ds	1
  2509  000028                     i2printf@width:
  2510                           	opt stack 0
  2511                           
  2512                           ; 2 bytes @ 0x27
  2513  000028                     	ds	2
  2514  00002A                     ??_printSortTimer:
  2515  00002A                     ??i2_printRTC:
  2516  00002A                     ?_inputHandler:
  2517                           	opt stack 0
  2518                           
  2519                           ; 2 bytes @ 0x29
  2520  00002A                     	ds	2
  2521  00002C                     ??_inputHandler:
  2522                           
  2523                           ; 1 bytes @ 0x2B
  2524  00002C                     	ds	1
  2525  00002D                     printSortTimer@hour:
  2526                           	opt stack 0
  2527  00002D                     i2printRTC@INT_time:
  2528                           	opt stack 0
  2529                           
  2530                           ; 14 bytes @ 0x2C
  2531  00002D                     	ds	2
  2532  00002F                     printSortTimer@curTime:
  2533                           	opt stack 0
  2534                           
  2535                           ; 14 bytes @ 0x2E
  2536  00002F                     	ds	12
  2537  00003B                     i2printRTC@RTC_month:
  2538                           	opt stack 0
  2539                           
  2540                           ; 2 bytes @ 0x3A
  2541  00003B                     	ds	2
  2542  00003D                     printSortTimer@start_sec:
  2543                           	opt stack 0
  2544  00003D                     i2printRTC@month:
  2545                           	opt stack 0
  2546                           
  2547                           ; 4 bytes @ 0x3C
  2548  00003D                     	ds	2
  2549  00003F                     printSortTimer@cur_sec:
  2550                           	opt stack 0
  2551                           
  2552                           ; 2 bytes @ 0x3E
  2553  00003F                     	ds	2
  2554  000041                     printSortTimer@min:
  2555                           	opt stack 0
  2556  000041                     i2printRTC@i:
  2557                           	opt stack 0
  2558                           
  2559                           ; 2 bytes @ 0x40
  2560  000041                     	ds	2
  2561  000043                     ??_updateMenu:
  2562  000043                     printSortTimer@sec:
  2563                           	opt stack 0
  2564                           
  2565                           ; 2 bytes @ 0x42
  2566  000043                     	ds	2
  2567  000045                     _printSortTimer$2412:
  2568                           	opt stack 0
  2569                           
  2570                           ; 2 bytes @ 0x44
  2571  000045                     	ds	2
  2572  000047                     printSortTimer@timeDiff:
  2573                           	opt stack 0
  2574                           
  2575                           ; 2 bytes @ 0x46
  2576  000047                     	ds	2
  2577  000049                     printSortTimer@i:
  2578                           	opt stack 0
  2579                           
  2580                           ; 2 bytes @ 0x48
  2581  000049                     	ds	2
  2582  00004B                     ??_handler:
  2583                           
  2584                           ; 1 bytes @ 0x4A
  2585  00004B                     	ds	16
  2586                           tblptru	equ	0xFF8
  2587                           tblptrh	equ	0xFF7
  2588                           tblptrl	equ	0xFF6
  2589                           tablat	equ	0xFF5
  2590                           postinc0	equ	0xFEE
  2591                           wreg	equ	0xFE8
  2592                           postdec1	equ	0xFE5
  2593                           fsr1l	equ	0xFE1
  2594                           
  2595 ;;
  2596 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2597 ;;
  2598 ;; *************** function _main *****************
  2599 ;; Defined at:
  2600 ;;		line 19 in file "main.c"
  2601 ;; Parameters:    Size  Location     Type
  2602 ;;		None
  2603 ;; Auto vars:     Size  Location     Type
  2604 ;;		None
  2605 ;; Return value:  Size  Location     Type
  2606 ;;                  1    wreg      void 
  2607 ;; Registers used:
  2608 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2609 ;; Tracked objects:
  2610 ;;		On entry : 0/0
  2611 ;;		On exit  : 0/0
  2612 ;;		Unchanged: 0/0
  2613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2618 ;;Total ram usage:        0 bytes
  2619 ;; Hardware stack levels required when called:   13
  2620 ;; This function calls:
  2621 ;;		_I2C_Master_Init
  2622 ;;		_Test
  2623 ;;		_UI
  2624 ;;		_initLCD
  2625 ;;		_initTime
  2626 ;;		_initUI
  2627 ;;		_logRun
  2628 ;;		_machineConfig
  2629 ;;		_sort
  2630 ;;		_stopSignals
  2631 ;; This function is called by:
  2632 ;;		Startup code after reset
  2633 ;; This function uses a non-reentrant model
  2634 ;;
  2635                           
  2636                           	psect	text0
  2637  003524                     __ptext0:
  2638                           	opt stack 0
  2639  003524                     _main:
  2640                           	opt stack 18
  2641                           
  2642                           ;main.c: 20: machineConfig();
  2643                           
  2644                           ;incstack = 0
  2645  003524  EC28  F01F         	call	_machineConfig	;wreg free
  2646                           
  2647                           ;main.c: 21: initLCD();
  2648  003528  EC9F  F020         	call	_initLCD	;wreg free
  2649                           
  2650                           ;main.c: 24: RTCflag = 0;
  2651  00352C  0E00               	movlw	0
  2652  00352E  0100               	movlb	0	; () banked
  2653  003530  6FDF               	movwf	(_RTCflag+1)& (0+255),b
  2654  003532  0E00               	movlw	0
  2655  003534  6FDE               	movwf	_RTCflag& (0+255),b
  2656                           
  2657                           ;main.c: 25: if(RTCflag){
  2658  003536  0100               	movlb	0	; () banked
  2659  003538  51DE               	movf	_RTCflag& (0+255),w,b
  2660  00353A  0100               	movlb	0	; () banked
  2661  00353C  11DF               	iorwf	(_RTCflag+1)& (0+255),w,b
  2662  00353E  B4D8               	btfsc	status,2,c
  2663  003540  D016               	goto	l8043
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2667  003542  0E20               	movlw	32
  2668  003544  0100               	movlb	0	; () banked
  2669  003546  6F80               	movwf	initTime@m& (0+255),b
  2670  003548  0E15               	movlw	21
  2671  00354A  0100               	movlb	0	; () banked
  2672  00354C  6F81               	movwf	initTime@h& (0+255),b
  2673  00354E  0E04               	movlw	4
  2674  003550  0100               	movlb	0	; () banked
  2675  003552  6F82               	movwf	initTime@w& (0+255),b
  2676  003554  0E15               	movlw	21
  2677  003556  0100               	movlb	0	; () banked
  2678  003558  6F83               	movwf	initTime@DD& (0+255),b
  2679  00355A  0E03               	movlw	3
  2680  00355C  0100               	movlb	0	; () banked
  2681  00355E  6F84               	movwf	initTime@MM& (0+255),b
  2682  003560  0E17               	movlw	23
  2683  003562  0100               	movlb	0	; () banked
  2684  003564  6F85               	movwf	initTime@YY& (0+255),b
  2685  003566  0E42               	movlw	66
  2686  003568  EC3E  F023         	call	_initTime
  2687                           
  2688                           ;main.c: 27: }
  2689  00356C  D00B               	goto	l8045
  2690  00356E                     l8043:
  2691                           
  2692                           ;main.c: 28: else{
  2693                           ;main.c: 29: I2C_Master_Init(10000);
  2694  00356E  0E10               	movlw	16
  2695  003570  0100               	movlb	0	; () banked
  2696  003572  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2697  003574  0E27               	movlw	39
  2698  003576  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2699  003578  0E00               	movlw	0
  2700  00357A  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2701  00357C  0E00               	movlw	0
  2702  00357E  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2703  003580  ECF8  F01E         	call	_I2C_Master_Init	;wreg free
  2704  003584                     l8045:
  2705                           
  2706                           ;main.c: 30: }
  2707                           ;main.c: 32: initUI();
  2708  003584  EC5B  F022         	call	_initUI	;wreg free
  2709                           
  2710                           ;main.c: 33: first = 1;
  2711  003588  0E00               	movlw	0
  2712  00358A  6E74               	movwf	_first+1,c
  2713  00358C  0E01               	movlw	1
  2714  00358E  6E73               	movwf	_first,c
  2715                           
  2716                           ;main.c: 44: switch(machine_state){
  2717                           
  2718                           ;main.c: 43: while(1){
  2719  003590  D017               	goto	l8067
  2720  003592                     l8049:
  2721                           
  2722                           ;main.c: 46: UI();
  2723  003592  EC65  F004         	call	_UI	;wreg free
  2724                           
  2725                           ;main.c: 47: break;
  2726  003596  D014               	goto	l8067
  2727  003598                     l8051:
  2728                           
  2729                           ;main.c: 49: sort();
  2730  003598  EC2D  F023         	call	_sort	;wreg free
  2731                           
  2732                           ;main.c: 50: break;
  2733  00359C  D011               	goto	l8067
  2734  00359E                     l8053:
  2735                           
  2736                           ;main.c: 52: stopSignals();
  2737  00359E  EC6A  F023         	call	_stopSignals	;wreg free
  2738                           
  2739                           ;main.c: 53: logRun();
  2740  0035A2  EC78  F017         	call	_logRun	;wreg free
  2741                           
  2742                           ;main.c: 54: first = 1;
  2743  0035A6  0E00               	movlw	0
  2744  0035A8  6E74               	movwf	_first+1,c
  2745  0035AA  0E01               	movlw	1
  2746  0035AC  6E73               	movwf	_first,c
  2747                           
  2748                           ;main.c: 55: UI();
  2749  0035AE  EC65  F004         	call	_UI	;wreg free
  2750                           
  2751                           ;main.c: 56: break;
  2752  0035B2  D006               	goto	l8067
  2753  0035B4                     l8061:
  2754                           
  2755                           ;main.c: 58: Test();
  2756  0035B4  EC31  F019         	call	_Test	;wreg free
  2757                           
  2758                           ;main.c: 59: break;
  2759  0035B8  D003               	goto	l8067
  2760  0035BA                     l8063:
  2761                           
  2762                           ;main.c: 61: stopSignals();
  2763  0035BA  EC6A  F023         	call	_stopSignals	;wreg free
  2764  0035BE                     l487:
  2765  0035BE  D7FF               	goto	l487
  2766  0035C0                     l8067:
  2767  0035C0  0100               	movlb	0	; () banked
  2768  0035C2  51FC               	movf	_machine_state& (0+255),w,b
  2769                           
  2770                           ; Switch size 1, requested type "space"
  2771                           ; Number of cases is 5, Range of values is 0 to 4
  2772                           ; switch strategies available:
  2773                           ; Name         Instructions Cycles
  2774                           ; simple_byte           16     9 (average)
  2775                           ;	Chosen strategy is simple_byte
  2776  0035C4  0A00               	xorlw	0	; case 0
  2777  0035C6  B4D8               	btfsc	status,2,c
  2778  0035C8  D7E4               	goto	l8049
  2779  0035CA  0A01               	xorlw	1	; case 1
  2780  0035CC  B4D8               	btfsc	status,2,c
  2781  0035CE  D7E4               	goto	l8051
  2782  0035D0  0A03               	xorlw	3	; case 2
  2783  0035D2  B4D8               	btfsc	status,2,c
  2784  0035D4  D7E4               	goto	l8053
  2785  0035D6  0A01               	xorlw	1	; case 3
  2786  0035D8  B4D8               	btfsc	status,2,c
  2787  0035DA  D7EC               	goto	l8061
  2788  0035DC  0A07               	xorlw	7	; case 4
  2789  0035DE  B4D8               	btfsc	status,2,c
  2790  0035E0  D7EC               	goto	l8063
  2791                           
  2792                           ; BSR set to: 0
  2793                           
  2794                           ; BSR set to: 0
  2795  0035E2  D7EE               	goto	l8067
  2796  0035E4                     __end_of_main:
  2797                           	opt stack 0
  2798                           tblptru	equ	0xFF8
  2799                           tblptrh	equ	0xFF7
  2800                           tblptrl	equ	0xFF6
  2801                           tablat	equ	0xFF5
  2802                           postinc0	equ	0xFEE
  2803                           wreg	equ	0xFE8
  2804                           postdec1	equ	0xFE5
  2805                           fsr1l	equ	0xFE1
  2806                           status	equ	0xFD8
  2807                           
  2808 ;; *************** function _stopSignals *****************
  2809 ;; Defined at:
  2810 ;;		line 70 in file "main.c"
  2811 ;; Parameters:    Size  Location     Type
  2812 ;;		None
  2813 ;; Auto vars:     Size  Location     Type
  2814 ;;		None
  2815 ;; Return value:  Size  Location     Type
  2816 ;;                  1    wreg      void 
  2817 ;; Registers used:
  2818 ;;		wreg, status,2
  2819 ;; Tracked objects:
  2820 ;;		On entry : 0/0
  2821 ;;		On exit  : 0/0
  2822 ;;		Unchanged: 0/0
  2823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2828 ;;Total ram usage:        0 bytes
  2829 ;; Hardware stack levels used:    1
  2830 ;; Hardware stack levels required when called:    7
  2831 ;; This function calls:
  2832 ;;		Nothing
  2833 ;; This function is called by:
  2834 ;;		_main
  2835 ;; This function uses a non-reentrant model
  2836 ;;
  2837                           
  2838                           	psect	text1
  2839  0046D4                     __ptext1:
  2840                           	opt stack 0
  2841  0046D4                     _stopSignals:
  2842                           	opt stack 23
  2843                           
  2844                           ;main.c: 71: LATA = 0x00;
  2845                           
  2846                           ; BSR set to: 0
  2847                           ;incstack = 0
  2848  0046D4  0E00               	movlw	0
  2849  0046D6  6E89               	movwf	3977,c	;volatile
  2850                           
  2851                           ;main.c: 72: LATB = 0x00;
  2852  0046D8  0E00               	movlw	0
  2853  0046DA  6E8A               	movwf	3978,c	;volatile
  2854                           
  2855                           ;main.c: 73: LATC = 0x00;
  2856  0046DC  0E00               	movlw	0
  2857  0046DE  6E8B               	movwf	3979,c	;volatile
  2858                           
  2859                           ;main.c: 74: LATD = 0x00;
  2860  0046E0  0E00               	movlw	0
  2861  0046E2  6E8C               	movwf	3980,c	;volatile
  2862                           
  2863                           ;main.c: 75: LATE = 0x00;
  2864  0046E4  0E00               	movlw	0
  2865  0046E6  6E8D               	movwf	3981,c	;volatile
  2866  0046E8  0012               	return		;funcret
  2867  0046EA                     __end_of_stopSignals:
  2868                           	opt stack 0
  2869                           tblptru	equ	0xFF8
  2870                           tblptrh	equ	0xFF7
  2871                           tblptrl	equ	0xFF6
  2872                           tablat	equ	0xFF5
  2873                           postinc0	equ	0xFEE
  2874                           wreg	equ	0xFE8
  2875                           postdec1	equ	0xFE5
  2876                           fsr1l	equ	0xFE1
  2877                           status	equ	0xFD8
  2878                           
  2879 ;; *************** function _sort *****************
  2880 ;; Defined at:
  2881 ;;		line 55 in file "sort.c"
  2882 ;; Parameters:    Size  Location     Type
  2883 ;;		None
  2884 ;; Auto vars:     Size  Location     Type
  2885 ;;		None
  2886 ;; Return value:  Size  Location     Type
  2887 ;;                  1    wreg      void 
  2888 ;; Registers used:
  2889 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2890 ;; Tracked objects:
  2891 ;;		On entry : 0/0
  2892 ;;		On exit  : 0/0
  2893 ;;		Unchanged: 0/0
  2894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2899 ;;Total ram usage:        0 bytes
  2900 ;; Hardware stack levels used:    1
  2901 ;; Hardware stack levels required when called:   12
  2902 ;; This function calls:
  2903 ;;		_Distribution
  2904 ;;		_ID
  2905 ;;		_Loading
  2906 ;; This function is called by:
  2907 ;;		_main
  2908 ;; This function uses a non-reentrant model
  2909 ;;
  2910                           
  2911                           	psect	text2
  2912  00465A                     __ptext2:
  2913                           	opt stack 0
  2914  00465A                     _sort:
  2915                           	opt stack 18
  2916                           
  2917                           ;sort.c: 56: if(machine_state == Sorting_state){
  2918                           
  2919                           ;incstack = 0
  2920  00465A  0100               	movlb	0	; () banked
  2921  00465C  05FC               	decf	_machine_state& (0+255),w,b
  2922  00465E  B4D8               	btfsc	status,2,c
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;sort.c: 57: Loading();
  2926  004660  EC16  F018         	call	_Loading	;wreg free
  2927                           
  2928                           ;sort.c: 58: }
  2929                           ;sort.c: 59: if(machine_state == Sorting_state){
  2930  004664  0100               	movlb	0	; () banked
  2931  004666  05FC               	decf	_machine_state& (0+255),w,b
  2932  004668  B4D8               	btfsc	status,2,c
  2933                           
  2934                           ; BSR set to: 0
  2935                           ;sort.c: 60: ID();
  2936  00466A  EC17  F016         	call	_ID	;wreg free
  2937                           
  2938                           ;sort.c: 61: }
  2939                           ;sort.c: 62: if(machine_state == Sorting_state){
  2940  00466E  0100               	movlb	0	; () banked
  2941  004670  05FC               	decf	_machine_state& (0+255),w,b
  2942  004672  A4D8               	btfss	status,2,c
  2943  004674  0012               	return	
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;sort.c: 63: Distribution();
  2947  004676  ECC9  F016         	call	_Distribution	;wreg free
  2948  00467A  0012               	return	
  2949  00467C                     __end_of_sort:
  2950                           	opt stack 0
  2951                           tblptru	equ	0xFF8
  2952                           tblptrh	equ	0xFF7
  2953                           tblptrl	equ	0xFF6
  2954                           tablat	equ	0xFF5
  2955                           postinc0	equ	0xFEE
  2956                           wreg	equ	0xFE8
  2957                           postdec1	equ	0xFE5
  2958                           fsr1l	equ	0xFE1
  2959                           status	equ	0xFD8
  2960                           
  2961 ;; *************** function _Loading *****************
  2962 ;; Defined at:
  2963 ;;		line 67 in file "sort.c"
  2964 ;; Parameters:    Size  Location     Type
  2965 ;;		None
  2966 ;; Auto vars:     Size  Location     Type
  2967 ;;  addr            2   51[BANK0 ] unsigned short 
  2968 ;;  byte1           1   53[BANK0 ] unsigned char 
  2969 ;; Return value:  Size  Location     Type
  2970 ;;                  1    wreg      void 
  2971 ;; Registers used:
  2972 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2973 ;; Tracked objects:
  2974 ;;		On entry : 0/0
  2975 ;;		On exit  : 0/0
  2976 ;;		Unchanged: 0/0
  2977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2979 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2980 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2981 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2982 ;;Total ram usage:        5 bytes
  2983 ;; Hardware stack levels used:    1
  2984 ;; Hardware stack levels required when called:   11
  2985 ;; This function calls:
  2986 ;;		_EEPROM_read
  2987 ;;		_EEPROM_write
  2988 ;;		_getIR
  2989 ;;		_initGlobalVars
  2990 ;;		_initServos
  2991 ;;		_initSortTimer
  2992 ;;		_lcdInst
  2993 ;; This function is called by:
  2994 ;;		_sort
  2995 ;; This function uses a non-reentrant model
  2996 ;;
  2997                           
  2998                           	psect	text3
  2999  00302C                     __ptext3:
  3000                           	opt stack 0
  3001  00302C                     _Loading:
  3002                           	opt stack 18
  3003                           
  3004                           ;sort.c: 68: if(first){
  3005                           
  3006                           ;incstack = 0
  3007  00302C  5073               	movf	_first,w,c
  3008  00302E  1074               	iorwf	_first+1,w,c
  3009  003030  B4D8               	btfsc	status,2,c
  3010  003032  D042               	goto	l6361
  3011                           
  3012                           ;sort.c: 69: initGlobalVars();
  3013  003034  EC5F  F01E         	call	_initGlobalVars	;wreg free
  3014                           
  3015                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3016  003038  0E01               	movlw	1
  3017  00303A  EC9B  F023         	call	_lcdInst
  3018  00303E  0E68               	movlw	104
  3019  003040  0100               	movlb	0	; () banked
  3020  003042  6FB1               	movwf	??_Loading& (0+255),b
  3021  003044  0EE4               	movlw	228
  3022  003046                     u6947:
  3023  003046  2EE8               	decfsz	wreg,f,c
  3024  003048  D7FE               	bra	u6947
  3025  00304A  2FB1               	decfsz	??_Loading& (0+255),f,b
  3026  00304C  D7FC               	bra	u6947
  3027  00304E  F000               	nop	
  3028                           
  3029                           ;sort.c: 71: initSortTimer();
  3030  003050  ECAF  F01B         	call	_initSortTimer	;wreg free
  3031                           
  3032                           ;sort.c: 72: LATCbits.LATC5 = 1;
  3033  003054  8A8B               	bsf	3979,5,c	;volatile
  3034                           
  3035                           ;sort.c: 77: sel = EEPROM_read(0);
  3036  003056  0E00               	movlw	0
  3037  003058  0100               	movlb	0	; () banked
  3038  00305A  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3039  00305C  0E00               	movlw	0
  3040  00305E  6F80               	movwf	EEPROM_read@address& (0+255),b
  3041  003060  EC5E  F023         	call	_EEPROM_read	;wreg free
  3042  003064  0100               	movlb	0	; () banked
  3043  003066  6FFD               	movwf	_sel& (0+255),b
  3044                           
  3045                           ; BSR set to: 0
  3046                           ;sort.c: 78: unsigned short addr = 1 + 11 * sel;
  3047  003068  0100               	movlb	0	; () banked
  3048  00306A  51FD               	movf	_sel& (0+255),w,b
  3049  00306C  0D0B               	mullw	11
  3050  00306E  0E01               	movlw	1
  3051  003070  24F3               	addwf	prodl,w,c
  3052  003072  0100               	movlb	0	; () banked
  3053  003074  6FB3               	movwf	Loading@addr& (0+255),b
  3054  003076  0E00               	movlw	0
  3055  003078  20F4               	addwfc	prodh,w,c
  3056  00307A  0100               	movlb	0	; () banked
  3057  00307C  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3058                           
  3059                           ; BSR set to: 0
  3060                           ;sort.c: 79: unsigned char byte1 = 0b01111111;
  3061  00307E  0E7F               	movlw	127
  3062  003080  0100               	movlb	0	; () banked
  3063  003082  6FB5               	movwf	Loading@byte1& (0+255),b
  3064                           
  3065                           ; BSR set to: 0
  3066                           ;sort.c: 80: EEPROM_write(addr, byte1);
  3067  003084  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3068  003088  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3069  00308C  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3070  003090  ECB5  F019         	call	_EEPROM_write	;wreg free
  3071                           
  3072                           ;sort.c: 83: LATAbits.LATA5 = 0;
  3073  003094  9A89               	bcf	3977,5,c	;volatile
  3074                           
  3075                           ;sort.c: 92: initServos();
  3076  003096  EC56  F01F         	call	_initServos	;wreg free
  3077                           
  3078                           ;sort.c: 93: _delay((unsigned long)((5000)*(32000000/4000.0)));
  3079  00309A  0ECB               	movlw	203
  3080  00309C  0100               	movlb	0	; () banked
  3081  00309E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3082  0030A0  0EEC               	movlw	236
  3083  0030A2  0100               	movlb	0	; () banked
  3084  0030A4  6FB1               	movwf	??_Loading& (0+255),b
  3085  0030A6  0E84               	movlw	132
  3086  0030A8                     u6957:
  3087  0030A8  2EE8               	decfsz	wreg,f,c
  3088  0030AA  D7FE               	bra	u6957
  3089  0030AC  2FB1               	decfsz	??_Loading& (0+255),f,b
  3090  0030AE  D7FC               	bra	u6957
  3091  0030B0  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3092  0030B2  D7FA               	bra	u6957
  3093  0030B4  F000               	nop	
  3094                           
  3095                           ;sort.c: 94: }
  3096  0030B6  0012               	return	
  3097  0030B8                     l6361:
  3098                           
  3099                           ;sort.c: 95: else{
  3100                           ;sort.c: 98: if(!f_loadingNewCan){
  3101  0030B8  0100               	movlb	0	; () banked
  3102  0030BA  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3103  0030BC  0100               	movlb	0	; () banked
  3104  0030BE  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3105  0030C0  A4D8               	btfss	status,2,c
  3106  0030C2  D017               	goto	l6377
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;sort.c: 100: getIR();
  3110  0030C4  ECD9  F01F         	call	_getIR	;wreg free
  3111                           
  3112                           ;sort.c: 102: if(!f_loadingNewCan){
  3113  0030C8  0100               	movlb	0	; () banked
  3114  0030CA  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3115  0030CC  0100               	movlb	0	; () banked
  3116  0030CE  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3117  0030D0  B4D8               	btfsc	status,2,c
  3118  0030D2  0012               	return	
  3119                           
  3120                           ; BSR set to: 0
  3121                           ;sort.c: 106: else{
  3122                           ;sort.c: 107: count_total++;
  3123                           
  3124                           ; BSR set to: 0
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;sort.c: 104: }
  3128                           
  3129                           ; BSR set to: 0
  3130                           ;sort.c: 103: return;
  3131  0030D4  0100               	movlb	0	; () banked
  3132  0030D6  4BFE               	infsnz	_count_total& (0+255),f,b
  3133  0030D8  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3134                           
  3135                           ; BSR set to: 0
  3136                           ;sort.c: 108: if(count_total == 12){
  3137  0030DA  0E0C               	movlw	12
  3138  0030DC  0100               	movlb	0	; () banked
  3139  0030DE  19FE               	xorwf	_count_total& (0+255),w,b
  3140  0030E0  0100               	movlb	0	; () banked
  3141  0030E2  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3142  0030E4  A4D8               	btfss	status,2,c
  3143  0030E6  0012               	return	
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;sort.c: 109: f_lastCan = 1;
  3147  0030E8  0E00               	movlw	0
  3148  0030EA  6E72               	movwf	_f_lastCan+1,c
  3149  0030EC  0E01               	movlw	1
  3150  0030EE  6E71               	movwf	_f_lastCan,c
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;sort.c: 110: }
  3154                           ;sort.c: 111: }
  3155                           ;sort.c: 112: }
  3156                           
  3157                           ; BSR set to: 0
  3158  0030F0  0012               	return	
  3159  0030F2                     l6377:
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;sort.c: 115: else if(f_ID_receive){
  3163  0030F2  506B               	movf	_f_ID_receive,w,c
  3164  0030F4  106C               	iorwf	_f_ID_receive+1,w,c
  3165  0030F6  B4D8               	btfsc	status,2,c
  3166  0030F8  0012               	return	
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;sort.c: 116: f_loadingNewCan = 0;
  3170  0030FA  0E00               	movlw	0
  3171  0030FC  0100               	movlb	0	; () banked
  3172  0030FE  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3173  003100  0E00               	movlw	0
  3174  003102  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;sort.c: 117: _delay((unsigned long)((1500)*(32000000/4000.0)));
  3178  003104  0E3D               	movlw	61
  3179  003106  0100               	movlb	0	; () banked
  3180  003108  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3181  00310A  0EE1               	movlw	225
  3182  00310C  0100               	movlb	0	; () banked
  3183  00310E  6FB1               	movwf	??_Loading& (0+255),b
  3184  003110  0E3F               	movlw	63
  3185  003112                     u6967:
  3186  003112  2EE8               	decfsz	wreg,f,c
  3187  003114  D7FE               	bra	u6967
  3188  003116  2FB1               	decfsz	??_Loading& (0+255),f,b
  3189  003118  D7FC               	bra	u6967
  3190  00311A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3191  00311C  D7FA               	bra	u6967
  3192  00311E  D000               	nop2	
  3193                           
  3194                           ;sort.c: 118: LATAbits.LATA4 = 1;
  3195  003120  8889               	bsf	3977,4,c	;volatile
  3196                           
  3197                           ;sort.c: 119: _delay((unsigned long)((100)*(32000000/4000.0)));
  3198  003122  0E05               	movlw	5
  3199  003124  0100               	movlb	0	; () banked
  3200  003126  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3201  003128  0E0F               	movlw	15
  3202  00312A  0100               	movlb	0	; () banked
  3203  00312C  6FB1               	movwf	??_Loading& (0+255),b
  3204  00312E  0EF1               	movlw	241
  3205  003130                     u6977:
  3206  003130  2EE8               	decfsz	wreg,f,c
  3207  003132  D7FE               	bra	u6977
  3208  003134  2FB1               	decfsz	??_Loading& (0+255),f,b
  3209  003136  D7FC               	bra	u6977
  3210  003138  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3211  00313A  D7FA               	bra	u6977
  3212                           
  3213                           ;sort.c: 120: LATAbits.LATA4 = 0;
  3214  00313C  9889               	bcf	3977,4,c	;volatile
  3215                           
  3216                           ;sort.c: 121: f_can_coming_to_ID = 1;
  3217  00313E  0E00               	movlw	0
  3218  003140  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3219  003142  0E01               	movlw	1
  3220  003144  6E6D               	movwf	_f_can_coming_to_ID,c
  3221  003146  0012               	return	
  3222  003148                     __end_of_Loading:
  3223                           	opt stack 0
  3224                           tblptru	equ	0xFF8
  3225                           tblptrh	equ	0xFF7
  3226                           tblptrl	equ	0xFF6
  3227                           tablat	equ	0xFF5
  3228                           prodh	equ	0xFF4
  3229                           prodl	equ	0xFF3
  3230                           postinc0	equ	0xFEE
  3231                           wreg	equ	0xFE8
  3232                           postdec1	equ	0xFE5
  3233                           fsr1l	equ	0xFE1
  3234                           status	equ	0xFD8
  3235                           
  3236 ;; *************** function _initSortTimer *****************
  3237 ;; Defined at:
  3238 ;;		line 253 in file "sort.c"
  3239 ;; Parameters:    Size  Location     Type
  3240 ;;		None
  3241 ;; Auto vars:     Size  Location     Type
  3242 ;;  i               2    8[BANK0 ] int 
  3243 ;; Return value:  Size  Location     Type
  3244 ;;                  1    wreg      void 
  3245 ;; Registers used:
  3246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3247 ;; Tracked objects:
  3248 ;;		On entry : 0/0
  3249 ;;		On exit  : 0/0
  3250 ;;		Unchanged: 0/0
  3251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3253 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3254 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3255 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3256 ;;Total ram usage:        5 bytes
  3257 ;; Hardware stack levels used:    1
  3258 ;; Hardware stack levels required when called:   10
  3259 ;; This function calls:
  3260 ;;		_getRTC
  3261 ;; This function is called by:
  3262 ;;		_Loading
  3263 ;; This function uses a non-reentrant model
  3264 ;;
  3265                           
  3266                           	psect	text4
  3267  00375E                     __ptext4:
  3268                           	opt stack 0
  3269  00375E                     _initSortTimer:
  3270                           	opt stack 18
  3271                           
  3272                           ;sort.c: 255: getRTC();
  3273                           
  3274                           ;incstack = 0
  3275  00375E  EC2A  F01D         	call	_getRTC	;wreg free
  3276                           
  3277                           ;sort.c: 256: for(int i = 0; i < 7; i++){
  3278  003762  0E00               	movlw	0
  3279  003764  0100               	movlb	0	; () banked
  3280  003766  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3281  003768  0E00               	movlw	0
  3282  00376A  6F88               	movwf	initSortTimer@i& (0+255),b
  3283  00376C                     l5967:
  3284                           
  3285                           ; BSR set to: 0
  3286  00376C  0100               	movlb	0	; () banked
  3287  00376E  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3288  003770  D008               	goto	l5971
  3289  003772  0100               	movlb	0	; () banked
  3290  003774  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3291  003776  E140               	bnz	l5977
  3292  003778  0E07               	movlw	7
  3293  00377A  0100               	movlb	0	; () banked
  3294  00377C  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3295  00377E  B0D8               	btfsc	status,0,c
  3296  003780  D03B               	goto	l5977
  3297  003782                     l5971:
  3298                           
  3299                           ; BSR set to: 0
  3300                           ;sort.c: 257: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3301  003782  0E24               	movlw	low _time
  3302  003784  0100               	movlb	0	; () banked
  3303  003786  2588               	addwf	initSortTimer@i& (0+255),w,b
  3304  003788  6ED9               	movwf	fsr2l,c
  3305  00378A  0E01               	movlw	high _time
  3306  00378C  0100               	movlb	0	; () banked
  3307  00378E  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3308  003790  6EDA               	movwf	fsr2h,c
  3309  003792  50DF               	movf	indf2,w,c
  3310  003794  0100               	movlb	0	; () banked
  3311  003796  6F85               	movwf	??_initSortTimer& (0+255),b
  3312  003798  0100               	movlb	0	; () banked
  3313  00379A  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3314  00379C  0E0F               	movlw	15
  3315  00379E  1785               	andwf	??_initSortTimer& (0+255),f,b
  3316  0037A0  0E0F               	movlw	15
  3317  0037A2  0100               	movlb	0	; () banked
  3318  0037A4  1785               	andwf	??_initSortTimer& (0+255),f,b
  3319  0037A6  0100               	movlb	0	; () banked
  3320  0037A8  5185               	movf	??_initSortTimer& (0+255),w,b
  3321  0037AA  0D0A               	mullw	10
  3322  0037AC  0E24               	movlw	low _time
  3323  0037AE  0100               	movlb	0	; () banked
  3324  0037B0  2588               	addwf	initSortTimer@i& (0+255),w,b
  3325  0037B2  6ED9               	movwf	fsr2l,c
  3326  0037B4  0E01               	movlw	high _time
  3327  0037B6  0100               	movlb	0	; () banked
  3328  0037B8  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3329  0037BA  6EDA               	movwf	fsr2h,c
  3330  0037BC  50DF               	movf	indf2,w,c
  3331  0037BE  0B0F               	andlw	15
  3332  0037C0  0100               	movlb	0	; () banked
  3333  0037C2  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3334  0037C4  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3335  0037C6  50F3               	movf	prodl,w,c
  3336  0037C8  0100               	movlb	0	; () banked
  3337  0037CA  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3338  0037CC  50F4               	movf	prodh,w,c
  3339  0037CE  0100               	movlb	0	; () banked
  3340  0037D0  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3341  0037D2  90D8               	bcf	status,0,c
  3342  0037D4  0100               	movlb	0	; () banked
  3343  0037D6  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3344  0037D8  6ED9               	movwf	fsr2l,c
  3345  0037DA  0100               	movlb	0	; () banked
  3346  0037DC  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3347  0037DE  6EDA               	movwf	fsr2h,c
  3348  0037E0  0E0E               	movlw	low _startTime
  3349  0037E2  26D9               	addwf	fsr2l,f,c
  3350  0037E4  0E01               	movlw	high _startTime
  3351  0037E6  22DA               	addwfc	fsr2h,f,c
  3352  0037E8  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3353  0037EC  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3354                           
  3355                           ; BSR set to: 0
  3356  0037F0  0100               	movlb	0	; () banked
  3357  0037F2  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3358  0037F4  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3359  0037F6  D7BA               	goto	l5967
  3360  0037F8                     l5977:
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;sort.c: 258: }
  3364                           ;sort.c: 260: T0CON = 0b00010111;
  3365  0037F8  0E17               	movlw	23
  3366  0037FA  6ED5               	movwf	4053,c	;volatile
  3367                           
  3368                           ;sort.c: 269: TMR0H = 0b10000101;
  3369  0037FC  0E85               	movlw	133
  3370  0037FE  6ED7               	movwf	4055,c	;volatile
  3371                           
  3372                           ;sort.c: 270: TMR0L = 0b11101110;
  3373  003800  0EEE               	movlw	238
  3374  003802  6ED6               	movwf	4054,c	;volatile
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;sort.c: 271: TMR0ON = 1;
  3378  003804  8ED5               	bsf	4053,7,c	;volatile
  3379                           
  3380                           ; BSR set to: 0
  3381  003806  0012               	return		;funcret
  3382  003808                     __end_of_initSortTimer:
  3383                           	opt stack 0
  3384                           tblptru	equ	0xFF8
  3385                           tblptrh	equ	0xFF7
  3386                           tblptrl	equ	0xFF6
  3387                           tablat	equ	0xFF5
  3388                           prodh	equ	0xFF4
  3389                           prodl	equ	0xFF3
  3390                           postinc0	equ	0xFEE
  3391                           wreg	equ	0xFE8
  3392                           postdec1	equ	0xFE5
  3393                           fsr1l	equ	0xFE1
  3394                           indf2	equ	0xFDF
  3395                           postinc2	equ	0xFDE
  3396                           postdec2	equ	0xFDD
  3397                           fsr2h	equ	0xFDA
  3398                           fsr2l	equ	0xFD9
  3399                           status	equ	0xFD8
  3400                           
  3401 ;; *************** function _initGlobalVars *****************
  3402 ;; Defined at:
  3403 ;;		line 234 in file "sort.c"
  3404 ;; Parameters:    Size  Location     Type
  3405 ;;		None
  3406 ;; Auto vars:     Size  Location     Type
  3407 ;;		None
  3408 ;; Return value:  Size  Location     Type
  3409 ;;                  1    wreg      void 
  3410 ;; Registers used:
  3411 ;;		wreg, status,2
  3412 ;; Tracked objects:
  3413 ;;		On entry : 0/0
  3414 ;;		On exit  : 0/0
  3415 ;;		Unchanged: 0/0
  3416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3421 ;;Total ram usage:        0 bytes
  3422 ;; Hardware stack levels used:    1
  3423 ;; Hardware stack levels required when called:    7
  3424 ;; This function calls:
  3425 ;;		Nothing
  3426 ;; This function is called by:
  3427 ;;		_Loading
  3428 ;; This function uses a non-reentrant model
  3429 ;;
  3430                           
  3431                           	psect	text5
  3432  003CBE                     __ptext5:
  3433                           	opt stack 0
  3434  003CBE                     _initGlobalVars:
  3435                           	opt stack 21
  3436                           
  3437                           ;sort.c: 236: first = 0;
  3438                           
  3439                           ; BSR set to: 0
  3440                           ;incstack = 0
  3441  003CBE  0E00               	movlw	0
  3442  003CC0  6E74               	movwf	_first+1,c
  3443  003CC2  0E00               	movlw	0
  3444  003CC4  6E73               	movwf	_first,c
  3445                           
  3446                           ;sort.c: 239: f_loadingNewCan = 0;
  3447  003CC6  0E00               	movlw	0
  3448  003CC8  0100               	movlb	0	; () banked
  3449  003CCA  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3450  003CCC  0E00               	movlw	0
  3451  003CCE  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3452                           
  3453                           ;sort.c: 240: f_lastCan = 0;
  3454  003CD0  0E00               	movlw	0
  3455  003CD2  6E72               	movwf	_f_lastCan+1,c
  3456  003CD4  0E00               	movlw	0
  3457  003CD6  6E71               	movwf	_f_lastCan,c
  3458                           
  3459                           ;sort.c: 241: f_ID_receive = 1;
  3460  003CD8  0E00               	movlw	0
  3461  003CDA  6E6C               	movwf	_f_ID_receive+1,c
  3462  003CDC  0E01               	movlw	1
  3463  003CDE  6E6B               	movwf	_f_ID_receive,c
  3464                           
  3465                           ;sort.c: 242: f_can_coming_to_ID = 0;
  3466  003CE0  0E00               	movlw	0
  3467  003CE2  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3468  003CE4  0E00               	movlw	0
  3469  003CE6  6E6D               	movwf	_f_can_coming_to_ID,c
  3470                           
  3471                           ;sort.c: 243: f_can_coming_to_distribution = 0;
  3472  003CE8  0E00               	movlw	0
  3473  003CEA  6E70               	movwf	_f_can_coming_to_distribution+1,c
  3474  003CEC  0E00               	movlw	0
  3475  003CEE  6E6F               	movwf	_f_can_coming_to_distribution,c
  3476                           
  3477                           ;sort.c: 244: f_can_distributed = 0;
  3478  003CF0  0E00               	movlw	0
  3479  003CF2  0101               	movlb	1	; () banked
  3480  003CF4  6F2E               	movwf	(_f_can_distributed+1)& (0+255),b
  3481  003CF6  0E00               	movlw	0
  3482  003CF8  6F2D               	movwf	_f_can_distributed& (0+255),b
  3483                           
  3484                           ;sort.c: 247: count_total = 0;
  3485  003CFA  0E00               	movlw	0
  3486  003CFC  0100               	movlb	0	; () banked
  3487  003CFE  6FFF               	movwf	(_count_total+1)& (0+255),b
  3488  003D00  0E00               	movlw	0
  3489  003D02  6FFE               	movwf	_count_total& (0+255),b
  3490                           
  3491                           ;sort.c: 248: count_pop_no_tab = 0;
  3492  003D04  0E00               	movlw	0
  3493  003D06  6E62               	movwf	_count_pop_no_tab+1,c
  3494  003D08  0E00               	movlw	0
  3495  003D0A  6E61               	movwf	_count_pop_no_tab,c
  3496                           
  3497                           ;sort.c: 249: count_pop_w_tab = 0;
  3498  003D0C  0E00               	movlw	0
  3499  003D0E  6E64               	movwf	_count_pop_w_tab+1,c
  3500  003D10  0E00               	movlw	0
  3501  003D12  6E63               	movwf	_count_pop_w_tab,c
  3502                           
  3503                           ;sort.c: 250: count_can_w_lab = 0;
  3504  003D14  0E00               	movlw	0
  3505  003D16  6E60               	movwf	_count_can_w_lab+1,c
  3506  003D18  0E00               	movlw	0
  3507  003D1A  6E5F               	movwf	_count_can_w_lab,c
  3508                           
  3509                           ;sort.c: 251: count_can_no_lab = 0;
  3510  003D1C  0E00               	movlw	0
  3511  003D1E  6E5E               	movwf	_count_can_no_lab+1,c
  3512  003D20  0E00               	movlw	0
  3513  003D22  6E5D               	movwf	_count_can_no_lab,c
  3514                           
  3515                           ; BSR set to: 0
  3516  003D24  0012               	return		;funcret
  3517  003D26                     __end_of_initGlobalVars:
  3518                           	opt stack 0
  3519                           tblptru	equ	0xFF8
  3520                           tblptrh	equ	0xFF7
  3521                           tblptrl	equ	0xFF6
  3522                           tablat	equ	0xFF5
  3523                           prodh	equ	0xFF4
  3524                           prodl	equ	0xFF3
  3525                           postinc0	equ	0xFEE
  3526                           wreg	equ	0xFE8
  3527                           postdec1	equ	0xFE5
  3528                           fsr1l	equ	0xFE1
  3529                           indf2	equ	0xFDF
  3530                           postinc2	equ	0xFDE
  3531                           postdec2	equ	0xFDD
  3532                           fsr2h	equ	0xFDA
  3533                           fsr2l	equ	0xFD9
  3534                           status	equ	0xFD8
  3535                           
  3536 ;; *************** function _getIR *****************
  3537 ;; Defined at:
  3538 ;;		line 311 in file "sort.c"
  3539 ;; Parameters:    Size  Location     Type
  3540 ;;		None
  3541 ;; Auto vars:     Size  Location     Type
  3542 ;;		None
  3543 ;; Return value:  Size  Location     Type
  3544 ;;                  1    wreg      void 
  3545 ;; Registers used:
  3546 ;;		wreg, status,2, status,0, cstack
  3547 ;; Tracked objects:
  3548 ;;		On entry : 0/0
  3549 ;;		On exit  : 0/0
  3550 ;;		Unchanged: 0/0
  3551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3554 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3555 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3556 ;;Total ram usage:        2 bytes
  3557 ;; Hardware stack levels used:    1
  3558 ;; Hardware stack levels required when called:    9
  3559 ;; This function calls:
  3560 ;;		_readIR
  3561 ;; This function is called by:
  3562 ;;		_Loading
  3563 ;; This function uses a non-reentrant model
  3564 ;;
  3565                           
  3566                           	psect	text6
  3567  003FB2                     __ptext6:
  3568                           	opt stack 0
  3569  003FB2                     _getIR:
  3570                           	opt stack 19
  3571                           
  3572                           ;sort.c: 312: readIR();
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;incstack = 0
  3576  003FB2  EC53  F020         	call	_readIR	;wreg free
  3577                           
  3578                           ;sort.c: 314: if(IR_signal==1){
  3579  003FB6  0100               	movlb	0	; () banked
  3580  003FB8  05DA               	decf	_IR_signal& (0+255),w,b
  3581  003FBA  0100               	movlb	0	; () banked
  3582  003FBC  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3583  003FBE  A4D8               	btfss	status,2,c
  3584  003FC0  0012               	return	
  3585                           
  3586                           ; BSR set to: 0
  3587                           ;sort.c: 315: _delay((unsigned long)((500)*(32000000/4000.0)));
  3588  003FC2  0E15               	movlw	21
  3589  003FC4  0100               	movlb	0	; () banked
  3590  003FC6  6F87               	movwf	(??_getIR+1)& (0+255),b
  3591  003FC8  0E4B               	movlw	75
  3592  003FCA  0100               	movlb	0	; () banked
  3593  003FCC  6F86               	movwf	??_getIR& (0+255),b
  3594  003FCE  0EBE               	movlw	190
  3595  003FD0                     u6987:
  3596  003FD0  2EE8               	decfsz	wreg,f,c
  3597  003FD2  D7FE               	bra	u6987
  3598  003FD4  2F86               	decfsz	??_getIR& (0+255),f,b
  3599  003FD6  D7FC               	bra	u6987
  3600  003FD8  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3601  003FDA  D7FA               	bra	u6987
  3602  003FDC  F000               	nop	
  3603                           
  3604                           ;sort.c: 316: readIR();
  3605  003FDE  EC53  F020         	call	_readIR	;wreg free
  3606                           
  3607                           ;sort.c: 317: if(IR_signal==1){
  3608  003FE2  0100               	movlb	0	; () banked
  3609  003FE4  05DA               	decf	_IR_signal& (0+255),w,b
  3610  003FE6  0100               	movlb	0	; () banked
  3611  003FE8  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3612  003FEA  A4D8               	btfss	status,2,c
  3613  003FEC  D006               	goto	l6059
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;sort.c: 318: f_loadingNewCan = 1;
  3617  003FEE  0E00               	movlw	0
  3618  003FF0  0100               	movlb	0	; () banked
  3619  003FF2  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3620  003FF4  0E01               	movlw	1
  3621  003FF6  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3622                           
  3623                           ;sort.c: 319: }
  3624  003FF8  0012               	return	
  3625  003FFA                     l6059:
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;sort.c: 320: else{
  3629                           ;sort.c: 321: f_loadingNewCan = 0;
  3630  003FFA  0E00               	movlw	0
  3631  003FFC  0100               	movlb	0	; () banked
  3632  003FFE  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3633  004000  0E00               	movlw	0
  3634  004002  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3635                           
  3636                           ; BSR set to: 0
  3637  004004  0012               	return	
  3638  004006                     __end_of_getIR:
  3639                           	opt stack 0
  3640                           tblptru	equ	0xFF8
  3641                           tblptrh	equ	0xFF7
  3642                           tblptrl	equ	0xFF6
  3643                           tablat	equ	0xFF5
  3644                           prodh	equ	0xFF4
  3645                           prodl	equ	0xFF3
  3646                           postinc0	equ	0xFEE
  3647                           wreg	equ	0xFE8
  3648                           postdec1	equ	0xFE5
  3649                           fsr1l	equ	0xFE1
  3650                           indf2	equ	0xFDF
  3651                           postinc2	equ	0xFDE
  3652                           postdec2	equ	0xFDD
  3653                           fsr2h	equ	0xFDA
  3654                           fsr2l	equ	0xFD9
  3655                           status	equ	0xFD8
  3656                           
  3657 ;; *************** function _readIR *****************
  3658 ;; Defined at:
  3659 ;;		line 23 in file "ADCFunctionality.c"
  3660 ;; Parameters:    Size  Location     Type
  3661 ;;		None
  3662 ;; Auto vars:     Size  Location     Type
  3663 ;;  res             2    4[BANK0 ] int 
  3664 ;; Return value:  Size  Location     Type
  3665 ;;                  1    wreg      void 
  3666 ;; Registers used:
  3667 ;;		wreg, status,2, status,0, cstack
  3668 ;; Tracked objects:
  3669 ;;		On entry : 0/0
  3670 ;;		On exit  : 0/0
  3671 ;;		Unchanged: 0/0
  3672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3674 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3675 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3676 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3677 ;;Total ram usage:        4 bytes
  3678 ;; Hardware stack levels used:    1
  3679 ;; Hardware stack levels required when called:    8
  3680 ;; This function calls:
  3681 ;;		_readADC
  3682 ;; This function is called by:
  3683 ;;		_getIR
  3684 ;; This function uses a non-reentrant model
  3685 ;;
  3686                           
  3687                           	psect	text7
  3688  0040A6                     __ptext7:
  3689                           	opt stack 0
  3690  0040A6                     _readIR:
  3691                           	opt stack 19
  3692                           
  3693                           ;ADCFunctionality.c: 24: readADC(0);
  3694                           
  3695                           ; BSR set to: 0
  3696                           ;incstack = 0
  3697  0040A6  0E00               	movlw	0
  3698  0040A8  ECB6  F022         	call	_readADC
  3699                           
  3700                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  3701  0040AC  50C3               	movf	4035,w,c	;volatile
  3702  0040AE  CFC4 F082          	movff	4036,??_readIR	;volatile
  3703  0040B2  0100               	movlb	0	; () banked
  3704  0040B4  6B83               	clrf	(??_readIR+1)& (0+255),b
  3705  0040B6  C082  F083         	movff	??_readIR,??_readIR+1
  3706  0040BA  0100               	movlb	0	; () banked
  3707  0040BC  6B82               	clrf	??_readIR& (0+255),b
  3708  0040BE  0100               	movlb	0	; () banked
  3709  0040C0  1182               	iorwf	??_readIR& (0+255),w,b
  3710  0040C2  0100               	movlb	0	; () banked
  3711  0040C4  6F84               	movwf	readIR@res& (0+255),b
  3712  0040C6  0100               	movlb	0	; () banked
  3713  0040C8  5183               	movf	(??_readIR+1)& (0+255),w,b
  3714  0040CA  0100               	movlb	0	; () banked
  3715  0040CC  6F85               	movwf	(readIR@res+1)& (0+255),b
  3716                           
  3717                           ; BSR set to: 0
  3718                           ;ADCFunctionality.c: 26: IR_signal = (res > 1000) ? 1 : 0;
  3719  0040CE  0100               	movlb	0	; () banked
  3720  0040D0  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  3721  0040D2  D00A               	goto	u3730
  3722  0040D4  0EE9               	movlw	233
  3723  0040D6  0100               	movlb	0	; () banked
  3724  0040D8  5D84               	subwf	readIR@res& (0+255),w,b
  3725  0040DA  0E03               	movlw	3
  3726  0040DC  0100               	movlb	0	; () banked
  3727  0040DE  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  3728  0040E0  A0D8               	btfss	status,0,c
  3729  0040E2  D002               	goto	u3730
  3730  0040E4  0E01               	movlw	1
  3731  0040E6  D001               	goto	u3740
  3732  0040E8                     u3730:
  3733  0040E8  0E00               	movlw	0
  3734  0040EA                     u3740:
  3735  0040EA  0100               	movlb	0	; () banked
  3736  0040EC  6FDA               	movwf	_IR_signal& (0+255),b
  3737  0040EE  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  3738                           
  3739                           ; BSR set to: 0
  3740  0040F0  0012               	return		;funcret
  3741  0040F2                     __end_of_readIR:
  3742                           	opt stack 0
  3743                           tblptru	equ	0xFF8
  3744                           tblptrh	equ	0xFF7
  3745                           tblptrl	equ	0xFF6
  3746                           tablat	equ	0xFF5
  3747                           prodh	equ	0xFF4
  3748                           prodl	equ	0xFF3
  3749                           postinc0	equ	0xFEE
  3750                           wreg	equ	0xFE8
  3751                           postdec1	equ	0xFE5
  3752                           fsr1l	equ	0xFE1
  3753                           indf2	equ	0xFDF
  3754                           postinc2	equ	0xFDE
  3755                           postdec2	equ	0xFDD
  3756                           fsr2h	equ	0xFDA
  3757                           fsr2l	equ	0xFD9
  3758                           status	equ	0xFD8
  3759                           
  3760 ;; *************** function _ID *****************
  3761 ;; Defined at:
  3762 ;;		line 125 in file "sort.c"
  3763 ;; Parameters:    Size  Location     Type
  3764 ;;		None
  3765 ;; Auto vars:     Size  Location     Type
  3766 ;;  i               2   10[BANK0 ] int 
  3767 ;;  sensor_outpu    6   12[BANK0 ] int [3]
  3768 ;; Return value:  Size  Location     Type
  3769 ;;                  1    wreg      void 
  3770 ;; Registers used:
  3771 ;;		wreg, status,2, status,0, cstack
  3772 ;; Tracked objects:
  3773 ;;		On entry : 0/0
  3774 ;;		On exit  : 0/0
  3775 ;;		Unchanged: 0/0
  3776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3778 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3779 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3780 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3781 ;;Total ram usage:       10 bytes
  3782 ;; Hardware stack levels used:    1
  3783 ;; Hardware stack levels required when called:   10
  3784 ;; This function calls:
  3785 ;;		_getMAG
  3786 ;; This function is called by:
  3787 ;;		_sort
  3788 ;; This function uses a non-reentrant model
  3789 ;;
  3790                           
  3791                           	psect	text8
  3792  002C2E                     __ptext8:
  3793                           	opt stack 0
  3794  002C2E                     _ID:
  3795                           	opt stack 19
  3796                           
  3797                           ;sort.c: 126: if(f_can_coming_to_ID){
  3798                           
  3799                           ; BSR set to: 0
  3800                           ;incstack = 0
  3801  002C2E  506D               	movf	_f_can_coming_to_ID,w,c
  3802  002C30  106E               	iorwf	_f_can_coming_to_ID+1,w,c
  3803  002C32  B4D8               	btfsc	status,2,c
  3804  002C34  0012               	return	
  3805                           
  3806                           ;sort.c: 128: _delay((unsigned long)((750)*(32000000/4000.0)));
  3807  002C36  0E1F               	movlw	31
  3808  002C38  0100               	movlb	0	; () banked
  3809  002C3A  6F89               	movwf	(??_ID+1)& (0+255),b
  3810  002C3C  0E71               	movlw	113
  3811  002C3E  0100               	movlb	0	; () banked
  3812  002C40  6F88               	movwf	??_ID& (0+255),b
  3813  002C42  0E1E               	movlw	30
  3814  002C44                     u6997:
  3815  002C44  2EE8               	decfsz	wreg,f,c
  3816  002C46  D7FE               	bra	u6997
  3817  002C48  2F88               	decfsz	??_ID& (0+255),f,b
  3818  002C4A  D7FC               	bra	u6997
  3819  002C4C  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  3820  002C4E  D7FA               	bra	u6997
  3821  002C50  F000               	nop	
  3822                           
  3823                           ;sort.c: 133: int sensor_outputs[3];
  3824                           ;sort.c: 137: sensor_outputs[0] = PORTAbits.RA2;
  3825  002C52  A480               	btfss	3968,2,c	;volatile
  3826  002C54  D004               	goto	u4800
  3827  002C56  0100               	movlb	0	; () banked
  3828  002C58  6B88               	clrf	??_ID& (0+255),b
  3829  002C5A  2B88               	incf	??_ID& (0+255),f,b
  3830  002C5C  D002               	goto	u4808
  3831  002C5E                     u4800:
  3832  002C5E  0100               	movlb	0	; () banked
  3833  002C60  6B88               	clrf	??_ID& (0+255),b
  3834  002C62                     u4808:
  3835  002C62  0100               	movlb	0	; () banked
  3836  002C64  5188               	movf	??_ID& (0+255),w,b
  3837  002C66  0100               	movlb	0	; () banked
  3838  002C68  6F8C               	movwf	ID@sensor_outputs& (0+255),b
  3839  002C6A  6B8D               	clrf	(ID@sensor_outputs+1)& (0+255),b
  3840                           
  3841                           ; BSR set to: 0
  3842                           ;sort.c: 139: if(!sensor_outputs[0]){
  3843  002C6C  0100               	movlb	0	; () banked
  3844  002C6E  518C               	movf	ID@sensor_outputs& (0+255),w,b
  3845  002C70  0100               	movlb	0	; () banked
  3846  002C72  118D               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3847  002C74  A4D8               	btfss	status,2,c
  3848  002C76  D029               	goto	l6411
  3849                           
  3850                           ; BSR set to: 0
  3851                           ;sort.c: 140: getMAG();
  3852  002C78  EC51  F021         	call	_getMAG	;wreg free
  3853                           
  3854                           ;sort.c: 141: sensor_outputs[1] = MAG_signal;
  3855  002C7C  C0DC  F08E         	movff	_MAG_signal,ID@sensor_outputs+2
  3856  002C80  C0DD  F08F         	movff	_MAG_signal+1,ID@sensor_outputs+3
  3857                           
  3858                           ;sort.c: 142: if(!sensor_outputs[1]){
  3859  002C84  0100               	movlb	0	; () banked
  3860  002C86  518E               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3861  002C88  0100               	movlb	0	; () banked
  3862  002C8A  118F               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3863  002C8C  A4D8               	btfss	status,2,c
  3864  002C8E  D01D               	goto	l6411
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;sort.c: 143: LATAbits.LATA3 = 1;
  3868  002C90  8689               	bsf	3977,3,c	;volatile
  3869                           
  3870                           ; BSR set to: 0
  3871                           ;sort.c: 145: _delay((unsigned long)((600)*(32000000/4000.0)));
  3872  002C92  0E19               	movlw	25
  3873  002C94  0100               	movlb	0	; () banked
  3874  002C96  6F89               	movwf	(??_ID+1)& (0+255),b
  3875  002C98  0E5A               	movlw	90
  3876  002C9A  0100               	movlb	0	; () banked
  3877  002C9C  6F88               	movwf	??_ID& (0+255),b
  3878  002C9E  0EB1               	movlw	177
  3879  002CA0                     u7007:
  3880  002CA0  2EE8               	decfsz	wreg,f,c
  3881  002CA2  D7FE               	bra	u7007
  3882  002CA4  2F88               	decfsz	??_ID& (0+255),f,b
  3883  002CA6  D7FC               	bra	u7007
  3884  002CA8  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  3885  002CAA  D7FA               	bra	u7007
  3886  002CAC  D000               	nop2	
  3887                           
  3888                           ;sort.c: 146: sensor_outputs[2] = PORTAbits.RA2;
  3889  002CAE  A480               	btfss	3968,2,c	;volatile
  3890  002CB0  D004               	goto	u4830
  3891  002CB2  0100               	movlb	0	; () banked
  3892  002CB4  6B88               	clrf	??_ID& (0+255),b
  3893  002CB6  2B88               	incf	??_ID& (0+255),f,b
  3894  002CB8  D002               	goto	u4838
  3895  002CBA                     u4830:
  3896  002CBA  0100               	movlb	0	; () banked
  3897  002CBC  6B88               	clrf	??_ID& (0+255),b
  3898  002CBE                     u4838:
  3899  002CBE  0100               	movlb	0	; () banked
  3900  002CC0  5188               	movf	??_ID& (0+255),w,b
  3901  002CC2  0100               	movlb	0	; () banked
  3902  002CC4  6F90               	movwf	(ID@sensor_outputs+4)& (0+255),b
  3903  002CC6  6B91               	clrf	(ID@sensor_outputs+5)& (0+255),b
  3904                           
  3905                           ; BSR set to: 0
  3906                           ;sort.c: 147: LATAbits.LATA3 = 0;
  3907  002CC8  9689               	bcf	3977,3,c	;volatile
  3908  002CCA                     l6411:
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;sort.c: 148: }
  3912                           ;sort.c: 149: }
  3913                           ;sort.c: 157: if(!sensor_outputs[0]){
  3914  002CCA  0100               	movlb	0	; () banked
  3915  002CCC  518C               	movf	ID@sensor_outputs& (0+255),w,b
  3916  002CCE  0100               	movlb	0	; () banked
  3917  002CD0  118D               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3918  002CD2  A4D8               	btfss	status,2,c
  3919  002CD4  D021               	goto	l6429
  3920                           
  3921                           ; BSR set to: 0
  3922                           ;sort.c: 158: if(!sensor_outputs[1]){
  3923  002CD6  0100               	movlb	0	; () banked
  3924  002CD8  518E               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3925  002CDA  0100               	movlb	0	; () banked
  3926  002CDC  118F               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3927  002CDE  A4D8               	btfss	status,2,c
  3928  002CE0  D014               	goto	l6425
  3929                           
  3930                           ; BSR set to: 0
  3931                           ;sort.c: 159: if(!sensor_outputs[2]){
  3932  002CE2  0100               	movlb	0	; () banked
  3933  002CE4  5190               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  3934  002CE6  0100               	movlb	0	; () banked
  3935  002CE8  1191               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  3936  002CEA  A4D8               	btfss	status,2,c
  3937  002CEC  D007               	goto	l6421
  3938                           
  3939                           ; BSR set to: 0
  3940                           ;sort.c: 160: count_pop_no_tab++;
  3941  002CEE  4A61               	infsnz	_count_pop_no_tab,f,c
  3942  002CF0  2A62               	incf	_count_pop_no_tab+1,f,c
  3943                           
  3944                           ; BSR set to: 0
  3945                           ;sort.c: 161: cur_can = 0;
  3946  002CF2  0E00               	movlw	0
  3947  002CF4  0101               	movlb	1	; () banked
  3948  002CF6  6F2C               	movwf	(_cur_can+1)& (0+255),b
  3949  002CF8  0E00               	movlw	0
  3950  002CFA  D014               	goto	L3
  3951  002CFC                     l6421:
  3952                           
  3953                           ;sort.c: 163: else{
  3954                           ;sort.c: 164: count_pop_w_tab++;
  3955  002CFC  4A63               	infsnz	_count_pop_w_tab,f,c
  3956  002CFE  2A64               	incf	_count_pop_w_tab+1,f,c
  3957                           
  3958                           ;sort.c: 165: cur_can = 1;
  3959  002D00  0E00               	movlw	0
  3960  002D02  0101               	movlb	1	; () banked
  3961  002D04  6F2C               	movwf	(_cur_can+1)& (0+255),b
  3962  002D06  0E01               	movlw	1
  3963  002D08  D00D               	goto	L3
  3964  002D0A                     l6425:
  3965                           
  3966                           ;sort.c: 168: else{
  3967                           ;sort.c: 169: count_can_w_lab++;
  3968  002D0A  4A5F               	infsnz	_count_can_w_lab,f,c
  3969  002D0C  2A60               	incf	_count_can_w_lab+1,f,c
  3970                           
  3971                           ;sort.c: 170: cur_can = 2;
  3972  002D0E  0E00               	movlw	0
  3973  002D10  0101               	movlb	1	; () banked
  3974  002D12  6F2C               	movwf	(_cur_can+1)& (0+255),b
  3975  002D14  0E02               	movlw	2
  3976  002D16  D006               	goto	L3
  3977  002D18                     l6429:
  3978                           
  3979                           ;sort.c: 173: else{
  3980                           ;sort.c: 174: count_can_no_lab++;
  3981  002D18  4A5D               	infsnz	_count_can_no_lab,f,c
  3982  002D1A  2A5E               	incf	_count_can_no_lab+1,f,c
  3983                           
  3984                           ;sort.c: 175: cur_can = 3;
  3985  002D1C  0E00               	movlw	0
  3986  002D1E  0101               	movlb	1	; () banked
  3987  002D20  6F2C               	movwf	(_cur_can+1)& (0+255),b
  3988  002D22  0E03               	movlw	3
  3989  002D24                     L3:
  3990  002D24  6F2B               	movwf	_cur_can& (0+255),b
  3991                           
  3992                           ; BSR set to: 1
  3993                           ;sort.c: 176: }
  3994                           ;sort.c: 180: for(int i=0;i<10000;i++)
  3995                           
  3996                           ; BSR set to: 1
  3997  002D26  0E00               	movlw	0
  3998  002D28  0100               	movlb	0	; () banked
  3999  002D2A  6F8B               	movwf	(ID@i+1)& (0+255),b
  4000  002D2C  0E00               	movlw	0
  4001  002D2E  6F8A               	movwf	ID@i& (0+255),b
  4002  002D30                     l6435:
  4003                           
  4004                           ; BSR set to: 0
  4005  002D30  0100               	movlb	0	; () banked
  4006  002D32  BF8B               	btfsc	(ID@i+1)& (0+255),7,b
  4007  002D34  D008               	goto	l746
  4008  002D36  0E10               	movlw	16
  4009  002D38  0100               	movlb	0	; () banked
  4010  002D3A  5D8A               	subwf	ID@i& (0+255),w,b
  4011  002D3C  0E27               	movlw	39
  4012  002D3E  0100               	movlb	0	; () banked
  4013  002D40  598B               	subwfb	(ID@i+1)& (0+255),w,b
  4014  002D42  B0D8               	btfsc	status,0,c
  4015  002D44  D00D               	goto	l747
  4016  002D46                     l746:
  4017                           
  4018                           ; BSR set to: 0
  4019                           ;sort.c: 181: {
  4020                           ;sort.c: 182: LATCbits.LATC0 = 1;
  4021  002D46  808B               	bsf	3979,0,c	;volatile
  4022                           
  4023                           ; BSR set to: 0
  4024                           ;sort.c: 183: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4025  002D48  0E1A               	movlw	26
  4026  002D4A                     u7017:
  4027  002D4A  2EE8               	decfsz	wreg,f,c
  4028  002D4C  D7FE               	bra	u7017
  4029  002D4E  D000               	nop2	
  4030                           
  4031                           ;sort.c: 184: LATCbits.LATC0 = 0;
  4032  002D50  908B               	bcf	3979,0,c	;volatile
  4033                           
  4034                           ;sort.c: 185: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4035  002D52  0EF0               	movlw	240
  4036  002D54                     u7027:
  4037  002D54  2EE8               	decfsz	wreg,f,c
  4038  002D56  D7FE               	bra	u7027
  4039  002D58  0100               	movlb	0	; () banked
  4040  002D5A  4B8A               	infsnz	ID@i& (0+255),f,b
  4041  002D5C  2B8B               	incf	(ID@i+1)& (0+255),f,b
  4042  002D5E  D7E8               	goto	l6435
  4043  002D60                     l747:
  4044                           
  4045                           ; BSR set to: 0
  4046                           ;sort.c: 186: }
  4047                           ;sort.c: 187: LATCbits.LATC0 = 0;
  4048  002D60  908B               	bcf	3979,0,c	;volatile
  4049                           
  4050                           ; BSR set to: 0
  4051                           ;sort.c: 189: f_can_coming_to_distribution = 1;
  4052  002D62  0E00               	movlw	0
  4053  002D64  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4054  002D66  0E01               	movlw	1
  4055  002D68  6E6F               	movwf	_f_can_coming_to_distribution,c
  4056                           
  4057                           ; BSR set to: 0
  4058                           ;sort.c: 190: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4059  002D6A  0E3D               	movlw	61
  4060  002D6C  0100               	movlb	0	; () banked
  4061  002D6E  6F89               	movwf	(??_ID+1)& (0+255),b
  4062  002D70  0EE1               	movlw	225
  4063  002D72  0100               	movlb	0	; () banked
  4064  002D74  6F88               	movwf	??_ID& (0+255),b
  4065  002D76  0E3F               	movlw	63
  4066  002D78                     u7037:
  4067  002D78  2EE8               	decfsz	wreg,f,c
  4068  002D7A  D7FE               	bra	u7037
  4069  002D7C  2F88               	decfsz	??_ID& (0+255),f,b
  4070  002D7E  D7FC               	bra	u7037
  4071  002D80  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  4072  002D82  D7FA               	bra	u7037
  4073  002D84  D000               	nop2	
  4074                           
  4075                           ;sort.c: 191: LATCbits.LATC0 = 1;
  4076  002D86  808B               	bsf	3979,0,c	;volatile
  4077                           
  4078                           ;sort.c: 193: f_can_coming_to_ID = 0;
  4079  002D88  0E00               	movlw	0
  4080  002D8A  6E6E               	movwf	_f_can_coming_to_ID+1,c
  4081  002D8C  0E00               	movlw	0
  4082  002D8E  6E6D               	movwf	_f_can_coming_to_ID,c
  4083  002D90  0012               	return	
  4084  002D92                     __end_of_ID:
  4085                           	opt stack 0
  4086                           tblptru	equ	0xFF8
  4087                           tblptrh	equ	0xFF7
  4088                           tblptrl	equ	0xFF6
  4089                           tablat	equ	0xFF5
  4090                           prodh	equ	0xFF4
  4091                           prodl	equ	0xFF3
  4092                           postinc0	equ	0xFEE
  4093                           wreg	equ	0xFE8
  4094                           postdec1	equ	0xFE5
  4095                           fsr1l	equ	0xFE1
  4096                           indf2	equ	0xFDF
  4097                           postinc2	equ	0xFDE
  4098                           postdec2	equ	0xFDD
  4099                           fsr2h	equ	0xFDA
  4100                           fsr2l	equ	0xFD9
  4101                           status	equ	0xFD8
  4102                           
  4103 ;; *************** function _getMAG *****************
  4104 ;; Defined at:
  4105 ;;		line 325 in file "sort.c"
  4106 ;; Parameters:    Size  Location     Type
  4107 ;;		None
  4108 ;; Auto vars:     Size  Location     Type
  4109 ;;		None
  4110 ;; Return value:  Size  Location     Type
  4111 ;;                  1    wreg      void 
  4112 ;; Registers used:
  4113 ;;		wreg, status,2, status,0, cstack
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4121 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4122 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4123 ;;Total ram usage:        2 bytes
  4124 ;; Hardware stack levels used:    1
  4125 ;; Hardware stack levels required when called:    9
  4126 ;; This function calls:
  4127 ;;		_readMAG
  4128 ;; This function is called by:
  4129 ;;		_ID
  4130 ;; This function uses a non-reentrant model
  4131 ;;
  4132                           
  4133                           	psect	text9
  4134  0042A2                     __ptext9:
  4135                           	opt stack 0
  4136  0042A2                     _getMAG:
  4137                           	opt stack 19
  4138                           
  4139                           ;sort.c: 326: readMAG();
  4140                           
  4141                           ;incstack = 0
  4142  0042A2  EC79  F020         	call	_readMAG	;wreg free
  4143                           
  4144                           ;sort.c: 328: if(MAG_signal==1){
  4145  0042A6  0100               	movlb	0	; () banked
  4146  0042A8  05DC               	decf	_MAG_signal& (0+255),w,b
  4147  0042AA  0100               	movlb	0	; () banked
  4148  0042AC  11DD               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4149  0042AE  A4D8               	btfss	status,2,c
  4150  0042B0  0012               	return	
  4151                           
  4152                           ; BSR set to: 0
  4153                           ;sort.c: 329: _delay((unsigned long)((500)*(32000000/4000.0)));
  4154  0042B2  0E15               	movlw	21
  4155  0042B4  0100               	movlb	0	; () banked
  4156  0042B6  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4157  0042B8  0E4B               	movlw	75
  4158  0042BA  0100               	movlb	0	; () banked
  4159  0042BC  6F86               	movwf	??_getMAG& (0+255),b
  4160  0042BE  0EBE               	movlw	190
  4161  0042C0                     u7047:
  4162  0042C0  2EE8               	decfsz	wreg,f,c
  4163  0042C2  D7FE               	bra	u7047
  4164  0042C4  2F86               	decfsz	??_getMAG& (0+255),f,b
  4165  0042C6  D7FC               	bra	u7047
  4166  0042C8  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4167  0042CA  D7FA               	bra	u7047
  4168  0042CC  F000               	nop	
  4169                           
  4170                           ;sort.c: 330: readMAG();
  4171  0042CE  EC79  F020         	call	_readMAG	;wreg free
  4172  0042D2  0012               	return	
  4173  0042D4                     __end_of_getMAG:
  4174                           	opt stack 0
  4175                           tblptru	equ	0xFF8
  4176                           tblptrh	equ	0xFF7
  4177                           tblptrl	equ	0xFF6
  4178                           tablat	equ	0xFF5
  4179                           prodh	equ	0xFF4
  4180                           prodl	equ	0xFF3
  4181                           postinc0	equ	0xFEE
  4182                           wreg	equ	0xFE8
  4183                           postdec1	equ	0xFE5
  4184                           fsr1l	equ	0xFE1
  4185                           indf2	equ	0xFDF
  4186                           postinc2	equ	0xFDE
  4187                           postdec2	equ	0xFDD
  4188                           fsr2h	equ	0xFDA
  4189                           fsr2l	equ	0xFD9
  4190                           status	equ	0xFD8
  4191                           
  4192 ;; *************** function _Distribution *****************
  4193 ;; Defined at:
  4194 ;;		line 196 in file "sort.c"
  4195 ;; Parameters:    Size  Location     Type
  4196 ;;		None
  4197 ;; Auto vars:     Size  Location     Type
  4198 ;;		None
  4199 ;; Return value:  Size  Location     Type
  4200 ;;                  1    wreg      void 
  4201 ;; Registers used:
  4202 ;;		wreg, status,2, status,0, cstack
  4203 ;; Tracked objects:
  4204 ;;		On entry : 0/0
  4205 ;;		On exit  : 0/0
  4206 ;;		Unchanged: 0/0
  4207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4210 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4211 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4212 ;;Total ram usage:        2 bytes
  4213 ;; Hardware stack levels used:    1
  4214 ;; Hardware stack levels required when called:    8
  4215 ;; This function calls:
  4216 ;;		_updateServoPosition
  4217 ;; This function is called by:
  4218 ;;		_sort
  4219 ;; This function uses a non-reentrant model
  4220 ;;
  4221                           
  4222                           	psect	text10
  4223  002D92                     __ptext10:
  4224                           	opt stack 0
  4225  002D92                     _Distribution:
  4226                           	opt stack 21
  4227                           
  4228                           ;sort.c: 197: if(f_can_coming_to_distribution){
  4229                           
  4230                           ;incstack = 0
  4231  002D92  506F               	movf	_f_can_coming_to_distribution,w,c
  4232  002D94  1070               	iorwf	_f_can_coming_to_distribution+1,w,c
  4233  002D96  B4D8               	btfsc	status,2,c
  4234  002D98  0012               	return	
  4235  002D9A  D034               	goto	l6467
  4236  002D9C                     l6457:
  4237                           
  4238                           ;sort.c: 202: updateServoPosition(500, 1);
  4239  002D9C  0E01               	movlw	1
  4240  002D9E  0100               	movlb	0	; () banked
  4241  002DA0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4242  002DA2  0EF4               	movlw	244
  4243  002DA4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4244  002DA6  0E00               	movlw	0
  4245  002DA8  0100               	movlb	0	; () banked
  4246  002DAA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4247  002DAC  0E01               	movlw	1
  4248  002DAE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4249  002DB0  ECEB  F01D         	call	_updateServoPosition	;wreg free
  4250                           
  4251                           ;sort.c: 203: break;
  4252  002DB4  D03E               	goto	l6469
  4253  002DB6                     l6459:
  4254                           
  4255                           ;sort.c: 205: updateServoPosition(750, 1);
  4256  002DB6  0E02               	movlw	2
  4257  002DB8  0100               	movlb	0	; () banked
  4258  002DBA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4259  002DBC  0EEE               	movlw	238
  4260  002DBE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4261  002DC0  0E00               	movlw	0
  4262  002DC2  0100               	movlb	0	; () banked
  4263  002DC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4264  002DC6  0E01               	movlw	1
  4265  002DC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4266  002DCA  ECEB  F01D         	call	_updateServoPosition	;wreg free
  4267                           
  4268                           ;sort.c: 206: break;
  4269  002DCE  D031               	goto	l6469
  4270  002DD0                     l6461:
  4271                           
  4272                           ;sort.c: 208: updateServoPosition(1700, 1);
  4273  002DD0  0E06               	movlw	6
  4274  002DD2  0100               	movlb	0	; () banked
  4275  002DD4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4276  002DD6  0EA4               	movlw	164
  4277  002DD8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4278  002DDA  0E00               	movlw	0
  4279  002DDC  0100               	movlb	0	; () banked
  4280  002DDE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4281  002DE0  0E01               	movlw	1
  4282  002DE2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4283  002DE4  ECEB  F01D         	call	_updateServoPosition	;wreg free
  4284                           
  4285                           ;sort.c: 209: break;
  4286  002DE8  D024               	goto	l6469
  4287  002DEA                     l6463:
  4288                           
  4289                           ;sort.c: 211: updateServoPosition(2100, 1);
  4290  002DEA  0E08               	movlw	8
  4291  002DEC  0100               	movlb	0	; () banked
  4292  002DEE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4293  002DF0  0E34               	movlw	52
  4294  002DF2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4295  002DF4  0E00               	movlw	0
  4296  002DF6  0100               	movlb	0	; () banked
  4297  002DF8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4298  002DFA  0E01               	movlw	1
  4299  002DFC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4300  002DFE  ECEB  F01D         	call	_updateServoPosition	;wreg free
  4301                           
  4302                           ;sort.c: 215: }
  4303                           
  4304                           ;sort.c: 214: break;
  4305                           
  4306                           ;sort.c: 213: default:
  4307                           
  4308                           ;sort.c: 212: break;
  4309  002E02  D017               	goto	l6469
  4310  002E04                     l6467:
  4311  002E04  C12B  F088         	movff	_cur_can,??_Distribution
  4312  002E08  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  4313                           
  4314                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4315                           ; Switch size 1, requested type "space"
  4316                           ; Number of cases is 1, Range of values is 0 to 0
  4317                           ; switch strategies available:
  4318                           ; Name         Instructions Cycles
  4319                           ; simple_byte            4     3 (average)
  4320                           ;	Chosen strategy is simple_byte
  4321  002E0C  0100               	movlb	0	; () banked
  4322  002E0E  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4323  002E10  0A00               	xorlw	0	; case 0
  4324  002E12  A4D8               	btfss	status,2,c
  4325  002E14  D00E               	goto	l6469
  4326                           
  4327                           ; BSR set to: 0
  4328                           ; Switch size 1, requested type "space"
  4329                           ; Number of cases is 4, Range of values is 0 to 3
  4330                           ; switch strategies available:
  4331                           ; Name         Instructions Cycles
  4332                           ; simple_byte           13     7 (average)
  4333                           ;	Chosen strategy is simple_byte
  4334  002E16  0100               	movlb	0	; () banked
  4335  002E18  5188               	movf	??_Distribution& (0+255),w,b
  4336  002E1A  0A00               	xorlw	0	; case 0
  4337  002E1C  B4D8               	btfsc	status,2,c
  4338  002E1E  D7BE               	goto	l6457
  4339  002E20  0A01               	xorlw	1	; case 1
  4340  002E22  B4D8               	btfsc	status,2,c
  4341  002E24  D7C8               	goto	l6459
  4342  002E26  0A03               	xorlw	3	; case 2
  4343  002E28  B4D8               	btfsc	status,2,c
  4344  002E2A  D7D2               	goto	l6461
  4345  002E2C  0A01               	xorlw	1	; case 3
  4346  002E2E  B4D8               	btfsc	status,2,c
  4347  002E30  D7DC               	goto	l6463
  4348  002E32                     l6469:
  4349                           
  4350                           ;sort.c: 216: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4351  002E32  0E3D               	movlw	61
  4352  002E34  0100               	movlb	0	; () banked
  4353  002E36  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4354  002E38  0EE1               	movlw	225
  4355  002E3A  0100               	movlb	0	; () banked
  4356  002E3C  6F88               	movwf	??_Distribution& (0+255),b
  4357  002E3E  0E3F               	movlw	63
  4358  002E40                     u7057:
  4359  002E40  2EE8               	decfsz	wreg,f,c
  4360  002E42  D7FE               	bra	u7057
  4361  002E44  2F88               	decfsz	??_Distribution& (0+255),f,b
  4362  002E46  D7FC               	bra	u7057
  4363  002E48  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4364  002E4A  D7FA               	bra	u7057
  4365  002E4C  D000               	nop2	
  4366                           
  4367                           ;sort.c: 219: updateServoPosition(1350, 3);
  4368  002E4E  0E05               	movlw	5
  4369  002E50  0100               	movlb	0	; () banked
  4370  002E52  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4371  002E54  0E46               	movlw	70
  4372  002E56  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4373  002E58  0E00               	movlw	0
  4374  002E5A  0100               	movlb	0	; () banked
  4375  002E5C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4376  002E5E  0E03               	movlw	3
  4377  002E60  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4378  002E62  ECEB  F01D         	call	_updateServoPosition	;wreg free
  4379                           
  4380                           ;sort.c: 220: _delay((unsigned long)((2000)*(32000000/4000.0)));
  4381  002E66  0E52               	movlw	82
  4382  002E68  0100               	movlb	0	; () banked
  4383  002E6A  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4384  002E6C  0E2B               	movlw	43
  4385  002E6E  0100               	movlb	0	; () banked
  4386  002E70  6F88               	movwf	??_Distribution& (0+255),b
  4387  002E72  0E00               	movlw	0
  4388  002E74                     u7067:
  4389  002E74  2EE8               	decfsz	wreg,f,c
  4390  002E76  D7FE               	bra	u7067
  4391  002E78  2F88               	decfsz	??_Distribution& (0+255),f,b
  4392  002E7A  D7FC               	bra	u7067
  4393  002E7C  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4394  002E7E  D7FA               	bra	u7067
  4395  002E80  F000               	nop	
  4396                           
  4397                           ;sort.c: 223: updateServoPosition(1150, 3);
  4398  002E82  0E04               	movlw	4
  4399  002E84  0100               	movlb	0	; () banked
  4400  002E86  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4401  002E88  0E7E               	movlw	126
  4402  002E8A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4403  002E8C  0E00               	movlw	0
  4404  002E8E  0100               	movlb	0	; () banked
  4405  002E90  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4406  002E92  0E03               	movlw	3
  4407  002E94  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4408  002E96  ECEB  F01D         	call	_updateServoPosition	;wreg free
  4409                           
  4410                           ;sort.c: 224: _delay((unsigned long)((750)*(32000000/4000.0)));
  4411  002E9A  0E1F               	movlw	31
  4412  002E9C  0100               	movlb	0	; () banked
  4413  002E9E  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4414  002EA0  0E71               	movlw	113
  4415  002EA2  0100               	movlb	0	; () banked
  4416  002EA4  6F88               	movwf	??_Distribution& (0+255),b
  4417  002EA6  0E1E               	movlw	30
  4418  002EA8                     u7077:
  4419  002EA8  2EE8               	decfsz	wreg,f,c
  4420  002EAA  D7FE               	bra	u7077
  4421  002EAC  2F88               	decfsz	??_Distribution& (0+255),f,b
  4422  002EAE  D7FC               	bra	u7077
  4423  002EB0  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4424  002EB2  D7FA               	bra	u7077
  4425  002EB4  F000               	nop	
  4426                           
  4427                           ;sort.c: 225: updateServoPosition(1200, 1);
  4428  002EB6  0E04               	movlw	4
  4429  002EB8  0100               	movlb	0	; () banked
  4430  002EBA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4431  002EBC  0EB0               	movlw	176
  4432  002EBE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4433  002EC0  0E00               	movlw	0
  4434  002EC2  0100               	movlb	0	; () banked
  4435  002EC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4436  002EC6  0E01               	movlw	1
  4437  002EC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4438  002ECA  ECEB  F01D         	call	_updateServoPosition	;wreg free
  4439                           
  4440                           ;sort.c: 226: f_can_coming_to_distribution = 0;
  4441  002ECE  0E00               	movlw	0
  4442  002ED0  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4443  002ED2  0E00               	movlw	0
  4444  002ED4  6E6F               	movwf	_f_can_coming_to_distribution,c
  4445                           
  4446                           ;sort.c: 227: f_can_distributed = 1;
  4447  002ED6  0E00               	movlw	0
  4448  002ED8  0101               	movlb	1	; () banked
  4449  002EDA  6F2E               	movwf	(_f_can_distributed+1)& (0+255),b
  4450  002EDC  0E01               	movlw	1
  4451  002EDE  6F2D               	movwf	_f_can_distributed& (0+255),b
  4452                           
  4453                           ; BSR set to: 1
  4454                           ;sort.c: 228: if(f_lastCan == 1){
  4455  002EE0  0471               	decf	_f_lastCan,w,c
  4456  002EE2  1072               	iorwf	_f_lastCan+1,w,c
  4457  002EE4  A4D8               	btfss	status,2,c
  4458  002EE6  0012               	return	
  4459                           
  4460                           ; BSR set to: 1
  4461                           ;sort.c: 229: machine_state = DoneSorting_state;
  4462  002EE8  0E02               	movlw	2
  4463  002EEA  0100               	movlb	0	; () banked
  4464  002EEC  6FFC               	movwf	_machine_state& (0+255),b
  4465                           
  4466                           ; BSR set to: 0
  4467  002EEE  0012               	return	
  4468  002EF0                     __end_of_Distribution:
  4469                           	opt stack 0
  4470                           tblptru	equ	0xFF8
  4471                           tblptrh	equ	0xFF7
  4472                           tblptrl	equ	0xFF6
  4473                           tablat	equ	0xFF5
  4474                           prodh	equ	0xFF4
  4475                           prodl	equ	0xFF3
  4476                           postinc0	equ	0xFEE
  4477                           wreg	equ	0xFE8
  4478                           postdec1	equ	0xFE5
  4479                           fsr1l	equ	0xFE1
  4480                           indf2	equ	0xFDF
  4481                           postinc2	equ	0xFDE
  4482                           postdec2	equ	0xFDD
  4483                           fsr2h	equ	0xFDA
  4484                           fsr2l	equ	0xFD9
  4485                           status	equ	0xFD8
  4486                           
  4487 ;; *************** function _machineConfig *****************
  4488 ;; Defined at:
  4489 ;;		line 15 in file "MachineConfig.c"
  4490 ;; Parameters:    Size  Location     Type
  4491 ;;		None
  4492 ;; Auto vars:     Size  Location     Type
  4493 ;;		None
  4494 ;; Return value:  Size  Location     Type
  4495 ;;                  1    wreg      void 
  4496 ;; Registers used:
  4497 ;;		wreg, status,2
  4498 ;; Tracked objects:
  4499 ;;		On entry : 0/0
  4500 ;;		On exit  : 0/0
  4501 ;;		Unchanged: 0/0
  4502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4507 ;;Total ram usage:        0 bytes
  4508 ;; Hardware stack levels used:    1
  4509 ;; Hardware stack levels required when called:    7
  4510 ;; This function calls:
  4511 ;;		Nothing
  4512 ;; This function is called by:
  4513 ;;		_main
  4514 ;; This function uses a non-reentrant model
  4515 ;;
  4516                           
  4517                           	psect	text11
  4518  003E50                     __ptext11:
  4519                           	opt stack 0
  4520  003E50                     _machineConfig:
  4521                           	opt stack 23
  4522                           
  4523                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4524                           
  4525                           ;incstack = 0
  4526  003E50  0EF0               	movlw	240
  4527  003E52  6ED3               	movwf	4051,c	;volatile
  4528                           
  4529                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4530  003E54  8C9B               	bsf	3995,6,c	;volatile
  4531                           
  4532                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  4533  003E56  0E07               	movlw	7
  4534  003E58  6E92               	movwf	3986,c	;volatile
  4535                           
  4536                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4537  003E5A  0EF2               	movlw	242
  4538  003E5C  6E93               	movwf	3987,c	;volatile
  4539                           
  4540                           ;MachineConfig.c: 27: TRISC = 0x00;
  4541  003E5E  0E00               	movlw	0
  4542  003E60  6E94               	movwf	3988,c	;volatile
  4543                           
  4544                           ;MachineConfig.c: 31: TRISD = 0x00;
  4545  003E62  0E00               	movlw	0
  4546  003E64  6E95               	movwf	3989,c	;volatile
  4547                           
  4548                           ;MachineConfig.c: 34: TRISE = 0x00;
  4549  003E66  0E00               	movlw	0
  4550  003E68  6E96               	movwf	3990,c	;volatile
  4551                           
  4552                           ;MachineConfig.c: 37: LATA = 0x00;
  4553  003E6A  0E00               	movlw	0
  4554  003E6C  6E89               	movwf	3977,c	;volatile
  4555                           
  4556                           ;MachineConfig.c: 38: LATB = 0x00;
  4557  003E6E  0E00               	movlw	0
  4558  003E70  6E8A               	movwf	3978,c	;volatile
  4559                           
  4560                           ;MachineConfig.c: 39: LATC = 0x00;
  4561  003E72  0E00               	movlw	0
  4562  003E74  6E8B               	movwf	3979,c	;volatile
  4563                           
  4564                           ;MachineConfig.c: 40: LATD = 0x00;
  4565  003E76  0E00               	movlw	0
  4566  003E78  6E8C               	movwf	3980,c	;volatile
  4567                           
  4568                           ;MachineConfig.c: 41: LATE = 0x00;
  4569  003E7A  0E00               	movlw	0
  4570  003E7C  6E8D               	movwf	3981,c	;volatile
  4571                           
  4572                           ;MachineConfig.c: 43: nRBPU = 0;
  4573  003E7E  9EF1               	bcf	intcon2,7,c	;volatile
  4574                           
  4575                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4576  003E80  0E00               	movlw	0
  4577  003E82  6EC2               	movwf	4034,c	;volatile
  4578                           
  4579                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4580  003E84  0E0D               	movlw	13
  4581  003E86  6EC1               	movwf	4033,c	;volatile
  4582                           
  4583                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4584  003E88  0E00               	movlw	0
  4585  003E8A  6EB5               	movwf	4021,c	;volatile
  4586                           
  4587                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4588  003E8C  96B4               	bcf	4020,3,c	;volatile
  4589                           
  4590                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4591  003E8E  0EB1               	movlw	177
  4592  003E90  6EC0               	movwf	4032,c	;volatile
  4593                           
  4594                           ;MachineConfig.c: 55: INT1IE = 1;
  4595  003E92  86F0               	bsf	intcon3,3,c	;volatile
  4596                           
  4597                           ;MachineConfig.c: 57: TMR0IE = 1;
  4598  003E94  8AF2               	bsf	intcon,5,c	;volatile
  4599                           
  4600                           ;MachineConfig.c: 58: TMR1IE = 1;
  4601  003E96  809D               	bsf	3997,0,c	;volatile
  4602                           
  4603                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4604  003E98  0EB0               	movlw	176
  4605  003E9A  6ECD               	movwf	4045,c	;volatile
  4606                           
  4607                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  4608  003E9C  0EB0               	movlw	176
  4609  003E9E  6EB1               	movwf	4017,c	;volatile
  4610                           
  4611                           ;MachineConfig.c: 61: TMR2IE = 1;
  4612  003EA0  829D               	bsf	3997,1,c	;volatile
  4613                           
  4614                           ;MachineConfig.c: 62: TMR3IE = 1;
  4615  003EA2  82A0               	bsf	4000,1,c	;volatile
  4616                           
  4617                           ;MachineConfig.c: 63: PEIE = 1;
  4618  003EA4  8CF2               	bsf	intcon,6,c	;volatile
  4619                           
  4620                           ;MachineConfig.c: 64: ADIE = 0;
  4621  003EA6  9C9D               	bcf	3997,6,c	;volatile
  4622                           
  4623                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  4624  003EA8  9EF2               	bcf	intcon,7,c	;volatile
  4625  003EAA  0012               	return		;funcret
  4626  003EAC                     __end_of_machineConfig:
  4627                           	opt stack 0
  4628                           tblptru	equ	0xFF8
  4629                           tblptrh	equ	0xFF7
  4630                           tblptrl	equ	0xFF6
  4631                           tablat	equ	0xFF5
  4632                           prodh	equ	0xFF4
  4633                           prodl	equ	0xFF3
  4634                           intcon	equ	0xFF2
  4635                           intcon2	equ	0xFF1
  4636                           intcon3	equ	0xFF0
  4637                           postinc0	equ	0xFEE
  4638                           wreg	equ	0xFE8
  4639                           postdec1	equ	0xFE5
  4640                           fsr1l	equ	0xFE1
  4641                           indf2	equ	0xFDF
  4642                           postinc2	equ	0xFDE
  4643                           postdec2	equ	0xFDD
  4644                           fsr2h	equ	0xFDA
  4645                           fsr2l	equ	0xFD9
  4646                           status	equ	0xFD8
  4647                           
  4648 ;; *************** function _logRun *****************
  4649 ;; Defined at:
  4650 ;;		line 84 in file "EEPROM.c"
  4651 ;; Parameters:    Size  Location     Type
  4652 ;;		None
  4653 ;; Auto vars:     Size  Location     Type
  4654 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4655 ;;  i               2   55[BANK0 ] int 
  4656 ;;  num             1   49[BANK0 ] unsigned char 
  4657 ;;  addr            2   57[BANK0 ] unsigned short 
  4658 ;;  byte11          1   54[BANK0 ] unsigned char 
  4659 ;;  byte3           1   52[BANK0 ] unsigned char 
  4660 ;;  byte2           1   51[BANK0 ] unsigned char 
  4661 ;;  byte1           1   50[BANK0 ] unsigned char 
  4662 ;; Return value:  Size  Location     Type
  4663 ;;                  1    wreg      void 
  4664 ;; Registers used:
  4665 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4666 ;; Tracked objects:
  4667 ;;		On entry : 0/0
  4668 ;;		On exit  : 0/0
  4669 ;;		Unchanged: 0/0
  4670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4672 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4674 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4675 ;;Total ram usage:       10 bytes
  4676 ;; Hardware stack levels used:    1
  4677 ;; Hardware stack levels required when called:   11
  4678 ;; This function calls:
  4679 ;;		_EEPROM_read
  4680 ;;		_EEPROM_write
  4681 ;; This function is called by:
  4682 ;;		_main
  4683 ;; This function uses a non-reentrant model
  4684 ;;
  4685                           
  4686                           	psect	text12
  4687  002EF0                     __ptext12:
  4688                           	opt stack 0
  4689  002EF0                     _logRun:
  4690                           	opt stack 19
  4691                           
  4692                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  4693                           
  4694                           ;incstack = 0
  4695  002EF0  0E00               	movlw	0
  4696  002EF2  0100               	movlb	0	; () banked
  4697  002EF4  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4698  002EF6  0E00               	movlw	0
  4699  002EF8  6F80               	movwf	EEPROM_read@address& (0+255),b
  4700  002EFA  EC5E  F023         	call	_EEPROM_read	;wreg free
  4701  002EFE  0100               	movlb	0	; () banked
  4702  002F00  6FFD               	movwf	_sel& (0+255),b
  4703                           
  4704                           ; BSR set to: 0
  4705                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  4706  002F02  0100               	movlb	0	; () banked
  4707  002F04  51FD               	movf	_sel& (0+255),w,b
  4708  002F06  0D0B               	mullw	11
  4709  002F08  0E01               	movlw	1
  4710  002F0A  24F3               	addwf	prodl,w,c
  4711  002F0C  0100               	movlb	0	; () banked
  4712  002F0E  6FB9               	movwf	logRun@addr& (0+255),b
  4713  002F10  0E00               	movlw	0
  4714  002F12  20F4               	addwfc	prodh,w,c
  4715  002F14  0100               	movlb	0	; () banked
  4716  002F16  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  4717                           
  4718                           ; BSR set to: 0
  4719                           ;EEPROM.c: 101: if (sel < 3){
  4720  002F18  0E03               	movlw	3
  4721  002F1A  0100               	movlb	0	; () banked
  4722  002F1C  61FD               	cpfslt	_sel& (0+255),b
  4723  002F1E  D00E               	goto	l7909
  4724                           
  4725                           ; BSR set to: 0
  4726                           ;EEPROM.c: 102: unsigned char num = sel+1;
  4727  002F20  0100               	movlb	0	; () banked
  4728  002F22  29FD               	incf	_sel& (0+255),w,b
  4729  002F24  0100               	movlb	0	; () banked
  4730  002F26  6FB1               	movwf	logRun@num& (0+255),b
  4731                           
  4732                           ; BSR set to: 0
  4733                           ;EEPROM.c: 103: EEPROM_write(0, num);
  4734  002F28  0E00               	movlw	0
  4735  002F2A  0100               	movlb	0	; () banked
  4736  002F2C  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4737  002F2E  0E00               	movlw	0
  4738  002F30  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4739  002F32  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  4740  002F36  ECB5  F019         	call	_EEPROM_write	;wreg free
  4741                           
  4742                           ;EEPROM.c: 104: }
  4743  002F3A  D00A               	goto	l7911
  4744  002F3C                     l7909:
  4745                           
  4746                           ;EEPROM.c: 105: else{
  4747                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  4748  002F3C  0E00               	movlw	0
  4749  002F3E  0100               	movlb	0	; () banked
  4750  002F40  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4751  002F42  0E00               	movlw	0
  4752  002F44  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4753  002F46  0E00               	movlw	0
  4754  002F48  0100               	movlb	0	; () banked
  4755  002F4A  6FAD               	movwf	EEPROM_write@data& (0+255),b
  4756  002F4C  ECB5  F019         	call	_EEPROM_write	;wreg free
  4757  002F50                     l7911:
  4758                           
  4759                           ;EEPROM.c: 107: }
  4760                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  4761  002F50  0100               	movlb	0	; () banked
  4762  002F52  51FE               	movf	_count_total& (0+255),w,b
  4763  002F54  0980               	iorlw	128
  4764  002F56  0100               	movlb	0	; () banked
  4765  002F58  6FB2               	movwf	logRun@byte1& (0+255),b
  4766                           
  4767                           ; BSR set to: 0
  4768                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  4769  002F5A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4770  002F5E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4771  002F62  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  4772  002F66  ECB5  F019         	call	_EEPROM_write	;wreg free
  4773                           
  4774                           ;EEPROM.c: 112: addr++;
  4775  002F6A  0100               	movlb	0	; () banked
  4776  002F6C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4777  002F6E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4778                           
  4779                           ; BSR set to: 0
  4780                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  4781  002F70  3861               	swapf	_count_pop_no_tab,w,c
  4782  002F72  0BF0               	andlw	240
  4783  002F74  1063               	iorwf	_count_pop_w_tab,w,c
  4784  002F76  0100               	movlb	0	; () banked
  4785  002F78  6FB3               	movwf	logRun@byte2& (0+255),b
  4786                           
  4787                           ; BSR set to: 0
  4788                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  4789  002F7A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4790  002F7E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4791  002F82  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  4792  002F86  ECB5  F019         	call	_EEPROM_write	;wreg free
  4793                           
  4794                           ;EEPROM.c: 117: addr++;
  4795  002F8A  0100               	movlb	0	; () banked
  4796  002F8C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4797  002F8E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4798                           
  4799                           ; BSR set to: 0
  4800                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  4801  002F90  385F               	swapf	_count_can_w_lab,w,c
  4802  002F92  0BF0               	andlw	240
  4803  002F94  105D               	iorwf	_count_can_no_lab,w,c
  4804  002F96  0100               	movlb	0	; () banked
  4805  002F98  6FB4               	movwf	logRun@byte3& (0+255),b
  4806                           
  4807                           ; BSR set to: 0
  4808                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  4809  002F9A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4810  002F9E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4811  002FA2  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  4812  002FA6  ECB5  F019         	call	_EEPROM_write	;wreg free
  4813                           
  4814                           ;EEPROM.c: 120: addr++;
  4815  002FAA  0100               	movlb	0	; () banked
  4816  002FAC  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4817  002FAE  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4818                           
  4819                           ; BSR set to: 0
  4820                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  4821  002FB0  0E00               	movlw	0
  4822  002FB2  0100               	movlb	0	; () banked
  4823  002FB4  6FB8               	movwf	(logRun@i+1)& (0+255),b
  4824  002FB6  0E00               	movlw	0
  4825  002FB8  6FB7               	movwf	logRun@i& (0+255),b
  4826                           
  4827                           ; BSR set to: 0
  4828  002FBA  0100               	movlb	0	; () banked
  4829  002FBC  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4830  002FBE  D008               	goto	l7935
  4831  002FC0  0100               	movlb	0	; () banked
  4832  002FC2  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4833  002FC4  E128               	bnz	l948
  4834  002FC6  0E07               	movlw	7
  4835  002FC8  0100               	movlb	0	; () banked
  4836  002FCA  5DB7               	subwf	logRun@i& (0+255),w,b
  4837  002FCC  B0D8               	btfsc	status,0,c
  4838  002FCE  D023               	goto	l948
  4839  002FD0                     l7935:
  4840                           
  4841                           ; BSR set to: 0
  4842                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  4843  002FD0  90D8               	bcf	status,0,c
  4844  002FD2  0100               	movlb	0	; () banked
  4845  002FD4  35B7               	rlcf	logRun@i& (0+255),w,b
  4846  002FD6  6ED9               	movwf	fsr2l,c
  4847  002FD8  0100               	movlb	0	; () banked
  4848  002FDA  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  4849  002FDC  6EDA               	movwf	fsr2h,c
  4850  002FDE  0E0E               	movlw	low _startTime
  4851  002FE0  26D9               	addwf	fsr2l,f,c
  4852  002FE2  0E01               	movlw	high _startTime
  4853  002FE4  22DA               	addwfc	fsr2h,f,c
  4854  002FE6  50DF               	movf	indf2,w,c
  4855  002FE8  0100               	movlb	0	; () banked
  4856  002FEA  6FB5               	movwf	logRun@byte_i& (0+255),b
  4857                           
  4858                           ; BSR set to: 0
  4859                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  4860  002FEC  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4861  002FF0  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4862  002FF4  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  4863  002FF8  ECB5  F019         	call	_EEPROM_write	;wreg free
  4864                           
  4865                           ;EEPROM.c: 126: addr++;
  4866  002FFC  0100               	movlb	0	; () banked
  4867  002FFE  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4868  003000  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4869                           
  4870                           ; BSR set to: 0
  4871  003002  0100               	movlb	0	; () banked
  4872  003004  4BB7               	infsnz	logRun@i& (0+255),f,b
  4873  003006  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  4874                           
  4875                           ; BSR set to: 0
  4876  003008  0100               	movlb	0	; () banked
  4877  00300A  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4878  00300C  D7E1               	goto	l7935
  4879  00300E  0100               	movlb	0	; () banked
  4880  003010  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4881  003012  E101               	bnz	u6760
  4882  003014  D7D8               	goto	L4
  4883  003016                     u6760:
  4884  003016                     l948:
  4885                           
  4886                           ; BSR set to: 0
  4887                           ;EEPROM.c: 127: }
  4888                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  4889  003016  C0F8  F0B6         	movff	_total_time,logRun@byte11
  4890                           
  4891                           ; BSR set to: 0
  4892                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  4893  00301A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4894  00301E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4895  003022  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  4896  003026  ECB5  F019         	call	_EEPROM_write	;wreg free
  4897  00302A  0012               	return		;funcret
  4898  00302C                     __end_of_logRun:
  4899                           	opt stack 0
  4900                           tblptru	equ	0xFF8
  4901                           tblptrh	equ	0xFF7
  4902                           tblptrl	equ	0xFF6
  4903                           tablat	equ	0xFF5
  4904                           prodh	equ	0xFF4
  4905                           prodl	equ	0xFF3
  4906                           intcon	equ	0xFF2
  4907                           intcon2	equ	0xFF1
  4908                           intcon3	equ	0xFF0
  4909                           postinc0	equ	0xFEE
  4910                           wreg	equ	0xFE8
  4911                           postdec1	equ	0xFE5
  4912                           fsr1l	equ	0xFE1
  4913                           indf2	equ	0xFDF
  4914                           postinc2	equ	0xFDE
  4915                           postdec2	equ	0xFDD
  4916                           fsr2h	equ	0xFDA
  4917                           fsr2l	equ	0xFD9
  4918                           status	equ	0xFD8
  4919                           
  4920 ;; *************** function _EEPROM_write *****************
  4921 ;; Defined at:
  4922 ;;		line 32 in file "EEPROM.c"
  4923 ;; Parameters:    Size  Location     Type
  4924 ;;  address         2   43[BANK0 ] unsigned short 
  4925 ;;  data            1   45[BANK0 ] unsigned char 
  4926 ;; Auto vars:     Size  Location     Type
  4927 ;;  i               1   48[BANK0 ] unsigned char 
  4928 ;;  i               1   47[BANK0 ] unsigned char 
  4929 ;; Return value:  Size  Location     Type
  4930 ;;                  1    wreg      void 
  4931 ;; Registers used:
  4932 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4933 ;; Tracked objects:
  4934 ;;		On entry : 0/0
  4935 ;;		On exit  : 0/0
  4936 ;;		Unchanged: 0/0
  4937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4938 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4939 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4940 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4941 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4942 ;;Total ram usage:        6 bytes
  4943 ;; Hardware stack levels used:    1
  4944 ;; Hardware stack levels required when called:   10
  4945 ;; This function calls:
  4946 ;;		_EEPROM_read
  4947 ;;		_lcdInst
  4948 ;;		_printf
  4949 ;; This function is called by:
  4950 ;;		_Loading
  4951 ;;		_logRun
  4952 ;; This function uses a non-reentrant model
  4953 ;;
  4954                           
  4955                           	psect	text13
  4956  00336A                     __ptext13:
  4957                           	opt stack 0
  4958  00336A                     _EEPROM_write:
  4959                           	opt stack 18
  4960                           
  4961                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  4962                           
  4963                           ;incstack = 0
  4964  00336A  84A6               	bsf	4006,2,c	;volatile
  4965                           
  4966                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  4967  00336C  0100               	movlb	0	; () banked
  4968  00336E  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  4969  003370  6EAA               	movwf	4010,c	;volatile
  4970                           
  4971                           ; BSR set to: 0
  4972                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  4973  003372  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;EEPROM.c: 39: EEDATA = data;
  4977  003376  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  4978                           
  4979                           ; BSR set to: 0
  4980                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  4981  00337A  9EA6               	bcf	4006,7,c	;volatile
  4982                           
  4983                           ; BSR set to: 0
  4984                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  4985  00337C  9CA6               	bcf	4006,6,c	;volatile
  4986                           
  4987                           ; BSR set to: 0
  4988                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  4989  00337E  9EF2               	bcf	intcon,7,c	;volatile
  4990                           
  4991                           ;EEPROM.c: 45: EECON2 = 0x55;
  4992  003380  0E55               	movlw	85
  4993  003382  6EA7               	movwf	4007,c	;volatile
  4994                           
  4995                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  4996  003384  0EAA               	movlw	170
  4997  003386  6EA7               	movwf	4007,c	;volatile
  4998                           
  4999                           ; BSR set to: 0
  5000                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  5001  003388  82A6               	bsf	4006,1,c	;volatile
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  5005  00338A  8EF2               	bsf	intcon,7,c	;volatile
  5006  00338C                     l926:
  5007  00338C  A8A1               	btfss	4001,4,c	;volatile
  5008  00338E  D7FE               	goto	l926
  5009                           
  5010                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  5011  003390  98A1               	bcf	4001,4,c	;volatile
  5012                           
  5013                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  5014  003392  94A6               	bcf	4006,2,c	;volatile
  5015                           
  5016                           ;EEPROM.c: 57: if(debug){
  5017  003394  5065               	movf	_debug,w,c
  5018  003396  1066               	iorwf	_debug+1,w,c
  5019  003398  B4D8               	btfsc	status,2,c
  5020  00339A  0012               	return	
  5021                           
  5022                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5023  00339C  0E01               	movlw	1
  5024  00339E  EC9B  F023         	call	_lcdInst
  5025  0033A2  0E68               	movlw	104
  5026  0033A4  0100               	movlb	0	; () banked
  5027  0033A6  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5028  0033A8  0EE4               	movlw	228
  5029  0033AA                     u7087:
  5030  0033AA  2EE8               	decfsz	wreg,f,c
  5031  0033AC  D7FE               	bra	u7087
  5032  0033AE  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5033  0033B0  D7FC               	bra	u7087
  5034  0033B2  F000               	nop	
  5035                           
  5036                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  5037  0033B4  0E80               	movlw	128
  5038  0033B6  EC9B  F023         	call	_lcdInst
  5039                           
  5040                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  5041  0033BA  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  5042  0033BE  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  5043  0033C2  EC5E  F023         	call	_EEPROM_read	;wreg free
  5044  0033C6  0100               	movlb	0	; () banked
  5045  0033C8  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  5046  0033CA  A4D8               	btfss	status,2,c
  5047  0033CC  D024               	goto	l6021
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  5051  0033CE  0E54               	movlw	low STR_66
  5052  0033D0  0100               	movlb	0	; () banked
  5053  0033D2  6F8E               	movwf	printf@f& (0+255),b
  5054  0033D4  0EFB               	movlw	high STR_66
  5055  0033D6  0100               	movlb	0	; () banked
  5056  0033D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  5057  0033DA  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  5058  0033DE  0100               	movlb	0	; () banked
  5059  0033E0  6B91               	clrf	(?_printf+3)& (0+255),b
  5060  0033E2  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  5061  0033E6  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  5062  0033EA  ECB8  F008         	call	_printf	;wreg free
  5063                           
  5064                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  5065  0033EE  0E00               	movlw	0
  5066  0033F0  0100               	movlb	0	; () banked
  5067  0033F2  6FAF               	movwf	EEPROM_write@i& (0+255),b
  5068  0033F4                     l6013:
  5069                           
  5070                           ; BSR set to: 0
  5071  0033F4  0E63               	movlw	99
  5072  0033F6  0100               	movlb	0	; () banked
  5073  0033F8  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  5074  0033FA  D001               	goto	l6017
  5075  0033FC  0012               	return	
  5076  0033FE                     l6017:
  5077                           
  5078                           ; BSR set to: 0
  5079  0033FE  0E68               	movlw	104
  5080  003400  0100               	movlb	0	; () banked
  5081  003402  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5082  003404  0EE4               	movlw	228
  5083  003406                     u7097:
  5084  003406  2EE8               	decfsz	wreg,f,c
  5085  003408  D7FE               	bra	u7097
  5086  00340A  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5087  00340C  D7FC               	bra	u7097
  5088  00340E  F000               	nop	
  5089  003410  0100               	movlb	0	; () banked
  5090  003412  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  5091  003414  D7EF               	goto	l6013
  5092  003416                     l6021:
  5093                           
  5094                           ; BSR set to: 0
  5095                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  5096  003416  0EBD               	movlw	low STR_67
  5097  003418  0100               	movlb	0	; () banked
  5098  00341A  6F8E               	movwf	printf@f& (0+255),b
  5099  00341C  0EFF               	movlw	high STR_67
  5100  00341E  0100               	movlb	0	; () banked
  5101  003420  6F8F               	movwf	(printf@f+1)& (0+255),b
  5102  003422  ECB8  F008         	call	_printf	;wreg free
  5103  003426  0E00               	movlw	0
  5104  003428  0100               	movlb	0	; () banked
  5105  00342A  6FB0               	movwf	EEPROM_write@i_1322& (0+255),b
  5106  00342C                     l6025:
  5107                           
  5108                           ; BSR set to: 0
  5109  00342C  0E63               	movlw	99
  5110  00342E  0100               	movlb	0	; () banked
  5111  003430  65B0               	cpfsgt	EEPROM_write@i_1322& (0+255),b
  5112  003432  D001               	goto	l6029
  5113  003434  0012               	return	
  5114  003436                     l6029:
  5115                           
  5116                           ; BSR set to: 0
  5117  003436  0E68               	movlw	104
  5118  003438  0100               	movlb	0	; () banked
  5119  00343A  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5120  00343C  0EE4               	movlw	228
  5121  00343E                     u7107:
  5122  00343E  2EE8               	decfsz	wreg,f,c
  5123  003440  D7FE               	bra	u7107
  5124  003442  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5125  003444  D7FC               	bra	u7107
  5126  003446  F000               	nop	
  5127  003448  0100               	movlb	0	; () banked
  5128  00344A  2BB0               	incf	EEPROM_write@i_1322& (0+255),f,b
  5129  00344C  D7EF               	goto	l6025
  5130  00344E                     __end_of_EEPROM_write:
  5131                           	opt stack 0
  5132                           tblptru	equ	0xFF8
  5133                           tblptrh	equ	0xFF7
  5134                           tblptrl	equ	0xFF6
  5135                           tablat	equ	0xFF5
  5136                           prodh	equ	0xFF4
  5137                           prodl	equ	0xFF3
  5138                           intcon	equ	0xFF2
  5139                           intcon2	equ	0xFF1
  5140                           intcon3	equ	0xFF0
  5141                           postinc0	equ	0xFEE
  5142                           wreg	equ	0xFE8
  5143                           postdec1	equ	0xFE5
  5144                           fsr1l	equ	0xFE1
  5145                           indf2	equ	0xFDF
  5146                           postinc2	equ	0xFDE
  5147                           postdec2	equ	0xFDD
  5148                           fsr2h	equ	0xFDA
  5149                           fsr2l	equ	0xFD9
  5150                           status	equ	0xFD8
  5151                           
  5152 ;; *************** function _EEPROM_read *****************
  5153 ;; Defined at:
  5154 ;;		line 68 in file "EEPROM.c"
  5155 ;; Parameters:    Size  Location     Type
  5156 ;;  address         2    0[BANK0 ] unsigned short 
  5157 ;; Auto vars:     Size  Location     Type
  5158 ;;		None
  5159 ;; Return value:  Size  Location     Type
  5160 ;;                  1    wreg      unsigned char 
  5161 ;; Registers used:
  5162 ;;		wreg, status,2
  5163 ;; Tracked objects:
  5164 ;;		On entry : 0/0
  5165 ;;		On exit  : 0/0
  5166 ;;		Unchanged: 0/0
  5167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5168 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5171 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5172 ;;Total ram usage:        2 bytes
  5173 ;; Hardware stack levels used:    1
  5174 ;; Hardware stack levels required when called:    7
  5175 ;; This function calls:
  5176 ;;		Nothing
  5177 ;; This function is called by:
  5178 ;;		_Loading
  5179 ;;		_EEPROM_write
  5180 ;;		_logRun
  5181 ;; This function uses a non-reentrant model
  5182 ;;
  5183                           
  5184                           	psect	text14
  5185  0046BC                     __ptext14:
  5186                           	opt stack 0
  5187  0046BC                     _EEPROM_read:
  5188                           	opt stack 20
  5189                           
  5190                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  5191                           
  5192                           ;incstack = 0
  5193  0046BC  0100               	movlb	0	; () banked
  5194  0046BE  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  5195  0046C0  6EAA               	movwf	4010,c	;volatile
  5196                           
  5197                           ; BSR set to: 0
  5198                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  5199  0046C2  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  5200                           
  5201                           ; BSR set to: 0
  5202                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  5203  0046C6  9EA6               	bcf	4006,7,c	;volatile
  5204                           
  5205                           ; BSR set to: 0
  5206                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  5207  0046C8  9CA6               	bcf	4006,6,c	;volatile
  5208                           
  5209                           ; BSR set to: 0
  5210                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  5211  0046CA  80A6               	bsf	4006,0,c	;volatile
  5212  0046CC                     l939:
  5213  0046CC  B0A6               	btfsc	4006,0,c	;volatile
  5214  0046CE  D7FE               	goto	l939
  5215                           
  5216                           ;EEPROM.c: 81: return EEDATA;
  5217  0046D0  50A8               	movf	4008,w,c	;volatile
  5218  0046D2  0012               	return	
  5219  0046D4                     __end_of_EEPROM_read:
  5220                           	opt stack 0
  5221                           tblptru	equ	0xFF8
  5222                           tblptrh	equ	0xFF7
  5223                           tblptrl	equ	0xFF6
  5224                           tablat	equ	0xFF5
  5225                           prodh	equ	0xFF4
  5226                           prodl	equ	0xFF3
  5227                           intcon	equ	0xFF2
  5228                           intcon2	equ	0xFF1
  5229                           intcon3	equ	0xFF0
  5230                           postinc0	equ	0xFEE
  5231                           wreg	equ	0xFE8
  5232                           postdec1	equ	0xFE5
  5233                           fsr1l	equ	0xFE1
  5234                           indf2	equ	0xFDF
  5235                           postinc2	equ	0xFDE
  5236                           postdec2	equ	0xFDD
  5237                           fsr2h	equ	0xFDA
  5238                           fsr2l	equ	0xFD9
  5239                           status	equ	0xFD8
  5240                           
  5241 ;; *************** function _initUI *****************
  5242 ;; Defined at:
  5243 ;;		line 62 in file "UI.c"
  5244 ;; Parameters:    Size  Location     Type
  5245 ;;		None
  5246 ;; Auto vars:     Size  Location     Type
  5247 ;;		None
  5248 ;; Return value:  Size  Location     Type
  5249 ;;                  1    wreg      void 
  5250 ;; Registers used:
  5251 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5252 ;; Tracked objects:
  5253 ;;		On entry : 0/0
  5254 ;;		On exit  : 0/0
  5255 ;;		Unchanged: 0/0
  5256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5261 ;;Total ram usage:        0 bytes
  5262 ;; Hardware stack levels used:    1
  5263 ;; Hardware stack levels required when called:   12
  5264 ;; This function calls:
  5265 ;;		_change_state_to_menu_start
  5266 ;;		_loadRTC
  5267 ;; This function is called by:
  5268 ;;		_main
  5269 ;; This function uses a non-reentrant model
  5270 ;;
  5271                           
  5272                           	psect	text15
  5273  0044B6                     __ptext15:
  5274                           	opt stack 0
  5275  0044B6                     _initUI:
  5276                           	opt stack 18
  5277                           
  5278                           ;UI.c: 63: (INTCONbits.GIE = 1);
  5279                           
  5280                           ;incstack = 0
  5281  0044B6  8EF2               	bsf	intcon,7,c	;volatile
  5282                           
  5283                           ;UI.c: 64: machine_state = UI_state;
  5284  0044B8  0E00               	movlw	0
  5285  0044BA  0100               	movlb	0	; () banked
  5286  0044BC  6FFC               	movwf	_machine_state& (0+255),b
  5287                           
  5288                           ;UI.c: 65: logstate = 0;
  5289  0044BE  0E00               	movlw	0
  5290  0044C0  0100               	movlb	0	; () banked
  5291  0044C2  6FF7               	movwf	(_logstate+1)& (0+255),b
  5292  0044C4  0E00               	movlw	0
  5293  0044C6  6FF6               	movwf	_logstate& (0+255),b
  5294                           
  5295                           ; BSR set to: 0
  5296                           ;UI.c: 67: if(RTCflag){
  5297  0044C8  0100               	movlb	0	; () banked
  5298  0044CA  51DE               	movf	_RTCflag& (0+255),w,b
  5299  0044CC  0100               	movlb	0	; () banked
  5300  0044CE  11DF               	iorwf	(_RTCflag+1)& (0+255),w,b
  5301  0044D0  A4D8               	btfss	status,2,c
  5302                           
  5303                           ; BSR set to: 0
  5304                           ;UI.c: 68: loadRTC();
  5305  0044D2  ECA0  F01C         	call	_loadRTC	;wreg free
  5306                           
  5307                           ;UI.c: 69: }
  5308                           ;UI.c: 71: change_state_to_menu_start();
  5309  0044D6  ECA0  F022         	call	_change_state_to_menu_start	;wreg free
  5310                           
  5311                           ;UI.c: 72: firstboot = 1;
  5312  0044DA  0E00               	movlw	0
  5313  0044DC  6E76               	movwf	_firstboot+1,c
  5314  0044DE  0E01               	movlw	1
  5315  0044E0  6E75               	movwf	_firstboot,c
  5316  0044E2  0012               	return		;funcret
  5317  0044E4                     __end_of_initUI:
  5318                           	opt stack 0
  5319                           tblptru	equ	0xFF8
  5320                           tblptrh	equ	0xFF7
  5321                           tblptrl	equ	0xFF6
  5322                           tablat	equ	0xFF5
  5323                           prodh	equ	0xFF4
  5324                           prodl	equ	0xFF3
  5325                           intcon	equ	0xFF2
  5326                           intcon2	equ	0xFF1
  5327                           intcon3	equ	0xFF0
  5328                           postinc0	equ	0xFEE
  5329                           wreg	equ	0xFE8
  5330                           postdec1	equ	0xFE5
  5331                           fsr1l	equ	0xFE1
  5332                           indf2	equ	0xFDF
  5333                           postinc2	equ	0xFDE
  5334                           postdec2	equ	0xFDD
  5335                           fsr2h	equ	0xFDA
  5336                           fsr2l	equ	0xFD9
  5337                           status	equ	0xFD8
  5338                           
  5339 ;; *************** function _loadRTC *****************
  5340 ;; Defined at:
  5341 ;;		line 28 in file "RTC.c"
  5342 ;; Parameters:    Size  Location     Type
  5343 ;;		None
  5344 ;; Auto vars:     Size  Location     Type
  5345 ;;  i               2   22[BANK0 ] int 
  5346 ;; Return value:  Size  Location     Type
  5347 ;;                  1    wreg      void 
  5348 ;; Registers used:
  5349 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5350 ;; Tracked objects:
  5351 ;;		On entry : 0/0
  5352 ;;		On exit  : 0/0
  5353 ;;		Unchanged: 0/0
  5354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5356 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5357 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5358 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5359 ;;Total ram usage:        3 bytes
  5360 ;; Hardware stack levels used:    1
  5361 ;; Hardware stack levels required when called:    9
  5362 ;; This function calls:
  5363 ;;		_I2C_Master_Init
  5364 ;;		_I2C_Master_Start
  5365 ;;		_I2C_Master_Stop
  5366 ;;		_I2C_Master_Write
  5367 ;; This function is called by:
  5368 ;;		_initUI
  5369 ;; This function uses a non-reentrant model
  5370 ;;
  5371                           
  5372                           	psect	text16
  5373  003940                     __ptext16:
  5374                           	opt stack 0
  5375  003940                     _loadRTC:
  5376                           	opt stack 20
  5377                           
  5378                           ;RTC.c: 30: I2C_Master_Init(10000);
  5379                           
  5380                           ;incstack = 0
  5381  003940  0E10               	movlw	16
  5382  003942  0100               	movlb	0	; () banked
  5383  003944  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5384  003946  0E27               	movlw	39
  5385  003948  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5386  00394A  0E00               	movlw	0
  5387  00394C  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5388  00394E  0E00               	movlw	0
  5389  003950  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5390  003952  ECF8  F01E         	call	_I2C_Master_Init	;wreg free
  5391                           
  5392                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5393  003956  9EF2               	bcf	intcon,7,c	;volatile
  5394                           
  5395                           ;RTC.c: 34: I2C_Master_Start();
  5396  003958  ECC1  F023         	call	_I2C_Master_Start	;wreg free
  5397                           
  5398                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5399  00395C  0E00               	movlw	0
  5400  00395E  0100               	movlb	0	; () banked
  5401  003960  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5402  003962  0ED0               	movlw	208
  5403  003964  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5404  003966  ECAF  F023         	call	_I2C_Master_Write	;wreg free
  5405                           
  5406                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5407  00396A  0E00               	movlw	0
  5408  00396C  0100               	movlb	0	; () banked
  5409  00396E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5410  003970  0E00               	movlw	0
  5411  003972  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5412  003974  ECAF  F023         	call	_I2C_Master_Write	;wreg free
  5413                           
  5414                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5415  003978  0E00               	movlw	0
  5416  00397A  0100               	movlb	0	; () banked
  5417  00397C  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5418  00397E  0E00               	movlw	0
  5419  003980  6F96               	movwf	loadRTC@i& (0+255),b
  5420  003982                     l6147:
  5421                           
  5422                           ; BSR set to: 0
  5423  003982  0100               	movlb	0	; () banked
  5424  003984  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5425  003986  D008               	goto	l6151
  5426  003988  0100               	movlb	0	; () banked
  5427  00398A  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5428  00398C  E11B               	bnz	l6157
  5429  00398E  0E07               	movlw	7
  5430  003990  0100               	movlb	0	; () banked
  5431  003992  5D96               	subwf	loadRTC@i& (0+255),w,b
  5432  003994  B0D8               	btfsc	status,0,c
  5433  003996  D016               	goto	l6157
  5434  003998                     l6151:
  5435                           
  5436                           ; BSR set to: 0
  5437                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5438  003998  0E24               	movlw	low _time
  5439  00399A  0100               	movlb	0	; () banked
  5440  00399C  2596               	addwf	loadRTC@i& (0+255),w,b
  5441  00399E  6ED9               	movwf	fsr2l,c
  5442  0039A0  0E01               	movlw	high _time
  5443  0039A2  0100               	movlb	0	; () banked
  5444  0039A4  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5445  0039A6  6EDA               	movwf	fsr2h,c
  5446  0039A8  50DF               	movf	indf2,w,c
  5447  0039AA  0100               	movlb	0	; () banked
  5448  0039AC  6F95               	movwf	??_loadRTC& (0+255),b
  5449  0039AE  0100               	movlb	0	; () banked
  5450  0039B0  5195               	movf	??_loadRTC& (0+255),w,b
  5451  0039B2  0100               	movlb	0	; () banked
  5452  0039B4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5453  0039B6  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5454  0039B8  ECAF  F023         	call	_I2C_Master_Write	;wreg free
  5455  0039BC  0100               	movlb	0	; () banked
  5456  0039BE  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5457  0039C0  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5458  0039C2  D7DF               	goto	l6147
  5459  0039C4                     l6157:
  5460                           
  5461                           ; BSR set to: 0
  5462                           ;RTC.c: 39: }
  5463                           ;RTC.c: 40: I2C_Master_Stop();
  5464  0039C4  ECBD  F023         	call	_I2C_Master_Stop	;wreg free
  5465                           
  5466                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5467  0039C8  8EF2               	bsf	intcon,7,c	;volatile
  5468  0039CA  0012               	return		;funcret
  5469  0039CC                     __end_of_loadRTC:
  5470                           	opt stack 0
  5471                           tblptru	equ	0xFF8
  5472                           tblptrh	equ	0xFF7
  5473                           tblptrl	equ	0xFF6
  5474                           tablat	equ	0xFF5
  5475                           prodh	equ	0xFF4
  5476                           prodl	equ	0xFF3
  5477                           intcon	equ	0xFF2
  5478                           intcon2	equ	0xFF1
  5479                           intcon3	equ	0xFF0
  5480                           postinc0	equ	0xFEE
  5481                           wreg	equ	0xFE8
  5482                           postdec1	equ	0xFE5
  5483                           fsr1l	equ	0xFE1
  5484                           indf2	equ	0xFDF
  5485                           postinc2	equ	0xFDE
  5486                           postdec2	equ	0xFDD
  5487                           fsr2h	equ	0xFDA
  5488                           fsr2l	equ	0xFD9
  5489                           status	equ	0xFD8
  5490                           
  5491 ;; *************** function _I2C_Master_Init *****************
  5492 ;; Defined at:
  5493 ;;		line 15 in file "I2C.c"
  5494 ;; Parameters:    Size  Location     Type
  5495 ;;  c               4   13[BANK0 ] const unsigned long 
  5496 ;; Auto vars:     Size  Location     Type
  5497 ;;		None
  5498 ;; Return value:  Size  Location     Type
  5499 ;;                  1    wreg      void 
  5500 ;; Registers used:
  5501 ;;		wreg, status,2, status,0, cstack
  5502 ;; Tracked objects:
  5503 ;;		On entry : 0/0
  5504 ;;		On exit  : 0/0
  5505 ;;		Unchanged: 0/0
  5506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5507 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5509 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5510 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5511 ;;Total ram usage:        8 bytes
  5512 ;; Hardware stack levels used:    1
  5513 ;; Hardware stack levels required when called:    8
  5514 ;; This function calls:
  5515 ;;		___lldiv
  5516 ;; This function is called by:
  5517 ;;		_main
  5518 ;;		_loadRTC
  5519 ;; This function uses a non-reentrant model
  5520 ;;
  5521                           
  5522                           	psect	text17
  5523  003DF0                     __ptext17:
  5524                           	opt stack 0
  5525  003DF0                     _I2C_Master_Init:
  5526                           	opt stack 20
  5527                           
  5528                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5529                           
  5530                           ;incstack = 0
  5531  003DF0  0E00               	movlw	0
  5532  003DF2  6EC7               	movwf	4039,c	;volatile
  5533                           
  5534                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5535  003DF4  0E28               	movlw	40
  5536  003DF6  6EC6               	movwf	4038,c	;volatile
  5537                           
  5538                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5539  003DF8  0E00               	movlw	0
  5540  003DFA  6EC5               	movwf	4037,c	;volatile
  5541                           
  5542                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5543  003DFC  0E00               	movlw	0
  5544  003DFE  0100               	movlb	0	; () banked
  5545  003E00  6F80               	movwf	___lldiv@dividend& (0+255),b
  5546  003E02  0E48               	movlw	72
  5547  003E04  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5548  003E06  0EE8               	movlw	232
  5549  003E08  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5550  003E0A  0E01               	movlw	1
  5551  003E0C  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5552  003E0E  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5553  003E12  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5554  003E16  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5555  003E1A  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5556  003E1E  0E02               	movlw	2
  5557  003E20                     u4425:
  5558  003E20  90D8               	bcf	status,0,c
  5559  003E22  0100               	movlb	0	; () banked
  5560  003E24  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5561  003E26  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5562  003E28  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5563  003E2A  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5564  003E2C  2EE8               	decfsz	wreg,f,c
  5565  003E2E  D7F8               	goto	u4425
  5566  003E30  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5567  003E34  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5568  003E38  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5569  003E3C  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5570  003E40  EC51  F01B         	call	___lldiv	;wreg free
  5571  003E44  0100               	movlb	0	; () banked
  5572  003E46  0580               	decf	?___lldiv& (0+255),w,b
  5573  003E48  6EC8               	movwf	4040,c	;volatile
  5574                           
  5575                           ; BSR set to: 0
  5576                           ;I2C.c: 22: TRISC3 = 1;
  5577  003E4A  8694               	bsf	3988,3,c	;volatile
  5578                           
  5579                           ; BSR set to: 0
  5580                           ;I2C.c: 23: TRISC4 = 1;
  5581  003E4C  8894               	bsf	3988,4,c	;volatile
  5582                           
  5583                           ; BSR set to: 0
  5584  003E4E  0012               	return		;funcret
  5585  003E50                     __end_of_I2C_Master_Init:
  5586                           	opt stack 0
  5587                           tblptru	equ	0xFF8
  5588                           tblptrh	equ	0xFF7
  5589                           tblptrl	equ	0xFF6
  5590                           tablat	equ	0xFF5
  5591                           prodh	equ	0xFF4
  5592                           prodl	equ	0xFF3
  5593                           intcon	equ	0xFF2
  5594                           intcon2	equ	0xFF1
  5595                           intcon3	equ	0xFF0
  5596                           postinc0	equ	0xFEE
  5597                           wreg	equ	0xFE8
  5598                           postdec1	equ	0xFE5
  5599                           fsr1l	equ	0xFE1
  5600                           indf2	equ	0xFDF
  5601                           postinc2	equ	0xFDE
  5602                           postdec2	equ	0xFDD
  5603                           fsr2h	equ	0xFDA
  5604                           fsr2l	equ	0xFD9
  5605                           status	equ	0xFD8
  5606                           
  5607 ;; *************** function ___lldiv *****************
  5608 ;; Defined at:
  5609 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5610 ;; Parameters:    Size  Location     Type
  5611 ;;  dividend        4    0[BANK0 ] unsigned long 
  5612 ;;  divisor         4    4[BANK0 ] unsigned long 
  5613 ;; Auto vars:     Size  Location     Type
  5614 ;;  quotient        4    8[BANK0 ] unsigned long 
  5615 ;;  counter         1   12[BANK0 ] unsigned char 
  5616 ;; Return value:  Size  Location     Type
  5617 ;;                  4    0[BANK0 ] unsigned long 
  5618 ;; Registers used:
  5619 ;;		wreg, status,2, status,0
  5620 ;; Tracked objects:
  5621 ;;		On entry : 0/0
  5622 ;;		On exit  : 0/0
  5623 ;;		Unchanged: 0/0
  5624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5625 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5626 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5628 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5629 ;;Total ram usage:       13 bytes
  5630 ;; Hardware stack levels used:    1
  5631 ;; Hardware stack levels required when called:    7
  5632 ;; This function calls:
  5633 ;;		Nothing
  5634 ;; This function is called by:
  5635 ;;		_I2C_Master_Init
  5636 ;; This function uses a non-reentrant model
  5637 ;;
  5638                           
  5639                           	psect	text18
  5640  0036A2                     __ptext18:
  5641                           	opt stack 0
  5642  0036A2                     ___lldiv:
  5643                           	opt stack 20
  5644                           
  5645                           ; BSR set to: 0
  5646                           ;incstack = 0
  5647  0036A2  0E00               	movlw	0
  5648  0036A4  0100               	movlb	0	; () banked
  5649  0036A6  6F88               	movwf	___lldiv@quotient& (0+255),b
  5650  0036A8  0E00               	movlw	0
  5651  0036AA  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5652  0036AC  0E00               	movlw	0
  5653  0036AE  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5654  0036B0  0E00               	movlw	0
  5655  0036B2  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5656                           
  5657                           ; BSR set to: 0
  5658  0036B4  0100               	movlb	0	; () banked
  5659  0036B6  5184               	movf	___lldiv@divisor& (0+255),w,b
  5660  0036B8  0100               	movlb	0	; () banked
  5661  0036BA  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5662  0036BC  0100               	movlb	0	; () banked
  5663  0036BE  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5664  0036C0  0100               	movlb	0	; () banked
  5665  0036C2  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5666  0036C4  B4D8               	btfsc	status,2,c
  5667  0036C6  D042               	goto	l1649
  5668                           
  5669                           ; BSR set to: 0
  5670  0036C8  0E01               	movlw	1
  5671  0036CA  0100               	movlb	0	; () banked
  5672  0036CC  6F8C               	movwf	___lldiv@counter& (0+255),b
  5673  0036CE  D008               	goto	l5591
  5674  0036D0                     l5589:
  5675                           
  5676                           ; BSR set to: 0
  5677  0036D0  0100               	movlb	0	; () banked
  5678  0036D2  90D8               	bcf	status,0,c
  5679  0036D4  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5680  0036D6  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5681  0036D8  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5682  0036DA  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5683  0036DC  0100               	movlb	0	; () banked
  5684  0036DE  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5685  0036E0                     l5591:
  5686                           
  5687                           ; BSR set to: 0
  5688  0036E0  0100               	movlb	0	; () banked
  5689  0036E2  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5690  0036E4  D7F5               	goto	l5589
  5691  0036E6                     l5593:
  5692                           
  5693                           ; BSR set to: 0
  5694  0036E6  0100               	movlb	0	; () banked
  5695  0036E8  90D8               	bcf	status,0,c
  5696  0036EA  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5697  0036EC  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5698  0036EE  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5699  0036F0  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5700                           
  5701                           ; BSR set to: 0
  5702  0036F2  0100               	movlb	0	; () banked
  5703  0036F4  5184               	movf	___lldiv@divisor& (0+255),w,b
  5704  0036F6  0100               	movlb	0	; () banked
  5705  0036F8  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5706  0036FA  0100               	movlb	0	; () banked
  5707  0036FC  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5708  0036FE  0100               	movlb	0	; () banked
  5709  003700  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5710  003702  0100               	movlb	0	; () banked
  5711  003704  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5712  003706  0100               	movlb	0	; () banked
  5713  003708  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5714  00370A  0100               	movlb	0	; () banked
  5715  00370C  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5716  00370E  0100               	movlb	0	; () banked
  5717  003710  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5718  003712  A0D8               	btfss	status,0,c
  5719  003714  D012               	goto	l5601
  5720                           
  5721                           ; BSR set to: 0
  5722  003716  0100               	movlb	0	; () banked
  5723  003718  5184               	movf	___lldiv@divisor& (0+255),w,b
  5724  00371A  0100               	movlb	0	; () banked
  5725  00371C  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5726  00371E  0100               	movlb	0	; () banked
  5727  003720  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5728  003722  0100               	movlb	0	; () banked
  5729  003724  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5730  003726  0100               	movlb	0	; () banked
  5731  003728  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5732  00372A  0100               	movlb	0	; () banked
  5733  00372C  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5734  00372E  0100               	movlb	0	; () banked
  5735  003730  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5736  003732  0100               	movlb	0	; () banked
  5737  003734  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5738                           
  5739                           ; BSR set to: 0
  5740  003736  0100               	movlb	0	; () banked
  5741  003738  8188               	bsf	___lldiv@quotient& (0+255),0,b
  5742  00373A                     l5601:
  5743                           
  5744                           ; BSR set to: 0
  5745  00373A  0100               	movlb	0	; () banked
  5746  00373C  90D8               	bcf	status,0,c
  5747  00373E  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5748  003740  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5749  003742  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5750  003744  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  5751                           
  5752                           ; BSR set to: 0
  5753  003746  0100               	movlb	0	; () banked
  5754  003748  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  5755  00374A  D7CD               	goto	l5593
  5756  00374C                     l1649:
  5757                           
  5758                           ; BSR set to: 0
  5759  00374C  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5760  003750  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5761  003754  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5762  003758  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5763                           
  5764                           ; BSR set to: 0
  5765  00375C  0012               	return		;funcret
  5766  00375E                     __end_of___lldiv:
  5767                           	opt stack 0
  5768                           tblptru	equ	0xFF8
  5769                           tblptrh	equ	0xFF7
  5770                           tblptrl	equ	0xFF6
  5771                           tablat	equ	0xFF5
  5772                           prodh	equ	0xFF4
  5773                           prodl	equ	0xFF3
  5774                           intcon	equ	0xFF2
  5775                           intcon2	equ	0xFF1
  5776                           intcon3	equ	0xFF0
  5777                           postinc0	equ	0xFEE
  5778                           wreg	equ	0xFE8
  5779                           postdec1	equ	0xFE5
  5780                           fsr1l	equ	0xFE1
  5781                           indf2	equ	0xFDF
  5782                           postinc2	equ	0xFDE
  5783                           postdec2	equ	0xFDD
  5784                           fsr2h	equ	0xFDA
  5785                           fsr2l	equ	0xFD9
  5786                           status	equ	0xFD8
  5787                           
  5788 ;; *************** function _change_state_to_menu_start *****************
  5789 ;; Defined at:
  5790 ;;		line 474 in file "UI.c"
  5791 ;; Parameters:    Size  Location     Type
  5792 ;;		None
  5793 ;; Auto vars:     Size  Location     Type
  5794 ;;		None
  5795 ;; Return value:  Size  Location     Type
  5796 ;;                  1    wreg      void 
  5797 ;; Registers used:
  5798 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5799 ;; Tracked objects:
  5800 ;;		On entry : 0/0
  5801 ;;		On exit  : 0/0
  5802 ;;		Unchanged: 0/0
  5803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5808 ;;Total ram usage:        0 bytes
  5809 ;; Hardware stack levels used:    1
  5810 ;; Hardware stack levels required when called:   11
  5811 ;; This function calls:
  5812 ;;		_lcdInst
  5813 ;;		_printRTC
  5814 ;;		_printf
  5815 ;; This function is called by:
  5816 ;;		_initUI
  5817 ;; This function uses a non-reentrant model
  5818 ;;
  5819                           
  5820                           	psect	text19
  5821  004540                     __ptext19:
  5822                           	opt stack 0
  5823  004540                     _change_state_to_menu_start:
  5824                           	opt stack 18
  5825                           
  5826                           ;UI.c: 475: cur_state = 0;
  5827                           
  5828                           ; BSR set to: 0
  5829                           ;incstack = 0
  5830  004540  0E00               	movlw	0
  5831  004542  0100               	movlb	0	; () banked
  5832  004544  6FE1               	movwf	(_cur_state+1)& (0+255),b
  5833  004546  0E00               	movlw	0
  5834  004548  6FE0               	movwf	_cur_state& (0+255),b
  5835                           
  5836                           ; BSR set to: 0
  5837                           ;UI.c: 477: lcdInst(0b10000000);;
  5838  00454A  0E80               	movlw	128
  5839  00454C  EC9B  F023         	call	_lcdInst
  5840                           
  5841                           ;UI.c: 478: printRTC();
  5842  004550  EC94  F00F         	call	_printRTC	;wreg free
  5843                           
  5844                           ;UI.c: 479: lcdInst(0b11000000);;
  5845  004554  0EC0               	movlw	192
  5846  004556  EC9B  F023         	call	_lcdInst
  5847                           
  5848                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  5849  00455A  0E19               	movlw	low STR_30
  5850  00455C  0100               	movlb	0	; () banked
  5851  00455E  6F8E               	movwf	printf@f& (0+255),b
  5852  004560  0EFE               	movlw	high STR_30
  5853  004562  0100               	movlb	0	; () banked
  5854  004564  6F8F               	movwf	(printf@f+1)& (0+255),b
  5855  004566  ECB8  F008         	call	_printf	;wreg free
  5856  00456A  0012               	return		;funcret
  5857  00456C                     __end_of_change_state_to_menu_start:
  5858                           	opt stack 0
  5859                           tblptru	equ	0xFF8
  5860                           tblptrh	equ	0xFF7
  5861                           tblptrl	equ	0xFF6
  5862                           tablat	equ	0xFF5
  5863                           prodh	equ	0xFF4
  5864                           prodl	equ	0xFF3
  5865                           intcon	equ	0xFF2
  5866                           intcon2	equ	0xFF1
  5867                           intcon3	equ	0xFF0
  5868                           postinc0	equ	0xFEE
  5869                           wreg	equ	0xFE8
  5870                           postdec1	equ	0xFE5
  5871                           fsr1l	equ	0xFE1
  5872                           indf2	equ	0xFDF
  5873                           postinc2	equ	0xFDE
  5874                           postdec2	equ	0xFDD
  5875                           fsr2h	equ	0xFDA
  5876                           fsr2l	equ	0xFD9
  5877                           status	equ	0xFD8
  5878                           
  5879 ;; *************** function _initTime *****************
  5880 ;; Defined at:
  5881 ;;		line 17 in file "RTC.c"
  5882 ;; Parameters:    Size  Location     Type
  5883 ;;  s               1    wreg     unsigned char 
  5884 ;;  m               1    0[BANK0 ] unsigned char 
  5885 ;;  h               1    1[BANK0 ] unsigned char 
  5886 ;;  w               1    2[BANK0 ] unsigned char 
  5887 ;;  DD              1    3[BANK0 ] unsigned char 
  5888 ;;  MM              1    4[BANK0 ] unsigned char 
  5889 ;;  YY              1    5[BANK0 ] unsigned char 
  5890 ;; Auto vars:     Size  Location     Type
  5891 ;;  s               1    6[BANK0 ] unsigned char 
  5892 ;; Return value:  Size  Location     Type
  5893 ;;                  1    wreg      void 
  5894 ;; Registers used:
  5895 ;;		wreg
  5896 ;; Tracked objects:
  5897 ;;		On entry : 0/0
  5898 ;;		On exit  : 0/0
  5899 ;;		Unchanged: 0/0
  5900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5901 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5902 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5904 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5905 ;;Total ram usage:        7 bytes
  5906 ;; Hardware stack levels used:    1
  5907 ;; Hardware stack levels required when called:    7
  5908 ;; This function calls:
  5909 ;;		Nothing
  5910 ;; This function is called by:
  5911 ;;		_main
  5912 ;; This function uses a non-reentrant model
  5913 ;;
  5914                           
  5915                           	psect	text20
  5916  00467C                     __ptext20:
  5917                           	opt stack 0
  5918  00467C                     _initTime:
  5919                           	opt stack 23
  5920                           
  5921                           ;incstack = 0
  5922                           ;initTime@s stored from wreg
  5923  00467C  0100               	movlb	0	; () banked
  5924  00467E  6F86               	movwf	initTime@s& (0+255),b
  5925                           
  5926                           ;RTC.c: 19: time[0] = s;
  5927  004680  C086  F124         	movff	initTime@s,_time
  5928                           
  5929                           ;RTC.c: 20: time[1] = m;
  5930  004684  C080  F125         	movff	initTime@m,_time+1
  5931                           
  5932                           ;RTC.c: 21: time[2] = h;
  5933  004688  C081  F126         	movff	initTime@h,_time+2
  5934                           
  5935                           ;RTC.c: 22: time[3] = w;
  5936  00468C  C082  F127         	movff	initTime@w,_time+3
  5937                           
  5938                           ;RTC.c: 23: time[4] = DD;
  5939  004690  C083  F128         	movff	initTime@DD,_time+4
  5940                           
  5941                           ;RTC.c: 24: time[5] = MM;
  5942  004694  C084  F129         	movff	initTime@MM,_time+5
  5943                           
  5944                           ;RTC.c: 25: time[6] = YY;
  5945  004698  C085  F12A         	movff	initTime@YY,_time+6
  5946  00469C  0012               	return		;funcret
  5947  00469E                     __end_of_initTime:
  5948                           	opt stack 0
  5949                           tblptru	equ	0xFF8
  5950                           tblptrh	equ	0xFF7
  5951                           tblptrl	equ	0xFF6
  5952                           tablat	equ	0xFF5
  5953                           prodh	equ	0xFF4
  5954                           prodl	equ	0xFF3
  5955                           intcon	equ	0xFF2
  5956                           intcon2	equ	0xFF1
  5957                           intcon3	equ	0xFF0
  5958                           postinc0	equ	0xFEE
  5959                           wreg	equ	0xFE8
  5960                           postdec1	equ	0xFE5
  5961                           fsr1l	equ	0xFE1
  5962                           indf2	equ	0xFDF
  5963                           postinc2	equ	0xFDE
  5964                           postdec2	equ	0xFDD
  5965                           fsr2h	equ	0xFDA
  5966                           fsr2l	equ	0xFD9
  5967                           status	equ	0xFD8
  5968                           
  5969 ;; *************** function _initLCD *****************
  5970 ;; Defined at:
  5971 ;;		line 48 in file "lcd.c"
  5972 ;; Parameters:    Size  Location     Type
  5973 ;;		None
  5974 ;; Auto vars:     Size  Location     Type
  5975 ;;		None
  5976 ;; Return value:  Size  Location     Type
  5977 ;;                  1    wreg      void 
  5978 ;; Registers used:
  5979 ;;		wreg, status,2, status,0, cstack
  5980 ;; Tracked objects:
  5981 ;;		On entry : 0/0
  5982 ;;		On exit  : 0/0
  5983 ;;		Unchanged: 0/0
  5984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5987 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5988 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5989 ;;Total ram usage:        1 bytes
  5990 ;; Hardware stack levels used:    1
  5991 ;; Hardware stack levels required when called:    9
  5992 ;; This function calls:
  5993 ;;		_lcdInst
  5994 ;; This function is called by:
  5995 ;;		_main
  5996 ;; This function uses a non-reentrant model
  5997 ;;
  5998                           
  5999                           	psect	text21
  6000  00413E                     __ptext21:
  6001                           	opt stack 0
  6002  00413E                     _initLCD:
  6003                           	opt stack 21
  6004                           
  6005                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  6006                           
  6007                           ;incstack = 0
  6008  00413E  0E9C               	movlw	156
  6009  004140  0100               	movlb	0	; () banked
  6010  004142  6F83               	movwf	??_initLCD& (0+255),b
  6011  004144  0ED7               	movlw	215
  6012  004146                     u7117:
  6013  004146  2EE8               	decfsz	wreg,f,c
  6014  004148  D7FE               	bra	u7117
  6015  00414A  2F83               	decfsz	??_initLCD& (0+255),f,b
  6016  00414C  D7FC               	bra	u7117
  6017                           
  6018                           ;lcd.c: 50: lcdInst(0b00110011);
  6019  00414E  0E33               	movlw	51
  6020  004150  EC9B  F023         	call	_lcdInst
  6021                           
  6022                           ;lcd.c: 51: lcdInst(0b00110010);
  6023  004154  0E32               	movlw	50
  6024  004156  EC9B  F023         	call	_lcdInst
  6025                           
  6026                           ;lcd.c: 53: lcdInst(0b00101000);
  6027  00415A  0E28               	movlw	40
  6028  00415C  EC9B  F023         	call	_lcdInst
  6029                           
  6030                           ;lcd.c: 54: lcdInst(0b00001100);
  6031  004160  0E0C               	movlw	12
  6032  004162  EC9B  F023         	call	_lcdInst
  6033                           
  6034                           ;lcd.c: 55: lcdInst(0b00000110);
  6035  004166  0E06               	movlw	6
  6036  004168  EC9B  F023         	call	_lcdInst
  6037                           
  6038                           ;lcd.c: 56: lcdInst(0b00000001);
  6039  00416C  0E01               	movlw	1
  6040  00416E  EC9B  F023         	call	_lcdInst
  6041                           
  6042                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  6043  004172  0E9C               	movlw	156
  6044  004174  0100               	movlb	0	; () banked
  6045  004176  6F83               	movwf	??_initLCD& (0+255),b
  6046  004178  0ED7               	movlw	215
  6047  00417A                     u7127:
  6048  00417A  2EE8               	decfsz	wreg,f,c
  6049  00417C  D7FE               	bra	u7127
  6050  00417E  2F83               	decfsz	??_initLCD& (0+255),f,b
  6051  004180  D7FC               	bra	u7127
  6052  004182  0012               	return		;funcret
  6053  004184                     __end_of_initLCD:
  6054                           	opt stack 0
  6055                           tblptru	equ	0xFF8
  6056                           tblptrh	equ	0xFF7
  6057                           tblptrl	equ	0xFF6
  6058                           tablat	equ	0xFF5
  6059                           prodh	equ	0xFF4
  6060                           prodl	equ	0xFF3
  6061                           intcon	equ	0xFF2
  6062                           intcon2	equ	0xFF1
  6063                           intcon3	equ	0xFF0
  6064                           postinc0	equ	0xFEE
  6065                           wreg	equ	0xFE8
  6066                           postdec1	equ	0xFE5
  6067                           fsr1l	equ	0xFE1
  6068                           indf2	equ	0xFDF
  6069                           postinc2	equ	0xFDE
  6070                           postdec2	equ	0xFDD
  6071                           fsr2h	equ	0xFDA
  6072                           fsr2l	equ	0xFD9
  6073                           status	equ	0xFD8
  6074                           
  6075 ;; *************** function _UI *****************
  6076 ;; Defined at:
  6077 ;;		line 76 in file "UI.c"
  6078 ;; Parameters:    Size  Location     Type
  6079 ;;		None
  6080 ;; Auto vars:     Size  Location     Type
  6081 ;;  i               1   73[BANK0 ] unsigned char 
  6082 ;;  i               1   85[BANK0 ] unsigned char 
  6083 ;;  i               1   84[BANK0 ] unsigned char 
  6084 ;;  i               1   83[BANK0 ] unsigned char 
  6085 ;;  i               1   82[BANK0 ] unsigned char 
  6086 ;;  i               1   81[BANK0 ] unsigned char 
  6087 ;;  i               1   80[BANK0 ] unsigned char 
  6088 ;;  i               1   79[BANK0 ] unsigned char 
  6089 ;;  i               1   78[BANK0 ] unsigned char 
  6090 ;;  i               1   77[BANK0 ] unsigned char 
  6091 ;;  i               1   76[BANK0 ] unsigned char 
  6092 ;;  i               1   75[BANK0 ] unsigned char 
  6093 ;;  i               1   74[BANK0 ] unsigned char 
  6094 ;;  month           4   86[BANK0 ] unsigned char [4]
  6095 ;;  i               1   72[BANK0 ] unsigned char 
  6096 ;; Return value:  Size  Location     Type
  6097 ;;                  1    wreg      void 
  6098 ;; Registers used:
  6099 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6100 ;; Tracked objects:
  6101 ;;		On entry : 0/0
  6102 ;;		On exit  : 0/0
  6103 ;;		Unchanged: 0/0
  6104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6106 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6107 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6108 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6109 ;;Total ram usage:       22 bytes
  6110 ;; Hardware stack levels used:    1
  6111 ;; Hardware stack levels required when called:   11
  6112 ;; This function calls:
  6113 ;;		___awdiv
  6114 ;;		___awmod
  6115 ;;		_change_state_to_menu_12
  6116 ;;		_change_state_to_menu_22
  6117 ;;		_lcdInst
  6118 ;;		_printRTC
  6119 ;;		_printf
  6120 ;;		_strcpy
  6121 ;; This function is called by:
  6122 ;;		_main
  6123 ;; This function uses a non-reentrant model
  6124 ;;
  6125                           
  6126                           	psect	text22
  6127  0008CA                     __ptext22:
  6128                           	opt stack 0
  6129  0008CA                     _UI:
  6130                           	opt stack 19
  6131                           
  6132                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  6133                           
  6134                           ;incstack = 0
  6135  0008CA  0E02               	movlw	2
  6136  0008CC  0100               	movlb	0	; () banked
  6137  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  6138  0008D0  A4D8               	btfss	status,2,c
  6139  0008D2  D075               	goto	l7337
  6140                           
  6141                           ; BSR set to: 0
  6142                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6143  0008D4  0E01               	movlw	1
  6144  0008D6  EC9B  F023         	call	_lcdInst
  6145  0008DA  0E68               	movlw	104
  6146  0008DC  0100               	movlb	0	; () banked
  6147  0008DE  6FC4               	movwf	??_UI& (0+255),b
  6148  0008E0  0EE4               	movlw	228
  6149  0008E2                     u7137:
  6150  0008E2  2EE8               	decfsz	wreg,f,c
  6151  0008E4  D7FE               	bra	u7137
  6152  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6153  0008E8  D7FC               	bra	u7137
  6154  0008EA  F000               	nop	
  6155                           
  6156                           ;UI.c: 79: lcdInst(0b10000000);;
  6157  0008EC  0E80               	movlw	128
  6158  0008EE  EC9B  F023         	call	_lcdInst
  6159                           
  6160                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  6161  0008F2  0EC5               	movlw	low STR_1
  6162  0008F4  0100               	movlb	0	; () banked
  6163  0008F6  6F8E               	movwf	printf@f& (0+255),b
  6164  0008F8  0EFB               	movlw	high STR_1
  6165  0008FA  0100               	movlb	0	; () banked
  6166  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6167  0008FE  0E01               	movlw	1
  6168  000900  0100               	movlb	0	; () banked
  6169  000902  25FD               	addwf	_sel& (0+255),w,b
  6170  000904  0100               	movlb	0	; () banked
  6171  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  6172  000908  0100               	movlb	0	; () banked
  6173  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  6174  00090C  0E00               	movlw	0
  6175  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  6176  000910  ECB8  F008         	call	_printf	;wreg free
  6177                           
  6178                           ;UI.c: 81: lcdInst(0b11000000);;
  6179  000914  0EC0               	movlw	192
  6180  000916  EC9B  F023         	call	_lcdInst
  6181                           
  6182                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6183  00091A  0E0E               	movlw	14
  6184  00091C  0100               	movlb	0	; () banked
  6185  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6186  000920  0E10               	movlw	16
  6187  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  6188  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  6189  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6190  00092C  EC04  F01C         	call	___awmod	;wreg free
  6191  000930  C080  F0C6         	movff	?___awmod,_UI$2292
  6192  000934  C081  F0C7         	movff	?___awmod+1,_UI$2292+1
  6193                           
  6194                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6195  000938  0E27               	movlw	low STR_2
  6196  00093A  0100               	movlb	0	; () banked
  6197  00093C  6F8E               	movwf	printf@f& (0+255),b
  6198  00093E  0EFF               	movlw	high STR_2
  6199  000940  0100               	movlb	0	; () banked
  6200  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  6201  000944  0E0E               	movlw	14
  6202  000946  0100               	movlb	0	; () banked
  6203  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6204  00094A  0E10               	movlw	16
  6205  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  6206  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  6207  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6208  000956  EC04  F01C         	call	___awmod	;wreg free
  6209  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  6210  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6211  000962  0E00               	movlw	0
  6212  000964  0100               	movlb	0	; () banked
  6213  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6214  000968  0E3C               	movlw	60
  6215  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  6216  00096C  ECF2  F01A         	call	___awdiv	;wreg free
  6217  000970  C086  F090         	movff	?___awdiv,?_printf+2
  6218  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  6219  000978  C0C6  F080         	movff	_UI$2292,___awmod@dividend
  6220  00097C  C0C7  F081         	movff	_UI$2292+1,___awmod@dividend+1
  6221  000980  0E00               	movlw	0
  6222  000982  0100               	movlb	0	; () banked
  6223  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6224  000986  0E3C               	movlw	60
  6225  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  6226  00098A  EC04  F01C         	call	___awmod	;wreg free
  6227  00098E  C080  F092         	movff	?___awmod,?_printf+4
  6228  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  6229  000996  ECB8  F008         	call	_printf	;wreg free
  6230                           
  6231                           ;UI.c: 83: machine_state = UI_state;
  6232  00099A  0E00               	movlw	0
  6233  00099C  0100               	movlb	0	; () banked
  6234  00099E  6FFC               	movwf	_machine_state& (0+255),b
  6235  0009A0                     l180:
  6236  0009A0  A281               	btfss	3969,1,c	;volatile
  6237  0009A2  D7FE               	goto	l180
  6238                           
  6239                           ;UI.c: 86: }
  6240                           ;UI.c: 87: if(cur_state==12){
  6241  0009A4  0E0C               	movlw	12
  6242  0009A6  0100               	movlb	0	; () banked
  6243  0009A8  19E0               	xorwf	_cur_state& (0+255),w,b
  6244  0009AA  0100               	movlb	0	; () banked
  6245  0009AC  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6246  0009AE  A4D8               	btfss	status,2,c
  6247  0009B0  D003               	goto	l7335
  6248                           
  6249                           ; BSR set to: 0
  6250                           ;UI.c: 88: change_state_to_menu_12();
  6251  0009B2  ECFF  F020         	call	_change_state_to_menu_12	;wreg free
  6252                           
  6253                           ;UI.c: 89: }
  6254  0009B6  D3D5               	goto	l7657
  6255  0009B8                     l7335:
  6256                           
  6257                           ;UI.c: 90: else{
  6258                           ;UI.c: 91: change_state_to_menu_22();
  6259  0009B8  ECE3  F020         	call	_change_state_to_menu_22	;wreg free
  6260                           
  6261                           ;UI.c: 92: }
  6262                           ;UI.c: 93: }
  6263  0009BC  D3D2               	goto	l7657
  6264  0009BE                     l7337:
  6265                           
  6266                           ;UI.c: 94: else if(cur_state == 0){
  6267  0009BE  0100               	movlb	0	; () banked
  6268  0009C0  51E0               	movf	_cur_state& (0+255),w,b
  6269  0009C2  0100               	movlb	0	; () banked
  6270  0009C4  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6271  0009C6  A4D8               	btfss	status,2,c
  6272  0009C8  D3CC               	goto	l7657
  6273                           
  6274                           ; BSR set to: 0
  6275                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  6276  0009CA  0E00               	movlw	0
  6277  0009CC  0100               	movlb	0	; () banked
  6278  0009CE  6FC8               	movwf	UI@i& (0+255),b
  6279  0009D0                     l7341:
  6280                           
  6281                           ; BSR set to: 0
  6282  0009D0  0E63               	movlw	99
  6283  0009D2  0100               	movlb	0	; () banked
  6284  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  6285  0009D6  D001               	goto	l7345
  6286  0009D8  D00C               	goto	l7349
  6287  0009DA                     l7345:
  6288                           
  6289                           ; BSR set to: 0
  6290  0009DA  0E68               	movlw	104
  6291  0009DC  0100               	movlb	0	; () banked
  6292  0009DE  6FC4               	movwf	??_UI& (0+255),b
  6293  0009E0  0EE4               	movlw	228
  6294  0009E2                     u7147:
  6295  0009E2  2EE8               	decfsz	wreg,f,c
  6296  0009E4  D7FE               	bra	u7147
  6297  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6298  0009E8  D7FC               	bra	u7147
  6299  0009EA  F000               	nop	
  6300  0009EC  0100               	movlb	0	; () banked
  6301  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  6302  0009F0  D7EF               	goto	l7341
  6303  0009F2                     l7349:
  6304                           
  6305                           ; BSR set to: 0
  6306                           ;UI.c: 96: if(cur_state == 0){
  6307  0009F2  0100               	movlb	0	; () banked
  6308  0009F4  51E0               	movf	_cur_state& (0+255),w,b
  6309  0009F6  0100               	movlb	0	; () banked
  6310  0009F8  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6311  0009FA  A4D8               	btfss	status,2,c
  6312  0009FC  D3B2               	goto	l7657
  6313                           
  6314                           ; BSR set to: 0
  6315                           ;UI.c: 97: printRTC();
  6316  0009FE  EC94  F00F         	call	_printRTC	;wreg free
  6317                           
  6318                           ;UI.c: 98: }
  6319                           ;UI.c: 99: }
  6320                           ;UI.c: 100: while(logstate){
  6321  000A02  D3AF               	goto	l7657
  6322  000A04                     l7353:
  6323                           
  6324                           ;UI.c: 102: if(!log_completion){
  6325  000A04  0100               	movlb	0	; () banked
  6326  000A06  51E8               	movf	_log_completion& (0+255),w,b
  6327  000A08  0100               	movlb	0	; () banked
  6328  000A0A  11E9               	iorwf	(_log_completion+1)& (0+255),w,b
  6329  000A0C  A4D8               	btfss	status,2,c
  6330  000A0E  D041               	goto	l7383
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6334  000A10  0E01               	movlw	1
  6335  000A12  EC9B  F023         	call	_lcdInst
  6336  000A16  0E68               	movlw	104
  6337  000A18  0100               	movlb	0	; () banked
  6338  000A1A  6FC4               	movwf	??_UI& (0+255),b
  6339  000A1C  0EE4               	movlw	228
  6340  000A1E                     u7157:
  6341  000A1E  2EE8               	decfsz	wreg,f,c
  6342  000A20  D7FE               	bra	u7157
  6343  000A22  2FC4               	decfsz	??_UI& (0+255),f,b
  6344  000A24  D7FC               	bra	u7157
  6345  000A26  F000               	nop	
  6346                           
  6347                           ;UI.c: 104: lcdInst(0b10000000);;
  6348  000A28  0E80               	movlw	128
  6349  000A2A  EC9B  F023         	call	_lcdInst
  6350                           
  6351                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  6352  000A2E  0EB3               	movlw	low STR_3
  6353  000A30  0100               	movlb	0	; () banked
  6354  000A32  6F8E               	movwf	printf@f& (0+255),b
  6355  000A34  0EFB               	movlw	high STR_3
  6356  000A36  0100               	movlb	0	; () banked
  6357  000A38  6F8F               	movwf	(printf@f+1)& (0+255),b
  6358  000A3A  C0E6  F090         	movff	_log,?_printf+2
  6359  000A3E  C0E7  F091         	movff	_log+1,?_printf+3
  6360  000A42  ECB8  F008         	call	_printf	;wreg free
  6361                           
  6362                           ;UI.c: 106: lcdInst(0b11000000);;
  6363  000A46  0EC0               	movlw	192
  6364  000A48  EC9B  F023         	call	_lcdInst
  6365                           
  6366                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  6367  000A4C  0E4A               	movlw	low STR_4
  6368  000A4E  0100               	movlb	0	; () banked
  6369  000A50  6F8E               	movwf	printf@f& (0+255),b
  6370  000A52  0EFE               	movlw	high STR_4
  6371  000A54  0100               	movlb	0	; () banked
  6372  000A56  6F8F               	movwf	(printf@f+1)& (0+255),b
  6373  000A58  ECB8  F008         	call	_printf	;wreg free
  6374  000A5C                     l7367:
  6375  000A5C  0E00               	movlw	0
  6376  000A5E  0100               	movlb	0	; () banked
  6377  000A60  6FC9               	movwf	UI@i_409& (0+255),b
  6378  000A62                     l7369:
  6379                           
  6380                           ; BSR set to: 0
  6381  000A62  0E63               	movlw	99
  6382  000A64  0100               	movlb	0	; () banked
  6383  000A66  65C9               	cpfsgt	UI@i_409& (0+255),b
  6384  000A68  D001               	goto	l7373
  6385  000A6A  D00C               	goto	l7377
  6386  000A6C                     l7373:
  6387                           
  6388                           ; BSR set to: 0
  6389  000A6C  0E68               	movlw	104
  6390  000A6E  0100               	movlb	0	; () banked
  6391  000A70  6FC4               	movwf	??_UI& (0+255),b
  6392  000A72  0EE4               	movlw	228
  6393  000A74                     u7167:
  6394  000A74  2EE8               	decfsz	wreg,f,c
  6395  000A76  D7FE               	bra	u7167
  6396  000A78  2FC4               	decfsz	??_UI& (0+255),f,b
  6397  000A7A  D7FC               	bra	u7167
  6398  000A7C  F000               	nop	
  6399  000A7E  0100               	movlb	0	; () banked
  6400  000A80  2BC9               	incf	UI@i_409& (0+255),f,b
  6401  000A82  D7EF               	goto	l7369
  6402  000A84                     l7377:
  6403                           
  6404                           ; BSR set to: 0
  6405  000A84  0100               	movlb	0	; () banked
  6406  000A86  51F6               	movf	_logstate& (0+255),w,b
  6407  000A88  0100               	movlb	0	; () banked
  6408  000A8A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6409  000A8C  B4D8               	btfsc	status,2,c
  6410  000A8E  0012               	return	
  6411  000A90  D7E5               	goto	l7367
  6412  000A92                     l7383:
  6413                           
  6414                           ; BSR set to: 0
  6415                           ;UI.c: 111: else{
  6416                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6417  000A92  0E01               	movlw	1
  6418  000A94  EC9B  F023         	call	_lcdInst
  6419  000A98  0E68               	movlw	104
  6420  000A9A  0100               	movlb	0	; () banked
  6421  000A9C  6FC4               	movwf	??_UI& (0+255),b
  6422  000A9E  0EE4               	movlw	228
  6423  000AA0                     u7177:
  6424  000AA0  2EE8               	decfsz	wreg,f,c
  6425  000AA2  D7FE               	bra	u7177
  6426  000AA4  2FC4               	decfsz	??_UI& (0+255),f,b
  6427  000AA6  D7FC               	bra	u7177
  6428  000AA8  F000               	nop	
  6429                           
  6430                           ;UI.c: 113: lcdInst(0b10000000);;
  6431  000AAA  0E80               	movlw	128
  6432  000AAC  EC9B  F023         	call	_lcdInst
  6433                           
  6434                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  6435  000AB0  0EB3               	movlw	low STR_3
  6436  000AB2  0100               	movlb	0	; () banked
  6437  000AB4  6F8E               	movwf	printf@f& (0+255),b
  6438  000AB6  0EFB               	movlw	high STR_3
  6439  000AB8  0100               	movlb	0	; () banked
  6440  000ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
  6441  000ABC  C0E6  F090         	movff	_log,?_printf+2
  6442  000AC0  C0E7  F091         	movff	_log+1,?_printf+3
  6443  000AC4  ECB8  F008         	call	_printf	;wreg free
  6444                           
  6445                           ;UI.c: 115: lcdInst(0b11000000);;
  6446  000AC8  0EC0               	movlw	192
  6447  000ACA  EC9B  F023         	call	_lcdInst
  6448                           
  6449                           ;UI.c: 116: printf("PAUSE < | BACK >");
  6450  000ACE  0E08               	movlw	low STR_6
  6451  000AD0  0100               	movlb	0	; () banked
  6452  000AD2  6F8E               	movwf	printf@f& (0+255),b
  6453  000AD4  0EFE               	movlw	high STR_6
  6454  000AD6  0100               	movlb	0	; () banked
  6455  000AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6456  000ADA  ECB8  F008         	call	_printf	;wreg free
  6457                           
  6458                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6459  000ADE  0E00               	movlw	0
  6460  000AE0  0100               	movlb	0	; () banked
  6461  000AE2  6FCA               	movwf	UI@i_412& (0+255),b
  6462  000AE4                     l7397:
  6463                           
  6464                           ; BSR set to: 0
  6465  000AE4  0E63               	movlw	99
  6466  000AE6  0100               	movlb	0	; () banked
  6467  000AE8  65CA               	cpfsgt	UI@i_412& (0+255),b
  6468  000AEA  D001               	goto	l7401
  6469  000AEC  D00C               	goto	l7405
  6470  000AEE                     l7401:
  6471                           
  6472                           ; BSR set to: 0
  6473  000AEE  0E68               	movlw	104
  6474  000AF0  0100               	movlb	0	; () banked
  6475  000AF2  6FC4               	movwf	??_UI& (0+255),b
  6476  000AF4  0EE4               	movlw	228
  6477  000AF6                     u7187:
  6478  000AF6  2EE8               	decfsz	wreg,f,c
  6479  000AF8  D7FE               	bra	u7187
  6480  000AFA  2FC4               	decfsz	??_UI& (0+255),f,b
  6481  000AFC  D7FC               	bra	u7187
  6482  000AFE  F000               	nop	
  6483  000B00  0100               	movlb	0	; () banked
  6484  000B02  2BCA               	incf	UI@i_412& (0+255),f,b
  6485  000B04  D7EF               	goto	l7397
  6486  000B06                     l7405:
  6487                           
  6488                           ; BSR set to: 0
  6489  000B06  0100               	movlb	0	; () banked
  6490  000B08  51F6               	movf	_logstate& (0+255),w,b
  6491  000B0A  0100               	movlb	0	; () banked
  6492  000B0C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6493  000B0E  B4D8               	btfsc	status,2,c
  6494  000B10  0012               	return	
  6495                           
  6496                           ; BSR set to: 0
  6497                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6498                           
  6499                           ; BSR set to: 0
  6500                           
  6501                           ; BSR set to: 0
  6502  000B12  0E00               	movlw	0
  6503  000B14  0100               	movlb	0	; () banked
  6504  000B16  6FCB               	movwf	UI@i_413& (0+255),b
  6505  000B18                     l7411:
  6506                           
  6507                           ; BSR set to: 0
  6508  000B18  0E63               	movlw	99
  6509  000B1A  0100               	movlb	0	; () banked
  6510  000B1C  65CB               	cpfsgt	UI@i_413& (0+255),b
  6511  000B1E  D001               	goto	l7415
  6512  000B20  D00C               	goto	l7419
  6513  000B22                     l7415:
  6514                           
  6515                           ; BSR set to: 0
  6516  000B22  0E68               	movlw	104
  6517  000B24  0100               	movlb	0	; () banked
  6518  000B26  6FC4               	movwf	??_UI& (0+255),b
  6519  000B28  0EE4               	movlw	228
  6520  000B2A                     u7197:
  6521  000B2A  2EE8               	decfsz	wreg,f,c
  6522  000B2C  D7FE               	bra	u7197
  6523  000B2E  2FC4               	decfsz	??_UI& (0+255),f,b
  6524  000B30  D7FC               	bra	u7197
  6525  000B32  F000               	nop	
  6526  000B34  0100               	movlb	0	; () banked
  6527  000B36  2BCB               	incf	UI@i_413& (0+255),f,b
  6528  000B38  D7EF               	goto	l7411
  6529  000B3A                     l7419:
  6530                           
  6531                           ; BSR set to: 0
  6532  000B3A  0100               	movlb	0	; () banked
  6533  000B3C  51F6               	movf	_logstate& (0+255),w,b
  6534  000B3E  0100               	movlb	0	; () banked
  6535  000B40  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6536  000B42  B4D8               	btfsc	status,2,c
  6537  000B44  0012               	return	
  6538                           
  6539                           ; BSR set to: 0
  6540                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6541                           
  6542                           ; BSR set to: 0
  6543                           
  6544                           ; BSR set to: 0
  6545  000B46  0E01               	movlw	1
  6546  000B48  EC9B  F023         	call	_lcdInst
  6547  000B4C  0E68               	movlw	104
  6548  000B4E  0100               	movlb	0	; () banked
  6549  000B50  6FC4               	movwf	??_UI& (0+255),b
  6550  000B52  0EE4               	movlw	228
  6551  000B54                     u7207:
  6552  000B54  2EE8               	decfsz	wreg,f,c
  6553  000B56  D7FE               	bra	u7207
  6554  000B58  2FC4               	decfsz	??_UI& (0+255),f,b
  6555  000B5A  D7FC               	bra	u7207
  6556  000B5C  F000               	nop	
  6557                           
  6558                           ;UI.c: 122: lcdInst(0b10000000);;
  6559  000B5E  0E80               	movlw	128
  6560  000B60  EC9B  F023         	call	_lcdInst
  6561                           
  6562                           ;UI.c: 123: printf("START:");
  6563  000B64  0EC4               	movlw	low STR_7
  6564  000B66  0100               	movlb	0	; () banked
  6565  000B68  6F8E               	movwf	printf@f& (0+255),b
  6566  000B6A  0EFF               	movlw	high STR_7
  6567  000B6C  0100               	movlb	0	; () banked
  6568  000B6E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6569  000B70  ECB8  F008         	call	_printf	;wreg free
  6570                           
  6571                           ;UI.c: 124: lcdInst(0b11000000);;
  6572  000B74  0EC0               	movlw	192
  6573  000B76  EC9B  F023         	call	_lcdInst
  6574                           
  6575                           ;UI.c: 125: char month[] = "MMM";
  6576  000B7A  C12F  F0D6         	movff	UI@F3225,UI@month
  6577  000B7E  C130  F0D7         	movff	UI@F3225+1,UI@month+1
  6578  000B82  C131  F0D8         	movff	UI@F3225+2,UI@month+2
  6579  000B86  C132  F0D9         	movff	UI@F3225+3,UI@month+3
  6580                           
  6581                           ;UI.c: 126: switch(log_startTime[5]){
  6582  000B8A  D0C3               	goto	l7463
  6583  000B8C                     l7435:
  6584                           
  6585                           ;UI.c: 128: strcpy(month, "JAN");
  6586  000B8C  0ED6               	movlw	low UI@month
  6587  000B8E  0100               	movlb	0	; () banked
  6588  000B90  6F80               	movwf	strcpy@to& (0+255),b
  6589  000B92  0E00               	movlw	high UI@month
  6590  000B94  0100               	movlb	0	; () banked
  6591  000B96  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6592  000B98  0EDB               	movlw	low STR_8
  6593  000B9A  0100               	movlb	0	; () banked
  6594  000B9C  6F82               	movwf	strcpy@from& (0+255),b
  6595  000B9E  0EFF               	movlw	high STR_8
  6596  000BA0  0100               	movlb	0	; () banked
  6597  000BA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6598  000BA4  EC1B  F021         	call	_strcpy	;wreg free
  6599                           
  6600                           ;UI.c: 129: break;
  6601  000BA8  D0E6               	goto	l7465
  6602  000BAA                     l7437:
  6603                           
  6604                           ;UI.c: 131: strcpy(month, "FEB");
  6605  000BAA  0ED6               	movlw	low UI@month
  6606  000BAC  0100               	movlb	0	; () banked
  6607  000BAE  6F80               	movwf	strcpy@to& (0+255),b
  6608  000BB0  0E00               	movlw	high UI@month
  6609  000BB2  0100               	movlb	0	; () banked
  6610  000BB4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6611  000BB6  0ECB               	movlw	low STR_9
  6612  000BB8  0100               	movlb	0	; () banked
  6613  000BBA  6F82               	movwf	strcpy@from& (0+255),b
  6614  000BBC  0EFF               	movlw	high STR_9
  6615  000BBE  0100               	movlb	0	; () banked
  6616  000BC0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6617  000BC2  EC1B  F021         	call	_strcpy	;wreg free
  6618                           
  6619                           ;UI.c: 132: break;
  6620  000BC6  D0D7               	goto	l7465
  6621  000BC8                     l7439:
  6622                           
  6623                           ;UI.c: 134: strcpy(month, "MAR");
  6624  000BC8  0ED6               	movlw	low UI@month
  6625  000BCA  0100               	movlb	0	; () banked
  6626  000BCC  6F80               	movwf	strcpy@to& (0+255),b
  6627  000BCE  0E00               	movlw	high UI@month
  6628  000BD0  0100               	movlb	0	; () banked
  6629  000BD2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6630  000BD4  0EE7               	movlw	low STR_10
  6631  000BD6  0100               	movlb	0	; () banked
  6632  000BD8  6F82               	movwf	strcpy@from& (0+255),b
  6633  000BDA  0EFF               	movlw	high STR_10
  6634  000BDC  0100               	movlb	0	; () banked
  6635  000BDE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6636  000BE0  EC1B  F021         	call	_strcpy	;wreg free
  6637                           
  6638                           ;UI.c: 135: break;
  6639  000BE4  D0C8               	goto	l7465
  6640  000BE6                     l7441:
  6641                           
  6642                           ;UI.c: 137: strcpy(month, "APR");
  6643  000BE6  0ED6               	movlw	low UI@month
  6644  000BE8  0100               	movlb	0	; () banked
  6645  000BEA  6F80               	movwf	strcpy@to& (0+255),b
  6646  000BEC  0E00               	movlw	high UI@month
  6647  000BEE  0100               	movlb	0	; () banked
  6648  000BF0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6649  000BF2  0EEB               	movlw	low STR_11
  6650  000BF4  0100               	movlb	0	; () banked
  6651  000BF6  6F82               	movwf	strcpy@from& (0+255),b
  6652  000BF8  0EFF               	movlw	high STR_11
  6653  000BFA  0100               	movlb	0	; () banked
  6654  000BFC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6655  000BFE  EC1B  F021         	call	_strcpy	;wreg free
  6656                           
  6657                           ;UI.c: 138: break;
  6658  000C02  D0B9               	goto	l7465
  6659  000C04                     l7443:
  6660                           
  6661                           ;UI.c: 140: strcpy(month, "MAY");
  6662  000C04  0ED6               	movlw	low UI@month
  6663  000C06  0100               	movlb	0	; () banked
  6664  000C08  6F80               	movwf	strcpy@to& (0+255),b
  6665  000C0A  0E00               	movlw	high UI@month
  6666  000C0C  0100               	movlb	0	; () banked
  6667  000C0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6668  000C10  0EFB               	movlw	low STR_12
  6669  000C12  0100               	movlb	0	; () banked
  6670  000C14  6F82               	movwf	strcpy@from& (0+255),b
  6671  000C16  0EFF               	movlw	high STR_12
  6672  000C18  0100               	movlb	0	; () banked
  6673  000C1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6674  000C1C  EC1B  F021         	call	_strcpy	;wreg free
  6675                           
  6676                           ;UI.c: 141: break;
  6677  000C20  D0AA               	goto	l7465
  6678  000C22                     l7445:
  6679                           
  6680                           ;UI.c: 143: strcpy(month, "JUN");
  6681  000C22  0ED6               	movlw	low UI@month
  6682  000C24  0100               	movlb	0	; () banked
  6683  000C26  6F80               	movwf	strcpy@to& (0+255),b
  6684  000C28  0E00               	movlw	high UI@month
  6685  000C2A  0100               	movlb	0	; () banked
  6686  000C2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6687  000C2E  0EDF               	movlw	low STR_13
  6688  000C30  0100               	movlb	0	; () banked
  6689  000C32  6F82               	movwf	strcpy@from& (0+255),b
  6690  000C34  0EFF               	movlw	high STR_13
  6691  000C36  0100               	movlb	0	; () banked
  6692  000C38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6693  000C3A  EC1B  F021         	call	_strcpy	;wreg free
  6694                           
  6695                           ;UI.c: 144: break;
  6696  000C3E  D09B               	goto	l7465
  6697  000C40                     l7447:
  6698                           
  6699                           ;UI.c: 146: strcpy(month, "JUL");
  6700  000C40  0ED6               	movlw	low UI@month
  6701  000C42  0100               	movlb	0	; () banked
  6702  000C44  6F80               	movwf	strcpy@to& (0+255),b
  6703  000C46  0E00               	movlw	high UI@month
  6704  000C48  0100               	movlb	0	; () banked
  6705  000C4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6706  000C4C  0ED7               	movlw	low STR_14
  6707  000C4E  0100               	movlb	0	; () banked
  6708  000C50  6F82               	movwf	strcpy@from& (0+255),b
  6709  000C52  0EFF               	movlw	high STR_14
  6710  000C54  0100               	movlb	0	; () banked
  6711  000C56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6712  000C58  EC1B  F021         	call	_strcpy	;wreg free
  6713                           
  6714                           ;UI.c: 147: break;
  6715  000C5C  D08C               	goto	l7465
  6716  000C5E                     l7449:
  6717                           
  6718                           ;UI.c: 149: strcpy(month, "AUG");
  6719  000C5E  0ED6               	movlw	low UI@month
  6720  000C60  0100               	movlb	0	; () banked
  6721  000C62  6F80               	movwf	strcpy@to& (0+255),b
  6722  000C64  0E00               	movlw	high UI@month
  6723  000C66  0100               	movlb	0	; () banked
  6724  000C68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6725  000C6A  0ED3               	movlw	low STR_15
  6726  000C6C  0100               	movlb	0	; () banked
  6727  000C6E  6F82               	movwf	strcpy@from& (0+255),b
  6728  000C70  0EFF               	movlw	high STR_15
  6729  000C72  0100               	movlb	0	; () banked
  6730  000C74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6731  000C76  EC1B  F021         	call	_strcpy	;wreg free
  6732                           
  6733                           ;UI.c: 150: break;
  6734  000C7A  D07D               	goto	l7465
  6735  000C7C                     l7451:
  6736                           
  6737                           ;UI.c: 152: strcpy(month, "SEP");
  6738  000C7C  0ED6               	movlw	low UI@month
  6739  000C7E  0100               	movlb	0	; () banked
  6740  000C80  6F80               	movwf	strcpy@to& (0+255),b
  6741  000C82  0E00               	movlw	high UI@month
  6742  000C84  0100               	movlb	0	; () banked
  6743  000C86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6744  000C88  0EE3               	movlw	low STR_16
  6745  000C8A  0100               	movlb	0	; () banked
  6746  000C8C  6F82               	movwf	strcpy@from& (0+255),b
  6747  000C8E  0EFF               	movlw	high STR_16
  6748  000C90  0100               	movlb	0	; () banked
  6749  000C92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6750  000C94  EC1B  F021         	call	_strcpy	;wreg free
  6751                           
  6752                           ;UI.c: 153: break;
  6753  000C98  D06E               	goto	l7465
  6754  000C9A                     l7453:
  6755                           
  6756                           ;UI.c: 155: strcpy(month, "OCT");
  6757  000C9A  0ED6               	movlw	low UI@month
  6758  000C9C  0100               	movlb	0	; () banked
  6759  000C9E  6F80               	movwf	strcpy@to& (0+255),b
  6760  000CA0  0E00               	movlw	high UI@month
  6761  000CA2  0100               	movlb	0	; () banked
  6762  000CA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6763  000CA6  0EF3               	movlw	low STR_17
  6764  000CA8  0100               	movlb	0	; () banked
  6765  000CAA  6F82               	movwf	strcpy@from& (0+255),b
  6766  000CAC  0EFF               	movlw	high STR_17
  6767  000CAE  0100               	movlb	0	; () banked
  6768  000CB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6769  000CB2  EC1B  F021         	call	_strcpy	;wreg free
  6770                           
  6771                           ;UI.c: 156: break;
  6772  000CB6  D05F               	goto	l7465
  6773  000CB8                     l7455:
  6774                           
  6775                           ;UI.c: 158: strcpy(month, "NOV");
  6776  000CB8  0ED6               	movlw	low UI@month
  6777  000CBA  0100               	movlb	0	; () banked
  6778  000CBC  6F80               	movwf	strcpy@to& (0+255),b
  6779  000CBE  0E00               	movlw	high UI@month
  6780  000CC0  0100               	movlb	0	; () banked
  6781  000CC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6782  000CC4  0EF7               	movlw	low STR_18
  6783  000CC6  0100               	movlb	0	; () banked
  6784  000CC8  6F82               	movwf	strcpy@from& (0+255),b
  6785  000CCA  0EFF               	movlw	high STR_18
  6786  000CCC  0100               	movlb	0	; () banked
  6787  000CCE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6788  000CD0  EC1B  F021         	call	_strcpy	;wreg free
  6789                           
  6790                           ;UI.c: 159: break;
  6791  000CD4  D050               	goto	l7465
  6792  000CD6                     l7457:
  6793                           
  6794                           ;UI.c: 161: strcpy(month, "DEC");
  6795  000CD6  0ED6               	movlw	low UI@month
  6796  000CD8  0100               	movlb	0	; () banked
  6797  000CDA  6F80               	movwf	strcpy@to& (0+255),b
  6798  000CDC  0E00               	movlw	high UI@month
  6799  000CDE  0100               	movlb	0	; () banked
  6800  000CE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6801  000CE2  0ECF               	movlw	low STR_19
  6802  000CE4  0100               	movlb	0	; () banked
  6803  000CE6  6F82               	movwf	strcpy@from& (0+255),b
  6804  000CE8  0EFF               	movlw	high STR_19
  6805  000CEA  0100               	movlb	0	; () banked
  6806  000CEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6807  000CEE  EC1B  F021         	call	_strcpy	;wreg free
  6808                           
  6809                           ;UI.c: 162: break;
  6810  000CF2  D041               	goto	l7465
  6811  000CF4                     l7459:
  6812                           
  6813                           ;UI.c: 164: strcpy(month, "ERR");
  6814  000CF4  0ED6               	movlw	low UI@month
  6815  000CF6  0100               	movlb	0	; () banked
  6816  000CF8  6F80               	movwf	strcpy@to& (0+255),b
  6817  000CFA  0E00               	movlw	high UI@month
  6818  000CFC  0100               	movlb	0	; () banked
  6819  000CFE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6820  000D00  0EEF               	movlw	low STR_20
  6821  000D02  0100               	movlb	0	; () banked
  6822  000D04  6F82               	movwf	strcpy@from& (0+255),b
  6823  000D06  0EFF               	movlw	high STR_20
  6824  000D08  0100               	movlb	0	; () banked
  6825  000D0A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6826  000D0C  EC1B  F021         	call	_strcpy	;wreg free
  6827                           
  6828                           ;UI.c: 166: }
  6829                           
  6830                           ;UI.c: 165: break;
  6831  000D10  D032               	goto	l7465
  6832  000D12                     l7463:
  6833  000D12  EE21  F00A         	lfsr	2,_log_startTime+10
  6834  000D16  CFDE F0C4          	movff	postinc2,??_UI
  6835  000D1A  CFDD F0C5          	movff	postdec2,??_UI+1
  6836                           
  6837                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6838                           ; Switch size 1, requested type "space"
  6839                           ; Number of cases is 1, Range of values is 0 to 0
  6840                           ; switch strategies available:
  6841                           ; Name         Instructions Cycles
  6842                           ; simple_byte            4     3 (average)
  6843                           ;	Chosen strategy is simple_byte
  6844  000D1E  0100               	movlb	0	; () banked
  6845  000D20  51C5               	movf	(??_UI+1)& (0+255),w,b
  6846  000D22  0A00               	xorlw	0	; case 0
  6847  000D24  A4D8               	btfss	status,2,c
  6848  000D26  D7E6               	goto	l7459
  6849                           
  6850                           ; BSR set to: 0
  6851                           ; Switch size 1, requested type "space"
  6852                           ; Number of cases is 12, Range of values is 1 to 12
  6853                           ; switch strategies available:
  6854                           ; Name         Instructions Cycles
  6855                           ; simple_byte           37    19 (average)
  6856                           ;	Chosen strategy is simple_byte
  6857  000D28  0100               	movlb	0	; () banked
  6858  000D2A  51C4               	movf	??_UI& (0+255),w,b
  6859  000D2C  0A01               	xorlw	1	; case 1
  6860  000D2E  B4D8               	btfsc	status,2,c
  6861  000D30  D72D               	goto	l7435
  6862  000D32  0A03               	xorlw	3	; case 2
  6863  000D34  B4D8               	btfsc	status,2,c
  6864  000D36  D739               	goto	l7437
  6865  000D38  0A01               	xorlw	1	; case 3
  6866  000D3A  B4D8               	btfsc	status,2,c
  6867  000D3C  D745               	goto	l7439
  6868  000D3E  0A07               	xorlw	7	; case 4
  6869  000D40  B4D8               	btfsc	status,2,c
  6870  000D42  D751               	goto	l7441
  6871  000D44  0A01               	xorlw	1	; case 5
  6872  000D46  B4D8               	btfsc	status,2,c
  6873  000D48  D75D               	goto	l7443
  6874  000D4A  0A03               	xorlw	3	; case 6
  6875  000D4C  B4D8               	btfsc	status,2,c
  6876  000D4E  D769               	goto	l7445
  6877  000D50  0A01               	xorlw	1	; case 7
  6878  000D52  B4D8               	btfsc	status,2,c
  6879  000D54  D775               	goto	l7447
  6880  000D56  0A0F               	xorlw	15	; case 8
  6881  000D58  B4D8               	btfsc	status,2,c
  6882  000D5A  D781               	goto	l7449
  6883  000D5C  0A01               	xorlw	1	; case 9
  6884  000D5E  B4D8               	btfsc	status,2,c
  6885  000D60  D78D               	goto	l7451
  6886  000D62  0A03               	xorlw	3	; case 10
  6887  000D64  B4D8               	btfsc	status,2,c
  6888  000D66  D799               	goto	l7453
  6889  000D68  0A01               	xorlw	1	; case 11
  6890  000D6A  B4D8               	btfsc	status,2,c
  6891  000D6C  D7A5               	goto	l7455
  6892  000D6E  0A07               	xorlw	7	; case 12
  6893  000D70  B4D8               	btfsc	status,2,c
  6894  000D72  D7B1               	goto	l7457
  6895  000D74  D7BF               	goto	l7459
  6896  000D76                     l7465:
  6897                           
  6898                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  6899  000D76  0E3C               	movlw	low STR_21
  6900  000D78  0100               	movlb	0	; () banked
  6901  000D7A  6F8E               	movwf	printf@f& (0+255),b
  6902  000D7C  0EFB               	movlw	high STR_21
  6903  000D7E  0100               	movlb	0	; () banked
  6904  000D80  6F8F               	movwf	(printf@f+1)& (0+255),b
  6905  000D82  C108  F090         	movff	_log_startTime+8,?_printf+2
  6906  000D86  C109  F091         	movff	_log_startTime+9,?_printf+3
  6907  000D8A  0ED6               	movlw	low UI@month
  6908  000D8C  0100               	movlb	0	; () banked
  6909  000D8E  6F92               	movwf	(?_printf+4)& (0+255),b
  6910  000D90  0E00               	movlw	high UI@month
  6911  000D92  0100               	movlb	0	; () banked
  6912  000D94  6F93               	movwf	(?_printf+5)& (0+255),b
  6913  000D96  C104  F094         	movff	_log_startTime+4,?_printf+6
  6914  000D9A  C105  F095         	movff	_log_startTime+5,?_printf+7
  6915  000D9E  C102  F096         	movff	_log_startTime+2,?_printf+8
  6916  000DA2  C103  F097         	movff	_log_startTime+3,?_printf+9
  6917  000DA6  C100  F098         	movff	_log_startTime,?_printf+10
  6918  000DAA  C101  F099         	movff	_log_startTime+1,?_printf+11
  6919  000DAE  ECB8  F008         	call	_printf	;wreg free
  6920                           
  6921                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6922  000DB2  0E00               	movlw	0
  6923  000DB4  0100               	movlb	0	; () banked
  6924  000DB6  6FCC               	movwf	UI@i_431& (0+255),b
  6925  000DB8                     l7469:
  6926                           
  6927                           ; BSR set to: 0
  6928  000DB8  0E63               	movlw	99
  6929  000DBA  0100               	movlb	0	; () banked
  6930  000DBC  65CC               	cpfsgt	UI@i_431& (0+255),b
  6931  000DBE  D001               	goto	l7473
  6932  000DC0  D00C               	goto	l7477
  6933  000DC2                     l7473:
  6934                           
  6935                           ; BSR set to: 0
  6936  000DC2  0E68               	movlw	104
  6937  000DC4  0100               	movlb	0	; () banked
  6938  000DC6  6FC4               	movwf	??_UI& (0+255),b
  6939  000DC8  0EE4               	movlw	228
  6940  000DCA                     u7217:
  6941  000DCA  2EE8               	decfsz	wreg,f,c
  6942  000DCC  D7FE               	bra	u7217
  6943  000DCE  2FC4               	decfsz	??_UI& (0+255),f,b
  6944  000DD0  D7FC               	bra	u7217
  6945  000DD2  F000               	nop	
  6946  000DD4  0100               	movlb	0	; () banked
  6947  000DD6  2BCC               	incf	UI@i_431& (0+255),f,b
  6948  000DD8  D7EF               	goto	l7469
  6949  000DDA                     l7477:
  6950                           
  6951                           ; BSR set to: 0
  6952  000DDA  0100               	movlb	0	; () banked
  6953  000DDC  51F6               	movf	_logstate& (0+255),w,b
  6954  000DDE  0100               	movlb	0	; () banked
  6955  000DE0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6956  000DE2  B4D8               	btfsc	status,2,c
  6957  000DE4  0012               	return	
  6958                           
  6959                           ; BSR set to: 0
  6960                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6961                           
  6962                           ; BSR set to: 0
  6963                           
  6964                           ; BSR set to: 0
  6965  000DE6  0E00               	movlw	0
  6966  000DE8  0100               	movlb	0	; () banked
  6967  000DEA  6FCD               	movwf	UI@i_432& (0+255),b
  6968  000DEC                     l7483:
  6969                           
  6970                           ; BSR set to: 0
  6971  000DEC  0E63               	movlw	99
  6972  000DEE  0100               	movlb	0	; () banked
  6973  000DF0  65CD               	cpfsgt	UI@i_432& (0+255),b
  6974  000DF2  D001               	goto	l7487
  6975  000DF4  D00C               	goto	l7491
  6976  000DF6                     l7487:
  6977                           
  6978                           ; BSR set to: 0
  6979  000DF6  0E68               	movlw	104
  6980  000DF8  0100               	movlb	0	; () banked
  6981  000DFA  6FC4               	movwf	??_UI& (0+255),b
  6982  000DFC  0EE4               	movlw	228
  6983  000DFE                     u7227:
  6984  000DFE  2EE8               	decfsz	wreg,f,c
  6985  000E00  D7FE               	bra	u7227
  6986  000E02  2FC4               	decfsz	??_UI& (0+255),f,b
  6987  000E04  D7FC               	bra	u7227
  6988  000E06  F000               	nop	
  6989  000E08  0100               	movlb	0	; () banked
  6990  000E0A  2BCD               	incf	UI@i_432& (0+255),f,b
  6991  000E0C  D7EF               	goto	l7483
  6992  000E0E                     l7491:
  6993                           
  6994                           ; BSR set to: 0
  6995  000E0E  0100               	movlb	0	; () banked
  6996  000E10  51F6               	movf	_logstate& (0+255),w,b
  6997  000E12  0100               	movlb	0	; () banked
  6998  000E14  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6999  000E16  B4D8               	btfsc	status,2,c
  7000  000E18  0012               	return	
  7001                           
  7002                           ; BSR set to: 0
  7003                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7004                           
  7005                           ; BSR set to: 0
  7006                           
  7007                           ; BSR set to: 0
  7008  000E1A  0E01               	movlw	1
  7009  000E1C  EC9B  F023         	call	_lcdInst
  7010  000E20  0E68               	movlw	104
  7011  000E22  0100               	movlb	0	; () banked
  7012  000E24  6FC4               	movwf	??_UI& (0+255),b
  7013  000E26  0EE4               	movlw	228
  7014  000E28                     u7237:
  7015  000E28  2EE8               	decfsz	wreg,f,c
  7016  000E2A  D7FE               	bra	u7237
  7017  000E2C  2FC4               	decfsz	??_UI& (0+255),f,b
  7018  000E2E  D7FC               	bra	u7237
  7019  000E30  F000               	nop	
  7020                           
  7021                           ;UI.c: 173: lcdInst(0b10000000);;
  7022  000E32  0E80               	movlw	128
  7023  000E34  EC9B  F023         	call	_lcdInst
  7024                           
  7025                           ;UI.c: 174: printf("DURATION:");
  7026  000E38  0E9B               	movlw	low STR_22
  7027  000E3A  0100               	movlb	0	; () banked
  7028  000E3C  6F8E               	movwf	printf@f& (0+255),b
  7029  000E3E  0EFF               	movlw	high STR_22
  7030  000E40  0100               	movlb	0	; () banked
  7031  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
  7032  000E44  ECB8  F008         	call	_printf	;wreg free
  7033                           
  7034                           ;UI.c: 175: lcdInst(0b11000000);;
  7035  000E48  0EC0               	movlw	192
  7036  000E4A  EC9B  F023         	call	_lcdInst
  7037                           
  7038                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7039  000E4E  0E0E               	movlw	14
  7040  000E50  0100               	movlb	0	; () banked
  7041  000E52  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7042  000E54  0E10               	movlw	16
  7043  000E56  6F82               	movwf	___awmod@divisor& (0+255),b
  7044  000E58  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7045  000E5C  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7046  000E60  EC04  F01C         	call	___awmod	;wreg free
  7047  000E64  C080  F0C6         	movff	?___awmod,_UI$2292
  7048  000E68  C081  F0C7         	movff	?___awmod+1,_UI$2292+1
  7049                           
  7050                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7051  000E6C  0E19               	movlw	low STR_23
  7052  000E6E  0100               	movlb	0	; () banked
  7053  000E70  6F8E               	movwf	printf@f& (0+255),b
  7054  000E72  0EFF               	movlw	high STR_23
  7055  000E74  0100               	movlb	0	; () banked
  7056  000E76  6F8F               	movwf	(printf@f+1)& (0+255),b
  7057  000E78  0E0E               	movlw	14
  7058  000E7A  0100               	movlb	0	; () banked
  7059  000E7C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7060  000E7E  0E10               	movlw	16
  7061  000E80  6F82               	movwf	___awmod@divisor& (0+255),b
  7062  000E82  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7063  000E86  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7064  000E8A  EC04  F01C         	call	___awmod	;wreg free
  7065  000E8E  C080  F086         	movff	?___awmod,___awdiv@dividend
  7066  000E92  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7067  000E96  0E00               	movlw	0
  7068  000E98  0100               	movlb	0	; () banked
  7069  000E9A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7070  000E9C  0E3C               	movlw	60
  7071  000E9E  6F88               	movwf	___awdiv@divisor& (0+255),b
  7072  000EA0  ECF2  F01A         	call	___awdiv	;wreg free
  7073  000EA4  C086  F090         	movff	?___awdiv,?_printf+2
  7074  000EA8  C087  F091         	movff	?___awdiv+1,?_printf+3
  7075  000EAC  C0C6  F080         	movff	_UI$2292,___awmod@dividend
  7076  000EB0  C0C7  F081         	movff	_UI$2292+1,___awmod@dividend+1
  7077  000EB4  0E00               	movlw	0
  7078  000EB6  0100               	movlb	0	; () banked
  7079  000EB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7080  000EBA  0E3C               	movlw	60
  7081  000EBC  6F82               	movwf	___awmod@divisor& (0+255),b
  7082  000EBE  EC04  F01C         	call	___awmod	;wreg free
  7083  000EC2  C080  F092         	movff	?___awmod,?_printf+4
  7084  000EC6  C081  F093         	movff	?___awmod+1,?_printf+5
  7085  000ECA  ECB8  F008         	call	_printf	;wreg free
  7086                           
  7087                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7088  000ECE  0E00               	movlw	0
  7089  000ED0  0100               	movlb	0	; () banked
  7090  000ED2  6FCE               	movwf	UI@i_435& (0+255),b
  7091  000ED4                     l7511:
  7092                           
  7093                           ; BSR set to: 0
  7094  000ED4  0E63               	movlw	99
  7095  000ED6  0100               	movlb	0	; () banked
  7096  000ED8  65CE               	cpfsgt	UI@i_435& (0+255),b
  7097  000EDA  D001               	goto	l7515
  7098  000EDC  D00C               	goto	l7519
  7099  000EDE                     l7515:
  7100                           
  7101                           ; BSR set to: 0
  7102  000EDE  0E68               	movlw	104
  7103  000EE0  0100               	movlb	0	; () banked
  7104  000EE2  6FC4               	movwf	??_UI& (0+255),b
  7105  000EE4  0EE4               	movlw	228
  7106  000EE6                     u7247:
  7107  000EE6  2EE8               	decfsz	wreg,f,c
  7108  000EE8  D7FE               	bra	u7247
  7109  000EEA  2FC4               	decfsz	??_UI& (0+255),f,b
  7110  000EEC  D7FC               	bra	u7247
  7111  000EEE  F000               	nop	
  7112  000EF0  0100               	movlb	0	; () banked
  7113  000EF2  2BCE               	incf	UI@i_435& (0+255),f,b
  7114  000EF4  D7EF               	goto	l7511
  7115  000EF6                     l7519:
  7116                           
  7117                           ; BSR set to: 0
  7118  000EF6  0100               	movlb	0	; () banked
  7119  000EF8  51F6               	movf	_logstate& (0+255),w,b
  7120  000EFA  0100               	movlb	0	; () banked
  7121  000EFC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7122  000EFE  B4D8               	btfsc	status,2,c
  7123  000F00  0012               	return	
  7124                           
  7125                           ; BSR set to: 0
  7126                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7127                           
  7128                           ; BSR set to: 0
  7129                           
  7130                           ; BSR set to: 0
  7131  000F02  0E00               	movlw	0
  7132  000F04  0100               	movlb	0	; () banked
  7133  000F06  6FCF               	movwf	UI@i_436& (0+255),b
  7134  000F08                     l7525:
  7135                           
  7136                           ; BSR set to: 0
  7137  000F08  0E63               	movlw	99
  7138  000F0A  0100               	movlb	0	; () banked
  7139  000F0C  65CF               	cpfsgt	UI@i_436& (0+255),b
  7140  000F0E  D001               	goto	l7529
  7141  000F10  D00C               	goto	l7533
  7142  000F12                     l7529:
  7143                           
  7144                           ; BSR set to: 0
  7145  000F12  0E68               	movlw	104
  7146  000F14  0100               	movlb	0	; () banked
  7147  000F16  6FC4               	movwf	??_UI& (0+255),b
  7148  000F18  0EE4               	movlw	228
  7149  000F1A                     u7257:
  7150  000F1A  2EE8               	decfsz	wreg,f,c
  7151  000F1C  D7FE               	bra	u7257
  7152  000F1E  2FC4               	decfsz	??_UI& (0+255),f,b
  7153  000F20  D7FC               	bra	u7257
  7154  000F22  F000               	nop	
  7155  000F24  0100               	movlb	0	; () banked
  7156  000F26  2BCF               	incf	UI@i_436& (0+255),f,b
  7157  000F28  D7EF               	goto	l7525
  7158  000F2A                     l7533:
  7159                           
  7160                           ; BSR set to: 0
  7161  000F2A  0100               	movlb	0	; () banked
  7162  000F2C  51F6               	movf	_logstate& (0+255),w,b
  7163  000F2E  0100               	movlb	0	; () banked
  7164  000F30  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7165  000F32  B4D8               	btfsc	status,2,c
  7166  000F34  0012               	return	
  7167                           
  7168                           ; BSR set to: 0
  7169                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7170                           
  7171                           ; BSR set to: 0
  7172                           
  7173                           ; BSR set to: 0
  7174  000F36  0E01               	movlw	1
  7175  000F38  EC9B  F023         	call	_lcdInst
  7176  000F3C  0E68               	movlw	104
  7177  000F3E  0100               	movlb	0	; () banked
  7178  000F40  6FC4               	movwf	??_UI& (0+255),b
  7179  000F42  0EE4               	movlw	228
  7180  000F44                     u7267:
  7181  000F44  2EE8               	decfsz	wreg,f,c
  7182  000F46  D7FE               	bra	u7267
  7183  000F48  2FC4               	decfsz	??_UI& (0+255),f,b
  7184  000F4A  D7FC               	bra	u7267
  7185  000F4C  F000               	nop	
  7186                           
  7187                           ;UI.c: 182: lcdInst(0b10000000);;
  7188  000F4E  0E80               	movlw	128
  7189  000F50  EC9B  F023         	call	_lcdInst
  7190                           
  7191                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  7192  000F54  0E5E               	movlw	low STR_24
  7193  000F56  0100               	movlb	0	; () banked
  7194  000F58  6F8E               	movwf	printf@f& (0+255),b
  7195  000F5A  0EFD               	movlw	high STR_24
  7196  000F5C  0100               	movlb	0	; () banked
  7197  000F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7198  000F60  ECB8  F008         	call	_printf	;wreg free
  7199                           
  7200                           ;UI.c: 184: lcdInst(0b11000000);;
  7201  000F64  0EC0               	movlw	192
  7202  000F66  EC9B  F023         	call	_lcdInst
  7203                           
  7204                           ;UI.c: 185: printf("NO TAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  7205  000F6A  0E7C               	movlw	low STR_25
  7206  000F6C  0100               	movlb	0	; () banked
  7207  000F6E  6F8E               	movwf	printf@f& (0+255),b
  7208  000F70  0EFB               	movlw	high STR_25
  7209  000F72  0100               	movlb	0	; () banked
  7210  000F74  6F8F               	movwf	(printf@f+1)& (0+255),b
  7211  000F76  C0EE  F090         	movff	_log_count_pop_no_tab,?_printf+2
  7212  000F7A  C0EF  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  7213  000F7E  C0F0  F092         	movff	_log_count_pop_w_tab,?_printf+4
  7214  000F82  C0F1  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  7215  000F86  ECB8  F008         	call	_printf	;wreg free
  7216                           
  7217                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7218  000F8A  0E00               	movlw	0
  7219  000F8C  0100               	movlb	0	; () banked
  7220  000F8E  6FD0               	movwf	UI@i_439& (0+255),b
  7221  000F90                     l7551:
  7222                           
  7223                           ; BSR set to: 0
  7224  000F90  0E63               	movlw	99
  7225  000F92  0100               	movlb	0	; () banked
  7226  000F94  65D0               	cpfsgt	UI@i_439& (0+255),b
  7227  000F96  D001               	goto	l7555
  7228  000F98  D00C               	goto	l7559
  7229  000F9A                     l7555:
  7230                           
  7231                           ; BSR set to: 0
  7232  000F9A  0E68               	movlw	104
  7233  000F9C  0100               	movlb	0	; () banked
  7234  000F9E  6FC4               	movwf	??_UI& (0+255),b
  7235  000FA0  0EE4               	movlw	228
  7236  000FA2                     u7277:
  7237  000FA2  2EE8               	decfsz	wreg,f,c
  7238  000FA4  D7FE               	bra	u7277
  7239  000FA6  2FC4               	decfsz	??_UI& (0+255),f,b
  7240  000FA8  D7FC               	bra	u7277
  7241  000FAA  F000               	nop	
  7242  000FAC  0100               	movlb	0	; () banked
  7243  000FAE  2BD0               	incf	UI@i_439& (0+255),f,b
  7244  000FB0  D7EF               	goto	l7551
  7245  000FB2                     l7559:
  7246                           
  7247                           ; BSR set to: 0
  7248  000FB2  0100               	movlb	0	; () banked
  7249  000FB4  51F6               	movf	_logstate& (0+255),w,b
  7250  000FB6  0100               	movlb	0	; () banked
  7251  000FB8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7252  000FBA  B4D8               	btfsc	status,2,c
  7253  000FBC  0012               	return	
  7254                           
  7255                           ; BSR set to: 0
  7256                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7257                           
  7258                           ; BSR set to: 0
  7259                           
  7260                           ; BSR set to: 0
  7261  000FBE  0E00               	movlw	0
  7262  000FC0  0100               	movlb	0	; () banked
  7263  000FC2  6FD1               	movwf	UI@i_440& (0+255),b
  7264  000FC4                     l7565:
  7265                           
  7266                           ; BSR set to: 0
  7267  000FC4  0E63               	movlw	99
  7268  000FC6  0100               	movlb	0	; () banked
  7269  000FC8  65D1               	cpfsgt	UI@i_440& (0+255),b
  7270  000FCA  D001               	goto	l7569
  7271  000FCC  D00C               	goto	l7573
  7272  000FCE                     l7569:
  7273                           
  7274                           ; BSR set to: 0
  7275  000FCE  0E68               	movlw	104
  7276  000FD0  0100               	movlb	0	; () banked
  7277  000FD2  6FC4               	movwf	??_UI& (0+255),b
  7278  000FD4  0EE4               	movlw	228
  7279  000FD6                     u7287:
  7280  000FD6  2EE8               	decfsz	wreg,f,c
  7281  000FD8  D7FE               	bra	u7287
  7282  000FDA  2FC4               	decfsz	??_UI& (0+255),f,b
  7283  000FDC  D7FC               	bra	u7287
  7284  000FDE  F000               	nop	
  7285  000FE0  0100               	movlb	0	; () banked
  7286  000FE2  2BD1               	incf	UI@i_440& (0+255),f,b
  7287  000FE4  D7EF               	goto	l7565
  7288  000FE6                     l7573:
  7289                           
  7290                           ; BSR set to: 0
  7291  000FE6  0100               	movlb	0	; () banked
  7292  000FE8  51F6               	movf	_logstate& (0+255),w,b
  7293  000FEA  0100               	movlb	0	; () banked
  7294  000FEC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7295  000FEE  B4D8               	btfsc	status,2,c
  7296  000FF0  0012               	return	
  7297                           
  7298                           ; BSR set to: 0
  7299                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7300                           
  7301                           ; BSR set to: 0
  7302                           
  7303                           ; BSR set to: 0
  7304  000FF2  0E01               	movlw	1
  7305  000FF4  EC9B  F023         	call	_lcdInst
  7306  000FF8  0E68               	movlw	104
  7307  000FFA  0100               	movlb	0	; () banked
  7308  000FFC  6FC4               	movwf	??_UI& (0+255),b
  7309  000FFE  0EE4               	movlw	228
  7310  001000                     u7297:
  7311  001000  2EE8               	decfsz	wreg,f,c
  7312  001002  D7FE               	bra	u7297
  7313  001004  2FC4               	decfsz	??_UI& (0+255),f,b
  7314  001006  D7FC               	bra	u7297
  7315  001008  F000               	nop	
  7316                           
  7317                           ;UI.c: 191: lcdInst(0b10000000);;
  7318  00100A  0E80               	movlw	128
  7319  00100C  EC9B  F023         	call	_lcdInst
  7320                           
  7321                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  7322  001010  0E6F               	movlw	low STR_26
  7323  001012  0100               	movlb	0	; () banked
  7324  001014  6F8E               	movwf	printf@f& (0+255),b
  7325  001016  0EFD               	movlw	high STR_26
  7326  001018  0100               	movlb	0	; () banked
  7327  00101A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7328  00101C  ECB8  F008         	call	_printf	;wreg free
  7329                           
  7330                           ;UI.c: 193: lcdInst(0b11000000);;
  7331  001020  0EC0               	movlw	192
  7332  001022  EC9B  F023         	call	_lcdInst
  7333                           
  7334                           ;UI.c: 194: printf("NO LAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7335  001026  0E69               	movlw	low STR_27
  7336  001028  0100               	movlb	0	; () banked
  7337  00102A  6F8E               	movwf	printf@f& (0+255),b
  7338  00102C  0EFB               	movlw	high STR_27
  7339  00102E  0100               	movlb	0	; () banked
  7340  001030  6F8F               	movwf	(printf@f+1)& (0+255),b
  7341  001032  C0EA  F090         	movff	_log_count_can_no_lab,?_printf+2
  7342  001036  C0EB  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7343  00103A  C0EC  F092         	movff	_log_count_can_w_lab,?_printf+4
  7344  00103E  C0ED  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7345  001042  ECB8  F008         	call	_printf	;wreg free
  7346                           
  7347                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7348  001046  0E00               	movlw	0
  7349  001048  0100               	movlb	0	; () banked
  7350  00104A  6FD2               	movwf	UI@i_443& (0+255),b
  7351  00104C                     l7591:
  7352                           
  7353                           ; BSR set to: 0
  7354  00104C  0E63               	movlw	99
  7355  00104E  0100               	movlb	0	; () banked
  7356  001050  65D2               	cpfsgt	UI@i_443& (0+255),b
  7357  001052  D001               	goto	l7595
  7358  001054  D00C               	goto	l7599
  7359  001056                     l7595:
  7360                           
  7361                           ; BSR set to: 0
  7362  001056  0E68               	movlw	104
  7363  001058  0100               	movlb	0	; () banked
  7364  00105A  6FC4               	movwf	??_UI& (0+255),b
  7365  00105C  0EE4               	movlw	228
  7366  00105E                     u7307:
  7367  00105E  2EE8               	decfsz	wreg,f,c
  7368  001060  D7FE               	bra	u7307
  7369  001062  2FC4               	decfsz	??_UI& (0+255),f,b
  7370  001064  D7FC               	bra	u7307
  7371  001066  F000               	nop	
  7372  001068  0100               	movlb	0	; () banked
  7373  00106A  2BD2               	incf	UI@i_443& (0+255),f,b
  7374  00106C  D7EF               	goto	l7591
  7375  00106E                     l7599:
  7376                           
  7377                           ; BSR set to: 0
  7378  00106E  0100               	movlb	0	; () banked
  7379  001070  51F6               	movf	_logstate& (0+255),w,b
  7380  001072  0100               	movlb	0	; () banked
  7381  001074  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7382  001076  B4D8               	btfsc	status,2,c
  7383  001078  0012               	return	
  7384                           
  7385                           ; BSR set to: 0
  7386                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7387                           
  7388                           ; BSR set to: 0
  7389                           
  7390                           ; BSR set to: 0
  7391  00107A  0E00               	movlw	0
  7392  00107C  0100               	movlb	0	; () banked
  7393  00107E  6FD3               	movwf	UI@i_444& (0+255),b
  7394  001080                     l7605:
  7395                           
  7396                           ; BSR set to: 0
  7397  001080  0E63               	movlw	99
  7398  001082  0100               	movlb	0	; () banked
  7399  001084  65D3               	cpfsgt	UI@i_444& (0+255),b
  7400  001086  D001               	goto	l7609
  7401  001088  D00C               	goto	l7613
  7402  00108A                     l7609:
  7403                           
  7404                           ; BSR set to: 0
  7405  00108A  0E68               	movlw	104
  7406  00108C  0100               	movlb	0	; () banked
  7407  00108E  6FC4               	movwf	??_UI& (0+255),b
  7408  001090  0EE4               	movlw	228
  7409  001092                     u7317:
  7410  001092  2EE8               	decfsz	wreg,f,c
  7411  001094  D7FE               	bra	u7317
  7412  001096  2FC4               	decfsz	??_UI& (0+255),f,b
  7413  001098  D7FC               	bra	u7317
  7414  00109A  F000               	nop	
  7415  00109C  0100               	movlb	0	; () banked
  7416  00109E  2BD3               	incf	UI@i_444& (0+255),f,b
  7417  0010A0  D7EF               	goto	l7605
  7418  0010A2                     l7613:
  7419                           
  7420                           ; BSR set to: 0
  7421  0010A2  0100               	movlb	0	; () banked
  7422  0010A4  51F6               	movf	_logstate& (0+255),w,b
  7423  0010A6  0100               	movlb	0	; () banked
  7424  0010A8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7425  0010AA  B4D8               	btfsc	status,2,c
  7426  0010AC  0012               	return	
  7427                           
  7428                           ; BSR set to: 0
  7429                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7430                           
  7431                           ; BSR set to: 0
  7432                           
  7433                           ; BSR set to: 0
  7434  0010AE  0E01               	movlw	1
  7435  0010B0  EC9B  F023         	call	_lcdInst
  7436  0010B4  0E68               	movlw	104
  7437  0010B6  0100               	movlb	0	; () banked
  7438  0010B8  6FC4               	movwf	??_UI& (0+255),b
  7439  0010BA  0EE4               	movlw	228
  7440  0010BC                     u7327:
  7441  0010BC  2EE8               	decfsz	wreg,f,c
  7442  0010BE  D7FE               	bra	u7327
  7443  0010C0  2FC4               	decfsz	??_UI& (0+255),f,b
  7444  0010C2  D7FC               	bra	u7327
  7445  0010C4  F000               	nop	
  7446                           
  7447                           ;UI.c: 200: lcdInst(0b10000000);;
  7448  0010C6  0E80               	movlw	128
  7449  0010C8  EC9B  F023         	call	_lcdInst
  7450                           
  7451                           ;UI.c: 201: printf("-- TOTAL CANS --");
  7452  0010CC  0E80               	movlw	low STR_28
  7453  0010CE  0100               	movlb	0	; () banked
  7454  0010D0  6F8E               	movwf	printf@f& (0+255),b
  7455  0010D2  0EFD               	movlw	high STR_28
  7456  0010D4  0100               	movlb	0	; () banked
  7457  0010D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7458  0010D8  ECB8  F008         	call	_printf	;wreg free
  7459                           
  7460                           ;UI.c: 202: lcdInst(0b11000000);;
  7461  0010DC  0EC0               	movlw	192
  7462  0010DE  EC9B  F023         	call	_lcdInst
  7463                           
  7464                           ;UI.c: 203: printf("%d", log_count_total);
  7465  0010E2  0E79               	movlw	low (STR_27+16)
  7466  0010E4  0100               	movlb	0	; () banked
  7467  0010E6  6F8E               	movwf	printf@f& (0+255),b
  7468  0010E8  0EFB               	movlw	high (STR_27+16)
  7469  0010EA  0100               	movlb	0	; () banked
  7470  0010EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7471  0010EE  C0F2  F090         	movff	_log_count_total,?_printf+2
  7472  0010F2  C0F3  F091         	movff	_log_count_total+1,?_printf+3
  7473  0010F6  ECB8  F008         	call	_printf	;wreg free
  7474                           
  7475                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7476  0010FA  0E00               	movlw	0
  7477  0010FC  0100               	movlb	0	; () banked
  7478  0010FE  6FD4               	movwf	UI@i_447& (0+255),b
  7479  001100                     l7631:
  7480                           
  7481                           ; BSR set to: 0
  7482  001100  0E63               	movlw	99
  7483  001102  0100               	movlb	0	; () banked
  7484  001104  65D4               	cpfsgt	UI@i_447& (0+255),b
  7485  001106  D001               	goto	l7635
  7486  001108  D00C               	goto	l7639
  7487  00110A                     l7635:
  7488                           
  7489                           ; BSR set to: 0
  7490  00110A  0E68               	movlw	104
  7491  00110C  0100               	movlb	0	; () banked
  7492  00110E  6FC4               	movwf	??_UI& (0+255),b
  7493  001110  0EE4               	movlw	228
  7494  001112                     u7337:
  7495  001112  2EE8               	decfsz	wreg,f,c
  7496  001114  D7FE               	bra	u7337
  7497  001116  2FC4               	decfsz	??_UI& (0+255),f,b
  7498  001118  D7FC               	bra	u7337
  7499  00111A  F000               	nop	
  7500  00111C  0100               	movlb	0	; () banked
  7501  00111E  2BD4               	incf	UI@i_447& (0+255),f,b
  7502  001120  D7EF               	goto	l7631
  7503  001122                     l7639:
  7504                           
  7505                           ; BSR set to: 0
  7506  001122  0100               	movlb	0	; () banked
  7507  001124  51F6               	movf	_logstate& (0+255),w,b
  7508  001126  0100               	movlb	0	; () banked
  7509  001128  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7510  00112A  B4D8               	btfsc	status,2,c
  7511  00112C  0012               	return	
  7512                           
  7513                           ; BSR set to: 0
  7514                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7515                           
  7516                           ; BSR set to: 0
  7517                           
  7518                           ; BSR set to: 0
  7519  00112E  0E00               	movlw	0
  7520  001130  0100               	movlb	0	; () banked
  7521  001132  6FD5               	movwf	UI@i_448& (0+255),b
  7522  001134                     l7645:
  7523                           
  7524                           ; BSR set to: 0
  7525  001134  0E63               	movlw	99
  7526  001136  0100               	movlb	0	; () banked
  7527  001138  65D5               	cpfsgt	UI@i_448& (0+255),b
  7528  00113A  D001               	goto	l7649
  7529  00113C  D00C               	goto	l7653
  7530  00113E                     l7649:
  7531                           
  7532                           ; BSR set to: 0
  7533  00113E  0E68               	movlw	104
  7534  001140  0100               	movlb	0	; () banked
  7535  001142  6FC4               	movwf	??_UI& (0+255),b
  7536  001144  0EE4               	movlw	228
  7537  001146                     u7347:
  7538  001146  2EE8               	decfsz	wreg,f,c
  7539  001148  D7FE               	bra	u7347
  7540  00114A  2FC4               	decfsz	??_UI& (0+255),f,b
  7541  00114C  D7FC               	bra	u7347
  7542  00114E  F000               	nop	
  7543  001150  0100               	movlb	0	; () banked
  7544  001152  2BD5               	incf	UI@i_448& (0+255),f,b
  7545  001154  D7EF               	goto	l7645
  7546  001156                     l7653:
  7547                           
  7548                           ; BSR set to: 0
  7549  001156  0100               	movlb	0	; () banked
  7550  001158  51F6               	movf	_logstate& (0+255),w,b
  7551  00115A  0100               	movlb	0	; () banked
  7552  00115C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7553  00115E  B4D8               	btfsc	status,2,c
  7554  001160  0012               	return	
  7555  001162                     l7657:
  7556  001162  0100               	movlb	0	; () banked
  7557  001164  51F6               	movf	_logstate& (0+255),w,b
  7558  001166  0100               	movlb	0	; () banked
  7559  001168  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7560  00116A  B4D8               	btfsc	status,2,c
  7561  00116C  0012               	return	
  7562  00116E  D44A               	goto	l7353
  7563  001170                     __end_of_UI:
  7564                           	opt stack 0
  7565                           tblptru	equ	0xFF8
  7566                           tblptrh	equ	0xFF7
  7567                           tblptrl	equ	0xFF6
  7568                           tablat	equ	0xFF5
  7569                           prodh	equ	0xFF4
  7570                           prodl	equ	0xFF3
  7571                           intcon	equ	0xFF2
  7572                           intcon2	equ	0xFF1
  7573                           intcon3	equ	0xFF0
  7574                           postinc0	equ	0xFEE
  7575                           wreg	equ	0xFE8
  7576                           postdec1	equ	0xFE5
  7577                           fsr1l	equ	0xFE1
  7578                           indf2	equ	0xFDF
  7579                           postinc2	equ	0xFDE
  7580                           postdec2	equ	0xFDD
  7581                           fsr2h	equ	0xFDA
  7582                           fsr2l	equ	0xFD9
  7583                           status	equ	0xFD8
  7584                           
  7585 ;; *************** function _printRTC *****************
  7586 ;; Defined at:
  7587 ;;		line 63 in file "RTC.c"
  7588 ;; Parameters:    Size  Location     Type
  7589 ;;		None
  7590 ;; Auto vars:     Size  Location     Type
  7591 ;;  i               2   66[BANK0 ] int 
  7592 ;;  INT_time       14   46[BANK0 ] int [7]
  7593 ;;  month           4   62[BANK0 ] unsigned char [4]
  7594 ;;  RTC_month       2   60[BANK0 ] int 
  7595 ;; Return value:  Size  Location     Type
  7596 ;;                  1    wreg      void 
  7597 ;; Registers used:
  7598 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7599 ;; Tracked objects:
  7600 ;;		On entry : 0/0
  7601 ;;		On exit  : 0/0
  7602 ;;		Unchanged: 0/0
  7603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7605 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7606 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7607 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7608 ;;Total ram usage:       25 bytes
  7609 ;; Hardware stack levels used:    1
  7610 ;; Hardware stack levels required when called:   10
  7611 ;; This function calls:
  7612 ;;		_getRTC
  7613 ;;		_lcdInst
  7614 ;;		_printf
  7615 ;;		_strcpy
  7616 ;; This function is called by:
  7617 ;;		_UI
  7618 ;;		_change_state_to_menu_start
  7619 ;; This function uses a non-reentrant model
  7620 ;;
  7621                           
  7622                           	psect	text23
  7623  001F28                     __ptext23:
  7624                           	opt stack 0
  7625  001F28                     _printRTC:
  7626                           	opt stack 18
  7627                           
  7628                           ;RTC.c: 64: getRTC();
  7629                           
  7630                           ; BSR set to: 0
  7631                           ;incstack = 0
  7632  001F28  EC2A  F01D         	call	_getRTC	;wreg free
  7633                           
  7634                           ;RTC.c: 65: char month[] = "MMM";
  7635  001F2C  C133  F0BE         	movff	printRTC@F3216,printRTC@month
  7636  001F30  C134  F0BF         	movff	printRTC@F3216+1,printRTC@month+1
  7637  001F34  C135  F0C0         	movff	printRTC@F3216+2,printRTC@month+2
  7638  001F38  C136  F0C1         	movff	printRTC@F3216+3,printRTC@month+3
  7639                           
  7640                           ;RTC.c: 66: int INT_time[7];
  7641                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7642  001F3C  0E00               	movlw	0
  7643  001F3E  0100               	movlb	0	; () banked
  7644  001F40  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7645  001F42  0E00               	movlw	0
  7646  001F44  6FC2               	movwf	printRTC@i& (0+255),b
  7647                           
  7648                           ; BSR set to: 0
  7649  001F46  0100               	movlb	0	; () banked
  7650  001F48  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7651  001F4A  D008               	goto	l5797
  7652  001F4C  0100               	movlb	0	; () banked
  7653  001F4E  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7654  001F50  E146               	bnz	l602
  7655  001F52  0E07               	movlw	7
  7656  001F54  0100               	movlb	0	; () banked
  7657  001F56  5DC2               	subwf	printRTC@i& (0+255),w,b
  7658  001F58  B0D8               	btfsc	status,0,c
  7659  001F5A  D041               	goto	l602
  7660  001F5C                     l5797:
  7661                           
  7662                           ; BSR set to: 0
  7663                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7664  001F5C  0E24               	movlw	low _time
  7665  001F5E  0100               	movlb	0	; () banked
  7666  001F60  25C2               	addwf	printRTC@i& (0+255),w,b
  7667  001F62  6ED9               	movwf	fsr2l,c
  7668  001F64  0E01               	movlw	high _time
  7669  001F66  0100               	movlb	0	; () banked
  7670  001F68  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7671  001F6A  6EDA               	movwf	fsr2h,c
  7672  001F6C  50DF               	movf	indf2,w,c
  7673  001F6E  0100               	movlb	0	; () banked
  7674  001F70  6FAB               	movwf	??_printRTC& (0+255),b
  7675  001F72  0100               	movlb	0	; () banked
  7676  001F74  3BAB               	swapf	??_printRTC& (0+255),f,b
  7677  001F76  0E0F               	movlw	15
  7678  001F78  17AB               	andwf	??_printRTC& (0+255),f,b
  7679  001F7A  0E0F               	movlw	15
  7680  001F7C  0100               	movlb	0	; () banked
  7681  001F7E  17AB               	andwf	??_printRTC& (0+255),f,b
  7682  001F80  0100               	movlb	0	; () banked
  7683  001F82  51AB               	movf	??_printRTC& (0+255),w,b
  7684  001F84  0D0A               	mullw	10
  7685  001F86  0E24               	movlw	low _time
  7686  001F88  0100               	movlb	0	; () banked
  7687  001F8A  25C2               	addwf	printRTC@i& (0+255),w,b
  7688  001F8C  6ED9               	movwf	fsr2l,c
  7689  001F8E  0E01               	movlw	high _time
  7690  001F90  0100               	movlb	0	; () banked
  7691  001F92  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7692  001F94  6EDA               	movwf	fsr2h,c
  7693  001F96  50DF               	movf	indf2,w,c
  7694  001F98  0B0F               	andlw	15
  7695  001F9A  0100               	movlb	0	; () banked
  7696  001F9C  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  7697  001F9E  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  7698  001FA0  50F3               	movf	prodl,w,c
  7699  001FA2  0100               	movlb	0	; () banked
  7700  001FA4  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  7701  001FA6  50F4               	movf	prodh,w,c
  7702  001FA8  0100               	movlb	0	; () banked
  7703  001FAA  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  7704  001FAC  90D8               	bcf	status,0,c
  7705  001FAE  0100               	movlb	0	; () banked
  7706  001FB0  35C2               	rlcf	printRTC@i& (0+255),w,b
  7707  001FB2  6ED9               	movwf	fsr2l,c
  7708  001FB4  0100               	movlb	0	; () banked
  7709  001FB6  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  7710  001FB8  6EDA               	movwf	fsr2h,c
  7711  001FBA  0EAE               	movlw	low printRTC@INT_time
  7712  001FBC  26D9               	addwf	fsr2l,f,c
  7713  001FBE  0E00               	movlw	high printRTC@INT_time
  7714  001FC0  22DA               	addwfc	fsr2h,f,c
  7715  001FC2  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  7716  001FC6  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  7717                           
  7718                           ; BSR set to: 0
  7719  001FCA  0100               	movlb	0	; () banked
  7720  001FCC  4BC2               	infsnz	printRTC@i& (0+255),f,b
  7721  001FCE  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  7722                           
  7723                           ; BSR set to: 0
  7724  001FD0  0100               	movlb	0	; () banked
  7725  001FD2  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7726  001FD4  D7C3               	goto	l5797
  7727  001FD6  0100               	movlb	0	; () banked
  7728  001FD8  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7729  001FDA  E101               	bnz	u4440
  7730  001FDC  D7BA               	goto	L5
  7731  001FDE                     u4440:
  7732  001FDE                     l602:
  7733                           
  7734                           ; BSR set to: 0
  7735                           ;RTC.c: 69: }
  7736                           ;RTC.c: 70: int RTC_month = INT_time[5];
  7737  001FDE  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  7738  001FE2  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  7739                           
  7740                           ;RTC.c: 71: switch(RTC_month){
  7741  001FE6  D0B4               	goto	l5829
  7742  001FE8                     l5803:
  7743                           
  7744                           ; BSR set to: 0
  7745                           ;RTC.c: 73: strcpy(month, "JAN");
  7746  001FE8  0EBE               	movlw	low printRTC@month
  7747  001FEA  0100               	movlb	0	; () banked
  7748  001FEC  6F80               	movwf	strcpy@to& (0+255),b
  7749  001FEE  0E00               	movlw	high printRTC@month
  7750  001FF0  0100               	movlb	0	; () banked
  7751  001FF2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7752  001FF4  0EDB               	movlw	low STR_8
  7753  001FF6  0100               	movlb	0	; () banked
  7754  001FF8  6F82               	movwf	strcpy@from& (0+255),b
  7755  001FFA  0EFF               	movlw	high STR_8
  7756  001FFC  0100               	movlb	0	; () banked
  7757  001FFE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7758  002000  EC1B  F021         	call	_strcpy	;wreg free
  7759                           
  7760                           ;RTC.c: 74: break;
  7761  002004  D0D4               	goto	l5831
  7762  002006                     l5805:
  7763                           
  7764                           ;RTC.c: 76: strcpy(month, "FEB");
  7765  002006  0EBE               	movlw	low printRTC@month
  7766  002008  0100               	movlb	0	; () banked
  7767  00200A  6F80               	movwf	strcpy@to& (0+255),b
  7768  00200C  0E00               	movlw	high printRTC@month
  7769  00200E  0100               	movlb	0	; () banked
  7770  002010  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7771  002012  0ECB               	movlw	low STR_9
  7772  002014  0100               	movlb	0	; () banked
  7773  002016  6F82               	movwf	strcpy@from& (0+255),b
  7774  002018  0EFF               	movlw	high STR_9
  7775  00201A  0100               	movlb	0	; () banked
  7776  00201C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7777  00201E  EC1B  F021         	call	_strcpy	;wreg free
  7778                           
  7779                           ;RTC.c: 77: break;
  7780  002022  D0C5               	goto	l5831
  7781  002024                     l5807:
  7782                           
  7783                           ;RTC.c: 79: strcpy(month, "MAR");
  7784  002024  0EBE               	movlw	low printRTC@month
  7785  002026  0100               	movlb	0	; () banked
  7786  002028  6F80               	movwf	strcpy@to& (0+255),b
  7787  00202A  0E00               	movlw	high printRTC@month
  7788  00202C  0100               	movlb	0	; () banked
  7789  00202E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7790  002030  0EE7               	movlw	low STR_10
  7791  002032  0100               	movlb	0	; () banked
  7792  002034  6F82               	movwf	strcpy@from& (0+255),b
  7793  002036  0EFF               	movlw	high STR_10
  7794  002038  0100               	movlb	0	; () banked
  7795  00203A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7796  00203C  EC1B  F021         	call	_strcpy	;wreg free
  7797                           
  7798                           ;RTC.c: 80: break;
  7799  002040  D0B6               	goto	l5831
  7800  002042                     l5809:
  7801                           
  7802                           ;RTC.c: 82: strcpy(month, "APR");
  7803  002042  0EBE               	movlw	low printRTC@month
  7804  002044  0100               	movlb	0	; () banked
  7805  002046  6F80               	movwf	strcpy@to& (0+255),b
  7806  002048  0E00               	movlw	high printRTC@month
  7807  00204A  0100               	movlb	0	; () banked
  7808  00204C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7809  00204E  0EEB               	movlw	low STR_11
  7810  002050  0100               	movlb	0	; () banked
  7811  002052  6F82               	movwf	strcpy@from& (0+255),b
  7812  002054  0EFF               	movlw	high STR_11
  7813  002056  0100               	movlb	0	; () banked
  7814  002058  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7815  00205A  EC1B  F021         	call	_strcpy	;wreg free
  7816                           
  7817                           ;RTC.c: 83: break;
  7818  00205E  D0A7               	goto	l5831
  7819  002060                     l5811:
  7820                           
  7821                           ;RTC.c: 85: strcpy(month, "MAY");
  7822  002060  0EBE               	movlw	low printRTC@month
  7823  002062  0100               	movlb	0	; () banked
  7824  002064  6F80               	movwf	strcpy@to& (0+255),b
  7825  002066  0E00               	movlw	high printRTC@month
  7826  002068  0100               	movlb	0	; () banked
  7827  00206A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7828  00206C  0EFB               	movlw	low STR_12
  7829  00206E  0100               	movlb	0	; () banked
  7830  002070  6F82               	movwf	strcpy@from& (0+255),b
  7831  002072  0EFF               	movlw	high STR_12
  7832  002074  0100               	movlb	0	; () banked
  7833  002076  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7834  002078  EC1B  F021         	call	_strcpy	;wreg free
  7835                           
  7836                           ;RTC.c: 86: break;
  7837  00207C  D098               	goto	l5831
  7838  00207E                     l5813:
  7839                           
  7840                           ;RTC.c: 88: strcpy(month, "JUN");
  7841  00207E  0EBE               	movlw	low printRTC@month
  7842  002080  0100               	movlb	0	; () banked
  7843  002082  6F80               	movwf	strcpy@to& (0+255),b
  7844  002084  0E00               	movlw	high printRTC@month
  7845  002086  0100               	movlb	0	; () banked
  7846  002088  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7847  00208A  0EDF               	movlw	low STR_13
  7848  00208C  0100               	movlb	0	; () banked
  7849  00208E  6F82               	movwf	strcpy@from& (0+255),b
  7850  002090  0EFF               	movlw	high STR_13
  7851  002092  0100               	movlb	0	; () banked
  7852  002094  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7853  002096  EC1B  F021         	call	_strcpy	;wreg free
  7854                           
  7855                           ;RTC.c: 89: break;
  7856  00209A  D089               	goto	l5831
  7857  00209C                     l5815:
  7858                           
  7859                           ;RTC.c: 91: strcpy(month, "JUL");
  7860  00209C  0EBE               	movlw	low printRTC@month
  7861  00209E  0100               	movlb	0	; () banked
  7862  0020A0  6F80               	movwf	strcpy@to& (0+255),b
  7863  0020A2  0E00               	movlw	high printRTC@month
  7864  0020A4  0100               	movlb	0	; () banked
  7865  0020A6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7866  0020A8  0ED7               	movlw	low STR_14
  7867  0020AA  0100               	movlb	0	; () banked
  7868  0020AC  6F82               	movwf	strcpy@from& (0+255),b
  7869  0020AE  0EFF               	movlw	high STR_14
  7870  0020B0  0100               	movlb	0	; () banked
  7871  0020B2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7872  0020B4  EC1B  F021         	call	_strcpy	;wreg free
  7873                           
  7874                           ;RTC.c: 92: break;
  7875  0020B8  D07A               	goto	l5831
  7876  0020BA                     l5817:
  7877                           
  7878                           ;RTC.c: 94: strcpy(month, "AUG");
  7879  0020BA  0EBE               	movlw	low printRTC@month
  7880  0020BC  0100               	movlb	0	; () banked
  7881  0020BE  6F80               	movwf	strcpy@to& (0+255),b
  7882  0020C0  0E00               	movlw	high printRTC@month
  7883  0020C2  0100               	movlb	0	; () banked
  7884  0020C4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7885  0020C6  0ED3               	movlw	low STR_15
  7886  0020C8  0100               	movlb	0	; () banked
  7887  0020CA  6F82               	movwf	strcpy@from& (0+255),b
  7888  0020CC  0EFF               	movlw	high STR_15
  7889  0020CE  0100               	movlb	0	; () banked
  7890  0020D0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7891  0020D2  EC1B  F021         	call	_strcpy	;wreg free
  7892                           
  7893                           ;RTC.c: 95: break;
  7894  0020D6  D06B               	goto	l5831
  7895  0020D8                     l5819:
  7896                           
  7897                           ;RTC.c: 97: strcpy(month, "SEP");
  7898  0020D8  0EBE               	movlw	low printRTC@month
  7899  0020DA  0100               	movlb	0	; () banked
  7900  0020DC  6F80               	movwf	strcpy@to& (0+255),b
  7901  0020DE  0E00               	movlw	high printRTC@month
  7902  0020E0  0100               	movlb	0	; () banked
  7903  0020E2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7904  0020E4  0EE3               	movlw	low STR_16
  7905  0020E6  0100               	movlb	0	; () banked
  7906  0020E8  6F82               	movwf	strcpy@from& (0+255),b
  7907  0020EA  0EFF               	movlw	high STR_16
  7908  0020EC  0100               	movlb	0	; () banked
  7909  0020EE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7910  0020F0  EC1B  F021         	call	_strcpy	;wreg free
  7911                           
  7912                           ;RTC.c: 98: break;
  7913  0020F4  D05C               	goto	l5831
  7914  0020F6                     l5821:
  7915                           
  7916                           ;RTC.c: 100: strcpy(month, "OCT");
  7917  0020F6  0EBE               	movlw	low printRTC@month
  7918  0020F8  0100               	movlb	0	; () banked
  7919  0020FA  6F80               	movwf	strcpy@to& (0+255),b
  7920  0020FC  0E00               	movlw	high printRTC@month
  7921  0020FE  0100               	movlb	0	; () banked
  7922  002100  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7923  002102  0EF3               	movlw	low STR_17
  7924  002104  0100               	movlb	0	; () banked
  7925  002106  6F82               	movwf	strcpy@from& (0+255),b
  7926  002108  0EFF               	movlw	high STR_17
  7927  00210A  0100               	movlb	0	; () banked
  7928  00210C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7929  00210E  EC1B  F021         	call	_strcpy	;wreg free
  7930                           
  7931                           ;RTC.c: 101: break;
  7932  002112  D04D               	goto	l5831
  7933  002114                     l5823:
  7934                           
  7935                           ;RTC.c: 103: strcpy(month, "NOV");
  7936  002114  0EBE               	movlw	low printRTC@month
  7937  002116  0100               	movlb	0	; () banked
  7938  002118  6F80               	movwf	strcpy@to& (0+255),b
  7939  00211A  0E00               	movlw	high printRTC@month
  7940  00211C  0100               	movlb	0	; () banked
  7941  00211E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7942  002120  0EF7               	movlw	low STR_18
  7943  002122  0100               	movlb	0	; () banked
  7944  002124  6F82               	movwf	strcpy@from& (0+255),b
  7945  002126  0EFF               	movlw	high STR_18
  7946  002128  0100               	movlb	0	; () banked
  7947  00212A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7948  00212C  EC1B  F021         	call	_strcpy	;wreg free
  7949                           
  7950                           ;RTC.c: 104: break;
  7951  002130  D03E               	goto	l5831
  7952  002132                     l5825:
  7953                           
  7954                           ;RTC.c: 106: strcpy(month, "DEC");
  7955  002132  0EBE               	movlw	low printRTC@month
  7956  002134  0100               	movlb	0	; () banked
  7957  002136  6F80               	movwf	strcpy@to& (0+255),b
  7958  002138  0E00               	movlw	high printRTC@month
  7959  00213A  0100               	movlb	0	; () banked
  7960  00213C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7961  00213E  0ECF               	movlw	low STR_19
  7962  002140  0100               	movlb	0	; () banked
  7963  002142  6F82               	movwf	strcpy@from& (0+255),b
  7964  002144  0EFF               	movlw	high STR_19
  7965  002146  0100               	movlb	0	; () banked
  7966  002148  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7967  00214A  EC1B  F021         	call	_strcpy	;wreg free
  7968                           
  7969                           ;RTC.c: 108: }
  7970                           
  7971                           ;RTC.c: 107: break;
  7972  00214E  D02F               	goto	l5831
  7973  002150                     l5829:
  7974  002150  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  7975  002154  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  7976                           
  7977                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7978                           ; Switch size 1, requested type "space"
  7979                           ; Number of cases is 1, Range of values is 0 to 0
  7980                           ; switch strategies available:
  7981                           ; Name         Instructions Cycles
  7982                           ; simple_byte            4     3 (average)
  7983                           ;	Chosen strategy is simple_byte
  7984  002158  0100               	movlb	0	; () banked
  7985  00215A  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  7986  00215C  0A00               	xorlw	0	; case 0
  7987  00215E  A4D8               	btfss	status,2,c
  7988  002160  D026               	goto	l5831
  7989                           
  7990                           ; BSR set to: 0
  7991                           ; Switch size 1, requested type "space"
  7992                           ; Number of cases is 12, Range of values is 1 to 12
  7993                           ; switch strategies available:
  7994                           ; Name         Instructions Cycles
  7995                           ; simple_byte           37    19 (average)
  7996                           ;	Chosen strategy is simple_byte
  7997  002162  0100               	movlb	0	; () banked
  7998  002164  51AB               	movf	??_printRTC& (0+255),w,b
  7999  002166  0A01               	xorlw	1	; case 1
  8000  002168  B4D8               	btfsc	status,2,c
  8001  00216A  D73E               	goto	l5803
  8002  00216C  0A03               	xorlw	3	; case 2
  8003  00216E  B4D8               	btfsc	status,2,c
  8004  002170  D74A               	goto	l5805
  8005  002172  0A01               	xorlw	1	; case 3
  8006  002174  B4D8               	btfsc	status,2,c
  8007  002176  D756               	goto	l5807
  8008  002178  0A07               	xorlw	7	; case 4
  8009  00217A  B4D8               	btfsc	status,2,c
  8010  00217C  D762               	goto	l5809
  8011  00217E  0A01               	xorlw	1	; case 5
  8012  002180  B4D8               	btfsc	status,2,c
  8013  002182  D76E               	goto	l5811
  8014  002184  0A03               	xorlw	3	; case 6
  8015  002186  B4D8               	btfsc	status,2,c
  8016  002188  D77A               	goto	l5813
  8017  00218A  0A01               	xorlw	1	; case 7
  8018  00218C  B4D8               	btfsc	status,2,c
  8019  00218E  D786               	goto	l5815
  8020  002190  0A0F               	xorlw	15	; case 8
  8021  002192  B4D8               	btfsc	status,2,c
  8022  002194  D792               	goto	l5817
  8023  002196  0A01               	xorlw	1	; case 9
  8024  002198  B4D8               	btfsc	status,2,c
  8025  00219A  D79E               	goto	l5819
  8026  00219C  0A03               	xorlw	3	; case 10
  8027  00219E  B4D8               	btfsc	status,2,c
  8028  0021A0  D7AA               	goto	l5821
  8029  0021A2  0A01               	xorlw	1	; case 11
  8030  0021A4  B4D8               	btfsc	status,2,c
  8031  0021A6  D7B6               	goto	l5823
  8032  0021A8  0A07               	xorlw	7	; case 12
  8033  0021AA  B4D8               	btfsc	status,2,c
  8034  0021AC  D7C2               	goto	l5825
  8035  0021AE                     l5831:
  8036                           
  8037                           ;RTC.c: 109: lcdInst(0b10000000);;
  8038  0021AE  0E80               	movlw	128
  8039  0021B0  EC9B  F023         	call	_lcdInst
  8040                           
  8041                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  8042  0021B4  0E3C               	movlw	low STR_21
  8043  0021B6  0100               	movlb	0	; () banked
  8044  0021B8  6F8E               	movwf	printf@f& (0+255),b
  8045  0021BA  0EFB               	movlw	high STR_21
  8046  0021BC  0100               	movlb	0	; () banked
  8047  0021BE  6F8F               	movwf	(printf@f+1)& (0+255),b
  8048  0021C0  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  8049  0021C4  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  8050  0021C8  0EBE               	movlw	low printRTC@month
  8051  0021CA  0100               	movlb	0	; () banked
  8052  0021CC  6F92               	movwf	(?_printf+4)& (0+255),b
  8053  0021CE  0E00               	movlw	high printRTC@month
  8054  0021D0  0100               	movlb	0	; () banked
  8055  0021D2  6F93               	movwf	(?_printf+5)& (0+255),b
  8056  0021D4  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  8057  0021D8  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  8058  0021DC  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  8059  0021E0  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  8060  0021E4  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  8061  0021E8  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  8062  0021EC  ECB8  F008         	call	_printf	;wreg free
  8063  0021F0  0012               	return		;funcret
  8064  0021F2                     __end_of_printRTC:
  8065                           	opt stack 0
  8066                           tblptru	equ	0xFF8
  8067                           tblptrh	equ	0xFF7
  8068                           tblptrl	equ	0xFF6
  8069                           tablat	equ	0xFF5
  8070                           prodh	equ	0xFF4
  8071                           prodl	equ	0xFF3
  8072                           intcon	equ	0xFF2
  8073                           intcon2	equ	0xFF1
  8074                           intcon3	equ	0xFF0
  8075                           postinc0	equ	0xFEE
  8076                           wreg	equ	0xFE8
  8077                           postdec1	equ	0xFE5
  8078                           fsr1l	equ	0xFE1
  8079                           indf2	equ	0xFDF
  8080                           postinc2	equ	0xFDE
  8081                           postdec2	equ	0xFDD
  8082                           fsr2h	equ	0xFDA
  8083                           fsr2l	equ	0xFD9
  8084                           status	equ	0xFD8
  8085                           
  8086 ;; *************** function _strcpy *****************
  8087 ;; Defined at:
  8088 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  8089 ;; Parameters:    Size  Location     Type
  8090 ;;  to              2    0[BANK0 ] PTR unsigned char 
  8091 ;;		 -> printRTC@month(4), UI@month(4), 
  8092 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  8093 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  8094 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  8095 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  8096 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  8097 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  8098 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  8099 ;;		 -> STR_8(4), 
  8100 ;; Auto vars:     Size  Location     Type
  8101 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  8102 ;;		 -> printRTC@month(4), UI@month(4), 
  8103 ;; Return value:  Size  Location     Type
  8104 ;;                  2    0[BANK0 ] PTR unsigned char 
  8105 ;; Registers used:
  8106 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8107 ;; Tracked objects:
  8108 ;;		On entry : 0/0
  8109 ;;		On exit  : 0/0
  8110 ;;		Unchanged: 0/0
  8111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8112 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8113 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8115 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8116 ;;Total ram usage:        6 bytes
  8117 ;; Hardware stack levels used:    1
  8118 ;; Hardware stack levels required when called:    7
  8119 ;; This function calls:
  8120 ;;		Nothing
  8121 ;; This function is called by:
  8122 ;;		_UI
  8123 ;;		_printRTC
  8124 ;; This function uses a non-reentrant model
  8125 ;;
  8126                           
  8127                           	psect	text24
  8128  004236                     __ptext24:
  8129                           	opt stack 0
  8130  004236                     _strcpy:
  8131                           	opt stack 20
  8132                           
  8133                           ;incstack = 0
  8134  004236  C080  F084         	movff	strcpy@to,strcpy@cp
  8135  00423A  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  8136  00423E  D006               	goto	l5541
  8137  004240                     l5539:
  8138  004240  0100               	movlb	0	; () banked
  8139  004242  4B84               	infsnz	strcpy@cp& (0+255),f,b
  8140  004244  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  8141  004246  0100               	movlb	0	; () banked
  8142  004248  4B82               	infsnz	strcpy@from& (0+255),f,b
  8143  00424A  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  8144  00424C                     l5541:
  8145  00424C  C082  FFF6         	movff	strcpy@from,tblptrl
  8146  004250  C083  FFF7         	movff	strcpy@from+1,tblptrh
  8147  004254                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8148  004254  6AF8               	clrf	tblptru,c
  8149  004256                     	endif
  8150  004256                     	if	0	;tblptru may be non-zero
  8151  004256                     	endif
  8152  004256  C084  FFD9         	movff	strcpy@cp,fsr2l
  8153  00425A  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  8154  00425E  0008               	tblrd		*
  8155  004260  CFF5 FFDF          	movff	tablat,indf2
  8156  004264  50DF               	movf	indf2,w,c
  8157  004266  B4D8               	btfsc	status,2,c
  8158  004268  0012               	return	
  8159  00426A  D7EA               	goto	l5539
  8160  00426C                     __end_of_strcpy:
  8161                           	opt stack 0
  8162                           tblptru	equ	0xFF8
  8163                           tblptrh	equ	0xFF7
  8164                           tblptrl	equ	0xFF6
  8165                           tablat	equ	0xFF5
  8166                           prodh	equ	0xFF4
  8167                           prodl	equ	0xFF3
  8168                           intcon	equ	0xFF2
  8169                           intcon2	equ	0xFF1
  8170                           intcon3	equ	0xFF0
  8171                           postinc0	equ	0xFEE
  8172                           wreg	equ	0xFE8
  8173                           postdec1	equ	0xFE5
  8174                           fsr1l	equ	0xFE1
  8175                           indf2	equ	0xFDF
  8176                           postinc2	equ	0xFDE
  8177                           postdec2	equ	0xFDD
  8178                           fsr2h	equ	0xFDA
  8179                           fsr2l	equ	0xFD9
  8180                           status	equ	0xFD8
  8181                           
  8182 ;; *************** function _getRTC *****************
  8183 ;; Defined at:
  8184 ;;		line 44 in file "RTC.c"
  8185 ;; Parameters:    Size  Location     Type
  8186 ;;		None
  8187 ;; Auto vars:     Size  Location     Type
  8188 ;;  i               2    3[BANK0 ] int 
  8189 ;; Return value:  Size  Location     Type
  8190 ;;                  1    wreg      void 
  8191 ;; Registers used:
  8192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8193 ;; Tracked objects:
  8194 ;;		On entry : 0/0
  8195 ;;		On exit  : 0/0
  8196 ;;		Unchanged: 0/0
  8197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8199 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8201 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8202 ;;Total ram usage:        2 bytes
  8203 ;; Hardware stack levels used:    1
  8204 ;; Hardware stack levels required when called:    9
  8205 ;; This function calls:
  8206 ;;		_I2C_Master_Read
  8207 ;;		_I2C_Master_Start
  8208 ;;		_I2C_Master_Stop
  8209 ;;		_I2C_Master_Write
  8210 ;; This function is called by:
  8211 ;;		_printRTC
  8212 ;;		_initSortTimer
  8213 ;; This function uses a non-reentrant model
  8214 ;;
  8215                           
  8216                           	psect	text25
  8217  003A54                     __ptext25:
  8218                           	opt stack 0
  8219  003A54                     _getRTC:
  8220                           	opt stack 18
  8221                           
  8222                           ;RTC.c: 48: I2C_Master_Start();
  8223                           
  8224                           ;incstack = 0
  8225  003A54  ECC1  F023         	call	_I2C_Master_Start	;wreg free
  8226                           
  8227                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  8228  003A58  0E00               	movlw	0
  8229  003A5A  0100               	movlb	0	; () banked
  8230  003A5C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8231  003A5E  0ED0               	movlw	208
  8232  003A60  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8233  003A62  ECAF  F023         	call	_I2C_Master_Write	;wreg free
  8234                           
  8235                           ;RTC.c: 50: I2C_Master_Write(0x00);
  8236  003A66  0E00               	movlw	0
  8237  003A68  0100               	movlb	0	; () banked
  8238  003A6A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8239  003A6C  0E00               	movlw	0
  8240  003A6E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8241  003A70  ECAF  F023         	call	_I2C_Master_Write	;wreg free
  8242                           
  8243                           ;RTC.c: 51: I2C_Master_Stop();
  8244  003A74  ECBD  F023         	call	_I2C_Master_Stop	;wreg free
  8245                           
  8246                           ;RTC.c: 54: I2C_Master_Start();
  8247  003A78  ECC1  F023         	call	_I2C_Master_Start	;wreg free
  8248                           
  8249                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  8250  003A7C  0E00               	movlw	0
  8251  003A7E  0100               	movlb	0	; () banked
  8252  003A80  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8253  003A82  0ED1               	movlw	209
  8254  003A84  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8255  003A86  ECAF  F023         	call	_I2C_Master_Write	;wreg free
  8256                           
  8257                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  8258  003A8A  0E00               	movlw	0
  8259  003A8C  0100               	movlb	0	; () banked
  8260  003A8E  6F84               	movwf	(getRTC@i+1)& (0+255),b
  8261  003A90  0E00               	movlw	0
  8262  003A92  6F83               	movwf	getRTC@i& (0+255),b
  8263  003A94                     l5547:
  8264                           
  8265                           ; BSR set to: 0
  8266  003A94  0100               	movlb	0	; () banked
  8267  003A96  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  8268  003A98  D008               	goto	l5551
  8269  003A9A  0100               	movlb	0	; () banked
  8270  003A9C  5184               	movf	(getRTC@i+1)& (0+255),w,b
  8271  003A9E  E115               	bnz	l5557
  8272  003AA0  0E06               	movlw	6
  8273  003AA2  0100               	movlb	0	; () banked
  8274  003AA4  5D83               	subwf	getRTC@i& (0+255),w,b
  8275  003AA6  B0D8               	btfsc	status,0,c
  8276  003AA8  D010               	goto	l5557
  8277  003AAA                     l5551:
  8278                           
  8279                           ; BSR set to: 0
  8280                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  8281  003AAA  0E24               	movlw	low _time
  8282  003AAC  0100               	movlb	0	; () banked
  8283  003AAE  2583               	addwf	getRTC@i& (0+255),w,b
  8284  003AB0  6ED9               	movwf	fsr2l,c
  8285  003AB2  0E01               	movlw	high _time
  8286  003AB4  0100               	movlb	0	; () banked
  8287  003AB6  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  8288  003AB8  6EDA               	movwf	fsr2h,c
  8289  003ABA  0E01               	movlw	1
  8290  003ABC  EC72  F022         	call	_I2C_Master_Read
  8291  003AC0  6EDF               	movwf	indf2,c
  8292  003AC2  0100               	movlb	0	; () banked
  8293  003AC4  4B83               	infsnz	getRTC@i& (0+255),f,b
  8294  003AC6  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8295  003AC8  D7E5               	goto	l5547
  8296  003ACA                     l5557:
  8297                           
  8298                           ; BSR set to: 0
  8299                           ;RTC.c: 58: }
  8300                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8301  003ACA  0E00               	movlw	0
  8302  003ACC  EC72  F022         	call	_I2C_Master_Read
  8303  003AD0  0101               	movlb	1	; () banked
  8304  003AD2  6F2A               	movwf	(_time+6)& (0+255),b
  8305                           
  8306                           ;RTC.c: 60: I2C_Master_Stop();
  8307  003AD4  ECBD  F023         	call	_I2C_Master_Stop	;wreg free
  8308  003AD8  0012               	return		;funcret
  8309  003ADA                     __end_of_getRTC:
  8310                           	opt stack 0
  8311                           tblptru	equ	0xFF8
  8312                           tblptrh	equ	0xFF7
  8313                           tblptrl	equ	0xFF6
  8314                           tablat	equ	0xFF5
  8315                           prodh	equ	0xFF4
  8316                           prodl	equ	0xFF3
  8317                           intcon	equ	0xFF2
  8318                           intcon2	equ	0xFF1
  8319                           intcon3	equ	0xFF0
  8320                           postinc0	equ	0xFEE
  8321                           wreg	equ	0xFE8
  8322                           postdec1	equ	0xFE5
  8323                           fsr1l	equ	0xFE1
  8324                           indf2	equ	0xFDF
  8325                           postinc2	equ	0xFDE
  8326                           postdec2	equ	0xFDD
  8327                           fsr2h	equ	0xFDA
  8328                           fsr2l	equ	0xFD9
  8329                           status	equ	0xFD8
  8330                           
  8331 ;; *************** function _I2C_Master_Write *****************
  8332 ;; Defined at:
  8333 ;;		line 49 in file "I2C.c"
  8334 ;; Parameters:    Size  Location     Type
  8335 ;;  d               2    1[BANK0 ] unsigned int 
  8336 ;; Auto vars:     Size  Location     Type
  8337 ;;		None
  8338 ;; Return value:  Size  Location     Type
  8339 ;;                  1    wreg      void 
  8340 ;; Registers used:
  8341 ;;		wreg, status,2, status,0, cstack
  8342 ;; Tracked objects:
  8343 ;;		On entry : 0/0
  8344 ;;		On exit  : 0/0
  8345 ;;		Unchanged: 0/0
  8346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8347 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8350 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8351 ;;Total ram usage:        2 bytes
  8352 ;; Hardware stack levels used:    1
  8353 ;; Hardware stack levels required when called:    8
  8354 ;; This function calls:
  8355 ;;		_I2C_Master_Wait
  8356 ;; This function is called by:
  8357 ;;		_loadRTC
  8358 ;;		_getRTC
  8359 ;; This function uses a non-reentrant model
  8360 ;;
  8361                           
  8362                           	psect	text26
  8363  00475E                     __ptext26:
  8364                           	opt stack 0
  8365  00475E                     _I2C_Master_Write:
  8366                           	opt stack 18
  8367                           
  8368                           ;I2C.c: 51: I2C_Master_Wait();
  8369                           
  8370                           ;incstack = 0
  8371  00475E  EC80  F023         	call	_I2C_Master_Wait	;wreg free
  8372                           
  8373                           ;I2C.c: 52: SSPBUF = d;
  8374  004762  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8375  004766  0012               	return		;funcret
  8376  004768                     __end_of_I2C_Master_Write:
  8377                           	opt stack 0
  8378                           tblptru	equ	0xFF8
  8379                           tblptrh	equ	0xFF7
  8380                           tblptrl	equ	0xFF6
  8381                           tablat	equ	0xFF5
  8382                           prodh	equ	0xFF4
  8383                           prodl	equ	0xFF3
  8384                           intcon	equ	0xFF2
  8385                           intcon2	equ	0xFF1
  8386                           intcon3	equ	0xFF0
  8387                           postinc0	equ	0xFEE
  8388                           wreg	equ	0xFE8
  8389                           postdec1	equ	0xFE5
  8390                           fsr1l	equ	0xFE1
  8391                           indf2	equ	0xFDF
  8392                           postinc2	equ	0xFDE
  8393                           postdec2	equ	0xFDD
  8394                           fsr2h	equ	0xFDA
  8395                           fsr2l	equ	0xFD9
  8396                           status	equ	0xFD8
  8397                           
  8398 ;; *************** function _I2C_Master_Stop *****************
  8399 ;; Defined at:
  8400 ;;		line 43 in file "I2C.c"
  8401 ;; Parameters:    Size  Location     Type
  8402 ;;		None
  8403 ;; Auto vars:     Size  Location     Type
  8404 ;;		None
  8405 ;; Return value:  Size  Location     Type
  8406 ;;                  1    wreg      void 
  8407 ;; Registers used:
  8408 ;;		wreg, status,2, status,0, cstack
  8409 ;; Tracked objects:
  8410 ;;		On entry : 0/0
  8411 ;;		On exit  : 0/0
  8412 ;;		Unchanged: 0/0
  8413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8417 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8418 ;;Total ram usage:        0 bytes
  8419 ;; Hardware stack levels used:    1
  8420 ;; Hardware stack levels required when called:    8
  8421 ;; This function calls:
  8422 ;;		_I2C_Master_Wait
  8423 ;; This function is called by:
  8424 ;;		_loadRTC
  8425 ;;		_getRTC
  8426 ;; This function uses a non-reentrant model
  8427 ;;
  8428                           
  8429                           	psect	text27
  8430  00477A                     __ptext27:
  8431                           	opt stack 0
  8432  00477A                     _I2C_Master_Stop:
  8433                           	opt stack 18
  8434                           
  8435                           ;I2C.c: 45: I2C_Master_Wait();
  8436                           
  8437                           ;incstack = 0
  8438  00477A  EC80  F023         	call	_I2C_Master_Wait	;wreg free
  8439                           
  8440                           ;I2C.c: 46: PEN = 1;
  8441  00477E  84C5               	bsf	4037,2,c	;volatile
  8442  004780  0012               	return		;funcret
  8443  004782                     __end_of_I2C_Master_Stop:
  8444                           	opt stack 0
  8445                           tblptru	equ	0xFF8
  8446                           tblptrh	equ	0xFF7
  8447                           tblptrl	equ	0xFF6
  8448                           tablat	equ	0xFF5
  8449                           prodh	equ	0xFF4
  8450                           prodl	equ	0xFF3
  8451                           intcon	equ	0xFF2
  8452                           intcon2	equ	0xFF1
  8453                           intcon3	equ	0xFF0
  8454                           postinc0	equ	0xFEE
  8455                           wreg	equ	0xFE8
  8456                           postdec1	equ	0xFE5
  8457                           fsr1l	equ	0xFE1
  8458                           indf2	equ	0xFDF
  8459                           postinc2	equ	0xFDE
  8460                           postdec2	equ	0xFDD
  8461                           fsr2h	equ	0xFDA
  8462                           fsr2l	equ	0xFD9
  8463                           status	equ	0xFD8
  8464                           
  8465 ;; *************** function _I2C_Master_Start *****************
  8466 ;; Defined at:
  8467 ;;		line 31 in file "I2C.c"
  8468 ;; Parameters:    Size  Location     Type
  8469 ;;		None
  8470 ;; Auto vars:     Size  Location     Type
  8471 ;;		None
  8472 ;; Return value:  Size  Location     Type
  8473 ;;                  1    wreg      void 
  8474 ;; Registers used:
  8475 ;;		wreg, status,2, status,0, cstack
  8476 ;; Tracked objects:
  8477 ;;		On entry : 0/0
  8478 ;;		On exit  : 0/0
  8479 ;;		Unchanged: 0/0
  8480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8485 ;;Total ram usage:        0 bytes
  8486 ;; Hardware stack levels used:    1
  8487 ;; Hardware stack levels required when called:    8
  8488 ;; This function calls:
  8489 ;;		_I2C_Master_Wait
  8490 ;; This function is called by:
  8491 ;;		_loadRTC
  8492 ;;		_getRTC
  8493 ;; This function uses a non-reentrant model
  8494 ;;
  8495                           
  8496                           	psect	text28
  8497  004782                     __ptext28:
  8498                           	opt stack 0
  8499  004782                     _I2C_Master_Start:
  8500                           	opt stack 18
  8501                           
  8502                           ;I2C.c: 33: I2C_Master_Wait();
  8503                           
  8504                           ;incstack = 0
  8505  004782  EC80  F023         	call	_I2C_Master_Wait	;wreg free
  8506                           
  8507                           ;I2C.c: 34: SEN = 1;
  8508  004786  80C5               	bsf	4037,0,c	;volatile
  8509  004788  0012               	return		;funcret
  8510  00478A                     __end_of_I2C_Master_Start:
  8511                           	opt stack 0
  8512                           tblptru	equ	0xFF8
  8513                           tblptrh	equ	0xFF7
  8514                           tblptrl	equ	0xFF6
  8515                           tablat	equ	0xFF5
  8516                           prodh	equ	0xFF4
  8517                           prodl	equ	0xFF3
  8518                           intcon	equ	0xFF2
  8519                           intcon2	equ	0xFF1
  8520                           intcon3	equ	0xFF0
  8521                           postinc0	equ	0xFEE
  8522                           wreg	equ	0xFE8
  8523                           postdec1	equ	0xFE5
  8524                           fsr1l	equ	0xFE1
  8525                           indf2	equ	0xFDF
  8526                           postinc2	equ	0xFDE
  8527                           postdec2	equ	0xFDD
  8528                           fsr2h	equ	0xFDA
  8529                           fsr2l	equ	0xFD9
  8530                           status	equ	0xFD8
  8531                           
  8532 ;; *************** function _I2C_Master_Read *****************
  8533 ;; Defined at:
  8534 ;;		line 55 in file "I2C.c"
  8535 ;; Parameters:    Size  Location     Type
  8536 ;;  a               1    wreg     unsigned char 
  8537 ;; Auto vars:     Size  Location     Type
  8538 ;;  a               1    1[BANK0 ] unsigned char 
  8539 ;;  temp            1    2[BANK0 ] unsigned char 
  8540 ;; Return value:  Size  Location     Type
  8541 ;;                  1    wreg      unsigned char 
  8542 ;; Registers used:
  8543 ;;		wreg, status,2, status,0, cstack
  8544 ;; Tracked objects:
  8545 ;;		On entry : 0/0
  8546 ;;		On exit  : 0/0
  8547 ;;		Unchanged: 0/0
  8548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8550 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8552 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8553 ;;Total ram usage:        2 bytes
  8554 ;; Hardware stack levels used:    1
  8555 ;; Hardware stack levels required when called:    8
  8556 ;; This function calls:
  8557 ;;		_I2C_Master_Wait
  8558 ;; This function is called by:
  8559 ;;		_getRTC
  8560 ;; This function uses a non-reentrant model
  8561 ;;
  8562                           
  8563                           	psect	text29
  8564  0044E4                     __ptext29:
  8565                           	opt stack 0
  8566  0044E4                     _I2C_Master_Read:
  8567                           	opt stack 18
  8568                           
  8569                           ;incstack = 0
  8570                           ;I2C_Master_Read@a stored from wreg
  8571  0044E4  0100               	movlb	0	; () banked
  8572  0044E6  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8573                           
  8574                           ;I2C.c: 57: unsigned char temp;
  8575                           ;I2C.c: 58: I2C_Master_Wait();
  8576  0044E8  EC80  F023         	call	_I2C_Master_Wait	;wreg free
  8577                           
  8578                           ;I2C.c: 59: RCEN = 1;
  8579  0044EC  86C5               	bsf	4037,3,c	;volatile
  8580                           
  8581                           ;I2C.c: 60: I2C_Master_Wait();
  8582  0044EE  EC80  F023         	call	_I2C_Master_Wait	;wreg free
  8583                           
  8584                           ;I2C.c: 61: temp = SSPBUF;
  8585  0044F2  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8586                           
  8587                           ;I2C.c: 62: I2C_Master_Wait();
  8588  0044F6  EC80  F023         	call	_I2C_Master_Wait	;wreg free
  8589                           
  8590                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8591  0044FA  0100               	movlb	0	; () banked
  8592  0044FC  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8593  0044FE  0100               	movlb	0	; () banked
  8594  004500  A4D8               	btfss	status,2,c
  8595  004502  D002               	goto	u3530
  8596  004504  8AC5               	bsf	4037,5,c	;volatile
  8597  004506  D001               	goto	l5235
  8598  004508                     u3530:
  8599  004508  9AC5               	bcf	4037,5,c	;volatile
  8600  00450A                     l5235:
  8601                           
  8602                           ;I2C.c: 64: ACKEN = 1;
  8603  00450A  88C5               	bsf	4037,4,c	;volatile
  8604                           
  8605                           ;I2C.c: 65: return temp;
  8606  00450C  0100               	movlb	0	; () banked
  8607  00450E  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8608  004510  0012               	return	
  8609  004512                     __end_of_I2C_Master_Read:
  8610                           	opt stack 0
  8611                           tblptru	equ	0xFF8
  8612                           tblptrh	equ	0xFF7
  8613                           tblptrl	equ	0xFF6
  8614                           tablat	equ	0xFF5
  8615                           prodh	equ	0xFF4
  8616                           prodl	equ	0xFF3
  8617                           intcon	equ	0xFF2
  8618                           intcon2	equ	0xFF1
  8619                           intcon3	equ	0xFF0
  8620                           postinc0	equ	0xFEE
  8621                           wreg	equ	0xFE8
  8622                           postdec1	equ	0xFE5
  8623                           fsr1l	equ	0xFE1
  8624                           indf2	equ	0xFDF
  8625                           postinc2	equ	0xFDE
  8626                           postdec2	equ	0xFDD
  8627                           fsr2h	equ	0xFDA
  8628                           fsr2l	equ	0xFD9
  8629                           status	equ	0xFD8
  8630                           
  8631 ;; *************** function _I2C_Master_Wait *****************
  8632 ;; Defined at:
  8633 ;;		line 26 in file "I2C.c"
  8634 ;; Parameters:    Size  Location     Type
  8635 ;;		None
  8636 ;; Auto vars:     Size  Location     Type
  8637 ;;		None
  8638 ;; Return value:  Size  Location     Type
  8639 ;;                  1    wreg      void 
  8640 ;; Registers used:
  8641 ;;		wreg, status,2, status,0
  8642 ;; Tracked objects:
  8643 ;;		On entry : 0/0
  8644 ;;		On exit  : 0/0
  8645 ;;		Unchanged: 0/0
  8646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8649 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8650 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8651 ;;Total ram usage:        1 bytes
  8652 ;; Hardware stack levels used:    1
  8653 ;; Hardware stack levels required when called:    7
  8654 ;; This function calls:
  8655 ;;		Nothing
  8656 ;; This function is called by:
  8657 ;;		_I2C_Master_Start
  8658 ;;		_I2C_Master_Stop
  8659 ;;		_I2C_Master_Write
  8660 ;;		_I2C_Master_Read
  8661 ;;		_I2C_Master_RepeatedStart
  8662 ;; This function uses a non-reentrant model
  8663 ;;
  8664                           
  8665                           	psect	text30
  8666  004700                     __ptext30:
  8667                           	opt stack 0
  8668  004700                     _I2C_Master_Wait:
  8669                           	opt stack 18
  8670  004700                     l66:
  8671  004700  B4C7               	btfsc	4039,2,c	;volatile
  8672  004702  D7FE               	goto	l66
  8673  004704  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8674  004708  0E1F               	movlw	31
  8675  00470A  0100               	movlb	0	; () banked
  8676  00470C  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8677  00470E  B4D8               	btfsc	status,2,c
  8678  004710  0012               	return	
  8679  004712  D7F6               	goto	l66
  8680  004714                     __end_of_I2C_Master_Wait:
  8681                           	opt stack 0
  8682                           tblptru	equ	0xFF8
  8683                           tblptrh	equ	0xFF7
  8684                           tblptrl	equ	0xFF6
  8685                           tablat	equ	0xFF5
  8686                           prodh	equ	0xFF4
  8687                           prodl	equ	0xFF3
  8688                           intcon	equ	0xFF2
  8689                           intcon2	equ	0xFF1
  8690                           intcon3	equ	0xFF0
  8691                           postinc0	equ	0xFEE
  8692                           wreg	equ	0xFE8
  8693                           postdec1	equ	0xFE5
  8694                           fsr1l	equ	0xFE1
  8695                           indf2	equ	0xFDF
  8696                           postinc2	equ	0xFDE
  8697                           postdec2	equ	0xFDD
  8698                           fsr2h	equ	0xFDA
  8699                           fsr2l	equ	0xFD9
  8700                           status	equ	0xFD8
  8701                           
  8702 ;; *************** function _change_state_to_menu_22 *****************
  8703 ;; Defined at:
  8704 ;;		line 498 in file "UI.c"
  8705 ;; Parameters:    Size  Location     Type
  8706 ;;		None
  8707 ;; Auto vars:     Size  Location     Type
  8708 ;;		None
  8709 ;; Return value:  Size  Location     Type
  8710 ;;                  1    wreg      void 
  8711 ;; Registers used:
  8712 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8713 ;; Tracked objects:
  8714 ;;		On entry : 0/0
  8715 ;;		On exit  : 0/0
  8716 ;;		Unchanged: 0/0
  8717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8722 ;;Total ram usage:        0 bytes
  8723 ;; Hardware stack levels used:    1
  8724 ;; Hardware stack levels required when called:   10
  8725 ;; This function calls:
  8726 ;;		_lcdInst
  8727 ;;		_printf
  8728 ;; This function is called by:
  8729 ;;		_UI
  8730 ;; This function uses a non-reentrant model
  8731 ;;
  8732                           
  8733                           	psect	text31
  8734  0041C6                     __ptext31:
  8735                           	opt stack 0
  8736  0041C6                     _change_state_to_menu_22:
  8737                           	opt stack 19
  8738                           
  8739                           ;UI.c: 499: cur_state = 22;
  8740                           
  8741                           ; BSR set to: 0
  8742                           ;incstack = 0
  8743  0041C6  0E00               	movlw	0
  8744  0041C8  0100               	movlb	0	; () banked
  8745  0041CA  6FE1               	movwf	(_cur_state+1)& (0+255),b
  8746  0041CC  0E16               	movlw	22
  8747  0041CE  6FE0               	movwf	_cur_state& (0+255),b
  8748                           
  8749                           ; BSR set to: 0
  8750                           ;UI.c: 501: lcdInst(0b10000000);;
  8751  0041D0  0E80               	movlw	128
  8752  0041D2  EC9B  F023         	call	_lcdInst
  8753                           
  8754                           ;UI.c: 502: printf("2. SORT        <");
  8755  0041D6  0EE6               	movlw	low STR_34
  8756  0041D8  0100               	movlb	0	; () banked
  8757  0041DA  6F8E               	movwf	printf@f& (0+255),b
  8758  0041DC  0EFD               	movlw	high STR_34
  8759  0041DE  0100               	movlb	0	; () banked
  8760  0041E0  6F8F               	movwf	(printf@f+1)& (0+255),b
  8761  0041E2  ECB8  F008         	call	_printf	;wreg free
  8762                           
  8763                           ;UI.c: 503: lcdInst(0b11000000);;
  8764  0041E6  0EC0               	movlw	192
  8765  0041E8  EC9B  F023         	call	_lcdInst
  8766                           
  8767                           ;UI.c: 504: printf("3. LOGS         ");
  8768  0041EC  0E2B               	movlw	low STR_36
  8769  0041EE  0100               	movlb	0	; () banked
  8770  0041F0  6F8E               	movwf	printf@f& (0+255),b
  8771  0041F2  0EFD               	movlw	high STR_36
  8772  0041F4  0100               	movlb	0	; () banked
  8773  0041F6  6F8F               	movwf	(printf@f+1)& (0+255),b
  8774  0041F8  ECB8  F008         	call	_printf	;wreg free
  8775  0041FC  0012               	return		;funcret
  8776  0041FE                     __end_of_change_state_to_menu_22:
  8777                           	opt stack 0
  8778                           tblptru	equ	0xFF8
  8779                           tblptrh	equ	0xFF7
  8780                           tblptrl	equ	0xFF6
  8781                           tablat	equ	0xFF5
  8782                           prodh	equ	0xFF4
  8783                           prodl	equ	0xFF3
  8784                           intcon	equ	0xFF2
  8785                           intcon2	equ	0xFF1
  8786                           intcon3	equ	0xFF0
  8787                           postinc0	equ	0xFEE
  8788                           wreg	equ	0xFE8
  8789                           postdec1	equ	0xFE5
  8790                           fsr1l	equ	0xFE1
  8791                           indf2	equ	0xFDF
  8792                           postinc2	equ	0xFDE
  8793                           postdec2	equ	0xFDD
  8794                           fsr2h	equ	0xFDA
  8795                           fsr2l	equ	0xFD9
  8796                           status	equ	0xFD8
  8797                           
  8798 ;; *************** function _change_state_to_menu_12 *****************
  8799 ;; Defined at:
  8800 ;;		line 490 in file "UI.c"
  8801 ;; Parameters:    Size  Location     Type
  8802 ;;		None
  8803 ;; Auto vars:     Size  Location     Type
  8804 ;;		None
  8805 ;; Return value:  Size  Location     Type
  8806 ;;                  1    wreg      void 
  8807 ;; Registers used:
  8808 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8809 ;; Tracked objects:
  8810 ;;		On entry : 0/0
  8811 ;;		On exit  : 0/0
  8812 ;;		Unchanged: 0/0
  8813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8818 ;;Total ram usage:        0 bytes
  8819 ;; Hardware stack levels used:    1
  8820 ;; Hardware stack levels required when called:   10
  8821 ;; This function calls:
  8822 ;;		_lcdInst
  8823 ;;		_printf
  8824 ;; This function is called by:
  8825 ;;		_UI
  8826 ;; This function uses a non-reentrant model
  8827 ;;
  8828                           
  8829                           	psect	text32
  8830  0041FE                     __ptext32:
  8831                           	opt stack 0
  8832  0041FE                     _change_state_to_menu_12:
  8833                           	opt stack 19
  8834                           
  8835                           ;UI.c: 491: cur_state = 12;
  8836                           
  8837                           ;incstack = 0
  8838  0041FE  0E00               	movlw	0
  8839  004200  0100               	movlb	0	; () banked
  8840  004202  6FE1               	movwf	(_cur_state+1)& (0+255),b
  8841  004204  0E0C               	movlw	12
  8842  004206  6FE0               	movwf	_cur_state& (0+255),b
  8843                           
  8844                           ; BSR set to: 0
  8845                           ;UI.c: 493: lcdInst(0b10000000);;
  8846  004208  0E80               	movlw	128
  8847  00420A  EC9B  F023         	call	_lcdInst
  8848                           
  8849                           ;UI.c: 494: printf("1. DATE/TIME    ");
  8850  00420E  0E4D               	movlw	low STR_33
  8851  004210  0100               	movlb	0	; () banked
  8852  004212  6F8E               	movwf	printf@f& (0+255),b
  8853  004214  0EFD               	movlw	high STR_33
  8854  004216  0100               	movlb	0	; () banked
  8855  004218  6F8F               	movwf	(printf@f+1)& (0+255),b
  8856  00421A  ECB8  F008         	call	_printf	;wreg free
  8857                           
  8858                           ;UI.c: 495: lcdInst(0b11000000);;
  8859  00421E  0EC0               	movlw	192
  8860  004220  EC9B  F023         	call	_lcdInst
  8861                           
  8862                           ;UI.c: 496: printf("2. SORT        <");
  8863  004224  0EE6               	movlw	low STR_34
  8864  004226  0100               	movlb	0	; () banked
  8865  004228  6F8E               	movwf	printf@f& (0+255),b
  8866  00422A  0EFD               	movlw	high STR_34
  8867  00422C  0100               	movlb	0	; () banked
  8868  00422E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8869  004230  ECB8  F008         	call	_printf	;wreg free
  8870  004234  0012               	return		;funcret
  8871  004236                     __end_of_change_state_to_menu_12:
  8872                           	opt stack 0
  8873                           tblptru	equ	0xFF8
  8874                           tblptrh	equ	0xFF7
  8875                           tblptrl	equ	0xFF6
  8876                           tablat	equ	0xFF5
  8877                           prodh	equ	0xFF4
  8878                           prodl	equ	0xFF3
  8879                           intcon	equ	0xFF2
  8880                           intcon2	equ	0xFF1
  8881                           intcon3	equ	0xFF0
  8882                           postinc0	equ	0xFEE
  8883                           wreg	equ	0xFE8
  8884                           postdec1	equ	0xFE5
  8885                           fsr1l	equ	0xFE1
  8886                           indf2	equ	0xFDF
  8887                           postinc2	equ	0xFDE
  8888                           postdec2	equ	0xFDD
  8889                           fsr2h	equ	0xFDA
  8890                           fsr2l	equ	0xFD9
  8891                           status	equ	0xFD8
  8892                           
  8893 ;; *************** function ___awmod *****************
  8894 ;; Defined at:
  8895 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8896 ;; Parameters:    Size  Location     Type
  8897 ;;  dividend        2    0[BANK0 ] int 
  8898 ;;  divisor         2    2[BANK0 ] int 
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;  sign            1    5[BANK0 ] unsigned char 
  8901 ;;  counter         1    4[BANK0 ] unsigned char 
  8902 ;; Return value:  Size  Location     Type
  8903 ;;                  2    0[BANK0 ] int 
  8904 ;; Registers used:
  8905 ;;		wreg, status,2, status,0
  8906 ;; Tracked objects:
  8907 ;;		On entry : 0/0
  8908 ;;		On exit  : 0/0
  8909 ;;		Unchanged: 0/0
  8910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8911 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8912 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8914 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8915 ;;Total ram usage:        6 bytes
  8916 ;; Hardware stack levels used:    1
  8917 ;; Hardware stack levels required when called:    7
  8918 ;; This function calls:
  8919 ;;		Nothing
  8920 ;; This function is called by:
  8921 ;;		_UI
  8922 ;; This function uses a non-reentrant model
  8923 ;;
  8924                           
  8925                           	psect	text33
  8926  003808                     __ptext33:
  8927                           	opt stack 0
  8928  003808                     ___awmod:
  8929                           	opt stack 22
  8930                           
  8931                           ;incstack = 0
  8932  003808  0E00               	movlw	0
  8933  00380A  0100               	movlb	0	; () banked
  8934  00380C  6F85               	movwf	___awmod@sign& (0+255),b
  8935                           
  8936                           ; BSR set to: 0
  8937  00380E  0100               	movlb	0	; () banked
  8938  003810  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8939  003812  D008               	goto	l7263
  8940                           
  8941                           ; BSR set to: 0
  8942  003814  0100               	movlb	0	; () banked
  8943  003816  6D80               	negf	___awmod@dividend& (0+255),b
  8944  003818  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8945  00381A  B0D8               	btfsc	status,0,c
  8946  00381C  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8947                           
  8948                           ; BSR set to: 0
  8949  00381E  0E01               	movlw	1
  8950  003820  0100               	movlb	0	; () banked
  8951  003822  6F85               	movwf	___awmod@sign& (0+255),b
  8952  003824                     l7263:
  8953                           
  8954                           ; BSR set to: 0
  8955  003824  0100               	movlb	0	; () banked
  8956  003826  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8957  003828  D005               	goto	l7267
  8958                           
  8959                           ; BSR set to: 0
  8960  00382A  0100               	movlb	0	; () banked
  8961  00382C  6D82               	negf	___awmod@divisor& (0+255),b
  8962  00382E  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8963  003830  B0D8               	btfsc	status,0,c
  8964  003832  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8965  003834                     l7267:
  8966                           
  8967                           ; BSR set to: 0
  8968  003834  0100               	movlb	0	; () banked
  8969  003836  5182               	movf	___awmod@divisor& (0+255),w,b
  8970  003838  0100               	movlb	0	; () banked
  8971  00383A  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8972  00383C  B4D8               	btfsc	status,2,c
  8973  00383E  D026               	goto	l7283
  8974                           
  8975                           ; BSR set to: 0
  8976  003840  0E01               	movlw	1
  8977  003842  0100               	movlb	0	; () banked
  8978  003844  6F84               	movwf	___awmod@counter& (0+255),b
  8979  003846  D006               	goto	l7273
  8980  003848                     l7271:
  8981                           
  8982                           ; BSR set to: 0
  8983  003848  0100               	movlb	0	; () banked
  8984  00384A  90D8               	bcf	status,0,c
  8985  00384C  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8986  00384E  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8987  003850  0100               	movlb	0	; () banked
  8988  003852  2B84               	incf	___awmod@counter& (0+255),f,b
  8989  003854                     l7273:
  8990                           
  8991                           ; BSR set to: 0
  8992  003854  0100               	movlb	0	; () banked
  8993  003856  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8994  003858  D7F7               	goto	l7271
  8995  00385A                     l7275:
  8996                           
  8997                           ; BSR set to: 0
  8998  00385A  0100               	movlb	0	; () banked
  8999  00385C  5182               	movf	___awmod@divisor& (0+255),w,b
  9000  00385E  0100               	movlb	0	; () banked
  9001  003860  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9002  003862  0100               	movlb	0	; () banked
  9003  003864  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9004  003866  0100               	movlb	0	; () banked
  9005  003868  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9006  00386A  A0D8               	btfss	status,0,c
  9007  00386C  D008               	goto	l7279
  9008                           
  9009                           ; BSR set to: 0
  9010  00386E  0100               	movlb	0	; () banked
  9011  003870  5182               	movf	___awmod@divisor& (0+255),w,b
  9012  003872  0100               	movlb	0	; () banked
  9013  003874  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9014  003876  0100               	movlb	0	; () banked
  9015  003878  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9016  00387A  0100               	movlb	0	; () banked
  9017  00387C  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9018  00387E                     l7279:
  9019                           
  9020                           ; BSR set to: 0
  9021  00387E  0100               	movlb	0	; () banked
  9022  003880  90D8               	bcf	status,0,c
  9023  003882  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9024  003884  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9025                           
  9026                           ; BSR set to: 0
  9027  003886  0100               	movlb	0	; () banked
  9028  003888  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9029  00388A  D7E7               	goto	l7275
  9030  00388C                     l7283:
  9031                           
  9032                           ; BSR set to: 0
  9033  00388C  0100               	movlb	0	; () banked
  9034  00388E  5185               	movf	___awmod@sign& (0+255),w,b
  9035  003890  0100               	movlb	0	; () banked
  9036  003892  B4D8               	btfsc	status,2,c
  9037  003894  D005               	goto	l7287
  9038                           
  9039                           ; BSR set to: 0
  9040  003896  0100               	movlb	0	; () banked
  9041  003898  6D80               	negf	___awmod@dividend& (0+255),b
  9042  00389A  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9043  00389C  B0D8               	btfsc	status,0,c
  9044  00389E  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9045  0038A0                     l7287:
  9046                           
  9047                           ; BSR set to: 0
  9048  0038A0  C080  F080         	movff	___awmod@dividend,?___awmod
  9049  0038A4  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9050  0038A8  0012               	return	
  9051  0038AA                     __end_of___awmod:
  9052                           	opt stack 0
  9053                           tblptru	equ	0xFF8
  9054                           tblptrh	equ	0xFF7
  9055                           tblptrl	equ	0xFF6
  9056                           tablat	equ	0xFF5
  9057                           prodh	equ	0xFF4
  9058                           prodl	equ	0xFF3
  9059                           intcon	equ	0xFF2
  9060                           intcon2	equ	0xFF1
  9061                           intcon3	equ	0xFF0
  9062                           postinc0	equ	0xFEE
  9063                           wreg	equ	0xFE8
  9064                           postdec1	equ	0xFE5
  9065                           fsr1l	equ	0xFE1
  9066                           indf2	equ	0xFDF
  9067                           postinc2	equ	0xFDE
  9068                           postdec2	equ	0xFDD
  9069                           fsr2h	equ	0xFDA
  9070                           fsr2l	equ	0xFD9
  9071                           status	equ	0xFD8
  9072                           
  9073 ;; *************** function ___awdiv *****************
  9074 ;; Defined at:
  9075 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9076 ;; Parameters:    Size  Location     Type
  9077 ;;  dividend        2    6[BANK0 ] int 
  9078 ;;  divisor         2    8[BANK0 ] int 
  9079 ;; Auto vars:     Size  Location     Type
  9080 ;;  quotient        2   12[BANK0 ] int 
  9081 ;;  sign            1   11[BANK0 ] unsigned char 
  9082 ;;  counter         1   10[BANK0 ] unsigned char 
  9083 ;; Return value:  Size  Location     Type
  9084 ;;                  2    6[BANK0 ] int 
  9085 ;; Registers used:
  9086 ;;		wreg, status,2, status,0
  9087 ;; Tracked objects:
  9088 ;;		On entry : 0/0
  9089 ;;		On exit  : 0/0
  9090 ;;		Unchanged: 0/0
  9091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9092 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9093 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9095 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9096 ;;Total ram usage:        8 bytes
  9097 ;; Hardware stack levels used:    1
  9098 ;; Hardware stack levels required when called:    7
  9099 ;; This function calls:
  9100 ;;		Nothing
  9101 ;; This function is called by:
  9102 ;;		_UI
  9103 ;; This function uses a non-reentrant model
  9104 ;;
  9105                           
  9106                           	psect	text34
  9107  0035E4                     __ptext34:
  9108                           	opt stack 0
  9109  0035E4                     ___awdiv:
  9110                           	opt stack 22
  9111                           
  9112                           ; BSR set to: 0
  9113                           ;incstack = 0
  9114  0035E4  0E00               	movlw	0
  9115  0035E6  0100               	movlb	0	; () banked
  9116  0035E8  6F8B               	movwf	___awdiv@sign& (0+255),b
  9117                           
  9118                           ; BSR set to: 0
  9119  0035EA  0100               	movlb	0	; () banked
  9120  0035EC  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9121  0035EE  D008               	goto	l7219
  9122                           
  9123                           ; BSR set to: 0
  9124  0035F0  0100               	movlb	0	; () banked
  9125  0035F2  6D88               	negf	___awdiv@divisor& (0+255),b
  9126  0035F4  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9127  0035F6  B0D8               	btfsc	status,0,c
  9128  0035F8  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9129                           
  9130                           ; BSR set to: 0
  9131  0035FA  0E01               	movlw	1
  9132  0035FC  0100               	movlb	0	; () banked
  9133  0035FE  6F8B               	movwf	___awdiv@sign& (0+255),b
  9134  003600                     l7219:
  9135                           
  9136                           ; BSR set to: 0
  9137  003600  0100               	movlb	0	; () banked
  9138  003602  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9139  003604  D008               	goto	l7225
  9140                           
  9141                           ; BSR set to: 0
  9142  003606  0100               	movlb	0	; () banked
  9143  003608  6D86               	negf	___awdiv@dividend& (0+255),b
  9144  00360A  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9145  00360C  B0D8               	btfsc	status,0,c
  9146  00360E  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9147                           
  9148                           ; BSR set to: 0
  9149  003610  0E01               	movlw	1
  9150  003612  0100               	movlb	0	; () banked
  9151  003614  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  9152  003616                     l7225:
  9153                           
  9154                           ; BSR set to: 0
  9155  003616  0E00               	movlw	0
  9156  003618  0100               	movlb	0	; () banked
  9157  00361A  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9158  00361C  0E00               	movlw	0
  9159  00361E  6F8C               	movwf	___awdiv@quotient& (0+255),b
  9160                           
  9161                           ; BSR set to: 0
  9162  003620  0100               	movlb	0	; () banked
  9163  003622  5188               	movf	___awdiv@divisor& (0+255),w,b
  9164  003624  0100               	movlb	0	; () banked
  9165  003626  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9166  003628  B4D8               	btfsc	status,2,c
  9167  00362A  D02C               	goto	l7247
  9168                           
  9169                           ; BSR set to: 0
  9170  00362C  0E01               	movlw	1
  9171  00362E  0100               	movlb	0	; () banked
  9172  003630  6F8A               	movwf	___awdiv@counter& (0+255),b
  9173  003632  D006               	goto	l7233
  9174  003634                     l7231:
  9175                           
  9176                           ; BSR set to: 0
  9177  003634  0100               	movlb	0	; () banked
  9178  003636  90D8               	bcf	status,0,c
  9179  003638  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9180  00363A  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9181  00363C  0100               	movlb	0	; () banked
  9182  00363E  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9183  003640                     l7233:
  9184                           
  9185                           ; BSR set to: 0
  9186  003640  0100               	movlb	0	; () banked
  9187  003642  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9188  003644  D7F7               	goto	l7231
  9189  003646                     l7235:
  9190                           
  9191                           ; BSR set to: 0
  9192  003646  0100               	movlb	0	; () banked
  9193  003648  90D8               	bcf	status,0,c
  9194  00364A  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9195  00364C  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9196                           
  9197                           ; BSR set to: 0
  9198  00364E  0100               	movlb	0	; () banked
  9199  003650  5188               	movf	___awdiv@divisor& (0+255),w,b
  9200  003652  0100               	movlb	0	; () banked
  9201  003654  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9202  003656  0100               	movlb	0	; () banked
  9203  003658  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9204  00365A  0100               	movlb	0	; () banked
  9205  00365C  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9206  00365E  A0D8               	btfss	status,0,c
  9207  003660  D00A               	goto	l7243
  9208                           
  9209                           ; BSR set to: 0
  9210  003662  0100               	movlb	0	; () banked
  9211  003664  5188               	movf	___awdiv@divisor& (0+255),w,b
  9212  003666  0100               	movlb	0	; () banked
  9213  003668  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9214  00366A  0100               	movlb	0	; () banked
  9215  00366C  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9216  00366E  0100               	movlb	0	; () banked
  9217  003670  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9218                           
  9219                           ; BSR set to: 0
  9220  003672  0100               	movlb	0	; () banked
  9221  003674  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9222  003676                     l7243:
  9223                           
  9224                           ; BSR set to: 0
  9225  003676  0100               	movlb	0	; () banked
  9226  003678  90D8               	bcf	status,0,c
  9227  00367A  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9228  00367C  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9229                           
  9230                           ; BSR set to: 0
  9231  00367E  0100               	movlb	0	; () banked
  9232  003680  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9233  003682  D7E1               	goto	l7235
  9234  003684                     l7247:
  9235                           
  9236                           ; BSR set to: 0
  9237  003684  0100               	movlb	0	; () banked
  9238  003686  518B               	movf	___awdiv@sign& (0+255),w,b
  9239  003688  0100               	movlb	0	; () banked
  9240  00368A  B4D8               	btfsc	status,2,c
  9241  00368C  D005               	goto	l7251
  9242                           
  9243                           ; BSR set to: 0
  9244  00368E  0100               	movlb	0	; () banked
  9245  003690  6D8C               	negf	___awdiv@quotient& (0+255),b
  9246  003692  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9247  003694  B0D8               	btfsc	status,0,c
  9248  003696  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9249  003698                     l7251:
  9250                           
  9251                           ; BSR set to: 0
  9252  003698  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9253  00369C  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9254  0036A0  0012               	return	
  9255  0036A2                     __end_of___awdiv:
  9256                           	opt stack 0
  9257                           tblptru	equ	0xFF8
  9258                           tblptrh	equ	0xFF7
  9259                           tblptrl	equ	0xFF6
  9260                           tablat	equ	0xFF5
  9261                           prodh	equ	0xFF4
  9262                           prodl	equ	0xFF3
  9263                           intcon	equ	0xFF2
  9264                           intcon2	equ	0xFF1
  9265                           intcon3	equ	0xFF0
  9266                           postinc0	equ	0xFEE
  9267                           wreg	equ	0xFE8
  9268                           postdec1	equ	0xFE5
  9269                           fsr1l	equ	0xFE1
  9270                           indf2	equ	0xFDF
  9271                           postinc2	equ	0xFDE
  9272                           postdec2	equ	0xFDD
  9273                           fsr2h	equ	0xFDA
  9274                           fsr2l	equ	0xFD9
  9275                           status	equ	0xFD8
  9276                           
  9277 ;; *************** function _Test *****************
  9278 ;; Defined at:
  9279 ;;		line 28 in file "Test.c"
  9280 ;; Parameters:    Size  Location     Type
  9281 ;;		None
  9282 ;; Auto vars:     Size  Location     Type
  9283 ;;		None
  9284 ;; Return value:  Size  Location     Type
  9285 ;;                  1    wreg      void 
  9286 ;; Registers used:
  9287 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9288 ;; Tracked objects:
  9289 ;;		On entry : 0/0
  9290 ;;		On exit  : 0/0
  9291 ;;		Unchanged: 0/0
  9292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9295 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9296 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9297 ;;Total ram usage:        2 bytes
  9298 ;; Hardware stack levels used:    1
  9299 ;; Hardware stack levels required when called:   11
  9300 ;; This function calls:
  9301 ;;		_BothServos
  9302 ;;		_EEPROMTest
  9303 ;;		_PortTestA5
  9304 ;;		_PortTests
  9305 ;;		_PusherTestA5
  9306 ;;		_ToggleTestA5
  9307 ;;		_actuatorTest
  9308 ;;		_algorithmTest
  9309 ;;		_lcdInst
  9310 ;;		_printf
  9311 ;;		_sensorTest
  9312 ;; This function is called by:
  9313 ;;		_main
  9314 ;; This function uses a non-reentrant model
  9315 ;;
  9316                           
  9317                           	psect	text35
  9318  003262                     __ptext35:
  9319                           	opt stack 0
  9320  003262                     _Test:
  9321                           	opt stack 19
  9322  003262                     
  9323                           ;Test.c: 31: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9324  003262  0E01               	movlw	1
  9325  003264  EC9B  F023         	call	_lcdInst
  9326  003268  0E68               	movlw	104
  9327  00326A  0100               	movlb	0	; () banked
  9328  00326C  6FC6               	movwf	??_Test& (0+255),b
  9329  00326E  0EE4               	movlw	228
  9330  003270                     u7357:
  9331  003270  2EE8               	decfsz	wreg,f,c
  9332  003272  D7FE               	bra	u7357
  9333  003274  2FC6               	decfsz	??_Test& (0+255),f,b
  9334  003276  D7FC               	bra	u7357
  9335  003278  F000               	nop	
  9336  00327A  0E80               	movlw	128
  9337  00327C  EC9B  F023         	call	_lcdInst
  9338                           
  9339                           ;Test.c: 32: printf("1.ALG|2.SNR|3.AC");
  9340  003280  0E92               	movlw	low STR_68
  9341  003282  0100               	movlb	0	; () banked
  9342  003284  6F8E               	movwf	printf@f& (0+255),b
  9343  003286  0EFC               	movlw	high STR_68
  9344  003288  0100               	movlb	0	; () banked
  9345  00328A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9346  00328C  ECB8  F008         	call	_printf	;wreg free
  9347                           
  9348                           ;Test.c: 33: lcdInst(0b11000000);;
  9349  003290  0EC0               	movlw	192
  9350  003292  EC9B  F023         	call	_lcdInst
  9351                           
  9352                           ;Test.c: 34: printf("4.HI|5.TOG|6.EEP");
  9353  003296  0EC5               	movlw	low STR_69
  9354  003298  0100               	movlb	0	; () banked
  9355  00329A  6F8E               	movwf	printf@f& (0+255),b
  9356  00329C  0EFC               	movlw	high STR_69
  9357  00329E  0100               	movlb	0	; () banked
  9358  0032A0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9359  0032A2  ECB8  F008         	call	_printf	;wreg free
  9360                           
  9361                           ;Test.c: 35: _delay((unsigned long)((100)*(32000000/4000.0)));
  9362  0032A6  0E05               	movlw	5
  9363  0032A8  0100               	movlb	0	; () banked
  9364  0032AA  6FC7               	movwf	(??_Test+1)& (0+255),b
  9365  0032AC  0E0F               	movlw	15
  9366  0032AE  0100               	movlb	0	; () banked
  9367  0032B0  6FC6               	movwf	??_Test& (0+255),b
  9368  0032B2  0EF1               	movlw	241
  9369  0032B4                     u7367:
  9370  0032B4  2EE8               	decfsz	wreg,f,c
  9371  0032B6  D7FE               	bra	u7367
  9372  0032B8  2FC6               	decfsz	??_Test& (0+255),f,b
  9373  0032BA  D7FC               	bra	u7367
  9374  0032BC  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
  9375  0032BE  D7FA               	bra	u7367
  9376  0032C0                     l1036:
  9377  0032C0  A281               	btfss	3969,1,c	;volatile
  9378  0032C2  D7FE               	goto	l1036
  9379                           
  9380                           ;Test.c: 37: var = PORTB >> 4;
  9381  0032C4  CF81 F0C6          	movff	3969,??_Test	;volatile
  9382  0032C8  0100               	movlb	0	; () banked
  9383  0032CA  3BC6               	swapf	??_Test& (0+255),f,b
  9384  0032CC  0E0F               	movlw	15
  9385  0032CE  17C6               	andwf	??_Test& (0+255),f,b
  9386  0032D0  0100               	movlb	0	; () banked
  9387  0032D2  51C6               	movf	??_Test& (0+255),w,b
  9388  0032D4  0100               	movlb	0	; () banked
  9389  0032D6  6FFA               	movwf	_var& (0+255),b
  9390  0032D8  6BFB               	clrf	(_var+1)& (0+255),b
  9391                           
  9392                           ; BSR set to: 0
  9393                           ;Test.c: 38: var++;
  9394  0032DA  0100               	movlb	0	; () banked
  9395  0032DC  4BFA               	infsnz	_var& (0+255),f,b
  9396  0032DE  2BFB               	incf	(_var+1)& (0+255),f,b
  9397  0032E0                     l1039:
  9398  0032E0  A281               	btfss	3969,1,c	;volatile
  9399  0032E2  D01C               	goto	l7985
  9400  0032E4  D7FD               	goto	l1039
  9401  0032E6                     l7965:
  9402                           
  9403                           ;Test.c: 42: algorithmTest();
  9404  0032E6  EC27  F01A         	call	_algorithmTest	;wreg free
  9405                           
  9406                           ;Test.c: 43: break;
  9407  0032EA  D7BB               	goto	l7947
  9408  0032EC                     l7967:
  9409                           
  9410                           ;Test.c: 45: sensorTest();
  9411  0032EC  EC15  F00E         	call	_sensorTest	;wreg free
  9412                           
  9413                           ;Test.c: 46: break;
  9414  0032F0  D7B8               	goto	l7947
  9415  0032F2                     l7969:
  9416                           
  9417                           ;Test.c: 48: actuatorTest();
  9418  0032F2  EC09  F000         	call	_actuatorTest	;wreg free
  9419                           
  9420                           ;Test.c: 49: break;
  9421  0032F6  D7B5               	goto	l7947
  9422  0032F8                     l7971:
  9423                           
  9424                           ;Test.c: 51: PortTestA5();
  9425  0032F8  EC55  F01C         	call	_PortTestA5	;wreg free
  9426                           
  9427                           ;Test.c: 52: break;
  9428  0032FC  D7B2               	goto	l7947
  9429  0032FE                     l7973:
  9430                           
  9431                           ;Test.c: 54: ToggleTestA5();
  9432  0032FE  ECE6  F01C         	call	_ToggleTestA5	;wreg free
  9433                           
  9434                           ;Test.c: 55: break;
  9435  003302  D7AF               	goto	l7947
  9436  003304                     l7975:
  9437                           
  9438                           ;Test.c: 57: EEPROMTest();
  9439  003304  ECCD  F023         	call	_EEPROMTest	;wreg free
  9440                           
  9441                           ;Test.c: 58: break;
  9442  003308  D7AC               	goto	l7947
  9443  00330A                     l7977:
  9444                           
  9445                           ;Test.c: 60: PusherTestA5();
  9446  00330A  EC83  F01F         	call	_PusherTestA5	;wreg free
  9447                           
  9448                           ;Test.c: 61: break;
  9449  00330E  D7A9               	goto	l7947
  9450  003310                     l7979:
  9451                           
  9452                           ;Test.c: 63: PortTests();
  9453  003310  EC6D  F01D         	call	_PortTests	;wreg free
  9454                           
  9455                           ;Test.c: 64: break;
  9456  003314  D7A6               	goto	l7947
  9457  003316                     l7981:
  9458                           
  9459                           ;Test.c: 66: BothServos();
  9460  003316  EC8B  F00C         	call	_BothServos	;wreg free
  9461                           
  9462                           ;Test.c: 70: }
  9463                           
  9464                           ;Test.c: 69: break;
  9465                           
  9466                           ;Test.c: 68: default:
  9467                           
  9468                           ;Test.c: 67: break;
  9469  00331A  D7A3               	goto	l7947
  9470  00331C                     l7985:
  9471  00331C  C0FA  F0C6         	movff	_var,??_Test
  9472  003320  C0FB  F0C7         	movff	_var+1,??_Test+1
  9473                           
  9474                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9475                           ; Switch size 1, requested type "space"
  9476                           ; Number of cases is 1, Range of values is 0 to 0
  9477                           ; switch strategies available:
  9478                           ; Name         Instructions Cycles
  9479                           ; simple_byte            4     3 (average)
  9480                           ;	Chosen strategy is simple_byte
  9481  003324  0100               	movlb	0	; () banked
  9482  003326  51C7               	movf	(??_Test+1)& (0+255),w,b
  9483  003328  0A00               	xorlw	0	; case 0
  9484  00332A  A4D8               	btfss	status,2,c
  9485  00332C  D79A               	goto	l7947
  9486                           
  9487                           ; BSR set to: 0
  9488                           ; Switch size 1, requested type "space"
  9489                           ; Number of cases is 9, Range of values is 1 to 10
  9490                           ; switch strategies available:
  9491                           ; Name         Instructions Cycles
  9492                           ; simple_byte           28    15 (average)
  9493                           ;	Chosen strategy is simple_byte
  9494  00332E  0100               	movlb	0	; () banked
  9495  003330  51C6               	movf	??_Test& (0+255),w,b
  9496  003332  0A01               	xorlw	1	; case 1
  9497  003334  B4D8               	btfsc	status,2,c
  9498  003336  D7D7               	goto	l7965
  9499  003338  0A03               	xorlw	3	; case 2
  9500  00333A  B4D8               	btfsc	status,2,c
  9501  00333C  D7D7               	goto	l7967
  9502  00333E  0A01               	xorlw	1	; case 3
  9503  003340  B4D8               	btfsc	status,2,c
  9504  003342  D7D7               	goto	l7969
  9505  003344  0A06               	xorlw	6	; case 5
  9506  003346  B4D8               	btfsc	status,2,c
  9507  003348  D7D7               	goto	l7971
  9508  00334A  0A03               	xorlw	3	; case 6
  9509  00334C  B4D8               	btfsc	status,2,c
  9510  00334E  D7D7               	goto	l7973
  9511  003350  0A01               	xorlw	1	; case 7
  9512  003352  B4D8               	btfsc	status,2,c
  9513  003354  D7D7               	goto	l7975
  9514  003356  0A0F               	xorlw	15	; case 8
  9515  003358  B4D8               	btfsc	status,2,c
  9516  00335A  D7D7               	goto	l7977
  9517  00335C  0A01               	xorlw	1	; case 9
  9518  00335E  B4D8               	btfsc	status,2,c
  9519  003360  D7D7               	goto	l7979
  9520  003362  0A03               	xorlw	3	; case 10
  9521  003364  B4D8               	btfsc	status,2,c
  9522  003366  D7D7               	goto	l7981
  9523                           
  9524                           ; BSR set to: 0
  9525                           
  9526                           ; BSR set to: 0
  9527  003368  D77C               	goto	l7947
  9528  00336A                     __end_of_Test:
  9529                           	opt stack 0
  9530                           tblptru	equ	0xFF8
  9531                           tblptrh	equ	0xFF7
  9532                           tblptrl	equ	0xFF6
  9533                           tablat	equ	0xFF5
  9534                           prodh	equ	0xFF4
  9535                           prodl	equ	0xFF3
  9536                           intcon	equ	0xFF2
  9537                           intcon2	equ	0xFF1
  9538                           intcon3	equ	0xFF0
  9539                           postinc0	equ	0xFEE
  9540                           wreg	equ	0xFE8
  9541                           postdec1	equ	0xFE5
  9542                           fsr1l	equ	0xFE1
  9543                           indf2	equ	0xFDF
  9544                           postinc2	equ	0xFDE
  9545                           postdec2	equ	0xFDD
  9546                           fsr2h	equ	0xFDA
  9547                           fsr2l	equ	0xFD9
  9548                           status	equ	0xFD8
  9549                           
  9550 ;; *************** function _sensorTest *****************
  9551 ;; Defined at:
  9552 ;;		line 118 in file "Test.c"
  9553 ;; Parameters:    Size  Location     Type
  9554 ;;		None
  9555 ;; Auto vars:     Size  Location     Type
  9556 ;;  res             2   45[BANK0 ] int 
  9557 ;; Return value:  Size  Location     Type
  9558 ;;                  1    wreg      void 
  9559 ;; Registers used:
  9560 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9561 ;; Tracked objects:
  9562 ;;		On entry : 0/0
  9563 ;;		On exit  : 0/0
  9564 ;;		Unchanged: 0/0
  9565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9567 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9568 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9569 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9570 ;;Total ram usage:        4 bytes
  9571 ;; Hardware stack levels used:    1
  9572 ;; Hardware stack levels required when called:   10
  9573 ;; This function calls:
  9574 ;;		_lcdInst
  9575 ;;		_printf
  9576 ;;		_readADC
  9577 ;;		_readMAG
  9578 ;; This function is called by:
  9579 ;;		_Test
  9580 ;; This function uses a non-reentrant model
  9581 ;;
  9582                           
  9583                           	psect	text36
  9584  001C2A                     __ptext36:
  9585                           	opt stack 0
  9586  001C2A                     _sensorTest:
  9587                           	opt stack 19
  9588                           
  9589                           ;Test.c: 120: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9590                           
  9591                           ; BSR set to: 0
  9592                           ;incstack = 0
  9593  001C2A  0E01               	movlw	1
  9594  001C2C  EC9B  F023         	call	_lcdInst
  9595  001C30  0E68               	movlw	104
  9596  001C32  0100               	movlb	0	; () banked
  9597  001C34  6FAB               	movwf	??_sensorTest& (0+255),b
  9598  001C36  0EE4               	movlw	228
  9599  001C38                     u7377:
  9600  001C38  2EE8               	decfsz	wreg,f,c
  9601  001C3A  D7FE               	bra	u7377
  9602  001C3C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9603  001C3E  D7FC               	bra	u7377
  9604  001C40  F000               	nop	
  9605  001C42  0E80               	movlw	128
  9606  001C44  EC9B  F023         	call	_lcdInst
  9607                           
  9608                           ;Test.c: 121: printf("SENSORS");
  9609  001C48  0EAE               	movlw	low STR_77
  9610  001C4A  0100               	movlb	0	; () banked
  9611  001C4C  6F8E               	movwf	printf@f& (0+255),b
  9612  001C4E  0EFF               	movlw	high STR_77
  9613  001C50  0100               	movlb	0	; () banked
  9614  001C52  6F8F               	movwf	(printf@f+1)& (0+255),b
  9615  001C54  ECB8  F008         	call	_printf	;wreg free
  9616                           
  9617                           ;Test.c: 122: lcdInst(0b11000000);;
  9618  001C58  0EC0               	movlw	192
  9619  001C5A  EC9B  F023         	call	_lcdInst
  9620                           
  9621                           ;Test.c: 123: printf("PUSH TO START");
  9622  001C5E  0E0B               	movlw	low STR_71
  9623  001C60  0100               	movlb	0	; () banked
  9624  001C62  6F8E               	movwf	printf@f& (0+255),b
  9625  001C64  0EFF               	movlw	high STR_71
  9626  001C66  0100               	movlb	0	; () banked
  9627  001C68  6F8F               	movwf	(printf@f+1)& (0+255),b
  9628  001C6A  ECB8  F008         	call	_printf	;wreg free
  9629                           
  9630                           ;Test.c: 124: _delay((unsigned long)((100)*(32000000/4000.0)));
  9631  001C6E  0E05               	movlw	5
  9632  001C70  0100               	movlb	0	; () banked
  9633  001C72  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9634  001C74  0E0F               	movlw	15
  9635  001C76  0100               	movlb	0	; () banked
  9636  001C78  6FAB               	movwf	??_sensorTest& (0+255),b
  9637  001C7A  0EF1               	movlw	241
  9638  001C7C                     u7387:
  9639  001C7C  2EE8               	decfsz	wreg,f,c
  9640  001C7E  D7FE               	bra	u7387
  9641  001C80  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9642  001C82  D7FC               	bra	u7387
  9643  001C84  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9644  001C86  D7FA               	bra	u7387
  9645  001C88                     l1068:
  9646  001C88  A281               	btfss	3969,1,c	;volatile
  9647  001C8A  D7FE               	goto	l1068
  9648  001C8C                     l1071:
  9649  001C8C  B281               	btfsc	3969,1,c	;volatile
  9650  001C8E  D7FE               	goto	l1071
  9651                           
  9652                           ;Test.c: 127: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9653  001C90  0E01               	movlw	1
  9654  001C92  EC9B  F023         	call	_lcdInst
  9655  001C96  0E68               	movlw	104
  9656  001C98  0100               	movlb	0	; () banked
  9657  001C9A  6FAB               	movwf	??_sensorTest& (0+255),b
  9658  001C9C  0EE4               	movlw	228
  9659  001C9E                     u7397:
  9660  001C9E  2EE8               	decfsz	wreg,f,c
  9661  001CA0  D7FE               	bra	u7397
  9662  001CA2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9663  001CA4  D7FC               	bra	u7397
  9664  001CA6  F000               	nop	
  9665  001CA8  0E80               	movlw	128
  9666  001CAA  EC9B  F023         	call	_lcdInst
  9667                           
  9668                           ;Test.c: 132: printf("TST: IR SNSR");
  9669  001CAE  0E35               	movlw	low STR_79
  9670  001CB0  0100               	movlb	0	; () banked
  9671  001CB2  6F8E               	movwf	printf@f& (0+255),b
  9672  001CB4  0EFF               	movlw	high STR_79
  9673  001CB6  0100               	movlb	0	; () banked
  9674  001CB8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9675  001CBA  ECB8  F008         	call	_printf	;wreg free
  9676                           
  9677                           ;Test.c: 133: _delay((unsigned long)((100)*(32000000/4000.0)));
  9678  001CBE  0E05               	movlw	5
  9679  001CC0  0100               	movlb	0	; () banked
  9680  001CC2  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9681  001CC4  0E0F               	movlw	15
  9682  001CC6  0100               	movlb	0	; () banked
  9683  001CC8  6FAB               	movwf	??_sensorTest& (0+255),b
  9684  001CCA  0EF1               	movlw	241
  9685  001CCC                     u7407:
  9686  001CCC  2EE8               	decfsz	wreg,f,c
  9687  001CCE  D7FE               	bra	u7407
  9688  001CD0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9689  001CD2  D7FC               	bra	u7407
  9690  001CD4  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9691  001CD6  D7FA               	bra	u7407
  9692                           
  9693                           ;Test.c: 134: LATCbits.LATC5 = 1;
  9694  001CD8  8A8B               	bsf	3979,5,c	;volatile
  9695                           
  9696                           ;Test.c: 135: while(PORTBbits.RB1 == 0){
  9697  001CDA  D05C               	goto	l6565
  9698  001CDC                     l6547:
  9699                           
  9700                           ;Test.c: 136: readADC(0);
  9701  001CDC  0E00               	movlw	0
  9702  001CDE  ECB6  F022         	call	_readADC
  9703                           
  9704                           ;Test.c: 137: int res = ADRESH<<8 | ADRESL;
  9705  001CE2  50C3               	movf	4035,w,c	;volatile
  9706  001CE4  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
  9707  001CE8  0100               	movlb	0	; () banked
  9708  001CEA  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
  9709  001CEC  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
  9710  001CF0  0100               	movlb	0	; () banked
  9711  001CF2  6BAB               	clrf	??_sensorTest& (0+255),b
  9712  001CF4  0100               	movlb	0	; () banked
  9713  001CF6  11AB               	iorwf	??_sensorTest& (0+255),w,b
  9714  001CF8  0100               	movlb	0	; () banked
  9715  001CFA  6FAD               	movwf	sensorTest@res& (0+255),b
  9716  001CFC  0100               	movlb	0	; () banked
  9717  001CFE  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
  9718  001D00  0100               	movlb	0	; () banked
  9719  001D02  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
  9720                           
  9721                           ; BSR set to: 0
  9722                           ;Test.c: 138: IR_signal = (res > 1000) ? 1 : 0;
  9723  001D04  0100               	movlb	0	; () banked
  9724  001D06  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
  9725  001D08  D00A               	goto	u4950
  9726  001D0A  0EE9               	movlw	233
  9727  001D0C  0100               	movlb	0	; () banked
  9728  001D0E  5DAD               	subwf	sensorTest@res& (0+255),w,b
  9729  001D10  0E03               	movlw	3
  9730  001D12  0100               	movlb	0	; () banked
  9731  001D14  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
  9732  001D16  A0D8               	btfss	status,0,c
  9733  001D18  D002               	goto	u4950
  9734  001D1A  0E01               	movlw	1
  9735  001D1C  D001               	goto	u4960
  9736  001D1E                     u4950:
  9737  001D1E  0E00               	movlw	0
  9738  001D20                     u4960:
  9739  001D20  0100               	movlb	0	; () banked
  9740  001D22  6FDA               	movwf	_IR_signal& (0+255),b
  9741  001D24  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  9742                           
  9743                           ;Test.c: 140: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9744  001D26  0E01               	movlw	1
  9745  001D28  EC9B  F023         	call	_lcdInst
  9746  001D2C  0E68               	movlw	104
  9747  001D2E  0100               	movlb	0	; () banked
  9748  001D30  6FAB               	movwf	??_sensorTest& (0+255),b
  9749  001D32  0EE4               	movlw	228
  9750  001D34                     u7417:
  9751  001D34  2EE8               	decfsz	wreg,f,c
  9752  001D36  D7FE               	bra	u7417
  9753  001D38  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9754  001D3A  D7FC               	bra	u7417
  9755  001D3C  F000               	nop	
  9756  001D3E  0E80               	movlw	128
  9757  001D40  EC9B  F023         	call	_lcdInst
  9758                           
  9759                           ;Test.c: 141: printf("IR_signal: %d ", IR_signal);
  9760  001D44  0E5A               	movlw	low STR_80
  9761  001D46  0100               	movlb	0	; () banked
  9762  001D48  6F8E               	movwf	printf@f& (0+255),b
  9763  001D4A  0EFE               	movlw	high STR_80
  9764  001D4C  0100               	movlb	0	; () banked
  9765  001D4E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9766  001D50  C0DA  F090         	movff	_IR_signal,?_printf+2
  9767  001D54  C0DB  F091         	movff	_IR_signal+1,?_printf+3
  9768  001D58  ECB8  F008         	call	_printf	;wreg free
  9769                           
  9770                           ;Test.c: 142: lcdInst(0b11000000);;
  9771  001D5C  0EC0               	movlw	192
  9772  001D5E  EC9B  F023         	call	_lcdInst
  9773                           
  9774                           ;Test.c: 143: printf("%d", res);
  9775  001D62  0E79               	movlw	low (STR_27+16)
  9776  001D64  0100               	movlb	0	; () banked
  9777  001D66  6F8E               	movwf	printf@f& (0+255),b
  9778  001D68  0EFB               	movlw	high (STR_27+16)
  9779  001D6A  0100               	movlb	0	; () banked
  9780  001D6C  6F8F               	movwf	(printf@f+1)& (0+255),b
  9781  001D6E  C0AD  F090         	movff	sensorTest@res,?_printf+2
  9782  001D72  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
  9783  001D76  ECB8  F008         	call	_printf	;wreg free
  9784                           
  9785                           ;Test.c: 144: _delay((unsigned long)((100)*(32000000/4000.0)));
  9786  001D7A  0E05               	movlw	5
  9787  001D7C  0100               	movlb	0	; () banked
  9788  001D7E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9789  001D80  0E0F               	movlw	15
  9790  001D82  0100               	movlb	0	; () banked
  9791  001D84  6FAB               	movwf	??_sensorTest& (0+255),b
  9792  001D86  0EF1               	movlw	241
  9793  001D88                     u7427:
  9794  001D88  2EE8               	decfsz	wreg,f,c
  9795  001D8A  D7FE               	bra	u7427
  9796  001D8C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9797  001D8E  D7FC               	bra	u7427
  9798  001D90  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9799  001D92  D7FA               	bra	u7427
  9800  001D94                     l6565:
  9801  001D94  A281               	btfss	3969,1,c	;volatile
  9802  001D96  D7A2               	goto	l6547
  9803                           
  9804                           ;Test.c: 145: }
  9805                           ;Test.c: 146: LATCbits.LATC5 = 0;
  9806  001D98  9A8B               	bcf	3979,5,c	;volatile
  9807                           
  9808                           ;Test.c: 153: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9809  001D9A  0E01               	movlw	1
  9810  001D9C  EC9B  F023         	call	_lcdInst
  9811  001DA0  0E68               	movlw	104
  9812  001DA2  0100               	movlb	0	; () banked
  9813  001DA4  6FAB               	movwf	??_sensorTest& (0+255),b
  9814  001DA6  0EE4               	movlw	228
  9815  001DA8                     u7437:
  9816  001DA8  2EE8               	decfsz	wreg,f,c
  9817  001DAA  D7FE               	bra	u7437
  9818  001DAC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9819  001DAE  D7FC               	bra	u7437
  9820  001DB0  F000               	nop	
  9821  001DB2  0E80               	movlw	128
  9822  001DB4  EC9B  F023         	call	_lcdInst
  9823                           
  9824                           ;Test.c: 154: printf("TST: MAGNETISM");
  9825  001DB8  0E87               	movlw	low STR_82
  9826  001DBA  0100               	movlb	0	; () banked
  9827  001DBC  6F8E               	movwf	printf@f& (0+255),b
  9828  001DBE  0EFE               	movlw	high STR_82
  9829  001DC0  0100               	movlb	0	; () banked
  9830  001DC2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9831  001DC4  ECB8  F008         	call	_printf	;wreg free
  9832                           
  9833                           ;Test.c: 155: _delay((unsigned long)((100)*(32000000/4000.0)));
  9834  001DC8  0E05               	movlw	5
  9835  001DCA  0100               	movlb	0	; () banked
  9836  001DCC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9837  001DCE  0E0F               	movlw	15
  9838  001DD0  0100               	movlb	0	; () banked
  9839  001DD2  6FAB               	movwf	??_sensorTest& (0+255),b
  9840  001DD4  0EF1               	movlw	241
  9841  001DD6                     u7447:
  9842  001DD6  2EE8               	decfsz	wreg,f,c
  9843  001DD8  D7FE               	bra	u7447
  9844  001DDA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9845  001DDC  D7FC               	bra	u7447
  9846  001DDE  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9847  001DE0  D7FA               	bra	u7447
  9848                           
  9849                           ;Test.c: 156: while(PORTBbits.RB1 == 0){
  9850  001DE2  D021               	goto	l6583
  9851  001DE4                     l6577:
  9852                           
  9853                           ;Test.c: 157: readMAG();
  9854  001DE4  EC79  F020         	call	_readMAG	;wreg free
  9855                           
  9856                           ;Test.c: 158: lcdInst(0b10000000);;
  9857  001DE8  0E80               	movlw	128
  9858  001DEA  EC9B  F023         	call	_lcdInst
  9859                           
  9860                           ;Test.c: 159: lcdInst(0b11000000);;
  9861  001DEE  0EC0               	movlw	192
  9862  001DF0  EC9B  F023         	call	_lcdInst
  9863                           
  9864                           ;Test.c: 160: printf("MAG_signal: %d ", MAG_signal);
  9865  001DF4  0E2A               	movlw	low STR_83
  9866  001DF6  0100               	movlb	0	; () banked
  9867  001DF8  6F8E               	movwf	printf@f& (0+255),b
  9868  001DFA  0EFE               	movlw	high STR_83
  9869  001DFC  0100               	movlb	0	; () banked
  9870  001DFE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9871  001E00  C0DC  F090         	movff	_MAG_signal,?_printf+2
  9872  001E04  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
  9873  001E08  ECB8  F008         	call	_printf	;wreg free
  9874                           
  9875                           ;Test.c: 161: _delay((unsigned long)((100)*(32000000/4000.0)));
  9876  001E0C  0E05               	movlw	5
  9877  001E0E  0100               	movlb	0	; () banked
  9878  001E10  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9879  001E12  0E0F               	movlw	15
  9880  001E14  0100               	movlb	0	; () banked
  9881  001E16  6FAB               	movwf	??_sensorTest& (0+255),b
  9882  001E18  0EF1               	movlw	241
  9883  001E1A                     u7457:
  9884  001E1A  2EE8               	decfsz	wreg,f,c
  9885  001E1C  D7FE               	bra	u7457
  9886  001E1E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9887  001E20  D7FC               	bra	u7457
  9888  001E22  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9889  001E24  D7FA               	bra	u7457
  9890  001E26                     l6583:
  9891  001E26  A281               	btfss	3969,1,c	;volatile
  9892  001E28  D7DD               	goto	l6577
  9893                           
  9894                           ;Test.c: 162: }
  9895                           ;Test.c: 167: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9896  001E2A  0E01               	movlw	1
  9897  001E2C  EC9B  F023         	call	_lcdInst
  9898  001E30  0E68               	movlw	104
  9899  001E32  0100               	movlb	0	; () banked
  9900  001E34  6FAB               	movwf	??_sensorTest& (0+255),b
  9901  001E36  0EE4               	movlw	228
  9902  001E38                     u7467:
  9903  001E38  2EE8               	decfsz	wreg,f,c
  9904  001E3A  D7FE               	bra	u7467
  9905  001E3C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9906  001E3E  D7FC               	bra	u7467
  9907  001E40  F000               	nop	
  9908  001E42  0E80               	movlw	128
  9909  001E44  EC9B  F023         	call	_lcdInst
  9910                           
  9911                           ;Test.c: 168: printf("TST: COND");
  9912  001E48  0E87               	movlw	low STR_84
  9913  001E4A  0100               	movlb	0	; () banked
  9914  001E4C  6F8E               	movwf	printf@f& (0+255),b
  9915  001E4E  0EFF               	movlw	high STR_84
  9916  001E50  0100               	movlb	0	; () banked
  9917  001E52  6F8F               	movwf	(printf@f+1)& (0+255),b
  9918  001E54  ECB8  F008         	call	_printf	;wreg free
  9919                           
  9920                           ;Test.c: 169: _delay((unsigned long)((100)*(32000000/4000.0)));
  9921  001E58  0E05               	movlw	5
  9922  001E5A  0100               	movlb	0	; () banked
  9923  001E5C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9924  001E5E  0E0F               	movlw	15
  9925  001E60  0100               	movlb	0	; () banked
  9926  001E62  6FAB               	movwf	??_sensorTest& (0+255),b
  9927  001E64  0EF1               	movlw	241
  9928  001E66                     u7477:
  9929  001E66  2EE8               	decfsz	wreg,f,c
  9930  001E68  D7FE               	bra	u7477
  9931  001E6A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9932  001E6C  D7FC               	bra	u7477
  9933  001E6E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9934  001E70  D7FA               	bra	u7477
  9935  001E72                     l6595:
  9936                           
  9937                           ;Test.c: 171: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9938  001E72  0E01               	movlw	1
  9939  001E74  EC9B  F023         	call	_lcdInst
  9940  001E78  0E68               	movlw	104
  9941  001E7A  0100               	movlb	0	; () banked
  9942  001E7C  6FAB               	movwf	??_sensorTest& (0+255),b
  9943  001E7E  0EE4               	movlw	228
  9944  001E80                     u7487:
  9945  001E80  2EE8               	decfsz	wreg,f,c
  9946  001E82  D7FE               	bra	u7487
  9947  001E84  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9948  001E86  D7FC               	bra	u7487
  9949  001E88  F000               	nop	
  9950  001E8A  0E80               	movlw	128
  9951  001E8C  EC9B  F023         	call	_lcdInst
  9952                           
  9953                           ;Test.c: 172: printf("TST: COND");
  9954  001E90  0E87               	movlw	low STR_84
  9955  001E92  0100               	movlb	0	; () banked
  9956  001E94  6F8E               	movwf	printf@f& (0+255),b
  9957  001E96  0EFF               	movlw	high STR_84
  9958  001E98  0100               	movlb	0	; () banked
  9959  001E9A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9960  001E9C  ECB8  F008         	call	_printf	;wreg free
  9961                           
  9962                           ;Test.c: 173: while(PORTBbits.RB1 == 0){
  9963  001EA0  D01B               	goto	l6607
  9964  001EA2                     l6603:
  9965                           
  9966                           ;Test.c: 177: lcdInst(0b10000000);;lcdInst(0b11000000);;
  9967  001EA2  0E80               	movlw	128
  9968  001EA4  EC9B  F023         	call	_lcdInst
  9969  001EA8  0EC0               	movlw	192
  9970  001EAA  EC9B  F023         	call	_lcdInst
  9971                           
  9972                           ;Test.c: 178: printf("COND: %d", PORTAbits.RA2);
  9973  001EAE  0EA5               	movlw	low STR_86
  9974  001EB0  0100               	movlb	0	; () banked
  9975  001EB2  6F8E               	movwf	printf@f& (0+255),b
  9976  001EB4  0EFF               	movlw	high STR_86
  9977  001EB6  0100               	movlb	0	; () banked
  9978  001EB8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9979  001EBA  A480               	btfss	3968,2,c	;volatile
  9980  001EBC  D004               	goto	u4990
  9981  001EBE  0100               	movlb	0	; () banked
  9982  001EC0  6BAB               	clrf	??_sensorTest& (0+255),b
  9983  001EC2  2BAB               	incf	??_sensorTest& (0+255),f,b
  9984  001EC4  D002               	goto	u4998
  9985  001EC6                     u4990:
  9986  001EC6  0100               	movlb	0	; () banked
  9987  001EC8  6BAB               	clrf	??_sensorTest& (0+255),b
  9988  001ECA                     u4998:
  9989  001ECA  0100               	movlb	0	; () banked
  9990  001ECC  51AB               	movf	??_sensorTest& (0+255),w,b
  9991  001ECE  0100               	movlb	0	; () banked
  9992  001ED0  6F90               	movwf	(?_printf+2)& (0+255),b
  9993  001ED2  6B91               	clrf	(?_printf+3)& (0+255),b
  9994  001ED4  ECB8  F008         	call	_printf	;wreg free
  9995  001ED8                     l6607:
  9996  001ED8  A281               	btfss	3969,1,c	;volatile
  9997  001EDA  D7E3               	goto	l6603
  9998                           
  9999                           ;Test.c: 179: }
 10000                           ;Test.c: 180: if(PORTB >> 4 == 0b1111){
 10001  001EDC  3881               	swapf	3969,w,c	;volatile
 10002  001EDE  0B0F               	andlw	15
 10003  001EE0  0A0F               	xorlw	15
 10004  001EE2  B4D8               	btfsc	status,2,c
 10005  001EE4  0012               	return	
 10006                           
 10007                           ;Test.c: 183: else{
 10008                           ;Test.c: 184: LATAbits.LATA3 = 1;
 10009                           
 10010                           ;Test.c: 182: }
 10011                           
 10012                           ;Test.c: 181: break;
 10013  001EE6  8689               	bsf	3977,3,c	;volatile
 10014                           
 10015                           ;Test.c: 185: while(PORTBbits.RB1 == 1){
 10016  001EE8  D01B               	goto	l6619
 10017  001EEA                     l6615:
 10018                           
 10019                           ;Test.c: 187: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10020  001EEA  0E80               	movlw	128
 10021  001EEC  EC9B  F023         	call	_lcdInst
 10022  001EF0  0EC0               	movlw	192
 10023  001EF2  EC9B  F023         	call	_lcdInst
 10024                           
 10025                           ;Test.c: 188: printf("COND: %d", PORTAbits.RA2);
 10026  001EF6  0EA5               	movlw	low STR_86
 10027  001EF8  0100               	movlb	0	; () banked
 10028  001EFA  6F8E               	movwf	printf@f& (0+255),b
 10029  001EFC  0EFF               	movlw	high STR_86
 10030  001EFE  0100               	movlb	0	; () banked
 10031  001F00  6F8F               	movwf	(printf@f+1)& (0+255),b
 10032  001F02  A480               	btfss	3968,2,c	;volatile
 10033  001F04  D004               	goto	u5020
 10034  001F06  0100               	movlb	0	; () banked
 10035  001F08  6BAB               	clrf	??_sensorTest& (0+255),b
 10036  001F0A  2BAB               	incf	??_sensorTest& (0+255),f,b
 10037  001F0C  D002               	goto	u5028
 10038  001F0E                     u5020:
 10039  001F0E  0100               	movlb	0	; () banked
 10040  001F10  6BAB               	clrf	??_sensorTest& (0+255),b
 10041  001F12                     u5028:
 10042  001F12  0100               	movlb	0	; () banked
 10043  001F14  51AB               	movf	??_sensorTest& (0+255),w,b
 10044  001F16  0100               	movlb	0	; () banked
 10045  001F18  6F90               	movwf	(?_printf+2)& (0+255),b
 10046  001F1A  6B91               	clrf	(?_printf+3)& (0+255),b
 10047  001F1C  ECB8  F008         	call	_printf	;wreg free
 10048  001F20                     l6619:
 10049  001F20  B281               	btfsc	3969,1,c	;volatile
 10050  001F22  D7E3               	goto	l6615
 10051                           
 10052                           ;Test.c: 189: }
 10053                           ;Test.c: 190: LATAbits.LATA3 = ~1;
 10054  001F24  9689               	bcf	3977,3,c	;volatile
 10055  001F26  D7A5               	goto	l6595
 10056  001F28                     __end_of_sensorTest:
 10057                           	opt stack 0
 10058                           tblptru	equ	0xFF8
 10059                           tblptrh	equ	0xFF7
 10060                           tblptrl	equ	0xFF6
 10061                           tablat	equ	0xFF5
 10062                           prodh	equ	0xFF4
 10063                           prodl	equ	0xFF3
 10064                           intcon	equ	0xFF2
 10065                           intcon2	equ	0xFF1
 10066                           intcon3	equ	0xFF0
 10067                           postinc0	equ	0xFEE
 10068                           wreg	equ	0xFE8
 10069                           postdec1	equ	0xFE5
 10070                           fsr1l	equ	0xFE1
 10071                           indf2	equ	0xFDF
 10072                           postinc2	equ	0xFDE
 10073                           postdec2	equ	0xFDD
 10074                           fsr2h	equ	0xFDA
 10075                           fsr2l	equ	0xFD9
 10076                           status	equ	0xFD8
 10077                           
 10078 ;; *************** function _readMAG *****************
 10079 ;; Defined at:
 10080 ;;		line 29 in file "ADCFunctionality.c"
 10081 ;; Parameters:    Size  Location     Type
 10082 ;;		None
 10083 ;; Auto vars:     Size  Location     Type
 10084 ;;  res             2    4[BANK0 ] int 
 10085 ;; Return value:  Size  Location     Type
 10086 ;;                  1    wreg      void 
 10087 ;; Registers used:
 10088 ;;		wreg, status,2, status,0, cstack
 10089 ;; Tracked objects:
 10090 ;;		On entry : 0/0
 10091 ;;		On exit  : 0/0
 10092 ;;		Unchanged: 0/0
 10093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10095 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10096 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10097 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10098 ;;Total ram usage:        4 bytes
 10099 ;; Hardware stack levels used:    1
 10100 ;; Hardware stack levels required when called:    8
 10101 ;; This function calls:
 10102 ;;		_readADC
 10103 ;; This function is called by:
 10104 ;;		_getMAG
 10105 ;;		_sensorTest
 10106 ;; This function uses a non-reentrant model
 10107 ;;
 10108                           
 10109                           	psect	text37
 10110  0040F2                     __ptext37:
 10111                           	opt stack 0
 10112  0040F2                     _readMAG:
 10113                           	opt stack 19
 10114                           
 10115                           ;ADCFunctionality.c: 30: readADC(1);
 10116                           
 10117                           ;incstack = 0
 10118  0040F2  0E01               	movlw	1
 10119  0040F4  ECB6  F022         	call	_readADC
 10120                           
 10121                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 10122  0040F8  50C3               	movf	4035,w,c	;volatile
 10123  0040FA  CFC4 F082          	movff	4036,??_readMAG	;volatile
 10124  0040FE  0100               	movlb	0	; () banked
 10125  004100  6B83               	clrf	(??_readMAG+1)& (0+255),b
 10126  004102  C082  F083         	movff	??_readMAG,??_readMAG+1
 10127  004106  0100               	movlb	0	; () banked
 10128  004108  6B82               	clrf	??_readMAG& (0+255),b
 10129  00410A  0100               	movlb	0	; () banked
 10130  00410C  1182               	iorwf	??_readMAG& (0+255),w,b
 10131  00410E  0100               	movlb	0	; () banked
 10132  004110  6F84               	movwf	readMAG@res& (0+255),b
 10133  004112  0100               	movlb	0	; () banked
 10134  004114  5183               	movf	(??_readMAG+1)& (0+255),w,b
 10135  004116  0100               	movlb	0	; () banked
 10136  004118  6F85               	movwf	(readMAG@res+1)& (0+255),b
 10137                           
 10138                           ; BSR set to: 0
 10139                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 10140  00411A  0100               	movlb	0	; () banked
 10141  00411C  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 10142  00411E  D008               	goto	u3751
 10143  004120  0100               	movlb	0	; () banked
 10144  004122  5185               	movf	(readMAG@res+1)& (0+255),w,b
 10145  004124  E107               	bnz	u3750
 10146  004126  0E96               	movlw	150
 10147  004128  0100               	movlb	0	; () banked
 10148  00412A  5D84               	subwf	readMAG@res& (0+255),w,b
 10149  00412C  B0D8               	btfsc	status,0,c
 10150  00412E  D002               	goto	u3750
 10151  004130                     u3751:
 10152  004130  0E01               	movlw	1
 10153  004132  D001               	goto	u3760
 10154  004134                     u3750:
 10155  004134  0E00               	movlw	0
 10156  004136                     u3760:
 10157  004136  0100               	movlb	0	; () banked
 10158  004138  6FDC               	movwf	_MAG_signal& (0+255),b
 10159  00413A  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
 10160                           
 10161                           ; BSR set to: 0
 10162  00413C  0012               	return		;funcret
 10163  00413E                     __end_of_readMAG:
 10164                           	opt stack 0
 10165                           tblptru	equ	0xFF8
 10166                           tblptrh	equ	0xFF7
 10167                           tblptrl	equ	0xFF6
 10168                           tablat	equ	0xFF5
 10169                           prodh	equ	0xFF4
 10170                           prodl	equ	0xFF3
 10171                           intcon	equ	0xFF2
 10172                           intcon2	equ	0xFF1
 10173                           intcon3	equ	0xFF0
 10174                           postinc0	equ	0xFEE
 10175                           wreg	equ	0xFE8
 10176                           postdec1	equ	0xFE5
 10177                           fsr1l	equ	0xFE1
 10178                           indf2	equ	0xFDF
 10179                           postinc2	equ	0xFDE
 10180                           postdec2	equ	0xFDD
 10181                           fsr2h	equ	0xFDA
 10182                           fsr2l	equ	0xFD9
 10183                           status	equ	0xFD8
 10184                           
 10185 ;; *************** function _readADC *****************
 10186 ;; Defined at:
 10187 ;;		line 15 in file "ADCFunctionality.c"
 10188 ;; Parameters:    Size  Location     Type
 10189 ;;  channel         1    wreg     unsigned char 
 10190 ;; Auto vars:     Size  Location     Type
 10191 ;;  channel         1    1[BANK0 ] unsigned char 
 10192 ;; Return value:  Size  Location     Type
 10193 ;;                  1    wreg      void 
 10194 ;; Registers used:
 10195 ;;		wreg, status,2, status,0, cstack
 10196 ;; Tracked objects:
 10197 ;;		On entry : 0/0
 10198 ;;		On exit  : 0/0
 10199 ;;		Unchanged: 0/0
 10200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10202 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10203 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10204 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10205 ;;Total ram usage:        2 bytes
 10206 ;; Hardware stack levels used:    1
 10207 ;; Hardware stack levels required when called:    7
 10208 ;; This function calls:
 10209 ;;		Nothing
 10210 ;; This function is called by:
 10211 ;;		_readIR
 10212 ;;		_readMAG
 10213 ;;		_sensorTest
 10214 ;; This function uses a non-reentrant model
 10215 ;;
 10216                           
 10217                           	psect	text38
 10218  00456C                     __ptext38:
 10219                           	opt stack 0
 10220  00456C                     _readADC:
 10221                           	opt stack 19
 10222                           
 10223                           ; BSR set to: 0
 10224                           ;incstack = 0
 10225                           ;readADC@channel stored from wreg
 10226  00456C  0100               	movlb	0	; () banked
 10227  00456E  6F81               	movwf	readADC@channel& (0+255),b
 10228                           
 10229                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 10230  004570  0100               	movlb	0	; () banked
 10231  004572  4581               	rlncf	readADC@channel& (0+255),w,b
 10232  004574  46E8               	rlncf	wreg,f,c
 10233  004576  0BFC               	andlw	252
 10234  004578  6EC2               	movwf	4034,c	;volatile
 10235                           
 10236                           ; BSR set to: 0
 10237                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 10238  00457A  80C2               	bsf	4034,0,c	;volatile
 10239                           
 10240                           ; BSR set to: 0
 10241                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 10242  00457C  82C2               	bsf	4034,1,c	;volatile
 10243                           
 10244                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 10245  00457E  D009               	goto	l5213
 10246  004580                     l5211:
 10247  004580  0E34               	movlw	52
 10248  004582  0100               	movlb	0	; () banked
 10249  004584  6F80               	movwf	??_readADC& (0+255),b
 10250  004586  0EF1               	movlw	241
 10251  004588                     u7497:
 10252  004588  2EE8               	decfsz	wreg,f,c
 10253  00458A  D7FE               	bra	u7497
 10254  00458C  2F80               	decfsz	??_readADC& (0+255),f,b
 10255  00458E  D7FC               	bra	u7497
 10256  004590  D000               	nop2	
 10257  004592                     l5213:
 10258  004592  A2C2               	btfss	4034,1,c	;volatile
 10259  004594  0012               	return	
 10260  004596  D7F4               	goto	l5211
 10261  004598                     __end_of_readADC:
 10262                           	opt stack 0
 10263                           tblptru	equ	0xFF8
 10264                           tblptrh	equ	0xFF7
 10265                           tblptrl	equ	0xFF6
 10266                           tablat	equ	0xFF5
 10267                           prodh	equ	0xFF4
 10268                           prodl	equ	0xFF3
 10269                           intcon	equ	0xFF2
 10270                           intcon2	equ	0xFF1
 10271                           intcon3	equ	0xFF0
 10272                           postinc0	equ	0xFEE
 10273                           wreg	equ	0xFE8
 10274                           postdec1	equ	0xFE5
 10275                           fsr1l	equ	0xFE1
 10276                           indf2	equ	0xFDF
 10277                           postinc2	equ	0xFDE
 10278                           postdec2	equ	0xFDD
 10279                           fsr2h	equ	0xFDA
 10280                           fsr2l	equ	0xFD9
 10281                           status	equ	0xFD8
 10282                           
 10283 ;; *************** function _algorithmTest *****************
 10284 ;; Defined at:
 10285 ;;		line 74 in file "Test.c"
 10286 ;; Parameters:    Size  Location     Type
 10287 ;;		None
 10288 ;; Auto vars:     Size  Location     Type
 10289 ;;		None
 10290 ;; Return value:  Size  Location     Type
 10291 ;;                  1    wreg      void 
 10292 ;; Registers used:
 10293 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10294 ;; Tracked objects:
 10295 ;;		On entry : 0/0
 10296 ;;		On exit  : 0/0
 10297 ;;		Unchanged: 0/0
 10298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10301 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10302 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10303 ;;Total ram usage:        2 bytes
 10304 ;; Hardware stack levels used:    1
 10305 ;; Hardware stack levels required when called:   10
 10306 ;; This function calls:
 10307 ;;		_lcdInst
 10308 ;;		_printf
 10309 ;; This function is called by:
 10310 ;;		_Test
 10311 ;; This function uses a non-reentrant model
 10312 ;;
 10313                           
 10314                           	psect	text39
 10315  00344E                     __ptext39:
 10316                           	opt stack 0
 10317  00344E                     _algorithmTest:
 10318                           	opt stack 19
 10319                           
 10320                           ;Test.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10321                           
 10322                           ;incstack = 0
 10323  00344E  0E01               	movlw	1
 10324  003450  EC9B  F023         	call	_lcdInst
 10325  003454  0E68               	movlw	104
 10326  003456  0100               	movlb	0	; () banked
 10327  003458  6FAB               	movwf	??_algorithmTest& (0+255),b
 10328  00345A  0EE4               	movlw	228
 10329  00345C                     u7507:
 10330  00345C  2EE8               	decfsz	wreg,f,c
 10331  00345E  D7FE               	bra	u7507
 10332  003460  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10333  003462  D7FC               	bra	u7507
 10334  003464  F000               	nop	
 10335  003466  0E80               	movlw	128
 10336  003468  EC9B  F023         	call	_lcdInst
 10337                           
 10338                           ;Test.c: 77: printf("ALGORITHM TEST");
 10339  00346C  0ED2               	movlw	low STR_70
 10340  00346E  0100               	movlb	0	; () banked
 10341  003470  6F8E               	movwf	printf@f& (0+255),b
 10342  003472  0EFE               	movlw	high STR_70
 10343  003474  0100               	movlb	0	; () banked
 10344  003476  6F8F               	movwf	(printf@f+1)& (0+255),b
 10345  003478  ECB8  F008         	call	_printf	;wreg free
 10346                           
 10347                           ;Test.c: 78: lcdInst(0b11000000);;
 10348  00347C  0EC0               	movlw	192
 10349  00347E  EC9B  F023         	call	_lcdInst
 10350                           
 10351                           ;Test.c: 79: printf("PUSH TO START");
 10352  003482  0E0B               	movlw	low STR_71
 10353  003484  0100               	movlb	0	; () banked
 10354  003486  6F8E               	movwf	printf@f& (0+255),b
 10355  003488  0EFF               	movlw	high STR_71
 10356  00348A  0100               	movlb	0	; () banked
 10357  00348C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10358  00348E  ECB8  F008         	call	_printf	;wreg free
 10359                           
 10360                           ;Test.c: 80: _delay((unsigned long)((100)*(32000000/4000.0)));
 10361  003492  0E05               	movlw	5
 10362  003494  0100               	movlb	0	; () banked
 10363  003496  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 10364  003498  0E0F               	movlw	15
 10365  00349A  0100               	movlb	0	; () banked
 10366  00349C  6FAB               	movwf	??_algorithmTest& (0+255),b
 10367  00349E  0EF1               	movlw	241
 10368  0034A0                     u7517:
 10369  0034A0  2EE8               	decfsz	wreg,f,c
 10370  0034A2  D7FE               	bra	u7517
 10371  0034A4  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10372  0034A6  D7FC               	bra	u7517
 10373  0034A8  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 10374  0034AA  D7FA               	bra	u7517
 10375  0034AC                     l1059:
 10376  0034AC  A281               	btfss	3969,1,c	;volatile
 10377  0034AE  D7FE               	goto	l1059
 10378  0034B0                     l1062:
 10379  0034B0  B281               	btfsc	3969,1,c	;volatile
 10380  0034B2  D7FE               	goto	l1062
 10381                           
 10382                           ;Test.c: 83: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10383  0034B4  0E01               	movlw	1
 10384  0034B6  EC9B  F023         	call	_lcdInst
 10385  0034BA  0E68               	movlw	104
 10386  0034BC  0100               	movlb	0	; () banked
 10387  0034BE  6FAB               	movwf	??_algorithmTest& (0+255),b
 10388  0034C0  0EE4               	movlw	228
 10389  0034C2                     u7527:
 10390  0034C2  2EE8               	decfsz	wreg,f,c
 10391  0034C4  D7FE               	bra	u7527
 10392  0034C6  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10393  0034C8  D7FC               	bra	u7527
 10394  0034CA  F000               	nop	
 10395  0034CC  0E80               	movlw	128
 10396  0034CE  EC9B  F023         	call	_lcdInst
 10397                           
 10398                           ;Test.c: 88: printf("ALG1: 9 POPNOTAB");
 10399  0034D2  0E81               	movlw	low STR_72
 10400  0034D4  0100               	movlb	0	; () banked
 10401  0034D6  6F8E               	movwf	printf@f& (0+255),b
 10402  0034D8  0EFC               	movlw	high STR_72
 10403  0034DA  0100               	movlb	0	; () banked
 10404  0034DC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10405  0034DE  ECB8  F008         	call	_printf	;wreg free
 10406                           
 10407                           ;Test.c: 95: printf("ALG2: 12 CANS");
 10408  0034E2  0EEF               	movlw	low STR_73
 10409  0034E4  0100               	movlb	0	; () banked
 10410  0034E6  6F8E               	movwf	printf@f& (0+255),b
 10411  0034E8  0EFE               	movlw	high STR_73
 10412  0034EA  0100               	movlb	0	; () banked
 10413  0034EC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10414  0034EE  ECB8  F008         	call	_printf	;wreg free
 10415                           
 10416                           ;Test.c: 104: printf("ALG3: 1 CAN");
 10417  0034F2  0E4F               	movlw	low STR_74
 10418  0034F4  0100               	movlb	0	; () banked
 10419  0034F6  6F8E               	movwf	printf@f& (0+255),b
 10420  0034F8  0EFF               	movlw	high STR_74
 10421  0034FA  0100               	movlb	0	; () banked
 10422  0034FC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10423  0034FE  ECB8  F008         	call	_printf	;wreg free
 10424                           
 10425                           ;Test.c: 110: printf("ALG4: ALL CANS");
 10426  003502  0EB4               	movlw	low STR_75
 10427  003504  0100               	movlb	0	; () banked
 10428  003506  6F8E               	movwf	printf@f& (0+255),b
 10429  003508  0EFE               	movlw	high STR_75
 10430  00350A  0100               	movlb	0	; () banked
 10431  00350C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10432  00350E  ECB8  F008         	call	_printf	;wreg free
 10433                           
 10434                           ;Test.c: 115: printf("ALG5: NO CANS");
 10435  003512  0EFD               	movlw	low STR_76
 10436  003514  0100               	movlb	0	; () banked
 10437  003516  6F8E               	movwf	printf@f& (0+255),b
 10438  003518  0EFE               	movlw	high STR_76
 10439  00351A  0100               	movlb	0	; () banked
 10440  00351C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10441  00351E  ECB8  F008         	call	_printf	;wreg free
 10442  003522  0012               	return		;funcret
 10443  003524                     __end_of_algorithmTest:
 10444                           	opt stack 0
 10445                           tblptru	equ	0xFF8
 10446                           tblptrh	equ	0xFF7
 10447                           tblptrl	equ	0xFF6
 10448                           tablat	equ	0xFF5
 10449                           prodh	equ	0xFF4
 10450                           prodl	equ	0xFF3
 10451                           intcon	equ	0xFF2
 10452                           intcon2	equ	0xFF1
 10453                           intcon3	equ	0xFF0
 10454                           postinc0	equ	0xFEE
 10455                           wreg	equ	0xFE8
 10456                           postdec1	equ	0xFE5
 10457                           fsr1l	equ	0xFE1
 10458                           indf2	equ	0xFDF
 10459                           postinc2	equ	0xFDE
 10460                           postdec2	equ	0xFDD
 10461                           fsr2h	equ	0xFDA
 10462                           fsr2l	equ	0xFD9
 10463                           status	equ	0xFD8
 10464                           
 10465 ;; *************** function _actuatorTest *****************
 10466 ;; Defined at:
 10467 ;;		line 195 in file "Test.c"
 10468 ;; Parameters:    Size  Location     Type
 10469 ;;		None
 10470 ;; Auto vars:     Size  Location     Type
 10471 ;;  i               1   45[BANK0 ] unsigned char 
 10472 ;;  i               1   67[BANK0 ] unsigned char 
 10473 ;;  i               1   66[BANK0 ] unsigned char 
 10474 ;;  i               1   65[BANK0 ] unsigned char 
 10475 ;;  i               1   64[BANK0 ] unsigned char 
 10476 ;;  i               1   63[BANK0 ] unsigned char 
 10477 ;;  i               1   62[BANK0 ] unsigned char 
 10478 ;;  i               1   61[BANK0 ] unsigned char 
 10479 ;;  i               1   60[BANK0 ] unsigned char 
 10480 ;;  i               1   59[BANK0 ] unsigned char 
 10481 ;;  i               1   58[BANK0 ] unsigned char 
 10482 ;;  i               1   57[BANK0 ] unsigned char 
 10483 ;;  i               1   56[BANK0 ] unsigned char 
 10484 ;;  i               1   55[BANK0 ] unsigned char 
 10485 ;;  i               1   54[BANK0 ] unsigned char 
 10486 ;;  i               1   53[BANK0 ] unsigned char 
 10487 ;;  i               1   52[BANK0 ] unsigned char 
 10488 ;;  i               1   51[BANK0 ] unsigned char 
 10489 ;;  i               1   50[BANK0 ] unsigned char 
 10490 ;;  i               1   49[BANK0 ] unsigned char 
 10491 ;;  i               1   48[BANK0 ] unsigned char 
 10492 ;;  i               1   47[BANK0 ] unsigned char 
 10493 ;;  i               1   46[BANK0 ] unsigned char 
 10494 ;;  i               2   68[BANK0 ] int 
 10495 ;; Return value:  Size  Location     Type
 10496 ;;                  1    wreg      void 
 10497 ;; Registers used:
 10498 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10499 ;; Tracked objects:
 10500 ;;		On entry : 0/0
 10501 ;;		On exit  : 0/0
 10502 ;;		Unchanged: 0/0
 10503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10505 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10506 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10507 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10508 ;;Total ram usage:       27 bytes
 10509 ;; Hardware stack levels used:    1
 10510 ;; Hardware stack levels required when called:   10
 10511 ;; This function calls:
 10512 ;;		_lcdInst
 10513 ;;		_printf
 10514 ;;		_updateServoPosition
 10515 ;; This function is called by:
 10516 ;;		_Test
 10517 ;; This function uses a non-reentrant model
 10518 ;;
 10519                           
 10520                           	psect	text40
 10521  000012                     __ptext40:
 10522                           	opt stack 0
 10523  000012                     _actuatorTest:
 10524                           	opt stack 19
 10525                           
 10526                           ;Test.c: 197: int i = 0;
 10527                           
 10528                           ;incstack = 0
 10529  000012  0E00               	movlw	0
 10530  000014  0100               	movlb	0	; () banked
 10531  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10532  000018  0E00               	movlw	0
 10533  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 10534                           
 10535                           ; BSR set to: 0
 10536                           ;Test.c: 199: (INTCONbits.GIE = 1);
 10537  00001C  8EF2               	bsf	intcon,7,c	;volatile
 10538                           
 10539                           ; BSR set to: 0
 10540                           ;Test.c: 200: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10541  00001E  0E01               	movlw	1
 10542  000020  EC9B  F023         	call	_lcdInst
 10543  000024  0E68               	movlw	104
 10544  000026  0100               	movlb	0	; () banked
 10545  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 10546  00002A  0EE4               	movlw	228
 10547  00002C                     u7537:
 10548  00002C  2EE8               	decfsz	wreg,f,c
 10549  00002E  D7FE               	bra	u7537
 10550  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10551  000032  D7FC               	bra	u7537
 10552  000034  F000               	nop	
 10553  000036  0E80               	movlw	128
 10554  000038  EC9B  F023         	call	_lcdInst
 10555                           
 10556                           ;Test.c: 201: printf("ACTUATORS");
 10557  00003C  0E91               	movlw	low STR_88
 10558  00003E  0100               	movlb	0	; () banked
 10559  000040  6F8E               	movwf	printf@f& (0+255),b
 10560  000042  0EFF               	movlw	high STR_88
 10561  000044  0100               	movlb	0	; () banked
 10562  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 10563  000048  ECB8  F008         	call	_printf	;wreg free
 10564                           
 10565                           ;Test.c: 202: lcdInst(0b11000000);;
 10566  00004C  0EC0               	movlw	192
 10567  00004E  EC9B  F023         	call	_lcdInst
 10568                           
 10569                           ;Test.c: 203: printf("PUSH TO START");
 10570  000052  0E0B               	movlw	low STR_71
 10571  000054  0100               	movlb	0	; () banked
 10572  000056  6F8E               	movwf	printf@f& (0+255),b
 10573  000058  0EFF               	movlw	high STR_71
 10574  00005A  0100               	movlb	0	; () banked
 10575  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10576  00005E  ECB8  F008         	call	_printf	;wreg free
 10577                           
 10578                           ;Test.c: 204: _delay((unsigned long)((100)*(32000000/4000.0)));
 10579  000062  0E05               	movlw	5
 10580  000064  0100               	movlb	0	; () banked
 10581  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10582  000068  0E0F               	movlw	15
 10583  00006A  0100               	movlb	0	; () banked
 10584  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10585  00006E  0EF1               	movlw	241
 10586  000070                     u7547:
 10587  000070  2EE8               	decfsz	wreg,f,c
 10588  000072  D7FE               	bra	u7547
 10589  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10590  000076  D7FC               	bra	u7547
 10591  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10592  00007A  D7FA               	bra	u7547
 10593  00007C                     l1094:
 10594  00007C  A281               	btfss	3969,1,c	;volatile
 10595  00007E  D7FE               	goto	l1094
 10596  000080                     l1097:
 10597  000080  B281               	btfsc	3969,1,c	;volatile
 10598  000082  D7FE               	goto	l1097
 10599                           
 10600                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10601  000084  0E01               	movlw	1
 10602  000086  EC9B  F023         	call	_lcdInst
 10603  00008A  0E68               	movlw	104
 10604  00008C  0100               	movlb	0	; () banked
 10605  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 10606  000090  0EE4               	movlw	228
 10607  000092                     u7557:
 10608  000092  2EE8               	decfsz	wreg,f,c
 10609  000094  D7FE               	bra	u7557
 10610  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10611  000098  D7FC               	bra	u7557
 10612  00009A  F000               	nop	
 10613  00009C  0E80               	movlw	128
 10614  00009E  EC9B  F023         	call	_lcdInst
 10615                           
 10616                           ;Test.c: 212: printf("TST: DC MOTORS");
 10617  0000A2  0EC3               	movlw	low STR_90
 10618  0000A4  0100               	movlb	0	; () banked
 10619  0000A6  6F8E               	movwf	printf@f& (0+255),b
 10620  0000A8  0EFE               	movlw	high STR_90
 10621  0000AA  0100               	movlb	0	; () banked
 10622  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10623  0000AE  ECB8  F008         	call	_printf	;wreg free
 10624                           
 10625                           ;Test.c: 213: lcdInst(0b11000000);;
 10626  0000B2  0EC0               	movlw	192
 10627  0000B4  EC9B  F023         	call	_lcdInst
 10628                           
 10629                           ;Test.c: 214: printf("PIN RA5 HIGH.");
 10630  0000B8  0EE1               	movlw	low STR_91
 10631  0000BA  0100               	movlb	0	; () banked
 10632  0000BC  6F8E               	movwf	printf@f& (0+255),b
 10633  0000BE  0EFE               	movlw	high STR_91
 10634  0000C0  0100               	movlb	0	; () banked
 10635  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10636  0000C4  ECB8  F008         	call	_printf	;wreg free
 10637                           
 10638                           ;Test.c: 215: LATAbits.LATA5 = 1;
 10639  0000C8  8A89               	bsf	3977,5,c	;volatile
 10640                           
 10641                           ;Test.c: 216: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10642  0000CA  0E00               	movlw	0
 10643  0000CC  0100               	movlb	0	; () banked
 10644  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10645  0000D0  0E00               	movlw	0
 10646  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 10647                           
 10648                           ; BSR set to: 0
 10649  0000D4  0100               	movlb	0	; () banked
 10650  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10651  0000D8  D008               	goto	l6659
 10652  0000DA  0100               	movlb	0	; () banked
 10653  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10654  0000DE  E123               	bnz	l1101
 10655  0000E0  0E05               	movlw	5
 10656  0000E2  0100               	movlb	0	; () banked
 10657  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10658  0000E6  B0D8               	btfsc	status,0,c
 10659  0000E8  D01E               	goto	l1101
 10660  0000EA                     l6659:
 10661                           
 10662                           ; BSR set to: 0
 10663  0000EA  0E00               	movlw	0
 10664  0000EC  0100               	movlb	0	; () banked
 10665  0000EE  6FAD               	movwf	actuatorTest@i_1631& (0+255),b
 10666  0000F0                     l6661:
 10667                           
 10668                           ; BSR set to: 0
 10669  0000F0  0E63               	movlw	99
 10670  0000F2  0100               	movlb	0	; () banked
 10671  0000F4  65AD               	cpfsgt	actuatorTest@i_1631& (0+255),b
 10672  0000F6  D001               	goto	l6665
 10673  0000F8  D00C               	goto	l6669
 10674  0000FA                     l6665:
 10675                           
 10676                           ; BSR set to: 0
 10677  0000FA  0E68               	movlw	104
 10678  0000FC  0100               	movlb	0	; () banked
 10679  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10680  000100  0EE4               	movlw	228
 10681  000102                     u7567:
 10682  000102  2EE8               	decfsz	wreg,f,c
 10683  000104  D7FE               	bra	u7567
 10684  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10685  000108  D7FC               	bra	u7567
 10686  00010A  F000               	nop	
 10687  00010C  0100               	movlb	0	; () banked
 10688  00010E  2BAD               	incf	actuatorTest@i_1631& (0+255),f,b
 10689  000110  D7EF               	goto	l6661
 10690  000112                     l6669:
 10691                           
 10692                           ; BSR set to: 0
 10693  000112  0100               	movlb	0	; () banked
 10694  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10695  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10696                           
 10697                           ; BSR set to: 0
 10698  000118  0100               	movlb	0	; () banked
 10699  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10700  00011C  D7E6               	goto	l6659
 10701  00011E  0100               	movlb	0	; () banked
 10702  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10703  000122  E101               	bnz	u5090
 10704  000124  D7DD               	goto	L6
 10705  000126                     u5090:
 10706  000126                     l1101:
 10707                           
 10708                           ; BSR set to: 0
 10709                           ;Test.c: 217: LATAbits.LATA5 = 0;
 10710  000126  9A89               	bcf	3977,5,c	;volatile
 10711                           
 10712                           ; BSR set to: 0
 10713                           ;Test.c: 218: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10714  000128  0E01               	movlw	1
 10715  00012A  EC9B  F023         	call	_lcdInst
 10716  00012E  0E68               	movlw	104
 10717  000130  0100               	movlb	0	; () banked
 10718  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 10719  000134  0EE4               	movlw	228
 10720  000136                     u7577:
 10721  000136  2EE8               	decfsz	wreg,f,c
 10722  000138  D7FE               	bra	u7577
 10723  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10724  00013C  D7FC               	bra	u7577
 10725  00013E  F000               	nop	
 10726  000140  0E80               	movlw	128
 10727  000142  EC9B  F023         	call	_lcdInst
 10728                           
 10729                           ;Test.c: 224: printf("TST: COND SOLN'D");
 10730  000146  0EA3               	movlw	low STR_92
 10731  000148  0100               	movlb	0	; () banked
 10732  00014A  6F8E               	movwf	printf@f& (0+255),b
 10733  00014C  0EFC               	movlw	high STR_92
 10734  00014E  0100               	movlb	0	; () banked
 10735  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 10736  000152  ECB8  F008         	call	_printf	;wreg free
 10737                           
 10738                           ;Test.c: 225: lcdInst(0b11000000);;
 10739  000156  0EC0               	movlw	192
 10740  000158  EC9B  F023         	call	_lcdInst
 10741                           
 10742                           ;Test.c: 226: printf("PIN RA3...");
 10743  00015C  0E5B               	movlw	low STR_93
 10744  00015E  0100               	movlb	0	; () banked
 10745  000160  6F8E               	movwf	printf@f& (0+255),b
 10746  000162  0EFF               	movlw	high STR_93
 10747  000164  0100               	movlb	0	; () banked
 10748  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 10749  000168  ECB8  F008         	call	_printf	;wreg free
 10750                           
 10751                           ;Test.c: 227: for(i=0;i<5;i++){
 10752  00016C  0E00               	movlw	0
 10753  00016E  0100               	movlb	0	; () banked
 10754  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10755  000172  0E00               	movlw	0
 10756  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 10757                           
 10758                           ; BSR set to: 0
 10759  000176  0100               	movlb	0	; () banked
 10760  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10761  00017A  D008               	goto	l1104
 10762  00017C  0100               	movlb	0	; () banked
 10763  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10764  000180  E12C               	bnz	l1105
 10765  000182  0E05               	movlw	5
 10766  000184  0100               	movlb	0	; () banked
 10767  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10768  000188  B0D8               	btfsc	status,0,c
 10769  00018A  D027               	goto	l1105
 10770  00018C                     l1104:
 10771                           
 10772                           ; BSR set to: 0
 10773                           ;Test.c: 228: LATAbits.LATA3 = 1;
 10774  00018C  8689               	bsf	3977,3,c	;volatile
 10775                           
 10776                           ; BSR set to: 0
 10777                           ;Test.c: 229: _delay((unsigned long)((300)*(32000000/4000.0)));
 10778  00018E  0E0D               	movlw	13
 10779  000190  0100               	movlb	0	; () banked
 10780  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10781  000194  0E2D               	movlw	45
 10782  000196  0100               	movlb	0	; () banked
 10783  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 10784  00019A  0ED7               	movlw	215
 10785  00019C                     u7587:
 10786  00019C  2EE8               	decfsz	wreg,f,c
 10787  00019E  D7FE               	bra	u7587
 10788  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10789  0001A2  D7FC               	bra	u7587
 10790  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10791  0001A6  D7FA               	bra	u7587
 10792  0001A8  D000               	nop2	
 10793                           
 10794                           ;Test.c: 230: LATAbits.LATA3 = ~1;
 10795  0001AA  9689               	bcf	3977,3,c	;volatile
 10796                           
 10797                           ;Test.c: 231: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10798  0001AC  0E1D               	movlw	29
 10799  0001AE  0100               	movlb	0	; () banked
 10800  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10801  0001B2  0E69               	movlw	105
 10802  0001B4  0100               	movlb	0	; () banked
 10803  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10804  0001B8  0EA5               	movlw	165
 10805  0001BA                     u7597:
 10806  0001BA  2EE8               	decfsz	wreg,f,c
 10807  0001BC  D7FE               	bra	u7597
 10808  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10809  0001C0  D7FC               	bra	u7597
 10810  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10811  0001C4  D7FA               	bra	u7597
 10812  0001C6  0100               	movlb	0	; () banked
 10813  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10814  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10815  0001CC  0100               	movlb	0	; () banked
 10816  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10817  0001D0  D7DD               	goto	l1104
 10818  0001D2  0100               	movlb	0	; () banked
 10819  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10820  0001D6  E101               	bnz	u5110
 10821  0001D8  D7D4               	goto	L7
 10822  0001DA                     u5110:
 10823  0001DA                     l1105:
 10824                           
 10825                           ; BSR set to: 0
 10826                           ;Test.c: 232: }
 10827                           ;Test.c: 233: LATAbits.LATA3 = ~1;
 10828  0001DA  9689               	bcf	3977,3,c	;volatile
 10829                           
 10830                           ; BSR set to: 0
 10831                           ;Test.c: 234: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10832  0001DC  0E01               	movlw	1
 10833  0001DE  EC9B  F023         	call	_lcdInst
 10834  0001E2  0E68               	movlw	104
 10835  0001E4  0100               	movlb	0	; () banked
 10836  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10837  0001E8  0EE4               	movlw	228
 10838  0001EA                     u7607:
 10839  0001EA  2EE8               	decfsz	wreg,f,c
 10840  0001EC  D7FE               	bra	u7607
 10841  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10842  0001F0  D7FC               	bra	u7607
 10843  0001F2  F000               	nop	
 10844  0001F4  0E80               	movlw	128
 10845  0001F6  EC9B  F023         	call	_lcdInst
 10846                           
 10847                           ;Test.c: 240: printf("TST: PUSH SOLN'D");
 10848  0001FA  0EB4               	movlw	low STR_94
 10849  0001FC  0100               	movlb	0	; () banked
 10850  0001FE  6F8E               	movwf	printf@f& (0+255),b
 10851  000200  0EFC               	movlw	high STR_94
 10852  000202  0100               	movlb	0	; () banked
 10853  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 10854  000206  ECB8  F008         	call	_printf	;wreg free
 10855                           
 10856                           ;Test.c: 241: lcdInst(0b11000000);;
 10857  00020A  0EC0               	movlw	192
 10858  00020C  EC9B  F023         	call	_lcdInst
 10859                           
 10860                           ;Test.c: 242: printf("PIN RA4...");
 10861  000210  0E66               	movlw	low STR_95
 10862  000212  0100               	movlb	0	; () banked
 10863  000214  6F8E               	movwf	printf@f& (0+255),b
 10864  000216  0EFF               	movlw	high STR_95
 10865  000218  0100               	movlb	0	; () banked
 10866  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10867  00021C  ECB8  F008         	call	_printf	;wreg free
 10868                           
 10869                           ;Test.c: 243: for(i=0;i<5;i++){
 10870  000220  0E00               	movlw	0
 10871  000222  0100               	movlb	0	; () banked
 10872  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10873  000226  0E00               	movlw	0
 10874  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 10875                           
 10876                           ; BSR set to: 0
 10877  00022A  0100               	movlb	0	; () banked
 10878  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10879  00022E  D008               	goto	l1106
 10880  000230  0100               	movlb	0	; () banked
 10881  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10882  000234  E12C               	bnz	l1107
 10883  000236  0E05               	movlw	5
 10884  000238  0100               	movlb	0	; () banked
 10885  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10886  00023C  B0D8               	btfsc	status,0,c
 10887  00023E  D027               	goto	l1107
 10888  000240                     l1106:
 10889                           
 10890                           ; BSR set to: 0
 10891                           ;Test.c: 244: LATAbits.LATA4 = 1;
 10892  000240  8889               	bsf	3977,4,c	;volatile
 10893                           
 10894                           ; BSR set to: 0
 10895                           ;Test.c: 245: _delay((unsigned long)((300)*(32000000/4000.0)));
 10896  000242  0E0D               	movlw	13
 10897  000244  0100               	movlb	0	; () banked
 10898  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10899  000248  0E2D               	movlw	45
 10900  00024A  0100               	movlb	0	; () banked
 10901  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10902  00024E  0ED7               	movlw	215
 10903  000250                     u7617:
 10904  000250  2EE8               	decfsz	wreg,f,c
 10905  000252  D7FE               	bra	u7617
 10906  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10907  000256  D7FC               	bra	u7617
 10908  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10909  00025A  D7FA               	bra	u7617
 10910  00025C  D000               	nop2	
 10911                           
 10912                           ;Test.c: 246: LATAbits.LATA4 = ~1;
 10913  00025E  9889               	bcf	3977,4,c	;volatile
 10914                           
 10915                           ;Test.c: 247: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10916  000260  0E1D               	movlw	29
 10917  000262  0100               	movlb	0	; () banked
 10918  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10919  000266  0E69               	movlw	105
 10920  000268  0100               	movlb	0	; () banked
 10921  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10922  00026C  0EA5               	movlw	165
 10923  00026E                     u7627:
 10924  00026E  2EE8               	decfsz	wreg,f,c
 10925  000270  D7FE               	bra	u7627
 10926  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10927  000274  D7FC               	bra	u7627
 10928  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10929  000278  D7FA               	bra	u7627
 10930  00027A  0100               	movlb	0	; () banked
 10931  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10932  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10933  000280  0100               	movlb	0	; () banked
 10934  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10935  000284  D7DD               	goto	l1106
 10936  000286  0100               	movlb	0	; () banked
 10937  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10938  00028A  E101               	bnz	u5130
 10939  00028C  D7D4               	goto	L8
 10940  00028E                     u5130:
 10941  00028E                     l1107:
 10942                           
 10943                           ; BSR set to: 0
 10944                           ;Test.c: 248: }
 10945                           ;Test.c: 249: LATAbits.LATA4 = ~1;
 10946  00028E  9889               	bcf	3977,4,c	;volatile
 10947                           
 10948                           ; BSR set to: 0
 10949                           ;Test.c: 250: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10950  000290  0E01               	movlw	1
 10951  000292  EC9B  F023         	call	_lcdInst
 10952  000296  0E68               	movlw	104
 10953  000298  0100               	movlb	0	; () banked
 10954  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10955  00029C  0EE4               	movlw	228
 10956  00029E                     u7637:
 10957  00029E  2EE8               	decfsz	wreg,f,c
 10958  0002A0  D7FE               	bra	u7637
 10959  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10960  0002A4  D7FC               	bra	u7637
 10961  0002A6  F000               	nop	
 10962  0002A8  0E80               	movlw	128
 10963  0002AA  EC9B  F023         	call	_lcdInst
 10964                           
 10965                           ;Test.c: 253: machine_state = Sorting_state;
 10966  0002AE  0E01               	movlw	1
 10967  0002B0  0100               	movlb	0	; () banked
 10968  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 10969                           
 10970                           ; BSR set to: 0
 10971                           ;Test.c: 254: was_low_1 = 0;
 10972  0002B4  0E00               	movlw	0
 10973  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 10974  0002B8  0E00               	movlw	0
 10975  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 10976                           
 10977                           ; BSR set to: 0
 10978                           ;Test.c: 255: was_low_1 = 0;
 10979  0002BC  0E00               	movlw	0
 10980  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 10981  0002C0  0E00               	movlw	0
 10982  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 10983                           
 10984                           ; BSR set to: 0
 10985                           ;Test.c: 262: printf("TST: PAN SERVO");
 10986  0002C4  0EA5               	movlw	low STR_96
 10987  0002C6  0100               	movlb	0	; () banked
 10988  0002C8  6F8E               	movwf	printf@f& (0+255),b
 10989  0002CA  0EFE               	movlw	high STR_96
 10990  0002CC  0100               	movlb	0	; () banked
 10991  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10992  0002D0  ECB8  F008         	call	_printf	;wreg free
 10993                           
 10994                           ;Test.c: 263: lcdInst(0b11000000);;
 10995  0002D4  0EC0               	movlw	192
 10996  0002D6  EC9B  F023         	call	_lcdInst
 10997                           
 10998                           ;Test.c: 264: printf("MIDDLE -- 2s    ");
 10999  0002DA  0E2C               	movlw	low STR_97
 11000  0002DC  0100               	movlb	0	; () banked
 11001  0002DE  6F8E               	movwf	printf@f& (0+255),b
 11002  0002E0  0EFC               	movlw	high STR_97
 11003  0002E2  0100               	movlb	0	; () banked
 11004  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11005  0002E6  ECB8  F008         	call	_printf	;wreg free
 11006                           
 11007                           ;Test.c: 265: updateServoPosition(1200, 1);
 11008  0002EA  0E04               	movlw	4
 11009  0002EC  0100               	movlb	0	; () banked
 11010  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11011  0002F0  0EB0               	movlw	176
 11012  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11013  0002F4  0E00               	movlw	0
 11014  0002F6  0100               	movlb	0	; () banked
 11015  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11016  0002FA  0E01               	movlw	1
 11017  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11018  0002FE  ECEB  F01D         	call	_updateServoPosition	;wreg free
 11019                           
 11020                           ;Test.c: 266: TMR1ON = 1;
 11021  000302  80CD               	bsf	4045,0,c	;volatile
 11022                           
 11023                           ;Test.c: 267: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11024  000304  0E00               	movlw	0
 11025  000306  0100               	movlb	0	; () banked
 11026  000308  6FAE               	movwf	actuatorTest@i_1638& (0+255),b
 11027  00030A                     l6745:
 11028                           
 11029                           ; BSR set to: 0
 11030  00030A  0E63               	movlw	99
 11031  00030C  0100               	movlb	0	; () banked
 11032  00030E  65AE               	cpfsgt	actuatorTest@i_1638& (0+255),b
 11033  000310  D001               	goto	l6749
 11034  000312  D00C               	goto	l6753
 11035  000314                     l6749:
 11036                           
 11037                           ; BSR set to: 0
 11038  000314  0E68               	movlw	104
 11039  000316  0100               	movlb	0	; () banked
 11040  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 11041  00031A  0EE4               	movlw	228
 11042  00031C                     u7647:
 11043  00031C  2EE8               	decfsz	wreg,f,c
 11044  00031E  D7FE               	bra	u7647
 11045  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11046  000322  D7FC               	bra	u7647
 11047  000324  F000               	nop	
 11048  000326  0100               	movlb	0	; () banked
 11049  000328  2BAE               	incf	actuatorTest@i_1638& (0+255),f,b
 11050  00032A  D7EF               	goto	l6745
 11051  00032C                     l6753:
 11052                           
 11053                           ; BSR set to: 0
 11054  00032C  0E00               	movlw	0
 11055  00032E  0100               	movlb	0	; () banked
 11056  000330  6FAF               	movwf	actuatorTest@i_1639& (0+255),b
 11057  000332                     l6755:
 11058                           
 11059                           ; BSR set to: 0
 11060  000332  0E63               	movlw	99
 11061  000334  0100               	movlb	0	; () banked
 11062  000336  65AF               	cpfsgt	actuatorTest@i_1639& (0+255),b
 11063  000338  D001               	goto	l6759
 11064  00033A  D00C               	goto	l6763
 11065  00033C                     l6759:
 11066                           
 11067                           ; BSR set to: 0
 11068  00033C  0E68               	movlw	104
 11069  00033E  0100               	movlb	0	; () banked
 11070  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 11071  000342  0EE4               	movlw	228
 11072  000344                     u7657:
 11073  000344  2EE8               	decfsz	wreg,f,c
 11074  000346  D7FE               	bra	u7657
 11075  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11076  00034A  D7FC               	bra	u7657
 11077  00034C  F000               	nop	
 11078  00034E  0100               	movlb	0	; () banked
 11079  000350  2BAF               	incf	actuatorTest@i_1639& (0+255),f,b
 11080  000352  D7EF               	goto	l6755
 11081  000354                     l6763:
 11082                           
 11083                           ; BSR set to: 0
 11084                           ;Test.c: 269: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11085  000354  0E80               	movlw	128
 11086  000356  EC9B  F023         	call	_lcdInst
 11087  00035A  0EC0               	movlw	192
 11088  00035C  EC9B  F023         	call	_lcdInst
 11089                           
 11090                           ;Test.c: 270: printf("RIGHT -- 2s     ");
 11091  000360  0E1B               	movlw	low STR_98
 11092  000362  0100               	movlb	0	; () banked
 11093  000364  6F8E               	movwf	printf@f& (0+255),b
 11094  000366  0EFC               	movlw	high STR_98
 11095  000368  0100               	movlb	0	; () banked
 11096  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11097  00036C  ECB8  F008         	call	_printf	;wreg free
 11098                           
 11099                           ;Test.c: 271: updateServoPosition(500, 1);
 11100  000370  0E01               	movlw	1
 11101  000372  0100               	movlb	0	; () banked
 11102  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11103  000376  0EF4               	movlw	244
 11104  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11105  00037A  0E00               	movlw	0
 11106  00037C  0100               	movlb	0	; () banked
 11107  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11108  000380  0E01               	movlw	1
 11109  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11110  000384  ECEB  F01D         	call	_updateServoPosition	;wreg free
 11111                           
 11112                           ;Test.c: 272: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11113  000388  0E00               	movlw	0
 11114  00038A  0100               	movlb	0	; () banked
 11115  00038C  6FB0               	movwf	actuatorTest@i_1641& (0+255),b
 11116  00038E                     l6771:
 11117                           
 11118                           ; BSR set to: 0
 11119  00038E  0E63               	movlw	99
 11120  000390  0100               	movlb	0	; () banked
 11121  000392  65B0               	cpfsgt	actuatorTest@i_1641& (0+255),b
 11122  000394  D001               	goto	l6775
 11123  000396  D00C               	goto	l6779
 11124  000398                     l6775:
 11125                           
 11126                           ; BSR set to: 0
 11127  000398  0E68               	movlw	104
 11128  00039A  0100               	movlb	0	; () banked
 11129  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11130  00039E  0EE4               	movlw	228
 11131  0003A0                     u7667:
 11132  0003A0  2EE8               	decfsz	wreg,f,c
 11133  0003A2  D7FE               	bra	u7667
 11134  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11135  0003A6  D7FC               	bra	u7667
 11136  0003A8  F000               	nop	
 11137  0003AA  0100               	movlb	0	; () banked
 11138  0003AC  2BB0               	incf	actuatorTest@i_1641& (0+255),f,b
 11139  0003AE  D7EF               	goto	l6771
 11140  0003B0                     l6779:
 11141                           
 11142                           ; BSR set to: 0
 11143  0003B0  0E00               	movlw	0
 11144  0003B2  0100               	movlb	0	; () banked
 11145  0003B4  6FB1               	movwf	actuatorTest@i_1642& (0+255),b
 11146  0003B6                     l6781:
 11147                           
 11148                           ; BSR set to: 0
 11149  0003B6  0E63               	movlw	99
 11150  0003B8  0100               	movlb	0	; () banked
 11151  0003BA  65B1               	cpfsgt	actuatorTest@i_1642& (0+255),b
 11152  0003BC  D001               	goto	l6785
 11153  0003BE  D00C               	goto	l6789
 11154  0003C0                     l6785:
 11155                           
 11156                           ; BSR set to: 0
 11157  0003C0  0E68               	movlw	104
 11158  0003C2  0100               	movlb	0	; () banked
 11159  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11160  0003C6  0EE4               	movlw	228
 11161  0003C8                     u7677:
 11162  0003C8  2EE8               	decfsz	wreg,f,c
 11163  0003CA  D7FE               	bra	u7677
 11164  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11165  0003CE  D7FC               	bra	u7677
 11166  0003D0  F000               	nop	
 11167  0003D2  0100               	movlb	0	; () banked
 11168  0003D4  2BB1               	incf	actuatorTest@i_1642& (0+255),f,b
 11169  0003D6  D7EF               	goto	l6781
 11170  0003D8                     l6789:
 11171                           
 11172                           ; BSR set to: 0
 11173                           ;Test.c: 274: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11174  0003D8  0E80               	movlw	128
 11175  0003DA  EC9B  F023         	call	_lcdInst
 11176  0003DE  0EC0               	movlw	192
 11177  0003E0  EC9B  F023         	call	_lcdInst
 11178                           
 11179                           ;Test.c: 275: printf("LEFT -- 2s      ");
 11180  0003E4  0EF9               	movlw	low STR_99
 11181  0003E6  0100               	movlb	0	; () banked
 11182  0003E8  6F8E               	movwf	printf@f& (0+255),b
 11183  0003EA  0EFB               	movlw	high STR_99
 11184  0003EC  0100               	movlb	0	; () banked
 11185  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11186  0003F0  ECB8  F008         	call	_printf	;wreg free
 11187                           
 11188                           ;Test.c: 276: updateServoPosition(2100, 1);
 11189  0003F4  0E08               	movlw	8
 11190  0003F6  0100               	movlb	0	; () banked
 11191  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11192  0003FA  0E34               	movlw	52
 11193  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11194  0003FE  0E00               	movlw	0
 11195  000400  0100               	movlb	0	; () banked
 11196  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11197  000404  0E01               	movlw	1
 11198  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11199  000408  ECEB  F01D         	call	_updateServoPosition	;wreg free
 11200                           
 11201                           ;Test.c: 277: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11202  00040C  0E00               	movlw	0
 11203  00040E  0100               	movlb	0	; () banked
 11204  000410  6FB2               	movwf	actuatorTest@i_1644& (0+255),b
 11205  000412                     l6797:
 11206                           
 11207                           ; BSR set to: 0
 11208  000412  0E63               	movlw	99
 11209  000414  0100               	movlb	0	; () banked
 11210  000416  65B2               	cpfsgt	actuatorTest@i_1644& (0+255),b
 11211  000418  D001               	goto	l6801
 11212  00041A  D00C               	goto	l6805
 11213  00041C                     l6801:
 11214                           
 11215                           ; BSR set to: 0
 11216  00041C  0E68               	movlw	104
 11217  00041E  0100               	movlb	0	; () banked
 11218  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 11219  000422  0EE4               	movlw	228
 11220  000424                     u7687:
 11221  000424  2EE8               	decfsz	wreg,f,c
 11222  000426  D7FE               	bra	u7687
 11223  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11224  00042A  D7FC               	bra	u7687
 11225  00042C  F000               	nop	
 11226  00042E  0100               	movlb	0	; () banked
 11227  000430  2BB2               	incf	actuatorTest@i_1644& (0+255),f,b
 11228  000432  D7EF               	goto	l6797
 11229  000434                     l6805:
 11230                           
 11231                           ; BSR set to: 0
 11232  000434  0E00               	movlw	0
 11233  000436  0100               	movlb	0	; () banked
 11234  000438  6FB3               	movwf	actuatorTest@i_1645& (0+255),b
 11235  00043A                     l6807:
 11236                           
 11237                           ; BSR set to: 0
 11238  00043A  0E63               	movlw	99
 11239  00043C  0100               	movlb	0	; () banked
 11240  00043E  65B3               	cpfsgt	actuatorTest@i_1645& (0+255),b
 11241  000440  D001               	goto	l6811
 11242  000442  D00C               	goto	l6815
 11243  000444                     l6811:
 11244                           
 11245                           ; BSR set to: 0
 11246  000444  0E68               	movlw	104
 11247  000446  0100               	movlb	0	; () banked
 11248  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 11249  00044A  0EE4               	movlw	228
 11250  00044C                     u7697:
 11251  00044C  2EE8               	decfsz	wreg,f,c
 11252  00044E  D7FE               	bra	u7697
 11253  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11254  000452  D7FC               	bra	u7697
 11255  000454  F000               	nop	
 11256  000456  0100               	movlb	0	; () banked
 11257  000458  2BB3               	incf	actuatorTest@i_1645& (0+255),f,b
 11258  00045A  D7EF               	goto	l6807
 11259  00045C                     l6815:
 11260                           
 11261                           ; BSR set to: 0
 11262                           ;Test.c: 279: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11263  00045C  0E80               	movlw	128
 11264  00045E  EC9B  F023         	call	_lcdInst
 11265  000462  0EC0               	movlw	192
 11266  000464  EC9B  F023         	call	_lcdInst
 11267                           
 11268                           ;Test.c: 280: printf("MID-LEFT -- 2s  ");
 11269  000468  0E4E               	movlw	low STR_100
 11270  00046A  0100               	movlb	0	; () banked
 11271  00046C  6F8E               	movwf	printf@f& (0+255),b
 11272  00046E  0EFC               	movlw	high STR_100
 11273  000470  0100               	movlb	0	; () banked
 11274  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 11275  000474  ECB8  F008         	call	_printf	;wreg free
 11276                           
 11277                           ;Test.c: 281: updateServoPosition(1700, 1);
 11278  000478  0E06               	movlw	6
 11279  00047A  0100               	movlb	0	; () banked
 11280  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11281  00047E  0EA4               	movlw	164
 11282  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11283  000482  0E00               	movlw	0
 11284  000484  0100               	movlb	0	; () banked
 11285  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11286  000488  0E01               	movlw	1
 11287  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11288  00048C  ECEB  F01D         	call	_updateServoPosition	;wreg free
 11289                           
 11290                           ;Test.c: 282: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11291  000490  0E00               	movlw	0
 11292  000492  0100               	movlb	0	; () banked
 11293  000494  6FB4               	movwf	actuatorTest@i_1647& (0+255),b
 11294  000496                     l6823:
 11295                           
 11296                           ; BSR set to: 0
 11297  000496  0E63               	movlw	99
 11298  000498  0100               	movlb	0	; () banked
 11299  00049A  65B4               	cpfsgt	actuatorTest@i_1647& (0+255),b
 11300  00049C  D001               	goto	l6827
 11301  00049E  D00C               	goto	l6831
 11302  0004A0                     l6827:
 11303                           
 11304                           ; BSR set to: 0
 11305  0004A0  0E68               	movlw	104
 11306  0004A2  0100               	movlb	0	; () banked
 11307  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11308  0004A6  0EE4               	movlw	228
 11309  0004A8                     u7707:
 11310  0004A8  2EE8               	decfsz	wreg,f,c
 11311  0004AA  D7FE               	bra	u7707
 11312  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11313  0004AE  D7FC               	bra	u7707
 11314  0004B0  F000               	nop	
 11315  0004B2  0100               	movlb	0	; () banked
 11316  0004B4  2BB4               	incf	actuatorTest@i_1647& (0+255),f,b
 11317  0004B6  D7EF               	goto	l6823
 11318  0004B8                     l6831:
 11319                           
 11320                           ; BSR set to: 0
 11321  0004B8  0E00               	movlw	0
 11322  0004BA  0100               	movlb	0	; () banked
 11323  0004BC  6FB5               	movwf	actuatorTest@i_1648& (0+255),b
 11324  0004BE                     l6833:
 11325                           
 11326                           ; BSR set to: 0
 11327  0004BE  0E63               	movlw	99
 11328  0004C0  0100               	movlb	0	; () banked
 11329  0004C2  65B5               	cpfsgt	actuatorTest@i_1648& (0+255),b
 11330  0004C4  D001               	goto	l6837
 11331  0004C6  D00C               	goto	l6841
 11332  0004C8                     l6837:
 11333                           
 11334                           ; BSR set to: 0
 11335  0004C8  0E68               	movlw	104
 11336  0004CA  0100               	movlb	0	; () banked
 11337  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11338  0004CE  0EE4               	movlw	228
 11339  0004D0                     u7717:
 11340  0004D0  2EE8               	decfsz	wreg,f,c
 11341  0004D2  D7FE               	bra	u7717
 11342  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11343  0004D6  D7FC               	bra	u7717
 11344  0004D8  F000               	nop	
 11345  0004DA  0100               	movlb	0	; () banked
 11346  0004DC  2BB5               	incf	actuatorTest@i_1648& (0+255),f,b
 11347  0004DE  D7EF               	goto	l6833
 11348  0004E0                     l6841:
 11349                           
 11350                           ; BSR set to: 0
 11351                           ;Test.c: 284: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11352  0004E0  0E80               	movlw	128
 11353  0004E2  EC9B  F023         	call	_lcdInst
 11354  0004E6  0EC0               	movlw	192
 11355  0004E8  EC9B  F023         	call	_lcdInst
 11356                           
 11357                           ;Test.c: 285: printf("MID-RIGHT -- 2s ");
 11358  0004EC  0E5F               	movlw	low STR_101
 11359  0004EE  0100               	movlb	0	; () banked
 11360  0004F0  6F8E               	movwf	printf@f& (0+255),b
 11361  0004F2  0EFC               	movlw	high STR_101
 11362  0004F4  0100               	movlb	0	; () banked
 11363  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11364  0004F8  ECB8  F008         	call	_printf	;wreg free
 11365                           
 11366                           ;Test.c: 286: updateServoPosition(750, 1);
 11367  0004FC  0E02               	movlw	2
 11368  0004FE  0100               	movlb	0	; () banked
 11369  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11370  000502  0EEE               	movlw	238
 11371  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11372  000506  0E00               	movlw	0
 11373  000508  0100               	movlb	0	; () banked
 11374  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11375  00050C  0E01               	movlw	1
 11376  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11377  000510  ECEB  F01D         	call	_updateServoPosition	;wreg free
 11378                           
 11379                           ;Test.c: 287: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11380  000514  0E00               	movlw	0
 11381  000516  0100               	movlb	0	; () banked
 11382  000518  6FB6               	movwf	actuatorTest@i_1650& (0+255),b
 11383  00051A                     l6849:
 11384                           
 11385                           ; BSR set to: 0
 11386  00051A  0E63               	movlw	99
 11387  00051C  0100               	movlb	0	; () banked
 11388  00051E  65B6               	cpfsgt	actuatorTest@i_1650& (0+255),b
 11389  000520  D001               	goto	l6853
 11390  000522  D00C               	goto	l6857
 11391  000524                     l6853:
 11392                           
 11393                           ; BSR set to: 0
 11394  000524  0E68               	movlw	104
 11395  000526  0100               	movlb	0	; () banked
 11396  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 11397  00052A  0EE4               	movlw	228
 11398  00052C                     u7727:
 11399  00052C  2EE8               	decfsz	wreg,f,c
 11400  00052E  D7FE               	bra	u7727
 11401  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11402  000532  D7FC               	bra	u7727
 11403  000534  F000               	nop	
 11404  000536  0100               	movlb	0	; () banked
 11405  000538  2BB6               	incf	actuatorTest@i_1650& (0+255),f,b
 11406  00053A  D7EF               	goto	l6849
 11407  00053C                     l6857:
 11408                           
 11409                           ; BSR set to: 0
 11410  00053C  0E00               	movlw	0
 11411  00053E  0100               	movlb	0	; () banked
 11412  000540  6FB7               	movwf	actuatorTest@i_1651& (0+255),b
 11413  000542                     l6859:
 11414                           
 11415                           ; BSR set to: 0
 11416  000542  0E63               	movlw	99
 11417  000544  0100               	movlb	0	; () banked
 11418  000546  65B7               	cpfsgt	actuatorTest@i_1651& (0+255),b
 11419  000548  D001               	goto	l6863
 11420  00054A  D00C               	goto	l6867
 11421  00054C                     l6863:
 11422                           
 11423                           ; BSR set to: 0
 11424  00054C  0E68               	movlw	104
 11425  00054E  0100               	movlb	0	; () banked
 11426  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 11427  000552  0EE4               	movlw	228
 11428  000554                     u7737:
 11429  000554  2EE8               	decfsz	wreg,f,c
 11430  000556  D7FE               	bra	u7737
 11431  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11432  00055A  D7FC               	bra	u7737
 11433  00055C  F000               	nop	
 11434  00055E  0100               	movlb	0	; () banked
 11435  000560  2BB7               	incf	actuatorTest@i_1651& (0+255),f,b
 11436  000562  D7EF               	goto	l6859
 11437  000564                     l6867:
 11438                           
 11439                           ; BSR set to: 0
 11440                           ;Test.c: 289: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11441  000564  0E80               	movlw	128
 11442  000566  EC9B  F023         	call	_lcdInst
 11443  00056A  0EC0               	movlw	192
 11444  00056C  EC9B  F023         	call	_lcdInst
 11445                           
 11446                           ;Test.c: 290: printf("MID -- 2s       ");
 11447  000570  0ED7               	movlw	low STR_102
 11448  000572  0100               	movlb	0	; () banked
 11449  000574  6F8E               	movwf	printf@f& (0+255),b
 11450  000576  0EFB               	movlw	high STR_102
 11451  000578  0100               	movlb	0	; () banked
 11452  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11453  00057C  ECB8  F008         	call	_printf	;wreg free
 11454                           
 11455                           ;Test.c: 291: updateServoPosition(1200, 1);
 11456  000580  0E04               	movlw	4
 11457  000582  0100               	movlb	0	; () banked
 11458  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11459  000586  0EB0               	movlw	176
 11460  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11461  00058A  0E00               	movlw	0
 11462  00058C  0100               	movlb	0	; () banked
 11463  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11464  000590  0E01               	movlw	1
 11465  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11466  000594  ECEB  F01D         	call	_updateServoPosition	;wreg free
 11467                           
 11468                           ;Test.c: 292: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11469  000598  0E00               	movlw	0
 11470  00059A  0100               	movlb	0	; () banked
 11471  00059C  6FB8               	movwf	actuatorTest@i_1653& (0+255),b
 11472  00059E                     l6875:
 11473                           
 11474                           ; BSR set to: 0
 11475  00059E  0E63               	movlw	99
 11476  0005A0  0100               	movlb	0	; () banked
 11477  0005A2  65B8               	cpfsgt	actuatorTest@i_1653& (0+255),b
 11478  0005A4  D001               	goto	l6879
 11479  0005A6  D00C               	goto	l6883
 11480  0005A8                     l6879:
 11481                           
 11482                           ; BSR set to: 0
 11483  0005A8  0E68               	movlw	104
 11484  0005AA  0100               	movlb	0	; () banked
 11485  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11486  0005AE  0EE4               	movlw	228
 11487  0005B0                     u7747:
 11488  0005B0  2EE8               	decfsz	wreg,f,c
 11489  0005B2  D7FE               	bra	u7747
 11490  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11491  0005B6  D7FC               	bra	u7747
 11492  0005B8  F000               	nop	
 11493  0005BA  0100               	movlb	0	; () banked
 11494  0005BC  2BB8               	incf	actuatorTest@i_1653& (0+255),f,b
 11495  0005BE  D7EF               	goto	l6875
 11496  0005C0                     l6883:
 11497                           
 11498                           ; BSR set to: 0
 11499  0005C0  0E00               	movlw	0
 11500  0005C2  0100               	movlb	0	; () banked
 11501  0005C4  6FB9               	movwf	actuatorTest@i_1654& (0+255),b
 11502  0005C6                     l6885:
 11503                           
 11504                           ; BSR set to: 0
 11505  0005C6  0E63               	movlw	99
 11506  0005C8  0100               	movlb	0	; () banked
 11507  0005CA  65B9               	cpfsgt	actuatorTest@i_1654& (0+255),b
 11508  0005CC  D001               	goto	l6889
 11509  0005CE  D00C               	goto	l1131
 11510  0005D0                     l6889:
 11511                           
 11512                           ; BSR set to: 0
 11513  0005D0  0E68               	movlw	104
 11514  0005D2  0100               	movlb	0	; () banked
 11515  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11516  0005D6  0EE4               	movlw	228
 11517  0005D8                     u7757:
 11518  0005D8  2EE8               	decfsz	wreg,f,c
 11519  0005DA  D7FE               	bra	u7757
 11520  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11521  0005DE  D7FC               	bra	u7757
 11522  0005E0  F000               	nop	
 11523  0005E2  0100               	movlb	0	; () banked
 11524  0005E4  2BB9               	incf	actuatorTest@i_1654& (0+255),f,b
 11525  0005E6  D7EF               	goto	l6885
 11526  0005E8                     l1131:
 11527                           
 11528                           ; BSR set to: 0
 11529                           ;Test.c: 293: TMR1ON = 0;
 11530  0005E8  90CD               	bcf	4045,0,c	;volatile
 11531                           
 11532                           ; BSR set to: 0
 11533                           ;Test.c: 300: printf("TST: TILT SERVO");
 11534  0005EA  0E3A               	movlw	low STR_103
 11535  0005EC  0100               	movlb	0	; () banked
 11536  0005EE  6F8E               	movwf	printf@f& (0+255),b
 11537  0005F0  0EFE               	movlw	high STR_103
 11538  0005F2  0100               	movlb	0	; () banked
 11539  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11540  0005F6  ECB8  F008         	call	_printf	;wreg free
 11541                           
 11542                           ;Test.c: 301: lcdInst(0b11000000);;
 11543  0005FA  0EC0               	movlw	192
 11544  0005FC  EC9B  F023         	call	_lcdInst
 11545                           
 11546                           ;Test.c: 302: printf("LEVEL -- 2s     ");
 11547  000600  0E0A               	movlw	low STR_104
 11548  000602  0100               	movlb	0	; () banked
 11549  000604  6F8E               	movwf	printf@f& (0+255),b
 11550  000606  0EFC               	movlw	high STR_104
 11551  000608  0100               	movlb	0	; () banked
 11552  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11553  00060C  ECB8  F008         	call	_printf	;wreg free
 11554                           
 11555                           ;Test.c: 303: updateServoPosition(1150, 3);
 11556  000610  0E04               	movlw	4
 11557  000612  0100               	movlb	0	; () banked
 11558  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11559  000616  0E7E               	movlw	126
 11560  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11561  00061A  0E00               	movlw	0
 11562  00061C  0100               	movlb	0	; () banked
 11563  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11564  000620  0E03               	movlw	3
 11565  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11566  000624  ECEB  F01D         	call	_updateServoPosition	;wreg free
 11567                           
 11568                           ;Test.c: 304: TMR3ON = 1;
 11569  000628  80B1               	bsf	4017,0,c	;volatile
 11570                           
 11571                           ;Test.c: 305: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11572  00062A  0E00               	movlw	0
 11573  00062C  0100               	movlb	0	; () banked
 11574  00062E  6FBA               	movwf	actuatorTest@i_1657& (0+255),b
 11575  000630                     l6903:
 11576                           
 11577                           ; BSR set to: 0
 11578  000630  0E63               	movlw	99
 11579  000632  0100               	movlb	0	; () banked
 11580  000634  65BA               	cpfsgt	actuatorTest@i_1657& (0+255),b
 11581  000636  D001               	goto	l6907
 11582  000638  D00C               	goto	l6911
 11583  00063A                     l6907:
 11584                           
 11585                           ; BSR set to: 0
 11586  00063A  0E68               	movlw	104
 11587  00063C  0100               	movlb	0	; () banked
 11588  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11589  000640  0EE4               	movlw	228
 11590  000642                     u7767:
 11591  000642  2EE8               	decfsz	wreg,f,c
 11592  000644  D7FE               	bra	u7767
 11593  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11594  000648  D7FC               	bra	u7767
 11595  00064A  F000               	nop	
 11596  00064C  0100               	movlb	0	; () banked
 11597  00064E  2BBA               	incf	actuatorTest@i_1657& (0+255),f,b
 11598  000650  D7EF               	goto	l6903
 11599  000652                     l6911:
 11600                           
 11601                           ; BSR set to: 0
 11602  000652  0E00               	movlw	0
 11603  000654  0100               	movlb	0	; () banked
 11604  000656  6FBB               	movwf	actuatorTest@i_1658& (0+255),b
 11605  000658                     l6913:
 11606                           
 11607                           ; BSR set to: 0
 11608  000658  0E63               	movlw	99
 11609  00065A  0100               	movlb	0	; () banked
 11610  00065C  65BB               	cpfsgt	actuatorTest@i_1658& (0+255),b
 11611  00065E  D001               	goto	l6917
 11612  000660  D00C               	goto	l6921
 11613  000662                     l6917:
 11614                           
 11615                           ; BSR set to: 0
 11616  000662  0E68               	movlw	104
 11617  000664  0100               	movlb	0	; () banked
 11618  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 11619  000668  0EE4               	movlw	228
 11620  00066A                     u7777:
 11621  00066A  2EE8               	decfsz	wreg,f,c
 11622  00066C  D7FE               	bra	u7777
 11623  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11624  000670  D7FC               	bra	u7777
 11625  000672  F000               	nop	
 11626  000674  0100               	movlb	0	; () banked
 11627  000676  2BBB               	incf	actuatorTest@i_1658& (0+255),f,b
 11628  000678  D7EF               	goto	l6913
 11629  00067A                     l6921:
 11630                           
 11631                           ; BSR set to: 0
 11632                           ;Test.c: 307: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11633  00067A  0E80               	movlw	128
 11634  00067C  EC9B  F023         	call	_lcdInst
 11635  000680  0EC0               	movlw	192
 11636  000682  EC9B  F023         	call	_lcdInst
 11637                           
 11638                           ;Test.c: 308: printf("DROP -- 2s      ");
 11639  000686  0EE8               	movlw	low STR_105
 11640  000688  0100               	movlb	0	; () banked
 11641  00068A  6F8E               	movwf	printf@f& (0+255),b
 11642  00068C  0EFB               	movlw	high STR_105
 11643  00068E  0100               	movlb	0	; () banked
 11644  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 11645  000692  ECB8  F008         	call	_printf	;wreg free
 11646                           
 11647                           ;Test.c: 309: updateServoPosition(1350, 3);
 11648  000696  0E05               	movlw	5
 11649  000698  0100               	movlb	0	; () banked
 11650  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11651  00069C  0E46               	movlw	70
 11652  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11653  0006A0  0E00               	movlw	0
 11654  0006A2  0100               	movlb	0	; () banked
 11655  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11656  0006A6  0E03               	movlw	3
 11657  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11658  0006AA  ECEB  F01D         	call	_updateServoPosition	;wreg free
 11659                           
 11660                           ;Test.c: 310: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11661  0006AE  0E00               	movlw	0
 11662  0006B0  0100               	movlb	0	; () banked
 11663  0006B2  6FBC               	movwf	actuatorTest@i_1660& (0+255),b
 11664  0006B4                     l6929:
 11665                           
 11666                           ; BSR set to: 0
 11667  0006B4  0E63               	movlw	99
 11668  0006B6  0100               	movlb	0	; () banked
 11669  0006B8  65BC               	cpfsgt	actuatorTest@i_1660& (0+255),b
 11670  0006BA  D001               	goto	l6933
 11671  0006BC  D00C               	goto	l6937
 11672  0006BE                     l6933:
 11673                           
 11674                           ; BSR set to: 0
 11675  0006BE  0E68               	movlw	104
 11676  0006C0  0100               	movlb	0	; () banked
 11677  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 11678  0006C4  0EE4               	movlw	228
 11679  0006C6                     u7787:
 11680  0006C6  2EE8               	decfsz	wreg,f,c
 11681  0006C8  D7FE               	bra	u7787
 11682  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11683  0006CC  D7FC               	bra	u7787
 11684  0006CE  F000               	nop	
 11685  0006D0  0100               	movlb	0	; () banked
 11686  0006D2  2BBC               	incf	actuatorTest@i_1660& (0+255),f,b
 11687  0006D4  D7EF               	goto	l6929
 11688  0006D6                     l6937:
 11689                           
 11690                           ; BSR set to: 0
 11691  0006D6  0E00               	movlw	0
 11692  0006D8  0100               	movlb	0	; () banked
 11693  0006DA  6FBD               	movwf	actuatorTest@i_1661& (0+255),b
 11694  0006DC                     l6939:
 11695                           
 11696                           ; BSR set to: 0
 11697  0006DC  0E63               	movlw	99
 11698  0006DE  0100               	movlb	0	; () banked
 11699  0006E0  65BD               	cpfsgt	actuatorTest@i_1661& (0+255),b
 11700  0006E2  D001               	goto	l6943
 11701  0006E4  D00C               	goto	l6947
 11702  0006E6                     l6943:
 11703                           
 11704                           ; BSR set to: 0
 11705  0006E6  0E68               	movlw	104
 11706  0006E8  0100               	movlb	0	; () banked
 11707  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 11708  0006EC  0EE4               	movlw	228
 11709  0006EE                     u7797:
 11710  0006EE  2EE8               	decfsz	wreg,f,c
 11711  0006F0  D7FE               	bra	u7797
 11712  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11713  0006F4  D7FC               	bra	u7797
 11714  0006F6  F000               	nop	
 11715  0006F8  0100               	movlb	0	; () banked
 11716  0006FA  2BBD               	incf	actuatorTest@i_1661& (0+255),f,b
 11717  0006FC  D7EF               	goto	l6939
 11718  0006FE                     l6947:
 11719                           
 11720                           ; BSR set to: 0
 11721                           ;Test.c: 312: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11722  0006FE  0E80               	movlw	128
 11723  000700  EC9B  F023         	call	_lcdInst
 11724  000704  0EC0               	movlw	192
 11725  000706  EC9B  F023         	call	_lcdInst
 11726                           
 11727                           ;Test.c: 313: printf("LEVEL -- 2s     ");
 11728  00070A  0E0A               	movlw	low STR_104
 11729  00070C  0100               	movlb	0	; () banked
 11730  00070E  6F8E               	movwf	printf@f& (0+255),b
 11731  000710  0EFC               	movlw	high STR_104
 11732  000712  0100               	movlb	0	; () banked
 11733  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 11734  000716  ECB8  F008         	call	_printf	;wreg free
 11735                           
 11736                           ;Test.c: 314: updateServoPosition(1150, 3);
 11737  00071A  0E04               	movlw	4
 11738  00071C  0100               	movlb	0	; () banked
 11739  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11740  000720  0E7E               	movlw	126
 11741  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11742  000724  0E00               	movlw	0
 11743  000726  0100               	movlb	0	; () banked
 11744  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11745  00072A  0E03               	movlw	3
 11746  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11747  00072E  ECEB  F01D         	call	_updateServoPosition	;wreg free
 11748                           
 11749                           ;Test.c: 315: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11750  000732  0E00               	movlw	0
 11751  000734  0100               	movlb	0	; () banked
 11752  000736  6FBE               	movwf	actuatorTest@i_1663& (0+255),b
 11753  000738                     l6955:
 11754                           
 11755                           ; BSR set to: 0
 11756  000738  0E63               	movlw	99
 11757  00073A  0100               	movlb	0	; () banked
 11758  00073C  65BE               	cpfsgt	actuatorTest@i_1663& (0+255),b
 11759  00073E  D001               	goto	l6959
 11760  000740  D00C               	goto	l6963
 11761  000742                     l6959:
 11762                           
 11763                           ; BSR set to: 0
 11764  000742  0E68               	movlw	104
 11765  000744  0100               	movlb	0	; () banked
 11766  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 11767  000748  0EE4               	movlw	228
 11768  00074A                     u7807:
 11769  00074A  2EE8               	decfsz	wreg,f,c
 11770  00074C  D7FE               	bra	u7807
 11771  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11772  000750  D7FC               	bra	u7807
 11773  000752  F000               	nop	
 11774  000754  0100               	movlb	0	; () banked
 11775  000756  2BBE               	incf	actuatorTest@i_1663& (0+255),f,b
 11776  000758  D7EF               	goto	l6955
 11777  00075A                     l6963:
 11778                           
 11779                           ; BSR set to: 0
 11780  00075A  0E00               	movlw	0
 11781  00075C  0100               	movlb	0	; () banked
 11782  00075E  6FBF               	movwf	actuatorTest@i_1664& (0+255),b
 11783  000760                     l6965:
 11784                           
 11785                           ; BSR set to: 0
 11786  000760  0E63               	movlw	99
 11787  000762  0100               	movlb	0	; () banked
 11788  000764  65BF               	cpfsgt	actuatorTest@i_1664& (0+255),b
 11789  000766  D001               	goto	l6969
 11790  000768  D00C               	goto	l1143
 11791  00076A                     l6969:
 11792                           
 11793                           ; BSR set to: 0
 11794  00076A  0E68               	movlw	104
 11795  00076C  0100               	movlb	0	; () banked
 11796  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11797  000770  0EE4               	movlw	228
 11798  000772                     u7817:
 11799  000772  2EE8               	decfsz	wreg,f,c
 11800  000774  D7FE               	bra	u7817
 11801  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11802  000778  D7FC               	bra	u7817
 11803  00077A  F000               	nop	
 11804  00077C  0100               	movlb	0	; () banked
 11805  00077E  2BBF               	incf	actuatorTest@i_1664& (0+255),f,b
 11806  000780  D7EF               	goto	l6965
 11807  000782                     l1143:
 11808                           
 11809                           ; BSR set to: 0
 11810                           ;Test.c: 316: TMR3ON = 0;
 11811  000782  90B1               	bcf	4017,0,c	;volatile
 11812                           
 11813                           ;Test.c: 317: (INTCONbits.GIE = 0);
 11814  000784  9EF2               	bcf	intcon,7,c	;volatile
 11815                           
 11816                           ; BSR set to: 0
 11817                           ;Test.c: 322: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11818  000786  0E01               	movlw	1
 11819  000788  EC9B  F023         	call	_lcdInst
 11820  00078C  0E68               	movlw	104
 11821  00078E  0100               	movlb	0	; () banked
 11822  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 11823  000792  0EE4               	movlw	228
 11824  000794                     u7827:
 11825  000794  2EE8               	decfsz	wreg,f,c
 11826  000796  D7FE               	bra	u7827
 11827  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11828  00079A  D7FC               	bra	u7827
 11829  00079C  F000               	nop	
 11830  00079E  0E80               	movlw	128
 11831  0007A0  EC9B  F023         	call	_lcdInst
 11832                           
 11833                           ;Test.c: 323: printf("TST: CAM SERVO");
 11834  0007A4  0E96               	movlw	low STR_107
 11835  0007A6  0100               	movlb	0	; () banked
 11836  0007A8  6F8E               	movwf	printf@f& (0+255),b
 11837  0007AA  0EFE               	movlw	high STR_107
 11838  0007AC  0100               	movlb	0	; () banked
 11839  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11840  0007B0  ECB8  F008         	call	_printf	;wreg free
 11841                           
 11842                           ;Test.c: 324: lcdInst(0b11000000);;
 11843  0007B4  0EC0               	movlw	192
 11844  0007B6  EC9B  F023         	call	_lcdInst
 11845                           
 11846                           ;Test.c: 325: printf("CAM UP  |RC0=1");
 11847  0007BA  0E78               	movlw	low STR_108
 11848  0007BC  0100               	movlb	0	; () banked
 11849  0007BE  6F8E               	movwf	printf@f& (0+255),b
 11850  0007C0  0EFE               	movlw	high STR_108
 11851  0007C2  0100               	movlb	0	; () banked
 11852  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11853  0007C6  ECB8  F008         	call	_printf	;wreg free
 11854                           
 11855                           ;Test.c: 326: LATCbits.LATC0 = 1;
 11856  0007CA  808B               	bsf	3979,0,c	;volatile
 11857                           
 11858                           ;Test.c: 327: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11859  0007CC  0E00               	movlw	0
 11860  0007CE  0100               	movlb	0	; () banked
 11861  0007D0  6FC0               	movwf	actuatorTest@i_1667& (0+255),b
 11862  0007D2                     l6989:
 11863                           
 11864                           ; BSR set to: 0
 11865  0007D2  0E63               	movlw	99
 11866  0007D4  0100               	movlb	0	; () banked
 11867  0007D6  65C0               	cpfsgt	actuatorTest@i_1667& (0+255),b
 11868  0007D8  D001               	goto	l6993
 11869  0007DA  D00C               	goto	l6997
 11870  0007DC                     l6993:
 11871                           
 11872                           ; BSR set to: 0
 11873  0007DC  0E68               	movlw	104
 11874  0007DE  0100               	movlb	0	; () banked
 11875  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 11876  0007E2  0EE4               	movlw	228
 11877  0007E4                     u7837:
 11878  0007E4  2EE8               	decfsz	wreg,f,c
 11879  0007E6  D7FE               	bra	u7837
 11880  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11881  0007EA  D7FC               	bra	u7837
 11882  0007EC  F000               	nop	
 11883  0007EE  0100               	movlb	0	; () banked
 11884  0007F0  2BC0               	incf	actuatorTest@i_1667& (0+255),f,b
 11885  0007F2  D7EF               	goto	l6989
 11886  0007F4                     l6997:
 11887                           
 11888                           ; BSR set to: 0
 11889  0007F4  0E00               	movlw	0
 11890  0007F6  0100               	movlb	0	; () banked
 11891  0007F8  6FC1               	movwf	actuatorTest@i_1668& (0+255),b
 11892  0007FA                     l6999:
 11893                           
 11894                           ; BSR set to: 0
 11895  0007FA  0E63               	movlw	99
 11896  0007FC  0100               	movlb	0	; () banked
 11897  0007FE  65C1               	cpfsgt	actuatorTest@i_1668& (0+255),b
 11898  000800  D001               	goto	l7003
 11899  000802  D00C               	goto	l7007
 11900  000804                     l7003:
 11901                           
 11902                           ; BSR set to: 0
 11903  000804  0E68               	movlw	104
 11904  000806  0100               	movlb	0	; () banked
 11905  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 11906  00080A  0EE4               	movlw	228
 11907  00080C                     u7847:
 11908  00080C  2EE8               	decfsz	wreg,f,c
 11909  00080E  D7FE               	bra	u7847
 11910  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11911  000812  D7FC               	bra	u7847
 11912  000814  F000               	nop	
 11913  000816  0100               	movlb	0	; () banked
 11914  000818  2BC1               	incf	actuatorTest@i_1668& (0+255),f,b
 11915  00081A  D7EF               	goto	l6999
 11916  00081C                     l7007:
 11917                           
 11918                           ; BSR set to: 0
 11919                           ;Test.c: 328: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11920  00081C  0E80               	movlw	128
 11921  00081E  EC9B  F023         	call	_lcdInst
 11922  000822  0EC0               	movlw	192
 11923  000824  EC9B  F023         	call	_lcdInst
 11924                           
 11925                           ;Test.c: 329: printf("CAM DWN |RC0=0");
 11926  000828  0E69               	movlw	low STR_109
 11927  00082A  0100               	movlb	0	; () banked
 11928  00082C  6F8E               	movwf	printf@f& (0+255),b
 11929  00082E  0EFE               	movlw	high STR_109
 11930  000830  0100               	movlb	0	; () banked
 11931  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 11932  000834  ECB8  F008         	call	_printf	;wreg free
 11933                           
 11934                           ;Test.c: 332: for(i=0;i<10000;i++)
 11935  000838  0E00               	movlw	0
 11936  00083A  0100               	movlb	0	; () banked
 11937  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11938  00083E  0E00               	movlw	0
 11939  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 11940  000842                     l7013:
 11941                           
 11942                           ; BSR set to: 0
 11943  000842  0100               	movlb	0	; () banked
 11944  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11945  000846  D008               	goto	l1148
 11946  000848  0E10               	movlw	16
 11947  00084A  0100               	movlb	0	; () banked
 11948  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11949  00084E  0E27               	movlw	39
 11950  000850  0100               	movlb	0	; () banked
 11951  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 11952  000854  B0D8               	btfsc	status,0,c
 11953  000856  D00D               	goto	l7023
 11954  000858                     l1148:
 11955                           
 11956                           ; BSR set to: 0
 11957                           ;Test.c: 333: {
 11958                           ;Test.c: 334: LATCbits.LATC0 = 1;
 11959  000858  808B               	bsf	3979,0,c	;volatile
 11960                           
 11961                           ; BSR set to: 0
 11962                           ;Test.c: 335: _delay((unsigned long)((10)*(32000000/4000000.0)));
 11963  00085A  0E1A               	movlw	26
 11964  00085C                     u7857:
 11965  00085C  2EE8               	decfsz	wreg,f,c
 11966  00085E  D7FE               	bra	u7857
 11967  000860  D000               	nop2	
 11968                           
 11969                           ;Test.c: 336: LATCbits.LATC0 = 0;
 11970  000862  908B               	bcf	3979,0,c	;volatile
 11971                           
 11972                           ;Test.c: 337: _delay((unsigned long)((90)*(32000000/4000000.0)));
 11973  000864  0EF0               	movlw	240
 11974  000866                     u7867:
 11975  000866  2EE8               	decfsz	wreg,f,c
 11976  000868  D7FE               	bra	u7867
 11977  00086A  0100               	movlb	0	; () banked
 11978  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11979  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11980  000870  D7E8               	goto	l7013
 11981  000872                     l7023:
 11982                           
 11983                           ; BSR set to: 0
 11984                           ;Test.c: 338: }
 11985                           ;Test.c: 340: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11986  000872  0E00               	movlw	0
 11987  000874  0100               	movlb	0	; () banked
 11988  000876  6FC2               	movwf	actuatorTest@i_1670& (0+255),b
 11989  000878                     l7025:
 11990                           
 11991                           ; BSR set to: 0
 11992  000878  0E63               	movlw	99
 11993  00087A  0100               	movlb	0	; () banked
 11994  00087C  65C2               	cpfsgt	actuatorTest@i_1670& (0+255),b
 11995  00087E  D001               	goto	l7029
 11996  000880  D00C               	goto	l7033
 11997  000882                     l7029:
 11998                           
 11999                           ; BSR set to: 0
 12000  000882  0E68               	movlw	104
 12001  000884  0100               	movlb	0	; () banked
 12002  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 12003  000888  0EE4               	movlw	228
 12004  00088A                     u7877:
 12005  00088A  2EE8               	decfsz	wreg,f,c
 12006  00088C  D7FE               	bra	u7877
 12007  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12008  000890  D7FC               	bra	u7877
 12009  000892  F000               	nop	
 12010  000894  0100               	movlb	0	; () banked
 12011  000896  2BC2               	incf	actuatorTest@i_1670& (0+255),f,b
 12012  000898  D7EF               	goto	l7025
 12013  00089A                     l7033:
 12014                           
 12015                           ; BSR set to: 0
 12016  00089A  0E00               	movlw	0
 12017  00089C  0100               	movlb	0	; () banked
 12018  00089E  6FC3               	movwf	actuatorTest@i_1671& (0+255),b
 12019  0008A0                     l7035:
 12020                           
 12021                           ; BSR set to: 0
 12022  0008A0  0E63               	movlw	99
 12023  0008A2  0100               	movlb	0	; () banked
 12024  0008A4  65C3               	cpfsgt	actuatorTest@i_1671& (0+255),b
 12025  0008A6  D001               	goto	l7039
 12026  0008A8  D00C               	goto	l7043
 12027  0008AA                     l7039:
 12028                           
 12029                           ; BSR set to: 0
 12030  0008AA  0E68               	movlw	104
 12031  0008AC  0100               	movlb	0	; () banked
 12032  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 12033  0008B0  0EE4               	movlw	228
 12034  0008B2                     u7887:
 12035  0008B2  2EE8               	decfsz	wreg,f,c
 12036  0008B4  D7FE               	bra	u7887
 12037  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12038  0008B8  D7FC               	bra	u7887
 12039  0008BA  F000               	nop	
 12040  0008BC  0100               	movlb	0	; () banked
 12041  0008BE  2BC3               	incf	actuatorTest@i_1671& (0+255),f,b
 12042  0008C0  D7EF               	goto	l7035
 12043  0008C2                     l7043:
 12044                           
 12045                           ; BSR set to: 0
 12046                           ;Test.c: 341: machine_state = Testing_state;
 12047  0008C2  0E03               	movlw	3
 12048  0008C4  0100               	movlb	0	; () banked
 12049  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 12050                           
 12051                           ; BSR set to: 0
 12052  0008C8  0012               	return		;funcret
 12053  0008CA                     __end_of_actuatorTest:
 12054                           	opt stack 0
 12055                           tblptru	equ	0xFF8
 12056                           tblptrh	equ	0xFF7
 12057                           tblptrl	equ	0xFF6
 12058                           tablat	equ	0xFF5
 12059                           prodh	equ	0xFF4
 12060                           prodl	equ	0xFF3
 12061                           intcon	equ	0xFF2
 12062                           intcon2	equ	0xFF1
 12063                           intcon3	equ	0xFF0
 12064                           postinc0	equ	0xFEE
 12065                           wreg	equ	0xFE8
 12066                           postdec1	equ	0xFE5
 12067                           fsr1l	equ	0xFE1
 12068                           indf2	equ	0xFDF
 12069                           postinc2	equ	0xFDE
 12070                           postdec2	equ	0xFDD
 12071                           fsr2h	equ	0xFDA
 12072                           fsr2l	equ	0xFD9
 12073                           status	equ	0xFD8
 12074                           
 12075 ;; *************** function _ToggleTestA5 *****************
 12076 ;; Defined at:
 12077 ;;		line 490 in file "Test.c"
 12078 ;; Parameters:    Size  Location     Type
 12079 ;;		None
 12080 ;; Auto vars:     Size  Location     Type
 12081 ;;  on              2   44[BANK0 ] int 
 12082 ;; Return value:  Size  Location     Type
 12083 ;;                  1    wreg      void 
 12084 ;; Registers used:
 12085 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12086 ;; Tracked objects:
 12087 ;;		On entry : 0/0
 12088 ;;		On exit  : 0/0
 12089 ;;		Unchanged: 0/0
 12090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12092 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12093 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12094 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12095 ;;Total ram usage:        3 bytes
 12096 ;; Hardware stack levels used:    1
 12097 ;; Hardware stack levels required when called:   10
 12098 ;; This function calls:
 12099 ;;		_lcdInst
 12100 ;;		_printf
 12101 ;; This function is called by:
 12102 ;;		_Test
 12103 ;; This function uses a non-reentrant model
 12104 ;;
 12105                           
 12106                           	psect	text41
 12107  0039CC                     __ptext41:
 12108                           	opt stack 0
 12109  0039CC                     _ToggleTestA5:
 12110                           	opt stack 19
 12111                           
 12112                           ;Test.c: 491: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12113                           
 12114                           ; BSR set to: 0
 12115                           ;incstack = 0
 12116  0039CC  0E01               	movlw	1
 12117  0039CE  EC9B  F023         	call	_lcdInst
 12118  0039D2  0E68               	movlw	104
 12119  0039D4  0100               	movlb	0	; () banked
 12120  0039D6  6FAB               	movwf	??_ToggleTestA5& (0+255),b
 12121  0039D8  0EE4               	movlw	228
 12122  0039DA                     u7897:
 12123  0039DA  2EE8               	decfsz	wreg,f,c
 12124  0039DC  D7FE               	bra	u7897
 12125  0039DE  2FAB               	decfsz	??_ToggleTestA5& (0+255),f,b
 12126  0039E0  D7FC               	bra	u7897
 12127  0039E2  F000               	nop	
 12128  0039E4  0E80               	movlw	128
 12129  0039E6  EC9B  F023         	call	_lcdInst
 12130                           
 12131                           ;Test.c: 492: printf("D WILL RETURN   ");
 12132  0039EA  0E3D               	movlw	low STR_114
 12133  0039EC  0100               	movlb	0	; () banked
 12134  0039EE  6F8E               	movwf	printf@f& (0+255),b
 12135  0039F0  0EFC               	movlw	high STR_114
 12136  0039F2  0100               	movlb	0	; () banked
 12137  0039F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12138  0039F6  ECB8  F008         	call	_printf	;wreg free
 12139                           
 12140                           ;Test.c: 493: lcdInst(0b11000000);;
 12141  0039FA  0EC0               	movlw	192
 12142  0039FC  EC9B  F023         	call	_lcdInst
 12143                           
 12144                           ;Test.c: 494: printf("ELSE TOGGLES RA5");
 12145  003A00  0E70               	movlw	low STR_115
 12146  003A02  0100               	movlb	0	; () banked
 12147  003A04  6F8E               	movwf	printf@f& (0+255),b
 12148  003A06  0EFC               	movlw	high STR_115
 12149  003A08  0100               	movlb	0	; () banked
 12150  003A0A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12151  003A0C  ECB8  F008         	call	_printf	;wreg free
 12152                           
 12153                           ;Test.c: 495: int on = 0;
 12154  003A10  0E00               	movlw	0
 12155  003A12  0100               	movlb	0	; () banked
 12156  003A14  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12157  003A16  0E00               	movlw	0
 12158  003A18  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12159  003A1A                     l1210:
 12160  003A1A  A281               	btfss	3969,1,c	;volatile
 12161  003A1C  D7FE               	goto	l1210
 12162                           
 12163                           ;Test.c: 500: }
 12164                           ;Test.c: 501: if(PORTB >> 4 == 0b1111){
 12165  003A1E  3881               	swapf	3969,w,c	;volatile
 12166  003A20  0B0F               	andlw	15
 12167  003A22  0A0F               	xorlw	15
 12168  003A24  B4D8               	btfsc	status,2,c
 12169  003A26  0012               	return	
 12170                           
 12171                           ;Test.c: 504: else{
 12172                           ;Test.c: 505: if(on == 0){
 12173                           
 12174                           ;Test.c: 503: }
 12175                           
 12176                           ;Test.c: 502: break;
 12177  003A28  0100               	movlb	0	; () banked
 12178  003A2A  51AC               	movf	ToggleTestA5@on& (0+255),w,b
 12179  003A2C  0100               	movlb	0	; () banked
 12180  003A2E  11AD               	iorwf	(ToggleTestA5@on+1)& (0+255),w,b
 12181  003A30  A4D8               	btfss	status,2,c
 12182  003A32  D007               	goto	l7101
 12183                           
 12184                           ; BSR set to: 0
 12185                           ;Test.c: 506: on = 1;
 12186  003A34  0E00               	movlw	0
 12187  003A36  0100               	movlb	0	; () banked
 12188  003A38  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12189  003A3A  0E01               	movlw	1
 12190  003A3C  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12191                           
 12192                           ; BSR set to: 0
 12193                           ;Test.c: 507: LATAbits.LATA5 = 1;
 12194  003A3E  8A89               	bsf	3977,5,c	;volatile
 12195                           
 12196                           ;Test.c: 508: }
 12197  003A40  D006               	goto	l1218
 12198  003A42                     l7101:
 12199                           
 12200                           ; BSR set to: 0
 12201                           ;Test.c: 509: else{
 12202                           ;Test.c: 510: on = 0;
 12203  003A42  0E00               	movlw	0
 12204  003A44  0100               	movlb	0	; () banked
 12205  003A46  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12206  003A48  0E00               	movlw	0
 12207  003A4A  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12208                           
 12209                           ; BSR set to: 0
 12210                           ;Test.c: 511: LATAbits.LATA5 = 0;
 12211  003A4C  9A89               	bcf	3977,5,c	;volatile
 12212  003A4E                     l1218:
 12213  003A4E  A281               	btfss	3969,1,c	;volatile
 12214  003A50  D7E4               	goto	l1210
 12215  003A52  D7FD               	goto	l1218
 12216  003A54                     __end_of_ToggleTestA5:
 12217                           	opt stack 0
 12218                           tblptru	equ	0xFF8
 12219                           tblptrh	equ	0xFF7
 12220                           tblptrl	equ	0xFF6
 12221                           tablat	equ	0xFF5
 12222                           prodh	equ	0xFF4
 12223                           prodl	equ	0xFF3
 12224                           intcon	equ	0xFF2
 12225                           intcon2	equ	0xFF1
 12226                           intcon3	equ	0xFF0
 12227                           postinc0	equ	0xFEE
 12228                           wreg	equ	0xFE8
 12229                           postdec1	equ	0xFE5
 12230                           fsr1l	equ	0xFE1
 12231                           indf2	equ	0xFDF
 12232                           postinc2	equ	0xFDE
 12233                           postdec2	equ	0xFDD
 12234                           fsr2h	equ	0xFDA
 12235                           fsr2l	equ	0xFD9
 12236                           status	equ	0xFD8
 12237                           
 12238 ;; *************** function _PusherTestA5 *****************
 12239 ;; Defined at:
 12240 ;;		line 463 in file "Test.c"
 12241 ;; Parameters:    Size  Location     Type
 12242 ;;		None
 12243 ;; Auto vars:     Size  Location     Type
 12244 ;;		None
 12245 ;; Return value:  Size  Location     Type
 12246 ;;                  1    wreg      void 
 12247 ;; Registers used:
 12248 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12249 ;; Tracked objects:
 12250 ;;		On entry : 0/0
 12251 ;;		On exit  : 0/0
 12252 ;;		Unchanged: 0/0
 12253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12256 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12257 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12258 ;;Total ram usage:        2 bytes
 12259 ;; Hardware stack levels used:    1
 12260 ;; Hardware stack levels required when called:   10
 12261 ;; This function calls:
 12262 ;;		_lcdInst
 12263 ;;		_printf
 12264 ;; This function is called by:
 12265 ;;		_Test
 12266 ;; This function uses a non-reentrant model
 12267 ;;
 12268                           
 12269                           	psect	text42
 12270  003F06                     __ptext42:
 12271                           	opt stack 0
 12272  003F06                     _PusherTestA5:
 12273                           	opt stack 19
 12274                           
 12275                           ;Test.c: 464: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12276                           
 12277                           ;incstack = 0
 12278  003F06  0E01               	movlw	1
 12279  003F08  EC9B  F023         	call	_lcdInst
 12280  003F0C  0E68               	movlw	104
 12281  003F0E  0100               	movlb	0	; () banked
 12282  003F10  6FAB               	movwf	??_PusherTestA5& (0+255),b
 12283  003F12  0EE4               	movlw	228
 12284  003F14                     u7907:
 12285  003F14  2EE8               	decfsz	wreg,f,c
 12286  003F16  D7FE               	bra	u7907
 12287  003F18  2FAB               	decfsz	??_PusherTestA5& (0+255),f,b
 12288  003F1A  D7FC               	bra	u7907
 12289  003F1C  F000               	nop	
 12290  003F1E  0E80               	movlw	128
 12291  003F20  EC9B  F023         	call	_lcdInst
 12292                           
 12293                           ;Test.c: 465: printf("PUSHER TST");
 12294  003F24  0E71               	movlw	low STR_113
 12295  003F26  0100               	movlb	0	; () banked
 12296  003F28  6F8E               	movwf	printf@f& (0+255),b
 12297  003F2A  0EFF               	movlw	high STR_113
 12298  003F2C  0100               	movlb	0	; () banked
 12299  003F2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12300  003F30  ECB8  F008         	call	_printf	;wreg free
 12301  003F34                     l1198:
 12302  003F34  A281               	btfss	3969,1,c	;volatile
 12303  003F36  D7FE               	goto	l1198
 12304                           
 12305                           ;Test.c: 471: }
 12306                           ;Test.c: 482: LATAbits.LATA4 = 1;
 12307  003F38  8889               	bsf	3977,4,c	;volatile
 12308                           
 12309                           ;Test.c: 483: _delay((unsigned long)((100)*(32000000/4000.0)));
 12310  003F3A  0E05               	movlw	5
 12311  003F3C  0100               	movlb	0	; () banked
 12312  003F3E  6FAC               	movwf	(??_PusherTestA5+1)& (0+255),b
 12313  003F40  0E0F               	movlw	15
 12314  003F42  0100               	movlb	0	; () banked
 12315  003F44  6FAB               	movwf	??_PusherTestA5& (0+255),b
 12316  003F46  0EF1               	movlw	241
 12317  003F48                     u7917:
 12318  003F48  2EE8               	decfsz	wreg,f,c
 12319  003F4A  D7FE               	bra	u7917
 12320  003F4C  2FAB               	decfsz	??_PusherTestA5& (0+255),f,b
 12321  003F4E  D7FC               	bra	u7917
 12322  003F50  2FAC               	decfsz	(??_PusherTestA5+1)& (0+255),f,b
 12323  003F52  D7FA               	bra	u7917
 12324                           
 12325                           ;Test.c: 484: LATAbits.LATA4 = 0;
 12326  003F54  9889               	bcf	3977,4,c	;volatile
 12327  003F56                     l1201:
 12328  003F56  A281               	btfss	3969,1,c	;volatile
 12329  003F58  D7ED               	goto	l1198
 12330  003F5A  D7FD               	goto	l1201
 12331  003F5C                     __end_of_PusherTestA5:
 12332                           	opt stack 0
 12333                           tblptru	equ	0xFF8
 12334                           tblptrh	equ	0xFF7
 12335                           tblptrl	equ	0xFF6
 12336                           tablat	equ	0xFF5
 12337                           prodh	equ	0xFF4
 12338                           prodl	equ	0xFF3
 12339                           intcon	equ	0xFF2
 12340                           intcon2	equ	0xFF1
 12341                           intcon3	equ	0xFF0
 12342                           postinc0	equ	0xFEE
 12343                           wreg	equ	0xFE8
 12344                           postdec1	equ	0xFE5
 12345                           fsr1l	equ	0xFE1
 12346                           indf2	equ	0xFDF
 12347                           postinc2	equ	0xFDE
 12348                           postdec2	equ	0xFDD
 12349                           fsr2h	equ	0xFDA
 12350                           fsr2l	equ	0xFD9
 12351                           status	equ	0xFD8
 12352                           
 12353 ;; *************** function _PortTests *****************
 12354 ;; Defined at:
 12355 ;;		line 395 in file "Test.c"
 12356 ;; Parameters:    Size  Location     Type
 12357 ;;		None
 12358 ;; Auto vars:     Size  Location     Type
 12359 ;;		None
 12360 ;; Return value:  Size  Location     Type
 12361 ;;                  1    wreg      void 
 12362 ;; Registers used:
 12363 ;;		wreg, status,2, status,0
 12364 ;; Tracked objects:
 12365 ;;		On entry : 0/0
 12366 ;;		On exit  : 0/0
 12367 ;;		Unchanged: 0/0
 12368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12371 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12372 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12373 ;;Total ram usage:        2 bytes
 12374 ;; Hardware stack levels used:    1
 12375 ;; Hardware stack levels required when called:    7
 12376 ;; This function calls:
 12377 ;;		Nothing
 12378 ;; This function is called by:
 12379 ;;		_Test
 12380 ;; This function uses a non-reentrant model
 12381 ;;
 12382                           
 12383                           	psect	text43
 12384  003ADA                     __ptext43:
 12385                           	opt stack 0
 12386  003ADA                     _PortTests:
 12387                           	opt stack 22
 12388  003ADA                     l1161:
 12389  003ADA  A281               	btfss	3969,1,c	;volatile
 12390  003ADC  D7FE               	goto	l1161
 12391                           
 12392                           ;Test.c: 399: var = PORTB >> 4;
 12393  003ADE  CF81 F080          	movff	3969,??_PortTests	;volatile
 12394  003AE2  0100               	movlb	0	; () banked
 12395  003AE4  3B80               	swapf	??_PortTests& (0+255),f,b
 12396  003AE6  0E0F               	movlw	15
 12397  003AE8  1780               	andwf	??_PortTests& (0+255),f,b
 12398  003AEA  0100               	movlb	0	; () banked
 12399  003AEC  5180               	movf	??_PortTests& (0+255),w,b
 12400  003AEE  0100               	movlb	0	; () banked
 12401  003AF0  6FFA               	movwf	_var& (0+255),b
 12402  003AF2  6BFB               	clrf	(_var+1)& (0+255),b
 12403                           
 12404                           ;Test.c: 400: switch(var){
 12405  003AF4  D00C               	goto	l7121
 12406  003AF6                     l1165:
 12407                           
 12408                           ; BSR set to: 0
 12409                           ;Test.c: 402: LATEbits.LATE0 = 1;
 12410  003AF6  808D               	bsf	3981,0,c	;volatile
 12411                           
 12412                           ;Test.c: 403: break;
 12413  003AF8  D027               	goto	l1173
 12414  003AFA                     l1167:
 12415                           
 12416                           ; BSR set to: 0
 12417                           ;Test.c: 405: LATEbits.LATE1 = 1;
 12418  003AFA  828D               	bsf	3981,1,c	;volatile
 12419                           
 12420                           ;Test.c: 406: break;
 12421  003AFC  D025               	goto	l1173
 12422  003AFE                     l1168:
 12423                           
 12424                           ; BSR set to: 0
 12425                           ;Test.c: 408: LATDbits.LATD0 = 1;
 12426  003AFE  808C               	bsf	3980,0,c	;volatile
 12427                           
 12428                           ;Test.c: 409: break;
 12429  003B00  D023               	goto	l1173
 12430  003B02                     l1169:
 12431                           
 12432                           ; BSR set to: 0
 12433                           ;Test.c: 411: LATAbits.LATA3 = 1;
 12434  003B02  8689               	bsf	3977,3,c	;volatile
 12435                           
 12436                           ;Test.c: 412: break;
 12437  003B04  D021               	goto	l1173
 12438  003B06                     l1170:
 12439                           
 12440                           ; BSR set to: 0
 12441                           ;Test.c: 414: LATAbits.LATA4 = 1;
 12442  003B06  8889               	bsf	3977,4,c	;volatile
 12443                           
 12444                           ;Test.c: 415: break;
 12445  003B08  D01F               	goto	l1173
 12446  003B0A                     l1171:
 12447                           
 12448                           ; BSR set to: 0
 12449                           ;Test.c: 417: LATAbits.LATA5 = 1;
 12450  003B0A  8A89               	bsf	3977,5,c	;volatile
 12451                           
 12452                           ; BSR set to: 0
 12453                           ;Test.c: 421: }
 12454                           
 12455                           ; BSR set to: 0
 12456                           ;Test.c: 420: break;
 12457                           
 12458                           ;Test.c: 419: default:
 12459                           
 12460                           ;Test.c: 418: break;
 12461  003B0C  D01D               	goto	l1173
 12462  003B0E                     l7121:
 12463                           
 12464                           ; BSR set to: 0
 12465  003B0E  C0FA  F080         	movff	_var,??_PortTests
 12466  003B12  C0FB  F081         	movff	_var+1,??_PortTests+1
 12467                           
 12468                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12469                           ; Switch size 1, requested type "space"
 12470                           ; Number of cases is 1, Range of values is 0 to 0
 12471                           ; switch strategies available:
 12472                           ; Name         Instructions Cycles
 12473                           ; simple_byte            4     3 (average)
 12474                           ;	Chosen strategy is simple_byte
 12475  003B16  0100               	movlb	0	; () banked
 12476  003B18  5181               	movf	(??_PortTests+1)& (0+255),w,b
 12477  003B1A  0A00               	xorlw	0	; case 0
 12478  003B1C  A4D8               	btfss	status,2,c
 12479  003B1E  D014               	goto	l1173
 12480                           
 12481                           ; BSR set to: 0
 12482                           ; Switch size 1, requested type "space"
 12483                           ; Number of cases is 6, Range of values is 0 to 5
 12484                           ; switch strategies available:
 12485                           ; Name         Instructions Cycles
 12486                           ; simple_byte           19    10 (average)
 12487                           ;	Chosen strategy is simple_byte
 12488  003B20  0100               	movlb	0	; () banked
 12489  003B22  5180               	movf	??_PortTests& (0+255),w,b
 12490  003B24  0A00               	xorlw	0	; case 0
 12491  003B26  B4D8               	btfsc	status,2,c
 12492  003B28  D7E6               	goto	l1165
 12493  003B2A  0A01               	xorlw	1	; case 1
 12494  003B2C  B4D8               	btfsc	status,2,c
 12495  003B2E  D7E5               	goto	l1167
 12496  003B30  0A03               	xorlw	3	; case 2
 12497  003B32  B4D8               	btfsc	status,2,c
 12498  003B34  D7E4               	goto	l1168
 12499  003B36  0A01               	xorlw	1	; case 3
 12500  003B38  B4D8               	btfsc	status,2,c
 12501  003B3A  D7E3               	goto	l1169
 12502  003B3C  0A07               	xorlw	7	; case 4
 12503  003B3E  B4D8               	btfsc	status,2,c
 12504  003B40  D7E2               	goto	l1170
 12505  003B42  0A01               	xorlw	1	; case 5
 12506  003B44  B4D8               	btfsc	status,2,c
 12507  003B46  D7E1               	goto	l1171
 12508  003B48                     l1173:
 12509  003B48  B281               	btfsc	3969,1,c	;volatile
 12510  003B4A  D7FE               	goto	l1173
 12511                           
 12512                           ;Test.c: 423: __nop();
 12513  003B4C  F000               	nop	
 12514                           
 12515                           ;Test.c: 424: __nop();
 12516  003B4E  F000               	nop	
 12517                           
 12518                           ;Test.c: 425: LATA = 0x00;
 12519  003B50  0E00               	movlw	0
 12520  003B52  6E89               	movwf	3977,c	;volatile
 12521                           
 12522                           ;Test.c: 426: LATE = 0x00;
 12523  003B54  0E00               	movlw	0
 12524  003B56  6E8D               	movwf	3981,c	;volatile
 12525                           
 12526                           ;Test.c: 427: LATD = 0x00; }
 12527  003B58  0E00               	movlw	0
 12528  003B5A  6E8C               	movwf	3980,c	;volatile
 12529  003B5C  D7BE               	goto	l1161
 12530  003B5E                     __end_of_PortTests:
 12531                           	opt stack 0
 12532                           tblptru	equ	0xFF8
 12533                           tblptrh	equ	0xFF7
 12534                           tblptrl	equ	0xFF6
 12535                           tablat	equ	0xFF5
 12536                           prodh	equ	0xFF4
 12537                           prodl	equ	0xFF3
 12538                           intcon	equ	0xFF2
 12539                           intcon2	equ	0xFF1
 12540                           intcon3	equ	0xFF0
 12541                           postinc0	equ	0xFEE
 12542                           wreg	equ	0xFE8
 12543                           postdec1	equ	0xFE5
 12544                           fsr1l	equ	0xFE1
 12545                           indf2	equ	0xFDF
 12546                           postinc2	equ	0xFDE
 12547                           postdec2	equ	0xFDD
 12548                           fsr2h	equ	0xFDA
 12549                           fsr2l	equ	0xFD9
 12550                           status	equ	0xFD8
 12551                           
 12552 ;; *************** function _PortTestA5 *****************
 12553 ;; Defined at:
 12554 ;;		line 430 in file "Test.c"
 12555 ;; Parameters:    Size  Location     Type
 12556 ;;		None
 12557 ;; Auto vars:     Size  Location     Type
 12558 ;;		None
 12559 ;; Return value:  Size  Location     Type
 12560 ;;                  1    wreg      void 
 12561 ;; Registers used:
 12562 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12563 ;; Tracked objects:
 12564 ;;		On entry : 0/0
 12565 ;;		On exit  : 0/0
 12566 ;;		Unchanged: 0/0
 12567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12570 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12571 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12572 ;;Total ram usage:        1 bytes
 12573 ;; Hardware stack levels used:    1
 12574 ;; Hardware stack levels required when called:   10
 12575 ;; This function calls:
 12576 ;;		_lcdInst
 12577 ;;		_printf
 12578 ;; This function is called by:
 12579 ;;		_Test
 12580 ;; This function uses a non-reentrant model
 12581 ;;
 12582                           
 12583                           	psect	text44
 12584  0038AA                     __ptext44:
 12585                           	opt stack 0
 12586  0038AA                     _PortTestA5:
 12587                           	opt stack 19
 12588                           
 12589                           ;Test.c: 431: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12590                           
 12591                           ;incstack = 0
 12592  0038AA  0E01               	movlw	1
 12593  0038AC  EC9B  F023         	call	_lcdInst
 12594  0038B0  0E68               	movlw	104
 12595  0038B2  0100               	movlb	0	; () banked
 12596  0038B4  6FAB               	movwf	??_PortTestA5& (0+255),b
 12597  0038B6  0EE4               	movlw	228
 12598  0038B8                     u7927:
 12599  0038B8  2EE8               	decfsz	wreg,f,c
 12600  0038BA  D7FE               	bra	u7927
 12601  0038BC  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 12602  0038BE  D7FC               	bra	u7927
 12603  0038C0  F000               	nop	
 12604  0038C2  0E80               	movlw	128
 12605  0038C4  EC9B  F023         	call	_lcdInst
 12606                           
 12607                           ;Test.c: 432: printf("D WILL RETURN    ");
 12608  0038C8  0E8F               	movlw	low STR_111
 12609  0038CA  0100               	movlb	0	; () banked
 12610  0038CC  6F8E               	movwf	printf@f& (0+255),b
 12611  0038CE  0EFB               	movlw	high STR_111
 12612  0038D0  0100               	movlb	0	; () banked
 12613  0038D2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12614  0038D4  ECB8  F008         	call	_printf	;wreg free
 12615                           
 12616                           ;Test.c: 433: lcdInst(0b11000000);;
 12617  0038D8  0EC0               	movlw	192
 12618  0038DA  EC9B  F023         	call	_lcdInst
 12619                           
 12620                           ;Test.c: 434: printf("OTHER SETS RA5   ");
 12621  0038DE  0EA1               	movlw	low STR_112
 12622  0038E0  0100               	movlb	0	; () banked
 12623  0038E2  6F8E               	movwf	printf@f& (0+255),b
 12624  0038E4  0EFB               	movlw	high STR_112
 12625  0038E6  0100               	movlb	0	; () banked
 12626  0038E8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12627  0038EA  ECB8  F008         	call	_printf	;wreg free
 12628  0038EE                     l1182:
 12629  0038EE  A281               	btfss	3969,1,c	;volatile
 12630  0038F0  D7FE               	goto	l1182
 12631                           
 12632                           ;Test.c: 439: }
 12633                           ;Test.c: 440: if(PORTB >> 4 == 0b1111){
 12634  0038F2  3881               	swapf	3969,w,c	;volatile
 12635  0038F4  0B0F               	andlw	15
 12636  0038F6  0A0F               	xorlw	15
 12637  0038F8  B4D8               	btfsc	status,2,c
 12638  0038FA  0012               	return	
 12639                           
 12640                           ;Test.c: 443: else{
 12641                           ;Test.c: 444: LATAbits.LATA5 = 1;
 12642                           
 12643                           ;Test.c: 442: }
 12644                           
 12645                           ;Test.c: 441: break;
 12646  0038FC  8A89               	bsf	3977,5,c	;volatile
 12647  0038FE                     l1188:
 12648  0038FE  B281               	btfsc	3969,1,c	;volatile
 12649  003900  D7FE               	goto	l1188
 12650                           
 12651                           ;Test.c: 447: }
 12652                           ;Test.c: 450: for(i=0;i<10000;i++)
 12653  003902  0E00               	movlw	0
 12654  003904  0100               	movlb	0	; () banked
 12655  003906  6FE5               	movwf	(_i+1)& (0+255),b
 12656  003908  0E00               	movlw	0
 12657  00390A  6FE4               	movwf	_i& (0+255),b
 12658  00390C                     l7065:
 12659                           
 12660                           ; BSR set to: 0
 12661  00390C  0100               	movlb	0	; () banked
 12662  00390E  BFE5               	btfsc	(_i+1)& (0+255),7,b
 12663  003910  D008               	goto	l1191
 12664  003912  0E10               	movlw	16
 12665  003914  0100               	movlb	0	; () banked
 12666  003916  5DE4               	subwf	_i& (0+255),w,b
 12667  003918  0E27               	movlw	39
 12668  00391A  0100               	movlb	0	; () banked
 12669  00391C  59E5               	subwfb	(_i+1)& (0+255),w,b
 12670  00391E  B0D8               	btfsc	status,0,c
 12671  003920  D00D               	goto	l1192
 12672  003922                     l1191:
 12673                           
 12674                           ; BSR set to: 0
 12675                           ;Test.c: 451: {
 12676                           ;Test.c: 452: LATAbits.LATA5 = 1;
 12677  003922  8A89               	bsf	3977,5,c	;volatile
 12678                           
 12679                           ; BSR set to: 0
 12680                           ;Test.c: 453: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12681  003924  0E1A               	movlw	26
 12682  003926                     u7937:
 12683  003926  2EE8               	decfsz	wreg,f,c
 12684  003928  D7FE               	bra	u7937
 12685  00392A  D000               	nop2	
 12686                           
 12687                           ;Test.c: 454: LATAbits.LATA5 = 0;
 12688  00392C  9A89               	bcf	3977,5,c	;volatile
 12689                           
 12690                           ;Test.c: 455: _delay((unsigned long)((90)*(32000000/4000000.0)));
 12691  00392E  0EF0               	movlw	240
 12692  003930                     u7947:
 12693  003930  2EE8               	decfsz	wreg,f,c
 12694  003932  D7FE               	bra	u7947
 12695  003934  0100               	movlb	0	; () banked
 12696  003936  4BE4               	infsnz	_i& (0+255),f,b
 12697  003938  2BE5               	incf	(_i+1)& (0+255),f,b
 12698  00393A  D7E8               	goto	l7065
 12699  00393C                     l1192:
 12700                           
 12701                           ; BSR set to: 0
 12702                           ;Test.c: 456: }
 12703                           ;Test.c: 458: LATAbits.LATA5 = 0;
 12704  00393C  9A89               	bcf	3977,5,c	;volatile
 12705                           
 12706                           ; BSR set to: 0
 12707                           
 12708                           ; BSR set to: 0
 12709  00393E  D7D7               	goto	l1182
 12710  003940                     __end_of_PortTestA5:
 12711                           	opt stack 0
 12712                           tblptru	equ	0xFF8
 12713                           tblptrh	equ	0xFF7
 12714                           tblptrl	equ	0xFF6
 12715                           tablat	equ	0xFF5
 12716                           prodh	equ	0xFF4
 12717                           prodl	equ	0xFF3
 12718                           intcon	equ	0xFF2
 12719                           intcon2	equ	0xFF1
 12720                           intcon3	equ	0xFF0
 12721                           postinc0	equ	0xFEE
 12722                           wreg	equ	0xFE8
 12723                           postdec1	equ	0xFE5
 12724                           fsr1l	equ	0xFE1
 12725                           indf2	equ	0xFDF
 12726                           postinc2	equ	0xFDE
 12727                           postdec2	equ	0xFDD
 12728                           fsr2h	equ	0xFDA
 12729                           fsr2l	equ	0xFD9
 12730                           status	equ	0xFD8
 12731                           
 12732 ;; *************** function _EEPROMTest *****************
 12733 ;; Defined at:
 12734 ;;		line 518 in file "Test.c"
 12735 ;; Parameters:    Size  Location     Type
 12736 ;;		None
 12737 ;; Auto vars:     Size  Location     Type
 12738 ;;		None
 12739 ;; Return value:  Size  Location     Type
 12740 ;;                  1    wreg      void 
 12741 ;; Registers used:
 12742 ;;		None
 12743 ;; Tracked objects:
 12744 ;;		On entry : 0/0
 12745 ;;		On exit  : 0/0
 12746 ;;		Unchanged: 0/0
 12747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12752 ;;Total ram usage:        0 bytes
 12753 ;; Hardware stack levels used:    1
 12754 ;; Hardware stack levels required when called:    7
 12755 ;; This function calls:
 12756 ;;		Nothing
 12757 ;; This function is called by:
 12758 ;;		_Test
 12759 ;; This function uses a non-reentrant model
 12760 ;;
 12761                           
 12762                           	psect	text45
 12763  00479A                     __ptext45:
 12764                           	opt stack 0
 12765  00479A                     _EEPROMTest:
 12766                           	opt stack 22
 12767                           
 12768                           ;incstack = 0
 12769  00479A  0012               	return		;funcret
 12770  00479C                     __end_of_EEPROMTest:
 12771                           	opt stack 0
 12772                           tblptru	equ	0xFF8
 12773                           tblptrh	equ	0xFF7
 12774                           tblptrl	equ	0xFF6
 12775                           tablat	equ	0xFF5
 12776                           prodh	equ	0xFF4
 12777                           prodl	equ	0xFF3
 12778                           intcon	equ	0xFF2
 12779                           intcon2	equ	0xFF1
 12780                           intcon3	equ	0xFF0
 12781                           postinc0	equ	0xFEE
 12782                           wreg	equ	0xFE8
 12783                           postdec1	equ	0xFE5
 12784                           fsr1l	equ	0xFE1
 12785                           indf2	equ	0xFDF
 12786                           postinc2	equ	0xFDE
 12787                           postdec2	equ	0xFDD
 12788                           fsr2h	equ	0xFDA
 12789                           fsr2l	equ	0xFD9
 12790                           status	equ	0xFD8
 12791                           
 12792 ;; *************** function _BothServos *****************
 12793 ;; Defined at:
 12794 ;;		line 344 in file "Test.c"
 12795 ;; Parameters:    Size  Location     Type
 12796 ;;		None
 12797 ;; Auto vars:     Size  Location     Type
 12798 ;;		None
 12799 ;; Return value:  Size  Location     Type
 12800 ;;                  1    wreg      void 
 12801 ;; Registers used:
 12802 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12803 ;; Tracked objects:
 12804 ;;		On entry : 0/0
 12805 ;;		On exit  : 0/0
 12806 ;;		Unchanged: 0/0
 12807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12810 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12811 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12812 ;;Total ram usage:        2 bytes
 12813 ;; Hardware stack levels used:    1
 12814 ;; Hardware stack levels required when called:   10
 12815 ;; This function calls:
 12816 ;;		_initServos
 12817 ;;		_lcdInst
 12818 ;;		_printf
 12819 ;;		_updateServoPosition
 12820 ;; This function is called by:
 12821 ;;		_Test
 12822 ;; This function uses a non-reentrant model
 12823 ;;
 12824                           
 12825                           	psect	text46
 12826  001916                     __ptext46:
 12827                           	opt stack 0
 12828  001916                     _BothServos:
 12829                           	opt stack 19
 12830                           
 12831                           ;Test.c: 345: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12832                           
 12833                           ;incstack = 0
 12834  001916  0E01               	movlw	1
 12835  001918  EC9B  F023         	call	_lcdInst
 12836  00191C  0E68               	movlw	104
 12837  00191E  0100               	movlb	0	; () banked
 12838  001920  6FAB               	movwf	??_BothServos& (0+255),b
 12839  001922  0EE4               	movlw	228
 12840  001924                     u7957:
 12841  001924  2EE8               	decfsz	wreg,f,c
 12842  001926  D7FE               	bra	u7957
 12843  001928  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12844  00192A  D7FC               	bra	u7957
 12845  00192C  F000               	nop	
 12846  00192E  0E80               	movlw	128
 12847  001930  EC9B  F023         	call	_lcdInst
 12848                           
 12849                           ;Test.c: 346: printf("TST: BOTH SERVOS");
 12850  001934  0ED6               	movlw	low STR_110
 12851  001936  0100               	movlb	0	; () banked
 12852  001938  6F8E               	movwf	printf@f& (0+255),b
 12853  00193A  0EFC               	movlw	high STR_110
 12854  00193C  0100               	movlb	0	; () banked
 12855  00193E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12856  001940  ECB8  F008         	call	_printf	;wreg free
 12857                           
 12858                           ;Test.c: 347: TMR1ON = 1;
 12859  001944  80CD               	bsf	4045,0,c	;volatile
 12860                           
 12861                           ;Test.c: 348: TMR3ON = 1;
 12862  001946  80B1               	bsf	4017,0,c	;volatile
 12863                           
 12864                           ;Test.c: 349: machine_state = Sorting_state;
 12865  001948  0E01               	movlw	1
 12866  00194A  0100               	movlb	0	; () banked
 12867  00194C  6FFC               	movwf	_machine_state& (0+255),b
 12868                           
 12869                           ; BSR set to: 0
 12870                           ;Test.c: 350: was_low_1 = 0;
 12871  00194E  0E00               	movlw	0
 12872  001950  6E7A               	movwf	_was_low_1+1,c	;volatile
 12873  001952  0E00               	movlw	0
 12874  001954  6E79               	movwf	_was_low_1,c	;volatile
 12875                           
 12876                           ; BSR set to: 0
 12877                           ;Test.c: 351: was_low_1 = 0;
 12878  001956  0E00               	movlw	0
 12879  001958  6E7A               	movwf	_was_low_1+1,c	;volatile
 12880  00195A  0E00               	movlw	0
 12881  00195C  6E79               	movwf	_was_low_1,c	;volatile
 12882                           
 12883                           ; BSR set to: 0
 12884                           ;Test.c: 357: initServos();
 12885  00195E  EC56  F01F         	call	_initServos	;wreg free
 12886                           
 12887                           ;Test.c: 358: _delay((unsigned long)((1500)*(32000000/4000.0)));
 12888  001962  0E3D               	movlw	61
 12889  001964  0100               	movlb	0	; () banked
 12890  001966  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12891  001968  0EE1               	movlw	225
 12892  00196A  0100               	movlb	0	; () banked
 12893  00196C  6FAB               	movwf	??_BothServos& (0+255),b
 12894  00196E  0E3F               	movlw	63
 12895  001970                     u7967:
 12896  001970  2EE8               	decfsz	wreg,f,c
 12897  001972  D7FE               	bra	u7967
 12898  001974  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12899  001976  D7FC               	bra	u7967
 12900  001978  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12901  00197A  D7FA               	bra	u7967
 12902  00197C  D000               	nop2	
 12903                           
 12904                           ;Test.c: 359: updateServoPosition(500, 1);
 12905  00197E  0E01               	movlw	1
 12906  001980  0100               	movlb	0	; () banked
 12907  001982  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12908  001984  0EF4               	movlw	244
 12909  001986  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12910  001988  0E00               	movlw	0
 12911  00198A  0100               	movlb	0	; () banked
 12912  00198C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12913  00198E  0E01               	movlw	1
 12914  001990  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12915  001992  ECEB  F01D         	call	_updateServoPosition	;wreg free
 12916                           
 12917                           ;Test.c: 360: _delay((unsigned long)((750)*(32000000/4000.0)));
 12918  001996  0E1F               	movlw	31
 12919  001998  0100               	movlb	0	; () banked
 12920  00199A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12921  00199C  0E71               	movlw	113
 12922  00199E  0100               	movlb	0	; () banked
 12923  0019A0  6FAB               	movwf	??_BothServos& (0+255),b
 12924  0019A2  0E1E               	movlw	30
 12925  0019A4                     u7977:
 12926  0019A4  2EE8               	decfsz	wreg,f,c
 12927  0019A6  D7FE               	bra	u7977
 12928  0019A8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12929  0019AA  D7FC               	bra	u7977
 12930  0019AC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12931  0019AE  D7FA               	bra	u7977
 12932  0019B0  F000               	nop	
 12933                           
 12934                           ;Test.c: 361: updateServoPosition(1350, 3);
 12935  0019B2  0E05               	movlw	5
 12936  0019B4  0100               	movlb	0	; () banked
 12937  0019B6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12938  0019B8  0E46               	movlw	70
 12939  0019BA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12940  0019BC  0E00               	movlw	0
 12941  0019BE  0100               	movlb	0	; () banked
 12942  0019C0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12943  0019C2  0E03               	movlw	3
 12944  0019C4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12945  0019C6  ECEB  F01D         	call	_updateServoPosition	;wreg free
 12946                           
 12947                           ;Test.c: 362: _delay((unsigned long)((2000)*(32000000/4000.0)));
 12948  0019CA  0E52               	movlw	82
 12949  0019CC  0100               	movlb	0	; () banked
 12950  0019CE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12951  0019D0  0E2B               	movlw	43
 12952  0019D2  0100               	movlb	0	; () banked
 12953  0019D4  6FAB               	movwf	??_BothServos& (0+255),b
 12954  0019D6  0E00               	movlw	0
 12955  0019D8                     u7987:
 12956  0019D8  2EE8               	decfsz	wreg,f,c
 12957  0019DA  D7FE               	bra	u7987
 12958  0019DC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12959  0019DE  D7FC               	bra	u7987
 12960  0019E0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12961  0019E2  D7FA               	bra	u7987
 12962  0019E4  F000               	nop	
 12963                           
 12964                           ;Test.c: 363: updateServoPosition(1150, 3);
 12965  0019E6  0E04               	movlw	4
 12966  0019E8  0100               	movlb	0	; () banked
 12967  0019EA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12968  0019EC  0E7E               	movlw	126
 12969  0019EE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12970  0019F0  0E00               	movlw	0
 12971  0019F2  0100               	movlb	0	; () banked
 12972  0019F4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12973  0019F6  0E03               	movlw	3
 12974  0019F8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12975  0019FA  ECEB  F01D         	call	_updateServoPosition	;wreg free
 12976                           
 12977                           ;Test.c: 364: _delay((unsigned long)((750)*(32000000/4000.0)));
 12978  0019FE  0E1F               	movlw	31
 12979  001A00  0100               	movlb	0	; () banked
 12980  001A02  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12981  001A04  0E71               	movlw	113
 12982  001A06  0100               	movlb	0	; () banked
 12983  001A08  6FAB               	movwf	??_BothServos& (0+255),b
 12984  001A0A  0E1E               	movlw	30
 12985  001A0C                     u7997:
 12986  001A0C  2EE8               	decfsz	wreg,f,c
 12987  001A0E  D7FE               	bra	u7997
 12988  001A10  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12989  001A12  D7FC               	bra	u7997
 12990  001A14  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12991  001A16  D7FA               	bra	u7997
 12992  001A18  F000               	nop	
 12993                           
 12994                           ;Test.c: 366: updateServoPosition(750, 1);
 12995  001A1A  0E02               	movlw	2
 12996  001A1C  0100               	movlb	0	; () banked
 12997  001A1E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12998  001A20  0EEE               	movlw	238
 12999  001A22  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13000  001A24  0E00               	movlw	0
 13001  001A26  0100               	movlb	0	; () banked
 13002  001A28  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13003  001A2A  0E01               	movlw	1
 13004  001A2C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13005  001A2E  ECEB  F01D         	call	_updateServoPosition	;wreg free
 13006                           
 13007                           ;Test.c: 367: _delay((unsigned long)((750)*(32000000/4000.0)));
 13008  001A32  0E1F               	movlw	31
 13009  001A34  0100               	movlb	0	; () banked
 13010  001A36  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13011  001A38  0E71               	movlw	113
 13012  001A3A  0100               	movlb	0	; () banked
 13013  001A3C  6FAB               	movwf	??_BothServos& (0+255),b
 13014  001A3E  0E1E               	movlw	30
 13015  001A40                     u8007:
 13016  001A40  2EE8               	decfsz	wreg,f,c
 13017  001A42  D7FE               	bra	u8007
 13018  001A44  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13019  001A46  D7FC               	bra	u8007
 13020  001A48  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13021  001A4A  D7FA               	bra	u8007
 13022  001A4C  F000               	nop	
 13023                           
 13024                           ;Test.c: 368: updateServoPosition(1350, 3);
 13025  001A4E  0E05               	movlw	5
 13026  001A50  0100               	movlb	0	; () banked
 13027  001A52  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13028  001A54  0E46               	movlw	70
 13029  001A56  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13030  001A58  0E00               	movlw	0
 13031  001A5A  0100               	movlb	0	; () banked
 13032  001A5C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13033  001A5E  0E03               	movlw	3
 13034  001A60  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13035  001A62  ECEB  F01D         	call	_updateServoPosition	;wreg free
 13036                           
 13037                           ;Test.c: 369: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13038  001A66  0E52               	movlw	82
 13039  001A68  0100               	movlb	0	; () banked
 13040  001A6A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13041  001A6C  0E2B               	movlw	43
 13042  001A6E  0100               	movlb	0	; () banked
 13043  001A70  6FAB               	movwf	??_BothServos& (0+255),b
 13044  001A72  0E00               	movlw	0
 13045  001A74                     u8017:
 13046  001A74  2EE8               	decfsz	wreg,f,c
 13047  001A76  D7FE               	bra	u8017
 13048  001A78  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13049  001A7A  D7FC               	bra	u8017
 13050  001A7C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13051  001A7E  D7FA               	bra	u8017
 13052  001A80  F000               	nop	
 13053                           
 13054                           ;Test.c: 370: updateServoPosition(1150, 3);
 13055  001A82  0E04               	movlw	4
 13056  001A84  0100               	movlb	0	; () banked
 13057  001A86  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13058  001A88  0E7E               	movlw	126
 13059  001A8A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13060  001A8C  0E00               	movlw	0
 13061  001A8E  0100               	movlb	0	; () banked
 13062  001A90  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13063  001A92  0E03               	movlw	3
 13064  001A94  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13065  001A96  ECEB  F01D         	call	_updateServoPosition	;wreg free
 13066                           
 13067                           ;Test.c: 371: _delay((unsigned long)((750)*(32000000/4000.0)));
 13068  001A9A  0E1F               	movlw	31
 13069  001A9C  0100               	movlb	0	; () banked
 13070  001A9E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13071  001AA0  0E71               	movlw	113
 13072  001AA2  0100               	movlb	0	; () banked
 13073  001AA4  6FAB               	movwf	??_BothServos& (0+255),b
 13074  001AA6  0E1E               	movlw	30
 13075  001AA8                     u8027:
 13076  001AA8  2EE8               	decfsz	wreg,f,c
 13077  001AAA  D7FE               	bra	u8027
 13078  001AAC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13079  001AAE  D7FC               	bra	u8027
 13080  001AB0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13081  001AB2  D7FA               	bra	u8027
 13082  001AB4  F000               	nop	
 13083                           
 13084                           ;Test.c: 373: updateServoPosition(1200, 1);
 13085  001AB6  0E04               	movlw	4
 13086  001AB8  0100               	movlb	0	; () banked
 13087  001ABA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13088  001ABC  0EB0               	movlw	176
 13089  001ABE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13090  001AC0  0E00               	movlw	0
 13091  001AC2  0100               	movlb	0	; () banked
 13092  001AC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13093  001AC6  0E01               	movlw	1
 13094  001AC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13095  001ACA  ECEB  F01D         	call	_updateServoPosition	;wreg free
 13096                           
 13097                           ;Test.c: 374: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13098  001ACE  0E3D               	movlw	61
 13099  001AD0  0100               	movlb	0	; () banked
 13100  001AD2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13101  001AD4  0EE1               	movlw	225
 13102  001AD6  0100               	movlb	0	; () banked
 13103  001AD8  6FAB               	movwf	??_BothServos& (0+255),b
 13104  001ADA  0E3F               	movlw	63
 13105  001ADC                     u8037:
 13106  001ADC  2EE8               	decfsz	wreg,f,c
 13107  001ADE  D7FE               	bra	u8037
 13108  001AE0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13109  001AE2  D7FC               	bra	u8037
 13110  001AE4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13111  001AE6  D7FA               	bra	u8037
 13112  001AE8  D000               	nop2	
 13113                           
 13114                           ;Test.c: 376: updateServoPosition(1700, 1);
 13115  001AEA  0E06               	movlw	6
 13116  001AEC  0100               	movlb	0	; () banked
 13117  001AEE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13118  001AF0  0EA4               	movlw	164
 13119  001AF2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13120  001AF4  0E00               	movlw	0
 13121  001AF6  0100               	movlb	0	; () banked
 13122  001AF8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13123  001AFA  0E01               	movlw	1
 13124  001AFC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13125  001AFE  ECEB  F01D         	call	_updateServoPosition	;wreg free
 13126                           
 13127                           ;Test.c: 377: _delay((unsigned long)((750)*(32000000/4000.0)));
 13128  001B02  0E1F               	movlw	31
 13129  001B04  0100               	movlb	0	; () banked
 13130  001B06  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13131  001B08  0E71               	movlw	113
 13132  001B0A  0100               	movlb	0	; () banked
 13133  001B0C  6FAB               	movwf	??_BothServos& (0+255),b
 13134  001B0E  0E1E               	movlw	30
 13135  001B10                     u8047:
 13136  001B10  2EE8               	decfsz	wreg,f,c
 13137  001B12  D7FE               	bra	u8047
 13138  001B14  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13139  001B16  D7FC               	bra	u8047
 13140  001B18  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13141  001B1A  D7FA               	bra	u8047
 13142  001B1C  F000               	nop	
 13143                           
 13144                           ;Test.c: 378: updateServoPosition(1350, 3);
 13145  001B1E  0E05               	movlw	5
 13146  001B20  0100               	movlb	0	; () banked
 13147  001B22  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13148  001B24  0E46               	movlw	70
 13149  001B26  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13150  001B28  0E00               	movlw	0
 13151  001B2A  0100               	movlb	0	; () banked
 13152  001B2C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13153  001B2E  0E03               	movlw	3
 13154  001B30  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13155  001B32  ECEB  F01D         	call	_updateServoPosition	;wreg free
 13156                           
 13157                           ;Test.c: 379: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13158  001B36  0E52               	movlw	82
 13159  001B38  0100               	movlb	0	; () banked
 13160  001B3A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13161  001B3C  0E2B               	movlw	43
 13162  001B3E  0100               	movlb	0	; () banked
 13163  001B40  6FAB               	movwf	??_BothServos& (0+255),b
 13164  001B42  0E00               	movlw	0
 13165  001B44                     u8057:
 13166  001B44  2EE8               	decfsz	wreg,f,c
 13167  001B46  D7FE               	bra	u8057
 13168  001B48  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13169  001B4A  D7FC               	bra	u8057
 13170  001B4C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13171  001B4E  D7FA               	bra	u8057
 13172  001B50  F000               	nop	
 13173                           
 13174                           ;Test.c: 380: updateServoPosition(1150, 3);
 13175  001B52  0E04               	movlw	4
 13176  001B54  0100               	movlb	0	; () banked
 13177  001B56  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13178  001B58  0E7E               	movlw	126
 13179  001B5A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13180  001B5C  0E00               	movlw	0
 13181  001B5E  0100               	movlb	0	; () banked
 13182  001B60  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13183  001B62  0E03               	movlw	3
 13184  001B64  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13185  001B66  ECEB  F01D         	call	_updateServoPosition	;wreg free
 13186                           
 13187                           ;Test.c: 381: _delay((unsigned long)((750)*(32000000/4000.0)));
 13188  001B6A  0E1F               	movlw	31
 13189  001B6C  0100               	movlb	0	; () banked
 13190  001B6E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13191  001B70  0E71               	movlw	113
 13192  001B72  0100               	movlb	0	; () banked
 13193  001B74  6FAB               	movwf	??_BothServos& (0+255),b
 13194  001B76  0E1E               	movlw	30
 13195  001B78                     u8067:
 13196  001B78  2EE8               	decfsz	wreg,f,c
 13197  001B7A  D7FE               	bra	u8067
 13198  001B7C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13199  001B7E  D7FC               	bra	u8067
 13200  001B80  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13201  001B82  D7FA               	bra	u8067
 13202  001B84  F000               	nop	
 13203                           
 13204                           ;Test.c: 383: updateServoPosition(2100, 1);
 13205  001B86  0E08               	movlw	8
 13206  001B88  0100               	movlb	0	; () banked
 13207  001B8A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13208  001B8C  0E34               	movlw	52
 13209  001B8E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13210  001B90  0E00               	movlw	0
 13211  001B92  0100               	movlb	0	; () banked
 13212  001B94  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13213  001B96  0E01               	movlw	1
 13214  001B98  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13215  001B9A  ECEB  F01D         	call	_updateServoPosition	;wreg free
 13216                           
 13217                           ;Test.c: 384: _delay((unsigned long)((750)*(32000000/4000.0)));
 13218  001B9E  0E1F               	movlw	31
 13219  001BA0  0100               	movlb	0	; () banked
 13220  001BA2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13221  001BA4  0E71               	movlw	113
 13222  001BA6  0100               	movlb	0	; () banked
 13223  001BA8  6FAB               	movwf	??_BothServos& (0+255),b
 13224  001BAA  0E1E               	movlw	30
 13225  001BAC                     u8077:
 13226  001BAC  2EE8               	decfsz	wreg,f,c
 13227  001BAE  D7FE               	bra	u8077
 13228  001BB0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13229  001BB2  D7FC               	bra	u8077
 13230  001BB4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13231  001BB6  D7FA               	bra	u8077
 13232  001BB8  F000               	nop	
 13233                           
 13234                           ;Test.c: 385: updateServoPosition(1350, 3);
 13235  001BBA  0E05               	movlw	5
 13236  001BBC  0100               	movlb	0	; () banked
 13237  001BBE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13238  001BC0  0E46               	movlw	70
 13239  001BC2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13240  001BC4  0E00               	movlw	0
 13241  001BC6  0100               	movlb	0	; () banked
 13242  001BC8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13243  001BCA  0E03               	movlw	3
 13244  001BCC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13245  001BCE  ECEB  F01D         	call	_updateServoPosition	;wreg free
 13246                           
 13247                           ;Test.c: 386: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13248  001BD2  0E52               	movlw	82
 13249  001BD4  0100               	movlb	0	; () banked
 13250  001BD6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13251  001BD8  0E2B               	movlw	43
 13252  001BDA  0100               	movlb	0	; () banked
 13253  001BDC  6FAB               	movwf	??_BothServos& (0+255),b
 13254  001BDE  0E00               	movlw	0
 13255  001BE0                     u8087:
 13256  001BE0  2EE8               	decfsz	wreg,f,c
 13257  001BE2  D7FE               	bra	u8087
 13258  001BE4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13259  001BE6  D7FC               	bra	u8087
 13260  001BE8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13261  001BEA  D7FA               	bra	u8087
 13262  001BEC  F000               	nop	
 13263                           
 13264                           ;Test.c: 387: updateServoPosition(1150, 3);
 13265  001BEE  0E04               	movlw	4
 13266  001BF0  0100               	movlb	0	; () banked
 13267  001BF2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13268  001BF4  0E7E               	movlw	126
 13269  001BF6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13270  001BF8  0E00               	movlw	0
 13271  001BFA  0100               	movlb	0	; () banked
 13272  001BFC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13273  001BFE  0E03               	movlw	3
 13274  001C00  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13275  001C02  ECEB  F01D         	call	_updateServoPosition	;wreg free
 13276                           
 13277                           ;Test.c: 388: _delay((unsigned long)((750)*(32000000/4000.0)));
 13278  001C06  0E1F               	movlw	31
 13279  001C08  0100               	movlb	0	; () banked
 13280  001C0A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13281  001C0C  0E71               	movlw	113
 13282  001C0E  0100               	movlb	0	; () banked
 13283  001C10  6FAB               	movwf	??_BothServos& (0+255),b
 13284  001C12  0E1E               	movlw	30
 13285  001C14                     u8097:
 13286  001C14  2EE8               	decfsz	wreg,f,c
 13287  001C16  D7FE               	bra	u8097
 13288  001C18  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13289  001C1A  D7FC               	bra	u8097
 13290  001C1C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13291  001C1E  D7FA               	bra	u8097
 13292  001C20  F000               	nop	
 13293                           
 13294                           ;Test.c: 390: TMR1ON = 0;
 13295  001C22  90CD               	bcf	4045,0,c	;volatile
 13296                           
 13297                           ;Test.c: 391: TMR3ON = 0;
 13298  001C24  90B1               	bcf	4017,0,c	;volatile
 13299                           
 13300                           ;Test.c: 392: (INTCONbits.GIE = 0);
 13301  001C26  9EF2               	bcf	intcon,7,c	;volatile
 13302  001C28  0012               	return		;funcret
 13303  001C2A                     __end_of_BothServos:
 13304                           	opt stack 0
 13305                           tblptru	equ	0xFF8
 13306                           tblptrh	equ	0xFF7
 13307                           tblptrl	equ	0xFF6
 13308                           tablat	equ	0xFF5
 13309                           prodh	equ	0xFF4
 13310                           prodl	equ	0xFF3
 13311                           intcon	equ	0xFF2
 13312                           intcon2	equ	0xFF1
 13313                           intcon3	equ	0xFF0
 13314                           postinc0	equ	0xFEE
 13315                           wreg	equ	0xFE8
 13316                           postdec1	equ	0xFE5
 13317                           fsr1l	equ	0xFE1
 13318                           indf2	equ	0xFDF
 13319                           postinc2	equ	0xFDE
 13320                           postdec2	equ	0xFDD
 13321                           fsr2h	equ	0xFDA
 13322                           fsr2l	equ	0xFD9
 13323                           status	equ	0xFD8
 13324                           
 13325 ;; *************** function _printf *****************
 13326 ;; Defined at:
 13327 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 13328 ;; Parameters:    Size  Location     Type
 13329 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 13330 ;;		 -> STR_115(17), STR_114(17), STR_113(11), STR_112(18), 
 13331 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 13332 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 13333 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 13334 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 13335 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 13336 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 13337 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 13338 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 13339 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 13340 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 13341 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 13342 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 13343 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 13344 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 13345 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 13346 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 13347 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 13348 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 13349 ;;		 -> STR_27(19), STR_26(17), STR_25(19), STR_24(17), 
 13350 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 13351 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 13352 ;;		 -> STR_2(14), STR_1(18), 
 13353 ;; Auto vars:     Size  Location     Type
 13354 ;;  tmpval          4    0        struct .
 13355 ;;  width           2   41[BANK0 ] int 
 13356 ;;  val             2   37[BANK0 ] unsigned int 
 13357 ;;  len             2   35[BANK0 ] unsigned int 
 13358 ;;  ap              2   33[BANK0 ] PTR void [1]
 13359 ;;		 -> ?i2_printf(2), ?_printf(2), 
 13360 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 13361 ;;		 -> STR_116(7), count_total(2), printRTC@month(4), UI@month(4), 
 13362 ;;  c               1   40[BANK0 ] char 
 13363 ;;  flag            1   39[BANK0 ] unsigned char 
 13364 ;;  prec            1   30[BANK0 ] char 
 13365 ;; Return value:  Size  Location     Type
 13366 ;;                  2   14[BANK0 ] int 
 13367 ;; Registers used:
 13368 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13369 ;; Tracked objects:
 13370 ;;		On entry : 0/0
 13371 ;;		On exit  : 0/0
 13372 ;;		Unchanged: 0/0
 13373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13374 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13375 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13376 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13377 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13378 ;;Total ram usage:       29 bytes
 13379 ;; Hardware stack levels used:    1
 13380 ;; Hardware stack levels required when called:    9
 13381 ;; This function calls:
 13382 ;;		___lwdiv
 13383 ;;		___lwmod
 13384 ;;		___wmul
 13385 ;;		_isdigit
 13386 ;;		_putch
 13387 ;; This function is called by:
 13388 ;;		_UI
 13389 ;;		_change_state_to_menu_start
 13390 ;;		_change_state_to_menu_12
 13391 ;;		_change_state_to_menu_22
 13392 ;;		_printRTC
 13393 ;;		_EEPROM_write
 13394 ;;		_Test
 13395 ;;		_algorithmTest
 13396 ;;		_sensorTest
 13397 ;;		_actuatorTest
 13398 ;;		_BothServos
 13399 ;;		_PortTestA5
 13400 ;;		_PusherTestA5
 13401 ;;		_ToggleTestA5
 13402 ;; This function uses a non-reentrant model
 13403 ;;
 13404                           
 13405                           	psect	text47
 13406  001170                     __ptext47:
 13407                           	opt stack 0
 13408  001170                     _printf:
 13409                           	opt stack 18
 13410                           
 13411                           ;doprnt.c: 466: va_list ap;
 13412                           ;doprnt.c: 499: signed char c;
 13413                           ;doprnt.c: 501: int width;
 13414                           ;doprnt.c: 506: signed char prec;
 13415                           ;doprnt.c: 508: unsigned char flag;
 13416                           ;doprnt.c: 523: union {
 13417                           ;doprnt.c: 524: unsigned long vd;
 13418                           ;doprnt.c: 525: double integ;
 13419                           ;doprnt.c: 526: } tmpval;
 13420                           ;doprnt.c: 528: unsigned int val;
 13421                           ;doprnt.c: 529: unsigned len;
 13422                           ;doprnt.c: 530: const char * cp;
 13423                           ;doprnt.c: 533: *ap = __va_start();
 13424                           
 13425                           ;incstack = 0
 13426  001170  0E90               	movlw	low (?_printf+2)
 13427  001172  0100               	movlb	0	; () banked
 13428  001174  6FA1               	movwf	printf@ap& (0+255),b
 13429  001176  0E00               	movlw	high (?_printf+2)
 13430  001178  0100               	movlb	0	; () banked
 13431  00117A  6FA2               	movwf	(printf@ap+1)& (0+255),b
 13432                           
 13433                           ;doprnt.c: 536: while(c = *f++) {
 13434  00117C  D205               	goto	l5535
 13435  00117E                     l5405:
 13436                           
 13437                           ; BSR set to: 0
 13438                           ;doprnt.c: 538: if(c != '%')
 13439  00117E  0E25               	movlw	37
 13440  001180  0100               	movlb	0	; () banked
 13441  001182  19A8               	xorwf	printf@c& (0+255),w,b
 13442  001184  B4D8               	btfsc	status,2,c
 13443  001186  D005               	goto	l5409
 13444                           
 13445                           ; BSR set to: 0
 13446                           ;doprnt.c: 540: {
 13447                           ;doprnt.c: 541: (putch(c) );
 13448  001188  0100               	movlb	0	; () banked
 13449  00118A  51A8               	movf	printf@c& (0+255),w,b
 13450  00118C  EC93  F023         	call	_putch
 13451                           
 13452                           ;doprnt.c: 542: continue;
 13453  001190  D1FB               	goto	l5535
 13454  001192                     l5409:
 13455                           
 13456                           ;doprnt.c: 543: }
 13457                           ;doprnt.c: 546: width = 0;
 13458  001192  0E00               	movlw	0
 13459  001194  0100               	movlb	0	; () banked
 13460  001196  6FAA               	movwf	(printf@width+1)& (0+255),b
 13461  001198  0E00               	movlw	0
 13462  00119A  6FA9               	movwf	printf@width& (0+255),b
 13463                           
 13464                           ;doprnt.c: 548: flag = 0;
 13465  00119C  0E00               	movlw	0
 13466  00119E  0100               	movlb	0	; () banked
 13467  0011A0  6FA7               	movwf	printf@flag& (0+255),b
 13468                           
 13469                           ; BSR set to: 0
 13470                           ;doprnt.c: 551: switch(*f) {
 13471                           
 13472                           ;doprnt.c: 550: for(;;) {
 13473  0011A2  D005               	goto	l5415
 13474  0011A4                     l5411:
 13475                           
 13476                           ;doprnt.c: 580: flag |= 0x04;
 13477  0011A4  0100               	movlb	0	; () banked
 13478  0011A6  85A7               	bsf	printf@flag& (0+255),2,b
 13479                           
 13480                           ;doprnt.c: 581: f++;
 13481  0011A8  0100               	movlb	0	; () banked
 13482  0011AA  4B8E               	infsnz	printf@f& (0+255),f,b
 13483  0011AC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13484  0011AE                     l5415:
 13485  0011AE  C08E  FFF6         	movff	printf@f,tblptrl
 13486  0011B2  C08F  FFF7         	movff	printf@f+1,tblptrh
 13487  0011B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13488  0011B6  6AF8               	clrf	tblptru,c
 13489  0011B8                     	endif
 13490  0011B8                     	if	0	;tblptru may be non-zero
 13491  0011B8                     	endif
 13492  0011B8  0008               	tblrd		*
 13493  0011BA  50F5               	movf	tablat,w,c
 13494                           
 13495                           ; Switch size 1, requested type "space"
 13496                           ; Number of cases is 1, Range of values is 48 to 48
 13497                           ; switch strategies available:
 13498                           ; Name         Instructions Cycles
 13499                           ; simple_byte            4     3 (average)
 13500                           ;	Chosen strategy is simple_byte
 13501  0011BC  0A30               	xorlw	48	; case 48
 13502  0011BE  B4D8               	btfsc	status,2,c
 13503  0011C0  D7F1               	goto	l5411
 13504                           
 13505                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13506                           
 13507                           ;doprnt.c: 586: }
 13508                           
 13509                           ;doprnt.c: 585: break;
 13510  0011C2  C08E  FFF6         	movff	printf@f,tblptrl
 13511  0011C6  C08F  FFF7         	movff	printf@f+1,tblptrh
 13512  0011CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13513  0011CA  6AF8               	clrf	tblptru,c
 13514  0011CC                     	endif
 13515  0011CC                     	if	0	;tblptru may be non-zero
 13516  0011CC                     	endif
 13517  0011CC  0008               	tblrd		*
 13518  0011CE  50F5               	movf	tablat,w,c
 13519  0011D0  ECCC  F022         	call	_isdigit
 13520  0011D4  A0D8               	btfss	status,0,c
 13521  0011D6  D0D2               	goto	l5463
 13522                           
 13523                           ;doprnt.c: 598: width = 0;
 13524  0011D8  0E00               	movlw	0
 13525  0011DA  0100               	movlb	0	; () banked
 13526  0011DC  6FAA               	movwf	(printf@width+1)& (0+255),b
 13527  0011DE  0E00               	movlw	0
 13528  0011E0  6FA9               	movwf	printf@width& (0+255),b
 13529  0011E2                     l5421:
 13530                           
 13531                           ;doprnt.c: 600: width *= 10;
 13532  0011E2  C0A9  F080         	movff	printf@width,___wmul@multiplier
 13533  0011E6  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 13534  0011EA  0E00               	movlw	0
 13535  0011EC  0100               	movlb	0	; () banked
 13536  0011EE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13537  0011F0  0E0A               	movlw	10
 13538  0011F2  6F82               	movwf	___wmul@multiplicand& (0+255),b
 13539  0011F4  EC36  F021         	call	___wmul	;wreg free
 13540  0011F8  C080  F0A9         	movff	?___wmul,printf@width
 13541  0011FC  C081  F0AA         	movff	?___wmul+1,printf@width+1
 13542                           
 13543                           ;doprnt.c: 601: width += *f++ - '0';
 13544  001200  0ED0               	movlw	208
 13545  001202  0100               	movlb	0	; () banked
 13546  001204  6F9A               	movwf	??_printf& (0+255),b
 13547  001206  0EFF               	movlw	255
 13548  001208  0100               	movlb	0	; () banked
 13549  00120A  6F9B               	movwf	(??_printf+1)& (0+255),b
 13550  00120C  C08E  FFF6         	movff	printf@f,tblptrl
 13551  001210  C08F  FFF7         	movff	printf@f+1,tblptrh
 13552  001214                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13553  001214  6AF8               	clrf	tblptru,c
 13554  001216                     	endif
 13555  001216                     	if	0	;tblptru may be non-zero
 13556  001216                     	endif
 13557  001216  0008               	tblrd		*
 13558  001218  50F5               	movf	tablat,w,c
 13559  00121A  0100               	movlb	0	; () banked
 13560  00121C  6F9C               	movwf	(??_printf+2)& (0+255),b
 13561  00121E  6B9D               	clrf	(??_printf+3)& (0+255),b
 13562  001220  0100               	movlb	0	; () banked
 13563  001222  519A               	movf	??_printf& (0+255),w,b
 13564  001224  0100               	movlb	0	; () banked
 13565  001226  279C               	addwf	(??_printf+2)& (0+255),f,b
 13566  001228  0100               	movlb	0	; () banked
 13567  00122A  519B               	movf	(??_printf+1)& (0+255),w,b
 13568  00122C  0100               	movlb	0	; () banked
 13569  00122E  239D               	addwfc	(??_printf+3)& (0+255),f,b
 13570  001230  0100               	movlb	0	; () banked
 13571  001232  519C               	movf	(??_printf+2)& (0+255),w,b
 13572  001234  0100               	movlb	0	; () banked
 13573  001236  27A9               	addwf	printf@width& (0+255),f,b
 13574  001238  0100               	movlb	0	; () banked
 13575  00123A  519D               	movf	(??_printf+3)& (0+255),w,b
 13576  00123C  0100               	movlb	0	; () banked
 13577  00123E  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 13578                           
 13579                           ; BSR set to: 0
 13580  001240  0100               	movlb	0	; () banked
 13581  001242  4B8E               	infsnz	printf@f& (0+255),f,b
 13582  001244  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13583                           
 13584                           ; BSR set to: 0
 13585                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13586  001246  C08E  FFF6         	movff	printf@f,tblptrl
 13587  00124A  C08F  FFF7         	movff	printf@f+1,tblptrh
 13588  00124E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13589  00124E  6AF8               	clrf	tblptru,c
 13590  001250                     	endif
 13591  001250                     	if	0	;tblptru may be non-zero
 13592  001250                     	endif
 13593  001250  0008               	tblrd		*
 13594  001252  50F5               	movf	tablat,w,c
 13595  001254  ECCC  F022         	call	_isdigit
 13596  001258  A0D8               	btfss	status,0,c
 13597  00125A  D090               	goto	l5463
 13598  00125C  D7C2               	goto	l5421
 13599  00125E                     l5429:
 13600                           
 13601                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 13602  00125E  C0A1  FFD9         	movff	printf@ap,fsr2l
 13603  001262  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13604  001266  CFDE F09F          	movff	postinc2,printf@cp
 13605  00126A  CFDD F0A0          	movff	postdec2,printf@cp+1
 13606  00126E  0E02               	movlw	2
 13607  001270  0100               	movlb	0	; () banked
 13608  001272  27A1               	addwf	printf@ap& (0+255),f,b
 13609  001274  0E00               	movlw	0
 13610  001276  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13611                           
 13612                           ; BSR set to: 0
 13613                           ;doprnt.c: 740: if(!cp)
 13614  001278  0100               	movlb	0	; () banked
 13615  00127A  519F               	movf	printf@cp& (0+255),w,b
 13616  00127C  0100               	movlb	0	; () banked
 13617  00127E  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 13618  001280  A4D8               	btfss	status,2,c
 13619  001282  D006               	goto	l5437
 13620                           
 13621                           ; BSR set to: 0
 13622                           ;doprnt.c: 741: cp = "(null)";
 13623  001284  0EB6               	movlw	low STR_116
 13624  001286  0100               	movlb	0	; () banked
 13625  001288  6F9F               	movwf	printf@cp& (0+255),b
 13626  00128A  0EFF               	movlw	high STR_116
 13627  00128C  0100               	movlb	0	; () banked
 13628  00128E  6FA0               	movwf	(printf@cp+1)& (0+255),b
 13629  001290                     l5437:
 13630                           
 13631                           ; BSR set to: 0
 13632                           ;doprnt.c: 745: len = 0;
 13633  001290  0E00               	movlw	0
 13634  001292  0100               	movlb	0	; () banked
 13635  001294  6FA4               	movwf	(printf@len+1)& (0+255),b
 13636  001296  0E00               	movlw	0
 13637  001298  6FA3               	movwf	printf@len& (0+255),b
 13638                           
 13639                           ;doprnt.c: 746: while(cp[len])
 13640  00129A  D003               	goto	l5441
 13641  00129C                     l5439:
 13642                           
 13643                           ;doprnt.c: 747: len++;
 13644  00129C  0100               	movlb	0	; () banked
 13645  00129E  4BA3               	infsnz	printf@len& (0+255),f,b
 13646  0012A0  2BA4               	incf	(printf@len+1)& (0+255),f,b
 13647  0012A2                     l5441:
 13648                           
 13649                           ; BSR set to: 0
 13650  0012A2  0100               	movlb	0	; () banked
 13651  0012A4  51A3               	movf	printf@len& (0+255),w,b
 13652  0012A6  0100               	movlb	0	; () banked
 13653  0012A8  259F               	addwf	printf@cp& (0+255),w,b
 13654  0012AA  0100               	movlb	0	; () banked
 13655  0012AC  6F9A               	movwf	??_printf& (0+255),b
 13656  0012AE  0100               	movlb	0	; () banked
 13657  0012B0  51A4               	movf	(printf@len+1)& (0+255),w,b
 13658  0012B2  0100               	movlb	0	; () banked
 13659  0012B4  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 13660  0012B6  0100               	movlb	0	; () banked
 13661  0012B8  6F9B               	movwf	(??_printf+1)& (0+255),b
 13662  0012BA  C09A  FFF6         	movff	??_printf,tblptrl
 13663  0012BE  C09B  FFF7         	movff	??_printf+1,tblptrh
 13664  0012C2  0E00               	movlw	low (__mediumconst shr (0+16))
 13665  0012C4  6EF8               	movwf	tblptru,c
 13666  0012C6  0E0F               	movlw	(high __ramtop+-1)
 13667  0012C8  64F7               	cpfsgt	tblptrh,c
 13668  0012CA  D003               	bra	u3817
 13669  0012CC  0008               	tblrd		*
 13670  0012CE  50F5               	movf	tablat,w,c
 13671  0012D0  D005               	bra	u3810
 13672  0012D2                     u3817:
 13673  0012D2  CFF6 FFE9          	movff	tblptrl,fsr0l
 13674  0012D6  CFF7 FFEA          	movff	tblptrh,fsr0h
 13675  0012DA  50EF               	movf	indf0,w,c
 13676  0012DC                     u3810:
 13677  0012DC  0900               	iorlw	0
 13678  0012DE  A4D8               	btfss	status,2,c
 13679  0012E0  D7DD               	goto	l5439
 13680                           
 13681                           ;doprnt.c: 757: if(width > len)
 13682  0012E2  0100               	movlb	0	; () banked
 13683  0012E4  51A9               	movf	printf@width& (0+255),w,b
 13684  0012E6  0100               	movlb	0	; () banked
 13685  0012E8  5DA3               	subwf	printf@len& (0+255),w,b
 13686  0012EA  0100               	movlb	0	; () banked
 13687  0012EC  51AA               	movf	(printf@width+1)& (0+255),w,b
 13688  0012EE  0100               	movlb	0	; () banked
 13689  0012F0  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 13690  0012F2  B0D8               	btfsc	status,0,c
 13691  0012F4  D009               	goto	l5447
 13692                           
 13693                           ; BSR set to: 0
 13694                           ;doprnt.c: 758: width -= len;
 13695  0012F6  0100               	movlb	0	; () banked
 13696  0012F8  51A3               	movf	printf@len& (0+255),w,b
 13697  0012FA  0100               	movlb	0	; () banked
 13698  0012FC  5FA9               	subwf	printf@width& (0+255),f,b
 13699  0012FE  0100               	movlb	0	; () banked
 13700  001300  51A4               	movf	(printf@len+1)& (0+255),w,b
 13701  001302  0100               	movlb	0	; () banked
 13702  001304  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 13703  001306  D009               	goto	l5451
 13704  001308                     l5447:
 13705                           
 13706                           ; BSR set to: 0
 13707                           ;doprnt.c: 759: else
 13708                           ;doprnt.c: 760: width = 0;
 13709  001308  0E00               	movlw	0
 13710  00130A  0100               	movlb	0	; () banked
 13711  00130C  6FAA               	movwf	(printf@width+1)& (0+255),b
 13712  00130E  0E00               	movlw	0
 13713  001310  6FA9               	movwf	printf@width& (0+255),b
 13714                           
 13715                           ; BSR set to: 0
 13716                           ;doprnt.c: 764: while(width--)
 13717  001312  D003               	goto	l5451
 13718  001314                     l5449:
 13719                           
 13720                           ; BSR set to: 0
 13721                           ;doprnt.c: 765: (putch(' ') );
 13722  001314  0E20               	movlw	32
 13723  001316  EC93  F023         	call	_putch
 13724  00131A                     l5451:
 13725  00131A  0100               	movlb	0	; () banked
 13726  00131C  07A9               	decf	printf@width& (0+255),f,b
 13727  00131E  A0D8               	btfss	status,0,c
 13728  001320  07AA               	decf	(printf@width+1)& (0+255),f,b
 13729  001322  0100               	movlb	0	; () banked
 13730  001324  29A9               	incf	printf@width& (0+255),w,b
 13731  001326  E1F6               	bnz	l5449
 13732  001328  0100               	movlb	0	; () banked
 13733  00132A  29AA               	incf	(printf@width+1)& (0+255),w,b
 13734  00132C  B4D8               	btfsc	status,2,c
 13735  00132E  D017               	goto	l5457
 13736  001330  D7F1               	goto	l5449
 13737  001332                     l5453:
 13738                           
 13739                           ; BSR set to: 0
 13740                           ;doprnt.c: 768: (putch(*cp++) );
 13741  001332  C09F  FFF6         	movff	printf@cp,tblptrl
 13742  001336  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 13743  00133A  0E00               	movlw	low (__mediumconst shr (0+16))
 13744  00133C  6EF8               	movwf	tblptru,c
 13745  00133E  0E0F               	movlw	(high __ramtop+-1)
 13746  001340  64F7               	cpfsgt	tblptrh,c
 13747  001342  D003               	bra	u3857
 13748  001344  0008               	tblrd		*
 13749  001346  50F5               	movf	tablat,w,c
 13750  001348  D005               	bra	u3850
 13751  00134A                     u3857:
 13752  00134A  CFF6 FFE9          	movff	tblptrl,fsr0l
 13753  00134E  CFF7 FFEA          	movff	tblptrh,fsr0h
 13754  001352  50EF               	movf	indf0,w,c
 13755  001354                     u3850:
 13756  001354  EC93  F023         	call	_putch
 13757  001358  0100               	movlb	0	; () banked
 13758  00135A  4B9F               	infsnz	printf@cp& (0+255),f,b
 13759  00135C  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 13760  00135E                     l5457:
 13761                           
 13762                           ; BSR set to: 0
 13763  00135E  0100               	movlb	0	; () banked
 13764  001360  07A3               	decf	printf@len& (0+255),f,b
 13765  001362  A0D8               	btfss	status,0,c
 13766  001364  07A4               	decf	(printf@len+1)& (0+255),f,b
 13767  001366  0100               	movlb	0	; () banked
 13768  001368  29A3               	incf	printf@len& (0+255),w,b
 13769  00136A  E1E3               	bnz	l5453
 13770  00136C  0100               	movlb	0	; () banked
 13771  00136E  29A4               	incf	(printf@len+1)& (0+255),w,b
 13772  001370  B4D8               	btfsc	status,2,c
 13773  001372  D10A               	goto	l5535
 13774  001374  D7DE               	goto	l5453
 13775  001376                     l5459:
 13776                           
 13777                           ; BSR set to: 0
 13778                           ;doprnt.c: 818: flag |= 0x40;
 13779  001376  0100               	movlb	0	; () banked
 13780  001378  8DA7               	bsf	printf@flag& (0+255),6,b
 13781                           
 13782                           ; BSR set to: 0
 13783                           ;doprnt.c: 822: }
 13784                           
 13785                           ;doprnt.c: 819: break;
 13786  00137A  D01D               	goto	l1255
 13787  00137C                     l5463:
 13788  00137C  C08E  FFF6         	movff	printf@f,tblptrl
 13789  001380  C08F  FFF7         	movff	printf@f+1,tblptrh
 13790  001384  0100               	movlb	0	; () banked
 13791  001386  4B8E               	infsnz	printf@f& (0+255),f,b
 13792  001388  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13793  00138A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13794  00138A  6AF8               	clrf	tblptru,c
 13795  00138C                     	endif
 13796  00138C                     	if	0	;tblptru may be non-zero
 13797  00138C                     	endif
 13798  00138C  0008               	tblrd		*
 13799  00138E  CFF5 F0A8          	movff	tablat,printf@c
 13800  001392  0100               	movlb	0	; () banked
 13801  001394  51A8               	movf	printf@c& (0+255),w,b
 13802                           
 13803                           ; Switch size 1, requested type "space"
 13804                           ; Number of cases is 5, Range of values is 0 to 117
 13805                           ; switch strategies available:
 13806                           ; Name         Instructions Cycles
 13807                           ; simple_byte           16     9 (average)
 13808                           ;	Chosen strategy is simple_byte
 13809  001396  0A00               	xorlw	0	; case 0
 13810  001398  B4D8               	btfsc	status,2,c
 13811  00139A  0012               	return	
 13812  00139C  0A64               	xorlw	100	; case 100
 13813  00139E  B4D8               	btfsc	status,2,c
 13814  0013A0  D00A               	goto	l1255
 13815  0013A2  0A0D               	xorlw	13	; case 105
 13816  0013A4  B4D8               	btfsc	status,2,c
 13817  0013A6  D007               	goto	l1255
 13818  0013A8  0A1A               	xorlw	26	; case 115
 13819  0013AA  B4D8               	btfsc	status,2,c
 13820  0013AC  D758               	goto	l5429
 13821  0013AE  0A06               	xorlw	6	; case 117
 13822  0013B0  B4D8               	btfsc	status,2,c
 13823  0013B2  D7E1               	goto	l5459
 13824  0013B4  D0E9               	goto	l5535
 13825  0013B6                     l1255:
 13826                           
 13827                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 13828  0013B6  0100               	movlb	0	; () banked
 13829  0013B8  BDA7               	btfsc	printf@flag& (0+255),6,b
 13830  0013BA  D019               	goto	l5475
 13831                           
 13832                           ; BSR set to: 0
 13833                           ;doprnt.c: 1253: {
 13834                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13835  0013BC  C0A1  FFD9         	movff	printf@ap,fsr2l
 13836  0013C0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13837  0013C4  CFDE F0A5          	movff	postinc2,printf@val
 13838  0013C8  CFDD F0A6          	movff	postdec2,printf@val+1
 13839                           
 13840                           ; BSR set to: 0
 13841  0013CC  0E02               	movlw	2
 13842  0013CE  0100               	movlb	0	; () banked
 13843  0013D0  27A1               	addwf	printf@ap& (0+255),f,b
 13844  0013D2  0E00               	movlw	0
 13845  0013D4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13846                           
 13847                           ; BSR set to: 0
 13848                           ;doprnt.c: 1261: if((int)val < 0) {
 13849  0013D6  0100               	movlb	0	; () banked
 13850  0013D8  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 13851  0013DA  D016               	goto	l5479
 13852                           
 13853                           ; BSR set to: 0
 13854                           ;doprnt.c: 1262: flag |= 0x03;
 13855  0013DC  0E03               	movlw	3
 13856  0013DE  0100               	movlb	0	; () banked
 13857  0013E0  13A7               	iorwf	printf@flag& (0+255),f,b
 13858                           
 13859                           ; BSR set to: 0
 13860                           ;doprnt.c: 1263: val = -val;
 13861  0013E2  0100               	movlb	0	; () banked
 13862  0013E4  6DA5               	negf	printf@val& (0+255),b
 13863  0013E6  1FA6               	comf	(printf@val+1)& (0+255),f,b
 13864  0013E8  B0D8               	btfsc	status,0,c
 13865  0013EA  2BA6               	incf	(printf@val+1)& (0+255),f,b
 13866                           
 13867                           ; BSR set to: 0
 13868                           ;doprnt.c: 1264: }
 13869                           ;doprnt.c: 1266: }
 13870  0013EC  D00D               	goto	l5479
 13871  0013EE                     l5475:
 13872                           
 13873                           ; BSR set to: 0
 13874                           ;doprnt.c: 1268: else
 13875                           ;doprnt.c: 1273: {
 13876                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13877  0013EE  C0A1  FFD9         	movff	printf@ap,fsr2l
 13878  0013F2  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13879  0013F6  CFDE F0A5          	movff	postinc2,printf@val
 13880  0013FA  CFDD F0A6          	movff	postdec2,printf@val+1
 13881                           
 13882                           ; BSR set to: 0
 13883  0013FE  0E02               	movlw	2
 13884  001400  0100               	movlb	0	; () banked
 13885  001402  27A1               	addwf	printf@ap& (0+255),f,b
 13886  001404  0E00               	movlw	0
 13887  001406  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13888  001408                     l5479:
 13889                           
 13890                           ; BSR set to: 0
 13891                           ;doprnt.c: 1287: }
 13892                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13893  001408  0E01               	movlw	1
 13894  00140A  0100               	movlb	0	; () banked
 13895  00140C  6FA8               	movwf	printf@c& (0+255),b
 13896  00140E                     l5481:
 13897                           
 13898                           ; BSR set to: 0
 13899  00140E  0E05               	movlw	5
 13900  001410  0100               	movlb	0	; () banked
 13901  001412  19A8               	xorwf	printf@c& (0+255),w,b
 13902  001414  B4D8               	btfsc	status,2,c
 13903  001416  D019               	goto	l5493
 13904                           
 13905                           ; BSR set to: 0
 13906                           ;doprnt.c: 1306: if(val < dpowers[c])
 13907                           
 13908                           ; BSR set to: 0
 13909                           
 13910                           ; BSR set to: 0
 13911  001418  0100               	movlb	0	; () banked
 13912  00141A  51A8               	movf	printf@c& (0+255),w,b
 13913  00141C  0D02               	mullw	2
 13914  00141E  0E32               	movlw	low _dpowers
 13915  001420  24F3               	addwf	prodl,w,c
 13916  001422  6EF6               	movwf	tblptrl,c
 13917  001424  0EFB               	movlw	high _dpowers
 13918  001426  20F4               	addwfc	prodh,w,c
 13919  001428  6EF7               	movwf	tblptrh,c
 13920  00142A                     	if	1	;There are 3 active tblptr bytes
 13921  00142A  6AF8               	clrf	tblptru,c
 13922  00142C  0E00               	movlw	low (__mediumconst shr (0+16))
 13923  00142E  22F8               	addwfc	tblptru,f,c
 13924  001430                     	endif
 13925  001430  0009               	tblrd		*+
 13926  001432  50F5               	movf	tablat,w,c
 13927  001434  0100               	movlb	0	; () banked
 13928  001436  5DA5               	subwf	printf@val& (0+255),w,b
 13929  001438  0009               	tblrd		*+
 13930  00143A  50F5               	movf	tablat,w,c
 13931  00143C  0100               	movlb	0	; () banked
 13932  00143E  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 13933  001440  A0D8               	btfss	status,0,c
 13934  001442  D003               	goto	l5493
 13935                           
 13936                           ; BSR set to: 0
 13937                           
 13938                           ; BSR set to: 0
 13939                           
 13940                           ; BSR set to: 0
 13941                           ;doprnt.c: 1307: break;
 13942  001444  0100               	movlb	0	; () banked
 13943  001446  2BA8               	incf	printf@c& (0+255),f,b
 13944  001448  D7E2               	goto	l5481
 13945  00144A                     l5493:
 13946                           
 13947                           ; BSR set to: 0
 13948                           ;doprnt.c: 1345: if(width && flag & 0x03)
 13949  00144A  0100               	movlb	0	; () banked
 13950  00144C  51A9               	movf	printf@width& (0+255),w,b
 13951  00144E  0100               	movlb	0	; () banked
 13952  001450  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13953  001452  B4D8               	btfsc	status,2,c
 13954  001454  D00B               	goto	l5499
 13955                           
 13956                           ; BSR set to: 0
 13957  001456  C0A7  F09A         	movff	printf@flag,??_printf
 13958  00145A  0E03               	movlw	3
 13959  00145C  0100               	movlb	0	; () banked
 13960  00145E  179A               	andwf	??_printf& (0+255),f,b
 13961  001460  B4D8               	btfsc	status,2,c
 13962  001462  D004               	goto	l5499
 13963                           
 13964                           ; BSR set to: 0
 13965                           ;doprnt.c: 1346: width--;
 13966  001464  0100               	movlb	0	; () banked
 13967  001466  07A9               	decf	printf@width& (0+255),f,b
 13968  001468  A0D8               	btfss	status,0,c
 13969  00146A  07AA               	decf	(printf@width+1)& (0+255),f,b
 13970  00146C                     l5499:
 13971                           
 13972                           ; BSR set to: 0
 13973                           ;doprnt.c: 1381: if(width > c)
 13974  00146C  0E80               	movlw	128
 13975  00146E  0100               	movlb	0	; () banked
 13976  001470  BFA8               	btfsc	printf@c& (0+255),7,b
 13977  001472  0E7F               	movlw	127
 13978  001474  0100               	movlb	0	; () banked
 13979  001476  6F9A               	movwf	??_printf& (0+255),b
 13980  001478  0100               	movlb	0	; () banked
 13981  00147A  51A9               	movf	printf@width& (0+255),w,b
 13982  00147C  0100               	movlb	0	; () banked
 13983  00147E  5DA8               	subwf	printf@c& (0+255),w,b
 13984  001480  0100               	movlb	0	; () banked
 13985  001482  51AA               	movf	(printf@width+1)& (0+255),w,b
 13986  001484  0A80               	xorlw	128
 13987  001486  0100               	movlb	0	; () banked
 13988  001488  599A               	subwfb	??_printf& (0+255),w,b
 13989  00148A  B0D8               	btfsc	status,0,c
 13990  00148C  D00B               	goto	l5503
 13991                           
 13992                           ; BSR set to: 0
 13993                           ;doprnt.c: 1382: width -= c;
 13994  00148E  0100               	movlb	0	; () banked
 13995  001490  51A8               	movf	printf@c& (0+255),w,b
 13996  001492  0100               	movlb	0	; () banked
 13997  001494  5FA9               	subwf	printf@width& (0+255),f,b
 13998  001496  0E00               	movlw	0
 13999  001498  0100               	movlb	0	; () banked
 14000  00149A  BFA8               	btfsc	printf@c& (0+255),7,b
 14001  00149C  0EFF               	movlw	255
 14002  00149E  0100               	movlb	0	; () banked
 14003  0014A0  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 14004  0014A2  D005               	goto	l5505
 14005  0014A4                     l5503:
 14006                           
 14007                           ; BSR set to: 0
 14008                           ;doprnt.c: 1383: else
 14009                           ;doprnt.c: 1384: width = 0;
 14010  0014A4  0E00               	movlw	0
 14011  0014A6  0100               	movlb	0	; () banked
 14012  0014A8  6FAA               	movwf	(printf@width+1)& (0+255),b
 14013  0014AA  0E00               	movlw	0
 14014  0014AC  6FA9               	movwf	printf@width& (0+255),b
 14015  0014AE                     l5505:
 14016                           
 14017                           ; BSR set to: 0
 14018                           ;doprnt.c: 1387: if(flag & 0x04) {
 14019  0014AE  0100               	movlb	0	; () banked
 14020  0014B0  A5A7               	btfss	printf@flag& (0+255),2,b
 14021  0014B2  D018               	goto	l5517
 14022                           
 14023                           ; BSR set to: 0
 14024                           ;doprnt.c: 1392: if(flag & 0x03)
 14025  0014B4  C0A7  F09A         	movff	printf@flag,??_printf
 14026  0014B8  0E03               	movlw	3
 14027  0014BA  0100               	movlb	0	; () banked
 14028  0014BC  179A               	andwf	??_printf& (0+255),f,b
 14029  0014BE  B4D8               	btfsc	status,2,c
 14030  0014C0  D003               	goto	l5511
 14031                           
 14032                           ; BSR set to: 0
 14033                           ;doprnt.c: 1393: (putch('-') );
 14034  0014C2  0E2D               	movlw	45
 14035  0014C4  EC93  F023         	call	_putch
 14036  0014C8                     l5511:
 14037                           
 14038                           ;doprnt.c: 1415: if(width)
 14039  0014C8  0100               	movlb	0	; () banked
 14040  0014CA  51A9               	movf	printf@width& (0+255),w,b
 14041  0014CC  0100               	movlb	0	; () banked
 14042  0014CE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14043  0014D0  B4D8               	btfsc	status,2,c
 14044  0014D2  D025               	goto	l5527
 14045                           
 14046                           ; BSR set to: 0
 14047                           ;doprnt.c: 1417: (putch('0') );
 14048                           
 14049                           ; BSR set to: 0
 14050                           
 14051                           ;doprnt.c: 1416: do
 14052  0014D4  0E30               	movlw	48
 14053  0014D6  EC93  F023         	call	_putch
 14054                           
 14055                           ;doprnt.c: 1418: while(--width);
 14056  0014DA  0100               	movlb	0	; () banked
 14057  0014DC  07A9               	decf	printf@width& (0+255),f,b
 14058  0014DE  A0D8               	btfss	status,0,c
 14059  0014E0  07AA               	decf	(printf@width+1)& (0+255),f,b
 14060  0014E2  D7F2               	goto	l5511
 14061  0014E4                     l5517:
 14062                           
 14063                           ; BSR set to: 0
 14064                           ;doprnt.c: 1422: {
 14065                           ;doprnt.c: 1424: if(width
 14066                           ;doprnt.c: 1428: )
 14067  0014E4  0100               	movlb	0	; () banked
 14068  0014E6  51A9               	movf	printf@width& (0+255),w,b
 14069  0014E8  0100               	movlb	0	; () banked
 14070  0014EA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14071  0014EC  B4D8               	btfsc	status,2,c
 14072  0014EE  D00D               	goto	l5523
 14073  0014F0                     l5519:
 14074                           
 14075                           ; BSR set to: 0
 14076                           ;doprnt.c: 1430: (putch(' ') );
 14077  0014F0  0E20               	movlw	32
 14078  0014F2  EC93  F023         	call	_putch
 14079                           
 14080                           ;doprnt.c: 1431: while(--width);
 14081  0014F6  0100               	movlb	0	; () banked
 14082  0014F8  07A9               	decf	printf@width& (0+255),f,b
 14083  0014FA  A0D8               	btfss	status,0,c
 14084  0014FC  07AA               	decf	(printf@width+1)& (0+255),f,b
 14085  0014FE  0100               	movlb	0	; () banked
 14086  001500  51A9               	movf	printf@width& (0+255),w,b
 14087  001502  0100               	movlb	0	; () banked
 14088  001504  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14089  001506  A4D8               	btfss	status,2,c
 14090  001508  D7F3               	goto	l5519
 14091  00150A                     l5523:
 14092                           
 14093                           ; BSR set to: 0
 14094                           ;doprnt.c: 1438: if(flag & 0x03)
 14095  00150A  C0A7  F09A         	movff	printf@flag,??_printf
 14096  00150E  0E03               	movlw	3
 14097  001510  0100               	movlb	0	; () banked
 14098  001512  179A               	andwf	??_printf& (0+255),f,b
 14099  001514  B4D8               	btfsc	status,2,c
 14100  001516  D003               	goto	l5527
 14101                           
 14102                           ; BSR set to: 0
 14103                           ;doprnt.c: 1439: (putch('-') );
 14104  001518  0E2D               	movlw	45
 14105  00151A  EC93  F023         	call	_putch
 14106  00151E                     l5527:
 14107                           
 14108                           ;doprnt.c: 1469: }
 14109                           ;doprnt.c: 1472: prec = c;
 14110  00151E  C0A8  F09E         	movff	printf@c,printf@prec
 14111                           
 14112                           ;doprnt.c: 1474: while(prec--) {
 14113  001522  D02C               	goto	l5533
 14114  001524                     l5529:
 14115                           
 14116                           ;doprnt.c: 1478: {
 14117                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14118  001524  0100               	movlb	0	; () banked
 14119  001526  519E               	movf	printf@prec& (0+255),w,b
 14120  001528  0D02               	mullw	2
 14121  00152A  0E32               	movlw	low _dpowers
 14122  00152C  24F3               	addwf	prodl,w,c
 14123  00152E  6EF6               	movwf	tblptrl,c
 14124  001530  0EFB               	movlw	high _dpowers
 14125  001532  20F4               	addwfc	prodh,w,c
 14126  001534  6EF7               	movwf	tblptrh,c
 14127  001536                     	if	1	;There are 3 active tblptr bytes
 14128  001536  6AF8               	clrf	tblptru,c
 14129  001538  0E00               	movlw	low (__mediumconst shr (0+16))
 14130  00153A  22F8               	addwfc	tblptru,f,c
 14131  00153C                     	endif
 14132  00153C  0009               	tblrd		*+
 14133  00153E  CFF5 F082          	movff	tablat,___lwdiv@divisor
 14134  001542  000A               	tblrd		*-
 14135  001544  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 14136  001548  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 14137  00154C  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 14138  001550  ECAF  F01D         	call	___lwdiv	;wreg free
 14139  001554  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 14140  001558  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 14141  00155C  0E00               	movlw	0
 14142  00155E  0100               	movlb	0	; () banked
 14143  001560  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 14144  001562  0E0A               	movlw	10
 14145  001564  6F89               	movwf	___lwmod@divisor& (0+255),b
 14146  001566  ECC7  F01E         	call	___lwmod	;wreg free
 14147  00156A  0100               	movlb	0	; () banked
 14148  00156C  5187               	movf	?___lwmod& (0+255),w,b
 14149  00156E  0F30               	addlw	48
 14150  001570  0100               	movlb	0	; () banked
 14151  001572  6FA8               	movwf	printf@c& (0+255),b
 14152                           
 14153                           ; BSR set to: 0
 14154                           ;doprnt.c: 1523: }
 14155                           ;doprnt.c: 1524: (putch(c) );
 14156  001574  0100               	movlb	0	; () banked
 14157  001576  51A8               	movf	printf@c& (0+255),w,b
 14158  001578  EC93  F023         	call	_putch
 14159  00157C                     l5533:
 14160  00157C  0100               	movlb	0	; () banked
 14161  00157E  079E               	decf	printf@prec& (0+255),f,b
 14162  001580  0100               	movlb	0	; () banked
 14163  001582  299E               	incf	printf@prec& (0+255),w,b
 14164  001584  A4D8               	btfss	status,2,c
 14165  001586  D7CE               	goto	l5529
 14166  001588                     l5535:
 14167  001588  C08E  FFF6         	movff	printf@f,tblptrl
 14168  00158C  C08F  FFF7         	movff	printf@f+1,tblptrh
 14169  001590  0100               	movlb	0	; () banked
 14170  001592  4B8E               	infsnz	printf@f& (0+255),f,b
 14171  001594  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14172  001596                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14173  001596  6AF8               	clrf	tblptru,c
 14174  001598                     	endif
 14175  001598                     	if	0	;tblptru may be non-zero
 14176  001598                     	endif
 14177  001598  0008               	tblrd		*
 14178  00159A  CFF5 F0A8          	movff	tablat,printf@c
 14179  00159E  0100               	movlb	0	; () banked
 14180  0015A0  51A8               	movf	printf@c& (0+255),w,b
 14181  0015A2  B4D8               	btfsc	status,2,c
 14182  0015A4  0012               	return	
 14183  0015A6  D5EB               	goto	l5405
 14184  0015A8                     __end_of_printf:
 14185                           	opt stack 0
 14186                           tblptru	equ	0xFF8
 14187                           tblptrh	equ	0xFF7
 14188                           tblptrl	equ	0xFF6
 14189                           tablat	equ	0xFF5
 14190                           prodh	equ	0xFF4
 14191                           prodl	equ	0xFF3
 14192                           intcon	equ	0xFF2
 14193                           intcon2	equ	0xFF1
 14194                           intcon3	equ	0xFF0
 14195                           indf0	equ	0xFEF
 14196                           postinc0	equ	0xFEE
 14197                           fsr0h	equ	0xFEA
 14198                           fsr0l	equ	0xFE9
 14199                           wreg	equ	0xFE8
 14200                           postdec1	equ	0xFE5
 14201                           fsr1l	equ	0xFE1
 14202                           indf2	equ	0xFDF
 14203                           postinc2	equ	0xFDE
 14204                           postdec2	equ	0xFDD
 14205                           fsr2h	equ	0xFDA
 14206                           fsr2l	equ	0xFD9
 14207                           status	equ	0xFD8
 14208                           
 14209 ;; *************** function _putch *****************
 14210 ;; Defined at:
 14211 ;;		line 20 in file "lcd.c"
 14212 ;; Parameters:    Size  Location     Type
 14213 ;;  data            1    wreg     unsigned char 
 14214 ;; Auto vars:     Size  Location     Type
 14215 ;;  data            1    2[BANK0 ] unsigned char 
 14216 ;; Return value:  Size  Location     Type
 14217 ;;                  1    wreg      void 
 14218 ;; Registers used:
 14219 ;;		wreg, status,2, status,0, cstack
 14220 ;; Tracked objects:
 14221 ;;		On entry : 0/0
 14222 ;;		On exit  : 0/0
 14223 ;;		Unchanged: 0/0
 14224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14226 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14228 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14229 ;;Total ram usage:        1 bytes
 14230 ;; Hardware stack levels used:    1
 14231 ;; Hardware stack levels required when called:    8
 14232 ;; This function calls:
 14233 ;;		_lcdNibble
 14234 ;; This function is called by:
 14235 ;;		_printf
 14236 ;; This function uses a non-reentrant model
 14237 ;;
 14238                           
 14239                           	psect	text48
 14240  004726                     __ptext48:
 14241                           	opt stack 0
 14242  004726                     _putch:
 14243                           	opt stack 18
 14244                           
 14245                           ;incstack = 0
 14246                           ;putch@data stored from wreg
 14247  004726  0100               	movlb	0	; () banked
 14248  004728  6F82               	movwf	putch@data& (0+255),b
 14249                           
 14250                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 14251  00472A  848C               	bsf	3980,2,c	;volatile
 14252                           
 14253                           ;lcd.c: 22: lcdNibble(data);
 14254  00472C  0100               	movlb	0	; () banked
 14255  00472E  5182               	movf	putch@data& (0+255),w,b
 14256  004730  EC93  F01E         	call	_lcdNibble
 14257  004734  0012               	return		;funcret
 14258  004736                     __end_of_putch:
 14259                           	opt stack 0
 14260                           tblptru	equ	0xFF8
 14261                           tblptrh	equ	0xFF7
 14262                           tblptrl	equ	0xFF6
 14263                           tablat	equ	0xFF5
 14264                           prodh	equ	0xFF4
 14265                           prodl	equ	0xFF3
 14266                           intcon	equ	0xFF2
 14267                           intcon2	equ	0xFF1
 14268                           intcon3	equ	0xFF0
 14269                           indf0	equ	0xFEF
 14270                           postinc0	equ	0xFEE
 14271                           fsr0h	equ	0xFEA
 14272                           fsr0l	equ	0xFE9
 14273                           wreg	equ	0xFE8
 14274                           postdec1	equ	0xFE5
 14275                           fsr1l	equ	0xFE1
 14276                           indf2	equ	0xFDF
 14277                           postinc2	equ	0xFDE
 14278                           postdec2	equ	0xFDD
 14279                           fsr2h	equ	0xFDA
 14280                           fsr2l	equ	0xFD9
 14281                           status	equ	0xFD8
 14282                           
 14283 ;; *************** function _isdigit *****************
 14284 ;; Defined at:
 14285 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 14286 ;; Parameters:    Size  Location     Type
 14287 ;;  c               1    wreg     unsigned char 
 14288 ;; Auto vars:     Size  Location     Type
 14289 ;;  c               1    2[BANK0 ] unsigned char 
 14290 ;; Return value:  Size  Location     Type
 14291 ;;		None               void
 14292 ;; Registers used:
 14293 ;;		wreg, status,2, status,0
 14294 ;; Tracked objects:
 14295 ;;		On entry : 0/0
 14296 ;;		On exit  : 0/0
 14297 ;;		Unchanged: 0/0
 14298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14300 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14301 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14302 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14303 ;;Total ram usage:        3 bytes
 14304 ;; Hardware stack levels used:    1
 14305 ;; Hardware stack levels required when called:    7
 14306 ;; This function calls:
 14307 ;;		Nothing
 14308 ;; This function is called by:
 14309 ;;		_printf
 14310 ;; This function uses a non-reentrant model
 14311 ;;
 14312                           
 14313                           	psect	text49
 14314  004598                     __ptext49:
 14315                           	opt stack 0
 14316  004598                     _isdigit:
 14317                           	opt stack 19
 14318                           
 14319                           ;incstack = 0
 14320                           ;isdigit@c stored from wreg
 14321  004598  0100               	movlb	0	; () banked
 14322  00459A  6F82               	movwf	isdigit@c& (0+255),b
 14323  00459C  0E00               	movlw	0
 14324  00459E  0100               	movlb	0	; () banked
 14325  0045A0  6F81               	movwf	_isdigit$1936& (0+255),b
 14326                           
 14327                           ; BSR set to: 0
 14328  0045A2  0E3A               	movlw	58
 14329  0045A4  0100               	movlb	0	; () banked
 14330  0045A6  6182               	cpfslt	isdigit@c& (0+255),b
 14331  0045A8  D007               	goto	l5253
 14332                           
 14333                           ; BSR set to: 0
 14334  0045AA  0E2F               	movlw	47
 14335  0045AC  0100               	movlb	0	; () banked
 14336  0045AE  6582               	cpfsgt	isdigit@c& (0+255),b
 14337  0045B0  D003               	goto	l5253
 14338                           
 14339                           ; BSR set to: 0
 14340  0045B2  0E01               	movlw	1
 14341  0045B4  0100               	movlb	0	; () banked
 14342  0045B6  6F81               	movwf	_isdigit$1936& (0+255),b
 14343  0045B8                     l5253:
 14344                           
 14345                           ; BSR set to: 0
 14346  0045B8  C081  F080         	movff	_isdigit$1936,??_isdigit
 14347  0045BC  0100               	movlb	0	; () banked
 14348  0045BE  3180               	rrcf	??_isdigit& (0+255),w,b
 14349  0045C0  0012               	return	
 14350  0045C2                     __end_of_isdigit:
 14351                           	opt stack 0
 14352                           tblptru	equ	0xFF8
 14353                           tblptrh	equ	0xFF7
 14354                           tblptrl	equ	0xFF6
 14355                           tablat	equ	0xFF5
 14356                           prodh	equ	0xFF4
 14357                           prodl	equ	0xFF3
 14358                           intcon	equ	0xFF2
 14359                           intcon2	equ	0xFF1
 14360                           intcon3	equ	0xFF0
 14361                           indf0	equ	0xFEF
 14362                           postinc0	equ	0xFEE
 14363                           fsr0h	equ	0xFEA
 14364                           fsr0l	equ	0xFE9
 14365                           wreg	equ	0xFE8
 14366                           postdec1	equ	0xFE5
 14367                           fsr1l	equ	0xFE1
 14368                           indf2	equ	0xFDF
 14369                           postinc2	equ	0xFDE
 14370                           postdec2	equ	0xFDD
 14371                           fsr2h	equ	0xFDA
 14372                           fsr2l	equ	0xFD9
 14373                           status	equ	0xFD8
 14374                           
 14375 ;; *************** function ___wmul *****************
 14376 ;; Defined at:
 14377 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 14378 ;; Parameters:    Size  Location     Type
 14379 ;;  multiplier      2    0[BANK0 ] unsigned int 
 14380 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 14381 ;; Auto vars:     Size  Location     Type
 14382 ;;  product         2    4[BANK0 ] unsigned int 
 14383 ;; Return value:  Size  Location     Type
 14384 ;;                  2    0[BANK0 ] unsigned int 
 14385 ;; Registers used:
 14386 ;;		wreg, status,2, status,0, prodl, prodh
 14387 ;; Tracked objects:
 14388 ;;		On entry : 0/0
 14389 ;;		On exit  : 0/0
 14390 ;;		Unchanged: 0/0
 14391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14392 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14393 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14395 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14396 ;;Total ram usage:        6 bytes
 14397 ;; Hardware stack levels used:    1
 14398 ;; Hardware stack levels required when called:    7
 14399 ;; This function calls:
 14400 ;;		Nothing
 14401 ;; This function is called by:
 14402 ;;		_printf
 14403 ;; This function uses a non-reentrant model
 14404 ;;
 14405                           
 14406                           	psect	text50
 14407  00426C                     __ptext50:
 14408                           	opt stack 0
 14409  00426C                     ___wmul:
 14410                           	opt stack 19
 14411                           
 14412                           ; BSR set to: 0
 14413                           ;incstack = 0
 14414  00426C  0100               	movlb	0	; () banked
 14415  00426E  5180               	movf	___wmul@multiplier& (0+255),w,b
 14416  004270  0100               	movlb	0	; () banked
 14417  004272  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14418  004274  CFF3 F084          	movff	prodl,___wmul@product
 14419  004278  CFF4 F085          	movff	prodh,___wmul@product+1
 14420  00427C  0100               	movlb	0	; () banked
 14421  00427E  5180               	movf	___wmul@multiplier& (0+255),w,b
 14422  004280  0100               	movlb	0	; () banked
 14423  004282  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14424  004284  50F3               	movf	prodl,w,c
 14425  004286  0100               	movlb	0	; () banked
 14426  004288  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14427  00428A  0100               	movlb	0	; () banked
 14428  00428C  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14429  00428E  0100               	movlb	0	; () banked
 14430  004290  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14431  004292  50F3               	movf	prodl,w,c
 14432  004294  0100               	movlb	0	; () banked
 14433  004296  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14434                           
 14435                           ; BSR set to: 0
 14436  004298  C084  F080         	movff	___wmul@product,?___wmul
 14437  00429C  C085  F081         	movff	___wmul@product+1,?___wmul+1
 14438  0042A0  0012               	return	
 14439  0042A2                     __end_of___wmul:
 14440                           	opt stack 0
 14441                           tblptru	equ	0xFF8
 14442                           tblptrh	equ	0xFF7
 14443                           tblptrl	equ	0xFF6
 14444                           tablat	equ	0xFF5
 14445                           prodh	equ	0xFF4
 14446                           prodl	equ	0xFF3
 14447                           intcon	equ	0xFF2
 14448                           intcon2	equ	0xFF1
 14449                           intcon3	equ	0xFF0
 14450                           indf0	equ	0xFEF
 14451                           postinc0	equ	0xFEE
 14452                           fsr0h	equ	0xFEA
 14453                           fsr0l	equ	0xFE9
 14454                           wreg	equ	0xFE8
 14455                           postdec1	equ	0xFE5
 14456                           fsr1l	equ	0xFE1
 14457                           indf2	equ	0xFDF
 14458                           postinc2	equ	0xFDE
 14459                           postdec2	equ	0xFDD
 14460                           fsr2h	equ	0xFDA
 14461                           fsr2l	equ	0xFD9
 14462                           status	equ	0xFD8
 14463                           
 14464 ;; *************** function ___lwmod *****************
 14465 ;; Defined at:
 14466 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 14467 ;; Parameters:    Size  Location     Type
 14468 ;;  dividend        2    7[BANK0 ] unsigned int 
 14469 ;;  divisor         2    9[BANK0 ] unsigned int 
 14470 ;; Auto vars:     Size  Location     Type
 14471 ;;  counter         1   11[BANK0 ] unsigned char 
 14472 ;; Return value:  Size  Location     Type
 14473 ;;                  2    7[BANK0 ] unsigned int 
 14474 ;; Registers used:
 14475 ;;		wreg, status,2, status,0
 14476 ;; Tracked objects:
 14477 ;;		On entry : 0/0
 14478 ;;		On exit  : 0/0
 14479 ;;		Unchanged: 0/0
 14480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14481 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14482 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14484 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14485 ;;Total ram usage:        5 bytes
 14486 ;; Hardware stack levels used:    1
 14487 ;; Hardware stack levels required when called:    7
 14488 ;; This function calls:
 14489 ;;		Nothing
 14490 ;; This function is called by:
 14491 ;;		_printf
 14492 ;; This function uses a non-reentrant model
 14493 ;;
 14494                           
 14495                           	psect	text51
 14496  003D8E                     __ptext51:
 14497                           	opt stack 0
 14498  003D8E                     ___lwmod:
 14499                           	opt stack 19
 14500                           
 14501                           ; BSR set to: 0
 14502                           ;incstack = 0
 14503  003D8E  0100               	movlb	0	; () banked
 14504  003D90  5189               	movf	___lwmod@divisor& (0+255),w,b
 14505  003D92  0100               	movlb	0	; () banked
 14506  003D94  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 14507  003D96  B4D8               	btfsc	status,2,c
 14508  003D98  D026               	goto	l1712
 14509                           
 14510                           ; BSR set to: 0
 14511  003D9A  0E01               	movlw	1
 14512  003D9C  0100               	movlb	0	; () banked
 14513  003D9E  6F8B               	movwf	___lwmod@counter& (0+255),b
 14514  003DA0  D006               	goto	l5291
 14515  003DA2                     l5289:
 14516                           
 14517                           ; BSR set to: 0
 14518  003DA2  0100               	movlb	0	; () banked
 14519  003DA4  90D8               	bcf	status,0,c
 14520  003DA6  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 14521  003DA8  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 14522  003DAA  0100               	movlb	0	; () banked
 14523  003DAC  2B8B               	incf	___lwmod@counter& (0+255),f,b
 14524  003DAE                     l5291:
 14525                           
 14526                           ; BSR set to: 0
 14527  003DAE  0100               	movlb	0	; () banked
 14528  003DB0  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 14529  003DB2  D7F7               	goto	l5289
 14530  003DB4                     l5293:
 14531                           
 14532                           ; BSR set to: 0
 14533  003DB4  0100               	movlb	0	; () banked
 14534  003DB6  5189               	movf	___lwmod@divisor& (0+255),w,b
 14535  003DB8  0100               	movlb	0	; () banked
 14536  003DBA  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 14537  003DBC  0100               	movlb	0	; () banked
 14538  003DBE  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14539  003DC0  0100               	movlb	0	; () banked
 14540  003DC2  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 14541  003DC4  A0D8               	btfss	status,0,c
 14542  003DC6  D008               	goto	l5297
 14543                           
 14544                           ; BSR set to: 0
 14545  003DC8  0100               	movlb	0	; () banked
 14546  003DCA  5189               	movf	___lwmod@divisor& (0+255),w,b
 14547  003DCC  0100               	movlb	0	; () banked
 14548  003DCE  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 14549  003DD0  0100               	movlb	0	; () banked
 14550  003DD2  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14551  003DD4  0100               	movlb	0	; () banked
 14552  003DD6  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 14553  003DD8                     l5297:
 14554                           
 14555                           ; BSR set to: 0
 14556  003DD8  0100               	movlb	0	; () banked
 14557  003DDA  90D8               	bcf	status,0,c
 14558  003DDC  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 14559  003DDE  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 14560                           
 14561                           ; BSR set to: 0
 14562  003DE0  0100               	movlb	0	; () banked
 14563  003DE2  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 14564  003DE4  D7E7               	goto	l5293
 14565  003DE6                     l1712:
 14566                           
 14567                           ; BSR set to: 0
 14568  003DE6  C087  F087         	movff	___lwmod@dividend,?___lwmod
 14569  003DEA  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 14570                           
 14571                           ; BSR set to: 0
 14572  003DEE  0012               	return		;funcret
 14573  003DF0                     __end_of___lwmod:
 14574                           	opt stack 0
 14575                           tblptru	equ	0xFF8
 14576                           tblptrh	equ	0xFF7
 14577                           tblptrl	equ	0xFF6
 14578                           tablat	equ	0xFF5
 14579                           prodh	equ	0xFF4
 14580                           prodl	equ	0xFF3
 14581                           intcon	equ	0xFF2
 14582                           intcon2	equ	0xFF1
 14583                           intcon3	equ	0xFF0
 14584                           indf0	equ	0xFEF
 14585                           postinc0	equ	0xFEE
 14586                           fsr0h	equ	0xFEA
 14587                           fsr0l	equ	0xFE9
 14588                           wreg	equ	0xFE8
 14589                           postdec1	equ	0xFE5
 14590                           fsr1l	equ	0xFE1
 14591                           indf2	equ	0xFDF
 14592                           postinc2	equ	0xFDE
 14593                           postdec2	equ	0xFDD
 14594                           fsr2h	equ	0xFDA
 14595                           fsr2l	equ	0xFD9
 14596                           status	equ	0xFD8
 14597                           
 14598 ;; *************** function ___lwdiv *****************
 14599 ;; Defined at:
 14600 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 14601 ;; Parameters:    Size  Location     Type
 14602 ;;  dividend        2    0[BANK0 ] unsigned int 
 14603 ;;  divisor         2    2[BANK0 ] unsigned int 
 14604 ;; Auto vars:     Size  Location     Type
 14605 ;;  quotient        2    4[BANK0 ] unsigned int 
 14606 ;;  counter         1    6[BANK0 ] unsigned char 
 14607 ;; Return value:  Size  Location     Type
 14608 ;;                  2    0[BANK0 ] unsigned int 
 14609 ;; Registers used:
 14610 ;;		wreg, status,2, status,0
 14611 ;; Tracked objects:
 14612 ;;		On entry : 0/0
 14613 ;;		On exit  : 0/0
 14614 ;;		Unchanged: 0/0
 14615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14616 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14617 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14619 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14620 ;;Total ram usage:        7 bytes
 14621 ;; Hardware stack levels used:    1
 14622 ;; Hardware stack levels required when called:    7
 14623 ;; This function calls:
 14624 ;;		Nothing
 14625 ;; This function is called by:
 14626 ;;		_printf
 14627 ;; This function uses a non-reentrant model
 14628 ;;
 14629                           
 14630                           	psect	text52
 14631  003B5E                     __ptext52:
 14632                           	opt stack 0
 14633  003B5E                     ___lwdiv:
 14634                           	opt stack 19
 14635                           
 14636                           ; BSR set to: 0
 14637                           ;incstack = 0
 14638  003B5E  0E00               	movlw	0
 14639  003B60  0100               	movlb	0	; () banked
 14640  003B62  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 14641  003B64  0E00               	movlw	0
 14642  003B66  6F84               	movwf	___lwdiv@quotient& (0+255),b
 14643                           
 14644                           ; BSR set to: 0
 14645  003B68  0100               	movlb	0	; () banked
 14646  003B6A  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14647  003B6C  0100               	movlb	0	; () banked
 14648  003B6E  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 14649  003B70  B4D8               	btfsc	status,2,c
 14650  003B72  D02C               	goto	l1702
 14651                           
 14652                           ; BSR set to: 0
 14653  003B74  0E01               	movlw	1
 14654  003B76  0100               	movlb	0	; () banked
 14655  003B78  6F86               	movwf	___lwdiv@counter& (0+255),b
 14656  003B7A  D006               	goto	l5271
 14657  003B7C                     l5269:
 14658                           
 14659                           ; BSR set to: 0
 14660  003B7C  0100               	movlb	0	; () banked
 14661  003B7E  90D8               	bcf	status,0,c
 14662  003B80  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 14663  003B82  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 14664  003B84  0100               	movlb	0	; () banked
 14665  003B86  2B86               	incf	___lwdiv@counter& (0+255),f,b
 14666  003B88                     l5271:
 14667                           
 14668                           ; BSR set to: 0
 14669  003B88  0100               	movlb	0	; () banked
 14670  003B8A  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 14671  003B8C  D7F7               	goto	l5269
 14672  003B8E                     l5273:
 14673                           
 14674                           ; BSR set to: 0
 14675  003B8E  0100               	movlb	0	; () banked
 14676  003B90  90D8               	bcf	status,0,c
 14677  003B92  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 14678  003B94  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 14679                           
 14680                           ; BSR set to: 0
 14681  003B96  0100               	movlb	0	; () banked
 14682  003B98  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14683  003B9A  0100               	movlb	0	; () banked
 14684  003B9C  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 14685  003B9E  0100               	movlb	0	; () banked
 14686  003BA0  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14687  003BA2  0100               	movlb	0	; () banked
 14688  003BA4  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 14689  003BA6  A0D8               	btfss	status,0,c
 14690  003BA8  D00A               	goto	l5281
 14691                           
 14692                           ; BSR set to: 0
 14693  003BAA  0100               	movlb	0	; () banked
 14694  003BAC  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14695  003BAE  0100               	movlb	0	; () banked
 14696  003BB0  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 14697  003BB2  0100               	movlb	0	; () banked
 14698  003BB4  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14699  003BB6  0100               	movlb	0	; () banked
 14700  003BB8  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 14701                           
 14702                           ; BSR set to: 0
 14703  003BBA  0100               	movlb	0	; () banked
 14704  003BBC  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 14705  003BBE                     l5281:
 14706                           
 14707                           ; BSR set to: 0
 14708  003BBE  0100               	movlb	0	; () banked
 14709  003BC0  90D8               	bcf	status,0,c
 14710  003BC2  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 14711  003BC4  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 14712                           
 14713                           ; BSR set to: 0
 14714  003BC6  0100               	movlb	0	; () banked
 14715  003BC8  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 14716  003BCA  D7E1               	goto	l5273
 14717  003BCC                     l1702:
 14718                           
 14719                           ; BSR set to: 0
 14720  003BCC  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 14721  003BD0  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14722                           
 14723                           ; BSR set to: 0
 14724  003BD4  0012               	return		;funcret
 14725  003BD6                     __end_of___lwdiv:
 14726                           	opt stack 0
 14727                           tblptru	equ	0xFF8
 14728                           tblptrh	equ	0xFF7
 14729                           tblptrl	equ	0xFF6
 14730                           tablat	equ	0xFF5
 14731                           prodh	equ	0xFF4
 14732                           prodl	equ	0xFF3
 14733                           intcon	equ	0xFF2
 14734                           intcon2	equ	0xFF1
 14735                           intcon3	equ	0xFF0
 14736                           indf0	equ	0xFEF
 14737                           postinc0	equ	0xFEE
 14738                           fsr0h	equ	0xFEA
 14739                           fsr0l	equ	0xFE9
 14740                           wreg	equ	0xFE8
 14741                           postdec1	equ	0xFE5
 14742                           fsr1l	equ	0xFE1
 14743                           indf2	equ	0xFDF
 14744                           postinc2	equ	0xFDE
 14745                           postdec2	equ	0xFDD
 14746                           fsr2h	equ	0xFDA
 14747                           fsr2l	equ	0xFD9
 14748                           status	equ	0xFD8
 14749                           
 14750 ;; *************** function _lcdInst *****************
 14751 ;; Defined at:
 14752 ;;		line 15 in file "lcd.c"
 14753 ;; Parameters:    Size  Location     Type
 14754 ;;  data            1    wreg     unsigned char 
 14755 ;; Auto vars:     Size  Location     Type
 14756 ;;  data            1    2[BANK0 ] unsigned char 
 14757 ;; Return value:  Size  Location     Type
 14758 ;;                  1    wreg      void 
 14759 ;; Registers used:
 14760 ;;		wreg, status,2, status,0, cstack
 14761 ;; Tracked objects:
 14762 ;;		On entry : 0/0
 14763 ;;		On exit  : 0/0
 14764 ;;		Unchanged: 0/0
 14765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14767 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14769 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14770 ;;Total ram usage:        1 bytes
 14771 ;; Hardware stack levels used:    1
 14772 ;; Hardware stack levels required when called:    8
 14773 ;; This function calls:
 14774 ;;		_lcdNibble
 14775 ;; This function is called by:
 14776 ;;		_UI
 14777 ;;		_change_state_to_menu_start
 14778 ;;		_change_state_to_menu_12
 14779 ;;		_change_state_to_menu_22
 14780 ;;		_initLCD
 14781 ;;		_printRTC
 14782 ;;		_Loading
 14783 ;;		_EEPROM_write
 14784 ;;		_Test
 14785 ;;		_algorithmTest
 14786 ;;		_sensorTest
 14787 ;;		_actuatorTest
 14788 ;;		_BothServos
 14789 ;;		_PortTestA5
 14790 ;;		_PusherTestA5
 14791 ;;		_ToggleTestA5
 14792 ;; This function uses a non-reentrant model
 14793 ;;
 14794                           
 14795                           	psect	text53
 14796  004736                     __ptext53:
 14797                           	opt stack 0
 14798  004736                     _lcdInst:
 14799                           	opt stack 20
 14800                           
 14801                           ; BSR set to: 0
 14802                           ;incstack = 0
 14803                           ;lcdInst@data stored from wreg
 14804  004736  0100               	movlb	0	; () banked
 14805  004738  6F82               	movwf	lcdInst@data& (0+255),b
 14806                           
 14807                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 14808  00473A  948C               	bcf	3980,2,c	;volatile
 14809                           
 14810                           ;lcd.c: 17: lcdNibble(data);
 14811  00473C  0100               	movlb	0	; () banked
 14812  00473E  5182               	movf	lcdInst@data& (0+255),w,b
 14813  004740  EC93  F01E         	call	_lcdNibble
 14814  004744  0012               	return		;funcret
 14815  004746                     __end_of_lcdInst:
 14816                           	opt stack 0
 14817                           tblptru	equ	0xFF8
 14818                           tblptrh	equ	0xFF7
 14819                           tblptrl	equ	0xFF6
 14820                           tablat	equ	0xFF5
 14821                           prodh	equ	0xFF4
 14822                           prodl	equ	0xFF3
 14823                           intcon	equ	0xFF2
 14824                           intcon2	equ	0xFF1
 14825                           intcon3	equ	0xFF0
 14826                           indf0	equ	0xFEF
 14827                           postinc0	equ	0xFEE
 14828                           fsr0h	equ	0xFEA
 14829                           fsr0l	equ	0xFE9
 14830                           wreg	equ	0xFE8
 14831                           postdec1	equ	0xFE5
 14832                           fsr1l	equ	0xFE1
 14833                           indf2	equ	0xFDF
 14834                           postinc2	equ	0xFDE
 14835                           postdec2	equ	0xFDD
 14836                           fsr2h	equ	0xFDA
 14837                           fsr2l	equ	0xFD9
 14838                           status	equ	0xFD8
 14839                           
 14840 ;; *************** function _lcdNibble *****************
 14841 ;; Defined at:
 14842 ;;		line 25 in file "lcd.c"
 14843 ;; Parameters:    Size  Location     Type
 14844 ;;  data            1    wreg     unsigned char 
 14845 ;; Auto vars:     Size  Location     Type
 14846 ;;  data            1    1[BANK0 ] unsigned char 
 14847 ;;  temp            1    0[BANK0 ] unsigned char 
 14848 ;; Return value:  Size  Location     Type
 14849 ;;                  1    wreg      void 
 14850 ;; Registers used:
 14851 ;;		wreg, status,2, status,0
 14852 ;; Tracked objects:
 14853 ;;		On entry : 0/0
 14854 ;;		On exit  : 0/0
 14855 ;;		Unchanged: 0/0
 14856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14858 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14860 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14861 ;;Total ram usage:        2 bytes
 14862 ;; Hardware stack levels used:    1
 14863 ;; Hardware stack levels required when called:    7
 14864 ;; This function calls:
 14865 ;;		Nothing
 14866 ;; This function is called by:
 14867 ;;		_lcdInst
 14868 ;;		_putch
 14869 ;; This function uses a non-reentrant model
 14870 ;;
 14871                           
 14872                           	psect	text54
 14873  003D26                     __ptext54:
 14874                           	opt stack 0
 14875  003D26                     _lcdNibble:
 14876                           	opt stack 20
 14877                           
 14878                           ;incstack = 0
 14879                           ;lcdNibble@data stored from wreg
 14880  003D26  0100               	movlb	0	; () banked
 14881  003D28  6F81               	movwf	lcdNibble@data& (0+255),b
 14882                           
 14883                           ;lcd.c: 27: char temp = data & 0xF0;
 14884  003D2A  0100               	movlb	0	; () banked
 14885  003D2C  5181               	movf	lcdNibble@data& (0+255),w,b
 14886  003D2E  0BF0               	andlw	240
 14887  003D30  0100               	movlb	0	; () banked
 14888  003D32  6F80               	movwf	lcdNibble@temp& (0+255),b
 14889                           
 14890                           ;lcd.c: 28: LATD = LATD & 0x0F;
 14891  003D34  508C               	movf	3980,w,c	;volatile
 14892  003D36  0B0F               	andlw	15
 14893  003D38  6E8C               	movwf	3980,c	;volatile
 14894                           
 14895                           ;lcd.c: 29: LATD = temp | LATD;
 14896  003D3A  0100               	movlb	0	; () banked
 14897  003D3C  5180               	movf	lcdNibble@temp& (0+255),w,b
 14898  003D3E  108C               	iorwf	3980,w,c	;volatile
 14899  003D40  6E8C               	movwf	3980,c	;volatile
 14900                           
 14901                           ; BSR set to: 0
 14902                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 14903  003D42  868C               	bsf	3980,3,c	;volatile
 14904                           
 14905                           ; BSR set to: 0
 14906                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14907  003D44  0E42               	movlw	66
 14908  003D46                     u8107:
 14909  003D46  2EE8               	decfsz	wreg,f,c
 14910  003D48  D7FE               	bra	u8107
 14911  003D4A  D000               	nop2	
 14912                           
 14913                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 14914  003D4C  968C               	bcf	3980,3,c	;volatile
 14915                           
 14916                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14917  003D4E  0E42               	movlw	66
 14918  003D50                     u8117:
 14919  003D50  2EE8               	decfsz	wreg,f,c
 14920  003D52  D7FE               	bra	u8117
 14921  003D54  D000               	nop2	
 14922                           
 14923                           ;lcd.c: 36: data = data << 4;
 14924  003D56  0100               	movlb	0	; () banked
 14925  003D58  3981               	swapf	lcdNibble@data& (0+255),w,b
 14926  003D5A  0BF0               	andlw	240
 14927  003D5C  0100               	movlb	0	; () banked
 14928  003D5E  6F81               	movwf	lcdNibble@data& (0+255),b
 14929                           
 14930                           ;lcd.c: 38: temp = data & 0xF0;
 14931  003D60  0100               	movlb	0	; () banked
 14932  003D62  5181               	movf	lcdNibble@data& (0+255),w,b
 14933  003D64  0BF0               	andlw	240
 14934  003D66  0100               	movlb	0	; () banked
 14935  003D68  6F80               	movwf	lcdNibble@temp& (0+255),b
 14936                           
 14937                           ;lcd.c: 39: LATD = LATD & 0x0F;
 14938  003D6A  508C               	movf	3980,w,c	;volatile
 14939  003D6C  0B0F               	andlw	15
 14940  003D6E  6E8C               	movwf	3980,c	;volatile
 14941                           
 14942                           ;lcd.c: 40: LATD = temp | LATD;
 14943  003D70  0100               	movlb	0	; () banked
 14944  003D72  5180               	movf	lcdNibble@temp& (0+255),w,b
 14945  003D74  108C               	iorwf	3980,w,c	;volatile
 14946  003D76  6E8C               	movwf	3980,c	;volatile
 14947                           
 14948                           ; BSR set to: 0
 14949                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 14950  003D78  868C               	bsf	3980,3,c	;volatile
 14951                           
 14952                           ; BSR set to: 0
 14953                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14954  003D7A  0E42               	movlw	66
 14955  003D7C                     u8127:
 14956  003D7C  2EE8               	decfsz	wreg,f,c
 14957  003D7E  D7FE               	bra	u8127
 14958  003D80  D000               	nop2	
 14959                           
 14960                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 14961  003D82  968C               	bcf	3980,3,c	;volatile
 14962                           
 14963                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14964  003D84  0E42               	movlw	66
 14965  003D86                     u8137:
 14966  003D86  2EE8               	decfsz	wreg,f,c
 14967  003D88  D7FE               	bra	u8137
 14968  003D8A  D000               	nop2	
 14969  003D8C  0012               	return		;funcret
 14970  003D8E                     __end_of_lcdNibble:
 14971                           	opt stack 0
 14972                           tblptru	equ	0xFF8
 14973                           tblptrh	equ	0xFF7
 14974                           tblptrl	equ	0xFF6
 14975                           tablat	equ	0xFF5
 14976                           prodh	equ	0xFF4
 14977                           prodl	equ	0xFF3
 14978                           intcon	equ	0xFF2
 14979                           intcon2	equ	0xFF1
 14980                           intcon3	equ	0xFF0
 14981                           indf0	equ	0xFEF
 14982                           postinc0	equ	0xFEE
 14983                           fsr0h	equ	0xFEA
 14984                           fsr0l	equ	0xFE9
 14985                           wreg	equ	0xFE8
 14986                           postdec1	equ	0xFE5
 14987                           fsr1l	equ	0xFE1
 14988                           indf2	equ	0xFDF
 14989                           postinc2	equ	0xFDE
 14990                           postdec2	equ	0xFDD
 14991                           fsr2h	equ	0xFDA
 14992                           fsr2l	equ	0xFD9
 14993                           status	equ	0xFD8
 14994                           
 14995 ;; *************** function _initServos *****************
 14996 ;; Defined at:
 14997 ;;		line 273 in file "sort.c"
 14998 ;; Parameters:    Size  Location     Type
 14999 ;;		None
 15000 ;; Auto vars:     Size  Location     Type
 15001 ;;		None
 15002 ;; Return value:  Size  Location     Type
 15003 ;;                  1    wreg      void 
 15004 ;; Registers used:
 15005 ;;		wreg, status,2, status,0, cstack
 15006 ;; Tracked objects:
 15007 ;;		On entry : 0/0
 15008 ;;		On exit  : 0/0
 15009 ;;		Unchanged: 0/0
 15010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15013 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15014 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15015 ;;Total ram usage:        1 bytes
 15016 ;; Hardware stack levels used:    1
 15017 ;; Hardware stack levels required when called:    8
 15018 ;; This function calls:
 15019 ;;		_updateServoPosition
 15020 ;; This function is called by:
 15021 ;;		_Loading
 15022 ;;		_BothServos
 15023 ;; This function uses a non-reentrant model
 15024 ;;
 15025                           
 15026                           	psect	text55
 15027  003EAC                     __ptext55:
 15028                           	opt stack 0
 15029  003EAC                     _initServos:
 15030                           	opt stack 20
 15031                           
 15032                           ;sort.c: 274: updateServoPosition(1200, 1);
 15033                           
 15034                           ;incstack = 0
 15035  003EAC  0E04               	movlw	4
 15036  003EAE  0100               	movlb	0	; () banked
 15037  003EB0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15038  003EB2  0EB0               	movlw	176
 15039  003EB4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15040  003EB6  0E00               	movlw	0
 15041  003EB8  0100               	movlb	0	; () banked
 15042  003EBA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15043  003EBC  0E01               	movlw	1
 15044  003EBE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15045  003EC0  ECEB  F01D         	call	_updateServoPosition	;wreg free
 15046                           
 15047                           ;sort.c: 275: updateServoPosition(1150, 3);
 15048  003EC4  0E04               	movlw	4
 15049  003EC6  0100               	movlb	0	; () banked
 15050  003EC8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15051  003ECA  0E7E               	movlw	126
 15052  003ECC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15053  003ECE  0E00               	movlw	0
 15054  003ED0  0100               	movlb	0	; () banked
 15055  003ED2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15056  003ED4  0E03               	movlw	3
 15057  003ED6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15058  003ED8  ECEB  F01D         	call	_updateServoPosition	;wreg free
 15059                           
 15060                           ;sort.c: 276: TMR1ON = 1;
 15061  003EDC  80CD               	bsf	4045,0,c	;volatile
 15062                           
 15063                           ;sort.c: 277: was_low_1 = 0;
 15064  003EDE  0E00               	movlw	0
 15065  003EE0  6E7A               	movwf	_was_low_1+1,c	;volatile
 15066  003EE2  0E00               	movlw	0
 15067  003EE4  6E79               	movwf	_was_low_1,c	;volatile
 15068                           
 15069                           ;sort.c: 278: _delay((unsigned long)((5)*(32000000/4000.0)));
 15070  003EE6  0E34               	movlw	52
 15071  003EE8  0100               	movlb	0	; () banked
 15072  003EEA  6F88               	movwf	??_initServos& (0+255),b
 15073  003EEC  0EF1               	movlw	241
 15074  003EEE                     u8147:
 15075  003EEE  2EE8               	decfsz	wreg,f,c
 15076  003EF0  D7FE               	bra	u8147
 15077  003EF2  2F88               	decfsz	??_initServos& (0+255),f,b
 15078  003EF4  D7FC               	bra	u8147
 15079  003EF6  D000               	nop2	
 15080                           
 15081                           ;sort.c: 279: TMR3ON = 1;
 15082  003EF8  80B1               	bsf	4017,0,c	;volatile
 15083                           
 15084                           ;sort.c: 280: was_low_3 = 0;
 15085  003EFA  0E00               	movlw	0
 15086  003EFC  6E7C               	movwf	_was_low_3+1,c	;volatile
 15087  003EFE  0E00               	movlw	0
 15088  003F00  6E7B               	movwf	_was_low_3,c	;volatile
 15089                           
 15090                           ;sort.c: 282: LATCbits.LATC0 = 1;
 15091  003F02  808B               	bsf	3979,0,c	;volatile
 15092  003F04  0012               	return		;funcret
 15093  003F06                     __end_of_initServos:
 15094                           	opt stack 0
 15095                           tblptru	equ	0xFF8
 15096                           tblptrh	equ	0xFF7
 15097                           tblptrl	equ	0xFF6
 15098                           tablat	equ	0xFF5
 15099                           prodh	equ	0xFF4
 15100                           prodl	equ	0xFF3
 15101                           intcon	equ	0xFF2
 15102                           intcon2	equ	0xFF1
 15103                           intcon3	equ	0xFF0
 15104                           indf0	equ	0xFEF
 15105                           postinc0	equ	0xFEE
 15106                           fsr0h	equ	0xFEA
 15107                           fsr0l	equ	0xFE9
 15108                           wreg	equ	0xFE8
 15109                           postdec1	equ	0xFE5
 15110                           fsr1l	equ	0xFE1
 15111                           indf2	equ	0xFDF
 15112                           postinc2	equ	0xFDE
 15113                           postdec2	equ	0xFDD
 15114                           fsr2h	equ	0xFDA
 15115                           fsr2l	equ	0xFD9
 15116                           status	equ	0xFD8
 15117                           
 15118 ;; *************** function _updateServoPosition *****************
 15119 ;; Defined at:
 15120 ;;		line 334 in file "sort.c"
 15121 ;; Parameters:    Size  Location     Type
 15122 ;;  time_us         2    0[BANK0 ] int 
 15123 ;;  timer           2    2[BANK0 ] int 
 15124 ;; Auto vars:     Size  Location     Type
 15125 ;;  my_time         2    6[BANK0 ] unsigned int 
 15126 ;; Return value:  Size  Location     Type
 15127 ;;                  1    wreg      void 
 15128 ;; Registers used:
 15129 ;;		wreg, status,2, status,0
 15130 ;; Tracked objects:
 15131 ;;		On entry : 0/0
 15132 ;;		On exit  : 0/0
 15133 ;;		Unchanged: 0/0
 15134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15135 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15136 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15137 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15138 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15139 ;;Total ram usage:        8 bytes
 15140 ;; Hardware stack levels used:    1
 15141 ;; Hardware stack levels required when called:    7
 15142 ;; This function calls:
 15143 ;;		Nothing
 15144 ;; This function is called by:
 15145 ;;		_Distribution
 15146 ;;		_initServos
 15147 ;;		_actuatorTest
 15148 ;;		_BothServos
 15149 ;; This function uses a non-reentrant model
 15150 ;;
 15151                           
 15152                           	psect	text56
 15153  003BD6                     __ptext56:
 15154                           	opt stack 0
 15155  003BD6                     _updateServoPosition:
 15156                           	opt stack 20
 15157                           
 15158                           ;sort.c: 335: unsigned int my_time = 65535 - time_us;
 15159                           
 15160                           ;incstack = 0
 15161  003BD6  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 15162  003BDA  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 15163  003BDE  0100               	movlb	0	; () banked
 15164  003BE0  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15165  003BE2  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15166  003BE4  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15167  003BE6  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15168  003BE8  0EFF               	movlw	255
 15169  003BEA  0100               	movlb	0	; () banked
 15170  003BEC  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15171  003BEE  0100               	movlb	0	; () banked
 15172  003BF0  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15173  003BF2  0EFF               	movlw	255
 15174  003BF4  0100               	movlb	0	; () banked
 15175  003BF6  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15176  003BF8  0100               	movlb	0	; () banked
 15177  003BFA  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15178                           
 15179                           ;sort.c: 336: switch(timer){
 15180  003BFC  D015               	goto	l5577
 15181  003BFE                     l5575:
 15182                           
 15183                           ; BSR set to: 0
 15184                           ;sort.c: 338: servoTimes[0] = my_time >> 8;
 15185  003BFE  0100               	movlb	0	; () banked
 15186  003C00  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15187  003C02  0101               	movlb	1	; () banked
 15188  003C04  6F1C               	movwf	_servoTimes& (0+255),b
 15189  003C06  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 15190                           
 15191                           ;sort.c: 339: servoTimes[1] = my_time & 0xFF;
 15192  003C08  0100               	movlb	0	; () banked
 15193  003C0A  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15194  003C0C  0101               	movlb	1	; () banked
 15195  003C0E  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 15196  003C10  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 15197  003C12                     l792:
 15198                           
 15199                           ;sort.c: 341: servoTimes[2] = my_time >> 8;
 15200  003C12  0100               	movlb	0	; () banked
 15201  003C14  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15202  003C16  0101               	movlb	1	; () banked
 15203  003C18  6F20               	movwf	(_servoTimes+4)& (0+255),b
 15204  003C1A  6B21               	clrf	(_servoTimes+5)& (0+255),b
 15205                           
 15206                           ;sort.c: 342: servoTimes[3] = my_time & 0xFF;
 15207  003C1C  0100               	movlb	0	; () banked
 15208  003C1E  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15209  003C20  0101               	movlb	1	; () banked
 15210  003C22  6F22               	movwf	(_servoTimes+6)& (0+255),b
 15211  003C24  6B23               	clrf	(_servoTimes+7)& (0+255),b
 15212                           
 15213                           ;sort.c: 343: }
 15214  003C26  0012               	return	
 15215  003C28                     l5577:
 15216  003C28  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15217  003C2C  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15218                           
 15219                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15220                           ; Switch size 1, requested type "space"
 15221                           ; Number of cases is 1, Range of values is 0 to 0
 15222                           ; switch strategies available:
 15223                           ; Name         Instructions Cycles
 15224                           ; simple_byte            4     3 (average)
 15225                           ;	Chosen strategy is simple_byte
 15226  003C30  0100               	movlb	0	; () banked
 15227  003C32  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15228  003C34  0A00               	xorlw	0	; case 0
 15229  003C36  A4D8               	btfss	status,2,c
 15230  003C38  0012               	return	
 15231                           
 15232                           ; BSR set to: 0
 15233                           ; Switch size 1, requested type "space"
 15234                           ; Number of cases is 2, Range of values is 1 to 3
 15235                           ; switch strategies available:
 15236                           ; Name         Instructions Cycles
 15237                           ; simple_byte            7     4 (average)
 15238                           ;	Chosen strategy is simple_byte
 15239  003C3A  0100               	movlb	0	; () banked
 15240  003C3C  5184               	movf	??_updateServoPosition& (0+255),w,b
 15241  003C3E  0A01               	xorlw	1	; case 1
 15242  003C40  B4D8               	btfsc	status,2,c
 15243  003C42  D7DD               	goto	l5575
 15244  003C44  0A02               	xorlw	2	; case 3
 15245  003C46  A4D8               	btfss	status,2,c
 15246  003C48  0012               	return	
 15247  003C4A  D7E3               	goto	l792
 15248  003C4C                     __end_of_updateServoPosition:
 15249                           	opt stack 0
 15250                           tblptru	equ	0xFF8
 15251                           tblptrh	equ	0xFF7
 15252                           tblptrl	equ	0xFF6
 15253                           tablat	equ	0xFF5
 15254                           prodh	equ	0xFF4
 15255                           prodl	equ	0xFF3
 15256                           intcon	equ	0xFF2
 15257                           intcon2	equ	0xFF1
 15258                           intcon3	equ	0xFF0
 15259                           indf0	equ	0xFEF
 15260                           postinc0	equ	0xFEE
 15261                           fsr0h	equ	0xFEA
 15262                           fsr0l	equ	0xFE9
 15263                           wreg	equ	0xFE8
 15264                           postdec1	equ	0xFE5
 15265                           fsr1l	equ	0xFE1
 15266                           indf2	equ	0xFDF
 15267                           postinc2	equ	0xFDE
 15268                           postdec2	equ	0xFDD
 15269                           fsr2h	equ	0xFDA
 15270                           fsr2l	equ	0xFD9
 15271                           status	equ	0xFD8
 15272                           
 15273 ;; *************** function _handler *****************
 15274 ;; Defined at:
 15275 ;;		line 16 in file "interruptHandler.c"
 15276 ;; Parameters:    Size  Location     Type
 15277 ;;		None
 15278 ;; Auto vars:     Size  Location     Type
 15279 ;;		None
 15280 ;; Return value:  Size  Location     Type
 15281 ;;                  1    wreg      void 
 15282 ;; Registers used:
 15283 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15284 ;; Tracked objects:
 15285 ;;		On entry : 0/0
 15286 ;;		On exit  : 0/0
 15287 ;;		Unchanged: 0/0
 15288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15291 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15292 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15293 ;;Total ram usage:       16 bytes
 15294 ;; Hardware stack levels used:    1
 15295 ;; Hardware stack levels required when called:    6
 15296 ;; This function calls:
 15297 ;;		_printSortTimer
 15298 ;;		_updateMenu
 15299 ;; This function is called by:
 15300 ;;		Interrupt level 2
 15301 ;; This function uses a non-reentrant model
 15302 ;;
 15303                           
 15304                           	psect	intcode
 15305  000008                     __pintcode:
 15306                           	opt stack 0
 15307  000008                     _handler:
 15308                           	opt stack 18
 15309                           
 15310                           ;incstack = 0
 15311  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15312  00000A  ED60  F015         	call	int_func,f	;refresh shadow registers
 15313                           tblptru	equ	0xFF8
 15314                           tblptrh	equ	0xFF7
 15315                           tblptrl	equ	0xFF6
 15316                           tablat	equ	0xFF5
 15317                           prodh	equ	0xFF4
 15318                           prodl	equ	0xFF3
 15319                           intcon	equ	0xFF2
 15320                           intcon2	equ	0xFF1
 15321                           intcon3	equ	0xFF0
 15322                           indf0	equ	0xFEF
 15323                           postinc0	equ	0xFEE
 15324                           fsr0h	equ	0xFEA
 15325                           fsr0l	equ	0xFE9
 15326                           wreg	equ	0xFE8
 15327                           postdec1	equ	0xFE5
 15328                           fsr1l	equ	0xFE1
 15329                           indf2	equ	0xFDF
 15330                           postinc2	equ	0xFDE
 15331                           postdec2	equ	0xFDD
 15332                           fsr2h	equ	0xFDA
 15333                           fsr2l	equ	0xFD9
 15334                           status	equ	0xFD8
 15335                           
 15336                           	psect	intcode_body
 15337  002AC0                     __pintcode_body:
 15338                           	opt stack 18
 15339  002AC0                     int_func:
 15340                           	opt stack 18
 15341  002AC0  0006               	pop		; remove dummy address from shadow register refresh
 15342  002AC2  CFFA F04D          	movff	pclath,??_handler+2
 15343  002AC6  CFFB F04E          	movff	pclatu,??_handler+3
 15344  002ACA  CFE9 F04F          	movff	fsr0l,??_handler+4
 15345  002ACE  CFEA F050          	movff	fsr0h,??_handler+5
 15346  002AD2  CFE1 F051          	movff	fsr1l,??_handler+6
 15347  002AD6  CFE2 F052          	movff	fsr1h,??_handler+7
 15348  002ADA  CFD9 F053          	movff	fsr2l,??_handler+8
 15349  002ADE  CFDA F054          	movff	fsr2h,??_handler+9
 15350  002AE2  CFF3 F055          	movff	prodl,??_handler+10
 15351  002AE6  CFF4 F056          	movff	prodh,??_handler+11
 15352  002AEA  CFF6 F057          	movff	tblptrl,??_handler+12
 15353  002AEE  CFF7 F058          	movff	tblptrh,??_handler+13
 15354  002AF2  CFF8 F059          	movff	tblptru,??_handler+14
 15355  002AF6  CFF5 F05A          	movff	tablat,??_handler+15
 15356                           
 15357                           ;interruptHandler.c: 18: if(INT1IF){
 15358  002AFA  A0F0               	btfss	intcon3,0,c	;volatile
 15359  002AFC  D020               	goto	i2l8083
 15360                           
 15361                           ;interruptHandler.c: 19: INT1IF = 0;
 15362  002AFE  90F0               	bcf	intcon3,0,c	;volatile
 15363                           
 15364                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 15365  002B00  0100               	movlb	0	; () banked
 15366  002B02  51FC               	movf	_machine_state& (0+255),w,b
 15367  002B04  A4D8               	btfss	status,2,c
 15368  002B06  D01B               	goto	i2l8083
 15369                           
 15370                           ; BSR set to: 0
 15371                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 15372  002B08  3881               	swapf	3969,w,c	;volatile
 15373  002B0A  0B0F               	andlw	15
 15374  002B0C  0B0F               	andlw	15
 15375  002B0E  6E4B               	movwf	??_handler& (0+255),c
 15376  002B10  6A4C               	clrf	(??_handler+1)& (0+255),c
 15377  002B12  0E21               	movlw	low _keys
 15378  002B14  244B               	addwf	??_handler,w,c
 15379  002B16  6EF6               	movwf	tblptrl,c
 15380  002B18  0EFB               	movlw	high _keys
 15381  002B1A  204C               	addwfc	??_handler+1,w,c
 15382  002B1C  6EF7               	movwf	tblptrh,c
 15383  002B1E                     	if	1	;There are 3 active tblptr bytes
 15384  002B1E  6AF8               	clrf	tblptru,c
 15385  002B20  0E00               	movlw	low (__mediumconst shr (0+16))
 15386  002B22  22F8               	addwfc	tblptru,f,c
 15387  002B24                     	endif
 15388  002B24  0008               	tblrd		*
 15389  002B26  CFF5 F07D          	movff	tablat,_input	;volatile
 15390                           
 15391                           ; BSR set to: 0
 15392                           ;interruptHandler.c: 23: if(input == '*'){
 15393  002B2A  0E2A               	movlw	42
 15394  002B2C  187D               	xorwf	_input,w,c	;volatile
 15395  002B2E  A4D8               	btfss	status,2,c
 15396  002B30  D004               	goto	i2l8081
 15397                           
 15398                           ; BSR set to: 0
 15399                           ;interruptHandler.c: 24: machine_state = Testing_state;
 15400  002B32  0E03               	movlw	3
 15401  002B34  0100               	movlb	0	; () banked
 15402  002B36  6FFC               	movwf	_machine_state& (0+255),b
 15403                           
 15404                           ;interruptHandler.c: 25: }
 15405  002B38  D002               	goto	i2l8083
 15406  002B3A                     i2l8081:
 15407                           
 15408                           ; BSR set to: 0
 15409                           ;interruptHandler.c: 26: else{
 15410                           ;interruptHandler.c: 27: updateMenu();
 15411  002B3A  ECF9  F010         	call	_updateMenu	;wreg free
 15412  002B3E                     i2l8083:
 15413                           
 15414                           ;interruptHandler.c: 28: }
 15415                           ;interruptHandler.c: 29: }
 15416                           ;interruptHandler.c: 30: }
 15417                           ;interruptHandler.c: 33: if(TMR0IF){
 15418  002B3E  A4F2               	btfss	intcon,2,c	;volatile
 15419  002B40  D00C               	goto	i2l8097
 15420                           
 15421                           ;interruptHandler.c: 34: TMR0IF = 0;
 15422  002B42  94F2               	bcf	intcon,2,c	;volatile
 15423                           
 15424                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 15425  002B44  0100               	movlb	0	; () banked
 15426  002B46  05FC               	decf	_machine_state& (0+255),w,b
 15427  002B48  A4D8               	btfss	status,2,c
 15428  002B4A  D007               	goto	i2l8097
 15429                           
 15430                           ; BSR set to: 0
 15431                           ;interruptHandler.c: 36: printSortTimer();
 15432  002B4C  EC74  F013         	call	_printSortTimer	;wreg free
 15433                           
 15434                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 15435  002B50  0E85               	movlw	133
 15436  002B52  6ED7               	movwf	4055,c	;volatile
 15437                           
 15438                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 15439  002B54  0EEE               	movlw	238
 15440  002B56  6ED6               	movwf	4054,c	;volatile
 15441                           
 15442                           ;interruptHandler.c: 40: TMR0ON = 1;
 15443  002B58  8ED5               	bsf	4053,7,c	;volatile
 15444  002B5A                     i2l8097:
 15445                           
 15446                           ;interruptHandler.c: 41: }
 15447                           ;interruptHandler.c: 42: }
 15448                           ;interruptHandler.c: 45: if(TMR1IF){
 15449  002B5A  A09E               	btfss	3998,0,c	;volatile
 15450  002B5C  D024               	goto	i2l8121
 15451                           
 15452                           ;interruptHandler.c: 46: TMR1IF = 0;
 15453  002B5E  909E               	bcf	3998,0,c	;volatile
 15454                           
 15455                           ;interruptHandler.c: 47: TMR1ON = 0;
 15456  002B60  90CD               	bcf	4045,0,c	;volatile
 15457                           
 15458                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 15459  002B62  0100               	movlb	0	; () banked
 15460  002B64  05FC               	decf	_machine_state& (0+255),w,b
 15461  002B66  A4D8               	btfss	status,2,c
 15462  002B68  D01E               	goto	i2l8121
 15463                           
 15464                           ; BSR set to: 0
 15465                           ;interruptHandler.c: 49: if(was_low_1){
 15466  002B6A  5079               	movf	_was_low_1,w,c	;volatile
 15467  002B6C  107A               	iorwf	_was_low_1+1,w,c	;volatile
 15468  002B6E  B4D8               	btfsc	status,2,c
 15469  002B70  D00A               	goto	i2l857
 15470                           
 15471                           ; BSR set to: 0
 15472                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 15473  002B72  828B               	bsf	3979,1,c	;volatile
 15474                           
 15475                           ; BSR set to: 0
 15476                           ;interruptHandler.c: 51: was_low_1 = 0;
 15477  002B74  0E00               	movlw	0
 15478  002B76  6E7A               	movwf	_was_low_1+1,c	;volatile
 15479  002B78  0E00               	movlw	0
 15480  002B7A  6E79               	movwf	_was_low_1,c	;volatile
 15481                           
 15482                           ; BSR set to: 0
 15483                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 15484  002B7C  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 15485                           
 15486                           ; BSR set to: 0
 15487                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 15488  002B80  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 15489                           
 15490                           ;interruptHandler.c: 54: }
 15491  002B84  D00F               	goto	i2l8119
 15492  002B86                     i2l857:
 15493                           
 15494                           ; BSR set to: 0
 15495                           ;interruptHandler.c: 55: else{
 15496                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 15497  002B86  928B               	bcf	3979,1,c	;volatile
 15498                           
 15499                           ; BSR set to: 0
 15500                           ;interruptHandler.c: 57: was_low_1 = 1;
 15501  002B88  0E00               	movlw	0
 15502  002B8A  6E7A               	movwf	_was_low_1+1,c	;volatile
 15503  002B8C  0E01               	movlw	1
 15504  002B8E  6E79               	movwf	_was_low_1,c	;volatile
 15505                           
 15506                           ; BSR set to: 0
 15507                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 15508  002B90  0101               	movlb	1	; () banked
 15509  002B92  511C               	movf	_servoTimes& (0+255),w,b
 15510  002B94  0800               	sublw	0
 15511  002B96  0F20               	addlw	32
 15512  002B98  6ECF               	movwf	4047,c	;volatile
 15513                           
 15514                           ; BSR set to: 1
 15515                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 15516  002B9A  0101               	movlb	1	; () banked
 15517  002B9C  511E               	movf	(_servoTimes+2)& (0+255),w,b
 15518  002B9E  0800               	sublw	0
 15519  002BA0  0F20               	addlw	32
 15520  002BA2  6ECE               	movwf	4046,c	;volatile
 15521  002BA4                     i2l8119:
 15522                           
 15523                           ;interruptHandler.c: 60: }
 15524                           ;interruptHandler.c: 61: TMR1ON = 1;
 15525  002BA4  80CD               	bsf	4045,0,c	;volatile
 15526  002BA6                     i2l8121:
 15527                           
 15528                           ;interruptHandler.c: 62: }
 15529                           ;interruptHandler.c: 63: }
 15530                           ;interruptHandler.c: 65: if(TMR3IF){
 15531  002BA6  A2A1               	btfss	4001,1,c	;volatile
 15532  002BA8  D024               	goto	i2l863
 15533                           
 15534                           ;interruptHandler.c: 66: TMR3IF = 0;
 15535  002BAA  92A1               	bcf	4001,1,c	;volatile
 15536                           
 15537                           ;interruptHandler.c: 67: TMR3ON = 0;
 15538  002BAC  90B1               	bcf	4017,0,c	;volatile
 15539                           
 15540                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 15541  002BAE  0100               	movlb	0	; () banked
 15542  002BB0  05FC               	decf	_machine_state& (0+255),w,b
 15543  002BB2  A4D8               	btfss	status,2,c
 15544  002BB4  D01E               	goto	i2l863
 15545                           
 15546                           ; BSR set to: 0
 15547                           ;interruptHandler.c: 69: if(was_low_3){
 15548  002BB6  507B               	movf	_was_low_3,w,c	;volatile
 15549  002BB8  107C               	iorwf	_was_low_3+1,w,c	;volatile
 15550  002BBA  B4D8               	btfsc	status,2,c
 15551  002BBC  D00A               	goto	i2l861
 15552                           
 15553                           ; BSR set to: 0
 15554                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 15555  002BBE  848B               	bsf	3979,2,c	;volatile
 15556                           
 15557                           ; BSR set to: 0
 15558                           ;interruptHandler.c: 71: was_low_3 = 0;
 15559  002BC0  0E00               	movlw	0
 15560  002BC2  6E7C               	movwf	_was_low_3+1,c	;volatile
 15561  002BC4  0E00               	movlw	0
 15562  002BC6  6E7B               	movwf	_was_low_3,c	;volatile
 15563                           
 15564                           ; BSR set to: 0
 15565                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 15566  002BC8  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 15567                           
 15568                           ; BSR set to: 0
 15569                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 15570  002BCC  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 15571                           
 15572                           ;interruptHandler.c: 74: }
 15573  002BD0  D00F               	goto	i2l8143
 15574  002BD2                     i2l861:
 15575                           
 15576                           ; BSR set to: 0
 15577                           ;interruptHandler.c: 75: else{
 15578                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 15579  002BD2  948B               	bcf	3979,2,c	;volatile
 15580                           
 15581                           ; BSR set to: 0
 15582                           ;interruptHandler.c: 77: was_low_3 = 1;
 15583  002BD4  0E00               	movlw	0
 15584  002BD6  6E7C               	movwf	_was_low_3+1,c	;volatile
 15585  002BD8  0E01               	movlw	1
 15586  002BDA  6E7B               	movwf	_was_low_3,c	;volatile
 15587                           
 15588                           ; BSR set to: 0
 15589                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 15590  002BDC  0101               	movlb	1	; () banked
 15591  002BDE  5120               	movf	(_servoTimes+4)& (0+255),w,b
 15592  002BE0  0800               	sublw	0
 15593  002BE2  0F20               	addlw	32
 15594  002BE4  6EB3               	movwf	4019,c	;volatile
 15595                           
 15596                           ; BSR set to: 1
 15597                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 15598  002BE6  0101               	movlb	1	; () banked
 15599  002BE8  5122               	movf	(_servoTimes+6)& (0+255),w,b
 15600  002BEA  0800               	sublw	0
 15601  002BEC  0F20               	addlw	32
 15602  002BEE  6EB2               	movwf	4018,c	;volatile
 15603  002BF0                     i2l8143:
 15604                           
 15605                           ;interruptHandler.c: 80: }
 15606                           ;interruptHandler.c: 81: TMR3ON = 1;
 15607  002BF0  80B1               	bsf	4017,0,c	;volatile
 15608  002BF2                     i2l863:
 15609  002BF2  C05A  FFF5         	movff	??_handler+15,tablat
 15610  002BF6  C059  FFF8         	movff	??_handler+14,tblptru
 15611  002BFA  C058  FFF7         	movff	??_handler+13,tblptrh
 15612  002BFE  C057  FFF6         	movff	??_handler+12,tblptrl
 15613  002C02  C056  FFF4         	movff	??_handler+11,prodh
 15614  002C06  C055  FFF3         	movff	??_handler+10,prodl
 15615  002C0A  C054  FFDA         	movff	??_handler+9,fsr2h
 15616  002C0E  C053  FFD9         	movff	??_handler+8,fsr2l
 15617  002C12  C052  FFE2         	movff	??_handler+7,fsr1h
 15618  002C16  C051  FFE1         	movff	??_handler+6,fsr1l
 15619  002C1A  C050  FFEA         	movff	??_handler+5,fsr0h
 15620  002C1E  C04F  FFE9         	movff	??_handler+4,fsr0l
 15621  002C22  C04E  FFFB         	movff	??_handler+3,pclatu
 15622  002C26  C04D  FFFA         	movff	??_handler+2,pclath
 15623  002C2A  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15624  002C2C  0011               	retfie		f
 15625  002C2E                     __end_of_handler:
 15626                           	opt stack 0
 15627                           pclatu	equ	0xFFB
 15628                           pclath	equ	0xFFA
 15629                           tblptru	equ	0xFF8
 15630                           tblptrh	equ	0xFF7
 15631                           tblptrl	equ	0xFF6
 15632                           tablat	equ	0xFF5
 15633                           prodh	equ	0xFF4
 15634                           prodl	equ	0xFF3
 15635                           intcon	equ	0xFF2
 15636                           intcon2	equ	0xFF1
 15637                           intcon3	equ	0xFF0
 15638                           indf0	equ	0xFEF
 15639                           postinc0	equ	0xFEE
 15640                           fsr0h	equ	0xFEA
 15641                           fsr0l	equ	0xFE9
 15642                           wreg	equ	0xFE8
 15643                           postdec1	equ	0xFE5
 15644                           fsr1h	equ	0xFE2
 15645                           fsr1l	equ	0xFE1
 15646                           indf2	equ	0xFDF
 15647                           postinc2	equ	0xFDE
 15648                           postdec2	equ	0xFDD
 15649                           fsr2h	equ	0xFDA
 15650                           fsr2l	equ	0xFD9
 15651                           status	equ	0xFD8
 15652                           
 15653 ;; *************** function _updateMenu *****************
 15654 ;; Defined at:
 15655 ;;		line 213 in file "UI.c"
 15656 ;; Parameters:    Size  Location     Type
 15657 ;;		None
 15658 ;; Auto vars:     Size  Location     Type
 15659 ;;		None
 15660 ;; Return value:  Size  Location     Type
 15661 ;;                  1    wreg      void 
 15662 ;; Registers used:
 15663 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15664 ;; Tracked objects:
 15665 ;;		On entry : 0/0
 15666 ;;		On exit  : 0/0
 15667 ;;		Unchanged: 0/0
 15668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15671 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15672 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15673 ;;Total ram usage:        2 bytes
 15674 ;; Hardware stack levels used:    1
 15675 ;; Hardware stack levels required when called:    5
 15676 ;; This function calls:
 15677 ;;		_change_state_to_logs_11
 15678 ;;		_change_state_to_logs_12
 15679 ;;		_change_state_to_logs_22
 15680 ;;		_change_state_to_logs_23
 15681 ;;		_change_state_to_logs_33
 15682 ;;		_change_state_to_logs_34
 15683 ;;		_change_state_to_menu_11
 15684 ;;		_change_state_to_menu_23
 15685 ;;		_dispLogs
 15686 ;;		_inputHandler
 15687 ;;		i2_change_state_to_menu_12
 15688 ;;		i2_change_state_to_menu_22
 15689 ;;		i2_change_state_to_menu_start
 15690 ;; This function is called by:
 15691 ;;		_handler
 15692 ;; This function uses a non-reentrant model
 15693 ;;
 15694                           
 15695                           	psect	text58
 15696  0021F2                     __ptext58:
 15697                           	opt stack 0
 15698  0021F2                     _updateMenu:
 15699                           	opt stack 18
 15700                           
 15701                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 15702                           
 15703                           ;incstack = 0
 15704  0021F2  0E00               	movlw	0
 15705  0021F4  6E78               	movwf	_up+1,c
 15706  0021F6  0E00               	movlw	0
 15707  0021F8  6E77               	movwf	_up,c
 15708  0021FA  0E00               	movlw	0
 15709  0021FC  6E68               	movwf	_down+1,c
 15710  0021FE  0E00               	movlw	0
 15711  002200  6E67               	movwf	_down,c
 15712  002202  0E00               	movlw	0
 15713  002204  6E6A               	movwf	_enter+1,c
 15714  002206  0E00               	movlw	0
 15715  002208  6E69               	movwf	_enter,c
 15716  00220A  0E00               	movlw	0
 15717  00220C  6E5C               	movwf	_back+1,c
 15718  00220E  0E00               	movlw	0
 15719  002210  6E5B               	movwf	_back,c
 15720                           
 15721                           ;UI.c: 215: (INTCONbits.GIE = 0);
 15722  002212  9EF2               	bcf	intcon,7,c	;volatile
 15723                           
 15724                           ;UI.c: 217: if (inputHandler()
 15725                           ;UI.c: 220: ){
 15726  002214  EC6D  F014         	call	_inputHandler	;wreg free
 15727  002218  502A               	movf	?_inputHandler,w,c
 15728  00221A  102B               	iorwf	?_inputHandler+1,w,c
 15729  00221C  A4D8               	btfss	status,2,c
 15730  00221E  D112               	goto	i2l7819
 15731  002220  D146               	goto	i2l257
 15732  002222                     i2l7671:
 15733                           
 15734                           ;UI.c: 224: change_state_to_menu_11();
 15735  002222  ECCB  F021         	call	_change_state_to_menu_11	;wreg free
 15736                           
 15737                           ;UI.c: 225: break;
 15738  002226  D143               	goto	i2l257
 15739  002228                     i2l7673:
 15740                           
 15741                           ;UI.c: 228: if(up){
 15742  002228  5077               	movf	_up,w,c
 15743  00222A  1078               	iorwf	_up+1,w,c
 15744  00222C  B4D8               	btfsc	status,2,c
 15745  00222E  D003               	goto	i2l7677
 15746                           
 15747                           ;UI.c: 229: change_state_to_menu_23();
 15748  002230  ECB3  F021         	call	_change_state_to_menu_23	;wreg free
 15749                           
 15750                           ;UI.c: 230: }
 15751  002234  D13C               	goto	i2l257
 15752  002236                     i2l7677:
 15753                           
 15754                           ;UI.c: 231: else if(down){
 15755  002236  5067               	movf	_down,w,c
 15756  002238  1068               	iorwf	_down+1,w,c
 15757  00223A  B4D8               	btfsc	status,2,c
 15758  00223C  D003               	goto	i2l7681
 15759                           
 15760                           ;UI.c: 232: change_state_to_menu_12();
 15761  00223E  EC9B  F021         	call	i2_change_state_to_menu_12	;wreg free
 15762                           
 15763                           ;UI.c: 233: }
 15764  002242  D135               	goto	i2l257
 15765  002244                     i2l7681:
 15766                           
 15767                           ;UI.c: 234: else if(enter){
 15768  002244  5069               	movf	_enter,w,c
 15769  002246  106A               	iorwf	_enter+1,w,c
 15770  002248  B4D8               	btfsc	status,2,c
 15771  00224A  D131               	goto	i2l257
 15772                           
 15773                           ;UI.c: 235: change_state_to_menu_start();
 15774  00224C  ECE1  F022         	call	i2_change_state_to_menu_start	;wreg free
 15775                           
 15776                           ;UI.c: 236: }
 15777                           ;UI.c: 237: break;
 15778  002250  D12E               	goto	i2l257
 15779  002252                     i2l7685:
 15780                           
 15781                           ;UI.c: 240: if(up){
 15782  002252  5077               	movf	_up,w,c
 15783  002254  1078               	iorwf	_up+1,w,c
 15784  002256  B4D8               	btfsc	status,2,c
 15785  002258  D003               	goto	i2l7689
 15786                           
 15787                           ;UI.c: 241: change_state_to_menu_11();
 15788  00225A  ECCB  F021         	call	_change_state_to_menu_11	;wreg free
 15789                           
 15790                           ;UI.c: 242: }
 15791  00225E  D127               	goto	i2l257
 15792  002260                     i2l7689:
 15793                           
 15794                           ;UI.c: 243: else if(down){
 15795  002260  5067               	movf	_down,w,c
 15796  002262  1068               	iorwf	_down+1,w,c
 15797  002264  B4D8               	btfsc	status,2,c
 15798  002266  D011               	goto	i2l7705
 15799                           
 15800                           ;UI.c: 244: change_state_to_menu_23();
 15801  002268  ECB3  F021         	call	_change_state_to_menu_23	;wreg free
 15802                           
 15803                           ;UI.c: 245: }
 15804  00226C  D120               	goto	i2l257
 15805  00226E                     i2l7697:
 15806                           
 15807                           ;UI.c: 252: if(up){
 15808  00226E  5077               	movf	_up,w,c
 15809  002270  1078               	iorwf	_up+1,w,c
 15810  002272  B4D8               	btfsc	status,2,c
 15811  002274  D003               	goto	i2l7701
 15812                           
 15813                           ;UI.c: 253: change_state_to_menu_11();
 15814  002276  ECCB  F021         	call	_change_state_to_menu_11	;wreg free
 15815                           
 15816                           ;UI.c: 254: }
 15817  00227A  D119               	goto	i2l257
 15818  00227C                     i2l7701:
 15819                           
 15820                           ;UI.c: 255: else if(down){
 15821  00227C  5067               	movf	_down,w,c
 15822  00227E  1068               	iorwf	_down+1,w,c
 15823  002280  B4D8               	btfsc	status,2,c
 15824  002282  D003               	goto	i2l7705
 15825                           
 15826                           ;UI.c: 256: change_state_to_menu_23();
 15827  002284  ECB3  F021         	call	_change_state_to_menu_23	;wreg free
 15828                           
 15829                           ;UI.c: 257: }
 15830  002288  D112               	goto	i2l257
 15831  00228A                     i2l7705:
 15832                           
 15833                           ;UI.c: 258: else if(enter){
 15834  00228A  5069               	movf	_enter,w,c
 15835  00228C  106A               	iorwf	_enter+1,w,c
 15836  00228E  B4D8               	btfsc	status,2,c
 15837  002290  D10E               	goto	i2l257
 15838                           
 15839                           ;UI.c: 259: machine_state = Sorting_state;
 15840  002292  0E01               	movlw	1
 15841  002294  0100               	movlb	0	; () banked
 15842  002296  6FFC               	movwf	_machine_state& (0+255),b
 15843                           
 15844                           ; BSR set to: 0
 15845                           ;UI.c: 260: }
 15846                           ;UI.c: 261: break;
 15847                           
 15848                           ; BSR set to: 0
 15849                           
 15850                           ; BSR set to: 0
 15851  002298  D10A               	goto	i2l257
 15852  00229A                     i2l7709:
 15853                           
 15854                           ;UI.c: 264: if(up){
 15855  00229A  5077               	movf	_up,w,c
 15856  00229C  1078               	iorwf	_up+1,w,c
 15857  00229E  B4D8               	btfsc	status,2,c
 15858  0022A0  D003               	goto	i2l7713
 15859                           
 15860                           ;UI.c: 265: change_state_to_menu_22();
 15861  0022A2  EC83  F021         	call	i2_change_state_to_menu_22	;wreg free
 15862                           
 15863                           ;UI.c: 266: }
 15864  0022A6  D103               	goto	i2l257
 15865  0022A8                     i2l7713:
 15866                           
 15867                           ;UI.c: 267: else if(down){
 15868  0022A8  5067               	movf	_down,w,c
 15869  0022AA  1068               	iorwf	_down+1,w,c
 15870  0022AC  B4D8               	btfsc	status,2,c
 15871  0022AE  D003               	goto	i2l7717
 15872                           
 15873                           ;UI.c: 268: change_state_to_menu_11();
 15874  0022B0  ECCB  F021         	call	_change_state_to_menu_11	;wreg free
 15875                           
 15876                           ;UI.c: 269: }
 15877  0022B4  D0FC               	goto	i2l257
 15878  0022B6                     i2l7717:
 15879                           
 15880                           ;UI.c: 270: else if(enter){
 15881  0022B6  5069               	movf	_enter,w,c
 15882  0022B8  106A               	iorwf	_enter+1,w,c
 15883  0022BA  B4D8               	btfsc	status,2,c
 15884  0022BC  D0F8               	goto	i2l257
 15885                           
 15886                           ;UI.c: 271: change_state_to_logs_11();
 15887  0022BE  EC43  F022         	call	_change_state_to_logs_11	;wreg free
 15888                           
 15889                           ;UI.c: 272: }
 15890                           ;UI.c: 273: break;
 15891  0022C2  D0F5               	goto	i2l257
 15892  0022C4                     i2l7721:
 15893                           
 15894                           ;UI.c: 276: if(up){
 15895  0022C4  5077               	movf	_up,w,c
 15896  0022C6  1078               	iorwf	_up+1,w,c
 15897  0022C8  B4D8               	btfsc	status,2,c
 15898  0022CA  D003               	goto	i2l7725
 15899                           
 15900                           ;UI.c: 277: change_state_to_logs_34();
 15901  0022CC  ECE3  F021         	call	_change_state_to_logs_34	;wreg free
 15902                           
 15903                           ;UI.c: 278: }
 15904  0022D0  D0EE               	goto	i2l257
 15905  0022D2                     i2l7725:
 15906                           
 15907                           ;UI.c: 279: else if(down){
 15908  0022D2  5067               	movf	_down,w,c
 15909  0022D4  1068               	iorwf	_down+1,w,c
 15910  0022D6  B4D8               	btfsc	status,2,c
 15911  0022D8  D003               	goto	i2l7729
 15912                           
 15913                           ;UI.c: 280: change_state_to_logs_12();
 15914  0022DA  EC2B  F022         	call	_change_state_to_logs_12	;wreg free
 15915                           
 15916                           ;UI.c: 281: }
 15917  0022DE  D0E7               	goto	i2l257
 15918  0022E0                     i2l7729:
 15919                           
 15920                           ;UI.c: 282: else if(enter){
 15921  0022E0  5069               	movf	_enter,w,c
 15922  0022E2  106A               	iorwf	_enter+1,w,c
 15923  0022E4  B4D8               	btfsc	status,2,c
 15924  0022E6  D007               	goto	i2l7733
 15925                           
 15926                           ;UI.c: 283: dispLogs(1);
 15927  0022E8  0E00               	movlw	0
 15928  0022EA  6E13               	movwf	dispLogs@myLog+1,c
 15929  0022EC  0E01               	movlw	1
 15930  0022EE  6E12               	movwf	dispLogs@myLog,c
 15931  0022F0  EC1B  F023         	call	_dispLogs	;wreg free
 15932                           
 15933                           ;UI.c: 284: }
 15934  0022F4  D0DC               	goto	i2l257
 15935  0022F6                     i2l7733:
 15936                           
 15937                           ;UI.c: 285: else if(back){
 15938  0022F6  505B               	movf	_back,w,c
 15939  0022F8  105C               	iorwf	_back+1,w,c
 15940  0022FA  B4D8               	btfsc	status,2,c
 15941  0022FC  D0D8               	goto	i2l257
 15942                           
 15943                           ;UI.c: 286: change_state_to_menu_23();
 15944  0022FE  ECB3  F021         	call	_change_state_to_menu_23	;wreg free
 15945                           
 15946                           ;UI.c: 287: }
 15947                           ;UI.c: 288: break;
 15948  002302  D0D5               	goto	i2l257
 15949  002304                     i2l7737:
 15950                           
 15951                           ;UI.c: 291: if(up){
 15952  002304  5077               	movf	_up,w,c
 15953  002306  1078               	iorwf	_up+1,w,c
 15954  002308  B4D8               	btfsc	status,2,c
 15955  00230A  D003               	goto	i2l7741
 15956                           
 15957                           ;UI.c: 292: change_state_to_logs_11();
 15958  00230C  EC43  F022         	call	_change_state_to_logs_11	;wreg free
 15959                           
 15960                           ;UI.c: 293: }
 15961  002310  D0CE               	goto	i2l257
 15962  002312                     i2l7741:
 15963                           
 15964                           ;UI.c: 294: else if(down){
 15965  002312  5067               	movf	_down,w,c
 15966  002314  1068               	iorwf	_down+1,w,c
 15967  002316  B4D8               	btfsc	status,2,c
 15968  002318  D003               	goto	i2l7745
 15969                           
 15970                           ;UI.c: 295: change_state_to_logs_23();
 15971  00231A  EC89  F022         	call	_change_state_to_logs_23	;wreg free
 15972                           
 15973                           ;UI.c: 296: }
 15974  00231E  D0C7               	goto	i2l257
 15975  002320                     i2l7745:
 15976                           
 15977                           ;UI.c: 297: else if(enter){
 15978  002320  5069               	movf	_enter,w,c
 15979  002322  106A               	iorwf	_enter+1,w,c
 15980  002324  B4D8               	btfsc	status,2,c
 15981  002326  D007               	goto	i2l7749
 15982                           
 15983                           ;UI.c: 298: dispLogs(2);
 15984  002328  0E00               	movlw	0
 15985  00232A  6E13               	movwf	dispLogs@myLog+1,c
 15986  00232C  0E02               	movlw	2
 15987  00232E  6E12               	movwf	dispLogs@myLog,c
 15988  002330  EC1B  F023         	call	_dispLogs	;wreg free
 15989                           
 15990                           ;UI.c: 299: }
 15991  002334  D0BC               	goto	i2l257
 15992  002336                     i2l7749:
 15993                           
 15994                           ;UI.c: 300: else if(back){
 15995  002336  505B               	movf	_back,w,c
 15996  002338  105C               	iorwf	_back+1,w,c
 15997  00233A  B4D8               	btfsc	status,2,c
 15998  00233C  D0B8               	goto	i2l257
 15999                           
 16000                           ;UI.c: 301: change_state_to_menu_23();
 16001  00233E  ECB3  F021         	call	_change_state_to_menu_23	;wreg free
 16002                           
 16003                           ;UI.c: 302: }
 16004                           ;UI.c: 303: break;
 16005  002342  D0B5               	goto	i2l257
 16006  002344                     i2l7753:
 16007                           
 16008                           ;UI.c: 306: if(up){
 16009  002344  5077               	movf	_up,w,c
 16010  002346  1078               	iorwf	_up+1,w,c
 16011  002348  B4D8               	btfsc	status,2,c
 16012  00234A  D003               	goto	i2l7757
 16013                           
 16014                           ;UI.c: 307: change_state_to_logs_11();
 16015  00234C  EC43  F022         	call	_change_state_to_logs_11	;wreg free
 16016                           
 16017                           ;UI.c: 308: }
 16018  002350  D0AE               	goto	i2l257
 16019  002352                     i2l7757:
 16020                           
 16021                           ;UI.c: 309: else if(down){
 16022  002352  5067               	movf	_down,w,c
 16023  002354  1068               	iorwf	_down+1,w,c
 16024  002356  B4D8               	btfsc	status,2,c
 16025  002358  D003               	goto	i2l7761
 16026                           
 16027                           ;UI.c: 310: change_state_to_logs_23();
 16028  00235A  EC89  F022         	call	_change_state_to_logs_23	;wreg free
 16029                           
 16030                           ;UI.c: 311: }
 16031  00235E  D0A7               	goto	i2l257
 16032  002360                     i2l7761:
 16033                           
 16034                           ;UI.c: 312: else if(enter){
 16035  002360  5069               	movf	_enter,w,c
 16036  002362  106A               	iorwf	_enter+1,w,c
 16037  002364  B4D8               	btfsc	status,2,c
 16038  002366  D007               	goto	i2l7765
 16039                           
 16040                           ;UI.c: 313: dispLogs(2);
 16041  002368  0E00               	movlw	0
 16042  00236A  6E13               	movwf	dispLogs@myLog+1,c
 16043  00236C  0E02               	movlw	2
 16044  00236E  6E12               	movwf	dispLogs@myLog,c
 16045  002370  EC1B  F023         	call	_dispLogs	;wreg free
 16046                           
 16047                           ;UI.c: 314: }
 16048  002374  D09C               	goto	i2l257
 16049  002376                     i2l7765:
 16050                           
 16051                           ;UI.c: 315: else if(back){
 16052  002376  505B               	movf	_back,w,c
 16053  002378  105C               	iorwf	_back+1,w,c
 16054  00237A  B4D8               	btfsc	status,2,c
 16055  00237C  D098               	goto	i2l257
 16056                           
 16057                           ;UI.c: 316: change_state_to_menu_23();
 16058  00237E  ECB3  F021         	call	_change_state_to_menu_23	;wreg free
 16059                           
 16060                           ;UI.c: 317: }
 16061                           ;UI.c: 318: break;
 16062  002382  D095               	goto	i2l257
 16063  002384                     i2l7769:
 16064                           
 16065                           ;UI.c: 321: if(up){
 16066  002384  5077               	movf	_up,w,c
 16067  002386  1078               	iorwf	_up+1,w,c
 16068  002388  B4D8               	btfsc	status,2,c
 16069  00238A  D003               	goto	i2l7773
 16070                           
 16071                           ;UI.c: 322: change_state_to_logs_22();
 16072  00238C  EC13  F022         	call	_change_state_to_logs_22	;wreg free
 16073                           
 16074                           ;UI.c: 323: }
 16075  002390  D08E               	goto	i2l257
 16076  002392                     i2l7773:
 16077                           
 16078                           ;UI.c: 324: else if(down){
 16079  002392  5067               	movf	_down,w,c
 16080  002394  1068               	iorwf	_down+1,w,c
 16081  002396  B4D8               	btfsc	status,2,c
 16082  002398  D003               	goto	i2l7777
 16083                           
 16084                           ;UI.c: 325: change_state_to_logs_34();
 16085  00239A  ECE3  F021         	call	_change_state_to_logs_34	;wreg free
 16086                           
 16087                           ;UI.c: 326: }
 16088  00239E  D087               	goto	i2l257
 16089  0023A0                     i2l7777:
 16090                           
 16091                           ;UI.c: 327: else if(enter){
 16092  0023A0  5069               	movf	_enter,w,c
 16093  0023A2  106A               	iorwf	_enter+1,w,c
 16094  0023A4  B4D8               	btfsc	status,2,c
 16095  0023A6  D007               	goto	i2l7781
 16096                           
 16097                           ;UI.c: 328: dispLogs(3);
 16098  0023A8  0E00               	movlw	0
 16099  0023AA  6E13               	movwf	dispLogs@myLog+1,c
 16100  0023AC  0E03               	movlw	3
 16101  0023AE  6E12               	movwf	dispLogs@myLog,c
 16102  0023B0  EC1B  F023         	call	_dispLogs	;wreg free
 16103                           
 16104                           ;UI.c: 329: }
 16105  0023B4  D07C               	goto	i2l257
 16106  0023B6                     i2l7781:
 16107                           
 16108                           ;UI.c: 330: else if(back){
 16109  0023B6  505B               	movf	_back,w,c
 16110  0023B8  105C               	iorwf	_back+1,w,c
 16111  0023BA  B4D8               	btfsc	status,2,c
 16112  0023BC  D078               	goto	i2l257
 16113                           
 16114                           ;UI.c: 331: change_state_to_menu_23();
 16115  0023BE  ECB3  F021         	call	_change_state_to_menu_23	;wreg free
 16116                           
 16117                           ;UI.c: 332: }
 16118                           ;UI.c: 333: break;
 16119  0023C2  D075               	goto	i2l257
 16120  0023C4                     i2l7785:
 16121                           
 16122                           ;UI.c: 336: if(up){
 16123  0023C4  5077               	movf	_up,w,c
 16124  0023C6  1078               	iorwf	_up+1,w,c
 16125  0023C8  B4D8               	btfsc	status,2,c
 16126  0023CA  D003               	goto	i2l7789
 16127                           
 16128                           ;UI.c: 337: change_state_to_logs_22();
 16129  0023CC  EC13  F022         	call	_change_state_to_logs_22	;wreg free
 16130                           
 16131                           ;UI.c: 338: }
 16132  0023D0  D06E               	goto	i2l257
 16133  0023D2                     i2l7789:
 16134                           
 16135                           ;UI.c: 339: else if(down){
 16136  0023D2  5067               	movf	_down,w,c
 16137  0023D4  1068               	iorwf	_down+1,w,c
 16138  0023D6  B4D8               	btfsc	status,2,c
 16139  0023D8  D003               	goto	i2l7793
 16140                           
 16141                           ;UI.c: 340: change_state_to_logs_34();
 16142  0023DA  ECE3  F021         	call	_change_state_to_logs_34	;wreg free
 16143                           
 16144                           ;UI.c: 341: }
 16145  0023DE  D067               	goto	i2l257
 16146  0023E0                     i2l7793:
 16147                           
 16148                           ;UI.c: 342: else if(enter){
 16149  0023E0  5069               	movf	_enter,w,c
 16150  0023E2  106A               	iorwf	_enter+1,w,c
 16151  0023E4  B4D8               	btfsc	status,2,c
 16152  0023E6  D007               	goto	i2l7797
 16153                           
 16154                           ;UI.c: 343: dispLogs(3);
 16155  0023E8  0E00               	movlw	0
 16156  0023EA  6E13               	movwf	dispLogs@myLog+1,c
 16157  0023EC  0E03               	movlw	3
 16158  0023EE  6E12               	movwf	dispLogs@myLog,c
 16159  0023F0  EC1B  F023         	call	_dispLogs	;wreg free
 16160                           
 16161                           ;UI.c: 344: }
 16162  0023F4  D05C               	goto	i2l257
 16163  0023F6                     i2l7797:
 16164                           
 16165                           ;UI.c: 345: else if(back){
 16166  0023F6  505B               	movf	_back,w,c
 16167  0023F8  105C               	iorwf	_back+1,w,c
 16168  0023FA  B4D8               	btfsc	status,2,c
 16169  0023FC  D058               	goto	i2l257
 16170                           
 16171                           ;UI.c: 346: change_state_to_menu_23();
 16172  0023FE  ECB3  F021         	call	_change_state_to_menu_23	;wreg free
 16173                           
 16174                           ;UI.c: 347: }
 16175                           ;UI.c: 348: break;
 16176  002402  D055               	goto	i2l257
 16177  002404                     i2l7801:
 16178                           
 16179                           ;UI.c: 351: if(up){
 16180  002404  5077               	movf	_up,w,c
 16181  002406  1078               	iorwf	_up+1,w,c
 16182  002408  B4D8               	btfsc	status,2,c
 16183  00240A  D003               	goto	i2l7805
 16184                           
 16185                           ;UI.c: 352: change_state_to_logs_33();
 16186  00240C  ECFB  F021         	call	_change_state_to_logs_33	;wreg free
 16187                           
 16188                           ;UI.c: 353: }
 16189  002410  D04E               	goto	i2l257
 16190  002412                     i2l7805:
 16191                           
 16192                           ;UI.c: 354: else if(down){
 16193  002412  5067               	movf	_down,w,c
 16194  002414  1068               	iorwf	_down+1,w,c
 16195  002416  B4D8               	btfsc	status,2,c
 16196  002418  D003               	goto	i2l7809
 16197                           
 16198                           ;UI.c: 355: change_state_to_logs_11();
 16199  00241A  EC43  F022         	call	_change_state_to_logs_11	;wreg free
 16200                           
 16201                           ;UI.c: 356: }
 16202  00241E  D047               	goto	i2l257
 16203  002420                     i2l7809:
 16204                           
 16205                           ;UI.c: 357: else if(enter){
 16206  002420  5069               	movf	_enter,w,c
 16207  002422  106A               	iorwf	_enter+1,w,c
 16208  002424  B4D8               	btfsc	status,2,c
 16209  002426  D007               	goto	i2l7813
 16210                           
 16211                           ;UI.c: 358: dispLogs(4);
 16212  002428  0E00               	movlw	0
 16213  00242A  6E13               	movwf	dispLogs@myLog+1,c
 16214  00242C  0E04               	movlw	4
 16215  00242E  6E12               	movwf	dispLogs@myLog,c
 16216  002430  EC1B  F023         	call	_dispLogs	;wreg free
 16217                           
 16218                           ;UI.c: 359: }
 16219  002434  D03C               	goto	i2l257
 16220  002436                     i2l7813:
 16221                           
 16222                           ;UI.c: 360: else if(back){
 16223  002436  505B               	movf	_back,w,c
 16224  002438  105C               	iorwf	_back+1,w,c
 16225  00243A  B4D8               	btfsc	status,2,c
 16226  00243C  D038               	goto	i2l257
 16227                           
 16228                           ;UI.c: 361: change_state_to_menu_23();
 16229  00243E  ECB3  F021         	call	_change_state_to_menu_23	;wreg free
 16230                           
 16231                           ;UI.c: 367: }
 16232                           
 16233                           ;UI.c: 366: break;
 16234                           
 16235                           ;UI.c: 365: default:
 16236                           
 16237                           ;UI.c: 362: }
 16238                           ;UI.c: 363: break;
 16239  002442  D035               	goto	i2l257
 16240  002444                     i2l7819:
 16241  002444  C0E0  F043         	movff	_cur_state,??_updateMenu
 16242  002448  C0E1  F044         	movff	_cur_state+1,??_updateMenu+1
 16243                           
 16244                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 16245                           ; Switch size 1, requested type "space"
 16246                           ; Number of cases is 3, Range of values is 0 to 4
 16247                           ; switch strategies available:
 16248                           ; Name         Instructions Cycles
 16249                           ; simple_byte           10     6 (average)
 16250                           ;	Chosen strategy is simple_byte
 16251  00244C  5044               	movf	??_updateMenu+1,w,c
 16252  00244E  0A00               	xorlw	0	; case 0
 16253  002450  B4D8               	btfsc	status,2,c
 16254  002452  D007               	goto	i2l8407
 16255  002454  0A03               	xorlw	3	; case 3
 16256  002456  B4D8               	btfsc	status,2,c
 16257  002458  D015               	goto	i2l8409
 16258  00245A  0A07               	xorlw	7	; case 4
 16259  00245C  B4D8               	btfsc	status,2,c
 16260  00245E  D020               	goto	i2l8411
 16261  002460  D026               	goto	i2l257
 16262  002462                     i2l8407:
 16263                           
 16264                           ; Switch size 1, requested type "space"
 16265                           ; Number of cases is 5, Range of values is 0 to 23
 16266                           ; switch strategies available:
 16267                           ; Name         Instructions Cycles
 16268                           ; simple_byte           16     9 (average)
 16269                           ;	Chosen strategy is simple_byte
 16270  002462  5043               	movf	??_updateMenu,w,c
 16271  002464  0A00               	xorlw	0	; case 0
 16272  002466  B4D8               	btfsc	status,2,c
 16273  002468  D6DC               	goto	i2l7671
 16274  00246A  0A0B               	xorlw	11	; case 11
 16275  00246C  B4D8               	btfsc	status,2,c
 16276  00246E  D6DC               	goto	i2l7673
 16277  002470  0A07               	xorlw	7	; case 12
 16278  002472  B4D8               	btfsc	status,2,c
 16279  002474  D6EE               	goto	i2l7685
 16280  002476  0A1A               	xorlw	26	; case 22
 16281  002478  B4D8               	btfsc	status,2,c
 16282  00247A  D6F9               	goto	i2l7697
 16283  00247C  0A01               	xorlw	1	; case 23
 16284  00247E  B4D8               	btfsc	status,2,c
 16285  002480  D70C               	goto	i2l7709
 16286  002482  D015               	goto	i2l257
 16287  002484                     i2l8409:
 16288                           
 16289                           ; Switch size 1, requested type "space"
 16290                           ; Number of cases is 4, Range of values is 243 to 255
 16291                           ; switch strategies available:
 16292                           ; Name         Instructions Cycles
 16293                           ; simple_byte           13     7 (average)
 16294                           ;	Chosen strategy is simple_byte
 16295  002484  5043               	movf	??_updateMenu,w,c
 16296  002486  0AF3               	xorlw	243	; case 243
 16297  002488  B4D8               	btfsc	status,2,c
 16298  00248A  D71C               	goto	i2l7721
 16299  00248C  0A07               	xorlw	7	; case 244
 16300  00248E  B4D8               	btfsc	status,2,c
 16301  002490  D739               	goto	i2l7737
 16302  002492  0A0A               	xorlw	10	; case 254
 16303  002494  B4D8               	btfsc	status,2,c
 16304  002496  D756               	goto	i2l7753
 16305  002498  0A01               	xorlw	1	; case 255
 16306  00249A  B4D8               	btfsc	status,2,c
 16307  00249C  D773               	goto	i2l7769
 16308  00249E  D007               	goto	i2l257
 16309  0024A0                     i2l8411:
 16310                           
 16311                           ; Switch size 1, requested type "space"
 16312                           ; Number of cases is 2, Range of values is 9 to 10
 16313                           ; switch strategies available:
 16314                           ; Name         Instructions Cycles
 16315                           ; simple_byte            7     4 (average)
 16316                           ;	Chosen strategy is simple_byte
 16317  0024A0  5043               	movf	??_updateMenu,w,c
 16318  0024A2  0A09               	xorlw	9	; case 9
 16319  0024A4  B4D8               	btfsc	status,2,c
 16320  0024A6  D78E               	goto	i2l7785
 16321  0024A8  0A03               	xorlw	3	; case 10
 16322  0024AA  B4D8               	btfsc	status,2,c
 16323  0024AC  D7AB               	goto	i2l7801
 16324  0024AE                     i2l257:
 16325                           
 16326                           ;UI.c: 368: }
 16327                           ;UI.c: 369: (INTCONbits.GIE = 1);
 16328  0024AE  8EF2               	bsf	intcon,7,c	;volatile
 16329  0024B0  0012               	return		;funcret
 16330  0024B2                     __end_of_updateMenu:
 16331                           	opt stack 0
 16332                           pclatu	equ	0xFFB
 16333                           pclath	equ	0xFFA
 16334                           tblptru	equ	0xFF8
 16335                           tblptrh	equ	0xFF7
 16336                           tblptrl	equ	0xFF6
 16337                           tablat	equ	0xFF5
 16338                           prodh	equ	0xFF4
 16339                           prodl	equ	0xFF3
 16340                           intcon	equ	0xFF2
 16341                           intcon2	equ	0xFF1
 16342                           intcon3	equ	0xFF0
 16343                           indf0	equ	0xFEF
 16344                           postinc0	equ	0xFEE
 16345                           fsr0h	equ	0xFEA
 16346                           fsr0l	equ	0xFE9
 16347                           wreg	equ	0xFE8
 16348                           postdec1	equ	0xFE5
 16349                           fsr1h	equ	0xFE2
 16350                           fsr1l	equ	0xFE1
 16351                           indf2	equ	0xFDF
 16352                           postinc2	equ	0xFDE
 16353                           postdec2	equ	0xFDD
 16354                           fsr2h	equ	0xFDA
 16355                           fsr2l	equ	0xFD9
 16356                           status	equ	0xFD8
 16357                           
 16358 ;; *************** function i2_change_state_to_menu_start *****************
 16359 ;; Defined at:
 16360 ;;		line 474 in file "UI.c"
 16361 ;; Parameters:    Size  Location     Type
 16362 ;;		None
 16363 ;; Auto vars:     Size  Location     Type
 16364 ;;		None
 16365 ;; Return value:  Size  Location     Type
 16366 ;;                  1    wreg      void 
 16367 ;; Registers used:
 16368 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16369 ;; Tracked objects:
 16370 ;;		On entry : 0/0
 16371 ;;		On exit  : 0/0
 16372 ;;		Unchanged: 0/0
 16373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16378 ;;Total ram usage:        0 bytes
 16379 ;; Hardware stack levels used:    1
 16380 ;; Hardware stack levels required when called:    4
 16381 ;; This function calls:
 16382 ;;		i2_lcdInst
 16383 ;;		i2_printRTC
 16384 ;;		i2_printf
 16385 ;; This function is called by:
 16386 ;;		_updateMenu
 16387 ;; This function uses a non-reentrant model
 16388 ;;
 16389                           
 16390                           	psect	text59
 16391  0045C2                     __ptext59:
 16392                           	opt stack 0
 16393  0045C2                     i2_change_state_to_menu_start:
 16394                           	opt stack 18
 16395                           
 16396                           ;UI.c: 475: cur_state = 0;
 16397                           
 16398                           ;incstack = 0
 16399  0045C2  0E00               	movlw	0
 16400  0045C4  0100               	movlb	0	; () banked
 16401  0045C6  6FE1               	movwf	(_cur_state+1)& (0+255),b
 16402  0045C8  0E00               	movlw	0
 16403  0045CA  6FE0               	movwf	_cur_state& (0+255),b
 16404                           
 16405                           ; BSR set to: 0
 16406                           ;UI.c: 477: lcdInst(0b10000000);;
 16407  0045CC  0E80               	movlw	128
 16408  0045CE  ECA9  F023         	call	i2_lcdInst
 16409                           
 16410                           ;UI.c: 478: printRTC();
 16411  0045D2  EC59  F012         	call	i2_printRTC	;wreg free
 16412                           
 16413                           ;UI.c: 479: lcdInst(0b11000000);;
 16414  0045D6  0EC0               	movlw	192
 16415  0045D8  ECA9  F023         	call	i2_lcdInst
 16416                           
 16417                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 16418  0045DC  0E19               	movlw	low STR_30
 16419  0045DE  6E0D               	movwf	i2printf@f,c
 16420  0045E0  0EFE               	movlw	high STR_30
 16421  0045E2  6E0E               	movwf	i2printf@f+1,c
 16422  0045E4  ECD4  F00A         	call	i2_printf	;wreg free
 16423  0045E8  0012               	return		;funcret
 16424  0045EA                     __end_ofi2_change_state_to_menu_start:
 16425                           	opt stack 0
 16426                           pclatu	equ	0xFFB
 16427                           pclath	equ	0xFFA
 16428                           tblptru	equ	0xFF8
 16429                           tblptrh	equ	0xFF7
 16430                           tblptrl	equ	0xFF6
 16431                           tablat	equ	0xFF5
 16432                           prodh	equ	0xFF4
 16433                           prodl	equ	0xFF3
 16434                           intcon	equ	0xFF2
 16435                           intcon2	equ	0xFF1
 16436                           intcon3	equ	0xFF0
 16437                           indf0	equ	0xFEF
 16438                           postinc0	equ	0xFEE
 16439                           fsr0h	equ	0xFEA
 16440                           fsr0l	equ	0xFE9
 16441                           wreg	equ	0xFE8
 16442                           postdec1	equ	0xFE5
 16443                           fsr1h	equ	0xFE2
 16444                           fsr1l	equ	0xFE1
 16445                           indf2	equ	0xFDF
 16446                           postinc2	equ	0xFDE
 16447                           postdec2	equ	0xFDD
 16448                           fsr2h	equ	0xFDA
 16449                           fsr2l	equ	0xFD9
 16450                           status	equ	0xFD8
 16451                           
 16452 ;; *************** function i2_printRTC *****************
 16453 ;; Defined at:
 16454 ;;		line 63 in file "RTC.c"
 16455 ;; Parameters:    Size  Location     Type
 16456 ;;		None
 16457 ;; Auto vars:     Size  Location     Type
 16458 ;;  printRTC       14   44[COMRAM] int [7]
 16459 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 16460 ;;  printRTC        2   64[COMRAM] int 
 16461 ;;  printRTC        2   58[COMRAM] int 
 16462 ;; Return value:  Size  Location     Type
 16463 ;;                  1    wreg      void 
 16464 ;; Registers used:
 16465 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16466 ;; Tracked objects:
 16467 ;;		On entry : 0/0
 16468 ;;		On exit  : 0/0
 16469 ;;		Unchanged: 0/0
 16470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16472 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16473 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16474 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16475 ;;Total ram usage:       25 bytes
 16476 ;; Hardware stack levels used:    1
 16477 ;; Hardware stack levels required when called:    3
 16478 ;; This function calls:
 16479 ;;		i2_getRTC
 16480 ;;		i2_lcdInst
 16481 ;;		i2_printf
 16482 ;;		i2_strcpy
 16483 ;; This function is called by:
 16484 ;;		i2_change_state_to_menu_start
 16485 ;; This function uses a non-reentrant model
 16486 ;;
 16487                           
 16488                           	psect	text60
 16489  0024B2                     __ptext60:
 16490                           	opt stack 0
 16491  0024B2                     i2_printRTC:
 16492                           	opt stack 18
 16493                           
 16494                           ;RTC.c: 64: getRTC();
 16495                           
 16496                           ;incstack = 0
 16497  0024B2  EC26  F01E         	call	i2_getRTC	;wreg free
 16498                           
 16499                           ;RTC.c: 65: char month[] = "MMM";
 16500  0024B6  C133  F03D         	movff	printRTC@F3216,i2printRTC@month
 16501  0024BA  C134  F03E         	movff	printRTC@F3216+1,i2printRTC@month+1
 16502  0024BE  C135  F03F         	movff	printRTC@F3216+2,i2printRTC@month+2
 16503  0024C2  C136  F040         	movff	printRTC@F3216+3,i2printRTC@month+3
 16504                           
 16505                           ;RTC.c: 66: int INT_time[7];
 16506                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 16507  0024C6  0E00               	movlw	0
 16508  0024C8  6E42               	movwf	i2printRTC@i+1,c
 16509  0024CA  0E00               	movlw	0
 16510  0024CC  6E41               	movwf	i2printRTC@i,c
 16511  0024CE  BE42               	btfsc	i2printRTC@i+1,7,c
 16512  0024D0  D006               	goto	i2l6099
 16513  0024D2  5042               	movf	i2printRTC@i+1,w,c
 16514  0024D4  E135               	bnz	i2l602
 16515  0024D6  0E07               	movlw	7
 16516  0024D8  5C41               	subwf	i2printRTC@i,w,c
 16517  0024DA  B0D8               	btfsc	status,0,c
 16518  0024DC  D031               	goto	i2l602
 16519  0024DE                     i2l6099:
 16520                           
 16521                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 16522  0024DE  0E24               	movlw	low _time
 16523  0024E0  2441               	addwf	i2printRTC@i,w,c
 16524  0024E2  6ED9               	movwf	fsr2l,c
 16525  0024E4  0E01               	movlw	high _time
 16526  0024E6  2042               	addwfc	i2printRTC@i+1,w,c
 16527  0024E8  6EDA               	movwf	fsr2h,c
 16528  0024EA  50DF               	movf	indf2,w,c
 16529  0024EC  6E2A               	movwf	??i2_printRTC& (0+255),c
 16530  0024EE  3A2A               	swapf	??i2_printRTC,f,c
 16531  0024F0  0E0F               	movlw	15
 16532  0024F2  162A               	andwf	??i2_printRTC,f,c
 16533  0024F4  0E0F               	movlw	15
 16534  0024F6  162A               	andwf	??i2_printRTC,f,c
 16535  0024F8  502A               	movf	??i2_printRTC,w,c
 16536  0024FA  0D0A               	mullw	10
 16537  0024FC  0E24               	movlw	low _time
 16538  0024FE  2441               	addwf	i2printRTC@i,w,c
 16539  002500  6ED9               	movwf	fsr2l,c
 16540  002502  0E01               	movlw	high _time
 16541  002504  2042               	addwfc	i2printRTC@i+1,w,c
 16542  002506  6EDA               	movwf	fsr2h,c
 16543  002508  50DF               	movf	indf2,w,c
 16544  00250A  0B0F               	andlw	15
 16545  00250C  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 16546  00250E  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 16547  002510  50F3               	movf	prodl,w,c
 16548  002512  262B               	addwf	??i2_printRTC+1,f,c
 16549  002514  50F4               	movf	prodh,w,c
 16550  002516  222C               	addwfc	??i2_printRTC+2,f,c
 16551  002518  90D8               	bcf	status,0,c
 16552  00251A  3441               	rlcf	i2printRTC@i,w,c
 16553  00251C  6ED9               	movwf	fsr2l,c
 16554  00251E  3442               	rlcf	i2printRTC@i+1,w,c
 16555  002520  6EDA               	movwf	fsr2h,c
 16556  002522  0E2D               	movlw	low i2printRTC@INT_time
 16557  002524  26D9               	addwf	fsr2l,f,c
 16558  002526  0E00               	movlw	high i2printRTC@INT_time
 16559  002528  22DA               	addwfc	fsr2h,f,c
 16560  00252A  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 16561  00252E  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 16562  002532  4A41               	infsnz	i2printRTC@i,f,c
 16563  002534  2A42               	incf	i2printRTC@i+1,f,c
 16564  002536  BE42               	btfsc	i2printRTC@i+1,7,c
 16565  002538  D7D2               	goto	i2l6099
 16566  00253A  5042               	movf	i2printRTC@i+1,w,c
 16567  00253C  E101               	bnz	i2u460_40
 16568  00253E  D7CB               	goto	L9
 16569  002540                     i2u460_40:
 16570  002540                     i2l602:
 16571                           
 16572                           ;RTC.c: 69: }
 16573                           ;RTC.c: 70: int RTC_month = INT_time[5];
 16574  002540  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 16575  002544  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 16576                           
 16577                           ;RTC.c: 71: switch(RTC_month){
 16578  002548  D084               	goto	i2l6131
 16579  00254A                     i2l6105:
 16580                           
 16581                           ;RTC.c: 73: strcpy(month, "JAN");
 16582  00254A  0E3D               	movlw	low i2printRTC@month
 16583  00254C  6E01               	movwf	i2strcpy@to,c
 16584  00254E  0E00               	movlw	high i2printRTC@month
 16585  002550  6E02               	movwf	i2strcpy@to+1,c
 16586  002552  0EDB               	movlw	low STR_8
 16587  002554  6E03               	movwf	i2strcpy@from,c
 16588  002556  0EFF               	movlw	high STR_8
 16589  002558  6E04               	movwf	i2strcpy@from+1,c
 16590  00255A  EC6A  F021         	call	i2_strcpy	;wreg free
 16591                           
 16592                           ;RTC.c: 74: break;
 16593  00255E  D0A6               	goto	i2l6133
 16594  002560                     i2l6107:
 16595                           
 16596                           ;RTC.c: 76: strcpy(month, "FEB");
 16597  002560  0E3D               	movlw	low i2printRTC@month
 16598  002562  6E01               	movwf	i2strcpy@to,c
 16599  002564  0E00               	movlw	high i2printRTC@month
 16600  002566  6E02               	movwf	i2strcpy@to+1,c
 16601  002568  0ECB               	movlw	low STR_9
 16602  00256A  6E03               	movwf	i2strcpy@from,c
 16603  00256C  0EFF               	movlw	high STR_9
 16604  00256E  6E04               	movwf	i2strcpy@from+1,c
 16605  002570  EC6A  F021         	call	i2_strcpy	;wreg free
 16606                           
 16607                           ;RTC.c: 77: break;
 16608  002574  D09B               	goto	i2l6133
 16609  002576                     i2l6109:
 16610                           
 16611                           ;RTC.c: 79: strcpy(month, "MAR");
 16612  002576  0E3D               	movlw	low i2printRTC@month
 16613  002578  6E01               	movwf	i2strcpy@to,c
 16614  00257A  0E00               	movlw	high i2printRTC@month
 16615  00257C  6E02               	movwf	i2strcpy@to+1,c
 16616  00257E  0EE7               	movlw	low STR_10
 16617  002580  6E03               	movwf	i2strcpy@from,c
 16618  002582  0EFF               	movlw	high STR_10
 16619  002584  6E04               	movwf	i2strcpy@from+1,c
 16620  002586  EC6A  F021         	call	i2_strcpy	;wreg free
 16621                           
 16622                           ;RTC.c: 80: break;
 16623  00258A  D090               	goto	i2l6133
 16624  00258C                     i2l6111:
 16625                           
 16626                           ;RTC.c: 82: strcpy(month, "APR");
 16627  00258C  0E3D               	movlw	low i2printRTC@month
 16628  00258E  6E01               	movwf	i2strcpy@to,c
 16629  002590  0E00               	movlw	high i2printRTC@month
 16630  002592  6E02               	movwf	i2strcpy@to+1,c
 16631  002594  0EEB               	movlw	low STR_11
 16632  002596  6E03               	movwf	i2strcpy@from,c
 16633  002598  0EFF               	movlw	high STR_11
 16634  00259A  6E04               	movwf	i2strcpy@from+1,c
 16635  00259C  EC6A  F021         	call	i2_strcpy	;wreg free
 16636                           
 16637                           ;RTC.c: 83: break;
 16638  0025A0  D085               	goto	i2l6133
 16639  0025A2                     i2l6113:
 16640                           
 16641                           ;RTC.c: 85: strcpy(month, "MAY");
 16642  0025A2  0E3D               	movlw	low i2printRTC@month
 16643  0025A4  6E01               	movwf	i2strcpy@to,c
 16644  0025A6  0E00               	movlw	high i2printRTC@month
 16645  0025A8  6E02               	movwf	i2strcpy@to+1,c
 16646  0025AA  0EFB               	movlw	low STR_12
 16647  0025AC  6E03               	movwf	i2strcpy@from,c
 16648  0025AE  0EFF               	movlw	high STR_12
 16649  0025B0  6E04               	movwf	i2strcpy@from+1,c
 16650  0025B2  EC6A  F021         	call	i2_strcpy	;wreg free
 16651                           
 16652                           ;RTC.c: 86: break;
 16653  0025B6  D07A               	goto	i2l6133
 16654  0025B8                     i2l6115:
 16655                           
 16656                           ;RTC.c: 88: strcpy(month, "JUN");
 16657  0025B8  0E3D               	movlw	low i2printRTC@month
 16658  0025BA  6E01               	movwf	i2strcpy@to,c
 16659  0025BC  0E00               	movlw	high i2printRTC@month
 16660  0025BE  6E02               	movwf	i2strcpy@to+1,c
 16661  0025C0  0EDF               	movlw	low STR_13
 16662  0025C2  6E03               	movwf	i2strcpy@from,c
 16663  0025C4  0EFF               	movlw	high STR_13
 16664  0025C6  6E04               	movwf	i2strcpy@from+1,c
 16665  0025C8  EC6A  F021         	call	i2_strcpy	;wreg free
 16666                           
 16667                           ;RTC.c: 89: break;
 16668  0025CC  D06F               	goto	i2l6133
 16669  0025CE                     i2l6117:
 16670                           
 16671                           ;RTC.c: 91: strcpy(month, "JUL");
 16672  0025CE  0E3D               	movlw	low i2printRTC@month
 16673  0025D0  6E01               	movwf	i2strcpy@to,c
 16674  0025D2  0E00               	movlw	high i2printRTC@month
 16675  0025D4  6E02               	movwf	i2strcpy@to+1,c
 16676  0025D6  0ED7               	movlw	low STR_14
 16677  0025D8  6E03               	movwf	i2strcpy@from,c
 16678  0025DA  0EFF               	movlw	high STR_14
 16679  0025DC  6E04               	movwf	i2strcpy@from+1,c
 16680  0025DE  EC6A  F021         	call	i2_strcpy	;wreg free
 16681                           
 16682                           ;RTC.c: 92: break;
 16683  0025E2  D064               	goto	i2l6133
 16684  0025E4                     i2l6119:
 16685                           
 16686                           ;RTC.c: 94: strcpy(month, "AUG");
 16687  0025E4  0E3D               	movlw	low i2printRTC@month
 16688  0025E6  6E01               	movwf	i2strcpy@to,c
 16689  0025E8  0E00               	movlw	high i2printRTC@month
 16690  0025EA  6E02               	movwf	i2strcpy@to+1,c
 16691  0025EC  0ED3               	movlw	low STR_15
 16692  0025EE  6E03               	movwf	i2strcpy@from,c
 16693  0025F0  0EFF               	movlw	high STR_15
 16694  0025F2  6E04               	movwf	i2strcpy@from+1,c
 16695  0025F4  EC6A  F021         	call	i2_strcpy	;wreg free
 16696                           
 16697                           ;RTC.c: 95: break;
 16698  0025F8  D059               	goto	i2l6133
 16699  0025FA                     i2l6121:
 16700                           
 16701                           ;RTC.c: 97: strcpy(month, "SEP");
 16702  0025FA  0E3D               	movlw	low i2printRTC@month
 16703  0025FC  6E01               	movwf	i2strcpy@to,c
 16704  0025FE  0E00               	movlw	high i2printRTC@month
 16705  002600  6E02               	movwf	i2strcpy@to+1,c
 16706  002602  0EE3               	movlw	low STR_16
 16707  002604  6E03               	movwf	i2strcpy@from,c
 16708  002606  0EFF               	movlw	high STR_16
 16709  002608  6E04               	movwf	i2strcpy@from+1,c
 16710  00260A  EC6A  F021         	call	i2_strcpy	;wreg free
 16711                           
 16712                           ;RTC.c: 98: break;
 16713  00260E  D04E               	goto	i2l6133
 16714  002610                     i2l6123:
 16715                           
 16716                           ;RTC.c: 100: strcpy(month, "OCT");
 16717  002610  0E3D               	movlw	low i2printRTC@month
 16718  002612  6E01               	movwf	i2strcpy@to,c
 16719  002614  0E00               	movlw	high i2printRTC@month
 16720  002616  6E02               	movwf	i2strcpy@to+1,c
 16721  002618  0EF3               	movlw	low STR_17
 16722  00261A  6E03               	movwf	i2strcpy@from,c
 16723  00261C  0EFF               	movlw	high STR_17
 16724  00261E  6E04               	movwf	i2strcpy@from+1,c
 16725  002620  EC6A  F021         	call	i2_strcpy	;wreg free
 16726                           
 16727                           ;RTC.c: 101: break;
 16728  002624  D043               	goto	i2l6133
 16729  002626                     i2l6125:
 16730                           
 16731                           ;RTC.c: 103: strcpy(month, "NOV");
 16732  002626  0E3D               	movlw	low i2printRTC@month
 16733  002628  6E01               	movwf	i2strcpy@to,c
 16734  00262A  0E00               	movlw	high i2printRTC@month
 16735  00262C  6E02               	movwf	i2strcpy@to+1,c
 16736  00262E  0EF7               	movlw	low STR_18
 16737  002630  6E03               	movwf	i2strcpy@from,c
 16738  002632  0EFF               	movlw	high STR_18
 16739  002634  6E04               	movwf	i2strcpy@from+1,c
 16740  002636  EC6A  F021         	call	i2_strcpy	;wreg free
 16741                           
 16742                           ;RTC.c: 104: break;
 16743  00263A  D038               	goto	i2l6133
 16744  00263C                     i2l6127:
 16745                           
 16746                           ;RTC.c: 106: strcpy(month, "DEC");
 16747  00263C  0E3D               	movlw	low i2printRTC@month
 16748  00263E  6E01               	movwf	i2strcpy@to,c
 16749  002640  0E00               	movlw	high i2printRTC@month
 16750  002642  6E02               	movwf	i2strcpy@to+1,c
 16751  002644  0ECF               	movlw	low STR_19
 16752  002646  6E03               	movwf	i2strcpy@from,c
 16753  002648  0EFF               	movlw	high STR_19
 16754  00264A  6E04               	movwf	i2strcpy@from+1,c
 16755  00264C  EC6A  F021         	call	i2_strcpy	;wreg free
 16756                           
 16757                           ;RTC.c: 108: }
 16758                           
 16759                           ;RTC.c: 107: break;
 16760  002650  D02D               	goto	i2l6133
 16761  002652                     i2l6131:
 16762  002652  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 16763  002656  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 16764                           
 16765                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16766                           ; Switch size 1, requested type "space"
 16767                           ; Number of cases is 1, Range of values is 0 to 0
 16768                           ; switch strategies available:
 16769                           ; Name         Instructions Cycles
 16770                           ; simple_byte            4     3 (average)
 16771                           ;	Chosen strategy is simple_byte
 16772  00265A  502B               	movf	??i2_printRTC+1,w,c
 16773  00265C  0A00               	xorlw	0	; case 0
 16774  00265E  A4D8               	btfss	status,2,c
 16775  002660  D025               	goto	i2l6133
 16776                           
 16777                           ; Switch size 1, requested type "space"
 16778                           ; Number of cases is 12, Range of values is 1 to 12
 16779                           ; switch strategies available:
 16780                           ; Name         Instructions Cycles
 16781                           ; simple_byte           37    19 (average)
 16782                           ;	Chosen strategy is simple_byte
 16783  002662  502A               	movf	??i2_printRTC,w,c
 16784  002664  0A01               	xorlw	1	; case 1
 16785  002666  B4D8               	btfsc	status,2,c
 16786  002668  D770               	goto	i2l6105
 16787  00266A  0A03               	xorlw	3	; case 2
 16788  00266C  B4D8               	btfsc	status,2,c
 16789  00266E  D778               	goto	i2l6107
 16790  002670  0A01               	xorlw	1	; case 3
 16791  002672  B4D8               	btfsc	status,2,c
 16792  002674  D780               	goto	i2l6109
 16793  002676  0A07               	xorlw	7	; case 4
 16794  002678  B4D8               	btfsc	status,2,c
 16795  00267A  D788               	goto	i2l6111
 16796  00267C  0A01               	xorlw	1	; case 5
 16797  00267E  B4D8               	btfsc	status,2,c
 16798  002680  D790               	goto	i2l6113
 16799  002682  0A03               	xorlw	3	; case 6
 16800  002684  B4D8               	btfsc	status,2,c
 16801  002686  D798               	goto	i2l6115
 16802  002688  0A01               	xorlw	1	; case 7
 16803  00268A  B4D8               	btfsc	status,2,c
 16804  00268C  D7A0               	goto	i2l6117
 16805  00268E  0A0F               	xorlw	15	; case 8
 16806  002690  B4D8               	btfsc	status,2,c
 16807  002692  D7A8               	goto	i2l6119
 16808  002694  0A01               	xorlw	1	; case 9
 16809  002696  B4D8               	btfsc	status,2,c
 16810  002698  D7B0               	goto	i2l6121
 16811  00269A  0A03               	xorlw	3	; case 10
 16812  00269C  B4D8               	btfsc	status,2,c
 16813  00269E  D7B8               	goto	i2l6123
 16814  0026A0  0A01               	xorlw	1	; case 11
 16815  0026A2  B4D8               	btfsc	status,2,c
 16816  0026A4  D7C0               	goto	i2l6125
 16817  0026A6  0A07               	xorlw	7	; case 12
 16818  0026A8  B4D8               	btfsc	status,2,c
 16819  0026AA  D7C8               	goto	i2l6127
 16820  0026AC                     i2l6133:
 16821                           
 16822                           ;RTC.c: 109: lcdInst(0b10000000);;
 16823  0026AC  0E80               	movlw	128
 16824  0026AE  ECA9  F023         	call	i2_lcdInst
 16825                           
 16826                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 16827  0026B2  0E3C               	movlw	low STR_21
 16828  0026B4  6E0D               	movwf	i2printf@f,c
 16829  0026B6  0EFB               	movlw	high STR_21
 16830  0026B8  6E0E               	movwf	i2printf@f+1,c
 16831  0026BA  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 16832  0026BE  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 16833  0026C2  0E3D               	movlw	low i2printRTC@month
 16834  0026C4  6E11               	movwf	?i2_printf+4,c
 16835  0026C6  0E00               	movlw	high i2printRTC@month
 16836  0026C8  6E12               	movwf	?i2_printf+5,c
 16837  0026CA  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 16838  0026CE  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 16839  0026D2  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 16840  0026D6  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 16841  0026DA  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 16842  0026DE  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 16843  0026E2  ECD4  F00A         	call	i2_printf	;wreg free
 16844  0026E6  0012               	return		;funcret
 16845  0026E8                     __end_ofi2_printRTC:
 16846                           	opt stack 0
 16847                           pclatu	equ	0xFFB
 16848                           pclath	equ	0xFFA
 16849                           tblptru	equ	0xFF8
 16850                           tblptrh	equ	0xFF7
 16851                           tblptrl	equ	0xFF6
 16852                           tablat	equ	0xFF5
 16853                           prodh	equ	0xFF4
 16854                           prodl	equ	0xFF3
 16855                           intcon	equ	0xFF2
 16856                           intcon2	equ	0xFF1
 16857                           intcon3	equ	0xFF0
 16858                           indf0	equ	0xFEF
 16859                           postinc0	equ	0xFEE
 16860                           fsr0h	equ	0xFEA
 16861                           fsr0l	equ	0xFE9
 16862                           wreg	equ	0xFE8
 16863                           postdec1	equ	0xFE5
 16864                           fsr1h	equ	0xFE2
 16865                           fsr1l	equ	0xFE1
 16866                           indf2	equ	0xFDF
 16867                           postinc2	equ	0xFDE
 16868                           postdec2	equ	0xFDD
 16869                           fsr2h	equ	0xFDA
 16870                           fsr2l	equ	0xFD9
 16871                           status	equ	0xFD8
 16872                           
 16873 ;; *************** function i2_strcpy *****************
 16874 ;; Defined at:
 16875 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 16876 ;; Parameters:    Size  Location     Type
 16877 ;;  to              2    0[COMRAM] PTR unsigned char 
 16878 ;;		 -> printRTC@month(4), UI@month(4), 
 16879 ;;  from            2    2[COMRAM] PTR const unsigned char 
 16880 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 16881 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 16882 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 16883 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 16884 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 16885 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 16886 ;;		 -> STR_8(4), 
 16887 ;; Auto vars:     Size  Location     Type
 16888 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 16889 ;;		 -> printRTC@month(4), UI@month(4), 
 16890 ;; Return value:  Size  Location     Type
 16891 ;;                  2    0[COMRAM] PTR unsigned char 
 16892 ;; Registers used:
 16893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16894 ;; Tracked objects:
 16895 ;;		On entry : 0/0
 16896 ;;		On exit  : 0/0
 16897 ;;		Unchanged: 0/0
 16898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16899 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16900 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16902 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16903 ;;Total ram usage:        6 bytes
 16904 ;; Hardware stack levels used:    1
 16905 ;; This function calls:
 16906 ;;		Nothing
 16907 ;; This function is called by:
 16908 ;;		i2_printRTC
 16909 ;; This function uses a non-reentrant model
 16910 ;;
 16911                           
 16912                           	psect	text61
 16913  0042D4                     __ptext61:
 16914                           	opt stack 0
 16915  0042D4                     i2_strcpy:
 16916                           	opt stack 20
 16917                           
 16918                           ;incstack = 0
 16919  0042D4  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 16920  0042D8  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 16921  0042DC  D004               	goto	i2l5777
 16922  0042DE                     i2l5775:
 16923  0042DE  4A05               	infsnz	i2strcpy@cp,f,c
 16924  0042E0  2A06               	incf	i2strcpy@cp+1,f,c
 16925  0042E2  4A03               	infsnz	i2strcpy@from,f,c
 16926  0042E4  2A04               	incf	i2strcpy@from+1,f,c
 16927  0042E6                     i2l5777:
 16928  0042E6  C003  FFF6         	movff	i2strcpy@from,tblptrl
 16929  0042EA  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 16930  0042EE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16931  0042EE  6AF8               	clrf	tblptru,c
 16932  0042F0                     	endif
 16933  0042F0                     	if	0	;tblptru may be non-zero
 16934  0042F0                     	endif
 16935  0042F0  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 16936  0042F4  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 16937  0042F8  0008               	tblrd		*
 16938  0042FA  CFF5 FFDF          	movff	tablat,indf2
 16939  0042FE  50DF               	movf	indf2,w,c
 16940  004300  B4D8               	btfsc	status,2,c
 16941  004302  0012               	return	
 16942  004304  D7EC               	goto	i2l5775
 16943  004306                     __end_ofi2_strcpy:
 16944                           	opt stack 0
 16945                           pclatu	equ	0xFFB
 16946                           pclath	equ	0xFFA
 16947                           tblptru	equ	0xFF8
 16948                           tblptrh	equ	0xFF7
 16949                           tblptrl	equ	0xFF6
 16950                           tablat	equ	0xFF5
 16951                           prodh	equ	0xFF4
 16952                           prodl	equ	0xFF3
 16953                           intcon	equ	0xFF2
 16954                           intcon2	equ	0xFF1
 16955                           intcon3	equ	0xFF0
 16956                           indf0	equ	0xFEF
 16957                           postinc0	equ	0xFEE
 16958                           fsr0h	equ	0xFEA
 16959                           fsr0l	equ	0xFE9
 16960                           wreg	equ	0xFE8
 16961                           postdec1	equ	0xFE5
 16962                           fsr1h	equ	0xFE2
 16963                           fsr1l	equ	0xFE1
 16964                           indf2	equ	0xFDF
 16965                           postinc2	equ	0xFDE
 16966                           postdec2	equ	0xFDD
 16967                           fsr2h	equ	0xFDA
 16968                           fsr2l	equ	0xFD9
 16969                           status	equ	0xFD8
 16970                           
 16971 ;; *************** function _inputHandler *****************
 16972 ;; Defined at:
 16973 ;;		line 372 in file "UI.c"
 16974 ;; Parameters:    Size  Location     Type
 16975 ;;		None
 16976 ;; Auto vars:     Size  Location     Type
 16977 ;;		None
 16978 ;; Return value:  Size  Location     Type
 16979 ;;                  2   41[COMRAM] int 
 16980 ;; Registers used:
 16981 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16982 ;; Tracked objects:
 16983 ;;		On entry : 0/0
 16984 ;;		On exit  : 0/0
 16985 ;;		Unchanged: 0/0
 16986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16987 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16989 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16990 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16991 ;;Total ram usage:        4 bytes
 16992 ;; Hardware stack levels used:    1
 16993 ;; Hardware stack levels required when called:    4
 16994 ;; This function calls:
 16995 ;;		_change_state_to_logs_11
 16996 ;;		_change_state_to_logs_12
 16997 ;;		_change_state_to_logs_22
 16998 ;;		_change_state_to_logs_23
 16999 ;;		_change_state_to_logs_33
 17000 ;;		_change_state_to_logs_34
 17001 ;;		_change_state_to_menu_11
 17002 ;;		_change_state_to_menu_23
 17003 ;;		i2_change_state_to_menu_12
 17004 ;;		i2_change_state_to_menu_22
 17005 ;; This function is called by:
 17006 ;;		_updateMenu
 17007 ;; This function uses a non-reentrant model
 17008 ;;
 17009                           
 17010                           	psect	text62
 17011  0028DA                     __ptext62:
 17012                           	opt stack 0
 17013  0028DA                     _inputHandler:
 17014                           	opt stack 18
 17015                           
 17016                           ;UI.c: 377: if(firstboot){
 17017                           
 17018                           ;incstack = 0
 17019  0028DA  5075               	movf	_firstboot,w,c
 17020  0028DC  1076               	iorwf	_firstboot+1,w,c
 17021  0028DE  B4D8               	btfsc	status,2,c
 17022  0028E0  D00B               	goto	i2l6201
 17023                           
 17024                           ;UI.c: 378: change_state_to_menu_11();
 17025  0028E2  ECCB  F021         	call	_change_state_to_menu_11	;wreg free
 17026                           
 17027                           ;UI.c: 379: firstboot = 0;
 17028  0028E6  0E00               	movlw	0
 17029  0028E8  6E76               	movwf	_firstboot+1,c
 17030  0028EA  0E00               	movlw	0
 17031  0028EC  6E75               	movwf	_firstboot,c
 17032                           
 17033                           ;UI.c: 380: return 0;
 17034  0028EE  0E00               	movlw	0
 17035  0028F0  6E2B               	movwf	?_inputHandler+1,c
 17036  0028F2  0E00               	movlw	0
 17037  0028F4  6E2A               	movwf	?_inputHandler,c
 17038  0028F6  0012               	return	
 17039  0028F8                     i2l6201:
 17040                           
 17041                           ;UI.c: 381: }
 17042                           ;UI.c: 382: if (logstate){
 17043  0028F8  0100               	movlb	0	; () banked
 17044  0028FA  51F6               	movf	_logstate& (0+255),w,b
 17045  0028FC  0100               	movlb	0	; () banked
 17046  0028FE  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 17047  002900  B4D8               	btfsc	status,2,c
 17048  002902  D0C7               	goto	i2l6319
 17049                           
 17050                           ; BSR set to: 0
 17051                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 17052  002904  0E43               	movlw	67
 17053  002906  187D               	xorwf	_input,w,c	;volatile
 17054  002908  A4D8               	btfss	status,2,c
 17055  00290A  D012               	goto	i2l6219
 17056                           
 17057                           ; BSR set to: 0
 17058  00290C  B281               	btfsc	3969,1,c	;volatile
 17059  00290E  D009               	goto	i2l6211
 17060  002910  D00F               	goto	i2l6219
 17061  002912                     i2l6209:
 17062                           
 17063                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 17064  002912  0E68               	movlw	104
 17065  002914  6E2C               	movwf	??_inputHandler& (0+255),c
 17066  002916  0EE4               	movlw	228
 17067  002918                     i2u815_47:
 17068  002918  2EE8               	decfsz	wreg,f,c
 17069  00291A  D7FE               	bra	i2u815_47
 17070  00291C  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 17071  00291E  D7FC               	bra	i2u815_47
 17072  002920  D000               	nop2	
 17073  002922                     i2l6211:
 17074  002922  B281               	btfsc	3969,1,c	;volatile
 17075  002924  D7F6               	goto	i2l6209
 17076  002926                     i2l6213:
 17077                           
 17078                           ;UI.c: 387: }
 17079                           ;UI.c: 388: return 0;
 17080  002926  0E00               	movlw	0
 17081  002928  6E2B               	movwf	?_inputHandler+1,c
 17082  00292A  0E00               	movlw	0
 17083  00292C  6E2A               	movwf	?_inputHandler,c
 17084  00292E  0012               	return	
 17085  002930                     i2l6219:
 17086                           
 17087                           ;UI.c: 390: else if (input == 'D'){
 17088  002930  0E44               	movlw	68
 17089  002932  187D               	xorwf	_input,w,c	;volatile
 17090  002934  A4D8               	btfss	status,2,c
 17091  002936  D7F7               	goto	i2l6213
 17092                           
 17093                           ;UI.c: 392: logstate = 0;
 17094  002938  0E00               	movlw	0
 17095  00293A  0100               	movlb	0	; () banked
 17096  00293C  6FF7               	movwf	(_logstate+1)& (0+255),b
 17097  00293E  0E00               	movlw	0
 17098  002940  6FF6               	movwf	_logstate& (0+255),b
 17099                           
 17100                           ;UI.c: 393: switch(cur_state){
 17101  002942  D012               	goto	i2l6237
 17102  002944                     i2l6223:
 17103                           
 17104                           ;UI.c: 395: change_state_to_logs_11();
 17105  002944  EC43  F022         	call	_change_state_to_logs_11	;wreg free
 17106                           
 17107                           ;UI.c: 396: break;
 17108  002948  D7EE               	goto	i2l6213
 17109  00294A                     i2l6225:
 17110                           
 17111                           ;UI.c: 398: change_state_to_logs_12();
 17112  00294A  EC2B  F022         	call	_change_state_to_logs_12	;wreg free
 17113                           
 17114                           ;UI.c: 399: break;
 17115  00294E  D7EB               	goto	i2l6213
 17116  002950                     i2l6227:
 17117                           
 17118                           ;UI.c: 401: change_state_to_logs_22();
 17119  002950  EC13  F022         	call	_change_state_to_logs_22	;wreg free
 17120                           
 17121                           ;UI.c: 402: break;
 17122  002954  D7E8               	goto	i2l6213
 17123  002956                     i2l6229:
 17124                           
 17125                           ;UI.c: 404: change_state_to_logs_23();
 17126  002956  EC89  F022         	call	_change_state_to_logs_23	;wreg free
 17127                           
 17128                           ;UI.c: 405: break;
 17129  00295A  D7E5               	goto	i2l6213
 17130  00295C                     i2l6231:
 17131                           
 17132                           ;UI.c: 407: change_state_to_logs_33();
 17133  00295C  ECFB  F021         	call	_change_state_to_logs_33	;wreg free
 17134                           
 17135                           ;UI.c: 408: break;
 17136  002960  D7E2               	goto	i2l6213
 17137  002962                     i2l6233:
 17138                           
 17139                           ;UI.c: 410: change_state_to_logs_34();
 17140  002962  ECE3  F021         	call	_change_state_to_logs_34	;wreg free
 17141                           
 17142                           ;UI.c: 412: }
 17143                           
 17144                           ;UI.c: 411: break;
 17145  002966  D7DF               	goto	i2l6213
 17146  002968                     i2l6237:
 17147  002968  C0E0  F02C         	movff	_cur_state,??_inputHandler
 17148  00296C  C0E1  F02D         	movff	_cur_state+1,??_inputHandler+1
 17149                           
 17150                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 17151                           ; Switch size 1, requested type "space"
 17152                           ; Number of cases is 2, Range of values is 3 to 4
 17153                           ; switch strategies available:
 17154                           ; Name         Instructions Cycles
 17155                           ; simple_byte            7     4 (average)
 17156                           ;	Chosen strategy is simple_byte
 17157  002970  502D               	movf	??_inputHandler+1,w,c
 17158  002972  0A03               	xorlw	3	; case 3
 17159  002974  B4D8               	btfsc	status,2,c
 17160  002976  D004               	goto	i2l8415
 17161  002978  0A07               	xorlw	7	; case 4
 17162  00297A  B4D8               	btfsc	status,2,c
 17163  00297C  D00F               	goto	i2l8417
 17164  00297E  D7D3               	goto	i2l6213
 17165  002980                     i2l8415:
 17166                           
 17167                           ; Switch size 1, requested type "space"
 17168                           ; Number of cases is 4, Range of values is 243 to 255
 17169                           ; switch strategies available:
 17170                           ; Name         Instructions Cycles
 17171                           ; simple_byte           13     7 (average)
 17172                           ;	Chosen strategy is simple_byte
 17173  002980  502C               	movf	??_inputHandler,w,c
 17174  002982  0AF3               	xorlw	243	; case 243
 17175  002984  B4D8               	btfsc	status,2,c
 17176  002986  D7DE               	goto	i2l6223
 17177  002988  0A07               	xorlw	7	; case 244
 17178  00298A  B4D8               	btfsc	status,2,c
 17179  00298C  D7DE               	goto	i2l6225
 17180  00298E  0A0A               	xorlw	10	; case 254
 17181  002990  B4D8               	btfsc	status,2,c
 17182  002992  D7DE               	goto	i2l6227
 17183  002994  0A01               	xorlw	1	; case 255
 17184  002996  B4D8               	btfsc	status,2,c
 17185  002998  D7DE               	goto	i2l6229
 17186  00299A  D7C5               	goto	i2l6213
 17187  00299C                     i2l8417:
 17188                           
 17189                           ; Switch size 1, requested type "space"
 17190                           ; Number of cases is 2, Range of values is 9 to 10
 17191                           ; switch strategies available:
 17192                           ; Name         Instructions Cycles
 17193                           ; simple_byte            7     4 (average)
 17194                           ;	Chosen strategy is simple_byte
 17195  00299C  502C               	movf	??_inputHandler,w,c
 17196  00299E  0A09               	xorlw	9	; case 9
 17197  0029A0  B4D8               	btfsc	status,2,c
 17198  0029A2  D7DC               	goto	i2l6231
 17199  0029A4  0A03               	xorlw	3	; case 10
 17200  0029A6  B4D8               	btfsc	status,2,c
 17201  0029A8  D7DC               	goto	i2l6233
 17202  0029AA  D7BD               	goto	i2l6213
 17203  0029AC                     i2l6249:
 17204                           
 17205                           ;UI.c: 422: if(cur_state == 11){
 17206  0029AC  0E0B               	movlw	11
 17207  0029AE  0100               	movlb	0	; () banked
 17208  0029B0  19E0               	xorwf	_cur_state& (0+255),w,b
 17209  0029B2  0100               	movlb	0	; () banked
 17210  0029B4  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17211  0029B6  A4D8               	btfss	status,2,c
 17212  0029B8  D005               	goto	i2l6257
 17213                           
 17214                           ; BSR set to: 0
 17215                           ;UI.c: 423: return 0;
 17216  0029BA  0E00               	movlw	0
 17217  0029BC  6E2B               	movwf	?_inputHandler+1,c
 17218  0029BE  0E00               	movlw	0
 17219  0029C0  6E2A               	movwf	?_inputHandler,c
 17220                           
 17221                           ; BSR set to: 0
 17222  0029C2  0012               	return	
 17223  0029C4                     i2l6257:
 17224                           
 17225                           ; BSR set to: 0
 17226                           ;UI.c: 425: else{
 17227                           ;UI.c: 426: change_state_to_menu_11();
 17228  0029C4  ECCB  F021         	call	_change_state_to_menu_11	;wreg free
 17229                           
 17230                           ;UI.c: 427: }
 17231                           ;UI.c: 428: return 0;
 17232  0029C8  0E00               	movlw	0
 17233  0029CA  6E2B               	movwf	?_inputHandler+1,c
 17234  0029CC  0E00               	movlw	0
 17235  0029CE  6E2A               	movwf	?_inputHandler,c
 17236  0029D0  0012               	return	
 17237  0029D2                     i2l6263:
 17238                           
 17239                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 17240  0029D2  0E16               	movlw	22
 17241  0029D4  0100               	movlb	0	; () banked
 17242  0029D6  19E0               	xorwf	_cur_state& (0+255),w,b
 17243  0029D8  0100               	movlb	0	; () banked
 17244  0029DA  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17245  0029DC  B4D8               	btfsc	status,2,c
 17246  0029DE  D007               	goto	i2l6267
 17247                           
 17248                           ; BSR set to: 0
 17249  0029E0  0E0C               	movlw	12
 17250  0029E2  0100               	movlb	0	; () banked
 17251  0029E4  19E0               	xorwf	_cur_state& (0+255),w,b
 17252  0029E6  0100               	movlb	0	; () banked
 17253  0029E8  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17254  0029EA  A4D8               	btfss	status,2,c
 17255  0029EC  D005               	goto	i2l6273
 17256  0029EE                     i2l6267:
 17257                           
 17258                           ; BSR set to: 0
 17259                           ;UI.c: 431: return 0;
 17260  0029EE  0E00               	movlw	0
 17261  0029F0  6E2B               	movwf	?_inputHandler+1,c
 17262  0029F2  0E00               	movlw	0
 17263  0029F4  6E2A               	movwf	?_inputHandler,c
 17264                           
 17265                           ; BSR set to: 0
 17266  0029F6  0012               	return	
 17267  0029F8                     i2l6273:
 17268                           
 17269                           ; BSR set to: 0
 17270                           ;UI.c: 433: else if(cur_state == 23){
 17271  0029F8  0E17               	movlw	23
 17272  0029FA  0100               	movlb	0	; () banked
 17273  0029FC  19E0               	xorwf	_cur_state& (0+255),w,b
 17274  0029FE  0100               	movlb	0	; () banked
 17275  002A00  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17276  002A02  A4D8               	btfss	status,2,c
 17277  002A04  D003               	goto	i2l6277
 17278                           
 17279                           ; BSR set to: 0
 17280                           ;UI.c: 434: change_state_to_menu_22();
 17281  002A06  EC83  F021         	call	i2_change_state_to_menu_22	;wreg free
 17282                           
 17283                           ;UI.c: 435: }
 17284  002A0A  D002               	goto	i2l6279
 17285  002A0C                     i2l6277:
 17286                           
 17287                           ;UI.c: 436: else{
 17288                           ;UI.c: 437: change_state_to_menu_12();
 17289  002A0C  EC9B  F021         	call	i2_change_state_to_menu_12	;wreg free
 17290  002A10                     i2l6279:
 17291                           
 17292                           ;UI.c: 438: }
 17293                           ;UI.c: 439: return 0;
 17294  002A10  0E00               	movlw	0
 17295  002A12  6E2B               	movwf	?_inputHandler+1,c
 17296  002A14  0E00               	movlw	0
 17297  002A16  6E2A               	movwf	?_inputHandler,c
 17298  002A18  0012               	return	
 17299  002A1A                     i2l6283:
 17300                           
 17301                           ;UI.c: 441: if(cur_state == 23){
 17302  002A1A  0E17               	movlw	23
 17303  002A1C  0100               	movlb	0	; () banked
 17304  002A1E  19E0               	xorwf	_cur_state& (0+255),w,b
 17305  002A20  0100               	movlb	0	; () banked
 17306  002A22  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17307  002A24  A4D8               	btfss	status,2,c
 17308  002A26  D005               	goto	i2l6291
 17309                           
 17310                           ; BSR set to: 0
 17311                           ;UI.c: 442: return 0;
 17312  002A28  0E00               	movlw	0
 17313  002A2A  6E2B               	movwf	?_inputHandler+1,c
 17314  002A2C  0E00               	movlw	0
 17315  002A2E  6E2A               	movwf	?_inputHandler,c
 17316                           
 17317                           ; BSR set to: 0
 17318  002A30  0012               	return	
 17319  002A32                     i2l6291:
 17320                           
 17321                           ; BSR set to: 0
 17322                           ;UI.c: 444: else{
 17323                           ;UI.c: 445: change_state_to_menu_23();
 17324  002A32  ECB3  F021         	call	_change_state_to_menu_23	;wreg free
 17325                           
 17326                           ;UI.c: 446: }
 17327                           ;UI.c: 447: return 0;
 17328  002A36  0E00               	movlw	0
 17329  002A38  6E2B               	movwf	?_inputHandler+1,c
 17330  002A3A  0E00               	movlw	0
 17331  002A3C  6E2A               	movwf	?_inputHandler,c
 17332  002A3E  0012               	return	
 17333  002A40                     i2l6297:
 17334                           
 17335                           ;UI.c: 450: up = 1;
 17336  002A40  0E00               	movlw	0
 17337  002A42  6E78               	movwf	_up+1,c
 17338  002A44  0E01               	movlw	1
 17339  002A46  6E77               	movwf	_up,c
 17340                           
 17341                           ;UI.c: 451: return 1;
 17342  002A48  0E00               	movlw	0
 17343  002A4A  6E2B               	movwf	?_inputHandler+1,c
 17344  002A4C  0E01               	movlw	1
 17345  002A4E  6E2A               	movwf	?_inputHandler,c
 17346  002A50  0012               	return	
 17347  002A52                     i2l6301:
 17348                           
 17349                           ;UI.c: 453: down = 1;
 17350  002A52  0E00               	movlw	0
 17351  002A54  6E68               	movwf	_down+1,c
 17352  002A56  0E01               	movlw	1
 17353  002A58  6E67               	movwf	_down,c
 17354                           
 17355                           ;UI.c: 454: return 1;
 17356  002A5A  0E00               	movlw	0
 17357  002A5C  6E2B               	movwf	?_inputHandler+1,c
 17358  002A5E  0E01               	movlw	1
 17359  002A60  6E2A               	movwf	?_inputHandler,c
 17360  002A62  0012               	return	
 17361  002A64                     i2l6305:
 17362                           
 17363                           ;UI.c: 456: enter = 1;
 17364  002A64  0E00               	movlw	0
 17365  002A66  6E6A               	movwf	_enter+1,c
 17366  002A68  0E01               	movlw	1
 17367  002A6A  6E69               	movwf	_enter,c
 17368                           
 17369                           ;UI.c: 457: return 1;
 17370  002A6C  0E00               	movlw	0
 17371  002A6E  6E2B               	movwf	?_inputHandler+1,c
 17372  002A70  0E01               	movlw	1
 17373  002A72  6E2A               	movwf	?_inputHandler,c
 17374  002A74  0012               	return	
 17375  002A76                     i2l6309:
 17376                           
 17377                           ;UI.c: 459: back = 1;
 17378  002A76  0E00               	movlw	0
 17379  002A78  6E5C               	movwf	_back+1,c
 17380  002A7A  0E01               	movlw	1
 17381  002A7C  6E5B               	movwf	_back,c
 17382                           
 17383                           ;UI.c: 460: return 1;
 17384  002A7E  0E00               	movlw	0
 17385  002A80  6E2B               	movwf	?_inputHandler+1,c
 17386  002A82  0E01               	movlw	1
 17387  002A84  6E2A               	movwf	?_inputHandler,c
 17388  002A86  0012               	return	
 17389  002A88                     i2l6313:
 17390                           
 17391                           ;UI.c: 463: return 1;
 17392  002A88  0E00               	movlw	0
 17393  002A8A  6E2B               	movwf	?_inputHandler+1,c
 17394  002A8C  0E01               	movlw	1
 17395  002A8E  6E2A               	movwf	?_inputHandler,c
 17396                           
 17397                           ;UI.c: 464: }
 17398  002A90  0012               	return	
 17399  002A92                     i2l6319:
 17400  002A92  507D               	movf	_input,w,c	;volatile
 17401                           
 17402                           ; Switch size 1, requested type "space"
 17403                           ; Number of cases is 7, Range of values is 49 to 68
 17404                           ; switch strategies available:
 17405                           ; Name         Instructions Cycles
 17406                           ; simple_byte           22    12 (average)
 17407                           ;	Chosen strategy is simple_byte
 17408  002A94  0A31               	xorlw	49	; case 49
 17409  002A96  B4D8               	btfsc	status,2,c
 17410  002A98  D789               	goto	i2l6249
 17411  002A9A  0A03               	xorlw	3	; case 50
 17412  002A9C  B4D8               	btfsc	status,2,c
 17413  002A9E  D799               	goto	i2l6263
 17414  002AA0  0A01               	xorlw	1	; case 51
 17415  002AA2  B4D8               	btfsc	status,2,c
 17416  002AA4  D7BA               	goto	i2l6283
 17417  002AA6  0A72               	xorlw	114	; case 65
 17418  002AA8  B4D8               	btfsc	status,2,c
 17419  002AAA  D7CA               	goto	i2l6297
 17420  002AAC  0A03               	xorlw	3	; case 66
 17421  002AAE  B4D8               	btfsc	status,2,c
 17422  002AB0  D7D0               	goto	i2l6301
 17423  002AB2  0A01               	xorlw	1	; case 67
 17424  002AB4  B4D8               	btfsc	status,2,c
 17425  002AB6  D7D6               	goto	i2l6305
 17426  002AB8  0A07               	xorlw	7	; case 68
 17427  002ABA  B4D8               	btfsc	status,2,c
 17428  002ABC  D7DC               	goto	i2l6309
 17429  002ABE  D7E4               	goto	i2l6313
 17430  002AC0                     __end_of_inputHandler:
 17431                           	opt stack 0
 17432                           pclatu	equ	0xFFB
 17433                           pclath	equ	0xFFA
 17434                           tblptru	equ	0xFF8
 17435                           tblptrh	equ	0xFF7
 17436                           tblptrl	equ	0xFF6
 17437                           tablat	equ	0xFF5
 17438                           prodh	equ	0xFF4
 17439                           prodl	equ	0xFF3
 17440                           intcon	equ	0xFF2
 17441                           intcon2	equ	0xFF1
 17442                           intcon3	equ	0xFF0
 17443                           indf0	equ	0xFEF
 17444                           postinc0	equ	0xFEE
 17445                           fsr0h	equ	0xFEA
 17446                           fsr0l	equ	0xFE9
 17447                           wreg	equ	0xFE8
 17448                           postdec1	equ	0xFE5
 17449                           fsr1h	equ	0xFE2
 17450                           fsr1l	equ	0xFE1
 17451                           indf2	equ	0xFDF
 17452                           postinc2	equ	0xFDE
 17453                           postdec2	equ	0xFDD
 17454                           fsr2h	equ	0xFDA
 17455                           fsr2l	equ	0xFD9
 17456                           status	equ	0xFD8
 17457                           
 17458 ;; *************** function i2_change_state_to_menu_22 *****************
 17459 ;; Defined at:
 17460 ;;		line 498 in file "UI.c"
 17461 ;; Parameters:    Size  Location     Type
 17462 ;;		None
 17463 ;; Auto vars:     Size  Location     Type
 17464 ;;		None
 17465 ;; Return value:  Size  Location     Type
 17466 ;;                  1    wreg      void 
 17467 ;; Registers used:
 17468 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17469 ;; Tracked objects:
 17470 ;;		On entry : 0/0
 17471 ;;		On exit  : 0/0
 17472 ;;		Unchanged: 0/0
 17473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17478 ;;Total ram usage:        0 bytes
 17479 ;; Hardware stack levels used:    1
 17480 ;; Hardware stack levels required when called:    3
 17481 ;; This function calls:
 17482 ;;		i2_lcdInst
 17483 ;;		i2_printf
 17484 ;; This function is called by:
 17485 ;;		_updateMenu
 17486 ;;		_inputHandler
 17487 ;; This function uses a non-reentrant model
 17488 ;;
 17489                           
 17490                           	psect	text63
 17491  004306                     __ptext63:
 17492                           	opt stack 0
 17493  004306                     i2_change_state_to_menu_22:
 17494                           	opt stack 19
 17495                           
 17496                           ;UI.c: 499: cur_state = 22;
 17497                           
 17498                           ;incstack = 0
 17499  004306  0E00               	movlw	0
 17500  004308  0100               	movlb	0	; () banked
 17501  00430A  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17502  00430C  0E16               	movlw	22
 17503  00430E  6FE0               	movwf	_cur_state& (0+255),b
 17504                           
 17505                           ; BSR set to: 0
 17506                           ;UI.c: 501: lcdInst(0b10000000);;
 17507  004310  0E80               	movlw	128
 17508  004312  ECA9  F023         	call	i2_lcdInst
 17509                           
 17510                           ;UI.c: 502: printf("2. SORT        <");
 17511  004316  0EE6               	movlw	low STR_34
 17512  004318  6E0D               	movwf	i2printf@f,c
 17513  00431A  0EFD               	movlw	high STR_34
 17514  00431C  6E0E               	movwf	i2printf@f+1,c
 17515  00431E  ECD4  F00A         	call	i2_printf	;wreg free
 17516                           
 17517                           ;UI.c: 503: lcdInst(0b11000000);;
 17518  004322  0EC0               	movlw	192
 17519  004324  ECA9  F023         	call	i2_lcdInst
 17520                           
 17521                           ;UI.c: 504: printf("3. LOGS         ");
 17522  004328  0E2B               	movlw	low STR_36
 17523  00432A  6E0D               	movwf	i2printf@f,c
 17524  00432C  0EFD               	movlw	high STR_36
 17525  00432E  6E0E               	movwf	i2printf@f+1,c
 17526  004330  ECD4  F00A         	call	i2_printf	;wreg free
 17527  004334  0012               	return		;funcret
 17528  004336                     __end_ofi2_change_state_to_menu_22:
 17529                           	opt stack 0
 17530                           pclatu	equ	0xFFB
 17531                           pclath	equ	0xFFA
 17532                           tblptru	equ	0xFF8
 17533                           tblptrh	equ	0xFF7
 17534                           tblptrl	equ	0xFF6
 17535                           tablat	equ	0xFF5
 17536                           prodh	equ	0xFF4
 17537                           prodl	equ	0xFF3
 17538                           intcon	equ	0xFF2
 17539                           intcon2	equ	0xFF1
 17540                           intcon3	equ	0xFF0
 17541                           indf0	equ	0xFEF
 17542                           postinc0	equ	0xFEE
 17543                           fsr0h	equ	0xFEA
 17544                           fsr0l	equ	0xFE9
 17545                           wreg	equ	0xFE8
 17546                           postdec1	equ	0xFE5
 17547                           fsr1h	equ	0xFE2
 17548                           fsr1l	equ	0xFE1
 17549                           indf2	equ	0xFDF
 17550                           postinc2	equ	0xFDE
 17551                           postdec2	equ	0xFDD
 17552                           fsr2h	equ	0xFDA
 17553                           fsr2l	equ	0xFD9
 17554                           status	equ	0xFD8
 17555                           
 17556 ;; *************** function i2_change_state_to_menu_12 *****************
 17557 ;; Defined at:
 17558 ;;		line 490 in file "UI.c"
 17559 ;; Parameters:    Size  Location     Type
 17560 ;;		None
 17561 ;; Auto vars:     Size  Location     Type
 17562 ;;		None
 17563 ;; Return value:  Size  Location     Type
 17564 ;;                  1    wreg      void 
 17565 ;; Registers used:
 17566 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17567 ;; Tracked objects:
 17568 ;;		On entry : 0/0
 17569 ;;		On exit  : 0/0
 17570 ;;		Unchanged: 0/0
 17571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17576 ;;Total ram usage:        0 bytes
 17577 ;; Hardware stack levels used:    1
 17578 ;; Hardware stack levels required when called:    3
 17579 ;; This function calls:
 17580 ;;		i2_lcdInst
 17581 ;;		i2_printf
 17582 ;; This function is called by:
 17583 ;;		_updateMenu
 17584 ;;		_inputHandler
 17585 ;; This function uses a non-reentrant model
 17586 ;;
 17587                           
 17588                           	psect	text64
 17589  004336                     __ptext64:
 17590                           	opt stack 0
 17591  004336                     i2_change_state_to_menu_12:
 17592                           	opt stack 19
 17593                           
 17594                           ;UI.c: 491: cur_state = 12;
 17595                           
 17596                           ;incstack = 0
 17597  004336  0E00               	movlw	0
 17598  004338  0100               	movlb	0	; () banked
 17599  00433A  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17600  00433C  0E0C               	movlw	12
 17601  00433E  6FE0               	movwf	_cur_state& (0+255),b
 17602                           
 17603                           ; BSR set to: 0
 17604                           ;UI.c: 493: lcdInst(0b10000000);;
 17605  004340  0E80               	movlw	128
 17606  004342  ECA9  F023         	call	i2_lcdInst
 17607                           
 17608                           ;UI.c: 494: printf("1. DATE/TIME    ");
 17609  004346  0E4D               	movlw	low STR_33
 17610  004348  6E0D               	movwf	i2printf@f,c
 17611  00434A  0EFD               	movlw	high STR_33
 17612  00434C  6E0E               	movwf	i2printf@f+1,c
 17613  00434E  ECD4  F00A         	call	i2_printf	;wreg free
 17614                           
 17615                           ;UI.c: 495: lcdInst(0b11000000);;
 17616  004352  0EC0               	movlw	192
 17617  004354  ECA9  F023         	call	i2_lcdInst
 17618                           
 17619                           ;UI.c: 496: printf("2. SORT        <");
 17620  004358  0EE6               	movlw	low STR_34
 17621  00435A  6E0D               	movwf	i2printf@f,c
 17622  00435C  0EFD               	movlw	high STR_34
 17623  00435E  6E0E               	movwf	i2printf@f+1,c
 17624  004360  ECD4  F00A         	call	i2_printf	;wreg free
 17625  004364  0012               	return		;funcret
 17626  004366                     __end_ofi2_change_state_to_menu_12:
 17627                           	opt stack 0
 17628                           pclatu	equ	0xFFB
 17629                           pclath	equ	0xFFA
 17630                           tblptru	equ	0xFF8
 17631                           tblptrh	equ	0xFF7
 17632                           tblptrl	equ	0xFF6
 17633                           tablat	equ	0xFF5
 17634                           prodh	equ	0xFF4
 17635                           prodl	equ	0xFF3
 17636                           intcon	equ	0xFF2
 17637                           intcon2	equ	0xFF1
 17638                           intcon3	equ	0xFF0
 17639                           indf0	equ	0xFEF
 17640                           postinc0	equ	0xFEE
 17641                           fsr0h	equ	0xFEA
 17642                           fsr0l	equ	0xFE9
 17643                           wreg	equ	0xFE8
 17644                           postdec1	equ	0xFE5
 17645                           fsr1h	equ	0xFE2
 17646                           fsr1l	equ	0xFE1
 17647                           indf2	equ	0xFDF
 17648                           postinc2	equ	0xFDE
 17649                           postdec2	equ	0xFDD
 17650                           fsr2h	equ	0xFDA
 17651                           fsr2l	equ	0xFD9
 17652                           status	equ	0xFD8
 17653                           
 17654 ;; *************** function _change_state_to_menu_23 *****************
 17655 ;; Defined at:
 17656 ;;		line 506 in file "UI.c"
 17657 ;; Parameters:    Size  Location     Type
 17658 ;;		None
 17659 ;; Auto vars:     Size  Location     Type
 17660 ;;		None
 17661 ;; Return value:  Size  Location     Type
 17662 ;;                  1    wreg      void 
 17663 ;; Registers used:
 17664 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17665 ;; Tracked objects:
 17666 ;;		On entry : 0/0
 17667 ;;		On exit  : 0/0
 17668 ;;		Unchanged: 0/0
 17669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17674 ;;Total ram usage:        0 bytes
 17675 ;; Hardware stack levels used:    1
 17676 ;; Hardware stack levels required when called:    3
 17677 ;; This function calls:
 17678 ;;		i2_lcdInst
 17679 ;;		i2_printf
 17680 ;; This function is called by:
 17681 ;;		_updateMenu
 17682 ;;		_inputHandler
 17683 ;; This function uses a non-reentrant model
 17684 ;;
 17685                           
 17686                           	psect	text65
 17687  004366                     __ptext65:
 17688                           	opt stack 0
 17689  004366                     _change_state_to_menu_23:
 17690                           	opt stack 18
 17691                           
 17692                           ;UI.c: 507: cur_state = 23;
 17693                           
 17694                           ;incstack = 0
 17695  004366  0E00               	movlw	0
 17696  004368  0100               	movlb	0	; () banked
 17697  00436A  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17698  00436C  0E17               	movlw	23
 17699  00436E  6FE0               	movwf	_cur_state& (0+255),b
 17700                           
 17701                           ; BSR set to: 0
 17702                           ;UI.c: 509: lcdInst(0b10000000);;
 17703  004370  0E80               	movlw	128
 17704  004372  ECA9  F023         	call	i2_lcdInst
 17705                           
 17706                           ;UI.c: 510: printf("2. SORT         ");
 17707  004376  0E3C               	movlw	low STR_32
 17708  004378  6E0D               	movwf	i2printf@f,c
 17709  00437A  0EFD               	movlw	high STR_32
 17710  00437C  6E0E               	movwf	i2printf@f+1,c
 17711  00437E  ECD4  F00A         	call	i2_printf	;wreg free
 17712                           
 17713                           ;UI.c: 511: lcdInst(0b11000000);;
 17714  004382  0EC0               	movlw	192
 17715  004384  ECA9  F023         	call	i2_lcdInst
 17716                           
 17717                           ;UI.c: 512: printf("3. LOGS        <");
 17718  004388  0ED5               	movlw	low STR_38
 17719  00438A  6E0D               	movwf	i2printf@f,c
 17720  00438C  0EFD               	movlw	high STR_38
 17721  00438E  6E0E               	movwf	i2printf@f+1,c
 17722  004390  ECD4  F00A         	call	i2_printf	;wreg free
 17723  004394  0012               	return		;funcret
 17724  004396                     __end_of_change_state_to_menu_23:
 17725                           	opt stack 0
 17726                           pclatu	equ	0xFFB
 17727                           pclath	equ	0xFFA
 17728                           tblptru	equ	0xFF8
 17729                           tblptrh	equ	0xFF7
 17730                           tblptrl	equ	0xFF6
 17731                           tablat	equ	0xFF5
 17732                           prodh	equ	0xFF4
 17733                           prodl	equ	0xFF3
 17734                           intcon	equ	0xFF2
 17735                           intcon2	equ	0xFF1
 17736                           intcon3	equ	0xFF0
 17737                           indf0	equ	0xFEF
 17738                           postinc0	equ	0xFEE
 17739                           fsr0h	equ	0xFEA
 17740                           fsr0l	equ	0xFE9
 17741                           wreg	equ	0xFE8
 17742                           postdec1	equ	0xFE5
 17743                           fsr1h	equ	0xFE2
 17744                           fsr1l	equ	0xFE1
 17745                           indf2	equ	0xFDF
 17746                           postinc2	equ	0xFDE
 17747                           postdec2	equ	0xFDD
 17748                           fsr2h	equ	0xFDA
 17749                           fsr2l	equ	0xFD9
 17750                           status	equ	0xFD8
 17751                           
 17752 ;; *************** function _change_state_to_menu_11 *****************
 17753 ;; Defined at:
 17754 ;;		line 482 in file "UI.c"
 17755 ;; Parameters:    Size  Location     Type
 17756 ;;		None
 17757 ;; Auto vars:     Size  Location     Type
 17758 ;;		None
 17759 ;; Return value:  Size  Location     Type
 17760 ;;                  1    wreg      void 
 17761 ;; Registers used:
 17762 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17763 ;; Tracked objects:
 17764 ;;		On entry : 0/0
 17765 ;;		On exit  : 0/0
 17766 ;;		Unchanged: 0/0
 17767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17772 ;;Total ram usage:        0 bytes
 17773 ;; Hardware stack levels used:    1
 17774 ;; Hardware stack levels required when called:    3
 17775 ;; This function calls:
 17776 ;;		i2_lcdInst
 17777 ;;		i2_printf
 17778 ;; This function is called by:
 17779 ;;		_updateMenu
 17780 ;;		_inputHandler
 17781 ;; This function uses a non-reentrant model
 17782 ;;
 17783                           
 17784                           	psect	text66
 17785  004396                     __ptext66:
 17786                           	opt stack 0
 17787  004396                     _change_state_to_menu_11:
 17788                           	opt stack 18
 17789                           
 17790                           ;UI.c: 483: cur_state = 11;
 17791                           
 17792                           ;incstack = 0
 17793  004396  0E00               	movlw	0
 17794  004398  0100               	movlb	0	; () banked
 17795  00439A  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17796  00439C  0E0B               	movlw	11
 17797  00439E  6FE0               	movwf	_cur_state& (0+255),b
 17798                           
 17799                           ; BSR set to: 0
 17800                           ;UI.c: 485: lcdInst(0b10000000);;
 17801  0043A0  0E80               	movlw	128
 17802  0043A2  ECA9  F023         	call	i2_lcdInst
 17803                           
 17804                           ;UI.c: 486: printf("1. DATE/TIME   <");
 17805  0043A6  0EF7               	movlw	low STR_31
 17806  0043A8  6E0D               	movwf	i2printf@f,c
 17807  0043AA  0EFD               	movlw	high STR_31
 17808  0043AC  6E0E               	movwf	i2printf@f+1,c
 17809  0043AE  ECD4  F00A         	call	i2_printf	;wreg free
 17810                           
 17811                           ;UI.c: 487: lcdInst(0b11000000);;
 17812  0043B2  0EC0               	movlw	192
 17813  0043B4  ECA9  F023         	call	i2_lcdInst
 17814                           
 17815                           ;UI.c: 488: printf("2. SORT         ");
 17816  0043B8  0E3C               	movlw	low STR_32
 17817  0043BA  6E0D               	movwf	i2printf@f,c
 17818  0043BC  0EFD               	movlw	high STR_32
 17819  0043BE  6E0E               	movwf	i2printf@f+1,c
 17820  0043C0  ECD4  F00A         	call	i2_printf	;wreg free
 17821  0043C4  0012               	return		;funcret
 17822  0043C6                     __end_of_change_state_to_menu_11:
 17823                           	opt stack 0
 17824                           pclatu	equ	0xFFB
 17825                           pclath	equ	0xFFA
 17826                           tblptru	equ	0xFF8
 17827                           tblptrh	equ	0xFF7
 17828                           tblptrl	equ	0xFF6
 17829                           tablat	equ	0xFF5
 17830                           prodh	equ	0xFF4
 17831                           prodl	equ	0xFF3
 17832                           intcon	equ	0xFF2
 17833                           intcon2	equ	0xFF1
 17834                           intcon3	equ	0xFF0
 17835                           indf0	equ	0xFEF
 17836                           postinc0	equ	0xFEE
 17837                           fsr0h	equ	0xFEA
 17838                           fsr0l	equ	0xFE9
 17839                           wreg	equ	0xFE8
 17840                           postdec1	equ	0xFE5
 17841                           fsr1h	equ	0xFE2
 17842                           fsr1l	equ	0xFE1
 17843                           indf2	equ	0xFDF
 17844                           postinc2	equ	0xFDE
 17845                           postdec2	equ	0xFDD
 17846                           fsr2h	equ	0xFDA
 17847                           fsr2l	equ	0xFD9
 17848                           status	equ	0xFD8
 17849                           
 17850 ;; *************** function _change_state_to_logs_34 *****************
 17851 ;; Defined at:
 17852 ;;		line 549 in file "UI.c"
 17853 ;; Parameters:    Size  Location     Type
 17854 ;;		None
 17855 ;; Auto vars:     Size  Location     Type
 17856 ;;		None
 17857 ;; Return value:  Size  Location     Type
 17858 ;;                  1    wreg      void 
 17859 ;; Registers used:
 17860 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17861 ;; Tracked objects:
 17862 ;;		On entry : 0/0
 17863 ;;		On exit  : 0/0
 17864 ;;		Unchanged: 0/0
 17865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17870 ;;Total ram usage:        0 bytes
 17871 ;; Hardware stack levels used:    1
 17872 ;; Hardware stack levels required when called:    3
 17873 ;; This function calls:
 17874 ;;		i2_lcdInst
 17875 ;;		i2_printf
 17876 ;; This function is called by:
 17877 ;;		_updateMenu
 17878 ;;		_inputHandler
 17879 ;; This function uses a non-reentrant model
 17880 ;;
 17881                           
 17882                           	psect	text67
 17883  0043C6                     __ptext67:
 17884                           	opt stack 0
 17885  0043C6                     _change_state_to_logs_34:
 17886                           	opt stack 18
 17887                           
 17888                           ;UI.c: 550: cur_state = 1034;
 17889                           
 17890                           ;incstack = 0
 17891  0043C6  0E04               	movlw	4
 17892  0043C8  0100               	movlb	0	; () banked
 17893  0043CA  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17894  0043CC  0E0A               	movlw	10
 17895  0043CE  6FE0               	movwf	_cur_state& (0+255),b
 17896                           
 17897                           ; BSR set to: 0
 17898                           ;UI.c: 551: lcdInst(0b10000000);;
 17899  0043D0  0E80               	movlw	128
 17900  0043D2  ECA9  F023         	call	i2_lcdInst
 17901                           
 17902                           ;UI.c: 552: printf("LOG 3           ");
 17903  0043D6  0E09               	movlw	low STR_44
 17904  0043D8  6E0D               	movwf	i2printf@f,c
 17905  0043DA  0EFD               	movlw	high STR_44
 17906  0043DC  6E0E               	movwf	i2printf@f+1,c
 17907  0043DE  ECD4  F00A         	call	i2_printf	;wreg free
 17908                           
 17909                           ;UI.c: 553: lcdInst(0b11000000);;
 17910  0043E2  0EC0               	movlw	192
 17911  0043E4  ECA9  F023         	call	i2_lcdInst
 17912                           
 17913                           ;UI.c: 554: printf("LOG 4          <");
 17914  0043E8  0EC4               	movlw	low STR_50
 17915  0043EA  6E0D               	movwf	i2printf@f,c
 17916  0043EC  0EFD               	movlw	high STR_50
 17917  0043EE  6E0E               	movwf	i2printf@f+1,c
 17918  0043F0  ECD4  F00A         	call	i2_printf	;wreg free
 17919  0043F4  0012               	return		;funcret
 17920  0043F6                     __end_of_change_state_to_logs_34:
 17921                           	opt stack 0
 17922                           pclatu	equ	0xFFB
 17923                           pclath	equ	0xFFA
 17924                           tblptru	equ	0xFF8
 17925                           tblptrh	equ	0xFF7
 17926                           tblptrl	equ	0xFF6
 17927                           tablat	equ	0xFF5
 17928                           prodh	equ	0xFF4
 17929                           prodl	equ	0xFF3
 17930                           intcon	equ	0xFF2
 17931                           intcon2	equ	0xFF1
 17932                           intcon3	equ	0xFF0
 17933                           indf0	equ	0xFEF
 17934                           postinc0	equ	0xFEE
 17935                           fsr0h	equ	0xFEA
 17936                           fsr0l	equ	0xFE9
 17937                           wreg	equ	0xFE8
 17938                           postdec1	equ	0xFE5
 17939                           fsr1h	equ	0xFE2
 17940                           fsr1l	equ	0xFE1
 17941                           indf2	equ	0xFDF
 17942                           postinc2	equ	0xFDE
 17943                           postdec2	equ	0xFDD
 17944                           fsr2h	equ	0xFDA
 17945                           fsr2l	equ	0xFD9
 17946                           status	equ	0xFD8
 17947                           
 17948 ;; *************** function _change_state_to_logs_33 *****************
 17949 ;; Defined at:
 17950 ;;		line 542 in file "UI.c"
 17951 ;; Parameters:    Size  Location     Type
 17952 ;;		None
 17953 ;; Auto vars:     Size  Location     Type
 17954 ;;		None
 17955 ;; Return value:  Size  Location     Type
 17956 ;;                  1    wreg      void 
 17957 ;; Registers used:
 17958 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17959 ;; Tracked objects:
 17960 ;;		On entry : 0/0
 17961 ;;		On exit  : 0/0
 17962 ;;		Unchanged: 0/0
 17963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17968 ;;Total ram usage:        0 bytes
 17969 ;; Hardware stack levels used:    1
 17970 ;; Hardware stack levels required when called:    3
 17971 ;; This function calls:
 17972 ;;		i2_lcdInst
 17973 ;;		i2_printf
 17974 ;; This function is called by:
 17975 ;;		_updateMenu
 17976 ;;		_inputHandler
 17977 ;; This function uses a non-reentrant model
 17978 ;;
 17979                           
 17980                           	psect	text68
 17981  0043F6                     __ptext68:
 17982                           	opt stack 0
 17983  0043F6                     _change_state_to_logs_33:
 17984                           	opt stack 18
 17985                           
 17986                           ;UI.c: 543: cur_state = 1033;
 17987                           
 17988                           ;incstack = 0
 17989  0043F6  0E04               	movlw	4
 17990  0043F8  0100               	movlb	0	; () banked
 17991  0043FA  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17992  0043FC  0E09               	movlw	9
 17993  0043FE  6FE0               	movwf	_cur_state& (0+255),b
 17994                           
 17995                           ; BSR set to: 0
 17996                           ;UI.c: 544: lcdInst(0b10000000);;
 17997  004400  0E80               	movlw	128
 17998  004402  ECA9  F023         	call	i2_lcdInst
 17999                           
 18000                           ;UI.c: 545: printf("LOG 3          <");
 18001  004406  0EB3               	movlw	low STR_46
 18002  004408  6E0D               	movwf	i2printf@f,c
 18003  00440A  0EFD               	movlw	high STR_46
 18004  00440C  6E0E               	movwf	i2printf@f+1,c
 18005  00440E  ECD4  F00A         	call	i2_printf	;wreg free
 18006                           
 18007                           ;UI.c: 546: lcdInst(0b11000000);;
 18008  004412  0EC0               	movlw	192
 18009  004414  ECA9  F023         	call	i2_lcdInst
 18010                           
 18011                           ;UI.c: 547: printf("LOG 4           ");
 18012  004418  0E1A               	movlw	low STR_48
 18013  00441A  6E0D               	movwf	i2printf@f,c
 18014  00441C  0EFD               	movlw	high STR_48
 18015  00441E  6E0E               	movwf	i2printf@f+1,c
 18016  004420  ECD4  F00A         	call	i2_printf	;wreg free
 18017  004424  0012               	return		;funcret
 18018  004426                     __end_of_change_state_to_logs_33:
 18019                           	opt stack 0
 18020                           pclatu	equ	0xFFB
 18021                           pclath	equ	0xFFA
 18022                           tblptru	equ	0xFF8
 18023                           tblptrh	equ	0xFF7
 18024                           tblptrl	equ	0xFF6
 18025                           tablat	equ	0xFF5
 18026                           prodh	equ	0xFF4
 18027                           prodl	equ	0xFF3
 18028                           intcon	equ	0xFF2
 18029                           intcon2	equ	0xFF1
 18030                           intcon3	equ	0xFF0
 18031                           indf0	equ	0xFEF
 18032                           postinc0	equ	0xFEE
 18033                           fsr0h	equ	0xFEA
 18034                           fsr0l	equ	0xFE9
 18035                           wreg	equ	0xFE8
 18036                           postdec1	equ	0xFE5
 18037                           fsr1h	equ	0xFE2
 18038                           fsr1l	equ	0xFE1
 18039                           indf2	equ	0xFDF
 18040                           postinc2	equ	0xFDE
 18041                           postdec2	equ	0xFDD
 18042                           fsr2h	equ	0xFDA
 18043                           fsr2l	equ	0xFD9
 18044                           status	equ	0xFD8
 18045                           
 18046 ;; *************** function _change_state_to_logs_23 *****************
 18047 ;; Defined at:
 18048 ;;		line 535 in file "UI.c"
 18049 ;; Parameters:    Size  Location     Type
 18050 ;;		None
 18051 ;; Auto vars:     Size  Location     Type
 18052 ;;		None
 18053 ;; Return value:  Size  Location     Type
 18054 ;;                  1    wreg      void 
 18055 ;; Registers used:
 18056 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18057 ;; Tracked objects:
 18058 ;;		On entry : 0/0
 18059 ;;		On exit  : 0/0
 18060 ;;		Unchanged: 0/0
 18061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18066 ;;Total ram usage:        0 bytes
 18067 ;; Hardware stack levels used:    1
 18068 ;; Hardware stack levels required when called:    3
 18069 ;; This function calls:
 18070 ;;		i2_lcdInst
 18071 ;;		i2_printf
 18072 ;; This function is called by:
 18073 ;;		_updateMenu
 18074 ;;		_inputHandler
 18075 ;; This function uses a non-reentrant model
 18076 ;;
 18077                           
 18078                           	psect	text69
 18079  004512                     __ptext69:
 18080                           	opt stack 0
 18081  004512                     _change_state_to_logs_23:
 18082                           	opt stack 18
 18083                           
 18084                           ;UI.c: 536: cur_state = 1023;
 18085                           
 18086                           ;incstack = 0
 18087  004512  0E03               	movlw	3
 18088  004514  0100               	movlb	0	; () banked
 18089  004516  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18090  004518  69E0               	setf	_cur_state& (0+255),b
 18091                           
 18092                           ; BSR set to: 0
 18093                           ;UI.c: 537: lcdInst(0b10000000);;
 18094  00451A  0E80               	movlw	128
 18095  00451C  ECA9  F023         	call	i2_lcdInst
 18096                           
 18097                           ;UI.c: 538: printf("LOG 2           ");
 18098  004520  0EF8               	movlw	low STR_40
 18099  004522  6E0D               	movwf	i2printf@f,c
 18100  004524  0EFC               	movlw	high STR_40
 18101  004526  6E0E               	movwf	i2printf@f+1,c
 18102  004528  ECD4  F00A         	call	i2_printf	;wreg free
 18103                           
 18104                           ;UI.c: 539: lcdInst(0b11000000);;
 18105  00452C  0EC0               	movlw	192
 18106  00452E  ECA9  F023         	call	i2_lcdInst
 18107                           
 18108                           ;UI.c: 540: printf("LOG 3          <");
 18109  004532  0EB3               	movlw	low STR_46
 18110  004534  6E0D               	movwf	i2printf@f,c
 18111  004536  0EFD               	movlw	high STR_46
 18112  004538  6E0E               	movwf	i2printf@f+1,c
 18113  00453A  ECD4  F00A         	call	i2_printf	;wreg free
 18114  00453E  0012               	return		;funcret
 18115  004540                     __end_of_change_state_to_logs_23:
 18116                           	opt stack 0
 18117                           pclatu	equ	0xFFB
 18118                           pclath	equ	0xFFA
 18119                           tblptru	equ	0xFF8
 18120                           tblptrh	equ	0xFF7
 18121                           tblptrl	equ	0xFF6
 18122                           tablat	equ	0xFF5
 18123                           prodh	equ	0xFF4
 18124                           prodl	equ	0xFF3
 18125                           intcon	equ	0xFF2
 18126                           intcon2	equ	0xFF1
 18127                           intcon3	equ	0xFF0
 18128                           indf0	equ	0xFEF
 18129                           postinc0	equ	0xFEE
 18130                           fsr0h	equ	0xFEA
 18131                           fsr0l	equ	0xFE9
 18132                           wreg	equ	0xFE8
 18133                           postdec1	equ	0xFE5
 18134                           fsr1h	equ	0xFE2
 18135                           fsr1l	equ	0xFE1
 18136                           indf2	equ	0xFDF
 18137                           postinc2	equ	0xFDE
 18138                           postdec2	equ	0xFDD
 18139                           fsr2h	equ	0xFDA
 18140                           fsr2l	equ	0xFD9
 18141                           status	equ	0xFD8
 18142                           
 18143 ;; *************** function _change_state_to_logs_22 *****************
 18144 ;; Defined at:
 18145 ;;		line 528 in file "UI.c"
 18146 ;; Parameters:    Size  Location     Type
 18147 ;;		None
 18148 ;; Auto vars:     Size  Location     Type
 18149 ;;		None
 18150 ;; Return value:  Size  Location     Type
 18151 ;;                  1    wreg      void 
 18152 ;; Registers used:
 18153 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18154 ;; Tracked objects:
 18155 ;;		On entry : 0/0
 18156 ;;		On exit  : 0/0
 18157 ;;		Unchanged: 0/0
 18158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18162 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18163 ;;Total ram usage:        0 bytes
 18164 ;; Hardware stack levels used:    1
 18165 ;; Hardware stack levels required when called:    3
 18166 ;; This function calls:
 18167 ;;		i2_lcdInst
 18168 ;;		i2_printf
 18169 ;; This function is called by:
 18170 ;;		_updateMenu
 18171 ;;		_inputHandler
 18172 ;; This function uses a non-reentrant model
 18173 ;;
 18174                           
 18175                           	psect	text70
 18176  004426                     __ptext70:
 18177                           	opt stack 0
 18178  004426                     _change_state_to_logs_22:
 18179                           	opt stack 18
 18180                           
 18181                           ;UI.c: 529: cur_state = 1022;
 18182                           
 18183                           ;incstack = 0
 18184  004426  0E03               	movlw	3
 18185  004428  0100               	movlb	0	; () banked
 18186  00442A  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18187  00442C  0EFE               	movlw	254
 18188  00442E  6FE0               	movwf	_cur_state& (0+255),b
 18189                           
 18190                           ; BSR set to: 0
 18191                           ;UI.c: 530: lcdInst(0b10000000);;
 18192  004430  0E80               	movlw	128
 18193  004432  ECA9  F023         	call	i2_lcdInst
 18194                           
 18195                           ;UI.c: 531: printf("LOG 2          <");
 18196  004436  0EA2               	movlw	low STR_42
 18197  004438  6E0D               	movwf	i2printf@f,c
 18198  00443A  0EFD               	movlw	high STR_42
 18199  00443C  6E0E               	movwf	i2printf@f+1,c
 18200  00443E  ECD4  F00A         	call	i2_printf	;wreg free
 18201                           
 18202                           ;UI.c: 532: lcdInst(0b11000000);;
 18203  004442  0EC0               	movlw	192
 18204  004444  ECA9  F023         	call	i2_lcdInst
 18205                           
 18206                           ;UI.c: 533: printf("LOG 3           ");
 18207  004448  0E09               	movlw	low STR_44
 18208  00444A  6E0D               	movwf	i2printf@f,c
 18209  00444C  0EFD               	movlw	high STR_44
 18210  00444E  6E0E               	movwf	i2printf@f+1,c
 18211  004450  ECD4  F00A         	call	i2_printf	;wreg free
 18212  004454  0012               	return		;funcret
 18213  004456                     __end_of_change_state_to_logs_22:
 18214                           	opt stack 0
 18215                           pclatu	equ	0xFFB
 18216                           pclath	equ	0xFFA
 18217                           tblptru	equ	0xFF8
 18218                           tblptrh	equ	0xFF7
 18219                           tblptrl	equ	0xFF6
 18220                           tablat	equ	0xFF5
 18221                           prodh	equ	0xFF4
 18222                           prodl	equ	0xFF3
 18223                           intcon	equ	0xFF2
 18224                           intcon2	equ	0xFF1
 18225                           intcon3	equ	0xFF0
 18226                           indf0	equ	0xFEF
 18227                           postinc0	equ	0xFEE
 18228                           fsr0h	equ	0xFEA
 18229                           fsr0l	equ	0xFE9
 18230                           wreg	equ	0xFE8
 18231                           postdec1	equ	0xFE5
 18232                           fsr1h	equ	0xFE2
 18233                           fsr1l	equ	0xFE1
 18234                           indf2	equ	0xFDF
 18235                           postinc2	equ	0xFDE
 18236                           postdec2	equ	0xFDD
 18237                           fsr2h	equ	0xFDA
 18238                           fsr2l	equ	0xFD9
 18239                           status	equ	0xFD8
 18240                           
 18241 ;; *************** function _change_state_to_logs_12 *****************
 18242 ;; Defined at:
 18243 ;;		line 521 in file "UI.c"
 18244 ;; Parameters:    Size  Location     Type
 18245 ;;		None
 18246 ;; Auto vars:     Size  Location     Type
 18247 ;;		None
 18248 ;; Return value:  Size  Location     Type
 18249 ;;                  1    wreg      void 
 18250 ;; Registers used:
 18251 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18252 ;; Tracked objects:
 18253 ;;		On entry : 0/0
 18254 ;;		On exit  : 0/0
 18255 ;;		Unchanged: 0/0
 18256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18261 ;;Total ram usage:        0 bytes
 18262 ;; Hardware stack levels used:    1
 18263 ;; Hardware stack levels required when called:    3
 18264 ;; This function calls:
 18265 ;;		i2_lcdInst
 18266 ;;		i2_printf
 18267 ;; This function is called by:
 18268 ;;		_updateMenu
 18269 ;;		_inputHandler
 18270 ;; This function uses a non-reentrant model
 18271 ;;
 18272                           
 18273                           	psect	text71
 18274  004456                     __ptext71:
 18275                           	opt stack 0
 18276  004456                     _change_state_to_logs_12:
 18277                           	opt stack 18
 18278                           
 18279                           ;UI.c: 522: cur_state = 1012;
 18280                           
 18281                           ;incstack = 0
 18282  004456  0E03               	movlw	3
 18283  004458  0100               	movlb	0	; () banked
 18284  00445A  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18285  00445C  0EF4               	movlw	244
 18286  00445E  6FE0               	movwf	_cur_state& (0+255),b
 18287                           
 18288                           ; BSR set to: 0
 18289                           ;UI.c: 523: lcdInst(0b10000000);;
 18290  004460  0E80               	movlw	128
 18291  004462  ECA9  F023         	call	i2_lcdInst
 18292                           
 18293                           ;UI.c: 524: printf("LOG 1           ");
 18294  004466  0EE7               	movlw	low STR_41
 18295  004468  6E0D               	movwf	i2printf@f,c
 18296  00446A  0EFC               	movlw	high STR_41
 18297  00446C  6E0E               	movwf	i2printf@f+1,c
 18298  00446E  ECD4  F00A         	call	i2_printf	;wreg free
 18299                           
 18300                           ;UI.c: 525: lcdInst(0b11000000);;
 18301  004472  0EC0               	movlw	192
 18302  004474  ECA9  F023         	call	i2_lcdInst
 18303                           
 18304                           ;UI.c: 526: printf("LOG 2          <");
 18305  004478  0EA2               	movlw	low STR_42
 18306  00447A  6E0D               	movwf	i2printf@f,c
 18307  00447C  0EFD               	movlw	high STR_42
 18308  00447E  6E0E               	movwf	i2printf@f+1,c
 18309  004480  ECD4  F00A         	call	i2_printf	;wreg free
 18310  004484  0012               	return		;funcret
 18311  004486                     __end_of_change_state_to_logs_12:
 18312                           	opt stack 0
 18313                           pclatu	equ	0xFFB
 18314                           pclath	equ	0xFFA
 18315                           tblptru	equ	0xFF8
 18316                           tblptrh	equ	0xFF7
 18317                           tblptrl	equ	0xFF6
 18318                           tablat	equ	0xFF5
 18319                           prodh	equ	0xFF4
 18320                           prodl	equ	0xFF3
 18321                           intcon	equ	0xFF2
 18322                           intcon2	equ	0xFF1
 18323                           intcon3	equ	0xFF0
 18324                           indf0	equ	0xFEF
 18325                           postinc0	equ	0xFEE
 18326                           fsr0h	equ	0xFEA
 18327                           fsr0l	equ	0xFE9
 18328                           wreg	equ	0xFE8
 18329                           postdec1	equ	0xFE5
 18330                           fsr1h	equ	0xFE2
 18331                           fsr1l	equ	0xFE1
 18332                           indf2	equ	0xFDF
 18333                           postinc2	equ	0xFDE
 18334                           postdec2	equ	0xFDD
 18335                           fsr2h	equ	0xFDA
 18336                           fsr2l	equ	0xFD9
 18337                           status	equ	0xFD8
 18338                           
 18339 ;; *************** function _change_state_to_logs_11 *****************
 18340 ;; Defined at:
 18341 ;;		line 514 in file "UI.c"
 18342 ;; Parameters:    Size  Location     Type
 18343 ;;		None
 18344 ;; Auto vars:     Size  Location     Type
 18345 ;;		None
 18346 ;; Return value:  Size  Location     Type
 18347 ;;                  1    wreg      void 
 18348 ;; Registers used:
 18349 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18350 ;; Tracked objects:
 18351 ;;		On entry : 0/0
 18352 ;;		On exit  : 0/0
 18353 ;;		Unchanged: 0/0
 18354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18359 ;;Total ram usage:        0 bytes
 18360 ;; Hardware stack levels used:    1
 18361 ;; Hardware stack levels required when called:    3
 18362 ;; This function calls:
 18363 ;;		i2_lcdInst
 18364 ;;		i2_printf
 18365 ;; This function is called by:
 18366 ;;		_updateMenu
 18367 ;;		_inputHandler
 18368 ;; This function uses a non-reentrant model
 18369 ;;
 18370                           
 18371                           	psect	text72
 18372  004486                     __ptext72:
 18373                           	opt stack 0
 18374  004486                     _change_state_to_logs_11:
 18375                           	opt stack 18
 18376                           
 18377                           ;UI.c: 515: cur_state = 1011;
 18378                           
 18379                           ;incstack = 0
 18380  004486  0E03               	movlw	3
 18381  004488  0100               	movlb	0	; () banked
 18382  00448A  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18383  00448C  0EF3               	movlw	243
 18384  00448E  6FE0               	movwf	_cur_state& (0+255),b
 18385                           
 18386                           ; BSR set to: 0
 18387                           ;UI.c: 516: lcdInst(0b10000000);;
 18388  004490  0E80               	movlw	128
 18389  004492  ECA9  F023         	call	i2_lcdInst
 18390                           
 18391                           ;UI.c: 517: printf("LOG 1          <");
 18392  004496  0E91               	movlw	low STR_39
 18393  004498  6E0D               	movwf	i2printf@f,c
 18394  00449A  0EFD               	movlw	high STR_39
 18395  00449C  6E0E               	movwf	i2printf@f+1,c
 18396  00449E  ECD4  F00A         	call	i2_printf	;wreg free
 18397                           
 18398                           ;UI.c: 518: lcdInst(0b11000000);;
 18399  0044A2  0EC0               	movlw	192
 18400  0044A4  ECA9  F023         	call	i2_lcdInst
 18401                           
 18402                           ;UI.c: 519: printf("LOG 2           ");
 18403  0044A8  0EF8               	movlw	low STR_40
 18404  0044AA  6E0D               	movwf	i2printf@f,c
 18405  0044AC  0EFC               	movlw	high STR_40
 18406  0044AE  6E0E               	movwf	i2printf@f+1,c
 18407  0044B0  ECD4  F00A         	call	i2_printf	;wreg free
 18408  0044B4  0012               	return		;funcret
 18409  0044B6                     __end_of_change_state_to_logs_11:
 18410                           	opt stack 0
 18411                           pclatu	equ	0xFFB
 18412                           pclath	equ	0xFFA
 18413                           tblptru	equ	0xFF8
 18414                           tblptrh	equ	0xFF7
 18415                           tblptrl	equ	0xFF6
 18416                           tablat	equ	0xFF5
 18417                           prodh	equ	0xFF4
 18418                           prodl	equ	0xFF3
 18419                           intcon	equ	0xFF2
 18420                           intcon2	equ	0xFF1
 18421                           intcon3	equ	0xFF0
 18422                           indf0	equ	0xFEF
 18423                           postinc0	equ	0xFEE
 18424                           fsr0h	equ	0xFEA
 18425                           fsr0l	equ	0xFE9
 18426                           wreg	equ	0xFE8
 18427                           postdec1	equ	0xFE5
 18428                           fsr1h	equ	0xFE2
 18429                           fsr1l	equ	0xFE1
 18430                           indf2	equ	0xFDF
 18431                           postinc2	equ	0xFDE
 18432                           postdec2	equ	0xFDD
 18433                           fsr2h	equ	0xFDA
 18434                           fsr2l	equ	0xFD9
 18435                           status	equ	0xFD8
 18436                           
 18437 ;; *************** function _dispLogs *****************
 18438 ;; Defined at:
 18439 ;;		line 467 in file "UI.c"
 18440 ;; Parameters:    Size  Location     Type
 18441 ;;  myLog           2   17[COMRAM] int 
 18442 ;; Auto vars:     Size  Location     Type
 18443 ;;		None
 18444 ;; Return value:  Size  Location     Type
 18445 ;;                  1    wreg      void 
 18446 ;; Registers used:
 18447 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18448 ;; Tracked objects:
 18449 ;;		On entry : 0/0
 18450 ;;		On exit  : 0/0
 18451 ;;		Unchanged: 0/0
 18452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18453 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18456 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18457 ;;Total ram usage:        2 bytes
 18458 ;; Hardware stack levels used:    1
 18459 ;; Hardware stack levels required when called:    2
 18460 ;; This function calls:
 18461 ;;		_retrieveLog
 18462 ;; This function is called by:
 18463 ;;		_updateMenu
 18464 ;; This function uses a non-reentrant model
 18465 ;;
 18466                           
 18467                           	psect	text73
 18468  004636                     __ptext73:
 18469                           	opt stack 0
 18470  004636                     _dispLogs:
 18471                           	opt stack 20
 18472                           
 18473                           ;UI.c: 468: logstate = 1;
 18474                           
 18475                           ;incstack = 0
 18476  004636  0E00               	movlw	0
 18477  004638  0100               	movlb	0	; () banked
 18478  00463A  6FF7               	movwf	(_logstate+1)& (0+255),b
 18479  00463C  0E01               	movlw	1
 18480  00463E  6FF6               	movwf	_logstate& (0+255),b
 18481                           
 18482                           ; BSR set to: 0
 18483                           ;UI.c: 469: log = myLog;
 18484  004640  C012  F0E6         	movff	dispLogs@myLog,_log
 18485  004644  C013  F0E7         	movff	dispLogs@myLog+1,_log+1
 18486                           
 18487                           ; BSR set to: 0
 18488                           ;UI.c: 470: retrieveLog(myLog - 1);
 18489  004648  0EFF               	movlw	255
 18490  00464A  2412               	addwf	dispLogs@myLog,w,c
 18491  00464C  6E07               	movwf	retrieveLog@logNum,c
 18492  00464E  0EFF               	movlw	255
 18493  004650  2013               	addwfc	dispLogs@myLog+1,w,c
 18494  004652  6E08               	movwf	retrieveLog@logNum+1,c
 18495  004654  ECA4  F018         	call	_retrieveLog	;wreg free
 18496  004658  0012               	return		;funcret
 18497  00465A                     __end_of_dispLogs:
 18498                           	opt stack 0
 18499                           pclatu	equ	0xFFB
 18500                           pclath	equ	0xFFA
 18501                           tblptru	equ	0xFF8
 18502                           tblptrh	equ	0xFF7
 18503                           tblptrl	equ	0xFF6
 18504                           tablat	equ	0xFF5
 18505                           prodh	equ	0xFF4
 18506                           prodl	equ	0xFF3
 18507                           intcon	equ	0xFF2
 18508                           intcon2	equ	0xFF1
 18509                           intcon3	equ	0xFF0
 18510                           indf0	equ	0xFEF
 18511                           postinc0	equ	0xFEE
 18512                           fsr0h	equ	0xFEA
 18513                           fsr0l	equ	0xFE9
 18514                           wreg	equ	0xFE8
 18515                           postdec1	equ	0xFE5
 18516                           fsr1h	equ	0xFE2
 18517                           fsr1l	equ	0xFE1
 18518                           indf2	equ	0xFDF
 18519                           postinc2	equ	0xFDE
 18520                           postdec2	equ	0xFDD
 18521                           fsr2h	equ	0xFDA
 18522                           fsr2l	equ	0xFD9
 18523                           status	equ	0xFD8
 18524                           
 18525 ;; *************** function _retrieveLog *****************
 18526 ;; Defined at:
 18527 ;;		line 134 in file "EEPROM.c"
 18528 ;; Parameters:    Size  Location     Type
 18529 ;;  logNum          2    6[COMRAM] int 
 18530 ;; Auto vars:     Size  Location     Type
 18531 ;;  i               2   13[COMRAM] int 
 18532 ;;  addr            2   15[COMRAM] unsigned short 
 18533 ;;  byte3           1   12[COMRAM] unsigned char 
 18534 ;;  byte2           1   11[COMRAM] unsigned char 
 18535 ;;  byte1           1   10[COMRAM] unsigned char 
 18536 ;; Return value:  Size  Location     Type
 18537 ;;                  1    wreg      void 
 18538 ;; Registers used:
 18539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18540 ;; Tracked objects:
 18541 ;;		On entry : 0/0
 18542 ;;		On exit  : 0/0
 18543 ;;		Unchanged: 0/0
 18544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18545 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18546 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18547 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18548 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18549 ;;Total ram usage:       11 bytes
 18550 ;; Hardware stack levels used:    1
 18551 ;; Hardware stack levels required when called:    1
 18552 ;; This function calls:
 18553 ;;		i2_EEPROM_read
 18554 ;;		i2___wmul
 18555 ;; This function is called by:
 18556 ;;		_dispLogs
 18557 ;; This function uses a non-reentrant model
 18558 ;;
 18559                           
 18560                           	psect	text74
 18561  003148                     __ptext74:
 18562                           	opt stack 0
 18563  003148                     _retrieveLog:
 18564                           	opt stack 20
 18565                           
 18566                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 18567                           
 18568                           ;incstack = 0
 18569  003148  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 18570  00314C  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 18571  003150  0E00               	movlw	0
 18572  003152  6E04               	movwf	i2___wmul@multiplicand+1,c
 18573  003154  0E0B               	movlw	11
 18574  003156  6E03               	movwf	i2___wmul@multiplicand,c
 18575  003158  ECF5  F022         	call	i2___wmul	;wreg free
 18576  00315C  0E01               	movlw	1
 18577  00315E  2401               	addwf	?i2___wmul,w,c
 18578  003160  6E10               	movwf	retrieveLog@addr,c
 18579  003162  0E00               	movlw	0
 18580  003164  2002               	addwfc	?i2___wmul+1,w,c
 18581  003166  6E11               	movwf	retrieveLog@addr+1,c
 18582                           
 18583                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 18584  003168  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18585  00316C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18586  003170  EC75  F023         	call	i2_EEPROM_read	;wreg free
 18587  003174  6E0B               	movwf	retrieveLog@byte1,c
 18588                           
 18589                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 18590  003176  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18591  00317A  0E80               	movlw	128
 18592  00317C  1609               	andwf	??_retrieveLog,f,c
 18593  00317E  5009               	movf	??_retrieveLog,w,c
 18594  003180  0100               	movlb	0	; () banked
 18595  003182  6FE8               	movwf	_log_completion& (0+255),b
 18596  003184  6BE9               	clrf	(_log_completion+1)& (0+255),b
 18597                           
 18598                           ; BSR set to: 0
 18599                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 18600  003186  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18601  00318A  0E0F               	movlw	15
 18602  00318C  1609               	andwf	??_retrieveLog,f,c
 18603  00318E  5009               	movf	??_retrieveLog,w,c
 18604  003190  0100               	movlb	0	; () banked
 18605  003192  6FF2               	movwf	_log_count_total& (0+255),b
 18606  003194  6BF3               	clrf	(_log_count_total+1)& (0+255),b
 18607                           
 18608                           ; BSR set to: 0
 18609                           ;EEPROM.c: 146: addr++;
 18610  003196  4A10               	infsnz	retrieveLog@addr,f,c
 18611  003198  2A11               	incf	retrieveLog@addr+1,f,c
 18612                           
 18613                           ; BSR set to: 0
 18614                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 18615  00319A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18616  00319E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18617  0031A2  EC75  F023         	call	i2_EEPROM_read	;wreg free
 18618  0031A6  6E0C               	movwf	retrieveLog@byte2,c
 18619                           
 18620                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)(byte2 & 0b11110000);
 18621  0031A8  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18622  0031AC  0EF0               	movlw	240
 18623  0031AE  1609               	andwf	??_retrieveLog,f,c
 18624  0031B0  5009               	movf	??_retrieveLog,w,c
 18625  0031B2  0100               	movlb	0	; () banked
 18626  0031B4  6FEE               	movwf	_log_count_pop_no_tab& (0+255),b
 18627  0031B6  6BEF               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 18628                           
 18629                           ; BSR set to: 0
 18630                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 18631  0031B8  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18632  0031BC  0E0F               	movlw	15
 18633  0031BE  1609               	andwf	??_retrieveLog,f,c
 18634  0031C0  5009               	movf	??_retrieveLog,w,c
 18635  0031C2  0100               	movlb	0	; () banked
 18636  0031C4  6FF0               	movwf	_log_count_pop_w_tab& (0+255),b
 18637  0031C6  6BF1               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 18638                           
 18639                           ; BSR set to: 0
 18640                           ;EEPROM.c: 152: addr++;
 18641  0031C8  4A10               	infsnz	retrieveLog@addr,f,c
 18642  0031CA  2A11               	incf	retrieveLog@addr+1,f,c
 18643                           
 18644                           ; BSR set to: 0
 18645                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 18646  0031CC  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18647  0031D0  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18648  0031D4  EC75  F023         	call	i2_EEPROM_read	;wreg free
 18649  0031D8  6E0D               	movwf	retrieveLog@byte3,c
 18650                           
 18651                           ;EEPROM.c: 154: log_count_can_w_lab = (int)(byte3 & 0b11110000);
 18652  0031DA  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18653  0031DE  0EF0               	movlw	240
 18654  0031E0  1609               	andwf	??_retrieveLog,f,c
 18655  0031E2  5009               	movf	??_retrieveLog,w,c
 18656  0031E4  0100               	movlb	0	; () banked
 18657  0031E6  6FEC               	movwf	_log_count_can_w_lab& (0+255),b
 18658  0031E8  6BED               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 18659                           
 18660                           ; BSR set to: 0
 18661                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 18662  0031EA  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18663  0031EE  0E0F               	movlw	15
 18664  0031F0  1609               	andwf	??_retrieveLog,f,c
 18665  0031F2  5009               	movf	??_retrieveLog,w,c
 18666  0031F4  0100               	movlb	0	; () banked
 18667  0031F6  6FEA               	movwf	_log_count_can_no_lab& (0+255),b
 18668  0031F8  6BEB               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 18669                           
 18670                           ; BSR set to: 0
 18671                           ;EEPROM.c: 156: addr++;
 18672  0031FA  4A10               	infsnz	retrieveLog@addr,f,c
 18673  0031FC  2A11               	incf	retrieveLog@addr+1,f,c
 18674                           
 18675                           ; BSR set to: 0
 18676                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 18677  0031FE  0E00               	movlw	0
 18678  003200  6E0F               	movwf	retrieveLog@i+1,c
 18679  003202  0E00               	movlw	0
 18680  003204  6E0E               	movwf	retrieveLog@i,c
 18681  003206                     i2l5947:
 18682                           
 18683                           ; BSR set to: 0
 18684  003206  BE0F               	btfsc	retrieveLog@i+1,7,c
 18685  003208  D006               	goto	i2l5951
 18686  00320A  500F               	movf	retrieveLog@i+1,w,c
 18687  00320C  E11E               	bnz	i2l5959
 18688  00320E  0E07               	movlw	7
 18689  003210  5C0E               	subwf	retrieveLog@i,w,c
 18690  003212  B0D8               	btfsc	status,0,c
 18691  003214  D01A               	goto	i2l5959
 18692  003216                     i2l5951:
 18693                           
 18694                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 18695  003216  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18696  00321A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18697  00321E  EC75  F023         	call	i2_EEPROM_read	;wreg free
 18698  003222  6E09               	movwf	??_retrieveLog& (0+255),c
 18699  003224  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 18700  003226  90D8               	bcf	status,0,c
 18701  003228  340E               	rlcf	retrieveLog@i,w,c
 18702  00322A  6ED9               	movwf	fsr2l,c
 18703  00322C  340F               	rlcf	retrieveLog@i+1,w,c
 18704  00322E  6EDA               	movwf	fsr2h,c
 18705  003230  0E00               	movlw	low _log_startTime
 18706  003232  26D9               	addwf	fsr2l,f,c
 18707  003234  0E01               	movlw	high _log_startTime
 18708  003236  22DA               	addwfc	fsr2h,f,c
 18709  003238  C009  FFDE         	movff	??_retrieveLog,postinc2
 18710  00323C  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 18711                           
 18712                           ;EEPROM.c: 161: addr++;
 18713  003240  4A10               	infsnz	retrieveLog@addr,f,c
 18714  003242  2A11               	incf	retrieveLog@addr+1,f,c
 18715  003244  4A0E               	infsnz	retrieveLog@i,f,c
 18716  003246  2A0F               	incf	retrieveLog@i+1,f,c
 18717  003248  D7DE               	goto	i2l5947
 18718  00324A                     i2l5959:
 18719                           
 18720                           ;EEPROM.c: 162: }
 18721                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 18722  00324A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18723  00324E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18724  003252  EC75  F023         	call	i2_EEPROM_read	;wreg free
 18725  003256  6E09               	movwf	??_retrieveLog& (0+255),c
 18726  003258  5009               	movf	??_retrieveLog,w,c
 18727  00325A  0100               	movlb	0	; () banked
 18728  00325C  6FF4               	movwf	_log_total_time& (0+255),b
 18729  00325E  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 18730                           
 18731                           ; BSR set to: 0
 18732  003260  0012               	return		;funcret
 18733  003262                     __end_of_retrieveLog:
 18734                           	opt stack 0
 18735                           pclatu	equ	0xFFB
 18736                           pclath	equ	0xFFA
 18737                           tblptru	equ	0xFF8
 18738                           tblptrh	equ	0xFF7
 18739                           tblptrl	equ	0xFF6
 18740                           tablat	equ	0xFF5
 18741                           prodh	equ	0xFF4
 18742                           prodl	equ	0xFF3
 18743                           intcon	equ	0xFF2
 18744                           intcon2	equ	0xFF1
 18745                           intcon3	equ	0xFF0
 18746                           indf0	equ	0xFEF
 18747                           postinc0	equ	0xFEE
 18748                           fsr0h	equ	0xFEA
 18749                           fsr0l	equ	0xFE9
 18750                           wreg	equ	0xFE8
 18751                           postdec1	equ	0xFE5
 18752                           fsr1h	equ	0xFE2
 18753                           fsr1l	equ	0xFE1
 18754                           indf2	equ	0xFDF
 18755                           postinc2	equ	0xFDE
 18756                           postdec2	equ	0xFDD
 18757                           fsr2h	equ	0xFDA
 18758                           fsr2l	equ	0xFD9
 18759                           status	equ	0xFD8
 18760                           
 18761 ;; *************** function i2_EEPROM_read *****************
 18762 ;; Defined at:
 18763 ;;		line 68 in file "EEPROM.c"
 18764 ;; Parameters:    Size  Location     Type
 18765 ;;  address         2    0[COMRAM] unsigned short 
 18766 ;; Auto vars:     Size  Location     Type
 18767 ;;		None
 18768 ;; Return value:  Size  Location     Type
 18769 ;;                  1    wreg      unsigned char 
 18770 ;; Registers used:
 18771 ;;		wreg, status,2
 18772 ;; Tracked objects:
 18773 ;;		On entry : 0/0
 18774 ;;		On exit  : 0/0
 18775 ;;		Unchanged: 0/0
 18776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18777 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18780 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18781 ;;Total ram usage:        2 bytes
 18782 ;; Hardware stack levels used:    1
 18783 ;; This function calls:
 18784 ;;		Nothing
 18785 ;; This function is called by:
 18786 ;;		_retrieveLog
 18787 ;; This function uses a non-reentrant model
 18788 ;;
 18789                           
 18790                           	psect	text75
 18791  0046EA                     __ptext75:
 18792                           	opt stack 0
 18793  0046EA                     i2_EEPROM_read:
 18794                           	opt stack 20
 18795                           
 18796                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 18797                           
 18798                           ; BSR set to: 0
 18799                           ;incstack = 0
 18800  0046EA  5002               	movf	i2EEPROM_read@address+1,w,c
 18801  0046EC  6EAA               	movwf	4010,c	;volatile
 18802                           
 18803                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 18804  0046EE  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 18805                           
 18806                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 18807  0046F2  9EA6               	bcf	4006,7,c	;volatile
 18808                           
 18809                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 18810  0046F4  9CA6               	bcf	4006,6,c	;volatile
 18811                           
 18812                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 18813  0046F6  80A6               	bsf	4006,0,c	;volatile
 18814  0046F8                     i2l939:
 18815  0046F8  B0A6               	btfsc	4006,0,c	;volatile
 18816  0046FA  D7FE               	goto	i2l939
 18817                           
 18818                           ;EEPROM.c: 81: return EEDATA;
 18819  0046FC  50A8               	movf	4008,w,c	;volatile
 18820  0046FE  0012               	return	
 18821  004700                     __end_ofi2_EEPROM_read:
 18822                           	opt stack 0
 18823                           pclatu	equ	0xFFB
 18824                           pclath	equ	0xFFA
 18825                           tblptru	equ	0xFF8
 18826                           tblptrh	equ	0xFF7
 18827                           tblptrl	equ	0xFF6
 18828                           tablat	equ	0xFF5
 18829                           prodh	equ	0xFF4
 18830                           prodl	equ	0xFF3
 18831                           intcon	equ	0xFF2
 18832                           intcon2	equ	0xFF1
 18833                           intcon3	equ	0xFF0
 18834                           indf0	equ	0xFEF
 18835                           postinc0	equ	0xFEE
 18836                           fsr0h	equ	0xFEA
 18837                           fsr0l	equ	0xFE9
 18838                           wreg	equ	0xFE8
 18839                           postdec1	equ	0xFE5
 18840                           fsr1h	equ	0xFE2
 18841                           fsr1l	equ	0xFE1
 18842                           indf2	equ	0xFDF
 18843                           postinc2	equ	0xFDE
 18844                           postdec2	equ	0xFDD
 18845                           fsr2h	equ	0xFDA
 18846                           fsr2l	equ	0xFD9
 18847                           status	equ	0xFD8
 18848                           
 18849 ;; *************** function _printSortTimer *****************
 18850 ;; Defined at:
 18851 ;;		line 284 in file "sort.c"
 18852 ;; Parameters:    Size  Location     Type
 18853 ;;		None
 18854 ;; Auto vars:     Size  Location     Type
 18855 ;;  i               2   72[COMRAM] int 
 18856 ;;  curTime        14   46[COMRAM] int [7]
 18857 ;;  timeDiff        2   70[COMRAM] unsigned int 
 18858 ;;  sec             2   66[COMRAM] int 
 18859 ;;  min             2   64[COMRAM] int 
 18860 ;;  cur_sec         2   62[COMRAM] unsigned int 
 18861 ;;  start_sec       2   60[COMRAM] unsigned int 
 18862 ;;  hour            2   44[COMRAM] int 
 18863 ;; Return value:  Size  Location     Type
 18864 ;;                  1    wreg      void 
 18865 ;; Registers used:
 18866 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18867 ;; Tracked objects:
 18868 ;;		On entry : 0/0
 18869 ;;		On exit  : 0/0
 18870 ;;		Unchanged: 0/0
 18871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18873 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18874 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18875 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18876 ;;Total ram usage:       33 bytes
 18877 ;; Hardware stack levels used:    1
 18878 ;; Hardware stack levels required when called:    3
 18879 ;; This function calls:
 18880 ;;		i2___lwdiv
 18881 ;;		i2___lwmod
 18882 ;;		i2___wmul
 18883 ;;		i2_getRTC
 18884 ;;		i2_lcdInst
 18885 ;;		i2_printf
 18886 ;; This function is called by:
 18887 ;;		_handler
 18888 ;; This function uses a non-reentrant model
 18889 ;;
 18890                           
 18891                           	psect	text76
 18892  0026E8                     __ptext76:
 18893                           	opt stack 0
 18894  0026E8                     _printSortTimer:
 18895                           	opt stack 20
 18896                           
 18897                           ;sort.c: 285: getRTC();
 18898                           
 18899                           ;incstack = 0
 18900  0026E8  EC26  F01E         	call	i2_getRTC	;wreg free
 18901                           
 18902                           ;sort.c: 286: int curTime[7];
 18903                           ;sort.c: 287: for(int i = 0; i < 7; i++){
 18904  0026EC  0E00               	movlw	0
 18905  0026EE  6E4A               	movwf	printSortTimer@i+1,c
 18906  0026F0  0E00               	movlw	0
 18907  0026F2  6E49               	movwf	printSortTimer@i,c
 18908  0026F4                     i2l7995:
 18909  0026F4  BE4A               	btfsc	printSortTimer@i+1,7,c
 18910  0026F6  D006               	goto	i2l7999
 18911  0026F8  504A               	movf	printSortTimer@i+1,w,c
 18912  0026FA  E131               	bnz	i2l8005
 18913  0026FC  0E07               	movlw	7
 18914  0026FE  5C49               	subwf	printSortTimer@i,w,c
 18915  002700  B0D8               	btfsc	status,0,c
 18916  002702  D02D               	goto	i2l8005
 18917  002704                     i2l7999:
 18918                           
 18919                           ;sort.c: 288: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 18920  002704  0E24               	movlw	low _time
 18921  002706  2449               	addwf	printSortTimer@i,w,c
 18922  002708  6ED9               	movwf	fsr2l,c
 18923  00270A  0E01               	movlw	high _time
 18924  00270C  204A               	addwfc	printSortTimer@i+1,w,c
 18925  00270E  6EDA               	movwf	fsr2h,c
 18926  002710  50DF               	movf	indf2,w,c
 18927  002712  6E2A               	movwf	??_printSortTimer& (0+255),c
 18928  002714  3A2A               	swapf	??_printSortTimer,f,c
 18929  002716  0E0F               	movlw	15
 18930  002718  162A               	andwf	??_printSortTimer,f,c
 18931  00271A  0E0F               	movlw	15
 18932  00271C  162A               	andwf	??_printSortTimer,f,c
 18933  00271E  502A               	movf	??_printSortTimer,w,c
 18934  002720  0D0A               	mullw	10
 18935  002722  0E24               	movlw	low _time
 18936  002724  2449               	addwf	printSortTimer@i,w,c
 18937  002726  6ED9               	movwf	fsr2l,c
 18938  002728  0E01               	movlw	high _time
 18939  00272A  204A               	addwfc	printSortTimer@i+1,w,c
 18940  00272C  6EDA               	movwf	fsr2h,c
 18941  00272E  50DF               	movf	indf2,w,c
 18942  002730  0B0F               	andlw	15
 18943  002732  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 18944  002734  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 18945  002736  50F3               	movf	prodl,w,c
 18946  002738  262B               	addwf	??_printSortTimer+1,f,c
 18947  00273A  50F4               	movf	prodh,w,c
 18948  00273C  222C               	addwfc	??_printSortTimer+2,f,c
 18949  00273E  90D8               	bcf	status,0,c
 18950  002740  3449               	rlcf	printSortTimer@i,w,c
 18951  002742  6ED9               	movwf	fsr2l,c
 18952  002744  344A               	rlcf	printSortTimer@i+1,w,c
 18953  002746  6EDA               	movwf	fsr2h,c
 18954  002748  0E2F               	movlw	low printSortTimer@curTime
 18955  00274A  26D9               	addwf	fsr2l,f,c
 18956  00274C  0E00               	movlw	high printSortTimer@curTime
 18957  00274E  22DA               	addwfc	fsr2h,f,c
 18958  002750  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 18959  002754  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 18960  002758  4A49               	infsnz	printSortTimer@i,f,c
 18961  00275A  2A4A               	incf	printSortTimer@i+1,f,c
 18962  00275C  D7CB               	goto	i2l7995
 18963  00275E                     i2l8005:
 18964                           
 18965                           ;sort.c: 289: }
 18966                           ;sort.c: 290: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 18967  00275E  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 18968  002762  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 18969  002766  0E00               	movlw	0
 18970  002768  6E04               	movwf	i2___wmul@multiplicand+1,c
 18971  00276A  0E3C               	movlw	60
 18972  00276C  6E03               	movwf	i2___wmul@multiplicand,c
 18973  00276E  ECF5  F022         	call	i2___wmul	;wreg free
 18974  002772  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 18975  002776  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 18976  00277A  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 18977  00277E  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 18978  002782  0E0E               	movlw	14
 18979  002784  6E04               	movwf	i2___wmul@multiplicand+1,c
 18980  002786  0E10               	movlw	16
 18981  002788  6E03               	movwf	i2___wmul@multiplicand,c
 18982  00278A  ECF5  F022         	call	i2___wmul	;wreg free
 18983  00278E  5001               	movf	?i2___wmul,w,c
 18984  002790  262A               	addwf	??_printSortTimer,f,c
 18985  002792  5002               	movf	?i2___wmul+1,w,c
 18986  002794  222B               	addwfc	??_printSortTimer+1,f,c
 18987  002796  0101               	movlb	1	; () banked
 18988  002798  510E               	movf	_startTime& (0+255),w,b
 18989  00279A  242A               	addwf	??_printSortTimer,w,c
 18990  00279C  6E3D               	movwf	printSortTimer@start_sec,c
 18991  00279E  0101               	movlb	1	; () banked
 18992  0027A0  510F               	movf	(_startTime+1)& (0+255),w,b
 18993  0027A2  202B               	addwfc	??_printSortTimer+1,w,c
 18994  0027A4  6E3E               	movwf	printSortTimer@start_sec+1,c
 18995                           
 18996                           ;sort.c: 291: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 18997  0027A6  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 18998  0027AA  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 18999  0027AE  0E00               	movlw	0
 19000  0027B0  6E04               	movwf	i2___wmul@multiplicand+1,c
 19001  0027B2  0E3C               	movlw	60
 19002  0027B4  6E03               	movwf	i2___wmul@multiplicand,c
 19003  0027B6  ECF5  F022         	call	i2___wmul	;wreg free
 19004  0027BA  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19005  0027BE  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19006  0027C2  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 19007  0027C6  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 19008  0027CA  0E0E               	movlw	14
 19009  0027CC  6E04               	movwf	i2___wmul@multiplicand+1,c
 19010  0027CE  0E10               	movlw	16
 19011  0027D0  6E03               	movwf	i2___wmul@multiplicand,c
 19012  0027D2  ECF5  F022         	call	i2___wmul	;wreg free
 19013  0027D6  5001               	movf	?i2___wmul,w,c
 19014  0027D8  262A               	addwf	??_printSortTimer,f,c
 19015  0027DA  5002               	movf	?i2___wmul+1,w,c
 19016  0027DC  222B               	addwfc	??_printSortTimer+1,f,c
 19017  0027DE  502F               	movf	printSortTimer@curTime,w,c
 19018  0027E0  242A               	addwf	??_printSortTimer,w,c
 19019  0027E2  6E3F               	movwf	printSortTimer@cur_sec,c
 19020  0027E4  5030               	movf	printSortTimer@curTime+1,w,c
 19021  0027E6  202B               	addwfc	??_printSortTimer+1,w,c
 19022  0027E8  6E40               	movwf	printSortTimer@cur_sec+1,c
 19023                           
 19024                           ;sort.c: 292: unsigned int timeDiff = cur_sec - start_sec;
 19025  0027EA  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 19026  0027EE  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 19027  0027F2  1E2A               	comf	??_printSortTimer,f,c
 19028  0027F4  1E2B               	comf	??_printSortTimer+1,f,c
 19029  0027F6  4A2A               	infsnz	??_printSortTimer,f,c
 19030  0027F8  2A2B               	incf	??_printSortTimer+1,f,c
 19031  0027FA  503F               	movf	printSortTimer@cur_sec,w,c
 19032  0027FC  242A               	addwf	??_printSortTimer,w,c
 19033  0027FE  6E47               	movwf	printSortTimer@timeDiff,c
 19034  002800  5040               	movf	printSortTimer@cur_sec+1,w,c
 19035  002802  202B               	addwfc	??_printSortTimer+1,w,c
 19036  002804  6E48               	movwf	printSortTimer@timeDiff+1,c
 19037                           
 19038                           ;sort.c: 294: total_time = timeDiff;
 19039  002806  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 19040  00280A  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 19041                           
 19042                           ;sort.c: 296: if(timeDiff >= 179){
 19043  00280E  5048               	movf	printSortTimer@timeDiff+1,w,c
 19044  002810  E104               	bnz	i2u681_40
 19045  002812  0EB3               	movlw	179
 19046  002814  5C47               	subwf	printSortTimer@timeDiff,w,c
 19047  002816  A0D8               	btfss	status,0,c
 19048  002818  D003               	goto	i2l8015
 19049  00281A                     i2u681_40:
 19050                           
 19051                           ;sort.c: 297: machine_state = DoneSorting_state;
 19052  00281A  0E02               	movlw	2
 19053  00281C  0100               	movlb	0	; () banked
 19054  00281E  6FFC               	movwf	_machine_state& (0+255),b
 19055  002820                     i2l8015:
 19056                           
 19057                           ;sort.c: 299: }
 19058                           ;sort.c: 301: int hour = timeDiff / 3600;
 19059  002820  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 19060  002824  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 19061  002828  0E0E               	movlw	14
 19062  00282A  6E09               	movwf	i2___lwdiv@divisor+1,c
 19063  00282C  0E10               	movlw	16
 19064  00282E  6E08               	movwf	i2___lwdiv@divisor,c
 19065  002830  EC03  F020         	call	i2___lwdiv	;wreg free
 19066  002834  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 19067  002838  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 19068                           
 19069                           ;sort.c: 302: int min = (timeDiff % 3600) / 60;
 19070  00283C  0E0E               	movlw	14
 19071  00283E  6E04               	movwf	i2___lwmod@divisor+1,c
 19072  002840  0E10               	movlw	16
 19073  002842  6E03               	movwf	i2___lwmod@divisor,c
 19074  002844  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19075  002848  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19076  00284C  ECC2  F020         	call	i2___lwmod	;wreg free
 19077  002850  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 19078  002854  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 19079  002858  0E00               	movlw	0
 19080  00285A  6E09               	movwf	i2___lwdiv@divisor+1,c
 19081  00285C  0E3C               	movlw	60
 19082  00285E  6E08               	movwf	i2___lwdiv@divisor,c
 19083  002860  EC03  F020         	call	i2___lwdiv	;wreg free
 19084  002864  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 19085  002868  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 19086                           
 19087                           ;sort.c: 303: int sec = (timeDiff % 3600) % 60;
 19088  00286C  0E0E               	movlw	14
 19089  00286E  6E04               	movwf	i2___lwmod@divisor+1,c
 19090  002870  0E10               	movlw	16
 19091  002872  6E03               	movwf	i2___lwmod@divisor,c
 19092  002874  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19093  002878  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19094  00287C  ECC2  F020         	call	i2___lwmod	;wreg free
 19095  002880  C001  F045         	movff	?i2___lwmod,_printSortTimer$2412
 19096  002884  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2412+1
 19097                           
 19098                           ;sort.c: 303: int sec = (timeDiff % 3600) % 60;
 19099  002888  C045  F001         	movff	_printSortTimer$2412,i2___lwmod@dividend
 19100  00288C  C046  F002         	movff	_printSortTimer$2412+1,i2___lwmod@dividend+1
 19101  002890  0E00               	movlw	0
 19102  002892  6E04               	movwf	i2___lwmod@divisor+1,c
 19103  002894  0E3C               	movlw	60
 19104  002896  6E03               	movwf	i2___lwmod@divisor,c
 19105  002898  ECC2  F020         	call	i2___lwmod	;wreg free
 19106  00289C  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 19107  0028A0  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 19108                           
 19109                           ;sort.c: 305: lcdInst(0b10000000);;
 19110  0028A4  0E80               	movlw	128
 19111  0028A6  ECA9  F023         	call	i2_lcdInst
 19112                           
 19113                           ;sort.c: 306: printf("SORTING...");
 19114  0028AA  0E7C               	movlw	low STR_64
 19115  0028AC  6E0D               	movwf	i2printf@f,c
 19116  0028AE  0EFF               	movlw	high STR_64
 19117  0028B0  6E0E               	movwf	i2printf@f+1,c
 19118  0028B2  ECD4  F00A         	call	i2_printf	;wreg free
 19119                           
 19120                           ;sort.c: 307: lcdInst(0b11000000);;
 19121  0028B6  0EC0               	movlw	192
 19122  0028B8  ECA9  F023         	call	i2_lcdInst
 19123                           
 19124                           ;sort.c: 308: printf("TIME %d:%02d", min, sec);
 19125  0028BC  0E42               	movlw	low STR_65
 19126  0028BE  6E0D               	movwf	i2printf@f,c
 19127  0028C0  0EFF               	movlw	high STR_65
 19128  0028C2  6E0E               	movwf	i2printf@f+1,c
 19129  0028C4  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 19130  0028C8  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 19131  0028CC  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 19132  0028D0  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 19133  0028D4  ECD4  F00A         	call	i2_printf	;wreg free
 19134  0028D8  0012               	return		;funcret
 19135  0028DA                     __end_of_printSortTimer:
 19136                           	opt stack 0
 19137                           pclatu	equ	0xFFB
 19138                           pclath	equ	0xFFA
 19139                           tblptru	equ	0xFF8
 19140                           tblptrh	equ	0xFF7
 19141                           tblptrl	equ	0xFF6
 19142                           tablat	equ	0xFF5
 19143                           prodh	equ	0xFF4
 19144                           prodl	equ	0xFF3
 19145                           intcon	equ	0xFF2
 19146                           intcon2	equ	0xFF1
 19147                           intcon3	equ	0xFF0
 19148                           indf0	equ	0xFEF
 19149                           postinc0	equ	0xFEE
 19150                           fsr0h	equ	0xFEA
 19151                           fsr0l	equ	0xFE9
 19152                           wreg	equ	0xFE8
 19153                           postdec1	equ	0xFE5
 19154                           fsr1h	equ	0xFE2
 19155                           fsr1l	equ	0xFE1
 19156                           indf2	equ	0xFDF
 19157                           postinc2	equ	0xFDE
 19158                           postdec2	equ	0xFDD
 19159                           fsr2h	equ	0xFDA
 19160                           fsr2l	equ	0xFD9
 19161                           status	equ	0xFD8
 19162                           
 19163 ;; *************** function i2_printf *****************
 19164 ;; Defined at:
 19165 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 19166 ;; Parameters:    Size  Location     Type
 19167 ;;  f               2   12[COMRAM] PTR const unsigned char 
 19168 ;;		 -> STR_115(17), STR_114(17), STR_113(11), STR_112(18), 
 19169 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 19170 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 19171 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 19172 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 19173 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 19174 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 19175 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 19176 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 19177 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 19178 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 19179 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 19180 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 19181 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 19182 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 19183 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 19184 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 19185 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 19186 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 19187 ;;		 -> STR_27(19), STR_26(17), STR_25(19), STR_24(17), 
 19188 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 19189 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 19190 ;;		 -> STR_2(14), STR_1(18), 
 19191 ;; Auto vars:     Size  Location     Type
 19192 ;;  printf          4    0        struct .
 19193 ;;  printf          2   39[COMRAM] int 
 19194 ;;  printf          2   35[COMRAM] unsigned int 
 19195 ;;  printf          2   33[COMRAM] unsigned int 
 19196 ;;  printf          2   31[COMRAM] PTR void [1]
 19197 ;;		 -> ?i2_printf(2), ?_printf(2), 
 19198 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 19199 ;;		 -> STR_116(7), count_total(2), printRTC@month(4), UI@month(4), 
 19200 ;;  printf          1   38[COMRAM] char 
 19201 ;;  printf          1   37[COMRAM] unsigned char 
 19202 ;;  printf          1   28[COMRAM] char 
 19203 ;; Return value:  Size  Location     Type
 19204 ;;                  2   12[COMRAM] int 
 19205 ;; Registers used:
 19206 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19207 ;; Tracked objects:
 19208 ;;		On entry : 0/0
 19209 ;;		On exit  : 0/0
 19210 ;;		Unchanged: 0/0
 19211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19212 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19213 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19214 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19215 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19216 ;;Total ram usage:       29 bytes
 19217 ;; Hardware stack levels used:    1
 19218 ;; Hardware stack levels required when called:    2
 19219 ;; This function calls:
 19220 ;;		i2___lwdiv
 19221 ;;		i2___lwmod
 19222 ;;		i2___wmul
 19223 ;;		i2_isdigit
 19224 ;;		i2_putch
 19225 ;; This function is called by:
 19226 ;;		_change_state_to_menu_11
 19227 ;;		_change_state_to_menu_23
 19228 ;;		_change_state_to_logs_11
 19229 ;;		_change_state_to_logs_12
 19230 ;;		_change_state_to_logs_22
 19231 ;;		_change_state_to_logs_23
 19232 ;;		_change_state_to_logs_33
 19233 ;;		_change_state_to_logs_34
 19234 ;;		_printSortTimer
 19235 ;;		i2_change_state_to_menu_start
 19236 ;;		i2_change_state_to_menu_12
 19237 ;;		i2_change_state_to_menu_22
 19238 ;;		i2_printRTC
 19239 ;; This function uses a non-reentrant model
 19240 ;;
 19241                           
 19242                           	psect	text77
 19243  0015A8                     __ptext77:
 19244                           	opt stack 0
 19245  0015A8                     i2_printf:
 19246                           	opt stack 19
 19247                           
 19248                           ;doprnt.c: 466: va_list ap;
 19249                           ;doprnt.c: 499: signed char c;
 19250                           ;doprnt.c: 501: int width;
 19251                           ;doprnt.c: 506: signed char prec;
 19252                           ;doprnt.c: 508: unsigned char flag;
 19253                           ;doprnt.c: 523: union {
 19254                           ;doprnt.c: 524: unsigned long vd;
 19255                           ;doprnt.c: 525: double integ;
 19256                           ;doprnt.c: 526: } tmpval;
 19257                           ;doprnt.c: 528: unsigned int val;
 19258                           ;doprnt.c: 529: unsigned len;
 19259                           ;doprnt.c: 530: const char * cp;
 19260                           ;doprnt.c: 533: *ap = __va_start();
 19261                           
 19262                           ;incstack = 0
 19263  0015A8  0E0F               	movlw	low (?i2_printf+2)
 19264  0015AA  6E20               	movwf	i2printf@ap,c
 19265  0015AC  0E00               	movlw	high (?i2_printf+2)
 19266  0015AE  6E21               	movwf	i2printf@ap+1,c
 19267                           
 19268                           ;doprnt.c: 536: while(c = *f++) {
 19269  0015B0  D1A4               	goto	i2l5771
 19270  0015B2                     i2l5641:
 19271                           
 19272                           ;doprnt.c: 538: if(c != '%')
 19273  0015B2  0E25               	movlw	37
 19274  0015B4  1827               	xorwf	i2printf@c,w,c
 19275  0015B6  B4D8               	btfsc	status,2,c
 19276  0015B8  D004               	goto	i2l5645
 19277                           
 19278                           ;doprnt.c: 540: {
 19279                           ;doprnt.c: 541: (putch(c) );
 19280  0015BA  5027               	movf	i2printf@c,w,c
 19281  0015BC  ECA3  F023         	call	i2_putch
 19282                           
 19283                           ;doprnt.c: 542: continue;
 19284  0015C0  D19C               	goto	i2l5771
 19285  0015C2                     i2l5645:
 19286                           
 19287                           ;doprnt.c: 543: }
 19288                           ;doprnt.c: 546: width = 0;
 19289  0015C2  0E00               	movlw	0
 19290  0015C4  6E29               	movwf	i2printf@width+1,c
 19291  0015C6  0E00               	movlw	0
 19292  0015C8  6E28               	movwf	i2printf@width,c
 19293                           
 19294                           ;doprnt.c: 548: flag = 0;
 19295  0015CA  0E00               	movlw	0
 19296  0015CC  6E26               	movwf	i2printf@flag,c
 19297                           
 19298                           ;doprnt.c: 551: switch(*f) {
 19299                           
 19300                           ;doprnt.c: 550: for(;;) {
 19301  0015CE  D003               	goto	i2l5651
 19302  0015D0                     i2l5647:
 19303                           
 19304                           ;doprnt.c: 580: flag |= 0x04;
 19305  0015D0  8426               	bsf	i2printf@flag,2,c
 19306                           
 19307                           ;doprnt.c: 581: f++;
 19308  0015D2  4A0D               	infsnz	i2printf@f,f,c
 19309  0015D4  2A0E               	incf	i2printf@f+1,f,c
 19310  0015D6                     i2l5651:
 19311  0015D6  C00D  FFF6         	movff	i2printf@f,tblptrl
 19312  0015DA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19313  0015DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19314  0015DE  6AF8               	clrf	tblptru,c
 19315  0015E0                     	endif
 19316  0015E0                     	if	0	;tblptru may be non-zero
 19317  0015E0                     	endif
 19318  0015E0  0008               	tblrd		*
 19319  0015E2  50F5               	movf	tablat,w,c
 19320                           
 19321                           ; Switch size 1, requested type "space"
 19322                           ; Number of cases is 1, Range of values is 48 to 48
 19323                           ; switch strategies available:
 19324                           ; Name         Instructions Cycles
 19325                           ; simple_byte            4     3 (average)
 19326                           ;	Chosen strategy is simple_byte
 19327  0015E4  0A30               	xorlw	48	; case 48
 19328  0015E6  B4D8               	btfsc	status,2,c
 19329  0015E8  D7F3               	goto	i2l5647
 19330                           
 19331                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 19332                           
 19333                           ;doprnt.c: 586: }
 19334                           
 19335                           ;doprnt.c: 585: break;
 19336  0015EA  C00D  FFF6         	movff	i2printf@f,tblptrl
 19337  0015EE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19338  0015F2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19339  0015F2  6AF8               	clrf	tblptru,c
 19340  0015F4                     	endif
 19341  0015F4                     	if	0	;tblptru may be non-zero
 19342  0015F4                     	endif
 19343  0015F4  0008               	tblrd		*
 19344  0015F6  50F5               	movf	tablat,w,c
 19345  0015F8  EC4F  F023         	call	i2_isdigit
 19346  0015FC  A0D8               	btfss	status,0,c
 19347  0015FE  D0A6               	goto	i2l5699
 19348                           
 19349                           ;doprnt.c: 598: width = 0;
 19350  001600  0E00               	movlw	0
 19351  001602  6E29               	movwf	i2printf@width+1,c
 19352  001604  0E00               	movlw	0
 19353  001606  6E28               	movwf	i2printf@width,c
 19354  001608                     i2l5657:
 19355                           
 19356                           ;doprnt.c: 600: width *= 10;
 19357  001608  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 19358  00160C  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 19359  001610  0E00               	movlw	0
 19360  001612  6E04               	movwf	i2___wmul@multiplicand+1,c
 19361  001614  0E0A               	movlw	10
 19362  001616  6E03               	movwf	i2___wmul@multiplicand,c
 19363  001618  ECF5  F022         	call	i2___wmul	;wreg free
 19364  00161C  C001  F028         	movff	?i2___wmul,i2printf@width
 19365  001620  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 19366                           
 19367                           ;doprnt.c: 601: width += *f++ - '0';
 19368  001624  0ED0               	movlw	208
 19369  001626  6E19               	movwf	??i2_printf& (0+255),c
 19370  001628  0EFF               	movlw	255
 19371  00162A  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19372  00162C  C00D  FFF6         	movff	i2printf@f,tblptrl
 19373  001630  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19374  001634                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19375  001634  6AF8               	clrf	tblptru,c
 19376  001636                     	endif
 19377  001636                     	if	0	;tblptru may be non-zero
 19378  001636                     	endif
 19379  001636  0008               	tblrd		*
 19380  001638  50F5               	movf	tablat,w,c
 19381  00163A  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 19382  00163C  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 19383  00163E  5019               	movf	??i2_printf,w,c
 19384  001640  261B               	addwf	??i2_printf+2,f,c
 19385  001642  501A               	movf	??i2_printf+1,w,c
 19386  001644  221C               	addwfc	??i2_printf+3,f,c
 19387  001646  501B               	movf	??i2_printf+2,w,c
 19388  001648  2628               	addwf	i2printf@width,f,c
 19389  00164A  501C               	movf	??i2_printf+3,w,c
 19390  00164C  2229               	addwfc	i2printf@width+1,f,c
 19391  00164E  4A0D               	infsnz	i2printf@f,f,c
 19392  001650  2A0E               	incf	i2printf@f+1,f,c
 19393                           
 19394                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 19395  001652  C00D  FFF6         	movff	i2printf@f,tblptrl
 19396  001656  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19397  00165A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19398  00165A  6AF8               	clrf	tblptru,c
 19399  00165C                     	endif
 19400  00165C                     	if	0	;tblptru may be non-zero
 19401  00165C                     	endif
 19402  00165C  0008               	tblrd		*
 19403  00165E  50F5               	movf	tablat,w,c
 19404  001660  EC4F  F023         	call	i2_isdigit
 19405  001664  A0D8               	btfss	status,0,c
 19406  001666  D072               	goto	i2l5699
 19407  001668  D7CF               	goto	i2l5657
 19408  00166A                     i2l5665:
 19409                           
 19410                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 19411  00166A  C020  FFD9         	movff	i2printf@ap,fsr2l
 19412  00166E  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19413  001672  CFDE F01E          	movff	postinc2,i2printf@cp
 19414  001676  CFDD F01F          	movff	postdec2,i2printf@cp+1
 19415  00167A  0E02               	movlw	2
 19416  00167C  2620               	addwf	i2printf@ap,f,c
 19417  00167E  0E00               	movlw	0
 19418  001680  2221               	addwfc	i2printf@ap+1,f,c
 19419                           
 19420                           ;doprnt.c: 740: if(!cp)
 19421  001682  501E               	movf	i2printf@cp,w,c
 19422  001684  101F               	iorwf	i2printf@cp+1,w,c
 19423  001686  A4D8               	btfss	status,2,c
 19424  001688  D004               	goto	i2l5673
 19425                           
 19426                           ;doprnt.c: 741: cp = "(null)";
 19427  00168A  0EB6               	movlw	low STR_116
 19428  00168C  6E1E               	movwf	i2printf@cp,c
 19429  00168E  0EFF               	movlw	high STR_116
 19430  001690  6E1F               	movwf	i2printf@cp+1,c
 19431  001692                     i2l5673:
 19432                           
 19433                           ;doprnt.c: 745: len = 0;
 19434  001692  0E00               	movlw	0
 19435  001694  6E23               	movwf	i2printf@len+1,c
 19436  001696  0E00               	movlw	0
 19437  001698  6E22               	movwf	i2printf@len,c
 19438                           
 19439                           ;doprnt.c: 746: while(cp[len])
 19440  00169A  D002               	goto	i2l5677
 19441  00169C                     i2l5675:
 19442                           
 19443                           ;doprnt.c: 747: len++;
 19444  00169C  4A22               	infsnz	i2printf@len,f,c
 19445  00169E  2A23               	incf	i2printf@len+1,f,c
 19446  0016A0                     i2l5677:
 19447  0016A0  5022               	movf	i2printf@len,w,c
 19448  0016A2  241E               	addwf	i2printf@cp,w,c
 19449  0016A4  6E19               	movwf	??i2_printf& (0+255),c
 19450  0016A6  5023               	movf	i2printf@len+1,w,c
 19451  0016A8  201F               	addwfc	i2printf@cp+1,w,c
 19452  0016AA  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19453  0016AC  C019  FFF6         	movff	??i2_printf,tblptrl
 19454  0016B0  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 19455  0016B4  0E00               	movlw	low (__mediumconst shr (0+16))
 19456  0016B6  6EF8               	movwf	tblptru,c
 19457  0016B8  0E0F               	movlw	(high __ramtop+-1)
 19458  0016BA  64F7               	cpfsgt	tblptrh,c
 19459  0016BC  D003               	bra	i2u418_47
 19460  0016BE  0008               	tblrd		*
 19461  0016C0  50F5               	movf	tablat,w,c
 19462  0016C2  D005               	bra	i2u418_40
 19463  0016C4                     i2u418_47:
 19464  0016C4  CFF6 FFE9          	movff	tblptrl,fsr0l
 19465  0016C8  CFF7 FFEA          	movff	tblptrh,fsr0h
 19466  0016CC  50EF               	movf	indf0,w,c
 19467  0016CE                     i2u418_40:
 19468  0016CE  0900               	iorlw	0
 19469  0016D0  A4D8               	btfss	status,2,c
 19470  0016D2  D7E4               	goto	i2l5675
 19471                           
 19472                           ;doprnt.c: 757: if(width > len)
 19473  0016D4  5028               	movf	i2printf@width,w,c
 19474  0016D6  5C22               	subwf	i2printf@len,w,c
 19475  0016D8  5029               	movf	i2printf@width+1,w,c
 19476  0016DA  5823               	subwfb	i2printf@len+1,w,c
 19477  0016DC  B0D8               	btfsc	status,0,c
 19478  0016DE  D005               	goto	i2l5683
 19479                           
 19480                           ;doprnt.c: 758: width -= len;
 19481  0016E0  5022               	movf	i2printf@len,w,c
 19482  0016E2  5E28               	subwf	i2printf@width,f,c
 19483  0016E4  5023               	movf	i2printf@len+1,w,c
 19484  0016E6  5A29               	subwfb	i2printf@width+1,f,c
 19485  0016E8  D008               	goto	i2l5687
 19486  0016EA                     i2l5683:
 19487                           
 19488                           ;doprnt.c: 759: else
 19489                           ;doprnt.c: 760: width = 0;
 19490  0016EA  0E00               	movlw	0
 19491  0016EC  6E29               	movwf	i2printf@width+1,c
 19492  0016EE  0E00               	movlw	0
 19493  0016F0  6E28               	movwf	i2printf@width,c
 19494                           
 19495                           ;doprnt.c: 764: while(width--)
 19496  0016F2  D003               	goto	i2l5687
 19497  0016F4                     i2l5685:
 19498                           
 19499                           ;doprnt.c: 765: (putch(' ') );
 19500  0016F4  0E20               	movlw	32
 19501  0016F6  ECA3  F023         	call	i2_putch
 19502  0016FA                     i2l5687:
 19503  0016FA  0628               	decf	i2printf@width,f,c
 19504  0016FC  A0D8               	btfss	status,0,c
 19505  0016FE  0629               	decf	i2printf@width+1,f,c
 19506  001700  2828               	incf	i2printf@width,w,c
 19507  001702  E1F8               	bnz	i2l5685
 19508  001704  2829               	incf	i2printf@width+1,w,c
 19509  001706  B4D8               	btfsc	status,2,c
 19510  001708  D016               	goto	i2l5693
 19511  00170A  D7F4               	goto	i2l5685
 19512  00170C                     i2l5689:
 19513                           
 19514                           ;doprnt.c: 768: (putch(*cp++) );
 19515  00170C  C01E  FFF6         	movff	i2printf@cp,tblptrl
 19516  001710  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 19517  001714  0E00               	movlw	low (__mediumconst shr (0+16))
 19518  001716  6EF8               	movwf	tblptru,c
 19519  001718  0E0F               	movlw	(high __ramtop+-1)
 19520  00171A  64F7               	cpfsgt	tblptrh,c
 19521  00171C  D003               	bra	i2u422_47
 19522  00171E  0008               	tblrd		*
 19523  001720  50F5               	movf	tablat,w,c
 19524  001722  D005               	bra	i2u422_40
 19525  001724                     i2u422_47:
 19526  001724  CFF6 FFE9          	movff	tblptrl,fsr0l
 19527  001728  CFF7 FFEA          	movff	tblptrh,fsr0h
 19528  00172C  50EF               	movf	indf0,w,c
 19529  00172E                     i2u422_40:
 19530  00172E  ECA3  F023         	call	i2_putch
 19531  001732  4A1E               	infsnz	i2printf@cp,f,c
 19532  001734  2A1F               	incf	i2printf@cp+1,f,c
 19533  001736                     i2l5693:
 19534  001736  0622               	decf	i2printf@len,f,c
 19535  001738  A0D8               	btfss	status,0,c
 19536  00173A  0623               	decf	i2printf@len+1,f,c
 19537  00173C  2822               	incf	i2printf@len,w,c
 19538  00173E  E1E6               	bnz	i2l5689
 19539  001740  2823               	incf	i2printf@len+1,w,c
 19540  001742  B4D8               	btfsc	status,2,c
 19541  001744  D0DA               	goto	i2l5771
 19542  001746  D7E2               	goto	i2l5689
 19543  001748                     i2l5695:
 19544                           
 19545                           ;doprnt.c: 818: flag |= 0x40;
 19546  001748  8C26               	bsf	i2printf@flag,6,c
 19547                           
 19548                           ;doprnt.c: 822: }
 19549                           
 19550                           ;doprnt.c: 819: break;
 19551  00174A  D01B               	goto	i2l1255
 19552  00174C                     i2l5699:
 19553  00174C  C00D  FFF6         	movff	i2printf@f,tblptrl
 19554  001750  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19555  001754  4A0D               	infsnz	i2printf@f,f,c
 19556  001756  2A0E               	incf	i2printf@f+1,f,c
 19557  001758                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19558  001758  6AF8               	clrf	tblptru,c
 19559  00175A                     	endif
 19560  00175A                     	if	0	;tblptru may be non-zero
 19561  00175A                     	endif
 19562  00175A  0008               	tblrd		*
 19563  00175C  CFF5 F027          	movff	tablat,i2printf@c
 19564  001760  5027               	movf	i2printf@c,w,c
 19565                           
 19566                           ; Switch size 1, requested type "space"
 19567                           ; Number of cases is 5, Range of values is 0 to 117
 19568                           ; switch strategies available:
 19569                           ; Name         Instructions Cycles
 19570                           ; simple_byte           16     9 (average)
 19571                           ;	Chosen strategy is simple_byte
 19572  001762  0A00               	xorlw	0	; case 0
 19573  001764  B4D8               	btfsc	status,2,c
 19574  001766  0012               	return	
 19575  001768  0A64               	xorlw	100	; case 100
 19576  00176A  B4D8               	btfsc	status,2,c
 19577  00176C  D00A               	goto	i2l1255
 19578  00176E  0A0D               	xorlw	13	; case 105
 19579  001770  B4D8               	btfsc	status,2,c
 19580  001772  D007               	goto	i2l1255
 19581  001774  0A1A               	xorlw	26	; case 115
 19582  001776  B4D8               	btfsc	status,2,c
 19583  001778  D778               	goto	i2l5665
 19584  00177A  0A06               	xorlw	6	; case 117
 19585  00177C  B4D8               	btfsc	status,2,c
 19586  00177E  D7E4               	goto	i2l5695
 19587  001780  D0BC               	goto	i2l5771
 19588  001782                     i2l1255:
 19589                           
 19590                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 19591  001782  BC26               	btfsc	i2printf@flag,6,c
 19592  001784  D015               	goto	i2l5711
 19593                           
 19594                           ;doprnt.c: 1253: {
 19595                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 19596  001786  C020  FFD9         	movff	i2printf@ap,fsr2l
 19597  00178A  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19598  00178E  CFDE F024          	movff	postinc2,i2printf@val
 19599  001792  CFDD F025          	movff	postdec2,i2printf@val+1
 19600  001796  0E02               	movlw	2
 19601  001798  2620               	addwf	i2printf@ap,f,c
 19602  00179A  0E00               	movlw	0
 19603  00179C  2221               	addwfc	i2printf@ap+1,f,c
 19604                           
 19605                           ;doprnt.c: 1261: if((int)val < 0) {
 19606  00179E  AE25               	btfss	i2printf@val+1,7,c
 19607  0017A0  D013               	goto	i2l5715
 19608                           
 19609                           ;doprnt.c: 1262: flag |= 0x03;
 19610  0017A2  0E03               	movlw	3
 19611  0017A4  1226               	iorwf	i2printf@flag,f,c
 19612                           
 19613                           ;doprnt.c: 1263: val = -val;
 19614  0017A6  6C24               	negf	i2printf@val,c
 19615  0017A8  1E25               	comf	i2printf@val+1,f,c
 19616  0017AA  B0D8               	btfsc	status,0,c
 19617  0017AC  2A25               	incf	i2printf@val+1,f,c
 19618                           
 19619                           ;doprnt.c: 1264: }
 19620                           ;doprnt.c: 1266: }
 19621  0017AE  D00C               	goto	i2l5715
 19622  0017B0                     i2l5711:
 19623                           
 19624                           ;doprnt.c: 1268: else
 19625                           ;doprnt.c: 1273: {
 19626                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 19627  0017B0  C020  FFD9         	movff	i2printf@ap,fsr2l
 19628  0017B4  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19629  0017B8  CFDE F024          	movff	postinc2,i2printf@val
 19630  0017BC  CFDD F025          	movff	postdec2,i2printf@val+1
 19631  0017C0  0E02               	movlw	2
 19632  0017C2  2620               	addwf	i2printf@ap,f,c
 19633  0017C4  0E00               	movlw	0
 19634  0017C6  2221               	addwfc	i2printf@ap+1,f,c
 19635  0017C8                     i2l5715:
 19636                           
 19637                           ;doprnt.c: 1287: }
 19638                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 19639  0017C8  0E01               	movlw	1
 19640  0017CA  6E27               	movwf	i2printf@c,c
 19641  0017CC                     i2l5717:
 19642  0017CC  0E05               	movlw	5
 19643  0017CE  1827               	xorwf	i2printf@c,w,c
 19644  0017D0  B4D8               	btfsc	status,2,c
 19645  0017D2  D015               	goto	i2l5729
 19646                           
 19647                           ;doprnt.c: 1306: if(val < dpowers[c])
 19648  0017D4  5027               	movf	i2printf@c,w,c
 19649  0017D6  0D02               	mullw	2
 19650  0017D8  0E32               	movlw	low _dpowers
 19651  0017DA  24F3               	addwf	prodl,w,c
 19652  0017DC  6EF6               	movwf	tblptrl,c
 19653  0017DE  0EFB               	movlw	high _dpowers
 19654  0017E0  20F4               	addwfc	prodh,w,c
 19655  0017E2  6EF7               	movwf	tblptrh,c
 19656  0017E4                     	if	1	;There are 3 active tblptr bytes
 19657  0017E4  6AF8               	clrf	tblptru,c
 19658  0017E6  0E00               	movlw	low (__mediumconst shr (0+16))
 19659  0017E8  22F8               	addwfc	tblptru,f,c
 19660  0017EA                     	endif
 19661  0017EA  0009               	tblrd		*+
 19662  0017EC  50F5               	movf	tablat,w,c
 19663  0017EE  5C24               	subwf	i2printf@val,w,c
 19664  0017F0  0009               	tblrd		*+
 19665  0017F2  50F5               	movf	tablat,w,c
 19666  0017F4  5825               	subwfb	i2printf@val+1,w,c
 19667  0017F6  A0D8               	btfss	status,0,c
 19668  0017F8  D002               	goto	i2l5729
 19669                           
 19670                           ;doprnt.c: 1307: break;
 19671  0017FA  2A27               	incf	i2printf@c,f,c
 19672  0017FC  D7E7               	goto	i2l5717
 19673  0017FE                     i2l5729:
 19674                           
 19675                           ;doprnt.c: 1345: if(width && flag & 0x03)
 19676  0017FE  5028               	movf	i2printf@width,w,c
 19677  001800  1029               	iorwf	i2printf@width+1,w,c
 19678  001802  B4D8               	btfsc	status,2,c
 19679  001804  D009               	goto	i2l5735
 19680  001806  C026  F019         	movff	i2printf@flag,??i2_printf
 19681  00180A  0E03               	movlw	3
 19682  00180C  1619               	andwf	??i2_printf,f,c
 19683  00180E  B4D8               	btfsc	status,2,c
 19684  001810  D003               	goto	i2l5735
 19685                           
 19686                           ;doprnt.c: 1346: width--;
 19687  001812  0628               	decf	i2printf@width,f,c
 19688  001814  A0D8               	btfss	status,0,c
 19689  001816  0629               	decf	i2printf@width+1,f,c
 19690  001818                     i2l5735:
 19691                           
 19692                           ;doprnt.c: 1381: if(width > c)
 19693  001818  0E80               	movlw	128
 19694  00181A  BE27               	btfsc	i2printf@c,7,c
 19695  00181C  0E7F               	movlw	127
 19696  00181E  6E19               	movwf	??i2_printf& (0+255),c
 19697  001820  5028               	movf	i2printf@width,w,c
 19698  001822  5C27               	subwf	i2printf@c,w,c
 19699  001824  5029               	movf	i2printf@width+1,w,c
 19700  001826  0A80               	xorlw	128
 19701  001828  5819               	subwfb	??i2_printf& (0+255),w,c
 19702  00182A  B0D8               	btfsc	status,0,c
 19703  00182C  D007               	goto	i2l5739
 19704                           
 19705                           ;doprnt.c: 1382: width -= c;
 19706  00182E  5027               	movf	i2printf@c,w,c
 19707  001830  5E28               	subwf	i2printf@width,f,c
 19708  001832  0E00               	movlw	0
 19709  001834  BE27               	btfsc	i2printf@c,7,c
 19710  001836  0EFF               	movlw	255
 19711  001838  5A29               	subwfb	i2printf@width+1,f,c
 19712  00183A  D004               	goto	i2l5741
 19713  00183C                     i2l5739:
 19714                           
 19715                           ;doprnt.c: 1383: else
 19716                           ;doprnt.c: 1384: width = 0;
 19717  00183C  0E00               	movlw	0
 19718  00183E  6E29               	movwf	i2printf@width+1,c
 19719  001840  0E00               	movlw	0
 19720  001842  6E28               	movwf	i2printf@width,c
 19721  001844                     i2l5741:
 19722                           
 19723                           ;doprnt.c: 1387: if(flag & 0x04) {
 19724  001844  A426               	btfss	i2printf@flag,2,c
 19725  001846  D014               	goto	i2l5753
 19726                           
 19727                           ;doprnt.c: 1392: if(flag & 0x03)
 19728  001848  C026  F019         	movff	i2printf@flag,??i2_printf
 19729  00184C  0E03               	movlw	3
 19730  00184E  1619               	andwf	??i2_printf,f,c
 19731  001850  B4D8               	btfsc	status,2,c
 19732  001852  D003               	goto	i2l5747
 19733                           
 19734                           ;doprnt.c: 1393: (putch('-') );
 19735  001854  0E2D               	movlw	45
 19736  001856  ECA3  F023         	call	i2_putch
 19737  00185A                     i2l5747:
 19738                           
 19739                           ;doprnt.c: 1415: if(width)
 19740  00185A  5028               	movf	i2printf@width,w,c
 19741  00185C  1029               	iorwf	i2printf@width+1,w,c
 19742  00185E  B4D8               	btfsc	status,2,c
 19743  001860  D01E               	goto	i2l5763
 19744                           
 19745                           ;doprnt.c: 1417: (putch('0') );
 19746                           
 19747                           ;doprnt.c: 1416: do
 19748  001862  0E30               	movlw	48
 19749  001864  ECA3  F023         	call	i2_putch
 19750                           
 19751                           ;doprnt.c: 1418: while(--width);
 19752  001868  0628               	decf	i2printf@width,f,c
 19753  00186A  A0D8               	btfss	status,0,c
 19754  00186C  0629               	decf	i2printf@width+1,f,c
 19755  00186E  D7F5               	goto	i2l5747
 19756  001870                     i2l5753:
 19757                           
 19758                           ;doprnt.c: 1422: {
 19759                           ;doprnt.c: 1424: if(width
 19760                           ;doprnt.c: 1428: )
 19761  001870  5028               	movf	i2printf@width,w,c
 19762  001872  1029               	iorwf	i2printf@width+1,w,c
 19763  001874  B4D8               	btfsc	status,2,c
 19764  001876  D00A               	goto	i2l5759
 19765  001878                     i2l5755:
 19766                           
 19767                           ;doprnt.c: 1430: (putch(' ') );
 19768  001878  0E20               	movlw	32
 19769  00187A  ECA3  F023         	call	i2_putch
 19770                           
 19771                           ;doprnt.c: 1431: while(--width);
 19772  00187E  0628               	decf	i2printf@width,f,c
 19773  001880  A0D8               	btfss	status,0,c
 19774  001882  0629               	decf	i2printf@width+1,f,c
 19775  001884  5028               	movf	i2printf@width,w,c
 19776  001886  1029               	iorwf	i2printf@width+1,w,c
 19777  001888  A4D8               	btfss	status,2,c
 19778  00188A  D7F6               	goto	i2l5755
 19779  00188C                     i2l5759:
 19780                           
 19781                           ;doprnt.c: 1438: if(flag & 0x03)
 19782  00188C  C026  F019         	movff	i2printf@flag,??i2_printf
 19783  001890  0E03               	movlw	3
 19784  001892  1619               	andwf	??i2_printf,f,c
 19785  001894  B4D8               	btfsc	status,2,c
 19786  001896  D003               	goto	i2l5763
 19787                           
 19788                           ;doprnt.c: 1439: (putch('-') );
 19789  001898  0E2D               	movlw	45
 19790  00189A  ECA3  F023         	call	i2_putch
 19791  00189E                     i2l5763:
 19792                           
 19793                           ;doprnt.c: 1469: }
 19794                           ;doprnt.c: 1472: prec = c;
 19795  00189E  C027  F01D         	movff	i2printf@c,i2printf@prec
 19796                           
 19797                           ;doprnt.c: 1474: while(prec--) {
 19798  0018A2  D027               	goto	i2l5769
 19799  0018A4                     i2l5765:
 19800                           
 19801                           ;doprnt.c: 1478: {
 19802                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 19803  0018A4  501D               	movf	i2printf@prec,w,c
 19804  0018A6  0D02               	mullw	2
 19805  0018A8  0E32               	movlw	low _dpowers
 19806  0018AA  24F3               	addwf	prodl,w,c
 19807  0018AC  6EF6               	movwf	tblptrl,c
 19808  0018AE  0EFB               	movlw	high _dpowers
 19809  0018B0  20F4               	addwfc	prodh,w,c
 19810  0018B2  6EF7               	movwf	tblptrh,c
 19811  0018B4                     	if	1	;There are 3 active tblptr bytes
 19812  0018B4  6AF8               	clrf	tblptru,c
 19813  0018B6  0E00               	movlw	low (__mediumconst shr (0+16))
 19814  0018B8  22F8               	addwfc	tblptru,f,c
 19815  0018BA                     	endif
 19816  0018BA  0009               	tblrd		*+
 19817  0018BC  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 19818  0018C0  000A               	tblrd		*-
 19819  0018C2  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 19820  0018C6  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 19821  0018CA  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 19822  0018CE  EC03  F020         	call	i2___lwdiv	;wreg free
 19823  0018D2  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 19824  0018D6  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 19825  0018DA  0E00               	movlw	0
 19826  0018DC  6E04               	movwf	i2___lwmod@divisor+1,c
 19827  0018DE  0E0A               	movlw	10
 19828  0018E0  6E03               	movwf	i2___lwmod@divisor,c
 19829  0018E2  ECC2  F020         	call	i2___lwmod	;wreg free
 19830  0018E6  5001               	movf	?i2___lwmod,w,c
 19831  0018E8  0F30               	addlw	48
 19832  0018EA  6E27               	movwf	i2printf@c,c
 19833                           
 19834                           ;doprnt.c: 1523: }
 19835                           ;doprnt.c: 1524: (putch(c) );
 19836  0018EC  5027               	movf	i2printf@c,w,c
 19837  0018EE  ECA3  F023         	call	i2_putch
 19838  0018F2                     i2l5769:
 19839  0018F2  061D               	decf	i2printf@prec,f,c
 19840  0018F4  281D               	incf	i2printf@prec,w,c
 19841  0018F6  A4D8               	btfss	status,2,c
 19842  0018F8  D7D5               	goto	i2l5765
 19843  0018FA                     i2l5771:
 19844  0018FA  C00D  FFF6         	movff	i2printf@f,tblptrl
 19845  0018FE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19846  001902  4A0D               	infsnz	i2printf@f,f,c
 19847  001904  2A0E               	incf	i2printf@f+1,f,c
 19848  001906                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19849  001906  6AF8               	clrf	tblptru,c
 19850  001908                     	endif
 19851  001908                     	if	0	;tblptru may be non-zero
 19852  001908                     	endif
 19853  001908  0008               	tblrd		*
 19854  00190A  CFF5 F027          	movff	tablat,i2printf@c
 19855  00190E  5027               	movf	i2printf@c,w,c
 19856  001910  B4D8               	btfsc	status,2,c
 19857  001912  0012               	return	
 19858  001914  D64E               	goto	i2l5641
 19859  001916                     __end_ofi2_printf:
 19860                           	opt stack 0
 19861                           pclatu	equ	0xFFB
 19862                           pclath	equ	0xFFA
 19863                           tblptru	equ	0xFF8
 19864                           tblptrh	equ	0xFF7
 19865                           tblptrl	equ	0xFF6
 19866                           tablat	equ	0xFF5
 19867                           prodh	equ	0xFF4
 19868                           prodl	equ	0xFF3
 19869                           intcon	equ	0xFF2
 19870                           intcon2	equ	0xFF1
 19871                           intcon3	equ	0xFF0
 19872                           indf0	equ	0xFEF
 19873                           postinc0	equ	0xFEE
 19874                           fsr0h	equ	0xFEA
 19875                           fsr0l	equ	0xFE9
 19876                           wreg	equ	0xFE8
 19877                           postdec1	equ	0xFE5
 19878                           fsr1h	equ	0xFE2
 19879                           fsr1l	equ	0xFE1
 19880                           indf2	equ	0xFDF
 19881                           postinc2	equ	0xFDE
 19882                           postdec2	equ	0xFDD
 19883                           fsr2h	equ	0xFDA
 19884                           fsr2l	equ	0xFD9
 19885                           status	equ	0xFD8
 19886                           
 19887 ;; *************** function i2_putch *****************
 19888 ;; Defined at:
 19889 ;;		line 20 in file "lcd.c"
 19890 ;; Parameters:    Size  Location     Type
 19891 ;;  data            1    wreg     unsigned char 
 19892 ;; Auto vars:     Size  Location     Type
 19893 ;;  data            1    2[COMRAM] unsigned char 
 19894 ;; Return value:  Size  Location     Type
 19895 ;;                  1    wreg      void 
 19896 ;; Registers used:
 19897 ;;		wreg, status,2, status,0, cstack
 19898 ;; Tracked objects:
 19899 ;;		On entry : 0/0
 19900 ;;		On exit  : 0/0
 19901 ;;		Unchanged: 0/0
 19902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19904 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19906 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19907 ;;Total ram usage:        1 bytes
 19908 ;; Hardware stack levels used:    1
 19909 ;; Hardware stack levels required when called:    1
 19910 ;; This function calls:
 19911 ;;		i2_lcdNibble
 19912 ;; This function is called by:
 19913 ;;		i2_printf
 19914 ;; This function uses a non-reentrant model
 19915 ;;
 19916                           
 19917                           	psect	text78
 19918  004746                     __ptext78:
 19919                           	opt stack 0
 19920  004746                     i2_putch:
 19921                           	opt stack 19
 19922                           
 19923                           ;incstack = 0
 19924                           ;i2putch@data stored from wreg
 19925  004746  6E03               	movwf	i2putch@data,c
 19926                           
 19927                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 19928  004748  848C               	bsf	3980,2,c	;volatile
 19929                           
 19930                           ;lcd.c: 22: lcdNibble(data);
 19931  00474A  5003               	movf	i2putch@data,w,c
 19932  00474C  ECAE  F01F         	call	i2_lcdNibble
 19933  004750  0012               	return		;funcret
 19934  004752                     __end_ofi2_putch:
 19935                           	opt stack 0
 19936                           pclatu	equ	0xFFB
 19937                           pclath	equ	0xFFA
 19938                           tblptru	equ	0xFF8
 19939                           tblptrh	equ	0xFF7
 19940                           tblptrl	equ	0xFF6
 19941                           tablat	equ	0xFF5
 19942                           prodh	equ	0xFF4
 19943                           prodl	equ	0xFF3
 19944                           intcon	equ	0xFF2
 19945                           intcon2	equ	0xFF1
 19946                           intcon3	equ	0xFF0
 19947                           indf0	equ	0xFEF
 19948                           postinc0	equ	0xFEE
 19949                           fsr0h	equ	0xFEA
 19950                           fsr0l	equ	0xFE9
 19951                           wreg	equ	0xFE8
 19952                           postdec1	equ	0xFE5
 19953                           fsr1h	equ	0xFE2
 19954                           fsr1l	equ	0xFE1
 19955                           indf2	equ	0xFDF
 19956                           postinc2	equ	0xFDE
 19957                           postdec2	equ	0xFDD
 19958                           fsr2h	equ	0xFDA
 19959                           fsr2l	equ	0xFD9
 19960                           status	equ	0xFD8
 19961                           
 19962 ;; *************** function i2_isdigit *****************
 19963 ;; Defined at:
 19964 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 19965 ;; Parameters:    Size  Location     Type
 19966 ;;  c               1    wreg     unsigned char 
 19967 ;; Auto vars:     Size  Location     Type
 19968 ;;  c               1    2[COMRAM] unsigned char 
 19969 ;; Return value:  Size  Location     Type
 19970 ;;		None               void
 19971 ;; Registers used:
 19972 ;;		wreg, status,2, status,0
 19973 ;; Tracked objects:
 19974 ;;		On entry : 0/0
 19975 ;;		On exit  : 0/0
 19976 ;;		Unchanged: 0/0
 19977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19979 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19980 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19981 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19982 ;;Total ram usage:        3 bytes
 19983 ;; Hardware stack levels used:    1
 19984 ;; This function calls:
 19985 ;;		Nothing
 19986 ;; This function is called by:
 19987 ;;		i2_printf
 19988 ;; This function uses a non-reentrant model
 19989 ;;
 19990                           
 19991                           	psect	text79
 19992  00469E                     __ptext79:
 19993                           	opt stack 0
 19994  00469E                     i2_isdigit:
 19995                           	opt stack 20
 19996                           
 19997                           ;incstack = 0
 19998                           ;i2isdigit@c stored from wreg
 19999  00469E  6E03               	movwf	i2isdigit@c,c
 20000  0046A0  0E00               	movlw	0
 20001  0046A2  6E02               	movwf	i2_isdigit$1936,c
 20002  0046A4  0E3A               	movlw	58
 20003  0046A6  6003               	cpfslt	i2isdigit@c,c
 20004  0046A8  D005               	goto	i2l5345
 20005  0046AA  0E2F               	movlw	47
 20006  0046AC  6403               	cpfsgt	i2isdigit@c,c
 20007  0046AE  D002               	goto	i2l5345
 20008  0046B0  0E01               	movlw	1
 20009  0046B2  6E02               	movwf	i2_isdigit$1936,c
 20010  0046B4                     i2l5345:
 20011  0046B4  C002  F001         	movff	i2_isdigit$1936,??i2_isdigit
 20012  0046B8  3001               	rrcf	??i2_isdigit,w,c
 20013  0046BA  0012               	return	
 20014  0046BC                     __end_ofi2_isdigit:
 20015                           	opt stack 0
 20016                           pclatu	equ	0xFFB
 20017                           pclath	equ	0xFFA
 20018                           tblptru	equ	0xFF8
 20019                           tblptrh	equ	0xFF7
 20020                           tblptrl	equ	0xFF6
 20021                           tablat	equ	0xFF5
 20022                           prodh	equ	0xFF4
 20023                           prodl	equ	0xFF3
 20024                           intcon	equ	0xFF2
 20025                           intcon2	equ	0xFF1
 20026                           intcon3	equ	0xFF0
 20027                           indf0	equ	0xFEF
 20028                           postinc0	equ	0xFEE
 20029                           fsr0h	equ	0xFEA
 20030                           fsr0l	equ	0xFE9
 20031                           wreg	equ	0xFE8
 20032                           postdec1	equ	0xFE5
 20033                           fsr1h	equ	0xFE2
 20034                           fsr1l	equ	0xFE1
 20035                           indf2	equ	0xFDF
 20036                           postinc2	equ	0xFDE
 20037                           postdec2	equ	0xFDD
 20038                           fsr2h	equ	0xFDA
 20039                           fsr2l	equ	0xFD9
 20040                           status	equ	0xFD8
 20041                           
 20042 ;; *************** function i2___wmul *****************
 20043 ;; Defined at:
 20044 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 20045 ;; Parameters:    Size  Location     Type
 20046 ;;  multiplier      2    0[COMRAM] unsigned int 
 20047 ;;  multiplicand    2    2[COMRAM] unsigned int 
 20048 ;; Auto vars:     Size  Location     Type
 20049 ;;  __wmul          2    4[COMRAM] unsigned int 
 20050 ;; Return value:  Size  Location     Type
 20051 ;;                  2    0[COMRAM] unsigned int 
 20052 ;; Registers used:
 20053 ;;		wreg, status,2, status,0, prodl, prodh
 20054 ;; Tracked objects:
 20055 ;;		On entry : 0/0
 20056 ;;		On exit  : 0/0
 20057 ;;		Unchanged: 0/0
 20058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20059 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20060 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20062 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20063 ;;Total ram usage:        6 bytes
 20064 ;; Hardware stack levels used:    1
 20065 ;; This function calls:
 20066 ;;		Nothing
 20067 ;; This function is called by:
 20068 ;;		_printSortTimer
 20069 ;;		_retrieveLog
 20070 ;;		i2_printf
 20071 ;; This function uses a non-reentrant model
 20072 ;;
 20073                           
 20074                           	psect	text80
 20075  0045EA                     __ptext80:
 20076                           	opt stack 0
 20077  0045EA                     i2___wmul:
 20078                           	opt stack 20
 20079                           
 20080                           ;incstack = 0
 20081  0045EA  5001               	movf	i2___wmul@multiplier,w,c
 20082  0045EC  0203               	mulwf	i2___wmul@multiplicand,c
 20083  0045EE  CFF3 F005          	movff	prodl,i2___wmul@product
 20084  0045F2  CFF4 F006          	movff	prodh,i2___wmul@product+1
 20085  0045F6  5001               	movf	i2___wmul@multiplier,w,c
 20086  0045F8  0204               	mulwf	i2___wmul@multiplicand+1,c
 20087  0045FA  50F3               	movf	prodl,w,c
 20088  0045FC  2606               	addwf	i2___wmul@product+1,f,c
 20089  0045FE  5002               	movf	i2___wmul@multiplier+1,w,c
 20090  004600  0203               	mulwf	i2___wmul@multiplicand,c
 20091  004602  50F3               	movf	prodl,w,c
 20092  004604  2606               	addwf	i2___wmul@product+1,f,c
 20093  004606  C005  F001         	movff	i2___wmul@product,?i2___wmul
 20094  00460A  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 20095  00460E  0012               	return	
 20096  004610                     __end_ofi2___wmul:
 20097                           	opt stack 0
 20098                           pclatu	equ	0xFFB
 20099                           pclath	equ	0xFFA
 20100                           tblptru	equ	0xFF8
 20101                           tblptrh	equ	0xFF7
 20102                           tblptrl	equ	0xFF6
 20103                           tablat	equ	0xFF5
 20104                           prodh	equ	0xFF4
 20105                           prodl	equ	0xFF3
 20106                           intcon	equ	0xFF2
 20107                           intcon2	equ	0xFF1
 20108                           intcon3	equ	0xFF0
 20109                           indf0	equ	0xFEF
 20110                           postinc0	equ	0xFEE
 20111                           fsr0h	equ	0xFEA
 20112                           fsr0l	equ	0xFE9
 20113                           wreg	equ	0xFE8
 20114                           postdec1	equ	0xFE5
 20115                           fsr1h	equ	0xFE2
 20116                           fsr1l	equ	0xFE1
 20117                           indf2	equ	0xFDF
 20118                           postinc2	equ	0xFDE
 20119                           postdec2	equ	0xFDD
 20120                           fsr2h	equ	0xFDA
 20121                           fsr2l	equ	0xFD9
 20122                           status	equ	0xFD8
 20123                           
 20124 ;; *************** function i2___lwmod *****************
 20125 ;; Defined at:
 20126 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 20127 ;; Parameters:    Size  Location     Type
 20128 ;;  dividend        2    0[COMRAM] unsigned int 
 20129 ;;  divisor         2    2[COMRAM] unsigned int 
 20130 ;; Auto vars:     Size  Location     Type
 20131 ;;  __lwmod         1    4[COMRAM] unsigned char 
 20132 ;; Return value:  Size  Location     Type
 20133 ;;                  2    0[COMRAM] unsigned int 
 20134 ;; Registers used:
 20135 ;;		wreg, status,2, status,0
 20136 ;; Tracked objects:
 20137 ;;		On entry : 0/0
 20138 ;;		On exit  : 0/0
 20139 ;;		Unchanged: 0/0
 20140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20141 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20142 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20144 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20145 ;;Total ram usage:        5 bytes
 20146 ;; Hardware stack levels used:    1
 20147 ;; This function calls:
 20148 ;;		Nothing
 20149 ;; This function is called by:
 20150 ;;		_printSortTimer
 20151 ;;		i2_printf
 20152 ;; This function uses a non-reentrant model
 20153 ;;
 20154                           
 20155                           	psect	text81
 20156  004184                     __ptext81:
 20157                           	opt stack 0
 20158  004184                     i2___lwmod:
 20159                           	opt stack 20
 20160                           
 20161                           ;incstack = 0
 20162  004184  5003               	movf	i2___lwmod@divisor,w,c
 20163  004186  1004               	iorwf	i2___lwmod@divisor+1,w,c
 20164  004188  B4D8               	btfsc	status,2,c
 20165  00418A  D018               	goto	i2l1712
 20166  00418C  0E01               	movlw	1
 20167  00418E  6E05               	movwf	i2___lwmod@counter,c
 20168  004190  D004               	goto	i2l5377
 20169  004192                     i2l5375:
 20170  004192  90D8               	bcf	status,0,c
 20171  004194  3603               	rlcf	i2___lwmod@divisor,f,c
 20172  004196  3604               	rlcf	i2___lwmod@divisor+1,f,c
 20173  004198  2A05               	incf	i2___lwmod@counter,f,c
 20174  00419A                     i2l5377:
 20175  00419A  AE04               	btfss	i2___lwmod@divisor+1,7,c
 20176  00419C  D7FA               	goto	i2l5375
 20177  00419E                     i2l5379:
 20178  00419E  5003               	movf	i2___lwmod@divisor,w,c
 20179  0041A0  5C01               	subwf	i2___lwmod@dividend,w,c
 20180  0041A2  5004               	movf	i2___lwmod@divisor+1,w,c
 20181  0041A4  5802               	subwfb	i2___lwmod@dividend+1,w,c
 20182  0041A6  A0D8               	btfss	status,0,c
 20183  0041A8  D004               	goto	i2l5383
 20184  0041AA  5003               	movf	i2___lwmod@divisor,w,c
 20185  0041AC  5E01               	subwf	i2___lwmod@dividend,f,c
 20186  0041AE  5004               	movf	i2___lwmod@divisor+1,w,c
 20187  0041B0  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 20188  0041B2                     i2l5383:
 20189  0041B2  90D8               	bcf	status,0,c
 20190  0041B4  3204               	rrcf	i2___lwmod@divisor+1,f,c
 20191  0041B6  3203               	rrcf	i2___lwmod@divisor,f,c
 20192  0041B8  2E05               	decfsz	i2___lwmod@counter,f,c
 20193  0041BA  D7F1               	goto	i2l5379
 20194  0041BC                     i2l1712:
 20195  0041BC  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 20196  0041C0  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 20197  0041C4  0012               	return		;funcret
 20198  0041C6                     __end_ofi2___lwmod:
 20199                           	opt stack 0
 20200                           pclatu	equ	0xFFB
 20201                           pclath	equ	0xFFA
 20202                           tblptru	equ	0xFF8
 20203                           tblptrh	equ	0xFF7
 20204                           tblptrl	equ	0xFF6
 20205                           tablat	equ	0xFF5
 20206                           prodh	equ	0xFF4
 20207                           prodl	equ	0xFF3
 20208                           intcon	equ	0xFF2
 20209                           intcon2	equ	0xFF1
 20210                           intcon3	equ	0xFF0
 20211                           indf0	equ	0xFEF
 20212                           postinc0	equ	0xFEE
 20213                           fsr0h	equ	0xFEA
 20214                           fsr0l	equ	0xFE9
 20215                           wreg	equ	0xFE8
 20216                           postdec1	equ	0xFE5
 20217                           fsr1h	equ	0xFE2
 20218                           fsr1l	equ	0xFE1
 20219                           indf2	equ	0xFDF
 20220                           postinc2	equ	0xFDE
 20221                           postdec2	equ	0xFDD
 20222                           fsr2h	equ	0xFDA
 20223                           fsr2l	equ	0xFD9
 20224                           status	equ	0xFD8
 20225                           
 20226 ;; *************** function i2___lwdiv *****************
 20227 ;; Defined at:
 20228 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 20229 ;; Parameters:    Size  Location     Type
 20230 ;;  dividend        2    5[COMRAM] unsigned int 
 20231 ;;  divisor         2    7[COMRAM] unsigned int 
 20232 ;; Auto vars:     Size  Location     Type
 20233 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 20234 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 20235 ;; Return value:  Size  Location     Type
 20236 ;;                  2    5[COMRAM] unsigned int 
 20237 ;; Registers used:
 20238 ;;		wreg, status,2, status,0
 20239 ;; Tracked objects:
 20240 ;;		On entry : 0/0
 20241 ;;		On exit  : 0/0
 20242 ;;		Unchanged: 0/0
 20243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20244 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20245 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20247 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20248 ;;Total ram usage:        7 bytes
 20249 ;; Hardware stack levels used:    1
 20250 ;; This function calls:
 20251 ;;		Nothing
 20252 ;; This function is called by:
 20253 ;;		_printSortTimer
 20254 ;;		i2_printf
 20255 ;; This function uses a non-reentrant model
 20256 ;;
 20257                           
 20258                           	psect	text82
 20259  004006                     __ptext82:
 20260                           	opt stack 0
 20261  004006                     i2___lwdiv:
 20262                           	opt stack 20
 20263                           
 20264                           ;incstack = 0
 20265  004006  0E00               	movlw	0
 20266  004008  6E0B               	movwf	i2___lwdiv@quotient+1,c
 20267  00400A  0E00               	movlw	0
 20268  00400C  6E0A               	movwf	i2___lwdiv@quotient,c
 20269  00400E  5008               	movf	i2___lwdiv@divisor,w,c
 20270  004010  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 20271  004012  B4D8               	btfsc	status,2,c
 20272  004014  D01C               	goto	i2l1702
 20273  004016  0E01               	movlw	1
 20274  004018  6E0C               	movwf	i2___lwdiv@counter,c
 20275  00401A  D004               	goto	i2l5357
 20276  00401C                     i2l5355:
 20277  00401C  90D8               	bcf	status,0,c
 20278  00401E  3608               	rlcf	i2___lwdiv@divisor,f,c
 20279  004020  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 20280  004022  2A0C               	incf	i2___lwdiv@counter,f,c
 20281  004024                     i2l5357:
 20282  004024  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 20283  004026  D7FA               	goto	i2l5355
 20284  004028                     i2l5359:
 20285  004028  90D8               	bcf	status,0,c
 20286  00402A  360A               	rlcf	i2___lwdiv@quotient,f,c
 20287  00402C  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 20288  00402E  5008               	movf	i2___lwdiv@divisor,w,c
 20289  004030  5C06               	subwf	i2___lwdiv@dividend,w,c
 20290  004032  5009               	movf	i2___lwdiv@divisor+1,w,c
 20291  004034  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 20292  004036  A0D8               	btfss	status,0,c
 20293  004038  D005               	goto	i2l5367
 20294  00403A  5008               	movf	i2___lwdiv@divisor,w,c
 20295  00403C  5E06               	subwf	i2___lwdiv@dividend,f,c
 20296  00403E  5009               	movf	i2___lwdiv@divisor+1,w,c
 20297  004040  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 20298  004042  800A               	bsf	i2___lwdiv@quotient,0,c
 20299  004044                     i2l5367:
 20300  004044  90D8               	bcf	status,0,c
 20301  004046  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 20302  004048  3208               	rrcf	i2___lwdiv@divisor,f,c
 20303  00404A  2E0C               	decfsz	i2___lwdiv@counter,f,c
 20304  00404C  D7ED               	goto	i2l5359
 20305  00404E                     i2l1702:
 20306  00404E  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 20307  004052  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 20308  004056  0012               	return		;funcret
 20309  004058                     __end_ofi2___lwdiv:
 20310                           	opt stack 0
 20311                           pclatu	equ	0xFFB
 20312                           pclath	equ	0xFFA
 20313                           tblptru	equ	0xFF8
 20314                           tblptrh	equ	0xFF7
 20315                           tblptrl	equ	0xFF6
 20316                           tablat	equ	0xFF5
 20317                           prodh	equ	0xFF4
 20318                           prodl	equ	0xFF3
 20319                           intcon	equ	0xFF2
 20320                           intcon2	equ	0xFF1
 20321                           intcon3	equ	0xFF0
 20322                           indf0	equ	0xFEF
 20323                           postinc0	equ	0xFEE
 20324                           fsr0h	equ	0xFEA
 20325                           fsr0l	equ	0xFE9
 20326                           wreg	equ	0xFE8
 20327                           postdec1	equ	0xFE5
 20328                           fsr1h	equ	0xFE2
 20329                           fsr1l	equ	0xFE1
 20330                           indf2	equ	0xFDF
 20331                           postinc2	equ	0xFDE
 20332                           postdec2	equ	0xFDD
 20333                           fsr2h	equ	0xFDA
 20334                           fsr2l	equ	0xFD9
 20335                           status	equ	0xFD8
 20336                           
 20337 ;; *************** function i2_lcdInst *****************
 20338 ;; Defined at:
 20339 ;;		line 15 in file "lcd.c"
 20340 ;; Parameters:    Size  Location     Type
 20341 ;;  data            1    wreg     unsigned char 
 20342 ;; Auto vars:     Size  Location     Type
 20343 ;;  data            1    2[COMRAM] unsigned char 
 20344 ;; Return value:  Size  Location     Type
 20345 ;;                  1    wreg      void 
 20346 ;; Registers used:
 20347 ;;		wreg, status,2, status,0, cstack
 20348 ;; Tracked objects:
 20349 ;;		On entry : 0/0
 20350 ;;		On exit  : 0/0
 20351 ;;		Unchanged: 0/0
 20352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20354 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20356 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20357 ;;Total ram usage:        1 bytes
 20358 ;; Hardware stack levels used:    1
 20359 ;; Hardware stack levels required when called:    1
 20360 ;; This function calls:
 20361 ;;		i2_lcdNibble
 20362 ;; This function is called by:
 20363 ;;		_change_state_to_menu_11
 20364 ;;		_change_state_to_menu_23
 20365 ;;		_change_state_to_logs_11
 20366 ;;		_change_state_to_logs_12
 20367 ;;		_change_state_to_logs_22
 20368 ;;		_change_state_to_logs_23
 20369 ;;		_change_state_to_logs_33
 20370 ;;		_change_state_to_logs_34
 20371 ;;		_printSortTimer
 20372 ;;		i2_change_state_to_menu_start
 20373 ;;		i2_change_state_to_menu_12
 20374 ;;		i2_change_state_to_menu_22
 20375 ;;		i2_printRTC
 20376 ;; This function uses a non-reentrant model
 20377 ;;
 20378                           
 20379                           	psect	text83
 20380  004752                     __ptext83:
 20381                           	opt stack 0
 20382  004752                     i2_lcdInst:
 20383                           	opt stack 19
 20384                           
 20385                           ;incstack = 0
 20386                           ;i2lcdInst@data stored from wreg
 20387  004752  6E03               	movwf	i2lcdInst@data,c
 20388                           
 20389                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 20390  004754  948C               	bcf	3980,2,c	;volatile
 20391                           
 20392                           ;lcd.c: 17: lcdNibble(data);
 20393  004756  5003               	movf	i2lcdInst@data,w,c
 20394  004758  ECAE  F01F         	call	i2_lcdNibble
 20395  00475C  0012               	return		;funcret
 20396  00475E                     __end_ofi2_lcdInst:
 20397                           	opt stack 0
 20398                           pclatu	equ	0xFFB
 20399                           pclath	equ	0xFFA
 20400                           tblptru	equ	0xFF8
 20401                           tblptrh	equ	0xFF7
 20402                           tblptrl	equ	0xFF6
 20403                           tablat	equ	0xFF5
 20404                           prodh	equ	0xFF4
 20405                           prodl	equ	0xFF3
 20406                           intcon	equ	0xFF2
 20407                           intcon2	equ	0xFF1
 20408                           intcon3	equ	0xFF0
 20409                           indf0	equ	0xFEF
 20410                           postinc0	equ	0xFEE
 20411                           fsr0h	equ	0xFEA
 20412                           fsr0l	equ	0xFE9
 20413                           wreg	equ	0xFE8
 20414                           postdec1	equ	0xFE5
 20415                           fsr1h	equ	0xFE2
 20416                           fsr1l	equ	0xFE1
 20417                           indf2	equ	0xFDF
 20418                           postinc2	equ	0xFDE
 20419                           postdec2	equ	0xFDD
 20420                           fsr2h	equ	0xFDA
 20421                           fsr2l	equ	0xFD9
 20422                           status	equ	0xFD8
 20423                           
 20424 ;; *************** function i2_lcdNibble *****************
 20425 ;; Defined at:
 20426 ;;		line 25 in file "lcd.c"
 20427 ;; Parameters:    Size  Location     Type
 20428 ;;  data            1    wreg     unsigned char 
 20429 ;; Auto vars:     Size  Location     Type
 20430 ;;  data            1    1[COMRAM] unsigned char 
 20431 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 20432 ;; Return value:  Size  Location     Type
 20433 ;;                  1    wreg      void 
 20434 ;; Registers used:
 20435 ;;		wreg, status,2, status,0
 20436 ;; Tracked objects:
 20437 ;;		On entry : 0/0
 20438 ;;		On exit  : 0/0
 20439 ;;		Unchanged: 0/0
 20440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20442 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20444 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20445 ;;Total ram usage:        2 bytes
 20446 ;; Hardware stack levels used:    1
 20447 ;; This function calls:
 20448 ;;		Nothing
 20449 ;; This function is called by:
 20450 ;;		i2_lcdInst
 20451 ;;		i2_putch
 20452 ;; This function uses a non-reentrant model
 20453 ;;
 20454                           
 20455                           	psect	text84
 20456  003F5C                     __ptext84:
 20457                           	opt stack 0
 20458  003F5C                     i2_lcdNibble:
 20459                           	opt stack 19
 20460                           
 20461                           ;incstack = 0
 20462                           ;i2lcdNibble@data stored from wreg
 20463  003F5C  6E02               	movwf	i2lcdNibble@data,c
 20464                           
 20465                           ;lcd.c: 27: char temp = data & 0xF0;
 20466  003F5E  5002               	movf	i2lcdNibble@data,w,c
 20467  003F60  0BF0               	andlw	240
 20468  003F62  6E01               	movwf	i2lcdNibble@temp,c
 20469                           
 20470                           ;lcd.c: 28: LATD = LATD & 0x0F;
 20471  003F64  508C               	movf	3980,w,c	;volatile
 20472  003F66  0B0F               	andlw	15
 20473  003F68  6E8C               	movwf	3980,c	;volatile
 20474                           
 20475                           ;lcd.c: 29: LATD = temp | LATD;
 20476  003F6A  5001               	movf	i2lcdNibble@temp,w,c
 20477  003F6C  108C               	iorwf	3980,w,c	;volatile
 20478  003F6E  6E8C               	movwf	3980,c	;volatile
 20479                           
 20480                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 20481  003F70  868C               	bsf	3980,3,c	;volatile
 20482                           
 20483                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20484  003F72  0E42               	movlw	66
 20485  003F74                     i2u816_47:
 20486  003F74  2EE8               	decfsz	wreg,f,c
 20487  003F76  D7FE               	bra	i2u816_47
 20488  003F78  D000               	nop2	
 20489                           
 20490                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 20491  003F7A  968C               	bcf	3980,3,c	;volatile
 20492                           
 20493                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20494  003F7C  0E42               	movlw	66
 20495  003F7E                     i2u817_47:
 20496  003F7E  2EE8               	decfsz	wreg,f,c
 20497  003F80  D7FE               	bra	i2u817_47
 20498  003F82  D000               	nop2	
 20499                           
 20500                           ;lcd.c: 36: data = data << 4;
 20501  003F84  3802               	swapf	i2lcdNibble@data,w,c
 20502  003F86  0BF0               	andlw	240
 20503  003F88  6E02               	movwf	i2lcdNibble@data,c
 20504                           
 20505                           ;lcd.c: 38: temp = data & 0xF0;
 20506  003F8A  5002               	movf	i2lcdNibble@data,w,c
 20507  003F8C  0BF0               	andlw	240
 20508  003F8E  6E01               	movwf	i2lcdNibble@temp,c
 20509                           
 20510                           ;lcd.c: 39: LATD = LATD & 0x0F;
 20511  003F90  508C               	movf	3980,w,c	;volatile
 20512  003F92  0B0F               	andlw	15
 20513  003F94  6E8C               	movwf	3980,c	;volatile
 20514                           
 20515                           ;lcd.c: 40: LATD = temp | LATD;
 20516  003F96  5001               	movf	i2lcdNibble@temp,w,c
 20517  003F98  108C               	iorwf	3980,w,c	;volatile
 20518  003F9A  6E8C               	movwf	3980,c	;volatile
 20519                           
 20520                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 20521  003F9C  868C               	bsf	3980,3,c	;volatile
 20522                           
 20523                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20524  003F9E  0E42               	movlw	66
 20525  003FA0                     i2u818_47:
 20526  003FA0  2EE8               	decfsz	wreg,f,c
 20527  003FA2  D7FE               	bra	i2u818_47
 20528  003FA4  D000               	nop2	
 20529                           
 20530                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 20531  003FA6  968C               	bcf	3980,3,c	;volatile
 20532                           
 20533                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20534  003FA8  0E42               	movlw	66
 20535  003FAA                     i2u819_47:
 20536  003FAA  2EE8               	decfsz	wreg,f,c
 20537  003FAC  D7FE               	bra	i2u819_47
 20538  003FAE  D000               	nop2	
 20539  003FB0  0012               	return		;funcret
 20540  003FB2                     __end_ofi2_lcdNibble:
 20541                           	opt stack 0
 20542                           pclatu	equ	0xFFB
 20543                           pclath	equ	0xFFA
 20544                           tblptru	equ	0xFF8
 20545                           tblptrh	equ	0xFF7
 20546                           tblptrl	equ	0xFF6
 20547                           tablat	equ	0xFF5
 20548                           prodh	equ	0xFF4
 20549                           prodl	equ	0xFF3
 20550                           intcon	equ	0xFF2
 20551                           intcon2	equ	0xFF1
 20552                           intcon3	equ	0xFF0
 20553                           indf0	equ	0xFEF
 20554                           postinc0	equ	0xFEE
 20555                           fsr0h	equ	0xFEA
 20556                           fsr0l	equ	0xFE9
 20557                           wreg	equ	0xFE8
 20558                           postdec1	equ	0xFE5
 20559                           fsr1h	equ	0xFE2
 20560                           fsr1l	equ	0xFE1
 20561                           indf2	equ	0xFDF
 20562                           postinc2	equ	0xFDE
 20563                           postdec2	equ	0xFDD
 20564                           fsr2h	equ	0xFDA
 20565                           fsr2l	equ	0xFD9
 20566                           status	equ	0xFD8
 20567                           
 20568 ;; *************** function i2_getRTC *****************
 20569 ;; Defined at:
 20570 ;;		line 44 in file "RTC.c"
 20571 ;; Parameters:    Size  Location     Type
 20572 ;;		None
 20573 ;; Auto vars:     Size  Location     Type
 20574 ;;  getRTC          2    3[COMRAM] int 
 20575 ;; Return value:  Size  Location     Type
 20576 ;;                  1    wreg      void 
 20577 ;; Registers used:
 20578 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20579 ;; Tracked objects:
 20580 ;;		On entry : 0/0
 20581 ;;		On exit  : 0/0
 20582 ;;		Unchanged: 0/0
 20583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20585 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20587 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20588 ;;Total ram usage:        2 bytes
 20589 ;; Hardware stack levels used:    1
 20590 ;; Hardware stack levels required when called:    2
 20591 ;; This function calls:
 20592 ;;		i2_I2C_Master_Read
 20593 ;;		i2_I2C_Master_Start
 20594 ;;		i2_I2C_Master_Stop
 20595 ;;		i2_I2C_Master_Write
 20596 ;; This function is called by:
 20597 ;;		_printSortTimer
 20598 ;;		i2_printRTC
 20599 ;; This function uses a non-reentrant model
 20600 ;;
 20601                           
 20602                           	psect	text85
 20603  003C4C                     __ptext85:
 20604                           	opt stack 0
 20605  003C4C                     i2_getRTC:
 20606                           	opt stack 18
 20607                           
 20608                           ;RTC.c: 48: I2C_Master_Start();
 20609                           
 20610                           ;incstack = 0
 20611  003C4C  ECC9  F023         	call	i2_I2C_Master_Start	;wreg free
 20612                           
 20613                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 20614  003C50  0E00               	movlw	0
 20615  003C52  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20616  003C54  0ED0               	movlw	208
 20617  003C56  6E02               	movwf	i2I2C_Master_Write@d,c
 20618  003C58  ECB4  F023         	call	i2_I2C_Master_Write	;wreg free
 20619                           
 20620                           ;RTC.c: 50: I2C_Master_Write(0x00);
 20621  003C5C  0E00               	movlw	0
 20622  003C5E  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20623  003C60  0E00               	movlw	0
 20624  003C62  6E02               	movwf	i2I2C_Master_Write@d,c
 20625  003C64  ECB4  F023         	call	i2_I2C_Master_Write	;wreg free
 20626                           
 20627                           ;RTC.c: 51: I2C_Master_Stop();
 20628  003C68  ECC5  F023         	call	i2_I2C_Master_Stop	;wreg free
 20629                           
 20630                           ;RTC.c: 54: I2C_Master_Start();
 20631  003C6C  ECC9  F023         	call	i2_I2C_Master_Start	;wreg free
 20632                           
 20633                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 20634  003C70  0E00               	movlw	0
 20635  003C72  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20636  003C74  0ED1               	movlw	209
 20637  003C76  6E02               	movwf	i2I2C_Master_Write@d,c
 20638  003C78  ECB4  F023         	call	i2_I2C_Master_Write	;wreg free
 20639                           
 20640                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 20641  003C7C  0E00               	movlw	0
 20642  003C7E  6E05               	movwf	i2getRTC@i+1,c
 20643  003C80  0E00               	movlw	0
 20644  003C82  6E04               	movwf	i2getRTC@i,c
 20645  003C84                     i2l5613:
 20646  003C84  BE05               	btfsc	i2getRTC@i+1,7,c
 20647  003C86  D006               	goto	i2l5617
 20648  003C88  5005               	movf	i2getRTC@i+1,w,c
 20649  003C8A  E111               	bnz	i2l5623
 20650  003C8C  0E06               	movlw	6
 20651  003C8E  5C04               	subwf	i2getRTC@i,w,c
 20652  003C90  B0D8               	btfsc	status,0,c
 20653  003C92  D00D               	goto	i2l5623
 20654  003C94                     i2l5617:
 20655                           
 20656                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 20657  003C94  0E24               	movlw	low _time
 20658  003C96  2404               	addwf	i2getRTC@i,w,c
 20659  003C98  6ED9               	movwf	fsr2l,c
 20660  003C9A  0E01               	movlw	high _time
 20661  003C9C  2005               	addwfc	i2getRTC@i+1,w,c
 20662  003C9E  6EDA               	movwf	fsr2h,c
 20663  003CA0  0E01               	movlw	1
 20664  003CA2  EC08  F023         	call	i2_I2C_Master_Read
 20665  003CA6  6EDF               	movwf	indf2,c
 20666  003CA8  4A04               	infsnz	i2getRTC@i,f,c
 20667  003CAA  2A05               	incf	i2getRTC@i+1,f,c
 20668  003CAC  D7EB               	goto	i2l5613
 20669  003CAE                     i2l5623:
 20670                           
 20671                           ;RTC.c: 58: }
 20672                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 20673  003CAE  0E00               	movlw	0
 20674  003CB0  EC08  F023         	call	i2_I2C_Master_Read
 20675  003CB4  0101               	movlb	1	; () banked
 20676  003CB6  6F2A               	movwf	(_time+6)& (0+255),b
 20677                           
 20678                           ;RTC.c: 60: I2C_Master_Stop();
 20679  003CB8  ECC5  F023         	call	i2_I2C_Master_Stop	;wreg free
 20680  003CBC  0012               	return		;funcret
 20681  003CBE                     __end_ofi2_getRTC:
 20682                           	opt stack 0
 20683                           pclatu	equ	0xFFB
 20684                           pclath	equ	0xFFA
 20685                           tblptru	equ	0xFF8
 20686                           tblptrh	equ	0xFF7
 20687                           tblptrl	equ	0xFF6
 20688                           tablat	equ	0xFF5
 20689                           prodh	equ	0xFF4
 20690                           prodl	equ	0xFF3
 20691                           intcon	equ	0xFF2
 20692                           intcon2	equ	0xFF1
 20693                           intcon3	equ	0xFF0
 20694                           indf0	equ	0xFEF
 20695                           postinc0	equ	0xFEE
 20696                           fsr0h	equ	0xFEA
 20697                           fsr0l	equ	0xFE9
 20698                           wreg	equ	0xFE8
 20699                           postdec1	equ	0xFE5
 20700                           fsr1h	equ	0xFE2
 20701                           fsr1l	equ	0xFE1
 20702                           indf2	equ	0xFDF
 20703                           postinc2	equ	0xFDE
 20704                           postdec2	equ	0xFDD
 20705                           fsr2h	equ	0xFDA
 20706                           fsr2l	equ	0xFD9
 20707                           status	equ	0xFD8
 20708                           
 20709 ;; *************** function i2_I2C_Master_Write *****************
 20710 ;; Defined at:
 20711 ;;		line 49 in file "I2C.c"
 20712 ;; Parameters:    Size  Location     Type
 20713 ;;  d               2    1[COMRAM] unsigned int 
 20714 ;; Auto vars:     Size  Location     Type
 20715 ;;		None
 20716 ;; Return value:  Size  Location     Type
 20717 ;;                  1    wreg      void 
 20718 ;; Registers used:
 20719 ;;		wreg, status,2, status,0, cstack
 20720 ;; Tracked objects:
 20721 ;;		On entry : 0/0
 20722 ;;		On exit  : 0/0
 20723 ;;		Unchanged: 0/0
 20724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20725 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20728 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20729 ;;Total ram usage:        2 bytes
 20730 ;; Hardware stack levels used:    1
 20731 ;; Hardware stack levels required when called:    1
 20732 ;; This function calls:
 20733 ;;		i2_I2C_Master_Wait
 20734 ;; This function is called by:
 20735 ;;		i2_getRTC
 20736 ;; This function uses a non-reentrant model
 20737 ;;
 20738                           
 20739                           	psect	text86
 20740  004768                     __ptext86:
 20741                           	opt stack 0
 20742  004768                     i2_I2C_Master_Write:
 20743                           	opt stack 18
 20744                           
 20745                           ;I2C.c: 51: I2C_Master_Wait();
 20746                           
 20747                           ;incstack = 0
 20748  004768  EC8A  F023         	call	i2_I2C_Master_Wait	;wreg free
 20749                           
 20750                           ;I2C.c: 52: SSPBUF = d;
 20751  00476C  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 20752  004770  0012               	return		;funcret
 20753  004772                     __end_ofi2_I2C_Master_Write:
 20754                           	opt stack 0
 20755                           pclatu	equ	0xFFB
 20756                           pclath	equ	0xFFA
 20757                           tblptru	equ	0xFF8
 20758                           tblptrh	equ	0xFF7
 20759                           tblptrl	equ	0xFF6
 20760                           tablat	equ	0xFF5
 20761                           prodh	equ	0xFF4
 20762                           prodl	equ	0xFF3
 20763                           intcon	equ	0xFF2
 20764                           intcon2	equ	0xFF1
 20765                           intcon3	equ	0xFF0
 20766                           indf0	equ	0xFEF
 20767                           postinc0	equ	0xFEE
 20768                           fsr0h	equ	0xFEA
 20769                           fsr0l	equ	0xFE9
 20770                           wreg	equ	0xFE8
 20771                           postdec1	equ	0xFE5
 20772                           fsr1h	equ	0xFE2
 20773                           fsr1l	equ	0xFE1
 20774                           indf2	equ	0xFDF
 20775                           postinc2	equ	0xFDE
 20776                           postdec2	equ	0xFDD
 20777                           fsr2h	equ	0xFDA
 20778                           fsr2l	equ	0xFD9
 20779                           status	equ	0xFD8
 20780                           
 20781 ;; *************** function i2_I2C_Master_Stop *****************
 20782 ;; Defined at:
 20783 ;;		line 43 in file "I2C.c"
 20784 ;; Parameters:    Size  Location     Type
 20785 ;;		None
 20786 ;; Auto vars:     Size  Location     Type
 20787 ;;		None
 20788 ;; Return value:  Size  Location     Type
 20789 ;;                  1    wreg      void 
 20790 ;; Registers used:
 20791 ;;		wreg, status,2, status,0, cstack
 20792 ;; Tracked objects:
 20793 ;;		On entry : 0/0
 20794 ;;		On exit  : 0/0
 20795 ;;		Unchanged: 0/0
 20796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20801 ;;Total ram usage:        0 bytes
 20802 ;; Hardware stack levels used:    1
 20803 ;; Hardware stack levels required when called:    1
 20804 ;; This function calls:
 20805 ;;		i2_I2C_Master_Wait
 20806 ;; This function is called by:
 20807 ;;		i2_getRTC
 20808 ;; This function uses a non-reentrant model
 20809 ;;
 20810                           
 20811                           	psect	text87
 20812  00478A                     __ptext87:
 20813                           	opt stack 0
 20814  00478A                     i2_I2C_Master_Stop:
 20815                           	opt stack 18
 20816                           
 20817                           ;I2C.c: 45: I2C_Master_Wait();
 20818                           
 20819                           ;incstack = 0
 20820  00478A  EC8A  F023         	call	i2_I2C_Master_Wait	;wreg free
 20821                           
 20822                           ;I2C.c: 46: PEN = 1;
 20823  00478E  84C5               	bsf	4037,2,c	;volatile
 20824  004790  0012               	return		;funcret
 20825  004792                     __end_ofi2_I2C_Master_Stop:
 20826                           	opt stack 0
 20827                           pclatu	equ	0xFFB
 20828                           pclath	equ	0xFFA
 20829                           tblptru	equ	0xFF8
 20830                           tblptrh	equ	0xFF7
 20831                           tblptrl	equ	0xFF6
 20832                           tablat	equ	0xFF5
 20833                           prodh	equ	0xFF4
 20834                           prodl	equ	0xFF3
 20835                           intcon	equ	0xFF2
 20836                           intcon2	equ	0xFF1
 20837                           intcon3	equ	0xFF0
 20838                           indf0	equ	0xFEF
 20839                           postinc0	equ	0xFEE
 20840                           fsr0h	equ	0xFEA
 20841                           fsr0l	equ	0xFE9
 20842                           wreg	equ	0xFE8
 20843                           postdec1	equ	0xFE5
 20844                           fsr1h	equ	0xFE2
 20845                           fsr1l	equ	0xFE1
 20846                           indf2	equ	0xFDF
 20847                           postinc2	equ	0xFDE
 20848                           postdec2	equ	0xFDD
 20849                           fsr2h	equ	0xFDA
 20850                           fsr2l	equ	0xFD9
 20851                           status	equ	0xFD8
 20852                           
 20853 ;; *************** function i2_I2C_Master_Start *****************
 20854 ;; Defined at:
 20855 ;;		line 31 in file "I2C.c"
 20856 ;; Parameters:    Size  Location     Type
 20857 ;;		None
 20858 ;; Auto vars:     Size  Location     Type
 20859 ;;		None
 20860 ;; Return value:  Size  Location     Type
 20861 ;;                  1    wreg      void 
 20862 ;; Registers used:
 20863 ;;		wreg, status,2, status,0, cstack
 20864 ;; Tracked objects:
 20865 ;;		On entry : 0/0
 20866 ;;		On exit  : 0/0
 20867 ;;		Unchanged: 0/0
 20868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20872 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20873 ;;Total ram usage:        0 bytes
 20874 ;; Hardware stack levels used:    1
 20875 ;; Hardware stack levels required when called:    1
 20876 ;; This function calls:
 20877 ;;		i2_I2C_Master_Wait
 20878 ;; This function is called by:
 20879 ;;		i2_getRTC
 20880 ;; This function uses a non-reentrant model
 20881 ;;
 20882                           
 20883                           	psect	text88
 20884  004792                     __ptext88:
 20885                           	opt stack 0
 20886  004792                     i2_I2C_Master_Start:
 20887                           	opt stack 18
 20888                           
 20889                           ;I2C.c: 33: I2C_Master_Wait();
 20890                           
 20891                           ;incstack = 0
 20892  004792  EC8A  F023         	call	i2_I2C_Master_Wait	;wreg free
 20893                           
 20894                           ;I2C.c: 34: SEN = 1;
 20895  004796  80C5               	bsf	4037,0,c	;volatile
 20896  004798  0012               	return		;funcret
 20897  00479A                     __end_ofi2_I2C_Master_Start:
 20898                           	opt stack 0
 20899                           pclatu	equ	0xFFB
 20900                           pclath	equ	0xFFA
 20901                           tblptru	equ	0xFF8
 20902                           tblptrh	equ	0xFF7
 20903                           tblptrl	equ	0xFF6
 20904                           tablat	equ	0xFF5
 20905                           prodh	equ	0xFF4
 20906                           prodl	equ	0xFF3
 20907                           intcon	equ	0xFF2
 20908                           intcon2	equ	0xFF1
 20909                           intcon3	equ	0xFF0
 20910                           indf0	equ	0xFEF
 20911                           postinc0	equ	0xFEE
 20912                           fsr0h	equ	0xFEA
 20913                           fsr0l	equ	0xFE9
 20914                           wreg	equ	0xFE8
 20915                           postdec1	equ	0xFE5
 20916                           fsr1h	equ	0xFE2
 20917                           fsr1l	equ	0xFE1
 20918                           indf2	equ	0xFDF
 20919                           postinc2	equ	0xFDE
 20920                           postdec2	equ	0xFDD
 20921                           fsr2h	equ	0xFDA
 20922                           fsr2l	equ	0xFD9
 20923                           status	equ	0xFD8
 20924                           
 20925 ;; *************** function i2_I2C_Master_Read *****************
 20926 ;; Defined at:
 20927 ;;		line 55 in file "I2C.c"
 20928 ;; Parameters:    Size  Location     Type
 20929 ;;  a               1    wreg     unsigned char 
 20930 ;; Auto vars:     Size  Location     Type
 20931 ;;  a               1    1[COMRAM] unsigned char 
 20932 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 20933 ;; Return value:  Size  Location     Type
 20934 ;;                  1    wreg      unsigned char 
 20935 ;; Registers used:
 20936 ;;		wreg, status,2, status,0, cstack
 20937 ;; Tracked objects:
 20938 ;;		On entry : 0/0
 20939 ;;		On exit  : 0/0
 20940 ;;		Unchanged: 0/0
 20941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20943 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20945 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20946 ;;Total ram usage:        2 bytes
 20947 ;; Hardware stack levels used:    1
 20948 ;; Hardware stack levels required when called:    1
 20949 ;; This function calls:
 20950 ;;		i2_I2C_Master_Wait
 20951 ;; This function is called by:
 20952 ;;		i2_getRTC
 20953 ;; This function uses a non-reentrant model
 20954 ;;
 20955                           
 20956                           	psect	text89
 20957  004610                     __ptext89:
 20958                           	opt stack 0
 20959  004610                     i2_I2C_Master_Read:
 20960                           	opt stack 18
 20961                           
 20962                           ;incstack = 0
 20963                           ;i2I2C_Master_Read@a stored from wreg
 20964  004610  6E02               	movwf	i2I2C_Master_Read@a,c
 20965                           
 20966                           ;I2C.c: 57: unsigned char temp;
 20967                           ;I2C.c: 58: I2C_Master_Wait();
 20968  004612  EC8A  F023         	call	i2_I2C_Master_Wait	;wreg free
 20969                           
 20970                           ;I2C.c: 59: RCEN = 1;
 20971  004616  86C5               	bsf	4037,3,c	;volatile
 20972                           
 20973                           ;I2C.c: 60: I2C_Master_Wait();
 20974  004618  EC8A  F023         	call	i2_I2C_Master_Wait	;wreg free
 20975                           
 20976                           ;I2C.c: 61: temp = SSPBUF;
 20977  00461C  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 20978                           
 20979                           ;I2C.c: 62: I2C_Master_Wait();
 20980  004620  EC8A  F023         	call	i2_I2C_Master_Wait	;wreg free
 20981                           
 20982                           ;I2C.c: 63: ACKDT = (a)?0:1;
 20983  004624  5002               	movf	i2I2C_Master_Read@a,w,c
 20984  004626  A4D8               	btfss	status,2,c
 20985  004628  D002               	goto	i2u363_40
 20986  00462A  8AC5               	bsf	4037,5,c	;volatile
 20987  00462C  D001               	goto	i2l5321
 20988  00462E                     i2u363_40:
 20989  00462E  9AC5               	bcf	4037,5,c	;volatile
 20990  004630                     i2l5321:
 20991                           
 20992                           ;I2C.c: 64: ACKEN = 1;
 20993  004630  88C5               	bsf	4037,4,c	;volatile
 20994                           
 20995                           ;I2C.c: 65: return temp;
 20996  004632  5003               	movf	i2I2C_Master_Read@temp,w,c
 20997  004634  0012               	return	
 20998  004636                     __end_ofi2_I2C_Master_Read:
 20999                           	opt stack 0
 21000                           pclatu	equ	0xFFB
 21001                           pclath	equ	0xFFA
 21002                           tblptru	equ	0xFF8
 21003                           tblptrh	equ	0xFF7
 21004                           tblptrl	equ	0xFF6
 21005                           tablat	equ	0xFF5
 21006                           prodh	equ	0xFF4
 21007                           prodl	equ	0xFF3
 21008                           intcon	equ	0xFF2
 21009                           intcon2	equ	0xFF1
 21010                           intcon3	equ	0xFF0
 21011                           indf0	equ	0xFEF
 21012                           postinc0	equ	0xFEE
 21013                           fsr0h	equ	0xFEA
 21014                           fsr0l	equ	0xFE9
 21015                           wreg	equ	0xFE8
 21016                           postdec1	equ	0xFE5
 21017                           fsr1h	equ	0xFE2
 21018                           fsr1l	equ	0xFE1
 21019                           indf2	equ	0xFDF
 21020                           postinc2	equ	0xFDE
 21021                           postdec2	equ	0xFDD
 21022                           fsr2h	equ	0xFDA
 21023                           fsr2l	equ	0xFD9
 21024                           status	equ	0xFD8
 21025                           
 21026 ;; *************** function i2_I2C_Master_Wait *****************
 21027 ;; Defined at:
 21028 ;;		line 26 in file "I2C.c"
 21029 ;; Parameters:    Size  Location     Type
 21030 ;;		None
 21031 ;; Auto vars:     Size  Location     Type
 21032 ;;		None
 21033 ;; Return value:  Size  Location     Type
 21034 ;;                  1    wreg      void 
 21035 ;; Registers used:
 21036 ;;		wreg, status,2, status,0
 21037 ;; Tracked objects:
 21038 ;;		On entry : 0/0
 21039 ;;		On exit  : 0/0
 21040 ;;		Unchanged: 0/0
 21041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21044 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21045 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21046 ;;Total ram usage:        1 bytes
 21047 ;; Hardware stack levels used:    1
 21048 ;; This function calls:
 21049 ;;		Nothing
 21050 ;; This function is called by:
 21051 ;;		i2_I2C_Master_Start
 21052 ;;		i2_I2C_Master_Stop
 21053 ;;		i2_I2C_Master_Write
 21054 ;;		i2_I2C_Master_Read
 21055 ;; This function uses a non-reentrant model
 21056 ;;
 21057                           
 21058                           	psect	text90
 21059  004714                     __ptext90:
 21060                           	opt stack 0
 21061  004714                     i2_I2C_Master_Wait:
 21062                           	opt stack 18
 21063  004714                     i2l66:
 21064  004714  B4C7               	btfsc	4039,2,c	;volatile
 21065  004716  D7FE               	goto	i2l66
 21066  004718  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 21067  00471C  0E1F               	movlw	31
 21068  00471E  1601               	andwf	??i2_I2C_Master_Wait,f,c
 21069  004720  B4D8               	btfsc	status,2,c
 21070  004722  0012               	return	
 21071  004724  D7F7               	goto	i2l66
 21072  004726                     __end_ofi2_I2C_Master_Wait:
 21073                           	opt stack 0
 21074                           pclatu	equ	0xFFB
 21075                           pclath	equ	0xFFA
 21076                           tblptru	equ	0xFF8
 21077                           tblptrh	equ	0xFF7
 21078                           tblptrl	equ	0xFF6
 21079                           tablat	equ	0xFF5
 21080                           prodh	equ	0xFF4
 21081                           prodl	equ	0xFF3
 21082                           intcon	equ	0xFF2
 21083                           intcon2	equ	0xFF1
 21084                           intcon3	equ	0xFF0
 21085                           indf0	equ	0xFEF
 21086                           postinc0	equ	0xFEE
 21087                           fsr0h	equ	0xFEA
 21088                           fsr0l	equ	0xFE9
 21089                           wreg	equ	0xFE8
 21090                           postdec1	equ	0xFE5
 21091                           fsr1h	equ	0xFE2
 21092                           fsr1l	equ	0xFE1
 21093                           indf2	equ	0xFDF
 21094                           postinc2	equ	0xFDE
 21095                           postdec2	equ	0xFDD
 21096                           fsr2h	equ	0xFDA
 21097                           fsr2l	equ	0xFD9
 21098                           status	equ	0xFD8
 21099                           pclatu	equ	0xFFB
 21100                           pclath	equ	0xFFA
 21101                           tblptru	equ	0xFF8
 21102                           tblptrh	equ	0xFF7
 21103                           tblptrl	equ	0xFF6
 21104                           tablat	equ	0xFF5
 21105                           prodh	equ	0xFF4
 21106                           prodl	equ	0xFF3
 21107                           intcon	equ	0xFF2
 21108                           intcon2	equ	0xFF1
 21109                           intcon3	equ	0xFF0
 21110                           indf0	equ	0xFEF
 21111                           postinc0	equ	0xFEE
 21112                           fsr0h	equ	0xFEA
 21113                           fsr0l	equ	0xFE9
 21114                           wreg	equ	0xFE8
 21115                           postdec1	equ	0xFE5
 21116                           fsr1h	equ	0xFE2
 21117                           fsr1l	equ	0xFE1
 21118                           indf2	equ	0xFDF
 21119                           postinc2	equ	0xFDE
 21120                           postdec2	equ	0xFDD
 21121                           fsr2h	equ	0xFDA
 21122                           fsr2l	equ	0xFD9
 21123                           status	equ	0xFD8
 21124                           
 21125                           	psect	rparam
 21126  0000                     pclatu	equ	0xFFB
 21127                           pclath	equ	0xFFA
 21128                           tblptru	equ	0xFF8
 21129                           tblptrh	equ	0xFF7
 21130                           tblptrl	equ	0xFF6
 21131                           tablat	equ	0xFF5
 21132                           prodh	equ	0xFF4
 21133                           prodl	equ	0xFF3
 21134                           intcon	equ	0xFF2
 21135                           intcon2	equ	0xFF1
 21136                           intcon3	equ	0xFF0
 21137                           indf0	equ	0xFEF
 21138                           postinc0	equ	0xFEE
 21139                           fsr0h	equ	0xFEA
 21140                           fsr0l	equ	0xFE9
 21141                           wreg	equ	0xFE8
 21142                           postdec1	equ	0xFE5
 21143                           fsr1h	equ	0xFE2
 21144                           fsr1l	equ	0xFE1
 21145                           indf2	equ	0xFDF
 21146                           postinc2	equ	0xFDE
 21147                           postdec2	equ	0xFDD
 21148                           fsr2h	equ	0xFDA
 21149                           fsr2l	equ	0xFD9
 21150                           status	equ	0xFD8
 21151                           
 21152                           	psect	temp
 21153  00007E                     btemp:
 21154                           	opt stack 0
 21155  00007E                     	ds	1
 21156  0000                     int$flags	set	btemp
 21157                           pclatu	equ	0xFFB
 21158                           pclath	equ	0xFFA
 21159                           tblptru	equ	0xFF8
 21160                           tblptrh	equ	0xFF7
 21161                           tblptrl	equ	0xFF6
 21162                           tablat	equ	0xFF5
 21163                           prodh	equ	0xFF4
 21164                           prodl	equ	0xFF3
 21165                           intcon	equ	0xFF2
 21166                           intcon2	equ	0xFF1
 21167                           intcon3	equ	0xFF0
 21168                           indf0	equ	0xFEF
 21169                           postinc0	equ	0xFEE
 21170                           fsr0h	equ	0xFEA
 21171                           fsr0l	equ	0xFE9
 21172                           wreg	equ	0xFE8
 21173                           postdec1	equ	0xFE5
 21174                           fsr1h	equ	0xFE2
 21175                           fsr1l	equ	0xFE1
 21176                           indf2	equ	0xFDF
 21177                           postinc2	equ	0xFDE
 21178                           postdec2	equ	0xFDD
 21179                           fsr2h	equ	0xFDA
 21180                           fsr2l	equ	0xFD9
 21181                           status	equ	0xFD8


Data Sizes:
    Strings     1219
    Constant    27
    Data        8
    BSS         120
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      55
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_116(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_115(CODE[17]), STR_114(CODE[17]), STR_113(CODE[11]), STR_112(CODE[18]), 
		 -> STR_111(CODE[18]), STR_110(CODE[17]), STR_109(CODE[15]), STR_108(CODE[15]), 
		 -> STR_107(CODE[15]), STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[17]), 
		 -> STR_103(CODE[16]), STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), 
		 -> STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[17]), STR_96(CODE[15]), 
		 -> STR_95(CODE[11]), STR_94(CODE[17]), STR_93(CODE[11]), STR_92(CODE[17]), 
		 -> STR_91(CODE[14]), STR_90(CODE[15]), STR_89(CODE[14]), STR_88(CODE[10]), 
		 -> STR_87(CODE[9]), STR_86(CODE[9]), STR_85(CODE[10]), STR_84(CODE[10]), 
		 -> STR_83(CODE[16]), STR_82(CODE[15]), STR_81(CODE[3]), STR_80(CODE[15]), 
		 -> STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), 
		 -> STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), 
		 -> STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), 
		 -> STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), 
		 -> STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), 
		 -> STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), 
		 -> STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), 
		 -> STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[19]), STR_24(CODE[17]), 
		 -> STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), 
		 -> STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), 
		 -> STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getIR->_readIR
    _readIR->_readADC
    _ID->_getMAG
    _getMAG->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _ToggleTestA5->_printf
    _PusherTestA5->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _initServos->_updateServoPosition

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  176735
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   19713
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              5     5      0   15359
                                             49 BANK0      5     5      0
                        _EEPROM_read
                       _EEPROM_write
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                  10    10      0     253
                                              8 BANK0     10    10      0
                             _getMAG
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    4101
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10722
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3    9975
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   21840
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   20926
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   43432
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12647
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8279
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8279
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   79915
                                             70 BANK0      2     2      0
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                       _PusherTestA5
                       _ToggleTestA5
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8391
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8279
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   13623
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _ToggleTestA5                                         3     3      0    8304
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTestA5                                         2     2      0    8279
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8279
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   16481
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8144
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    4101
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    4101
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _ToggleTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _getMAG
         _readMAG
           _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      37       7       21.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     134      34        0.0%
DATA                 0      0     134       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Mar 19 18:00:01 2017

                                    _i 00E4                     i2_I2C_Master_Start 4792  
                   i2_I2C_Master_Write 4768                                     l66 4700  
                                   _ID 2C2E                            __CFG_CPD$ON 000000  
                                   _UI 08CA                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ID@i 008A  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 09A0  
                                  l602 1FDE                                    l487 35BE  
                                  l746 2D46                                    l747 2D60  
                                  l926 338C                                    l792 3C12  
                                  l939 46CC                                    l948 3016  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00E6                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  _log_count_can_w_lab 00EC        __end_of_change_state_to_menu_11 43C6  
      __end_of_change_state_to_menu_12 4236        __end_of_change_state_to_menu_22 41FE  
      __end_of_change_state_to_menu_23 4396           _f_can_coming_to_distribution 006F  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 44B6  
      __end_of_change_state_to_logs_12 4486        __end_of_change_state_to_logs_22 4456  
      __end_of_change_state_to_logs_23 4540        __end_of_change_state_to_logs_33 4426  
      __end_of_change_state_to_logs_34 43F6                                   ??_ID 0088  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1101 0126  
                                 l1104 018C                                   l1201 3F56  
                                 l1105 01DA                                   l1210 3A1A  
                                 l1106 0240                                   l1131 05E8  
                                 l1107 028E                                   l1036 32C0  
                                 l1062 34B0                                   l1143 0782  
                                 l1071 1C8C                                   l1039 32E0  
                                 l1161 3ADA                                   l1170 3B06  
                                 l1218 3A4E                                   l1171 3B0A  
                                 l1059 34AC                                   l1148 0858  
                                 l1068 1C88                                   l1173 3B48  
                                 l1165 3AF6                                   l1182 38EE  
                                 l1094 007C                                   l1255 13B6  
                                 l1191 3922                                   l1167 3AFA  
                                 l1192 393C                                   l1168 3AFE  
                                 l1169 3B02                                   l1097 0080  
                                 l1188 38FE                                   l1702 3BCC  
                                 l1198 3F34                                   l1712 3DE6  
                                 l1649 374C                                   l5211 4580  
                                 l5213 4592                                   l6013 33F4  
                                 l6021 3416                                   l6025 342C  
                                 l6017 33FE                                   l5411 11A4  
                                 l7003 0804                                   l5235 450A  
                                 l5253 45B8                                   l5421 11E2  
                                 l5405 117E                                   l7101 3A42  
                                 l7013 0842                                   l6029 3436  
                                 l5271 3B88                                   l5511 14C8  
                                 l5503 14A4                                   l5415 11AE  
                                 l7023 0872                                   l7007 081C  
                                 l6151 3998                                   l5281 3BBE  
                                 l5273 3B8E                                   l5505 14AE  
                                 l5441 12A2                                   l5409 1192  
                                 l7121 3B0E                                   l7033 089A  
                                 l7025 0878                                   l5601 373A  
                                 l5291 3DAE                                   l5523 150A  
                                 l5451 131A                                   l7043 08C2  
                                 l7035 08A0                                   l6147 3982  
                                 l6411 2CCA                                   l6059 3FFA  
                                 l5269 3B7C                                   l5293 3DB4  
                                 l5533 157C                                   l5517 14E4  
                                 l5453 1332                                   l5437 1290  
                                 l5429 125E                                   l7029 0882  
                                 l5541 424C                                   l6157 39C4  
                                 l6421 2CFC                                   l5519 14F0  
                                 l5527 151E                                   l5447 1308  
                                 l5439 129C                                   l5463 137C  
                                 l5535 1588                                   l7039 08AA  
                                 l7231 3634                                   l5551 3AAA  
                                 l5297 3DD8                                   l5289 3DA2  
                                 l5529 1524                                   l5481 140E  
                                 l5457 135E                                   l5449 1314  
                                 l7065 390C                                   l7233 3640  
                                 l7225 3616                                   l7401 0AEE  
                                 l6425 2D0A                                   l6361 30B8  
                                 l5475 13EE                                   l5459 1376  
                                 l6603 1EA2                                   l7251 3698  
                                 l7243 3676                                   l7235 3646  
                                 l7219 3600                                   l5547 3A94  
                                 l5539 4240                                   l5811 2060  
                                 l5803 1FE8                                   l7411 0B18  
                                 l6435 2D30                                   l8051 3598  
                                 l8043 356E                                   l5493 144A  
                                 l5557 3ACA                                   l5821 20F6  
                                 l5813 207E                                   l5805 2006  
                                 l7405 0B06                                   l7341 09D0  
                                 l6461 2DD0                                   l6429 2D18  
                                 l8061 35B4                                   l8053 359E  
                                 l8045 3584                                   l5575 3BFE  
                                 l5479 1408                                   l6615 1EEA  
                                 l6607 1ED8                                   l7247 3684  
                                 l7271 3848                                   l7263 3824  
                                 l5823 2114                                   l5815 209C  
                                 l5807 2024                                   l5831 21AE  
                                 l7511 0ED4                                   l7415 0B22  
                                 l7335 09B8                                   l5591 36E0  
                                 l6463 2DEA                                   l8063 35BA  
                                 _ADIE 007CEE                                   l5577 3C28  
                                 l6801 041C                                   l7273 3854  
                                 l5825 2132                                   l5817 20BA  
                                 l5809 2042                                   l7441 0BE6  
                                 l7353 0A04                                   l7345 09DA  
                                 l7337 09BE                                   l5593 36E6  
                                 l6457 2D9C                                   l6377 30F2  
                                 l8049 3592                                   l5499 146C  
                                 l6811 0444                                   l6619 1F20  
                                 l6547 1CDC                                   l7275 385A  
                                 l7283 388C                                   l7267 3834  
                                 l5819 20D8                                   l7515 0EDE  
                                 l7451 0C7C                                   l7443 0C04  
                                 l7435 0B8C                                   l7419 0B3A  
                                 l6459 2DB6                                   l6467 2E04  
                                 l8067 35C0                                   l6805 0434  
                                 l6661 00F0                                   l6565 1D94  
                                 l5829 2150                                   l7613 10A2  
                                 l7605 1080                                   l7533 0F2A  
                                 l7525 0F08                                   l7453 0C9A  
                                 l7445 0C22                                   l7437 0BAA  
                                 l7373 0A6C                                   l7349 09F2  
                                 l5589 36D0                                   l6469 2E32  
                                 l6911 0652                                   l6903 0630  
                                 l6831 04B8                                   l6823 0496  
                                 l6815 045C                                   l6807 043A  
                                 l6583 1E26                                   l7287 38A0  
                                 l7279 387E                                   l7631 1100  
                                 l7551 0F90                                   l7519 0EF6  
                                 l7455 0CB8                                   l7447 0C40  
                                 l7439 0BC8                                   l7463 0D12  
                                 l7367 0A5C                                   l7383 0A92  
                                 l6921 067A                                   l6913 0658  
                                 l6841 04E0                                   l6833 04BE  
                                 l6753 032C                                   l6745 030A  
                                 l6665 00FA                                   l6577 1DE4  
                                 l7609 108A                                   l7529 0F12  
                                 l7473 0DC2                                   l7457 0CD6  
                                 l7449 0C5E                                   l7465 0D76  
                                 l7377 0A84                                   l7369 0A62  
                                 l6907 063A                                   l6827 04A0  
                                 l6771 038E                                   l6763 0354  
                                 l6755 0332                                   l6659 00EA  
                                 l6595 1E72                                   l7635 110A  
                                 l7555 0F9A                                   l7491 0E0E  
                                 l7483 0DEC                                   l7459 0CF4  
                                 l5971 3782                                   l6933 06BE  
                                 l6917 0662                                   l6853 0524  
                                 l6837 04C8                                   l6781 03B6  
                                 l6749 0314                                   l6669 0112  
                                 l5797 1F5C                                   l7653 1156  
                                 l7645 1134                                   l7573 0FE6  
                                 l7565 0FC4                                   l7477 0DDA  
                                 l7469 0DB8                                   l7397 0AE4  
                                 l6943 06E6                                   l6863 054C  
                                 l6775 0398                                   l6759 033C  
                                 l7639 1122                                   l7591 104C  
                                 l7559 0FB2                                   l7487 0DF6  
                                 l7911 2F50                                   l5967 376C  
                                 l6937 06D6                                   l6929 06B4  
                                 l6857 053C                                   l6849 051A  
                                 l6785 03C0                                   l7649 113E  
                                 l7569 0FCE                                   l7657 1162  
                                 l5977 37F8                                   l6963 075A  
                                 l6955 0738                                   l6947 06FE  
                                 l6939 06DC                                   l6883 05C0  
                                 l6875 059E                                   l6867 0564  
                                 l6859 0542                                   l6779 03B0  
                                 l7595 1056                                   l6965 0760  
                                 l6885 05C6                                   l6797 0412  
                                 l6789 03D8                                   l7909 2F3C  
                                 l6959 0742                                   l6879 05A8  
                                 l7599 106E                                   l7935 2FD0  
                                 l6993 07DC                                   l6969 076A  
                                 l6889 05D0                                   l7971 32F8  
                                 l7947 3262                                   l6997 07F4  
                                 l6989 07D2                                   l7981 3316  
                                 l7973 32FE                                   l7965 32E6  
                                 l6999 07FA                                   l7975 3304  
                                 l7967 32EC                                   l7977 330A  
                                 l7969 32F2                                   l7985 331C  
                                 l7979 3310                                   STR_1 FBC5  
                                 STR_2 FF27                                   STR_3 FBB3  
                                 STR_4 FE4A                                   STR_5 FBB3  
                                 STR_6 FE08                                   STR_7 FFC4  
                                 STR_8 FFDB                                   STR_9 FFCB  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u5020 1F0E  
                                 u5110 01DA                                   u5130 028E  
                                 u3530 4508                                   u5028 1F12  
                                 u4440 1FDE                                   u4425 3E20  
                                 u3810 12DC                                   u5090 0126  
                                 u3730 40E8                                   _PEIE 007F96  
                                 u3740 40EA                                   u3750 4134  
                                 u3751 4130                                   u7007 2CA0  
                                 u3760 4136                                   u4800 2C5E  
                                 u3817 12D2                                   u7017 2D4A  
                                 u3850 1354                                   u7107 343E  
                                 u7027 2D54                                   _RCEN 007E2B  
                                 u7117 4146                                   u7037 2D78  
                                 u4830 2CBA                                   u8007 1A40  
                                 u7207 0B54                                   u7127 417A  
                                 u7047 42C0                                   u4808 2C62  
                                 u3857 134A                                   u8017 1A74  
                                 u7217 0DCA                                   u7137 08E2  
                                 u7057 2E40                                   u8107 3D46  
                                 u8027 1AA8                                   u7307 105E  
                                 u7227 0DFE                                   u7147 09E2  
                                 u7067 2E74                                   u8117 3D50  
                                 u8037 1ADC                                   u7317 1092  
                                 u7237 0E28                                   u7157 0A1E  
                                 u7077 2EA8                                   u4950 1D1E  
                                 u4838 2CBE                                   u8127 3D7C  
                                 u8047 1B10                                   u7407 1CCC  
                                 u7327 10BC                                   u7247 0EE6  
                                 u7167 0A74                                   u7087 33AA  
                                 u4960 1D20                                   u8137 3D86  
                                 u8057 1B44                                   u7417 1D34  
                                 u7337 1112                                   u7257 0F1A  
                                 u7177 0AA0                                   u7097 3406  
                                 i2l66 4714                                   u8147 3EEE  
                                 u8067 1B78                                   u7507 345C  
                                 u7427 1D88                                   u7347 1146  
                                 u7267 0F44                                   u7187 0AF6  
                                 u8077 1BAC                                   u7517 34A0  
                                 u7437 1DA8                                   u7357 3270  
                                 u7277 0FA2                                   u7197 0B2A  
                                 u4990 1EC6                                   u8087 1BE0  
                                 u7607 01EA                                   u7527 34C2  
                                 u7447 1DD6                                   u7367 32B4  
                                 u7287 0FD6                                   u6760 3016  
                                 u8097 1C14                                   u7617 0250  
                                 u7537 002C                                   u7457 1E1A  
                                 u7377 1C38                                   u7297 1000  
                                 u7707 04A8                                   u7627 026E  
                                 u7547 0070                                   u7467 1E38  
                                 u7387 1C7C                                   u7717 04D0  
                                 u7637 029E                                   u7557 0092  
                                 u7477 1E66                                   u7397 1C9E  
                                 u4998 1ECA                                   u7807 074A  
                                 u7727 052C                                   u7647 031C  
                                 u7567 0102                                   u7487 1E80  
                                 u7817 0772                                   u7737 0554  
                                 u7657 0344                                   u7577 0136  
                                 u7497 4588                                   u7907 3F14  
                                 u7827 0794                                   u7747 05B0  
                                 u7667 03A0                                   u7587 019C  
                                 u6947 3046                                   u7917 3F48  
                                 u7837 07E4                                   u7757 05D8  
                                 u7677 03C8                                   u7597 01BA  
                                 u6957 30A8                                   u7927 38B8  
                                 u7847 080C                                   u7767 0642  
                                 u7687 0424                                   u6967 3112  
                                 u7937 3926                                   u7857 085C  
                                 u7777 066A                                   u7697 044C  
                                 u6977 3130                                   u7947 3930  
                                 u7867 0866                                   u7787 06C6  
                                 u6987 3FD0                                   u7957 1924  
                                 u7877 088A                                   u7797 06EE  
                                 u6997 2C44                                   u7967 1970  
                                 u7887 08B2                                   u7977 19A4  
                                 u7897 39DA                                   u7987 19D8  
                                 u7997 1A0C                                   _RSEN 007E29  
                          _stopSignals 46D4                                   _Test 3262  
                                 _back 005B                                   _main 3524  
                                 _down 0067                                   _keys FB21  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 465A                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 00EA                        __end_ofi2_putch 4752  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 24B2  
                          i2_lcdNibble 3F5C                        __end_of_Loading 3148  
                 __end_of_actuatorTest 08CA                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                 __end_of_EEPROM_write 344E                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 36A2                                  _EEADR 000FA9  
                                STR_10 FFE7                                  STR_11 FFEB  
                                STR_12 FFFB                                  STR_20 FFEF  
                                STR_13 FFDF                                  STR_21 FB3C  
                                STR_14 FFD7                                  STR_22 FF9B  
                                STR_30 FE19                                  STR_15 FFD3  
                                STR_23 FF19                                  STR_31 FDF7  
                                STR_16 FFE3                                  STR_24 FD5E  
                                STR_32 FD3C                                  STR_40 FCF8  
                                STR_17 FFF3                                  STR_33 FD4D  
                                STR_41 FCE7                                  STR_25 FB7C  
                                STR_18 FFF7                                  STR_34 FDE6  
                                STR_50 FDC4                                  STR_42 FDA2  
                                STR_26 FD6F                                  STR_43 FDA2  
                                STR_35 FDE6                                  STR_51 FFDB  
                                STR_19 FFCF                                  STR_27 FB69  
                                STR_52 FFCB                                  STR_60 FFF3  
                                STR_28 FD80                                  STR_36 FD2B  
                                STR_44 FD09                        __end_of___awmod 38AA  
                                STR_45 FCF8                                  STR_37 FD3C  
                                STR_53 FFE7                                  STR_61 FFF7  
                                STR_29 FB79                                  STR_62 FFCF  
                                STR_54 FFEB                                  STR_70 FED2  
                                STR_38 FDD5                                  STR_46 FDB3  
                                STR_47 FDB3                                  STR_55 FFFB  
                                STR_63 FB3C                                  STR_71 FF0B  
                                STR_39 FD91                                  STR_56 FFDF  
                                STR_64 FF7C                                  STR_80 FE5A  
                                STR_48 FD1A                                  STR_72 FC81  
                                STR_49 FD09                                  STR_57 FFD7  
                                STR_81 FB79                                  STR_65 FF42  
                                STR_73 FEEF                                  STR_58 FFD3  
                                STR_74 FF4F                                  STR_90 FEC3  
                                STR_82 FE87                                  STR_66 FB54  
                                STR_59 FFE3                                  STR_67 FFBD  
                                STR_91 FEE1                                  STR_75 FEB4  
                                STR_83 FE2A                                  STR_84 FF87  
                                STR_76 FEFD                                  STR_92 FCA3  
                                STR_68 FC92                                  STR_85 FF87  
                                STR_77 FFAE                                  STR_93 FF5B  
                                STR_69 FCC5                                  STR_78 FF0B  
                                STR_86 FFA5                                  STR_94 FCB4  
                                STR_87 FFA5                                  STR_95 FF66  
                                STR_79 FF35                                  STR_88 FF91  
                                STR_96 FEA5                                  STR_89 FF0B  
                                STR_97 FC2C                                  STR_98 FC1B  
                                STR_99 FBF9                                  ?_sort 0001  
                      __end_of___lldiv 375E                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                                _T3CON 000FB1                        __end_of___lwdiv 3BD6  
                      __end_of___lwmod 3DF0                                  i2l257 24AE  
                                i2l602 2540                                  i2l861 2BD2  
                                i2l863 2BF2                                  i2l857 2B86  
                                i2l939 46F8                        ___awdiv@counter 008A  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 1916                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 4746                        __end_of_handler 2C2E  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 4598  
                      __end_of_initLCD 4184                         __CFG_EBTRB$OFF 000000  
                                _debug 0065                             i2isdigit@c 0003  
                                _getIR 3FB2                        __end_of_loadRTC 39CC  
                      __end_of_readMAG 413E                        __end_of_dpowers FB3C  
                                _first 0073                                  _enter 0069  
                      __end_of_isdigit 45C2                                  _input 007D  
                                _putch 4726                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 4610  
                     __end_ofi2_getRTC 3CBE                    _log_count_pop_w_tab 00F0  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 1916  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 4306                            Loading@addr 00B3  
                     _count_can_no_lab 005D                   __size_of_EEPROM_read 0018  
                      __initialization 4058                           __end_of_Test 336A  
                   __size_ofi2_lcdInst 000C                           __end_of_main 35E4  
                         __end_of_keys FB32                           __end_of_sort 467C  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00B6  
                        __activetblptr 000003             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FC4E  
                               STR_101 FC5F                                 STR_110 FCD6  
                               STR_102 FBD7                                 STR_103 FE3A  
                               STR_111 FB8F                                 STR_104 FC0A  
                               STR_112 FBA1                                 STR_113 FF71  
                               STR_105 FBE8                                 STR_106 FC0A  
                               STR_114 FC3D                                 _ADRESH 000FC4  
                               STR_107 FE96                                 STR_115 FC70  
                               STR_116 FFB6                                 STR_108 FE78  
                               _EEADRH 000FAA                                 STR_109 FE69  
                               _ADRESL 000FC3                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 4336              i2_change_state_to_menu_22 4306  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1255 1782  
                               i2l1702 404E                                 i2l1712 41BC  
                               i2l6111 258C                                 i2l5321 4630  
                               i2l6201 28F8                                 i2l6121 25FA  
                               i2l6113 25A2                                 i2l6105 254A  
                               i2l6211 2922                                 i2l6123 2610  
                               i2l6115 25B8                                 i2l6107 2560  
                               i2l6131 2652                                 i2l6301 2A52  
                               i2l6213 2926                                 i2l6125 2626  
                               i2l6117 25CE                                 i2l6109 2576  
                               i2l6133 26AC                                 i2l6231 295C  
                               i2l6223 2944                                 i2l6127 263C  
                               i2l6119 25E4                                 i2l5345 46B4  
                               i2l6313 2A88                                 i2l6305 2A64  
                               i2l6233 2962                                 i2l6225 294A  
                               i2l6209 2912                                 i2l5355 401C  
                               i2l6227 2950                                 i2l6219 2930  
                               i2l5613 3C84                                 i2l5357 4024  
                               i2l8005 275E                                 i2l6309 2A76  
                               i2l6229 2956                                 i2l6237 2968  
                               i2l5623 3CAE                                 i2l5367 4044  
                               i2l5359 4028                                 i2l5383 41B2  
                               i2l5375 4192                                 i2l5711 17B0  
                               i2l8015 2820                                 i2l6263 29D2  
                               i2l6319 2A92                                 i2l5617 3C94  
                               i2l5377 419A                                 i2l5641 15B2  
                               i2l6273 29F8                                 i2l6257 29C4  
                               i2l6249 29AC                                 i2l8121 2BA6  
                               i2l5379 419E                                 i2l5715 17C8  
                               i2l5651 15D6                                 i2l6291 2A32  
                               i2l6283 2A1A                                 i2l6267 29EE  
                               i2l6099 24DE                                 i2l5741 1844  
                               i2l5717 17CC                                 i2l5645 15C2  
                               i2l6277 2A0C                                 i2l5735 1818  
                               i2l5647 15D0                                 i2l6279 2A10  
                               i2l8143 2BF0                                 i2l8119 2BA4  
                               i2l5753 1870                                 i2l5729 17FE  
                               i2l5673 1692                                 i2l5665 166A  
                               i2l5657 1608                                 i2l6297 2A40  
                               i2l8081 2B3A                                 i2l5755 1878  
                               i2l5763 189E                                 i2l5747 185A  
                               i2l5739 183C                                 i2l5683 16EA  
                               i2l5675 169C                                 i2l5771 18FA  
                               i2l8411 24A0                                 i2l8083 2B3E  
                               i2l5765 18A4                                 i2l5693 1736  
                               i2l5685 16F4                                 i2l5677 16A0  
                               i2l7701 227C                                 i2l5759 188C  
                               i2l5695 1748                                 i2l5687 16FA  
                               i2l5951 3216                                 i2l8415 2980  
                               i2l5775 42DE                                 i2l8407 2462  
                               i2l5769 18F2                                 i2l5689 170C  
                               i2l8417 299C                                 i2l5777 42E6  
                               i2l8409 2484                                 i2l7801 2404  
                               i2l7721 22C4                                 i2l7713 22A8  
                               i2l7705 228A                                 i2l8097 2B5A  
                               i2l5699 174C                                 i2l5947 3206  
                               i2l7813 2436                                 i2l7805 2412  
                               i2l7741 2312                                 i2l7733 22F6  
                               i2l7725 22D2                                 i2l7717 22B6  
                               i2l7709 229A                                 i2l5959 324A  
                               i2l7671 2222                                 i2l7809 2420  
                               i2l7761 2360                                 i2l7753 2344  
                               i2l7745 2320                                 i2l7737 2304  
                               i2l7729 22E0                                 i2l7681 2244  
                               i2l7673 2228                                 i2l7819 2444  
                               i2l7781 23B6                                 i2l7773 2392  
                               i2l7765 2376                                 i2l7757 2352  
                               i2l7749 2336                                 i2l7685 2252  
                               i2l7677 2236                                 i2l7793 23E0  
                               i2l7785 23C4                                 i2l7777 23A0  
                               i2l7769 2384                                 i2l7697 226E  
                               i2l7689 2260                                 i2l7797 23F6  
                               i2l7789 23D2                                 i2l7995 26F4  
                               i2l7999 2704                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                       __CFG_XINST$OFF 000000                       ID@sensor_outputs 008C  
                     __end_of_dispLogs 465A                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 2EF0  
                               ___wmul 426C                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 42A2  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 3A54                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 469E  
                               _initUI 44B6                                 _readIR 40A6  
                               _logRun 2EF0                                 clear_0 407E  
                               clear_1 408A                                 clear_2 4096  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 38AA                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1170  
                            ??_handler 004B                __size_of_initGlobalVars 0068  
                         ?_retrieveLog 0007                                 _strcpy 4236  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 45EA  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 45C2                            ?_BothServos 0001  
                         ??_EEPROMTest 0080                              ??_isdigit 0080  
                   __size_of_PortTests 0084                      __end_ofi2___lwdiv 4058  
                     __end_of_printRTC 21F2                           __mediumconst FB20  
                    __end_ofi2___lwmod 41C6                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00EE                  __end_of_algorithmTest 3524  
                    __end_ofi2_lcdInst 475E                      __end_ofi2_isdigit 46BC  
                           __accesstop 0080                __end_of__initialization 409C  
                        ?_inputHandler 002A                          ___rparam_used 000001  
              printSortTimer@start_sec 003D                  __size_of_actuatorTest 08B8  
                        i2_EEPROM_read 46EA                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                     __end_of_EEPROMTest 479C  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E4  
                         __pidataBANK1 4772                          __end_of_getIR 4006  
                          i2printRTC@i 0041                          _initSortTimer 375E  
          __end_of_updateServoPosition 3C4C                          __end_of_putch 4736  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 2D92                             __end_of_UI 1170  
                   printSortTimer@hour 002D                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002F  
   __end_of_change_state_to_menu_start 456C          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 4540                  printSortTimer@cur_sec 003F  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0061  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 0012                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                           _EEPROM_write 336A  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
                              UI@F3225 012F               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 0314                      __end_of_PortTests 3B5E  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_412 00CA                                UI@i_413 00CB  
                              UI@i_431 00CC                                UI@i_440 00D1  
                              UI@i_432 00CD                                UI@i_409 00C9  
                              UI@i_443 00D2                                UI@i_435 00CE  
                              UI@i_444 00D3                                UI@i_436 00CF  
                              UI@i_447 00D4                                UI@i_439 00D0  
                              UI@i_448 00D5                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                          ?_PortTestA5 0001                                ?_printf 008E  
                              _UI$2292 00C6                                ?_strcpy 0080  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              _RTCflag 00DE                                i2_putch 4746  
                            ?_initTime 0080                        _f_loadingNewCan 00E2  
                      i2printRTC@month 003D                  __size_of_Distribution 015E  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 3D8E  
                              _Loading 302C            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 35E4                                ___awmod 3808  
                           _initServos 3EAC                                ___lldiv 36A2  
                      __size_of___wmul 0036                        __size_of_getMAG 0032  
                              ___lwdiv 3B5E                                ___lwmod 3D8E  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                        __size_of_initUI 002E  
                      __size_of_readIR 004C                                __pcinit 4058  
                 i2EEPROM_read@address 0001                        __size_of_logRun 013C  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 3CBE                                _lcdInst 4736  
                              _handler 0008                                __ptext0 3524  
                              __ptext1 46D4                                __ptext2 465A  
                              __ptext3 302C                                __ptext4 375E  
                              __ptext5 3CBE                                __ptext6 3FB2  
                              __ptext7 40A6                                __ptext8 2C2E  
                              __ptext9 42A2                        __size_of_printf 0438  
                              _readADC 456C                        __size_of_strcpy 0036  
                              _initLCD 413E                                _cur_can 012B  
                              _loadRTC 3940                                _readMAG 40F2  
                              _dpowers FB32                     actuatorTest@i_1631 00AD  
                   actuatorTest@i_1641 00B0                     actuatorTest@i_1650 00B6  
                   actuatorTest@i_1642 00B1                     actuatorTest@i_1651 00B7  
                   actuatorTest@i_1660 00BC                     actuatorTest@i_1644 00B2  
                   actuatorTest@i_1661 00BD                     actuatorTest@i_1653 00B8  
                   actuatorTest@i_1645 00B3                     actuatorTest@i_1670 00C2  
                   actuatorTest@i_1654 00B9                     actuatorTest@i_1638 00AE  
                   actuatorTest@i_1671 00C3                     actuatorTest@i_1663 00BE  
                   actuatorTest@i_1647 00B4                     actuatorTest@i_1639 00AF  
                   actuatorTest@i_1664 00BF                     actuatorTest@i_1648 00B5  
                   actuatorTest@i_1657 00BA                     actuatorTest@i_1658 00BB  
                   actuatorTest@i_1667 00C0                     actuatorTest@i_1668 00C1  
                              _isdigit 4598                          ?_ToggleTestA5 0001  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 011A               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 2D92  
                       __pintcode_body 2AC0                   end_of_initialization 409C  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 2AC0  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestA5 0096              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
               __end_of_initGlobalVars 3D26                             _sensorTest 1C2A  
                           _servoTimes 011C                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 2AC0  
                         ??_BothServos 00AB                         ??_ToggleTestA5 00AB  
                __end_of_machineConfig 3EAC                             _updateMenu 21F2  
                        ?_PusherTestA5 0001                      i2_I2C_Master_Read 4610  
                            _IR_signal 00DA                      i2_I2C_Master_Wait 4714  
                    i2_I2C_Master_Stop 478A                      i2___lwdiv@divisor 0008  
                      _log_count_total 00F2                              i2___lwdiv 4006  
                            i2___lwmod 4184                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 26E8                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 4752                             _total_time 00F8  
                          printf@width 00A9                   __size_of_stopSignals 0016  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 469E  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 1C2A  
                  __end_of_EEPROM_read 46D4                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 42A2  
                       __end_of_getMAG 42D4                         __end_of_getRTC 3ADA  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 44E4  
                       __end_of_readIR 40F2                         __end_of_logRun 302C  
                     i2___wmul@product 0005                         __end_of_printf 15A8  
                         i2printf@flag 0026                         __end_of_strcpy 426C  
            __end_ofi2_I2C_Master_Read 4636              __end_ofi2_I2C_Master_Wait 4726  
                       ??_PusherTestA5 00AB                           i2printf@prec 001D  
                  start_initialization 4058              __end_ofi2_I2C_Master_Stop 4792  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 005F            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1322 00B0  
                i2I2C_Master_Read@temp 0003                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                              _PortTests 3ADA  
                          ?_sensorTest 0001                            __pdataBANK1 012F  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2412 0045                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01F2  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1936 0081                         initSortTimer@i 0088  
                    printSortTimer@min 0041                      printSortTimer@sec 0043  
                  __size_of_initServos 005A                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 0063  
                          _EEPROM_read 46BC                     __end_of_PortTestA5 3940  
                     _I2C_Master_Start 4782                              _f_lastCan 0071  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 475E                      __size_of_initTime 0022  
                 __end_of_ToggleTestA5 3A54                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                        __pmediumconst FB20                              _lcdNibble 3D26  
                __size_of_inputHandler 01E6                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                             ?___lwdiv 0080                             ?_PortTests 0001  
                             ?___lwmod 0087                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0075                              _cur_state 00E0  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0054  
                        _algorithmTest 344E                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 0164                            __size_of_UI 08A6  
                       ToggleTestA5@on 00AC                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 479A             __end_ofi2_I2C_Master_Write 4772  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATDbits 000F8C                               _LATEbits 000F8D  
                         _inputHandler 28DA                            ??i2_isdigit 0001  
                             i2u422_40 172E                               i2u422_47 1724  
                             i2u418_40 16CE                               i2u418_47 16C4  
                             i2u363_40 462E                               _PIR2bits 000FA1  
                             i2u460_40 2540                   __end_of_PusherTestA5 3F5C  
                             i2u815_47 2918                               i2u816_47 3F74  
                             i2u681_40 281A                               i2u817_47 3F7E  
                             i2u818_47 3FA0                               i2u819_47 3FAA  
                  __size_of_updateMenu 02C0                         _log_completion 00E8  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 45EA                          lcdNibble@data 0081  
                             i2_getRTC 3C4C                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             i2_printf 15A8                               i2_strcpy 42D4  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 406C                              readIR@res 0084  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 4700                            _count_total 00FE  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 011C                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                __end_of_initSortTimer 3808                           ??_initServos 0088  
                          ??_PortTests 0080                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 4396  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 41FE  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 41C6  
              _change_state_to_menu_23 4366                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 4486                _change_state_to_logs_12 4456  
              _change_state_to_logs_22 4426                _change_state_to_logs_23 4512  
              _change_state_to_logs_33 43F6                _change_state_to_logs_34 43C6  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 2C26                             _EEPROMTest 479A  
                      _I2C_Master_Init 3DF0                       __size_of_readADC 002C  
                      _I2C_Master_Read 44E4                       __size_of_initLCD 0046  
                         _f_ID_receive 006B                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 4700  
                      _I2C_Master_Stop 477A                       __size_of_isdigit 002A  
                       _printSortTimer 26E8                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 3262  
                             __ptext10 2D92                               __ptext11 3E50  
                             __ptext20 467C                               __ptext12 2EF0  
                             __ptext21 413E                               __ptext13 336A  
                             __ptext30 4700                               __ptext22 08CA  
                             __ptext14 46BC                               __ptext31 41C6  
                             __ptext23 1F28                               __ptext15 44B6  
                             __ptext40 0012                               __ptext32 41FE  
                             __ptext24 4236                               __ptext16 3940  
                             __ptext41 39CC                               __ptext33 3808  
                             __ptext25 3A54                               __ptext17 3DF0  
                             __ptext50 426C                               __ptext42 3F06  
                             __ptext34 35E4                               __ptext26 475E  
                             __ptext18 36A2                               __ptext51 3D8E  
                             __ptext43 3ADA                               __ptext35 3262  
                             __ptext27 477A                               __ptext19 4540  
                             __ptext60 24B2                               __ptext52 3B5E  
                             __ptext44 38AA                               __ptext36 1C2A  
                             __ptext28 4782                               __ptext61 42D4  
                             __ptext53 4736                               __ptext45 479A  
                             __ptext37 40F2                               __ptext29 44E4  
                             __ptext70 4426                               __ptext62 28DA  
                             __ptext54 3D26                               __ptext46 1916  
                             __ptext38 456C                               __ptext71 4456  
                             __ptext63 4306                               __ptext55 3EAC  
                             __ptext47 1170                               __ptext39 344E  
                             __ptext80 45EA                               __ptext72 4486  
                             __ptext64 4336                               __ptext56 3BD6  
                             __ptext48 4726                               __ptext81 4184  
                             __ptext73 4636                               __ptext65 4366  
                             __ptext49 4598                               __ptext90 4714  
                             __ptext82 4006                               __ptext74 3148  
                             __ptext66 4396                               __ptext58 21F2  
                             __ptext83 4752                               __ptext75 46EA  
                             __ptext67 43C6                               __ptext59 45C2  
                             __ptext84 3F5C                               __ptext76 26E8  
                             __ptext68 43F6                               __ptext85 3C4C  
                             __ptext77 15A8                               __ptext69 4512  
                             __ptext86 4768                               __ptext78 4746  
                             __ptext87 478A                               __ptext79 469E  
                             __ptext88 4792                               __ptext89 4610  
                             _dispLogs 4636                          ?_actuatorTest 0001  
                        ??_stopSignals 0080                  __size_of_ToggleTestA5 0088  
                           strcpy@from 0082                         i2_isdigit$1936 0002  
                   __end_of_initServos 3F06                          __size_of_Test 0108  
                        ?_EEPROM_write 00AB                               _initTime 467C  
                        __size_of_main 00C0                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F6  
                  _updateServoPosition 3BD6                 __size_of_machineConfig 005C  
                        ??i2_lcdNibble 0001                               _printRTC 1F28  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F4                     _f_can_coming_to_ID 006D  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 4366      __end_ofi2_change_state_to_menu_22 4336  
                             loadRTC@i 0096                 __end_of_printSortTimer 28DA  
                            putch@data 0082               __end_of_I2C_Master_Start 478A  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 4768  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         _ToggleTestA5 39CC                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00DC  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 1F28  
                     ___lwmod@dividend 0087                  __size_of_PusherTestA5 0056  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 46EA              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 24B2  
              __end_of_I2C_Master_Init 3E50                __end_of_I2C_Master_Read 4512  
              __end_of_I2C_Master_Wait 4714                __end_of_I2C_Master_Stop 4782  
                          lcdInst@data 0082                          printRTC@F3216 0133  
                         retrieveLog@i 000E                            _retrieveLog 3148  
                  __end_ofi2_lcdNibble 3FB2                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                            ?_EEPROMTest 0001  
                      ___lwmod@divisor 0089                      _f_can_distributed 012D  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 3E50                        ___lwmod@counter 008B  
                         _PusherTestA5 3F06                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                     i2printRTC@INT_time 002D  
