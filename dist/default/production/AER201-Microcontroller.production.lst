

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Apr 12 04:13:41 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	text99,global,reloc=2,class=CODE,delta=1
   115                           	psect	text100,global,reloc=2,class=CODE,delta=1
   116                           	psect	text101,global,reloc=2,class=CODE,delta=1
   117                           	psect	text102,global,reloc=2,class=CODE,delta=1
   118                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   119                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   120                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   121  0000                     
   122                           ; Version 1.40
   123                           ; Generated 01/12/2016 GMT
   124                           ; 
   125                           ; Copyright © 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   126                           ; All rights reserved.
   127                           ; 
   128                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   129                           ; 
   130                           ; Redistribution and use in source and binary forms, with or without modification, are
   131                           ; permitted provided that the following conditions are met:
   132                           ; 
   133                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   134                           ;        conditions and the following disclaimer.
   135                           ; 
   136                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   137                           ;        of conditions and the following disclaimer in the documentation and/or other
   138                           ;        materials provided with the distribution.
   139                           ; 
   140                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   141                           ;        software without specific prior written permission.
   142                           ; 
   143                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   144                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   145                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   146                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   147                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   148                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   149                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   150                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   151                           ; 
   152                           ; 
   153                           ; Code-generator required, PIC18F4620 Definitions
   154                           ; 
   155                           ; SFR Addresses
   156  0000                     
   157                           	psect	idataBANK1
   158  005FDE                     __pidataBANK1:
   159                           	opt stack 0
   160                           
   161                           ;initializer for UI@F3250
   162  005FDE  4D                 	db	77
   163  005FDF  4D                 	db	77
   164  005FE0  4D                 	db	77
   165  005FE1  00                 	db	0
   166                           
   167                           ;initializer for printRTC@F3240
   168  005FE2  4D                 	db	77
   169  005FE3  4D                 	db	77
   170  005FE4  4D                 	db	77
   171  005FE5  00                 	db	0
   172                           
   173                           	psect	mediumconst
   174  00FAA6                     __pmediumconst:
   175                           	opt stack 0
   176  00FAA6  00                 	db	0
   177  00FAA7                     _keys:
   178                           	opt stack 0
   179  00FAA7  31                 	db	49
   180  00FAA8  32                 	db	50
   181  00FAA9  33                 	db	51
   182  00FAAA  41                 	db	65
   183  00FAAB  34                 	db	52
   184  00FAAC  35                 	db	53
   185  00FAAD  36                 	db	54
   186  00FAAE  42                 	db	66
   187  00FAAF  37                 	db	55
   188  00FAB0  38                 	db	56
   189  00FAB1  39                 	db	57
   190  00FAB2  43                 	db	67
   191  00FAB3  2A                 	db	42
   192  00FAB4  30                 	db	48
   193  00FAB5  23                 	db	35
   194  00FAB6  44                 	db	68
   195  00FAB7  00                 	db	0
   196  00FAB8                     __end_of_keys:
   197                           	opt stack 0
   198  00FAB8                     _dpowers:
   199                           	opt stack 0
   200  00FAB8  0001               	dw	1
   201  00FABA  000A               	dw	10
   202  00FABC  0064               	dw	100
   203  00FABE  03E8               	dw	1000
   204  00FAC0  2710               	dw	10000
   205  00FAC2                     __end_of_dpowers:
   206                           	opt stack 0
   207  0000                     _ADCON0	set	4034
   208  0000                     _ADCON0bits	set	4034
   209  0000                     _ADCON1	set	4033
   210  0000                     _ADCON2	set	4032
   211  0000                     _ADRESH	set	4036
   212  0000                     _ADRESL	set	4035
   213  0000                     _CMCONbits	set	4020
   214  0000                     _CVRCON	set	4021
   215  0000                     _EEADR	set	4009
   216  0000                     _EEADRH	set	4010
   217  0000                     _EECON1bits	set	4006
   218  0000                     _EECON2	set	4007
   219  0000                     _EEDATA	set	4008
   220  0000                     _INTCONbits	set	4082
   221  0000                     _LATA	set	3977
   222  0000                     _LATAbits	set	3977
   223  0000                     _LATB	set	3978
   224  0000                     _LATBbits	set	3978
   225  0000                     _LATC	set	3979
   226  0000                     _LATCbits	set	3979
   227  0000                     _LATD	set	3980
   228  0000                     _LATDbits	set	3980
   229  0000                     _LATE	set	3981
   230  0000                     _OSCCON	set	4051
   231  0000                     _OSCTUNEbits	set	3995
   232  0000                     _PIR2bits	set	4001
   233  0000                     _PORTAbits	set	3968
   234  0000                     _PORTB	set	3969
   235  0000                     _PORTBbits	set	3969
   236  0000                     _PR2	set	4043
   237  0000                     _SSPADD	set	4040
   238  0000                     _SSPBUF	set	4041
   239  0000                     _SSPCON1	set	4038
   240  0000                     _SSPCON2	set	4037
   241  0000                     _SSPSTAT	set	4039
   242  0000                     _T0CON	set	4053
   243  0000                     _T1CON	set	4045
   244  0000                     _T2CON	set	4042
   245  0000                     _T3CON	set	4017
   246  0000                     _TMR0H	set	4055
   247  0000                     _TMR0L	set	4054
   248  0000                     _TMR1H	set	4047
   249  0000                     _TMR1L	set	4046
   250  0000                     _TMR3H	set	4019
   251  0000                     _TMR3L	set	4018
   252  0000                     _TRISA	set	3986
   253  0000                     _TRISB	set	3987
   254  0000                     _TRISC	set	3988
   255  0000                     _TRISD	set	3989
   256  0000                     _TRISE	set	3990
   257  0000                     _ACKDT	set	32301
   258  0000                     _ACKEN	set	32300
   259  0000                     _ADIE	set	31982
   260  0000                     _INT1IE	set	32643
   261  0000                     _INT1IF	set	32640
   262  0000                     _PEIE	set	32662
   263  0000                     _PEN	set	32298
   264  0000                     _RCEN	set	32299
   265  0000                     _RSEN	set	32297
   266  0000                     _SEN	set	32296
   267  0000                     _TMR0IE	set	32661
   268  0000                     _TMR0IF	set	32658
   269  0000                     _TMR0ON	set	32431
   270  0000                     _TMR1IE	set	31976
   271  0000                     _TMR1IF	set	31984
   272  0000                     _TMR1ON	set	32360
   273  0000                     _TMR2IE	set	31977
   274  0000                     _TMR2IF	set	31985
   275  0000                     _TMR2ON	set	32338
   276  0000                     _TMR3IE	set	32001
   277  0000                     _TMR3IF	set	32009
   278  0000                     _TMR3ON	set	32136
   279  0000                     _TRISC3	set	31907
   280  0000                     _TRISC4	set	31908
   281  0000                     _nRBPU	set	32655
   282  00FAC2                     STR_21:
   283  00FAC2  25                 	db	37
   284  00FAC3  30                 	db	48	;'0'
   285  00FAC4  32                 	db	50	;'2'
   286  00FAC5  64                 	db	100	;'d'
   287  00FAC6  25                 	db	37
   288  00FAC7  73                 	db	115	;'s'
   289  00FAC8  20                 	db	32
   290  00FAC9  7C                 	db	124
   291  00FACA  20                 	db	32
   292  00FACB  25                 	db	37
   293  00FACC  30                 	db	48	;'0'
   294  00FACD  32                 	db	50	;'2'
   295  00FACE  64                 	db	100	;'d'
   296  00FACF  3A                 	db	58	;':'
   297  00FAD0  25                 	db	37
   298  00FAD1  30                 	db	48	;'0'
   299  00FAD2  32                 	db	50	;'2'
   300  00FAD3  64                 	db	100	;'d'
   301  00FAD4  3A                 	db	58	;':'
   302  00FAD5  25                 	db	37
   303  00FAD6  30                 	db	48	;'0'
   304  00FAD7  32                 	db	50	;'2'
   305  00FAD8  64                 	db	100	;'d'
   306  00FAD9  00                 	db	0
   307  00FADA                     STR_66:
   308  00FADA  28                 	db	40
   309  00FADB  64                 	db	100	;'d'
   310  00FADC  61                 	db	97	;'a'
   311  00FADD  74                 	db	116	;'t'
   312  00FADE  61                 	db	97	;'a'
   313  00FADF  3A                 	db	58	;':'
   314  00FAE0  20                 	db	32
   315  00FAE1  25                 	db	37
   316  00FAE2  75                 	db	117	;'u'
   317  00FAE3  2C                 	db	44
   318  00FAE4  20                 	db	32
   319  00FAE5  61                 	db	97	;'a'
   320  00FAE6  64                 	db	100	;'d'
   321  00FAE7  64                 	db	100	;'d'
   322  00FAE8  72                 	db	114	;'r'
   323  00FAE9  3A                 	db	58	;':'
   324  00FAEA  20                 	db	32
   325  00FAEB  25                 	db	37
   326  00FAEC  75                 	db	117	;'u'
   327  00FAED  29                 	db	41
   328  00FAEE  00                 	db	0
   329  00FAEF                     STR_112:
   330  00FAEF  44                 	db	68	;'D'
   331  00FAF0  20                 	db	32
   332  00FAF1  57                 	db	87	;'W'
   333  00FAF2  49                 	db	73	;'I'
   334  00FAF3  4C                 	db	76	;'L'
   335  00FAF4  4C                 	db	76	;'L'
   336  00FAF5  20                 	db	32
   337  00FAF6  52                 	db	82	;'R'
   338  00FAF7  45                 	db	69	;'E'
   339  00FAF8  54                 	db	84	;'T'
   340  00FAF9  55                 	db	85	;'U'
   341  00FAFA  52                 	db	82	;'R'
   342  00FAFB  4E                 	db	78	;'N'
   343  00FAFC  20                 	db	32
   344  00FAFD  20                 	db	32
   345  00FAFE  20                 	db	32
   346  00FAFF  20                 	db	32
   347  00FB00  00                 	db	0
   348  00FB01                     STR_120:
   349  00FB01  4F                 	db	79	;'O'
   350  00FB02  54                 	db	84	;'T'
   351  00FB03  48                 	db	72	;'H'
   352  00FB04  45                 	db	69	;'E'
   353  00FB05  52                 	db	82	;'R'
   354  00FB06  20                 	db	32
   355  00FB07  53                 	db	83	;'S'
   356  00FB08  45                 	db	69	;'E'
   357  00FB09  54                 	db	84	;'T'
   358  00FB0A  53                 	db	83	;'S'
   359  00FB0B  20                 	db	32
   360  00FB0C  52                 	db	82	;'R'
   361  00FB0D  41                 	db	65	;'A'
   362  00FB0E  35                 	db	53	;'5'
   363  00FB0F  20                 	db	32
   364  00FB10  20                 	db	32
   365  00FB11  20                 	db	32
   366  00FB12  00                 	db	0
   367  00FB13                     STR_81:
   368  00FB13  49                 	db	73	;'I'
   369  00FB14  52                 	db	82	;'R'
   370  00FB15  20                 	db	32
   371  00FB16  28                 	db	40
   372  00FB17  52                 	db	82	;'R'
   373  00FB18  45                 	db	69	;'E'
   374  00FB19  46                 	db	70	;'F'
   375  00FB1A  4C                 	db	76	;'L'
   376  00FB1B  45                 	db	69	;'E'
   377  00FB1C  43                 	db	67	;'C'
   378  00FB1D  29                 	db	41
   379  00FB1E  3A                 	db	58	;':'
   380  00FB1F  20                 	db	32
   381  00FB20  25                 	db	37
   382  00FB21  64                 	db	100	;'d'
   383  00FB22  20                 	db	32
   384  00FB23  20                 	db	32
   385  00FB24  00                 	db	0
   386  00FB25                     STR_79:
   387  00FB25  49                 	db	73	;'I'
   388  00FB26  52                 	db	82	;'R'
   389  00FB27  20                 	db	32
   390  00FB28  28                 	db	40
   391  00FB29  50                 	db	80	;'P'
   392  00FB2A  55                 	db	85	;'U'
   393  00FB2B  53                 	db	83	;'S'
   394  00FB2C  48                 	db	72	;'H'
   395  00FB2D  45                 	db	69	;'E'
   396  00FB2E  52                 	db	82	;'R'
   397  00FB2F  29                 	db	41
   398  00FB30  3A                 	db	58	;':'
   399  00FB31  20                 	db	32
   400  00FB32  25                 	db	37
   401  00FB33  64                 	db	100	;'d'
   402  00FB34  20                 	db	32
   403  00FB35  20                 	db	32
   404  00FB36  00                 	db	0
   405  00FB37                     STR_119:
   406  00FB37  53                 	db	83	;'S'
   407  00FB38  3A                 	db	58	;':'
   408  00FB39  20                 	db	32
   409  00FB3A  44                 	db	68	;'D'
   410  00FB3B  20                 	db	32
   411  00FB3C  57                 	db	87	;'W'
   412  00FB3D  49                 	db	73	;'I'
   413  00FB3E  4C                 	db	76	;'L'
   414  00FB3F  4C                 	db	76	;'L'
   415  00FB40  20                 	db	32
   416  00FB41  52                 	db	82	;'R'
   417  00FB42  45                 	db	69	;'E'
   418  00FB43  54                 	db	84	;'T'
   419  00FB44  55                 	db	85	;'U'
   420  00FB45  52                 	db	82	;'R'
   421  00FB46  4E                 	db	78	;'N'
   422  00FB47  20                 	db	32
   423  00FB48  00                 	db	0
   424  00FB49                     STR_122:
   425  00FB49  4F                 	db	79	;'O'
   426  00FB4A  54                 	db	84	;'T'
   427  00FB4B  48                 	db	72	;'H'
   428  00FB4C  45                 	db	69	;'E'
   429  00FB4D  52                 	db	82	;'R'
   430  00FB4E  3A                 	db	58	;':'
   431  00FB4F  20                 	db	32
   432  00FB50  43                 	db	67	;'C'
   433  00FB51  41                 	db	65	;'A'
   434  00FB52  4D                 	db	77	;'M'
   435  00FB53  20                 	db	32
   436  00FB54  54                 	db	84	;'T'
   437  00FB55  4F                 	db	79	;'O'
   438  00FB56  47                 	db	71	;'G'
   439  00FB57  47                 	db	71	;'G'
   440  00FB58  4C                 	db	76	;'L'
   441  00FB59  45                 	db	69	;'E'
   442  00FB5A  00                 	db	0
   443  00FB5B                     STR_128:
   444  00FB5B  4F                 	db	79	;'O'
   445  00FB5C  54                 	db	84	;'T'
   446  00FB5D  48                 	db	72	;'H'
   447  00FB5E  45                 	db	69	;'E'
   448  00FB5F  52                 	db	82	;'R'
   449  00FB60  20                 	db	32
   450  00FB61  53                 	db	83	;'S'
   451  00FB62  45                 	db	69	;'E'
   452  00FB63  54                 	db	84	;'T'
   453  00FB64  53                 	db	83	;'S'
   454  00FB65  20                 	db	32
   455  00FB66  50                 	db	80	;'P'
   456  00FB67  55                 	db	85	;'U'
   457  00FB68  53                 	db	83	;'S'
   458  00FB69  48                 	db	72	;'H'
   459  00FB6A  45                 	db	69	;'E'
   460  00FB6B  52                 	db	82	;'R'
   461  00FB6C  00                 	db	0
   462  00FB6D                     STR_3:
   463  00FB6D  2D                 	db	45
   464  00FB6E  2D                 	db	45
   465  00FB6F  20                 	db	32
   466  00FB70  4C                 	db	76	;'L'
   467  00FB71  4F                 	db	79	;'O'
   468  00FB72  47                 	db	71	;'G'
   469  00FB73  20                 	db	32
   470  00FB74  25                 	db	37
   471  00FB75  32                 	db	50	;'2'
   472  00FB76  64                 	db	100	;'d'
   473  00FB77  20                 	db	32
   474  00FB78  48                 	db	72	;'H'
   475  00FB79  45                 	db	69	;'E'
   476  00FB7A  52                 	db	82	;'R'
   477  00FB7B  45                 	db	69	;'E'
   478  00FB7C  2D                 	db	45
   479  00FB7D  2D                 	db	45
   480  00FB7E  00                 	db	0
   481  00FB7F                     STR_1:
   482  00FB7F  52                 	db	82	;'R'
   483  00FB80  45                 	db	69	;'E'
   484  00FB81  53                 	db	83	;'S'
   485  00FB82  55                 	db	85	;'U'
   486  00FB83  4C                 	db	76	;'L'
   487  00FB84  54                 	db	84	;'T'
   488  00FB85  53                 	db	83	;'S'
   489  00FB86  20                 	db	32
   490  00FB87  49                 	db	73	;'I'
   491  00FB88  4E                 	db	78	;'N'
   492  00FB89  20                 	db	32
   493  00FB8A  4C                 	db	76	;'L'
   494  00FB8B  4F                 	db	79	;'O'
   495  00FB8C  47                 	db	71	;'G'
   496  00FB8D  20                 	db	32
   497  00FB8E  25                 	db	37
   498  00FB8F  64                 	db	100	;'d'
   499  00FB90  00                 	db	0
   500  00FB91                     STR_103:
   501  00FB91  4D                 	db	77	;'M'
   502  00FB92  49                 	db	73	;'I'
   503  00FB93  44                 	db	68	;'D'
   504  00FB94  20                 	db	32
   505  00FB95  2D                 	db	45
   506  00FB96  2D                 	db	45
   507  00FB97  20                 	db	32
   508  00FB98  32                 	db	50	;'2'
   509  00FB99  73                 	db	115	;'s'
   510  00FB9A  20                 	db	32
   511  00FB9B  20                 	db	32
   512  00FB9C  20                 	db	32
   513  00FB9D  20                 	db	32
   514  00FB9E  20                 	db	32
   515  00FB9F  20                 	db	32
   516  00FBA0  20                 	db	32
   517  00FBA1  00                 	db	0
   518  00FBA2                     STR_106:
   519  00FBA2  44                 	db	68	;'D'
   520  00FBA3  52                 	db	82	;'R'
   521  00FBA4  4F                 	db	79	;'O'
   522  00FBA5  50                 	db	80	;'P'
   523  00FBA6  20                 	db	32
   524  00FBA7  2D                 	db	45
   525  00FBA8  2D                 	db	45
   526  00FBA9  20                 	db	32
   527  00FBAA  32                 	db	50	;'2'
   528  00FBAB  73                 	db	115	;'s'
   529  00FBAC  20                 	db	32
   530  00FBAD  20                 	db	32
   531  00FBAE  20                 	db	32
   532  00FBAF  20                 	db	32
   533  00FBB0  20                 	db	32
   534  00FBB1  20                 	db	32
   535  00FBB2  00                 	db	0
   536  00FBB3                     STR_100:
   537  00FBB3  4C                 	db	76	;'L'
   538  00FBB4  45                 	db	69	;'E'
   539  00FBB5  46                 	db	70	;'F'
   540  00FBB6  54                 	db	84	;'T'
   541  00FBB7  20                 	db	32
   542  00FBB8  2D                 	db	45
   543  00FBB9  2D                 	db	45
   544  00FBBA  20                 	db	32
   545  00FBBB  32                 	db	50	;'2'
   546  00FBBC  73                 	db	115	;'s'
   547  00FBBD  20                 	db	32
   548  00FBBE  20                 	db	32
   549  00FBBF  20                 	db	32
   550  00FBC0  20                 	db	32
   551  00FBC1  20                 	db	32
   552  00FBC2  20                 	db	32
   553  00FBC3  00                 	db	0
   554  00FBC4                     STR_105:
   555  00FBC4  4C                 	db	76	;'L'
   556  00FBC5  45                 	db	69	;'E'
   557  00FBC6  56                 	db	86	;'V'
   558  00FBC7  45                 	db	69	;'E'
   559  00FBC8  4C                 	db	76	;'L'
   560  00FBC9  20                 	db	32
   561  00FBCA  2D                 	db	45
   562  00FBCB  2D                 	db	45
   563  00FBCC  20                 	db	32
   564  00FBCD  32                 	db	50	;'2'
   565  00FBCE  73                 	db	115	;'s'
   566  00FBCF  20                 	db	32
   567  00FBD0  20                 	db	32
   568  00FBD1  20                 	db	32
   569  00FBD2  20                 	db	32
   570  00FBD3  20                 	db	32
   571  00FBD4  00                 	db	0
   572  00FBD5                     STR_99:
   573  00FBD5  52                 	db	82	;'R'
   574  00FBD6  49                 	db	73	;'I'
   575  00FBD7  47                 	db	71	;'G'
   576  00FBD8  48                 	db	72	;'H'
   577  00FBD9  54                 	db	84	;'T'
   578  00FBDA  20                 	db	32
   579  00FBDB  2D                 	db	45
   580  00FBDC  2D                 	db	45
   581  00FBDD  20                 	db	32
   582  00FBDE  32                 	db	50	;'2'
   583  00FBDF  73                 	db	115	;'s'
   584  00FBE0  20                 	db	32
   585  00FBE1  20                 	db	32
   586  00FBE2  20                 	db	32
   587  00FBE3  20                 	db	32
   588  00FBE4  20                 	db	32
   589  00FBE5  00                 	db	0
   590  00FBE6                     STR_98:
   591  00FBE6  4D                 	db	77	;'M'
   592  00FBE7  49                 	db	73	;'I'
   593  00FBE8  44                 	db	68	;'D'
   594  00FBE9  44                 	db	68	;'D'
   595  00FBEA  4C                 	db	76	;'L'
   596  00FBEB  45                 	db	69	;'E'
   597  00FBEC  20                 	db	32
   598  00FBED  2D                 	db	45
   599  00FBEE  2D                 	db	45
   600  00FBEF  20                 	db	32
   601  00FBF0  32                 	db	50	;'2'
   602  00FBF1  73                 	db	115	;'s'
   603  00FBF2  20                 	db	32
   604  00FBF3  20                 	db	32
   605  00FBF4  20                 	db	32
   606  00FBF5  20                 	db	32
   607  00FBF6  00                 	db	0
   608  00FBF7                     STR_113:
   609  00FBF7  4F                 	db	79	;'O'
   610  00FBF8  54                 	db	84	;'T'
   611  00FBF9  48                 	db	72	;'H'
   612  00FBFA  45                 	db	69	;'E'
   613  00FBFB  52                 	db	82	;'R'
   614  00FBFC  20                 	db	32
   615  00FBFD  53                 	db	83	;'S'
   616  00FBFE  45                 	db	69	;'E'
   617  00FBFF  54                 	db	84	;'T'
   618  00FC00  53                 	db	83	;'S'
   619  00FC01  20                 	db	32
   620  00FC02  44                 	db	68	;'D'
   621  00FC03  43                 	db	67	;'C'
   622  00FC04  20                 	db	32
   623  00FC05  20                 	db	32
   624  00FC06  20                 	db	32
   625  00FC07  00                 	db	0
   626  00FC08                     STR_125:
   627  00FC08  44                 	db	68	;'D'
   628  00FC09  20                 	db	32
   629  00FC0A  57                 	db	87	;'W'
   630  00FC0B  49                 	db	73	;'I'
   631  00FC0C  4C                 	db	76	;'L'
   632  00FC0D  4C                 	db	76	;'L'
   633  00FC0E  20                 	db	32
   634  00FC0F  52                 	db	82	;'R'
   635  00FC10  45                 	db	69	;'E'
   636  00FC11  54                 	db	84	;'T'
   637  00FC12  55                 	db	85	;'U'
   638  00FC13  52                 	db	82	;'R'
   639  00FC14  4E                 	db	78	;'N'
   640  00FC15  20                 	db	32
   641  00FC16  20                 	db	32
   642  00FC17  20                 	db	32
   643  00FC18  00                 	db	0
   644  00FC19                     STR_116:
   645  00FC19  35                 	db	53	;'5'
   646  00FC1A  3A                 	db	58	;':'
   647  00FC1B  48                 	db	72	;'H'
   648  00FC1C  7C                 	db	124
   649  00FC1D  36                 	db	54	;'6'
   650  00FC1E  3A                 	db	58	;':'
   651  00FC1F  4C                 	db	76	;'L'
   652  00FC20  7C                 	db	124
   653  00FC21  49                 	db	73	;'I'
   654  00FC22  52                 	db	82	;'R'
   655  00FC23  3A                 	db	58	;':'
   656  00FC24  25                 	db	37
   657  00FC25  64                 	db	100	;'d'
   658  00FC26  20                 	db	32
   659  00FC27  20                 	db	32
   660  00FC28  20                 	db	32
   661  00FC29  00                 	db	0
   662  00FC2A                     STR_114:
   663  00FC2A  31                 	db	49	;'1'
   664  00FC2B  3A                 	db	58	;':'
   665  00FC2C  20                 	db	32
   666  00FC2D  44                 	db	68	;'D'
   667  00FC2E  43                 	db	67	;'C'
   668  00FC2F  20                 	db	32
   669  00FC30  7C                 	db	124
   670  00FC31  20                 	db	32
   671  00FC32  41                 	db	65	;'A'
   672  00FC33  3A                 	db	58	;':'
   673  00FC34  20                 	db	32
   674  00FC35  41                 	db	65	;'A'
   675  00FC36  52                 	db	82	;'R'
   676  00FC37  4D                 	db	77	;'M'
   677  00FC38  20                 	db	32
   678  00FC39  20                 	db	32
   679  00FC3A  00                 	db	0
   680  00FC3B                     STR_101:
   681  00FC3B  4D                 	db	77	;'M'
   682  00FC3C  49                 	db	73	;'I'
   683  00FC3D  44                 	db	68	;'D'
   684  00FC3E  2D                 	db	45
   685  00FC3F  4C                 	db	76	;'L'
   686  00FC40  45                 	db	69	;'E'
   687  00FC41  46                 	db	70	;'F'
   688  00FC42  54                 	db	84	;'T'
   689  00FC43  20                 	db	32
   690  00FC44  2D                 	db	45
   691  00FC45  2D                 	db	45
   692  00FC46  20                 	db	32
   693  00FC47  32                 	db	50	;'2'
   694  00FC48  73                 	db	115	;'s'
   695  00FC49  20                 	db	32
   696  00FC4A  20                 	db	32
   697  00FC4B  00                 	db	0
   698  00FC4C                     STR_102:
   699  00FC4C  4D                 	db	77	;'M'
   700  00FC4D  49                 	db	73	;'I'
   701  00FC4E  44                 	db	68	;'D'
   702  00FC4F  2D                 	db	45
   703  00FC50  52                 	db	82	;'R'
   704  00FC51  49                 	db	73	;'I'
   705  00FC52  47                 	db	71	;'G'
   706  00FC53  48                 	db	72	;'H'
   707  00FC54  54                 	db	84	;'T'
   708  00FC55  20                 	db	32
   709  00FC56  2D                 	db	45
   710  00FC57  2D                 	db	45
   711  00FC58  20                 	db	32
   712  00FC59  32                 	db	50	;'2'
   713  00FC5A  73                 	db	115	;'s'
   714  00FC5B  20                 	db	32
   715  00FC5C  00                 	db	0
   716  00FC5D                     STR_72:
   717  00FC5D  41                 	db	65	;'A'
   718  00FC5E  4C                 	db	76	;'L'
   719  00FC5F  47                 	db	71	;'G'
   720  00FC60  31                 	db	49	;'1'
   721  00FC61  3A                 	db	58	;':'
   722  00FC62  20                 	db	32
   723  00FC63  39                 	db	57	;'9'
   724  00FC64  20                 	db	32
   725  00FC65  50                 	db	80	;'P'
   726  00FC66  4F                 	db	79	;'O'
   727  00FC67  50                 	db	80	;'P'
   728  00FC68  4E                 	db	78	;'N'
   729  00FC69  4F                 	db	79	;'O'
   730  00FC6A  54                 	db	84	;'T'
   731  00FC6B  41                 	db	65	;'A'
   732  00FC6C  42                 	db	66	;'B'
   733  00FC6D  00                 	db	0
   734  00FC6E                     STR_93:
   735  00FC6E  54                 	db	84	;'T'
   736  00FC6F  53                 	db	83	;'S'
   737  00FC70  54                 	db	84	;'T'
   738  00FC71  3A                 	db	58	;':'
   739  00FC72  20                 	db	32
   740  00FC73  43                 	db	67	;'C'
   741  00FC74  4F                 	db	79	;'O'
   742  00FC75  4E                 	db	78	;'N'
   743  00FC76  44                 	db	68	;'D'
   744  00FC77  20                 	db	32
   745  00FC78  53                 	db	83	;'S'
   746  00FC79  4F                 	db	79	;'O'
   747  00FC7A  4C                 	db	76	;'L'
   748  00FC7B  4E                 	db	78	;'N'
   749  00FC7C  27                 	db	39
   750  00FC7D  44                 	db	68	;'D'
   751  00FC7E  00                 	db	0
   752  00FC7F                     STR_95:
   753  00FC7F  54                 	db	84	;'T'
   754  00FC80  53                 	db	83	;'S'
   755  00FC81  54                 	db	84	;'T'
   756  00FC82  3A                 	db	58	;':'
   757  00FC83  20                 	db	32
   758  00FC84  50                 	db	80	;'P'
   759  00FC85  55                 	db	85	;'U'
   760  00FC86  53                 	db	83	;'S'
   761  00FC87  48                 	db	72	;'H'
   762  00FC88  20                 	db	32
   763  00FC89  53                 	db	83	;'S'
   764  00FC8A  4F                 	db	79	;'O'
   765  00FC8B  4C                 	db	76	;'L'
   766  00FC8C  4E                 	db	78	;'N'
   767  00FC8D  27                 	db	39
   768  00FC8E  44                 	db	68	;'D'
   769  00FC8F  00                 	db	0
   770  00FC90                     STR_68:
   771  00FC90  32                 	db	50	;'2'
   772  00FC91  2E                 	db	46
   773  00FC92  53                 	db	83	;'S'
   774  00FC93  4E                 	db	78	;'N'
   775  00FC94  52                 	db	82	;'R'
   776  00FC95  7C                 	db	124
   777  00FC96  34                 	db	52	;'4'
   778  00FC97  2E                 	db	46
   779  00FC98  48                 	db	72	;'H'
   780  00FC99  49                 	db	73	;'I'
   781  00FC9A  7C                 	db	124
   782  00FC9B  35                 	db	53	;'5'
   783  00FC9C  2E                 	db	46
   784  00FC9D  4D                 	db	77	;'M'
   785  00FC9E  45                 	db	69	;'E'
   786  00FC9F  44                 	db	68	;'D'
   787  00FCA0  00                 	db	0
   788  00FCA1                     STR_69:
   789  00FCA1  42                 	db	66	;'B'
   790  00FCA2  2E                 	db	46
   791  00FCA3  50                 	db	80	;'P'
   792  00FCA4  4C                 	db	76	;'L'
   793  00FCA5  41                 	db	65	;'A'
   794  00FCA6  7C                 	db	124
   795  00FCA7  38                 	db	56	;'8'
   796  00FCA8  2E                 	db	46
   797  00FCA9  53                 	db	83	;'S'
   798  00FCAA  56                 	db	86	;'V'
   799  00FCAB  7C                 	db	124
   800  00FCAC  39                 	db	57	;'9'
   801  00FCAD  2E                 	db	46
   802  00FCAE  42                 	db	66	;'B'
   803  00FCAF  4C                 	db	76	;'L'
   804  00FCB0  4B                 	db	75	;'K'
   805  00FCB1  00                 	db	0
   806  00FCB2                     STR_126:
   807  00FCB2  45                 	db	69	;'E'
   808  00FCB3  4C                 	db	76	;'L'
   809  00FCB4  53                 	db	83	;'S'
   810  00FCB5  45                 	db	69	;'E'
   811  00FCB6  20                 	db	32
   812  00FCB7  54                 	db	84	;'T'
   813  00FCB8  4F                 	db	79	;'O'
   814  00FCB9  47                 	db	71	;'G'
   815  00FCBA  47                 	db	71	;'G'
   816  00FCBB  4C                 	db	76	;'L'
   817  00FCBC  45                 	db	69	;'E'
   818  00FCBD  53                 	db	83	;'S'
   819  00FCBE  20                 	db	32
   820  00FCBF  41                 	db	65	;'A'
   821  00FCC0  52                 	db	82	;'R'
   822  00FCC1  4D                 	db	77	;'M'
   823  00FCC2  00                 	db	0
   824  00FCC3                     STR_111:
   825  00FCC3  54                 	db	84	;'T'
   826  00FCC4  53                 	db	83	;'S'
   827  00FCC5  54                 	db	84	;'T'
   828  00FCC6  3A                 	db	58	;':'
   829  00FCC7  20                 	db	32
   830  00FCC8  42                 	db	66	;'B'
   831  00FCC9  4F                 	db	79	;'O'
   832  00FCCA  54                 	db	84	;'T'
   833  00FCCB  48                 	db	72	;'H'
   834  00FCCC  20                 	db	32
   835  00FCCD  53                 	db	83	;'S'
   836  00FCCE  45                 	db	69	;'E'
   837  00FCCF  52                 	db	82	;'R'
   838  00FCD0  56                 	db	86	;'V'
   839  00FCD1  4F                 	db	79	;'O'
   840  00FCD2  53                 	db	83	;'S'
   841  00FCD3  00                 	db	0
   842  00FCD4                     STR_41:
   843  00FCD4  4C                 	db	76	;'L'
   844  00FCD5  4F                 	db	79	;'O'
   845  00FCD6  47                 	db	71	;'G'
   846  00FCD7  20                 	db	32
   847  00FCD8  31                 	db	49	;'1'
   848  00FCD9  20                 	db	32
   849  00FCDA  20                 	db	32
   850  00FCDB  20                 	db	32
   851  00FCDC  20                 	db	32
   852  00FCDD  20                 	db	32
   853  00FCDE  20                 	db	32
   854  00FCDF  20                 	db	32
   855  00FCE0  20                 	db	32
   856  00FCE1  20                 	db	32
   857  00FCE2  20                 	db	32
   858  00FCE3  20                 	db	32
   859  00FCE4  00                 	db	0
   860  00FCE5                     STR_40:
   861  00FCE5  4C                 	db	76	;'L'
   862  00FCE6  4F                 	db	79	;'O'
   863  00FCE7  47                 	db	71	;'G'
   864  00FCE8  20                 	db	32
   865  00FCE9  32                 	db	50	;'2'
   866  00FCEA  20                 	db	32
   867  00FCEB  20                 	db	32
   868  00FCEC  20                 	db	32
   869  00FCED  20                 	db	32
   870  00FCEE  20                 	db	32
   871  00FCEF  20                 	db	32
   872  00FCF0  20                 	db	32
   873  00FCF1  20                 	db	32
   874  00FCF2  20                 	db	32
   875  00FCF3  20                 	db	32
   876  00FCF4  20                 	db	32
   877  00FCF5  00                 	db	0
   878  00FCF6                     STR_44:
   879  00FCF6  4C                 	db	76	;'L'
   880  00FCF7  4F                 	db	79	;'O'
   881  00FCF8  47                 	db	71	;'G'
   882  00FCF9  20                 	db	32
   883  00FCFA  33                 	db	51	;'3'
   884  00FCFB  20                 	db	32
   885  00FCFC  20                 	db	32
   886  00FCFD  20                 	db	32
   887  00FCFE  20                 	db	32
   888  00FCFF  20                 	db	32
   889  00FD00  20                 	db	32
   890  00FD01  20                 	db	32
   891  00FD02  20                 	db	32
   892  00FD03  20                 	db	32
   893  00FD04  20                 	db	32
   894  00FD05  20                 	db	32
   895  00FD06  00                 	db	0
   896  00FD07                     STR_48:
   897  00FD07  4C                 	db	76	;'L'
   898  00FD08  4F                 	db	79	;'O'
   899  00FD09  47                 	db	71	;'G'
   900  00FD0A  20                 	db	32
   901  00FD0B  34                 	db	52	;'4'
   902  00FD0C  20                 	db	32
   903  00FD0D  20                 	db	32
   904  00FD0E  20                 	db	32
   905  00FD0F  20                 	db	32
   906  00FD10  20                 	db	32
   907  00FD11  20                 	db	32
   908  00FD12  20                 	db	32
   909  00FD13  20                 	db	32
   910  00FD14  20                 	db	32
   911  00FD15  20                 	db	32
   912  00FD16  20                 	db	32
   913  00FD17  00                 	db	0
   914  00FD18                     STR_36:
   915  00FD18  33                 	db	51	;'3'
   916  00FD19  2E                 	db	46
   917  00FD1A  20                 	db	32
   918  00FD1B  4C                 	db	76	;'L'
   919  00FD1C  4F                 	db	79	;'O'
   920  00FD1D  47                 	db	71	;'G'
   921  00FD1E  53                 	db	83	;'S'
   922  00FD1F  20                 	db	32
   923  00FD20  20                 	db	32
   924  00FD21  20                 	db	32
   925  00FD22  20                 	db	32
   926  00FD23  20                 	db	32
   927  00FD24  20                 	db	32
   928  00FD25  20                 	db	32
   929  00FD26  20                 	db	32
   930  00FD27  20                 	db	32
   931  00FD28  00                 	db	0
   932  00FD29                     STR_32:
   933  00FD29  32                 	db	50	;'2'
   934  00FD2A  2E                 	db	46
   935  00FD2B  20                 	db	32
   936  00FD2C  53                 	db	83	;'S'
   937  00FD2D  4F                 	db	79	;'O'
   938  00FD2E  52                 	db	82	;'R'
   939  00FD2F  54                 	db	84	;'T'
   940  00FD30  20                 	db	32
   941  00FD31  20                 	db	32
   942  00FD32  20                 	db	32
   943  00FD33  20                 	db	32
   944  00FD34  20                 	db	32
   945  00FD35  20                 	db	32
   946  00FD36  20                 	db	32
   947  00FD37  20                 	db	32
   948  00FD38  20                 	db	32
   949  00FD39  00                 	db	0
   950  00FD3A                     STR_33:
   951  00FD3A  31                 	db	49	;'1'
   952  00FD3B  2E                 	db	46
   953  00FD3C  20                 	db	32
   954  00FD3D  44                 	db	68	;'D'
   955  00FD3E  41                 	db	65	;'A'
   956  00FD3F  54                 	db	84	;'T'
   957  00FD40  45                 	db	69	;'E'
   958  00FD41  2F                 	db	47
   959  00FD42  54                 	db	84	;'T'
   960  00FD43  49                 	db	73	;'I'
   961  00FD44  4D                 	db	77	;'M'
   962  00FD45  45                 	db	69	;'E'
   963  00FD46  20                 	db	32
   964  00FD47  20                 	db	32
   965  00FD48  20                 	db	32
   966  00FD49  20                 	db	32
   967  00FD4A  00                 	db	0
   968  00FD4B                     STR_24:
   969  00FD4B  20                 	db	32
   970  00FD4C  2D                 	db	45
   971  00FD4D  2D                 	db	45
   972  00FD4E  20                 	db	32
   973  00FD4F  50                 	db	80	;'P'
   974  00FD50  4F                 	db	79	;'O'
   975  00FD51  50                 	db	80	;'P'
   976  00FD52  20                 	db	32
   977  00FD53  20                 	db	32
   978  00FD54  43                 	db	67	;'C'
   979  00FD55  41                 	db	65	;'A'
   980  00FD56  4E                 	db	78	;'N'
   981  00FD57  20                 	db	32
   982  00FD58  2D                 	db	45
   983  00FD59  2D                 	db	45
   984  00FD5A  20                 	db	32
   985  00FD5B  00                 	db	0
   986  00FD5C                     STR_26:
   987  00FD5C  20                 	db	32
   988  00FD5D  2D                 	db	45
   989  00FD5E  2D                 	db	45
   990  00FD5F  20                 	db	32
   991  00FD60  53                 	db	83	;'S'
   992  00FD61  4F                 	db	79	;'O'
   993  00FD62  55                 	db	85	;'U'
   994  00FD63  50                 	db	80	;'P'
   995  00FD64  20                 	db	32
   996  00FD65  43                 	db	67	;'C'
   997  00FD66  41                 	db	65	;'A'
   998  00FD67  4E                 	db	78	;'N'
   999  00FD68  20                 	db	32
  1000  00FD69  2D                 	db	45
  1001  00FD6A  2D                 	db	45
  1002  00FD6B  20                 	db	32
  1003  00FD6C  00                 	db	0
  1004  00FD6D                     STR_28:
  1005  00FD6D  2D                 	db	45
  1006  00FD6E  2D                 	db	45
  1007  00FD6F  20                 	db	32
  1008  00FD70  54                 	db	84	;'T'
  1009  00FD71  4F                 	db	79	;'O'
  1010  00FD72  54                 	db	84	;'T'
  1011  00FD73  41                 	db	65	;'A'
  1012  00FD74  4C                 	db	76	;'L'
  1013  00FD75  20                 	db	32
  1014  00FD76  43                 	db	67	;'C'
  1015  00FD77  41                 	db	65	;'A'
  1016  00FD78  4E                 	db	78	;'N'
  1017  00FD79  53                 	db	83	;'S'
  1018  00FD7A  20                 	db	32
  1019  00FD7B  2D                 	db	45
  1020  00FD7C  2D                 	db	45
  1021  00FD7D  00                 	db	0
  1022  00FD7E                     STR_39:
  1023  00FD7E  4C                 	db	76	;'L'
  1024  00FD7F  4F                 	db	79	;'O'
  1025  00FD80  47                 	db	71	;'G'
  1026  00FD81  20                 	db	32
  1027  00FD82  31                 	db	49	;'1'
  1028  00FD83  20                 	db	32
  1029  00FD84  20                 	db	32
  1030  00FD85  20                 	db	32
  1031  00FD86  20                 	db	32
  1032  00FD87  20                 	db	32
  1033  00FD88  20                 	db	32
  1034  00FD89  20                 	db	32
  1035  00FD8A  20                 	db	32
  1036  00FD8B  20                 	db	32
  1037  00FD8C  20                 	db	32
  1038  00FD8D  3C                 	db	60	;'<'
  1039  00FD8E  00                 	db	0
  1040  00FD8F                     STR_42:
  1041  00FD8F  4C                 	db	76	;'L'
  1042  00FD90  4F                 	db	79	;'O'
  1043  00FD91  47                 	db	71	;'G'
  1044  00FD92  20                 	db	32
  1045  00FD93  32                 	db	50	;'2'
  1046  00FD94  20                 	db	32
  1047  00FD95  20                 	db	32
  1048  00FD96  20                 	db	32
  1049  00FD97  20                 	db	32
  1050  00FD98  20                 	db	32
  1051  00FD99  20                 	db	32
  1052  00FD9A  20                 	db	32
  1053  00FD9B  20                 	db	32
  1054  00FD9C  20                 	db	32
  1055  00FD9D  20                 	db	32
  1056  00FD9E  3C                 	db	60	;'<'
  1057  00FD9F  00                 	db	0
  1058  00FDA0                     STR_46:
  1059  00FDA0  4C                 	db	76	;'L'
  1060  00FDA1  4F                 	db	79	;'O'
  1061  00FDA2  47                 	db	71	;'G'
  1062  00FDA3  20                 	db	32
  1063  00FDA4  33                 	db	51	;'3'
  1064  00FDA5  20                 	db	32
  1065  00FDA6  20                 	db	32
  1066  00FDA7  20                 	db	32
  1067  00FDA8  20                 	db	32
  1068  00FDA9  20                 	db	32
  1069  00FDAA  20                 	db	32
  1070  00FDAB  20                 	db	32
  1071  00FDAC  20                 	db	32
  1072  00FDAD  20                 	db	32
  1073  00FDAE  20                 	db	32
  1074  00FDAF  3C                 	db	60	;'<'
  1075  00FDB0  00                 	db	0
  1076  00FDB1                     STR_50:
  1077  00FDB1  4C                 	db	76	;'L'
  1078  00FDB2  4F                 	db	79	;'O'
  1079  00FDB3  47                 	db	71	;'G'
  1080  00FDB4  20                 	db	32
  1081  00FDB5  34                 	db	52	;'4'
  1082  00FDB6  20                 	db	32
  1083  00FDB7  20                 	db	32
  1084  00FDB8  20                 	db	32
  1085  00FDB9  20                 	db	32
  1086  00FDBA  20                 	db	32
  1087  00FDBB  20                 	db	32
  1088  00FDBC  20                 	db	32
  1089  00FDBD  20                 	db	32
  1090  00FDBE  20                 	db	32
  1091  00FDBF  20                 	db	32
  1092  00FDC0  3C                 	db	60	;'<'
  1093  00FDC1  00                 	db	0
  1094  00FDC2                     STR_38:
  1095  00FDC2  33                 	db	51	;'3'
  1096  00FDC3  2E                 	db	46
  1097  00FDC4  20                 	db	32
  1098  00FDC5  4C                 	db	76	;'L'
  1099  00FDC6  4F                 	db	79	;'O'
  1100  00FDC7  47                 	db	71	;'G'
  1101  00FDC8  53                 	db	83	;'S'
  1102  00FDC9  20                 	db	32
  1103  00FDCA  20                 	db	32
  1104  00FDCB  20                 	db	32
  1105  00FDCC  20                 	db	32
  1106  00FDCD  20                 	db	32
  1107  00FDCE  20                 	db	32
  1108  00FDCF  20                 	db	32
  1109  00FDD0  20                 	db	32
  1110  00FDD1  3C                 	db	60	;'<'
  1111  00FDD2  00                 	db	0
  1112  00FDD3                     STR_34:
  1113  00FDD3  32                 	db	50	;'2'
  1114  00FDD4  2E                 	db	46
  1115  00FDD5  20                 	db	32
  1116  00FDD6  53                 	db	83	;'S'
  1117  00FDD7  4F                 	db	79	;'O'
  1118  00FDD8  52                 	db	82	;'R'
  1119  00FDD9  54                 	db	84	;'T'
  1120  00FDDA  20                 	db	32
  1121  00FDDB  20                 	db	32
  1122  00FDDC  20                 	db	32
  1123  00FDDD  20                 	db	32
  1124  00FDDE  20                 	db	32
  1125  00FDDF  20                 	db	32
  1126  00FDE0  20                 	db	32
  1127  00FDE1  20                 	db	32
  1128  00FDE2  3C                 	db	60	;'<'
  1129  00FDE3  00                 	db	0
  1130  00FDE4                     STR_31:
  1131  00FDE4  31                 	db	49	;'1'
  1132  00FDE5  2E                 	db	46
  1133  00FDE6  20                 	db	32
  1134  00FDE7  44                 	db	68	;'D'
  1135  00FDE8  41                 	db	65	;'A'
  1136  00FDE9  54                 	db	84	;'T'
  1137  00FDEA  45                 	db	69	;'E'
  1138  00FDEB  2F                 	db	47
  1139  00FDEC  54                 	db	84	;'T'
  1140  00FDED  49                 	db	73	;'I'
  1141  00FDEE  4D                 	db	77	;'M'
  1142  00FDEF  45                 	db	69	;'E'
  1143  00FDF0  20                 	db	32
  1144  00FDF1  20                 	db	32
  1145  00FDF2  20                 	db	32
  1146  00FDF3  3C                 	db	60	;'<'
  1147  00FDF4  00                 	db	0
  1148  00FDF5                     STR_6:
  1149  00FDF5  50                 	db	80	;'P'
  1150  00FDF6  41                 	db	65	;'A'
  1151  00FDF7  55                 	db	85	;'U'
  1152  00FDF8  53                 	db	83	;'S'
  1153  00FDF9  45                 	db	69	;'E'
  1154  00FDFA  20                 	db	32
  1155  00FDFB  3C                 	db	60	;'<'
  1156  00FDFC  20                 	db	32
  1157  00FDFD  7C                 	db	124
  1158  00FDFE  20                 	db	32
  1159  00FDFF  42                 	db	66	;'B'
  1160  00FE00  41                 	db	65	;'A'
  1161  00FE01  43                 	db	67	;'C'
  1162  00FE02  4B                 	db	75	;'K'
  1163  00FE03  20                 	db	32
  1164  00FE04  3E                 	db	62	;'>'
  1165  00FE05  00                 	db	0
  1166  00FE06                     STR_30:
  1167  00FE06  50                 	db	80	;'P'
  1168  00FE07  55                 	db	85	;'U'
  1169  00FE08  53                 	db	83	;'S'
  1170  00FE09  48                 	db	72	;'H'
  1171  00FE0A  20                 	db	32
  1172  00FE0B  54                 	db	84	;'T'
  1173  00FE0C  4F                 	db	79	;'O'
  1174  00FE0D  20                 	db	32
  1175  00FE0E  43                 	db	67	;'C'
  1176  00FE0F  4F                 	db	79	;'O'
  1177  00FE10  4E                 	db	78	;'N'
  1178  00FE11  54                 	db	84	;'T'
  1179  00FE12  49                 	db	73	;'I'
  1180  00FE13  4E                 	db	78	;'N'
  1181  00FE14  55                 	db	85	;'U'
  1182  00FE15  45                 	db	69	;'E'
  1183  00FE16  00                 	db	0
  1184  00FE17                     STR_27:
  1185  00FE17  4E                 	db	78	;'N'
  1186  00FE18  4C                 	db	76	;'L'
  1187  00FE19  41                 	db	65	;'A'
  1188  00FE1A  42                 	db	66	;'B'
  1189  00FE1B  3A                 	db	58	;':'
  1190  00FE1C  20                 	db	32
  1191  00FE1D  25                 	db	37
  1192  00FE1E  64                 	db	100	;'d'
  1193  00FE1F  7C                 	db	124
  1194  00FE20  4C                 	db	76	;'L'
  1195  00FE21  41                 	db	65	;'A'
  1196  00FE22  42                 	db	66	;'B'
  1197  00FE23  3A                 	db	58	;':'
  1198  00FE24  20                 	db	32
  1199  00FE25  25                 	db	37
  1200  00FE26  64                 	db	100	;'d'
  1201  00FE27  00                 	db	0
  1202  00FE28                     STR_25:
  1203  00FE28  4E                 	db	78	;'N'
  1204  00FE29  54                 	db	84	;'T'
  1205  00FE2A  41                 	db	65	;'A'
  1206  00FE2B  42                 	db	66	;'B'
  1207  00FE2C  3A                 	db	58	;':'
  1208  00FE2D  20                 	db	32
  1209  00FE2E  25                 	db	37
  1210  00FE2F  64                 	db	100	;'d'
  1211  00FE30  7C                 	db	124
  1212  00FE31  54                 	db	84	;'T'
  1213  00FE32  41                 	db	65	;'A'
  1214  00FE33  42                 	db	66	;'B'
  1215  00FE34  3A                 	db	58	;':'
  1216  00FE35  20                 	db	32
  1217  00FE36  25                 	db	37
  1218  00FE37  64                 	db	100	;'d'
  1219  00FE38  00                 	db	0
  1220  00FE39                     STR_84:
  1221  00FE39  4D                 	db	77	;'M'
  1222  00FE3A  41                 	db	65	;'A'
  1223  00FE3B  47                 	db	71	;'G'
  1224  00FE3C  5F                 	db	95	;'_'
  1225  00FE3D  73                 	db	115	;'s'
  1226  00FE3E  69                 	db	105	;'i'
  1227  00FE3F  67                 	db	103	;'g'
  1228  00FE40  6E                 	db	110	;'n'
  1229  00FE41  61                 	db	97	;'a'
  1230  00FE42  6C                 	db	108	;'l'
  1231  00FE43  3A                 	db	58	;':'
  1232  00FE44  20                 	db	32
  1233  00FE45  25                 	db	37
  1234  00FE46  64                 	db	100	;'d'
  1235  00FE47  20                 	db	32
  1236  00FE48  00                 	db	0
  1237  00FE49                     STR_104:
  1238  00FE49  54                 	db	84	;'T'
  1239  00FE4A  53                 	db	83	;'S'
  1240  00FE4B  54                 	db	84	;'T'
  1241  00FE4C  3A                 	db	58	;':'
  1242  00FE4D  20                 	db	32
  1243  00FE4E  54                 	db	84	;'T'
  1244  00FE4F  49                 	db	73	;'I'
  1245  00FE50  4C                 	db	76	;'L'
  1246  00FE51  54                 	db	84	;'T'
  1247  00FE52  20                 	db	32
  1248  00FE53  53                 	db	83	;'S'
  1249  00FE54  45                 	db	69	;'E'
  1250  00FE55  52                 	db	82	;'R'
  1251  00FE56  56                 	db	86	;'V'
  1252  00FE57  4F                 	db	79	;'O'
  1253  00FE58  00                 	db	0
  1254  00FE59                     STR_64:
  1255  00FE59  53                 	db	83	;'S'
  1256  00FE5A  4F                 	db	79	;'O'
  1257  00FE5B  52                 	db	82	;'R'
  1258  00FE5C  54                 	db	84	;'T'
  1259  00FE5D  49                 	db	73	;'I'
  1260  00FE5E  4E                 	db	78	;'N'
  1261  00FE5F  47                 	db	71	;'G'
  1262  00FE60  2E                 	db	46
  1263  00FE61  2E                 	db	46
  1264  00FE62  2E                 	db	46
  1265  00FE63  20                 	db	32
  1266  00FE64  20                 	db	32
  1267  00FE65  20                 	db	32
  1268  00FE66  20                 	db	32
  1269  00FE67  20                 	db	32
  1270  00FE68  00                 	db	0
  1271  00FE69                     STR_65:
  1272  00FE69  54                 	db	84	;'T'
  1273  00FE6A  49                 	db	73	;'I'
  1274  00FE6B  4D                 	db	77	;'M'
  1275  00FE6C  45                 	db	69	;'E'
  1276  00FE6D  20                 	db	32
  1277  00FE6E  25                 	db	37
  1278  00FE6F  64                 	db	100	;'d'
  1279  00FE70  3A                 	db	58	;':'
  1280  00FE71  25                 	db	37
  1281  00FE72  30                 	db	48	;'0'
  1282  00FE73  32                 	db	50	;'2'
  1283  00FE74  64                 	db	100	;'d'
  1284  00FE75  20                 	db	32
  1285  00FE76  20                 	db	32
  1286  00FE77  20                 	db	32
  1287  00FE78  00                 	db	0
  1288  00FE79                     STR_4:
  1289  00FE79  44                 	db	68	;'D'
  1290  00FE7A  49                 	db	73	;'I'
  1291  00FE7B  44                 	db	68	;'D'
  1292  00FE7C  4E                 	db	78	;'N'
  1293  00FE7D  27                 	db	39
  1294  00FE7E  54                 	db	84	;'T'
  1295  00FE7F  20                 	db	32
  1296  00FE80  43                 	db	67	;'C'
  1297  00FE81  4F                 	db	79	;'O'
  1298  00FE82  4D                 	db	77	;'M'
  1299  00FE83  50                 	db	80	;'P'
  1300  00FE84  4C                 	db	76	;'L'
  1301  00FE85  45                 	db	69	;'E'
  1302  00FE86  54                 	db	84	;'T'
  1303  00FE87  45                 	db	69	;'E'
  1304  00FE88  00                 	db	0
  1305  00FE89                     STR_121:
  1306  00FE89  44                 	db	68	;'D'
  1307  00FE8A  3A                 	db	58	;':'
  1308  00FE8B  52                 	db	82	;'R'
  1309  00FE8C  45                 	db	69	;'E'
  1310  00FE8D  54                 	db	84	;'T'
  1311  00FE8E  7C                 	db	124
  1312  00FE8F  32                 	db	50	;'2'
  1313  00FE90  3A                 	db	58	;':'
  1314  00FE91  43                 	db	67	;'C'
  1315  00FE92  20                 	db	32
  1316  00FE93  25                 	db	37
  1317  00FE94  64                 	db	100	;'d'
  1318  00FE95  20                 	db	32
  1319  00FE96  20                 	db	32
  1320  00FE97  00                 	db	0
  1321  00FE98                     STR_110:
  1322  00FE98  43                 	db	67	;'C'
  1323  00FE99  41                 	db	65	;'A'
  1324  00FE9A  4D                 	db	77	;'M'
  1325  00FE9B  20                 	db	32
  1326  00FE9C  44                 	db	68	;'D'
  1327  00FE9D  57                 	db	87	;'W'
  1328  00FE9E  4E                 	db	78	;'N'
  1329  00FE9F  20                 	db	32
  1330  00FEA0  7C                 	db	124
  1331  00FEA1  52                 	db	82	;'R'
  1332  00FEA2  43                 	db	67	;'C'
  1333  00FEA3  30                 	db	48	;'0'
  1334  00FEA4  3D                 	db	61	;'='
  1335  00FEA5  30                 	db	48	;'0'
  1336  00FEA6  00                 	db	0
  1337  00FEA7                     STR_109:
  1338  00FEA7  43                 	db	67	;'C'
  1339  00FEA8  41                 	db	65	;'A'
  1340  00FEA9  4D                 	db	77	;'M'
  1341  00FEAA  20                 	db	32
  1342  00FEAB  55                 	db	85	;'U'
  1343  00FEAC  50                 	db	80	;'P'
  1344  00FEAD  20                 	db	32
  1345  00FEAE  20                 	db	32
  1346  00FEAF  7C                 	db	124
  1347  00FEB0  52                 	db	82	;'R'
  1348  00FEB1  43                 	db	67	;'C'
  1349  00FEB2  30                 	db	48	;'0'
  1350  00FEB3  3D                 	db	61	;'='
  1351  00FEB4  31                 	db	49	;'1'
  1352  00FEB5  00                 	db	0
  1353  00FEB6                     STR_83:
  1354  00FEB6  54                 	db	84	;'T'
  1355  00FEB7  53                 	db	83	;'S'
  1356  00FEB8  54                 	db	84	;'T'
  1357  00FEB9  3A                 	db	58	;':'
  1358  00FEBA  20                 	db	32
  1359  00FEBB  4D                 	db	77	;'M'
  1360  00FEBC  41                 	db	65	;'A'
  1361  00FEBD  47                 	db	71	;'G'
  1362  00FEBE  4E                 	db	78	;'N'
  1363  00FEBF  45                 	db	69	;'E'
  1364  00FEC0  54                 	db	84	;'T'
  1365  00FEC1  49                 	db	73	;'I'
  1366  00FEC2  53                 	db	83	;'S'
  1367  00FEC3  4D                 	db	77	;'M'
  1368  00FEC4  00                 	db	0
  1369  00FEC5                     STR_108:
  1370  00FEC5  54                 	db	84	;'T'
  1371  00FEC6  53                 	db	83	;'S'
  1372  00FEC7  54                 	db	84	;'T'
  1373  00FEC8  3A                 	db	58	;':'
  1374  00FEC9  20                 	db	32
  1375  00FECA  43                 	db	67	;'C'
  1376  00FECB  41                 	db	65	;'A'
  1377  00FECC  4D                 	db	77	;'M'
  1378  00FECD  20                 	db	32
  1379  00FECE  53                 	db	83	;'S'
  1380  00FECF  45                 	db	69	;'E'
  1381  00FED0  52                 	db	82	;'R'
  1382  00FED1  56                 	db	86	;'V'
  1383  00FED2  4F                 	db	79	;'O'
  1384  00FED3  00                 	db	0
  1385  00FED4                     STR_97:
  1386  00FED4  54                 	db	84	;'T'
  1387  00FED5  53                 	db	83	;'S'
  1388  00FED6  54                 	db	84	;'T'
  1389  00FED7  3A                 	db	58	;':'
  1390  00FED8  20                 	db	32
  1391  00FED9  50                 	db	80	;'P'
  1392  00FEDA  41                 	db	65	;'A'
  1393  00FEDB  4E                 	db	78	;'N'
  1394  00FEDC  20                 	db	32
  1395  00FEDD  53                 	db	83	;'S'
  1396  00FEDE  45                 	db	69	;'E'
  1397  00FEDF  52                 	db	82	;'R'
  1398  00FEE0  56                 	db	86	;'V'
  1399  00FEE1  4F                 	db	79	;'O'
  1400  00FEE2  00                 	db	0
  1401  00FEE3                     STR_75:
  1402  00FEE3  41                 	db	65	;'A'
  1403  00FEE4  4C                 	db	76	;'L'
  1404  00FEE5  47                 	db	71	;'G'
  1405  00FEE6  34                 	db	52	;'4'
  1406  00FEE7  3A                 	db	58	;':'
  1407  00FEE8  20                 	db	32
  1408  00FEE9  41                 	db	65	;'A'
  1409  00FEEA  4C                 	db	76	;'L'
  1410  00FEEB  4C                 	db	76	;'L'
  1411  00FEEC  20                 	db	32
  1412  00FEED  43                 	db	67	;'C'
  1413  00FEEE  41                 	db	65	;'A'
  1414  00FEEF  4E                 	db	78	;'N'
  1415  00FEF0  53                 	db	83	;'S'
  1416  00FEF1  00                 	db	0
  1417  00FEF2                     STR_91:
  1418  00FEF2  54                 	db	84	;'T'
  1419  00FEF3  53                 	db	83	;'S'
  1420  00FEF4  54                 	db	84	;'T'
  1421  00FEF5  3A                 	db	58	;':'
  1422  00FEF6  20                 	db	32
  1423  00FEF7  44                 	db	68	;'D'
  1424  00FEF8  43                 	db	67	;'C'
  1425  00FEF9  20                 	db	32
  1426  00FEFA  4D                 	db	77	;'M'
  1427  00FEFB  4F                 	db	79	;'O'
  1428  00FEFC  54                 	db	84	;'T'
  1429  00FEFD  4F                 	db	79	;'O'
  1430  00FEFE  52                 	db	82	;'R'
  1431  00FEFF  53                 	db	83	;'S'
  1432  00FF00  00                 	db	0
  1433  00FF01                     STR_70:
  1434  00FF01  41                 	db	65	;'A'
  1435  00FF02  4C                 	db	76	;'L'
  1436  00FF03  47                 	db	71	;'G'
  1437  00FF04  4F                 	db	79	;'O'
  1438  00FF05  52                 	db	82	;'R'
  1439  00FF06  49                 	db	73	;'I'
  1440  00FF07  54                 	db	84	;'T'
  1441  00FF08  48                 	db	72	;'H'
  1442  00FF09  4D                 	db	77	;'M'
  1443  00FF0A  20                 	db	32
  1444  00FF0B  54                 	db	84	;'T'
  1445  00FF0C  45                 	db	69	;'E'
  1446  00FF0D  53                 	db	83	;'S'
  1447  00FF0E  54                 	db	84	;'T'
  1448  00FF0F  00                 	db	0
  1449  00FF10                     STR_92:
  1450  00FF10  50                 	db	80	;'P'
  1451  00FF11  49                 	db	73	;'I'
  1452  00FF12  4E                 	db	78	;'N'
  1453  00FF13  20                 	db	32
  1454  00FF14  52                 	db	82	;'R'
  1455  00FF15  41                 	db	65	;'A'
  1456  00FF16  35                 	db	53	;'5'
  1457  00FF17  20                 	db	32
  1458  00FF18  48                 	db	72	;'H'
  1459  00FF19  49                 	db	73	;'I'
  1460  00FF1A  47                 	db	71	;'G'
  1461  00FF1B  48                 	db	72	;'H'
  1462  00FF1C  2E                 	db	46
  1463  00FF1D  00                 	db	0
  1464  00FF1E                     STR_73:
  1465  00FF1E  41                 	db	65	;'A'
  1466  00FF1F  4C                 	db	76	;'L'
  1467  00FF20  47                 	db	71	;'G'
  1468  00FF21  32                 	db	50	;'2'
  1469  00FF22  3A                 	db	58	;':'
  1470  00FF23  20                 	db	32
  1471  00FF24  31                 	db	49	;'1'
  1472  00FF25  32                 	db	50	;'2'
  1473  00FF26  20                 	db	32
  1474  00FF27  43                 	db	67	;'C'
  1475  00FF28  41                 	db	65	;'A'
  1476  00FF29  4E                 	db	78	;'N'
  1477  00FF2A  53                 	db	83	;'S'
  1478  00FF2B  00                 	db	0
  1479  00FF2C                     STR_76:
  1480  00FF2C  41                 	db	65	;'A'
  1481  00FF2D  4C                 	db	76	;'L'
  1482  00FF2E  47                 	db	71	;'G'
  1483  00FF2F  35                 	db	53	;'5'
  1484  00FF30  3A                 	db	58	;':'
  1485  00FF31  20                 	db	32
  1486  00FF32  4E                 	db	78	;'N'
  1487  00FF33  4F                 	db	79	;'O'
  1488  00FF34  20                 	db	32
  1489  00FF35  43                 	db	67	;'C'
  1490  00FF36  41                 	db	65	;'A'
  1491  00FF37  4E                 	db	78	;'N'
  1492  00FF38  53                 	db	83	;'S'
  1493  00FF39  00                 	db	0
  1494  00FF3A                     STR_71:
  1495  00FF3A  50                 	db	80	;'P'
  1496  00FF3B  55                 	db	85	;'U'
  1497  00FF3C  53                 	db	83	;'S'
  1498  00FF3D  48                 	db	72	;'H'
  1499  00FF3E  20                 	db	32
  1500  00FF3F  54                 	db	84	;'T'
  1501  00FF40  4F                 	db	79	;'O'
  1502  00FF41  20                 	db	32
  1503  00FF42  53                 	db	83	;'S'
  1504  00FF43  54                 	db	84	;'T'
  1505  00FF44  41                 	db	65	;'A'
  1506  00FF45  52                 	db	82	;'R'
  1507  00FF46  54                 	db	84	;'T'
  1508  00FF47  00                 	db	0
  1509  00FF48                     STR_23:
  1510  00FF48  25                 	db	37
  1511  00FF49  64                 	db	100	;'d'
  1512  00FF4A  20                 	db	32
  1513  00FF4B  4D                 	db	77	;'M'
  1514  00FF4C  49                 	db	73	;'I'
  1515  00FF4D  4E                 	db	78	;'N'
  1516  00FF4E  20                 	db	32
  1517  00FF4F  25                 	db	37
  1518  00FF50  64                 	db	100	;'d'
  1519  00FF51  20                 	db	32
  1520  00FF52  53                 	db	83	;'S'
  1521  00FF53  45                 	db	69	;'E'
  1522  00FF54  43                 	db	67	;'C'
  1523  00FF55  00                 	db	0
  1524  00FF56                     STR_2:
  1525  00FF56  54                 	db	84	;'T'
  1526  00FF57  49                 	db	73	;'I'
  1527  00FF58  4D                 	db	77	;'M'
  1528  00FF59  45                 	db	69	;'E'
  1529  00FF5A  3A                 	db	58	;':'
  1530  00FF5B  20                 	db	32
  1531  00FF5C  25                 	db	37
  1532  00FF5D  64                 	db	100	;'d'
  1533  00FF5E  3A                 	db	58	;':'
  1534  00FF5F  25                 	db	37
  1535  00FF60  30                 	db	48	;'0'
  1536  00FF61  32                 	db	50	;'2'
  1537  00FF62  64                 	db	100	;'d'
  1538  00FF63  00                 	db	0
  1539  00FF64                     STR_74:
  1540  00FF64  41                 	db	65	;'A'
  1541  00FF65  4C                 	db	76	;'L'
  1542  00FF66  47                 	db	71	;'G'
  1543  00FF67  33                 	db	51	;'3'
  1544  00FF68  3A                 	db	58	;':'
  1545  00FF69  20                 	db	32
  1546  00FF6A  31                 	db	49	;'1'
  1547  00FF6B  20                 	db	32
  1548  00FF6C  43                 	db	67	;'C'
  1549  00FF6D  41                 	db	65	;'A'
  1550  00FF6E  4E                 	db	78	;'N'
  1551  00FF6F  00                 	db	0
  1552  00FF70                     STR_94:
  1553  00FF70  50                 	db	80	;'P'
  1554  00FF71  49                 	db	73	;'I'
  1555  00FF72  4E                 	db	78	;'N'
  1556  00FF73  20                 	db	32
  1557  00FF74  52                 	db	82	;'R'
  1558  00FF75  41                 	db	65	;'A'
  1559  00FF76  33                 	db	51	;'3'
  1560  00FF77  2E                 	db	46
  1561  00FF78  2E                 	db	46
  1562  00FF79  2E                 	db	46
  1563  00FF7A  00                 	db	0
  1564  00FF7B                     STR_96:
  1565  00FF7B  50                 	db	80	;'P'
  1566  00FF7C  49                 	db	73	;'I'
  1567  00FF7D  4E                 	db	78	;'N'
  1568  00FF7E  20                 	db	32
  1569  00FF7F  52                 	db	82	;'R'
  1570  00FF80  41                 	db	65	;'A'
  1571  00FF81  34                 	db	52	;'4'
  1572  00FF82  2E                 	db	46
  1573  00FF83  2E                 	db	46
  1574  00FF84  2E                 	db	46
  1575  00FF85  00                 	db	0
  1576  00FF86                     STR_85:
  1577  00FF86  54                 	db	84	;'T'
  1578  00FF87  53                 	db	83	;'S'
  1579  00FF88  54                 	db	84	;'T'
  1580  00FF89  3A                 	db	58	;':'
  1581  00FF8A  20                 	db	32
  1582  00FF8B  43                 	db	67	;'C'
  1583  00FF8C  4F                 	db	79	;'O'
  1584  00FF8D  4E                 	db	78	;'N'
  1585  00FF8E  44                 	db	68	;'D'
  1586  00FF8F  00                 	db	0
  1587  00FF90                     STR_89:
  1588  00FF90  41                 	db	65	;'A'
  1589  00FF91  43                 	db	67	;'C'
  1590  00FF92  54                 	db	84	;'T'
  1591  00FF93  55                 	db	85	;'U'
  1592  00FF94  41                 	db	65	;'A'
  1593  00FF95  54                 	db	84	;'T'
  1594  00FF96  4F                 	db	79	;'O'
  1595  00FF97  52                 	db	82	;'R'
  1596  00FF98  53                 	db	83	;'S'
  1597  00FF99  00                 	db	0
  1598  00FF9A                     STR_22:
  1599  00FF9A  44                 	db	68	;'D'
  1600  00FF9B  55                 	db	85	;'U'
  1601  00FF9C  52                 	db	82	;'R'
  1602  00FF9D  41                 	db	65	;'A'
  1603  00FF9E  54                 	db	84	;'T'
  1604  00FF9F  49                 	db	73	;'I'
  1605  00FFA0  4F                 	db	79	;'O'
  1606  00FFA1  4E                 	db	78	;'N'
  1607  00FFA2  3A                 	db	58	;':'
  1608  00FFA3  00                 	db	0
  1609  00FFA4                     STR_87:
  1610  00FFA4  43                 	db	67	;'C'
  1611  00FFA5  4F                 	db	79	;'O'
  1612  00FFA6  4E                 	db	78	;'N'
  1613  00FFA7  44                 	db	68	;'D'
  1614  00FFA8  3A                 	db	58	;':'
  1615  00FFA9  20                 	db	32
  1616  00FFAA  25                 	db	37
  1617  00FFAB  64                 	db	100	;'d'
  1618  00FFAC  00                 	db	0
  1619  00FFAD                     STR_77:
  1620  00FFAD  53                 	db	83	;'S'
  1621  00FFAE  45                 	db	69	;'E'
  1622  00FFAF  4E                 	db	78	;'N'
  1623  00FFB0  53                 	db	83	;'S'
  1624  00FFB1  4F                 	db	79	;'O'
  1625  00FFB2  52                 	db	82	;'R'
  1626  00FFB3  53                 	db	83	;'S'
  1627  00FFB4  00                 	db	0
  1628  00FFB5                     STR_129:
  1629  00FFB5  28                 	db	40
  1630  00FFB6  6E                 	db	110	;'n'
  1631  00FFB7  75                 	db	117	;'u'
  1632  00FFB8  6C                 	db	108	;'l'
  1633  00FFB9  6C                 	db	108	;'l'
  1634  00FFBA  29                 	db	41
  1635  00FFBB  00                 	db	0
  1636  00FFBC                     STR_67:
  1637  00FFBC  46                 	db	70	;'F'
  1638  00FFBD  41                 	db	65	;'A'
  1639  00FFBE  49                 	db	73	;'I'
  1640  00FFBF  4C                 	db	76	;'L'
  1641  00FFC0  45                 	db	69	;'E'
  1642  00FFC1  44                 	db	68	;'D'
  1643  00FFC2  00                 	db	0
  1644  00FFC3                     STR_7:
  1645  00FFC3  53                 	db	83	;'S'
  1646  00FFC4  54                 	db	84	;'T'
  1647  00FFC5  41                 	db	65	;'A'
  1648  00FFC6  52                 	db	82	;'R'
  1649  00FFC7  54                 	db	84	;'T'
  1650  00FFC8  3A                 	db	58	;':'
  1651  00FFC9  00                 	db	0
  1652  00FFCA                     STR_9:
  1653  00FFCA  46                 	db	70	;'F'
  1654  00FFCB  45                 	db	69	;'E'
  1655  00FFCC  42                 	db	66	;'B'
  1656  00FFCD  00                 	db	0
  1657  00FFCE                     STR_19:
  1658  00FFCE  44                 	db	68	;'D'
  1659  00FFCF  45                 	db	69	;'E'
  1660  00FFD0  43                 	db	67	;'C'
  1661  00FFD1  00                 	db	0
  1662  00FFD2                     STR_15:
  1663  00FFD2  41                 	db	65	;'A'
  1664  00FFD3  55                 	db	85	;'U'
  1665  00FFD4  47                 	db	71	;'G'
  1666  00FFD5  00                 	db	0
  1667  00FFD6                     STR_14:
  1668  00FFD6  4A                 	db	74	;'J'
  1669  00FFD7  55                 	db	85	;'U'
  1670  00FFD8  4C                 	db	76	;'L'
  1671  00FFD9  00                 	db	0
  1672  00FFDA                     STR_8:
  1673  00FFDA  4A                 	db	74	;'J'
  1674  00FFDB  41                 	db	65	;'A'
  1675  00FFDC  4E                 	db	78	;'N'
  1676  00FFDD  00                 	db	0
  1677  00FFDE                     STR_13:
  1678  00FFDE  4A                 	db	74	;'J'
  1679  00FFDF  55                 	db	85	;'U'
  1680  00FFE0  4E                 	db	78	;'N'
  1681  00FFE1  00                 	db	0
  1682  00FFE2                     STR_16:
  1683  00FFE2  53                 	db	83	;'S'
  1684  00FFE3  45                 	db	69	;'E'
  1685  00FFE4  50                 	db	80	;'P'
  1686  00FFE5  00                 	db	0
  1687  00FFE6                     STR_10:
  1688  00FFE6  4D                 	db	77	;'M'
  1689  00FFE7  41                 	db	65	;'A'
  1690  00FFE8  52                 	db	82	;'R'
  1691  00FFE9  00                 	db	0
  1692  00FFEA                     STR_11:
  1693  00FFEA  41                 	db	65	;'A'
  1694  00FFEB  50                 	db	80	;'P'
  1695  00FFEC  52                 	db	82	;'R'
  1696  00FFED  00                 	db	0
  1697  00FFEE                     STR_20:
  1698  00FFEE  45                 	db	69	;'E'
  1699  00FFEF  52                 	db	82	;'R'
  1700  00FFF0  52                 	db	82	;'R'
  1701  00FFF1  00                 	db	0
  1702  00FFF2                     STR_17:
  1703  00FFF2  4F                 	db	79	;'O'
  1704  00FFF3  43                 	db	67	;'C'
  1705  00FFF4  54                 	db	84	;'T'
  1706  00FFF5  00                 	db	0
  1707  00FFF6                     STR_18:
  1708  00FFF6  4E                 	db	78	;'N'
  1709  00FFF7  4F                 	db	79	;'O'
  1710  00FFF8  56                 	db	86	;'V'
  1711  00FFF9  00                 	db	0
  1712  00FFFA                     STR_12:
  1713  00FFFA  4D                 	db	77	;'M'
  1714  00FFFB  41                 	db	65	;'A'
  1715  00FFFC  59                 	db	89	;'Y'
  1716  00FFFD  00                 	db	0
  1717  0000                     
  1718                           ; #config settings
  1719  00FFFE  00                 	db	0	; dummy byte at the end
  1720  0000                     
  1721                           	psect	cinit
  1722  0057E4                     __pcinit:
  1723                           	opt stack 0
  1724  0057E4                     start_initialization:
  1725                           	opt stack 0
  1726  0057E4                     __initialization:
  1727                           	opt stack 0
  1728                           
  1729                           ; Initialize objects allocated to BANK1 (8 bytes)
  1730                           ; load TBLPTR registers with __pidataBANK1
  1731  0057E4  0EDE               	movlw	low __pidataBANK1
  1732  0057E6  6EF6               	movwf	tblptrl,c
  1733  0057E8  0E5F               	movlw	high __pidataBANK1
  1734  0057EA  6EF7               	movwf	tblptrh,c
  1735  0057EC  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1736  0057EE  6EF8               	movwf	tblptru,c
  1737  0057F0  EE01  F04D         	lfsr	0,__pdataBANK1
  1738  0057F4  EE10 F008          	lfsr	1,8
  1739  0057F8                     copy_data0:
  1740  0057F8  0009               	tblrd		*+
  1741  0057FA  CFF5 FFEE          	movff	tablat,postinc0
  1742  0057FE  50E5               	movf	postdec1,w,c
  1743  005800  50E1               	movf	fsr1l,w,c
  1744  005802  E1FA               	bnz	copy_data0
  1745                           
  1746                           ; Clear objects allocated to BANK1 (77 bytes)
  1747  005804  EE01  F000         	lfsr	0,__pbssBANK1
  1748  005808  0E4D               	movlw	77
  1749  00580A                     clear_0:
  1750  00580A  6AEE               	clrf	postinc0,c
  1751  00580C  06E8               	decf	wreg,f,c
  1752  00580E  E1FD               	bnz	clear_0
  1753                           
  1754                           ; Clear objects allocated to BANK0 (38 bytes)
  1755  005810  EE00  F0DA         	lfsr	0,__pbssBANK0
  1756  005814  0E26               	movlw	38
  1757  005816                     clear_1:
  1758  005816  6AEE               	clrf	postinc0,c
  1759  005818  06E8               	decf	wreg,f,c
  1760  00581A  E1FD               	bnz	clear_1
  1761                           
  1762                           ; Clear objects allocated to COMRAM (35 bytes)
  1763  00581C  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1764  005820  0E23               	movlw	35
  1765  005822                     clear_2:
  1766  005822  6AEE               	clrf	postinc0,c
  1767  005824  06E8               	decf	wreg,f,c
  1768  005826  E1FD               	bnz	clear_2
  1769  005828                     end_of_initialization:
  1770                           	opt stack 0
  1771  005828                     __end_of__initialization:
  1772                           	opt stack 0
  1773  005828  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1774  00582A  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1775  00582C  0100               	movlb	0
  1776  00582E  EFC6  F025         	goto	_main	;jump to C main() function
  1777                           tblptru	equ	0xFF8
  1778                           tblptrh	equ	0xFF7
  1779                           tblptrl	equ	0xFF6
  1780                           tablat	equ	0xFF5
  1781                           postinc0	equ	0xFEE
  1782                           wreg	equ	0xFE8
  1783                           postdec1	equ	0xFE5
  1784                           fsr1l	equ	0xFE1
  1785                           
  1786                           	psect	bssCOMRAM
  1787  00005B                     __pbssCOMRAM:
  1788                           	opt stack 0
  1789  00005B                     _servoTimes:
  1790                           	opt stack 0
  1791  00005B                     	ds	8
  1792  000063                     _back:
  1793                           	opt stack 0
  1794  000063                     	ds	2
  1795  000065                     _down:
  1796                           	opt stack 0
  1797  000065                     	ds	2
  1798  000067                     _enter:
  1799                           	opt stack 0
  1800  000067                     	ds	2
  1801  000069                     _f_panning_to_bin:
  1802                           	opt stack 0
  1803  000069                     	ds	2
  1804  00006B                     _pan_servo_state:
  1805                           	opt stack 0
  1806  00006B                     	ds	2
  1807  00006D                     _servo_timer_counter:
  1808                           	opt stack 0
  1809  00006D                     	ds	2
  1810  00006F                     _servo_timer_target:
  1811                           	opt stack 0
  1812  00006F                     	ds	2
  1813  000071                     _tilt_servo_state:
  1814                           	opt stack 0
  1815  000071                     	ds	2
  1816  000073                     _timer2_counter:
  1817                           	opt stack 0
  1818  000073                     	ds	2
  1819  000075                     _up:
  1820                           	opt stack 0
  1821  000075                     	ds	2
  1822  000077                     _was_low_1:
  1823                           	opt stack 0
  1824  000077                     	ds	2
  1825  000079                     _was_low_2:
  1826                           	opt stack 0
  1827  000079                     	ds	2
  1828  00007B                     _was_low_3:
  1829                           	opt stack 0
  1830  00007B                     	ds	2
  1831  00007D                     _input:
  1832                           	opt stack 0
  1833  00007D                     	ds	1
  1834                           tblptru	equ	0xFF8
  1835                           tblptrh	equ	0xFF7
  1836                           tblptrl	equ	0xFF6
  1837                           tablat	equ	0xFF5
  1838                           postinc0	equ	0xFEE
  1839                           wreg	equ	0xFE8
  1840                           postdec1	equ	0xFE5
  1841                           fsr1l	equ	0xFE1
  1842                           
  1843                           	psect	bssBANK0
  1844  0000DA                     __pbssBANK0:
  1845                           	opt stack 0
  1846  0000DA                     _sensor_outputs:
  1847                           	opt stack 0
  1848  0000DA                     	ds	4
  1849  0000DE                     _COND_signal:
  1850                           	opt stack 0
  1851  0000DE                     	ds	2
  1852  0000E0                     _IR_signal:
  1853                           	opt stack 0
  1854  0000E0                     	ds	2
  1855  0000E2                     _MAG_signal:
  1856                           	opt stack 0
  1857  0000E2                     	ds	2
  1858  0000E4                     _RTCflag:
  1859                           	opt stack 0
  1860  0000E4                     	ds	2
  1861  0000E6                     _cur_state:
  1862                           	opt stack 0
  1863  0000E6                     	ds	2
  1864  0000E8                     _f_arm_position:
  1865                           	opt stack 0
  1866  0000E8                     	ds	2
  1867  0000EA                     _f_lastCan:
  1868                           	opt stack 0
  1869  0000EA                     	ds	2
  1870  0000EC                     _f_loadingNewCan:
  1871                           	opt stack 0
  1872  0000EC                     	ds	2
  1873  0000EE                     _log:
  1874                           	opt stack 0
  1875  0000EE                     	ds	2
  1876  0000F0                     _log_completion:
  1877                           	opt stack 0
  1878  0000F0                     	ds	2
  1879  0000F2                     _log_count_pop_no_tab:
  1880                           	opt stack 0
  1881  0000F2                     	ds	2
  1882  0000F4                     _log_count_pop_w_tab:
  1883                           	opt stack 0
  1884  0000F4                     	ds	2
  1885  0000F6                     _log_total_time:
  1886                           	opt stack 0
  1887  0000F6                     	ds	2
  1888  0000F8                     _logstate:
  1889                           	opt stack 0
  1890  0000F8                     	ds	2
  1891  0000FA                     _total_time:
  1892                           	opt stack 0
  1893  0000FA                     	ds	2
  1894  0000FC                     _machine_state:
  1895                           	opt stack 0
  1896  0000FC                     	ds	1
  1897  0000FD                     _sel:
  1898                           	opt stack 0
  1899  0000FD                     	ds	1
  1900  0000FE                     _count_total:
  1901                           	opt stack 0
  1902  0000FE                     	ds	2
  1903                           tblptru	equ	0xFF8
  1904                           tblptrh	equ	0xFF7
  1905                           tblptrl	equ	0xFF6
  1906                           tablat	equ	0xFF5
  1907                           postinc0	equ	0xFEE
  1908                           wreg	equ	0xFE8
  1909                           postdec1	equ	0xFE5
  1910                           fsr1l	equ	0xFE1
  1911                           
  1912                           	psect	bssBANK1
  1913  000100                     __pbssBANK1:
  1914                           	opt stack 0
  1915  000100                     _log_startTime:
  1916                           	opt stack 0
  1917  000100                     	ds	14
  1918  00010E                     _startTime:
  1919                           	opt stack 0
  1920  00010E                     	ds	14
  1921  00011C                     _time:
  1922                           	opt stack 0
  1923  00011C                     	ds	7
  1924  000123                     _agitator_toggle_count:
  1925                           	opt stack 0
  1926  000123                     	ds	2
  1927  000125                     _count_can_no_lab:
  1928                           	opt stack 0
  1929  000125                     	ds	2
  1930  000127                     _count_can_w_lab:
  1931                           	opt stack 0
  1932  000127                     	ds	2
  1933  000129                     _count_pop_no_tab:
  1934                           	opt stack 0
  1935  000129                     	ds	2
  1936  00012B                     _count_pop_w_tab:
  1937                           	opt stack 0
  1938  00012B                     	ds	2
  1939  00012D                     _cur_can:
  1940                           	opt stack 0
  1941  00012D                     	ds	2
  1942  00012F                     _debug:
  1943                           	opt stack 0
  1944  00012F                     	ds	2
  1945  000131                     _f_ID_receive:
  1946                           	opt stack 0
  1947  000131                     	ds	2
  1948  000133                     _f_can_coming_to_ID:
  1949                           	opt stack 0
  1950  000133                     	ds	2
  1951  000135                     _f_can_coming_to_distribution:
  1952                           	opt stack 0
  1953  000135                     	ds	2
  1954  000137                     _f_can_distributed:
  1955                           	opt stack 0
  1956  000137                     	ds	2
  1957  000139                     _f_most_recent_sort_time:
  1958                           	opt stack 0
  1959  000139                     	ds	2
  1960  00013B                     _first:
  1961                           	opt stack 0
  1962  00013B                     	ds	2
  1963  00013D                     _firstboot:
  1964                           	opt stack 0
  1965  00013D                     	ds	2
  1966  00013F                     _i:
  1967                           	opt stack 0
  1968  00013F                     	ds	2
  1969  000141                     _log_count_can_no_lab:
  1970                           	opt stack 0
  1971  000141                     	ds	2
  1972  000143                     _log_count_can_w_lab:
  1973                           	opt stack 0
  1974  000143                     	ds	2
  1975  000145                     _log_count_total:
  1976                           	opt stack 0
  1977  000145                     	ds	2
  1978  000147                     _most_recent_sort_time:
  1979                           	opt stack 0
  1980  000147                     	ds	2
  1981  000149                     _motor_toggle_count:
  1982                           	opt stack 0
  1983  000149                     	ds	2
  1984  00014B                     _var:
  1985                           	opt stack 0
  1986  00014B                     	ds	2
  1987                           tblptru	equ	0xFF8
  1988                           tblptrh	equ	0xFF7
  1989                           tblptrl	equ	0xFF6
  1990                           tablat	equ	0xFF5
  1991                           postinc0	equ	0xFEE
  1992                           wreg	equ	0xFE8
  1993                           postdec1	equ	0xFE5
  1994                           fsr1l	equ	0xFE1
  1995                           
  1996                           	psect	dataBANK1
  1997  00014D                     __pdataBANK1:
  1998                           	opt stack 0
  1999  00014D                     UI@F3250:
  2000                           	opt stack 0
  2001  00014D                     	ds	4
  2002  000151                     printRTC@F3240:
  2003                           	opt stack 0
  2004  000151                     	ds	4
  2005                           tblptru	equ	0xFF8
  2006                           tblptrh	equ	0xFF7
  2007                           tblptrl	equ	0xFF6
  2008                           tablat	equ	0xFF5
  2009                           postinc0	equ	0xFEE
  2010                           wreg	equ	0xFE8
  2011                           postdec1	equ	0xFE5
  2012                           fsr1l	equ	0xFE1
  2013                           
  2014                           	psect	cstackBANK0
  2015  000080                     __pcstackBANK0:
  2016                           	opt stack 0
  2017  000080                     ??_delay_ms:
  2018  000080                     ??_isdigit:
  2019  000080                     ??_readADC:
  2020  000080                     ??_I2C_Master_Wait:
  2021  000080                     ?___wmul:
  2022                           	opt stack 0
  2023  000080                     ?___awmod:
  2024                           	opt stack 0
  2025  000080                     ?___lwdiv:
  2026                           	opt stack 0
  2027  000080                     ?___ftpack:
  2028                           	opt stack 0
  2029  000080                     ?___lldiv:
  2030                           	opt stack 0
  2031  000080                     lcdNibble@temp:
  2032                           	opt stack 0
  2033  000080                     initTime@m:
  2034                           	opt stack 0
  2035  000080                     updateServoPosition@time_us:
  2036                           	opt stack 0
  2037  000080                     EEPROM_read@address:
  2038                           	opt stack 0
  2039  000080                     ___wmul@multiplier:
  2040                           	opt stack 0
  2041  000080                     ___awmod@dividend:
  2042                           	opt stack 0
  2043  000080                     ___lwdiv@dividend:
  2044                           	opt stack 0
  2045  000080                     strcpy@to:
  2046                           	opt stack 0
  2047  000080                     ___ftpack@arg:
  2048                           	opt stack 0
  2049  000080                     ___lldiv@dividend:
  2050                           	opt stack 0
  2051                           
  2052                           ; 4 bytes @ 0x0
  2053  000080                     	ds	1
  2054  000081                     readADC@channel:
  2055                           	opt stack 0
  2056  000081                     I2C_Master_Read@a:
  2057                           	opt stack 0
  2058  000081                     lcdNibble@data:
  2059                           	opt stack 0
  2060  000081                     initTime@h:
  2061                           	opt stack 0
  2062  000081                     delay_ms@milliseconds:
  2063                           	opt stack 0
  2064  000081                     _isdigit$2072:
  2065                           	opt stack 0
  2066  000081                     I2C_Master_Write@d:
  2067                           	opt stack 0
  2068                           
  2069                           ; 2 bytes @ 0x1
  2070  000081                     	ds	1
  2071  000082                     ??_readMAG:
  2072  000082                     ??_readCOND:
  2073  000082                     I2C_Master_Read@temp:
  2074                           	opt stack 0
  2075  000082                     lcdInst@data:
  2076                           	opt stack 0
  2077  000082                     putch@data:
  2078                           	opt stack 0
  2079  000082                     initTime@w:
  2080                           	opt stack 0
  2081  000082                     isdigit@c:
  2082                           	opt stack 0
  2083  000082                     readIR@ana_port:
  2084                           	opt stack 0
  2085  000082                     updateServoPosition@timer:
  2086                           	opt stack 0
  2087  000082                     ___wmul@multiplicand:
  2088                           	opt stack 0
  2089  000082                     ___awmod@divisor:
  2090                           	opt stack 0
  2091  000082                     ___lwdiv@divisor:
  2092                           	opt stack 0
  2093  000082                     strcpy@from:
  2094                           	opt stack 0
  2095                           
  2096                           ; 2 bytes @ 0x2
  2097  000082                     	ds	1
  2098  000083                     ??_initLCD:
  2099  000083                     initTime@DD:
  2100                           	opt stack 0
  2101  000083                     ___ftpack@exp:
  2102                           	opt stack 0
  2103  000083                     getRTC@i:
  2104                           	opt stack 0
  2105                           
  2106                           ; 2 bytes @ 0x3
  2107  000083                     	ds	1
  2108  000084                     ??_updateServoPosition:
  2109  000084                     ??_readIR:
  2110  000084                     initTime@MM:
  2111                           	opt stack 0
  2112  000084                     ___awmod@counter:
  2113                           	opt stack 0
  2114  000084                     ___ftpack@sign:
  2115                           	opt stack 0
  2116  000084                     readMAG@res:
  2117                           	opt stack 0
  2118  000084                     readCOND@res:
  2119                           	opt stack 0
  2120  000084                     ___wmul@product:
  2121                           	opt stack 0
  2122  000084                     ___lwdiv@quotient:
  2123                           	opt stack 0
  2124  000084                     strcpy@cp:
  2125                           	opt stack 0
  2126  000084                     ___lldiv@divisor:
  2127                           	opt stack 0
  2128                           
  2129                           ; 4 bytes @ 0x4
  2130  000084                     	ds	1
  2131  000085                     ??_initSortTimer:
  2132  000085                     ??___ftpack:
  2133  000085                     initTime@YY:
  2134                           	opt stack 0
  2135  000085                     ___awmod@sign:
  2136                           	opt stack 0
  2137                           
  2138                           ; 1 bytes @ 0x5
  2139  000085                     	ds	1
  2140  000086                     ??_getMAG:
  2141  000086                     ?___awdiv:
  2142                           	opt stack 0
  2143  000086                     initTime@s:
  2144                           	opt stack 0
  2145  000086                     ___lwdiv@counter:
  2146                           	opt stack 0
  2147  000086                     readIR@res:
  2148                           	opt stack 0
  2149  000086                     updateServoPosition@my_time:
  2150                           	opt stack 0
  2151  000086                     ___awdiv@dividend:
  2152                           	opt stack 0
  2153                           
  2154                           ; 2 bytes @ 0x6
  2155  000086                     	ds	1
  2156  000087                     ?___lwmod:
  2157                           	opt stack 0
  2158  000087                     ___lwmod@dividend:
  2159                           	opt stack 0
  2160                           
  2161                           ; 2 bytes @ 0x7
  2162  000087                     	ds	1
  2163  000088                     ??_Distribution:
  2164  000088                     ??_initServos:
  2165  000088                     initSortTimer@i:
  2166                           	opt stack 0
  2167  000088                     getIR@port:
  2168                           	opt stack 0
  2169  000088                     ___awdiv@divisor:
  2170                           	opt stack 0
  2171  000088                     ___lldiv@quotient:
  2172                           	opt stack 0
  2173                           
  2174                           ; 4 bytes @ 0x8
  2175  000088                     	ds	1
  2176  000089                     ___lwmod@divisor:
  2177                           	opt stack 0
  2178                           
  2179                           ; 2 bytes @ 0x9
  2180  000089                     	ds	1
  2181  00008A                     ??_getIR:
  2182  00008A                     ___awdiv@counter:
  2183                           	opt stack 0
  2184                           
  2185                           ; 1 bytes @ 0xA
  2186  00008A                     	ds	1
  2187  00008B                     ___awdiv@sign:
  2188                           	opt stack 0
  2189  00008B                     ___lwmod@counter:
  2190                           	opt stack 0
  2191  00008B                     getIR@i:
  2192                           	opt stack 0
  2193                           
  2194                           ; 2 bytes @ 0xB
  2195  00008B                     	ds	1
  2196  00008C                     ___lldiv@counter:
  2197                           	opt stack 0
  2198  00008C                     ___awdiv@quotient:
  2199                           	opt stack 0
  2200                           
  2201                           ; 2 bytes @ 0xC
  2202  00008C                     	ds	1
  2203  00008D                     I2C_Master_Init@c:
  2204                           	opt stack 0
  2205                           
  2206                           ; 4 bytes @ 0xD
  2207  00008D                     	ds	1
  2208  00008E                     ?_printf:
  2209                           	opt stack 0
  2210  00008E                     ?___awtoft:
  2211                           	opt stack 0
  2212  00008E                     printf@f:
  2213                           	opt stack 0
  2214  00008E                     ___awtoft@c:
  2215                           	opt stack 0
  2216                           
  2217                           ; 2 bytes @ 0xE
  2218  00008E                     	ds	3
  2219  000091                     ??_I2C_Master_Init:
  2220  000091                     ___awtoft@sign:
  2221                           	opt stack 0
  2222                           
  2223                           ; 1 bytes @ 0x11
  2224  000091                     	ds	1
  2225  000092                     ___ftge@ff1:
  2226                           	opt stack 0
  2227                           
  2228                           ; 3 bytes @ 0x12
  2229  000092                     	ds	3
  2230  000095                     ??_loadRTC:
  2231  000095                     ___ftge@ff2:
  2232                           	opt stack 0
  2233                           
  2234                           ; 3 bytes @ 0x15
  2235  000095                     	ds	1
  2236  000096                     loadRTC@i:
  2237                           	opt stack 0
  2238                           
  2239                           ; 2 bytes @ 0x16
  2240  000096                     	ds	2
  2241  000098                     ??___ftge:
  2242                           
  2243                           ; 1 bytes @ 0x18
  2244  000098                     	ds	2
  2245  00009A                     ??_printf:
  2246                           
  2247                           ; 1 bytes @ 0x1A
  2248  00009A                     	ds	1
  2249  00009B                     ??_ID:
  2250                           
  2251                           ; 1 bytes @ 0x1B
  2252  00009B                     	ds	2
  2253  00009D                     ID@time_1150:
  2254                           	opt stack 0
  2255                           
  2256                           ; 1 bytes @ 0x1D
  2257  00009D                     	ds	1
  2258  00009E                     _ID$1141:
  2259                           	opt stack 0
  2260  00009E                     printf@prec:
  2261                           	opt stack 0
  2262                           
  2263                           ; 1 bytes @ 0x1E
  2264  00009E                     	ds	1
  2265  00009F                     _ID$1149:
  2266                           	opt stack 0
  2267  00009F                     printf@cp:
  2268                           	opt stack 0
  2269                           
  2270                           ; 2 bytes @ 0x1F
  2271  00009F                     	ds	1
  2272  0000A0                     _ID$1154:
  2273                           	opt stack 0
  2274                           
  2275                           ; 1 bytes @ 0x20
  2276  0000A0                     	ds	1
  2277  0000A1                     ID@i:
  2278                           	opt stack 0
  2279  0000A1                     printf@ap:
  2280                           	opt stack 0
  2281                           
  2282                           ; 2 bytes @ 0x21
  2283  0000A1                     	ds	2
  2284  0000A3                     ID@i_1148:
  2285                           	opt stack 0
  2286  0000A3                     printf@len:
  2287                           	opt stack 0
  2288                           
  2289                           ; 2 bytes @ 0x23
  2290  0000A3                     	ds	2
  2291  0000A5                     ID@i_1153:
  2292                           	opt stack 0
  2293  0000A5                     printf@val:
  2294                           	opt stack 0
  2295                           
  2296                           ; 2 bytes @ 0x25
  2297  0000A5                     	ds	2
  2298  0000A7                     printf@flag:
  2299                           	opt stack 0
  2300  0000A7                     ID@i_1155:
  2301                           	opt stack 0
  2302                           
  2303                           ; 2 bytes @ 0x27
  2304  0000A7                     	ds	1
  2305  0000A8                     printf@c:
  2306                           	opt stack 0
  2307                           
  2308                           ; 1 bytes @ 0x28
  2309  0000A8                     	ds	1
  2310  0000A9                     ID@time:
  2311                           	opt stack 0
  2312  0000A9                     printf@width:
  2313                           	opt stack 0
  2314                           
  2315                           ; 2 bytes @ 0x29
  2316  0000A9                     	ds	1
  2317  0000AA                     ID@res1:
  2318                           	opt stack 0
  2319                           
  2320                           ; 2 bytes @ 0x2A
  2321  0000AA                     	ds	1
  2322  0000AB                     ??_printRTC:
  2323  0000AB                     ??_algorithmTest:
  2324  0000AB                     ??_sensorTest:
  2325  0000AB                     ??_actuatorTest:
  2326  0000AB                     ??_arm:
  2327  0000AB                     ??_PortTestDC:
  2328  0000AB                     ??_SpeedTest:
  2329  0000AB                     ??_PortTestPusher:
  2330  0000AB                     ??_PlatformTest:
  2331  0000AB                     ??_BothServos:
  2332  0000AB                     ??_BlockerTest:
  2333  0000AB                     EEPROM_write@address:
  2334                           	opt stack 0
  2335                           
  2336                           ; 2 bytes @ 0x2B
  2337  0000AB                     	ds	1
  2338  0000AC                     ID@res2:
  2339                           	opt stack 0
  2340  0000AC                     arm@on:
  2341                           	opt stack 0
  2342                           
  2343                           ; 2 bytes @ 0x2C
  2344  0000AC                     	ds	1
  2345  0000AD                     EEPROM_write@data:
  2346                           	opt stack 0
  2347  0000AD                     actuatorTest@i_1747:
  2348                           	opt stack 0
  2349  0000AD                     sensorTest@res:
  2350                           	opt stack 0
  2351  0000AD                     PlatformTest@res:
  2352                           	opt stack 0
  2353  0000AD                     BlockerTest@i:
  2354                           	opt stack 0
  2355                           
  2356                           ; 2 bytes @ 0x2D
  2357  0000AD                     	ds	1
  2358  0000AE                     ??_EEPROM_write:
  2359  0000AE                     actuatorTest@i_1754:
  2360                           	opt stack 0
  2361  0000AE                     ID@res:
  2362                           	opt stack 0
  2363  0000AE                     printRTC@INT_time:
  2364                           	opt stack 0
  2365                           
  2366                           ; 14 bytes @ 0x2E
  2367  0000AE                     	ds	1
  2368  0000AF                     EEPROM_write@i:
  2369                           	opt stack 0
  2370  0000AF                     actuatorTest@i_1755:
  2371                           	opt stack 0
  2372  0000AF                     sensorTest@res_1724:
  2373                           	opt stack 0
  2374  0000AF                     PlatformTest@res_1799:
  2375                           	opt stack 0
  2376  0000AF                     BlockerTest@res:
  2377                           	opt stack 0
  2378                           
  2379                           ; 2 bytes @ 0x2F
  2380  0000AF                     	ds	1
  2381  0000B0                     EEPROM_write@i_1413:
  2382                           	opt stack 0
  2383  0000B0                     actuatorTest@i_1757:
  2384                           	opt stack 0
  2385                           
  2386                           ; 1 bytes @ 0x30
  2387  0000B0                     	ds	1
  2388  0000B1                     ??_Loading:
  2389  0000B1                     logRun@num:
  2390                           	opt stack 0
  2391  0000B1                     actuatorTest@i_1758:
  2392                           	opt stack 0
  2393  0000B1                     PlatformTest@i:
  2394                           	opt stack 0
  2395  0000B1                     BlockerTest@cam_flag:
  2396                           	opt stack 0
  2397                           
  2398                           ; 2 bytes @ 0x31
  2399  0000B1                     	ds	1
  2400  0000B2                     logRun@byte1:
  2401                           	opt stack 0
  2402  0000B2                     actuatorTest@i_1760:
  2403                           	opt stack 0
  2404  0000B2                     ID@i_1156:
  2405                           	opt stack 0
  2406                           
  2407                           ; 2 bytes @ 0x32
  2408  0000B2                     	ds	1
  2409  0000B3                     logRun@byte2:
  2410                           	opt stack 0
  2411  0000B3                     actuatorTest@i_1761:
  2412                           	opt stack 0
  2413  0000B3                     Loading@addr:
  2414                           	opt stack 0
  2415  0000B3                     PlatformTest@i_1803:
  2416                           	opt stack 0
  2417  0000B3                     BlockerTest@cond_flag:
  2418                           	opt stack 0
  2419                           
  2420                           ; 2 bytes @ 0x33
  2421  0000B3                     	ds	1
  2422  0000B4                     logRun@byte3:
  2423                           	opt stack 0
  2424  0000B4                     actuatorTest@i_1763:
  2425                           	opt stack 0
  2426  0000B4                     ID@j:
  2427                           	opt stack 0
  2428                           
  2429                           ; 2 bytes @ 0x34
  2430  0000B4                     	ds	1
  2431  0000B5                     Loading@byte1:
  2432                           	opt stack 0
  2433  0000B5                     logRun@byte_i:
  2434                           	opt stack 0
  2435  0000B5                     actuatorTest@i_1764:
  2436                           	opt stack 0
  2437  0000B5                     PlatformTest@on:
  2438                           	opt stack 0
  2439                           
  2440                           ; 2 bytes @ 0x35
  2441  0000B5                     	ds	1
  2442  0000B6                     logRun@byte11:
  2443                           	opt stack 0
  2444  0000B6                     actuatorTest@i_1766:
  2445                           	opt stack 0
  2446  0000B6                     Loading@i_1125:
  2447                           	opt stack 0
  2448  0000B6                     ID@n:
  2449                           	opt stack 0
  2450                           
  2451                           ; 2 bytes @ 0x36
  2452  0000B6                     	ds	1
  2453  0000B7                     actuatorTest@i_1767:
  2454                           	opt stack 0
  2455  0000B7                     logRun@i:
  2456                           	opt stack 0
  2457                           
  2458                           ; 2 bytes @ 0x37
  2459  0000B7                     	ds	1
  2460  0000B8                     actuatorTest@i_1769:
  2461                           	opt stack 0
  2462  0000B8                     Loading@i_1134:
  2463                           	opt stack 0
  2464                           
  2465                           ; 2 bytes @ 0x38
  2466  0000B8                     	ds	1
  2467  0000B9                     actuatorTest@i_1770:
  2468                           	opt stack 0
  2469  0000B9                     logRun@addr:
  2470                           	opt stack 0
  2471                           
  2472                           ; 2 bytes @ 0x39
  2473  0000B9                     	ds	1
  2474  0000BA                     actuatorTest@i_1773:
  2475                           	opt stack 0
  2476  0000BA                     Loading@i_1136:
  2477                           	opt stack 0
  2478                           
  2479                           ; 2 bytes @ 0x3A
  2480  0000BA                     	ds	1
  2481  0000BB                     actuatorTest@i_1774:
  2482                           	opt stack 0
  2483                           
  2484                           ; 1 bytes @ 0x3B
  2485  0000BB                     	ds	1
  2486  0000BC                     actuatorTest@i_1776:
  2487                           	opt stack 0
  2488  0000BC                     printRTC@RTC_month:
  2489                           	opt stack 0
  2490  0000BC                     Loading@i_1137:
  2491                           	opt stack 0
  2492                           
  2493                           ; 2 bytes @ 0x3C
  2494  0000BC                     	ds	1
  2495  0000BD                     actuatorTest@i_1777:
  2496                           	opt stack 0
  2497                           
  2498                           ; 1 bytes @ 0x3D
  2499  0000BD                     	ds	1
  2500  0000BE                     actuatorTest@i_1779:
  2501                           	opt stack 0
  2502  0000BE                     Loading@i_1139:
  2503                           	opt stack 0
  2504  0000BE                     printRTC@month:
  2505                           	opt stack 0
  2506                           
  2507                           ; 4 bytes @ 0x3E
  2508  0000BE                     	ds	1
  2509  0000BF                     actuatorTest@i_1780:
  2510                           	opt stack 0
  2511                           
  2512                           ; 1 bytes @ 0x3F
  2513  0000BF                     	ds	1
  2514  0000C0                     actuatorTest@i_1783:
  2515                           	opt stack 0
  2516  0000C0                     Loading@i:
  2517                           	opt stack 0
  2518                           
  2519                           ; 2 bytes @ 0x40
  2520  0000C0                     	ds	1
  2521  0000C1                     actuatorTest@i_1784:
  2522                           	opt stack 0
  2523                           
  2524                           ; 1 bytes @ 0x41
  2525  0000C1                     	ds	1
  2526  0000C2                     actuatorTest@i_1786:
  2527                           	opt stack 0
  2528  0000C2                     printRTC@i:
  2529                           	opt stack 0
  2530  0000C2                     Loading@j:
  2531                           	opt stack 0
  2532                           
  2533                           ; 2 bytes @ 0x42
  2534  0000C2                     	ds	1
  2535  0000C3                     actuatorTest@i_1787:
  2536                           	opt stack 0
  2537                           
  2538                           ; 1 bytes @ 0x43
  2539  0000C3                     	ds	1
  2540  0000C4                     ??_UI:
  2541  0000C4                     actuatorTest@i:
  2542                           	opt stack 0
  2543                           
  2544                           ; 2 bytes @ 0x44
  2545  0000C4                     	ds	2
  2546  0000C6                     ??_Test:
  2547  0000C6                     _UI$2434:
  2548                           	opt stack 0
  2549                           
  2550                           ; 2 bytes @ 0x46
  2551  0000C6                     	ds	2
  2552  0000C8                     UI@i:
  2553                           	opt stack 0
  2554                           
  2555                           ; 1 bytes @ 0x48
  2556  0000C8                     	ds	1
  2557  0000C9                     UI@i_413:
  2558                           	opt stack 0
  2559                           
  2560                           ; 1 bytes @ 0x49
  2561  0000C9                     	ds	1
  2562  0000CA                     UI@i_416:
  2563                           	opt stack 0
  2564                           
  2565                           ; 1 bytes @ 0x4A
  2566  0000CA                     	ds	1
  2567  0000CB                     UI@i_417:
  2568                           	opt stack 0
  2569                           
  2570                           ; 1 bytes @ 0x4B
  2571  0000CB                     	ds	1
  2572  0000CC                     UI@i_435:
  2573                           	opt stack 0
  2574                           
  2575                           ; 1 bytes @ 0x4C
  2576  0000CC                     	ds	1
  2577  0000CD                     UI@i_436:
  2578                           	opt stack 0
  2579                           
  2580                           ; 1 bytes @ 0x4D
  2581  0000CD                     	ds	1
  2582  0000CE                     UI@i_439:
  2583                           	opt stack 0
  2584                           
  2585                           ; 1 bytes @ 0x4E
  2586  0000CE                     	ds	1
  2587  0000CF                     UI@i_440:
  2588                           	opt stack 0
  2589                           
  2590                           ; 1 bytes @ 0x4F
  2591  0000CF                     	ds	1
  2592  0000D0                     UI@i_443:
  2593                           	opt stack 0
  2594                           
  2595                           ; 1 bytes @ 0x50
  2596  0000D0                     	ds	1
  2597  0000D1                     UI@i_444:
  2598                           	opt stack 0
  2599                           
  2600                           ; 1 bytes @ 0x51
  2601  0000D1                     	ds	1
  2602  0000D2                     UI@i_447:
  2603                           	opt stack 0
  2604                           
  2605                           ; 1 bytes @ 0x52
  2606  0000D2                     	ds	1
  2607  0000D3                     UI@i_448:
  2608                           	opt stack 0
  2609                           
  2610                           ; 1 bytes @ 0x53
  2611  0000D3                     	ds	1
  2612  0000D4                     UI@i_451:
  2613                           	opt stack 0
  2614                           
  2615                           ; 1 bytes @ 0x54
  2616  0000D4                     	ds	1
  2617  0000D5                     UI@i_452:
  2618                           	opt stack 0
  2619                           
  2620                           ; 1 bytes @ 0x55
  2621  0000D5                     	ds	1
  2622  0000D6                     UI@month:
  2623                           	opt stack 0
  2624                           
  2625                           ; 4 bytes @ 0x56
  2626  0000D6                     	ds	4
  2627  0000DA                     tblptru	equ	0xFF8
  2628                           tblptrh	equ	0xFF7
  2629                           tblptrl	equ	0xFF6
  2630                           tablat	equ	0xFF5
  2631                           postinc0	equ	0xFEE
  2632                           wreg	equ	0xFE8
  2633                           postdec1	equ	0xFE5
  2634                           fsr1l	equ	0xFE1
  2635                           
  2636                           ; 1 bytes @ 0x5A
  2637                           
  2638                           	psect	cstackCOMRAM
  2639  000001                     __pcstackCOMRAM:
  2640                           	opt stack 0
  2641  000001                     ??_updateArmState:
  2642  000001                     ??i2_I2C_Master_Wait:
  2643  000001                     ??i2_delay_ms:
  2644  000001                     ??i2_isdigit:
  2645  000001                     ?i2___wmul:
  2646                           	opt stack 0
  2647  000001                     ?i2___awmod:
  2648                           	opt stack 0
  2649  000001                     ?i2___lwmod:
  2650                           	opt stack 0
  2651  000001                     i2lcdNibble@temp:
  2652                           	opt stack 0
  2653  000001                     i2updateServoPosition@time_us:
  2654                           	opt stack 0
  2655  000001                     i2EEPROM_read@address:
  2656                           	opt stack 0
  2657  000001                     i2___wmul@multiplier:
  2658                           	opt stack 0
  2659  000001                     i2___awmod@dividend:
  2660                           	opt stack 0
  2661  000001                     i2___lwmod@dividend:
  2662                           	opt stack 0
  2663  000001                     i2strcpy@to:
  2664                           	opt stack 0
  2665                           
  2666                           ; 2 bytes @ 0x0
  2667  000001                     	ds	1
  2668  000002                     i2I2C_Master_Read@a:
  2669                           	opt stack 0
  2670  000002                     i2lcdNibble@data:
  2671                           	opt stack 0
  2672  000002                     i2delay_ms@milliseconds:
  2673                           	opt stack 0
  2674  000002                     i2_isdigit$2072:
  2675                           	opt stack 0
  2676  000002                     i2I2C_Master_Write@d:
  2677                           	opt stack 0
  2678                           
  2679                           ; 2 bytes @ 0x1
  2680  000002                     	ds	1
  2681  000003                     i2I2C_Master_Read@temp:
  2682                           	opt stack 0
  2683  000003                     i2lcdInst@data:
  2684                           	opt stack 0
  2685  000003                     i2putch@data:
  2686                           	opt stack 0
  2687  000003                     i2isdigit@c:
  2688                           	opt stack 0
  2689  000003                     i2updateServoPosition@timer:
  2690                           	opt stack 0
  2691  000003                     i2___wmul@multiplicand:
  2692                           	opt stack 0
  2693  000003                     i2___awmod@divisor:
  2694                           	opt stack 0
  2695  000003                     i2___lwmod@divisor:
  2696                           	opt stack 0
  2697  000003                     i2strcpy@from:
  2698                           	opt stack 0
  2699                           
  2700                           ; 2 bytes @ 0x2
  2701  000003                     	ds	1
  2702  000004                     i2getRTC@i:
  2703                           	opt stack 0
  2704                           
  2705                           ; 2 bytes @ 0x3
  2706  000004                     	ds	1
  2707  000005                     ??i2_updateServoPosition:
  2708  000005                     i2___awmod@counter:
  2709                           	opt stack 0
  2710  000005                     i2___lwmod@counter:
  2711                           	opt stack 0
  2712  000005                     i2___wmul@product:
  2713                           	opt stack 0
  2714  000005                     i2strcpy@cp:
  2715                           	opt stack 0
  2716                           
  2717                           ; 2 bytes @ 0x4
  2718  000005                     	ds	1
  2719  000006                     ?i2___lwdiv:
  2720                           	opt stack 0
  2721  000006                     i2___awmod@sign:
  2722                           	opt stack 0
  2723  000006                     i2___lwdiv@dividend:
  2724                           	opt stack 0
  2725                           
  2726                           ; 2 bytes @ 0x5
  2727  000006                     	ds	1
  2728  000007                     retrieveLog@logNum:
  2729                           	opt stack 0
  2730  000007                     i2updateServoPosition@my_time:
  2731                           	opt stack 0
  2732                           
  2733                           ; 2 bytes @ 0x6
  2734  000007                     	ds	1
  2735  000008                     i2___lwdiv@divisor:
  2736                           	opt stack 0
  2737                           
  2738                           ; 2 bytes @ 0x7
  2739  000008                     	ds	1
  2740  000009                     ??_retrieveLog:
  2741  000009                     ??_updateServoStates:
  2742                           
  2743                           ; 1 bytes @ 0x8
  2744  000009                     	ds	1
  2745  00000A                     i2___lwdiv@quotient:
  2746                           	opt stack 0
  2747                           
  2748                           ; 2 bytes @ 0x9
  2749  00000A                     	ds	1
  2750  00000B                     retrieveLog@byte1:
  2751                           	opt stack 0
  2752                           
  2753                           ; 1 bytes @ 0xA
  2754  00000B                     	ds	1
  2755  00000C                     retrieveLog@byte2:
  2756                           	opt stack 0
  2757  00000C                     i2___lwdiv@counter:
  2758                           	opt stack 0
  2759                           
  2760                           ; 1 bytes @ 0xB
  2761  00000C                     	ds	1
  2762  00000D                     ?i2_printf:
  2763                           	opt stack 0
  2764  00000D                     retrieveLog@byte3:
  2765                           	opt stack 0
  2766  00000D                     i2printf@f:
  2767                           	opt stack 0
  2768                           
  2769                           ; 2 bytes @ 0xC
  2770  00000D                     	ds	1
  2771  00000E                     retrieveLog@i:
  2772                           	opt stack 0
  2773                           
  2774                           ; 2 bytes @ 0xD
  2775  00000E                     	ds	2
  2776  000010                     retrieveLog@addr:
  2777                           	opt stack 0
  2778                           
  2779                           ; 2 bytes @ 0xF
  2780  000010                     	ds	2
  2781  000012                     dispLogs@myLog:
  2782                           	opt stack 0
  2783                           
  2784                           ; 2 bytes @ 0x11
  2785  000012                     	ds	2
  2786  000014                     
  2787                           ; 1 bytes @ 0x13
  2788  000014                     	ds	5
  2789  000019                     ??i2_printf:
  2790                           
  2791                           ; 1 bytes @ 0x18
  2792  000019                     	ds	4
  2793  00001D                     i2printf@prec:
  2794                           	opt stack 0
  2795                           
  2796                           ; 1 bytes @ 0x1C
  2797  00001D                     	ds	1
  2798  00001E                     i2printf@cp:
  2799                           	opt stack 0
  2800                           
  2801                           ; 2 bytes @ 0x1D
  2802  00001E                     	ds	2
  2803  000020                     i2printf@ap:
  2804                           	opt stack 0
  2805                           
  2806                           ; 2 bytes @ 0x1F
  2807  000020                     	ds	2
  2808  000022                     i2printf@len:
  2809                           	opt stack 0
  2810                           
  2811                           ; 2 bytes @ 0x21
  2812  000022                     	ds	2
  2813  000024                     i2printf@val:
  2814                           	opt stack 0
  2815                           
  2816                           ; 2 bytes @ 0x23
  2817  000024                     	ds	2
  2818  000026                     i2printf@flag:
  2819                           	opt stack 0
  2820                           
  2821                           ; 1 bytes @ 0x25
  2822  000026                     	ds	1
  2823  000027                     i2printf@c:
  2824                           	opt stack 0
  2825                           
  2826                           ; 1 bytes @ 0x26
  2827  000027                     	ds	1
  2828  000028                     i2printf@width:
  2829                           	opt stack 0
  2830                           
  2831                           ; 2 bytes @ 0x27
  2832  000028                     	ds	2
  2833  00002A                     ??_printSortTimer:
  2834  00002A                     ??i2_printRTC:
  2835  00002A                     ?_inputHandler:
  2836                           	opt stack 0
  2837                           
  2838                           ; 2 bytes @ 0x29
  2839  00002A                     	ds	2
  2840  00002C                     ??_inputHandler:
  2841                           
  2842                           ; 1 bytes @ 0x2B
  2843  00002C                     	ds	1
  2844  00002D                     printSortTimer@curTime:
  2845                           	opt stack 0
  2846  00002D                     i2printRTC@INT_time:
  2847                           	opt stack 0
  2848                           
  2849                           ; 14 bytes @ 0x2C
  2850  00002D                     	ds	14
  2851  00003B                     printSortTimer@start_sec:
  2852                           	opt stack 0
  2853  00003B                     i2printRTC@RTC_month:
  2854                           	opt stack 0
  2855                           
  2856                           ; 2 bytes @ 0x3A
  2857  00003B                     	ds	2
  2858  00003D                     printSortTimer@cur_sec:
  2859                           	opt stack 0
  2860  00003D                     i2printRTC@month:
  2861                           	opt stack 0
  2862                           
  2863                           ; 4 bytes @ 0x3C
  2864  00003D                     	ds	2
  2865  00003F                     printSortTimer@min:
  2866                           	opt stack 0
  2867                           
  2868                           ; 2 bytes @ 0x3E
  2869  00003F                     	ds	2
  2870  000041                     printSortTimer@sec:
  2871                           	opt stack 0
  2872  000041                     i2printRTC@i:
  2873                           	opt stack 0
  2874                           
  2875                           ; 2 bytes @ 0x40
  2876  000041                     	ds	2
  2877  000043                     ??_updateMenu:
  2878  000043                     _printSortTimer$2574:
  2879                           	opt stack 0
  2880                           
  2881                           ; 2 bytes @ 0x42
  2882  000043                     	ds	2
  2883  000045                     printSortTimer@timeDiff:
  2884                           	opt stack 0
  2885                           
  2886                           ; 2 bytes @ 0x44
  2887  000045                     	ds	2
  2888  000047                     printSortTimer@i_1168:
  2889                           	opt stack 0
  2890                           
  2891                           ; 2 bytes @ 0x46
  2892  000047                     	ds	2
  2893  000049                     printSortTimer@i:
  2894                           	opt stack 0
  2895                           
  2896                           ; 2 bytes @ 0x48
  2897  000049                     	ds	2
  2898  00004B                     ??_handler:
  2899                           
  2900                           ; 1 bytes @ 0x4A
  2901  00004B                     	ds	16
  2902                           tblptru	equ	0xFF8
  2903                           tblptrh	equ	0xFF7
  2904                           tblptrl	equ	0xFF6
  2905                           tablat	equ	0xFF5
  2906                           postinc0	equ	0xFEE
  2907                           wreg	equ	0xFE8
  2908                           postdec1	equ	0xFE5
  2909                           fsr1l	equ	0xFE1
  2910                           
  2911 ;;
  2912 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2913 ;;
  2914 ;; *************** function _main *****************
  2915 ;; Defined at:
  2916 ;;		line 19 in file "main.c"
  2917 ;; Parameters:    Size  Location     Type
  2918 ;;		None
  2919 ;; Auto vars:     Size  Location     Type
  2920 ;;		None
  2921 ;; Return value:  Size  Location     Type
  2922 ;;                  1    wreg      void 
  2923 ;; Registers used:
  2924 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2925 ;; Tracked objects:
  2926 ;;		On entry : 0/0
  2927 ;;		On exit  : 0/0
  2928 ;;		Unchanged: 0/0
  2929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2934 ;;Total ram usage:        0 bytes
  2935 ;; Hardware stack levels required when called:   13
  2936 ;; This function calls:
  2937 ;;		_I2C_Master_Init
  2938 ;;		_Test
  2939 ;;		_UI
  2940 ;;		_initEEPROM
  2941 ;;		_initLCD
  2942 ;;		_initTime
  2943 ;;		_initUI
  2944 ;;		_logRun
  2945 ;;		_machineConfig
  2946 ;;		_sort
  2947 ;;		_stopSignals
  2948 ;; This function is called by:
  2949 ;;		Startup code after reset
  2950 ;; This function uses a non-reentrant model
  2951 ;;
  2952                           
  2953                           	psect	text0
  2954  004B8C                     __ptext0:
  2955                           	opt stack 0
  2956  004B8C                     _main:
  2957                           	opt stack 18
  2958                           
  2959                           ;main.c: 20: machineConfig();
  2960                           
  2961                           ;incstack = 0
  2962  004B8C  ECDB  F02A         	call	_machineConfig	;wreg free
  2963                           
  2964                           ;main.c: 21: initLCD();
  2965  004B90  EC65  F02C         	call	_initLCD	;wreg free
  2966                           
  2967                           ;main.c: 24: RTCflag = 0;
  2968  004B94  0E00               	movlw	0
  2969  004B96  0100               	movlb	0	; () banked
  2970  004B98  6FE5               	movwf	(_RTCflag+1)& (0+255),b
  2971  004B9A  0E00               	movlw	0
  2972  004B9C  6FE4               	movwf	_RTCflag& (0+255),b
  2973                           
  2974                           ;main.c: 25: if(RTCflag){
  2975  004B9E  0100               	movlb	0	; () banked
  2976  004BA0  51E4               	movf	_RTCflag& (0+255),w,b
  2977  004BA2  0100               	movlb	0	; () banked
  2978  004BA4  11E5               	iorwf	(_RTCflag+1)& (0+255),w,b
  2979  004BA6  B4D8               	btfsc	status,2,c
  2980  004BA8  D016               	goto	l10433
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;main.c: 26: initTime(0x42, 0x47, 0x17, 0x07, 0x08, 0x04, 0x17);
  2984  004BAA  0E47               	movlw	71
  2985  004BAC  0100               	movlb	0	; () banked
  2986  004BAE  6F80               	movwf	initTime@m& (0+255),b
  2987  004BB0  0E17               	movlw	23
  2988  004BB2  0100               	movlb	0	; () banked
  2989  004BB4  6F81               	movwf	initTime@h& (0+255),b
  2990  004BB6  0E07               	movlw	7
  2991  004BB8  0100               	movlb	0	; () banked
  2992  004BBA  6F82               	movwf	initTime@w& (0+255),b
  2993  004BBC  0E08               	movlw	8
  2994  004BBE  0100               	movlb	0	; () banked
  2995  004BC0  6F83               	movwf	initTime@DD& (0+255),b
  2996  004BC2  0E04               	movlw	4
  2997  004BC4  0100               	movlb	0	; () banked
  2998  004BC6  6F84               	movwf	initTime@MM& (0+255),b
  2999  004BC8  0E17               	movlw	23
  3000  004BCA  0100               	movlb	0	; () banked
  3001  004BCC  6F85               	movwf	initTime@YY& (0+255),b
  3002  004BCE  0E42               	movlw	66
  3003  004BD0  EC58  F02F         	call	_initTime
  3004                           
  3005                           ;main.c: 27: }
  3006  004BD4  D00B               	goto	l10435
  3007  004BD6                     l10433:
  3008                           
  3009                           ;main.c: 28: else{
  3010                           ;main.c: 29: I2C_Master_Init(10000);
  3011  004BD6  0E10               	movlw	16
  3012  004BD8  0100               	movlb	0	; () banked
  3013  004BDA  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3014  004BDC  0E27               	movlw	39
  3015  004BDE  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3016  004BE0  0E00               	movlw	0
  3017  004BE2  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3018  004BE4  0E00               	movlw	0
  3019  004BE6  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3020  004BE8  EC3E  F02B         	call	_I2C_Master_Init	;wreg free
  3021  004BEC                     l10435:
  3022                           
  3023                           ;main.c: 30: }
  3024                           ;main.c: 32: initUI();
  3025  004BEC  EC88  F02D         	call	_initUI	;wreg free
  3026                           
  3027                           ;main.c: 33: first = 1;
  3028  004BF0  0E00               	movlw	0
  3029  004BF2  0101               	movlb	1	; () banked
  3030  004BF4  6F3C               	movwf	(_first+1)& (0+255),b
  3031  004BF6  0E01               	movlw	1
  3032  004BF8  6F3B               	movwf	_first& (0+255),b
  3033                           
  3034                           ; BSR set to: 1
  3035                           ;main.c: 34: initEEPROM();
  3036  004BFA  ECA0  F02F         	call	_initEEPROM	;wreg free
  3037                           
  3038                           ;main.c: 45: switch(machine_state){
  3039                           
  3040                           ;main.c: 44: while(1){
  3041  004BFE  D018               	goto	l10459
  3042  004C00                     l10441:
  3043                           
  3044                           ;main.c: 47: UI();
  3045  004C00  EC09  F000         	call	_UI	;wreg free
  3046                           
  3047                           ;main.c: 48: break;
  3048  004C04  D015               	goto	l10459
  3049  004C06                     l10443:
  3050                           
  3051                           ;main.c: 50: sort();
  3052  004C06  EC47  F02F         	call	_sort	;wreg free
  3053                           
  3054                           ;main.c: 51: break;
  3055  004C0A  D012               	goto	l10459
  3056  004C0C                     l10445:
  3057                           
  3058                           ;main.c: 53: stopSignals();
  3059  004C0C  EC78  F02F         	call	_stopSignals	;wreg free
  3060                           
  3061                           ;main.c: 54: logRun();
  3062  004C10  ECE4  F020         	call	_logRun	;wreg free
  3063                           
  3064                           ;main.c: 55: first = 1;
  3065  004C14  0E00               	movlw	0
  3066  004C16  0101               	movlb	1	; () banked
  3067  004C18  6F3C               	movwf	(_first+1)& (0+255),b
  3068  004C1A  0E01               	movlw	1
  3069  004C1C  6F3B               	movwf	_first& (0+255),b
  3070                           
  3071                           ; BSR set to: 1
  3072                           ;main.c: 56: UI();
  3073  004C1E  EC09  F000         	call	_UI	;wreg free
  3074                           
  3075                           ;main.c: 57: break;
  3076  004C22  D006               	goto	l10459
  3077  004C24                     l10453:
  3078                           
  3079                           ;main.c: 59: Test();
  3080  004C24  EC9F  F022         	call	_Test	;wreg free
  3081                           
  3082                           ;main.c: 60: break;
  3083  004C28  D003               	goto	l10459
  3084  004C2A                     l10455:
  3085                           
  3086                           ;main.c: 62: stopSignals();
  3087  004C2A  EC78  F02F         	call	_stopSignals	;wreg free
  3088  004C2E                     l513:
  3089  004C2E  D7FF               	goto	l513
  3090  004C30                     l10459:
  3091  004C30  0100               	movlb	0	; () banked
  3092  004C32  51FC               	movf	_machine_state& (0+255),w,b
  3093                           
  3094                           ; Switch size 1, requested type "space"
  3095                           ; Number of cases is 5, Range of values is 0 to 4
  3096                           ; switch strategies available:
  3097                           ; Name         Instructions Cycles
  3098                           ; simple_byte           16     9 (average)
  3099                           ;	Chosen strategy is simple_byte
  3100  004C34  0A00               	xorlw	0	; case 0
  3101  004C36  B4D8               	btfsc	status,2,c
  3102  004C38  D7E3               	goto	l10441
  3103  004C3A  0A01               	xorlw	1	; case 1
  3104  004C3C  B4D8               	btfsc	status,2,c
  3105  004C3E  D7E3               	goto	l10443
  3106  004C40  0A03               	xorlw	3	; case 2
  3107  004C42  B4D8               	btfsc	status,2,c
  3108  004C44  D7E3               	goto	l10445
  3109  004C46  0A01               	xorlw	1	; case 3
  3110  004C48  B4D8               	btfsc	status,2,c
  3111  004C4A  D7EC               	goto	l10453
  3112  004C4C  0A07               	xorlw	7	; case 4
  3113  004C4E  B4D8               	btfsc	status,2,c
  3114  004C50  D7EC               	goto	l10455
  3115                           
  3116                           ; BSR set to: 0
  3117                           
  3118                           ; BSR set to: 0
  3119  004C52  D7EE               	goto	l10459
  3120  004C54                     __end_of_main:
  3121                           	opt stack 0
  3122                           tblptru	equ	0xFF8
  3123                           tblptrh	equ	0xFF7
  3124                           tblptrl	equ	0xFF6
  3125                           tablat	equ	0xFF5
  3126                           postinc0	equ	0xFEE
  3127                           wreg	equ	0xFE8
  3128                           postdec1	equ	0xFE5
  3129                           fsr1l	equ	0xFE1
  3130                           status	equ	0xFD8
  3131                           
  3132 ;; *************** function _sort *****************
  3133 ;; Defined at:
  3134 ;;		line 71 in file "sort.c"
  3135 ;; Parameters:    Size  Location     Type
  3136 ;;		None
  3137 ;; Auto vars:     Size  Location     Type
  3138 ;;		None
  3139 ;; Return value:  Size  Location     Type
  3140 ;;                  1    wreg      void 
  3141 ;; Registers used:
  3142 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3143 ;; Tracked objects:
  3144 ;;		On entry : 0/0
  3145 ;;		On exit  : 0/0
  3146 ;;		Unchanged: 0/0
  3147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3152 ;;Total ram usage:        0 bytes
  3153 ;; Hardware stack levels used:    1
  3154 ;; Hardware stack levels required when called:   12
  3155 ;; This function calls:
  3156 ;;		_Distribution
  3157 ;;		_ID
  3158 ;;		_Loading
  3159 ;; This function is called by:
  3160 ;;		_main
  3161 ;; This function uses a non-reentrant model
  3162 ;;
  3163                           
  3164                           	psect	text1
  3165  005E8E                     __ptext1:
  3166                           	opt stack 0
  3167  005E8E                     _sort:
  3168                           	opt stack 18
  3169                           
  3170                           ;sort.c: 72: if(machine_state == Sorting_state){
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;incstack = 0
  3174  005E8E  0100               	movlb	0	; () banked
  3175  005E90  05FC               	decf	_machine_state& (0+255),w,b
  3176  005E92  B4D8               	btfsc	status,2,c
  3177                           
  3178                           ; BSR set to: 0
  3179                           ;sort.c: 73: Loading();
  3180  005E94  EC9D  F00B         	call	_Loading	;wreg free
  3181                           
  3182                           ;sort.c: 74: }
  3183                           ;sort.c: 75: if(machine_state == Sorting_state){
  3184  005E98  0100               	movlb	0	; () banked
  3185  005E9A  05FC               	decf	_machine_state& (0+255),w,b
  3186  005E9C  B4D8               	btfsc	status,2,c
  3187                           
  3188                           ; BSR set to: 0
  3189                           ;sort.c: 76: ID();
  3190  005E9E  ECC9  F008         	call	_ID	;wreg free
  3191                           
  3192                           ;sort.c: 77: }
  3193                           ;sort.c: 78: if(machine_state == Sorting_state){
  3194  005EA2  0100               	movlb	0	; () banked
  3195  005EA4  05FC               	decf	_machine_state& (0+255),w,b
  3196  005EA6  A4D8               	btfss	status,2,c
  3197  005EA8  0012               	return	
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;sort.c: 79: Distribution();
  3201  005EAA  EC15  F024         	call	_Distribution	;wreg free
  3202  005EAE  0012               	return	
  3203  005EB0                     __end_of_sort:
  3204                           	opt stack 0
  3205                           tblptru	equ	0xFF8
  3206                           tblptrh	equ	0xFF7
  3207                           tblptrl	equ	0xFF6
  3208                           tablat	equ	0xFF5
  3209                           postinc0	equ	0xFEE
  3210                           wreg	equ	0xFE8
  3211                           postdec1	equ	0xFE5
  3212                           fsr1l	equ	0xFE1
  3213                           status	equ	0xFD8
  3214                           
  3215 ;; *************** function _Loading *****************
  3216 ;; Defined at:
  3217 ;;		line 83 in file "sort.c"
  3218 ;; Parameters:    Size  Location     Type
  3219 ;;		None
  3220 ;; Auto vars:     Size  Location     Type
  3221 ;;  i               2   62[BANK0 ] int 
  3222 ;;  i               2   60[BANK0 ] int 
  3223 ;;  i               2   58[BANK0 ] int 
  3224 ;;  i               2   56[BANK0 ] int 
  3225 ;;  i               2   54[BANK0 ] int 
  3226 ;;  j               2   66[BANK0 ] int 
  3227 ;;  i               2   64[BANK0 ] int 
  3228 ;;  addr            2   51[BANK0 ] unsigned short 
  3229 ;;  byte1           1   53[BANK0 ] unsigned char 
  3230 ;; Return value:  Size  Location     Type
  3231 ;;                  1    wreg      void 
  3232 ;; Registers used:
  3233 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3234 ;; Tracked objects:
  3235 ;;		On entry : 0/0
  3236 ;;		On exit  : 0/0
  3237 ;;		Unchanged: 0/0
  3238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3240 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3241 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3242 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3243 ;;Total ram usage:       19 bytes
  3244 ;; Hardware stack levels used:    1
  3245 ;; Hardware stack levels required when called:   11
  3246 ;; This function calls:
  3247 ;;		_EEPROM_read
  3248 ;;		_EEPROM_write
  3249 ;;		_delay_ms
  3250 ;;		_getIR
  3251 ;;		_getMAG
  3252 ;;		_initGlobalVars
  3253 ;;		_initServos
  3254 ;;		_initSortTimer
  3255 ;;		_lcdInst
  3256 ;;		_readIR
  3257 ;; This function is called by:
  3258 ;;		_sort
  3259 ;; This function uses a non-reentrant model
  3260 ;;
  3261                           
  3262                           	psect	text2
  3263  00173A                     __ptext2:
  3264                           	opt stack 0
  3265  00173A                     _Loading:
  3266                           	opt stack 18
  3267                           
  3268                           ;sort.c: 84: if(first){
  3269                           
  3270                           ;incstack = 0
  3271  00173A  0101               	movlb	1	; () banked
  3272  00173C  513B               	movf	_first& (0+255),w,b
  3273  00173E  0101               	movlb	1	; () banked
  3274  001740  113C               	iorwf	(_first+1)& (0+255),w,b
  3275  001742  B4D8               	btfsc	status,2,c
  3276  001744  D06A               	goto	l8023
  3277                           
  3278                           ; BSR set to: 1
  3279                           ;sort.c: 85: TMR1IE = 1;
  3280  001746  809D               	bsf	3997,0,c	;volatile
  3281                           
  3282                           ;sort.c: 86: TMR2IE = 1;
  3283  001748  829D               	bsf	3997,1,c	;volatile
  3284                           
  3285                           ;sort.c: 87: TMR3IE = 1;
  3286  00174A  82A0               	bsf	4000,1,c	;volatile
  3287                           
  3288                           ; BSR set to: 1
  3289                           ;sort.c: 88: initGlobalVars();
  3290  00174C  EC5C  F025         	call	_initGlobalVars	;wreg free
  3291                           
  3292                           ;sort.c: 89: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3293  001750  0E01               	movlw	1
  3294  001752  ECD1  F02F         	call	_lcdInst
  3295  001756  0E68               	movlw	104
  3296  001758  0100               	movlb	0	; () banked
  3297  00175A  6FB1               	movwf	??_Loading& (0+255),b
  3298  00175C  0EE4               	movlw	228
  3299  00175E                     u10657:
  3300  00175E  2EE8               	decfsz	wreg,f,c
  3301  001760  D7FE               	bra	u10657
  3302  001762  2FB1               	decfsz	??_Loading& (0+255),f,b
  3303  001764  D7FC               	bra	u10657
  3304  001766  F000               	nop	
  3305                           
  3306                           ;sort.c: 90: initSortTimer();
  3307  001768  EC4B  F027         	call	_initSortTimer	;wreg free
  3308                           
  3309                           ;sort.c: 91: LATCbits.LATC5 = 1;
  3310  00176C  8A8B               	bsf	3979,5,c	;volatile
  3311                           
  3312                           ;sort.c: 92: LATCbits.LATC6 = 1;
  3313  00176E  8C8B               	bsf	3979,6,c	;volatile
  3314                           
  3315                           ;sort.c: 97: sel = EEPROM_read(0);
  3316  001770  0E00               	movlw	0
  3317  001772  0100               	movlb	0	; () banked
  3318  001774  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3319  001776  0E00               	movlw	0
  3320  001778  6F80               	movwf	EEPROM_read@address& (0+255),b
  3321  00177A  EC94  F02F         	call	_EEPROM_read	;wreg free
  3322  00177E  0100               	movlb	0	; () banked
  3323  001780  6FFD               	movwf	_sel& (0+255),b
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;sort.c: 98: unsigned short addr = 1 + 11 * sel;
  3327  001782  0100               	movlb	0	; () banked
  3328  001784  51FD               	movf	_sel& (0+255),w,b
  3329  001786  0D0B               	mullw	11
  3330  001788  0E01               	movlw	1
  3331  00178A  24F3               	addwf	prodl,w,c
  3332  00178C  0100               	movlb	0	; () banked
  3333  00178E  6FB3               	movwf	Loading@addr& (0+255),b
  3334  001790  0E00               	movlw	0
  3335  001792  20F4               	addwfc	prodh,w,c
  3336  001794  0100               	movlb	0	; () banked
  3337  001796  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3338                           
  3339                           ; BSR set to: 0
  3340                           ;sort.c: 99: unsigned char byte1 = 0b01111111;
  3341  001798  0E7F               	movlw	127
  3342  00179A  0100               	movlb	0	; () banked
  3343  00179C  6FB5               	movwf	Loading@byte1& (0+255),b
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;sort.c: 100: EEPROM_write(addr, byte1);
  3347  00179E  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3348  0017A2  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3349  0017A6  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3350  0017AA  ECA1  F023         	call	_EEPROM_write	;wreg free
  3351                           
  3352                           ;sort.c: 103: LATBbits.LATB2 = 0;
  3353  0017AE  948A               	bcf	3978,2,c	;volatile
  3354                           
  3355                           ;sort.c: 105: for(int i=0; i<46; i++){
  3356  0017B0  0E00               	movlw	0
  3357  0017B2  0100               	movlb	0	; () banked
  3358  0017B4  6FC1               	movwf	(Loading@i+1)& (0+255),b
  3359  0017B6  0E00               	movlw	0
  3360  0017B8  6FC0               	movwf	Loading@i& (0+255),b
  3361                           
  3362                           ; BSR set to: 0
  3363  0017BA  0100               	movlb	0	; () banked
  3364  0017BC  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3365  0017BE  D008               	goto	l8013
  3366  0017C0  0100               	movlb	0	; () banked
  3367  0017C2  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3368  0017C4  E126               	bnz	l800
  3369  0017C6  0E2E               	movlw	46
  3370  0017C8  0100               	movlb	0	; () banked
  3371  0017CA  5DC0               	subwf	Loading@i& (0+255),w,b
  3372  0017CC  B0D8               	btfsc	status,0,c
  3373  0017CE  D021               	goto	l800
  3374  0017D0                     l8013:
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;sort.c: 106: LATBbits.LATB2 = !LATBbits.LATB2;
  3378  0017D0  B48A               	btfsc	3978,2,c	;volatile
  3379  0017D2  D004               	goto	u6860
  3380  0017D4  0100               	movlb	0	; () banked
  3381  0017D6  6BB1               	clrf	??_Loading& (0+255),b
  3382  0017D8  2BB1               	incf	??_Loading& (0+255),f,b
  3383  0017DA  D002               	goto	u6878
  3384  0017DC                     u6860:
  3385  0017DC  0100               	movlb	0	; () banked
  3386  0017DE  6BB1               	clrf	??_Loading& (0+255),b
  3387  0017E0                     u6878:
  3388  0017E0  0100               	movlb	0	; () banked
  3389  0017E2  47B1               	rlncf	??_Loading& (0+255),f,b
  3390  0017E4  47B1               	rlncf	??_Loading& (0+255),f,b
  3391  0017E6  508A               	movf	3978,w,c	;volatile
  3392  0017E8  0100               	movlb	0	; () banked
  3393  0017EA  19B1               	xorwf	??_Loading& (0+255),w,b
  3394  0017EC  0BFB               	andlw	-5
  3395  0017EE  19B1               	xorwf	??_Loading& (0+255),w,b
  3396  0017F0  6E8A               	movwf	3978,c	;volatile
  3397                           
  3398                           ; BSR set to: 0
  3399                           ;sort.c: 107: delay_ms(45-i);
  3400  0017F2  0100               	movlb	0	; () banked
  3401  0017F4  51C0               	movf	Loading@i& (0+255),w,b
  3402  0017F6  0800               	sublw	0
  3403  0017F8  0F2D               	addlw	45
  3404  0017FA  ECE7  F02E         	call	_delay_ms
  3405  0017FE  0100               	movlb	0	; () banked
  3406  001800  4BC0               	infsnz	Loading@i& (0+255),f,b
  3407  001802  2BC1               	incf	(Loading@i+1)& (0+255),f,b
  3408                           
  3409                           ; BSR set to: 0
  3410  001804  0100               	movlb	0	; () banked
  3411  001806  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3412  001808  D7E3               	goto	l8013
  3413  00180A  0100               	movlb	0	; () banked
  3414  00180C  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3415  00180E  E101               	bnz	u6880
  3416  001810  D7DA               	goto	L1
  3417  001812                     u6880:
  3418  001812                     l800:
  3419                           
  3420                           ; BSR set to: 0
  3421                           ;sort.c: 108: }
  3422                           ;sort.c: 109: LATBbits.LATB2 = 1;
  3423  001812  848A               	bsf	3978,2,c	;volatile
  3424                           
  3425                           ; BSR set to: 0
  3426                           ;sort.c: 112: initServos();
  3427  001814  EC88  F029         	call	_initServos	;wreg free
  3428                           
  3429                           ;sort.c: 113: }
  3430  001818  0012               	return	
  3431  00181A                     l8023:
  3432                           
  3433                           ;sort.c: 114: else{
  3434                           ;sort.c: 117: if(!f_loadingNewCan){
  3435  00181A  0100               	movlb	0	; () banked
  3436  00181C  51EC               	movf	_f_loadingNewCan& (0+255),w,b
  3437  00181E  0100               	movlb	0	; () banked
  3438  001820  11ED               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3439  001822  A4D8               	btfss	status,2,c
  3440  001824  D01D               	goto	l8039
  3441                           
  3442                           ; BSR set to: 0
  3443                           ;sort.c: 119: getIR(0);
  3444  001826  0E00               	movlw	0
  3445  001828  0100               	movlb	0	; () banked
  3446  00182A  6F89               	movwf	(getIR@port+1)& (0+255),b
  3447  00182C  0E00               	movlw	0
  3448  00182E  6F88               	movwf	getIR@port& (0+255),b
  3449  001830  EC08  F029         	call	_getIR	;wreg free
  3450                           
  3451                           ;sort.c: 121: if(!f_loadingNewCan){
  3452  001834  0100               	movlb	0	; () banked
  3453  001836  51EC               	movf	_f_loadingNewCan& (0+255),w,b
  3454  001838  0100               	movlb	0	; () banked
  3455  00183A  11ED               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3456  00183C  B4D8               	btfsc	status,2,c
  3457  00183E  0012               	return	
  3458                           
  3459                           ; BSR set to: 0
  3460                           ;sort.c: 125: else{
  3461                           ;sort.c: 126: count_total++;
  3462                           
  3463                           ; BSR set to: 0
  3464                           
  3465                           ; BSR set to: 0
  3466                           ;sort.c: 123: }
  3467                           
  3468                           ; BSR set to: 0
  3469                           ;sort.c: 122: return;
  3470  001840  0100               	movlb	0	; () banked
  3471  001842  4BFE               	infsnz	_count_total& (0+255),f,b
  3472  001844  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3473                           
  3474                           ; BSR set to: 0
  3475                           ;sort.c: 127: if(count_total == 12){
  3476  001846  0E0C               	movlw	12
  3477  001848  0100               	movlb	0	; () banked
  3478  00184A  19FE               	xorwf	_count_total& (0+255),w,b
  3479  00184C  0100               	movlb	0	; () banked
  3480  00184E  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3481  001850  A4D8               	btfss	status,2,c
  3482  001852  0012               	return	
  3483                           
  3484                           ; BSR set to: 0
  3485                           ;sort.c: 128: f_lastCan = 1;
  3486  001854  0E00               	movlw	0
  3487  001856  0100               	movlb	0	; () banked
  3488  001858  6FEB               	movwf	(_f_lastCan+1)& (0+255),b
  3489  00185A  0E01               	movlw	1
  3490  00185C  6FEA               	movwf	_f_lastCan& (0+255),b
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;sort.c: 129: }
  3494                           ;sort.c: 130: }
  3495                           ;sort.c: 131: }
  3496                           
  3497                           ; BSR set to: 0
  3498  00185E  0012               	return	
  3499  001860                     l8039:
  3500                           
  3501                           ; BSR set to: 0
  3502                           ;sort.c: 134: else if(f_ID_receive){
  3503  001860  0101               	movlb	1	; () banked
  3504  001862  5131               	movf	_f_ID_receive& (0+255),w,b
  3505  001864  0101               	movlb	1	; () banked
  3506  001866  1132               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3507  001868  B4D8               	btfsc	status,2,c
  3508  00186A  0012               	return	
  3509                           
  3510                           ; BSR set to: 1
  3511                           ;sort.c: 135: f_most_recent_sort_time = 1;
  3512  00186C  0E00               	movlw	0
  3513  00186E  0101               	movlb	1	; () banked
  3514  001870  6F3A               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3515  001872  0E01               	movlw	1
  3516  001874  6F39               	movwf	_f_most_recent_sort_time& (0+255),b
  3517                           
  3518                           ;sort.c: 136: f_loadingNewCan = 0;
  3519  001876  0E00               	movlw	0
  3520  001878  0100               	movlb	0	; () banked
  3521  00187A  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3522  00187C  0E00               	movlw	0
  3523  00187E  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  3524                           
  3525                           ; BSR set to: 0
  3526                           ;sort.c: 137: _delay((unsigned long)((400)*(32000000/4000.0)));
  3527  001880  0E11               	movlw	17
  3528  001882  0100               	movlb	0	; () banked
  3529  001884  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3530  001886  0E3C               	movlw	60
  3531  001888  0100               	movlb	0	; () banked
  3532  00188A  6FB1               	movwf	??_Loading& (0+255),b
  3533  00188C  0ECB               	movlw	203
  3534  00188E                     u10667:
  3535  00188E  2EE8               	decfsz	wreg,f,c
  3536  001890  D7FE               	bra	u10667
  3537  001892  2FB1               	decfsz	??_Loading& (0+255),f,b
  3538  001894  D7FC               	bra	u10667
  3539  001896  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3540  001898  D7FA               	bra	u10667
  3541                           
  3542                           ;sort.c: 138: LATBbits.LATB2 = 0;
  3543  00189A  948A               	bcf	3978,2,c	;volatile
  3544                           
  3545                           ;sort.c: 142: f_arm_position = 1;
  3546  00189C  0E00               	movlw	0
  3547  00189E  0100               	movlb	0	; () banked
  3548  0018A0  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3549  0018A2  0E01               	movlw	1
  3550  0018A4  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  3551                           
  3552                           ; BSR set to: 0
  3553                           ;sort.c: 144: delay_ms(750);
  3554  0018A6  0EEE               	movlw	238
  3555  0018A8  ECE7  F02E         	call	_delay_ms
  3556                           
  3557                           ;sort.c: 145: getMAG();
  3558  0018AC  EC56  F02D         	call	_getMAG	;wreg free
  3559                           
  3560                           ;sort.c: 146: sensor_outputs[0] = MAG_signal;
  3561  0018B0  C0E2  F0DA         	movff	_MAG_signal,_sensor_outputs
  3562  0018B4  C0E3  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3563                           
  3564                           ;sort.c: 148: TMR2IE = 0;
  3565  0018B8  929D               	bcf	3997,1,c	;volatile
  3566                           
  3567                           ;sort.c: 149: if(sensor_outputs[0]){
  3568  0018BA  0100               	movlb	0	; () banked
  3569  0018BC  51DA               	movf	_sensor_outputs& (0+255),w,b
  3570  0018BE  0100               	movlb	0	; () banked
  3571  0018C0  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3572  0018C2  B4D8               	btfsc	status,2,c
  3573  0018C4  D01D               	goto	l8071
  3574                           
  3575                           ; BSR set to: 0
  3576                           ;sort.c: 150: for(int i = 0; i<2500; i++){
  3577  0018C6  0E00               	movlw	0
  3578  0018C8  0100               	movlb	0	; () banked
  3579  0018CA  6FB7               	movwf	(Loading@i_1125+1)& (0+255),b
  3580  0018CC  0E00               	movlw	0
  3581  0018CE  6FB6               	movwf	Loading@i_1125& (0+255),b
  3582  0018D0                     l8061:
  3583                           
  3584                           ; BSR set to: 0
  3585  0018D0  0100               	movlb	0	; () banked
  3586  0018D2  BFB7               	btfsc	(Loading@i_1125+1)& (0+255),7,b
  3587  0018D4  D008               	goto	l810
  3588  0018D6  0EC4               	movlw	196
  3589  0018D8  0100               	movlb	0	; () banked
  3590  0018DA  5DB6               	subwf	Loading@i_1125& (0+255),w,b
  3591  0018DC  0E09               	movlw	9
  3592  0018DE  0100               	movlb	0	; () banked
  3593  0018E0  59B7               	subwfb	(Loading@i_1125+1)& (0+255),w,b
  3594  0018E2  B0D8               	btfsc	status,0,c
  3595  0018E4  D02B               	goto	l812
  3596  0018E6                     l810:
  3597                           
  3598                           ; BSR set to: 0
  3599                           ;sort.c: 151: LATAbits.LATA4 = 1;
  3600  0018E6  8889               	bsf	3977,4,c	;volatile
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;sort.c: 152: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3604  0018E8  0EC8               	movlw	200
  3605  0018EA                     u10677:
  3606  0018EA  2EE8               	decfsz	wreg,f,c
  3607  0018EC  D7FE               	bra	u10677
  3608                           
  3609                           ;sort.c: 153: LATAbits.LATA4 = 0;
  3610  0018EE  9889               	bcf	3977,4,c	;volatile
  3611                           
  3612                           ;sort.c: 154: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3613  0018F0  0E42               	movlw	66
  3614  0018F2                     u10687:
  3615  0018F2  2EE8               	decfsz	wreg,f,c
  3616  0018F4  D7FE               	bra	u10687
  3617  0018F6  D000               	nop2	
  3618  0018F8  0100               	movlb	0	; () banked
  3619  0018FA  4BB6               	infsnz	Loading@i_1125& (0+255),f,b
  3620  0018FC  2BB7               	incf	(Loading@i_1125+1)& (0+255),f,b
  3621  0018FE  D7E8               	goto	l8061
  3622  001900                     l8071:
  3623                           
  3624                           ; BSR set to: 0
  3625                           ;sort.c: 157: else{
  3626                           ;sort.c: 158: for(int i = 0; i<2500; i++){
  3627  001900  0E00               	movlw	0
  3628  001902  0100               	movlb	0	; () banked
  3629  001904  6FB9               	movwf	(Loading@i_1134+1)& (0+255),b
  3630  001906  0E00               	movlw	0
  3631  001908  6FB8               	movwf	Loading@i_1134& (0+255),b
  3632  00190A                     l8073:
  3633                           
  3634                           ; BSR set to: 0
  3635  00190A  0100               	movlb	0	; () banked
  3636  00190C  BFB9               	btfsc	(Loading@i_1134+1)& (0+255),7,b
  3637  00190E  D008               	goto	l813
  3638  001910  0EC4               	movlw	196
  3639  001912  0100               	movlb	0	; () banked
  3640  001914  5DB8               	subwf	Loading@i_1134& (0+255),w,b
  3641  001916  0E09               	movlw	9
  3642  001918  0100               	movlb	0	; () banked
  3643  00191A  59B9               	subwfb	(Loading@i_1134+1)& (0+255),w,b
  3644  00191C  B0D8               	btfsc	status,0,c
  3645  00191E  D00E               	goto	l812
  3646  001920                     l813:
  3647                           
  3648                           ; BSR set to: 0
  3649                           ;sort.c: 159: LATAbits.LATA4 = 1;
  3650  001920  8889               	bsf	3977,4,c	;volatile
  3651                           
  3652                           ; BSR set to: 0
  3653                           ;sort.c: 160: _delay((unsigned long)((50)*(32000000/4000000.0)));
  3654  001922  0E85               	movlw	133
  3655  001924                     u10697:
  3656  001924  2EE8               	decfsz	wreg,f,c
  3657  001926  D7FE               	bra	u10697
  3658  001928  F000               	nop	
  3659                           
  3660                           ;sort.c: 161: LATAbits.LATA4 = 0;
  3661  00192A  9889               	bcf	3977,4,c	;volatile
  3662                           
  3663                           ;sort.c: 162: _delay((unsigned long)((50)*(32000000/4000000.0)));
  3664  00192C  0E85               	movlw	133
  3665  00192E                     u10707:
  3666  00192E  2EE8               	decfsz	wreg,f,c
  3667  001930  D7FE               	bra	u10707
  3668  001932  F000               	nop	
  3669  001934  0100               	movlb	0	; () banked
  3670  001936  4BB8               	infsnz	Loading@i_1134& (0+255),f,b
  3671  001938  2BB9               	incf	(Loading@i_1134+1)& (0+255),f,b
  3672  00193A  D7E7               	goto	l8073
  3673  00193C                     l812:
  3674                           
  3675                           ; BSR set to: 0
  3676                           ;sort.c: 163: }
  3677                           ;sort.c: 164: }
  3678                           ;sort.c: 165: TMR2IE = 1;
  3679  00193C  829D               	bsf	3997,1,c	;volatile
  3680                           
  3681                           ; BSR set to: 0
  3682                           ;sort.c: 166: _delay((unsigned long)((350)*(32000000/4000.0)));
  3683  00193E  0E0F               	movlw	15
  3684  001940  0100               	movlb	0	; () banked
  3685  001942  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3686  001944  0E35               	movlw	53
  3687  001946  0100               	movlb	0	; () banked
  3688  001948  6FB1               	movwf	??_Loading& (0+255),b
  3689  00194A  0E51               	movlw	81
  3690  00194C                     u10717:
  3691  00194C  2EE8               	decfsz	wreg,f,c
  3692  00194E  D7FE               	bra	u10717
  3693  001950  2FB1               	decfsz	??_Loading& (0+255),f,b
  3694  001952  D7FC               	bra	u10717
  3695  001954  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3696  001956  D7FA               	bra	u10717
  3697                           
  3698                           ;sort.c: 168: readIR(0);
  3699  001958  0E00               	movlw	0
  3700  00195A  0100               	movlb	0	; () banked
  3701  00195C  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  3702  00195E  0E00               	movlw	0
  3703  001960  6F82               	movwf	readIR@ana_port& (0+255),b
  3704  001962  ECF1  F027         	call	_readIR	;wreg free
  3705                           
  3706                           ;sort.c: 169: if(IR_signal==1){
  3707  001966  0100               	movlb	0	; () banked
  3708  001968  05E0               	decf	_IR_signal& (0+255),w,b
  3709  00196A  0100               	movlb	0	; () banked
  3710  00196C  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3711  00196E  A4D8               	btfss	status,2,c
  3712  001970  D1A8               	goto	l8215
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;sort.c: 170: _delay((unsigned long)((70)*(32000000/4000.0)));
  3716  001972  0E03               	movlw	3
  3717  001974  0100               	movlb	0	; () banked
  3718  001976  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3719  001978  0ED8               	movlw	216
  3720  00197A  0100               	movlb	0	; () banked
  3721  00197C  6FB1               	movwf	??_Loading& (0+255),b
  3722  00197E  0E41               	movlw	65
  3723  001980                     u10727:
  3724  001980  2EE8               	decfsz	wreg,f,c
  3725  001982  D7FE               	bra	u10727
  3726  001984  2FB1               	decfsz	??_Loading& (0+255),f,b
  3727  001986  D7FC               	bra	u10727
  3728  001988  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3729  00198A  D7FA               	bra	u10727
  3730  00198C  D000               	nop2	
  3731                           
  3732                           ;sort.c: 171: readIR(0);
  3733  00198E  0E00               	movlw	0
  3734  001990  0100               	movlb	0	; () banked
  3735  001992  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  3736  001994  0E00               	movlw	0
  3737  001996  6F82               	movwf	readIR@ana_port& (0+255),b
  3738  001998  ECF1  F027         	call	_readIR	;wreg free
  3739                           
  3740                           ;sort.c: 172: if(IR_signal==1){
  3741  00199C  0100               	movlb	0	; () banked
  3742  00199E  05E0               	decf	_IR_signal& (0+255),w,b
  3743  0019A0  0100               	movlb	0	; () banked
  3744  0019A2  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3745  0019A4  A4D8               	btfss	status,2,c
  3746  0019A6  D041               	goto	l8121
  3747                           
  3748                           ; BSR set to: 0
  3749                           ;sort.c: 173: if(sensor_outputs[0]){
  3750  0019A8  0100               	movlb	0	; () banked
  3751  0019AA  51DA               	movf	_sensor_outputs& (0+255),w,b
  3752  0019AC  0100               	movlb	0	; () banked
  3753  0019AE  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3754  0019B0  B4D8               	btfsc	status,2,c
  3755  0019B2  D01D               	goto	l8109
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;sort.c: 174: for(int i = 0; i<2500; i++){
  3759  0019B4  0E00               	movlw	0
  3760  0019B6  0100               	movlb	0	; () banked
  3761  0019B8  6FBB               	movwf	(Loading@i_1136+1)& (0+255),b
  3762  0019BA  0E00               	movlw	0
  3763  0019BC  6FBA               	movwf	Loading@i_1136& (0+255),b
  3764  0019BE                     l8099:
  3765                           
  3766                           ; BSR set to: 0
  3767  0019BE  0100               	movlb	0	; () banked
  3768  0019C0  BFBB               	btfsc	(Loading@i_1136+1)& (0+255),7,b
  3769  0019C2  D008               	goto	l818
  3770  0019C4  0EC4               	movlw	196
  3771  0019C6  0100               	movlb	0	; () banked
  3772  0019C8  5DBA               	subwf	Loading@i_1136& (0+255),w,b
  3773  0019CA  0E09               	movlw	9
  3774  0019CC  0100               	movlb	0	; () banked
  3775  0019CE  59BB               	subwfb	(Loading@i_1136+1)& (0+255),w,b
  3776  0019D0  B0D8               	btfsc	status,0,c
  3777  0019D2  D02B               	goto	l8121
  3778  0019D4                     l818:
  3779                           
  3780                           ; BSR set to: 0
  3781                           ;sort.c: 175: LATAbits.LATA4 = 1;
  3782  0019D4  8889               	bsf	3977,4,c	;volatile
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;sort.c: 176: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3786  0019D6  0EC8               	movlw	200
  3787  0019D8                     u10737:
  3788  0019D8  2EE8               	decfsz	wreg,f,c
  3789  0019DA  D7FE               	bra	u10737
  3790                           
  3791                           ;sort.c: 177: LATAbits.LATA4 = 0;
  3792  0019DC  9889               	bcf	3977,4,c	;volatile
  3793                           
  3794                           ;sort.c: 178: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3795  0019DE  0E42               	movlw	66
  3796  0019E0                     u10747:
  3797  0019E0  2EE8               	decfsz	wreg,f,c
  3798  0019E2  D7FE               	bra	u10747
  3799  0019E4  D000               	nop2	
  3800  0019E6  0100               	movlb	0	; () banked
  3801  0019E8  4BBA               	infsnz	Loading@i_1136& (0+255),f,b
  3802  0019EA  2BBB               	incf	(Loading@i_1136+1)& (0+255),f,b
  3803  0019EC  D7E8               	goto	l8099
  3804  0019EE                     l8109:
  3805                           
  3806                           ; BSR set to: 0
  3807                           ;sort.c: 181: else{
  3808                           ;sort.c: 182: for(int i = 0; i<2500; i++){
  3809  0019EE  0E00               	movlw	0
  3810  0019F0  0100               	movlb	0	; () banked
  3811  0019F2  6FBD               	movwf	(Loading@i_1137+1)& (0+255),b
  3812  0019F4  0E00               	movlw	0
  3813  0019F6  6FBC               	movwf	Loading@i_1137& (0+255),b
  3814  0019F8                     l8111:
  3815                           
  3816                           ; BSR set to: 0
  3817  0019F8  0100               	movlb	0	; () banked
  3818  0019FA  BFBD               	btfsc	(Loading@i_1137+1)& (0+255),7,b
  3819  0019FC  D008               	goto	l821
  3820  0019FE  0EC4               	movlw	196
  3821  001A00  0100               	movlb	0	; () banked
  3822  001A02  5DBC               	subwf	Loading@i_1137& (0+255),w,b
  3823  001A04  0E09               	movlw	9
  3824  001A06  0100               	movlb	0	; () banked
  3825  001A08  59BD               	subwfb	(Loading@i_1137+1)& (0+255),w,b
  3826  001A0A  B0D8               	btfsc	status,0,c
  3827  001A0C  D00E               	goto	l8121
  3828  001A0E                     l821:
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;sort.c: 183: LATAbits.LATA4 = 1;
  3832  001A0E  8889               	bsf	3977,4,c	;volatile
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;sort.c: 184: _delay((unsigned long)((50)*(32000000/4000000.0)));
  3836  001A10  0E85               	movlw	133
  3837  001A12                     u10757:
  3838  001A12  2EE8               	decfsz	wreg,f,c
  3839  001A14  D7FE               	bra	u10757
  3840  001A16  F000               	nop	
  3841                           
  3842                           ;sort.c: 185: LATAbits.LATA4 = 0;
  3843  001A18  9889               	bcf	3977,4,c	;volatile
  3844                           
  3845                           ;sort.c: 186: _delay((unsigned long)((50)*(32000000/4000000.0)));
  3846  001A1A  0E85               	movlw	133
  3847  001A1C                     u10767:
  3848  001A1C  2EE8               	decfsz	wreg,f,c
  3849  001A1E  D7FE               	bra	u10767
  3850  001A20  F000               	nop	
  3851  001A22  0100               	movlb	0	; () banked
  3852  001A24  4BBC               	infsnz	Loading@i_1137& (0+255),f,b
  3853  001A26  2BBD               	incf	(Loading@i_1137+1)& (0+255),f,b
  3854  001A28  D7E7               	goto	l8111
  3855  001A2A                     l8121:
  3856                           
  3857                           ; BSR set to: 0
  3858                           ;sort.c: 187: }
  3859                           ;sort.c: 188: }
  3860                           ;sort.c: 189: }
  3861                           ;sort.c: 191: _delay((unsigned long)((350)*(32000000/4000.0)));
  3862  001A2A  0E0F               	movlw	15
  3863  001A2C  0100               	movlb	0	; () banked
  3864  001A2E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3865  001A30  0E35               	movlw	53
  3866  001A32  0100               	movlb	0	; () banked
  3867  001A34  6FB1               	movwf	??_Loading& (0+255),b
  3868  001A36  0E51               	movlw	81
  3869  001A38                     u10777:
  3870  001A38  2EE8               	decfsz	wreg,f,c
  3871  001A3A  D7FE               	bra	u10777
  3872  001A3C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3873  001A3E  D7FC               	bra	u10777
  3874  001A40  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3875  001A42  D7FA               	bra	u10777
  3876                           
  3877                           ;sort.c: 193: int j = 0;
  3878  001A44  0E00               	movlw	0
  3879  001A46  0100               	movlb	0	; () banked
  3880  001A48  6FC3               	movwf	(Loading@j+1)& (0+255),b
  3881  001A4A  0E00               	movlw	0
  3882  001A4C  6FC2               	movwf	Loading@j& (0+255),b
  3883                           
  3884                           ;sort.c: 194: while(IR_signal == 1){
  3885  001A4E  D132               	goto	l8213
  3886  001A50                     l8125:
  3887                           
  3888                           ; BSR set to: 0
  3889                           ;sort.c: 195: readIR(0);
  3890  001A50  0E00               	movlw	0
  3891  001A52  0100               	movlb	0	; () banked
  3892  001A54  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  3893  001A56  0E00               	movlw	0
  3894  001A58  6F82               	movwf	readIR@ana_port& (0+255),b
  3895  001A5A  ECF1  F027         	call	_readIR	;wreg free
  3896                           
  3897                           ;sort.c: 196: if(j == 3 || j == 4){
  3898  001A5E  0E03               	movlw	3
  3899  001A60  0100               	movlb	0	; () banked
  3900  001A62  19C2               	xorwf	Loading@j& (0+255),w,b
  3901  001A64  0100               	movlb	0	; () banked
  3902  001A66  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3903  001A68  B4D8               	btfsc	status,2,c
  3904  001A6A  D007               	goto	l8131
  3905                           
  3906                           ; BSR set to: 0
  3907  001A6C  0E04               	movlw	4
  3908  001A6E  0100               	movlb	0	; () banked
  3909  001A70  19C2               	xorwf	Loading@j& (0+255),w,b
  3910  001A72  0100               	movlb	0	; () banked
  3911  001A74  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3912  001A76  A4D8               	btfss	status,2,c
  3913  001A78  D005               	goto	l8133
  3914  001A7A                     l8131:
  3915                           
  3916                           ; BSR set to: 0
  3917                           ;sort.c: 197: f_arm_position = 0;
  3918  001A7A  0E00               	movlw	0
  3919  001A7C  0100               	movlb	0	; () banked
  3920  001A7E  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3921  001A80  0E00               	movlw	0
  3922  001A82  D030               	goto	L2
  3923  001A84                     l8133:
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;sort.c: 199: else if(j == 5 || j == 6){
  3927  001A84  0E05               	movlw	5
  3928  001A86  0100               	movlb	0	; () banked
  3929  001A88  19C2               	xorwf	Loading@j& (0+255),w,b
  3930  001A8A  0100               	movlb	0	; () banked
  3931  001A8C  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3932  001A8E  B4D8               	btfsc	status,2,c
  3933  001A90  D007               	goto	l831
  3934                           
  3935                           ; BSR set to: 0
  3936  001A92  0E06               	movlw	6
  3937  001A94  0100               	movlb	0	; () banked
  3938  001A96  19C2               	xorwf	Loading@j& (0+255),w,b
  3939  001A98  0100               	movlb	0	; () banked
  3940  001A9A  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3941  001A9C  A4D8               	btfss	status,2,c
  3942  001A9E  D002               	goto	l8137
  3943  001AA0                     l831:
  3944                           
  3945                           ; BSR set to: 0
  3946                           ;sort.c: 200: LATBbits.LATB2 = 1;
  3947  001AA0  848A               	bsf	3978,2,c	;volatile
  3948                           
  3949                           ;sort.c: 201: }
  3950  001AA2  D042               	goto	l828
  3951  001AA4                     l8137:
  3952                           
  3953                           ; BSR set to: 0
  3954                           ;sort.c: 202: else if(j == 7 || j == 8 || j == 9 || j == 10){
  3955  001AA4  0E07               	movlw	7
  3956  001AA6  0100               	movlb	0	; () banked
  3957  001AA8  19C2               	xorwf	Loading@j& (0+255),w,b
  3958  001AAA  0100               	movlb	0	; () banked
  3959  001AAC  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3960  001AAE  B4D8               	btfsc	status,2,c
  3961  001AB0  D015               	goto	l8145
  3962                           
  3963                           ; BSR set to: 0
  3964  001AB2  0E08               	movlw	8
  3965  001AB4  0100               	movlb	0	; () banked
  3966  001AB6  19C2               	xorwf	Loading@j& (0+255),w,b
  3967  001AB8  0100               	movlb	0	; () banked
  3968  001ABA  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3969  001ABC  B4D8               	btfsc	status,2,c
  3970  001ABE  D00E               	goto	l8145
  3971                           
  3972                           ; BSR set to: 0
  3973  001AC0  0E09               	movlw	9
  3974  001AC2  0100               	movlb	0	; () banked
  3975  001AC4  19C2               	xorwf	Loading@j& (0+255),w,b
  3976  001AC6  0100               	movlb	0	; () banked
  3977  001AC8  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3978  001ACA  B4D8               	btfsc	status,2,c
  3979  001ACC  D007               	goto	l8145
  3980                           
  3981                           ; BSR set to: 0
  3982  001ACE  0E0A               	movlw	10
  3983  001AD0  0100               	movlb	0	; () banked
  3984  001AD2  19C2               	xorwf	Loading@j& (0+255),w,b
  3985  001AD4  0100               	movlb	0	; () banked
  3986  001AD6  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3987  001AD8  A4D8               	btfss	status,2,c
  3988  001ADA  D006               	goto	l833
  3989  001ADC                     l8145:
  3990                           
  3991                           ; BSR set to: 0
  3992                           ;sort.c: 203: f_arm_position = 1;
  3993  001ADC  0E00               	movlw	0
  3994  001ADE  0100               	movlb	0	; () banked
  3995  001AE0  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3996  001AE2  0E01               	movlw	1
  3997  001AE4                     L2:
  3998  001AE4  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  3999                           
  4000                           ;sort.c: 204: }
  4001  001AE6  D020               	goto	l828
  4002  001AE8                     l833:
  4003                           
  4004                           ; BSR set to: 0
  4005                           ;sort.c: 205: else if(j % 2 == 0){
  4006  001AE8  0100               	movlb	0	; () banked
  4007  001AEA  B1C2               	btfsc	Loading@j& (0+255),0,b
  4008  001AEC  D01D               	goto	l828
  4009                           
  4010                           ; BSR set to: 0
  4011                           ;sort.c: 206: LATBbits.LATB2 = !LATBbits.LATB2;
  4012  001AEE  B48A               	btfsc	3978,2,c	;volatile
  4013  001AF0  D004               	goto	u7140
  4014  001AF2  0100               	movlb	0	; () banked
  4015  001AF4  6BB1               	clrf	??_Loading& (0+255),b
  4016  001AF6  2BB1               	incf	??_Loading& (0+255),f,b
  4017  001AF8  D002               	goto	u7158
  4018  001AFA                     u7140:
  4019  001AFA  0100               	movlb	0	; () banked
  4020  001AFC  6BB1               	clrf	??_Loading& (0+255),b
  4021  001AFE                     u7158:
  4022  001AFE  0100               	movlb	0	; () banked
  4023  001B00  47B1               	rlncf	??_Loading& (0+255),f,b
  4024  001B02  47B1               	rlncf	??_Loading& (0+255),f,b
  4025  001B04  508A               	movf	3978,w,c	;volatile
  4026  001B06  0100               	movlb	0	; () banked
  4027  001B08  19B1               	xorwf	??_Loading& (0+255),w,b
  4028  001B0A  0BFB               	andlw	-5
  4029  001B0C  19B1               	xorwf	??_Loading& (0+255),w,b
  4030  001B0E  6E8A               	movwf	3978,c	;volatile
  4031                           
  4032                           ;sort.c: 207: f_arm_position = !f_arm_position;
  4033  001B10  0100               	movlb	0	; () banked
  4034  001B12  51E8               	movf	_f_arm_position& (0+255),w,b	;volatile
  4035  001B14  0100               	movlb	0	; () banked
  4036  001B16  11E9               	iorwf	(_f_arm_position+1)& (0+255),w,b	;volatile
  4037  001B18  A4D8               	btfss	status,2,c
  4038  001B1A  D002               	goto	u7160
  4039  001B1C  0E01               	movlw	1
  4040  001B1E  D001               	goto	u7170
  4041  001B20                     u7160:
  4042  001B20  0E00               	movlw	0
  4043  001B22                     u7170:
  4044  001B22  0100               	movlb	0	; () banked
  4045  001B24  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  4046  001B26  6BE9               	clrf	(_f_arm_position+1)& (0+255),b	;volatile
  4047  001B28                     l828:
  4048                           
  4049                           ; BSR set to: 0
  4050                           ;sort.c: 208: }
  4051                           ;sort.c: 211: if(IR_signal==1){
  4052  001B28  0100               	movlb	0	; () banked
  4053  001B2A  05E0               	decf	_IR_signal& (0+255),w,b
  4054  001B2C  0100               	movlb	0	; () banked
  4055  001B2E  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4056  001B30  A4D8               	btfss	status,2,c
  4057  001B32  D09F               	goto	l8201
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;sort.c: 212: _delay((unsigned long)((350)*(32000000/4000.0)));
  4061  001B34  0E0F               	movlw	15
  4062  001B36  0100               	movlb	0	; () banked
  4063  001B38  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4064  001B3A  0E35               	movlw	53
  4065  001B3C  0100               	movlb	0	; () banked
  4066  001B3E  6FB1               	movwf	??_Loading& (0+255),b
  4067  001B40  0E51               	movlw	81
  4068  001B42                     u10787:
  4069  001B42  2EE8               	decfsz	wreg,f,c
  4070  001B44  D7FE               	bra	u10787
  4071  001B46  2FB1               	decfsz	??_Loading& (0+255),f,b
  4072  001B48  D7FC               	bra	u10787
  4073  001B4A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4074  001B4C  D7FA               	bra	u10787
  4075                           
  4076                           ;sort.c: 213: readIR(0);
  4077  001B4E  0E00               	movlw	0
  4078  001B50  0100               	movlb	0	; () banked
  4079  001B52  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  4080  001B54  0E00               	movlw	0
  4081  001B56  6F82               	movwf	readIR@ana_port& (0+255),b
  4082  001B58  ECF1  F027         	call	_readIR	;wreg free
  4083                           
  4084                           ;sort.c: 214: if(IR_signal==1){
  4085  001B5C  0100               	movlb	0	; () banked
  4086  001B5E  05E0               	decf	_IR_signal& (0+255),w,b
  4087  001B60  0100               	movlb	0	; () banked
  4088  001B62  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4089  001B64  A4D8               	btfss	status,2,c
  4090  001B66  D081               	goto	l839
  4091                           
  4092                           ; BSR set to: 0
  4093                           ;sort.c: 215: if(sensor_outputs[0]){
  4094  001B68  0100               	movlb	0	; () banked
  4095  001B6A  51DA               	movf	_sensor_outputs& (0+255),w,b
  4096  001B6C  0100               	movlb	0	; () banked
  4097  001B6E  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4098  001B70  B4D8               	btfsc	status,2,c
  4099  001B72  D011               	goto	l840
  4100                           
  4101                           ; BSR set to: 0
  4102                           ;sort.c: 216: LATAbits.LATA4 = 1;
  4103  001B74  8889               	bsf	3977,4,c	;volatile
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;sort.c: 217: _delay((unsigned long)((250)*(32000000/4000.0)));
  4107  001B76  0E0B               	movlw	11
  4108  001B78  0100               	movlb	0	; () banked
  4109  001B7A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4110  001B7C  0E26               	movlw	38
  4111  001B7E  0100               	movlb	0	; () banked
  4112  001B80  6FB1               	movwf	??_Loading& (0+255),b
  4113  001B82  0E5D               	movlw	93
  4114  001B84                     u10797:
  4115  001B84  2EE8               	decfsz	wreg,f,c
  4116  001B86  D7FE               	bra	u10797
  4117  001B88  2FB1               	decfsz	??_Loading& (0+255),f,b
  4118  001B8A  D7FC               	bra	u10797
  4119  001B8C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4120  001B8E  D7FA               	bra	u10797
  4121  001B90  D000               	nop2	
  4122                           
  4123                           ;sort.c: 218: LATAbits.LATA4 = 0;
  4124  001B92  9889               	bcf	3977,4,c	;volatile
  4125                           
  4126                           ;sort.c: 219: }
  4127  001B94  D06A               	goto	l839
  4128  001B96                     l840:
  4129                           
  4130                           ; BSR set to: 0
  4131                           ;sort.c: 220: else{
  4132                           ;sort.c: 221: TMR2IE = 0;
  4133  001B96  929D               	bcf	3997,1,c	;volatile
  4134                           
  4135                           ; BSR set to: 0
  4136                           ;sort.c: 222: for(int i = 0; i<2500; i++){
  4137  001B98  0E00               	movlw	0
  4138  001B9A  0100               	movlb	0	; () banked
  4139  001B9C  6FBF               	movwf	(Loading@i_1139+1)& (0+255),b
  4140  001B9E  0E00               	movlw	0
  4141  001BA0  6FBE               	movwf	Loading@i_1139& (0+255),b
  4142  001BA2                     l8165:
  4143                           
  4144                           ; BSR set to: 0
  4145  001BA2  0100               	movlb	0	; () banked
  4146  001BA4  BFBF               	btfsc	(Loading@i_1139+1)& (0+255),7,b
  4147  001BA6  D041               	goto	l8193
  4148  001BA8  0EC4               	movlw	196
  4149  001BAA  0100               	movlb	0	; () banked
  4150  001BAC  5DBE               	subwf	Loading@i_1139& (0+255),w,b
  4151  001BAE  0E09               	movlw	9
  4152  001BB0  0100               	movlb	0	; () banked
  4153  001BB2  59BF               	subwfb	(Loading@i_1139+1)& (0+255),w,b
  4154  001BB4  B0D8               	btfsc	status,0,c
  4155  001BB6  D058               	goto	l843
  4156  001BB8  D038               	goto	l8193
  4157  001BBA                     l845:
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;sort.c: 225: LATAbits.LATA4 = 1;
  4161  001BBA  8889               	bsf	3977,4,c	;volatile
  4162                           
  4163                           ; BSR set to: 0
  4164                           ;sort.c: 226: _delay((unsigned long)((75)*(32000000/4000000.0)));
  4165  001BBC  0EC8               	movlw	200
  4166  001BBE                     u10807:
  4167  001BBE  2EE8               	decfsz	wreg,f,c
  4168  001BC0  D7FE               	bra	u10807
  4169                           
  4170                           ;sort.c: 227: LATAbits.LATA4 = 0;
  4171  001BC2  9889               	bcf	3977,4,c	;volatile
  4172                           
  4173                           ;sort.c: 228: _delay((unsigned long)((25)*(32000000/4000000.0)));
  4174  001BC4  0E42               	movlw	66
  4175  001BC6                     u10817:
  4176  001BC6  2EE8               	decfsz	wreg,f,c
  4177  001BC8  D7FE               	bra	u10817
  4178  001BCA  D01C               	goto	L3
  4179  001BCC                     l847:
  4180                           
  4181                           ; BSR set to: 0
  4182                           ;sort.c: 231: LATAbits.LATA4 = 1;
  4183  001BCC  8889               	bsf	3977,4,c	;volatile
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;sort.c: 232: _delay((unsigned long)((80)*(32000000/4000000.0)));
  4187  001BCE  0ED5               	movlw	213
  4188  001BD0                     u10827:
  4189  001BD0  2EE8               	decfsz	wreg,f,c
  4190  001BD2  D7FE               	bra	u10827
  4191  001BD4  F000               	nop	
  4192                           
  4193                           ;sort.c: 233: LATAbits.LATA4 = 0;
  4194  001BD6  9889               	bcf	3977,4,c	;volatile
  4195                           
  4196                           ;sort.c: 234: _delay((unsigned long)((20)*(32000000/4000000.0)));
  4197  001BD8  0E35               	movlw	53
  4198  001BDA                     u10837:
  4199  001BDA  2EE8               	decfsz	wreg,f,c
  4200  001BDC  D7FE               	bra	u10837
  4201  001BDE  D01D               	goto	L4
  4202  001BE0                     l848:
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;sort.c: 237: LATAbits.LATA4 = 1;
  4206  001BE0  8889               	bsf	3977,4,c	;volatile
  4207                           
  4208                           ; BSR set to: 0
  4209                           ;sort.c: 238: _delay((unsigned long)((85)*(32000000/4000000.0)));
  4210  001BE2  0EE2               	movlw	226
  4211  001BE4                     u10847:
  4212  001BE4  2EE8               	decfsz	wreg,f,c
  4213  001BE6  D7FE               	bra	u10847
  4214  001BE8  D000               	nop2	
  4215                           
  4216                           ;sort.c: 239: LATAbits.LATA4 = 0;
  4217  001BEA  9889               	bcf	3977,4,c	;volatile
  4218                           
  4219                           ;sort.c: 240: _delay((unsigned long)((15)*(32000000/4000000.0)));
  4220  001BEC  0E28               	movlw	40
  4221  001BEE                     u10857:
  4222  001BEE  2EE8               	decfsz	wreg,f,c
  4223  001BF0  D7FE               	bra	u10857
  4224                           
  4225                           ;sort.c: 241: break;
  4226  001BF2  D036               	goto	l8195
  4227  001BF4                     l849:
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;sort.c: 243: LATAbits.LATA4 = 1;
  4231  001BF4  8889               	bsf	3977,4,c	;volatile
  4232                           
  4233                           ; BSR set to: 0
  4234                           ;sort.c: 244: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4235  001BF6  0EF0               	movlw	240
  4236  001BF8                     u10867:
  4237  001BF8  2EE8               	decfsz	wreg,f,c
  4238  001BFA  D7FE               	bra	u10867
  4239                           
  4240                           ;sort.c: 245: LATAbits.LATA4 = 0;
  4241  001BFC  9889               	bcf	3977,4,c	;volatile
  4242                           
  4243                           ;sort.c: 246: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4244  001BFE  0E1A               	movlw	26
  4245  001C00                     u10877:
  4246  001C00  2EE8               	decfsz	wreg,f,c
  4247  001C02  D7FE               	bra	u10877
  4248  001C04                     L3:
  4249  001C04  D000               	nop2	
  4250                           
  4251                           ;sort.c: 247: break;
  4252  001C06  D02C               	goto	l8195
  4253  001C08                     l850:
  4254                           
  4255                           ; BSR set to: 0
  4256                           ;sort.c: 249: LATAbits.LATA4 = 1;
  4257  001C08  8889               	bsf	3977,4,c	;volatile
  4258                           
  4259                           ; BSR set to: 0
  4260                           ;sort.c: 250: _delay((unsigned long)((95)*(32000000/4000000.0)));
  4261  001C0A  0EFD               	movlw	253
  4262  001C0C                     u10887:
  4263  001C0C  2EE8               	decfsz	wreg,f,c
  4264  001C0E  D7FE               	bra	u10887
  4265  001C10  F000               	nop	
  4266                           
  4267                           ;sort.c: 251: LATAbits.LATA4 = 0;
  4268  001C12  9889               	bcf	3977,4,c	;volatile
  4269                           
  4270                           ;sort.c: 252: _delay((unsigned long)((50)*(32000000/4000000.0)));
  4271  001C14  0E85               	movlw	133
  4272  001C16                     u10897:
  4273  001C16  2EE8               	decfsz	wreg,f,c
  4274  001C18  D7FE               	bra	u10897
  4275  001C1A                     L4:
  4276  001C1A  F000               	nop	
  4277                           
  4278                           ;sort.c: 253: break;
  4279  001C1C  D021               	goto	l8195
  4280  001C1E                     l851:
  4281                           
  4282                           ; BSR set to: 0
  4283                           ;sort.c: 255: LATAbits.LATA4 = 1;
  4284  001C1E  8889               	bsf	3977,4,c	;volatile
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;sort.c: 256: _delay((unsigned long)((100)*(32000000/4000000.0)));
  4288  001C20  0EA0               	movlw	160
  4289  001C22                     u10907:
  4290  001C22  D000               	nop2	
  4291  001C24  2EE8               	decfsz	wreg,f,c
  4292  001C26  D7FD               	bra	u10907
  4293                           
  4294                           ;sort.c: 258: }
  4295                           
  4296                           ;sort.c: 257: break;
  4297  001C28  D01B               	goto	l8195
  4298  001C2A                     l8193:
  4299  001C2A  C0C2  F0B1         	movff	Loading@j,??_Loading
  4300  001C2E  C0C3  F0B2         	movff	Loading@j+1,??_Loading+1
  4301                           
  4302                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4303                           ; Switch size 1, requested type "space"
  4304                           ; Number of cases is 1, Range of values is 0 to 0
  4305                           ; switch strategies available:
  4306                           ; Name         Instructions Cycles
  4307                           ; simple_byte            4     3 (average)
  4308                           ;	Chosen strategy is simple_byte
  4309  001C32  0100               	movlb	0	; () banked
  4310  001C34  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4311  001C36  0A00               	xorlw	0	; case 0
  4312  001C38  A4D8               	btfss	status,2,c
  4313  001C3A  D7F1               	goto	l851
  4314                           
  4315                           ; BSR set to: 0
  4316                           ; Switch size 1, requested type "space"
  4317                           ; Number of cases is 5, Range of values is 0 to 4
  4318                           ; switch strategies available:
  4319                           ; Name         Instructions Cycles
  4320                           ; simple_byte           16     9 (average)
  4321                           ;	Chosen strategy is simple_byte
  4322  001C3C  0100               	movlb	0	; () banked
  4323  001C3E  51B1               	movf	??_Loading& (0+255),w,b
  4324  001C40  0A00               	xorlw	0	; case 0
  4325  001C42  B4D8               	btfsc	status,2,c
  4326  001C44  D7BA               	goto	l845
  4327  001C46  0A01               	xorlw	1	; case 1
  4328  001C48  B4D8               	btfsc	status,2,c
  4329  001C4A  D7C0               	goto	l847
  4330  001C4C  0A03               	xorlw	3	; case 2
  4331  001C4E  B4D8               	btfsc	status,2,c
  4332  001C50  D7C7               	goto	l848
  4333  001C52  0A01               	xorlw	1	; case 3
  4334  001C54  B4D8               	btfsc	status,2,c
  4335  001C56  D7CE               	goto	l849
  4336  001C58  0A07               	xorlw	7	; case 4
  4337  001C5A  B4D8               	btfsc	status,2,c
  4338  001C5C  D7D5               	goto	l850
  4339  001C5E  D7DF               	goto	l851
  4340  001C60                     l8195:
  4341  001C60  0100               	movlb	0	; () banked
  4342  001C62  4BBE               	infsnz	Loading@i_1139& (0+255),f,b
  4343  001C64  2BBF               	incf	(Loading@i_1139+1)& (0+255),f,b
  4344  001C66  D79D               	goto	l8165
  4345  001C68                     l843:
  4346                           
  4347                           ; BSR set to: 0
  4348                           ;sort.c: 259: }
  4349                           ;sort.c: 260: TMR2IE = 1;
  4350  001C68  829D               	bsf	3997,1,c	;volatile
  4351  001C6A                     l839:
  4352                           
  4353                           ;sort.c: 261: }
  4354                           ;sort.c: 262: }
  4355                           ;sort.c: 263: LATAbits.LATA4 = 0;
  4356  001C6A  9889               	bcf	3977,4,c	;volatile
  4357                           
  4358                           ;sort.c: 264: j++;
  4359  001C6C  0100               	movlb	0	; () banked
  4360  001C6E  4BC2               	infsnz	Loading@j& (0+255),f,b
  4361  001C70  2BC3               	incf	(Loading@j+1)& (0+255),f,b
  4362  001C72                     l8201:
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;sort.c: 265: }
  4366                           ;sort.c: 267: if(!IR_signal){
  4367  001C72  0100               	movlb	0	; () banked
  4368  001C74  51E0               	movf	_IR_signal& (0+255),w,b
  4369  001C76  0100               	movlb	0	; () banked
  4370  001C78  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4371  001C7A  A4D8               	btfss	status,2,c
  4372  001C7C  D01B               	goto	l8213
  4373                           
  4374                           ; BSR set to: 0
  4375                           ;sort.c: 268: _delay((unsigned long)((500)*(32000000/4000.0)));
  4376  001C7E  0E15               	movlw	21
  4377  001C80  0100               	movlb	0	; () banked
  4378  001C82  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4379  001C84  0E4B               	movlw	75
  4380  001C86  0100               	movlb	0	; () banked
  4381  001C88  6FB1               	movwf	??_Loading& (0+255),b
  4382  001C8A  0EBE               	movlw	190
  4383  001C8C                     u10917:
  4384  001C8C  2EE8               	decfsz	wreg,f,c
  4385  001C8E  D7FE               	bra	u10917
  4386  001C90  2FB1               	decfsz	??_Loading& (0+255),f,b
  4387  001C92  D7FC               	bra	u10917
  4388  001C94  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4389  001C96  D7FA               	bra	u10917
  4390  001C98  F000               	nop	
  4391                           
  4392                           ;sort.c: 269: readIR(0);
  4393  001C9A  0E00               	movlw	0
  4394  001C9C  0100               	movlb	0	; () banked
  4395  001C9E  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  4396  001CA0  0E00               	movlw	0
  4397  001CA2  6F82               	movwf	readIR@ana_port& (0+255),b
  4398  001CA4  ECF1  F027         	call	_readIR	;wreg free
  4399                           
  4400                           ;sort.c: 270: if(IR_signal==1){
  4401  001CA8  0100               	movlb	0	; () banked
  4402  001CAA  05E0               	decf	_IR_signal& (0+255),w,b
  4403  001CAC  0100               	movlb	0	; () banked
  4404  001CAE  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4405  001CB0  A4D8               	btfss	status,2,c
  4406  001CB2  D006               	goto	l855
  4407  001CB4                     l8213:
  4408                           
  4409                           ; BSR set to: 0
  4410  001CB4  0100               	movlb	0	; () banked
  4411  001CB6  05E0               	decf	_IR_signal& (0+255),w,b
  4412  001CB8  0100               	movlb	0	; () banked
  4413  001CBA  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4414  001CBC  B4D8               	btfsc	status,2,c
  4415  001CBE  D6C8               	goto	l8125
  4416  001CC0                     l855:
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;sort.c: 275: }
  4420                           ;sort.c: 276: }
  4421                           ;sort.c: 277: }
  4422                           ;sort.c: 278: LATBbits.LATB2 = 0;
  4423  001CC0  948A               	bcf	3978,2,c	;volatile
  4424  001CC2                     l8215:
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;sort.c: 279: }
  4428                           ;sort.c: 280: f_can_coming_to_ID = 1;
  4429  001CC2  0E00               	movlw	0
  4430  001CC4  0101               	movlb	1	; () banked
  4431  001CC6  6F34               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4432  001CC8  0E01               	movlw	1
  4433  001CCA  6F33               	movwf	_f_can_coming_to_ID& (0+255),b
  4434                           
  4435                           ; BSR set to: 1
  4436                           
  4437                           ; BSR set to: 1
  4438  001CCC  0012               	return	
  4439  001CCE                     __end_of_Loading:
  4440                           	opt stack 0
  4441                           tblptru	equ	0xFF8
  4442                           tblptrh	equ	0xFF7
  4443                           tblptrl	equ	0xFF6
  4444                           tablat	equ	0xFF5
  4445                           prodh	equ	0xFF4
  4446                           prodl	equ	0xFF3
  4447                           postinc0	equ	0xFEE
  4448                           wreg	equ	0xFE8
  4449                           postdec1	equ	0xFE5
  4450                           fsr1l	equ	0xFE1
  4451                           status	equ	0xFD8
  4452                           
  4453 ;; *************** function _initSortTimer *****************
  4454 ;; Defined at:
  4455 ;;		line 478 in file "sort.c"
  4456 ;; Parameters:    Size  Location     Type
  4457 ;;		None
  4458 ;; Auto vars:     Size  Location     Type
  4459 ;;  i               2    8[BANK0 ] int 
  4460 ;; Return value:  Size  Location     Type
  4461 ;;                  1    wreg      void 
  4462 ;; Registers used:
  4463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4464 ;; Tracked objects:
  4465 ;;		On entry : 0/0
  4466 ;;		On exit  : 0/0
  4467 ;;		Unchanged: 0/0
  4468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4470 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4471 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4472 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4473 ;;Total ram usage:        5 bytes
  4474 ;; Hardware stack levels used:    1
  4475 ;; Hardware stack levels required when called:   10
  4476 ;; This function calls:
  4477 ;;		_getRTC
  4478 ;; This function is called by:
  4479 ;;		_Loading
  4480 ;; This function uses a non-reentrant model
  4481 ;;
  4482                           
  4483                           	psect	text3
  4484  004E96                     __ptext3:
  4485                           	opt stack 0
  4486  004E96                     _initSortTimer:
  4487                           	opt stack 18
  4488                           
  4489                           ;sort.c: 480: getRTC();
  4490                           
  4491                           ;incstack = 0
  4492  004E96  EC83  F028         	call	_getRTC	;wreg free
  4493                           
  4494                           ;sort.c: 481: for(int i = 0; i < 7; i++){
  4495  004E9A  0E00               	movlw	0
  4496  004E9C  0100               	movlb	0	; () banked
  4497  004E9E  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4498  004EA0  0E00               	movlw	0
  4499  004EA2  6F88               	movwf	initSortTimer@i& (0+255),b
  4500  004EA4                     l7511:
  4501                           
  4502                           ; BSR set to: 0
  4503  004EA4  0100               	movlb	0	; () banked
  4504  004EA6  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4505  004EA8  D008               	goto	l7515
  4506  004EAA  0100               	movlb	0	; () banked
  4507  004EAC  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4508  004EAE  E140               	bnz	l7521
  4509  004EB0  0E07               	movlw	7
  4510  004EB2  0100               	movlb	0	; () banked
  4511  004EB4  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4512  004EB6  B0D8               	btfsc	status,0,c
  4513  004EB8  D03B               	goto	l7521
  4514  004EBA                     l7515:
  4515                           
  4516                           ; BSR set to: 0
  4517                           ;sort.c: 482: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4518  004EBA  0E1C               	movlw	low _time
  4519  004EBC  0100               	movlb	0	; () banked
  4520  004EBE  2588               	addwf	initSortTimer@i& (0+255),w,b
  4521  004EC0  6ED9               	movwf	fsr2l,c
  4522  004EC2  0E01               	movlw	high _time
  4523  004EC4  0100               	movlb	0	; () banked
  4524  004EC6  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4525  004EC8  6EDA               	movwf	fsr2h,c
  4526  004ECA  50DF               	movf	indf2,w,c
  4527  004ECC  0100               	movlb	0	; () banked
  4528  004ECE  6F85               	movwf	??_initSortTimer& (0+255),b
  4529  004ED0  0100               	movlb	0	; () banked
  4530  004ED2  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4531  004ED4  0E0F               	movlw	15
  4532  004ED6  1785               	andwf	??_initSortTimer& (0+255),f,b
  4533  004ED8  0E0F               	movlw	15
  4534  004EDA  0100               	movlb	0	; () banked
  4535  004EDC  1785               	andwf	??_initSortTimer& (0+255),f,b
  4536  004EDE  0100               	movlb	0	; () banked
  4537  004EE0  5185               	movf	??_initSortTimer& (0+255),w,b
  4538  004EE2  0D0A               	mullw	10
  4539  004EE4  0E1C               	movlw	low _time
  4540  004EE6  0100               	movlb	0	; () banked
  4541  004EE8  2588               	addwf	initSortTimer@i& (0+255),w,b
  4542  004EEA  6ED9               	movwf	fsr2l,c
  4543  004EEC  0E01               	movlw	high _time
  4544  004EEE  0100               	movlb	0	; () banked
  4545  004EF0  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4546  004EF2  6EDA               	movwf	fsr2h,c
  4547  004EF4  50DF               	movf	indf2,w,c
  4548  004EF6  0B0F               	andlw	15
  4549  004EF8  0100               	movlb	0	; () banked
  4550  004EFA  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4551  004EFC  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4552  004EFE  50F3               	movf	prodl,w,c
  4553  004F00  0100               	movlb	0	; () banked
  4554  004F02  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4555  004F04  50F4               	movf	prodh,w,c
  4556  004F06  0100               	movlb	0	; () banked
  4557  004F08  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4558  004F0A  90D8               	bcf	status,0,c
  4559  004F0C  0100               	movlb	0	; () banked
  4560  004F0E  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4561  004F10  6ED9               	movwf	fsr2l,c
  4562  004F12  0100               	movlb	0	; () banked
  4563  004F14  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4564  004F16  6EDA               	movwf	fsr2h,c
  4565  004F18  0E0E               	movlw	low _startTime
  4566  004F1A  26D9               	addwf	fsr2l,f,c
  4567  004F1C  0E01               	movlw	high _startTime
  4568  004F1E  22DA               	addwfc	fsr2h,f,c
  4569  004F20  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4570  004F24  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4571                           
  4572                           ; BSR set to: 0
  4573  004F28  0100               	movlb	0	; () banked
  4574  004F2A  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4575  004F2C  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4576  004F2E  D7BA               	goto	l7511
  4577  004F30                     l7521:
  4578                           
  4579                           ; BSR set to: 0
  4580                           ;sort.c: 483: }
  4581                           ;sort.c: 485: T0CON = 0b00010111;
  4582  004F30  0E17               	movlw	23
  4583  004F32  6ED5               	movwf	4053,c	;volatile
  4584                           
  4585                           ;sort.c: 494: TMR0H = 0b10000101;
  4586  004F34  0E85               	movlw	133
  4587  004F36  6ED7               	movwf	4055,c	;volatile
  4588                           
  4589                           ;sort.c: 495: TMR0L = 0b11101110;
  4590  004F38  0EEE               	movlw	238
  4591  004F3A  6ED6               	movwf	4054,c	;volatile
  4592                           
  4593                           ; BSR set to: 0
  4594                           ;sort.c: 496: TMR0ON = 1;
  4595  004F3C  8ED5               	bsf	4053,7,c	;volatile
  4596                           
  4597                           ; BSR set to: 0
  4598  004F3E  0012               	return		;funcret
  4599  004F40                     __end_of_initSortTimer:
  4600                           	opt stack 0
  4601                           tblptru	equ	0xFF8
  4602                           tblptrh	equ	0xFF7
  4603                           tblptrl	equ	0xFF6
  4604                           tablat	equ	0xFF5
  4605                           prodh	equ	0xFF4
  4606                           prodl	equ	0xFF3
  4607                           postinc0	equ	0xFEE
  4608                           wreg	equ	0xFE8
  4609                           postdec1	equ	0xFE5
  4610                           fsr1l	equ	0xFE1
  4611                           indf2	equ	0xFDF
  4612                           postinc2	equ	0xFDE
  4613                           postdec2	equ	0xFDD
  4614                           fsr2h	equ	0xFDA
  4615                           fsr2l	equ	0xFD9
  4616                           status	equ	0xFD8
  4617                           
  4618 ;; *************** function _initGlobalVars *****************
  4619 ;; Defined at:
  4620 ;;		line 442 in file "sort.c"
  4621 ;; Parameters:    Size  Location     Type
  4622 ;;		None
  4623 ;; Auto vars:     Size  Location     Type
  4624 ;;		None
  4625 ;; Return value:  Size  Location     Type
  4626 ;;                  1    wreg      void 
  4627 ;; Registers used:
  4628 ;;		wreg, status,2
  4629 ;; Tracked objects:
  4630 ;;		On entry : 0/0
  4631 ;;		On exit  : 0/0
  4632 ;;		Unchanged: 0/0
  4633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4637 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4638 ;;Total ram usage:        0 bytes
  4639 ;; Hardware stack levels used:    1
  4640 ;; Hardware stack levels required when called:    7
  4641 ;; This function calls:
  4642 ;;		Nothing
  4643 ;; This function is called by:
  4644 ;;		_Loading
  4645 ;; This function uses a non-reentrant model
  4646 ;;
  4647                           
  4648                           	psect	text4
  4649  004AB8                     __ptext4:
  4650                           	opt stack 0
  4651  004AB8                     _initGlobalVars:
  4652                           	opt stack 21
  4653                           
  4654                           ;sort.c: 444: first = 0;
  4655                           
  4656                           ; BSR set to: 0
  4657                           ;incstack = 0
  4658  004AB8  0E00               	movlw	0
  4659  004ABA  0101               	movlb	1	; () banked
  4660  004ABC  6F3C               	movwf	(_first+1)& (0+255),b
  4661  004ABE  0E00               	movlw	0
  4662  004AC0  6F3B               	movwf	_first& (0+255),b
  4663                           
  4664                           ;sort.c: 447: f_loadingNewCan = 0;
  4665  004AC2  0E00               	movlw	0
  4666  004AC4  0100               	movlb	0	; () banked
  4667  004AC6  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4668  004AC8  0E00               	movlw	0
  4669  004ACA  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  4670                           
  4671                           ;sort.c: 448: f_lastCan = 0;
  4672  004ACC  0E00               	movlw	0
  4673  004ACE  0100               	movlb	0	; () banked
  4674  004AD0  6FEB               	movwf	(_f_lastCan+1)& (0+255),b
  4675  004AD2  0E00               	movlw	0
  4676  004AD4  6FEA               	movwf	_f_lastCan& (0+255),b
  4677                           
  4678                           ;sort.c: 449: f_ID_receive = 1;
  4679  004AD6  0E00               	movlw	0
  4680  004AD8  0101               	movlb	1	; () banked
  4681  004ADA  6F32               	movwf	(_f_ID_receive+1)& (0+255),b
  4682  004ADC  0E01               	movlw	1
  4683  004ADE  6F31               	movwf	_f_ID_receive& (0+255),b
  4684                           
  4685                           ;sort.c: 450: f_can_coming_to_ID = 0;
  4686  004AE0  0E00               	movlw	0
  4687  004AE2  0101               	movlb	1	; () banked
  4688  004AE4  6F34               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4689  004AE6  0E00               	movlw	0
  4690  004AE8  6F33               	movwf	_f_can_coming_to_ID& (0+255),b
  4691                           
  4692                           ;sort.c: 451: f_can_coming_to_distribution = 0;
  4693  004AEA  0E00               	movlw	0
  4694  004AEC  0101               	movlb	1	; () banked
  4695  004AEE  6F36               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4696  004AF0  0E00               	movlw	0
  4697  004AF2  6F35               	movwf	_f_can_coming_to_distribution& (0+255),b
  4698                           
  4699                           ;sort.c: 452: f_can_distributed = 1;
  4700  004AF4  0E00               	movlw	0
  4701  004AF6  0101               	movlb	1	; () banked
  4702  004AF8  6F38               	movwf	(_f_can_distributed+1)& (0+255),b
  4703  004AFA  0E01               	movlw	1
  4704  004AFC  6F37               	movwf	_f_can_distributed& (0+255),b
  4705                           
  4706                           ;sort.c: 453: f_most_recent_sort_time = 0;
  4707  004AFE  0E00               	movlw	0
  4708  004B00  0101               	movlb	1	; () banked
  4709  004B02  6F3A               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4710  004B04  0E00               	movlw	0
  4711  004B06  6F39               	movwf	_f_most_recent_sort_time& (0+255),b
  4712                           
  4713                           ;sort.c: 456: count_total = 0;
  4714  004B08  0E00               	movlw	0
  4715  004B0A  0100               	movlb	0	; () banked
  4716  004B0C  6FFF               	movwf	(_count_total+1)& (0+255),b
  4717  004B0E  0E00               	movlw	0
  4718  004B10  6FFE               	movwf	_count_total& (0+255),b
  4719                           
  4720                           ;sort.c: 457: count_pop_no_tab = 0;
  4721  004B12  0E00               	movlw	0
  4722  004B14  0101               	movlb	1	; () banked
  4723  004B16  6F2A               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4724  004B18  0E00               	movlw	0
  4725  004B1A  6F29               	movwf	_count_pop_no_tab& (0+255),b
  4726                           
  4727                           ;sort.c: 458: count_pop_w_tab = 0;
  4728  004B1C  0E00               	movlw	0
  4729  004B1E  0101               	movlb	1	; () banked
  4730  004B20  6F2C               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4731  004B22  0E00               	movlw	0
  4732  004B24  6F2B               	movwf	_count_pop_w_tab& (0+255),b
  4733                           
  4734                           ;sort.c: 459: count_can_w_lab = 0;
  4735  004B26  0E00               	movlw	0
  4736  004B28  0101               	movlb	1	; () banked
  4737  004B2A  6F28               	movwf	(_count_can_w_lab+1)& (0+255),b
  4738  004B2C  0E00               	movlw	0
  4739  004B2E  6F27               	movwf	_count_can_w_lab& (0+255),b
  4740                           
  4741                           ;sort.c: 460: count_can_no_lab = 0;
  4742  004B30  0E00               	movlw	0
  4743  004B32  0101               	movlb	1	; () banked
  4744  004B34  6F26               	movwf	(_count_can_no_lab+1)& (0+255),b
  4745  004B36  0E00               	movlw	0
  4746  004B38  6F25               	movwf	_count_can_no_lab& (0+255),b
  4747                           
  4748                           ;sort.c: 463: most_recent_sort_time = 999;
  4749  004B3A  0E03               	movlw	3
  4750  004B3C  0101               	movlb	1	; () banked
  4751  004B3E  6F48               	movwf	(_most_recent_sort_time+1)& (0+255),b
  4752  004B40  0EE7               	movlw	231
  4753  004B42  6F47               	movwf	_most_recent_sort_time& (0+255),b
  4754                           
  4755                           ;sort.c: 466: motor_toggle_count = 0;
  4756  004B44  0E00               	movlw	0
  4757  004B46  0101               	movlb	1	; () banked
  4758  004B48  6F4A               	movwf	(_motor_toggle_count+1)& (0+255),b
  4759  004B4A  0E00               	movlw	0
  4760  004B4C  6F49               	movwf	_motor_toggle_count& (0+255),b
  4761                           
  4762                           ;sort.c: 467: agitator_toggle_count = 0;
  4763  004B4E  0E00               	movlw	0
  4764  004B50  0101               	movlb	1	; () banked
  4765  004B52  6F24               	movwf	(_agitator_toggle_count+1)& (0+255),b
  4766  004B54  0E00               	movlw	0
  4767  004B56  6F23               	movwf	_agitator_toggle_count& (0+255),b
  4768                           
  4769                           ;sort.c: 470: servo_timer_counter = 0;
  4770  004B58  0E00               	movlw	0
  4771  004B5A  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
  4772  004B5C  0E00               	movlw	0
  4773  004B5E  6E6D               	movwf	_servo_timer_counter,c	;volatile
  4774                           
  4775                           ;sort.c: 471: servo_timer_target = 9999;
  4776  004B60  0E27               	movlw	39
  4777  004B62  6E70               	movwf	_servo_timer_target+1,c	;volatile
  4778  004B64  0E0F               	movlw	15
  4779  004B66  6E6F               	movwf	_servo_timer_target,c	;volatile
  4780                           
  4781                           ;sort.c: 472: timer2_counter = 0;
  4782  004B68  0E00               	movlw	0
  4783  004B6A  6E74               	movwf	_timer2_counter+1,c	;volatile
  4784  004B6C  0E00               	movlw	0
  4785  004B6E  6E73               	movwf	_timer2_counter,c	;volatile
  4786                           
  4787                           ;sort.c: 473: f_arm_position = 0;
  4788  004B70  0E00               	movlw	0
  4789  004B72  0100               	movlb	0	; () banked
  4790  004B74  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4791  004B76  0E00               	movlw	0
  4792  004B78  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  4793                           
  4794                           ; BSR set to: 0
  4795                           ;sort.c: 474: pan_servo_state = -1;
  4796  004B7A  686B               	setf	_pan_servo_state,c	;volatile
  4797  004B7C  686C               	setf	_pan_servo_state+1,c	;volatile
  4798                           
  4799                           ; BSR set to: 0
  4800                           ;sort.c: 475: tilt_servo_state = -1;
  4801  004B7E  6871               	setf	_tilt_servo_state,c	;volatile
  4802  004B80  6872               	setf	_tilt_servo_state+1,c	;volatile
  4803                           
  4804                           ;sort.c: 476: f_panning_to_bin = 0;
  4805  004B82  0E00               	movlw	0
  4806  004B84  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
  4807  004B86  0E00               	movlw	0
  4808  004B88  6E69               	movwf	_f_panning_to_bin,c	;volatile
  4809                           
  4810                           ; BSR set to: 0
  4811  004B8A  0012               	return		;funcret
  4812  004B8C                     __end_of_initGlobalVars:
  4813                           	opt stack 0
  4814                           tblptru	equ	0xFF8
  4815                           tblptrh	equ	0xFF7
  4816                           tblptrl	equ	0xFF6
  4817                           tablat	equ	0xFF5
  4818                           prodh	equ	0xFF4
  4819                           prodl	equ	0xFF3
  4820                           postinc0	equ	0xFEE
  4821                           wreg	equ	0xFE8
  4822                           postdec1	equ	0xFE5
  4823                           fsr1l	equ	0xFE1
  4824                           indf2	equ	0xFDF
  4825                           postinc2	equ	0xFDE
  4826                           postdec2	equ	0xFDD
  4827                           fsr2h	equ	0xFDA
  4828                           fsr2l	equ	0xFD9
  4829                           status	equ	0xFD8
  4830                           
  4831 ;; *************** function _getMAG *****************
  4832 ;; Defined at:
  4833 ;;		line 597 in file "sort.c"
  4834 ;; Parameters:    Size  Location     Type
  4835 ;;		None
  4836 ;; Auto vars:     Size  Location     Type
  4837 ;;		None
  4838 ;; Return value:  Size  Location     Type
  4839 ;;                  1    wreg      void 
  4840 ;; Registers used:
  4841 ;;		wreg, status,2, status,0, cstack
  4842 ;; Tracked objects:
  4843 ;;		On entry : 0/0
  4844 ;;		On exit  : 0/0
  4845 ;;		Unchanged: 0/0
  4846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4849 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4850 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4851 ;;Total ram usage:        2 bytes
  4852 ;; Hardware stack levels used:    1
  4853 ;; Hardware stack levels required when called:    9
  4854 ;; This function calls:
  4855 ;;		_readMAG
  4856 ;; This function is called by:
  4857 ;;		_Loading
  4858 ;; This function uses a non-reentrant model
  4859 ;;
  4860                           
  4861                           	psect	text5
  4862  005AAC                     __ptext5:
  4863                           	opt stack 0
  4864  005AAC                     _getMAG:
  4865                           	opt stack 19
  4866                           
  4867                           ;sort.c: 598: readMAG();
  4868                           
  4869                           ; BSR set to: 0
  4870                           ;incstack = 0
  4871  005AAC  EC3F  F02C         	call	_readMAG	;wreg free
  4872                           
  4873                           ;sort.c: 600: if(MAG_signal==1){
  4874  005AB0  0100               	movlb	0	; () banked
  4875  005AB2  05E2               	decf	_MAG_signal& (0+255),w,b
  4876  005AB4  0100               	movlb	0	; () banked
  4877  005AB6  11E3               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4878  005AB8  A4D8               	btfss	status,2,c
  4879  005ABA  0012               	return	
  4880                           
  4881                           ; BSR set to: 0
  4882                           ;sort.c: 601: _delay((unsigned long)((500)*(32000000/4000.0)));
  4883  005ABC  0E15               	movlw	21
  4884  005ABE  0100               	movlb	0	; () banked
  4885  005AC0  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4886  005AC2  0E4B               	movlw	75
  4887  005AC4  0100               	movlb	0	; () banked
  4888  005AC6  6F86               	movwf	??_getMAG& (0+255),b
  4889  005AC8  0EBE               	movlw	190
  4890  005ACA                     u10927:
  4891  005ACA  2EE8               	decfsz	wreg,f,c
  4892  005ACC  D7FE               	bra	u10927
  4893  005ACE  2F86               	decfsz	??_getMAG& (0+255),f,b
  4894  005AD0  D7FC               	bra	u10927
  4895  005AD2  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4896  005AD4  D7FA               	bra	u10927
  4897  005AD6  F000               	nop	
  4898                           
  4899                           ;sort.c: 602: readMAG();
  4900  005AD8  EC3F  F02C         	call	_readMAG	;wreg free
  4901  005ADC  0012               	return	
  4902  005ADE                     __end_of_getMAG:
  4903                           	opt stack 0
  4904                           tblptru	equ	0xFF8
  4905                           tblptrh	equ	0xFF7
  4906                           tblptrl	equ	0xFF6
  4907                           tablat	equ	0xFF5
  4908                           prodh	equ	0xFF4
  4909                           prodl	equ	0xFF3
  4910                           postinc0	equ	0xFEE
  4911                           wreg	equ	0xFE8
  4912                           postdec1	equ	0xFE5
  4913                           fsr1l	equ	0xFE1
  4914                           indf2	equ	0xFDF
  4915                           postinc2	equ	0xFDE
  4916                           postdec2	equ	0xFDD
  4917                           fsr2h	equ	0xFDA
  4918                           fsr2l	equ	0xFD9
  4919                           status	equ	0xFD8
  4920                           
  4921 ;; *************** function _getIR *****************
  4922 ;; Defined at:
  4923 ;;		line 581 in file "sort.c"
  4924 ;; Parameters:    Size  Location     Type
  4925 ;;  port            2    8[BANK0 ] int 
  4926 ;; Auto vars:     Size  Location     Type
  4927 ;;  i               2   11[BANK0 ] int 
  4928 ;; Return value:  Size  Location     Type
  4929 ;;                  1    wreg      void 
  4930 ;; Registers used:
  4931 ;;		wreg, status,2, status,0, cstack
  4932 ;; Tracked objects:
  4933 ;;		On entry : 0/0
  4934 ;;		On exit  : 0/0
  4935 ;;		Unchanged: 0/0
  4936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4937 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4938 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4939 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4940 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4941 ;;Total ram usage:        5 bytes
  4942 ;; Hardware stack levels used:    1
  4943 ;; Hardware stack levels required when called:    9
  4944 ;; This function calls:
  4945 ;;		_readIR
  4946 ;; This function is called by:
  4947 ;;		_Loading
  4948 ;; This function uses a non-reentrant model
  4949 ;;
  4950                           
  4951                           	psect	text6
  4952  005210                     __ptext6:
  4953                           	opt stack 0
  4954  005210                     _getIR:
  4955                           	opt stack 19
  4956                           
  4957                           ;sort.c: 582: readIR(port);
  4958                           
  4959                           ;incstack = 0
  4960  005210  C088  F082         	movff	getIR@port,readIR@ana_port
  4961  005214  C089  F083         	movff	getIR@port+1,readIR@ana_port+1
  4962  005218  ECF1  F027         	call	_readIR	;wreg free
  4963                           
  4964                           ;sort.c: 583: for(int i = 0; i < 150; i++){
  4965  00521C  0E00               	movlw	0
  4966  00521E  0100               	movlb	0	; () banked
  4967  005220  6F8C               	movwf	(getIR@i+1)& (0+255),b
  4968  005222  0E00               	movlw	0
  4969  005224  6F8B               	movwf	getIR@i& (0+255),b
  4970  005226                     l7611:
  4971                           
  4972                           ; BSR set to: 0
  4973  005226  0100               	movlb	0	; () banked
  4974  005228  BF8C               	btfsc	(getIR@i+1)& (0+255),7,b
  4975  00522A  D008               	goto	l7615
  4976  00522C  0100               	movlb	0	; () banked
  4977  00522E  518C               	movf	(getIR@i+1)& (0+255),w,b
  4978  005230  E11E               	bnz	l7627
  4979  005232  0E96               	movlw	150
  4980  005234  0100               	movlb	0	; () banked
  4981  005236  5D8B               	subwf	getIR@i& (0+255),w,b
  4982  005238  B0D8               	btfsc	status,0,c
  4983  00523A  D019               	goto	l7627
  4984  00523C                     l7615:
  4985                           
  4986                           ; BSR set to: 0
  4987                           ;sort.c: 584: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4988  00523C  0E06               	movlw	6
  4989  00523E  0100               	movlb	0	; () banked
  4990  005240  6F8A               	movwf	??_getIR& (0+255),b
  4991  005242  0E30               	movlw	48
  4992  005244                     u10937:
  4993  005244  2EE8               	decfsz	wreg,f,c
  4994  005246  D7FE               	bra	u10937
  4995  005248  2F8A               	decfsz	??_getIR& (0+255),f,b
  4996  00524A  D7FC               	bra	u10937
  4997  00524C  F000               	nop	
  4998                           
  4999                           ;sort.c: 585: readIR(port);
  5000  00524E  C088  F082         	movff	getIR@port,readIR@ana_port
  5001  005252  C089  F083         	movff	getIR@port+1,readIR@ana_port+1
  5002  005256  ECF1  F027         	call	_readIR	;wreg free
  5003                           
  5004                           ;sort.c: 586: if(!IR_signal){
  5005  00525A  0100               	movlb	0	; () banked
  5006  00525C  51E0               	movf	_IR_signal& (0+255),w,b
  5007  00525E  0100               	movlb	0	; () banked
  5008  005260  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  5009  005262  B4D8               	btfsc	status,2,c
  5010  005264  D004               	goto	l7627
  5011                           
  5012                           ; BSR set to: 0
  5013                           
  5014                           ; BSR set to: 0
  5015                           
  5016                           ; BSR set to: 0
  5017                           ;sort.c: 587: break;
  5018  005266  0100               	movlb	0	; () banked
  5019  005268  4B8B               	infsnz	getIR@i& (0+255),f,b
  5020  00526A  2B8C               	incf	(getIR@i+1)& (0+255),f,b
  5021  00526C  D7DC               	goto	l7611
  5022  00526E                     l7627:
  5023                           
  5024                           ; BSR set to: 0
  5025                           ;sort.c: 588: }
  5026                           ;sort.c: 589: }
  5027                           ;sort.c: 590: if(IR_signal==1){
  5028  00526E  0100               	movlb	0	; () banked
  5029  005270  05E0               	decf	_IR_signal& (0+255),w,b
  5030  005272  0100               	movlb	0	; () banked
  5031  005274  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  5032  005276  A4D8               	btfss	status,2,c
  5033  005278  D006               	goto	l7631
  5034                           
  5035                           ; BSR set to: 0
  5036                           ;sort.c: 591: f_loadingNewCan = 1;
  5037  00527A  0E00               	movlw	0
  5038  00527C  0100               	movlb	0	; () banked
  5039  00527E  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5040  005280  0E01               	movlw	1
  5041  005282  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  5042                           
  5043                           ;sort.c: 592: }
  5044  005284  0012               	return	
  5045  005286                     l7631:
  5046                           
  5047                           ; BSR set to: 0
  5048                           ;sort.c: 593: else{
  5049                           ;sort.c: 594: f_loadingNewCan = 0;
  5050  005286  0E00               	movlw	0
  5051  005288  0100               	movlb	0	; () banked
  5052  00528A  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5053  00528C  0E00               	movlw	0
  5054  00528E  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  5055  005290  0012               	return	
  5056  005292                     __end_of_getIR:
  5057                           	opt stack 0
  5058                           tblptru	equ	0xFF8
  5059                           tblptrh	equ	0xFF7
  5060                           tblptrl	equ	0xFF6
  5061                           tablat	equ	0xFF5
  5062                           prodh	equ	0xFF4
  5063                           prodl	equ	0xFF3
  5064                           postinc0	equ	0xFEE
  5065                           wreg	equ	0xFE8
  5066                           postdec1	equ	0xFE5
  5067                           fsr1l	equ	0xFE1
  5068                           indf2	equ	0xFDF
  5069                           postinc2	equ	0xFDE
  5070                           postdec2	equ	0xFDD
  5071                           fsr2h	equ	0xFDA
  5072                           fsr2l	equ	0xFD9
  5073                           status	equ	0xFD8
  5074                           
  5075 ;; *************** function _ID *****************
  5076 ;; Defined at:
  5077 ;;		line 284 in file "sort.c"
  5078 ;; Parameters:    Size  Location     Type
  5079 ;;		None
  5080 ;; Auto vars:     Size  Location     Type
  5081 ;;  i               2   37[BANK0 ] int 
  5082 ;;  i               2   50[BANK0 ] int 
  5083 ;;  j               2   52[BANK0 ] int 
  5084 ;;  i               2   35[BANK0 ] int 
  5085 ;;  i               2   33[BANK0 ] int 
  5086 ;;  i               2   39[BANK0 ] int 
  5087 ;;  res             4   46[BANK0 ] int [2]
  5088 ;;  time            1   29[BANK0 ] const unsigned char 
  5089 ;;  res2            2   44[BANK0 ] int 
  5090 ;;  res1            2   42[BANK0 ] int 
  5091 ;;  time            1   41[BANK0 ] const unsigned char 
  5092 ;;  n               2   54[BANK0 ] const int 
  5093 ;; Return value:  Size  Location     Type
  5094 ;;                  1    wreg      void 
  5095 ;; Registers used:
  5096 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5097 ;; Tracked objects:
  5098 ;;		On entry : 0/0
  5099 ;;		On exit  : 0/0
  5100 ;;		Unchanged: 0/0
  5101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5103 ;;      Locals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5104 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5105 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5106 ;;Total ram usage:       29 bytes
  5107 ;; Hardware stack levels used:    1
  5108 ;; Hardware stack levels required when called:    9
  5109 ;; This function calls:
  5110 ;;		___awdiv
  5111 ;;		___awtoft
  5112 ;;		___ftge
  5113 ;;		_delay_ms
  5114 ;;		_readCOND
  5115 ;;		_readIR
  5116 ;; This function is called by:
  5117 ;;		_sort
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121                           	psect	text7
  5122  001192                     __ptext7:
  5123                           	opt stack 0
  5124  001192                     _ID:
  5125                           	opt stack 20
  5126                           
  5127                           ;sort.c: 285: if(f_can_coming_to_ID){
  5128                           
  5129                           ; BSR set to: 0
  5130                           ;incstack = 0
  5131  001192  0101               	movlb	1	; () banked
  5132  001194  5133               	movf	_f_can_coming_to_ID& (0+255),w,b
  5133  001196  0101               	movlb	1	; () banked
  5134  001198  1134               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  5135  00119A  B4D8               	btfsc	status,2,c
  5136  00119C  0012               	return	
  5137                           
  5138                           ; BSR set to: 1
  5139                           ;sort.c: 287: _delay((unsigned long)((1000)*(32000000/4000.0)));
  5140  00119E  0E29               	movlw	41
  5141  0011A0  0100               	movlb	0	; () banked
  5142  0011A2  6F9C               	movwf	(??_ID+1)& (0+255),b
  5143  0011A4  0E96               	movlw	150
  5144  0011A6  0100               	movlb	0	; () banked
  5145  0011A8  6F9B               	movwf	??_ID& (0+255),b
  5146  0011AA  0E7F               	movlw	127
  5147  0011AC                     u10947:
  5148  0011AC  2EE8               	decfsz	wreg,f,c
  5149  0011AE  D7FE               	bra	u10947
  5150  0011B0  2F9B               	decfsz	??_ID& (0+255),f,b
  5151  0011B2  D7FC               	bra	u10947
  5152  0011B4  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5153  0011B6  D7FA               	bra	u10947
  5154                           
  5155                           ;sort.c: 289: f_arm_position = 0;
  5156  0011B8  0E00               	movlw	0
  5157  0011BA  0100               	movlb	0	; () banked
  5158  0011BC  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  5159  0011BE  0E00               	movlw	0
  5160  0011C0  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  5161                           
  5162                           ; BSR set to: 0
  5163                           ;sort.c: 291: if(sensor_outputs[0]){
  5164  0011C2  0100               	movlb	0	; () banked
  5165  0011C4  51DA               	movf	_sensor_outputs& (0+255),w,b
  5166  0011C6  0100               	movlb	0	; () banked
  5167  0011C8  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5168  0011CA  B4D8               	btfsc	status,2,c
  5169  0011CC  D036               	goto	l8249
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;sort.c: 293: readIR(3);
  5173  0011CE  0E00               	movlw	0
  5174  0011D0  0100               	movlb	0	; () banked
  5175  0011D2  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  5176  0011D4  0E03               	movlw	3
  5177  0011D6  6F82               	movwf	readIR@ana_port& (0+255),b
  5178  0011D8  ECF1  F027         	call	_readIR	;wreg free
  5179                           
  5180                           ;sort.c: 294: sensor_outputs[1] = IR_signal;
  5181  0011DC  C0E0  F0DC         	movff	_IR_signal,_sensor_outputs+2
  5182  0011E0  C0E1  F0DD         	movff	_IR_signal+1,_sensor_outputs+3
  5183                           
  5184                           ;sort.c: 295: _delay((unsigned long)((200)*(32000000/4000.0)));
  5185  0011E4  0E09               	movlw	9
  5186  0011E6  0100               	movlb	0	; () banked
  5187  0011E8  6F9C               	movwf	(??_ID+1)& (0+255),b
  5188  0011EA  0E1E               	movlw	30
  5189  0011EC  0100               	movlb	0	; () banked
  5190  0011EE  6F9B               	movwf	??_ID& (0+255),b
  5191  0011F0  0EE4               	movlw	228
  5192  0011F2                     u10957:
  5193  0011F2  2EE8               	decfsz	wreg,f,c
  5194  0011F4  D7FE               	bra	u10957
  5195  0011F6  2F9B               	decfsz	??_ID& (0+255),f,b
  5196  0011F8  D7FC               	bra	u10957
  5197  0011FA  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5198  0011FC  D7FA               	bra	u10957
  5199  0011FE  F000               	nop	
  5200                           
  5201                           ;sort.c: 296: readIR(3);
  5202  001200  0E00               	movlw	0
  5203  001202  0100               	movlb	0	; () banked
  5204  001204  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  5205  001206  0E03               	movlw	3
  5206  001208  6F82               	movwf	readIR@ana_port& (0+255),b
  5207  00120A  ECF1  F027         	call	_readIR	;wreg free
  5208                           
  5209                           ;sort.c: 297: sensor_outputs[1] = sensor_outputs[1] || IR_signal;
  5210  00120E  0E01               	movlw	1
  5211  001210  0100               	movlb	0	; () banked
  5212  001212  6F9E               	movwf	_ID$1141& (0+255),b
  5213                           
  5214                           ; BSR set to: 0
  5215  001214  0100               	movlb	0	; () banked
  5216  001216  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5217  001218  0100               	movlb	0	; () banked
  5218  00121A  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5219  00121C  A4D8               	btfss	status,2,c
  5220  00121E  D009               	goto	l8247
  5221                           
  5222                           ; BSR set to: 0
  5223  001220  0100               	movlb	0	; () banked
  5224  001222  51E0               	movf	_IR_signal& (0+255),w,b
  5225  001224  0100               	movlb	0	; () banked
  5226  001226  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  5227  001228  A4D8               	btfss	status,2,c
  5228  00122A  D003               	goto	l8247
  5229                           
  5230                           ; BSR set to: 0
  5231  00122C  0E00               	movlw	0
  5232  00122E  0100               	movlb	0	; () banked
  5233  001230  6F9E               	movwf	_ID$1141& (0+255),b
  5234  001232                     l8247:
  5235                           
  5236                           ; BSR set to: 0
  5237  001232  C09E  F0DC         	movff	_ID$1141,_sensor_outputs+2
  5238  001236  0100               	movlb	0	; () banked
  5239  001238  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5240  00123A                     l8249:
  5241                           
  5242                           ; BSR set to: 0
  5243                           ;sort.c: 298: }
  5244                           ;sort.c: 300: LATCbits.LATC7 = 1;
  5245  00123A  8E8B               	bsf	3979,7,c	;volatile
  5246                           
  5247                           ;sort.c: 303: const int n = 10;
  5248  00123C  0E00               	movlw	0
  5249  00123E  0100               	movlb	0	; () banked
  5250  001240  6FB7               	movwf	(ID@n+1)& (0+255),b
  5251  001242  0E0A               	movlw	10
  5252  001244  6FB6               	movwf	ID@n& (0+255),b
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;sort.c: 305: if(!sensor_outputs[0]){
  5256  001246  0100               	movlb	0	; () banked
  5257  001248  51DA               	movf	_sensor_outputs& (0+255),w,b
  5258  00124A  0100               	movlb	0	; () banked
  5259  00124C  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5260  00124E  A4D8               	btfss	status,2,c
  5261  001250  D0E3               	goto	l8303
  5262                           
  5263                           ; BSR set to: 0
  5264                           ;sort.c: 306: const unsigned char time = (600 / n);
  5265  001252  0E02               	movlw	2
  5266  001254  0100               	movlb	0	; () banked
  5267  001256  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5268  001258  0E58               	movlw	88
  5269  00125A  6F86               	movwf	___awdiv@dividend& (0+255),b
  5270  00125C  C0B6  F088         	movff	ID@n,___awdiv@divisor
  5271  001260  C0B7  F089         	movff	ID@n+1,___awdiv@divisor+1
  5272  001264  EC8E  F026         	call	___awdiv	;wreg free
  5273  001268  0100               	movlb	0	; () banked
  5274  00126A  5186               	movf	?___awdiv& (0+255),w,b
  5275  00126C  0100               	movlb	0	; () banked
  5276  00126E  6FA9               	movwf	ID@time& (0+255),b
  5277                           
  5278                           ; BSR set to: 0
  5279                           ;sort.c: 307: int res1 = 0;
  5280  001270  0E00               	movlw	0
  5281  001272  0100               	movlb	0	; () banked
  5282  001274  6FAB               	movwf	(ID@res1+1)& (0+255),b
  5283  001276  0E00               	movlw	0
  5284  001278  6FAA               	movwf	ID@res1& (0+255),b
  5285                           
  5286                           ; BSR set to: 0
  5287                           ;sort.c: 308: int res2 = 0;
  5288  00127A  0E00               	movlw	0
  5289  00127C  0100               	movlb	0	; () banked
  5290  00127E  6FAD               	movwf	(ID@res2+1)& (0+255),b
  5291  001280  0E00               	movlw	0
  5292  001282  6FAC               	movwf	ID@res2& (0+255),b
  5293                           
  5294                           ; BSR set to: 0
  5295                           ;sort.c: 309: for(int i = 0; i<n; i++){
  5296  001284  0E00               	movlw	0
  5297  001286  0100               	movlb	0	; () banked
  5298  001288  6FA2               	movwf	(ID@i+1)& (0+255),b
  5299  00128A  0E00               	movlw	0
  5300  00128C  6FA1               	movwf	ID@i& (0+255),b
  5301  00128E                     l8261:
  5302                           
  5303                           ; BSR set to: 0
  5304  00128E  0100               	movlb	0	; () banked
  5305  001290  51B6               	movf	ID@n& (0+255),w,b
  5306  001292  0100               	movlb	0	; () banked
  5307  001294  5DA1               	subwf	ID@i& (0+255),w,b
  5308  001296  0100               	movlb	0	; () banked
  5309  001298  51A2               	movf	(ID@i+1)& (0+255),w,b
  5310  00129A  0A80               	xorlw	128
  5311  00129C  0100               	movlb	0	; () banked
  5312  00129E  6F9B               	movwf	??_ID& (0+255),b
  5313  0012A0  0100               	movlb	0	; () banked
  5314  0012A2  51B7               	movf	(ID@n+1)& (0+255),w,b
  5315  0012A4  0A80               	xorlw	128
  5316  0012A6  0100               	movlb	0	; () banked
  5317  0012A8  599B               	subwfb	??_ID& (0+255),w,b
  5318  0012AA  B0D8               	btfsc	status,0,c
  5319  0012AC  D012               	goto	l864
  5320                           
  5321                           ; BSR set to: 0
  5322                           ;sort.c: 310: delay_ms(time);
  5323                           
  5324                           ; BSR set to: 0
  5325                           
  5326                           ; BSR set to: 0
  5327  0012AE  0100               	movlb	0	; () banked
  5328  0012B0  51A9               	movf	ID@time& (0+255),w,b
  5329  0012B2  ECE7  F02E         	call	_delay_ms
  5330                           
  5331                           ;sort.c: 311: readCOND();
  5332  0012B6  EC19  F02C         	call	_readCOND	;wreg free
  5333                           
  5334                           ;sort.c: 312: res1 += COND_signal;
  5335  0012BA  0100               	movlb	0	; () banked
  5336  0012BC  51DE               	movf	_COND_signal& (0+255),w,b
  5337  0012BE  0100               	movlb	0	; () banked
  5338  0012C0  27AA               	addwf	ID@res1& (0+255),f,b
  5339  0012C2  0100               	movlb	0	; () banked
  5340  0012C4  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5341  0012C6  0100               	movlb	0	; () banked
  5342  0012C8  23AB               	addwfc	(ID@res1+1)& (0+255),f,b
  5343                           
  5344                           ; BSR set to: 0
  5345  0012CA  0100               	movlb	0	; () banked
  5346  0012CC  4BA1               	infsnz	ID@i& (0+255),f,b
  5347  0012CE  2BA2               	incf	(ID@i+1)& (0+255),f,b
  5348  0012D0  D7DE               	goto	l8261
  5349  0012D2                     l864:
  5350                           
  5351                           ; BSR set to: 0
  5352                           ;sort.c: 313: }
  5353                           ;sort.c: 314: LATCbits.LATC7 = 0;
  5354  0012D2  9E8B               	bcf	3979,7,c	;volatile
  5355                           
  5356                           ; BSR set to: 0
  5357                           ;sort.c: 315: _delay((unsigned long)((200)*(32000000/4000.0)));
  5358  0012D4  0E09               	movlw	9
  5359  0012D6  0100               	movlb	0	; () banked
  5360  0012D8  6F9C               	movwf	(??_ID+1)& (0+255),b
  5361  0012DA  0E1E               	movlw	30
  5362  0012DC  0100               	movlb	0	; () banked
  5363  0012DE  6F9B               	movwf	??_ID& (0+255),b
  5364  0012E0  0EE4               	movlw	228
  5365  0012E2                     u10967:
  5366  0012E2  2EE8               	decfsz	wreg,f,c
  5367  0012E4  D7FE               	bra	u10967
  5368  0012E6  2F9B               	decfsz	??_ID& (0+255),f,b
  5369  0012E8  D7FC               	bra	u10967
  5370  0012EA  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5371  0012EC  D7FA               	bra	u10967
  5372  0012EE  F000               	nop	
  5373                           
  5374                           ;sort.c: 316: LATCbits.LATC7 = 1;
  5375  0012F0  8E8B               	bsf	3979,7,c	;volatile
  5376                           
  5377                           ;sort.c: 317: for(int i = 0; i<n; i++){
  5378  0012F2  0E00               	movlw	0
  5379  0012F4  0100               	movlb	0	; () banked
  5380  0012F6  6FA4               	movwf	(ID@i_1148+1)& (0+255),b
  5381  0012F8  0E00               	movlw	0
  5382  0012FA  6FA3               	movwf	ID@i_1148& (0+255),b
  5383  0012FC                     l8279:
  5384                           
  5385                           ; BSR set to: 0
  5386  0012FC  0100               	movlb	0	; () banked
  5387  0012FE  51B6               	movf	ID@n& (0+255),w,b
  5388  001300  0100               	movlb	0	; () banked
  5389  001302  5DA3               	subwf	ID@i_1148& (0+255),w,b
  5390  001304  0100               	movlb	0	; () banked
  5391  001306  51A4               	movf	(ID@i_1148+1)& (0+255),w,b
  5392  001308  0A80               	xorlw	128
  5393  00130A  0100               	movlb	0	; () banked
  5394  00130C  6F9B               	movwf	??_ID& (0+255),b
  5395  00130E  0100               	movlb	0	; () banked
  5396  001310  51B7               	movf	(ID@n+1)& (0+255),w,b
  5397  001312  0A80               	xorlw	128
  5398  001314  0100               	movlb	0	; () banked
  5399  001316  599B               	subwfb	??_ID& (0+255),w,b
  5400  001318  B0D8               	btfsc	status,0,c
  5401  00131A  D012               	goto	l866
  5402                           
  5403                           ; BSR set to: 0
  5404                           ;sort.c: 318: delay_ms(time);
  5405                           
  5406                           ; BSR set to: 0
  5407                           
  5408                           ; BSR set to: 0
  5409  00131C  0100               	movlb	0	; () banked
  5410  00131E  51A9               	movf	ID@time& (0+255),w,b
  5411  001320  ECE7  F02E         	call	_delay_ms
  5412                           
  5413                           ;sort.c: 319: readCOND();
  5414  001324  EC19  F02C         	call	_readCOND	;wreg free
  5415                           
  5416                           ;sort.c: 320: res2 += COND_signal;
  5417  001328  0100               	movlb	0	; () banked
  5418  00132A  51DE               	movf	_COND_signal& (0+255),w,b
  5419  00132C  0100               	movlb	0	; () banked
  5420  00132E  27AC               	addwf	ID@res2& (0+255),f,b
  5421  001330  0100               	movlb	0	; () banked
  5422  001332  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5423  001334  0100               	movlb	0	; () banked
  5424  001336  23AD               	addwfc	(ID@res2+1)& (0+255),f,b
  5425                           
  5426                           ; BSR set to: 0
  5427  001338  0100               	movlb	0	; () banked
  5428  00133A  4BA3               	infsnz	ID@i_1148& (0+255),f,b
  5429  00133C  2BA4               	incf	(ID@i_1148+1)& (0+255),f,b
  5430  00133E  D7DE               	goto	l8279
  5431  001340                     l866:
  5432                           
  5433                           ; BSR set to: 0
  5434                           ;sort.c: 321: }
  5435                           ;sort.c: 322: LATCbits.LATC7 = 0;
  5436  001340  9E8B               	bcf	3979,7,c	;volatile
  5437                           
  5438                           ; BSR set to: 0
  5439                           ;sort.c: 323: res1 = ((res1 / n) > 0.3) ? 1 : 0;
  5440  001342  0E9A               	movlw	154
  5441  001344  0100               	movlb	0	; () banked
  5442  001346  6F92               	movwf	___ftge@ff1& (0+255),b
  5443  001348  0E99               	movlw	153
  5444  00134A  0100               	movlb	0	; () banked
  5445  00134C  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5446  00134E  0E3E               	movlw	62
  5447  001350  0100               	movlb	0	; () banked
  5448  001352  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5449  001354  C0B6  F088         	movff	ID@n,___awdiv@divisor
  5450  001358  C0B7  F089         	movff	ID@n+1,___awdiv@divisor+1
  5451  00135C  C0AA  F086         	movff	ID@res1,___awdiv@dividend
  5452  001360  C0AB  F087         	movff	ID@res1+1,___awdiv@dividend+1
  5453  001364  EC8E  F026         	call	___awdiv	;wreg free
  5454  001368  C086  F08E         	movff	?___awdiv,___awtoft@c
  5455  00136C  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5456  001370  EC88  F02C         	call	___awtoft	;wreg free
  5457  001374  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5458  001378  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5459  00137C  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5460  001380  EC2A  F026         	call	___ftge	;wreg free
  5461  001384  0100               	movlb	0	; () banked
  5462  001386  B0D8               	btfsc	status,0,c
  5463  001388  D002               	goto	u7350
  5464  00138A  0E01               	movlw	1
  5465  00138C  D001               	goto	u7360
  5466  00138E                     u7350:
  5467  00138E  0E00               	movlw	0
  5468  001390                     u7360:
  5469  001390  0100               	movlb	0	; () banked
  5470  001392  6FAA               	movwf	ID@res1& (0+255),b
  5471  001394  6BAB               	clrf	(ID@res1+1)& (0+255),b
  5472                           
  5473                           ;sort.c: 324: res2 = ((res2 / n) > 0.3) ? 1 : 0;
  5474  001396  0E9A               	movlw	154
  5475  001398  0100               	movlb	0	; () banked
  5476  00139A  6F92               	movwf	___ftge@ff1& (0+255),b
  5477  00139C  0E99               	movlw	153
  5478  00139E  0100               	movlb	0	; () banked
  5479  0013A0  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5480  0013A2  0E3E               	movlw	62
  5481  0013A4  0100               	movlb	0	; () banked
  5482  0013A6  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5483  0013A8  C0B6  F088         	movff	ID@n,___awdiv@divisor
  5484  0013AC  C0B7  F089         	movff	ID@n+1,___awdiv@divisor+1
  5485  0013B0  C0AC  F086         	movff	ID@res2,___awdiv@dividend
  5486  0013B4  C0AD  F087         	movff	ID@res2+1,___awdiv@dividend+1
  5487  0013B8  EC8E  F026         	call	___awdiv	;wreg free
  5488  0013BC  C086  F08E         	movff	?___awdiv,___awtoft@c
  5489  0013C0  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5490  0013C4  EC88  F02C         	call	___awtoft	;wreg free
  5491  0013C8  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5492  0013CC  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5493  0013D0  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5494  0013D4  EC2A  F026         	call	___ftge	;wreg free
  5495  0013D8  0100               	movlb	0	; () banked
  5496  0013DA  B0D8               	btfsc	status,0,c
  5497  0013DC  D002               	goto	u7370
  5498  0013DE  0E01               	movlw	1
  5499  0013E0  D001               	goto	u7380
  5500  0013E2                     u7370:
  5501  0013E2  0E00               	movlw	0
  5502  0013E4                     u7380:
  5503  0013E4  0100               	movlb	0	; () banked
  5504  0013E6  6FAC               	movwf	ID@res2& (0+255),b
  5505  0013E8  6BAD               	clrf	(ID@res2+1)& (0+255),b
  5506                           
  5507                           ; BSR set to: 0
  5508                           ;sort.c: 327: sensor_outputs[1] = (res1 || res2);
  5509  0013EA  0E01               	movlw	1
  5510  0013EC  0100               	movlb	0	; () banked
  5511  0013EE  6F9F               	movwf	_ID$1149& (0+255),b
  5512                           
  5513                           ; BSR set to: 0
  5514  0013F0  0100               	movlb	0	; () banked
  5515  0013F2  51AA               	movf	ID@res1& (0+255),w,b
  5516  0013F4  0100               	movlb	0	; () banked
  5517  0013F6  11AB               	iorwf	(ID@res1+1)& (0+255),w,b
  5518  0013F8  A4D8               	btfss	status,2,c
  5519  0013FA  D009               	goto	l8301
  5520                           
  5521                           ; BSR set to: 0
  5522  0013FC  0100               	movlb	0	; () banked
  5523  0013FE  51AC               	movf	ID@res2& (0+255),w,b
  5524  001400  0100               	movlb	0	; () banked
  5525  001402  11AD               	iorwf	(ID@res2+1)& (0+255),w,b
  5526  001404  A4D8               	btfss	status,2,c
  5527  001406  D003               	goto	l8301
  5528                           
  5529                           ; BSR set to: 0
  5530  001408  0E00               	movlw	0
  5531  00140A  0100               	movlb	0	; () banked
  5532  00140C  6F9F               	movwf	_ID$1149& (0+255),b
  5533  00140E                     l8301:
  5534                           
  5535                           ; BSR set to: 0
  5536  00140E  C09F  F0DC         	movff	_ID$1149,_sensor_outputs+2
  5537  001412  0100               	movlb	0	; () banked
  5538  001414  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5539                           
  5540                           ;sort.c: 328: }
  5541  001416  D0E3               	goto	l8347
  5542  001418                     l8303:
  5543                           
  5544                           ; BSR set to: 0
  5545                           ;sort.c: 329: else{
  5546                           ;sort.c: 330: const unsigned char time = (400 / n);
  5547  001418  0E01               	movlw	1
  5548  00141A  0100               	movlb	0	; () banked
  5549  00141C  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5550  00141E  0E90               	movlw	144
  5551  001420  6F86               	movwf	___awdiv@dividend& (0+255),b
  5552  001422  C0B6  F088         	movff	ID@n,___awdiv@divisor
  5553  001426  C0B7  F089         	movff	ID@n+1,___awdiv@divisor+1
  5554  00142A  EC8E  F026         	call	___awdiv	;wreg free
  5555  00142E  0100               	movlb	0	; () banked
  5556  001430  5186               	movf	?___awdiv& (0+255),w,b
  5557  001432  0100               	movlb	0	; () banked
  5558  001434  6F9D               	movwf	ID@time_1150& (0+255),b
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;sort.c: 331: int res[2];
  5562                           ;sort.c: 333: for(int j = 0; j < 2; j++){
  5563  001436  0E00               	movlw	0
  5564  001438  0100               	movlb	0	; () banked
  5565  00143A  6FB5               	movwf	(ID@j+1)& (0+255),b
  5566  00143C  0E00               	movlw	0
  5567  00143E  6FB4               	movwf	ID@j& (0+255),b
  5568                           
  5569                           ; BSR set to: 0
  5570  001440  0100               	movlb	0	; () banked
  5571  001442  BFB5               	btfsc	(ID@j+1)& (0+255),7,b
  5572  001444  D00A               	goto	l870
  5573  001446  0100               	movlb	0	; () banked
  5574  001448  51B5               	movf	(ID@j+1)& (0+255),w,b
  5575  00144A  E106               	bnz	u7410
  5576  00144C  0E02               	movlw	2
  5577  00144E  0100               	movlb	0	; () banked
  5578  001450  5DB4               	subwf	ID@j& (0+255),w,b
  5579  001452  B0D8               	btfsc	status,0,c
  5580  001454  D0C4               	goto	l8347
  5581  001456  D001               	goto	l870
  5582  001458                     u7410:
  5583                           
  5584                           ; BSR set to: 0
  5585  001458  D0C2               	goto	l8347
  5586  00145A                     l870:
  5587                           
  5588                           ; BSR set to: 0
  5589                           ;sort.c: 334: LATCbits.LATC7 = 1;
  5590  00145A  8E8B               	bsf	3979,7,c	;volatile
  5591                           
  5592                           ; BSR set to: 0
  5593                           ;sort.c: 335: for(int i = 0; i < n; i++){
  5594  00145C  0E00               	movlw	0
  5595  00145E  0100               	movlb	0	; () banked
  5596  001460  6FA6               	movwf	(ID@i_1153+1)& (0+255),b
  5597  001462  0E00               	movlw	0
  5598  001464  6FA5               	movwf	ID@i_1153& (0+255),b
  5599  001466                     l8313:
  5600                           
  5601                           ; BSR set to: 0
  5602  001466  0100               	movlb	0	; () banked
  5603  001468  51B6               	movf	ID@n& (0+255),w,b
  5604  00146A  0100               	movlb	0	; () banked
  5605  00146C  5DA5               	subwf	ID@i_1153& (0+255),w,b
  5606  00146E  0100               	movlb	0	; () banked
  5607  001470  51A6               	movf	(ID@i_1153+1)& (0+255),w,b
  5608  001472  0A80               	xorlw	128
  5609  001474  0100               	movlb	0	; () banked
  5610  001476  6F9B               	movwf	??_ID& (0+255),b
  5611  001478  0100               	movlb	0	; () banked
  5612  00147A  51B7               	movf	(ID@n+1)& (0+255),w,b
  5613  00147C  0A80               	xorlw	128
  5614  00147E  0100               	movlb	0	; () banked
  5615  001480  599B               	subwfb	??_ID& (0+255),w,b
  5616  001482  B0D8               	btfsc	status,0,c
  5617  001484  D01A               	goto	l873
  5618                           
  5619                           ; BSR set to: 0
  5620                           ;sort.c: 336: delay_ms(time);
  5621                           
  5622                           ; BSR set to: 0
  5623                           
  5624                           ; BSR set to: 0
  5625  001486  0100               	movlb	0	; () banked
  5626  001488  519D               	movf	ID@time_1150& (0+255),w,b
  5627  00148A  ECE7  F02E         	call	_delay_ms
  5628                           
  5629                           ;sort.c: 337: readCOND();
  5630  00148E  EC19  F02C         	call	_readCOND	;wreg free
  5631                           
  5632                           ;sort.c: 338: res[j] += COND_signal;
  5633  001492  90D8               	bcf	status,0,c
  5634  001494  0100               	movlb	0	; () banked
  5635  001496  35B4               	rlcf	ID@j& (0+255),w,b
  5636  001498  6ED9               	movwf	fsr2l,c
  5637  00149A  0100               	movlb	0	; () banked
  5638  00149C  35B5               	rlcf	(ID@j+1)& (0+255),w,b
  5639  00149E  6EDA               	movwf	fsr2h,c
  5640  0014A0  0EAE               	movlw	low ID@res
  5641  0014A2  26D9               	addwf	fsr2l,f,c
  5642  0014A4  0E00               	movlw	high ID@res
  5643  0014A6  22DA               	addwfc	fsr2h,f,c
  5644  0014A8  0100               	movlb	0	; () banked
  5645  0014AA  51DE               	movf	_COND_signal& (0+255),w,b
  5646  0014AC  26DE               	addwf	postinc2,f,c
  5647  0014AE  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5648  0014B0  22DD               	addwfc	postdec2,f,c
  5649                           
  5650                           ; BSR set to: 0
  5651  0014B2  0100               	movlb	0	; () banked
  5652  0014B4  4BA5               	infsnz	ID@i_1153& (0+255),f,b
  5653  0014B6  2BA6               	incf	(ID@i_1153+1)& (0+255),f,b
  5654  0014B8  D7D6               	goto	l8313
  5655  0014BA                     l873:
  5656                           
  5657                           ; BSR set to: 0
  5658                           ;sort.c: 339: }
  5659                           ;sort.c: 340: LATCbits.LATC7 = 0;
  5660  0014BA  9E8B               	bcf	3979,7,c	;volatile
  5661                           
  5662                           ; BSR set to: 0
  5663                           ;sort.c: 342: _delay((unsigned long)((200)*(32000000/4000.0)));
  5664  0014BC  0E09               	movlw	9
  5665  0014BE  0100               	movlb	0	; () banked
  5666  0014C0  6F9C               	movwf	(??_ID+1)& (0+255),b
  5667  0014C2  0E1E               	movlw	30
  5668  0014C4  0100               	movlb	0	; () banked
  5669  0014C6  6F9B               	movwf	??_ID& (0+255),b
  5670  0014C8  0EE4               	movlw	228
  5671  0014CA                     u10977:
  5672  0014CA  2EE8               	decfsz	wreg,f,c
  5673  0014CC  D7FE               	bra	u10977
  5674  0014CE  2F9B               	decfsz	??_ID& (0+255),f,b
  5675  0014D0  D7FC               	bra	u10977
  5676  0014D2  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5677  0014D4  D7FA               	bra	u10977
  5678  0014D6  F000               	nop	
  5679                           
  5680                           ;sort.c: 345: res[j] = ((res[j] / n) > 0.3) ? 1 : 0;
  5681  0014D8  0E9A               	movlw	154
  5682  0014DA  0100               	movlb	0	; () banked
  5683  0014DC  6F92               	movwf	___ftge@ff1& (0+255),b
  5684  0014DE  0E99               	movlw	153
  5685  0014E0  0100               	movlb	0	; () banked
  5686  0014E2  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5687  0014E4  0E3E               	movlw	62
  5688  0014E6  0100               	movlb	0	; () banked
  5689  0014E8  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5690  0014EA  C0B6  F088         	movff	ID@n,___awdiv@divisor
  5691  0014EE  C0B7  F089         	movff	ID@n+1,___awdiv@divisor+1
  5692  0014F2  90D8               	bcf	status,0,c
  5693  0014F4  0100               	movlb	0	; () banked
  5694  0014F6  35B4               	rlcf	ID@j& (0+255),w,b
  5695  0014F8  6ED9               	movwf	fsr2l,c
  5696  0014FA  0100               	movlb	0	; () banked
  5697  0014FC  35B5               	rlcf	(ID@j+1)& (0+255),w,b
  5698  0014FE  6EDA               	movwf	fsr2h,c
  5699  001500  0EAE               	movlw	low ID@res
  5700  001502  26D9               	addwf	fsr2l,f,c
  5701  001504  0E00               	movlw	high ID@res
  5702  001506  22DA               	addwfc	fsr2h,f,c
  5703  001508  CFDE F086          	movff	postinc2,___awdiv@dividend
  5704  00150C  CFDD F087          	movff	postdec2,___awdiv@dividend+1
  5705  001510  EC8E  F026         	call	___awdiv	;wreg free
  5706  001514  C086  F08E         	movff	?___awdiv,___awtoft@c
  5707  001518  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5708  00151C  EC88  F02C         	call	___awtoft	;wreg free
  5709  001520  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5710  001524  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5711  001528  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5712  00152C  EC2A  F026         	call	___ftge	;wreg free
  5713  001530  0100               	movlb	0	; () banked
  5714  001532  B0D8               	btfsc	status,0,c
  5715  001534  D002               	goto	u7440
  5716  001536  0E01               	movlw	1
  5717  001538  D001               	goto	u7450
  5718  00153A                     u7440:
  5719  00153A  0E00               	movlw	0
  5720  00153C                     u7450:
  5721  00153C  0100               	movlb	0	; () banked
  5722  00153E  6F9B               	movwf	??_ID& (0+255),b
  5723  001540  6B9C               	clrf	(??_ID+1)& (0+255),b
  5724  001542  90D8               	bcf	status,0,c
  5725  001544  0100               	movlb	0	; () banked
  5726  001546  35B4               	rlcf	ID@j& (0+255),w,b
  5727  001548  6ED9               	movwf	fsr2l,c
  5728  00154A  0100               	movlb	0	; () banked
  5729  00154C  35B5               	rlcf	(ID@j+1)& (0+255),w,b
  5730  00154E  6EDA               	movwf	fsr2h,c
  5731  001550  0EAE               	movlw	low ID@res
  5732  001552  26D9               	addwf	fsr2l,f,c
  5733  001554  0E00               	movlw	high ID@res
  5734  001556  22DA               	addwfc	fsr2h,f,c
  5735  001558  C09B  FFDE         	movff	??_ID,postinc2
  5736  00155C  C09C  FFDD         	movff	??_ID+1,postdec2
  5737                           
  5738                           ; BSR set to: 0
  5739                           ;sort.c: 346: if(j==0){
  5740  001560  0100               	movlb	0	; () banked
  5741  001562  51B4               	movf	ID@j& (0+255),w,b
  5742  001564  0100               	movlb	0	; () banked
  5743  001566  11B5               	iorwf	(ID@j+1)& (0+255),w,b
  5744  001568  A4D8               	btfss	status,2,c
  5745  00156A  D010               	goto	l8333
  5746                           
  5747                           ; BSR set to: 0
  5748                           ;sort.c: 347: sensor_outputs[1] = res[j];
  5749  00156C  90D8               	bcf	status,0,c
  5750  00156E  0100               	movlb	0	; () banked
  5751  001570  35B4               	rlcf	ID@j& (0+255),w,b
  5752  001572  6ED9               	movwf	fsr2l,c
  5753  001574  0100               	movlb	0	; () banked
  5754  001576  35B5               	rlcf	(ID@j+1)& (0+255),w,b
  5755  001578  6EDA               	movwf	fsr2h,c
  5756  00157A  0EAE               	movlw	low ID@res
  5757  00157C  26D9               	addwf	fsr2l,f,c
  5758  00157E  0E00               	movlw	high ID@res
  5759  001580  22DA               	addwfc	fsr2h,f,c
  5760  001582  CFDE F0DC          	movff	postinc2,_sensor_outputs+2
  5761  001586  CFDD F0DD          	movff	postdec2,_sensor_outputs+3
  5762                           
  5763                           ;sort.c: 348: }
  5764  00158A  D01F               	goto	l8343
  5765  00158C                     l8333:
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;sort.c: 349: else{
  5769                           ;sort.c: 350: sensor_outputs[1] = sensor_outputs[1] || res[j];
  5770  00158C  0E01               	movlw	1
  5771  00158E  0100               	movlb	0	; () banked
  5772  001590  6FA0               	movwf	_ID$1154& (0+255),b
  5773                           
  5774                           ; BSR set to: 0
  5775  001592  0100               	movlb	0	; () banked
  5776  001594  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5777  001596  0100               	movlb	0	; () banked
  5778  001598  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5779  00159A  A4D8               	btfss	status,2,c
  5780  00159C  D012               	goto	l8341
  5781                           
  5782                           ; BSR set to: 0
  5783  00159E  90D8               	bcf	status,0,c
  5784  0015A0  0100               	movlb	0	; () banked
  5785  0015A2  35B4               	rlcf	ID@j& (0+255),w,b
  5786  0015A4  6ED9               	movwf	fsr2l,c
  5787  0015A6  0100               	movlb	0	; () banked
  5788  0015A8  35B5               	rlcf	(ID@j+1)& (0+255),w,b
  5789  0015AA  6EDA               	movwf	fsr2h,c
  5790  0015AC  0EAE               	movlw	low ID@res
  5791  0015AE  26D9               	addwf	fsr2l,f,c
  5792  0015B0  0E00               	movlw	high ID@res
  5793  0015B2  22DA               	addwfc	fsr2h,f,c
  5794  0015B4  50DE               	movf	postinc2,w,c
  5795  0015B6  10DE               	iorwf	postinc2,w,c
  5796  0015B8  A4D8               	btfss	status,2,c
  5797  0015BA  D003               	goto	l8341
  5798                           
  5799                           ; BSR set to: 0
  5800  0015BC  0E00               	movlw	0
  5801  0015BE  0100               	movlb	0	; () banked
  5802  0015C0  6FA0               	movwf	_ID$1154& (0+255),b
  5803  0015C2                     l8341:
  5804                           
  5805                           ; BSR set to: 0
  5806  0015C2  C0A0  F0DC         	movff	_ID$1154,_sensor_outputs+2
  5807  0015C6  0100               	movlb	0	; () banked
  5808  0015C8  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5809  0015CA                     l8343:
  5810                           
  5811                           ; BSR set to: 0
  5812  0015CA  0100               	movlb	0	; () banked
  5813  0015CC  4BB4               	infsnz	ID@j& (0+255),f,b
  5814  0015CE  2BB5               	incf	(ID@j+1)& (0+255),f,b
  5815                           
  5816                           ; BSR set to: 0
  5817  0015D0  0100               	movlb	0	; () banked
  5818  0015D2  BFB5               	btfsc	(ID@j+1)& (0+255),7,b
  5819  0015D4  D742               	goto	l870
  5820  0015D6  0100               	movlb	0	; () banked
  5821  0015D8  51B5               	movf	(ID@j+1)& (0+255),w,b
  5822  0015DA  E101               	bnz	l8347
  5823  0015DC  D737               	goto	L5
  5824  0015DE                     l8347:
  5825                           
  5826                           ; BSR set to: 0
  5827                           ;sort.c: 351: }
  5828                           ;sort.c: 352: }
  5829                           ;sort.c: 353: }
  5830                           ;sort.c: 361: if(!sensor_outputs[0]){
  5831  0015DE  0100               	movlb	0	; () banked
  5832  0015E0  51DA               	movf	_sensor_outputs& (0+255),w,b
  5833  0015E2  0100               	movlb	0	; () banked
  5834  0015E4  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5835  0015E6  A4D8               	btfss	status,2,c
  5836  0015E8  D016               	goto	l8359
  5837                           
  5838                           ; BSR set to: 0
  5839                           ;sort.c: 362: if(!sensor_outputs[1]){
  5840  0015EA  0100               	movlb	0	; () banked
  5841  0015EC  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5842  0015EE  0100               	movlb	0	; () banked
  5843  0015F0  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5844  0015F2  A4D8               	btfss	status,2,c
  5845  0015F4  D008               	goto	l8355
  5846                           
  5847                           ; BSR set to: 0
  5848                           ;sort.c: 363: count_pop_no_tab++;
  5849  0015F6  0101               	movlb	1	; () banked
  5850  0015F8  4B29               	infsnz	_count_pop_no_tab& (0+255),f,b
  5851  0015FA  2B2A               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5852                           
  5853                           ; BSR set to: 1
  5854                           ;sort.c: 364: cur_can = 0;
  5855  0015FC  0E00               	movlw	0
  5856  0015FE  0101               	movlb	1	; () banked
  5857  001600  6F2E               	movwf	(_cur_can+1)& (0+255),b
  5858  001602  0E00               	movlw	0
  5859  001604  D007               	goto	L6
  5860  001606                     l8355:
  5861                           
  5862                           ;sort.c: 366: else{
  5863                           ;sort.c: 367: count_pop_w_tab++;
  5864  001606  0101               	movlb	1	; () banked
  5865  001608  4B2B               	infsnz	_count_pop_w_tab& (0+255),f,b
  5866  00160A  2B2C               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5867                           
  5868                           ; BSR set to: 1
  5869                           ;sort.c: 368: cur_can = 1;
  5870  00160C  0E00               	movlw	0
  5871  00160E  0101               	movlb	1	; () banked
  5872  001610  6F2E               	movwf	(_cur_can+1)& (0+255),b
  5873  001612  0E01               	movlw	1
  5874  001614                     L6:
  5875  001614  6F2D               	movwf	_cur_can& (0+255),b
  5876  001616                     l8359:
  5877                           
  5878                           ;sort.c: 369: }
  5879                           ;sort.c: 370: }
  5880                           ;sort.c: 371: if(sensor_outputs[0]){
  5881  001616  0100               	movlb	0	; () banked
  5882  001618  51DA               	movf	_sensor_outputs& (0+255),w,b
  5883  00161A  0100               	movlb	0	; () banked
  5884  00161C  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5885  00161E  B4D8               	btfsc	status,2,c
  5886  001620  D016               	goto	l8371
  5887                           
  5888                           ; BSR set to: 0
  5889                           ;sort.c: 372: if(!sensor_outputs[1]){
  5890  001622  0100               	movlb	0	; () banked
  5891  001624  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5892  001626  0100               	movlb	0	; () banked
  5893  001628  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5894  00162A  A4D8               	btfss	status,2,c
  5895  00162C  D008               	goto	l8367
  5896                           
  5897                           ; BSR set to: 0
  5898                           ;sort.c: 373: count_can_w_lab++;
  5899  00162E  0101               	movlb	1	; () banked
  5900  001630  4B27               	infsnz	_count_can_w_lab& (0+255),f,b
  5901  001632  2B28               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5902                           
  5903                           ; BSR set to: 1
  5904                           ;sort.c: 374: cur_can = 2;
  5905  001634  0E00               	movlw	0
  5906  001636  0101               	movlb	1	; () banked
  5907  001638  6F2E               	movwf	(_cur_can+1)& (0+255),b
  5908  00163A  0E02               	movlw	2
  5909  00163C  D007               	goto	L7
  5910  00163E                     l8367:
  5911                           
  5912                           ;sort.c: 376: else{
  5913                           ;sort.c: 377: count_can_no_lab++;
  5914  00163E  0101               	movlb	1	; () banked
  5915  001640  4B25               	infsnz	_count_can_no_lab& (0+255),f,b
  5916  001642  2B26               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5917                           
  5918                           ; BSR set to: 1
  5919                           ;sort.c: 378: cur_can = 3;
  5920  001644  0E00               	movlw	0
  5921  001646  0101               	movlb	1	; () banked
  5922  001648  6F2E               	movwf	(_cur_can+1)& (0+255),b
  5923  00164A  0E03               	movlw	3
  5924  00164C                     L7:
  5925  00164C  6F2D               	movwf	_cur_can& (0+255),b
  5926  00164E                     l8371:
  5927  00164E  0101               	movlb	1	; () banked
  5928  001650  5137               	movf	_f_can_distributed& (0+255),w,b
  5929  001652  0101               	movlb	1	; () banked
  5930  001654  1138               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5931  001656  B4D8               	btfsc	status,2,c
  5932  001658  D7FA               	goto	l8371
  5933                           
  5934                           ; BSR set to: 1
  5935                           ;sort.c: 384: for(int i=0;i<10000;i++)
  5936                           
  5937                           ; BSR set to: 1
  5938  00165A  0E00               	movlw	0
  5939  00165C  0100               	movlb	0	; () banked
  5940  00165E  6FA8               	movwf	(ID@i_1155+1)& (0+255),b
  5941  001660  0E00               	movlw	0
  5942  001662  6FA7               	movwf	ID@i_1155& (0+255),b
  5943  001664                     l8375:
  5944                           
  5945                           ; BSR set to: 0
  5946  001664  0100               	movlb	0	; () banked
  5947  001666  BFA8               	btfsc	(ID@i_1155+1)& (0+255),7,b
  5948  001668  D008               	goto	l887
  5949  00166A  0E10               	movlw	16
  5950  00166C  0100               	movlb	0	; () banked
  5951  00166E  5DA7               	subwf	ID@i_1155& (0+255),w,b
  5952  001670  0E27               	movlw	39
  5953  001672  0100               	movlb	0	; () banked
  5954  001674  59A8               	subwfb	(ID@i_1155+1)& (0+255),w,b
  5955  001676  B0D8               	btfsc	status,0,c
  5956  001678  D00D               	goto	l888
  5957  00167A                     l887:
  5958                           
  5959                           ; BSR set to: 0
  5960                           ;sort.c: 385: {
  5961                           ;sort.c: 386: LATCbits.LATC0 = 1;
  5962  00167A  808B               	bsf	3979,0,c	;volatile
  5963                           
  5964                           ; BSR set to: 0
  5965                           ;sort.c: 387: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5966  00167C  0E1A               	movlw	26
  5967  00167E                     u10987:
  5968  00167E  2EE8               	decfsz	wreg,f,c
  5969  001680  D7FE               	bra	u10987
  5970  001682  D000               	nop2	
  5971                           
  5972                           ;sort.c: 388: LATCbits.LATC0 = 0;
  5973  001684  908B               	bcf	3979,0,c	;volatile
  5974                           
  5975                           ;sort.c: 389: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5976  001686  0EF0               	movlw	240
  5977  001688                     u10997:
  5978  001688  2EE8               	decfsz	wreg,f,c
  5979  00168A  D7FE               	bra	u10997
  5980  00168C  0100               	movlb	0	; () banked
  5981  00168E  4BA7               	infsnz	ID@i_1155& (0+255),f,b
  5982  001690  2BA8               	incf	(ID@i_1155+1)& (0+255),f,b
  5983  001692  D7E8               	goto	l8375
  5984  001694                     l888:
  5985                           
  5986                           ; BSR set to: 0
  5987                           ;sort.c: 390: }
  5988                           ;sort.c: 392: LATCbits.LATC0 = 0;
  5989  001694  908B               	bcf	3979,0,c	;volatile
  5990                           
  5991                           ; BSR set to: 0
  5992                           ;sort.c: 394: f_can_coming_to_distribution = 1;
  5993  001696  0E00               	movlw	0
  5994  001698  0101               	movlb	1	; () banked
  5995  00169A  6F36               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5996  00169C  0E01               	movlw	1
  5997  00169E  6F35               	movwf	_f_can_coming_to_distribution& (0+255),b
  5998                           
  5999                           ; BSR set to: 1
  6000                           ;sort.c: 395: _delay((unsigned long)((750)*(32000000/4000.0)));
  6001  0016A0  0E1F               	movlw	31
  6002  0016A2  0100               	movlb	0	; () banked
  6003  0016A4  6F9C               	movwf	(??_ID+1)& (0+255),b
  6004  0016A6  0E71               	movlw	113
  6005  0016A8  0100               	movlb	0	; () banked
  6006  0016AA  6F9B               	movwf	??_ID& (0+255),b
  6007  0016AC  0E1E               	movlw	30
  6008  0016AE                     u11007:
  6009  0016AE  2EE8               	decfsz	wreg,f,c
  6010  0016B0  D7FE               	bra	u11007
  6011  0016B2  2F9B               	decfsz	??_ID& (0+255),f,b
  6012  0016B4  D7FC               	bra	u11007
  6013  0016B6  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  6014  0016B8  D7FA               	bra	u11007
  6015  0016BA  F000               	nop	
  6016                           
  6017                           ;sort.c: 396: LATCbits.LATC0 = 1;
  6018  0016BC  808B               	bsf	3979,0,c	;volatile
  6019                           
  6020                           ;sort.c: 399: if(!f_lastCan){
  6021  0016BE  0100               	movlb	0	; () banked
  6022  0016C0  51EA               	movf	_f_lastCan& (0+255),w,b
  6023  0016C2  0100               	movlb	0	; () banked
  6024  0016C4  11EB               	iorwf	(_f_lastCan+1)& (0+255),w,b
  6025  0016C6  A4D8               	btfss	status,2,c
  6026  0016C8  D032               	goto	l8407
  6027                           
  6028                           ; BSR set to: 0
  6029                           ;sort.c: 400: for(int i=0; i<46; i++){
  6030  0016CA  0E00               	movlw	0
  6031  0016CC  0100               	movlb	0	; () banked
  6032  0016CE  6FB3               	movwf	(ID@i_1156+1)& (0+255),b
  6033  0016D0  0E00               	movlw	0
  6034  0016D2  6FB2               	movwf	ID@i_1156& (0+255),b
  6035                           
  6036                           ; BSR set to: 0
  6037  0016D4  0100               	movlb	0	; () banked
  6038  0016D6  BFB3               	btfsc	(ID@i_1156+1)& (0+255),7,b
  6039  0016D8  D008               	goto	l8399
  6040  0016DA  0100               	movlb	0	; () banked
  6041  0016DC  51B3               	movf	(ID@i_1156+1)& (0+255),w,b
  6042  0016DE  E126               	bnz	l891
  6043  0016E0  0E2E               	movlw	46
  6044  0016E2  0100               	movlb	0	; () banked
  6045  0016E4  5DB2               	subwf	ID@i_1156& (0+255),w,b
  6046  0016E6  B0D8               	btfsc	status,0,c
  6047  0016E8  D021               	goto	l891
  6048  0016EA                     l8399:
  6049                           
  6050                           ; BSR set to: 0
  6051                           ;sort.c: 401: LATBbits.LATB2 = !LATBbits.LATB2;
  6052  0016EA  B48A               	btfsc	3978,2,c	;volatile
  6053  0016EC  D004               	goto	u7590
  6054  0016EE  0100               	movlb	0	; () banked
  6055  0016F0  6B9B               	clrf	??_ID& (0+255),b
  6056  0016F2  2B9B               	incf	??_ID& (0+255),f,b
  6057  0016F4  D002               	goto	u7608
  6058  0016F6                     u7590:
  6059  0016F6  0100               	movlb	0	; () banked
  6060  0016F8  6B9B               	clrf	??_ID& (0+255),b
  6061  0016FA                     u7608:
  6062  0016FA  0100               	movlb	0	; () banked
  6063  0016FC  479B               	rlncf	??_ID& (0+255),f,b
  6064  0016FE  479B               	rlncf	??_ID& (0+255),f,b
  6065  001700  508A               	movf	3978,w,c	;volatile
  6066  001702  0100               	movlb	0	; () banked
  6067  001704  199B               	xorwf	??_ID& (0+255),w,b
  6068  001706  0BFB               	andlw	-5
  6069  001708  199B               	xorwf	??_ID& (0+255),w,b
  6070  00170A  6E8A               	movwf	3978,c	;volatile
  6071                           
  6072                           ; BSR set to: 0
  6073                           ;sort.c: 402: delay_ms(45-i);
  6074  00170C  0100               	movlb	0	; () banked
  6075  00170E  51B2               	movf	ID@i_1156& (0+255),w,b
  6076  001710  0800               	sublw	0
  6077  001712  0F2D               	addlw	45
  6078  001714  ECE7  F02E         	call	_delay_ms
  6079  001718  0100               	movlb	0	; () banked
  6080  00171A  4BB2               	infsnz	ID@i_1156& (0+255),f,b
  6081  00171C  2BB3               	incf	(ID@i_1156+1)& (0+255),f,b
  6082                           
  6083                           ; BSR set to: 0
  6084  00171E  0100               	movlb	0	; () banked
  6085  001720  BFB3               	btfsc	(ID@i_1156+1)& (0+255),7,b
  6086  001722  D7E3               	goto	l8399
  6087  001724  0100               	movlb	0	; () banked
  6088  001726  51B3               	movf	(ID@i_1156+1)& (0+255),w,b
  6089  001728  E101               	bnz	u7610
  6090  00172A  D7DA               	goto	L8
  6091  00172C                     u7610:
  6092  00172C                     l891:
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;sort.c: 403: }
  6096                           ;sort.c: 404: LATBbits.LATB2 = 1;
  6097  00172C  848A               	bsf	3978,2,c	;volatile
  6098  00172E                     l8407:
  6099                           
  6100                           ; BSR set to: 0
  6101                           ;sort.c: 405: }
  6102                           ;sort.c: 407: f_can_coming_to_ID = 0;
  6103  00172E  0E00               	movlw	0
  6104  001730  0101               	movlb	1	; () banked
  6105  001732  6F34               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  6106  001734  0E00               	movlw	0
  6107  001736  6F33               	movwf	_f_can_coming_to_ID& (0+255),b
  6108  001738  0012               	return	
  6109  00173A                     __end_of_ID:
  6110                           	opt stack 0
  6111                           tblptru	equ	0xFF8
  6112                           tblptrh	equ	0xFF7
  6113                           tblptrl	equ	0xFF6
  6114                           tablat	equ	0xFF5
  6115                           prodh	equ	0xFF4
  6116                           prodl	equ	0xFF3
  6117                           postinc0	equ	0xFEE
  6118                           wreg	equ	0xFE8
  6119                           postdec1	equ	0xFE5
  6120                           fsr1l	equ	0xFE1
  6121                           indf2	equ	0xFDF
  6122                           postinc2	equ	0xFDE
  6123                           postdec2	equ	0xFDD
  6124                           fsr2h	equ	0xFDA
  6125                           fsr2l	equ	0xFD9
  6126                           status	equ	0xFD8
  6127                           
  6128 ;; *************** function _readIR *****************
  6129 ;; Defined at:
  6130 ;;		line 23 in file "ADCFunctionality.c"
  6131 ;; Parameters:    Size  Location     Type
  6132 ;;  ana_port        2    2[BANK0 ] int 
  6133 ;; Auto vars:     Size  Location     Type
  6134 ;;  res             2    6[BANK0 ] int 
  6135 ;; Return value:  Size  Location     Type
  6136 ;;                  1    wreg      void 
  6137 ;; Registers used:
  6138 ;;		wreg, status,2, status,0, cstack
  6139 ;; Tracked objects:
  6140 ;;		On entry : 0/0
  6141 ;;		On exit  : 0/0
  6142 ;;		Unchanged: 0/0
  6143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6144 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6145 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6146 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6147 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6148 ;;Total ram usage:        6 bytes
  6149 ;; Hardware stack levels used:    1
  6150 ;; Hardware stack levels required when called:    8
  6151 ;; This function calls:
  6152 ;;		_readADC
  6153 ;; This function is called by:
  6154 ;;		_Loading
  6155 ;;		_ID
  6156 ;;		_getIR
  6157 ;; This function uses a non-reentrant model
  6158 ;;
  6159                           
  6160                           	psect	text8
  6161  004FE2                     __ptext8:
  6162                           	opt stack 0
  6163  004FE2                     _readIR:
  6164                           	opt stack 20
  6165                           
  6166                           ;ADCFunctionality.c: 24: readADC(ana_port);
  6167                           
  6168                           ; BSR set to: 1
  6169                           ;incstack = 0
  6170  004FE2  0100               	movlb	0	; () banked
  6171  004FE4  5182               	movf	readIR@ana_port& (0+255),w,b
  6172  004FE6  ECBC  F02E         	call	_readADC
  6173                           
  6174                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  6175  004FEA  50C3               	movf	4035,w,c	;volatile
  6176  004FEC  CFC4 F084          	movff	4036,??_readIR	;volatile
  6177  004FF0  0100               	movlb	0	; () banked
  6178  004FF2  6B85               	clrf	(??_readIR+1)& (0+255),b
  6179  004FF4  C084  F085         	movff	??_readIR,??_readIR+1
  6180  004FF8  0100               	movlb	0	; () banked
  6181  004FFA  6B84               	clrf	??_readIR& (0+255),b
  6182  004FFC  0100               	movlb	0	; () banked
  6183  004FFE  1184               	iorwf	??_readIR& (0+255),w,b
  6184  005000  0100               	movlb	0	; () banked
  6185  005002  6F86               	movwf	readIR@res& (0+255),b
  6186  005004  0100               	movlb	0	; () banked
  6187  005006  5185               	movf	(??_readIR+1)& (0+255),w,b
  6188  005008  0100               	movlb	0	; () banked
  6189  00500A  6F87               	movwf	(readIR@res+1)& (0+255),b
  6190                           
  6191                           ;ADCFunctionality.c: 26: switch(ana_port){
  6192  00500C  D024               	goto	l6873
  6193  00500E                     l6867:
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;ADCFunctionality.c: 28: IR_signal = (res > 800) ? 1 : 0;
  6197  00500E  0100               	movlb	0	; () banked
  6198  005010  BF87               	btfsc	(readIR@res+1)& (0+255),7,b
  6199  005012  D00A               	goto	u5580
  6200  005014  0E21               	movlw	33
  6201  005016  0100               	movlb	0	; () banked
  6202  005018  5D86               	subwf	readIR@res& (0+255),w,b
  6203  00501A  0E03               	movlw	3
  6204  00501C  0100               	movlb	0	; () banked
  6205  00501E  5987               	subwfb	(readIR@res+1)& (0+255),w,b
  6206  005020  A0D8               	btfss	status,0,c
  6207  005022  D002               	goto	u5580
  6208  005024  0E01               	movlw	1
  6209  005026  D001               	goto	u5590
  6210  005028                     u5580:
  6211  005028  0E00               	movlw	0
  6212  00502A                     u5590:
  6213  00502A  0100               	movlb	0	; () banked
  6214  00502C  6FE0               	movwf	_IR_signal& (0+255),b
  6215  00502E  6BE1               	clrf	(_IR_signal+1)& (0+255),b
  6216                           
  6217                           ;ADCFunctionality.c: 29: break;
  6218  005030  0012               	return	
  6219  005032                     l6869:
  6220                           
  6221                           ; BSR set to: 0
  6222                           ;ADCFunctionality.c: 31: IR_signal = (res > 500) ? 1 : 0;
  6223  005032  0100               	movlb	0	; () banked
  6224  005034  BF87               	btfsc	(readIR@res+1)& (0+255),7,b
  6225  005036  D00A               	goto	u5600
  6226  005038  0EF5               	movlw	245
  6227  00503A  0100               	movlb	0	; () banked
  6228  00503C  5D86               	subwf	readIR@res& (0+255),w,b
  6229  00503E  0E01               	movlw	1
  6230  005040  0100               	movlb	0	; () banked
  6231  005042  5987               	subwfb	(readIR@res+1)& (0+255),w,b
  6232  005044  A0D8               	btfss	status,0,c
  6233  005046  D002               	goto	u5600
  6234  005048  0E01               	movlw	1
  6235  00504A  D001               	goto	u5610
  6236  00504C                     u5600:
  6237  00504C  0E00               	movlw	0
  6238  00504E                     u5610:
  6239  00504E  0100               	movlb	0	; () banked
  6240  005050  6FE0               	movwf	_IR_signal& (0+255),b
  6241  005052  6BE1               	clrf	(_IR_signal+1)& (0+255),b
  6242                           
  6243                           ; BSR set to: 0
  6244                           ;ADCFunctionality.c: 35: }
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;ADCFunctionality.c: 34: break;
  6248                           
  6249                           ;ADCFunctionality.c: 33: default:
  6250                           
  6251                           ;ADCFunctionality.c: 32: break;
  6252  005054  0012               	return	
  6253  005056                     l6873:
  6254                           
  6255                           ; BSR set to: 0
  6256  005056  C082  F084         	movff	readIR@ana_port,??_readIR
  6257  00505A  C083  F085         	movff	readIR@ana_port+1,??_readIR+1
  6258                           
  6259                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6260                           ; Switch size 1, requested type "space"
  6261                           ; Number of cases is 1, Range of values is 0 to 0
  6262                           ; switch strategies available:
  6263                           ; Name         Instructions Cycles
  6264                           ; simple_byte            4     3 (average)
  6265                           ;	Chosen strategy is simple_byte
  6266  00505E  0100               	movlb	0	; () banked
  6267  005060  5185               	movf	(??_readIR+1)& (0+255),w,b
  6268  005062  0A00               	xorlw	0	; case 0
  6269  005064  A4D8               	btfss	status,2,c
  6270  005066  0012               	return	
  6271                           
  6272                           ; BSR set to: 0
  6273                           ; Switch size 1, requested type "space"
  6274                           ; Number of cases is 2, Range of values is 0 to 3
  6275                           ; switch strategies available:
  6276                           ; Name         Instructions Cycles
  6277                           ; simple_byte            7     4 (average)
  6278                           ;	Chosen strategy is simple_byte
  6279  005068  0100               	movlb	0	; () banked
  6280  00506A  5184               	movf	??_readIR& (0+255),w,b
  6281  00506C  0A00               	xorlw	0	; case 0
  6282  00506E  B4D8               	btfsc	status,2,c
  6283  005070  D7CE               	goto	l6867
  6284  005072  0A03               	xorlw	3	; case 3
  6285  005074  A4D8               	btfss	status,2,c
  6286  005076  0012               	return	
  6287  005078  D7DC               	goto	l6869
  6288  00507A                     __end_of_readIR:
  6289                           	opt stack 0
  6290                           tblptru	equ	0xFF8
  6291                           tblptrh	equ	0xFF7
  6292                           tblptrl	equ	0xFF6
  6293                           tablat	equ	0xFF5
  6294                           prodh	equ	0xFF4
  6295                           prodl	equ	0xFF3
  6296                           postinc0	equ	0xFEE
  6297                           wreg	equ	0xFE8
  6298                           postdec1	equ	0xFE5
  6299                           fsr1l	equ	0xFE1
  6300                           indf2	equ	0xFDF
  6301                           postinc2	equ	0xFDE
  6302                           postdec2	equ	0xFDD
  6303                           fsr2h	equ	0xFDA
  6304                           fsr2l	equ	0xFD9
  6305                           status	equ	0xFD8
  6306                           
  6307 ;; *************** function _readCOND *****************
  6308 ;; Defined at:
  6309 ;;		line 44 in file "ADCFunctionality.c"
  6310 ;; Parameters:    Size  Location     Type
  6311 ;;		None
  6312 ;; Auto vars:     Size  Location     Type
  6313 ;;  res             2    4[BANK0 ] int 
  6314 ;; Return value:  Size  Location     Type
  6315 ;;                  1    wreg      void 
  6316 ;; Registers used:
  6317 ;;		wreg, status,2, status,0, cstack
  6318 ;; Tracked objects:
  6319 ;;		On entry : 0/0
  6320 ;;		On exit  : 0/0
  6321 ;;		Unchanged: 0/0
  6322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6324 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6325 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6326 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6327 ;;Total ram usage:        4 bytes
  6328 ;; Hardware stack levels used:    1
  6329 ;; Hardware stack levels required when called:    8
  6330 ;; This function calls:
  6331 ;;		_readADC
  6332 ;; This function is called by:
  6333 ;;		_ID
  6334 ;; This function uses a non-reentrant model
  6335 ;;
  6336                           
  6337                           	psect	text9
  6338  005832                     __ptext9:
  6339                           	opt stack 0
  6340  005832                     _readCOND:
  6341                           	opt stack 20
  6342                           
  6343                           ;ADCFunctionality.c: 45: readADC(2);
  6344                           
  6345                           ; BSR set to: 0
  6346                           ;incstack = 0
  6347  005832  0E02               	movlw	2
  6348  005834  ECBC  F02E         	call	_readADC
  6349                           
  6350                           ;ADCFunctionality.c: 46: int res = ADRESH<<8 | ADRESL;
  6351  005838  50C3               	movf	4035,w,c	;volatile
  6352  00583A  CFC4 F082          	movff	4036,??_readCOND	;volatile
  6353  00583E  0100               	movlb	0	; () banked
  6354  005840  6B83               	clrf	(??_readCOND+1)& (0+255),b
  6355  005842  C082  F083         	movff	??_readCOND,??_readCOND+1
  6356  005846  0100               	movlb	0	; () banked
  6357  005848  6B82               	clrf	??_readCOND& (0+255),b
  6358  00584A  0100               	movlb	0	; () banked
  6359  00584C  1182               	iorwf	??_readCOND& (0+255),w,b
  6360  00584E  0100               	movlb	0	; () banked
  6361  005850  6F84               	movwf	readCOND@res& (0+255),b
  6362  005852  0100               	movlb	0	; () banked
  6363  005854  5183               	movf	(??_readCOND+1)& (0+255),w,b
  6364  005856  0100               	movlb	0	; () banked
  6365  005858  6F85               	movwf	(readCOND@res+1)& (0+255),b
  6366                           
  6367                           ; BSR set to: 0
  6368                           ;ADCFunctionality.c: 47: COND_signal = (res > 300) ? 1 : 0;
  6369  00585A  0100               	movlb	0	; () banked
  6370  00585C  BF85               	btfsc	(readCOND@res+1)& (0+255),7,b
  6371  00585E  D00A               	goto	u6370
  6372  005860  0E2D               	movlw	45
  6373  005862  0100               	movlb	0	; () banked
  6374  005864  5D84               	subwf	readCOND@res& (0+255),w,b
  6375  005866  0E01               	movlw	1
  6376  005868  0100               	movlb	0	; () banked
  6377  00586A  5985               	subwfb	(readCOND@res+1)& (0+255),w,b
  6378  00586C  A0D8               	btfss	status,0,c
  6379  00586E  D002               	goto	u6370
  6380  005870  0E01               	movlw	1
  6381  005872  D001               	goto	u6380
  6382  005874                     u6370:
  6383  005874  0E00               	movlw	0
  6384  005876                     u6380:
  6385  005876  0100               	movlb	0	; () banked
  6386  005878  6FDE               	movwf	_COND_signal& (0+255),b
  6387  00587A  6BDF               	clrf	(_COND_signal+1)& (0+255),b
  6388                           
  6389                           ; BSR set to: 0
  6390  00587C  0012               	return		;funcret
  6391  00587E                     __end_of_readCOND:
  6392                           	opt stack 0
  6393                           tblptru	equ	0xFF8
  6394                           tblptrh	equ	0xFF7
  6395                           tblptrl	equ	0xFF6
  6396                           tablat	equ	0xFF5
  6397                           prodh	equ	0xFF4
  6398                           prodl	equ	0xFF3
  6399                           postinc0	equ	0xFEE
  6400                           wreg	equ	0xFE8
  6401                           postdec1	equ	0xFE5
  6402                           fsr1l	equ	0xFE1
  6403                           indf2	equ	0xFDF
  6404                           postinc2	equ	0xFDE
  6405                           postdec2	equ	0xFDD
  6406                           fsr2h	equ	0xFDA
  6407                           fsr2l	equ	0xFD9
  6408                           status	equ	0xFD8
  6409                           
  6410 ;; *************** function _delay_ms *****************
  6411 ;; Defined at:
  6412 ;;		line 716 in file "sort.c"
  6413 ;; Parameters:    Size  Location     Type
  6414 ;;  milliseconds    1    wreg     unsigned char 
  6415 ;; Auto vars:     Size  Location     Type
  6416 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  6417 ;; Return value:  Size  Location     Type
  6418 ;;                  1    wreg      void 
  6419 ;; Registers used:
  6420 ;;		wreg, status,2, status,0, cstack
  6421 ;; Tracked objects:
  6422 ;;		On entry : 0/0
  6423 ;;		On exit  : 0/0
  6424 ;;		Unchanged: 0/0
  6425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6427 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6428 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6429 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6430 ;;Total ram usage:        2 bytes
  6431 ;; Hardware stack levels used:    1
  6432 ;; Hardware stack levels required when called:    7
  6433 ;; This function calls:
  6434 ;;		Nothing
  6435 ;; This function is called by:
  6436 ;;		_Loading
  6437 ;;		_ID
  6438 ;; This function uses a non-reentrant model
  6439 ;;
  6440                           
  6441                           	psect	text10
  6442  005DCE                     __ptext10:
  6443                           	opt stack 0
  6444  005DCE                     _delay_ms:
  6445                           	opt stack 21
  6446                           
  6447                           ; BSR set to: 0
  6448                           ;incstack = 0
  6449                           ;delay_ms@milliseconds stored from wreg
  6450  005DCE  0100               	movlb	0	; () banked
  6451  005DD0  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  6452                           
  6453                           ;sort.c: 717: while(milliseconds > 0)
  6454  005DD2  D00B               	goto	l7583
  6455  005DD4                     l7579:
  6456                           
  6457                           ;sort.c: 718: {
  6458                           ;sort.c: 719: milliseconds--;
  6459  005DD4  0100               	movlb	0	; () banked
  6460  005DD6  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  6461                           
  6462                           ; BSR set to: 0
  6463                           ;sort.c: 720: _delay((unsigned long)((990)*(32000000/4000000.0)));
  6464  005DD8  0E0B               	movlw	11
  6465  005DDA  0100               	movlb	0	; () banked
  6466  005DDC  6F80               	movwf	??_delay_ms& (0+255),b
  6467  005DDE  0E47               	movlw	71
  6468  005DE0                     u11017:
  6469  005DE0  2EE8               	decfsz	wreg,f,c
  6470  005DE2  D7FE               	bra	u11017
  6471  005DE4  2F80               	decfsz	??_delay_ms& (0+255),f,b
  6472  005DE6  D7FC               	bra	u11017
  6473  005DE8  D000               	nop2	
  6474  005DEA                     l7583:
  6475  005DEA  0100               	movlb	0	; () banked
  6476  005DEC  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  6477  005DEE  0100               	movlb	0	; () banked
  6478  005DF0  B4D8               	btfsc	status,2,c
  6479  005DF2  0012               	return	
  6480  005DF4  D7EF               	goto	l7579
  6481  005DF6                     __end_of_delay_ms:
  6482                           	opt stack 0
  6483                           tblptru	equ	0xFF8
  6484                           tblptrh	equ	0xFF7
  6485                           tblptrl	equ	0xFF6
  6486                           tablat	equ	0xFF5
  6487                           prodh	equ	0xFF4
  6488                           prodl	equ	0xFF3
  6489                           postinc0	equ	0xFEE
  6490                           wreg	equ	0xFE8
  6491                           postdec1	equ	0xFE5
  6492                           fsr1l	equ	0xFE1
  6493                           indf2	equ	0xFDF
  6494                           postinc2	equ	0xFDE
  6495                           postdec2	equ	0xFDD
  6496                           fsr2h	equ	0xFDA
  6497                           fsr2l	equ	0xFD9
  6498                           status	equ	0xFD8
  6499                           
  6500 ;; *************** function ___ftge *****************
  6501 ;; Defined at:
  6502 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  6503 ;; Parameters:    Size  Location     Type
  6504 ;;  ff1             3   18[BANK0 ] float 
  6505 ;;  ff2             3   21[BANK0 ] float 
  6506 ;; Auto vars:     Size  Location     Type
  6507 ;;		None
  6508 ;; Return value:  Size  Location     Type
  6509 ;;		None               void
  6510 ;; Registers used:
  6511 ;;		wreg, status,2, status,0
  6512 ;; Tracked objects:
  6513 ;;		On entry : 0/0
  6514 ;;		On exit  : 0/0
  6515 ;;		Unchanged: 0/0
  6516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6517 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6519 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6520 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6521 ;;Total ram usage:        9 bytes
  6522 ;; Hardware stack levels used:    1
  6523 ;; Hardware stack levels required when called:    7
  6524 ;; This function calls:
  6525 ;;		Nothing
  6526 ;; This function is called by:
  6527 ;;		_ID
  6528 ;; This function uses a non-reentrant model
  6529 ;;
  6530                           
  6531                           	psect	text11
  6532  004C54                     __ptext11:
  6533                           	opt stack 0
  6534  004C54                     ___ftge:
  6535                           	opt stack 21
  6536                           
  6537                           ; BSR set to: 0
  6538                           ;incstack = 0
  6539  004C54  0100               	movlb	0	; () banked
  6540  004C56  AF94               	btfss	(___ftge@ff1+2)& (0+255),7,b
  6541  004C58  D01D               	goto	l7701
  6542                           
  6543                           ; BSR set to: 0
  6544  004C5A  C092  F098         	movff	___ftge@ff1,??___ftge
  6545  004C5E  C093  F099         	movff	___ftge@ff1+1,??___ftge+1
  6546  004C62  C094  F09A         	movff	___ftge@ff1+2,??___ftge+2
  6547  004C66  0100               	movlb	0	; () banked
  6548  004C68  1F98               	comf	??___ftge& (0+255),f,b
  6549  004C6A  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6550  004C6C  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6551  004C6E  2B98               	incf	??___ftge& (0+255),f,b
  6552  004C70  0E00               	movlw	0
  6553  004C72  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6554  004C74  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6555  004C76  0E00               	movlw	0
  6556  004C78  0100               	movlb	0	; () banked
  6557  004C7A  2598               	addwf	??___ftge& (0+255),w,b
  6558  004C7C  0100               	movlb	0	; () banked
  6559  004C7E  6F92               	movwf	___ftge@ff1& (0+255),b
  6560  004C80  0E00               	movlw	0
  6561  004C82  0100               	movlb	0	; () banked
  6562  004C84  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6563  004C86  0100               	movlb	0	; () banked
  6564  004C88  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  6565  004C8A  0E80               	movlw	128
  6566  004C8C  0100               	movlb	0	; () banked
  6567  004C8E  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6568  004C90  0100               	movlb	0	; () banked
  6569  004C92  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  6570  004C94                     l7701:
  6571                           
  6572                           ; BSR set to: 0
  6573  004C94  0100               	movlb	0	; () banked
  6574  004C96  AF97               	btfss	(___ftge@ff2+2)& (0+255),7,b
  6575  004C98  D01D               	goto	l7705
  6576                           
  6577                           ; BSR set to: 0
  6578  004C9A  C095  F098         	movff	___ftge@ff2,??___ftge
  6579  004C9E  C096  F099         	movff	___ftge@ff2+1,??___ftge+1
  6580  004CA2  C097  F09A         	movff	___ftge@ff2+2,??___ftge+2
  6581  004CA6  0100               	movlb	0	; () banked
  6582  004CA8  1F98               	comf	??___ftge& (0+255),f,b
  6583  004CAA  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6584  004CAC  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6585  004CAE  2B98               	incf	??___ftge& (0+255),f,b
  6586  004CB0  0E00               	movlw	0
  6587  004CB2  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6588  004CB4  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6589  004CB6  0E00               	movlw	0
  6590  004CB8  0100               	movlb	0	; () banked
  6591  004CBA  2598               	addwf	??___ftge& (0+255),w,b
  6592  004CBC  0100               	movlb	0	; () banked
  6593  004CBE  6F95               	movwf	___ftge@ff2& (0+255),b
  6594  004CC0  0E00               	movlw	0
  6595  004CC2  0100               	movlb	0	; () banked
  6596  004CC4  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6597  004CC6  0100               	movlb	0	; () banked
  6598  004CC8  6F96               	movwf	(___ftge@ff2+1)& (0+255),b
  6599  004CCA  0E80               	movlw	128
  6600  004CCC  0100               	movlb	0	; () banked
  6601  004CCE  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6602  004CD0  0100               	movlb	0	; () banked
  6603  004CD2  6F97               	movwf	(___ftge@ff2+2)& (0+255),b
  6604  004CD4                     l7705:
  6605                           
  6606                           ; BSR set to: 0
  6607  004CD4  0E00               	movlw	0
  6608  004CD6  0100               	movlb	0	; () banked
  6609  004CD8  1B92               	xorwf	___ftge@ff1& (0+255),f,b
  6610  004CDA  0E00               	movlw	0
  6611  004CDC  0100               	movlb	0	; () banked
  6612  004CDE  1B93               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  6613  004CE0  0E80               	movlw	128
  6614  004CE2  0100               	movlb	0	; () banked
  6615  004CE4  1B94               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  6616                           
  6617                           ; BSR set to: 0
  6618  004CE6  0E00               	movlw	0
  6619  004CE8  0100               	movlb	0	; () banked
  6620  004CEA  1B95               	xorwf	___ftge@ff2& (0+255),f,b
  6621  004CEC  0E00               	movlw	0
  6622  004CEE  0100               	movlb	0	; () banked
  6623  004CF0  1B96               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  6624  004CF2  0E80               	movlw	128
  6625  004CF4  0100               	movlb	0	; () banked
  6626  004CF6  1B97               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  6627  004CF8  0100               	movlb	0	; () banked
  6628  004CFA  5195               	movf	___ftge@ff2& (0+255),w,b
  6629  004CFC  0100               	movlb	0	; () banked
  6630  004CFE  5D92               	subwf	___ftge@ff1& (0+255),w,b
  6631  004D00  0100               	movlb	0	; () banked
  6632  004D02  5196               	movf	(___ftge@ff2+1)& (0+255),w,b
  6633  004D04  0100               	movlb	0	; () banked
  6634  004D06  5993               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  6635  004D08  0100               	movlb	0	; () banked
  6636  004D0A  5197               	movf	(___ftge@ff2+2)& (0+255),w,b
  6637  004D0C  0100               	movlb	0	; () banked
  6638  004D0E  5994               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  6639  004D10  B0D8               	btfsc	status,0,c
  6640  004D12  D002               	goto	l7711
  6641                           
  6642                           ; BSR set to: 0
  6643  004D14  90D8               	bcf	status,0,c
  6644  004D16  0012               	return	
  6645  004D18                     l7711:
  6646                           
  6647                           ; BSR set to: 0
  6648  004D18  80D8               	bsf	status,0,c
  6649                           
  6650                           ; BSR set to: 0
  6651  004D1A  0012               	return	
  6652  004D1C                     __end_of___ftge:
  6653                           	opt stack 0
  6654                           tblptru	equ	0xFF8
  6655                           tblptrh	equ	0xFF7
  6656                           tblptrl	equ	0xFF6
  6657                           tablat	equ	0xFF5
  6658                           prodh	equ	0xFF4
  6659                           prodl	equ	0xFF3
  6660                           postinc0	equ	0xFEE
  6661                           wreg	equ	0xFE8
  6662                           postdec1	equ	0xFE5
  6663                           fsr1l	equ	0xFE1
  6664                           indf2	equ	0xFDF
  6665                           postinc2	equ	0xFDE
  6666                           postdec2	equ	0xFDD
  6667                           fsr2h	equ	0xFDA
  6668                           fsr2l	equ	0xFD9
  6669                           status	equ	0xFD8
  6670                           
  6671 ;; *************** function ___awtoft *****************
  6672 ;; Defined at:
  6673 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  6674 ;; Parameters:    Size  Location     Type
  6675 ;;  c               2   14[BANK0 ] int 
  6676 ;; Auto vars:     Size  Location     Type
  6677 ;;  sign            1   17[BANK0 ] unsigned char 
  6678 ;; Return value:  Size  Location     Type
  6679 ;;                  3   14[BANK0 ] float 
  6680 ;; Registers used:
  6681 ;;		wreg, status,2, status,0, cstack
  6682 ;; Tracked objects:
  6683 ;;		On entry : 0/0
  6684 ;;		On exit  : 0/0
  6685 ;;		Unchanged: 0/0
  6686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6687 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6688 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6690 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6691 ;;Total ram usage:        4 bytes
  6692 ;; Hardware stack levels used:    1
  6693 ;; Hardware stack levels required when called:    8
  6694 ;; This function calls:
  6695 ;;		___ftpack
  6696 ;; This function is called by:
  6697 ;;		_ID
  6698 ;; This function uses a non-reentrant model
  6699 ;;
  6700                           
  6701                           	psect	text12
  6702  005910                     __ptext12:
  6703                           	opt stack 0
  6704  005910                     ___awtoft:
  6705                           	opt stack 20
  6706                           
  6707                           ; BSR set to: 0
  6708                           ;incstack = 0
  6709  005910  0E00               	movlw	0
  6710  005912  0100               	movlb	0	; () banked
  6711  005914  6F91               	movwf	___awtoft@sign& (0+255),b
  6712                           
  6713                           ; BSR set to: 0
  6714  005916  0100               	movlb	0	; () banked
  6715  005918  AF8F               	btfss	(___awtoft@c+1)& (0+255),7,b
  6716  00591A  D008               	goto	l7693
  6717                           
  6718                           ; BSR set to: 0
  6719  00591C  0100               	movlb	0	; () banked
  6720  00591E  6D8E               	negf	___awtoft@c& (0+255),b
  6721  005920  1F8F               	comf	(___awtoft@c+1)& (0+255),f,b
  6722  005922  B0D8               	btfsc	status,0,c
  6723  005924  2B8F               	incf	(___awtoft@c+1)& (0+255),f,b
  6724                           
  6725                           ; BSR set to: 0
  6726  005926  0E01               	movlw	1
  6727  005928  0100               	movlb	0	; () banked
  6728  00592A  6F91               	movwf	___awtoft@sign& (0+255),b
  6729  00592C                     l7693:
  6730                           
  6731                           ; BSR set to: 0
  6732  00592C  C08E  F080         	movff	___awtoft@c,___ftpack@arg
  6733  005930  C08F  F081         	movff	___awtoft@c+1,___ftpack@arg+1
  6734  005934  0100               	movlb	0	; () banked
  6735  005936  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  6736  005938  0E8E               	movlw	142
  6737  00593A  0100               	movlb	0	; () banked
  6738  00593C  6F83               	movwf	___ftpack@exp& (0+255),b
  6739  00593E  C091  F084         	movff	___awtoft@sign,___ftpack@sign
  6740  005942  EC19  F022         	call	___ftpack	;wreg free
  6741  005946  C080  F08E         	movff	?___ftpack,?___awtoft
  6742  00594A  C081  F08F         	movff	?___ftpack+1,?___awtoft+1
  6743  00594E  C082  F090         	movff	?___ftpack+2,?___awtoft+2
  6744  005952  0012               	return	
  6745  005954                     __end_of___awtoft:
  6746                           	opt stack 0
  6747                           tblptru	equ	0xFF8
  6748                           tblptrh	equ	0xFF7
  6749                           tblptrl	equ	0xFF6
  6750                           tablat	equ	0xFF5
  6751                           prodh	equ	0xFF4
  6752                           prodl	equ	0xFF3
  6753                           postinc0	equ	0xFEE
  6754                           wreg	equ	0xFE8
  6755                           postdec1	equ	0xFE5
  6756                           fsr1l	equ	0xFE1
  6757                           indf2	equ	0xFDF
  6758                           postinc2	equ	0xFDE
  6759                           postdec2	equ	0xFDD
  6760                           fsr2h	equ	0xFDA
  6761                           fsr2l	equ	0xFD9
  6762                           status	equ	0xFD8
  6763                           
  6764 ;; *************** function ___ftpack *****************
  6765 ;; Defined at:
  6766 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  6767 ;; Parameters:    Size  Location     Type
  6768 ;;  arg             3    0[BANK0 ] unsigned um
  6769 ;;  exp             1    3[BANK0 ] unsigned char 
  6770 ;;  sign            1    4[BANK0 ] unsigned char 
  6771 ;; Auto vars:     Size  Location     Type
  6772 ;;		None
  6773 ;; Return value:  Size  Location     Type
  6774 ;;                  3    0[BANK0 ] float 
  6775 ;; Registers used:
  6776 ;;		wreg, status,2, status,0
  6777 ;; Tracked objects:
  6778 ;;		On entry : 0/0
  6779 ;;		On exit  : 0/0
  6780 ;;		Unchanged: 0/0
  6781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6782 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6784 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6785 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6786 ;;Total ram usage:        8 bytes
  6787 ;; Hardware stack levels used:    1
  6788 ;; Hardware stack levels required when called:    7
  6789 ;; This function calls:
  6790 ;;		Nothing
  6791 ;; This function is called by:
  6792 ;;		___awtoft
  6793 ;; This function uses a non-reentrant model
  6794 ;;
  6795                           
  6796                           	psect	text13
  6797  004432                     __ptext13:
  6798                           	opt stack 0
  6799  004432                     ___ftpack:
  6800                           	opt stack 20
  6801                           
  6802                           ;incstack = 0
  6803  004432  0100               	movlb	0	; () banked
  6804  004434  5183               	movf	___ftpack@exp& (0+255),w,b
  6805  004436  0100               	movlb	0	; () banked
  6806  004438  B4D8               	btfsc	status,2,c
  6807  00443A  D008               	goto	l7077
  6808                           
  6809                           ; BSR set to: 0
  6810  00443C  0100               	movlb	0	; () banked
  6811  00443E  5180               	movf	___ftpack@arg& (0+255),w,b
  6812  004440  0100               	movlb	0	; () banked
  6813  004442  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  6814  004444  0100               	movlb	0	; () banked
  6815  004446  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  6816  004448  A4D8               	btfss	status,2,c
  6817  00444A  D011               	goto	l7083
  6818  00444C                     l7077:
  6819                           
  6820                           ; BSR set to: 0
  6821  00444C  0E00               	movlw	0
  6822  00444E  0100               	movlb	0	; () banked
  6823  004450  6F80               	movwf	?___ftpack& (0+255),b
  6824  004452  0E00               	movlw	0
  6825  004454  0100               	movlb	0	; () banked
  6826  004456  6F81               	movwf	(?___ftpack+1)& (0+255),b
  6827  004458  0E00               	movlw	0
  6828  00445A  0100               	movlb	0	; () banked
  6829  00445C  6F82               	movwf	(?___ftpack+2)& (0+255),b
  6830                           
  6831                           ; BSR set to: 0
  6832  00445E  0012               	return	
  6833  004460                     l7081:
  6834                           
  6835                           ; BSR set to: 0
  6836  004460  0100               	movlb	0	; () banked
  6837  004462  2B83               	incf	___ftpack@exp& (0+255),f,b
  6838  004464  0100               	movlb	0	; () banked
  6839  004466  90D8               	bcf	status,0,c
  6840  004468  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6841  00446A  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6842  00446C  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6843  00446E                     l7083:
  6844                           
  6845                           ; BSR set to: 0
  6846  00446E  0E00               	movlw	0
  6847  004470  0100               	movlb	0	; () banked
  6848  004472  1580               	andwf	___ftpack@arg& (0+255),w,b
  6849  004474  0100               	movlb	0	; () banked
  6850  004476  6F85               	movwf	??___ftpack& (0+255),b
  6851  004478  0E00               	movlw	0
  6852  00447A  0100               	movlb	0	; () banked
  6853  00447C  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6854  00447E  0100               	movlb	0	; () banked
  6855  004480  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6856  004482  0EFE               	movlw	254
  6857  004484  0100               	movlb	0	; () banked
  6858  004486  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6859  004488  0100               	movlb	0	; () banked
  6860  00448A  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6861  00448C  0100               	movlb	0	; () banked
  6862  00448E  5185               	movf	??___ftpack& (0+255),w,b
  6863  004490  0100               	movlb	0	; () banked
  6864  004492  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6865  004494  0100               	movlb	0	; () banked
  6866  004496  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6867  004498  B4D8               	btfsc	status,2,c
  6868  00449A  D011               	goto	l7089
  6869  00449C  D7E1               	goto	l7081
  6870  00449E                     l7085:
  6871                           
  6872                           ; BSR set to: 0
  6873  00449E  0100               	movlb	0	; () banked
  6874  0044A0  2B83               	incf	___ftpack@exp& (0+255),f,b
  6875                           
  6876                           ; BSR set to: 0
  6877  0044A2  0E01               	movlw	1
  6878  0044A4  0100               	movlb	0	; () banked
  6879  0044A6  2780               	addwf	___ftpack@arg& (0+255),f,b
  6880  0044A8  0E00               	movlw	0
  6881  0044AA  0100               	movlb	0	; () banked
  6882  0044AC  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  6883  0044AE  0E00               	movlw	0
  6884  0044B0  0100               	movlb	0	; () banked
  6885  0044B2  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  6886  0044B4  0100               	movlb	0	; () banked
  6887  0044B6  90D8               	bcf	status,0,c
  6888  0044B8  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6889  0044BA  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6890  0044BC  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6891  0044BE                     l7089:
  6892                           
  6893                           ; BSR set to: 0
  6894  0044BE  0E00               	movlw	0
  6895  0044C0  0100               	movlb	0	; () banked
  6896  0044C2  1580               	andwf	___ftpack@arg& (0+255),w,b
  6897  0044C4  0100               	movlb	0	; () banked
  6898  0044C6  6F85               	movwf	??___ftpack& (0+255),b
  6899  0044C8  0E00               	movlw	0
  6900  0044CA  0100               	movlb	0	; () banked
  6901  0044CC  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6902  0044CE  0100               	movlb	0	; () banked
  6903  0044D0  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6904  0044D2  0EFF               	movlw	255
  6905  0044D4  0100               	movlb	0	; () banked
  6906  0044D6  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6907  0044D8  0100               	movlb	0	; () banked
  6908  0044DA  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6909  0044DC  0100               	movlb	0	; () banked
  6910  0044DE  5185               	movf	??___ftpack& (0+255),w,b
  6911  0044E0  0100               	movlb	0	; () banked
  6912  0044E2  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6913  0044E4  0100               	movlb	0	; () banked
  6914  0044E6  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6915  0044E8  B4D8               	btfsc	status,2,c
  6916  0044EA  D008               	goto	l7093
  6917  0044EC  D7D8               	goto	l7085
  6918  0044EE                     l7091:
  6919                           
  6920                           ; BSR set to: 0
  6921  0044EE  0100               	movlb	0	; () banked
  6922  0044F0  0783               	decf	___ftpack@exp& (0+255),f,b
  6923  0044F2  0100               	movlb	0	; () banked
  6924  0044F4  90D8               	bcf	status,0,c
  6925  0044F6  3780               	rlcf	___ftpack@arg& (0+255),f,b
  6926  0044F8  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  6927  0044FA  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  6928  0044FC                     l7093:
  6929                           
  6930                           ; BSR set to: 0
  6931  0044FC  0100               	movlb	0	; () banked
  6932  0044FE  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  6933  004500  D004               	goto	l1833
  6934                           
  6935                           ; BSR set to: 0
  6936  004502  0E02               	movlw	2
  6937  004504  0100               	movlb	0	; () banked
  6938  004506  6183               	cpfslt	___ftpack@exp& (0+255),b
  6939  004508  D7F2               	goto	l7091
  6940  00450A                     l1833:
  6941                           
  6942                           ; BSR set to: 0
  6943  00450A  0100               	movlb	0	; () banked
  6944  00450C  B183               	btfsc	___ftpack@exp& (0+255),0,b
  6945  00450E  D002               	goto	l7099
  6946                           
  6947                           ; BSR set to: 0
  6948  004510  0100               	movlb	0	; () banked
  6949  004512  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  6950  004514                     l7099:
  6951                           
  6952                           ; BSR set to: 0
  6953  004514  0100               	movlb	0	; () banked
  6954  004516  90D8               	bcf	status,0,c
  6955  004518  3383               	rrcf	___ftpack@exp& (0+255),f,b
  6956  00451A  0100               	movlb	0	; () banked
  6957  00451C  5183               	movf	___ftpack@exp& (0+255),w,b
  6958  00451E  0100               	movlb	0	; () banked
  6959  004520  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  6960                           
  6961                           ; BSR set to: 0
  6962  004522  0100               	movlb	0	; () banked
  6963  004524  5184               	movf	___ftpack@sign& (0+255),w,b
  6964  004526  0100               	movlb	0	; () banked
  6965  004528  B4D8               	btfsc	status,2,c
  6966  00452A  D002               	goto	l7105
  6967                           
  6968                           ; BSR set to: 0
  6969  00452C  0100               	movlb	0	; () banked
  6970  00452E  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  6971  004530                     l7105:
  6972                           
  6973                           ; BSR set to: 0
  6974  004530  C080  F080         	movff	___ftpack@arg,?___ftpack
  6975  004534  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  6976  004538  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  6977  00453C  0012               	return	
  6978  00453E                     __end_of___ftpack:
  6979                           	opt stack 0
  6980                           tblptru	equ	0xFF8
  6981                           tblptrh	equ	0xFF7
  6982                           tblptrl	equ	0xFF6
  6983                           tablat	equ	0xFF5
  6984                           prodh	equ	0xFF4
  6985                           prodl	equ	0xFF3
  6986                           postinc0	equ	0xFEE
  6987                           wreg	equ	0xFE8
  6988                           postdec1	equ	0xFE5
  6989                           fsr1l	equ	0xFE1
  6990                           indf2	equ	0xFDF
  6991                           postinc2	equ	0xFDE
  6992                           postdec2	equ	0xFDD
  6993                           fsr2h	equ	0xFDA
  6994                           fsr2l	equ	0xFD9
  6995                           status	equ	0xFD8
  6996                           
  6997 ;; *************** function _Distribution *****************
  6998 ;; Defined at:
  6999 ;;		line 410 in file "sort.c"
  7000 ;; Parameters:    Size  Location     Type
  7001 ;;		None
  7002 ;; Auto vars:     Size  Location     Type
  7003 ;;		None
  7004 ;; Return value:  Size  Location     Type
  7005 ;;                  1    wreg      void 
  7006 ;; Registers used:
  7007 ;;		wreg, status,2, status,0, cstack
  7008 ;; Tracked objects:
  7009 ;;		On entry : 0/0
  7010 ;;		On exit  : 0/0
  7011 ;;		Unchanged: 0/0
  7012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7015 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7016 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7017 ;;Total ram usage:        2 bytes
  7018 ;; Hardware stack levels used:    1
  7019 ;; Hardware stack levels required when called:    8
  7020 ;; This function calls:
  7021 ;;		_updateServoPosition
  7022 ;; This function is called by:
  7023 ;;		_sort
  7024 ;; This function uses a non-reentrant model
  7025 ;;
  7026                           
  7027                           	psect	text14
  7028  00482A                     __ptext14:
  7029                           	opt stack 0
  7030  00482A                     _Distribution:
  7031                           	opt stack 21
  7032                           
  7033                           ;sort.c: 411: if(f_can_coming_to_distribution){
  7034                           
  7035                           ; BSR set to: 0
  7036                           ;incstack = 0
  7037  00482A  0101               	movlb	1	; () banked
  7038  00482C  5135               	movf	_f_can_coming_to_distribution& (0+255),w,b
  7039  00482E  0101               	movlb	1	; () banked
  7040  004830  1136               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  7041  004832  B4D8               	btfsc	status,2,c
  7042  004834  0012               	return	
  7043                           
  7044                           ; BSR set to: 1
  7045                           ;sort.c: 412: f_can_distributed = 0;
  7046  004836  0E00               	movlw	0
  7047  004838  0101               	movlb	1	; () banked
  7048  00483A  6F38               	movwf	(_f_can_distributed+1)& (0+255),b
  7049  00483C  0E00               	movlw	0
  7050  00483E  6F37               	movwf	_f_can_distributed& (0+255),b
  7051                           
  7052                           ;sort.c: 419: switch(cur_can){
  7053  004840  D034               	goto	l8423
  7054  004842                     l8413:
  7055                           
  7056                           ;sort.c: 421: updateServoPosition(500, 1);
  7057  004842  0E01               	movlw	1
  7058  004844  0100               	movlb	0	; () banked
  7059  004846  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7060  004848  0EF4               	movlw	244
  7061  00484A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7062  00484C  0E00               	movlw	0
  7063  00484E  0100               	movlb	0	; () banked
  7064  004850  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7065  004852  0E01               	movlw	1
  7066  004854  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7067  004856  EC49  F029         	call	_updateServoPosition	;wreg free
  7068                           
  7069                           ;sort.c: 422: break;
  7070  00485A  D03E               	goto	l8425
  7071  00485C                     l8415:
  7072                           
  7073                           ;sort.c: 424: updateServoPosition(850, 1);
  7074  00485C  0E03               	movlw	3
  7075  00485E  0100               	movlb	0	; () banked
  7076  004860  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7077  004862  0E52               	movlw	82
  7078  004864  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7079  004866  0E00               	movlw	0
  7080  004868  0100               	movlb	0	; () banked
  7081  00486A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7082  00486C  0E01               	movlw	1
  7083  00486E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7084  004870  EC49  F029         	call	_updateServoPosition	;wreg free
  7085                           
  7086                           ;sort.c: 425: break;
  7087  004874  D031               	goto	l8425
  7088  004876                     l8417:
  7089                           
  7090                           ;sort.c: 427: updateServoPosition(1670, 1);
  7091  004876  0E06               	movlw	6
  7092  004878  0100               	movlb	0	; () banked
  7093  00487A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7094  00487C  0E86               	movlw	134
  7095  00487E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7096  004880  0E00               	movlw	0
  7097  004882  0100               	movlb	0	; () banked
  7098  004884  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7099  004886  0E01               	movlw	1
  7100  004888  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7101  00488A  EC49  F029         	call	_updateServoPosition	;wreg free
  7102                           
  7103                           ;sort.c: 428: break;
  7104  00488E  D024               	goto	l8425
  7105  004890                     l8419:
  7106                           
  7107                           ;sort.c: 430: updateServoPosition(2400, 1);
  7108  004890  0E09               	movlw	9
  7109  004892  0100               	movlb	0	; () banked
  7110  004894  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7111  004896  0E60               	movlw	96
  7112  004898  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7113  00489A  0E00               	movlw	0
  7114  00489C  0100               	movlb	0	; () banked
  7115  00489E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7116  0048A0  0E01               	movlw	1
  7117  0048A2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7118  0048A4  EC49  F029         	call	_updateServoPosition	;wreg free
  7119                           
  7120                           ;sort.c: 434: }
  7121                           
  7122                           ;sort.c: 433: break;
  7123                           
  7124                           ;sort.c: 432: default:
  7125                           
  7126                           ;sort.c: 431: break;
  7127  0048A8  D017               	goto	l8425
  7128  0048AA                     l8423:
  7129  0048AA  C12D  F088         	movff	_cur_can,??_Distribution
  7130  0048AE  C12E  F089         	movff	_cur_can+1,??_Distribution+1
  7131                           
  7132                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7133                           ; Switch size 1, requested type "space"
  7134                           ; Number of cases is 1, Range of values is 0 to 0
  7135                           ; switch strategies available:
  7136                           ; Name         Instructions Cycles
  7137                           ; simple_byte            4     3 (average)
  7138                           ;	Chosen strategy is simple_byte
  7139  0048B2  0100               	movlb	0	; () banked
  7140  0048B4  5189               	movf	(??_Distribution+1)& (0+255),w,b
  7141  0048B6  0A00               	xorlw	0	; case 0
  7142  0048B8  A4D8               	btfss	status,2,c
  7143  0048BA  D00E               	goto	l8425
  7144                           
  7145                           ; BSR set to: 0
  7146                           ; Switch size 1, requested type "space"
  7147                           ; Number of cases is 4, Range of values is 0 to 3
  7148                           ; switch strategies available:
  7149                           ; Name         Instructions Cycles
  7150                           ; simple_byte           13     7 (average)
  7151                           ;	Chosen strategy is simple_byte
  7152  0048BC  0100               	movlb	0	; () banked
  7153  0048BE  5188               	movf	??_Distribution& (0+255),w,b
  7154  0048C0  0A00               	xorlw	0	; case 0
  7155  0048C2  B4D8               	btfsc	status,2,c
  7156  0048C4  D7BE               	goto	l8413
  7157  0048C6  0A01               	xorlw	1	; case 1
  7158  0048C8  B4D8               	btfsc	status,2,c
  7159  0048CA  D7C8               	goto	l8415
  7160  0048CC  0A03               	xorlw	3	; case 2
  7161  0048CE  B4D8               	btfsc	status,2,c
  7162  0048D0  D7D2               	goto	l8417
  7163  0048D2  0A01               	xorlw	1	; case 3
  7164  0048D4  B4D8               	btfsc	status,2,c
  7165  0048D6  D7DC               	goto	l8419
  7166  0048D8                     l8425:
  7167                           
  7168                           ;sort.c: 435: updateServoPosition(1050, 3);
  7169  0048D8  0E04               	movlw	4
  7170  0048DA  0100               	movlb	0	; () banked
  7171  0048DC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7172  0048DE  0E1A               	movlw	26
  7173  0048E0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7174  0048E2  0E00               	movlw	0
  7175  0048E4  0100               	movlb	0	; () banked
  7176  0048E6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7177  0048E8  0E03               	movlw	3
  7178  0048EA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7179  0048EC  EC49  F029         	call	_updateServoPosition	;wreg free
  7180                           
  7181                           ;sort.c: 436: servo_timer_target = 750;
  7182  0048F0  0E02               	movlw	2
  7183  0048F2  6E70               	movwf	_servo_timer_target+1,c	;volatile
  7184  0048F4  0EEE               	movlw	238
  7185  0048F6  6E6F               	movwf	_servo_timer_target,c	;volatile
  7186                           
  7187                           ;sort.c: 437: f_panning_to_bin = 1;
  7188  0048F8  0E00               	movlw	0
  7189  0048FA  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
  7190  0048FC  0E01               	movlw	1
  7191  0048FE  6E69               	movwf	_f_panning_to_bin,c	;volatile
  7192                           
  7193                           ;sort.c: 438: f_can_coming_to_distribution = 0;
  7194  004900  0E00               	movlw	0
  7195  004902  0101               	movlb	1	; () banked
  7196  004904  6F36               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  7197  004906  0E00               	movlw	0
  7198  004908  6F35               	movwf	_f_can_coming_to_distribution& (0+255),b
  7199  00490A  0012               	return	
  7200  00490C                     __end_of_Distribution:
  7201                           	opt stack 0
  7202                           tblptru	equ	0xFF8
  7203                           tblptrh	equ	0xFF7
  7204                           tblptrl	equ	0xFF6
  7205                           tablat	equ	0xFF5
  7206                           prodh	equ	0xFF4
  7207                           prodl	equ	0xFF3
  7208                           postinc0	equ	0xFEE
  7209                           wreg	equ	0xFE8
  7210                           postdec1	equ	0xFE5
  7211                           fsr1l	equ	0xFE1
  7212                           indf2	equ	0xFDF
  7213                           postinc2	equ	0xFDE
  7214                           postdec2	equ	0xFDD
  7215                           fsr2h	equ	0xFDA
  7216                           fsr2l	equ	0xFD9
  7217                           status	equ	0xFD8
  7218                           
  7219 ;; *************** function _machineConfig *****************
  7220 ;; Defined at:
  7221 ;;		line 15 in file "MachineConfig.c"
  7222 ;; Parameters:    Size  Location     Type
  7223 ;;		None
  7224 ;; Auto vars:     Size  Location     Type
  7225 ;;		None
  7226 ;; Return value:  Size  Location     Type
  7227 ;;                  1    wreg      void 
  7228 ;; Registers used:
  7229 ;;		wreg, status,2
  7230 ;; Tracked objects:
  7231 ;;		On entry : 0/0
  7232 ;;		On exit  : 0/0
  7233 ;;		Unchanged: 0/0
  7234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7239 ;;Total ram usage:        0 bytes
  7240 ;; Hardware stack levels used:    1
  7241 ;; Hardware stack levels required when called:    7
  7242 ;; This function calls:
  7243 ;;		Nothing
  7244 ;; This function is called by:
  7245 ;;		_main
  7246 ;; This function uses a non-reentrant model
  7247 ;;
  7248                           
  7249                           	psect	text15
  7250  0055B6                     __ptext15:
  7251                           	opt stack 0
  7252  0055B6                     _machineConfig:
  7253                           	opt stack 23
  7254                           
  7255                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  7256                           
  7257                           ; BSR set to: 1
  7258                           ;incstack = 0
  7259  0055B6  0EF0               	movlw	240
  7260  0055B8  6ED3               	movwf	4051,c	;volatile
  7261                           
  7262                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  7263  0055BA  8C9B               	bsf	3995,6,c	;volatile
  7264                           
  7265                           ;MachineConfig.c: 22: TRISA = 0b00001111;
  7266  0055BC  0E0F               	movlw	15
  7267  0055BE  6E92               	movwf	3986,c	;volatile
  7268                           
  7269                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  7270  0055C0  0EF2               	movlw	242
  7271  0055C2  6E93               	movwf	3987,c	;volatile
  7272                           
  7273                           ;MachineConfig.c: 27: TRISC = 0x00;
  7274  0055C4  0E00               	movlw	0
  7275  0055C6  6E94               	movwf	3988,c	;volatile
  7276                           
  7277                           ;MachineConfig.c: 31: TRISD = 0x00;
  7278  0055C8  0E00               	movlw	0
  7279  0055CA  6E95               	movwf	3989,c	;volatile
  7280                           
  7281                           ;MachineConfig.c: 34: TRISE = 0x00;
  7282  0055CC  0E00               	movlw	0
  7283  0055CE  6E96               	movwf	3990,c	;volatile
  7284                           
  7285                           ;MachineConfig.c: 37: LATA = 0x00;
  7286  0055D0  0E00               	movlw	0
  7287  0055D2  6E89               	movwf	3977,c	;volatile
  7288                           
  7289                           ;MachineConfig.c: 38: LATB = 0x00;
  7290  0055D4  0E00               	movlw	0
  7291  0055D6  6E8A               	movwf	3978,c	;volatile
  7292                           
  7293                           ;MachineConfig.c: 39: LATC = 0x00;
  7294  0055D8  0E00               	movlw	0
  7295  0055DA  6E8B               	movwf	3979,c	;volatile
  7296                           
  7297                           ;MachineConfig.c: 40: LATD = 0x00;
  7298  0055DC  0E00               	movlw	0
  7299  0055DE  6E8C               	movwf	3980,c	;volatile
  7300                           
  7301                           ;MachineConfig.c: 41: LATE = 0x00;
  7302  0055E0  0E00               	movlw	0
  7303  0055E2  6E8D               	movwf	3981,c	;volatile
  7304                           
  7305                           ;MachineConfig.c: 43: nRBPU = 0;
  7306  0055E4  9EF1               	bcf	intcon2,7,c	;volatile
  7307                           
  7308                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  7309  0055E6  0E00               	movlw	0
  7310  0055E8  6EC2               	movwf	4034,c	;volatile
  7311                           
  7312                           ;MachineConfig.c: 47: ADCON1 = 0b00001011;
  7313  0055EA  0E0B               	movlw	11
  7314  0055EC  6EC1               	movwf	4033,c	;volatile
  7315                           
  7316                           ;MachineConfig.c: 52: CVRCON = 0x00;
  7317  0055EE  0E00               	movlw	0
  7318  0055F0  6EB5               	movwf	4021,c	;volatile
  7319                           
  7320                           ;MachineConfig.c: 53: CMCONbits.CIS = 0;
  7321  0055F2  96B4               	bcf	4020,3,c	;volatile
  7322                           
  7323                           ;MachineConfig.c: 54: ADCON2 = 0b10110001;
  7324  0055F4  0EB1               	movlw	177
  7325  0055F6  6EC0               	movwf	4032,c	;volatile
  7326                           
  7327                           ;MachineConfig.c: 57: INT1IE = 1;
  7328  0055F8  86F0               	bsf	intcon3,3,c	;volatile
  7329                           
  7330                           ;MachineConfig.c: 59: TMR0IE = 1;
  7331  0055FA  8AF2               	bsf	intcon,5,c	;volatile
  7332                           
  7333                           ;MachineConfig.c: 60: TMR1IE = 1;
  7334  0055FC  809D               	bsf	3997,0,c	;volatile
  7335                           
  7336                           ;MachineConfig.c: 61: TMR2IE = 1;
  7337  0055FE  829D               	bsf	3997,1,c	;volatile
  7338                           
  7339                           ;MachineConfig.c: 62: TMR3IE = 1;
  7340  005600  82A0               	bsf	4000,1,c	;volatile
  7341                           
  7342                           ;MachineConfig.c: 64: T1CON = 0b10110000;
  7343  005602  0EB0               	movlw	176
  7344  005604  6ECD               	movwf	4045,c	;volatile
  7345                           
  7346                           ;MachineConfig.c: 65: T2CON = 0b01111011;
  7347  005606  0E7B               	movlw	123
  7348  005608  6ECA               	movwf	4042,c	;volatile
  7349                           
  7350                           ;MachineConfig.c: 66: PR2 = 0x22;
  7351  00560A  0E22               	movlw	34
  7352  00560C  6ECB               	movwf	4043,c	;volatile
  7353                           
  7354                           ;MachineConfig.c: 67: T3CON = 0b10110000;
  7355  00560E  0EB0               	movlw	176
  7356  005610  6EB1               	movwf	4017,c	;volatile
  7357                           
  7358                           ;MachineConfig.c: 68: PEIE = 1;
  7359  005612  8CF2               	bsf	intcon,6,c	;volatile
  7360                           
  7361                           ;MachineConfig.c: 69: ADIE = 0;
  7362  005614  9C9D               	bcf	3997,6,c	;volatile
  7363                           
  7364                           ;MachineConfig.c: 70: (INTCONbits.GIE = 0);
  7365  005616  9EF2               	bcf	intcon,7,c	;volatile
  7366  005618  0012               	return		;funcret
  7367  00561A                     __end_of_machineConfig:
  7368                           	opt stack 0
  7369                           tblptru	equ	0xFF8
  7370                           tblptrh	equ	0xFF7
  7371                           tblptrl	equ	0xFF6
  7372                           tablat	equ	0xFF5
  7373                           prodh	equ	0xFF4
  7374                           prodl	equ	0xFF3
  7375                           intcon	equ	0xFF2
  7376                           intcon2	equ	0xFF1
  7377                           intcon3	equ	0xFF0
  7378                           postinc0	equ	0xFEE
  7379                           wreg	equ	0xFE8
  7380                           postdec1	equ	0xFE5
  7381                           fsr1l	equ	0xFE1
  7382                           indf2	equ	0xFDF
  7383                           postinc2	equ	0xFDE
  7384                           postdec2	equ	0xFDD
  7385                           fsr2h	equ	0xFDA
  7386                           fsr2l	equ	0xFD9
  7387                           status	equ	0xFD8
  7388                           
  7389 ;; *************** function _logRun *****************
  7390 ;; Defined at:
  7391 ;;		line 88 in file "EEPROM.c"
  7392 ;; Parameters:    Size  Location     Type
  7393 ;;		None
  7394 ;; Auto vars:     Size  Location     Type
  7395 ;;  byte_i          1   53[BANK0 ] unsigned char 
  7396 ;;  i               2   55[BANK0 ] int 
  7397 ;;  num             1   49[BANK0 ] unsigned char 
  7398 ;;  addr            2   57[BANK0 ] unsigned short 
  7399 ;;  byte11          1   54[BANK0 ] unsigned char 
  7400 ;;  byte3           1   52[BANK0 ] unsigned char 
  7401 ;;  byte2           1   51[BANK0 ] unsigned char 
  7402 ;;  byte1           1   50[BANK0 ] unsigned char 
  7403 ;; Return value:  Size  Location     Type
  7404 ;;                  1    wreg      void 
  7405 ;; Registers used:
  7406 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7407 ;; Tracked objects:
  7408 ;;		On entry : 0/0
  7409 ;;		On exit  : 0/0
  7410 ;;		Unchanged: 0/0
  7411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7413 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7415 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7416 ;;Total ram usage:       10 bytes
  7417 ;; Hardware stack levels used:    1
  7418 ;; Hardware stack levels required when called:   11
  7419 ;; This function calls:
  7420 ;;		_EEPROM_read
  7421 ;;		_EEPROM_write
  7422 ;; This function is called by:
  7423 ;;		_main
  7424 ;; This function uses a non-reentrant model
  7425 ;;
  7426                           
  7427                           	psect	text16
  7428  0041C8                     __ptext16:
  7429                           	opt stack 0
  7430  0041C8                     _logRun:
  7431                           	opt stack 19
  7432                           
  7433                           ;EEPROM.c: 101: sel = EEPROM_read(0);
  7434                           
  7435                           ;incstack = 0
  7436  0041C8  0E00               	movlw	0
  7437  0041CA  0100               	movlb	0	; () banked
  7438  0041CC  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  7439  0041CE  0E00               	movlw	0
  7440  0041D0  6F80               	movwf	EEPROM_read@address& (0+255),b
  7441  0041D2  EC94  F02F         	call	_EEPROM_read	;wreg free
  7442  0041D6  0100               	movlb	0	; () banked
  7443  0041D8  6FFD               	movwf	_sel& (0+255),b
  7444                           
  7445                           ; BSR set to: 0
  7446                           ;EEPROM.c: 102: unsigned short addr = 1 + 11 * sel;
  7447  0041DA  0100               	movlb	0	; () banked
  7448  0041DC  51FD               	movf	_sel& (0+255),w,b
  7449  0041DE  0D0B               	mullw	11
  7450  0041E0  0E01               	movlw	1
  7451  0041E2  24F3               	addwf	prodl,w,c
  7452  0041E4  0100               	movlb	0	; () banked
  7453  0041E6  6FB9               	movwf	logRun@addr& (0+255),b
  7454  0041E8  0E00               	movlw	0
  7455  0041EA  20F4               	addwfc	prodh,w,c
  7456  0041EC  0100               	movlb	0	; () banked
  7457  0041EE  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  7458                           
  7459                           ; BSR set to: 0
  7460                           ;EEPROM.c: 105: if (sel < 3){
  7461  0041F0  0E03               	movlw	3
  7462  0041F2  0100               	movlb	0	; () banked
  7463  0041F4  61FD               	cpfslt	_sel& (0+255),b
  7464  0041F6  D00E               	goto	l10143
  7465                           
  7466                           ; BSR set to: 0
  7467                           ;EEPROM.c: 106: unsigned char num = sel+1;
  7468  0041F8  0100               	movlb	0	; () banked
  7469  0041FA  29FD               	incf	_sel& (0+255),w,b
  7470  0041FC  0100               	movlb	0	; () banked
  7471  0041FE  6FB1               	movwf	logRun@num& (0+255),b
  7472                           
  7473                           ; BSR set to: 0
  7474                           ;EEPROM.c: 107: EEPROM_write(0, num);
  7475  004200  0E00               	movlw	0
  7476  004202  0100               	movlb	0	; () banked
  7477  004204  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7478  004206  0E00               	movlw	0
  7479  004208  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7480  00420A  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  7481  00420E  ECA1  F023         	call	_EEPROM_write	;wreg free
  7482                           
  7483                           ;EEPROM.c: 108: }
  7484  004212  D00A               	goto	l10145
  7485  004214                     l10143:
  7486                           
  7487                           ;EEPROM.c: 109: else{
  7488                           ;EEPROM.c: 110: EEPROM_write(0, 0);
  7489  004214  0E00               	movlw	0
  7490  004216  0100               	movlb	0	; () banked
  7491  004218  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7492  00421A  0E00               	movlw	0
  7493  00421C  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7494  00421E  0E00               	movlw	0
  7495  004220  0100               	movlb	0	; () banked
  7496  004222  6FAD               	movwf	EEPROM_write@data& (0+255),b
  7497  004224  ECA1  F023         	call	_EEPROM_write	;wreg free
  7498  004228                     l10145:
  7499                           
  7500                           ;EEPROM.c: 111: }
  7501                           ;EEPROM.c: 114: unsigned char byte1 = 0b10000000 | count_total;
  7502  004228  0100               	movlb	0	; () banked
  7503  00422A  51FE               	movf	_count_total& (0+255),w,b
  7504  00422C  0980               	iorlw	128
  7505  00422E  0100               	movlb	0	; () banked
  7506  004230  6FB2               	movwf	logRun@byte1& (0+255),b
  7507                           
  7508                           ; BSR set to: 0
  7509                           ;EEPROM.c: 115: EEPROM_write(addr, byte1);
  7510  004232  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7511  004236  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7512  00423A  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  7513  00423E  ECA1  F023         	call	_EEPROM_write	;wreg free
  7514                           
  7515                           ;EEPROM.c: 116: addr++;
  7516  004242  0100               	movlb	0	; () banked
  7517  004244  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7518  004246  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7519                           
  7520                           ; BSR set to: 0
  7521                           ;EEPROM.c: 119: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  7522  004248  0101               	movlb	1	; () banked
  7523  00424A  3929               	swapf	_count_pop_no_tab& (0+255),w,b
  7524  00424C  0BF0               	andlw	240
  7525  00424E  0101               	movlb	1	; () banked
  7526  004250  112B               	iorwf	_count_pop_w_tab& (0+255),w,b
  7527  004252  0100               	movlb	0	; () banked
  7528  004254  6FB3               	movwf	logRun@byte2& (0+255),b
  7529                           
  7530                           ; BSR set to: 0
  7531                           ;EEPROM.c: 120: EEPROM_write(addr, byte2);
  7532  004256  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7533  00425A  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7534  00425E  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  7535  004262  ECA1  F023         	call	_EEPROM_write	;wreg free
  7536                           
  7537                           ;EEPROM.c: 121: addr++;
  7538  004266  0100               	movlb	0	; () banked
  7539  004268  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7540  00426A  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7541                           
  7542                           ; BSR set to: 0
  7543                           ;EEPROM.c: 122: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  7544  00426C  0101               	movlb	1	; () banked
  7545  00426E  3927               	swapf	_count_can_w_lab& (0+255),w,b
  7546  004270  0BF0               	andlw	240
  7547  004272  0101               	movlb	1	; () banked
  7548  004274  1125               	iorwf	_count_can_no_lab& (0+255),w,b
  7549  004276  0100               	movlb	0	; () banked
  7550  004278  6FB4               	movwf	logRun@byte3& (0+255),b
  7551                           
  7552                           ; BSR set to: 0
  7553                           ;EEPROM.c: 123: EEPROM_write(addr, byte3);
  7554  00427A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7555  00427E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7556  004282  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  7557  004286  ECA1  F023         	call	_EEPROM_write	;wreg free
  7558                           
  7559                           ;EEPROM.c: 124: addr++;
  7560  00428A  0100               	movlb	0	; () banked
  7561  00428C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7562  00428E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7563                           
  7564                           ; BSR set to: 0
  7565                           ;EEPROM.c: 127: for(int i = 0; i < 7; i++){
  7566  004290  0E00               	movlw	0
  7567  004292  0100               	movlb	0	; () banked
  7568  004294  6FB8               	movwf	(logRun@i+1)& (0+255),b
  7569  004296  0E00               	movlw	0
  7570  004298  6FB7               	movwf	logRun@i& (0+255),b
  7571                           
  7572                           ; BSR set to: 0
  7573  00429A  0100               	movlb	0	; () banked
  7574  00429C  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7575  00429E  D008               	goto	l10169
  7576  0042A0  0100               	movlb	0	; () banked
  7577  0042A2  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7578  0042A4  E128               	bnz	l1172
  7579  0042A6  0E07               	movlw	7
  7580  0042A8  0100               	movlb	0	; () banked
  7581  0042AA  5DB7               	subwf	logRun@i& (0+255),w,b
  7582  0042AC  B0D8               	btfsc	status,0,c
  7583  0042AE  D023               	goto	l1172
  7584  0042B0                     l10169:
  7585                           
  7586                           ; BSR set to: 0
  7587                           ;EEPROM.c: 128: unsigned char byte_i = startTime[i];
  7588  0042B0  90D8               	bcf	status,0,c
  7589  0042B2  0100               	movlb	0	; () banked
  7590  0042B4  35B7               	rlcf	logRun@i& (0+255),w,b
  7591  0042B6  6ED9               	movwf	fsr2l,c
  7592  0042B8  0100               	movlb	0	; () banked
  7593  0042BA  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  7594  0042BC  6EDA               	movwf	fsr2h,c
  7595  0042BE  0E0E               	movlw	low _startTime
  7596  0042C0  26D9               	addwf	fsr2l,f,c
  7597  0042C2  0E01               	movlw	high _startTime
  7598  0042C4  22DA               	addwfc	fsr2h,f,c
  7599  0042C6  50DF               	movf	indf2,w,c
  7600  0042C8  0100               	movlb	0	; () banked
  7601  0042CA  6FB5               	movwf	logRun@byte_i& (0+255),b
  7602                           
  7603                           ; BSR set to: 0
  7604                           ;EEPROM.c: 129: EEPROM_write(addr, byte_i);
  7605  0042CC  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7606  0042D0  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7607  0042D4  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  7608  0042D8  ECA1  F023         	call	_EEPROM_write	;wreg free
  7609                           
  7610                           ;EEPROM.c: 130: addr++;
  7611  0042DC  0100               	movlb	0	; () banked
  7612  0042DE  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7613  0042E0  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7614                           
  7615                           ; BSR set to: 0
  7616  0042E2  0100               	movlb	0	; () banked
  7617  0042E4  4BB7               	infsnz	logRun@i& (0+255),f,b
  7618  0042E6  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  7619                           
  7620                           ; BSR set to: 0
  7621  0042E8  0100               	movlb	0	; () banked
  7622  0042EA  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7623  0042EC  D7E1               	goto	l10169
  7624  0042EE  0100               	movlb	0	; () banked
  7625  0042F0  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7626  0042F2  E101               	bnz	u10180
  7627  0042F4  D7D8               	goto	L9
  7628  0042F6                     u10180:
  7629  0042F6                     l1172:
  7630                           
  7631                           ; BSR set to: 0
  7632                           ;EEPROM.c: 131: }
  7633                           ;EEPROM.c: 134: unsigned char byte11 = total_time;
  7634  0042F6  C0FA  F0B6         	movff	_total_time,logRun@byte11
  7635                           
  7636                           ; BSR set to: 0
  7637                           ;EEPROM.c: 135: EEPROM_write(addr, byte11);
  7638  0042FA  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7639  0042FE  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7640  004302  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  7641  004306  ECA1  F023         	call	_EEPROM_write	;wreg free
  7642  00430A  0012               	return		;funcret
  7643  00430C                     __end_of_logRun:
  7644                           	opt stack 0
  7645                           tblptru	equ	0xFF8
  7646                           tblptrh	equ	0xFF7
  7647                           tblptrl	equ	0xFF6
  7648                           tablat	equ	0xFF5
  7649                           prodh	equ	0xFF4
  7650                           prodl	equ	0xFF3
  7651                           intcon	equ	0xFF2
  7652                           intcon2	equ	0xFF1
  7653                           intcon3	equ	0xFF0
  7654                           postinc0	equ	0xFEE
  7655                           wreg	equ	0xFE8
  7656                           postdec1	equ	0xFE5
  7657                           fsr1l	equ	0xFE1
  7658                           indf2	equ	0xFDF
  7659                           postinc2	equ	0xFDE
  7660                           postdec2	equ	0xFDD
  7661                           fsr2h	equ	0xFDA
  7662                           fsr2l	equ	0xFD9
  7663                           status	equ	0xFD8
  7664                           
  7665 ;; *************** function _initUI *****************
  7666 ;; Defined at:
  7667 ;;		line 62 in file "UI.c"
  7668 ;; Parameters:    Size  Location     Type
  7669 ;;		None
  7670 ;; Auto vars:     Size  Location     Type
  7671 ;;		None
  7672 ;; Return value:  Size  Location     Type
  7673 ;;                  1    wreg      void 
  7674 ;; Registers used:
  7675 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7676 ;; Tracked objects:
  7677 ;;		On entry : 0/0
  7678 ;;		On exit  : 0/0
  7679 ;;		Unchanged: 0/0
  7680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7684 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7685 ;;Total ram usage:        0 bytes
  7686 ;; Hardware stack levels used:    1
  7687 ;; Hardware stack levels required when called:   12
  7688 ;; This function calls:
  7689 ;;		_change_state_to_menu_start
  7690 ;;		_loadRTC
  7691 ;; This function is called by:
  7692 ;;		_main
  7693 ;; This function uses a non-reentrant model
  7694 ;;
  7695                           
  7696                           	psect	text17
  7697  005B10                     __ptext17:
  7698                           	opt stack 0
  7699  005B10                     _initUI:
  7700                           	opt stack 18
  7701                           
  7702                           ;UI.c: 63: (INTCONbits.GIE = 1);
  7703                           
  7704                           ;incstack = 0
  7705  005B10  8EF2               	bsf	intcon,7,c	;volatile
  7706                           
  7707                           ;UI.c: 64: machine_state = UI_state;
  7708  005B12  0E00               	movlw	0
  7709  005B14  0100               	movlb	0	; () banked
  7710  005B16  6FFC               	movwf	_machine_state& (0+255),b
  7711                           
  7712                           ;UI.c: 65: logstate = 0;
  7713  005B18  0E00               	movlw	0
  7714  005B1A  0100               	movlb	0	; () banked
  7715  005B1C  6FF9               	movwf	(_logstate+1)& (0+255),b
  7716  005B1E  0E00               	movlw	0
  7717  005B20  6FF8               	movwf	_logstate& (0+255),b
  7718                           
  7719                           ; BSR set to: 0
  7720                           ;UI.c: 67: if(RTCflag){
  7721  005B22  0100               	movlb	0	; () banked
  7722  005B24  51E4               	movf	_RTCflag& (0+255),w,b
  7723  005B26  0100               	movlb	0	; () banked
  7724  005B28  11E5               	iorwf	(_RTCflag+1)& (0+255),w,b
  7725  005B2A  A4D8               	btfss	status,2,c
  7726                           
  7727                           ; BSR set to: 0
  7728                           ;UI.c: 68: loadRTC();
  7729  005B2C  EC3D  F028         	call	_loadRTC	;wreg free
  7730                           
  7731                           ;UI.c: 69: }
  7732                           ;UI.c: 71: change_state_to_menu_start();
  7733  005B30  ECA6  F02E         	call	_change_state_to_menu_start	;wreg free
  7734                           
  7735                           ;UI.c: 72: firstboot = 1;
  7736  005B34  0E00               	movlw	0
  7737  005B36  0101               	movlb	1	; () banked
  7738  005B38  6F3E               	movwf	(_firstboot+1)& (0+255),b
  7739  005B3A  0E01               	movlw	1
  7740  005B3C  6F3D               	movwf	_firstboot& (0+255),b
  7741                           
  7742                           ; BSR set to: 1
  7743  005B3E  0012               	return		;funcret
  7744  005B40                     __end_of_initUI:
  7745                           	opt stack 0
  7746                           tblptru	equ	0xFF8
  7747                           tblptrh	equ	0xFF7
  7748                           tblptrl	equ	0xFF6
  7749                           tablat	equ	0xFF5
  7750                           prodh	equ	0xFF4
  7751                           prodl	equ	0xFF3
  7752                           intcon	equ	0xFF2
  7753                           intcon2	equ	0xFF1
  7754                           intcon3	equ	0xFF0
  7755                           postinc0	equ	0xFEE
  7756                           wreg	equ	0xFE8
  7757                           postdec1	equ	0xFE5
  7758                           fsr1l	equ	0xFE1
  7759                           indf2	equ	0xFDF
  7760                           postinc2	equ	0xFDE
  7761                           postdec2	equ	0xFDD
  7762                           fsr2h	equ	0xFDA
  7763                           fsr2l	equ	0xFD9
  7764                           status	equ	0xFD8
  7765                           
  7766 ;; *************** function _loadRTC *****************
  7767 ;; Defined at:
  7768 ;;		line 28 in file "RTC.c"
  7769 ;; Parameters:    Size  Location     Type
  7770 ;;		None
  7771 ;; Auto vars:     Size  Location     Type
  7772 ;;  i               2   22[BANK0 ] int 
  7773 ;; Return value:  Size  Location     Type
  7774 ;;                  1    wreg      void 
  7775 ;; Registers used:
  7776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7777 ;; Tracked objects:
  7778 ;;		On entry : 0/0
  7779 ;;		On exit  : 0/0
  7780 ;;		Unchanged: 0/0
  7781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7783 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7784 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7785 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7786 ;;Total ram usage:        3 bytes
  7787 ;; Hardware stack levels used:    1
  7788 ;; Hardware stack levels required when called:    9
  7789 ;; This function calls:
  7790 ;;		_I2C_Master_Init
  7791 ;;		_I2C_Master_Start
  7792 ;;		_I2C_Master_Stop
  7793 ;;		_I2C_Master_Write
  7794 ;; This function is called by:
  7795 ;;		_initUI
  7796 ;; This function uses a non-reentrant model
  7797 ;;
  7798                           
  7799                           	psect	text18
  7800  00507A                     __ptext18:
  7801                           	opt stack 0
  7802  00507A                     _loadRTC:
  7803                           	opt stack 20
  7804                           
  7805                           ;RTC.c: 30: I2C_Master_Init(10000);
  7806                           
  7807                           ; BSR set to: 1
  7808                           ;incstack = 0
  7809  00507A  0E10               	movlw	16
  7810  00507C  0100               	movlb	0	; () banked
  7811  00507E  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  7812  005080  0E27               	movlw	39
  7813  005082  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  7814  005084  0E00               	movlw	0
  7815  005086  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  7816  005088  0E00               	movlw	0
  7817  00508A  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  7818  00508C  EC3E  F02B         	call	_I2C_Master_Init	;wreg free
  7819                           
  7820                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  7821  005090  9EF2               	bcf	intcon,7,c	;volatile
  7822                           
  7823                           ;RTC.c: 34: I2C_Master_Start();
  7824  005092  ECF7  F02F         	call	_I2C_Master_Start	;wreg free
  7825                           
  7826                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  7827  005096  0E00               	movlw	0
  7828  005098  0100               	movlb	0	; () banked
  7829  00509A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7830  00509C  0ED0               	movlw	208
  7831  00509E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7832  0050A0  ECE5  F02F         	call	_I2C_Master_Write	;wreg free
  7833                           
  7834                           ;RTC.c: 36: I2C_Master_Write(0x00);
  7835  0050A4  0E00               	movlw	0
  7836  0050A6  0100               	movlb	0	; () banked
  7837  0050A8  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7838  0050AA  0E00               	movlw	0
  7839  0050AC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7840  0050AE  ECE5  F02F         	call	_I2C_Master_Write	;wreg free
  7841                           
  7842                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  7843  0050B2  0E00               	movlw	0
  7844  0050B4  0100               	movlb	0	; () banked
  7845  0050B6  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  7846  0050B8  0E00               	movlw	0
  7847  0050BA  6F96               	movwf	loadRTC@i& (0+255),b
  7848  0050BC                     l7793:
  7849                           
  7850                           ; BSR set to: 0
  7851  0050BC  0100               	movlb	0	; () banked
  7852  0050BE  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  7853  0050C0  D008               	goto	l7797
  7854  0050C2  0100               	movlb	0	; () banked
  7855  0050C4  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  7856  0050C6  E11B               	bnz	l7803
  7857  0050C8  0E07               	movlw	7
  7858  0050CA  0100               	movlb	0	; () banked
  7859  0050CC  5D96               	subwf	loadRTC@i& (0+255),w,b
  7860  0050CE  B0D8               	btfsc	status,0,c
  7861  0050D0  D016               	goto	l7803
  7862  0050D2                     l7797:
  7863                           
  7864                           ; BSR set to: 0
  7865                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  7866  0050D2  0E1C               	movlw	low _time
  7867  0050D4  0100               	movlb	0	; () banked
  7868  0050D6  2596               	addwf	loadRTC@i& (0+255),w,b
  7869  0050D8  6ED9               	movwf	fsr2l,c
  7870  0050DA  0E01               	movlw	high _time
  7871  0050DC  0100               	movlb	0	; () banked
  7872  0050DE  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  7873  0050E0  6EDA               	movwf	fsr2h,c
  7874  0050E2  50DF               	movf	indf2,w,c
  7875  0050E4  0100               	movlb	0	; () banked
  7876  0050E6  6F95               	movwf	??_loadRTC& (0+255),b
  7877  0050E8  0100               	movlb	0	; () banked
  7878  0050EA  5195               	movf	??_loadRTC& (0+255),w,b
  7879  0050EC  0100               	movlb	0	; () banked
  7880  0050EE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7881  0050F0  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  7882  0050F2  ECE5  F02F         	call	_I2C_Master_Write	;wreg free
  7883  0050F6  0100               	movlb	0	; () banked
  7884  0050F8  4B96               	infsnz	loadRTC@i& (0+255),f,b
  7885  0050FA  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  7886  0050FC  D7DF               	goto	l7793
  7887  0050FE                     l7803:
  7888                           
  7889                           ; BSR set to: 0
  7890                           ;RTC.c: 39: }
  7891                           ;RTC.c: 40: I2C_Master_Stop();
  7892  0050FE  ECF3  F02F         	call	_I2C_Master_Stop	;wreg free
  7893                           
  7894                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  7895  005102  8EF2               	bsf	intcon,7,c	;volatile
  7896  005104  0012               	return		;funcret
  7897  005106                     __end_of_loadRTC:
  7898                           	opt stack 0
  7899                           tblptru	equ	0xFF8
  7900                           tblptrh	equ	0xFF7
  7901                           tblptrl	equ	0xFF6
  7902                           tablat	equ	0xFF5
  7903                           prodh	equ	0xFF4
  7904                           prodl	equ	0xFF3
  7905                           intcon	equ	0xFF2
  7906                           intcon2	equ	0xFF1
  7907                           intcon3	equ	0xFF0
  7908                           postinc0	equ	0xFEE
  7909                           wreg	equ	0xFE8
  7910                           postdec1	equ	0xFE5
  7911                           fsr1l	equ	0xFE1
  7912                           indf2	equ	0xFDF
  7913                           postinc2	equ	0xFDE
  7914                           postdec2	equ	0xFDD
  7915                           fsr2h	equ	0xFDA
  7916                           fsr2l	equ	0xFD9
  7917                           status	equ	0xFD8
  7918                           
  7919 ;; *************** function _I2C_Master_Init *****************
  7920 ;; Defined at:
  7921 ;;		line 15 in file "I2C.c"
  7922 ;; Parameters:    Size  Location     Type
  7923 ;;  c               4   13[BANK0 ] const unsigned long 
  7924 ;; Auto vars:     Size  Location     Type
  7925 ;;		None
  7926 ;; Return value:  Size  Location     Type
  7927 ;;                  1    wreg      void 
  7928 ;; Registers used:
  7929 ;;		wreg, status,2, status,0, cstack
  7930 ;; Tracked objects:
  7931 ;;		On entry : 0/0
  7932 ;;		On exit  : 0/0
  7933 ;;		Unchanged: 0/0
  7934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7935 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7937 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7938 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7939 ;;Total ram usage:        8 bytes
  7940 ;; Hardware stack levels used:    1
  7941 ;; Hardware stack levels required when called:    8
  7942 ;; This function calls:
  7943 ;;		___lldiv
  7944 ;; This function is called by:
  7945 ;;		_main
  7946 ;;		_loadRTC
  7947 ;; This function uses a non-reentrant model
  7948 ;;
  7949                           
  7950                           	psect	text19
  7951  00567C                     __ptext19:
  7952                           	opt stack 0
  7953  00567C                     _I2C_Master_Init:
  7954                           	opt stack 20
  7955                           
  7956                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  7957                           
  7958                           ;incstack = 0
  7959  00567C  0E00               	movlw	0
  7960  00567E  6EC7               	movwf	4039,c	;volatile
  7961                           
  7962                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  7963  005680  0E28               	movlw	40
  7964  005682  6EC6               	movwf	4038,c	;volatile
  7965                           
  7966                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  7967  005684  0E00               	movlw	0
  7968  005686  6EC5               	movwf	4037,c	;volatile
  7969                           
  7970                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  7971  005688  0E00               	movlw	0
  7972  00568A  0100               	movlb	0	; () banked
  7973  00568C  6F80               	movwf	___lldiv@dividend& (0+255),b
  7974  00568E  0E48               	movlw	72
  7975  005690  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  7976  005692  0EE8               	movlw	232
  7977  005694  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  7978  005696  0E01               	movlw	1
  7979  005698  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  7980  00569A  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  7981  00569E  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  7982  0056A2  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  7983  0056A6  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  7984  0056AA  0E02               	movlw	2
  7985  0056AC                     u6395:
  7986  0056AC  90D8               	bcf	status,0,c
  7987  0056AE  0100               	movlb	0	; () banked
  7988  0056B0  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  7989  0056B2  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  7990  0056B4  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  7991  0056B6  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  7992  0056B8  2EE8               	decfsz	wreg,f,c
  7993  0056BA  D7F8               	goto	u6395
  7994  0056BC  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  7995  0056C0  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  7996  0056C4  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  7997  0056C8  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  7998  0056CC  ECED  F026         	call	___lldiv	;wreg free
  7999  0056D0  0100               	movlb	0	; () banked
  8000  0056D2  0580               	decf	?___lldiv& (0+255),w,b
  8001  0056D4  6EC8               	movwf	4040,c	;volatile
  8002                           
  8003                           ; BSR set to: 0
  8004                           ;I2C.c: 22: TRISC3 = 1;
  8005  0056D6  8694               	bsf	3988,3,c	;volatile
  8006                           
  8007                           ; BSR set to: 0
  8008                           ;I2C.c: 23: TRISC4 = 1;
  8009  0056D8  8894               	bsf	3988,4,c	;volatile
  8010                           
  8011                           ; BSR set to: 0
  8012  0056DA  0012               	return		;funcret
  8013  0056DC                     __end_of_I2C_Master_Init:
  8014                           	opt stack 0
  8015                           tblptru	equ	0xFF8
  8016                           tblptrh	equ	0xFF7
  8017                           tblptrl	equ	0xFF6
  8018                           tablat	equ	0xFF5
  8019                           prodh	equ	0xFF4
  8020                           prodl	equ	0xFF3
  8021                           intcon	equ	0xFF2
  8022                           intcon2	equ	0xFF1
  8023                           intcon3	equ	0xFF0
  8024                           postinc0	equ	0xFEE
  8025                           wreg	equ	0xFE8
  8026                           postdec1	equ	0xFE5
  8027                           fsr1l	equ	0xFE1
  8028                           indf2	equ	0xFDF
  8029                           postinc2	equ	0xFDE
  8030                           postdec2	equ	0xFDD
  8031                           fsr2h	equ	0xFDA
  8032                           fsr2l	equ	0xFD9
  8033                           status	equ	0xFD8
  8034                           
  8035 ;; *************** function ___lldiv *****************
  8036 ;; Defined at:
  8037 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  8038 ;; Parameters:    Size  Location     Type
  8039 ;;  dividend        4    0[BANK0 ] unsigned long 
  8040 ;;  divisor         4    4[BANK0 ] unsigned long 
  8041 ;; Auto vars:     Size  Location     Type
  8042 ;;  quotient        4    8[BANK0 ] unsigned long 
  8043 ;;  counter         1   12[BANK0 ] unsigned char 
  8044 ;; Return value:  Size  Location     Type
  8045 ;;                  4    0[BANK0 ] unsigned long 
  8046 ;; Registers used:
  8047 ;;		wreg, status,2, status,0
  8048 ;; Tracked objects:
  8049 ;;		On entry : 0/0
  8050 ;;		On exit  : 0/0
  8051 ;;		Unchanged: 0/0
  8052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8053 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8054 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8056 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8057 ;;Total ram usage:       13 bytes
  8058 ;; Hardware stack levels used:    1
  8059 ;; Hardware stack levels required when called:    7
  8060 ;; This function calls:
  8061 ;;		Nothing
  8062 ;; This function is called by:
  8063 ;;		_I2C_Master_Init
  8064 ;; This function uses a non-reentrant model
  8065 ;;
  8066                           
  8067                           	psect	text20
  8068  004DDA                     __ptext20:
  8069                           	opt stack 0
  8070  004DDA                     ___lldiv:
  8071                           	opt stack 20
  8072                           
  8073                           ; BSR set to: 0
  8074                           ;incstack = 0
  8075  004DDA  0E00               	movlw	0
  8076  004DDC  0100               	movlb	0	; () banked
  8077  004DDE  6F88               	movwf	___lldiv@quotient& (0+255),b
  8078  004DE0  0E00               	movlw	0
  8079  004DE2  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  8080  004DE4  0E00               	movlw	0
  8081  004DE6  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  8082  004DE8  0E00               	movlw	0
  8083  004DEA  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  8084                           
  8085                           ; BSR set to: 0
  8086  004DEC  0100               	movlb	0	; () banked
  8087  004DEE  5184               	movf	___lldiv@divisor& (0+255),w,b
  8088  004DF0  0100               	movlb	0	; () banked
  8089  004DF2  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  8090  004DF4  0100               	movlb	0	; () banked
  8091  004DF6  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  8092  004DF8  0100               	movlb	0	; () banked
  8093  004DFA  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  8094  004DFC  B4D8               	btfsc	status,2,c
  8095  004DFE  D042               	goto	l1963
  8096                           
  8097                           ; BSR set to: 0
  8098  004E00  0E01               	movlw	1
  8099  004E02  0100               	movlb	0	; () banked
  8100  004E04  6F8C               	movwf	___lldiv@counter& (0+255),b
  8101  004E06  D008               	goto	l7117
  8102  004E08                     l7115:
  8103                           
  8104                           ; BSR set to: 0
  8105  004E08  0100               	movlb	0	; () banked
  8106  004E0A  90D8               	bcf	status,0,c
  8107  004E0C  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  8108  004E0E  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  8109  004E10  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  8110  004E12  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  8111  004E14  0100               	movlb	0	; () banked
  8112  004E16  2B8C               	incf	___lldiv@counter& (0+255),f,b
  8113  004E18                     l7117:
  8114                           
  8115                           ; BSR set to: 0
  8116  004E18  0100               	movlb	0	; () banked
  8117  004E1A  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  8118  004E1C  D7F5               	goto	l7115
  8119  004E1E                     l7119:
  8120                           
  8121                           ; BSR set to: 0
  8122  004E1E  0100               	movlb	0	; () banked
  8123  004E20  90D8               	bcf	status,0,c
  8124  004E22  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  8125  004E24  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  8126  004E26  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  8127  004E28  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  8128                           
  8129                           ; BSR set to: 0
  8130  004E2A  0100               	movlb	0	; () banked
  8131  004E2C  5184               	movf	___lldiv@divisor& (0+255),w,b
  8132  004E2E  0100               	movlb	0	; () banked
  8133  004E30  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  8134  004E32  0100               	movlb	0	; () banked
  8135  004E34  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8136  004E36  0100               	movlb	0	; () banked
  8137  004E38  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  8138  004E3A  0100               	movlb	0	; () banked
  8139  004E3C  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8140  004E3E  0100               	movlb	0	; () banked
  8141  004E40  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  8142  004E42  0100               	movlb	0	; () banked
  8143  004E44  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8144  004E46  0100               	movlb	0	; () banked
  8145  004E48  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  8146  004E4A  A0D8               	btfss	status,0,c
  8147  004E4C  D012               	goto	l7127
  8148                           
  8149                           ; BSR set to: 0
  8150  004E4E  0100               	movlb	0	; () banked
  8151  004E50  5184               	movf	___lldiv@divisor& (0+255),w,b
  8152  004E52  0100               	movlb	0	; () banked
  8153  004E54  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  8154  004E56  0100               	movlb	0	; () banked
  8155  004E58  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8156  004E5A  0100               	movlb	0	; () banked
  8157  004E5C  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  8158  004E5E  0100               	movlb	0	; () banked
  8159  004E60  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8160  004E62  0100               	movlb	0	; () banked
  8161  004E64  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  8162  004E66  0100               	movlb	0	; () banked
  8163  004E68  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8164  004E6A  0100               	movlb	0	; () banked
  8165  004E6C  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  8166                           
  8167                           ; BSR set to: 0
  8168  004E6E  0100               	movlb	0	; () banked
  8169  004E70  8188               	bsf	___lldiv@quotient& (0+255),0,b
  8170  004E72                     l7127:
  8171                           
  8172                           ; BSR set to: 0
  8173  004E72  0100               	movlb	0	; () banked
  8174  004E74  90D8               	bcf	status,0,c
  8175  004E76  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  8176  004E78  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  8177  004E7A  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  8178  004E7C  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  8179                           
  8180                           ; BSR set to: 0
  8181  004E7E  0100               	movlb	0	; () banked
  8182  004E80  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  8183  004E82  D7CD               	goto	l7119
  8184  004E84                     l1963:
  8185                           
  8186                           ; BSR set to: 0
  8187  004E84  C088  F080         	movff	___lldiv@quotient,?___lldiv
  8188  004E88  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  8189  004E8C  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  8190  004E90  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  8191                           
  8192                           ; BSR set to: 0
  8193  004E94  0012               	return		;funcret
  8194  004E96                     __end_of___lldiv:
  8195                           	opt stack 0
  8196                           tblptru	equ	0xFF8
  8197                           tblptrh	equ	0xFF7
  8198                           tblptrl	equ	0xFF6
  8199                           tablat	equ	0xFF5
  8200                           prodh	equ	0xFF4
  8201                           prodl	equ	0xFF3
  8202                           intcon	equ	0xFF2
  8203                           intcon2	equ	0xFF1
  8204                           intcon3	equ	0xFF0
  8205                           postinc0	equ	0xFEE
  8206                           wreg	equ	0xFE8
  8207                           postdec1	equ	0xFE5
  8208                           fsr1l	equ	0xFE1
  8209                           indf2	equ	0xFDF
  8210                           postinc2	equ	0xFDE
  8211                           postdec2	equ	0xFDD
  8212                           fsr2h	equ	0xFDA
  8213                           fsr2l	equ	0xFD9
  8214                           status	equ	0xFD8
  8215                           
  8216 ;; *************** function _change_state_to_menu_start *****************
  8217 ;; Defined at:
  8218 ;;		line 477 in file "UI.c"
  8219 ;; Parameters:    Size  Location     Type
  8220 ;;		None
  8221 ;; Auto vars:     Size  Location     Type
  8222 ;;		None
  8223 ;; Return value:  Size  Location     Type
  8224 ;;                  1    wreg      void 
  8225 ;; Registers used:
  8226 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8227 ;; Tracked objects:
  8228 ;;		On entry : 0/0
  8229 ;;		On exit  : 0/0
  8230 ;;		Unchanged: 0/0
  8231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8235 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8236 ;;Total ram usage:        0 bytes
  8237 ;; Hardware stack levels used:    1
  8238 ;; Hardware stack levels required when called:   11
  8239 ;; This function calls:
  8240 ;;		_lcdInst
  8241 ;;		_printRTC
  8242 ;;		_printf
  8243 ;; This function is called by:
  8244 ;;		_initUI
  8245 ;; This function uses a non-reentrant model
  8246 ;;
  8247                           
  8248                           	psect	text21
  8249  005D4C                     __ptext21:
  8250                           	opt stack 0
  8251  005D4C                     _change_state_to_menu_start:
  8252                           	opt stack 18
  8253                           
  8254                           ;UI.c: 478: cur_state = 0;
  8255                           
  8256                           ; BSR set to: 0
  8257                           ;incstack = 0
  8258  005D4C  0E00               	movlw	0
  8259  005D4E  0100               	movlb	0	; () banked
  8260  005D50  6FE7               	movwf	(_cur_state+1)& (0+255),b
  8261  005D52  0E00               	movlw	0
  8262  005D54  6FE6               	movwf	_cur_state& (0+255),b
  8263                           
  8264                           ; BSR set to: 0
  8265                           ;UI.c: 480: lcdInst(0b10000000);;
  8266  005D56  0E80               	movlw	128
  8267  005D58  ECD1  F02F         	call	_lcdInst
  8268                           
  8269                           ;UI.c: 481: printRTC();
  8270  005D5C  EC52  F019         	call	_printRTC	;wreg free
  8271                           
  8272                           ;UI.c: 482: lcdInst(0b11000000);;
  8273  005D60  0EC0               	movlw	192
  8274  005D62  ECD1  F02F         	call	_lcdInst
  8275                           
  8276                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  8277  005D66  0E06               	movlw	low STR_30
  8278  005D68  0100               	movlb	0	; () banked
  8279  005D6A  6F8E               	movwf	printf@f& (0+255),b
  8280  005D6C  0EFE               	movlw	high STR_30
  8281  005D6E  0100               	movlb	0	; () banked
  8282  005D70  6F8F               	movwf	(printf@f+1)& (0+255),b
  8283  005D72  EC67  F00E         	call	_printf	;wreg free
  8284  005D76  0012               	return		;funcret
  8285  005D78                     __end_of_change_state_to_menu_start:
  8286                           	opt stack 0
  8287                           tblptru	equ	0xFF8
  8288                           tblptrh	equ	0xFF7
  8289                           tblptrl	equ	0xFF6
  8290                           tablat	equ	0xFF5
  8291                           prodh	equ	0xFF4
  8292                           prodl	equ	0xFF3
  8293                           intcon	equ	0xFF2
  8294                           intcon2	equ	0xFF1
  8295                           intcon3	equ	0xFF0
  8296                           postinc0	equ	0xFEE
  8297                           wreg	equ	0xFE8
  8298                           postdec1	equ	0xFE5
  8299                           fsr1l	equ	0xFE1
  8300                           indf2	equ	0xFDF
  8301                           postinc2	equ	0xFDE
  8302                           postdec2	equ	0xFDD
  8303                           fsr2h	equ	0xFDA
  8304                           fsr2l	equ	0xFD9
  8305                           status	equ	0xFD8
  8306                           
  8307 ;; *************** function _initTime *****************
  8308 ;; Defined at:
  8309 ;;		line 17 in file "RTC.c"
  8310 ;; Parameters:    Size  Location     Type
  8311 ;;  s               1    wreg     unsigned char 
  8312 ;;  m               1    0[BANK0 ] unsigned char 
  8313 ;;  h               1    1[BANK0 ] unsigned char 
  8314 ;;  w               1    2[BANK0 ] unsigned char 
  8315 ;;  DD              1    3[BANK0 ] unsigned char 
  8316 ;;  MM              1    4[BANK0 ] unsigned char 
  8317 ;;  YY              1    5[BANK0 ] unsigned char 
  8318 ;; Auto vars:     Size  Location     Type
  8319 ;;  s               1    6[BANK0 ] unsigned char 
  8320 ;; Return value:  Size  Location     Type
  8321 ;;                  1    wreg      void 
  8322 ;; Registers used:
  8323 ;;		wreg
  8324 ;; Tracked objects:
  8325 ;;		On entry : 0/0
  8326 ;;		On exit  : 0/0
  8327 ;;		Unchanged: 0/0
  8328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8329 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8330 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8332 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8333 ;;Total ram usage:        7 bytes
  8334 ;; Hardware stack levels used:    1
  8335 ;; Hardware stack levels required when called:    7
  8336 ;; This function calls:
  8337 ;;		Nothing
  8338 ;; This function is called by:
  8339 ;;		_main
  8340 ;; This function uses a non-reentrant model
  8341 ;;
  8342                           
  8343                           	psect	text22
  8344  005EB0                     __ptext22:
  8345                           	opt stack 0
  8346  005EB0                     _initTime:
  8347                           	opt stack 23
  8348                           
  8349                           ;incstack = 0
  8350                           ;initTime@s stored from wreg
  8351  005EB0  0100               	movlb	0	; () banked
  8352  005EB2  6F86               	movwf	initTime@s& (0+255),b
  8353                           
  8354                           ;RTC.c: 19: time[0] = s;
  8355  005EB4  C086  F11C         	movff	initTime@s,_time
  8356                           
  8357                           ;RTC.c: 20: time[1] = m;
  8358  005EB8  C080  F11D         	movff	initTime@m,_time+1
  8359                           
  8360                           ;RTC.c: 21: time[2] = h;
  8361  005EBC  C081  F11E         	movff	initTime@h,_time+2
  8362                           
  8363                           ;RTC.c: 22: time[3] = w;
  8364  005EC0  C082  F11F         	movff	initTime@w,_time+3
  8365                           
  8366                           ;RTC.c: 23: time[4] = DD;
  8367  005EC4  C083  F120         	movff	initTime@DD,_time+4
  8368                           
  8369                           ;RTC.c: 24: time[5] = MM;
  8370  005EC8  C084  F121         	movff	initTime@MM,_time+5
  8371                           
  8372                           ;RTC.c: 25: time[6] = YY;
  8373  005ECC  C085  F122         	movff	initTime@YY,_time+6
  8374  005ED0  0012               	return		;funcret
  8375  005ED2                     __end_of_initTime:
  8376                           	opt stack 0
  8377                           tblptru	equ	0xFF8
  8378                           tblptrh	equ	0xFF7
  8379                           tblptrl	equ	0xFF6
  8380                           tablat	equ	0xFF5
  8381                           prodh	equ	0xFF4
  8382                           prodl	equ	0xFF3
  8383                           intcon	equ	0xFF2
  8384                           intcon2	equ	0xFF1
  8385                           intcon3	equ	0xFF0
  8386                           postinc0	equ	0xFEE
  8387                           wreg	equ	0xFE8
  8388                           postdec1	equ	0xFE5
  8389                           fsr1l	equ	0xFE1
  8390                           indf2	equ	0xFDF
  8391                           postinc2	equ	0xFDE
  8392                           postdec2	equ	0xFDD
  8393                           fsr2h	equ	0xFDA
  8394                           fsr2l	equ	0xFD9
  8395                           status	equ	0xFD8
  8396                           
  8397 ;; *************** function _initLCD *****************
  8398 ;; Defined at:
  8399 ;;		line 50 in file "lcd.c"
  8400 ;; Parameters:    Size  Location     Type
  8401 ;;		None
  8402 ;; Auto vars:     Size  Location     Type
  8403 ;;		None
  8404 ;; Return value:  Size  Location     Type
  8405 ;;                  1    wreg      void 
  8406 ;; Registers used:
  8407 ;;		wreg, status,2, status,0, cstack
  8408 ;; Tracked objects:
  8409 ;;		On entry : 0/0
  8410 ;;		On exit  : 0/0
  8411 ;;		Unchanged: 0/0
  8412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8415 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8416 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8417 ;;Total ram usage:        1 bytes
  8418 ;; Hardware stack levels used:    1
  8419 ;; Hardware stack levels required when called:    9
  8420 ;; This function calls:
  8421 ;;		_lcdInst
  8422 ;; This function is called by:
  8423 ;;		_main
  8424 ;; This function uses a non-reentrant model
  8425 ;;
  8426                           
  8427                           	psect	text23
  8428  0058CA                     __ptext23:
  8429                           	opt stack 0
  8430  0058CA                     _initLCD:
  8431                           	opt stack 21
  8432                           
  8433                           ;lcd.c: 51: _delay((unsigned long)((15)*(32000000/4000.0)));
  8434                           
  8435                           ;incstack = 0
  8436  0058CA  0E9C               	movlw	156
  8437  0058CC  0100               	movlb	0	; () banked
  8438  0058CE  6F83               	movwf	??_initLCD& (0+255),b
  8439  0058D0  0ED7               	movlw	215
  8440  0058D2                     u11027:
  8441  0058D2  2EE8               	decfsz	wreg,f,c
  8442  0058D4  D7FE               	bra	u11027
  8443  0058D6  2F83               	decfsz	??_initLCD& (0+255),f,b
  8444  0058D8  D7FC               	bra	u11027
  8445                           
  8446                           ;lcd.c: 52: lcdInst(0b00110011);
  8447  0058DA  0E33               	movlw	51
  8448  0058DC  ECD1  F02F         	call	_lcdInst
  8449                           
  8450                           ;lcd.c: 53: lcdInst(0b00110010);
  8451  0058E0  0E32               	movlw	50
  8452  0058E2  ECD1  F02F         	call	_lcdInst
  8453                           
  8454                           ;lcd.c: 55: lcdInst(0b00101000);
  8455  0058E6  0E28               	movlw	40
  8456  0058E8  ECD1  F02F         	call	_lcdInst
  8457                           
  8458                           ;lcd.c: 56: lcdInst(0b00001100);
  8459  0058EC  0E0C               	movlw	12
  8460  0058EE  ECD1  F02F         	call	_lcdInst
  8461                           
  8462                           ;lcd.c: 57: lcdInst(0b00000110);
  8463  0058F2  0E06               	movlw	6
  8464  0058F4  ECD1  F02F         	call	_lcdInst
  8465                           
  8466                           ;lcd.c: 58: lcdInst(0b00000001);
  8467  0058F8  0E01               	movlw	1
  8468  0058FA  ECD1  F02F         	call	_lcdInst
  8469                           
  8470                           ;lcd.c: 59: _delay((unsigned long)((15)*(32000000/4000.0)));
  8471  0058FE  0E9C               	movlw	156
  8472  005900  0100               	movlb	0	; () banked
  8473  005902  6F83               	movwf	??_initLCD& (0+255),b
  8474  005904  0ED7               	movlw	215
  8475  005906                     u11037:
  8476  005906  2EE8               	decfsz	wreg,f,c
  8477  005908  D7FE               	bra	u11037
  8478  00590A  2F83               	decfsz	??_initLCD& (0+255),f,b
  8479  00590C  D7FC               	bra	u11037
  8480  00590E  0012               	return		;funcret
  8481  005910                     __end_of_initLCD:
  8482                           	opt stack 0
  8483                           tblptru	equ	0xFF8
  8484                           tblptrh	equ	0xFF7
  8485                           tblptrl	equ	0xFF6
  8486                           tablat	equ	0xFF5
  8487                           prodh	equ	0xFF4
  8488                           prodl	equ	0xFF3
  8489                           intcon	equ	0xFF2
  8490                           intcon2	equ	0xFF1
  8491                           intcon3	equ	0xFF0
  8492                           postinc0	equ	0xFEE
  8493                           wreg	equ	0xFE8
  8494                           postdec1	equ	0xFE5
  8495                           fsr1l	equ	0xFE1
  8496                           indf2	equ	0xFDF
  8497                           postinc2	equ	0xFDE
  8498                           postdec2	equ	0xFDD
  8499                           fsr2h	equ	0xFDA
  8500                           fsr2l	equ	0xFD9
  8501                           status	equ	0xFD8
  8502                           
  8503 ;; *************** function _initEEPROM *****************
  8504 ;; Defined at:
  8505 ;;		line 32 in file "EEPROM.c"
  8506 ;; Parameters:    Size  Location     Type
  8507 ;;		None
  8508 ;; Auto vars:     Size  Location     Type
  8509 ;;		None
  8510 ;; Return value:  Size  Location     Type
  8511 ;;                  1    wreg      void 
  8512 ;; Registers used:
  8513 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8514 ;; Tracked objects:
  8515 ;;		On entry : 0/0
  8516 ;;		On exit  : 0/0
  8517 ;;		Unchanged: 0/0
  8518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8523 ;;Total ram usage:        0 bytes
  8524 ;; Hardware stack levels used:    1
  8525 ;; Hardware stack levels required when called:   11
  8526 ;; This function calls:
  8527 ;;		_EEPROM_write
  8528 ;; This function is called by:
  8529 ;;		_main
  8530 ;; This function uses a non-reentrant model
  8531 ;;
  8532                           
  8533                           	psect	text24
  8534  005F40                     __ptext24:
  8535                           	opt stack 0
  8536  005F40                     _initEEPROM:
  8537                           	opt stack 19
  8538                           
  8539                           ;EEPROM.c: 33: EEPROM_write(0, 0x01);
  8540                           
  8541                           ;incstack = 0
  8542  005F40  0E00               	movlw	0
  8543  005F42  0100               	movlb	0	; () banked
  8544  005F44  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  8545  005F46  0E00               	movlw	0
  8546  005F48  6FAB               	movwf	EEPROM_write@address& (0+255),b
  8547  005F4A  0E01               	movlw	1
  8548  005F4C  0100               	movlb	0	; () banked
  8549  005F4E  6FAD               	movwf	EEPROM_write@data& (0+255),b
  8550  005F50  ECA1  F023         	call	_EEPROM_write	;wreg free
  8551  005F54  0012               	return		;funcret
  8552  005F56                     __end_of_initEEPROM:
  8553                           	opt stack 0
  8554                           tblptru	equ	0xFF8
  8555                           tblptrh	equ	0xFF7
  8556                           tblptrl	equ	0xFF6
  8557                           tablat	equ	0xFF5
  8558                           prodh	equ	0xFF4
  8559                           prodl	equ	0xFF3
  8560                           intcon	equ	0xFF2
  8561                           intcon2	equ	0xFF1
  8562                           intcon3	equ	0xFF0
  8563                           postinc0	equ	0xFEE
  8564                           wreg	equ	0xFE8
  8565                           postdec1	equ	0xFE5
  8566                           fsr1l	equ	0xFE1
  8567                           indf2	equ	0xFDF
  8568                           postinc2	equ	0xFDE
  8569                           postdec2	equ	0xFDD
  8570                           fsr2h	equ	0xFDA
  8571                           fsr2l	equ	0xFD9
  8572                           status	equ	0xFD8
  8573                           
  8574 ;; *************** function _EEPROM_write *****************
  8575 ;; Defined at:
  8576 ;;		line 36 in file "EEPROM.c"
  8577 ;; Parameters:    Size  Location     Type
  8578 ;;  address         2   43[BANK0 ] unsigned short 
  8579 ;;  data            1   45[BANK0 ] unsigned char 
  8580 ;; Auto vars:     Size  Location     Type
  8581 ;;  i               1   48[BANK0 ] unsigned char 
  8582 ;;  i               1   47[BANK0 ] unsigned char 
  8583 ;; Return value:  Size  Location     Type
  8584 ;;                  1    wreg      void 
  8585 ;; Registers used:
  8586 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8587 ;; Tracked objects:
  8588 ;;		On entry : 0/0
  8589 ;;		On exit  : 0/0
  8590 ;;		Unchanged: 0/0
  8591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8592 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8593 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8594 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8595 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8596 ;;Total ram usage:        6 bytes
  8597 ;; Hardware stack levels used:    1
  8598 ;; Hardware stack levels required when called:   10
  8599 ;; This function calls:
  8600 ;;		_EEPROM_read
  8601 ;;		_lcdInst
  8602 ;;		_printf
  8603 ;; This function is called by:
  8604 ;;		_Loading
  8605 ;;		_initEEPROM
  8606 ;;		_logRun
  8607 ;; This function uses a non-reentrant model
  8608 ;;
  8609                           
  8610                           	psect	text25
  8611  004742                     __ptext25:
  8612                           	opt stack 0
  8613  004742                     _EEPROM_write:
  8614                           	opt stack 18
  8615                           
  8616                           ;EEPROM.c: 37: EECON1bits.WREN = 1;
  8617                           
  8618                           ;incstack = 0
  8619  004742  84A6               	bsf	4006,2,c	;volatile
  8620                           
  8621                           ;EEPROM.c: 40: EEADRH = (unsigned char)(address >> 8);
  8622  004744  0100               	movlb	0	; () banked
  8623  004746  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  8624  004748  6EAA               	movwf	4010,c	;volatile
  8625                           
  8626                           ; BSR set to: 0
  8627                           ;EEPROM.c: 41: EEADR = (unsigned char)address;
  8628  00474A  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  8629                           
  8630                           ; BSR set to: 0
  8631                           ;EEPROM.c: 43: EEDATA = data;
  8632  00474E  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  8633                           
  8634                           ; BSR set to: 0
  8635                           ;EEPROM.c: 44: EECON1bits.EEPGD = 0;
  8636  004752  9EA6               	bcf	4006,7,c	;volatile
  8637                           
  8638                           ; BSR set to: 0
  8639                           ;EEPROM.c: 45: EECON1bits.CFGS = 0;
  8640  004754  9CA6               	bcf	4006,6,c	;volatile
  8641                           
  8642                           ; BSR set to: 0
  8643                           ;EEPROM.c: 47: (INTCONbits.GIE = 0);
  8644  004756  9EF2               	bcf	intcon,7,c	;volatile
  8645                           
  8646                           ;EEPROM.c: 49: EECON2 = 0x55;
  8647  004758  0E55               	movlw	85
  8648  00475A  6EA7               	movwf	4007,c	;volatile
  8649                           
  8650                           ;EEPROM.c: 50: EECON2 = 0x0AA;
  8651  00475C  0EAA               	movlw	170
  8652  00475E  6EA7               	movwf	4007,c	;volatile
  8653                           
  8654                           ; BSR set to: 0
  8655                           ;EEPROM.c: 51: EECON1bits.WR = 1;
  8656  004760  82A6               	bsf	4006,1,c	;volatile
  8657                           
  8658                           ; BSR set to: 0
  8659                           ;EEPROM.c: 52: (INTCONbits.GIE = 1);
  8660  004762  8EF2               	bsf	intcon,7,c	;volatile
  8661  004764                     l1150:
  8662  004764  A8A1               	btfss	4001,4,c	;volatile
  8663  004766  D7FE               	goto	l1150
  8664                           
  8665                           ;EEPROM.c: 57: PIR2bits.EEIF = 0;
  8666  004768  98A1               	bcf	4001,4,c	;volatile
  8667                           
  8668                           ;EEPROM.c: 58: EECON1bits.WREN = 0;
  8669  00476A  94A6               	bcf	4006,2,c	;volatile
  8670                           
  8671                           ;EEPROM.c: 61: if(debug){
  8672  00476C  0101               	movlb	1	; () banked
  8673  00476E  512F               	movf	_debug& (0+255),w,b
  8674  004770  0101               	movlb	1	; () banked
  8675  004772  1130               	iorwf	(_debug+1)& (0+255),w,b
  8676  004774  B4D8               	btfsc	status,2,c
  8677  004776  0012               	return	
  8678                           
  8679                           ; BSR set to: 1
  8680                           ;EEPROM.c: 62: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8681  004778  0E01               	movlw	1
  8682  00477A  ECD1  F02F         	call	_lcdInst
  8683  00477E  0E68               	movlw	104
  8684  004780  0100               	movlb	0	; () banked
  8685  004782  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8686  004784  0EE4               	movlw	228
  8687  004786                     u11047:
  8688  004786  2EE8               	decfsz	wreg,f,c
  8689  004788  D7FE               	bra	u11047
  8690  00478A  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8691  00478C  D7FC               	bra	u11047
  8692  00478E  F000               	nop	
  8693                           
  8694                           ;EEPROM.c: 63: lcdInst(0b10000000);;
  8695  004790  0E80               	movlw	128
  8696  004792  ECD1  F02F         	call	_lcdInst
  8697                           
  8698                           ;EEPROM.c: 64: if(EEPROM_read(address)==data){
  8699  004796  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  8700  00479A  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  8701  00479E  EC94  F02F         	call	_EEPROM_read	;wreg free
  8702  0047A2  0100               	movlb	0	; () banked
  8703  0047A4  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  8704  0047A6  A4D8               	btfss	status,2,c
  8705  0047A8  D024               	goto	l7565
  8706                           
  8707                           ; BSR set to: 0
  8708                           ;EEPROM.c: 65: printf("(data: %u, addr: %u)", data, address);
  8709  0047AA  0EDA               	movlw	low STR_66
  8710  0047AC  0100               	movlb	0	; () banked
  8711  0047AE  6F8E               	movwf	printf@f& (0+255),b
  8712  0047B0  0EFA               	movlw	high STR_66
  8713  0047B2  0100               	movlb	0	; () banked
  8714  0047B4  6F8F               	movwf	(printf@f+1)& (0+255),b
  8715  0047B6  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  8716  0047BA  0100               	movlb	0	; () banked
  8717  0047BC  6B91               	clrf	(?_printf+3)& (0+255),b
  8718  0047BE  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  8719  0047C2  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  8720  0047C6  EC67  F00E         	call	_printf	;wreg free
  8721                           
  8722                           ;EEPROM.c: 66: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  8723  0047CA  0E00               	movlw	0
  8724  0047CC  0100               	movlb	0	; () banked
  8725  0047CE  6FAF               	movwf	EEPROM_write@i& (0+255),b
  8726  0047D0                     l7557:
  8727                           
  8728                           ; BSR set to: 0
  8729  0047D0  0E63               	movlw	99
  8730  0047D2  0100               	movlb	0	; () banked
  8731  0047D4  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  8732  0047D6  D001               	goto	l7561
  8733  0047D8  0012               	return	
  8734  0047DA                     l7561:
  8735                           
  8736                           ; BSR set to: 0
  8737  0047DA  0E68               	movlw	104
  8738  0047DC  0100               	movlb	0	; () banked
  8739  0047DE  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8740  0047E0  0EE4               	movlw	228
  8741  0047E2                     u11057:
  8742  0047E2  2EE8               	decfsz	wreg,f,c
  8743  0047E4  D7FE               	bra	u11057
  8744  0047E6  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8745  0047E8  D7FC               	bra	u11057
  8746  0047EA  F000               	nop	
  8747  0047EC  0100               	movlb	0	; () banked
  8748  0047EE  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  8749  0047F0  D7EF               	goto	l7557
  8750  0047F2                     l7565:
  8751                           
  8752                           ; BSR set to: 0
  8753                           ;EEPROM.c: 68: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  8754  0047F2  0EBC               	movlw	low STR_67
  8755  0047F4  0100               	movlb	0	; () banked
  8756  0047F6  6F8E               	movwf	printf@f& (0+255),b
  8757  0047F8  0EFF               	movlw	high STR_67
  8758  0047FA  0100               	movlb	0	; () banked
  8759  0047FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  8760  0047FE  EC67  F00E         	call	_printf	;wreg free
  8761  004802  0E00               	movlw	0
  8762  004804  0100               	movlb	0	; () banked
  8763  004806  6FB0               	movwf	EEPROM_write@i_1413& (0+255),b
  8764  004808                     l7569:
  8765                           
  8766                           ; BSR set to: 0
  8767  004808  0E63               	movlw	99
  8768  00480A  0100               	movlb	0	; () banked
  8769  00480C  65B0               	cpfsgt	EEPROM_write@i_1413& (0+255),b
  8770  00480E  D001               	goto	l7573
  8771  004810  0012               	return	
  8772  004812                     l7573:
  8773                           
  8774                           ; BSR set to: 0
  8775  004812  0E68               	movlw	104
  8776  004814  0100               	movlb	0	; () banked
  8777  004816  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8778  004818  0EE4               	movlw	228
  8779  00481A                     u11067:
  8780  00481A  2EE8               	decfsz	wreg,f,c
  8781  00481C  D7FE               	bra	u11067
  8782  00481E  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8783  004820  D7FC               	bra	u11067
  8784  004822  F000               	nop	
  8785  004824  0100               	movlb	0	; () banked
  8786  004826  2BB0               	incf	EEPROM_write@i_1413& (0+255),f,b
  8787  004828  D7EF               	goto	l7569
  8788  00482A                     __end_of_EEPROM_write:
  8789                           	opt stack 0
  8790                           tblptru	equ	0xFF8
  8791                           tblptrh	equ	0xFF7
  8792                           tblptrl	equ	0xFF6
  8793                           tablat	equ	0xFF5
  8794                           prodh	equ	0xFF4
  8795                           prodl	equ	0xFF3
  8796                           intcon	equ	0xFF2
  8797                           intcon2	equ	0xFF1
  8798                           intcon3	equ	0xFF0
  8799                           postinc0	equ	0xFEE
  8800                           wreg	equ	0xFE8
  8801                           postdec1	equ	0xFE5
  8802                           fsr1l	equ	0xFE1
  8803                           indf2	equ	0xFDF
  8804                           postinc2	equ	0xFDE
  8805                           postdec2	equ	0xFDD
  8806                           fsr2h	equ	0xFDA
  8807                           fsr2l	equ	0xFD9
  8808                           status	equ	0xFD8
  8809                           
  8810 ;; *************** function _EEPROM_read *****************
  8811 ;; Defined at:
  8812 ;;		line 72 in file "EEPROM.c"
  8813 ;; Parameters:    Size  Location     Type
  8814 ;;  address         2    0[BANK0 ] unsigned short 
  8815 ;; Auto vars:     Size  Location     Type
  8816 ;;		None
  8817 ;; Return value:  Size  Location     Type
  8818 ;;                  1    wreg      unsigned char 
  8819 ;; Registers used:
  8820 ;;		wreg, status,2
  8821 ;; Tracked objects:
  8822 ;;		On entry : 0/0
  8823 ;;		On exit  : 0/0
  8824 ;;		Unchanged: 0/0
  8825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8826 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8829 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8830 ;;Total ram usage:        2 bytes
  8831 ;; Hardware stack levels used:    1
  8832 ;; Hardware stack levels required when called:    7
  8833 ;; This function calls:
  8834 ;;		Nothing
  8835 ;; This function is called by:
  8836 ;;		_Loading
  8837 ;;		_EEPROM_write
  8838 ;;		_logRun
  8839 ;; This function uses a non-reentrant model
  8840 ;;
  8841                           
  8842                           	psect	text26
  8843  005F28                     __ptext26:
  8844                           	opt stack 0
  8845  005F28                     _EEPROM_read:
  8846                           	opt stack 20
  8847                           
  8848                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
  8849                           
  8850                           ;incstack = 0
  8851  005F28  0100               	movlb	0	; () banked
  8852  005F2A  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  8853  005F2C  6EAA               	movwf	4010,c	;volatile
  8854                           
  8855                           ; BSR set to: 0
  8856                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
  8857  005F2E  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  8858                           
  8859                           ; BSR set to: 0
  8860                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
  8861  005F32  9EA6               	bcf	4006,7,c	;volatile
  8862                           
  8863                           ; BSR set to: 0
  8864                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
  8865  005F34  9CA6               	bcf	4006,6,c	;volatile
  8866                           
  8867                           ; BSR set to: 0
  8868                           ;EEPROM.c: 79: EECON1bits.RD = 1;
  8869  005F36  80A6               	bsf	4006,0,c	;volatile
  8870  005F38                     l1163:
  8871  005F38  B0A6               	btfsc	4006,0,c	;volatile
  8872  005F3A  D7FE               	goto	l1163
  8873                           
  8874                           ;EEPROM.c: 85: return EEDATA;
  8875  005F3C  50A8               	movf	4008,w,c	;volatile
  8876  005F3E  0012               	return	
  8877  005F40                     __end_of_EEPROM_read:
  8878                           	opt stack 0
  8879                           tblptru	equ	0xFF8
  8880                           tblptrh	equ	0xFF7
  8881                           tblptrl	equ	0xFF6
  8882                           tablat	equ	0xFF5
  8883                           prodh	equ	0xFF4
  8884                           prodl	equ	0xFF3
  8885                           intcon	equ	0xFF2
  8886                           intcon2	equ	0xFF1
  8887                           intcon3	equ	0xFF0
  8888                           postinc0	equ	0xFEE
  8889                           wreg	equ	0xFE8
  8890                           postdec1	equ	0xFE5
  8891                           fsr1l	equ	0xFE1
  8892                           indf2	equ	0xFDF
  8893                           postinc2	equ	0xFDE
  8894                           postdec2	equ	0xFDD
  8895                           fsr2h	equ	0xFDA
  8896                           fsr2l	equ	0xFD9
  8897                           status	equ	0xFD8
  8898                           
  8899 ;; *************** function _UI *****************
  8900 ;; Defined at:
  8901 ;;		line 76 in file "UI.c"
  8902 ;; Parameters:    Size  Location     Type
  8903 ;;		None
  8904 ;; Auto vars:     Size  Location     Type
  8905 ;;  i               1   73[BANK0 ] unsigned char 
  8906 ;;  i               1   85[BANK0 ] unsigned char 
  8907 ;;  i               1   84[BANK0 ] unsigned char 
  8908 ;;  i               1   83[BANK0 ] unsigned char 
  8909 ;;  i               1   82[BANK0 ] unsigned char 
  8910 ;;  i               1   81[BANK0 ] unsigned char 
  8911 ;;  i               1   80[BANK0 ] unsigned char 
  8912 ;;  i               1   79[BANK0 ] unsigned char 
  8913 ;;  i               1   78[BANK0 ] unsigned char 
  8914 ;;  i               1   77[BANK0 ] unsigned char 
  8915 ;;  i               1   76[BANK0 ] unsigned char 
  8916 ;;  i               1   75[BANK0 ] unsigned char 
  8917 ;;  i               1   74[BANK0 ] unsigned char 
  8918 ;;  month           4   86[BANK0 ] unsigned char [4]
  8919 ;;  i               1   72[BANK0 ] unsigned char 
  8920 ;; Return value:  Size  Location     Type
  8921 ;;                  1    wreg      void 
  8922 ;; Registers used:
  8923 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8924 ;; Tracked objects:
  8925 ;;		On entry : 0/0
  8926 ;;		On exit  : 0/0
  8927 ;;		Unchanged: 0/0
  8928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8930 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8931 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8932 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8933 ;;Total ram usage:       22 bytes
  8934 ;; Hardware stack levels used:    1
  8935 ;; Hardware stack levels required when called:   11
  8936 ;; This function calls:
  8937 ;;		___awdiv
  8938 ;;		___awmod
  8939 ;;		_change_state_to_menu_12
  8940 ;;		_change_state_to_menu_22
  8941 ;;		_lcdInst
  8942 ;;		_printRTC
  8943 ;;		_printf
  8944 ;;		_strcpy
  8945 ;; This function is called by:
  8946 ;;		_main
  8947 ;; This function uses a non-reentrant model
  8948 ;;
  8949                           
  8950                           	psect	text27
  8951  000012                     __ptext27:
  8952                           	opt stack 0
  8953  000012                     _UI:
  8954                           	opt stack 19
  8955                           
  8956                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  8957                           
  8958                           ;incstack = 0
  8959  000012  0E02               	movlw	2
  8960  000014  0100               	movlb	0	; () banked
  8961  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  8962  000018  A4D8               	btfss	status,2,c
  8963  00001A  D086               	goto	l9571
  8964                           
  8965                           ; BSR set to: 0
  8966                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8967  00001C  0E01               	movlw	1
  8968  00001E  ECD1  F02F         	call	_lcdInst
  8969  000022  0E68               	movlw	104
  8970  000024  0100               	movlb	0	; () banked
  8971  000026  6FC4               	movwf	??_UI& (0+255),b
  8972  000028  0EE4               	movlw	228
  8973  00002A                     u11077:
  8974  00002A  2EE8               	decfsz	wreg,f,c
  8975  00002C  D7FE               	bra	u11077
  8976  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  8977  000030  D7FC               	bra	u11077
  8978  000032  F000               	nop	
  8979                           
  8980                           ;UI.c: 79: lcdInst(0b10000000);;
  8981  000034  0E80               	movlw	128
  8982  000036  ECD1  F02F         	call	_lcdInst
  8983                           
  8984                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  8985  00003A  0E7F               	movlw	low STR_1
  8986  00003C  0100               	movlb	0	; () banked
  8987  00003E  6F8E               	movwf	printf@f& (0+255),b
  8988  000040  0EFB               	movlw	high STR_1
  8989  000042  0100               	movlb	0	; () banked
  8990  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  8991  000046  0E01               	movlw	1
  8992  000048  0100               	movlb	0	; () banked
  8993  00004A  25FD               	addwf	_sel& (0+255),w,b
  8994  00004C  0100               	movlb	0	; () banked
  8995  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  8996  000050  0100               	movlb	0	; () banked
  8997  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  8998  000054  0E00               	movlw	0
  8999  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  9000  000058  EC67  F00E         	call	_printf	;wreg free
  9001                           
  9002                           ;UI.c: 81: lcdInst(0b11000000);;
  9003  00005C  0EC0               	movlw	192
  9004  00005E  ECD1  F02F         	call	_lcdInst
  9005                           
  9006                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  9007  000062  0E0E               	movlw	14
  9008  000064  0100               	movlb	0	; () banked
  9009  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9010  000068  0E10               	movlw	16
  9011  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  9012  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  9013  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  9014  000074  ECA0  F027         	call	___awmod	;wreg free
  9015  000078  C080  F0C6         	movff	?___awmod,_UI$2434
  9016  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2434+1
  9017                           
  9018                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  9019  000080  0E56               	movlw	low STR_2
  9020  000082  0100               	movlb	0	; () banked
  9021  000084  6F8E               	movwf	printf@f& (0+255),b
  9022  000086  0EFF               	movlw	high STR_2
  9023  000088  0100               	movlb	0	; () banked
  9024  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9025  00008C  0E0E               	movlw	14
  9026  00008E  0100               	movlb	0	; () banked
  9027  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9028  000092  0E10               	movlw	16
  9029  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  9030  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  9031  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  9032  00009E  ECA0  F027         	call	___awmod	;wreg free
  9033  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  9034  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  9035  0000AA  0E00               	movlw	0
  9036  0000AC  0100               	movlb	0	; () banked
  9037  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  9038  0000B0  0E3C               	movlw	60
  9039  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  9040  0000B4  EC8E  F026         	call	___awdiv	;wreg free
  9041  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  9042  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  9043  0000C0  C0C6  F080         	movff	_UI$2434,___awmod@dividend
  9044  0000C4  C0C7  F081         	movff	_UI$2434+1,___awmod@dividend+1
  9045  0000C8  0E00               	movlw	0
  9046  0000CA  0100               	movlb	0	; () banked
  9047  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9048  0000CE  0E3C               	movlw	60
  9049  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  9050  0000D2  ECA0  F027         	call	___awmod	;wreg free
  9051  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  9052  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  9053  0000DE  EC67  F00E         	call	_printf	;wreg free
  9054  0000E2                     l190:
  9055  0000E2  B281               	btfsc	3969,1,c	;volatile
  9056  0000E4  D7FE               	goto	l190
  9057  0000E6                     l193:
  9058  0000E6  A281               	btfss	3969,1,c	;volatile
  9059  0000E8  D7FE               	goto	l193
  9060                           
  9061                           ;UI.c: 86: }
  9062                           ;UI.c: 87: if(cur_state == 12){
  9063  0000EA  0E0C               	movlw	12
  9064  0000EC  0100               	movlb	0	; () banked
  9065  0000EE  19E6               	xorwf	_cur_state& (0+255),w,b
  9066  0000F0  0100               	movlb	0	; () banked
  9067  0000F2  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  9068  0000F4  A4D8               	btfss	status,2,c
  9069  0000F6  D003               	goto	l9565
  9070                           
  9071                           ; BSR set to: 0
  9072                           ;UI.c: 88: change_state_to_menu_12();
  9073  0000F8  EC04  F02D         	call	_change_state_to_menu_12	;wreg free
  9074                           
  9075                           ;UI.c: 89: }
  9076  0000FC  D002               	goto	l198
  9077  0000FE                     l9565:
  9078                           
  9079                           ;UI.c: 90: else{
  9080                           ;UI.c: 91: change_state_to_menu_22();
  9081  0000FE  ECE8  F02C         	call	_change_state_to_menu_22	;wreg free
  9082  000102                     l198:
  9083  000102  B281               	btfsc	3969,1,c	;volatile
  9084  000104  D7FE               	goto	l198
  9085                           
  9086                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  9087  000106  0E05               	movlw	5
  9088  000108  0100               	movlb	0	; () banked
  9089  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  9090  00010C  0E0F               	movlw	15
  9091  00010E  0100               	movlb	0	; () banked
  9092  000110  6FC4               	movwf	??_UI& (0+255),b
  9093  000112  0EF1               	movlw	241
  9094  000114                     u11087:
  9095  000114  2EE8               	decfsz	wreg,f,c
  9096  000116  D7FE               	bra	u11087
  9097  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  9098  00011A  D7FC               	bra	u11087
  9099  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  9100  00011E  D7FA               	bra	u11087
  9101                           
  9102                           ;UI.c: 95: machine_state = UI_state;
  9103  000120  0E00               	movlw	0
  9104  000122  0100               	movlb	0	; () banked
  9105  000124  6FFC               	movwf	_machine_state& (0+255),b
  9106                           
  9107                           ;UI.c: 96: }
  9108  000126  D3D2               	goto	l9891
  9109  000128                     l9571:
  9110                           
  9111                           ; BSR set to: 0
  9112                           ;UI.c: 97: else if(cur_state == 0){
  9113  000128  0100               	movlb	0	; () banked
  9114  00012A  51E6               	movf	_cur_state& (0+255),w,b
  9115  00012C  0100               	movlb	0	; () banked
  9116  00012E  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  9117  000130  A4D8               	btfss	status,2,c
  9118  000132  D3CC               	goto	l9891
  9119                           
  9120                           ; BSR set to: 0
  9121                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  9122  000134  0E00               	movlw	0
  9123  000136  0100               	movlb	0	; () banked
  9124  000138  6FC8               	movwf	UI@i& (0+255),b
  9125  00013A                     l9575:
  9126                           
  9127                           ; BSR set to: 0
  9128  00013A  0E63               	movlw	99
  9129  00013C  0100               	movlb	0	; () banked
  9130  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  9131  000140  D001               	goto	l9579
  9132  000142  D00C               	goto	l9583
  9133  000144                     l9579:
  9134                           
  9135                           ; BSR set to: 0
  9136  000144  0E68               	movlw	104
  9137  000146  0100               	movlb	0	; () banked
  9138  000148  6FC4               	movwf	??_UI& (0+255),b
  9139  00014A  0EE4               	movlw	228
  9140  00014C                     u11097:
  9141  00014C  2EE8               	decfsz	wreg,f,c
  9142  00014E  D7FE               	bra	u11097
  9143  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  9144  000152  D7FC               	bra	u11097
  9145  000154  F000               	nop	
  9146  000156  0100               	movlb	0	; () banked
  9147  000158  2BC8               	incf	UI@i& (0+255),f,b
  9148  00015A  D7EF               	goto	l9575
  9149  00015C                     l9583:
  9150                           
  9151                           ; BSR set to: 0
  9152                           ;UI.c: 99: if(cur_state == 0){
  9153  00015C  0100               	movlb	0	; () banked
  9154  00015E  51E6               	movf	_cur_state& (0+255),w,b
  9155  000160  0100               	movlb	0	; () banked
  9156  000162  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  9157  000164  A4D8               	btfss	status,2,c
  9158  000166  D3B2               	goto	l9891
  9159                           
  9160                           ; BSR set to: 0
  9161                           ;UI.c: 100: printRTC();
  9162  000168  EC52  F019         	call	_printRTC	;wreg free
  9163                           
  9164                           ;UI.c: 101: }
  9165                           ;UI.c: 102: }
  9166                           ;UI.c: 103: while(logstate){
  9167  00016C  D3AF               	goto	l9891
  9168  00016E                     l9587:
  9169                           
  9170                           ;UI.c: 105: if(!log_completion){
  9171  00016E  0100               	movlb	0	; () banked
  9172  000170  51F0               	movf	_log_completion& (0+255),w,b
  9173  000172  0100               	movlb	0	; () banked
  9174  000174  11F1               	iorwf	(_log_completion+1)& (0+255),w,b
  9175  000176  A4D8               	btfss	status,2,c
  9176  000178  D041               	goto	l9617
  9177                           
  9178                           ; BSR set to: 0
  9179                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9180  00017A  0E01               	movlw	1
  9181  00017C  ECD1  F02F         	call	_lcdInst
  9182  000180  0E68               	movlw	104
  9183  000182  0100               	movlb	0	; () banked
  9184  000184  6FC4               	movwf	??_UI& (0+255),b
  9185  000186  0EE4               	movlw	228
  9186  000188                     u11107:
  9187  000188  2EE8               	decfsz	wreg,f,c
  9188  00018A  D7FE               	bra	u11107
  9189  00018C  2FC4               	decfsz	??_UI& (0+255),f,b
  9190  00018E  D7FC               	bra	u11107
  9191  000190  F000               	nop	
  9192                           
  9193                           ;UI.c: 107: lcdInst(0b10000000);;
  9194  000192  0E80               	movlw	128
  9195  000194  ECD1  F02F         	call	_lcdInst
  9196                           
  9197                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  9198  000198  0E6D               	movlw	low STR_3
  9199  00019A  0100               	movlb	0	; () banked
  9200  00019C  6F8E               	movwf	printf@f& (0+255),b
  9201  00019E  0EFB               	movlw	high STR_3
  9202  0001A0  0100               	movlb	0	; () banked
  9203  0001A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9204  0001A4  C0EE  F090         	movff	_log,?_printf+2
  9205  0001A8  C0EF  F091         	movff	_log+1,?_printf+3
  9206  0001AC  EC67  F00E         	call	_printf	;wreg free
  9207                           
  9208                           ;UI.c: 109: lcdInst(0b11000000);;
  9209  0001B0  0EC0               	movlw	192
  9210  0001B2  ECD1  F02F         	call	_lcdInst
  9211                           
  9212                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  9213  0001B6  0E79               	movlw	low STR_4
  9214  0001B8  0100               	movlb	0	; () banked
  9215  0001BA  6F8E               	movwf	printf@f& (0+255),b
  9216  0001BC  0EFE               	movlw	high STR_4
  9217  0001BE  0100               	movlb	0	; () banked
  9218  0001C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9219  0001C2  EC67  F00E         	call	_printf	;wreg free
  9220  0001C6                     l9601:
  9221  0001C6  0E00               	movlw	0
  9222  0001C8  0100               	movlb	0	; () banked
  9223  0001CA  6FC9               	movwf	UI@i_413& (0+255),b
  9224  0001CC                     l9603:
  9225                           
  9226                           ; BSR set to: 0
  9227  0001CC  0E63               	movlw	99
  9228  0001CE  0100               	movlb	0	; () banked
  9229  0001D0  65C9               	cpfsgt	UI@i_413& (0+255),b
  9230  0001D2  D001               	goto	l9607
  9231  0001D4  D00C               	goto	l9611
  9232  0001D6                     l9607:
  9233                           
  9234                           ; BSR set to: 0
  9235  0001D6  0E68               	movlw	104
  9236  0001D8  0100               	movlb	0	; () banked
  9237  0001DA  6FC4               	movwf	??_UI& (0+255),b
  9238  0001DC  0EE4               	movlw	228
  9239  0001DE                     u11117:
  9240  0001DE  2EE8               	decfsz	wreg,f,c
  9241  0001E0  D7FE               	bra	u11117
  9242  0001E2  2FC4               	decfsz	??_UI& (0+255),f,b
  9243  0001E4  D7FC               	bra	u11117
  9244  0001E6  F000               	nop	
  9245  0001E8  0100               	movlb	0	; () banked
  9246  0001EA  2BC9               	incf	UI@i_413& (0+255),f,b
  9247  0001EC  D7EF               	goto	l9603
  9248  0001EE                     l9611:
  9249                           
  9250                           ; BSR set to: 0
  9251  0001EE  0100               	movlb	0	; () banked
  9252  0001F0  51F8               	movf	_logstate& (0+255),w,b
  9253  0001F2  0100               	movlb	0	; () banked
  9254  0001F4  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9255  0001F6  B4D8               	btfsc	status,2,c
  9256  0001F8  0012               	return	
  9257  0001FA  D7E5               	goto	l9601
  9258  0001FC                     l9617:
  9259                           
  9260                           ; BSR set to: 0
  9261                           ;UI.c: 114: else{
  9262                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9263  0001FC  0E01               	movlw	1
  9264  0001FE  ECD1  F02F         	call	_lcdInst
  9265  000202  0E68               	movlw	104
  9266  000204  0100               	movlb	0	; () banked
  9267  000206  6FC4               	movwf	??_UI& (0+255),b
  9268  000208  0EE4               	movlw	228
  9269  00020A                     u11127:
  9270  00020A  2EE8               	decfsz	wreg,f,c
  9271  00020C  D7FE               	bra	u11127
  9272  00020E  2FC4               	decfsz	??_UI& (0+255),f,b
  9273  000210  D7FC               	bra	u11127
  9274  000212  F000               	nop	
  9275                           
  9276                           ;UI.c: 116: lcdInst(0b10000000);;
  9277  000214  0E80               	movlw	128
  9278  000216  ECD1  F02F         	call	_lcdInst
  9279                           
  9280                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  9281  00021A  0E6D               	movlw	low STR_3
  9282  00021C  0100               	movlb	0	; () banked
  9283  00021E  6F8E               	movwf	printf@f& (0+255),b
  9284  000220  0EFB               	movlw	high STR_3
  9285  000222  0100               	movlb	0	; () banked
  9286  000224  6F8F               	movwf	(printf@f+1)& (0+255),b
  9287  000226  C0EE  F090         	movff	_log,?_printf+2
  9288  00022A  C0EF  F091         	movff	_log+1,?_printf+3
  9289  00022E  EC67  F00E         	call	_printf	;wreg free
  9290                           
  9291                           ;UI.c: 118: lcdInst(0b11000000);;
  9292  000232  0EC0               	movlw	192
  9293  000234  ECD1  F02F         	call	_lcdInst
  9294                           
  9295                           ;UI.c: 119: printf("PAUSE < | BACK >");
  9296  000238  0EF5               	movlw	low STR_6
  9297  00023A  0100               	movlb	0	; () banked
  9298  00023C  6F8E               	movwf	printf@f& (0+255),b
  9299  00023E  0EFD               	movlw	high STR_6
  9300  000240  0100               	movlb	0	; () banked
  9301  000242  6F8F               	movwf	(printf@f+1)& (0+255),b
  9302  000244  EC67  F00E         	call	_printf	;wreg free
  9303                           
  9304                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9305  000248  0E00               	movlw	0
  9306  00024A  0100               	movlb	0	; () banked
  9307  00024C  6FCA               	movwf	UI@i_416& (0+255),b
  9308  00024E                     l9631:
  9309                           
  9310                           ; BSR set to: 0
  9311  00024E  0E63               	movlw	99
  9312  000250  0100               	movlb	0	; () banked
  9313  000252  65CA               	cpfsgt	UI@i_416& (0+255),b
  9314  000254  D001               	goto	l9635
  9315  000256  D00C               	goto	l9639
  9316  000258                     l9635:
  9317                           
  9318                           ; BSR set to: 0
  9319  000258  0E68               	movlw	104
  9320  00025A  0100               	movlb	0	; () banked
  9321  00025C  6FC4               	movwf	??_UI& (0+255),b
  9322  00025E  0EE4               	movlw	228
  9323  000260                     u11137:
  9324  000260  2EE8               	decfsz	wreg,f,c
  9325  000262  D7FE               	bra	u11137
  9326  000264  2FC4               	decfsz	??_UI& (0+255),f,b
  9327  000266  D7FC               	bra	u11137
  9328  000268  F000               	nop	
  9329  00026A  0100               	movlb	0	; () banked
  9330  00026C  2BCA               	incf	UI@i_416& (0+255),f,b
  9331  00026E  D7EF               	goto	l9631
  9332  000270                     l9639:
  9333                           
  9334                           ; BSR set to: 0
  9335  000270  0100               	movlb	0	; () banked
  9336  000272  51F8               	movf	_logstate& (0+255),w,b
  9337  000274  0100               	movlb	0	; () banked
  9338  000276  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9339  000278  B4D8               	btfsc	status,2,c
  9340  00027A  0012               	return	
  9341                           
  9342                           ; BSR set to: 0
  9343                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9344                           
  9345                           ; BSR set to: 0
  9346                           
  9347                           ; BSR set to: 0
  9348  00027C  0E00               	movlw	0
  9349  00027E  0100               	movlb	0	; () banked
  9350  000280  6FCB               	movwf	UI@i_417& (0+255),b
  9351  000282                     l9645:
  9352                           
  9353                           ; BSR set to: 0
  9354  000282  0E63               	movlw	99
  9355  000284  0100               	movlb	0	; () banked
  9356  000286  65CB               	cpfsgt	UI@i_417& (0+255),b
  9357  000288  D001               	goto	l9649
  9358  00028A  D00C               	goto	l9653
  9359  00028C                     l9649:
  9360                           
  9361                           ; BSR set to: 0
  9362  00028C  0E68               	movlw	104
  9363  00028E  0100               	movlb	0	; () banked
  9364  000290  6FC4               	movwf	??_UI& (0+255),b
  9365  000292  0EE4               	movlw	228
  9366  000294                     u11147:
  9367  000294  2EE8               	decfsz	wreg,f,c
  9368  000296  D7FE               	bra	u11147
  9369  000298  2FC4               	decfsz	??_UI& (0+255),f,b
  9370  00029A  D7FC               	bra	u11147
  9371  00029C  F000               	nop	
  9372  00029E  0100               	movlb	0	; () banked
  9373  0002A0  2BCB               	incf	UI@i_417& (0+255),f,b
  9374  0002A2  D7EF               	goto	l9645
  9375  0002A4                     l9653:
  9376                           
  9377                           ; BSR set to: 0
  9378  0002A4  0100               	movlb	0	; () banked
  9379  0002A6  51F8               	movf	_logstate& (0+255),w,b
  9380  0002A8  0100               	movlb	0	; () banked
  9381  0002AA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9382  0002AC  B4D8               	btfsc	status,2,c
  9383  0002AE  0012               	return	
  9384                           
  9385                           ; BSR set to: 0
  9386                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9387                           
  9388                           ; BSR set to: 0
  9389                           
  9390                           ; BSR set to: 0
  9391  0002B0  0E01               	movlw	1
  9392  0002B2  ECD1  F02F         	call	_lcdInst
  9393  0002B6  0E68               	movlw	104
  9394  0002B8  0100               	movlb	0	; () banked
  9395  0002BA  6FC4               	movwf	??_UI& (0+255),b
  9396  0002BC  0EE4               	movlw	228
  9397  0002BE                     u11157:
  9398  0002BE  2EE8               	decfsz	wreg,f,c
  9399  0002C0  D7FE               	bra	u11157
  9400  0002C2  2FC4               	decfsz	??_UI& (0+255),f,b
  9401  0002C4  D7FC               	bra	u11157
  9402  0002C6  F000               	nop	
  9403                           
  9404                           ;UI.c: 125: lcdInst(0b10000000);;
  9405  0002C8  0E80               	movlw	128
  9406  0002CA  ECD1  F02F         	call	_lcdInst
  9407                           
  9408                           ;UI.c: 126: printf("START:");
  9409  0002CE  0EC3               	movlw	low STR_7
  9410  0002D0  0100               	movlb	0	; () banked
  9411  0002D2  6F8E               	movwf	printf@f& (0+255),b
  9412  0002D4  0EFF               	movlw	high STR_7
  9413  0002D6  0100               	movlb	0	; () banked
  9414  0002D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9415  0002DA  EC67  F00E         	call	_printf	;wreg free
  9416                           
  9417                           ;UI.c: 127: lcdInst(0b11000000);;
  9418  0002DE  0EC0               	movlw	192
  9419  0002E0  ECD1  F02F         	call	_lcdInst
  9420                           
  9421                           ;UI.c: 128: char month[] = "MMM";
  9422  0002E4  C14D  F0D6         	movff	UI@F3250,UI@month
  9423  0002E8  C14E  F0D7         	movff	UI@F3250+1,UI@month+1
  9424  0002EC  C14F  F0D8         	movff	UI@F3250+2,UI@month+2
  9425  0002F0  C150  F0D9         	movff	UI@F3250+3,UI@month+3
  9426                           
  9427                           ;UI.c: 129: switch(log_startTime[5]){
  9428  0002F4  D0C3               	goto	l9697
  9429  0002F6                     l9669:
  9430                           
  9431                           ;UI.c: 131: strcpy(month, "JAN");
  9432  0002F6  0ED6               	movlw	low UI@month
  9433  0002F8  0100               	movlb	0	; () banked
  9434  0002FA  6F80               	movwf	strcpy@to& (0+255),b
  9435  0002FC  0E00               	movlw	high UI@month
  9436  0002FE  0100               	movlb	0	; () banked
  9437  000300  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9438  000302  0EDA               	movlw	low STR_8
  9439  000304  0100               	movlb	0	; () banked
  9440  000306  6F82               	movwf	strcpy@from& (0+255),b
  9441  000308  0EFF               	movlw	high STR_8
  9442  00030A  0100               	movlb	0	; () banked
  9443  00030C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9444  00030E  EC20  F02D         	call	_strcpy	;wreg free
  9445                           
  9446                           ;UI.c: 132: break;
  9447  000312  D0E6               	goto	l9699
  9448  000314                     l9671:
  9449                           
  9450                           ;UI.c: 134: strcpy(month, "FEB");
  9451  000314  0ED6               	movlw	low UI@month
  9452  000316  0100               	movlb	0	; () banked
  9453  000318  6F80               	movwf	strcpy@to& (0+255),b
  9454  00031A  0E00               	movlw	high UI@month
  9455  00031C  0100               	movlb	0	; () banked
  9456  00031E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9457  000320  0ECA               	movlw	low STR_9
  9458  000322  0100               	movlb	0	; () banked
  9459  000324  6F82               	movwf	strcpy@from& (0+255),b
  9460  000326  0EFF               	movlw	high STR_9
  9461  000328  0100               	movlb	0	; () banked
  9462  00032A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9463  00032C  EC20  F02D         	call	_strcpy	;wreg free
  9464                           
  9465                           ;UI.c: 135: break;
  9466  000330  D0D7               	goto	l9699
  9467  000332                     l9673:
  9468                           
  9469                           ;UI.c: 137: strcpy(month, "MAR");
  9470  000332  0ED6               	movlw	low UI@month
  9471  000334  0100               	movlb	0	; () banked
  9472  000336  6F80               	movwf	strcpy@to& (0+255),b
  9473  000338  0E00               	movlw	high UI@month
  9474  00033A  0100               	movlb	0	; () banked
  9475  00033C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9476  00033E  0EE6               	movlw	low STR_10
  9477  000340  0100               	movlb	0	; () banked
  9478  000342  6F82               	movwf	strcpy@from& (0+255),b
  9479  000344  0EFF               	movlw	high STR_10
  9480  000346  0100               	movlb	0	; () banked
  9481  000348  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9482  00034A  EC20  F02D         	call	_strcpy	;wreg free
  9483                           
  9484                           ;UI.c: 138: break;
  9485  00034E  D0C8               	goto	l9699
  9486  000350                     l9675:
  9487                           
  9488                           ;UI.c: 140: strcpy(month, "APR");
  9489  000350  0ED6               	movlw	low UI@month
  9490  000352  0100               	movlb	0	; () banked
  9491  000354  6F80               	movwf	strcpy@to& (0+255),b
  9492  000356  0E00               	movlw	high UI@month
  9493  000358  0100               	movlb	0	; () banked
  9494  00035A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9495  00035C  0EEA               	movlw	low STR_11
  9496  00035E  0100               	movlb	0	; () banked
  9497  000360  6F82               	movwf	strcpy@from& (0+255),b
  9498  000362  0EFF               	movlw	high STR_11
  9499  000364  0100               	movlb	0	; () banked
  9500  000366  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9501  000368  EC20  F02D         	call	_strcpy	;wreg free
  9502                           
  9503                           ;UI.c: 141: break;
  9504  00036C  D0B9               	goto	l9699
  9505  00036E                     l9677:
  9506                           
  9507                           ;UI.c: 143: strcpy(month, "MAY");
  9508  00036E  0ED6               	movlw	low UI@month
  9509  000370  0100               	movlb	0	; () banked
  9510  000372  6F80               	movwf	strcpy@to& (0+255),b
  9511  000374  0E00               	movlw	high UI@month
  9512  000376  0100               	movlb	0	; () banked
  9513  000378  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9514  00037A  0EFA               	movlw	low STR_12
  9515  00037C  0100               	movlb	0	; () banked
  9516  00037E  6F82               	movwf	strcpy@from& (0+255),b
  9517  000380  0EFF               	movlw	high STR_12
  9518  000382  0100               	movlb	0	; () banked
  9519  000384  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9520  000386  EC20  F02D         	call	_strcpy	;wreg free
  9521                           
  9522                           ;UI.c: 144: break;
  9523  00038A  D0AA               	goto	l9699
  9524  00038C                     l9679:
  9525                           
  9526                           ;UI.c: 146: strcpy(month, "JUN");
  9527  00038C  0ED6               	movlw	low UI@month
  9528  00038E  0100               	movlb	0	; () banked
  9529  000390  6F80               	movwf	strcpy@to& (0+255),b
  9530  000392  0E00               	movlw	high UI@month
  9531  000394  0100               	movlb	0	; () banked
  9532  000396  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9533  000398  0EDE               	movlw	low STR_13
  9534  00039A  0100               	movlb	0	; () banked
  9535  00039C  6F82               	movwf	strcpy@from& (0+255),b
  9536  00039E  0EFF               	movlw	high STR_13
  9537  0003A0  0100               	movlb	0	; () banked
  9538  0003A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9539  0003A4  EC20  F02D         	call	_strcpy	;wreg free
  9540                           
  9541                           ;UI.c: 147: break;
  9542  0003A8  D09B               	goto	l9699
  9543  0003AA                     l9681:
  9544                           
  9545                           ;UI.c: 149: strcpy(month, "JUL");
  9546  0003AA  0ED6               	movlw	low UI@month
  9547  0003AC  0100               	movlb	0	; () banked
  9548  0003AE  6F80               	movwf	strcpy@to& (0+255),b
  9549  0003B0  0E00               	movlw	high UI@month
  9550  0003B2  0100               	movlb	0	; () banked
  9551  0003B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9552  0003B6  0ED6               	movlw	low STR_14
  9553  0003B8  0100               	movlb	0	; () banked
  9554  0003BA  6F82               	movwf	strcpy@from& (0+255),b
  9555  0003BC  0EFF               	movlw	high STR_14
  9556  0003BE  0100               	movlb	0	; () banked
  9557  0003C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9558  0003C2  EC20  F02D         	call	_strcpy	;wreg free
  9559                           
  9560                           ;UI.c: 150: break;
  9561  0003C6  D08C               	goto	l9699
  9562  0003C8                     l9683:
  9563                           
  9564                           ;UI.c: 152: strcpy(month, "AUG");
  9565  0003C8  0ED6               	movlw	low UI@month
  9566  0003CA  0100               	movlb	0	; () banked
  9567  0003CC  6F80               	movwf	strcpy@to& (0+255),b
  9568  0003CE  0E00               	movlw	high UI@month
  9569  0003D0  0100               	movlb	0	; () banked
  9570  0003D2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9571  0003D4  0ED2               	movlw	low STR_15
  9572  0003D6  0100               	movlb	0	; () banked
  9573  0003D8  6F82               	movwf	strcpy@from& (0+255),b
  9574  0003DA  0EFF               	movlw	high STR_15
  9575  0003DC  0100               	movlb	0	; () banked
  9576  0003DE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9577  0003E0  EC20  F02D         	call	_strcpy	;wreg free
  9578                           
  9579                           ;UI.c: 153: break;
  9580  0003E4  D07D               	goto	l9699
  9581  0003E6                     l9685:
  9582                           
  9583                           ;UI.c: 155: strcpy(month, "SEP");
  9584  0003E6  0ED6               	movlw	low UI@month
  9585  0003E8  0100               	movlb	0	; () banked
  9586  0003EA  6F80               	movwf	strcpy@to& (0+255),b
  9587  0003EC  0E00               	movlw	high UI@month
  9588  0003EE  0100               	movlb	0	; () banked
  9589  0003F0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9590  0003F2  0EE2               	movlw	low STR_16
  9591  0003F4  0100               	movlb	0	; () banked
  9592  0003F6  6F82               	movwf	strcpy@from& (0+255),b
  9593  0003F8  0EFF               	movlw	high STR_16
  9594  0003FA  0100               	movlb	0	; () banked
  9595  0003FC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9596  0003FE  EC20  F02D         	call	_strcpy	;wreg free
  9597                           
  9598                           ;UI.c: 156: break;
  9599  000402  D06E               	goto	l9699
  9600  000404                     l9687:
  9601                           
  9602                           ;UI.c: 158: strcpy(month, "OCT");
  9603  000404  0ED6               	movlw	low UI@month
  9604  000406  0100               	movlb	0	; () banked
  9605  000408  6F80               	movwf	strcpy@to& (0+255),b
  9606  00040A  0E00               	movlw	high UI@month
  9607  00040C  0100               	movlb	0	; () banked
  9608  00040E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9609  000410  0EF2               	movlw	low STR_17
  9610  000412  0100               	movlb	0	; () banked
  9611  000414  6F82               	movwf	strcpy@from& (0+255),b
  9612  000416  0EFF               	movlw	high STR_17
  9613  000418  0100               	movlb	0	; () banked
  9614  00041A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9615  00041C  EC20  F02D         	call	_strcpy	;wreg free
  9616                           
  9617                           ;UI.c: 159: break;
  9618  000420  D05F               	goto	l9699
  9619  000422                     l9689:
  9620                           
  9621                           ;UI.c: 161: strcpy(month, "NOV");
  9622  000422  0ED6               	movlw	low UI@month
  9623  000424  0100               	movlb	0	; () banked
  9624  000426  6F80               	movwf	strcpy@to& (0+255),b
  9625  000428  0E00               	movlw	high UI@month
  9626  00042A  0100               	movlb	0	; () banked
  9627  00042C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9628  00042E  0EF6               	movlw	low STR_18
  9629  000430  0100               	movlb	0	; () banked
  9630  000432  6F82               	movwf	strcpy@from& (0+255),b
  9631  000434  0EFF               	movlw	high STR_18
  9632  000436  0100               	movlb	0	; () banked
  9633  000438  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9634  00043A  EC20  F02D         	call	_strcpy	;wreg free
  9635                           
  9636                           ;UI.c: 162: break;
  9637  00043E  D050               	goto	l9699
  9638  000440                     l9691:
  9639                           
  9640                           ;UI.c: 164: strcpy(month, "DEC");
  9641  000440  0ED6               	movlw	low UI@month
  9642  000442  0100               	movlb	0	; () banked
  9643  000444  6F80               	movwf	strcpy@to& (0+255),b
  9644  000446  0E00               	movlw	high UI@month
  9645  000448  0100               	movlb	0	; () banked
  9646  00044A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9647  00044C  0ECE               	movlw	low STR_19
  9648  00044E  0100               	movlb	0	; () banked
  9649  000450  6F82               	movwf	strcpy@from& (0+255),b
  9650  000452  0EFF               	movlw	high STR_19
  9651  000454  0100               	movlb	0	; () banked
  9652  000456  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9653  000458  EC20  F02D         	call	_strcpy	;wreg free
  9654                           
  9655                           ;UI.c: 165: break;
  9656  00045C  D041               	goto	l9699
  9657  00045E                     l9693:
  9658                           
  9659                           ;UI.c: 167: strcpy(month, "ERR");
  9660  00045E  0ED6               	movlw	low UI@month
  9661  000460  0100               	movlb	0	; () banked
  9662  000462  6F80               	movwf	strcpy@to& (0+255),b
  9663  000464  0E00               	movlw	high UI@month
  9664  000466  0100               	movlb	0	; () banked
  9665  000468  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9666  00046A  0EEE               	movlw	low STR_20
  9667  00046C  0100               	movlb	0	; () banked
  9668  00046E  6F82               	movwf	strcpy@from& (0+255),b
  9669  000470  0EFF               	movlw	high STR_20
  9670  000472  0100               	movlb	0	; () banked
  9671  000474  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9672  000476  EC20  F02D         	call	_strcpy	;wreg free
  9673                           
  9674                           ;UI.c: 169: }
  9675                           
  9676                           ;UI.c: 168: break;
  9677  00047A  D032               	goto	l9699
  9678  00047C                     l9697:
  9679  00047C  EE21  F00A         	lfsr	2,_log_startTime+10
  9680  000480  CFDE F0C4          	movff	postinc2,??_UI
  9681  000484  CFDD F0C5          	movff	postdec2,??_UI+1
  9682                           
  9683                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9684                           ; Switch size 1, requested type "space"
  9685                           ; Number of cases is 1, Range of values is 0 to 0
  9686                           ; switch strategies available:
  9687                           ; Name         Instructions Cycles
  9688                           ; simple_byte            4     3 (average)
  9689                           ;	Chosen strategy is simple_byte
  9690  000488  0100               	movlb	0	; () banked
  9691  00048A  51C5               	movf	(??_UI+1)& (0+255),w,b
  9692  00048C  0A00               	xorlw	0	; case 0
  9693  00048E  A4D8               	btfss	status,2,c
  9694  000490  D7E6               	goto	l9693
  9695                           
  9696                           ; BSR set to: 0
  9697                           ; Switch size 1, requested type "space"
  9698                           ; Number of cases is 12, Range of values is 1 to 12
  9699                           ; switch strategies available:
  9700                           ; Name         Instructions Cycles
  9701                           ; simple_byte           37    19 (average)
  9702                           ;	Chosen strategy is simple_byte
  9703  000492  0100               	movlb	0	; () banked
  9704  000494  51C4               	movf	??_UI& (0+255),w,b
  9705  000496  0A01               	xorlw	1	; case 1
  9706  000498  B4D8               	btfsc	status,2,c
  9707  00049A  D72D               	goto	l9669
  9708  00049C  0A03               	xorlw	3	; case 2
  9709  00049E  B4D8               	btfsc	status,2,c
  9710  0004A0  D739               	goto	l9671
  9711  0004A2  0A01               	xorlw	1	; case 3
  9712  0004A4  B4D8               	btfsc	status,2,c
  9713  0004A6  D745               	goto	l9673
  9714  0004A8  0A07               	xorlw	7	; case 4
  9715  0004AA  B4D8               	btfsc	status,2,c
  9716  0004AC  D751               	goto	l9675
  9717  0004AE  0A01               	xorlw	1	; case 5
  9718  0004B0  B4D8               	btfsc	status,2,c
  9719  0004B2  D75D               	goto	l9677
  9720  0004B4  0A03               	xorlw	3	; case 6
  9721  0004B6  B4D8               	btfsc	status,2,c
  9722  0004B8  D769               	goto	l9679
  9723  0004BA  0A01               	xorlw	1	; case 7
  9724  0004BC  B4D8               	btfsc	status,2,c
  9725  0004BE  D775               	goto	l9681
  9726  0004C0  0A0F               	xorlw	15	; case 8
  9727  0004C2  B4D8               	btfsc	status,2,c
  9728  0004C4  D781               	goto	l9683
  9729  0004C6  0A01               	xorlw	1	; case 9
  9730  0004C8  B4D8               	btfsc	status,2,c
  9731  0004CA  D78D               	goto	l9685
  9732  0004CC  0A03               	xorlw	3	; case 10
  9733  0004CE  B4D8               	btfsc	status,2,c
  9734  0004D0  D799               	goto	l9687
  9735  0004D2  0A01               	xorlw	1	; case 11
  9736  0004D4  B4D8               	btfsc	status,2,c
  9737  0004D6  D7A5               	goto	l9689
  9738  0004D8  0A07               	xorlw	7	; case 12
  9739  0004DA  B4D8               	btfsc	status,2,c
  9740  0004DC  D7B1               	goto	l9691
  9741  0004DE  D7BF               	goto	l9693
  9742  0004E0                     l9699:
  9743                           
  9744                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  9745  0004E0  0EC2               	movlw	low STR_21
  9746  0004E2  0100               	movlb	0	; () banked
  9747  0004E4  6F8E               	movwf	printf@f& (0+255),b
  9748  0004E6  0EFA               	movlw	high STR_21
  9749  0004E8  0100               	movlb	0	; () banked
  9750  0004EA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9751  0004EC  C108  F090         	movff	_log_startTime+8,?_printf+2
  9752  0004F0  C109  F091         	movff	_log_startTime+9,?_printf+3
  9753  0004F4  0ED6               	movlw	low UI@month
  9754  0004F6  0100               	movlb	0	; () banked
  9755  0004F8  6F92               	movwf	(?_printf+4)& (0+255),b
  9756  0004FA  0E00               	movlw	high UI@month
  9757  0004FC  0100               	movlb	0	; () banked
  9758  0004FE  6F93               	movwf	(?_printf+5)& (0+255),b
  9759  000500  C104  F094         	movff	_log_startTime+4,?_printf+6
  9760  000504  C105  F095         	movff	_log_startTime+5,?_printf+7
  9761  000508  C102  F096         	movff	_log_startTime+2,?_printf+8
  9762  00050C  C103  F097         	movff	_log_startTime+3,?_printf+9
  9763  000510  C100  F098         	movff	_log_startTime,?_printf+10
  9764  000514  C101  F099         	movff	_log_startTime+1,?_printf+11
  9765  000518  EC67  F00E         	call	_printf	;wreg free
  9766                           
  9767                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9768  00051C  0E00               	movlw	0
  9769  00051E  0100               	movlb	0	; () banked
  9770  000520  6FCC               	movwf	UI@i_435& (0+255),b
  9771  000522                     l9703:
  9772                           
  9773                           ; BSR set to: 0
  9774  000522  0E63               	movlw	99
  9775  000524  0100               	movlb	0	; () banked
  9776  000526  65CC               	cpfsgt	UI@i_435& (0+255),b
  9777  000528  D001               	goto	l9707
  9778  00052A  D00C               	goto	l9711
  9779  00052C                     l9707:
  9780                           
  9781                           ; BSR set to: 0
  9782  00052C  0E68               	movlw	104
  9783  00052E  0100               	movlb	0	; () banked
  9784  000530  6FC4               	movwf	??_UI& (0+255),b
  9785  000532  0EE4               	movlw	228
  9786  000534                     u11167:
  9787  000534  2EE8               	decfsz	wreg,f,c
  9788  000536  D7FE               	bra	u11167
  9789  000538  2FC4               	decfsz	??_UI& (0+255),f,b
  9790  00053A  D7FC               	bra	u11167
  9791  00053C  F000               	nop	
  9792  00053E  0100               	movlb	0	; () banked
  9793  000540  2BCC               	incf	UI@i_435& (0+255),f,b
  9794  000542  D7EF               	goto	l9703
  9795  000544                     l9711:
  9796                           
  9797                           ; BSR set to: 0
  9798  000544  0100               	movlb	0	; () banked
  9799  000546  51F8               	movf	_logstate& (0+255),w,b
  9800  000548  0100               	movlb	0	; () banked
  9801  00054A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9802  00054C  B4D8               	btfsc	status,2,c
  9803  00054E  0012               	return	
  9804                           
  9805                           ; BSR set to: 0
  9806                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9807                           
  9808                           ; BSR set to: 0
  9809                           
  9810                           ; BSR set to: 0
  9811  000550  0E00               	movlw	0
  9812  000552  0100               	movlb	0	; () banked
  9813  000554  6FCD               	movwf	UI@i_436& (0+255),b
  9814  000556                     l9717:
  9815                           
  9816                           ; BSR set to: 0
  9817  000556  0E63               	movlw	99
  9818  000558  0100               	movlb	0	; () banked
  9819  00055A  65CD               	cpfsgt	UI@i_436& (0+255),b
  9820  00055C  D001               	goto	l9721
  9821  00055E  D00C               	goto	l9725
  9822  000560                     l9721:
  9823                           
  9824                           ; BSR set to: 0
  9825  000560  0E68               	movlw	104
  9826  000562  0100               	movlb	0	; () banked
  9827  000564  6FC4               	movwf	??_UI& (0+255),b
  9828  000566  0EE4               	movlw	228
  9829  000568                     u11177:
  9830  000568  2EE8               	decfsz	wreg,f,c
  9831  00056A  D7FE               	bra	u11177
  9832  00056C  2FC4               	decfsz	??_UI& (0+255),f,b
  9833  00056E  D7FC               	bra	u11177
  9834  000570  F000               	nop	
  9835  000572  0100               	movlb	0	; () banked
  9836  000574  2BCD               	incf	UI@i_436& (0+255),f,b
  9837  000576  D7EF               	goto	l9717
  9838  000578                     l9725:
  9839                           
  9840                           ; BSR set to: 0
  9841  000578  0100               	movlb	0	; () banked
  9842  00057A  51F8               	movf	_logstate& (0+255),w,b
  9843  00057C  0100               	movlb	0	; () banked
  9844  00057E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9845  000580  B4D8               	btfsc	status,2,c
  9846  000582  0012               	return	
  9847                           
  9848                           ; BSR set to: 0
  9849                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9850                           
  9851                           ; BSR set to: 0
  9852                           
  9853                           ; BSR set to: 0
  9854  000584  0E01               	movlw	1
  9855  000586  ECD1  F02F         	call	_lcdInst
  9856  00058A  0E68               	movlw	104
  9857  00058C  0100               	movlb	0	; () banked
  9858  00058E  6FC4               	movwf	??_UI& (0+255),b
  9859  000590  0EE4               	movlw	228
  9860  000592                     u11187:
  9861  000592  2EE8               	decfsz	wreg,f,c
  9862  000594  D7FE               	bra	u11187
  9863  000596  2FC4               	decfsz	??_UI& (0+255),f,b
  9864  000598  D7FC               	bra	u11187
  9865  00059A  F000               	nop	
  9866                           
  9867                           ;UI.c: 176: lcdInst(0b10000000);;
  9868  00059C  0E80               	movlw	128
  9869  00059E  ECD1  F02F         	call	_lcdInst
  9870                           
  9871                           ;UI.c: 177: printf("DURATION:");
  9872  0005A2  0E9A               	movlw	low STR_22
  9873  0005A4  0100               	movlb	0	; () banked
  9874  0005A6  6F8E               	movwf	printf@f& (0+255),b
  9875  0005A8  0EFF               	movlw	high STR_22
  9876  0005AA  0100               	movlb	0	; () banked
  9877  0005AC  6F8F               	movwf	(printf@f+1)& (0+255),b
  9878  0005AE  EC67  F00E         	call	_printf	;wreg free
  9879                           
  9880                           ;UI.c: 178: lcdInst(0b11000000);;
  9881  0005B2  0EC0               	movlw	192
  9882  0005B4  ECD1  F02F         	call	_lcdInst
  9883                           
  9884                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9885  0005B8  0E0E               	movlw	14
  9886  0005BA  0100               	movlb	0	; () banked
  9887  0005BC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9888  0005BE  0E10               	movlw	16
  9889  0005C0  6F82               	movwf	___awmod@divisor& (0+255),b
  9890  0005C2  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9891  0005C6  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9892  0005CA  ECA0  F027         	call	___awmod	;wreg free
  9893  0005CE  C080  F0C6         	movff	?___awmod,_UI$2434
  9894  0005D2  C081  F0C7         	movff	?___awmod+1,_UI$2434+1
  9895                           
  9896                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9897  0005D6  0E48               	movlw	low STR_23
  9898  0005D8  0100               	movlb	0	; () banked
  9899  0005DA  6F8E               	movwf	printf@f& (0+255),b
  9900  0005DC  0EFF               	movlw	high STR_23
  9901  0005DE  0100               	movlb	0	; () banked
  9902  0005E0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9903  0005E2  0E0E               	movlw	14
  9904  0005E4  0100               	movlb	0	; () banked
  9905  0005E6  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9906  0005E8  0E10               	movlw	16
  9907  0005EA  6F82               	movwf	___awmod@divisor& (0+255),b
  9908  0005EC  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9909  0005F0  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9910  0005F4  ECA0  F027         	call	___awmod	;wreg free
  9911  0005F8  C080  F086         	movff	?___awmod,___awdiv@dividend
  9912  0005FC  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  9913  000600  0E00               	movlw	0
  9914  000602  0100               	movlb	0	; () banked
  9915  000604  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  9916  000606  0E3C               	movlw	60
  9917  000608  6F88               	movwf	___awdiv@divisor& (0+255),b
  9918  00060A  EC8E  F026         	call	___awdiv	;wreg free
  9919  00060E  C086  F090         	movff	?___awdiv,?_printf+2
  9920  000612  C087  F091         	movff	?___awdiv+1,?_printf+3
  9921  000616  C0C6  F080         	movff	_UI$2434,___awmod@dividend
  9922  00061A  C0C7  F081         	movff	_UI$2434+1,___awmod@dividend+1
  9923  00061E  0E00               	movlw	0
  9924  000620  0100               	movlb	0	; () banked
  9925  000622  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9926  000624  0E3C               	movlw	60
  9927  000626  6F82               	movwf	___awmod@divisor& (0+255),b
  9928  000628  ECA0  F027         	call	___awmod	;wreg free
  9929  00062C  C080  F092         	movff	?___awmod,?_printf+4
  9930  000630  C081  F093         	movff	?___awmod+1,?_printf+5
  9931  000634  EC67  F00E         	call	_printf	;wreg free
  9932                           
  9933                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9934  000638  0E00               	movlw	0
  9935  00063A  0100               	movlb	0	; () banked
  9936  00063C  6FCE               	movwf	UI@i_439& (0+255),b
  9937  00063E                     l9745:
  9938                           
  9939                           ; BSR set to: 0
  9940  00063E  0E63               	movlw	99
  9941  000640  0100               	movlb	0	; () banked
  9942  000642  65CE               	cpfsgt	UI@i_439& (0+255),b
  9943  000644  D001               	goto	l9749
  9944  000646  D00C               	goto	l9753
  9945  000648                     l9749:
  9946                           
  9947                           ; BSR set to: 0
  9948  000648  0E68               	movlw	104
  9949  00064A  0100               	movlb	0	; () banked
  9950  00064C  6FC4               	movwf	??_UI& (0+255),b
  9951  00064E  0EE4               	movlw	228
  9952  000650                     u11197:
  9953  000650  2EE8               	decfsz	wreg,f,c
  9954  000652  D7FE               	bra	u11197
  9955  000654  2FC4               	decfsz	??_UI& (0+255),f,b
  9956  000656  D7FC               	bra	u11197
  9957  000658  F000               	nop	
  9958  00065A  0100               	movlb	0	; () banked
  9959  00065C  2BCE               	incf	UI@i_439& (0+255),f,b
  9960  00065E  D7EF               	goto	l9745
  9961  000660                     l9753:
  9962                           
  9963                           ; BSR set to: 0
  9964  000660  0100               	movlb	0	; () banked
  9965  000662  51F8               	movf	_logstate& (0+255),w,b
  9966  000664  0100               	movlb	0	; () banked
  9967  000666  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9968  000668  B4D8               	btfsc	status,2,c
  9969  00066A  0012               	return	
  9970                           
  9971                           ; BSR set to: 0
  9972                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9973                           
  9974                           ; BSR set to: 0
  9975                           
  9976                           ; BSR set to: 0
  9977  00066C  0E00               	movlw	0
  9978  00066E  0100               	movlb	0	; () banked
  9979  000670  6FCF               	movwf	UI@i_440& (0+255),b
  9980  000672                     l9759:
  9981                           
  9982                           ; BSR set to: 0
  9983  000672  0E63               	movlw	99
  9984  000674  0100               	movlb	0	; () banked
  9985  000676  65CF               	cpfsgt	UI@i_440& (0+255),b
  9986  000678  D001               	goto	l9763
  9987  00067A  D00C               	goto	l9767
  9988  00067C                     l9763:
  9989                           
  9990                           ; BSR set to: 0
  9991  00067C  0E68               	movlw	104
  9992  00067E  0100               	movlb	0	; () banked
  9993  000680  6FC4               	movwf	??_UI& (0+255),b
  9994  000682  0EE4               	movlw	228
  9995  000684                     u11207:
  9996  000684  2EE8               	decfsz	wreg,f,c
  9997  000686  D7FE               	bra	u11207
  9998  000688  2FC4               	decfsz	??_UI& (0+255),f,b
  9999  00068A  D7FC               	bra	u11207
 10000  00068C  F000               	nop	
 10001  00068E  0100               	movlb	0	; () banked
 10002  000690  2BCF               	incf	UI@i_440& (0+255),f,b
 10003  000692  D7EF               	goto	l9759
 10004  000694                     l9767:
 10005                           
 10006                           ; BSR set to: 0
 10007  000694  0100               	movlb	0	; () banked
 10008  000696  51F8               	movf	_logstate& (0+255),w,b
 10009  000698  0100               	movlb	0	; () banked
 10010  00069A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10011  00069C  B4D8               	btfsc	status,2,c
 10012  00069E  0012               	return	
 10013                           
 10014                           ; BSR set to: 0
 10015                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10016                           
 10017                           ; BSR set to: 0
 10018                           
 10019                           ; BSR set to: 0
 10020  0006A0  0E01               	movlw	1
 10021  0006A2  ECD1  F02F         	call	_lcdInst
 10022  0006A6  0E68               	movlw	104
 10023  0006A8  0100               	movlb	0	; () banked
 10024  0006AA  6FC4               	movwf	??_UI& (0+255),b
 10025  0006AC  0EE4               	movlw	228
 10026  0006AE                     u11217:
 10027  0006AE  2EE8               	decfsz	wreg,f,c
 10028  0006B0  D7FE               	bra	u11217
 10029  0006B2  2FC4               	decfsz	??_UI& (0+255),f,b
 10030  0006B4  D7FC               	bra	u11217
 10031  0006B6  F000               	nop	
 10032                           
 10033                           ;UI.c: 185: lcdInst(0b10000000);;
 10034  0006B8  0E80               	movlw	128
 10035  0006BA  ECD1  F02F         	call	_lcdInst
 10036                           
 10037                           ;UI.c: 186: printf(" -- POP  CAN -- ");
 10038  0006BE  0E4B               	movlw	low STR_24
 10039  0006C0  0100               	movlb	0	; () banked
 10040  0006C2  6F8E               	movwf	printf@f& (0+255),b
 10041  0006C4  0EFD               	movlw	high STR_24
 10042  0006C6  0100               	movlb	0	; () banked
 10043  0006C8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10044  0006CA  EC67  F00E         	call	_printf	;wreg free
 10045                           
 10046                           ;UI.c: 187: lcdInst(0b11000000);;
 10047  0006CE  0EC0               	movlw	192
 10048  0006D0  ECD1  F02F         	call	_lcdInst
 10049                           
 10050                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
 10051  0006D4  0E28               	movlw	low STR_25
 10052  0006D6  0100               	movlb	0	; () banked
 10053  0006D8  6F8E               	movwf	printf@f& (0+255),b
 10054  0006DA  0EFE               	movlw	high STR_25
 10055  0006DC  0100               	movlb	0	; () banked
 10056  0006DE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10057  0006E0  C0F2  F090         	movff	_log_count_pop_no_tab,?_printf+2
 10058  0006E4  C0F3  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
 10059  0006E8  C0F4  F092         	movff	_log_count_pop_w_tab,?_printf+4
 10060  0006EC  C0F5  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
 10061  0006F0  EC67  F00E         	call	_printf	;wreg free
 10062                           
 10063                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10064  0006F4  0E00               	movlw	0
 10065  0006F6  0100               	movlb	0	; () banked
 10066  0006F8  6FD0               	movwf	UI@i_443& (0+255),b
 10067  0006FA                     l9785:
 10068                           
 10069                           ; BSR set to: 0
 10070  0006FA  0E63               	movlw	99
 10071  0006FC  0100               	movlb	0	; () banked
 10072  0006FE  65D0               	cpfsgt	UI@i_443& (0+255),b
 10073  000700  D001               	goto	l9789
 10074  000702  D00C               	goto	l9793
 10075  000704                     l9789:
 10076                           
 10077                           ; BSR set to: 0
 10078  000704  0E68               	movlw	104
 10079  000706  0100               	movlb	0	; () banked
 10080  000708  6FC4               	movwf	??_UI& (0+255),b
 10081  00070A  0EE4               	movlw	228
 10082  00070C                     u11227:
 10083  00070C  2EE8               	decfsz	wreg,f,c
 10084  00070E  D7FE               	bra	u11227
 10085  000710  2FC4               	decfsz	??_UI& (0+255),f,b
 10086  000712  D7FC               	bra	u11227
 10087  000714  F000               	nop	
 10088  000716  0100               	movlb	0	; () banked
 10089  000718  2BD0               	incf	UI@i_443& (0+255),f,b
 10090  00071A  D7EF               	goto	l9785
 10091  00071C                     l9793:
 10092                           
 10093                           ; BSR set to: 0
 10094  00071C  0100               	movlb	0	; () banked
 10095  00071E  51F8               	movf	_logstate& (0+255),w,b
 10096  000720  0100               	movlb	0	; () banked
 10097  000722  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10098  000724  B4D8               	btfsc	status,2,c
 10099  000726  0012               	return	
 10100                           
 10101                           ; BSR set to: 0
 10102                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10103                           
 10104                           ; BSR set to: 0
 10105                           
 10106                           ; BSR set to: 0
 10107  000728  0E00               	movlw	0
 10108  00072A  0100               	movlb	0	; () banked
 10109  00072C  6FD1               	movwf	UI@i_444& (0+255),b
 10110  00072E                     l9799:
 10111                           
 10112                           ; BSR set to: 0
 10113  00072E  0E63               	movlw	99
 10114  000730  0100               	movlb	0	; () banked
 10115  000732  65D1               	cpfsgt	UI@i_444& (0+255),b
 10116  000734  D001               	goto	l9803
 10117  000736  D00C               	goto	l9807
 10118  000738                     l9803:
 10119                           
 10120                           ; BSR set to: 0
 10121  000738  0E68               	movlw	104
 10122  00073A  0100               	movlb	0	; () banked
 10123  00073C  6FC4               	movwf	??_UI& (0+255),b
 10124  00073E  0EE4               	movlw	228
 10125  000740                     u11237:
 10126  000740  2EE8               	decfsz	wreg,f,c
 10127  000742  D7FE               	bra	u11237
 10128  000744  2FC4               	decfsz	??_UI& (0+255),f,b
 10129  000746  D7FC               	bra	u11237
 10130  000748  F000               	nop	
 10131  00074A  0100               	movlb	0	; () banked
 10132  00074C  2BD1               	incf	UI@i_444& (0+255),f,b
 10133  00074E  D7EF               	goto	l9799
 10134  000750                     l9807:
 10135                           
 10136                           ; BSR set to: 0
 10137  000750  0100               	movlb	0	; () banked
 10138  000752  51F8               	movf	_logstate& (0+255),w,b
 10139  000754  0100               	movlb	0	; () banked
 10140  000756  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10141  000758  B4D8               	btfsc	status,2,c
 10142  00075A  0012               	return	
 10143                           
 10144                           ; BSR set to: 0
 10145                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10146                           
 10147                           ; BSR set to: 0
 10148                           
 10149                           ; BSR set to: 0
 10150  00075C  0E01               	movlw	1
 10151  00075E  ECD1  F02F         	call	_lcdInst
 10152  000762  0E68               	movlw	104
 10153  000764  0100               	movlb	0	; () banked
 10154  000766  6FC4               	movwf	??_UI& (0+255),b
 10155  000768  0EE4               	movlw	228
 10156  00076A                     u11247:
 10157  00076A  2EE8               	decfsz	wreg,f,c
 10158  00076C  D7FE               	bra	u11247
 10159  00076E  2FC4               	decfsz	??_UI& (0+255),f,b
 10160  000770  D7FC               	bra	u11247
 10161  000772  F000               	nop	
 10162                           
 10163                           ;UI.c: 194: lcdInst(0b10000000);;
 10164  000774  0E80               	movlw	128
 10165  000776  ECD1  F02F         	call	_lcdInst
 10166                           
 10167                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
 10168  00077A  0E5C               	movlw	low STR_26
 10169  00077C  0100               	movlb	0	; () banked
 10170  00077E  6F8E               	movwf	printf@f& (0+255),b
 10171  000780  0EFD               	movlw	high STR_26
 10172  000782  0100               	movlb	0	; () banked
 10173  000784  6F8F               	movwf	(printf@f+1)& (0+255),b
 10174  000786  EC67  F00E         	call	_printf	;wreg free
 10175                           
 10176                           ;UI.c: 196: lcdInst(0b11000000);;
 10177  00078A  0EC0               	movlw	192
 10178  00078C  ECD1  F02F         	call	_lcdInst
 10179                           
 10180                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
 10181  000790  0E17               	movlw	low STR_27
 10182  000792  0100               	movlb	0	; () banked
 10183  000794  6F8E               	movwf	printf@f& (0+255),b
 10184  000796  0EFE               	movlw	high STR_27
 10185  000798  0100               	movlb	0	; () banked
 10186  00079A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10187  00079C  C141  F090         	movff	_log_count_can_no_lab,?_printf+2
 10188  0007A0  C142  F091         	movff	_log_count_can_no_lab+1,?_printf+3
 10189  0007A4  C143  F092         	movff	_log_count_can_w_lab,?_printf+4
 10190  0007A8  C144  F093         	movff	_log_count_can_w_lab+1,?_printf+5
 10191  0007AC  EC67  F00E         	call	_printf	;wreg free
 10192                           
 10193                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10194  0007B0  0E00               	movlw	0
 10195  0007B2  0100               	movlb	0	; () banked
 10196  0007B4  6FD2               	movwf	UI@i_447& (0+255),b
 10197  0007B6                     l9825:
 10198                           
 10199                           ; BSR set to: 0
 10200  0007B6  0E63               	movlw	99
 10201  0007B8  0100               	movlb	0	; () banked
 10202  0007BA  65D2               	cpfsgt	UI@i_447& (0+255),b
 10203  0007BC  D001               	goto	l9829
 10204  0007BE  D00C               	goto	l9833
 10205  0007C0                     l9829:
 10206                           
 10207                           ; BSR set to: 0
 10208  0007C0  0E68               	movlw	104
 10209  0007C2  0100               	movlb	0	; () banked
 10210  0007C4  6FC4               	movwf	??_UI& (0+255),b
 10211  0007C6  0EE4               	movlw	228
 10212  0007C8                     u11257:
 10213  0007C8  2EE8               	decfsz	wreg,f,c
 10214  0007CA  D7FE               	bra	u11257
 10215  0007CC  2FC4               	decfsz	??_UI& (0+255),f,b
 10216  0007CE  D7FC               	bra	u11257
 10217  0007D0  F000               	nop	
 10218  0007D2  0100               	movlb	0	; () banked
 10219  0007D4  2BD2               	incf	UI@i_447& (0+255),f,b
 10220  0007D6  D7EF               	goto	l9825
 10221  0007D8                     l9833:
 10222                           
 10223                           ; BSR set to: 0
 10224  0007D8  0100               	movlb	0	; () banked
 10225  0007DA  51F8               	movf	_logstate& (0+255),w,b
 10226  0007DC  0100               	movlb	0	; () banked
 10227  0007DE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10228  0007E0  B4D8               	btfsc	status,2,c
 10229  0007E2  0012               	return	
 10230                           
 10231                           ; BSR set to: 0
 10232                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10233                           
 10234                           ; BSR set to: 0
 10235                           
 10236                           ; BSR set to: 0
 10237  0007E4  0E00               	movlw	0
 10238  0007E6  0100               	movlb	0	; () banked
 10239  0007E8  6FD3               	movwf	UI@i_448& (0+255),b
 10240  0007EA                     l9839:
 10241                           
 10242                           ; BSR set to: 0
 10243  0007EA  0E63               	movlw	99
 10244  0007EC  0100               	movlb	0	; () banked
 10245  0007EE  65D3               	cpfsgt	UI@i_448& (0+255),b
 10246  0007F0  D001               	goto	l9843
 10247  0007F2  D00C               	goto	l9847
 10248  0007F4                     l9843:
 10249                           
 10250                           ; BSR set to: 0
 10251  0007F4  0E68               	movlw	104
 10252  0007F6  0100               	movlb	0	; () banked
 10253  0007F8  6FC4               	movwf	??_UI& (0+255),b
 10254  0007FA  0EE4               	movlw	228
 10255  0007FC                     u11267:
 10256  0007FC  2EE8               	decfsz	wreg,f,c
 10257  0007FE  D7FE               	bra	u11267
 10258  000800  2FC4               	decfsz	??_UI& (0+255),f,b
 10259  000802  D7FC               	bra	u11267
 10260  000804  F000               	nop	
 10261  000806  0100               	movlb	0	; () banked
 10262  000808  2BD3               	incf	UI@i_448& (0+255),f,b
 10263  00080A  D7EF               	goto	l9839
 10264  00080C                     l9847:
 10265                           
 10266                           ; BSR set to: 0
 10267  00080C  0100               	movlb	0	; () banked
 10268  00080E  51F8               	movf	_logstate& (0+255),w,b
 10269  000810  0100               	movlb	0	; () banked
 10270  000812  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10271  000814  B4D8               	btfsc	status,2,c
 10272  000816  0012               	return	
 10273                           
 10274                           ; BSR set to: 0
 10275                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10276                           
 10277                           ; BSR set to: 0
 10278                           
 10279                           ; BSR set to: 0
 10280  000818  0E01               	movlw	1
 10281  00081A  ECD1  F02F         	call	_lcdInst
 10282  00081E  0E68               	movlw	104
 10283  000820  0100               	movlb	0	; () banked
 10284  000822  6FC4               	movwf	??_UI& (0+255),b
 10285  000824  0EE4               	movlw	228
 10286  000826                     u11277:
 10287  000826  2EE8               	decfsz	wreg,f,c
 10288  000828  D7FE               	bra	u11277
 10289  00082A  2FC4               	decfsz	??_UI& (0+255),f,b
 10290  00082C  D7FC               	bra	u11277
 10291  00082E  F000               	nop	
 10292                           
 10293                           ;UI.c: 203: lcdInst(0b10000000);;
 10294  000830  0E80               	movlw	128
 10295  000832  ECD1  F02F         	call	_lcdInst
 10296                           
 10297                           ;UI.c: 204: printf("-- TOTAL CANS --");
 10298  000836  0E6D               	movlw	low STR_28
 10299  000838  0100               	movlb	0	; () banked
 10300  00083A  6F8E               	movwf	printf@f& (0+255),b
 10301  00083C  0EFD               	movlw	high STR_28
 10302  00083E  0100               	movlb	0	; () banked
 10303  000840  6F8F               	movwf	(printf@f+1)& (0+255),b
 10304  000842  EC67  F00E         	call	_printf	;wreg free
 10305                           
 10306                           ;UI.c: 205: lcdInst(0b11000000);;
 10307  000846  0EC0               	movlw	192
 10308  000848  ECD1  F02F         	call	_lcdInst
 10309                           
 10310                           ;UI.c: 206: printf("%d", log_count_total);
 10311  00084C  0E25               	movlw	low (STR_27+14)
 10312  00084E  0100               	movlb	0	; () banked
 10313  000850  6F8E               	movwf	printf@f& (0+255),b
 10314  000852  0EFE               	movlw	high (STR_27+14)
 10315  000854  0100               	movlb	0	; () banked
 10316  000856  6F8F               	movwf	(printf@f+1)& (0+255),b
 10317  000858  C145  F090         	movff	_log_count_total,?_printf+2
 10318  00085C  C146  F091         	movff	_log_count_total+1,?_printf+3
 10319  000860  EC67  F00E         	call	_printf	;wreg free
 10320                           
 10321                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10322  000864  0E00               	movlw	0
 10323  000866  0100               	movlb	0	; () banked
 10324  000868  6FD4               	movwf	UI@i_451& (0+255),b
 10325  00086A                     l9865:
 10326                           
 10327                           ; BSR set to: 0
 10328  00086A  0E63               	movlw	99
 10329  00086C  0100               	movlb	0	; () banked
 10330  00086E  65D4               	cpfsgt	UI@i_451& (0+255),b
 10331  000870  D001               	goto	l9869
 10332  000872  D00C               	goto	l9873
 10333  000874                     l9869:
 10334                           
 10335                           ; BSR set to: 0
 10336  000874  0E68               	movlw	104
 10337  000876  0100               	movlb	0	; () banked
 10338  000878  6FC4               	movwf	??_UI& (0+255),b
 10339  00087A  0EE4               	movlw	228
 10340  00087C                     u11287:
 10341  00087C  2EE8               	decfsz	wreg,f,c
 10342  00087E  D7FE               	bra	u11287
 10343  000880  2FC4               	decfsz	??_UI& (0+255),f,b
 10344  000882  D7FC               	bra	u11287
 10345  000884  F000               	nop	
 10346  000886  0100               	movlb	0	; () banked
 10347  000888  2BD4               	incf	UI@i_451& (0+255),f,b
 10348  00088A  D7EF               	goto	l9865
 10349  00088C                     l9873:
 10350                           
 10351                           ; BSR set to: 0
 10352  00088C  0100               	movlb	0	; () banked
 10353  00088E  51F8               	movf	_logstate& (0+255),w,b
 10354  000890  0100               	movlb	0	; () banked
 10355  000892  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10356  000894  B4D8               	btfsc	status,2,c
 10357  000896  0012               	return	
 10358                           
 10359                           ; BSR set to: 0
 10360                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10361                           
 10362                           ; BSR set to: 0
 10363                           
 10364                           ; BSR set to: 0
 10365  000898  0E00               	movlw	0
 10366  00089A  0100               	movlb	0	; () banked
 10367  00089C  6FD5               	movwf	UI@i_452& (0+255),b
 10368  00089E                     l9879:
 10369                           
 10370                           ; BSR set to: 0
 10371  00089E  0E63               	movlw	99
 10372  0008A0  0100               	movlb	0	; () banked
 10373  0008A2  65D5               	cpfsgt	UI@i_452& (0+255),b
 10374  0008A4  D001               	goto	l9883
 10375  0008A6  D00C               	goto	l9887
 10376  0008A8                     l9883:
 10377                           
 10378                           ; BSR set to: 0
 10379  0008A8  0E68               	movlw	104
 10380  0008AA  0100               	movlb	0	; () banked
 10381  0008AC  6FC4               	movwf	??_UI& (0+255),b
 10382  0008AE  0EE4               	movlw	228
 10383  0008B0                     u11297:
 10384  0008B0  2EE8               	decfsz	wreg,f,c
 10385  0008B2  D7FE               	bra	u11297
 10386  0008B4  2FC4               	decfsz	??_UI& (0+255),f,b
 10387  0008B6  D7FC               	bra	u11297
 10388  0008B8  F000               	nop	
 10389  0008BA  0100               	movlb	0	; () banked
 10390  0008BC  2BD5               	incf	UI@i_452& (0+255),f,b
 10391  0008BE  D7EF               	goto	l9879
 10392  0008C0                     l9887:
 10393                           
 10394                           ; BSR set to: 0
 10395  0008C0  0100               	movlb	0	; () banked
 10396  0008C2  51F8               	movf	_logstate& (0+255),w,b
 10397  0008C4  0100               	movlb	0	; () banked
 10398  0008C6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10399  0008C8  B4D8               	btfsc	status,2,c
 10400  0008CA  0012               	return	
 10401  0008CC                     l9891:
 10402  0008CC  0100               	movlb	0	; () banked
 10403  0008CE  51F8               	movf	_logstate& (0+255),w,b
 10404  0008D0  0100               	movlb	0	; () banked
 10405  0008D2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10406  0008D4  B4D8               	btfsc	status,2,c
 10407  0008D6  0012               	return	
 10408  0008D8  D44A               	goto	l9587
 10409  0008DA                     __end_of_UI:
 10410                           	opt stack 0
 10411                           tblptru	equ	0xFF8
 10412                           tblptrh	equ	0xFF7
 10413                           tblptrl	equ	0xFF6
 10414                           tablat	equ	0xFF5
 10415                           prodh	equ	0xFF4
 10416                           prodl	equ	0xFF3
 10417                           intcon	equ	0xFF2
 10418                           intcon2	equ	0xFF1
 10419                           intcon3	equ	0xFF0
 10420                           postinc0	equ	0xFEE
 10421                           wreg	equ	0xFE8
 10422                           postdec1	equ	0xFE5
 10423                           fsr1l	equ	0xFE1
 10424                           indf2	equ	0xFDF
 10425                           postinc2	equ	0xFDE
 10426                           postdec2	equ	0xFDD
 10427                           fsr2h	equ	0xFDA
 10428                           fsr2l	equ	0xFD9
 10429                           status	equ	0xFD8
 10430                           
 10431 ;; *************** function _printRTC *****************
 10432 ;; Defined at:
 10433 ;;		line 63 in file "RTC.c"
 10434 ;; Parameters:    Size  Location     Type
 10435 ;;		None
 10436 ;; Auto vars:     Size  Location     Type
 10437 ;;  i               2   66[BANK0 ] int 
 10438 ;;  INT_time       14   46[BANK0 ] int [7]
 10439 ;;  month           4   62[BANK0 ] unsigned char [4]
 10440 ;;  RTC_month       2   60[BANK0 ] int 
 10441 ;; Return value:  Size  Location     Type
 10442 ;;                  1    wreg      void 
 10443 ;; Registers used:
 10444 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10445 ;; Tracked objects:
 10446 ;;		On entry : 0/0
 10447 ;;		On exit  : 0/0
 10448 ;;		Unchanged: 0/0
 10449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10451 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10452 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10453 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10454 ;;Total ram usage:       25 bytes
 10455 ;; Hardware stack levels used:    1
 10456 ;; Hardware stack levels required when called:   10
 10457 ;; This function calls:
 10458 ;;		_getRTC
 10459 ;;		_lcdInst
 10460 ;;		_printf
 10461 ;;		_strcpy
 10462 ;; This function is called by:
 10463 ;;		_UI
 10464 ;;		_change_state_to_menu_start
 10465 ;; This function uses a non-reentrant model
 10466 ;;
 10467                           
 10468                           	psect	text28
 10469  0032A4                     __ptext28:
 10470                           	opt stack 0
 10471  0032A4                     _printRTC:
 10472                           	opt stack 18
 10473                           
 10474                           ;RTC.c: 64: getRTC();
 10475                           
 10476                           ; BSR set to: 0
 10477                           ;incstack = 0
 10478  0032A4  EC83  F028         	call	_getRTC	;wreg free
 10479                           
 10480                           ;RTC.c: 65: char month[] = "MMM";
 10481  0032A8  C151  F0BE         	movff	printRTC@F3240,printRTC@month
 10482  0032AC  C152  F0BF         	movff	printRTC@F3240+1,printRTC@month+1
 10483  0032B0  C153  F0C0         	movff	printRTC@F3240+2,printRTC@month+2
 10484  0032B4  C154  F0C1         	movff	printRTC@F3240+3,printRTC@month+3
 10485                           
 10486                           ;RTC.c: 66: int INT_time[7];
 10487                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 10488  0032B8  0E00               	movlw	0
 10489  0032BA  0100               	movlb	0	; () banked
 10490  0032BC  6FC3               	movwf	(printRTC@i+1)& (0+255),b
 10491  0032BE  0E00               	movlw	0
 10492  0032C0  6FC2               	movwf	printRTC@i& (0+255),b
 10493                           
 10494                           ; BSR set to: 0
 10495  0032C2  0100               	movlb	0	; () banked
 10496  0032C4  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10497  0032C6  D008               	goto	l7329
 10498  0032C8  0100               	movlb	0	; () banked
 10499  0032CA  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10500  0032CC  E146               	bnz	l632
 10501  0032CE  0E07               	movlw	7
 10502  0032D0  0100               	movlb	0	; () banked
 10503  0032D2  5DC2               	subwf	printRTC@i& (0+255),w,b
 10504  0032D4  B0D8               	btfsc	status,0,c
 10505  0032D6  D041               	goto	l632
 10506  0032D8                     l7329:
 10507                           
 10508                           ; BSR set to: 0
 10509                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 10510  0032D8  0E1C               	movlw	low _time
 10511  0032DA  0100               	movlb	0	; () banked
 10512  0032DC  25C2               	addwf	printRTC@i& (0+255),w,b
 10513  0032DE  6ED9               	movwf	fsr2l,c
 10514  0032E0  0E01               	movlw	high _time
 10515  0032E2  0100               	movlb	0	; () banked
 10516  0032E4  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10517  0032E6  6EDA               	movwf	fsr2h,c
 10518  0032E8  50DF               	movf	indf2,w,c
 10519  0032EA  0100               	movlb	0	; () banked
 10520  0032EC  6FAB               	movwf	??_printRTC& (0+255),b
 10521  0032EE  0100               	movlb	0	; () banked
 10522  0032F0  3BAB               	swapf	??_printRTC& (0+255),f,b
 10523  0032F2  0E0F               	movlw	15
 10524  0032F4  17AB               	andwf	??_printRTC& (0+255),f,b
 10525  0032F6  0E0F               	movlw	15
 10526  0032F8  0100               	movlb	0	; () banked
 10527  0032FA  17AB               	andwf	??_printRTC& (0+255),f,b
 10528  0032FC  0100               	movlb	0	; () banked
 10529  0032FE  51AB               	movf	??_printRTC& (0+255),w,b
 10530  003300  0D0A               	mullw	10
 10531  003302  0E1C               	movlw	low _time
 10532  003304  0100               	movlb	0	; () banked
 10533  003306  25C2               	addwf	printRTC@i& (0+255),w,b
 10534  003308  6ED9               	movwf	fsr2l,c
 10535  00330A  0E01               	movlw	high _time
 10536  00330C  0100               	movlb	0	; () banked
 10537  00330E  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10538  003310  6EDA               	movwf	fsr2h,c
 10539  003312  50DF               	movf	indf2,w,c
 10540  003314  0B0F               	andlw	15
 10541  003316  0100               	movlb	0	; () banked
 10542  003318  6FAC               	movwf	(??_printRTC+1)& (0+255),b
 10543  00331A  6BAD               	clrf	(??_printRTC+2)& (0+255),b
 10544  00331C  50F3               	movf	prodl,w,c
 10545  00331E  0100               	movlb	0	; () banked
 10546  003320  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
 10547  003322  50F4               	movf	prodh,w,c
 10548  003324  0100               	movlb	0	; () banked
 10549  003326  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
 10550  003328  90D8               	bcf	status,0,c
 10551  00332A  0100               	movlb	0	; () banked
 10552  00332C  35C2               	rlcf	printRTC@i& (0+255),w,b
 10553  00332E  6ED9               	movwf	fsr2l,c
 10554  003330  0100               	movlb	0	; () banked
 10555  003332  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
 10556  003334  6EDA               	movwf	fsr2h,c
 10557  003336  0EAE               	movlw	low printRTC@INT_time
 10558  003338  26D9               	addwf	fsr2l,f,c
 10559  00333A  0E00               	movlw	high printRTC@INT_time
 10560  00333C  22DA               	addwfc	fsr2h,f,c
 10561  00333E  C0AC  FFDE         	movff	??_printRTC+1,postinc2
 10562  003342  C0AD  FFDD         	movff	??_printRTC+2,postdec2
 10563                           
 10564                           ; BSR set to: 0
 10565  003346  0100               	movlb	0	; () banked
 10566  003348  4BC2               	infsnz	printRTC@i& (0+255),f,b
 10567  00334A  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
 10568                           
 10569                           ; BSR set to: 0
 10570  00334C  0100               	movlb	0	; () banked
 10571  00334E  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10572  003350  D7C3               	goto	l7329
 10573  003352  0100               	movlb	0	; () banked
 10574  003354  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10575  003356  E101               	bnz	u6410
 10576  003358  D7BA               	goto	L10
 10577  00335A                     u6410:
 10578  00335A                     l632:
 10579                           
 10580                           ; BSR set to: 0
 10581                           ;RTC.c: 69: }
 10582                           ;RTC.c: 70: int RTC_month = INT_time[5];
 10583  00335A  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
 10584  00335E  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
 10585                           
 10586                           ;RTC.c: 72: switch(RTC_month){
 10587  003362  D0B4               	goto	l7361
 10588  003364                     l7335:
 10589                           
 10590                           ; BSR set to: 0
 10591                           ;RTC.c: 74: strcpy(month, "JAN");
 10592  003364  0EBE               	movlw	low printRTC@month
 10593  003366  0100               	movlb	0	; () banked
 10594  003368  6F80               	movwf	strcpy@to& (0+255),b
 10595  00336A  0E00               	movlw	high printRTC@month
 10596  00336C  0100               	movlb	0	; () banked
 10597  00336E  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10598  003370  0EDA               	movlw	low STR_8
 10599  003372  0100               	movlb	0	; () banked
 10600  003374  6F82               	movwf	strcpy@from& (0+255),b
 10601  003376  0EFF               	movlw	high STR_8
 10602  003378  0100               	movlb	0	; () banked
 10603  00337A  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10604  00337C  EC20  F02D         	call	_strcpy	;wreg free
 10605                           
 10606                           ;RTC.c: 75: break;
 10607  003380  D0D4               	goto	l7363
 10608  003382                     l7337:
 10609                           
 10610                           ;RTC.c: 77: strcpy(month, "FEB");
 10611  003382  0EBE               	movlw	low printRTC@month
 10612  003384  0100               	movlb	0	; () banked
 10613  003386  6F80               	movwf	strcpy@to& (0+255),b
 10614  003388  0E00               	movlw	high printRTC@month
 10615  00338A  0100               	movlb	0	; () banked
 10616  00338C  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10617  00338E  0ECA               	movlw	low STR_9
 10618  003390  0100               	movlb	0	; () banked
 10619  003392  6F82               	movwf	strcpy@from& (0+255),b
 10620  003394  0EFF               	movlw	high STR_9
 10621  003396  0100               	movlb	0	; () banked
 10622  003398  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10623  00339A  EC20  F02D         	call	_strcpy	;wreg free
 10624                           
 10625                           ;RTC.c: 78: break;
 10626  00339E  D0C5               	goto	l7363
 10627  0033A0                     l7339:
 10628                           
 10629                           ;RTC.c: 80: strcpy(month, "MAR");
 10630  0033A0  0EBE               	movlw	low printRTC@month
 10631  0033A2  0100               	movlb	0	; () banked
 10632  0033A4  6F80               	movwf	strcpy@to& (0+255),b
 10633  0033A6  0E00               	movlw	high printRTC@month
 10634  0033A8  0100               	movlb	0	; () banked
 10635  0033AA  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10636  0033AC  0EE6               	movlw	low STR_10
 10637  0033AE  0100               	movlb	0	; () banked
 10638  0033B0  6F82               	movwf	strcpy@from& (0+255),b
 10639  0033B2  0EFF               	movlw	high STR_10
 10640  0033B4  0100               	movlb	0	; () banked
 10641  0033B6  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10642  0033B8  EC20  F02D         	call	_strcpy	;wreg free
 10643                           
 10644                           ;RTC.c: 81: break;
 10645  0033BC  D0B6               	goto	l7363
 10646  0033BE                     l7341:
 10647                           
 10648                           ;RTC.c: 83: strcpy(month, "APR");
 10649  0033BE  0EBE               	movlw	low printRTC@month
 10650  0033C0  0100               	movlb	0	; () banked
 10651  0033C2  6F80               	movwf	strcpy@to& (0+255),b
 10652  0033C4  0E00               	movlw	high printRTC@month
 10653  0033C6  0100               	movlb	0	; () banked
 10654  0033C8  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10655  0033CA  0EEA               	movlw	low STR_11
 10656  0033CC  0100               	movlb	0	; () banked
 10657  0033CE  6F82               	movwf	strcpy@from& (0+255),b
 10658  0033D0  0EFF               	movlw	high STR_11
 10659  0033D2  0100               	movlb	0	; () banked
 10660  0033D4  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10661  0033D6  EC20  F02D         	call	_strcpy	;wreg free
 10662                           
 10663                           ;RTC.c: 84: break;
 10664  0033DA  D0A7               	goto	l7363
 10665  0033DC                     l7343:
 10666                           
 10667                           ;RTC.c: 86: strcpy(month, "MAY");
 10668  0033DC  0EBE               	movlw	low printRTC@month
 10669  0033DE  0100               	movlb	0	; () banked
 10670  0033E0  6F80               	movwf	strcpy@to& (0+255),b
 10671  0033E2  0E00               	movlw	high printRTC@month
 10672  0033E4  0100               	movlb	0	; () banked
 10673  0033E6  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10674  0033E8  0EFA               	movlw	low STR_12
 10675  0033EA  0100               	movlb	0	; () banked
 10676  0033EC  6F82               	movwf	strcpy@from& (0+255),b
 10677  0033EE  0EFF               	movlw	high STR_12
 10678  0033F0  0100               	movlb	0	; () banked
 10679  0033F2  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10680  0033F4  EC20  F02D         	call	_strcpy	;wreg free
 10681                           
 10682                           ;RTC.c: 87: break;
 10683  0033F8  D098               	goto	l7363
 10684  0033FA                     l7345:
 10685                           
 10686                           ;RTC.c: 89: strcpy(month, "JUN");
 10687  0033FA  0EBE               	movlw	low printRTC@month
 10688  0033FC  0100               	movlb	0	; () banked
 10689  0033FE  6F80               	movwf	strcpy@to& (0+255),b
 10690  003400  0E00               	movlw	high printRTC@month
 10691  003402  0100               	movlb	0	; () banked
 10692  003404  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10693  003406  0EDE               	movlw	low STR_13
 10694  003408  0100               	movlb	0	; () banked
 10695  00340A  6F82               	movwf	strcpy@from& (0+255),b
 10696  00340C  0EFF               	movlw	high STR_13
 10697  00340E  0100               	movlb	0	; () banked
 10698  003410  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10699  003412  EC20  F02D         	call	_strcpy	;wreg free
 10700                           
 10701                           ;RTC.c: 90: break;
 10702  003416  D089               	goto	l7363
 10703  003418                     l7347:
 10704                           
 10705                           ;RTC.c: 92: strcpy(month, "JUL");
 10706  003418  0EBE               	movlw	low printRTC@month
 10707  00341A  0100               	movlb	0	; () banked
 10708  00341C  6F80               	movwf	strcpy@to& (0+255),b
 10709  00341E  0E00               	movlw	high printRTC@month
 10710  003420  0100               	movlb	0	; () banked
 10711  003422  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10712  003424  0ED6               	movlw	low STR_14
 10713  003426  0100               	movlb	0	; () banked
 10714  003428  6F82               	movwf	strcpy@from& (0+255),b
 10715  00342A  0EFF               	movlw	high STR_14
 10716  00342C  0100               	movlb	0	; () banked
 10717  00342E  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10718  003430  EC20  F02D         	call	_strcpy	;wreg free
 10719                           
 10720                           ;RTC.c: 93: break;
 10721  003434  D07A               	goto	l7363
 10722  003436                     l7349:
 10723                           
 10724                           ;RTC.c: 95: strcpy(month, "AUG");
 10725  003436  0EBE               	movlw	low printRTC@month
 10726  003438  0100               	movlb	0	; () banked
 10727  00343A  6F80               	movwf	strcpy@to& (0+255),b
 10728  00343C  0E00               	movlw	high printRTC@month
 10729  00343E  0100               	movlb	0	; () banked
 10730  003440  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10731  003442  0ED2               	movlw	low STR_15
 10732  003444  0100               	movlb	0	; () banked
 10733  003446  6F82               	movwf	strcpy@from& (0+255),b
 10734  003448  0EFF               	movlw	high STR_15
 10735  00344A  0100               	movlb	0	; () banked
 10736  00344C  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10737  00344E  EC20  F02D         	call	_strcpy	;wreg free
 10738                           
 10739                           ;RTC.c: 96: break;
 10740  003452  D06B               	goto	l7363
 10741  003454                     l7351:
 10742                           
 10743                           ;RTC.c: 98: strcpy(month, "SEP");
 10744  003454  0EBE               	movlw	low printRTC@month
 10745  003456  0100               	movlb	0	; () banked
 10746  003458  6F80               	movwf	strcpy@to& (0+255),b
 10747  00345A  0E00               	movlw	high printRTC@month
 10748  00345C  0100               	movlb	0	; () banked
 10749  00345E  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10750  003460  0EE2               	movlw	low STR_16
 10751  003462  0100               	movlb	0	; () banked
 10752  003464  6F82               	movwf	strcpy@from& (0+255),b
 10753  003466  0EFF               	movlw	high STR_16
 10754  003468  0100               	movlb	0	; () banked
 10755  00346A  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10756  00346C  EC20  F02D         	call	_strcpy	;wreg free
 10757                           
 10758                           ;RTC.c: 99: break;
 10759  003470  D05C               	goto	l7363
 10760  003472                     l7353:
 10761                           
 10762                           ;RTC.c: 101: strcpy(month, "OCT");
 10763  003472  0EBE               	movlw	low printRTC@month
 10764  003474  0100               	movlb	0	; () banked
 10765  003476  6F80               	movwf	strcpy@to& (0+255),b
 10766  003478  0E00               	movlw	high printRTC@month
 10767  00347A  0100               	movlb	0	; () banked
 10768  00347C  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10769  00347E  0EF2               	movlw	low STR_17
 10770  003480  0100               	movlb	0	; () banked
 10771  003482  6F82               	movwf	strcpy@from& (0+255),b
 10772  003484  0EFF               	movlw	high STR_17
 10773  003486  0100               	movlb	0	; () banked
 10774  003488  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10775  00348A  EC20  F02D         	call	_strcpy	;wreg free
 10776                           
 10777                           ;RTC.c: 102: break;
 10778  00348E  D04D               	goto	l7363
 10779  003490                     l7355:
 10780                           
 10781                           ;RTC.c: 104: strcpy(month, "NOV");
 10782  003490  0EBE               	movlw	low printRTC@month
 10783  003492  0100               	movlb	0	; () banked
 10784  003494  6F80               	movwf	strcpy@to& (0+255),b
 10785  003496  0E00               	movlw	high printRTC@month
 10786  003498  0100               	movlb	0	; () banked
 10787  00349A  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10788  00349C  0EF6               	movlw	low STR_18
 10789  00349E  0100               	movlb	0	; () banked
 10790  0034A0  6F82               	movwf	strcpy@from& (0+255),b
 10791  0034A2  0EFF               	movlw	high STR_18
 10792  0034A4  0100               	movlb	0	; () banked
 10793  0034A6  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10794  0034A8  EC20  F02D         	call	_strcpy	;wreg free
 10795                           
 10796                           ;RTC.c: 105: break;
 10797  0034AC  D03E               	goto	l7363
 10798  0034AE                     l7357:
 10799                           
 10800                           ;RTC.c: 107: strcpy(month, "DEC");
 10801  0034AE  0EBE               	movlw	low printRTC@month
 10802  0034B0  0100               	movlb	0	; () banked
 10803  0034B2  6F80               	movwf	strcpy@to& (0+255),b
 10804  0034B4  0E00               	movlw	high printRTC@month
 10805  0034B6  0100               	movlb	0	; () banked
 10806  0034B8  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10807  0034BA  0ECE               	movlw	low STR_19
 10808  0034BC  0100               	movlb	0	; () banked
 10809  0034BE  6F82               	movwf	strcpy@from& (0+255),b
 10810  0034C0  0EFF               	movlw	high STR_19
 10811  0034C2  0100               	movlb	0	; () banked
 10812  0034C4  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10813  0034C6  EC20  F02D         	call	_strcpy	;wreg free
 10814                           
 10815                           ;RTC.c: 109: }
 10816                           
 10817                           ;RTC.c: 108: break;
 10818  0034CA  D02F               	goto	l7363
 10819  0034CC                     l7361:
 10820  0034CC  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
 10821  0034D0  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
 10822                           
 10823                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10824                           ; Switch size 1, requested type "space"
 10825                           ; Number of cases is 1, Range of values is 0 to 0
 10826                           ; switch strategies available:
 10827                           ; Name         Instructions Cycles
 10828                           ; simple_byte            4     3 (average)
 10829                           ;	Chosen strategy is simple_byte
 10830  0034D4  0100               	movlb	0	; () banked
 10831  0034D6  51AC               	movf	(??_printRTC+1)& (0+255),w,b
 10832  0034D8  0A00               	xorlw	0	; case 0
 10833  0034DA  A4D8               	btfss	status,2,c
 10834  0034DC  D026               	goto	l7363
 10835                           
 10836                           ; BSR set to: 0
 10837                           ; Switch size 1, requested type "space"
 10838                           ; Number of cases is 12, Range of values is 1 to 12
 10839                           ; switch strategies available:
 10840                           ; Name         Instructions Cycles
 10841                           ; simple_byte           37    19 (average)
 10842                           ;	Chosen strategy is simple_byte
 10843  0034DE  0100               	movlb	0	; () banked
 10844  0034E0  51AB               	movf	??_printRTC& (0+255),w,b
 10845  0034E2  0A01               	xorlw	1	; case 1
 10846  0034E4  B4D8               	btfsc	status,2,c
 10847  0034E6  D73E               	goto	l7335
 10848  0034E8  0A03               	xorlw	3	; case 2
 10849  0034EA  B4D8               	btfsc	status,2,c
 10850  0034EC  D74A               	goto	l7337
 10851  0034EE  0A01               	xorlw	1	; case 3
 10852  0034F0  B4D8               	btfsc	status,2,c
 10853  0034F2  D756               	goto	l7339
 10854  0034F4  0A07               	xorlw	7	; case 4
 10855  0034F6  B4D8               	btfsc	status,2,c
 10856  0034F8  D762               	goto	l7341
 10857  0034FA  0A01               	xorlw	1	; case 5
 10858  0034FC  B4D8               	btfsc	status,2,c
 10859  0034FE  D76E               	goto	l7343
 10860  003500  0A03               	xorlw	3	; case 6
 10861  003502  B4D8               	btfsc	status,2,c
 10862  003504  D77A               	goto	l7345
 10863  003506  0A01               	xorlw	1	; case 7
 10864  003508  B4D8               	btfsc	status,2,c
 10865  00350A  D786               	goto	l7347
 10866  00350C  0A0F               	xorlw	15	; case 8
 10867  00350E  B4D8               	btfsc	status,2,c
 10868  003510  D792               	goto	l7349
 10869  003512  0A01               	xorlw	1	; case 9
 10870  003514  B4D8               	btfsc	status,2,c
 10871  003516  D79E               	goto	l7351
 10872  003518  0A03               	xorlw	3	; case 10
 10873  00351A  B4D8               	btfsc	status,2,c
 10874  00351C  D7AA               	goto	l7353
 10875  00351E  0A01               	xorlw	1	; case 11
 10876  003520  B4D8               	btfsc	status,2,c
 10877  003522  D7B6               	goto	l7355
 10878  003524  0A07               	xorlw	7	; case 12
 10879  003526  B4D8               	btfsc	status,2,c
 10880  003528  D7C2               	goto	l7357
 10881  00352A                     l7363:
 10882                           
 10883                           ;RTC.c: 110: lcdInst(0b10000000);;
 10884  00352A  0E80               	movlw	128
 10885  00352C  ECD1  F02F         	call	_lcdInst
 10886                           
 10887                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 10888  003530  0EC2               	movlw	low STR_21
 10889  003532  0100               	movlb	0	; () banked
 10890  003534  6F8E               	movwf	printf@f& (0+255),b
 10891  003536  0EFA               	movlw	high STR_21
 10892  003538  0100               	movlb	0	; () banked
 10893  00353A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10894  00353C  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
 10895  003540  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
 10896  003544  0EBE               	movlw	low printRTC@month
 10897  003546  0100               	movlb	0	; () banked
 10898  003548  6F92               	movwf	(?_printf+4)& (0+255),b
 10899  00354A  0E00               	movlw	high printRTC@month
 10900  00354C  0100               	movlb	0	; () banked
 10901  00354E  6F93               	movwf	(?_printf+5)& (0+255),b
 10902  003550  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
 10903  003554  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
 10904  003558  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
 10905  00355C  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
 10906  003560  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
 10907  003564  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
 10908  003568  EC67  F00E         	call	_printf	;wreg free
 10909  00356C  0012               	return		;funcret
 10910  00356E                     __end_of_printRTC:
 10911                           	opt stack 0
 10912                           tblptru	equ	0xFF8
 10913                           tblptrh	equ	0xFF7
 10914                           tblptrl	equ	0xFF6
 10915                           tablat	equ	0xFF5
 10916                           prodh	equ	0xFF4
 10917                           prodl	equ	0xFF3
 10918                           intcon	equ	0xFF2
 10919                           intcon2	equ	0xFF1
 10920                           intcon3	equ	0xFF0
 10921                           postinc0	equ	0xFEE
 10922                           wreg	equ	0xFE8
 10923                           postdec1	equ	0xFE5
 10924                           fsr1l	equ	0xFE1
 10925                           indf2	equ	0xFDF
 10926                           postinc2	equ	0xFDE
 10927                           postdec2	equ	0xFDD
 10928                           fsr2h	equ	0xFDA
 10929                           fsr2l	equ	0xFD9
 10930                           status	equ	0xFD8
 10931                           
 10932 ;; *************** function _strcpy *****************
 10933 ;; Defined at:
 10934 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 10935 ;; Parameters:    Size  Location     Type
 10936 ;;  to              2    0[BANK0 ] PTR unsigned char 
 10937 ;;		 -> printRTC@month(4), UI@month(4), 
 10938 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 10939 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 10940 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 10941 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 10942 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 10943 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 10944 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 10945 ;;		 -> STR_8(4), 
 10946 ;; Auto vars:     Size  Location     Type
 10947 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 10948 ;;		 -> printRTC@month(4), UI@month(4), 
 10949 ;; Return value:  Size  Location     Type
 10950 ;;                  2    0[BANK0 ] PTR unsigned char 
 10951 ;; Registers used:
 10952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10953 ;; Tracked objects:
 10954 ;;		On entry : 0/0
 10955 ;;		On exit  : 0/0
 10956 ;;		Unchanged: 0/0
 10957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10958 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10959 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10961 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10962 ;;Total ram usage:        6 bytes
 10963 ;; Hardware stack levels used:    1
 10964 ;; Hardware stack levels required when called:    7
 10965 ;; This function calls:
 10966 ;;		Nothing
 10967 ;; This function is called by:
 10968 ;;		_UI
 10969 ;;		_printRTC
 10970 ;; This function uses a non-reentrant model
 10971 ;;
 10972                           
 10973                           	psect	text29
 10974  005A40                     __ptext29:
 10975                           	opt stack 0
 10976  005A40                     _strcpy:
 10977                           	opt stack 20
 10978                           
 10979                           ;incstack = 0
 10980  005A40  C080  F084         	movff	strcpy@to,strcpy@cp
 10981  005A44  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
 10982  005A48  D006               	goto	l7027
 10983  005A4A                     l7025:
 10984  005A4A  0100               	movlb	0	; () banked
 10985  005A4C  4B84               	infsnz	strcpy@cp& (0+255),f,b
 10986  005A4E  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
 10987  005A50  0100               	movlb	0	; () banked
 10988  005A52  4B82               	infsnz	strcpy@from& (0+255),f,b
 10989  005A54  2B83               	incf	(strcpy@from+1)& (0+255),f,b
 10990  005A56                     l7027:
 10991  005A56  C082  FFF6         	movff	strcpy@from,tblptrl
 10992  005A5A  C083  FFF7         	movff	strcpy@from+1,tblptrh
 10993  005A5E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10994  005A5E  6AF8               	clrf	tblptru,c
 10995  005A60                     	endif
 10996  005A60                     	if	0	;tblptru may be non-zero
 10997  005A60                     	endif
 10998  005A60  C084  FFD9         	movff	strcpy@cp,fsr2l
 10999  005A64  C085  FFDA         	movff	strcpy@cp+1,fsr2h
 11000  005A68  0008               	tblrd		*
 11001  005A6A  CFF5 FFDF          	movff	tablat,indf2
 11002  005A6E  50DF               	movf	indf2,w,c
 11003  005A70  B4D8               	btfsc	status,2,c
 11004  005A72  0012               	return	
 11005  005A74  D7EA               	goto	l7025
 11006  005A76                     __end_of_strcpy:
 11007                           	opt stack 0
 11008                           tblptru	equ	0xFF8
 11009                           tblptrh	equ	0xFF7
 11010                           tblptrl	equ	0xFF6
 11011                           tablat	equ	0xFF5
 11012                           prodh	equ	0xFF4
 11013                           prodl	equ	0xFF3
 11014                           intcon	equ	0xFF2
 11015                           intcon2	equ	0xFF1
 11016                           intcon3	equ	0xFF0
 11017                           postinc0	equ	0xFEE
 11018                           wreg	equ	0xFE8
 11019                           postdec1	equ	0xFE5
 11020                           fsr1l	equ	0xFE1
 11021                           indf2	equ	0xFDF
 11022                           postinc2	equ	0xFDE
 11023                           postdec2	equ	0xFDD
 11024                           fsr2h	equ	0xFDA
 11025                           fsr2l	equ	0xFD9
 11026                           status	equ	0xFD8
 11027                           
 11028 ;; *************** function _getRTC *****************
 11029 ;; Defined at:
 11030 ;;		line 44 in file "RTC.c"
 11031 ;; Parameters:    Size  Location     Type
 11032 ;;		None
 11033 ;; Auto vars:     Size  Location     Type
 11034 ;;  i               2    3[BANK0 ] int 
 11035 ;; Return value:  Size  Location     Type
 11036 ;;                  1    wreg      void 
 11037 ;; Registers used:
 11038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11039 ;; Tracked objects:
 11040 ;;		On entry : 0/0
 11041 ;;		On exit  : 0/0
 11042 ;;		Unchanged: 0/0
 11043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11045 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11047 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11048 ;;Total ram usage:        2 bytes
 11049 ;; Hardware stack levels used:    1
 11050 ;; Hardware stack levels required when called:    9
 11051 ;; This function calls:
 11052 ;;		_I2C_Master_Read
 11053 ;;		_I2C_Master_Start
 11054 ;;		_I2C_Master_Stop
 11055 ;;		_I2C_Master_Write
 11056 ;; This function is called by:
 11057 ;;		_printRTC
 11058 ;;		_initSortTimer
 11059 ;; This function uses a non-reentrant model
 11060 ;;
 11061                           
 11062                           	psect	text30
 11063  005106                     __ptext30:
 11064                           	opt stack 0
 11065  005106                     _getRTC:
 11066                           	opt stack 18
 11067                           
 11068                           ;RTC.c: 48: I2C_Master_Start();
 11069                           
 11070                           ;incstack = 0
 11071  005106  ECF7  F02F         	call	_I2C_Master_Start	;wreg free
 11072                           
 11073                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 11074  00510A  0E00               	movlw	0
 11075  00510C  0100               	movlb	0	; () banked
 11076  00510E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11077  005110  0ED0               	movlw	208
 11078  005112  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 11079  005114  ECE5  F02F         	call	_I2C_Master_Write	;wreg free
 11080                           
 11081                           ;RTC.c: 50: I2C_Master_Write(0x00);
 11082  005118  0E00               	movlw	0
 11083  00511A  0100               	movlb	0	; () banked
 11084  00511C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11085  00511E  0E00               	movlw	0
 11086  005120  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 11087  005122  ECE5  F02F         	call	_I2C_Master_Write	;wreg free
 11088                           
 11089                           ;RTC.c: 51: I2C_Master_Stop();
 11090  005126  ECF3  F02F         	call	_I2C_Master_Stop	;wreg free
 11091                           
 11092                           ;RTC.c: 54: I2C_Master_Start();
 11093  00512A  ECF7  F02F         	call	_I2C_Master_Start	;wreg free
 11094                           
 11095                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 11096  00512E  0E00               	movlw	0
 11097  005130  0100               	movlb	0	; () banked
 11098  005132  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11099  005134  0ED1               	movlw	209
 11100  005136  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 11101  005138  ECE5  F02F         	call	_I2C_Master_Write	;wreg free
 11102                           
 11103                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 11104  00513C  0E00               	movlw	0
 11105  00513E  0100               	movlb	0	; () banked
 11106  005140  6F84               	movwf	(getRTC@i+1)& (0+255),b
 11107  005142  0E00               	movlw	0
 11108  005144  6F83               	movwf	getRTC@i& (0+255),b
 11109  005146                     l7033:
 11110                           
 11111                           ; BSR set to: 0
 11112  005146  0100               	movlb	0	; () banked
 11113  005148  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
 11114  00514A  D008               	goto	l7037
 11115  00514C  0100               	movlb	0	; () banked
 11116  00514E  5184               	movf	(getRTC@i+1)& (0+255),w,b
 11117  005150  E115               	bnz	l7043
 11118  005152  0E06               	movlw	6
 11119  005154  0100               	movlb	0	; () banked
 11120  005156  5D83               	subwf	getRTC@i& (0+255),w,b
 11121  005158  B0D8               	btfsc	status,0,c
 11122  00515A  D010               	goto	l7043
 11123  00515C                     l7037:
 11124                           
 11125                           ; BSR set to: 0
 11126                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 11127  00515C  0E1C               	movlw	low _time
 11128  00515E  0100               	movlb	0	; () banked
 11129  005160  2583               	addwf	getRTC@i& (0+255),w,b
 11130  005162  6ED9               	movwf	fsr2l,c
 11131  005164  0E01               	movlw	high _time
 11132  005166  0100               	movlb	0	; () banked
 11133  005168  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
 11134  00516A  6EDA               	movwf	fsr2h,c
 11135  00516C  0E01               	movlw	1
 11136  00516E  EC78  F02E         	call	_I2C_Master_Read
 11137  005172  6EDF               	movwf	indf2,c
 11138  005174  0100               	movlb	0	; () banked
 11139  005176  4B83               	infsnz	getRTC@i& (0+255),f,b
 11140  005178  2B84               	incf	(getRTC@i+1)& (0+255),f,b
 11141  00517A  D7E5               	goto	l7033
 11142  00517C                     l7043:
 11143                           
 11144                           ; BSR set to: 0
 11145                           ;RTC.c: 58: }
 11146                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 11147  00517C  0E00               	movlw	0
 11148  00517E  EC78  F02E         	call	_I2C_Master_Read
 11149  005182  0101               	movlb	1	; () banked
 11150  005184  6F22               	movwf	(_time+6)& (0+255),b
 11151                           
 11152                           ;RTC.c: 60: I2C_Master_Stop();
 11153  005186  ECF3  F02F         	call	_I2C_Master_Stop	;wreg free
 11154  00518A  0012               	return		;funcret
 11155  00518C                     __end_of_getRTC:
 11156                           	opt stack 0
 11157                           tblptru	equ	0xFF8
 11158                           tblptrh	equ	0xFF7
 11159                           tblptrl	equ	0xFF6
 11160                           tablat	equ	0xFF5
 11161                           prodh	equ	0xFF4
 11162                           prodl	equ	0xFF3
 11163                           intcon	equ	0xFF2
 11164                           intcon2	equ	0xFF1
 11165                           intcon3	equ	0xFF0
 11166                           postinc0	equ	0xFEE
 11167                           wreg	equ	0xFE8
 11168                           postdec1	equ	0xFE5
 11169                           fsr1l	equ	0xFE1
 11170                           indf2	equ	0xFDF
 11171                           postinc2	equ	0xFDE
 11172                           postdec2	equ	0xFDD
 11173                           fsr2h	equ	0xFDA
 11174                           fsr2l	equ	0xFD9
 11175                           status	equ	0xFD8
 11176                           
 11177 ;; *************** function _I2C_Master_Write *****************
 11178 ;; Defined at:
 11179 ;;		line 49 in file "I2C.c"
 11180 ;; Parameters:    Size  Location     Type
 11181 ;;  d               2    1[BANK0 ] unsigned int 
 11182 ;; Auto vars:     Size  Location     Type
 11183 ;;		None
 11184 ;; Return value:  Size  Location     Type
 11185 ;;                  1    wreg      void 
 11186 ;; Registers used:
 11187 ;;		wreg, status,2, status,0, cstack
 11188 ;; Tracked objects:
 11189 ;;		On entry : 0/0
 11190 ;;		On exit  : 0/0
 11191 ;;		Unchanged: 0/0
 11192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11193 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11196 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11197 ;;Total ram usage:        2 bytes
 11198 ;; Hardware stack levels used:    1
 11199 ;; Hardware stack levels required when called:    8
 11200 ;; This function calls:
 11201 ;;		_I2C_Master_Wait
 11202 ;; This function is called by:
 11203 ;;		_loadRTC
 11204 ;;		_getRTC
 11205 ;; This function uses a non-reentrant model
 11206 ;;
 11207                           
 11208                           	psect	text31
 11209  005FCA                     __ptext31:
 11210                           	opt stack 0
 11211  005FCA                     _I2C_Master_Write:
 11212                           	opt stack 18
 11213                           
 11214                           ;I2C.c: 51: I2C_Master_Wait();
 11215                           
 11216                           ;incstack = 0
 11217  005FCA  ECB6  F02F         	call	_I2C_Master_Wait	;wreg free
 11218                           
 11219                           ;I2C.c: 52: SSPBUF = d;
 11220  005FCE  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 11221  005FD2  0012               	return		;funcret
 11222  005FD4                     __end_of_I2C_Master_Write:
 11223                           	opt stack 0
 11224                           tblptru	equ	0xFF8
 11225                           tblptrh	equ	0xFF7
 11226                           tblptrl	equ	0xFF6
 11227                           tablat	equ	0xFF5
 11228                           prodh	equ	0xFF4
 11229                           prodl	equ	0xFF3
 11230                           intcon	equ	0xFF2
 11231                           intcon2	equ	0xFF1
 11232                           intcon3	equ	0xFF0
 11233                           postinc0	equ	0xFEE
 11234                           wreg	equ	0xFE8
 11235                           postdec1	equ	0xFE5
 11236                           fsr1l	equ	0xFE1
 11237                           indf2	equ	0xFDF
 11238                           postinc2	equ	0xFDE
 11239                           postdec2	equ	0xFDD
 11240                           fsr2h	equ	0xFDA
 11241                           fsr2l	equ	0xFD9
 11242                           status	equ	0xFD8
 11243                           
 11244 ;; *************** function _I2C_Master_Stop *****************
 11245 ;; Defined at:
 11246 ;;		line 43 in file "I2C.c"
 11247 ;; Parameters:    Size  Location     Type
 11248 ;;		None
 11249 ;; Auto vars:     Size  Location     Type
 11250 ;;		None
 11251 ;; Return value:  Size  Location     Type
 11252 ;;                  1    wreg      void 
 11253 ;; Registers used:
 11254 ;;		wreg, status,2, status,0, cstack
 11255 ;; Tracked objects:
 11256 ;;		On entry : 0/0
 11257 ;;		On exit  : 0/0
 11258 ;;		Unchanged: 0/0
 11259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11264 ;;Total ram usage:        0 bytes
 11265 ;; Hardware stack levels used:    1
 11266 ;; Hardware stack levels required when called:    8
 11267 ;; This function calls:
 11268 ;;		_I2C_Master_Wait
 11269 ;; This function is called by:
 11270 ;;		_loadRTC
 11271 ;;		_getRTC
 11272 ;; This function uses a non-reentrant model
 11273 ;;
 11274                           
 11275                           	psect	text32
 11276  005FE6                     __ptext32:
 11277                           	opt stack 0
 11278  005FE6                     _I2C_Master_Stop:
 11279                           	opt stack 18
 11280                           
 11281                           ;I2C.c: 45: I2C_Master_Wait();
 11282                           
 11283                           ;incstack = 0
 11284  005FE6  ECB6  F02F         	call	_I2C_Master_Wait	;wreg free
 11285                           
 11286                           ;I2C.c: 46: PEN = 1;
 11287  005FEA  84C5               	bsf	4037,2,c	;volatile
 11288  005FEC  0012               	return		;funcret
 11289  005FEE                     __end_of_I2C_Master_Stop:
 11290                           	opt stack 0
 11291                           tblptru	equ	0xFF8
 11292                           tblptrh	equ	0xFF7
 11293                           tblptrl	equ	0xFF6
 11294                           tablat	equ	0xFF5
 11295                           prodh	equ	0xFF4
 11296                           prodl	equ	0xFF3
 11297                           intcon	equ	0xFF2
 11298                           intcon2	equ	0xFF1
 11299                           intcon3	equ	0xFF0
 11300                           postinc0	equ	0xFEE
 11301                           wreg	equ	0xFE8
 11302                           postdec1	equ	0xFE5
 11303                           fsr1l	equ	0xFE1
 11304                           indf2	equ	0xFDF
 11305                           postinc2	equ	0xFDE
 11306                           postdec2	equ	0xFDD
 11307                           fsr2h	equ	0xFDA
 11308                           fsr2l	equ	0xFD9
 11309                           status	equ	0xFD8
 11310                           
 11311 ;; *************** function _I2C_Master_Start *****************
 11312 ;; Defined at:
 11313 ;;		line 31 in file "I2C.c"
 11314 ;; Parameters:    Size  Location     Type
 11315 ;;		None
 11316 ;; Auto vars:     Size  Location     Type
 11317 ;;		None
 11318 ;; Return value:  Size  Location     Type
 11319 ;;                  1    wreg      void 
 11320 ;; Registers used:
 11321 ;;		wreg, status,2, status,0, cstack
 11322 ;; Tracked objects:
 11323 ;;		On entry : 0/0
 11324 ;;		On exit  : 0/0
 11325 ;;		Unchanged: 0/0
 11326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11331 ;;Total ram usage:        0 bytes
 11332 ;; Hardware stack levels used:    1
 11333 ;; Hardware stack levels required when called:    8
 11334 ;; This function calls:
 11335 ;;		_I2C_Master_Wait
 11336 ;; This function is called by:
 11337 ;;		_loadRTC
 11338 ;;		_getRTC
 11339 ;; This function uses a non-reentrant model
 11340 ;;
 11341                           
 11342                           	psect	text33
 11343  005FEE                     __ptext33:
 11344                           	opt stack 0
 11345  005FEE                     _I2C_Master_Start:
 11346                           	opt stack 18
 11347                           
 11348                           ;I2C.c: 33: I2C_Master_Wait();
 11349                           
 11350                           ;incstack = 0
 11351  005FEE  ECB6  F02F         	call	_I2C_Master_Wait	;wreg free
 11352                           
 11353                           ;I2C.c: 34: SEN = 1;
 11354  005FF2  80C5               	bsf	4037,0,c	;volatile
 11355  005FF4  0012               	return		;funcret
 11356  005FF6                     __end_of_I2C_Master_Start:
 11357                           	opt stack 0
 11358                           tblptru	equ	0xFF8
 11359                           tblptrh	equ	0xFF7
 11360                           tblptrl	equ	0xFF6
 11361                           tablat	equ	0xFF5
 11362                           prodh	equ	0xFF4
 11363                           prodl	equ	0xFF3
 11364                           intcon	equ	0xFF2
 11365                           intcon2	equ	0xFF1
 11366                           intcon3	equ	0xFF0
 11367                           postinc0	equ	0xFEE
 11368                           wreg	equ	0xFE8
 11369                           postdec1	equ	0xFE5
 11370                           fsr1l	equ	0xFE1
 11371                           indf2	equ	0xFDF
 11372                           postinc2	equ	0xFDE
 11373                           postdec2	equ	0xFDD
 11374                           fsr2h	equ	0xFDA
 11375                           fsr2l	equ	0xFD9
 11376                           status	equ	0xFD8
 11377                           
 11378 ;; *************** function _I2C_Master_Read *****************
 11379 ;; Defined at:
 11380 ;;		line 55 in file "I2C.c"
 11381 ;; Parameters:    Size  Location     Type
 11382 ;;  a               1    wreg     unsigned char 
 11383 ;; Auto vars:     Size  Location     Type
 11384 ;;  a               1    1[BANK0 ] unsigned char 
 11385 ;;  temp            1    2[BANK0 ] unsigned char 
 11386 ;; Return value:  Size  Location     Type
 11387 ;;                  1    wreg      unsigned char 
 11388 ;; Registers used:
 11389 ;;		wreg, status,2, status,0, cstack
 11390 ;; Tracked objects:
 11391 ;;		On entry : 0/0
 11392 ;;		On exit  : 0/0
 11393 ;;		Unchanged: 0/0
 11394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11396 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11398 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11399 ;;Total ram usage:        2 bytes
 11400 ;; Hardware stack levels used:    1
 11401 ;; Hardware stack levels required when called:    8
 11402 ;; This function calls:
 11403 ;;		_I2C_Master_Wait
 11404 ;; This function is called by:
 11405 ;;		_getRTC
 11406 ;; This function uses a non-reentrant model
 11407 ;;
 11408                           
 11409                           	psect	text34
 11410  005CF0                     __ptext34:
 11411                           	opt stack 0
 11412  005CF0                     _I2C_Master_Read:
 11413                           	opt stack 18
 11414                           
 11415                           ;incstack = 0
 11416                           ;I2C_Master_Read@a stored from wreg
 11417  005CF0  0100               	movlb	0	; () banked
 11418  005CF2  6F81               	movwf	I2C_Master_Read@a& (0+255),b
 11419                           
 11420                           ;I2C.c: 57: unsigned char temp;
 11421                           ;I2C.c: 58: I2C_Master_Wait();
 11422  005CF4  ECB6  F02F         	call	_I2C_Master_Wait	;wreg free
 11423                           
 11424                           ;I2C.c: 59: RCEN = 1;
 11425  005CF8  86C5               	bsf	4037,3,c	;volatile
 11426                           
 11427                           ;I2C.c: 60: I2C_Master_Wait();
 11428  005CFA  ECB6  F02F         	call	_I2C_Master_Wait	;wreg free
 11429                           
 11430                           ;I2C.c: 61: temp = SSPBUF;
 11431  005CFE  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
 11432                           
 11433                           ;I2C.c: 62: I2C_Master_Wait();
 11434  005D02  ECB6  F02F         	call	_I2C_Master_Wait	;wreg free
 11435                           
 11436                           ;I2C.c: 63: ACKDT = (a)?0:1;
 11437  005D06  0100               	movlb	0	; () banked
 11438  005D08  5181               	movf	I2C_Master_Read@a& (0+255),w,b
 11439  005D0A  0100               	movlb	0	; () banked
 11440  005D0C  A4D8               	btfss	status,2,c
 11441  005D0E  D002               	goto	u5380
 11442  005D10  8AC5               	bsf	4037,5,c	;volatile
 11443  005D12  D001               	goto	l6711
 11444  005D14                     u5380:
 11445  005D14  9AC5               	bcf	4037,5,c	;volatile
 11446  005D16                     l6711:
 11447                           
 11448                           ;I2C.c: 64: ACKEN = 1;
 11449  005D16  88C5               	bsf	4037,4,c	;volatile
 11450                           
 11451                           ;I2C.c: 65: return temp;
 11452  005D18  0100               	movlb	0	; () banked
 11453  005D1A  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 11454  005D1C  0012               	return	
 11455  005D1E                     __end_of_I2C_Master_Read:
 11456                           	opt stack 0
 11457                           tblptru	equ	0xFF8
 11458                           tblptrh	equ	0xFF7
 11459                           tblptrl	equ	0xFF6
 11460                           tablat	equ	0xFF5
 11461                           prodh	equ	0xFF4
 11462                           prodl	equ	0xFF3
 11463                           intcon	equ	0xFF2
 11464                           intcon2	equ	0xFF1
 11465                           intcon3	equ	0xFF0
 11466                           postinc0	equ	0xFEE
 11467                           wreg	equ	0xFE8
 11468                           postdec1	equ	0xFE5
 11469                           fsr1l	equ	0xFE1
 11470                           indf2	equ	0xFDF
 11471                           postinc2	equ	0xFDE
 11472                           postdec2	equ	0xFDD
 11473                           fsr2h	equ	0xFDA
 11474                           fsr2l	equ	0xFD9
 11475                           status	equ	0xFD8
 11476                           
 11477 ;; *************** function _I2C_Master_Wait *****************
 11478 ;; Defined at:
 11479 ;;		line 26 in file "I2C.c"
 11480 ;; Parameters:    Size  Location     Type
 11481 ;;		None
 11482 ;; Auto vars:     Size  Location     Type
 11483 ;;		None
 11484 ;; Return value:  Size  Location     Type
 11485 ;;                  1    wreg      void 
 11486 ;; Registers used:
 11487 ;;		wreg, status,2, status,0
 11488 ;; Tracked objects:
 11489 ;;		On entry : 0/0
 11490 ;;		On exit  : 0/0
 11491 ;;		Unchanged: 0/0
 11492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11495 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11496 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11497 ;;Total ram usage:        1 bytes
 11498 ;; Hardware stack levels used:    1
 11499 ;; Hardware stack levels required when called:    7
 11500 ;; This function calls:
 11501 ;;		Nothing
 11502 ;; This function is called by:
 11503 ;;		_I2C_Master_Start
 11504 ;;		_I2C_Master_Stop
 11505 ;;		_I2C_Master_Write
 11506 ;;		_I2C_Master_Read
 11507 ;;		_I2C_Master_RepeatedStart
 11508 ;; This function uses a non-reentrant model
 11509 ;;
 11510                           
 11511                           	psect	text35
 11512  005F6C                     __ptext35:
 11513                           	opt stack 0
 11514  005F6C                     _I2C_Master_Wait:
 11515                           	opt stack 18
 11516  005F6C                     l76:
 11517  005F6C  B4C7               	btfsc	4039,2,c	;volatile
 11518  005F6E  D7FE               	goto	l76
 11519  005F70  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 11520  005F74  0E1F               	movlw	31
 11521  005F76  0100               	movlb	0	; () banked
 11522  005F78  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 11523  005F7A  B4D8               	btfsc	status,2,c
 11524  005F7C  0012               	return	
 11525  005F7E  D7F6               	goto	l76
 11526  005F80                     __end_of_I2C_Master_Wait:
 11527                           	opt stack 0
 11528                           tblptru	equ	0xFF8
 11529                           tblptrh	equ	0xFF7
 11530                           tblptrl	equ	0xFF6
 11531                           tablat	equ	0xFF5
 11532                           prodh	equ	0xFF4
 11533                           prodl	equ	0xFF3
 11534                           intcon	equ	0xFF2
 11535                           intcon2	equ	0xFF1
 11536                           intcon3	equ	0xFF0
 11537                           postinc0	equ	0xFEE
 11538                           wreg	equ	0xFE8
 11539                           postdec1	equ	0xFE5
 11540                           fsr1l	equ	0xFE1
 11541                           indf2	equ	0xFDF
 11542                           postinc2	equ	0xFDE
 11543                           postdec2	equ	0xFDD
 11544                           fsr2h	equ	0xFDA
 11545                           fsr2l	equ	0xFD9
 11546                           status	equ	0xFD8
 11547                           
 11548 ;; *************** function _change_state_to_menu_22 *****************
 11549 ;; Defined at:
 11550 ;;		line 501 in file "UI.c"
 11551 ;; Parameters:    Size  Location     Type
 11552 ;;		None
 11553 ;; Auto vars:     Size  Location     Type
 11554 ;;		None
 11555 ;; Return value:  Size  Location     Type
 11556 ;;                  1    wreg      void 
 11557 ;; Registers used:
 11558 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11559 ;; Tracked objects:
 11560 ;;		On entry : 0/0
 11561 ;;		On exit  : 0/0
 11562 ;;		Unchanged: 0/0
 11563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11568 ;;Total ram usage:        0 bytes
 11569 ;; Hardware stack levels used:    1
 11570 ;; Hardware stack levels required when called:   10
 11571 ;; This function calls:
 11572 ;;		_lcdInst
 11573 ;;		_printf
 11574 ;; This function is called by:
 11575 ;;		_UI
 11576 ;; This function uses a non-reentrant model
 11577 ;;
 11578                           
 11579                           	psect	text36
 11580  0059D0                     __ptext36:
 11581                           	opt stack 0
 11582  0059D0                     _change_state_to_menu_22:
 11583                           	opt stack 19
 11584                           
 11585                           ;UI.c: 502: cur_state = 22;
 11586                           
 11587                           ; BSR set to: 0
 11588                           ;incstack = 0
 11589  0059D0  0E00               	movlw	0
 11590  0059D2  0100               	movlb	0	; () banked
 11591  0059D4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 11592  0059D6  0E16               	movlw	22
 11593  0059D8  6FE6               	movwf	_cur_state& (0+255),b
 11594                           
 11595                           ; BSR set to: 0
 11596                           ;UI.c: 504: lcdInst(0b10000000);;
 11597  0059DA  0E80               	movlw	128
 11598  0059DC  ECD1  F02F         	call	_lcdInst
 11599                           
 11600                           ;UI.c: 505: printf("2. SORT        <");
 11601  0059E0  0ED3               	movlw	low STR_34
 11602  0059E2  0100               	movlb	0	; () banked
 11603  0059E4  6F8E               	movwf	printf@f& (0+255),b
 11604  0059E6  0EFD               	movlw	high STR_34
 11605  0059E8  0100               	movlb	0	; () banked
 11606  0059EA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11607  0059EC  EC67  F00E         	call	_printf	;wreg free
 11608                           
 11609                           ;UI.c: 506: lcdInst(0b11000000);;
 11610  0059F0  0EC0               	movlw	192
 11611  0059F2  ECD1  F02F         	call	_lcdInst
 11612                           
 11613                           ;UI.c: 507: printf("3. LOGS         ");
 11614  0059F6  0E18               	movlw	low STR_36
 11615  0059F8  0100               	movlb	0	; () banked
 11616  0059FA  6F8E               	movwf	printf@f& (0+255),b
 11617  0059FC  0EFD               	movlw	high STR_36
 11618  0059FE  0100               	movlb	0	; () banked
 11619  005A00  6F8F               	movwf	(printf@f+1)& (0+255),b
 11620  005A02  EC67  F00E         	call	_printf	;wreg free
 11621  005A06  0012               	return		;funcret
 11622  005A08                     __end_of_change_state_to_menu_22:
 11623                           	opt stack 0
 11624                           tblptru	equ	0xFF8
 11625                           tblptrh	equ	0xFF7
 11626                           tblptrl	equ	0xFF6
 11627                           tablat	equ	0xFF5
 11628                           prodh	equ	0xFF4
 11629                           prodl	equ	0xFF3
 11630                           intcon	equ	0xFF2
 11631                           intcon2	equ	0xFF1
 11632                           intcon3	equ	0xFF0
 11633                           postinc0	equ	0xFEE
 11634                           wreg	equ	0xFE8
 11635                           postdec1	equ	0xFE5
 11636                           fsr1l	equ	0xFE1
 11637                           indf2	equ	0xFDF
 11638                           postinc2	equ	0xFDE
 11639                           postdec2	equ	0xFDD
 11640                           fsr2h	equ	0xFDA
 11641                           fsr2l	equ	0xFD9
 11642                           status	equ	0xFD8
 11643                           
 11644 ;; *************** function _change_state_to_menu_12 *****************
 11645 ;; Defined at:
 11646 ;;		line 493 in file "UI.c"
 11647 ;; Parameters:    Size  Location     Type
 11648 ;;		None
 11649 ;; Auto vars:     Size  Location     Type
 11650 ;;		None
 11651 ;; Return value:  Size  Location     Type
 11652 ;;                  1    wreg      void 
 11653 ;; Registers used:
 11654 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11655 ;; Tracked objects:
 11656 ;;		On entry : 0/0
 11657 ;;		On exit  : 0/0
 11658 ;;		Unchanged: 0/0
 11659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11664 ;;Total ram usage:        0 bytes
 11665 ;; Hardware stack levels used:    1
 11666 ;; Hardware stack levels required when called:   10
 11667 ;; This function calls:
 11668 ;;		_lcdInst
 11669 ;;		_printf
 11670 ;; This function is called by:
 11671 ;;		_UI
 11672 ;; This function uses a non-reentrant model
 11673 ;;
 11674                           
 11675                           	psect	text37
 11676  005A08                     __ptext37:
 11677                           	opt stack 0
 11678  005A08                     _change_state_to_menu_12:
 11679                           	opt stack 19
 11680                           
 11681                           ;UI.c: 494: cur_state = 12;
 11682                           
 11683                           ;incstack = 0
 11684  005A08  0E00               	movlw	0
 11685  005A0A  0100               	movlb	0	; () banked
 11686  005A0C  6FE7               	movwf	(_cur_state+1)& (0+255),b
 11687  005A0E  0E0C               	movlw	12
 11688  005A10  6FE6               	movwf	_cur_state& (0+255),b
 11689                           
 11690                           ; BSR set to: 0
 11691                           ;UI.c: 496: lcdInst(0b10000000);;
 11692  005A12  0E80               	movlw	128
 11693  005A14  ECD1  F02F         	call	_lcdInst
 11694                           
 11695                           ;UI.c: 497: printf("1. DATE/TIME    ");
 11696  005A18  0E3A               	movlw	low STR_33
 11697  005A1A  0100               	movlb	0	; () banked
 11698  005A1C  6F8E               	movwf	printf@f& (0+255),b
 11699  005A1E  0EFD               	movlw	high STR_33
 11700  005A20  0100               	movlb	0	; () banked
 11701  005A22  6F8F               	movwf	(printf@f+1)& (0+255),b
 11702  005A24  EC67  F00E         	call	_printf	;wreg free
 11703                           
 11704                           ;UI.c: 498: lcdInst(0b11000000);;
 11705  005A28  0EC0               	movlw	192
 11706  005A2A  ECD1  F02F         	call	_lcdInst
 11707                           
 11708                           ;UI.c: 499: printf("2. SORT        <");
 11709  005A2E  0ED3               	movlw	low STR_34
 11710  005A30  0100               	movlb	0	; () banked
 11711  005A32  6F8E               	movwf	printf@f& (0+255),b
 11712  005A34  0EFD               	movlw	high STR_34
 11713  005A36  0100               	movlb	0	; () banked
 11714  005A38  6F8F               	movwf	(printf@f+1)& (0+255),b
 11715  005A3A  EC67  F00E         	call	_printf	;wreg free
 11716  005A3E  0012               	return		;funcret
 11717  005A40                     __end_of_change_state_to_menu_12:
 11718                           	opt stack 0
 11719                           tblptru	equ	0xFF8
 11720                           tblptrh	equ	0xFF7
 11721                           tblptrl	equ	0xFF6
 11722                           tablat	equ	0xFF5
 11723                           prodh	equ	0xFF4
 11724                           prodl	equ	0xFF3
 11725                           intcon	equ	0xFF2
 11726                           intcon2	equ	0xFF1
 11727                           intcon3	equ	0xFF0
 11728                           postinc0	equ	0xFEE
 11729                           wreg	equ	0xFE8
 11730                           postdec1	equ	0xFE5
 11731                           fsr1l	equ	0xFE1
 11732                           indf2	equ	0xFDF
 11733                           postinc2	equ	0xFDE
 11734                           postdec2	equ	0xFDD
 11735                           fsr2h	equ	0xFDA
 11736                           fsr2l	equ	0xFD9
 11737                           status	equ	0xFD8
 11738                           
 11739 ;; *************** function ___awmod *****************
 11740 ;; Defined at:
 11741 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 11742 ;; Parameters:    Size  Location     Type
 11743 ;;  dividend        2    0[BANK0 ] int 
 11744 ;;  divisor         2    2[BANK0 ] int 
 11745 ;; Auto vars:     Size  Location     Type
 11746 ;;  sign            1    5[BANK0 ] unsigned char 
 11747 ;;  counter         1    4[BANK0 ] unsigned char 
 11748 ;; Return value:  Size  Location     Type
 11749 ;;                  2    0[BANK0 ] int 
 11750 ;; Registers used:
 11751 ;;		wreg, status,2, status,0
 11752 ;; Tracked objects:
 11753 ;;		On entry : 0/0
 11754 ;;		On exit  : 0/0
 11755 ;;		Unchanged: 0/0
 11756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11757 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11758 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11760 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11761 ;;Total ram usage:        6 bytes
 11762 ;; Hardware stack levels used:    1
 11763 ;; Hardware stack levels required when called:    7
 11764 ;; This function calls:
 11765 ;;		Nothing
 11766 ;; This function is called by:
 11767 ;;		_UI
 11768 ;; This function uses a non-reentrant model
 11769 ;;
 11770                           
 11771                           	psect	text38
 11772  004F40                     __ptext38:
 11773                           	opt stack 0
 11774  004F40                     ___awmod:
 11775                           	opt stack 22
 11776                           
 11777                           ;incstack = 0
 11778  004F40  0E00               	movlw	0
 11779  004F42  0100               	movlb	0	; () banked
 11780  004F44  6F85               	movwf	___awmod@sign& (0+255),b
 11781                           
 11782                           ; BSR set to: 0
 11783  004F46  0100               	movlb	0	; () banked
 11784  004F48  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 11785  004F4A  D008               	goto	l9437
 11786                           
 11787                           ; BSR set to: 0
 11788  004F4C  0100               	movlb	0	; () banked
 11789  004F4E  6D80               	negf	___awmod@dividend& (0+255),b
 11790  004F50  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11791  004F52  B0D8               	btfsc	status,0,c
 11792  004F54  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11793                           
 11794                           ; BSR set to: 0
 11795  004F56  0E01               	movlw	1
 11796  004F58  0100               	movlb	0	; () banked
 11797  004F5A  6F85               	movwf	___awmod@sign& (0+255),b
 11798  004F5C                     l9437:
 11799                           
 11800                           ; BSR set to: 0
 11801  004F5C  0100               	movlb	0	; () banked
 11802  004F5E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11803  004F60  D005               	goto	l9441
 11804                           
 11805                           ; BSR set to: 0
 11806  004F62  0100               	movlb	0	; () banked
 11807  004F64  6D82               	negf	___awmod@divisor& (0+255),b
 11808  004F66  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 11809  004F68  B0D8               	btfsc	status,0,c
 11810  004F6A  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 11811  004F6C                     l9441:
 11812                           
 11813                           ; BSR set to: 0
 11814  004F6C  0100               	movlb	0	; () banked
 11815  004F6E  5182               	movf	___awmod@divisor& (0+255),w,b
 11816  004F70  0100               	movlb	0	; () banked
 11817  004F72  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 11818  004F74  B4D8               	btfsc	status,2,c
 11819  004F76  D026               	goto	l9457
 11820                           
 11821                           ; BSR set to: 0
 11822  004F78  0E01               	movlw	1
 11823  004F7A  0100               	movlb	0	; () banked
 11824  004F7C  6F84               	movwf	___awmod@counter& (0+255),b
 11825  004F7E  D006               	goto	l9447
 11826  004F80                     l9445:
 11827                           
 11828                           ; BSR set to: 0
 11829  004F80  0100               	movlb	0	; () banked
 11830  004F82  90D8               	bcf	status,0,c
 11831  004F84  3782               	rlcf	___awmod@divisor& (0+255),f,b
 11832  004F86  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 11833  004F88  0100               	movlb	0	; () banked
 11834  004F8A  2B84               	incf	___awmod@counter& (0+255),f,b
 11835  004F8C                     l9447:
 11836                           
 11837                           ; BSR set to: 0
 11838  004F8C  0100               	movlb	0	; () banked
 11839  004F8E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11840  004F90  D7F7               	goto	l9445
 11841  004F92                     l9449:
 11842                           
 11843                           ; BSR set to: 0
 11844  004F92  0100               	movlb	0	; () banked
 11845  004F94  5182               	movf	___awmod@divisor& (0+255),w,b
 11846  004F96  0100               	movlb	0	; () banked
 11847  004F98  5D80               	subwf	___awmod@dividend& (0+255),w,b
 11848  004F9A  0100               	movlb	0	; () banked
 11849  004F9C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11850  004F9E  0100               	movlb	0	; () banked
 11851  004FA0  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 11852  004FA2  A0D8               	btfss	status,0,c
 11853  004FA4  D008               	goto	l9453
 11854                           
 11855                           ; BSR set to: 0
 11856  004FA6  0100               	movlb	0	; () banked
 11857  004FA8  5182               	movf	___awmod@divisor& (0+255),w,b
 11858  004FAA  0100               	movlb	0	; () banked
 11859  004FAC  5F80               	subwf	___awmod@dividend& (0+255),f,b
 11860  004FAE  0100               	movlb	0	; () banked
 11861  004FB0  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11862  004FB2  0100               	movlb	0	; () banked
 11863  004FB4  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 11864  004FB6                     l9453:
 11865                           
 11866                           ; BSR set to: 0
 11867  004FB6  0100               	movlb	0	; () banked
 11868  004FB8  90D8               	bcf	status,0,c
 11869  004FBA  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 11870  004FBC  3382               	rrcf	___awmod@divisor& (0+255),f,b
 11871                           
 11872                           ; BSR set to: 0
 11873  004FBE  0100               	movlb	0	; () banked
 11874  004FC0  2F84               	decfsz	___awmod@counter& (0+255),f,b
 11875  004FC2  D7E7               	goto	l9449
 11876  004FC4                     l9457:
 11877                           
 11878                           ; BSR set to: 0
 11879  004FC4  0100               	movlb	0	; () banked
 11880  004FC6  5185               	movf	___awmod@sign& (0+255),w,b
 11881  004FC8  0100               	movlb	0	; () banked
 11882  004FCA  B4D8               	btfsc	status,2,c
 11883  004FCC  D005               	goto	l9461
 11884                           
 11885                           ; BSR set to: 0
 11886  004FCE  0100               	movlb	0	; () banked
 11887  004FD0  6D80               	negf	___awmod@dividend& (0+255),b
 11888  004FD2  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11889  004FD4  B0D8               	btfsc	status,0,c
 11890  004FD6  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11891  004FD8                     l9461:
 11892                           
 11893                           ; BSR set to: 0
 11894  004FD8  C080  F080         	movff	___awmod@dividend,?___awmod
 11895  004FDC  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 11896  004FE0  0012               	return	
 11897  004FE2                     __end_of___awmod:
 11898                           	opt stack 0
 11899                           tblptru	equ	0xFF8
 11900                           tblptrh	equ	0xFF7
 11901                           tblptrl	equ	0xFF6
 11902                           tablat	equ	0xFF5
 11903                           prodh	equ	0xFF4
 11904                           prodl	equ	0xFF3
 11905                           intcon	equ	0xFF2
 11906                           intcon2	equ	0xFF1
 11907                           intcon3	equ	0xFF0
 11908                           postinc0	equ	0xFEE
 11909                           wreg	equ	0xFE8
 11910                           postdec1	equ	0xFE5
 11911                           fsr1l	equ	0xFE1
 11912                           indf2	equ	0xFDF
 11913                           postinc2	equ	0xFDE
 11914                           postdec2	equ	0xFDD
 11915                           fsr2h	equ	0xFDA
 11916                           fsr2l	equ	0xFD9
 11917                           status	equ	0xFD8
 11918                           
 11919 ;; *************** function ___awdiv *****************
 11920 ;; Defined at:
 11921 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 11922 ;; Parameters:    Size  Location     Type
 11923 ;;  dividend        2    6[BANK0 ] int 
 11924 ;;  divisor         2    8[BANK0 ] int 
 11925 ;; Auto vars:     Size  Location     Type
 11926 ;;  quotient        2   12[BANK0 ] int 
 11927 ;;  sign            1   11[BANK0 ] unsigned char 
 11928 ;;  counter         1   10[BANK0 ] unsigned char 
 11929 ;; Return value:  Size  Location     Type
 11930 ;;                  2    6[BANK0 ] int 
 11931 ;; Registers used:
 11932 ;;		wreg, status,2, status,0
 11933 ;; Tracked objects:
 11934 ;;		On entry : 0/0
 11935 ;;		On exit  : 0/0
 11936 ;;		Unchanged: 0/0
 11937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11938 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11939 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11941 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11942 ;;Total ram usage:        8 bytes
 11943 ;; Hardware stack levels used:    1
 11944 ;; Hardware stack levels required when called:    7
 11945 ;; This function calls:
 11946 ;;		Nothing
 11947 ;; This function is called by:
 11948 ;;		_UI
 11949 ;;		_ID
 11950 ;; This function uses a non-reentrant model
 11951 ;;
 11952                           
 11953                           	psect	text39
 11954  004D1C                     __ptext39:
 11955                           	opt stack 0
 11956  004D1C                     ___awdiv:
 11957                           	opt stack 21
 11958                           
 11959                           ; BSR set to: 0
 11960                           ;incstack = 0
 11961  004D1C  0E00               	movlw	0
 11962  004D1E  0100               	movlb	0	; () banked
 11963  004D20  6F8B               	movwf	___awdiv@sign& (0+255),b
 11964                           
 11965                           ; BSR set to: 0
 11966  004D22  0100               	movlb	0	; () banked
 11967  004D24  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11968  004D26  D008               	goto	l7649
 11969                           
 11970                           ; BSR set to: 0
 11971  004D28  0100               	movlb	0	; () banked
 11972  004D2A  6D88               	negf	___awdiv@divisor& (0+255),b
 11973  004D2C  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 11974  004D2E  B0D8               	btfsc	status,0,c
 11975  004D30  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 11976                           
 11977                           ; BSR set to: 0
 11978  004D32  0E01               	movlw	1
 11979  004D34  0100               	movlb	0	; () banked
 11980  004D36  6F8B               	movwf	___awdiv@sign& (0+255),b
 11981  004D38                     l7649:
 11982                           
 11983                           ; BSR set to: 0
 11984  004D38  0100               	movlb	0	; () banked
 11985  004D3A  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 11986  004D3C  D008               	goto	l7655
 11987                           
 11988                           ; BSR set to: 0
 11989  004D3E  0100               	movlb	0	; () banked
 11990  004D40  6D86               	negf	___awdiv@dividend& (0+255),b
 11991  004D42  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 11992  004D44  B0D8               	btfsc	status,0,c
 11993  004D46  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 11994                           
 11995                           ; BSR set to: 0
 11996  004D48  0E01               	movlw	1
 11997  004D4A  0100               	movlb	0	; () banked
 11998  004D4C  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 11999  004D4E                     l7655:
 12000                           
 12001                           ; BSR set to: 0
 12002  004D4E  0E00               	movlw	0
 12003  004D50  0100               	movlb	0	; () banked
 12004  004D52  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 12005  004D54  0E00               	movlw	0
 12006  004D56  6F8C               	movwf	___awdiv@quotient& (0+255),b
 12007                           
 12008                           ; BSR set to: 0
 12009  004D58  0100               	movlb	0	; () banked
 12010  004D5A  5188               	movf	___awdiv@divisor& (0+255),w,b
 12011  004D5C  0100               	movlb	0	; () banked
 12012  004D5E  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 12013  004D60  B4D8               	btfsc	status,2,c
 12014  004D62  D02C               	goto	l7677
 12015                           
 12016                           ; BSR set to: 0
 12017  004D64  0E01               	movlw	1
 12018  004D66  0100               	movlb	0	; () banked
 12019  004D68  6F8A               	movwf	___awdiv@counter& (0+255),b
 12020  004D6A  D006               	goto	l7663
 12021  004D6C                     l7661:
 12022                           
 12023                           ; BSR set to: 0
 12024  004D6C  0100               	movlb	0	; () banked
 12025  004D6E  90D8               	bcf	status,0,c
 12026  004D70  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 12027  004D72  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 12028  004D74  0100               	movlb	0	; () banked
 12029  004D76  2B8A               	incf	___awdiv@counter& (0+255),f,b
 12030  004D78                     l7663:
 12031                           
 12032                           ; BSR set to: 0
 12033  004D78  0100               	movlb	0	; () banked
 12034  004D7A  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 12035  004D7C  D7F7               	goto	l7661
 12036  004D7E                     l7665:
 12037                           
 12038                           ; BSR set to: 0
 12039  004D7E  0100               	movlb	0	; () banked
 12040  004D80  90D8               	bcf	status,0,c
 12041  004D82  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 12042  004D84  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 12043                           
 12044                           ; BSR set to: 0
 12045  004D86  0100               	movlb	0	; () banked
 12046  004D88  5188               	movf	___awdiv@divisor& (0+255),w,b
 12047  004D8A  0100               	movlb	0	; () banked
 12048  004D8C  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 12049  004D8E  0100               	movlb	0	; () banked
 12050  004D90  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12051  004D92  0100               	movlb	0	; () banked
 12052  004D94  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 12053  004D96  A0D8               	btfss	status,0,c
 12054  004D98  D00A               	goto	l7673
 12055                           
 12056                           ; BSR set to: 0
 12057  004D9A  0100               	movlb	0	; () banked
 12058  004D9C  5188               	movf	___awdiv@divisor& (0+255),w,b
 12059  004D9E  0100               	movlb	0	; () banked
 12060  004DA0  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 12061  004DA2  0100               	movlb	0	; () banked
 12062  004DA4  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12063  004DA6  0100               	movlb	0	; () banked
 12064  004DA8  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 12065                           
 12066                           ; BSR set to: 0
 12067  004DAA  0100               	movlb	0	; () banked
 12068  004DAC  818C               	bsf	___awdiv@quotient& (0+255),0,b
 12069  004DAE                     l7673:
 12070                           
 12071                           ; BSR set to: 0
 12072  004DAE  0100               	movlb	0	; () banked
 12073  004DB0  90D8               	bcf	status,0,c
 12074  004DB2  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 12075  004DB4  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 12076                           
 12077                           ; BSR set to: 0
 12078  004DB6  0100               	movlb	0	; () banked
 12079  004DB8  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 12080  004DBA  D7E1               	goto	l7665
 12081  004DBC                     l7677:
 12082                           
 12083                           ; BSR set to: 0
 12084  004DBC  0100               	movlb	0	; () banked
 12085  004DBE  518B               	movf	___awdiv@sign& (0+255),w,b
 12086  004DC0  0100               	movlb	0	; () banked
 12087  004DC2  B4D8               	btfsc	status,2,c
 12088  004DC4  D005               	goto	l7681
 12089                           
 12090                           ; BSR set to: 0
 12091  004DC6  0100               	movlb	0	; () banked
 12092  004DC8  6D8C               	negf	___awdiv@quotient& (0+255),b
 12093  004DCA  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 12094  004DCC  B0D8               	btfsc	status,0,c
 12095  004DCE  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 12096  004DD0                     l7681:
 12097                           
 12098                           ; BSR set to: 0
 12099  004DD0  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 12100  004DD4  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 12101  004DD8  0012               	return	
 12102  004DDA                     __end_of___awdiv:
 12103                           	opt stack 0
 12104                           tblptru	equ	0xFF8
 12105                           tblptrh	equ	0xFF7
 12106                           tblptrl	equ	0xFF6
 12107                           tablat	equ	0xFF5
 12108                           prodh	equ	0xFF4
 12109                           prodl	equ	0xFF3
 12110                           intcon	equ	0xFF2
 12111                           intcon2	equ	0xFF1
 12112                           intcon3	equ	0xFF0
 12113                           postinc0	equ	0xFEE
 12114                           wreg	equ	0xFE8
 12115                           postdec1	equ	0xFE5
 12116                           fsr1l	equ	0xFE1
 12117                           indf2	equ	0xFDF
 12118                           postinc2	equ	0xFDE
 12119                           postdec2	equ	0xFDD
 12120                           fsr2h	equ	0xFDA
 12121                           fsr2l	equ	0xFD9
 12122                           status	equ	0xFD8
 12123                           
 12124 ;; *************** function _Test *****************
 12125 ;; Defined at:
 12126 ;;		line 30 in file "Test.c"
 12127 ;; Parameters:    Size  Location     Type
 12128 ;;		None
 12129 ;; Auto vars:     Size  Location     Type
 12130 ;;		None
 12131 ;; Return value:  Size  Location     Type
 12132 ;;                  1    wreg      void 
 12133 ;; Registers used:
 12134 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12135 ;; Tracked objects:
 12136 ;;		On entry : 0/0
 12137 ;;		On exit  : 0/0
 12138 ;;		Unchanged: 0/0
 12139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12142 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12143 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12144 ;;Total ram usage:        2 bytes
 12145 ;; Hardware stack levels used:    1
 12146 ;; Hardware stack levels required when called:   11
 12147 ;; This function calls:
 12148 ;;		_BlockerTest
 12149 ;;		_BothServos
 12150 ;;		_PlatformTest
 12151 ;;		_PortTestDC
 12152 ;;		_PortTestPusher
 12153 ;;		_SpeedTest
 12154 ;;		_actuatorTest
 12155 ;;		_algorithmTest
 12156 ;;		_arm
 12157 ;;		_lcdInst
 12158 ;;		_printf
 12159 ;;		_sensorTest
 12160 ;; This function is called by:
 12161 ;;		_main
 12162 ;; This function uses a non-reentrant model
 12163 ;;
 12164                           
 12165                           	psect	text40
 12166  00453E                     __ptext40:
 12167                           	opt stack 0
 12168  00453E                     _Test:
 12169                           	opt stack 19
 12170                           
 12171                           ;Test.c: 32: while(machine_state == Testing_state){
 12172                           
 12173                           ; BSR set to: 0
 12174                           ;incstack = 0
 12175  00453E  D07C               	goto	l10223
 12176  004540                     l10183:
 12177                           
 12178                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 12179  004540  0E01               	movlw	1
 12180  004542  ECD1  F02F         	call	_lcdInst
 12181  004546  0E68               	movlw	104
 12182  004548  0100               	movlb	0	; () banked
 12183  00454A  6FC6               	movwf	??_Test& (0+255),b
 12184  00454C  0EE4               	movlw	228
 12185  00454E                     u11307:
 12186  00454E  2EE8               	decfsz	wreg,f,c
 12187  004550  D7FE               	bra	u11307
 12188  004552  2FC6               	decfsz	??_Test& (0+255),f,b
 12189  004554  D7FC               	bra	u11307
 12190  004556  F000               	nop	
 12191  004558  0E80               	movlw	128
 12192  00455A  ECD1  F02F         	call	_lcdInst
 12193                           
 12194                           ;Test.c: 34: printf("2.SNR|4.HI|5.MED");
 12195  00455E  0E90               	movlw	low STR_68
 12196  004560  0100               	movlb	0	; () banked
 12197  004562  6F8E               	movwf	printf@f& (0+255),b
 12198  004564  0EFC               	movlw	high STR_68
 12199  004566  0100               	movlb	0	; () banked
 12200  004568  6F8F               	movwf	(printf@f+1)& (0+255),b
 12201  00456A  EC67  F00E         	call	_printf	;wreg free
 12202                           
 12203                           ;Test.c: 35: lcdInst(0b11000000);;
 12204  00456E  0EC0               	movlw	192
 12205  004570  ECD1  F02F         	call	_lcdInst
 12206                           
 12207                           ;Test.c: 36: printf("B.PLA|8.SV|9.BLK");
 12208  004574  0EA1               	movlw	low STR_69
 12209  004576  0100               	movlb	0	; () banked
 12210  004578  6F8E               	movwf	printf@f& (0+255),b
 12211  00457A  0EFC               	movlw	high STR_69
 12212  00457C  0100               	movlb	0	; () banked
 12213  00457E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12214  004580  EC67  F00E         	call	_printf	;wreg free
 12215  004584                     l1265:
 12216  004584  A281               	btfss	3969,1,c	;volatile
 12217  004586  D7FE               	goto	l1265
 12218                           
 12219                           ;Test.c: 38: var = PORTB >> 4;
 12220  004588  CF81 F0C6          	movff	3969,??_Test	;volatile
 12221  00458C  0100               	movlb	0	; () banked
 12222  00458E  3BC6               	swapf	??_Test& (0+255),f,b
 12223  004590  0E0F               	movlw	15
 12224  004592  17C6               	andwf	??_Test& (0+255),f,b
 12225  004594  0100               	movlb	0	; () banked
 12226  004596  51C6               	movf	??_Test& (0+255),w,b
 12227  004598  0101               	movlb	1	; () banked
 12228  00459A  6F4B               	movwf	_var& (0+255),b
 12229  00459C  6B4C               	clrf	(_var+1)& (0+255),b
 12230                           
 12231                           ; BSR set to: 1
 12232                           ;Test.c: 39: var++;
 12233  00459E  0101               	movlb	1	; () banked
 12234  0045A0  4B4B               	infsnz	_var& (0+255),f,b
 12235  0045A2  2B4C               	incf	(_var+1)& (0+255),f,b
 12236  0045A4                     l1268:
 12237  0045A4  A281               	btfss	3969,1,c	;volatile
 12238  0045A6  D01F               	goto	l10221
 12239  0045A8  D7FD               	goto	l1268
 12240  0045AA                     l10199:
 12241                           
 12242                           ;Test.c: 43: algorithmTest();
 12243  0045AA  EC86  F024         	call	_algorithmTest	;wreg free
 12244                           
 12245                           ;Test.c: 44: break;
 12246  0045AE  D044               	goto	l10223
 12247  0045B0                     l10201:
 12248                           
 12249                           ;Test.c: 46: sensorTest();
 12250  0045B0  EC7A  F012         	call	_sensorTest	;wreg free
 12251                           
 12252                           ;Test.c: 47: break;
 12253  0045B4  D041               	goto	l10223
 12254  0045B6                     l10203:
 12255                           
 12256                           ;Test.c: 49: actuatorTest();
 12257  0045B6  EC6D  F004         	call	_actuatorTest	;wreg free
 12258                           
 12259                           ;Test.c: 50: break;
 12260  0045BA  D03E               	goto	l10223
 12261  0045BC                     l10205:
 12262                           
 12263                           ;Test.c: 52: arm();
 12264  0045BC  EC22  F023         	call	_arm	;wreg free
 12265                           
 12266                           ;Test.c: 53: break;
 12267  0045C0  D03B               	goto	l10223
 12268  0045C2                     l10207:
 12269                           
 12270                           ;Test.c: 55: PortTestDC();
 12271  0045C2  ECF1  F024         	call	_PortTestDC	;wreg free
 12272                           
 12273                           ;Test.c: 56: break;
 12274  0045C6  D038               	goto	l10223
 12275  0045C8                     l10209:
 12276                           
 12277                           ;Test.c: 58: SpeedTest();
 12278  0045C8  ECC6  F028         	call	_SpeedTest	;wreg free
 12279                           
 12280                           ;Test.c: 59: break;
 12281  0045CC  D035               	goto	l10223
 12282  0045CE                     l10211:
 12283                           
 12284                           ;Test.c: 61: PortTestPusher();
 12285  0045CE  EC6E  F02B         	call	_PortTestPusher	;wreg free
 12286                           
 12287                           ;Test.c: 62: break;
 12288  0045D2  D032               	goto	l10223
 12289  0045D4                     l10213:
 12290                           
 12291                           ;Test.c: 64: PlatformTest();
 12292  0045D4  ECC7  F017         	call	_PlatformTest	;wreg free
 12293                           
 12294                           ;Test.c: 65: break;
 12295  0045D8  D02F               	goto	l10223
 12296  0045DA                     l10215:
 12297                           
 12298                           ;Test.c: 67: BothServos();
 12299  0045DA  EC83  F010         	call	_BothServos	;wreg free
 12300                           
 12301                           ;Test.c: 68: break;
 12302  0045DE  D02C               	goto	l10223
 12303  0045E0                     l10217:
 12304                           
 12305                           ;Test.c: 70: BlockerTest();
 12306  0045E0  EC01  F020         	call	_BlockerTest	;wreg free
 12307                           
 12308                           ;Test.c: 74: }
 12309                           
 12310                           ;Test.c: 73: break;
 12311                           
 12312                           ;Test.c: 72: default:
 12313                           
 12314                           ;Test.c: 71: break;
 12315  0045E4  D029               	goto	l10223
 12316  0045E6                     l10221:
 12317  0045E6  C14B  F0C6         	movff	_var,??_Test
 12318  0045EA  C14C  F0C7         	movff	_var+1,??_Test+1
 12319                           
 12320                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12321                           ; Switch size 1, requested type "space"
 12322                           ; Number of cases is 1, Range of values is 0 to 0
 12323                           ; switch strategies available:
 12324                           ; Name         Instructions Cycles
 12325                           ; simple_byte            4     3 (average)
 12326                           ;	Chosen strategy is simple_byte
 12327  0045EE  0100               	movlb	0	; () banked
 12328  0045F0  51C7               	movf	(??_Test+1)& (0+255),w,b
 12329  0045F2  0A00               	xorlw	0	; case 0
 12330  0045F4  A4D8               	btfss	status,2,c
 12331  0045F6  D020               	goto	l10223
 12332                           
 12333                           ; BSR set to: 0
 12334                           ; Switch size 1, requested type "space"
 12335                           ; Number of cases is 10, Range of values is 1 to 11
 12336                           ; switch strategies available:
 12337                           ; Name         Instructions Cycles
 12338                           ; simple_byte           31    16 (average)
 12339                           ;	Chosen strategy is simple_byte
 12340  0045F8  0100               	movlb	0	; () banked
 12341  0045FA  51C6               	movf	??_Test& (0+255),w,b
 12342  0045FC  0A01               	xorlw	1	; case 1
 12343  0045FE  B4D8               	btfsc	status,2,c
 12344  004600  D7D4               	goto	l10199
 12345  004602  0A03               	xorlw	3	; case 2
 12346  004604  B4D8               	btfsc	status,2,c
 12347  004606  D7D4               	goto	l10201
 12348  004608  0A01               	xorlw	1	; case 3
 12349  00460A  B4D8               	btfsc	status,2,c
 12350  00460C  D7D4               	goto	l10203
 12351  00460E  0A07               	xorlw	7	; case 4
 12352  004610  B4D8               	btfsc	status,2,c
 12353  004612  D7D4               	goto	l10205
 12354  004614  0A01               	xorlw	1	; case 5
 12355  004616  B4D8               	btfsc	status,2,c
 12356  004618  D7D4               	goto	l10207
 12357  00461A  0A03               	xorlw	3	; case 6
 12358  00461C  B4D8               	btfsc	status,2,c
 12359  00461E  D7D4               	goto	l10209
 12360  004620  0A01               	xorlw	1	; case 7
 12361  004622  B4D8               	btfsc	status,2,c
 12362  004624  D7D4               	goto	l10211
 12363  004626  0A0F               	xorlw	15	; case 8
 12364  004628  B4D8               	btfsc	status,2,c
 12365  00462A  D7D4               	goto	l10213
 12366  00462C  0A02               	xorlw	2	; case 10
 12367  00462E  B4D8               	btfsc	status,2,c
 12368  004630  D7D4               	goto	l10215
 12369  004632  0A01               	xorlw	1	; case 11
 12370  004634  B4D8               	btfsc	status,2,c
 12371  004636  D7D4               	goto	l10217
 12372  004638                     l10223:
 12373  004638  0E03               	movlw	3
 12374  00463A  0100               	movlb	0	; () banked
 12375  00463C  19FC               	xorwf	_machine_state& (0+255),w,b
 12376  00463E  A4D8               	btfss	status,2,c
 12377  004640  0012               	return	
 12378  004642  D77E               	goto	l10183
 12379  004644                     __end_of_Test:
 12380                           	opt stack 0
 12381                           tblptru	equ	0xFF8
 12382                           tblptrh	equ	0xFF7
 12383                           tblptrl	equ	0xFF6
 12384                           tablat	equ	0xFF5
 12385                           prodh	equ	0xFF4
 12386                           prodl	equ	0xFF3
 12387                           intcon	equ	0xFF2
 12388                           intcon2	equ	0xFF1
 12389                           intcon3	equ	0xFF0
 12390                           postinc0	equ	0xFEE
 12391                           wreg	equ	0xFE8
 12392                           postdec1	equ	0xFE5
 12393                           fsr1l	equ	0xFE1
 12394                           indf2	equ	0xFDF
 12395                           postinc2	equ	0xFDE
 12396                           postdec2	equ	0xFDD
 12397                           fsr2h	equ	0xFDA
 12398                           fsr2l	equ	0xFD9
 12399                           status	equ	0xFD8
 12400                           
 12401 ;; *************** function _sensorTest *****************
 12402 ;; Defined at:
 12403 ;;		line 122 in file "Test.c"
 12404 ;; Parameters:    Size  Location     Type
 12405 ;;		None
 12406 ;; Auto vars:     Size  Location     Type
 12407 ;;  res             2   47[BANK0 ] int 
 12408 ;;  res             2   45[BANK0 ] int 
 12409 ;; Return value:  Size  Location     Type
 12410 ;;                  1    wreg      void 
 12411 ;; Registers used:
 12412 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12413 ;; Tracked objects:
 12414 ;;		On entry : 0/0
 12415 ;;		On exit  : 0/0
 12416 ;;		Unchanged: 0/0
 12417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12419 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12420 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12421 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12422 ;;Total ram usage:        6 bytes
 12423 ;; Hardware stack levels used:    1
 12424 ;; Hardware stack levels required when called:   10
 12425 ;; This function calls:
 12426 ;;		_lcdInst
 12427 ;;		_printf
 12428 ;;		_readADC
 12429 ;;		_readMAG
 12430 ;; This function is called by:
 12431 ;;		_Test
 12432 ;; This function uses a non-reentrant model
 12433 ;;
 12434                           
 12435                           	psect	text41
 12436  0024F4                     __ptext41:
 12437                           	opt stack 0
 12438  0024F4                     _sensorTest:
 12439                           	opt stack 19
 12440                           
 12441                           ;Test.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12442                           
 12443                           ; BSR set to: 0
 12444                           ;incstack = 0
 12445  0024F4  0E01               	movlw	1
 12446  0024F6  ECD1  F02F         	call	_lcdInst
 12447  0024FA  0E68               	movlw	104
 12448  0024FC  0100               	movlb	0	; () banked
 12449  0024FE  6FAB               	movwf	??_sensorTest& (0+255),b
 12450  002500  0EE4               	movlw	228
 12451  002502                     u11317:
 12452  002502  2EE8               	decfsz	wreg,f,c
 12453  002504  D7FE               	bra	u11317
 12454  002506  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12455  002508  D7FC               	bra	u11317
 12456  00250A  F000               	nop	
 12457  00250C  0E80               	movlw	128
 12458  00250E  ECD1  F02F         	call	_lcdInst
 12459                           
 12460                           ;Test.c: 125: printf("SENSORS");
 12461  002512  0EAD               	movlw	low STR_77
 12462  002514  0100               	movlb	0	; () banked
 12463  002516  6F8E               	movwf	printf@f& (0+255),b
 12464  002518  0EFF               	movlw	high STR_77
 12465  00251A  0100               	movlb	0	; () banked
 12466  00251C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12467  00251E  EC67  F00E         	call	_printf	;wreg free
 12468                           
 12469                           ;Test.c: 126: lcdInst(0b11000000);;
 12470  002522  0EC0               	movlw	192
 12471  002524  ECD1  F02F         	call	_lcdInst
 12472                           
 12473                           ;Test.c: 127: printf("PUSH TO START");
 12474  002528  0E3A               	movlw	low STR_71
 12475  00252A  0100               	movlb	0	; () banked
 12476  00252C  6F8E               	movwf	printf@f& (0+255),b
 12477  00252E  0EFF               	movlw	high STR_71
 12478  002530  0100               	movlb	0	; () banked
 12479  002532  6F8F               	movwf	(printf@f+1)& (0+255),b
 12480  002534  EC67  F00E         	call	_printf	;wreg free
 12481                           
 12482                           ;Test.c: 128: _delay((unsigned long)((100)*(32000000/4000.0)));
 12483  002538  0E05               	movlw	5
 12484  00253A  0100               	movlb	0	; () banked
 12485  00253C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12486  00253E  0E0F               	movlw	15
 12487  002540  0100               	movlb	0	; () banked
 12488  002542  6FAB               	movwf	??_sensorTest& (0+255),b
 12489  002544  0EF1               	movlw	241
 12490  002546                     u11327:
 12491  002546  2EE8               	decfsz	wreg,f,c
 12492  002548  D7FE               	bra	u11327
 12493  00254A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12494  00254C  D7FC               	bra	u11327
 12495  00254E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12496  002550  D7FA               	bra	u11327
 12497  002552                     l1297:
 12498  002552  A281               	btfss	3969,1,c	;volatile
 12499  002554  D7FE               	goto	l1297
 12500  002556                     l1300:
 12501  002556  B281               	btfsc	3969,1,c	;volatile
 12502  002558  D7FE               	goto	l1300
 12503                           
 12504                           ;Test.c: 131: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12505  00255A  0E01               	movlw	1
 12506  00255C  ECD1  F02F         	call	_lcdInst
 12507  002560  0E68               	movlw	104
 12508  002562  0100               	movlb	0	; () banked
 12509  002564  6FAB               	movwf	??_sensorTest& (0+255),b
 12510  002566  0EE4               	movlw	228
 12511  002568                     u11337:
 12512  002568  2EE8               	decfsz	wreg,f,c
 12513  00256A  D7FE               	bra	u11337
 12514  00256C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12515  00256E  D7FC               	bra	u11337
 12516  002570  F000               	nop	
 12517  002572  0E80               	movlw	128
 12518  002574  ECD1  F02F         	call	_lcdInst
 12519                           
 12520                           ;Test.c: 136: LATCbits.LATC5 = 1;
 12521  002578  8A8B               	bsf	3979,5,c	;volatile
 12522                           
 12523                           ;Test.c: 138: while(PORTBbits.RB1 == 0){
 12524  00257A  D05C               	goto	l8507
 12525  00257C                     l8489:
 12526                           
 12527                           ;Test.c: 139: readADC(0);
 12528  00257C  0E00               	movlw	0
 12529  00257E  ECBC  F02E         	call	_readADC
 12530                           
 12531                           ;Test.c: 140: int res = ADRESH<<8 | ADRESL;
 12532  002582  50C3               	movf	4035,w,c	;volatile
 12533  002584  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 12534  002588  0100               	movlb	0	; () banked
 12535  00258A  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 12536  00258C  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 12537  002590  0100               	movlb	0	; () banked
 12538  002592  6BAB               	clrf	??_sensorTest& (0+255),b
 12539  002594  0100               	movlb	0	; () banked
 12540  002596  11AB               	iorwf	??_sensorTest& (0+255),w,b
 12541  002598  0100               	movlb	0	; () banked
 12542  00259A  6FAD               	movwf	sensorTest@res& (0+255),b
 12543  00259C  0100               	movlb	0	; () banked
 12544  00259E  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 12545  0025A0  0100               	movlb	0	; () banked
 12546  0025A2  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 12547                           
 12548                           ; BSR set to: 0
 12549                           ;Test.c: 141: IR_signal = (res > 800) ? 1 : 0;
 12550  0025A4  0100               	movlb	0	; () banked
 12551  0025A6  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 12552  0025A8  D00A               	goto	u7670
 12553  0025AA  0E21               	movlw	33
 12554  0025AC  0100               	movlb	0	; () banked
 12555  0025AE  5DAD               	subwf	sensorTest@res& (0+255),w,b
 12556  0025B0  0E03               	movlw	3
 12557  0025B2  0100               	movlb	0	; () banked
 12558  0025B4  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 12559  0025B6  A0D8               	btfss	status,0,c
 12560  0025B8  D002               	goto	u7670
 12561  0025BA  0E01               	movlw	1
 12562  0025BC  D001               	goto	u7680
 12563  0025BE                     u7670:
 12564  0025BE  0E00               	movlw	0
 12565  0025C0                     u7680:
 12566  0025C0  0100               	movlb	0	; () banked
 12567  0025C2  6FE0               	movwf	_IR_signal& (0+255),b
 12568  0025C4  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 12569                           
 12570                           ;Test.c: 143: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12571  0025C6  0E01               	movlw	1
 12572  0025C8  ECD1  F02F         	call	_lcdInst
 12573  0025CC  0E68               	movlw	104
 12574  0025CE  0100               	movlb	0	; () banked
 12575  0025D0  6FAB               	movwf	??_sensorTest& (0+255),b
 12576  0025D2  0EE4               	movlw	228
 12577  0025D4                     u11347:
 12578  0025D4  2EE8               	decfsz	wreg,f,c
 12579  0025D6  D7FE               	bra	u11347
 12580  0025D8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12581  0025DA  D7FC               	bra	u11347
 12582  0025DC  F000               	nop	
 12583  0025DE  0E80               	movlw	128
 12584  0025E0  ECD1  F02F         	call	_lcdInst
 12585                           
 12586                           ;Test.c: 144: printf("IR (PUSHER): %d  ", IR_signal);
 12587  0025E4  0E25               	movlw	low STR_79
 12588  0025E6  0100               	movlb	0	; () banked
 12589  0025E8  6F8E               	movwf	printf@f& (0+255),b
 12590  0025EA  0EFB               	movlw	high STR_79
 12591  0025EC  0100               	movlb	0	; () banked
 12592  0025EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12593  0025F0  C0E0  F090         	movff	_IR_signal,?_printf+2
 12594  0025F4  C0E1  F091         	movff	_IR_signal+1,?_printf+3
 12595  0025F8  EC67  F00E         	call	_printf	;wreg free
 12596                           
 12597                           ;Test.c: 145: lcdInst(0b11000000);;
 12598  0025FC  0EC0               	movlw	192
 12599  0025FE  ECD1  F02F         	call	_lcdInst
 12600                           
 12601                           ;Test.c: 146: printf("%d", res);
 12602  002602  0E25               	movlw	low (STR_27+14)
 12603  002604  0100               	movlb	0	; () banked
 12604  002606  6F8E               	movwf	printf@f& (0+255),b
 12605  002608  0EFE               	movlw	high (STR_27+14)
 12606  00260A  0100               	movlb	0	; () banked
 12607  00260C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12608  00260E  C0AD  F090         	movff	sensorTest@res,?_printf+2
 12609  002612  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 12610  002616  EC67  F00E         	call	_printf	;wreg free
 12611                           
 12612                           ;Test.c: 147: _delay((unsigned long)((100)*(32000000/4000.0)));
 12613  00261A  0E05               	movlw	5
 12614  00261C  0100               	movlb	0	; () banked
 12615  00261E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12616  002620  0E0F               	movlw	15
 12617  002622  0100               	movlb	0	; () banked
 12618  002624  6FAB               	movwf	??_sensorTest& (0+255),b
 12619  002626  0EF1               	movlw	241
 12620  002628                     u11357:
 12621  002628  2EE8               	decfsz	wreg,f,c
 12622  00262A  D7FE               	bra	u11357
 12623  00262C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12624  00262E  D7FC               	bra	u11357
 12625  002630  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12626  002632  D7FA               	bra	u11357
 12627  002634                     l8507:
 12628  002634  A281               	btfss	3969,1,c	;volatile
 12629  002636  D7A2               	goto	l8489
 12630                           
 12631                           ;Test.c: 148: }
 12632                           ;Test.c: 149: LATCbits.LATC5 = 0;
 12633  002638  9A8B               	bcf	3979,5,c	;volatile
 12634  00263A                     l1306:
 12635  00263A  B281               	btfsc	3969,1,c	;volatile
 12636  00263C  D7FE               	goto	l1306
 12637                           
 12638                           ;Test.c: 155: LATCbits.LATC6 = 1;
 12639  00263E  8C8B               	bsf	3979,6,c	;volatile
 12640                           
 12641                           ;Test.c: 158: while(PORTBbits.RB1 == 0){
 12642                           
 12643                           ;Test.c: 157: while(1){
 12644  002640  D05C               	goto	l8527
 12645  002642                     l8509:
 12646                           
 12647                           ;Test.c: 159: readADC(3);
 12648  002642  0E03               	movlw	3
 12649  002644  ECBC  F02E         	call	_readADC
 12650                           
 12651                           ;Test.c: 160: int res = ADRESH<<8 | ADRESL;
 12652  002648  50C3               	movf	4035,w,c	;volatile
 12653  00264A  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 12654  00264E  0100               	movlb	0	; () banked
 12655  002650  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 12656  002652  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 12657  002656  0100               	movlb	0	; () banked
 12658  002658  6BAB               	clrf	??_sensorTest& (0+255),b
 12659  00265A  0100               	movlb	0	; () banked
 12660  00265C  11AB               	iorwf	??_sensorTest& (0+255),w,b
 12661  00265E  0100               	movlb	0	; () banked
 12662  002660  6FAF               	movwf	sensorTest@res_1724& (0+255),b
 12663  002662  0100               	movlb	0	; () banked
 12664  002664  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 12665  002666  0100               	movlb	0	; () banked
 12666  002668  6FB0               	movwf	(sensorTest@res_1724+1)& (0+255),b
 12667                           
 12668                           ; BSR set to: 0
 12669                           ;Test.c: 161: IR_signal = (res > 500) ? 1 : 0;
 12670  00266A  0100               	movlb	0	; () banked
 12671  00266C  BFB0               	btfsc	(sensorTest@res_1724+1)& (0+255),7,b
 12672  00266E  D00A               	goto	u7710
 12673  002670  0EF5               	movlw	245
 12674  002672  0100               	movlb	0	; () banked
 12675  002674  5DAF               	subwf	sensorTest@res_1724& (0+255),w,b
 12676  002676  0E01               	movlw	1
 12677  002678  0100               	movlb	0	; () banked
 12678  00267A  59B0               	subwfb	(sensorTest@res_1724+1)& (0+255),w,b
 12679  00267C  A0D8               	btfss	status,0,c
 12680  00267E  D002               	goto	u7710
 12681  002680  0E01               	movlw	1
 12682  002682  D001               	goto	u7720
 12683  002684                     u7710:
 12684  002684  0E00               	movlw	0
 12685  002686                     u7720:
 12686  002686  0100               	movlb	0	; () banked
 12687  002688  6FE0               	movwf	_IR_signal& (0+255),b
 12688  00268A  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 12689                           
 12690                           ;Test.c: 163: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12691  00268C  0E01               	movlw	1
 12692  00268E  ECD1  F02F         	call	_lcdInst
 12693  002692  0E68               	movlw	104
 12694  002694  0100               	movlb	0	; () banked
 12695  002696  6FAB               	movwf	??_sensorTest& (0+255),b
 12696  002698  0EE4               	movlw	228
 12697  00269A                     u11367:
 12698  00269A  2EE8               	decfsz	wreg,f,c
 12699  00269C  D7FE               	bra	u11367
 12700  00269E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12701  0026A0  D7FC               	bra	u11367
 12702  0026A2  F000               	nop	
 12703  0026A4  0E80               	movlw	128
 12704  0026A6  ECD1  F02F         	call	_lcdInst
 12705                           
 12706                           ;Test.c: 164: printf("IR (REFLEC): %d  ", IR_signal);
 12707  0026AA  0E13               	movlw	low STR_81
 12708  0026AC  0100               	movlb	0	; () banked
 12709  0026AE  6F8E               	movwf	printf@f& (0+255),b
 12710  0026B0  0EFB               	movlw	high STR_81
 12711  0026B2  0100               	movlb	0	; () banked
 12712  0026B4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12713  0026B6  C0E0  F090         	movff	_IR_signal,?_printf+2
 12714  0026BA  C0E1  F091         	movff	_IR_signal+1,?_printf+3
 12715  0026BE  EC67  F00E         	call	_printf	;wreg free
 12716                           
 12717                           ;Test.c: 165: lcdInst(0b11000000);;
 12718  0026C2  0EC0               	movlw	192
 12719  0026C4  ECD1  F02F         	call	_lcdInst
 12720                           
 12721                           ;Test.c: 166: printf("%d", res);
 12722  0026C8  0E25               	movlw	low (STR_27+14)
 12723  0026CA  0100               	movlb	0	; () banked
 12724  0026CC  6F8E               	movwf	printf@f& (0+255),b
 12725  0026CE  0EFE               	movlw	high (STR_27+14)
 12726  0026D0  0100               	movlb	0	; () banked
 12727  0026D2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12728  0026D4  C0AF  F090         	movff	sensorTest@res_1724,?_printf+2
 12729  0026D8  C0B0  F091         	movff	sensorTest@res_1724+1,?_printf+3
 12730  0026DC  EC67  F00E         	call	_printf	;wreg free
 12731                           
 12732                           ;Test.c: 167: _delay((unsigned long)((100)*(32000000/4000.0)));
 12733  0026E0  0E05               	movlw	5
 12734  0026E2  0100               	movlb	0	; () banked
 12735  0026E4  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12736  0026E6  0E0F               	movlw	15
 12737  0026E8  0100               	movlb	0	; () banked
 12738  0026EA  6FAB               	movwf	??_sensorTest& (0+255),b
 12739  0026EC  0EF1               	movlw	241
 12740  0026EE                     u11377:
 12741  0026EE  2EE8               	decfsz	wreg,f,c
 12742  0026F0  D7FE               	bra	u11377
 12743  0026F2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12744  0026F4  D7FC               	bra	u11377
 12745  0026F6  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12746  0026F8  D7FA               	bra	u11377
 12747  0026FA                     l8527:
 12748  0026FA  A281               	btfss	3969,1,c	;volatile
 12749  0026FC  D7A2               	goto	l8509
 12750                           
 12751                           ;Test.c: 168: }
 12752                           ;Test.c: 169: if(PORTB >> 4 == 0b1111){
 12753  0026FE  3881               	swapf	3969,w,c	;volatile
 12754  002700  0B0F               	andlw	15
 12755  002702  0A0F               	xorlw	15
 12756  002704  B4D8               	btfsc	status,2,c
 12757  002706  D01D               	goto	l1314
 12758                           
 12759                           ;Test.c: 172: else if(PORTB >> 4 == 0b0000){
 12760                           
 12761                           ;Test.c: 171: }
 12762                           
 12763                           ;Test.c: 170: break;
 12764  002708  CF81 F0AB          	movff	3969,??_sensorTest	;volatile
 12765  00270C  0100               	movlb	0	; () banked
 12766  00270E  3BAB               	swapf	??_sensorTest& (0+255),f,b
 12767  002710  0E0F               	movlw	15
 12768  002712  17AB               	andwf	??_sensorTest& (0+255),f,b
 12769  002714  A4D8               	btfss	status,2,c
 12770  002716  D012               	goto	l1317
 12771                           
 12772                           ; BSR set to: 0
 12773                           ;Test.c: 173: LATCbits.LATC6 = !LATCbits.LATC6;
 12774  002718  BC8B               	btfsc	3979,6,c	;volatile
 12775  00271A  D004               	goto	u7760
 12776  00271C  0100               	movlb	0	; () banked
 12777  00271E  6BAB               	clrf	??_sensorTest& (0+255),b
 12778  002720  2BAB               	incf	??_sensorTest& (0+255),f,b
 12779  002722  D002               	goto	u7778
 12780  002724                     u7760:
 12781  002724  0100               	movlb	0	; () banked
 12782  002726  6BAB               	clrf	??_sensorTest& (0+255),b
 12783  002728                     u7778:
 12784  002728  0100               	movlb	0	; () banked
 12785  00272A  3BAB               	swapf	??_sensorTest& (0+255),f,b
 12786  00272C  47AB               	rlncf	??_sensorTest& (0+255),f,b
 12787  00272E  47AB               	rlncf	??_sensorTest& (0+255),f,b
 12788  002730  508B               	movf	3979,w,c	;volatile
 12789  002732  0100               	movlb	0	; () banked
 12790  002734  19AB               	xorwf	??_sensorTest& (0+255),w,b
 12791  002736  0BBF               	andlw	-65
 12792  002738  19AB               	xorwf	??_sensorTest& (0+255),w,b
 12793  00273A  6E8B               	movwf	3979,c	;volatile
 12794  00273C                     l1317:
 12795  00273C  A281               	btfss	3969,1,c	;volatile
 12796  00273E  D7DD               	goto	l8527
 12797  002740  D7FD               	goto	l1317
 12798  002742                     l1314:
 12799                           
 12800                           ;Test.c: 176: }
 12801                           ;Test.c: 177: LATCbits.LATC6 = 0;
 12802  002742  9C8B               	bcf	3979,6,c	;volatile
 12803  002744                     l1321:
 12804  002744  B281               	btfsc	3969,1,c	;volatile
 12805  002746  D7FE               	goto	l1321
 12806                           
 12807                           ;Test.c: 187: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12808  002748  0E01               	movlw	1
 12809  00274A  ECD1  F02F         	call	_lcdInst
 12810  00274E  0E68               	movlw	104
 12811  002750  0100               	movlb	0	; () banked
 12812  002752  6FAB               	movwf	??_sensorTest& (0+255),b
 12813  002754  0EE4               	movlw	228
 12814  002756                     u11387:
 12815  002756  2EE8               	decfsz	wreg,f,c
 12816  002758  D7FE               	bra	u11387
 12817  00275A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12818  00275C  D7FC               	bra	u11387
 12819  00275E  F000               	nop	
 12820  002760  0E80               	movlw	128
 12821  002762  ECD1  F02F         	call	_lcdInst
 12822                           
 12823                           ;Test.c: 188: printf("TST: MAGNETISM");
 12824  002766  0EB6               	movlw	low STR_83
 12825  002768  0100               	movlb	0	; () banked
 12826  00276A  6F8E               	movwf	printf@f& (0+255),b
 12827  00276C  0EFE               	movlw	high STR_83
 12828  00276E  0100               	movlb	0	; () banked
 12829  002770  6F8F               	movwf	(printf@f+1)& (0+255),b
 12830  002772  EC67  F00E         	call	_printf	;wreg free
 12831                           
 12832                           ;Test.c: 189: _delay((unsigned long)((100)*(32000000/4000.0)));
 12833  002776  0E05               	movlw	5
 12834  002778  0100               	movlb	0	; () banked
 12835  00277A  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12836  00277C  0E0F               	movlw	15
 12837  00277E  0100               	movlb	0	; () banked
 12838  002780  6FAB               	movwf	??_sensorTest& (0+255),b
 12839  002782  0EF1               	movlw	241
 12840  002784                     u11397:
 12841  002784  2EE8               	decfsz	wreg,f,c
 12842  002786  D7FE               	bra	u11397
 12843  002788  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12844  00278A  D7FC               	bra	u11397
 12845  00278C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12846  00278E  D7FA               	bra	u11397
 12847                           
 12848                           ;Test.c: 190: while(PORTBbits.RB1 == 0){
 12849  002790  D021               	goto	l8555
 12850  002792                     l8549:
 12851                           
 12852                           ;Test.c: 191: readMAG();
 12853  002792  EC3F  F02C         	call	_readMAG	;wreg free
 12854                           
 12855                           ;Test.c: 192: lcdInst(0b10000000);;
 12856  002796  0E80               	movlw	128
 12857  002798  ECD1  F02F         	call	_lcdInst
 12858                           
 12859                           ;Test.c: 193: lcdInst(0b11000000);;
 12860  00279C  0EC0               	movlw	192
 12861  00279E  ECD1  F02F         	call	_lcdInst
 12862                           
 12863                           ;Test.c: 194: printf("MAG_signal: %d ", MAG_signal);
 12864  0027A2  0E39               	movlw	low STR_84
 12865  0027A4  0100               	movlb	0	; () banked
 12866  0027A6  6F8E               	movwf	printf@f& (0+255),b
 12867  0027A8  0EFE               	movlw	high STR_84
 12868  0027AA  0100               	movlb	0	; () banked
 12869  0027AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12870  0027AE  C0E2  F090         	movff	_MAG_signal,?_printf+2
 12871  0027B2  C0E3  F091         	movff	_MAG_signal+1,?_printf+3
 12872  0027B6  EC67  F00E         	call	_printf	;wreg free
 12873                           
 12874                           ;Test.c: 195: _delay((unsigned long)((100)*(32000000/4000.0)));
 12875  0027BA  0E05               	movlw	5
 12876  0027BC  0100               	movlb	0	; () banked
 12877  0027BE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12878  0027C0  0E0F               	movlw	15
 12879  0027C2  0100               	movlb	0	; () banked
 12880  0027C4  6FAB               	movwf	??_sensorTest& (0+255),b
 12881  0027C6  0EF1               	movlw	241
 12882  0027C8                     u11407:
 12883  0027C8  2EE8               	decfsz	wreg,f,c
 12884  0027CA  D7FE               	bra	u11407
 12885  0027CC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12886  0027CE  D7FC               	bra	u11407
 12887  0027D0  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12888  0027D2  D7FA               	bra	u11407
 12889  0027D4                     l8555:
 12890  0027D4  A281               	btfss	3969,1,c	;volatile
 12891  0027D6  D7DD               	goto	l8549
 12892  0027D8                     l1327:
 12893  0027D8  B281               	btfsc	3969,1,c	;volatile
 12894  0027DA  D7FE               	goto	l1327
 12895                           
 12896                           ;Test.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12897  0027DC  0E01               	movlw	1
 12898  0027DE  ECD1  F02F         	call	_lcdInst
 12899  0027E2  0E68               	movlw	104
 12900  0027E4  0100               	movlb	0	; () banked
 12901  0027E6  6FAB               	movwf	??_sensorTest& (0+255),b
 12902  0027E8  0EE4               	movlw	228
 12903  0027EA                     u11417:
 12904  0027EA  2EE8               	decfsz	wreg,f,c
 12905  0027EC  D7FE               	bra	u11417
 12906  0027EE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12907  0027F0  D7FC               	bra	u11417
 12908  0027F2  F000               	nop	
 12909  0027F4  0E80               	movlw	128
 12910  0027F6  ECD1  F02F         	call	_lcdInst
 12911                           
 12912                           ;Test.c: 203: printf("TST: COND");
 12913  0027FA  0E86               	movlw	low STR_85
 12914  0027FC  0100               	movlb	0	; () banked
 12915  0027FE  6F8E               	movwf	printf@f& (0+255),b
 12916  002800  0EFF               	movlw	high STR_85
 12917  002802  0100               	movlb	0	; () banked
 12918  002804  6F8F               	movwf	(printf@f+1)& (0+255),b
 12919  002806  EC67  F00E         	call	_printf	;wreg free
 12920                           
 12921                           ;Test.c: 204: _delay((unsigned long)((100)*(32000000/4000.0)));
 12922  00280A  0E05               	movlw	5
 12923  00280C  0100               	movlb	0	; () banked
 12924  00280E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12925  002810  0E0F               	movlw	15
 12926  002812  0100               	movlb	0	; () banked
 12927  002814  6FAB               	movwf	??_sensorTest& (0+255),b
 12928  002816  0EF1               	movlw	241
 12929  002818                     u11427:
 12930  002818  2EE8               	decfsz	wreg,f,c
 12931  00281A  D7FE               	bra	u11427
 12932  00281C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12933  00281E  D7FC               	bra	u11427
 12934  002820  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12935  002822  D7FA               	bra	u11427
 12936  002824                     l8567:
 12937                           
 12938                           ;Test.c: 206: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12939  002824  0E01               	movlw	1
 12940  002826  ECD1  F02F         	call	_lcdInst
 12941  00282A  0E68               	movlw	104
 12942  00282C  0100               	movlb	0	; () banked
 12943  00282E  6FAB               	movwf	??_sensorTest& (0+255),b
 12944  002830  0EE4               	movlw	228
 12945  002832                     u11437:
 12946  002832  2EE8               	decfsz	wreg,f,c
 12947  002834  D7FE               	bra	u11437
 12948  002836  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12949  002838  D7FC               	bra	u11437
 12950  00283A  F000               	nop	
 12951  00283C  0E80               	movlw	128
 12952  00283E  ECD1  F02F         	call	_lcdInst
 12953                           
 12954                           ;Test.c: 207: printf("TST: COND");
 12955  002842  0E86               	movlw	low STR_85
 12956  002844  0100               	movlb	0	; () banked
 12957  002846  6F8E               	movwf	printf@f& (0+255),b
 12958  002848  0EFF               	movlw	high STR_85
 12959  00284A  0100               	movlb	0	; () banked
 12960  00284C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12961  00284E  EC67  F00E         	call	_printf	;wreg free
 12962                           
 12963                           ;Test.c: 208: while(PORTBbits.RB1 == 0){
 12964  002852  D01B               	goto	l8579
 12965  002854                     l8575:
 12966                           
 12967                           ;Test.c: 212: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12968  002854  0E80               	movlw	128
 12969  002856  ECD1  F02F         	call	_lcdInst
 12970  00285A  0EC0               	movlw	192
 12971  00285C  ECD1  F02F         	call	_lcdInst
 12972                           
 12973                           ;Test.c: 213: printf("COND: %d", PORTAbits.RA2);
 12974  002860  0EA4               	movlw	low STR_87
 12975  002862  0100               	movlb	0	; () banked
 12976  002864  6F8E               	movwf	printf@f& (0+255),b
 12977  002866  0EFF               	movlw	high STR_87
 12978  002868  0100               	movlb	0	; () banked
 12979  00286A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12980  00286C  A480               	btfss	3968,2,c	;volatile
 12981  00286E  D004               	goto	u7820
 12982  002870  0100               	movlb	0	; () banked
 12983  002872  6BAB               	clrf	??_sensorTest& (0+255),b
 12984  002874  2BAB               	incf	??_sensorTest& (0+255),f,b
 12985  002876  D002               	goto	u7828
 12986  002878                     u7820:
 12987  002878  0100               	movlb	0	; () banked
 12988  00287A  6BAB               	clrf	??_sensorTest& (0+255),b
 12989  00287C                     u7828:
 12990  00287C  0100               	movlb	0	; () banked
 12991  00287E  51AB               	movf	??_sensorTest& (0+255),w,b
 12992  002880  0100               	movlb	0	; () banked
 12993  002882  6F90               	movwf	(?_printf+2)& (0+255),b
 12994  002884  6B91               	clrf	(?_printf+3)& (0+255),b
 12995  002886  EC67  F00E         	call	_printf	;wreg free
 12996  00288A                     l8579:
 12997  00288A  A281               	btfss	3969,1,c	;volatile
 12998  00288C  D7E3               	goto	l8575
 12999                           
 13000                           ;Test.c: 214: }
 13001                           ;Test.c: 215: if(PORTB >> 4 == 0b1111){
 13002  00288E  3881               	swapf	3969,w,c	;volatile
 13003  002890  0B0F               	andlw	15
 13004  002892  0A0F               	xorlw	15
 13005  002894  B4D8               	btfsc	status,2,c
 13006  002896  0012               	return	
 13007                           
 13008                           ;Test.c: 218: else{
 13009                           ;Test.c: 219: LATCbits.LATC7 = 1;
 13010                           
 13011                           ;Test.c: 217: }
 13012                           
 13013                           ;Test.c: 216: break;
 13014  002898  8E8B               	bsf	3979,7,c	;volatile
 13015                           
 13016                           ;Test.c: 220: while(PORTBbits.RB1 == 1){
 13017  00289A  D01B               	goto	l8591
 13018  00289C                     l8587:
 13019                           
 13020                           ;Test.c: 222: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13021  00289C  0E80               	movlw	128
 13022  00289E  ECD1  F02F         	call	_lcdInst
 13023  0028A2  0EC0               	movlw	192
 13024  0028A4  ECD1  F02F         	call	_lcdInst
 13025                           
 13026                           ;Test.c: 223: printf("COND: %d", PORTAbits.RA2);
 13027  0028A8  0EA4               	movlw	low STR_87
 13028  0028AA  0100               	movlb	0	; () banked
 13029  0028AC  6F8E               	movwf	printf@f& (0+255),b
 13030  0028AE  0EFF               	movlw	high STR_87
 13031  0028B0  0100               	movlb	0	; () banked
 13032  0028B2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13033  0028B4  A480               	btfss	3968,2,c	;volatile
 13034  0028B6  D004               	goto	u7850
 13035  0028B8  0100               	movlb	0	; () banked
 13036  0028BA  6BAB               	clrf	??_sensorTest& (0+255),b
 13037  0028BC  2BAB               	incf	??_sensorTest& (0+255),f,b
 13038  0028BE  D002               	goto	u7858
 13039  0028C0                     u7850:
 13040  0028C0  0100               	movlb	0	; () banked
 13041  0028C2  6BAB               	clrf	??_sensorTest& (0+255),b
 13042  0028C4                     u7858:
 13043  0028C4  0100               	movlb	0	; () banked
 13044  0028C6  51AB               	movf	??_sensorTest& (0+255),w,b
 13045  0028C8  0100               	movlb	0	; () banked
 13046  0028CA  6F90               	movwf	(?_printf+2)& (0+255),b
 13047  0028CC  6B91               	clrf	(?_printf+3)& (0+255),b
 13048  0028CE  EC67  F00E         	call	_printf	;wreg free
 13049  0028D2                     l8591:
 13050  0028D2  B281               	btfsc	3969,1,c	;volatile
 13051  0028D4  D7E3               	goto	l8587
 13052                           
 13053                           ;Test.c: 224: }
 13054                           ;Test.c: 225: LATCbits.LATC7 = !1;
 13055  0028D6  9E8B               	bcf	3979,7,c	;volatile
 13056  0028D8  D7A5               	goto	l8567
 13057  0028DA                     __end_of_sensorTest:
 13058                           	opt stack 0
 13059                           tblptru	equ	0xFF8
 13060                           tblptrh	equ	0xFF7
 13061                           tblptrl	equ	0xFF6
 13062                           tablat	equ	0xFF5
 13063                           prodh	equ	0xFF4
 13064                           prodl	equ	0xFF3
 13065                           intcon	equ	0xFF2
 13066                           intcon2	equ	0xFF1
 13067                           intcon3	equ	0xFF0
 13068                           postinc0	equ	0xFEE
 13069                           wreg	equ	0xFE8
 13070                           postdec1	equ	0xFE5
 13071                           fsr1l	equ	0xFE1
 13072                           indf2	equ	0xFDF
 13073                           postinc2	equ	0xFDE
 13074                           postdec2	equ	0xFDD
 13075                           fsr2h	equ	0xFDA
 13076                           fsr2l	equ	0xFD9
 13077                           status	equ	0xFD8
 13078                           
 13079 ;; *************** function _readMAG *****************
 13080 ;; Defined at:
 13081 ;;		line 38 in file "ADCFunctionality.c"
 13082 ;; Parameters:    Size  Location     Type
 13083 ;;		None
 13084 ;; Auto vars:     Size  Location     Type
 13085 ;;  res             2    4[BANK0 ] int 
 13086 ;; Return value:  Size  Location     Type
 13087 ;;                  1    wreg      void 
 13088 ;; Registers used:
 13089 ;;		wreg, status,2, status,0, cstack
 13090 ;; Tracked objects:
 13091 ;;		On entry : 0/0
 13092 ;;		On exit  : 0/0
 13093 ;;		Unchanged: 0/0
 13094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13096 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13097 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13098 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13099 ;;Total ram usage:        4 bytes
 13100 ;; Hardware stack levels used:    1
 13101 ;; Hardware stack levels required when called:    8
 13102 ;; This function calls:
 13103 ;;		_readADC
 13104 ;; This function is called by:
 13105 ;;		_getMAG
 13106 ;;		_sensorTest
 13107 ;; This function uses a non-reentrant model
 13108 ;;
 13109                           
 13110                           	psect	text42
 13111  00587E                     __ptext42:
 13112                           	opt stack 0
 13113  00587E                     _readMAG:
 13114                           	opt stack 19
 13115                           
 13116                           ;ADCFunctionality.c: 39: readADC(1);
 13117                           
 13118                           ;incstack = 0
 13119  00587E  0E01               	movlw	1
 13120  005880  ECBC  F02E         	call	_readADC
 13121                           
 13122                           ;ADCFunctionality.c: 40: int res = ADRESH<<8 | ADRESL;
 13123  005884  50C3               	movf	4035,w,c	;volatile
 13124  005886  CFC4 F082          	movff	4036,??_readMAG	;volatile
 13125  00588A  0100               	movlb	0	; () banked
 13126  00588C  6B83               	clrf	(??_readMAG+1)& (0+255),b
 13127  00588E  C082  F083         	movff	??_readMAG,??_readMAG+1
 13128  005892  0100               	movlb	0	; () banked
 13129  005894  6B82               	clrf	??_readMAG& (0+255),b
 13130  005896  0100               	movlb	0	; () banked
 13131  005898  1182               	iorwf	??_readMAG& (0+255),w,b
 13132  00589A  0100               	movlb	0	; () banked
 13133  00589C  6F84               	movwf	readMAG@res& (0+255),b
 13134  00589E  0100               	movlb	0	; () banked
 13135  0058A0  5183               	movf	(??_readMAG+1)& (0+255),w,b
 13136  0058A2  0100               	movlb	0	; () banked
 13137  0058A4  6F85               	movwf	(readMAG@res+1)& (0+255),b
 13138                           
 13139                           ; BSR set to: 0
 13140                           ;ADCFunctionality.c: 41: MAG_signal = (res < 150) ? 1 : 0;
 13141  0058A6  0100               	movlb	0	; () banked
 13142  0058A8  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 13143  0058AA  D008               	goto	u5621
 13144  0058AC  0100               	movlb	0	; () banked
 13145  0058AE  5185               	movf	(readMAG@res+1)& (0+255),w,b
 13146  0058B0  E107               	bnz	u5620
 13147  0058B2  0E96               	movlw	150
 13148  0058B4  0100               	movlb	0	; () banked
 13149  0058B6  5D84               	subwf	readMAG@res& (0+255),w,b
 13150  0058B8  B0D8               	btfsc	status,0,c
 13151  0058BA  D002               	goto	u5620
 13152  0058BC                     u5621:
 13153  0058BC  0E01               	movlw	1
 13154  0058BE  D001               	goto	u5630
 13155  0058C0                     u5620:
 13156  0058C0  0E00               	movlw	0
 13157  0058C2                     u5630:
 13158  0058C2  0100               	movlb	0	; () banked
 13159  0058C4  6FE2               	movwf	_MAG_signal& (0+255),b
 13160  0058C6  6BE3               	clrf	(_MAG_signal+1)& (0+255),b
 13161                           
 13162                           ; BSR set to: 0
 13163  0058C8  0012               	return		;funcret
 13164  0058CA                     __end_of_readMAG:
 13165                           	opt stack 0
 13166                           tblptru	equ	0xFF8
 13167                           tblptrh	equ	0xFF7
 13168                           tblptrl	equ	0xFF6
 13169                           tablat	equ	0xFF5
 13170                           prodh	equ	0xFF4
 13171                           prodl	equ	0xFF3
 13172                           intcon	equ	0xFF2
 13173                           intcon2	equ	0xFF1
 13174                           intcon3	equ	0xFF0
 13175                           postinc0	equ	0xFEE
 13176                           wreg	equ	0xFE8
 13177                           postdec1	equ	0xFE5
 13178                           fsr1l	equ	0xFE1
 13179                           indf2	equ	0xFDF
 13180                           postinc2	equ	0xFDE
 13181                           postdec2	equ	0xFDD
 13182                           fsr2h	equ	0xFDA
 13183                           fsr2l	equ	0xFD9
 13184                           status	equ	0xFD8
 13185                           
 13186 ;; *************** function _arm *****************
 13187 ;; Defined at:
 13188 ;;		line 653 in file "Test.c"
 13189 ;; Parameters:    Size  Location     Type
 13190 ;;		None
 13191 ;; Auto vars:     Size  Location     Type
 13192 ;;  on              2   44[BANK0 ] int 
 13193 ;; Return value:  Size  Location     Type
 13194 ;;                  1    wreg      void 
 13195 ;; Registers used:
 13196 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13197 ;; Tracked objects:
 13198 ;;		On entry : 0/0
 13199 ;;		On exit  : 0/0
 13200 ;;		Unchanged: 0/0
 13201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13203 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13204 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13205 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13206 ;;Total ram usage:        3 bytes
 13207 ;; Hardware stack levels used:    1
 13208 ;; Hardware stack levels required when called:   10
 13209 ;; This function calls:
 13210 ;;		_lcdInst
 13211 ;;		_printf
 13212 ;;		_stopSignals
 13213 ;; This function is called by:
 13214 ;;		_Test
 13215 ;; This function uses a non-reentrant model
 13216 ;;
 13217                           
 13218                           	psect	text43
 13219  004644                     __ptext43:
 13220                           	opt stack 0
 13221  004644                     _arm:
 13222                           	opt stack 19
 13223                           
 13224                           ;Test.c: 654: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13225                           
 13226                           ; BSR set to: 0
 13227                           ;incstack = 0
 13228  004644  0E01               	movlw	1
 13229  004646  ECD1  F02F         	call	_lcdInst
 13230  00464A  0E68               	movlw	104
 13231  00464C  0100               	movlb	0	; () banked
 13232  00464E  6FAB               	movwf	??_arm& (0+255),b
 13233  004650  0EE4               	movlw	228
 13234  004652                     u11447:
 13235  004652  2EE8               	decfsz	wreg,f,c
 13236  004654  D7FE               	bra	u11447
 13237  004656  2FAB               	decfsz	??_arm& (0+255),f,b
 13238  004658  D7FC               	bra	u11447
 13239  00465A  F000               	nop	
 13240  00465C  0E80               	movlw	128
 13241  00465E  ECD1  F02F         	call	_lcdInst
 13242                           
 13243                           ;Test.c: 655: printf("D WILL RETURN   ");
 13244  004662  0E08               	movlw	low STR_125
 13245  004664  0100               	movlb	0	; () banked
 13246  004666  6F8E               	movwf	printf@f& (0+255),b
 13247  004668  0EFC               	movlw	high STR_125
 13248  00466A  0100               	movlb	0	; () banked
 13249  00466C  6F8F               	movwf	(printf@f+1)& (0+255),b
 13250  00466E  EC67  F00E         	call	_printf	;wreg free
 13251                           
 13252                           ;Test.c: 656: lcdInst(0b11000000);;
 13253  004672  0EC0               	movlw	192
 13254  004674  ECD1  F02F         	call	_lcdInst
 13255                           
 13256                           ;Test.c: 657: printf("ELSE TOGGLES ARM");
 13257  004678  0EB2               	movlw	low STR_126
 13258  00467A  0100               	movlb	0	; () banked
 13259  00467C  6F8E               	movwf	printf@f& (0+255),b
 13260  00467E  0EFC               	movlw	high STR_126
 13261  004680  0100               	movlb	0	; () banked
 13262  004682  6F8F               	movwf	(printf@f+1)& (0+255),b
 13263  004684  EC67  F00E         	call	_printf	;wreg free
 13264                           
 13265                           ;Test.c: 659: (INTCONbits.GIE = 1);
 13266  004688  8EF2               	bsf	intcon,7,c	;volatile
 13267                           
 13268                           ;Test.c: 660: machine_state = Sorting_state;
 13269  00468A  0E01               	movlw	1
 13270  00468C  0100               	movlb	0	; () banked
 13271  00468E  6FFC               	movwf	_machine_state& (0+255),b
 13272                           
 13273                           ; BSR set to: 0
 13274                           ;Test.c: 661: f_arm_position = 2;
 13275  004690  0E00               	movlw	0
 13276  004692  0100               	movlb	0	; () banked
 13277  004694  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 13278  004696  0E02               	movlw	2
 13279  004698  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 13280                           
 13281                           ; BSR set to: 0
 13282                           ;Test.c: 662: timer2_counter = 0;
 13283  00469A  0E00               	movlw	0
 13284  00469C  6E74               	movwf	_timer2_counter+1,c	;volatile
 13285  00469E  0E00               	movlw	0
 13286  0046A0  6E73               	movwf	_timer2_counter,c	;volatile
 13287                           
 13288                           ; BSR set to: 0
 13289                           ;Test.c: 663: LATBbits.LATB3 = 1;
 13290  0046A2  868A               	bsf	3978,3,c	;volatile
 13291                           
 13292                           ; BSR set to: 0
 13293                           ;Test.c: 664: TMR2ON = 1;
 13294  0046A4  84CA               	bsf	4042,2,c	;volatile
 13295                           
 13296                           ; BSR set to: 0
 13297                           ;Test.c: 665: was_low_2 = 0;
 13298  0046A6  0E00               	movlw	0
 13299  0046A8  6E7A               	movwf	_was_low_2+1,c	;volatile
 13300  0046AA  0E00               	movlw	0
 13301  0046AC  6E79               	movwf	_was_low_2,c	;volatile
 13302                           
 13303                           ; BSR set to: 0
 13304                           ;Test.c: 667: int on = 0;
 13305  0046AE  0E00               	movlw	0
 13306  0046B0  0100               	movlb	0	; () banked
 13307  0046B2  6FAD               	movwf	(arm@on+1)& (0+255),b
 13308  0046B4  0E00               	movlw	0
 13309  0046B6  6FAC               	movwf	arm@on& (0+255),b
 13310  0046B8                     l9045:
 13311                           
 13312                           ;Test.c: 669: if(on){
 13313  0046B8  0100               	movlb	0	; () banked
 13314  0046BA  51AC               	movf	arm@on& (0+255),w,b
 13315  0046BC  0100               	movlb	0	; () banked
 13316  0046BE  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 13317  0046C0  B4D8               	btfsc	status,2,c
 13318  0046C2  D01C               	goto	l9057
 13319                           
 13320                           ; BSR set to: 0
 13321                           ;Test.c: 670: on = !on;
 13322  0046C4  0100               	movlb	0	; () banked
 13323  0046C6  51AC               	movf	arm@on& (0+255),w,b
 13324  0046C8  0100               	movlb	0	; () banked
 13325  0046CA  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 13326  0046CC  A4D8               	btfss	status,2,c
 13327  0046CE  D002               	goto	u8440
 13328  0046D0  0E01               	movlw	1
 13329  0046D2  D001               	goto	u8450
 13330  0046D4                     u8440:
 13331  0046D4  0E00               	movlw	0
 13332  0046D6                     u8450:
 13333  0046D6  0100               	movlb	0	; () banked
 13334  0046D8  6FAC               	movwf	arm@on& (0+255),b
 13335  0046DA  6BAD               	clrf	(arm@on+1)& (0+255),b
 13336                           
 13337                           ;Test.c: 671: while(PORTBbits.RB1 == 0){
 13338  0046DC  D005               	goto	l9051
 13339  0046DE                     l9049:
 13340                           
 13341                           ; BSR set to: 0
 13342                           ;Test.c: 672: f_arm_position = 0;
 13343  0046DE  0E00               	movlw	0
 13344  0046E0  0100               	movlb	0	; () banked
 13345  0046E2  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 13346  0046E4  0E00               	movlw	0
 13347  0046E6  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 13348  0046E8                     l9051:
 13349                           
 13350                           ; BSR set to: 0
 13351  0046E8  A281               	btfss	3969,1,c	;volatile
 13352  0046EA  D7F9               	goto	l9049
 13353                           
 13354                           ; BSR set to: 0
 13355                           ;Test.c: 673: }
 13356                           ;Test.c: 674: if(PORTB >> 4 == 0b1111){
 13357                           
 13358                           ; BSR set to: 0
 13359  0046EC  3881               	swapf	3969,w,c	;volatile
 13360  0046EE  0B0F               	andlw	15
 13361  0046F0  0A0F               	xorlw	15
 13362  0046F2  B4D8               	btfsc	status,2,c
 13363  0046F4  D01F               	goto	l1512
 13364  0046F6                     l1513:
 13365  0046F6  A281               	btfss	3969,1,c	;volatile
 13366  0046F8  D7DF               	goto	l9045
 13367  0046FA  D7FD               	goto	l1513
 13368  0046FC                     l9057:
 13369                           
 13370                           ;Test.c: 679: else{
 13371                           ;Test.c: 680: on = !on;
 13372  0046FC  0100               	movlb	0	; () banked
 13373  0046FE  51AC               	movf	arm@on& (0+255),w,b
 13374  004700  0100               	movlb	0	; () banked
 13375  004702  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 13376  004704  A4D8               	btfss	status,2,c
 13377  004706  D002               	goto	u8490
 13378  004708  0E01               	movlw	1
 13379  00470A  D001               	goto	u8500
 13380  00470C                     u8490:
 13381  00470C  0E00               	movlw	0
 13382  00470E                     u8500:
 13383  00470E  0100               	movlb	0	; () banked
 13384  004710  6FAC               	movwf	arm@on& (0+255),b
 13385  004712  6BAD               	clrf	(arm@on+1)& (0+255),b
 13386                           
 13387                           ;Test.c: 681: while(PORTBbits.RB1 == 0){
 13388  004714  D005               	goto	l9061
 13389  004716                     l9059:
 13390                           
 13391                           ; BSR set to: 0
 13392                           ;Test.c: 682: f_arm_position = 1;
 13393  004716  0E00               	movlw	0
 13394  004718  0100               	movlb	0	; () banked
 13395  00471A  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 13396  00471C  0E01               	movlw	1
 13397  00471E  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 13398  004720                     l9061:
 13399                           
 13400                           ; BSR set to: 0
 13401  004720  A281               	btfss	3969,1,c	;volatile
 13402  004722  D7F9               	goto	l9059
 13403                           
 13404                           ; BSR set to: 0
 13405                           ;Test.c: 683: }
 13406                           ;Test.c: 684: if(PORTB >> 4 == 0b1111){
 13407                           
 13408                           ; BSR set to: 0
 13409  004724  3881               	swapf	3969,w,c	;volatile
 13410  004726  0B0F               	andlw	15
 13411  004728  0A0F               	xorlw	15
 13412  00472A  B4D8               	btfsc	status,2,c
 13413  00472C  D003               	goto	l1512
 13414  00472E                     l1521:
 13415  00472E  A281               	btfss	3969,1,c	;volatile
 13416  004730  D7C3               	goto	l9045
 13417  004732  D7FD               	goto	l1521
 13418  004734                     l1512:
 13419                           
 13420                           ; BSR set to: 0
 13421                           ;Test.c: 688: }
 13422                           ;Test.c: 689: }
 13423                           ;Test.c: 691: (INTCONbits.GIE = 0);
 13424  004734  9EF2               	bcf	intcon,7,c	;volatile
 13425                           
 13426                           ; BSR set to: 0
 13427                           ;Test.c: 692: stopSignals();
 13428  004736  EC78  F02F         	call	_stopSignals	;wreg free
 13429                           
 13430                           ;Test.c: 693: machine_state = Testing_state;
 13431  00473A  0E03               	movlw	3
 13432  00473C  0100               	movlb	0	; () banked
 13433  00473E  6FFC               	movwf	_machine_state& (0+255),b
 13434                           
 13435                           ; BSR set to: 0
 13436  004740  0012               	return		;funcret
 13437  004742                     __end_of_arm:
 13438                           	opt stack 0
 13439                           tblptru	equ	0xFF8
 13440                           tblptrh	equ	0xFF7
 13441                           tblptrl	equ	0xFF6
 13442                           tablat	equ	0xFF5
 13443                           prodh	equ	0xFF4
 13444                           prodl	equ	0xFF3
 13445                           intcon	equ	0xFF2
 13446                           intcon2	equ	0xFF1
 13447                           intcon3	equ	0xFF0
 13448                           postinc0	equ	0xFEE
 13449                           wreg	equ	0xFE8
 13450                           postdec1	equ	0xFE5
 13451                           fsr1l	equ	0xFE1
 13452                           indf2	equ	0xFDF
 13453                           postinc2	equ	0xFDE
 13454                           postdec2	equ	0xFDD
 13455                           fsr2h	equ	0xFDA
 13456                           fsr2l	equ	0xFD9
 13457                           status	equ	0xFD8
 13458                           
 13459 ;; *************** function _algorithmTest *****************
 13460 ;; Defined at:
 13461 ;;		line 78 in file "Test.c"
 13462 ;; Parameters:    Size  Location     Type
 13463 ;;		None
 13464 ;; Auto vars:     Size  Location     Type
 13465 ;;		None
 13466 ;; Return value:  Size  Location     Type
 13467 ;;                  1    wreg      void 
 13468 ;; Registers used:
 13469 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13470 ;; Tracked objects:
 13471 ;;		On entry : 0/0
 13472 ;;		On exit  : 0/0
 13473 ;;		Unchanged: 0/0
 13474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13477 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13478 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13479 ;;Total ram usage:        2 bytes
 13480 ;; Hardware stack levels used:    1
 13481 ;; Hardware stack levels required when called:   10
 13482 ;; This function calls:
 13483 ;;		_lcdInst
 13484 ;;		_printf
 13485 ;; This function is called by:
 13486 ;;		_Test
 13487 ;; This function uses a non-reentrant model
 13488 ;;
 13489                           
 13490                           	psect	text44
 13491  00490C                     __ptext44:
 13492                           	opt stack 0
 13493  00490C                     _algorithmTest:
 13494                           	opt stack 19
 13495                           
 13496                           ;Test.c: 80: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13497                           
 13498                           ; BSR set to: 0
 13499                           ;incstack = 0
 13500  00490C  0E01               	movlw	1
 13501  00490E  ECD1  F02F         	call	_lcdInst
 13502  004912  0E68               	movlw	104
 13503  004914  0100               	movlb	0	; () banked
 13504  004916  6FAB               	movwf	??_algorithmTest& (0+255),b
 13505  004918  0EE4               	movlw	228
 13506  00491A                     u11457:
 13507  00491A  2EE8               	decfsz	wreg,f,c
 13508  00491C  D7FE               	bra	u11457
 13509  00491E  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13510  004920  D7FC               	bra	u11457
 13511  004922  F000               	nop	
 13512  004924  0E80               	movlw	128
 13513  004926  ECD1  F02F         	call	_lcdInst
 13514                           
 13515                           ;Test.c: 81: printf("ALGORITHM TEST");
 13516  00492A  0E01               	movlw	low STR_70
 13517  00492C  0100               	movlb	0	; () banked
 13518  00492E  6F8E               	movwf	printf@f& (0+255),b
 13519  004930  0EFF               	movlw	high STR_70
 13520  004932  0100               	movlb	0	; () banked
 13521  004934  6F8F               	movwf	(printf@f+1)& (0+255),b
 13522  004936  EC67  F00E         	call	_printf	;wreg free
 13523                           
 13524                           ;Test.c: 82: lcdInst(0b11000000);;
 13525  00493A  0EC0               	movlw	192
 13526  00493C  ECD1  F02F         	call	_lcdInst
 13527                           
 13528                           ;Test.c: 83: printf("PUSH TO START");
 13529  004940  0E3A               	movlw	low STR_71
 13530  004942  0100               	movlb	0	; () banked
 13531  004944  6F8E               	movwf	printf@f& (0+255),b
 13532  004946  0EFF               	movlw	high STR_71
 13533  004948  0100               	movlb	0	; () banked
 13534  00494A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13535  00494C  EC67  F00E         	call	_printf	;wreg free
 13536                           
 13537                           ;Test.c: 84: _delay((unsigned long)((100)*(32000000/4000.0)));
 13538  004950  0E05               	movlw	5
 13539  004952  0100               	movlb	0	; () banked
 13540  004954  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 13541  004956  0E0F               	movlw	15
 13542  004958  0100               	movlb	0	; () banked
 13543  00495A  6FAB               	movwf	??_algorithmTest& (0+255),b
 13544  00495C  0EF1               	movlw	241
 13545  00495E                     u11467:
 13546  00495E  2EE8               	decfsz	wreg,f,c
 13547  004960  D7FE               	bra	u11467
 13548  004962  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13549  004964  D7FC               	bra	u11467
 13550  004966  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 13551  004968  D7FA               	bra	u11467
 13552  00496A                     l1288:
 13553  00496A  A281               	btfss	3969,1,c	;volatile
 13554  00496C  D7FE               	goto	l1288
 13555  00496E                     l1291:
 13556  00496E  B281               	btfsc	3969,1,c	;volatile
 13557  004970  D7FE               	goto	l1291
 13558                           
 13559                           ;Test.c: 87: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13560  004972  0E01               	movlw	1
 13561  004974  ECD1  F02F         	call	_lcdInst
 13562  004978  0E68               	movlw	104
 13563  00497A  0100               	movlb	0	; () banked
 13564  00497C  6FAB               	movwf	??_algorithmTest& (0+255),b
 13565  00497E  0EE4               	movlw	228
 13566  004980                     u11477:
 13567  004980  2EE8               	decfsz	wreg,f,c
 13568  004982  D7FE               	bra	u11477
 13569  004984  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13570  004986  D7FC               	bra	u11477
 13571  004988  F000               	nop	
 13572  00498A  0E80               	movlw	128
 13573  00498C  ECD1  F02F         	call	_lcdInst
 13574                           
 13575                           ;Test.c: 92: printf("ALG1: 9 POPNOTAB");
 13576  004990  0E5D               	movlw	low STR_72
 13577  004992  0100               	movlb	0	; () banked
 13578  004994  6F8E               	movwf	printf@f& (0+255),b
 13579  004996  0EFC               	movlw	high STR_72
 13580  004998  0100               	movlb	0	; () banked
 13581  00499A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13582  00499C  EC67  F00E         	call	_printf	;wreg free
 13583                           
 13584                           ;Test.c: 99: printf("ALG2: 12 CANS");
 13585  0049A0  0E1E               	movlw	low STR_73
 13586  0049A2  0100               	movlb	0	; () banked
 13587  0049A4  6F8E               	movwf	printf@f& (0+255),b
 13588  0049A6  0EFF               	movlw	high STR_73
 13589  0049A8  0100               	movlb	0	; () banked
 13590  0049AA  6F8F               	movwf	(printf@f+1)& (0+255),b
 13591  0049AC  EC67  F00E         	call	_printf	;wreg free
 13592                           
 13593                           ;Test.c: 108: printf("ALG3: 1 CAN");
 13594  0049B0  0E64               	movlw	low STR_74
 13595  0049B2  0100               	movlb	0	; () banked
 13596  0049B4  6F8E               	movwf	printf@f& (0+255),b
 13597  0049B6  0EFF               	movlw	high STR_74
 13598  0049B8  0100               	movlb	0	; () banked
 13599  0049BA  6F8F               	movwf	(printf@f+1)& (0+255),b
 13600  0049BC  EC67  F00E         	call	_printf	;wreg free
 13601                           
 13602                           ;Test.c: 114: printf("ALG4: ALL CANS");
 13603  0049C0  0EE3               	movlw	low STR_75
 13604  0049C2  0100               	movlb	0	; () banked
 13605  0049C4  6F8E               	movwf	printf@f& (0+255),b
 13606  0049C6  0EFE               	movlw	high STR_75
 13607  0049C8  0100               	movlb	0	; () banked
 13608  0049CA  6F8F               	movwf	(printf@f+1)& (0+255),b
 13609  0049CC  EC67  F00E         	call	_printf	;wreg free
 13610                           
 13611                           ;Test.c: 119: printf("ALG5: NO CANS");
 13612  0049D0  0E2C               	movlw	low STR_76
 13613  0049D2  0100               	movlb	0	; () banked
 13614  0049D4  6F8E               	movwf	printf@f& (0+255),b
 13615  0049D6  0EFF               	movlw	high STR_76
 13616  0049D8  0100               	movlb	0	; () banked
 13617  0049DA  6F8F               	movwf	(printf@f+1)& (0+255),b
 13618  0049DC  EC67  F00E         	call	_printf	;wreg free
 13619  0049E0  0012               	return		;funcret
 13620  0049E2                     __end_of_algorithmTest:
 13621                           	opt stack 0
 13622                           tblptru	equ	0xFF8
 13623                           tblptrh	equ	0xFF7
 13624                           tblptrl	equ	0xFF6
 13625                           tablat	equ	0xFF5
 13626                           prodh	equ	0xFF4
 13627                           prodl	equ	0xFF3
 13628                           intcon	equ	0xFF2
 13629                           intcon2	equ	0xFF1
 13630                           intcon3	equ	0xFF0
 13631                           postinc0	equ	0xFEE
 13632                           wreg	equ	0xFE8
 13633                           postdec1	equ	0xFE5
 13634                           fsr1l	equ	0xFE1
 13635                           indf2	equ	0xFDF
 13636                           postinc2	equ	0xFDE
 13637                           postdec2	equ	0xFDD
 13638                           fsr2h	equ	0xFDA
 13639                           fsr2l	equ	0xFD9
 13640                           status	equ	0xFD8
 13641                           
 13642 ;; *************** function _actuatorTest *****************
 13643 ;; Defined at:
 13644 ;;		line 230 in file "Test.c"
 13645 ;; Parameters:    Size  Location     Type
 13646 ;;		None
 13647 ;; Auto vars:     Size  Location     Type
 13648 ;;  i               1   45[BANK0 ] unsigned char 
 13649 ;;  i               1   67[BANK0 ] unsigned char 
 13650 ;;  i               1   66[BANK0 ] unsigned char 
 13651 ;;  i               1   65[BANK0 ] unsigned char 
 13652 ;;  i               1   64[BANK0 ] unsigned char 
 13653 ;;  i               1   63[BANK0 ] unsigned char 
 13654 ;;  i               1   62[BANK0 ] unsigned char 
 13655 ;;  i               1   61[BANK0 ] unsigned char 
 13656 ;;  i               1   60[BANK0 ] unsigned char 
 13657 ;;  i               1   59[BANK0 ] unsigned char 
 13658 ;;  i               1   58[BANK0 ] unsigned char 
 13659 ;;  i               1   57[BANK0 ] unsigned char 
 13660 ;;  i               1   56[BANK0 ] unsigned char 
 13661 ;;  i               1   55[BANK0 ] unsigned char 
 13662 ;;  i               1   54[BANK0 ] unsigned char 
 13663 ;;  i               1   53[BANK0 ] unsigned char 
 13664 ;;  i               1   52[BANK0 ] unsigned char 
 13665 ;;  i               1   51[BANK0 ] unsigned char 
 13666 ;;  i               1   50[BANK0 ] unsigned char 
 13667 ;;  i               1   49[BANK0 ] unsigned char 
 13668 ;;  i               1   48[BANK0 ] unsigned char 
 13669 ;;  i               1   47[BANK0 ] unsigned char 
 13670 ;;  i               1   46[BANK0 ] unsigned char 
 13671 ;;  i               2   68[BANK0 ] int 
 13672 ;; Return value:  Size  Location     Type
 13673 ;;                  1    wreg      void 
 13674 ;; Registers used:
 13675 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13676 ;; Tracked objects:
 13677 ;;		On entry : 0/0
 13678 ;;		On exit  : 0/0
 13679 ;;		Unchanged: 0/0
 13680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13682 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13683 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13684 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13685 ;;Total ram usage:       27 bytes
 13686 ;; Hardware stack levels used:    1
 13687 ;; Hardware stack levels required when called:   10
 13688 ;; This function calls:
 13689 ;;		_lcdInst
 13690 ;;		_printf
 13691 ;;		_updateServoPosition
 13692 ;; This function is called by:
 13693 ;;		_Test
 13694 ;; This function uses a non-reentrant model
 13695 ;;
 13696                           
 13697                           	psect	text45
 13698  0008DA                     __ptext45:
 13699                           	opt stack 0
 13700  0008DA                     _actuatorTest:
 13701                           	opt stack 19
 13702                           
 13703                           ;Test.c: 232: int i = 0;
 13704                           
 13705                           ;incstack = 0
 13706  0008DA  0E00               	movlw	0
 13707  0008DC  0100               	movlb	0	; () banked
 13708  0008DE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13709  0008E0  0E00               	movlw	0
 13710  0008E2  6FC4               	movwf	actuatorTest@i& (0+255),b
 13711                           
 13712                           ; BSR set to: 0
 13713                           ;Test.c: 234: (INTCONbits.GIE = 1);
 13714  0008E4  8EF2               	bsf	intcon,7,c	;volatile
 13715                           
 13716                           ; BSR set to: 0
 13717                           ;Test.c: 235: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13718  0008E6  0E01               	movlw	1
 13719  0008E8  ECD1  F02F         	call	_lcdInst
 13720  0008EC  0E68               	movlw	104
 13721  0008EE  0100               	movlb	0	; () banked
 13722  0008F0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13723  0008F2  0EE4               	movlw	228
 13724  0008F4                     u11487:
 13725  0008F4  2EE8               	decfsz	wreg,f,c
 13726  0008F6  D7FE               	bra	u11487
 13727  0008F8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13728  0008FA  D7FC               	bra	u11487
 13729  0008FC  F000               	nop	
 13730  0008FE  0E80               	movlw	128
 13731  000900  ECD1  F02F         	call	_lcdInst
 13732                           
 13733                           ;Test.c: 236: printf("ACTUATORS");
 13734  000904  0E90               	movlw	low STR_89
 13735  000906  0100               	movlb	0	; () banked
 13736  000908  6F8E               	movwf	printf@f& (0+255),b
 13737  00090A  0EFF               	movlw	high STR_89
 13738  00090C  0100               	movlb	0	; () banked
 13739  00090E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13740  000910  EC67  F00E         	call	_printf	;wreg free
 13741                           
 13742                           ;Test.c: 237: lcdInst(0b11000000);;
 13743  000914  0EC0               	movlw	192
 13744  000916  ECD1  F02F         	call	_lcdInst
 13745                           
 13746                           ;Test.c: 238: printf("PUSH TO START");
 13747  00091A  0E3A               	movlw	low STR_71
 13748  00091C  0100               	movlb	0	; () banked
 13749  00091E  6F8E               	movwf	printf@f& (0+255),b
 13750  000920  0EFF               	movlw	high STR_71
 13751  000922  0100               	movlb	0	; () banked
 13752  000924  6F8F               	movwf	(printf@f+1)& (0+255),b
 13753  000926  EC67  F00E         	call	_printf	;wreg free
 13754                           
 13755                           ;Test.c: 239: _delay((unsigned long)((100)*(32000000/4000.0)));
 13756  00092A  0E05               	movlw	5
 13757  00092C  0100               	movlb	0	; () banked
 13758  00092E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13759  000930  0E0F               	movlw	15
 13760  000932  0100               	movlb	0	; () banked
 13761  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 13762  000936  0EF1               	movlw	241
 13763  000938                     u11497:
 13764  000938  2EE8               	decfsz	wreg,f,c
 13765  00093A  D7FE               	bra	u11497
 13766  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13767  00093E  D7FC               	bra	u11497
 13768  000940  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13769  000942  D7FA               	bra	u11497
 13770  000944                     l1344:
 13771  000944  A281               	btfss	3969,1,c	;volatile
 13772  000946  D7FE               	goto	l1344
 13773  000948                     l1347:
 13774  000948  B281               	btfsc	3969,1,c	;volatile
 13775  00094A  D7FE               	goto	l1347
 13776                           
 13777                           ;Test.c: 242: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13778  00094C  0E01               	movlw	1
 13779  00094E  ECD1  F02F         	call	_lcdInst
 13780  000952  0E68               	movlw	104
 13781  000954  0100               	movlb	0	; () banked
 13782  000956  6FAB               	movwf	??_actuatorTest& (0+255),b
 13783  000958  0EE4               	movlw	228
 13784  00095A                     u11507:
 13785  00095A  2EE8               	decfsz	wreg,f,c
 13786  00095C  D7FE               	bra	u11507
 13787  00095E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13788  000960  D7FC               	bra	u11507
 13789  000962  F000               	nop	
 13790  000964  0E80               	movlw	128
 13791  000966  ECD1  F02F         	call	_lcdInst
 13792                           
 13793                           ;Test.c: 247: printf("TST: DC MOTORS");
 13794  00096A  0EF2               	movlw	low STR_91
 13795  00096C  0100               	movlb	0	; () banked
 13796  00096E  6F8E               	movwf	printf@f& (0+255),b
 13797  000970  0EFE               	movlw	high STR_91
 13798  000972  0100               	movlb	0	; () banked
 13799  000974  6F8F               	movwf	(printf@f+1)& (0+255),b
 13800  000976  EC67  F00E         	call	_printf	;wreg free
 13801                           
 13802                           ;Test.c: 248: lcdInst(0b11000000);;
 13803  00097A  0EC0               	movlw	192
 13804  00097C  ECD1  F02F         	call	_lcdInst
 13805                           
 13806                           ;Test.c: 249: printf("PIN RA5 HIGH.");
 13807  000980  0E10               	movlw	low STR_92
 13808  000982  0100               	movlb	0	; () banked
 13809  000984  6F8E               	movwf	printf@f& (0+255),b
 13810  000986  0EFF               	movlw	high STR_92
 13811  000988  0100               	movlb	0	; () banked
 13812  00098A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13813  00098C  EC67  F00E         	call	_printf	;wreg free
 13814                           
 13815                           ;Test.c: 250: LATBbits.LATB2 = 1;
 13816  000990  848A               	bsf	3978,2,c	;volatile
 13817                           
 13818                           ;Test.c: 251: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 13819  000992  0E00               	movlw	0
 13820  000994  0100               	movlb	0	; () banked
 13821  000996  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13822  000998  0E00               	movlw	0
 13823  00099A  6FC4               	movwf	actuatorTest@i& (0+255),b
 13824                           
 13825                           ; BSR set to: 0
 13826  00099C  0100               	movlb	0	; () banked
 13827  00099E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13828  0009A0  D008               	goto	l8631
 13829  0009A2  0100               	movlb	0	; () banked
 13830  0009A4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13831  0009A6  E123               	bnz	l1351
 13832  0009A8  0E05               	movlw	5
 13833  0009AA  0100               	movlb	0	; () banked
 13834  0009AC  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13835  0009AE  B0D8               	btfsc	status,0,c
 13836  0009B0  D01E               	goto	l1351
 13837  0009B2                     l8631:
 13838                           
 13839                           ; BSR set to: 0
 13840  0009B2  0E00               	movlw	0
 13841  0009B4  0100               	movlb	0	; () banked
 13842  0009B6  6FAD               	movwf	actuatorTest@i_1747& (0+255),b
 13843  0009B8                     l8633:
 13844                           
 13845                           ; BSR set to: 0
 13846  0009B8  0E63               	movlw	99
 13847  0009BA  0100               	movlb	0	; () banked
 13848  0009BC  65AD               	cpfsgt	actuatorTest@i_1747& (0+255),b
 13849  0009BE  D001               	goto	l8637
 13850  0009C0  D00C               	goto	l8641
 13851  0009C2                     l8637:
 13852                           
 13853                           ; BSR set to: 0
 13854  0009C2  0E68               	movlw	104
 13855  0009C4  0100               	movlb	0	; () banked
 13856  0009C6  6FAB               	movwf	??_actuatorTest& (0+255),b
 13857  0009C8  0EE4               	movlw	228
 13858  0009CA                     u11517:
 13859  0009CA  2EE8               	decfsz	wreg,f,c
 13860  0009CC  D7FE               	bra	u11517
 13861  0009CE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13862  0009D0  D7FC               	bra	u11517
 13863  0009D2  F000               	nop	
 13864  0009D4  0100               	movlb	0	; () banked
 13865  0009D6  2BAD               	incf	actuatorTest@i_1747& (0+255),f,b
 13866  0009D8  D7EF               	goto	l8633
 13867  0009DA                     l8641:
 13868                           
 13869                           ; BSR set to: 0
 13870  0009DA  0100               	movlb	0	; () banked
 13871  0009DC  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13872  0009DE  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13873                           
 13874                           ; BSR set to: 0
 13875  0009E0  0100               	movlb	0	; () banked
 13876  0009E2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13877  0009E4  D7E6               	goto	l8631
 13878  0009E6  0100               	movlb	0	; () banked
 13879  0009E8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13880  0009EA  E101               	bnz	u7920
 13881  0009EC  D7DD               	goto	L11
 13882  0009EE                     u7920:
 13883  0009EE                     l1351:
 13884                           
 13885                           ; BSR set to: 0
 13886                           ;Test.c: 252: LATBbits.LATB2 = 0;
 13887  0009EE  948A               	bcf	3978,2,c	;volatile
 13888                           
 13889                           ; BSR set to: 0
 13890                           ;Test.c: 253: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13891  0009F0  0E01               	movlw	1
 13892  0009F2  ECD1  F02F         	call	_lcdInst
 13893  0009F6  0E68               	movlw	104
 13894  0009F8  0100               	movlb	0	; () banked
 13895  0009FA  6FAB               	movwf	??_actuatorTest& (0+255),b
 13896  0009FC  0EE4               	movlw	228
 13897  0009FE                     u11527:
 13898  0009FE  2EE8               	decfsz	wreg,f,c
 13899  000A00  D7FE               	bra	u11527
 13900  000A02  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13901  000A04  D7FC               	bra	u11527
 13902  000A06  F000               	nop	
 13903  000A08  0E80               	movlw	128
 13904  000A0A  ECD1  F02F         	call	_lcdInst
 13905                           
 13906                           ;Test.c: 259: printf("TST: COND SOLN'D");
 13907  000A0E  0E6E               	movlw	low STR_93
 13908  000A10  0100               	movlb	0	; () banked
 13909  000A12  6F8E               	movwf	printf@f& (0+255),b
 13910  000A14  0EFC               	movlw	high STR_93
 13911  000A16  0100               	movlb	0	; () banked
 13912  000A18  6F8F               	movwf	(printf@f+1)& (0+255),b
 13913  000A1A  EC67  F00E         	call	_printf	;wreg free
 13914                           
 13915                           ;Test.c: 260: lcdInst(0b11000000);;
 13916  000A1E  0EC0               	movlw	192
 13917  000A20  ECD1  F02F         	call	_lcdInst
 13918                           
 13919                           ;Test.c: 261: printf("PIN RA3...");
 13920  000A24  0E70               	movlw	low STR_94
 13921  000A26  0100               	movlb	0	; () banked
 13922  000A28  6F8E               	movwf	printf@f& (0+255),b
 13923  000A2A  0EFF               	movlw	high STR_94
 13924  000A2C  0100               	movlb	0	; () banked
 13925  000A2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13926  000A30  EC67  F00E         	call	_printf	;wreg free
 13927                           
 13928                           ;Test.c: 262: for(i=0;i<5;i++){
 13929  000A34  0E00               	movlw	0
 13930  000A36  0100               	movlb	0	; () banked
 13931  000A38  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13932  000A3A  0E00               	movlw	0
 13933  000A3C  6FC4               	movwf	actuatorTest@i& (0+255),b
 13934                           
 13935                           ; BSR set to: 0
 13936  000A3E  0100               	movlb	0	; () banked
 13937  000A40  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13938  000A42  D008               	goto	l1354
 13939  000A44  0100               	movlb	0	; () banked
 13940  000A46  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13941  000A48  E12C               	bnz	l1355
 13942  000A4A  0E05               	movlw	5
 13943  000A4C  0100               	movlb	0	; () banked
 13944  000A4E  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13945  000A50  B0D8               	btfsc	status,0,c
 13946  000A52  D027               	goto	l1355
 13947  000A54                     l1354:
 13948                           
 13949                           ; BSR set to: 0
 13950                           ;Test.c: 263: LATCbits.LATC7 = 1;
 13951  000A54  8E8B               	bsf	3979,7,c	;volatile
 13952                           
 13953                           ; BSR set to: 0
 13954                           ;Test.c: 264: _delay((unsigned long)((300)*(32000000/4000.0)));
 13955  000A56  0E0D               	movlw	13
 13956  000A58  0100               	movlb	0	; () banked
 13957  000A5A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13958  000A5C  0E2D               	movlw	45
 13959  000A5E  0100               	movlb	0	; () banked
 13960  000A60  6FAB               	movwf	??_actuatorTest& (0+255),b
 13961  000A62  0ED7               	movlw	215
 13962  000A64                     u11537:
 13963  000A64  2EE8               	decfsz	wreg,f,c
 13964  000A66  D7FE               	bra	u11537
 13965  000A68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13966  000A6A  D7FC               	bra	u11537
 13967  000A6C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13968  000A6E  D7FA               	bra	u11537
 13969  000A70  D000               	nop2	
 13970                           
 13971                           ;Test.c: 265: LATCbits.LATC7 = !1;
 13972  000A72  9E8B               	bcf	3979,7,c	;volatile
 13973                           
 13974                           ;Test.c: 266: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13975  000A74  0E1D               	movlw	29
 13976  000A76  0100               	movlb	0	; () banked
 13977  000A78  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13978  000A7A  0E69               	movlw	105
 13979  000A7C  0100               	movlb	0	; () banked
 13980  000A7E  6FAB               	movwf	??_actuatorTest& (0+255),b
 13981  000A80  0EA5               	movlw	165
 13982  000A82                     u11547:
 13983  000A82  2EE8               	decfsz	wreg,f,c
 13984  000A84  D7FE               	bra	u11547
 13985  000A86  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13986  000A88  D7FC               	bra	u11547
 13987  000A8A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13988  000A8C  D7FA               	bra	u11547
 13989  000A8E  0100               	movlb	0	; () banked
 13990  000A90  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13991  000A92  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13992  000A94  0100               	movlb	0	; () banked
 13993  000A96  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13994  000A98  D7DD               	goto	l1354
 13995  000A9A  0100               	movlb	0	; () banked
 13996  000A9C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13997  000A9E  E101               	bnz	u7940
 13998  000AA0  D7D4               	goto	L12
 13999  000AA2                     u7940:
 14000  000AA2                     l1355:
 14001                           
 14002                           ; BSR set to: 0
 14003                           ;Test.c: 267: }
 14004                           ;Test.c: 268: LATCbits.LATC7 = !1;
 14005  000AA2  9E8B               	bcf	3979,7,c	;volatile
 14006                           
 14007                           ; BSR set to: 0
 14008                           ;Test.c: 269: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14009  000AA4  0E01               	movlw	1
 14010  000AA6  ECD1  F02F         	call	_lcdInst
 14011  000AAA  0E68               	movlw	104
 14012  000AAC  0100               	movlb	0	; () banked
 14013  000AAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 14014  000AB0  0EE4               	movlw	228
 14015  000AB2                     u11557:
 14016  000AB2  2EE8               	decfsz	wreg,f,c
 14017  000AB4  D7FE               	bra	u11557
 14018  000AB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14019  000AB8  D7FC               	bra	u11557
 14020  000ABA  F000               	nop	
 14021  000ABC  0E80               	movlw	128
 14022  000ABE  ECD1  F02F         	call	_lcdInst
 14023                           
 14024                           ;Test.c: 275: printf("TST: PUSH SOLN'D");
 14025  000AC2  0E7F               	movlw	low STR_95
 14026  000AC4  0100               	movlb	0	; () banked
 14027  000AC6  6F8E               	movwf	printf@f& (0+255),b
 14028  000AC8  0EFC               	movlw	high STR_95
 14029  000ACA  0100               	movlb	0	; () banked
 14030  000ACC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14031  000ACE  EC67  F00E         	call	_printf	;wreg free
 14032                           
 14033                           ;Test.c: 276: lcdInst(0b11000000);;
 14034  000AD2  0EC0               	movlw	192
 14035  000AD4  ECD1  F02F         	call	_lcdInst
 14036                           
 14037                           ;Test.c: 277: printf("PIN RA4...");
 14038  000AD8  0E7B               	movlw	low STR_96
 14039  000ADA  0100               	movlb	0	; () banked
 14040  000ADC  6F8E               	movwf	printf@f& (0+255),b
 14041  000ADE  0EFF               	movlw	high STR_96
 14042  000AE0  0100               	movlb	0	; () banked
 14043  000AE2  6F8F               	movwf	(printf@f+1)& (0+255),b
 14044  000AE4  EC67  F00E         	call	_printf	;wreg free
 14045                           
 14046                           ;Test.c: 278: for(i=0;i<5;i++){
 14047  000AE8  0E00               	movlw	0
 14048  000AEA  0100               	movlb	0	; () banked
 14049  000AEC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14050  000AEE  0E00               	movlw	0
 14051  000AF0  6FC4               	movwf	actuatorTest@i& (0+255),b
 14052                           
 14053                           ; BSR set to: 0
 14054  000AF2  0100               	movlb	0	; () banked
 14055  000AF4  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14056  000AF6  D008               	goto	l1356
 14057  000AF8  0100               	movlb	0	; () banked
 14058  000AFA  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14059  000AFC  E12C               	bnz	l1357
 14060  000AFE  0E05               	movlw	5
 14061  000B00  0100               	movlb	0	; () banked
 14062  000B02  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14063  000B04  B0D8               	btfsc	status,0,c
 14064  000B06  D027               	goto	l1357
 14065  000B08                     l1356:
 14066                           
 14067                           ; BSR set to: 0
 14068                           ;Test.c: 279: LATAbits.LATA4 = 1;
 14069  000B08  8889               	bsf	3977,4,c	;volatile
 14070                           
 14071                           ; BSR set to: 0
 14072                           ;Test.c: 280: _delay((unsigned long)((300)*(32000000/4000.0)));
 14073  000B0A  0E0D               	movlw	13
 14074  000B0C  0100               	movlb	0	; () banked
 14075  000B0E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 14076  000B10  0E2D               	movlw	45
 14077  000B12  0100               	movlb	0	; () banked
 14078  000B14  6FAB               	movwf	??_actuatorTest& (0+255),b
 14079  000B16  0ED7               	movlw	215
 14080  000B18                     u11567:
 14081  000B18  2EE8               	decfsz	wreg,f,c
 14082  000B1A  D7FE               	bra	u11567
 14083  000B1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14084  000B1E  D7FC               	bra	u11567
 14085  000B20  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 14086  000B22  D7FA               	bra	u11567
 14087  000B24  D000               	nop2	
 14088                           
 14089                           ;Test.c: 281: LATAbits.LATA4 = !1;
 14090  000B26  9889               	bcf	3977,4,c	;volatile
 14091                           
 14092                           ;Test.c: 282: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 14093  000B28  0E1D               	movlw	29
 14094  000B2A  0100               	movlb	0	; () banked
 14095  000B2C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 14096  000B2E  0E69               	movlw	105
 14097  000B30  0100               	movlb	0	; () banked
 14098  000B32  6FAB               	movwf	??_actuatorTest& (0+255),b
 14099  000B34  0EA5               	movlw	165
 14100  000B36                     u11577:
 14101  000B36  2EE8               	decfsz	wreg,f,c
 14102  000B38  D7FE               	bra	u11577
 14103  000B3A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14104  000B3C  D7FC               	bra	u11577
 14105  000B3E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 14106  000B40  D7FA               	bra	u11577
 14107  000B42  0100               	movlb	0	; () banked
 14108  000B44  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14109  000B46  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14110  000B48  0100               	movlb	0	; () banked
 14111  000B4A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14112  000B4C  D7DD               	goto	l1356
 14113  000B4E  0100               	movlb	0	; () banked
 14114  000B50  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14115  000B52  E101               	bnz	u7960
 14116  000B54  D7D4               	goto	L13
 14117  000B56                     u7960:
 14118  000B56                     l1357:
 14119                           
 14120                           ; BSR set to: 0
 14121                           ;Test.c: 283: }
 14122                           ;Test.c: 284: LATAbits.LATA4 = !1;
 14123  000B56  9889               	bcf	3977,4,c	;volatile
 14124                           
 14125                           ; BSR set to: 0
 14126                           ;Test.c: 285: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14127  000B58  0E01               	movlw	1
 14128  000B5A  ECD1  F02F         	call	_lcdInst
 14129  000B5E  0E68               	movlw	104
 14130  000B60  0100               	movlb	0	; () banked
 14131  000B62  6FAB               	movwf	??_actuatorTest& (0+255),b
 14132  000B64  0EE4               	movlw	228
 14133  000B66                     u11587:
 14134  000B66  2EE8               	decfsz	wreg,f,c
 14135  000B68  D7FE               	bra	u11587
 14136  000B6A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14137  000B6C  D7FC               	bra	u11587
 14138  000B6E  F000               	nop	
 14139  000B70  0E80               	movlw	128
 14140  000B72  ECD1  F02F         	call	_lcdInst
 14141                           
 14142                           ;Test.c: 288: machine_state = Sorting_state;
 14143  000B76  0E01               	movlw	1
 14144  000B78  0100               	movlb	0	; () banked
 14145  000B7A  6FFC               	movwf	_machine_state& (0+255),b
 14146                           
 14147                           ; BSR set to: 0
 14148                           ;Test.c: 289: was_low_1 = 0;
 14149  000B7C  0E00               	movlw	0
 14150  000B7E  6E78               	movwf	_was_low_1+1,c	;volatile
 14151  000B80  0E00               	movlw	0
 14152  000B82  6E77               	movwf	_was_low_1,c	;volatile
 14153                           
 14154                           ; BSR set to: 0
 14155                           ;Test.c: 290: was_low_1 = 0;
 14156  000B84  0E00               	movlw	0
 14157  000B86  6E78               	movwf	_was_low_1+1,c	;volatile
 14158  000B88  0E00               	movlw	0
 14159  000B8A  6E77               	movwf	_was_low_1,c	;volatile
 14160                           
 14161                           ; BSR set to: 0
 14162                           ;Test.c: 297: printf("TST: PAN SERVO");
 14163  000B8C  0ED4               	movlw	low STR_97
 14164  000B8E  0100               	movlb	0	; () banked
 14165  000B90  6F8E               	movwf	printf@f& (0+255),b
 14166  000B92  0EFE               	movlw	high STR_97
 14167  000B94  0100               	movlb	0	; () banked
 14168  000B96  6F8F               	movwf	(printf@f+1)& (0+255),b
 14169  000B98  EC67  F00E         	call	_printf	;wreg free
 14170                           
 14171                           ;Test.c: 298: lcdInst(0b11000000);;
 14172  000B9C  0EC0               	movlw	192
 14173  000B9E  ECD1  F02F         	call	_lcdInst
 14174                           
 14175                           ;Test.c: 299: printf("MIDDLE -- 2s    ");
 14176  000BA2  0EE6               	movlw	low STR_98
 14177  000BA4  0100               	movlb	0	; () banked
 14178  000BA6  6F8E               	movwf	printf@f& (0+255),b
 14179  000BA8  0EFB               	movlw	high STR_98
 14180  000BAA  0100               	movlb	0	; () banked
 14181  000BAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14182  000BAE  EC67  F00E         	call	_printf	;wreg free
 14183                           
 14184                           ;Test.c: 300: updateServoPosition(1200, 1);
 14185  000BB2  0E04               	movlw	4
 14186  000BB4  0100               	movlb	0	; () banked
 14187  000BB6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14188  000BB8  0EB0               	movlw	176
 14189  000BBA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14190  000BBC  0E00               	movlw	0
 14191  000BBE  0100               	movlb	0	; () banked
 14192  000BC0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14193  000BC2  0E01               	movlw	1
 14194  000BC4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14195  000BC6  EC49  F029         	call	_updateServoPosition	;wreg free
 14196                           
 14197                           ;Test.c: 301: TMR1ON = 1;
 14198  000BCA  80CD               	bsf	4045,0,c	;volatile
 14199                           
 14200                           ;Test.c: 302: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14201  000BCC  0E00               	movlw	0
 14202  000BCE  0100               	movlb	0	; () banked
 14203  000BD0  6FAE               	movwf	actuatorTest@i_1754& (0+255),b
 14204  000BD2                     l8717:
 14205                           
 14206                           ; BSR set to: 0
 14207  000BD2  0E63               	movlw	99
 14208  000BD4  0100               	movlb	0	; () banked
 14209  000BD6  65AE               	cpfsgt	actuatorTest@i_1754& (0+255),b
 14210  000BD8  D001               	goto	l8721
 14211  000BDA  D00C               	goto	l8725
 14212  000BDC                     l8721:
 14213                           
 14214                           ; BSR set to: 0
 14215  000BDC  0E68               	movlw	104
 14216  000BDE  0100               	movlb	0	; () banked
 14217  000BE0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14218  000BE2  0EE4               	movlw	228
 14219  000BE4                     u11597:
 14220  000BE4  2EE8               	decfsz	wreg,f,c
 14221  000BE6  D7FE               	bra	u11597
 14222  000BE8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14223  000BEA  D7FC               	bra	u11597
 14224  000BEC  F000               	nop	
 14225  000BEE  0100               	movlb	0	; () banked
 14226  000BF0  2BAE               	incf	actuatorTest@i_1754& (0+255),f,b
 14227  000BF2  D7EF               	goto	l8717
 14228  000BF4                     l8725:
 14229                           
 14230                           ; BSR set to: 0
 14231  000BF4  0E00               	movlw	0
 14232  000BF6  0100               	movlb	0	; () banked
 14233  000BF8  6FAF               	movwf	actuatorTest@i_1755& (0+255),b
 14234  000BFA                     l8727:
 14235                           
 14236                           ; BSR set to: 0
 14237  000BFA  0E63               	movlw	99
 14238  000BFC  0100               	movlb	0	; () banked
 14239  000BFE  65AF               	cpfsgt	actuatorTest@i_1755& (0+255),b
 14240  000C00  D001               	goto	l8731
 14241  000C02  D00C               	goto	l8735
 14242  000C04                     l8731:
 14243                           
 14244                           ; BSR set to: 0
 14245  000C04  0E68               	movlw	104
 14246  000C06  0100               	movlb	0	; () banked
 14247  000C08  6FAB               	movwf	??_actuatorTest& (0+255),b
 14248  000C0A  0EE4               	movlw	228
 14249  000C0C                     u11607:
 14250  000C0C  2EE8               	decfsz	wreg,f,c
 14251  000C0E  D7FE               	bra	u11607
 14252  000C10  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14253  000C12  D7FC               	bra	u11607
 14254  000C14  F000               	nop	
 14255  000C16  0100               	movlb	0	; () banked
 14256  000C18  2BAF               	incf	actuatorTest@i_1755& (0+255),f,b
 14257  000C1A  D7EF               	goto	l8727
 14258  000C1C                     l8735:
 14259                           
 14260                           ; BSR set to: 0
 14261                           ;Test.c: 304: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14262  000C1C  0E80               	movlw	128
 14263  000C1E  ECD1  F02F         	call	_lcdInst
 14264  000C22  0EC0               	movlw	192
 14265  000C24  ECD1  F02F         	call	_lcdInst
 14266                           
 14267                           ;Test.c: 305: printf("RIGHT -- 2s     ");
 14268  000C28  0ED5               	movlw	low STR_99
 14269  000C2A  0100               	movlb	0	; () banked
 14270  000C2C  6F8E               	movwf	printf@f& (0+255),b
 14271  000C2E  0EFB               	movlw	high STR_99
 14272  000C30  0100               	movlb	0	; () banked
 14273  000C32  6F8F               	movwf	(printf@f+1)& (0+255),b
 14274  000C34  EC67  F00E         	call	_printf	;wreg free
 14275                           
 14276                           ;Test.c: 306: updateServoPosition(500, 1);
 14277  000C38  0E01               	movlw	1
 14278  000C3A  0100               	movlb	0	; () banked
 14279  000C3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14280  000C3E  0EF4               	movlw	244
 14281  000C40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14282  000C42  0E00               	movlw	0
 14283  000C44  0100               	movlb	0	; () banked
 14284  000C46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14285  000C48  0E01               	movlw	1
 14286  000C4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14287  000C4C  EC49  F029         	call	_updateServoPosition	;wreg free
 14288                           
 14289                           ;Test.c: 307: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14290  000C50  0E00               	movlw	0
 14291  000C52  0100               	movlb	0	; () banked
 14292  000C54  6FB0               	movwf	actuatorTest@i_1757& (0+255),b
 14293  000C56                     l8743:
 14294                           
 14295                           ; BSR set to: 0
 14296  000C56  0E63               	movlw	99
 14297  000C58  0100               	movlb	0	; () banked
 14298  000C5A  65B0               	cpfsgt	actuatorTest@i_1757& (0+255),b
 14299  000C5C  D001               	goto	l8747
 14300  000C5E  D00C               	goto	l8751
 14301  000C60                     l8747:
 14302                           
 14303                           ; BSR set to: 0
 14304  000C60  0E68               	movlw	104
 14305  000C62  0100               	movlb	0	; () banked
 14306  000C64  6FAB               	movwf	??_actuatorTest& (0+255),b
 14307  000C66  0EE4               	movlw	228
 14308  000C68                     u11617:
 14309  000C68  2EE8               	decfsz	wreg,f,c
 14310  000C6A  D7FE               	bra	u11617
 14311  000C6C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14312  000C6E  D7FC               	bra	u11617
 14313  000C70  F000               	nop	
 14314  000C72  0100               	movlb	0	; () banked
 14315  000C74  2BB0               	incf	actuatorTest@i_1757& (0+255),f,b
 14316  000C76  D7EF               	goto	l8743
 14317  000C78                     l8751:
 14318                           
 14319                           ; BSR set to: 0
 14320  000C78  0E00               	movlw	0
 14321  000C7A  0100               	movlb	0	; () banked
 14322  000C7C  6FB1               	movwf	actuatorTest@i_1758& (0+255),b
 14323  000C7E                     l8753:
 14324                           
 14325                           ; BSR set to: 0
 14326  000C7E  0E63               	movlw	99
 14327  000C80  0100               	movlb	0	; () banked
 14328  000C82  65B1               	cpfsgt	actuatorTest@i_1758& (0+255),b
 14329  000C84  D001               	goto	l8757
 14330  000C86  D00C               	goto	l8761
 14331  000C88                     l8757:
 14332                           
 14333                           ; BSR set to: 0
 14334  000C88  0E68               	movlw	104
 14335  000C8A  0100               	movlb	0	; () banked
 14336  000C8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14337  000C8E  0EE4               	movlw	228
 14338  000C90                     u11627:
 14339  000C90  2EE8               	decfsz	wreg,f,c
 14340  000C92  D7FE               	bra	u11627
 14341  000C94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14342  000C96  D7FC               	bra	u11627
 14343  000C98  F000               	nop	
 14344  000C9A  0100               	movlb	0	; () banked
 14345  000C9C  2BB1               	incf	actuatorTest@i_1758& (0+255),f,b
 14346  000C9E  D7EF               	goto	l8753
 14347  000CA0                     l8761:
 14348                           
 14349                           ; BSR set to: 0
 14350                           ;Test.c: 309: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14351  000CA0  0E80               	movlw	128
 14352  000CA2  ECD1  F02F         	call	_lcdInst
 14353  000CA6  0EC0               	movlw	192
 14354  000CA8  ECD1  F02F         	call	_lcdInst
 14355                           
 14356                           ;Test.c: 310: printf("LEFT -- 2s      ");
 14357  000CAC  0EB3               	movlw	low STR_100
 14358  000CAE  0100               	movlb	0	; () banked
 14359  000CB0  6F8E               	movwf	printf@f& (0+255),b
 14360  000CB2  0EFB               	movlw	high STR_100
 14361  000CB4  0100               	movlb	0	; () banked
 14362  000CB6  6F8F               	movwf	(printf@f+1)& (0+255),b
 14363  000CB8  EC67  F00E         	call	_printf	;wreg free
 14364                           
 14365                           ;Test.c: 311: updateServoPosition(2400, 1);
 14366  000CBC  0E09               	movlw	9
 14367  000CBE  0100               	movlb	0	; () banked
 14368  000CC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14369  000CC2  0E60               	movlw	96
 14370  000CC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14371  000CC6  0E00               	movlw	0
 14372  000CC8  0100               	movlb	0	; () banked
 14373  000CCA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14374  000CCC  0E01               	movlw	1
 14375  000CCE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14376  000CD0  EC49  F029         	call	_updateServoPosition	;wreg free
 14377                           
 14378                           ;Test.c: 312: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14379  000CD4  0E00               	movlw	0
 14380  000CD6  0100               	movlb	0	; () banked
 14381  000CD8  6FB2               	movwf	actuatorTest@i_1760& (0+255),b
 14382  000CDA                     l8769:
 14383                           
 14384                           ; BSR set to: 0
 14385  000CDA  0E63               	movlw	99
 14386  000CDC  0100               	movlb	0	; () banked
 14387  000CDE  65B2               	cpfsgt	actuatorTest@i_1760& (0+255),b
 14388  000CE0  D001               	goto	l8773
 14389  000CE2  D00C               	goto	l8777
 14390  000CE4                     l8773:
 14391                           
 14392                           ; BSR set to: 0
 14393  000CE4  0E68               	movlw	104
 14394  000CE6  0100               	movlb	0	; () banked
 14395  000CE8  6FAB               	movwf	??_actuatorTest& (0+255),b
 14396  000CEA  0EE4               	movlw	228
 14397  000CEC                     u11637:
 14398  000CEC  2EE8               	decfsz	wreg,f,c
 14399  000CEE  D7FE               	bra	u11637
 14400  000CF0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14401  000CF2  D7FC               	bra	u11637
 14402  000CF4  F000               	nop	
 14403  000CF6  0100               	movlb	0	; () banked
 14404  000CF8  2BB2               	incf	actuatorTest@i_1760& (0+255),f,b
 14405  000CFA  D7EF               	goto	l8769
 14406  000CFC                     l8777:
 14407                           
 14408                           ; BSR set to: 0
 14409  000CFC  0E00               	movlw	0
 14410  000CFE  0100               	movlb	0	; () banked
 14411  000D00  6FB3               	movwf	actuatorTest@i_1761& (0+255),b
 14412  000D02                     l8779:
 14413                           
 14414                           ; BSR set to: 0
 14415  000D02  0E63               	movlw	99
 14416  000D04  0100               	movlb	0	; () banked
 14417  000D06  65B3               	cpfsgt	actuatorTest@i_1761& (0+255),b
 14418  000D08  D001               	goto	l8783
 14419  000D0A  D00C               	goto	l8787
 14420  000D0C                     l8783:
 14421                           
 14422                           ; BSR set to: 0
 14423  000D0C  0E68               	movlw	104
 14424  000D0E  0100               	movlb	0	; () banked
 14425  000D10  6FAB               	movwf	??_actuatorTest& (0+255),b
 14426  000D12  0EE4               	movlw	228
 14427  000D14                     u11647:
 14428  000D14  2EE8               	decfsz	wreg,f,c
 14429  000D16  D7FE               	bra	u11647
 14430  000D18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14431  000D1A  D7FC               	bra	u11647
 14432  000D1C  F000               	nop	
 14433  000D1E  0100               	movlb	0	; () banked
 14434  000D20  2BB3               	incf	actuatorTest@i_1761& (0+255),f,b
 14435  000D22  D7EF               	goto	l8779
 14436  000D24                     l8787:
 14437                           
 14438                           ; BSR set to: 0
 14439                           ;Test.c: 314: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14440  000D24  0E80               	movlw	128
 14441  000D26  ECD1  F02F         	call	_lcdInst
 14442  000D2A  0EC0               	movlw	192
 14443  000D2C  ECD1  F02F         	call	_lcdInst
 14444                           
 14445                           ;Test.c: 315: printf("MID-LEFT -- 2s  ");
 14446  000D30  0E3B               	movlw	low STR_101
 14447  000D32  0100               	movlb	0	; () banked
 14448  000D34  6F8E               	movwf	printf@f& (0+255),b
 14449  000D36  0EFC               	movlw	high STR_101
 14450  000D38  0100               	movlb	0	; () banked
 14451  000D3A  6F8F               	movwf	(printf@f+1)& (0+255),b
 14452  000D3C  EC67  F00E         	call	_printf	;wreg free
 14453                           
 14454                           ;Test.c: 316: updateServoPosition(1670, 1);
 14455  000D40  0E06               	movlw	6
 14456  000D42  0100               	movlb	0	; () banked
 14457  000D44  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14458  000D46  0E86               	movlw	134
 14459  000D48  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14460  000D4A  0E00               	movlw	0
 14461  000D4C  0100               	movlb	0	; () banked
 14462  000D4E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14463  000D50  0E01               	movlw	1
 14464  000D52  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14465  000D54  EC49  F029         	call	_updateServoPosition	;wreg free
 14466                           
 14467                           ;Test.c: 317: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14468  000D58  0E00               	movlw	0
 14469  000D5A  0100               	movlb	0	; () banked
 14470  000D5C  6FB4               	movwf	actuatorTest@i_1763& (0+255),b
 14471  000D5E                     l8795:
 14472                           
 14473                           ; BSR set to: 0
 14474  000D5E  0E63               	movlw	99
 14475  000D60  0100               	movlb	0	; () banked
 14476  000D62  65B4               	cpfsgt	actuatorTest@i_1763& (0+255),b
 14477  000D64  D001               	goto	l8799
 14478  000D66  D00C               	goto	l8803
 14479  000D68                     l8799:
 14480                           
 14481                           ; BSR set to: 0
 14482  000D68  0E68               	movlw	104
 14483  000D6A  0100               	movlb	0	; () banked
 14484  000D6C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14485  000D6E  0EE4               	movlw	228
 14486  000D70                     u11657:
 14487  000D70  2EE8               	decfsz	wreg,f,c
 14488  000D72  D7FE               	bra	u11657
 14489  000D74  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14490  000D76  D7FC               	bra	u11657
 14491  000D78  F000               	nop	
 14492  000D7A  0100               	movlb	0	; () banked
 14493  000D7C  2BB4               	incf	actuatorTest@i_1763& (0+255),f,b
 14494  000D7E  D7EF               	goto	l8795
 14495  000D80                     l8803:
 14496                           
 14497                           ; BSR set to: 0
 14498  000D80  0E00               	movlw	0
 14499  000D82  0100               	movlb	0	; () banked
 14500  000D84  6FB5               	movwf	actuatorTest@i_1764& (0+255),b
 14501  000D86                     l8805:
 14502                           
 14503                           ; BSR set to: 0
 14504  000D86  0E63               	movlw	99
 14505  000D88  0100               	movlb	0	; () banked
 14506  000D8A  65B5               	cpfsgt	actuatorTest@i_1764& (0+255),b
 14507  000D8C  D001               	goto	l8809
 14508  000D8E  D00C               	goto	l8813
 14509  000D90                     l8809:
 14510                           
 14511                           ; BSR set to: 0
 14512  000D90  0E68               	movlw	104
 14513  000D92  0100               	movlb	0	; () banked
 14514  000D94  6FAB               	movwf	??_actuatorTest& (0+255),b
 14515  000D96  0EE4               	movlw	228
 14516  000D98                     u11667:
 14517  000D98  2EE8               	decfsz	wreg,f,c
 14518  000D9A  D7FE               	bra	u11667
 14519  000D9C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14520  000D9E  D7FC               	bra	u11667
 14521  000DA0  F000               	nop	
 14522  000DA2  0100               	movlb	0	; () banked
 14523  000DA4  2BB5               	incf	actuatorTest@i_1764& (0+255),f,b
 14524  000DA6  D7EF               	goto	l8805
 14525  000DA8                     l8813:
 14526                           
 14527                           ; BSR set to: 0
 14528                           ;Test.c: 319: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14529  000DA8  0E80               	movlw	128
 14530  000DAA  ECD1  F02F         	call	_lcdInst
 14531  000DAE  0EC0               	movlw	192
 14532  000DB0  ECD1  F02F         	call	_lcdInst
 14533                           
 14534                           ;Test.c: 320: printf("MID-RIGHT -- 2s ");
 14535  000DB4  0E4C               	movlw	low STR_102
 14536  000DB6  0100               	movlb	0	; () banked
 14537  000DB8  6F8E               	movwf	printf@f& (0+255),b
 14538  000DBA  0EFC               	movlw	high STR_102
 14539  000DBC  0100               	movlb	0	; () banked
 14540  000DBE  6F8F               	movwf	(printf@f+1)& (0+255),b
 14541  000DC0  EC67  F00E         	call	_printf	;wreg free
 14542                           
 14543                           ;Test.c: 321: updateServoPosition(850, 1);
 14544  000DC4  0E03               	movlw	3
 14545  000DC6  0100               	movlb	0	; () banked
 14546  000DC8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14547  000DCA  0E52               	movlw	82
 14548  000DCC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14549  000DCE  0E00               	movlw	0
 14550  000DD0  0100               	movlb	0	; () banked
 14551  000DD2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14552  000DD4  0E01               	movlw	1
 14553  000DD6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14554  000DD8  EC49  F029         	call	_updateServoPosition	;wreg free
 14555                           
 14556                           ;Test.c: 322: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14557  000DDC  0E00               	movlw	0
 14558  000DDE  0100               	movlb	0	; () banked
 14559  000DE0  6FB6               	movwf	actuatorTest@i_1766& (0+255),b
 14560  000DE2                     l8821:
 14561                           
 14562                           ; BSR set to: 0
 14563  000DE2  0E63               	movlw	99
 14564  000DE4  0100               	movlb	0	; () banked
 14565  000DE6  65B6               	cpfsgt	actuatorTest@i_1766& (0+255),b
 14566  000DE8  D001               	goto	l8825
 14567  000DEA  D00C               	goto	l8829
 14568  000DEC                     l8825:
 14569                           
 14570                           ; BSR set to: 0
 14571  000DEC  0E68               	movlw	104
 14572  000DEE  0100               	movlb	0	; () banked
 14573  000DF0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14574  000DF2  0EE4               	movlw	228
 14575  000DF4                     u11677:
 14576  000DF4  2EE8               	decfsz	wreg,f,c
 14577  000DF6  D7FE               	bra	u11677
 14578  000DF8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14579  000DFA  D7FC               	bra	u11677
 14580  000DFC  F000               	nop	
 14581  000DFE  0100               	movlb	0	; () banked
 14582  000E00  2BB6               	incf	actuatorTest@i_1766& (0+255),f,b
 14583  000E02  D7EF               	goto	l8821
 14584  000E04                     l8829:
 14585                           
 14586                           ; BSR set to: 0
 14587  000E04  0E00               	movlw	0
 14588  000E06  0100               	movlb	0	; () banked
 14589  000E08  6FB7               	movwf	actuatorTest@i_1767& (0+255),b
 14590  000E0A                     l8831:
 14591                           
 14592                           ; BSR set to: 0
 14593  000E0A  0E63               	movlw	99
 14594  000E0C  0100               	movlb	0	; () banked
 14595  000E0E  65B7               	cpfsgt	actuatorTest@i_1767& (0+255),b
 14596  000E10  D001               	goto	l8835
 14597  000E12  D00C               	goto	l8839
 14598  000E14                     l8835:
 14599                           
 14600                           ; BSR set to: 0
 14601  000E14  0E68               	movlw	104
 14602  000E16  0100               	movlb	0	; () banked
 14603  000E18  6FAB               	movwf	??_actuatorTest& (0+255),b
 14604  000E1A  0EE4               	movlw	228
 14605  000E1C                     u11687:
 14606  000E1C  2EE8               	decfsz	wreg,f,c
 14607  000E1E  D7FE               	bra	u11687
 14608  000E20  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14609  000E22  D7FC               	bra	u11687
 14610  000E24  F000               	nop	
 14611  000E26  0100               	movlb	0	; () banked
 14612  000E28  2BB7               	incf	actuatorTest@i_1767& (0+255),f,b
 14613  000E2A  D7EF               	goto	l8831
 14614  000E2C                     l8839:
 14615                           
 14616                           ; BSR set to: 0
 14617                           ;Test.c: 324: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14618  000E2C  0E80               	movlw	128
 14619  000E2E  ECD1  F02F         	call	_lcdInst
 14620  000E32  0EC0               	movlw	192
 14621  000E34  ECD1  F02F         	call	_lcdInst
 14622                           
 14623                           ;Test.c: 325: printf("MID -- 2s       ");
 14624  000E38  0E91               	movlw	low STR_103
 14625  000E3A  0100               	movlb	0	; () banked
 14626  000E3C  6F8E               	movwf	printf@f& (0+255),b
 14627  000E3E  0EFB               	movlw	high STR_103
 14628  000E40  0100               	movlb	0	; () banked
 14629  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
 14630  000E44  EC67  F00E         	call	_printf	;wreg free
 14631                           
 14632                           ;Test.c: 326: updateServoPosition(1200, 1);
 14633  000E48  0E04               	movlw	4
 14634  000E4A  0100               	movlb	0	; () banked
 14635  000E4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14636  000E4E  0EB0               	movlw	176
 14637  000E50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14638  000E52  0E00               	movlw	0
 14639  000E54  0100               	movlb	0	; () banked
 14640  000E56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14641  000E58  0E01               	movlw	1
 14642  000E5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14643  000E5C  EC49  F029         	call	_updateServoPosition	;wreg free
 14644                           
 14645                           ;Test.c: 327: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14646  000E60  0E00               	movlw	0
 14647  000E62  0100               	movlb	0	; () banked
 14648  000E64  6FB8               	movwf	actuatorTest@i_1769& (0+255),b
 14649  000E66                     l8847:
 14650                           
 14651                           ; BSR set to: 0
 14652  000E66  0E63               	movlw	99
 14653  000E68  0100               	movlb	0	; () banked
 14654  000E6A  65B8               	cpfsgt	actuatorTest@i_1769& (0+255),b
 14655  000E6C  D001               	goto	l8851
 14656  000E6E  D00C               	goto	l8855
 14657  000E70                     l8851:
 14658                           
 14659                           ; BSR set to: 0
 14660  000E70  0E68               	movlw	104
 14661  000E72  0100               	movlb	0	; () banked
 14662  000E74  6FAB               	movwf	??_actuatorTest& (0+255),b
 14663  000E76  0EE4               	movlw	228
 14664  000E78                     u11697:
 14665  000E78  2EE8               	decfsz	wreg,f,c
 14666  000E7A  D7FE               	bra	u11697
 14667  000E7C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14668  000E7E  D7FC               	bra	u11697
 14669  000E80  F000               	nop	
 14670  000E82  0100               	movlb	0	; () banked
 14671  000E84  2BB8               	incf	actuatorTest@i_1769& (0+255),f,b
 14672  000E86  D7EF               	goto	l8847
 14673  000E88                     l8855:
 14674                           
 14675                           ; BSR set to: 0
 14676  000E88  0E00               	movlw	0
 14677  000E8A  0100               	movlb	0	; () banked
 14678  000E8C  6FB9               	movwf	actuatorTest@i_1770& (0+255),b
 14679  000E8E                     l8857:
 14680                           
 14681                           ; BSR set to: 0
 14682  000E8E  0E63               	movlw	99
 14683  000E90  0100               	movlb	0	; () banked
 14684  000E92  65B9               	cpfsgt	actuatorTest@i_1770& (0+255),b
 14685  000E94  D001               	goto	l8861
 14686  000E96  D00C               	goto	l1381
 14687  000E98                     l8861:
 14688                           
 14689                           ; BSR set to: 0
 14690  000E98  0E68               	movlw	104
 14691  000E9A  0100               	movlb	0	; () banked
 14692  000E9C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14693  000E9E  0EE4               	movlw	228
 14694  000EA0                     u11707:
 14695  000EA0  2EE8               	decfsz	wreg,f,c
 14696  000EA2  D7FE               	bra	u11707
 14697  000EA4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14698  000EA6  D7FC               	bra	u11707
 14699  000EA8  F000               	nop	
 14700  000EAA  0100               	movlb	0	; () banked
 14701  000EAC  2BB9               	incf	actuatorTest@i_1770& (0+255),f,b
 14702  000EAE  D7EF               	goto	l8857
 14703  000EB0                     l1381:
 14704                           
 14705                           ; BSR set to: 0
 14706                           ;Test.c: 328: TMR1ON = 0;
 14707  000EB0  90CD               	bcf	4045,0,c	;volatile
 14708                           
 14709                           ; BSR set to: 0
 14710                           ;Test.c: 335: printf("TST: TILT SERVO");
 14711  000EB2  0E49               	movlw	low STR_104
 14712  000EB4  0100               	movlb	0	; () banked
 14713  000EB6  6F8E               	movwf	printf@f& (0+255),b
 14714  000EB8  0EFE               	movlw	high STR_104
 14715  000EBA  0100               	movlb	0	; () banked
 14716  000EBC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14717  000EBE  EC67  F00E         	call	_printf	;wreg free
 14718                           
 14719                           ;Test.c: 336: lcdInst(0b11000000);;
 14720  000EC2  0EC0               	movlw	192
 14721  000EC4  ECD1  F02F         	call	_lcdInst
 14722                           
 14723                           ;Test.c: 337: printf("LEVEL -- 2s     ");
 14724  000EC8  0EC4               	movlw	low STR_105
 14725  000ECA  0100               	movlb	0	; () banked
 14726  000ECC  6F8E               	movwf	printf@f& (0+255),b
 14727  000ECE  0EFB               	movlw	high STR_105
 14728  000ED0  0100               	movlb	0	; () banked
 14729  000ED2  6F8F               	movwf	(printf@f+1)& (0+255),b
 14730  000ED4  EC67  F00E         	call	_printf	;wreg free
 14731                           
 14732                           ;Test.c: 338: updateServoPosition(1050, 3);
 14733  000ED8  0E04               	movlw	4
 14734  000EDA  0100               	movlb	0	; () banked
 14735  000EDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14736  000EDE  0E1A               	movlw	26
 14737  000EE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14738  000EE2  0E00               	movlw	0
 14739  000EE4  0100               	movlb	0	; () banked
 14740  000EE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14741  000EE8  0E03               	movlw	3
 14742  000EEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14743  000EEC  EC49  F029         	call	_updateServoPosition	;wreg free
 14744                           
 14745                           ;Test.c: 339: TMR3ON = 1;
 14746  000EF0  80B1               	bsf	4017,0,c	;volatile
 14747                           
 14748                           ;Test.c: 340: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14749  000EF2  0E00               	movlw	0
 14750  000EF4  0100               	movlb	0	; () banked
 14751  000EF6  6FBA               	movwf	actuatorTest@i_1773& (0+255),b
 14752  000EF8                     l8875:
 14753                           
 14754                           ; BSR set to: 0
 14755  000EF8  0E63               	movlw	99
 14756  000EFA  0100               	movlb	0	; () banked
 14757  000EFC  65BA               	cpfsgt	actuatorTest@i_1773& (0+255),b
 14758  000EFE  D001               	goto	l8879
 14759  000F00  D00C               	goto	l8883
 14760  000F02                     l8879:
 14761                           
 14762                           ; BSR set to: 0
 14763  000F02  0E68               	movlw	104
 14764  000F04  0100               	movlb	0	; () banked
 14765  000F06  6FAB               	movwf	??_actuatorTest& (0+255),b
 14766  000F08  0EE4               	movlw	228
 14767  000F0A                     u11717:
 14768  000F0A  2EE8               	decfsz	wreg,f,c
 14769  000F0C  D7FE               	bra	u11717
 14770  000F0E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14771  000F10  D7FC               	bra	u11717
 14772  000F12  F000               	nop	
 14773  000F14  0100               	movlb	0	; () banked
 14774  000F16  2BBA               	incf	actuatorTest@i_1773& (0+255),f,b
 14775  000F18  D7EF               	goto	l8875
 14776  000F1A                     l8883:
 14777                           
 14778                           ; BSR set to: 0
 14779  000F1A  0E00               	movlw	0
 14780  000F1C  0100               	movlb	0	; () banked
 14781  000F1E  6FBB               	movwf	actuatorTest@i_1774& (0+255),b
 14782  000F20                     l8885:
 14783                           
 14784                           ; BSR set to: 0
 14785  000F20  0E63               	movlw	99
 14786  000F22  0100               	movlb	0	; () banked
 14787  000F24  65BB               	cpfsgt	actuatorTest@i_1774& (0+255),b
 14788  000F26  D001               	goto	l8889
 14789  000F28  D00C               	goto	l8893
 14790  000F2A                     l8889:
 14791                           
 14792                           ; BSR set to: 0
 14793  000F2A  0E68               	movlw	104
 14794  000F2C  0100               	movlb	0	; () banked
 14795  000F2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14796  000F30  0EE4               	movlw	228
 14797  000F32                     u11727:
 14798  000F32  2EE8               	decfsz	wreg,f,c
 14799  000F34  D7FE               	bra	u11727
 14800  000F36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14801  000F38  D7FC               	bra	u11727
 14802  000F3A  F000               	nop	
 14803  000F3C  0100               	movlb	0	; () banked
 14804  000F3E  2BBB               	incf	actuatorTest@i_1774& (0+255),f,b
 14805  000F40  D7EF               	goto	l8885
 14806  000F42                     l8893:
 14807                           
 14808                           ; BSR set to: 0
 14809                           ;Test.c: 342: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14810  000F42  0E80               	movlw	128
 14811  000F44  ECD1  F02F         	call	_lcdInst
 14812  000F48  0EC0               	movlw	192
 14813  000F4A  ECD1  F02F         	call	_lcdInst
 14814                           
 14815                           ;Test.c: 343: printf("DROP -- 2s      ");
 14816  000F4E  0EA2               	movlw	low STR_106
 14817  000F50  0100               	movlb	0	; () banked
 14818  000F52  6F8E               	movwf	printf@f& (0+255),b
 14819  000F54  0EFB               	movlw	high STR_106
 14820  000F56  0100               	movlb	0	; () banked
 14821  000F58  6F8F               	movwf	(printf@f+1)& (0+255),b
 14822  000F5A  EC67  F00E         	call	_printf	;wreg free
 14823                           
 14824                           ;Test.c: 344: updateServoPosition(1260, 3);
 14825  000F5E  0E04               	movlw	4
 14826  000F60  0100               	movlb	0	; () banked
 14827  000F62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14828  000F64  0EEC               	movlw	236
 14829  000F66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14830  000F68  0E00               	movlw	0
 14831  000F6A  0100               	movlb	0	; () banked
 14832  000F6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14833  000F6E  0E03               	movlw	3
 14834  000F70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14835  000F72  EC49  F029         	call	_updateServoPosition	;wreg free
 14836                           
 14837                           ;Test.c: 345: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14838  000F76  0E00               	movlw	0
 14839  000F78  0100               	movlb	0	; () banked
 14840  000F7A  6FBC               	movwf	actuatorTest@i_1776& (0+255),b
 14841  000F7C                     l8901:
 14842                           
 14843                           ; BSR set to: 0
 14844  000F7C  0E63               	movlw	99
 14845  000F7E  0100               	movlb	0	; () banked
 14846  000F80  65BC               	cpfsgt	actuatorTest@i_1776& (0+255),b
 14847  000F82  D001               	goto	l8905
 14848  000F84  D00C               	goto	l8909
 14849  000F86                     l8905:
 14850                           
 14851                           ; BSR set to: 0
 14852  000F86  0E68               	movlw	104
 14853  000F88  0100               	movlb	0	; () banked
 14854  000F8A  6FAB               	movwf	??_actuatorTest& (0+255),b
 14855  000F8C  0EE4               	movlw	228
 14856  000F8E                     u11737:
 14857  000F8E  2EE8               	decfsz	wreg,f,c
 14858  000F90  D7FE               	bra	u11737
 14859  000F92  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14860  000F94  D7FC               	bra	u11737
 14861  000F96  F000               	nop	
 14862  000F98  0100               	movlb	0	; () banked
 14863  000F9A  2BBC               	incf	actuatorTest@i_1776& (0+255),f,b
 14864  000F9C  D7EF               	goto	l8901
 14865  000F9E                     l8909:
 14866                           
 14867                           ; BSR set to: 0
 14868  000F9E  0E00               	movlw	0
 14869  000FA0  0100               	movlb	0	; () banked
 14870  000FA2  6FBD               	movwf	actuatorTest@i_1777& (0+255),b
 14871  000FA4                     l8911:
 14872                           
 14873                           ; BSR set to: 0
 14874  000FA4  0E63               	movlw	99
 14875  000FA6  0100               	movlb	0	; () banked
 14876  000FA8  65BD               	cpfsgt	actuatorTest@i_1777& (0+255),b
 14877  000FAA  D001               	goto	l8915
 14878  000FAC  D00C               	goto	l8919
 14879  000FAE                     l8915:
 14880                           
 14881                           ; BSR set to: 0
 14882  000FAE  0E68               	movlw	104
 14883  000FB0  0100               	movlb	0	; () banked
 14884  000FB2  6FAB               	movwf	??_actuatorTest& (0+255),b
 14885  000FB4  0EE4               	movlw	228
 14886  000FB6                     u11747:
 14887  000FB6  2EE8               	decfsz	wreg,f,c
 14888  000FB8  D7FE               	bra	u11747
 14889  000FBA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14890  000FBC  D7FC               	bra	u11747
 14891  000FBE  F000               	nop	
 14892  000FC0  0100               	movlb	0	; () banked
 14893  000FC2  2BBD               	incf	actuatorTest@i_1777& (0+255),f,b
 14894  000FC4  D7EF               	goto	l8911
 14895  000FC6                     l8919:
 14896                           
 14897                           ; BSR set to: 0
 14898                           ;Test.c: 347: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14899  000FC6  0E80               	movlw	128
 14900  000FC8  ECD1  F02F         	call	_lcdInst
 14901  000FCC  0EC0               	movlw	192
 14902  000FCE  ECD1  F02F         	call	_lcdInst
 14903                           
 14904                           ;Test.c: 348: printf("LEVEL -- 2s     ");
 14905  000FD2  0EC4               	movlw	low STR_105
 14906  000FD4  0100               	movlb	0	; () banked
 14907  000FD6  6F8E               	movwf	printf@f& (0+255),b
 14908  000FD8  0EFB               	movlw	high STR_105
 14909  000FDA  0100               	movlb	0	; () banked
 14910  000FDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14911  000FDE  EC67  F00E         	call	_printf	;wreg free
 14912                           
 14913                           ;Test.c: 349: updateServoPosition(1050, 3);
 14914  000FE2  0E04               	movlw	4
 14915  000FE4  0100               	movlb	0	; () banked
 14916  000FE6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14917  000FE8  0E1A               	movlw	26
 14918  000FEA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14919  000FEC  0E00               	movlw	0
 14920  000FEE  0100               	movlb	0	; () banked
 14921  000FF0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14922  000FF2  0E03               	movlw	3
 14923  000FF4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14924  000FF6  EC49  F029         	call	_updateServoPosition	;wreg free
 14925                           
 14926                           ;Test.c: 350: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14927  000FFA  0E00               	movlw	0
 14928  000FFC  0100               	movlb	0	; () banked
 14929  000FFE  6FBE               	movwf	actuatorTest@i_1779& (0+255),b
 14930  001000                     l8927:
 14931                           
 14932                           ; BSR set to: 0
 14933  001000  0E63               	movlw	99
 14934  001002  0100               	movlb	0	; () banked
 14935  001004  65BE               	cpfsgt	actuatorTest@i_1779& (0+255),b
 14936  001006  D001               	goto	l8931
 14937  001008  D00C               	goto	l8935
 14938  00100A                     l8931:
 14939                           
 14940                           ; BSR set to: 0
 14941  00100A  0E68               	movlw	104
 14942  00100C  0100               	movlb	0	; () banked
 14943  00100E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14944  001010  0EE4               	movlw	228
 14945  001012                     u11757:
 14946  001012  2EE8               	decfsz	wreg,f,c
 14947  001014  D7FE               	bra	u11757
 14948  001016  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14949  001018  D7FC               	bra	u11757
 14950  00101A  F000               	nop	
 14951  00101C  0100               	movlb	0	; () banked
 14952  00101E  2BBE               	incf	actuatorTest@i_1779& (0+255),f,b
 14953  001020  D7EF               	goto	l8927
 14954  001022                     l8935:
 14955                           
 14956                           ; BSR set to: 0
 14957  001022  0E00               	movlw	0
 14958  001024  0100               	movlb	0	; () banked
 14959  001026  6FBF               	movwf	actuatorTest@i_1780& (0+255),b
 14960  001028                     l8937:
 14961                           
 14962                           ; BSR set to: 0
 14963  001028  0E63               	movlw	99
 14964  00102A  0100               	movlb	0	; () banked
 14965  00102C  65BF               	cpfsgt	actuatorTest@i_1780& (0+255),b
 14966  00102E  D001               	goto	l8941
 14967  001030  D00C               	goto	l1393
 14968  001032                     l8941:
 14969                           
 14970                           ; BSR set to: 0
 14971  001032  0E68               	movlw	104
 14972  001034  0100               	movlb	0	; () banked
 14973  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 14974  001038  0EE4               	movlw	228
 14975  00103A                     u11767:
 14976  00103A  2EE8               	decfsz	wreg,f,c
 14977  00103C  D7FE               	bra	u11767
 14978  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14979  001040  D7FC               	bra	u11767
 14980  001042  F000               	nop	
 14981  001044  0100               	movlb	0	; () banked
 14982  001046  2BBF               	incf	actuatorTest@i_1780& (0+255),f,b
 14983  001048  D7EF               	goto	l8937
 14984  00104A                     l1393:
 14985                           
 14986                           ; BSR set to: 0
 14987                           ;Test.c: 351: TMR3ON = 0;
 14988  00104A  90B1               	bcf	4017,0,c	;volatile
 14989                           
 14990                           ;Test.c: 352: (INTCONbits.GIE = 0);
 14991  00104C  9EF2               	bcf	intcon,7,c	;volatile
 14992                           
 14993                           ; BSR set to: 0
 14994                           ;Test.c: 357: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14995  00104E  0E01               	movlw	1
 14996  001050  ECD1  F02F         	call	_lcdInst
 14997  001054  0E68               	movlw	104
 14998  001056  0100               	movlb	0	; () banked
 14999  001058  6FAB               	movwf	??_actuatorTest& (0+255),b
 15000  00105A  0EE4               	movlw	228
 15001  00105C                     u11777:
 15002  00105C  2EE8               	decfsz	wreg,f,c
 15003  00105E  D7FE               	bra	u11777
 15004  001060  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15005  001062  D7FC               	bra	u11777
 15006  001064  F000               	nop	
 15007  001066  0E80               	movlw	128
 15008  001068  ECD1  F02F         	call	_lcdInst
 15009                           
 15010                           ;Test.c: 358: printf("TST: CAM SERVO");
 15011  00106C  0EC5               	movlw	low STR_108
 15012  00106E  0100               	movlb	0	; () banked
 15013  001070  6F8E               	movwf	printf@f& (0+255),b
 15014  001072  0EFE               	movlw	high STR_108
 15015  001074  0100               	movlb	0	; () banked
 15016  001076  6F8F               	movwf	(printf@f+1)& (0+255),b
 15017  001078  EC67  F00E         	call	_printf	;wreg free
 15018                           
 15019                           ;Test.c: 359: lcdInst(0b11000000);;
 15020  00107C  0EC0               	movlw	192
 15021  00107E  ECD1  F02F         	call	_lcdInst
 15022                           
 15023                           ;Test.c: 360: printf("CAM UP  |RC0=1");
 15024  001082  0EA7               	movlw	low STR_109
 15025  001084  0100               	movlb	0	; () banked
 15026  001086  6F8E               	movwf	printf@f& (0+255),b
 15027  001088  0EFE               	movlw	high STR_109
 15028  00108A  0100               	movlb	0	; () banked
 15029  00108C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15030  00108E  EC67  F00E         	call	_printf	;wreg free
 15031                           
 15032                           ;Test.c: 361: LATCbits.LATC0 = 1;
 15033  001092  808B               	bsf	3979,0,c	;volatile
 15034                           
 15035                           ;Test.c: 362: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 15036  001094  0E00               	movlw	0
 15037  001096  0100               	movlb	0	; () banked
 15038  001098  6FC0               	movwf	actuatorTest@i_1783& (0+255),b
 15039  00109A                     l8961:
 15040                           
 15041                           ; BSR set to: 0
 15042  00109A  0E63               	movlw	99
 15043  00109C  0100               	movlb	0	; () banked
 15044  00109E  65C0               	cpfsgt	actuatorTest@i_1783& (0+255),b
 15045  0010A0  D001               	goto	l8965
 15046  0010A2  D00C               	goto	l8969
 15047  0010A4                     l8965:
 15048                           
 15049                           ; BSR set to: 0
 15050  0010A4  0E68               	movlw	104
 15051  0010A6  0100               	movlb	0	; () banked
 15052  0010A8  6FAB               	movwf	??_actuatorTest& (0+255),b
 15053  0010AA  0EE4               	movlw	228
 15054  0010AC                     u11787:
 15055  0010AC  2EE8               	decfsz	wreg,f,c
 15056  0010AE  D7FE               	bra	u11787
 15057  0010B0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15058  0010B2  D7FC               	bra	u11787
 15059  0010B4  F000               	nop	
 15060  0010B6  0100               	movlb	0	; () banked
 15061  0010B8  2BC0               	incf	actuatorTest@i_1783& (0+255),f,b
 15062  0010BA  D7EF               	goto	l8961
 15063  0010BC                     l8969:
 15064                           
 15065                           ; BSR set to: 0
 15066  0010BC  0E00               	movlw	0
 15067  0010BE  0100               	movlb	0	; () banked
 15068  0010C0  6FC1               	movwf	actuatorTest@i_1784& (0+255),b
 15069  0010C2                     l8971:
 15070                           
 15071                           ; BSR set to: 0
 15072  0010C2  0E63               	movlw	99
 15073  0010C4  0100               	movlb	0	; () banked
 15074  0010C6  65C1               	cpfsgt	actuatorTest@i_1784& (0+255),b
 15075  0010C8  D001               	goto	l8975
 15076  0010CA  D00C               	goto	l8979
 15077  0010CC                     l8975:
 15078                           
 15079                           ; BSR set to: 0
 15080  0010CC  0E68               	movlw	104
 15081  0010CE  0100               	movlb	0	; () banked
 15082  0010D0  6FAB               	movwf	??_actuatorTest& (0+255),b
 15083  0010D2  0EE4               	movlw	228
 15084  0010D4                     u11797:
 15085  0010D4  2EE8               	decfsz	wreg,f,c
 15086  0010D6  D7FE               	bra	u11797
 15087  0010D8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15088  0010DA  D7FC               	bra	u11797
 15089  0010DC  F000               	nop	
 15090  0010DE  0100               	movlb	0	; () banked
 15091  0010E0  2BC1               	incf	actuatorTest@i_1784& (0+255),f,b
 15092  0010E2  D7EF               	goto	l8971
 15093  0010E4                     l8979:
 15094                           
 15095                           ; BSR set to: 0
 15096                           ;Test.c: 363: lcdInst(0b10000000);;lcdInst(0b11000000);;
 15097  0010E4  0E80               	movlw	128
 15098  0010E6  ECD1  F02F         	call	_lcdInst
 15099  0010EA  0EC0               	movlw	192
 15100  0010EC  ECD1  F02F         	call	_lcdInst
 15101                           
 15102                           ;Test.c: 364: printf("CAM DWN |RC0=0");
 15103  0010F0  0E98               	movlw	low STR_110
 15104  0010F2  0100               	movlb	0	; () banked
 15105  0010F4  6F8E               	movwf	printf@f& (0+255),b
 15106  0010F6  0EFE               	movlw	high STR_110
 15107  0010F8  0100               	movlb	0	; () banked
 15108  0010FA  6F8F               	movwf	(printf@f+1)& (0+255),b
 15109  0010FC  EC67  F00E         	call	_printf	;wreg free
 15110                           
 15111                           ;Test.c: 367: for(i=0;i<10000;i++)
 15112  001100  0E00               	movlw	0
 15113  001102  0100               	movlb	0	; () banked
 15114  001104  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 15115  001106  0E00               	movlw	0
 15116  001108  6FC4               	movwf	actuatorTest@i& (0+255),b
 15117  00110A                     l8985:
 15118                           
 15119                           ; BSR set to: 0
 15120  00110A  0100               	movlb	0	; () banked
 15121  00110C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 15122  00110E  D008               	goto	l1398
 15123  001110  0E10               	movlw	16
 15124  001112  0100               	movlb	0	; () banked
 15125  001114  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 15126  001116  0E27               	movlw	39
 15127  001118  0100               	movlb	0	; () banked
 15128  00111A  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 15129  00111C  B0D8               	btfsc	status,0,c
 15130  00111E  D00D               	goto	l8995
 15131  001120                     l1398:
 15132                           
 15133                           ; BSR set to: 0
 15134                           ;Test.c: 368: {
 15135                           ;Test.c: 369: LATCbits.LATC0 = 1;
 15136  001120  808B               	bsf	3979,0,c	;volatile
 15137                           
 15138                           ; BSR set to: 0
 15139                           ;Test.c: 370: _delay((unsigned long)((10)*(32000000/4000000.0)));
 15140  001122  0E1A               	movlw	26
 15141  001124                     u11807:
 15142  001124  2EE8               	decfsz	wreg,f,c
 15143  001126  D7FE               	bra	u11807
 15144  001128  D000               	nop2	
 15145                           
 15146                           ;Test.c: 371: LATCbits.LATC0 = 0;
 15147  00112A  908B               	bcf	3979,0,c	;volatile
 15148                           
 15149                           ;Test.c: 372: _delay((unsigned long)((90)*(32000000/4000000.0)));
 15150  00112C  0EF0               	movlw	240
 15151  00112E                     u11817:
 15152  00112E  2EE8               	decfsz	wreg,f,c
 15153  001130  D7FE               	bra	u11817
 15154  001132  0100               	movlb	0	; () banked
 15155  001134  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 15156  001136  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 15157  001138  D7E8               	goto	l8985
 15158  00113A                     l8995:
 15159                           
 15160                           ; BSR set to: 0
 15161                           ;Test.c: 373: }
 15162                           ;Test.c: 375: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 15163  00113A  0E00               	movlw	0
 15164  00113C  0100               	movlb	0	; () banked
 15165  00113E  6FC2               	movwf	actuatorTest@i_1786& (0+255),b
 15166  001140                     l8997:
 15167                           
 15168                           ; BSR set to: 0
 15169  001140  0E63               	movlw	99
 15170  001142  0100               	movlb	0	; () banked
 15171  001144  65C2               	cpfsgt	actuatorTest@i_1786& (0+255),b
 15172  001146  D001               	goto	l9001
 15173  001148  D00C               	goto	l9005
 15174  00114A                     l9001:
 15175                           
 15176                           ; BSR set to: 0
 15177  00114A  0E68               	movlw	104
 15178  00114C  0100               	movlb	0	; () banked
 15179  00114E  6FAB               	movwf	??_actuatorTest& (0+255),b
 15180  001150  0EE4               	movlw	228
 15181  001152                     u11827:
 15182  001152  2EE8               	decfsz	wreg,f,c
 15183  001154  D7FE               	bra	u11827
 15184  001156  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15185  001158  D7FC               	bra	u11827
 15186  00115A  F000               	nop	
 15187  00115C  0100               	movlb	0	; () banked
 15188  00115E  2BC2               	incf	actuatorTest@i_1786& (0+255),f,b
 15189  001160  D7EF               	goto	l8997
 15190  001162                     l9005:
 15191                           
 15192                           ; BSR set to: 0
 15193  001162  0E00               	movlw	0
 15194  001164  0100               	movlb	0	; () banked
 15195  001166  6FC3               	movwf	actuatorTest@i_1787& (0+255),b
 15196  001168                     l9007:
 15197                           
 15198                           ; BSR set to: 0
 15199  001168  0E63               	movlw	99
 15200  00116A  0100               	movlb	0	; () banked
 15201  00116C  65C3               	cpfsgt	actuatorTest@i_1787& (0+255),b
 15202  00116E  D001               	goto	l9011
 15203  001170  D00C               	goto	l9015
 15204  001172                     l9011:
 15205                           
 15206                           ; BSR set to: 0
 15207  001172  0E68               	movlw	104
 15208  001174  0100               	movlb	0	; () banked
 15209  001176  6FAB               	movwf	??_actuatorTest& (0+255),b
 15210  001178  0EE4               	movlw	228
 15211  00117A                     u11837:
 15212  00117A  2EE8               	decfsz	wreg,f,c
 15213  00117C  D7FE               	bra	u11837
 15214  00117E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15215  001180  D7FC               	bra	u11837
 15216  001182  F000               	nop	
 15217  001184  0100               	movlb	0	; () banked
 15218  001186  2BC3               	incf	actuatorTest@i_1787& (0+255),f,b
 15219  001188  D7EF               	goto	l9007
 15220  00118A                     l9015:
 15221                           
 15222                           ; BSR set to: 0
 15223                           ;Test.c: 376: machine_state = Testing_state;
 15224  00118A  0E03               	movlw	3
 15225  00118C  0100               	movlb	0	; () banked
 15226  00118E  6FFC               	movwf	_machine_state& (0+255),b
 15227                           
 15228                           ; BSR set to: 0
 15229  001190  0012               	return		;funcret
 15230  001192                     __end_of_actuatorTest:
 15231                           	opt stack 0
 15232                           tblptru	equ	0xFF8
 15233                           tblptrh	equ	0xFF7
 15234                           tblptrl	equ	0xFF6
 15235                           tablat	equ	0xFF5
 15236                           prodh	equ	0xFF4
 15237                           prodl	equ	0xFF3
 15238                           intcon	equ	0xFF2
 15239                           intcon2	equ	0xFF1
 15240                           intcon3	equ	0xFF0
 15241                           postinc0	equ	0xFEE
 15242                           wreg	equ	0xFE8
 15243                           postdec1	equ	0xFE5
 15244                           fsr1l	equ	0xFE1
 15245                           indf2	equ	0xFDF
 15246                           postinc2	equ	0xFDE
 15247                           postdec2	equ	0xFDD
 15248                           fsr2h	equ	0xFDA
 15249                           fsr2l	equ	0xFD9
 15250                           status	equ	0xFD8
 15251                           
 15252 ;; *************** function _SpeedTest *****************
 15253 ;; Defined at:
 15254 ;;		line 555 in file "Test.c"
 15255 ;; Parameters:    Size  Location     Type
 15256 ;;		None
 15257 ;; Auto vars:     Size  Location     Type
 15258 ;;		None
 15259 ;; Return value:  Size  Location     Type
 15260 ;;                  1    wreg      void 
 15261 ;; Registers used:
 15262 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15263 ;; Tracked objects:
 15264 ;;		On entry : 0/0
 15265 ;;		On exit  : 0/0
 15266 ;;		Unchanged: 0/0
 15267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15270 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15271 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15272 ;;Total ram usage:        1 bytes
 15273 ;; Hardware stack levels used:    1
 15274 ;; Hardware stack levels required when called:   10
 15275 ;; This function calls:
 15276 ;;		_lcdInst
 15277 ;;		_printf
 15278 ;; This function is called by:
 15279 ;;		_Test
 15280 ;; This function uses a non-reentrant model
 15281 ;;
 15282                           
 15283                           	psect	text46
 15284  00518C                     __ptext46:
 15285                           	opt stack 0
 15286  00518C                     _SpeedTest:
 15287                           	opt stack 19
 15288                           
 15289                           ;Test.c: 557: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15290                           
 15291                           ; BSR set to: 0
 15292                           ;incstack = 0
 15293  00518C  0E01               	movlw	1
 15294  00518E  ECD1  F02F         	call	_lcdInst
 15295  005192  0E68               	movlw	104
 15296  005194  0100               	movlb	0	; () banked
 15297  005196  6FAB               	movwf	??_SpeedTest& (0+255),b
 15298  005198  0EE4               	movlw	228
 15299  00519A                     u11847:
 15300  00519A  2EE8               	decfsz	wreg,f,c
 15301  00519C  D7FE               	bra	u11847
 15302  00519E  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 15303  0051A0  D7FC               	bra	u11847
 15304  0051A2  F000               	nop	
 15305  0051A4  0E80               	movlw	128
 15306  0051A6  ECD1  F02F         	call	_lcdInst
 15307                           
 15308                           ;Test.c: 558: printf("S: D WILL RETURN ");
 15309  0051AA  0E37               	movlw	low STR_119
 15310  0051AC  0100               	movlb	0	; () banked
 15311  0051AE  6F8E               	movwf	printf@f& (0+255),b
 15312  0051B0  0EFB               	movlw	high STR_119
 15313  0051B2  0100               	movlb	0	; () banked
 15314  0051B4  6F8F               	movwf	(printf@f+1)& (0+255),b
 15315  0051B6  EC67  F00E         	call	_printf	;wreg free
 15316                           
 15317                           ;Test.c: 559: lcdInst(0b11000000);;
 15318  0051BA  0EC0               	movlw	192
 15319  0051BC  ECD1  F02F         	call	_lcdInst
 15320                           
 15321                           ;Test.c: 560: printf("OTHER SETS RA5   ");
 15322  0051C0  0E01               	movlw	low STR_120
 15323  0051C2  0100               	movlb	0	; () banked
 15324  0051C4  6F8E               	movwf	printf@f& (0+255),b
 15325  0051C6  0EFB               	movlw	high STR_120
 15326  0051C8  0100               	movlb	0	; () banked
 15327  0051CA  6F8F               	movwf	(printf@f+1)& (0+255),b
 15328  0051CC  EC67  F00E         	call	_printf	;wreg free
 15329  0051D0                     l1468:
 15330  0051D0  A281               	btfss	3969,1,c	;volatile
 15331  0051D2  D7FE               	goto	l1468
 15332                           
 15333                           ;Test.c: 565: }
 15334                           ;Test.c: 566: if(PORTB >> 4 == 0b1111){
 15335  0051D4  3881               	swapf	3969,w,c	;volatile
 15336  0051D6  0B0F               	andlw	15
 15337  0051D8  0A0F               	xorlw	15
 15338  0051DA  B4D8               	btfsc	status,2,c
 15339  0051DC  0012               	return	
 15340  0051DE  D014               	goto	l9127
 15341  0051E0                     l1475:
 15342                           
 15343                           ;Test.c: 571: LATBbits.LATB2 = 1;
 15344  0051E0  848A               	bsf	3978,2,c	;volatile
 15345                           
 15346                           ;Test.c: 572: _delay((unsigned long)((5)*(32000000/4000.0)));
 15347  0051E2  0E34               	movlw	52
 15348  0051E4  0100               	movlb	0	; () banked
 15349  0051E6  6FAB               	movwf	??_SpeedTest& (0+255),b
 15350  0051E8  0EF1               	movlw	241
 15351  0051EA                     u11857:
 15352  0051EA  2EE8               	decfsz	wreg,f,c
 15353  0051EC  D7FE               	bra	u11857
 15354  0051EE  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 15355  0051F0  D7FC               	bra	u11857
 15356  0051F2  D000               	nop2	
 15357                           
 15358                           ;Test.c: 573: LATBbits.LATB2 = 0;
 15359  0051F4  948A               	bcf	3978,2,c	;volatile
 15360                           
 15361                           ;Test.c: 574: _delay((unsigned long)((5)*(32000000/4000.0)));
 15362  0051F6  0E34               	movlw	52
 15363  0051F8  0100               	movlb	0	; () banked
 15364  0051FA  6FAB               	movwf	??_SpeedTest& (0+255),b
 15365  0051FC  0EF1               	movlw	241
 15366  0051FE                     u11867:
 15367  0051FE  2EE8               	decfsz	wreg,f,c
 15368  005200  D7FE               	bra	u11867
 15369  005202  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 15370  005204  D7FC               	bra	u11867
 15371  005206  D000               	nop2	
 15372  005208                     l9127:
 15373  005208  B281               	btfsc	3969,1,c	;volatile
 15374  00520A  D7EA               	goto	l1475
 15375                           
 15376                           ;Test.c: 577: }
 15377                           ;Test.c: 578: LATBbits.LATB2 = 0;
 15378  00520C  948A               	bcf	3978,2,c	;volatile
 15379  00520E  D7E0               	goto	l1468
 15380  005210                     __end_of_SpeedTest:
 15381                           	opt stack 0
 15382                           tblptru	equ	0xFF8
 15383                           tblptrh	equ	0xFF7
 15384                           tblptrl	equ	0xFF6
 15385                           tablat	equ	0xFF5
 15386                           prodh	equ	0xFF4
 15387                           prodl	equ	0xFF3
 15388                           intcon	equ	0xFF2
 15389                           intcon2	equ	0xFF1
 15390                           intcon3	equ	0xFF0
 15391                           postinc0	equ	0xFEE
 15392                           wreg	equ	0xFE8
 15393                           postdec1	equ	0xFE5
 15394                           fsr1l	equ	0xFE1
 15395                           indf2	equ	0xFDF
 15396                           postinc2	equ	0xFDE
 15397                           postdec2	equ	0xFDD
 15398                           fsr2h	equ	0xFDA
 15399                           fsr2l	equ	0xFD9
 15400                           status	equ	0xFD8
 15401                           
 15402 ;; *************** function _PortTestPusher *****************
 15403 ;; Defined at:
 15404 ;;		line 696 in file "Test.c"
 15405 ;; Parameters:    Size  Location     Type
 15406 ;;		None
 15407 ;; Auto vars:     Size  Location     Type
 15408 ;;		None
 15409 ;; Return value:  Size  Location     Type
 15410 ;;                  1    wreg      void 
 15411 ;; Registers used:
 15412 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15413 ;; Tracked objects:
 15414 ;;		On entry : 0/0
 15415 ;;		On exit  : 0/0
 15416 ;;		Unchanged: 0/0
 15417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15420 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15421 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15422 ;;Total ram usage:        1 bytes
 15423 ;; Hardware stack levels used:    1
 15424 ;; Hardware stack levels required when called:   10
 15425 ;; This function calls:
 15426 ;;		_lcdInst
 15427 ;;		_printf
 15428 ;; This function is called by:
 15429 ;;		_Test
 15430 ;; This function uses a non-reentrant model
 15431 ;;
 15432                           
 15433                           	psect	text47
 15434  0056DC                     __ptext47:
 15435                           	opt stack 0
 15436  0056DC                     _PortTestPusher:
 15437                           	opt stack 19
 15438                           
 15439                           ;Test.c: 697: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15440                           
 15441                           ;incstack = 0
 15442  0056DC  0E01               	movlw	1
 15443  0056DE  ECD1  F02F         	call	_lcdInst
 15444  0056E2  0E68               	movlw	104
 15445  0056E4  0100               	movlb	0	; () banked
 15446  0056E6  6FAB               	movwf	??_PortTestPusher& (0+255),b
 15447  0056E8  0EE4               	movlw	228
 15448  0056EA                     u11877:
 15449  0056EA  2EE8               	decfsz	wreg,f,c
 15450  0056EC  D7FE               	bra	u11877
 15451  0056EE  2FAB               	decfsz	??_PortTestPusher& (0+255),f,b
 15452  0056F0  D7FC               	bra	u11877
 15453  0056F2  F000               	nop	
 15454  0056F4  0E80               	movlw	128
 15455  0056F6  ECD1  F02F         	call	_lcdInst
 15456                           
 15457                           ;Test.c: 698: printf("D WILL RETURN    ");
 15458  0056FA  0EEF               	movlw	low STR_112
 15459  0056FC  0100               	movlb	0	; () banked
 15460  0056FE  6F8E               	movwf	printf@f& (0+255),b
 15461  005700  0EFA               	movlw	high STR_112
 15462  005702  0100               	movlb	0	; () banked
 15463  005704  6F8F               	movwf	(printf@f+1)& (0+255),b
 15464  005706  EC67  F00E         	call	_printf	;wreg free
 15465                           
 15466                           ;Test.c: 699: lcdInst(0b11000000);;
 15467  00570A  0EC0               	movlw	192
 15468  00570C  ECD1  F02F         	call	_lcdInst
 15469                           
 15470                           ;Test.c: 700: printf("OTHER SETS PUSHER");
 15471  005710  0E5B               	movlw	low STR_128
 15472  005712  0100               	movlb	0	; () banked
 15473  005714  6F8E               	movwf	printf@f& (0+255),b
 15474  005716  0EFB               	movlw	high STR_128
 15475  005718  0100               	movlb	0	; () banked
 15476  00571A  6F8F               	movwf	(printf@f+1)& (0+255),b
 15477  00571C  EC67  F00E         	call	_printf	;wreg free
 15478  005720                     l1529:
 15479  005720  A281               	btfss	3969,1,c	;volatile
 15480  005722  D7FE               	goto	l1529
 15481                           
 15482                           ;Test.c: 705: }
 15483                           ;Test.c: 706: if(PORTB >> 4 == 0b1111){
 15484  005724  3881               	swapf	3969,w,c	;volatile
 15485  005726  0B0F               	andlw	15
 15486  005728  0A0F               	xorlw	15
 15487  00572A  B4D8               	btfsc	status,2,c
 15488  00572C  0012               	return	
 15489                           
 15490                           ;Test.c: 709: else{
 15491                           ;Test.c: 710: LATAbits.LATA4 = 1;
 15492                           
 15493                           ;Test.c: 708: }
 15494                           
 15495                           ;Test.c: 707: break;
 15496  00572E  8889               	bsf	3977,4,c	;volatile
 15497  005730                     l1535:
 15498  005730  B281               	btfsc	3969,1,c	;volatile
 15499  005732  D7FE               	goto	l1535
 15500                           
 15501                           ;Test.c: 713: }
 15502                           ;Test.c: 714: LATAbits.LATA4 = 0;
 15503  005734  9889               	bcf	3977,4,c	;volatile
 15504  005736  D7F4               	goto	l1529
 15505  005738                     __end_of_PortTestPusher:
 15506                           	opt stack 0
 15507                           tblptru	equ	0xFF8
 15508                           tblptrh	equ	0xFF7
 15509                           tblptrl	equ	0xFF6
 15510                           tablat	equ	0xFF5
 15511                           prodh	equ	0xFF4
 15512                           prodl	equ	0xFF3
 15513                           intcon	equ	0xFF2
 15514                           intcon2	equ	0xFF1
 15515                           intcon3	equ	0xFF0
 15516                           postinc0	equ	0xFEE
 15517                           wreg	equ	0xFE8
 15518                           postdec1	equ	0xFE5
 15519                           fsr1l	equ	0xFE1
 15520                           indf2	equ	0xFDF
 15521                           postinc2	equ	0xFDE
 15522                           postdec2	equ	0xFDD
 15523                           fsr2h	equ	0xFDA
 15524                           fsr2l	equ	0xFD9
 15525                           status	equ	0xFD8
 15526                           
 15527 ;; *************** function _PortTestDC *****************
 15528 ;; Defined at:
 15529 ;;		line 439 in file "Test.c"
 15530 ;; Parameters:    Size  Location     Type
 15531 ;;		None
 15532 ;; Auto vars:     Size  Location     Type
 15533 ;;		None
 15534 ;; Return value:  Size  Location     Type
 15535 ;;                  1    wreg      void 
 15536 ;; Registers used:
 15537 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15538 ;; Tracked objects:
 15539 ;;		On entry : 0/0
 15540 ;;		On exit  : 0/0
 15541 ;;		Unchanged: 0/0
 15542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15545 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15546 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15547 ;;Total ram usage:        1 bytes
 15548 ;; Hardware stack levels used:    1
 15549 ;; Hardware stack levels required when called:   10
 15550 ;; This function calls:
 15551 ;;		_lcdInst
 15552 ;;		_printf
 15553 ;; This function is called by:
 15554 ;;		_Test
 15555 ;; This function uses a non-reentrant model
 15556 ;;
 15557                           
 15558                           	psect	text48
 15559  0049E2                     __ptext48:
 15560                           	opt stack 0
 15561  0049E2                     _PortTestDC:
 15562                           	opt stack 19
 15563                           
 15564                           ;Test.c: 440: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15565                           
 15566                           ;incstack = 0
 15567  0049E2  0E01               	movlw	1
 15568  0049E4  ECD1  F02F         	call	_lcdInst
 15569  0049E8  0E68               	movlw	104
 15570  0049EA  0100               	movlb	0	; () banked
 15571  0049EC  6FAB               	movwf	??_PortTestDC& (0+255),b
 15572  0049EE  0EE4               	movlw	228
 15573  0049F0                     u11887:
 15574  0049F0  2EE8               	decfsz	wreg,f,c
 15575  0049F2  D7FE               	bra	u11887
 15576  0049F4  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 15577  0049F6  D7FC               	bra	u11887
 15578  0049F8  F000               	nop	
 15579  0049FA  0E80               	movlw	128
 15580  0049FC  ECD1  F02F         	call	_lcdInst
 15581                           
 15582                           ;Test.c: 441: printf("D WILL RETURN    ");
 15583  004A00  0EEF               	movlw	low STR_112
 15584  004A02  0100               	movlb	0	; () banked
 15585  004A04  6F8E               	movwf	printf@f& (0+255),b
 15586  004A06  0EFA               	movlw	high STR_112
 15587  004A08  0100               	movlb	0	; () banked
 15588  004A0A  6F8F               	movwf	(printf@f+1)& (0+255),b
 15589  004A0C  EC67  F00E         	call	_printf	;wreg free
 15590                           
 15591                           ;Test.c: 442: lcdInst(0b11000000);;
 15592  004A10  0EC0               	movlw	192
 15593  004A12  ECD1  F02F         	call	_lcdInst
 15594                           
 15595                           ;Test.c: 443: printf("OTHER SETS DC   ");
 15596  004A16  0EF7               	movlw	low STR_113
 15597  004A18  0100               	movlb	0	; () banked
 15598  004A1A  6F8E               	movwf	printf@f& (0+255),b
 15599  004A1C  0EFB               	movlw	high STR_113
 15600  004A1E  0100               	movlb	0	; () banked
 15601  004A20  6F8F               	movwf	(printf@f+1)& (0+255),b
 15602  004A22  EC67  F00E         	call	_printf	;wreg free
 15603  004A26                     l1411:
 15604  004A26  A281               	btfss	3969,1,c	;volatile
 15605  004A28  D7FE               	goto	l1411
 15606                           
 15607                           ;Test.c: 448: }
 15608                           ;Test.c: 449: if(PORTB >> 4 == 0b1111){
 15609  004A2A  3881               	swapf	3969,w,c	;volatile
 15610  004A2C  0B0F               	andlw	15
 15611  004A2E  0A0F               	xorlw	15
 15612  004A30  B4D8               	btfsc	status,2,c
 15613  004A32  0012               	return	
 15614                           
 15615                           ;Test.c: 452: else if(PORTB >> 4 == 0b0000){
 15616                           
 15617                           ;Test.c: 451: }
 15618                           
 15619                           ;Test.c: 450: break;
 15620  004A34  CF81 F0AB          	movff	3969,??_PortTestDC	;volatile
 15621  004A38  0100               	movlb	0	; () banked
 15622  004A3A  3BAB               	swapf	??_PortTestDC& (0+255),f,b
 15623  004A3C  0E0F               	movlw	15
 15624  004A3E  17AB               	andwf	??_PortTestDC& (0+255),f,b
 15625  004A40  A4D8               	btfss	status,2,c
 15626  004A42  D010               	goto	l9093
 15627                           
 15628                           ; BSR set to: 0
 15629                           ;Test.c: 454: LATBbits.LATB2 = !LATBbits.LATB2;
 15630  004A44  B48A               	btfsc	3978,2,c	;volatile
 15631  004A46  D004               	goto	u8570
 15632  004A48  0100               	movlb	0	; () banked
 15633  004A4A  6BAB               	clrf	??_PortTestDC& (0+255),b
 15634  004A4C  2BAB               	incf	??_PortTestDC& (0+255),f,b
 15635  004A4E  D002               	goto	u8588
 15636  004A50                     u8570:
 15637  004A50  0100               	movlb	0	; () banked
 15638  004A52  6BAB               	clrf	??_PortTestDC& (0+255),b
 15639  004A54                     u8588:
 15640  004A54  0100               	movlb	0	; () banked
 15641  004A56  47AB               	rlncf	??_PortTestDC& (0+255),f,b
 15642  004A58  47AB               	rlncf	??_PortTestDC& (0+255),f,b
 15643  004A5A  508A               	movf	3978,w,c	;volatile
 15644  004A5C  0100               	movlb	0	; () banked
 15645  004A5E  19AB               	xorwf	??_PortTestDC& (0+255),w,b
 15646  004A60  0BFB               	andlw	-5
 15647  004A62  D011               	goto	L14
 15648  004A64                     l9093:
 15649                           
 15650                           ; BSR set to: 0
 15651                           ;Test.c: 456: else if(PORTB >> 4 == 0b0001){
 15652  004A64  3881               	swapf	3969,w,c	;volatile
 15653  004A66  0B0F               	andlw	15
 15654  004A68  06E8               	decf	wreg,f,c
 15655  004A6A  A4D8               	btfss	status,2,c
 15656  004A6C  D00F               	goto	l9097
 15657                           
 15658                           ; BSR set to: 0
 15659                           ;Test.c: 458: LATBbits.LATB0 = !LATBbits.LATB0;
 15660  004A6E  B08A               	btfsc	3978,0,c	;volatile
 15661  004A70  D004               	goto	u8600
 15662  004A72  0100               	movlb	0	; () banked
 15663  004A74  6BAB               	clrf	??_PortTestDC& (0+255),b
 15664  004A76  2BAB               	incf	??_PortTestDC& (0+255),f,b
 15665  004A78  D002               	goto	u8618
 15666  004A7A                     u8600:
 15667  004A7A  0100               	movlb	0	; () banked
 15668  004A7C  6BAB               	clrf	??_PortTestDC& (0+255),b
 15669  004A7E                     u8618:
 15670  004A7E  508A               	movf	3978,w,c	;volatile
 15671  004A80  0100               	movlb	0	; () banked
 15672  004A82  19AB               	xorwf	??_PortTestDC& (0+255),w,b
 15673  004A84  0BFE               	andlw	-2
 15674  004A86                     L14:
 15675  004A86  19AB               	xorwf	??_PortTestDC& (0+255),w,b
 15676  004A88  6E8A               	movwf	3978,c	;volatile
 15677                           
 15678                           ;Test.c: 459: }
 15679  004A8A  D013               	goto	l1430
 15680  004A8C                     l9097:
 15681                           
 15682                           ; BSR set to: 0
 15683                           ;Test.c: 460: else if(PORTB >> 4 == 0b0100){
 15684  004A8C  3881               	swapf	3969,w,c	;volatile
 15685  004A8E  0B0F               	andlw	15
 15686  004A90  0A04               	xorlw	4
 15687  004A92  A4D8               	btfss	status,2,c
 15688  004A94  D005               	goto	l9101
 15689                           
 15690                           ; BSR set to: 0
 15691                           ;Test.c: 461: LATBbits.LATB2 = 1;
 15692  004A96  848A               	bsf	3978,2,c	;volatile
 15693  004A98                     l1422:
 15694  004A98  B281               	btfsc	3969,1,c	;volatile
 15695  004A9A  D7FE               	goto	l1422
 15696                           
 15697                           ;Test.c: 463: LATBbits.LATB2 = 0;
 15698  004A9C  948A               	bcf	3978,2,c	;volatile
 15699                           
 15700                           ;Test.c: 464: }
 15701  004A9E  D009               	goto	l1430
 15702  004AA0                     l9101:
 15703                           
 15704                           ;Test.c: 465: else if(PORTB >> 4 == 0b0101){
 15705  004AA0  3881               	swapf	3969,w,c	;volatile
 15706  004AA2  0B0F               	andlw	15
 15707  004AA4  0A05               	xorlw	5
 15708  004AA6  A4D8               	btfss	status,2,c
 15709  004AA8  D004               	goto	l1430
 15710                           
 15711                           ;Test.c: 466: LATBbits.LATB0 = 1;
 15712  004AAA  808A               	bsf	3978,0,c	;volatile
 15713  004AAC                     l1427:
 15714  004AAC  B281               	btfsc	3969,1,c	;volatile
 15715  004AAE  D7FE               	goto	l1427
 15716                           
 15717                           ;Test.c: 468: LATBbits.LATB0 = 0;
 15718  004AB0  908A               	bcf	3978,0,c	;volatile
 15719  004AB2                     l1430:
 15720  004AB2  A281               	btfss	3969,1,c	;volatile
 15721  004AB4  D7B8               	goto	l1411
 15722  004AB6  D7FD               	goto	l1430
 15723  004AB8                     __end_of_PortTestDC:
 15724                           	opt stack 0
 15725                           tblptru	equ	0xFF8
 15726                           tblptrh	equ	0xFF7
 15727                           tblptrl	equ	0xFF6
 15728                           tablat	equ	0xFF5
 15729                           prodh	equ	0xFF4
 15730                           prodl	equ	0xFF3
 15731                           intcon	equ	0xFF2
 15732                           intcon2	equ	0xFF1
 15733                           intcon3	equ	0xFF0
 15734                           postinc0	equ	0xFEE
 15735                           wreg	equ	0xFE8
 15736                           postdec1	equ	0xFE5
 15737                           fsr1l	equ	0xFE1
 15738                           indf2	equ	0xFDF
 15739                           postinc2	equ	0xFDE
 15740                           postdec2	equ	0xFDD
 15741                           fsr2h	equ	0xFDA
 15742                           fsr2l	equ	0xFD9
 15743                           status	equ	0xFD8
 15744                           
 15745 ;; *************** function _PlatformTest *****************
 15746 ;; Defined at:
 15747 ;;		line 474 in file "Test.c"
 15748 ;; Parameters:    Size  Location     Type
 15749 ;;		None
 15750 ;; Auto vars:     Size  Location     Type
 15751 ;;  i               2   51[BANK0 ] int 
 15752 ;;  i               2   49[BANK0 ] int 
 15753 ;;  res             2   47[BANK0 ] int 
 15754 ;;  res             2   45[BANK0 ] int 
 15755 ;;  on              2   53[BANK0 ] int 
 15756 ;; Return value:  Size  Location     Type
 15757 ;;                  1    wreg      void 
 15758 ;; Registers used:
 15759 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15760 ;; Tracked objects:
 15761 ;;		On entry : 0/0
 15762 ;;		On exit  : 0/0
 15763 ;;		Unchanged: 0/0
 15764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15766 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15767 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15768 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15769 ;;Total ram usage:       12 bytes
 15770 ;; Hardware stack levels used:    1
 15771 ;; Hardware stack levels required when called:   10
 15772 ;; This function calls:
 15773 ;;		_lcdInst
 15774 ;;		_printf
 15775 ;;		_readADC
 15776 ;;		_stopSignals
 15777 ;; This function is called by:
 15778 ;;		_Test
 15779 ;; This function uses a non-reentrant model
 15780 ;;
 15781                           
 15782                           	psect	text49
 15783  002F8E                     __ptext49:
 15784                           	opt stack 0
 15785  002F8E                     _PlatformTest:
 15786                           	opt stack 19
 15787                           
 15788                           ;Test.c: 475: LATCbits.LATC5 = 1;
 15789                           
 15790                           ;incstack = 0
 15791  002F8E  8A8B               	bsf	3979,5,c	;volatile
 15792                           
 15793                           ;Test.c: 477: machine_state = Sorting_state;
 15794  002F90  0E01               	movlw	1
 15795  002F92  0100               	movlb	0	; () banked
 15796  002F94  6FFC               	movwf	_machine_state& (0+255),b
 15797                           
 15798                           ;Test.c: 478: f_arm_position = 0;
 15799  002F96  0E00               	movlw	0
 15800  002F98  0100               	movlb	0	; () banked
 15801  002F9A  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15802  002F9C  0E00               	movlw	0
 15803  002F9E  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 15804                           
 15805                           ;Test.c: 479: timer2_counter = 0;
 15806  002FA0  0E00               	movlw	0
 15807  002FA2  6E74               	movwf	_timer2_counter+1,c	;volatile
 15808  002FA4  0E00               	movlw	0
 15809  002FA6  6E73               	movwf	_timer2_counter,c	;volatile
 15810                           
 15811                           ; BSR set to: 0
 15812                           ;Test.c: 480: LATBbits.LATB3 = 0;
 15813  002FA8  968A               	bcf	3978,3,c	;volatile
 15814                           
 15815                           ; BSR set to: 0
 15816                           ;Test.c: 481: TMR2ON = 1;
 15817  002FAA  84CA               	bsf	4042,2,c	;volatile
 15818                           
 15819                           ;Test.c: 482: was_low_2 = 0;
 15820  002FAC  0E00               	movlw	0
 15821  002FAE  6E7A               	movwf	_was_low_2+1,c	;volatile
 15822  002FB0  0E00               	movlw	0
 15823  002FB2  6E79               	movwf	_was_low_2,c	;volatile
 15824                           
 15825                           ;Test.c: 484: int on = 1;
 15826  002FB4  0E00               	movlw	0
 15827  002FB6  0100               	movlb	0	; () banked
 15828  002FB8  6FB6               	movwf	(PlatformTest@on+1)& (0+255),b
 15829  002FBA  0E01               	movlw	1
 15830  002FBC  6FB5               	movwf	PlatformTest@on& (0+255),b
 15831                           
 15832                           ; BSR set to: 0
 15833                           ;Test.c: 485: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15834  002FBE  0E01               	movlw	1
 15835  002FC0  ECD1  F02F         	call	_lcdInst
 15836  002FC4  0E68               	movlw	104
 15837  002FC6  0100               	movlb	0	; () banked
 15838  002FC8  6FAB               	movwf	??_PlatformTest& (0+255),b
 15839  002FCA  0EE4               	movlw	228
 15840  002FCC                     u11897:
 15841  002FCC  2EE8               	decfsz	wreg,f,c
 15842  002FCE  D7FE               	bra	u11897
 15843  002FD0  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15844  002FD2  D7FC               	bra	u11897
 15845  002FD4  F000               	nop	
 15846  002FD6  0E80               	movlw	128
 15847  002FD8  ECD1  F02F         	call	_lcdInst
 15848                           
 15849                           ;Test.c: 486: printf("1: DC | A: ARM  ");
 15850  002FDC  0E2A               	movlw	low STR_114
 15851  002FDE  0100               	movlb	0	; () banked
 15852  002FE0  6F8E               	movwf	printf@f& (0+255),b
 15853  002FE2  0EFC               	movlw	high STR_114
 15854  002FE4  0100               	movlb	0	; () banked
 15855  002FE6  6F8F               	movwf	(printf@f+1)& (0+255),b
 15856  002FE8  EC67  F00E         	call	_printf	;wreg free
 15857                           
 15858                           ;Test.c: 488: while(PORTBbits.RB1 == 0){
 15859  002FEC  D058               	goto	l9181
 15860  002FEE                     l9163:
 15861                           
 15862                           ;Test.c: 489: readADC(0);
 15863  002FEE  0E00               	movlw	0
 15864  002FF0  ECBC  F02E         	call	_readADC
 15865                           
 15866                           ;Test.c: 490: int res = ADRESH<<8 | ADRESL;
 15867  002FF4  50C3               	movf	4035,w,c	;volatile
 15868  002FF6  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15869  002FFA  0100               	movlb	0	; () banked
 15870  002FFC  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15871  002FFE  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15872  003002  0100               	movlb	0	; () banked
 15873  003004  6BAB               	clrf	??_PlatformTest& (0+255),b
 15874  003006  0100               	movlb	0	; () banked
 15875  003008  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15876  00300A  0100               	movlb	0	; () banked
 15877  00300C  6FAD               	movwf	PlatformTest@res& (0+255),b
 15878  00300E  0100               	movlb	0	; () banked
 15879  003010  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15880  003012  0100               	movlb	0	; () banked
 15881  003014  6FAE               	movwf	(PlatformTest@res+1)& (0+255),b
 15882                           
 15883                           ; BSR set to: 0
 15884                           ;Test.c: 491: IR_signal = (res > 800) ? 1 : 0;
 15885  003016  0100               	movlb	0	; () banked
 15886  003018  BFAE               	btfsc	(PlatformTest@res+1)& (0+255),7,b
 15887  00301A  D00A               	goto	u8730
 15888  00301C  0E21               	movlw	33
 15889  00301E  0100               	movlb	0	; () banked
 15890  003020  5DAD               	subwf	PlatformTest@res& (0+255),w,b
 15891  003022  0E03               	movlw	3
 15892  003024  0100               	movlb	0	; () banked
 15893  003026  59AE               	subwfb	(PlatformTest@res+1)& (0+255),w,b
 15894  003028  A0D8               	btfss	status,0,c
 15895  00302A  D002               	goto	u8730
 15896  00302C  0E01               	movlw	1
 15897  00302E  D001               	goto	u8740
 15898  003030                     u8730:
 15899  003030  0E00               	movlw	0
 15900  003032                     u8740:
 15901  003032  0100               	movlb	0	; () banked
 15902  003034  6FE0               	movwf	_IR_signal& (0+255),b
 15903  003036  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 15904                           
 15905                           ;Test.c: 493: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15906  003038  0E01               	movlw	1
 15907  00303A  ECD1  F02F         	call	_lcdInst
 15908  00303E  0E68               	movlw	104
 15909  003040  0100               	movlb	0	; () banked
 15910  003042  6FAB               	movwf	??_PlatformTest& (0+255),b
 15911  003044  0EE4               	movlw	228
 15912  003046                     u11907:
 15913  003046  2EE8               	decfsz	wreg,f,c
 15914  003048  D7FE               	bra	u11907
 15915  00304A  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15916  00304C  D7FC               	bra	u11907
 15917  00304E  F000               	nop	
 15918  003050  0E80               	movlw	128
 15919  003052  ECD1  F02F         	call	_lcdInst
 15920                           
 15921                           ;Test.c: 494: printf("1: DC | A: ARM  ");
 15922  003056  0E2A               	movlw	low STR_114
 15923  003058  0100               	movlb	0	; () banked
 15924  00305A  6F8E               	movwf	printf@f& (0+255),b
 15925  00305C  0EFC               	movlw	high STR_114
 15926  00305E  0100               	movlb	0	; () banked
 15927  003060  6F8F               	movwf	(printf@f+1)& (0+255),b
 15928  003062  EC67  F00E         	call	_printf	;wreg free
 15929                           
 15930                           ;Test.c: 495: lcdInst(0b11000000);;
 15931  003066  0EC0               	movlw	192
 15932  003068  ECD1  F02F         	call	_lcdInst
 15933                           
 15934                           ;Test.c: 496: printf("5:H|6:L|IR:%d   ", res);
 15935  00306C  0E19               	movlw	low STR_116
 15936  00306E  0100               	movlb	0	; () banked
 15937  003070  6F8E               	movwf	printf@f& (0+255),b
 15938  003072  0EFC               	movlw	high STR_116
 15939  003074  0100               	movlb	0	; () banked
 15940  003076  6F8F               	movwf	(printf@f+1)& (0+255),b
 15941  003078  C0AD  F090         	movff	PlatformTest@res,?_printf+2
 15942  00307C  C0AE  F091         	movff	PlatformTest@res+1,?_printf+3
 15943  003080  EC67  F00E         	call	_printf	;wreg free
 15944                           
 15945                           ;Test.c: 497: _delay((unsigned long)((100)*(32000000/4000.0)));
 15946  003084  0E05               	movlw	5
 15947  003086  0100               	movlb	0	; () banked
 15948  003088  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15949  00308A  0E0F               	movlw	15
 15950  00308C  0100               	movlb	0	; () banked
 15951  00308E  6FAB               	movwf	??_PlatformTest& (0+255),b
 15952  003090  0EF1               	movlw	241
 15953  003092                     u11917:
 15954  003092  2EE8               	decfsz	wreg,f,c
 15955  003094  D7FE               	bra	u11917
 15956  003096  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15957  003098  D7FC               	bra	u11917
 15958  00309A  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15959  00309C  D7FA               	bra	u11917
 15960  00309E                     l9181:
 15961  00309E  B281               	btfsc	3969,1,c	;volatile
 15962  0030A0  D059               	goto	l9201
 15963  0030A2  D7A5               	goto	l9163
 15964  0030A4                     l9183:
 15965                           
 15966                           ;Test.c: 502: readADC(0);
 15967  0030A4  0E00               	movlw	0
 15968  0030A6  ECBC  F02E         	call	_readADC
 15969                           
 15970                           ;Test.c: 503: int res = ADRESH<<8 | ADRESL;
 15971  0030AA  50C3               	movf	4035,w,c	;volatile
 15972  0030AC  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15973  0030B0  0100               	movlb	0	; () banked
 15974  0030B2  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15975  0030B4  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15976  0030B8  0100               	movlb	0	; () banked
 15977  0030BA  6BAB               	clrf	??_PlatformTest& (0+255),b
 15978  0030BC  0100               	movlb	0	; () banked
 15979  0030BE  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15980  0030C0  0100               	movlb	0	; () banked
 15981  0030C2  6FAF               	movwf	PlatformTest@res_1799& (0+255),b
 15982  0030C4  0100               	movlb	0	; () banked
 15983  0030C6  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15984  0030C8  0100               	movlb	0	; () banked
 15985  0030CA  6FB0               	movwf	(PlatformTest@res_1799+1)& (0+255),b
 15986                           
 15987                           ; BSR set to: 0
 15988                           ;Test.c: 504: IR_signal = (res > 800) ? 1 : 0;
 15989  0030CC  0100               	movlb	0	; () banked
 15990  0030CE  BFB0               	btfsc	(PlatformTest@res_1799+1)& (0+255),7,b
 15991  0030D0  D00A               	goto	u8760
 15992  0030D2  0E21               	movlw	33
 15993  0030D4  0100               	movlb	0	; () banked
 15994  0030D6  5DAF               	subwf	PlatformTest@res_1799& (0+255),w,b
 15995  0030D8  0E03               	movlw	3
 15996  0030DA  0100               	movlb	0	; () banked
 15997  0030DC  59B0               	subwfb	(PlatformTest@res_1799+1)& (0+255),w,b
 15998  0030DE  A0D8               	btfss	status,0,c
 15999  0030E0  D002               	goto	u8760
 16000  0030E2  0E01               	movlw	1
 16001  0030E4  D001               	goto	u8770
 16002  0030E6                     u8760:
 16003  0030E6  0E00               	movlw	0
 16004  0030E8                     u8770:
 16005  0030E8  0100               	movlb	0	; () banked
 16006  0030EA  6FE0               	movwf	_IR_signal& (0+255),b
 16007  0030EC  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 16008                           
 16009                           ;Test.c: 506: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16010  0030EE  0E01               	movlw	1
 16011  0030F0  ECD1  F02F         	call	_lcdInst
 16012  0030F4  0E68               	movlw	104
 16013  0030F6  0100               	movlb	0	; () banked
 16014  0030F8  6FAB               	movwf	??_PlatformTest& (0+255),b
 16015  0030FA  0EE4               	movlw	228
 16016  0030FC                     u11927:
 16017  0030FC  2EE8               	decfsz	wreg,f,c
 16018  0030FE  D7FE               	bra	u11927
 16019  003100  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16020  003102  D7FC               	bra	u11927
 16021  003104  F000               	nop	
 16022  003106  0E80               	movlw	128
 16023  003108  ECD1  F02F         	call	_lcdInst
 16024                           
 16025                           ;Test.c: 507: printf("1: DC | A: ARM  ");
 16026  00310C  0E2A               	movlw	low STR_114
 16027  00310E  0100               	movlb	0	; () banked
 16028  003110  6F8E               	movwf	printf@f& (0+255),b
 16029  003112  0EFC               	movlw	high STR_114
 16030  003114  0100               	movlb	0	; () banked
 16031  003116  6F8F               	movwf	(printf@f+1)& (0+255),b
 16032  003118  EC67  F00E         	call	_printf	;wreg free
 16033                           
 16034                           ;Test.c: 508: lcdInst(0b11000000);;
 16035  00311C  0EC0               	movlw	192
 16036  00311E  ECD1  F02F         	call	_lcdInst
 16037                           
 16038                           ;Test.c: 509: printf("5:H|6:L|IR:%d   ", res);
 16039  003122  0E19               	movlw	low STR_116
 16040  003124  0100               	movlb	0	; () banked
 16041  003126  6F8E               	movwf	printf@f& (0+255),b
 16042  003128  0EFC               	movlw	high STR_116
 16043  00312A  0100               	movlb	0	; () banked
 16044  00312C  6F8F               	movwf	(printf@f+1)& (0+255),b
 16045  00312E  C0AF  F090         	movff	PlatformTest@res_1799,?_printf+2
 16046  003132  C0B0  F091         	movff	PlatformTest@res_1799+1,?_printf+3
 16047  003136  EC67  F00E         	call	_printf	;wreg free
 16048                           
 16049                           ;Test.c: 510: _delay((unsigned long)((100)*(32000000/4000.0)));
 16050  00313A  0E05               	movlw	5
 16051  00313C  0100               	movlb	0	; () banked
 16052  00313E  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 16053  003140  0E0F               	movlw	15
 16054  003142  0100               	movlb	0	; () banked
 16055  003144  6FAB               	movwf	??_PlatformTest& (0+255),b
 16056  003146  0EF1               	movlw	241
 16057  003148                     u11937:
 16058  003148  2EE8               	decfsz	wreg,f,c
 16059  00314A  D7FE               	bra	u11937
 16060  00314C  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16061  00314E  D7FC               	bra	u11937
 16062  003150  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 16063  003152  D7FA               	bra	u11937
 16064  003154                     l9201:
 16065  003154  A281               	btfss	3969,1,c	;volatile
 16066  003156  D7A6               	goto	l9183
 16067                           
 16068                           ;Test.c: 511: }
 16069                           ;Test.c: 512: if(PORTB >> 4 == 0b1111){
 16070  003158  3881               	swapf	3969,w,c	;volatile
 16071  00315A  0B0F               	andlw	15
 16072  00315C  0A0F               	xorlw	15
 16073  00315E  B4D8               	btfsc	status,2,c
 16074  003160  D09A               	goto	l1445
 16075                           
 16076                           ;Test.c: 515: else if(PORTB >> 4 == 0b0000){
 16077                           
 16078                           ;Test.c: 514: }
 16079                           
 16080                           ;Test.c: 513: break;
 16081  003162  CF81 F0AB          	movff	3969,??_PlatformTest	;volatile
 16082  003166  0100               	movlb	0	; () banked
 16083  003168  3BAB               	swapf	??_PlatformTest& (0+255),f,b
 16084  00316A  0E0F               	movlw	15
 16085  00316C  17AB               	andwf	??_PlatformTest& (0+255),f,b
 16086  00316E  A4D8               	btfss	status,2,c
 16087  003170  D012               	goto	l9213
 16088                           
 16089                           ; BSR set to: 0
 16090                           ;Test.c: 516: LATBbits.LATB2 = !LATBbits.LATB2;
 16091  003172  B48A               	btfsc	3978,2,c	;volatile
 16092  003174  D004               	goto	u8810
 16093  003176  0100               	movlb	0	; () banked
 16094  003178  6BAB               	clrf	??_PlatformTest& (0+255),b
 16095  00317A  2BAB               	incf	??_PlatformTest& (0+255),f,b
 16096  00317C  D002               	goto	u8828
 16097  00317E                     u8810:
 16098  00317E  0100               	movlb	0	; () banked
 16099  003180  6BAB               	clrf	??_PlatformTest& (0+255),b
 16100  003182                     u8828:
 16101  003182  0100               	movlb	0	; () banked
 16102  003184  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 16103  003186  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 16104  003188  508A               	movf	3978,w,c	;volatile
 16105  00318A  0100               	movlb	0	; () banked
 16106  00318C  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 16107  00318E  0BFB               	andlw	-5
 16108  003190  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 16109  003192  6E8A               	movwf	3978,c	;volatile
 16110                           
 16111                           ;Test.c: 517: }
 16112  003194  D07D               	goto	l1460
 16113  003196                     l9213:
 16114                           
 16115                           ; BSR set to: 0
 16116                           ;Test.c: 518: else if(PORTB >> 4 == 0b0011){
 16117  003196  3881               	swapf	3969,w,c	;volatile
 16118  003198  0B0F               	andlw	15
 16119  00319A  0A03               	xorlw	3
 16120  00319C  A4D8               	btfss	status,2,c
 16121  00319E  D020               	goto	l9225
 16122                           
 16123                           ; BSR set to: 0
 16124                           ;Test.c: 519: if(on){
 16125  0031A0  0100               	movlb	0	; () banked
 16126  0031A2  51B5               	movf	PlatformTest@on& (0+255),w,b
 16127  0031A4  0100               	movlb	0	; () banked
 16128  0031A6  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 16129  0031A8  B4D8               	btfsc	status,2,c
 16130  0031AA  D010               	goto	l9221
 16131                           
 16132                           ; BSR set to: 0
 16133                           ;Test.c: 520: f_arm_position = 1;
 16134  0031AC  0E00               	movlw	0
 16135  0031AE  0100               	movlb	0	; () banked
 16136  0031B0  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 16137  0031B2  0E01               	movlw	1
 16138  0031B4  D00F               	goto	L15
 16139  0031B6                     l9219:
 16140                           
 16141                           ; BSR set to: 0
 16142                           ;Test.c: 521: on = !on;
 16143  0031B6  0100               	movlb	0	; () banked
 16144  0031B8  51B5               	movf	PlatformTest@on& (0+255),w,b
 16145  0031BA  0100               	movlb	0	; () banked
 16146  0031BC  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 16147  0031BE  A4D8               	btfss	status,2,c
 16148  0031C0  D00D               	goto	u8870
 16149  0031C2  D00A               	goto	u8871
 16150  0031C4                     u8860:
 16151  0031C4  0100               	movlb	0	; () banked
 16152  0031C6  6FB5               	movwf	PlatformTest@on& (0+255),b
 16153  0031C8  6BB6               	clrf	(PlatformTest@on+1)& (0+255),b
 16154                           
 16155                           ;Test.c: 522: }
 16156  0031CA  D062               	goto	l1460
 16157  0031CC                     l9221:
 16158                           
 16159                           ; BSR set to: 0
 16160                           ;Test.c: 523: else{
 16161                           ;Test.c: 524: f_arm_position = 0;
 16162  0031CC  0E00               	movlw	0
 16163  0031CE  0100               	movlb	0	; () banked
 16164  0031D0  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 16165  0031D2  0E00               	movlw	0
 16166  0031D4                     L15:
 16167  0031D4  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 16168  0031D6  D7EF               	goto	l9219
 16169  0031D8                     u8871:
 16170  0031D8  0E01               	movlw	1
 16171  0031DA  D7F4               	goto	u8860
 16172  0031DC                     u8870:
 16173  0031DC  0E00               	movlw	0
 16174  0031DE  D7F2               	goto	u8860
 16175  0031E0                     l9225:
 16176                           
 16177                           ; BSR set to: 0
 16178                           ;Test.c: 528: else if(PORTB >> 4 == 0b0101){
 16179  0031E0  3881               	swapf	3969,w,c	;volatile
 16180  0031E2  0B0F               	andlw	15
 16181  0031E4  0A05               	xorlw	5
 16182  0031E6  A4D8               	btfss	status,2,c
 16183  0031E8  D027               	goto	l9239
 16184                           
 16185                           ; BSR set to: 0
 16186                           ;Test.c: 530: for(int i = 0; i<30; i++){
 16187  0031EA  0E00               	movlw	0
 16188  0031EC  0100               	movlb	0	; () banked
 16189  0031EE  6FB2               	movwf	(PlatformTest@i+1)& (0+255),b
 16190  0031F0  0E00               	movlw	0
 16191  0031F2  6FB1               	movwf	PlatformTest@i& (0+255),b
 16192  0031F4                     l9229:
 16193                           
 16194                           ; BSR set to: 0
 16195  0031F4  0100               	movlb	0	; () banked
 16196  0031F6  BFB2               	btfsc	(PlatformTest@i+1)& (0+255),7,b
 16197  0031F8  D008               	goto	l1454
 16198  0031FA  0100               	movlb	0	; () banked
 16199  0031FC  51B2               	movf	(PlatformTest@i+1)& (0+255),w,b
 16200  0031FE  E148               	bnz	l1460
 16201  003200  0E1E               	movlw	30
 16202  003202  0100               	movlb	0	; () banked
 16203  003204  5DB1               	subwf	PlatformTest@i& (0+255),w,b
 16204  003206  B0D8               	btfsc	status,0,c
 16205  003208  D043               	goto	l1460
 16206  00320A                     l1454:
 16207                           
 16208                           ; BSR set to: 0
 16209                           ;Test.c: 531: LATAbits.LATA4 = 1;
 16210  00320A  8889               	bsf	3977,4,c	;volatile
 16211                           
 16212                           ; BSR set to: 0
 16213                           ;Test.c: 532: _delay((unsigned long)((7500)*(32000000/4000000.0)));
 16214  00320C  0E4E               	movlw	78
 16215  00320E  0100               	movlb	0	; () banked
 16216  003210  6FAB               	movwf	??_PlatformTest& (0+255),b
 16217  003212  0EEB               	movlw	235
 16218  003214                     u11947:
 16219  003214  2EE8               	decfsz	wreg,f,c
 16220  003216  D7FE               	bra	u11947
 16221  003218  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16222  00321A  D7FC               	bra	u11947
 16223                           
 16224                           ;Test.c: 533: LATAbits.LATA4 = 0;
 16225  00321C  9889               	bcf	3977,4,c	;volatile
 16226                           
 16227                           ;Test.c: 534: _delay((unsigned long)((2500)*(32000000/4000000.0)));
 16228  00321E  0E1A               	movlw	26
 16229  003220  0100               	movlb	0	; () banked
 16230  003222  6FAB               	movwf	??_PlatformTest& (0+255),b
 16231  003224  0EF8               	movlw	248
 16232  003226                     u11957:
 16233  003226  2EE8               	decfsz	wreg,f,c
 16234  003228  D7FE               	bra	u11957
 16235  00322A  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16236  00322C  D7FC               	bra	u11957
 16237  00322E  F000               	nop	
 16238  003230  0100               	movlb	0	; () banked
 16239  003232  4BB1               	infsnz	PlatformTest@i& (0+255),f,b
 16240  003234  2BB2               	incf	(PlatformTest@i+1)& (0+255),f,b
 16241  003236  D7DE               	goto	l9229
 16242  003238                     l9239:
 16243                           
 16244                           ; BSR set to: 0
 16245                           ;Test.c: 537: else if (PORTB >> 4 == 0b0110){
 16246  003238  3881               	swapf	3969,w,c	;volatile
 16247  00323A  0B0F               	andlw	15
 16248  00323C  0A06               	xorlw	6
 16249  00323E  A4D8               	btfss	status,2,c
 16250  003240  D027               	goto	l1460
 16251                           
 16252                           ; BSR set to: 0
 16253                           ;Test.c: 539: for(int i = 0; i<30; i++){
 16254  003242  0E00               	movlw	0
 16255  003244  0100               	movlb	0	; () banked
 16256  003246  6FB4               	movwf	(PlatformTest@i_1803+1)& (0+255),b
 16257  003248  0E00               	movlw	0
 16258  00324A  6FB3               	movwf	PlatformTest@i_1803& (0+255),b
 16259  00324C                     l9243:
 16260                           
 16261                           ; BSR set to: 0
 16262  00324C  0100               	movlb	0	; () banked
 16263  00324E  BFB4               	btfsc	(PlatformTest@i_1803+1)& (0+255),7,b
 16264  003250  D008               	goto	l1458
 16265  003252  0100               	movlb	0	; () banked
 16266  003254  51B4               	movf	(PlatformTest@i_1803+1)& (0+255),w,b
 16267  003256  E11C               	bnz	l1460
 16268  003258  0E1E               	movlw	30
 16269  00325A  0100               	movlb	0	; () banked
 16270  00325C  5DB3               	subwf	PlatformTest@i_1803& (0+255),w,b
 16271  00325E  B0D8               	btfsc	status,0,c
 16272  003260  D017               	goto	l1460
 16273  003262                     l1458:
 16274                           
 16275                           ; BSR set to: 0
 16276                           ;Test.c: 540: LATAbits.LATA4 = 1;
 16277  003262  8889               	bsf	3977,4,c	;volatile
 16278                           
 16279                           ; BSR set to: 0
 16280                           ;Test.c: 541: _delay((unsigned long)((5800)*(32000000/4000000.0)));
 16281  003264  0E3D               	movlw	61
 16282  003266  0100               	movlb	0	; () banked
 16283  003268  6FAB               	movwf	??_PlatformTest& (0+255),b
 16284  00326A  0E41               	movlw	65
 16285  00326C                     u11967:
 16286  00326C  2EE8               	decfsz	wreg,f,c
 16287  00326E  D7FE               	bra	u11967
 16288  003270  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16289  003272  D7FC               	bra	u11967
 16290                           
 16291                           ;Test.c: 542: LATAbits.LATA4 = 0;
 16292  003274  9889               	bcf	3977,4,c	;volatile
 16293                           
 16294                           ;Test.c: 543: _delay((unsigned long)((4200)*(32000000/4000000.0)));
 16295  003276  0E2C               	movlw	44
 16296  003278  0100               	movlb	0	; () banked
 16297  00327A  6FAB               	movwf	??_PlatformTest& (0+255),b
 16298  00327C  0EA1               	movlw	161
 16299  00327E                     u11977:
 16300  00327E  2EE8               	decfsz	wreg,f,c
 16301  003280  D7FE               	bra	u11977
 16302  003282  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16303  003284  D7FC               	bra	u11977
 16304  003286  D000               	nop2	
 16305  003288  0100               	movlb	0	; () banked
 16306  00328A  4BB3               	infsnz	PlatformTest@i_1803& (0+255),f,b
 16307  00328C  2BB4               	incf	(PlatformTest@i_1803+1)& (0+255),f,b
 16308  00328E  D7DE               	goto	l9243
 16309  003290                     l1460:
 16310  003290  A281               	btfss	3969,1,c	;volatile
 16311  003292  D760               	goto	l9201
 16312  003294  D7FD               	goto	l1460
 16313  003296                     l1445:
 16314                           
 16315                           ;Test.c: 548: }
 16316                           ;Test.c: 550: LATCbits.LATC5 = 0;
 16317  003296  9A8B               	bcf	3979,5,c	;volatile
 16318                           
 16319                           ;Test.c: 551: stopSignals();
 16320  003298  EC78  F02F         	call	_stopSignals	;wreg free
 16321                           
 16322                           ;Test.c: 552: machine_state = Testing_state;
 16323  00329C  0E03               	movlw	3
 16324  00329E  0100               	movlb	0	; () banked
 16325  0032A0  6FFC               	movwf	_machine_state& (0+255),b
 16326                           
 16327                           ; BSR set to: 0
 16328  0032A2  0012               	return		;funcret
 16329  0032A4                     __end_of_PlatformTest:
 16330                           	opt stack 0
 16331                           tblptru	equ	0xFF8
 16332                           tblptrh	equ	0xFF7
 16333                           tblptrl	equ	0xFF6
 16334                           tablat	equ	0xFF5
 16335                           prodh	equ	0xFF4
 16336                           prodl	equ	0xFF3
 16337                           intcon	equ	0xFF2
 16338                           intcon2	equ	0xFF1
 16339                           intcon3	equ	0xFF0
 16340                           postinc0	equ	0xFEE
 16341                           wreg	equ	0xFE8
 16342                           postdec1	equ	0xFE5
 16343                           fsr1l	equ	0xFE1
 16344                           indf2	equ	0xFDF
 16345                           postinc2	equ	0xFDE
 16346                           postdec2	equ	0xFDD
 16347                           fsr2h	equ	0xFDA
 16348                           fsr2l	equ	0xFD9
 16349                           status	equ	0xFD8
 16350                           
 16351 ;; *************** function _BothServos *****************
 16352 ;; Defined at:
 16353 ;;		line 379 in file "Test.c"
 16354 ;; Parameters:    Size  Location     Type
 16355 ;;		None
 16356 ;; Auto vars:     Size  Location     Type
 16357 ;;		None
 16358 ;; Return value:  Size  Location     Type
 16359 ;;                  1    wreg      void 
 16360 ;; Registers used:
 16361 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16362 ;; Tracked objects:
 16363 ;;		On entry : 0/0
 16364 ;;		On exit  : 0/0
 16365 ;;		Unchanged: 0/0
 16366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16369 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16370 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16371 ;;Total ram usage:        2 bytes
 16372 ;; Hardware stack levels used:    1
 16373 ;; Hardware stack levels required when called:   10
 16374 ;; This function calls:
 16375 ;;		_initServos
 16376 ;;		_lcdInst
 16377 ;;		_printf
 16378 ;;		_stopSignals
 16379 ;;		_updateServoPosition
 16380 ;; This function is called by:
 16381 ;;		_Test
 16382 ;; This function uses a non-reentrant model
 16383 ;;
 16384                           
 16385                           	psect	text50
 16386  002106                     __ptext50:
 16387                           	opt stack 0
 16388  002106                     _BothServos:
 16389                           	opt stack 19
 16390                           
 16391                           ;Test.c: 380: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16392                           
 16393                           ; BSR set to: 0
 16394                           ;incstack = 0
 16395  002106  0E01               	movlw	1
 16396  002108  ECD1  F02F         	call	_lcdInst
 16397  00210C  0E68               	movlw	104
 16398  00210E  0100               	movlb	0	; () banked
 16399  002110  6FAB               	movwf	??_BothServos& (0+255),b
 16400  002112  0EE4               	movlw	228
 16401  002114                     u11987:
 16402  002114  2EE8               	decfsz	wreg,f,c
 16403  002116  D7FE               	bra	u11987
 16404  002118  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16405  00211A  D7FC               	bra	u11987
 16406  00211C  F000               	nop	
 16407  00211E  0E80               	movlw	128
 16408  002120  ECD1  F02F         	call	_lcdInst
 16409                           
 16410                           ;Test.c: 381: printf("TST: BOTH SERVOS");
 16411  002124  0EC3               	movlw	low STR_111
 16412  002126  0100               	movlb	0	; () banked
 16413  002128  6F8E               	movwf	printf@f& (0+255),b
 16414  00212A  0EFC               	movlw	high STR_111
 16415  00212C  0100               	movlb	0	; () banked
 16416  00212E  6F8F               	movwf	(printf@f+1)& (0+255),b
 16417  002130  EC67  F00E         	call	_printf	;wreg free
 16418                           
 16419                           ;Test.c: 382: TMR1ON = 1;
 16420  002134  80CD               	bsf	4045,0,c	;volatile
 16421                           
 16422                           ;Test.c: 383: TMR3ON = 1;
 16423  002136  80B1               	bsf	4017,0,c	;volatile
 16424                           
 16425                           ;Test.c: 384: machine_state = Sorting_state;
 16426  002138  0E01               	movlw	1
 16427  00213A  0100               	movlb	0	; () banked
 16428  00213C  6FFC               	movwf	_machine_state& (0+255),b
 16429                           
 16430                           ; BSR set to: 0
 16431                           ;Test.c: 385: was_low_1 = 0;
 16432  00213E  0E00               	movlw	0
 16433  002140  6E78               	movwf	_was_low_1+1,c	;volatile
 16434  002142  0E00               	movlw	0
 16435  002144  6E77               	movwf	_was_low_1,c	;volatile
 16436                           
 16437                           ; BSR set to: 0
 16438                           ;Test.c: 386: was_low_3 = 0;
 16439  002146  0E00               	movlw	0
 16440  002148  6E7C               	movwf	_was_low_3+1,c	;volatile
 16441  00214A  0E00               	movlw	0
 16442  00214C  6E7B               	movwf	_was_low_3,c	;volatile
 16443                           
 16444                           ; BSR set to: 0
 16445                           ;Test.c: 392: initServos();
 16446  00214E  EC88  F029         	call	_initServos	;wreg free
 16447                           
 16448                           ;Test.c: 393: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16449  002152  0E3D               	movlw	61
 16450  002154  0100               	movlb	0	; () banked
 16451  002156  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16452  002158  0EE1               	movlw	225
 16453  00215A  0100               	movlb	0	; () banked
 16454  00215C  6FAB               	movwf	??_BothServos& (0+255),b
 16455  00215E  0E3F               	movlw	63
 16456  002160                     u11997:
 16457  002160  2EE8               	decfsz	wreg,f,c
 16458  002162  D7FE               	bra	u11997
 16459  002164  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16460  002166  D7FC               	bra	u11997
 16461  002168  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16462  00216A  D7FA               	bra	u11997
 16463  00216C  D000               	nop2	
 16464                           
 16465                           ;Test.c: 395: updateServoPosition(500, 1);
 16466  00216E  0E01               	movlw	1
 16467  002170  0100               	movlb	0	; () banked
 16468  002172  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16469  002174  0EF4               	movlw	244
 16470  002176  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16471  002178  0E00               	movlw	0
 16472  00217A  0100               	movlb	0	; () banked
 16473  00217C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16474  00217E  0E01               	movlw	1
 16475  002180  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16476  002182  EC49  F029         	call	_updateServoPosition	;wreg free
 16477                           
 16478                           ;Test.c: 396: updateServoPosition(1050, 3);
 16479  002186  0E04               	movlw	4
 16480  002188  0100               	movlb	0	; () banked
 16481  00218A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16482  00218C  0E1A               	movlw	26
 16483  00218E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16484  002190  0E00               	movlw	0
 16485  002192  0100               	movlb	0	; () banked
 16486  002194  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16487  002196  0E03               	movlw	3
 16488  002198  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16489  00219A  EC49  F029         	call	_updateServoPosition	;wreg free
 16490                           
 16491                           ;Test.c: 397: _delay((unsigned long)((750)*(32000000/4000.0)));
 16492  00219E  0E1F               	movlw	31
 16493  0021A0  0100               	movlb	0	; () banked
 16494  0021A2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16495  0021A4  0E71               	movlw	113
 16496  0021A6  0100               	movlb	0	; () banked
 16497  0021A8  6FAB               	movwf	??_BothServos& (0+255),b
 16498  0021AA  0E1E               	movlw	30
 16499  0021AC                     u12007:
 16500  0021AC  2EE8               	decfsz	wreg,f,c
 16501  0021AE  D7FE               	bra	u12007
 16502  0021B0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16503  0021B2  D7FC               	bra	u12007
 16504  0021B4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16505  0021B6  D7FA               	bra	u12007
 16506  0021B8  F000               	nop	
 16507                           
 16508                           ;Test.c: 398: updateServoPosition(1260, 3);
 16509  0021BA  0E04               	movlw	4
 16510  0021BC  0100               	movlb	0	; () banked
 16511  0021BE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16512  0021C0  0EEC               	movlw	236
 16513  0021C2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16514  0021C4  0E00               	movlw	0
 16515  0021C6  0100               	movlb	0	; () banked
 16516  0021C8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16517  0021CA  0E03               	movlw	3
 16518  0021CC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16519  0021CE  EC49  F029         	call	_updateServoPosition	;wreg free
 16520                           
 16521                           ;Test.c: 399: _delay((unsigned long)((700)*(32000000/4000.0)));
 16522  0021D2  0E1D               	movlw	29
 16523  0021D4  0100               	movlb	0	; () banked
 16524  0021D6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16525  0021D8  0E69               	movlw	105
 16526  0021DA  0100               	movlb	0	; () banked
 16527  0021DC  6FAB               	movwf	??_BothServos& (0+255),b
 16528  0021DE  0EA5               	movlw	165
 16529  0021E0                     u12017:
 16530  0021E0  2EE8               	decfsz	wreg,f,c
 16531  0021E2  D7FE               	bra	u12017
 16532  0021E4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16533  0021E6  D7FC               	bra	u12017
 16534  0021E8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16535  0021EA  D7FA               	bra	u12017
 16536                           
 16537                           ;Test.c: 400: updateServoPosition(1050, 3);
 16538  0021EC  0E04               	movlw	4
 16539  0021EE  0100               	movlb	0	; () banked
 16540  0021F0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16541  0021F2  0E1A               	movlw	26
 16542  0021F4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16543  0021F6  0E00               	movlw	0
 16544  0021F8  0100               	movlb	0	; () banked
 16545  0021FA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16546  0021FC  0E03               	movlw	3
 16547  0021FE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16548  002200  EC49  F029         	call	_updateServoPosition	;wreg free
 16549                           
 16550                           ;Test.c: 401: _delay((unsigned long)((750)*(32000000/4000.0)));
 16551  002204  0E1F               	movlw	31
 16552  002206  0100               	movlb	0	; () banked
 16553  002208  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16554  00220A  0E71               	movlw	113
 16555  00220C  0100               	movlb	0	; () banked
 16556  00220E  6FAB               	movwf	??_BothServos& (0+255),b
 16557  002210  0E1E               	movlw	30
 16558  002212                     u12027:
 16559  002212  2EE8               	decfsz	wreg,f,c
 16560  002214  D7FE               	bra	u12027
 16561  002216  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16562  002218  D7FC               	bra	u12027
 16563  00221A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16564  00221C  D7FA               	bra	u12027
 16565  00221E  F000               	nop	
 16566                           
 16567                           ;Test.c: 403: updateServoPosition(850, 1);
 16568  002220  0E03               	movlw	3
 16569  002222  0100               	movlb	0	; () banked
 16570  002224  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16571  002226  0E52               	movlw	82
 16572  002228  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16573  00222A  0E00               	movlw	0
 16574  00222C  0100               	movlb	0	; () banked
 16575  00222E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16576  002230  0E01               	movlw	1
 16577  002232  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16578  002234  EC49  F029         	call	_updateServoPosition	;wreg free
 16579                           
 16580                           ;Test.c: 404: updateServoPosition(1050, 3);
 16581  002238  0E04               	movlw	4
 16582  00223A  0100               	movlb	0	; () banked
 16583  00223C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16584  00223E  0E1A               	movlw	26
 16585  002240  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16586  002242  0E00               	movlw	0
 16587  002244  0100               	movlb	0	; () banked
 16588  002246  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16589  002248  0E03               	movlw	3
 16590  00224A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16591  00224C  EC49  F029         	call	_updateServoPosition	;wreg free
 16592                           
 16593                           ;Test.c: 405: _delay((unsigned long)((750)*(32000000/4000.0)));
 16594  002250  0E1F               	movlw	31
 16595  002252  0100               	movlb	0	; () banked
 16596  002254  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16597  002256  0E71               	movlw	113
 16598  002258  0100               	movlb	0	; () banked
 16599  00225A  6FAB               	movwf	??_BothServos& (0+255),b
 16600  00225C  0E1E               	movlw	30
 16601  00225E                     u12037:
 16602  00225E  2EE8               	decfsz	wreg,f,c
 16603  002260  D7FE               	bra	u12037
 16604  002262  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16605  002264  D7FC               	bra	u12037
 16606  002266  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16607  002268  D7FA               	bra	u12037
 16608  00226A  F000               	nop	
 16609                           
 16610                           ;Test.c: 406: updateServoPosition(1260, 3);
 16611  00226C  0E04               	movlw	4
 16612  00226E  0100               	movlb	0	; () banked
 16613  002270  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16614  002272  0EEC               	movlw	236
 16615  002274  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16616  002276  0E00               	movlw	0
 16617  002278  0100               	movlb	0	; () banked
 16618  00227A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16619  00227C  0E03               	movlw	3
 16620  00227E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16621  002280  EC49  F029         	call	_updateServoPosition	;wreg free
 16622                           
 16623                           ;Test.c: 407: _delay((unsigned long)((700)*(32000000/4000.0)));
 16624  002284  0E1D               	movlw	29
 16625  002286  0100               	movlb	0	; () banked
 16626  002288  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16627  00228A  0E69               	movlw	105
 16628  00228C  0100               	movlb	0	; () banked
 16629  00228E  6FAB               	movwf	??_BothServos& (0+255),b
 16630  002290  0EA5               	movlw	165
 16631  002292                     u12047:
 16632  002292  2EE8               	decfsz	wreg,f,c
 16633  002294  D7FE               	bra	u12047
 16634  002296  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16635  002298  D7FC               	bra	u12047
 16636  00229A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16637  00229C  D7FA               	bra	u12047
 16638                           
 16639                           ;Test.c: 408: updateServoPosition(1050, 3);
 16640  00229E  0E04               	movlw	4
 16641  0022A0  0100               	movlb	0	; () banked
 16642  0022A2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16643  0022A4  0E1A               	movlw	26
 16644  0022A6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16645  0022A8  0E00               	movlw	0
 16646  0022AA  0100               	movlb	0	; () banked
 16647  0022AC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16648  0022AE  0E03               	movlw	3
 16649  0022B0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16650  0022B2  EC49  F029         	call	_updateServoPosition	;wreg free
 16651                           
 16652                           ;Test.c: 409: _delay((unsigned long)((750)*(32000000/4000.0)));
 16653  0022B6  0E1F               	movlw	31
 16654  0022B8  0100               	movlb	0	; () banked
 16655  0022BA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16656  0022BC  0E71               	movlw	113
 16657  0022BE  0100               	movlb	0	; () banked
 16658  0022C0  6FAB               	movwf	??_BothServos& (0+255),b
 16659  0022C2  0E1E               	movlw	30
 16660  0022C4                     u12057:
 16661  0022C4  2EE8               	decfsz	wreg,f,c
 16662  0022C6  D7FE               	bra	u12057
 16663  0022C8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16664  0022CA  D7FC               	bra	u12057
 16665  0022CC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16666  0022CE  D7FA               	bra	u12057
 16667  0022D0  F000               	nop	
 16668                           
 16669                           ;Test.c: 411: updateServoPosition(500, 1);
 16670  0022D2  0E01               	movlw	1
 16671  0022D4  0100               	movlb	0	; () banked
 16672  0022D6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16673  0022D8  0EF4               	movlw	244
 16674  0022DA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16675  0022DC  0E00               	movlw	0
 16676  0022DE  0100               	movlb	0	; () banked
 16677  0022E0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16678  0022E2  0E01               	movlw	1
 16679  0022E4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16680  0022E6  EC49  F029         	call	_updateServoPosition	;wreg free
 16681                           
 16682                           ;Test.c: 412: updateServoPosition(1050, 3);
 16683  0022EA  0E04               	movlw	4
 16684  0022EC  0100               	movlb	0	; () banked
 16685  0022EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16686  0022F0  0E1A               	movlw	26
 16687  0022F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16688  0022F4  0E00               	movlw	0
 16689  0022F6  0100               	movlb	0	; () banked
 16690  0022F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16691  0022FA  0E03               	movlw	3
 16692  0022FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16693  0022FE  EC49  F029         	call	_updateServoPosition	;wreg free
 16694                           
 16695                           ;Test.c: 413: _delay((unsigned long)((750)*(32000000/4000.0)));
 16696  002302  0E1F               	movlw	31
 16697  002304  0100               	movlb	0	; () banked
 16698  002306  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16699  002308  0E71               	movlw	113
 16700  00230A  0100               	movlb	0	; () banked
 16701  00230C  6FAB               	movwf	??_BothServos& (0+255),b
 16702  00230E  0E1E               	movlw	30
 16703  002310                     u12067:
 16704  002310  2EE8               	decfsz	wreg,f,c
 16705  002312  D7FE               	bra	u12067
 16706  002314  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16707  002316  D7FC               	bra	u12067
 16708  002318  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16709  00231A  D7FA               	bra	u12067
 16710  00231C  F000               	nop	
 16711                           
 16712                           ;Test.c: 414: updateServoPosition(1260, 3);
 16713  00231E  0E04               	movlw	4
 16714  002320  0100               	movlb	0	; () banked
 16715  002322  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16716  002324  0EEC               	movlw	236
 16717  002326  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16718  002328  0E00               	movlw	0
 16719  00232A  0100               	movlb	0	; () banked
 16720  00232C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16721  00232E  0E03               	movlw	3
 16722  002330  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16723  002332  EC49  F029         	call	_updateServoPosition	;wreg free
 16724                           
 16725                           ;Test.c: 415: _delay((unsigned long)((700)*(32000000/4000.0)));
 16726  002336  0E1D               	movlw	29
 16727  002338  0100               	movlb	0	; () banked
 16728  00233A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16729  00233C  0E69               	movlw	105
 16730  00233E  0100               	movlb	0	; () banked
 16731  002340  6FAB               	movwf	??_BothServos& (0+255),b
 16732  002342  0EA5               	movlw	165
 16733  002344                     u12077:
 16734  002344  2EE8               	decfsz	wreg,f,c
 16735  002346  D7FE               	bra	u12077
 16736  002348  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16737  00234A  D7FC               	bra	u12077
 16738  00234C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16739  00234E  D7FA               	bra	u12077
 16740                           
 16741                           ;Test.c: 416: updateServoPosition(1050, 3);
 16742  002350  0E04               	movlw	4
 16743  002352  0100               	movlb	0	; () banked
 16744  002354  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16745  002356  0E1A               	movlw	26
 16746  002358  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16747  00235A  0E00               	movlw	0
 16748  00235C  0100               	movlb	0	; () banked
 16749  00235E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16750  002360  0E03               	movlw	3
 16751  002362  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16752  002364  EC49  F029         	call	_updateServoPosition	;wreg free
 16753                           
 16754                           ;Test.c: 417: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16755  002368  0E3D               	movlw	61
 16756  00236A  0100               	movlb	0	; () banked
 16757  00236C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16758  00236E  0EE1               	movlw	225
 16759  002370  0100               	movlb	0	; () banked
 16760  002372  6FAB               	movwf	??_BothServos& (0+255),b
 16761  002374  0E3F               	movlw	63
 16762  002376                     u12087:
 16763  002376  2EE8               	decfsz	wreg,f,c
 16764  002378  D7FE               	bra	u12087
 16765  00237A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16766  00237C  D7FC               	bra	u12087
 16767  00237E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16768  002380  D7FA               	bra	u12087
 16769  002382  D000               	nop2	
 16770                           
 16771                           ;Test.c: 419: updateServoPosition(1670, 1);
 16772  002384  0E06               	movlw	6
 16773  002386  0100               	movlb	0	; () banked
 16774  002388  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16775  00238A  0E86               	movlw	134
 16776  00238C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16777  00238E  0E00               	movlw	0
 16778  002390  0100               	movlb	0	; () banked
 16779  002392  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16780  002394  0E01               	movlw	1
 16781  002396  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16782  002398  EC49  F029         	call	_updateServoPosition	;wreg free
 16783                           
 16784                           ;Test.c: 420: updateServoPosition(1050, 3);
 16785  00239C  0E04               	movlw	4
 16786  00239E  0100               	movlb	0	; () banked
 16787  0023A0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16788  0023A2  0E1A               	movlw	26
 16789  0023A4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16790  0023A6  0E00               	movlw	0
 16791  0023A8  0100               	movlb	0	; () banked
 16792  0023AA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16793  0023AC  0E03               	movlw	3
 16794  0023AE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16795  0023B0  EC49  F029         	call	_updateServoPosition	;wreg free
 16796                           
 16797                           ;Test.c: 421: _delay((unsigned long)((750)*(32000000/4000.0)));
 16798  0023B4  0E1F               	movlw	31
 16799  0023B6  0100               	movlb	0	; () banked
 16800  0023B8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16801  0023BA  0E71               	movlw	113
 16802  0023BC  0100               	movlb	0	; () banked
 16803  0023BE  6FAB               	movwf	??_BothServos& (0+255),b
 16804  0023C0  0E1E               	movlw	30
 16805  0023C2                     u12097:
 16806  0023C2  2EE8               	decfsz	wreg,f,c
 16807  0023C4  D7FE               	bra	u12097
 16808  0023C6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16809  0023C8  D7FC               	bra	u12097
 16810  0023CA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16811  0023CC  D7FA               	bra	u12097
 16812  0023CE  F000               	nop	
 16813                           
 16814                           ;Test.c: 422: updateServoPosition(1390, 3);
 16815  0023D0  0E05               	movlw	5
 16816  0023D2  0100               	movlb	0	; () banked
 16817  0023D4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16818  0023D6  0E6E               	movlw	110
 16819  0023D8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16820  0023DA  0E00               	movlw	0
 16821  0023DC  0100               	movlb	0	; () banked
 16822  0023DE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16823  0023E0  0E03               	movlw	3
 16824  0023E2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16825  0023E4  EC49  F029         	call	_updateServoPosition	;wreg free
 16826                           
 16827                           ;Test.c: 423: _delay((unsigned long)((700)*(32000000/4000.0)));
 16828  0023E8  0E1D               	movlw	29
 16829  0023EA  0100               	movlb	0	; () banked
 16830  0023EC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16831  0023EE  0E69               	movlw	105
 16832  0023F0  0100               	movlb	0	; () banked
 16833  0023F2  6FAB               	movwf	??_BothServos& (0+255),b
 16834  0023F4  0EA5               	movlw	165
 16835  0023F6                     u12107:
 16836  0023F6  2EE8               	decfsz	wreg,f,c
 16837  0023F8  D7FE               	bra	u12107
 16838  0023FA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16839  0023FC  D7FC               	bra	u12107
 16840  0023FE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16841  002400  D7FA               	bra	u12107
 16842                           
 16843                           ;Test.c: 424: updateServoPosition(1050, 3);
 16844  002402  0E04               	movlw	4
 16845  002404  0100               	movlb	0	; () banked
 16846  002406  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16847  002408  0E1A               	movlw	26
 16848  00240A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16849  00240C  0E00               	movlw	0
 16850  00240E  0100               	movlb	0	; () banked
 16851  002410  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16852  002412  0E03               	movlw	3
 16853  002414  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16854  002416  EC49  F029         	call	_updateServoPosition	;wreg free
 16855                           
 16856                           ;Test.c: 425: _delay((unsigned long)((750)*(32000000/4000.0)));
 16857  00241A  0E1F               	movlw	31
 16858  00241C  0100               	movlb	0	; () banked
 16859  00241E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16860  002420  0E71               	movlw	113
 16861  002422  0100               	movlb	0	; () banked
 16862  002424  6FAB               	movwf	??_BothServos& (0+255),b
 16863  002426  0E1E               	movlw	30
 16864  002428                     u12117:
 16865  002428  2EE8               	decfsz	wreg,f,c
 16866  00242A  D7FE               	bra	u12117
 16867  00242C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16868  00242E  D7FC               	bra	u12117
 16869  002430  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16870  002432  D7FA               	bra	u12117
 16871  002434  F000               	nop	
 16872                           
 16873                           ;Test.c: 427: updateServoPosition(2400, 1);
 16874  002436  0E09               	movlw	9
 16875  002438  0100               	movlb	0	; () banked
 16876  00243A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16877  00243C  0E60               	movlw	96
 16878  00243E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16879  002440  0E00               	movlw	0
 16880  002442  0100               	movlb	0	; () banked
 16881  002444  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16882  002446  0E01               	movlw	1
 16883  002448  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16884  00244A  EC49  F029         	call	_updateServoPosition	;wreg free
 16885                           
 16886                           ;Test.c: 428: updateServoPosition(1050, 3);
 16887  00244E  0E04               	movlw	4
 16888  002450  0100               	movlb	0	; () banked
 16889  002452  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16890  002454  0E1A               	movlw	26
 16891  002456  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16892  002458  0E00               	movlw	0
 16893  00245A  0100               	movlb	0	; () banked
 16894  00245C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16895  00245E  0E03               	movlw	3
 16896  002460  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16897  002462  EC49  F029         	call	_updateServoPosition	;wreg free
 16898                           
 16899                           ;Test.c: 429: _delay((unsigned long)((750)*(32000000/4000.0)));
 16900  002466  0E1F               	movlw	31
 16901  002468  0100               	movlb	0	; () banked
 16902  00246A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16903  00246C  0E71               	movlw	113
 16904  00246E  0100               	movlb	0	; () banked
 16905  002470  6FAB               	movwf	??_BothServos& (0+255),b
 16906  002472  0E1E               	movlw	30
 16907  002474                     u12127:
 16908  002474  2EE8               	decfsz	wreg,f,c
 16909  002476  D7FE               	bra	u12127
 16910  002478  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16911  00247A  D7FC               	bra	u12127
 16912  00247C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16913  00247E  D7FA               	bra	u12127
 16914  002480  F000               	nop	
 16915                           
 16916                           ;Test.c: 430: updateServoPosition(1390, 3);
 16917  002482  0E05               	movlw	5
 16918  002484  0100               	movlb	0	; () banked
 16919  002486  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16920  002488  0E6E               	movlw	110
 16921  00248A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16922  00248C  0E00               	movlw	0
 16923  00248E  0100               	movlb	0	; () banked
 16924  002490  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16925  002492  0E03               	movlw	3
 16926  002494  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16927  002496  EC49  F029         	call	_updateServoPosition	;wreg free
 16928                           
 16929                           ;Test.c: 431: _delay((unsigned long)((700)*(32000000/4000.0)));
 16930  00249A  0E1D               	movlw	29
 16931  00249C  0100               	movlb	0	; () banked
 16932  00249E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16933  0024A0  0E69               	movlw	105
 16934  0024A2  0100               	movlb	0	; () banked
 16935  0024A4  6FAB               	movwf	??_BothServos& (0+255),b
 16936  0024A6  0EA5               	movlw	165
 16937  0024A8                     u12137:
 16938  0024A8  2EE8               	decfsz	wreg,f,c
 16939  0024AA  D7FE               	bra	u12137
 16940  0024AC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16941  0024AE  D7FC               	bra	u12137
 16942  0024B0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16943  0024B2  D7FA               	bra	u12137
 16944                           
 16945                           ;Test.c: 432: updateServoPosition(1050, 3);
 16946  0024B4  0E04               	movlw	4
 16947  0024B6  0100               	movlb	0	; () banked
 16948  0024B8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16949  0024BA  0E1A               	movlw	26
 16950  0024BC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16951  0024BE  0E00               	movlw	0
 16952  0024C0  0100               	movlb	0	; () banked
 16953  0024C2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16954  0024C4  0E03               	movlw	3
 16955  0024C6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16956  0024C8  EC49  F029         	call	_updateServoPosition	;wreg free
 16957                           
 16958                           ;Test.c: 433: _delay((unsigned long)((750)*(32000000/4000.0)));
 16959  0024CC  0E1F               	movlw	31
 16960  0024CE  0100               	movlb	0	; () banked
 16961  0024D0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16962  0024D2  0E71               	movlw	113
 16963  0024D4  0100               	movlb	0	; () banked
 16964  0024D6  6FAB               	movwf	??_BothServos& (0+255),b
 16965  0024D8  0E1E               	movlw	30
 16966  0024DA                     u12147:
 16967  0024DA  2EE8               	decfsz	wreg,f,c
 16968  0024DC  D7FE               	bra	u12147
 16969  0024DE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16970  0024E0  D7FC               	bra	u12147
 16971  0024E2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16972  0024E4  D7FA               	bra	u12147
 16973  0024E6  F000               	nop	
 16974                           
 16975                           ;Test.c: 435: stopSignals();
 16976  0024E8  EC78  F02F         	call	_stopSignals	;wreg free
 16977                           
 16978                           ;Test.c: 436: machine_state = Testing_state;
 16979  0024EC  0E03               	movlw	3
 16980  0024EE  0100               	movlb	0	; () banked
 16981  0024F0  6FFC               	movwf	_machine_state& (0+255),b
 16982                           
 16983                           ; BSR set to: 0
 16984  0024F2  0012               	return		;funcret
 16985  0024F4                     __end_of_BothServos:
 16986                           	opt stack 0
 16987                           tblptru	equ	0xFF8
 16988                           tblptrh	equ	0xFF7
 16989                           tblptrl	equ	0xFF6
 16990                           tablat	equ	0xFF5
 16991                           prodh	equ	0xFF4
 16992                           prodl	equ	0xFF3
 16993                           intcon	equ	0xFF2
 16994                           intcon2	equ	0xFF1
 16995                           intcon3	equ	0xFF0
 16996                           postinc0	equ	0xFEE
 16997                           wreg	equ	0xFE8
 16998                           postdec1	equ	0xFE5
 16999                           fsr1l	equ	0xFE1
 17000                           indf2	equ	0xFDF
 17001                           postinc2	equ	0xFDE
 17002                           postdec2	equ	0xFDD
 17003                           fsr2h	equ	0xFDA
 17004                           fsr2l	equ	0xFD9
 17005                           status	equ	0xFD8
 17006                           
 17007 ;; *************** function _stopSignals *****************
 17008 ;; Defined at:
 17009 ;;		line 71 in file "main.c"
 17010 ;; Parameters:    Size  Location     Type
 17011 ;;		None
 17012 ;; Auto vars:     Size  Location     Type
 17013 ;;		None
 17014 ;; Return value:  Size  Location     Type
 17015 ;;                  1    wreg      void 
 17016 ;; Registers used:
 17017 ;;		wreg, status,2
 17018 ;; Tracked objects:
 17019 ;;		On entry : 0/0
 17020 ;;		On exit  : 0/0
 17021 ;;		Unchanged: 0/0
 17022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17027 ;;Total ram usage:        0 bytes
 17028 ;; Hardware stack levels used:    1
 17029 ;; Hardware stack levels required when called:    7
 17030 ;; This function calls:
 17031 ;;		Nothing
 17032 ;; This function is called by:
 17033 ;;		_main
 17034 ;;		_BothServos
 17035 ;;		_PlatformTest
 17036 ;;		_arm
 17037 ;; This function uses a non-reentrant model
 17038 ;;
 17039                           
 17040                           	psect	text51
 17041  005EF0                     __ptext51:
 17042                           	opt stack 0
 17043  005EF0                     _stopSignals:
 17044                           	opt stack 23
 17045                           
 17046                           ;main.c: 72: LATA = 0x00;
 17047                           
 17048                           ; BSR set to: 0
 17049                           ;incstack = 0
 17050  005EF0  0E00               	movlw	0
 17051  005EF2  6E89               	movwf	3977,c	;volatile
 17052                           
 17053                           ;main.c: 73: LATB = 0x00;
 17054  005EF4  0E00               	movlw	0
 17055  005EF6  6E8A               	movwf	3978,c	;volatile
 17056                           
 17057                           ;main.c: 74: LATC = 0x00;
 17058  005EF8  0E00               	movlw	0
 17059  005EFA  6E8B               	movwf	3979,c	;volatile
 17060                           
 17061                           ;main.c: 75: LATD = 0x00;
 17062  005EFC  0E00               	movlw	0
 17063  005EFE  6E8C               	movwf	3980,c	;volatile
 17064                           
 17065                           ;main.c: 76: LATE = 0x00;
 17066  005F00  0E00               	movlw	0
 17067  005F02  6E8D               	movwf	3981,c	;volatile
 17068                           
 17069                           ;main.c: 77: TMR1IE = 0;
 17070  005F04  909D               	bcf	3997,0,c	;volatile
 17071                           
 17072                           ;main.c: 78: TMR2IE = 0;
 17073  005F06  929D               	bcf	3997,1,c	;volatile
 17074                           
 17075                           ;main.c: 79: TMR3IE = 0;
 17076  005F08  92A0               	bcf	4000,1,c	;volatile
 17077  005F0A  0012               	return		;funcret
 17078  005F0C                     __end_of_stopSignals:
 17079                           	opt stack 0
 17080                           tblptru	equ	0xFF8
 17081                           tblptrh	equ	0xFF7
 17082                           tblptrl	equ	0xFF6
 17083                           tablat	equ	0xFF5
 17084                           prodh	equ	0xFF4
 17085                           prodl	equ	0xFF3
 17086                           intcon	equ	0xFF2
 17087                           intcon2	equ	0xFF1
 17088                           intcon3	equ	0xFF0
 17089                           postinc0	equ	0xFEE
 17090                           wreg	equ	0xFE8
 17091                           postdec1	equ	0xFE5
 17092                           fsr1l	equ	0xFE1
 17093                           indf2	equ	0xFDF
 17094                           postinc2	equ	0xFDE
 17095                           postdec2	equ	0xFDD
 17096                           fsr2h	equ	0xFDA
 17097                           fsr2l	equ	0xFD9
 17098                           status	equ	0xFD8
 17099                           
 17100 ;; *************** function _initServos *****************
 17101 ;; Defined at:
 17102 ;;		line 498 in file "sort.c"
 17103 ;; Parameters:    Size  Location     Type
 17104 ;;		None
 17105 ;; Auto vars:     Size  Location     Type
 17106 ;;		None
 17107 ;; Return value:  Size  Location     Type
 17108 ;;                  1    wreg      void 
 17109 ;; Registers used:
 17110 ;;		wreg, status,2, status,0, cstack
 17111 ;; Tracked objects:
 17112 ;;		On entry : 0/0
 17113 ;;		On exit  : 0/0
 17114 ;;		Unchanged: 0/0
 17115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17118 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17119 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17120 ;;Total ram usage:        1 bytes
 17121 ;; Hardware stack levels used:    1
 17122 ;; Hardware stack levels required when called:    8
 17123 ;; This function calls:
 17124 ;;		_updateServoPosition
 17125 ;; This function is called by:
 17126 ;;		_Loading
 17127 ;;		_BothServos
 17128 ;; This function uses a non-reentrant model
 17129 ;;
 17130                           
 17131                           	psect	text52
 17132  005310                     __ptext52:
 17133                           	opt stack 0
 17134  005310                     _initServos:
 17135                           	opt stack 20
 17136                           
 17137                           ;sort.c: 500: updateServoPosition(1200, 1);
 17138                           
 17139                           ;incstack = 0
 17140  005310  0E04               	movlw	4
 17141  005312  0100               	movlb	0	; () banked
 17142  005314  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17143  005316  0EB0               	movlw	176
 17144  005318  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17145  00531A  0E00               	movlw	0
 17146  00531C  0100               	movlb	0	; () banked
 17147  00531E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17148  005320  0E01               	movlw	1
 17149  005322  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17150  005324  EC49  F029         	call	_updateServoPosition	;wreg free
 17151                           
 17152                           ;sort.c: 501: updateServoPosition(1050, 3);
 17153  005328  0E04               	movlw	4
 17154  00532A  0100               	movlb	0	; () banked
 17155  00532C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17156  00532E  0E1A               	movlw	26
 17157  005330  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17158  005332  0E00               	movlw	0
 17159  005334  0100               	movlb	0	; () banked
 17160  005336  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17161  005338  0E03               	movlw	3
 17162  00533A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17163  00533C  EC49  F029         	call	_updateServoPosition	;wreg free
 17164                           
 17165                           ;sort.c: 502: TMR1ON = 1;
 17166  005340  80CD               	bsf	4045,0,c	;volatile
 17167                           
 17168                           ;sort.c: 503: was_low_1 = 0;
 17169  005342  0E00               	movlw	0
 17170  005344  6E78               	movwf	_was_low_1+1,c	;volatile
 17171  005346  0E00               	movlw	0
 17172  005348  6E77               	movwf	_was_low_1,c	;volatile
 17173                           
 17174                           ;sort.c: 505: _delay((unsigned long)((5)*(32000000/4000.0)));
 17175  00534A  0E34               	movlw	52
 17176  00534C  0100               	movlb	0	; () banked
 17177  00534E  6F88               	movwf	??_initServos& (0+255),b
 17178  005350  0EF1               	movlw	241
 17179  005352                     u12157:
 17180  005352  2EE8               	decfsz	wreg,f,c
 17181  005354  D7FE               	bra	u12157
 17182  005356  2F88               	decfsz	??_initServos& (0+255),f,b
 17183  005358  D7FC               	bra	u12157
 17184  00535A  D000               	nop2	
 17185                           
 17186                           ;sort.c: 507: TMR3ON = 1;
 17187  00535C  80B1               	bsf	4017,0,c	;volatile
 17188                           
 17189                           ;sort.c: 508: was_low_3 = 0;
 17190  00535E  0E00               	movlw	0
 17191  005360  6E7C               	movwf	_was_low_3+1,c	;volatile
 17192  005362  0E00               	movlw	0
 17193  005364  6E7B               	movwf	_was_low_3,c	;volatile
 17194                           
 17195                           ;sort.c: 511: _delay((unsigned long)((1)*(32000000/4000.0)));
 17196  005366  0E0B               	movlw	11
 17197  005368  0100               	movlb	0	; () banked
 17198  00536A  6F88               	movwf	??_initServos& (0+255),b
 17199  00536C  0E62               	movlw	98
 17200  00536E                     u12167:
 17201  00536E  2EE8               	decfsz	wreg,f,c
 17202  005370  D7FE               	bra	u12167
 17203  005372  2F88               	decfsz	??_initServos& (0+255),f,b
 17204  005374  D7FC               	bra	u12167
 17205  005376  F000               	nop	
 17206                           
 17207                           ;sort.c: 512: LATBbits.LATB3 = 0;
 17208  005378  968A               	bcf	3978,3,c	;volatile
 17209                           
 17210                           ;sort.c: 513: TMR2ON = 1;
 17211  00537A  84CA               	bsf	4042,2,c	;volatile
 17212                           
 17213                           ;sort.c: 514: was_low_2 = 0;
 17214  00537C  0E00               	movlw	0
 17215  00537E  6E7A               	movwf	_was_low_2+1,c	;volatile
 17216  005380  0E00               	movlw	0
 17217  005382  6E79               	movwf	_was_low_2,c	;volatile
 17218                           
 17219                           ;sort.c: 516: LATCbits.LATC0 = 1;
 17220  005384  808B               	bsf	3979,0,c	;volatile
 17221  005386  0012               	return		;funcret
 17222  005388                     __end_of_initServos:
 17223                           	opt stack 0
 17224                           tblptru	equ	0xFF8
 17225                           tblptrh	equ	0xFF7
 17226                           tblptrl	equ	0xFF6
 17227                           tablat	equ	0xFF5
 17228                           prodh	equ	0xFF4
 17229                           prodl	equ	0xFF3
 17230                           intcon	equ	0xFF2
 17231                           intcon2	equ	0xFF1
 17232                           intcon3	equ	0xFF0
 17233                           postinc0	equ	0xFEE
 17234                           wreg	equ	0xFE8
 17235                           postdec1	equ	0xFE5
 17236                           fsr1l	equ	0xFE1
 17237                           indf2	equ	0xFDF
 17238                           postinc2	equ	0xFDE
 17239                           postdec2	equ	0xFDD
 17240                           fsr2h	equ	0xFDA
 17241                           fsr2l	equ	0xFD9
 17242                           status	equ	0xFD8
 17243                           
 17244 ;; *************** function _updateServoPosition *****************
 17245 ;; Defined at:
 17246 ;;		line 606 in file "sort.c"
 17247 ;; Parameters:    Size  Location     Type
 17248 ;;  time_us         2    0[BANK0 ] int 
 17249 ;;  timer           2    2[BANK0 ] int 
 17250 ;; Auto vars:     Size  Location     Type
 17251 ;;  my_time         2    6[BANK0 ] unsigned int 
 17252 ;; Return value:  Size  Location     Type
 17253 ;;                  1    wreg      void 
 17254 ;; Registers used:
 17255 ;;		wreg, status,2, status,0
 17256 ;; Tracked objects:
 17257 ;;		On entry : 0/0
 17258 ;;		On exit  : 0/0
 17259 ;;		Unchanged: 0/0
 17260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17261 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17262 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17263 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17264 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17265 ;;Total ram usage:        8 bytes
 17266 ;; Hardware stack levels used:    1
 17267 ;; Hardware stack levels required when called:    7
 17268 ;; This function calls:
 17269 ;;		Nothing
 17270 ;; This function is called by:
 17271 ;;		_Distribution
 17272 ;;		_initServos
 17273 ;;		_actuatorTest
 17274 ;;		_BothServos
 17275 ;; This function uses a non-reentrant model
 17276 ;;
 17277                           
 17278                           	psect	text53
 17279  005292                     __ptext53:
 17280                           	opt stack 0
 17281  005292                     _updateServoPosition:
 17282                           	opt stack 20
 17283                           
 17284                           ;sort.c: 607: unsigned int my_time = 65535 - time_us;
 17285                           
 17286                           ;incstack = 0
 17287  005292  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 17288  005296  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 17289  00529A  0100               	movlb	0	; () banked
 17290  00529C  1F84               	comf	??_updateServoPosition& (0+255),f,b
 17291  00529E  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 17292  0052A0  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 17293  0052A2  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 17294  0052A4  0EFF               	movlw	255
 17295  0052A6  0100               	movlb	0	; () banked
 17296  0052A8  2584               	addwf	??_updateServoPosition& (0+255),w,b
 17297  0052AA  0100               	movlb	0	; () banked
 17298  0052AC  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 17299  0052AE  0EFF               	movlw	255
 17300  0052B0  0100               	movlb	0	; () banked
 17301  0052B2  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 17302  0052B4  0100               	movlb	0	; () banked
 17303  0052B6  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 17304                           
 17305                           ;sort.c: 608: switch(timer){
 17306  0052B8  D019               	goto	l7067
 17307  0052BA                     l7061:
 17308                           
 17309                           ; BSR set to: 0
 17310                           ;sort.c: 610: servoTimes[0] = my_time >> 8;
 17311  0052BA  0100               	movlb	0	; () banked
 17312  0052BC  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 17313  0052BE  6E5B               	movwf	_servoTimes,c
 17314  0052C0  6A5C               	clrf	_servoTimes+1,c
 17315                           
 17316                           ;sort.c: 611: servoTimes[1] = my_time & 0xFF;
 17317  0052C2  0100               	movlb	0	; () banked
 17318  0052C4  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 17319  0052C6  6E5D               	movwf	_servoTimes+2,c
 17320  0052C8  6A5E               	clrf	_servoTimes+3,c
 17321                           
 17322                           ; BSR set to: 0
 17323                           ;sort.c: 613: pan_servo_state = time_us;
 17324  0052CA  C080  F06B         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 17325  0052CE  C081  F06C         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 17326  0052D2                     l952:
 17327                           
 17328                           ; BSR set to: 0
 17329                           ;sort.c: 615: servoTimes[2] = my_time >> 8;
 17330  0052D2  0100               	movlb	0	; () banked
 17331  0052D4  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 17332  0052D6  6E5F               	movwf	_servoTimes+4,c
 17333  0052D8  6A60               	clrf	_servoTimes+5,c
 17334                           
 17335                           ;sort.c: 616: servoTimes[3] = my_time & 0xFF;
 17336  0052DA  0100               	movlb	0	; () banked
 17337  0052DC  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 17338  0052DE  6E61               	movwf	_servoTimes+6,c
 17339  0052E0  6A62               	clrf	_servoTimes+7,c
 17340                           
 17341                           ; BSR set to: 0
 17342                           ;sort.c: 618: tilt_servo_state = time_us;
 17343  0052E2  C080  F071         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 17344  0052E6  C081  F072         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 17345                           
 17346                           ;sort.c: 619: }
 17347  0052EA  0012               	return	
 17348  0052EC                     l7067:
 17349                           
 17350                           ; BSR set to: 0
 17351  0052EC  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 17352  0052F0  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 17353                           
 17354                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17355                           ; Switch size 1, requested type "space"
 17356                           ; Number of cases is 1, Range of values is 0 to 0
 17357                           ; switch strategies available:
 17358                           ; Name         Instructions Cycles
 17359                           ; simple_byte            4     3 (average)
 17360                           ;	Chosen strategy is simple_byte
 17361  0052F4  0100               	movlb	0	; () banked
 17362  0052F6  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 17363  0052F8  0A00               	xorlw	0	; case 0
 17364  0052FA  A4D8               	btfss	status,2,c
 17365  0052FC  0012               	return	
 17366                           
 17367                           ; BSR set to: 0
 17368                           ; Switch size 1, requested type "space"
 17369                           ; Number of cases is 2, Range of values is 1 to 3
 17370                           ; switch strategies available:
 17371                           ; Name         Instructions Cycles
 17372                           ; simple_byte            7     4 (average)
 17373                           ;	Chosen strategy is simple_byte
 17374  0052FE  0100               	movlb	0	; () banked
 17375  005300  5184               	movf	??_updateServoPosition& (0+255),w,b
 17376  005302  0A01               	xorlw	1	; case 1
 17377  005304  B4D8               	btfsc	status,2,c
 17378  005306  D7D9               	goto	l7061
 17379  005308  0A02               	xorlw	2	; case 3
 17380  00530A  A4D8               	btfss	status,2,c
 17381  00530C  0012               	return	
 17382  00530E  D7E1               	goto	l952
 17383  005310                     __end_of_updateServoPosition:
 17384                           	opt stack 0
 17385                           tblptru	equ	0xFF8
 17386                           tblptrh	equ	0xFF7
 17387                           tblptrl	equ	0xFF6
 17388                           tablat	equ	0xFF5
 17389                           prodh	equ	0xFF4
 17390                           prodl	equ	0xFF3
 17391                           intcon	equ	0xFF2
 17392                           intcon2	equ	0xFF1
 17393                           intcon3	equ	0xFF0
 17394                           postinc0	equ	0xFEE
 17395                           wreg	equ	0xFE8
 17396                           postdec1	equ	0xFE5
 17397                           fsr1l	equ	0xFE1
 17398                           indf2	equ	0xFDF
 17399                           postinc2	equ	0xFDE
 17400                           postdec2	equ	0xFDD
 17401                           fsr2h	equ	0xFDA
 17402                           fsr2l	equ	0xFD9
 17403                           status	equ	0xFD8
 17404                           
 17405 ;; *************** function _BlockerTest *****************
 17406 ;; Defined at:
 17407 ;;		line 595 in file "Test.c"
 17408 ;; Parameters:    Size  Location     Type
 17409 ;;		None
 17410 ;; Auto vars:     Size  Location     Type
 17411 ;;  i               2   45[BANK0 ] int 
 17412 ;;  cond_flag       2   51[BANK0 ] int 
 17413 ;;  cam_flag        2   49[BANK0 ] int 
 17414 ;;  res             2   47[BANK0 ] int 
 17415 ;; Return value:  Size  Location     Type
 17416 ;;                  1    wreg      void 
 17417 ;; Registers used:
 17418 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17419 ;; Tracked objects:
 17420 ;;		On entry : 0/0
 17421 ;;		On exit  : 0/0
 17422 ;;		Unchanged: 0/0
 17423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17425 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17426 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17427 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17428 ;;Total ram usage:       10 bytes
 17429 ;; Hardware stack levels used:    1
 17430 ;; Hardware stack levels required when called:   10
 17431 ;; This function calls:
 17432 ;;		_lcdInst
 17433 ;;		_printf
 17434 ;;		_readADC
 17435 ;; This function is called by:
 17436 ;;		_Test
 17437 ;; This function uses a non-reentrant model
 17438 ;;
 17439                           
 17440                           	psect	text54
 17441  004002                     __ptext54:
 17442                           	opt stack 0
 17443  004002                     _BlockerTest:
 17444                           	opt stack 19
 17445                           
 17446                           ;Test.c: 596: readADC(2);
 17447                           
 17448                           ; BSR set to: 0
 17449                           ;incstack = 0
 17450  004002  0E02               	movlw	2
 17451  004004  ECBC  F02E         	call	_readADC
 17452                           
 17453                           ;Test.c: 597: int res = ADRESH<<8 | ADRESL;
 17454  004008  50C3               	movf	4035,w,c	;volatile
 17455  00400A  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17456  00400E  0100               	movlb	0	; () banked
 17457  004010  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17458  004012  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17459  004016  0100               	movlb	0	; () banked
 17460  004018  6BAB               	clrf	??_BlockerTest& (0+255),b
 17461  00401A  0100               	movlb	0	; () banked
 17462  00401C  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17463  00401E  0100               	movlb	0	; () banked
 17464  004020  6FAF               	movwf	BlockerTest@res& (0+255),b
 17465  004022  0100               	movlb	0	; () banked
 17466  004024  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17467  004026  0100               	movlb	0	; () banked
 17468  004028  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17469                           
 17470                           ; BSR set to: 0
 17471                           ;Test.c: 599: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 17472  00402A  0E01               	movlw	1
 17473  00402C  ECD1  F02F         	call	_lcdInst
 17474  004030  0E68               	movlw	104
 17475  004032  0100               	movlb	0	; () banked
 17476  004034  6FAB               	movwf	??_BlockerTest& (0+255),b
 17477  004036  0EE4               	movlw	228
 17478  004038                     u12177:
 17479  004038  2EE8               	decfsz	wreg,f,c
 17480  00403A  D7FE               	bra	u12177
 17481  00403C  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 17482  00403E  D7FC               	bra	u12177
 17483  004040  F000               	nop	
 17484  004042  0E80               	movlw	128
 17485  004044  ECD1  F02F         	call	_lcdInst
 17486                           
 17487                           ;Test.c: 600: printf("D:RET|2:C %d  ", res);
 17488  004048  0E89               	movlw	low STR_121
 17489  00404A  0100               	movlb	0	; () banked
 17490  00404C  6F8E               	movwf	printf@f& (0+255),b
 17491  00404E  0EFE               	movlw	high STR_121
 17492  004050  0100               	movlb	0	; () banked
 17493  004052  6F8F               	movwf	(printf@f+1)& (0+255),b
 17494  004054  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17495  004058  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17496  00405C  EC67  F00E         	call	_printf	;wreg free
 17497                           
 17498                           ;Test.c: 601: lcdInst(0b11000000);;
 17499  004060  0EC0               	movlw	192
 17500  004062  ECD1  F02F         	call	_lcdInst
 17501                           
 17502                           ;Test.c: 602: printf("OTHER: CAM TOGGLE");
 17503  004066  0E49               	movlw	low STR_122
 17504  004068  0100               	movlb	0	; () banked
 17505  00406A  6F8E               	movwf	printf@f& (0+255),b
 17506  00406C  0EFB               	movlw	high STR_122
 17507  00406E  0100               	movlb	0	; () banked
 17508  004070  6F8F               	movwf	(printf@f+1)& (0+255),b
 17509  004072  EC67  F00E         	call	_printf	;wreg free
 17510                           
 17511                           ;Test.c: 603: int cam_flag = 1;
 17512  004076  0E00               	movlw	0
 17513  004078  0100               	movlb	0	; () banked
 17514  00407A  6FB2               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 17515  00407C  0E01               	movlw	1
 17516  00407E  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17517                           
 17518                           ; BSR set to: 0
 17519                           ;Test.c: 604: int cond_flag = 0;
 17520  004080  0E00               	movlw	0
 17521  004082  0100               	movlb	0	; () banked
 17522  004084  6FB4               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 17523  004086  0E00               	movlw	0
 17524  004088  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17525                           
 17526                           ; BSR set to: 0
 17527                           ;Test.c: 607: while(PORTBbits.RB1 == 0){
 17528                           
 17529                           ;Test.c: 606: while(1){
 17530  00408A  D023               	goto	l9381
 17531  00408C                     l9373:
 17532                           
 17533                           ;Test.c: 608: readADC(2);
 17534  00408C  0E02               	movlw	2
 17535  00408E  ECBC  F02E         	call	_readADC
 17536                           
 17537                           ;Test.c: 609: res = ADRESH<<8 | ADRESL;
 17538  004092  50C3               	movf	4035,w,c	;volatile
 17539  004094  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17540  004098  0100               	movlb	0	; () banked
 17541  00409A  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17542  00409C  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17543  0040A0  0100               	movlb	0	; () banked
 17544  0040A2  6BAB               	clrf	??_BlockerTest& (0+255),b
 17545  0040A4  0100               	movlb	0	; () banked
 17546  0040A6  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17547  0040A8  0100               	movlb	0	; () banked
 17548  0040AA  6FAF               	movwf	BlockerTest@res& (0+255),b
 17549  0040AC  0100               	movlb	0	; () banked
 17550  0040AE  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17551  0040B0  0100               	movlb	0	; () banked
 17552  0040B2  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17553                           
 17554                           ; BSR set to: 0
 17555                           ;Test.c: 610: lcdInst(0b10000000);;
 17556  0040B4  0E80               	movlw	128
 17557  0040B6  ECD1  F02F         	call	_lcdInst
 17558                           
 17559                           ;Test.c: 611: printf("D:RET|2:C %d  ", res);
 17560  0040BA  0E89               	movlw	low STR_121
 17561  0040BC  0100               	movlb	0	; () banked
 17562  0040BE  6F8E               	movwf	printf@f& (0+255),b
 17563  0040C0  0EFE               	movlw	high STR_121
 17564  0040C2  0100               	movlb	0	; () banked
 17565  0040C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 17566  0040C6  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17567  0040CA  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17568  0040CE  EC67  F00E         	call	_printf	;wreg free
 17569  0040D2                     l9381:
 17570  0040D2  A281               	btfss	3969,1,c	;volatile
 17571  0040D4  D7DB               	goto	l9373
 17572                           
 17573                           ;Test.c: 612: }
 17574                           ;Test.c: 613: if(PORTB >> 4 == 0b1111){
 17575  0040D6  3881               	swapf	3969,w,c	;volatile
 17576  0040D8  0B0F               	andlw	15
 17577  0040DA  0A0F               	xorlw	15
 17578  0040DC  B4D8               	btfsc	status,2,c
 17579  0040DE  0012               	return	
 17580                           
 17581                           ;Test.c: 616: else if(PORTB >> 4 == 0b0001){
 17582                           
 17583                           ;Test.c: 615: }
 17584                           
 17585                           ;Test.c: 614: break;
 17586  0040E0  3881               	swapf	3969,w,c	;volatile
 17587  0040E2  0B0F               	andlw	15
 17588  0040E4  06E8               	decf	wreg,f,c
 17589  0040E6  A4D8               	btfss	status,2,c
 17590  0040E8  D016               	goto	l9399
 17591                           
 17592                           ;Test.c: 617: if(cond_flag){
 17593  0040EA  0100               	movlb	0	; () banked
 17594  0040EC  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17595  0040EE  0100               	movlb	0	; () banked
 17596  0040F0  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17597  0040F2  B4D8               	btfsc	status,2,c
 17598  0040F4  D007               	goto	l1492
 17599                           
 17600                           ; BSR set to: 0
 17601                           ;Test.c: 618: LATCbits.LATC7 = 1;
 17602  0040F6  8E8B               	bsf	3979,7,c	;volatile
 17603  0040F8  D006               	goto	l9397
 17604  0040FA                     u9001:
 17605  0040FA  0E01               	movlw	1
 17606  0040FC                     u9010:
 17607  0040FC  0100               	movlb	0	; () banked
 17608  0040FE  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17609  004100  6BB4               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 17610                           
 17611                           ;Test.c: 620: }
 17612  004102  D05F               	goto	l9427
 17613  004104                     l1492:
 17614                           
 17615                           ; BSR set to: 0
 17616                           ;Test.c: 621: else{
 17617                           ;Test.c: 622: LATCbits.LATC7 = 0;
 17618  004104  9E8B               	bcf	3979,7,c	;volatile
 17619  004106                     l9397:
 17620                           
 17621                           ; BSR set to: 0
 17622                           ;Test.c: 623: cond_flag = !cond_flag;
 17623  004106  0100               	movlb	0	; () banked
 17624  004108  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17625  00410A  0100               	movlb	0	; () banked
 17626  00410C  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17627  00410E  B4D8               	btfsc	status,2,c
 17628  004110  D7F4               	goto	u9001
 17629  004112  0E00               	movlw	0
 17630  004114  D7F3               	goto	u9010
 17631  004116                     l9399:
 17632                           
 17633                           ;Test.c: 626: else{
 17634                           ;Test.c: 627: if(cam_flag){
 17635  004116  0100               	movlb	0	; () banked
 17636  004118  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17637  00411A  0100               	movlb	0	; () banked
 17638  00411C  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17639  00411E  B4D8               	btfsc	status,2,c
 17640  004120  D007               	goto	l9405
 17641                           
 17642                           ; BSR set to: 0
 17643                           ;Test.c: 628: LATCbits.LATC0 = 1;
 17644  004122  808B               	bsf	3979,0,c	;volatile
 17645  004124  D023               	goto	l9417
 17646  004126                     u9051:
 17647  004126  0E01               	movlw	1
 17648  004128                     u9060:
 17649  004128  0100               	movlb	0	; () banked
 17650  00412A  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17651  00412C  6BB2               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 17652                           
 17653                           ;Test.c: 630: }
 17654  00412E  D049               	goto	l9427
 17655  004130                     l9405:
 17656                           
 17657                           ; BSR set to: 0
 17658                           ;Test.c: 631: else{
 17659                           ;Test.c: 632: for(int i=0;i<5000;i++)
 17660  004130  0E00               	movlw	0
 17661  004132  0100               	movlb	0	; () banked
 17662  004134  6FAE               	movwf	(BlockerTest@i+1)& (0+255),b
 17663  004136  0E00               	movlw	0
 17664  004138  6FAD               	movwf	BlockerTest@i& (0+255),b
 17665  00413A                     l9407:
 17666                           
 17667                           ; BSR set to: 0
 17668  00413A  0100               	movlb	0	; () banked
 17669  00413C  BFAE               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 17670  00413E  D008               	goto	l1497
 17671  004140  0E88               	movlw	136
 17672  004142  0100               	movlb	0	; () banked
 17673  004144  5DAD               	subwf	BlockerTest@i& (0+255),w,b
 17674  004146  0E13               	movlw	19
 17675  004148  0100               	movlb	0	; () banked
 17676  00414A  59AE               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 17677  00414C  B0D8               	btfsc	status,0,c
 17678  00414E  D00D               	goto	l1498
 17679  004150                     l1497:
 17680                           
 17681                           ; BSR set to: 0
 17682                           ;Test.c: 633: {
 17683                           ;Test.c: 634: LATCbits.LATC0 = 1;
 17684  004150  808B               	bsf	3979,0,c	;volatile
 17685                           
 17686                           ; BSR set to: 0
 17687                           ;Test.c: 635: _delay((unsigned long)((10)*(32000000/4000000.0)));
 17688  004152  0E1A               	movlw	26
 17689  004154                     u12187:
 17690  004154  2EE8               	decfsz	wreg,f,c
 17691  004156  D7FE               	bra	u12187
 17692  004158  D000               	nop2	
 17693                           
 17694                           ;Test.c: 636: LATCbits.LATC0 = 0;
 17695  00415A  908B               	bcf	3979,0,c	;volatile
 17696                           
 17697                           ;Test.c: 637: _delay((unsigned long)((90)*(32000000/4000000.0)));
 17698  00415C  0EF0               	movlw	240
 17699  00415E                     u12197:
 17700  00415E  2EE8               	decfsz	wreg,f,c
 17701  004160  D7FE               	bra	u12197
 17702  004162  0100               	movlb	0	; () banked
 17703  004164  4BAD               	infsnz	BlockerTest@i& (0+255),f,b
 17704  004166  2BAE               	incf	(BlockerTest@i+1)& (0+255),f,b
 17705  004168  D7E8               	goto	l9407
 17706  00416A                     l1498:
 17707                           
 17708                           ; BSR set to: 0
 17709                           ;Test.c: 638: }
 17710                           ;Test.c: 639: LATCbits.LATC0 = 0;
 17711  00416A  908B               	bcf	3979,0,c	;volatile
 17712  00416C                     l9417:
 17713                           
 17714                           ; BSR set to: 0
 17715                           ;Test.c: 640: cam_flag = !cam_flag;
 17716  00416C  0100               	movlb	0	; () banked
 17717  00416E  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17718  004170  0100               	movlb	0	; () banked
 17719  004172  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17720  004174  B4D8               	btfsc	status,2,c
 17721  004176  D7D7               	goto	u9051
 17722  004178  0E00               	movlw	0
 17723  00417A  D7D6               	goto	u9060
 17724  00417C                     l9419:
 17725                           
 17726                           ;Test.c: 645: readADC(2);
 17727  00417C  0E02               	movlw	2
 17728  00417E  ECBC  F02E         	call	_readADC
 17729                           
 17730                           ;Test.c: 646: res = ADRESH<<8 | ADRESL;
 17731  004182  50C3               	movf	4035,w,c	;volatile
 17732  004184  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17733  004188  0100               	movlb	0	; () banked
 17734  00418A  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17735  00418C  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17736  004190  0100               	movlb	0	; () banked
 17737  004192  6BAB               	clrf	??_BlockerTest& (0+255),b
 17738  004194  0100               	movlb	0	; () banked
 17739  004196  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17740  004198  0100               	movlb	0	; () banked
 17741  00419A  6FAF               	movwf	BlockerTest@res& (0+255),b
 17742  00419C  0100               	movlb	0	; () banked
 17743  00419E  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17744  0041A0  0100               	movlb	0	; () banked
 17745  0041A2  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17746                           
 17747                           ; BSR set to: 0
 17748                           ;Test.c: 647: lcdInst(0b10000000);;
 17749  0041A4  0E80               	movlw	128
 17750  0041A6  ECD1  F02F         	call	_lcdInst
 17751                           
 17752                           ;Test.c: 648: printf("D:RET|2:C %d  ", res);
 17753  0041AA  0E89               	movlw	low STR_121
 17754  0041AC  0100               	movlb	0	; () banked
 17755  0041AE  6F8E               	movwf	printf@f& (0+255),b
 17756  0041B0  0EFE               	movlw	high STR_121
 17757  0041B2  0100               	movlb	0	; () banked
 17758  0041B4  6F8F               	movwf	(printf@f+1)& (0+255),b
 17759  0041B6  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17760  0041BA  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17761  0041BE  EC67  F00E         	call	_printf	;wreg free
 17762  0041C2                     l9427:
 17763  0041C2  A281               	btfss	3969,1,c	;volatile
 17764  0041C4  D786               	goto	l9381
 17765  0041C6  D7DA               	goto	l9419
 17766  0041C8                     __end_of_BlockerTest:
 17767                           	opt stack 0
 17768                           tblptru	equ	0xFF8
 17769                           tblptrh	equ	0xFF7
 17770                           tblptrl	equ	0xFF6
 17771                           tablat	equ	0xFF5
 17772                           prodh	equ	0xFF4
 17773                           prodl	equ	0xFF3
 17774                           intcon	equ	0xFF2
 17775                           intcon2	equ	0xFF1
 17776                           intcon3	equ	0xFF0
 17777                           postinc0	equ	0xFEE
 17778                           wreg	equ	0xFE8
 17779                           postdec1	equ	0xFE5
 17780                           fsr1l	equ	0xFE1
 17781                           indf2	equ	0xFDF
 17782                           postinc2	equ	0xFDE
 17783                           postdec2	equ	0xFDD
 17784                           fsr2h	equ	0xFDA
 17785                           fsr2l	equ	0xFD9
 17786                           status	equ	0xFD8
 17787                           
 17788 ;; *************** function _readADC *****************
 17789 ;; Defined at:
 17790 ;;		line 15 in file "ADCFunctionality.c"
 17791 ;; Parameters:    Size  Location     Type
 17792 ;;  channel         1    wreg     unsigned char 
 17793 ;; Auto vars:     Size  Location     Type
 17794 ;;  channel         1    1[BANK0 ] unsigned char 
 17795 ;; Return value:  Size  Location     Type
 17796 ;;                  1    wreg      void 
 17797 ;; Registers used:
 17798 ;;		wreg, status,2, status,0, cstack
 17799 ;; Tracked objects:
 17800 ;;		On entry : 0/0
 17801 ;;		On exit  : 0/0
 17802 ;;		Unchanged: 0/0
 17803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17805 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17806 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17807 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17808 ;;Total ram usage:        2 bytes
 17809 ;; Hardware stack levels used:    1
 17810 ;; Hardware stack levels required when called:    7
 17811 ;; This function calls:
 17812 ;;		Nothing
 17813 ;; This function is called by:
 17814 ;;		_readIR
 17815 ;;		_readMAG
 17816 ;;		_readCOND
 17817 ;;		_sensorTest
 17818 ;;		_PlatformTest
 17819 ;;		_BlockerTest
 17820 ;; This function uses a non-reentrant model
 17821 ;;
 17822                           
 17823                           	psect	text55
 17824  005D78                     __ptext55:
 17825                           	opt stack 0
 17826  005D78                     _readADC:
 17827                           	opt stack 20
 17828                           
 17829                           ;incstack = 0
 17830                           ;readADC@channel stored from wreg
 17831  005D78  0100               	movlb	0	; () banked
 17832  005D7A  6F81               	movwf	readADC@channel& (0+255),b
 17833                           
 17834                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 17835  005D7C  0100               	movlb	0	; () banked
 17836  005D7E  4581               	rlncf	readADC@channel& (0+255),w,b
 17837  005D80  46E8               	rlncf	wreg,f,c
 17838  005D82  0BFC               	andlw	252
 17839  005D84  6EC2               	movwf	4034,c	;volatile
 17840                           
 17841                           ; BSR set to: 0
 17842                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 17843  005D86  80C2               	bsf	4034,0,c	;volatile
 17844                           
 17845                           ; BSR set to: 0
 17846                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 17847  005D88  82C2               	bsf	4034,1,c	;volatile
 17848                           
 17849                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 17850  005D8A  D009               	goto	l6689
 17851  005D8C                     l6687:
 17852  005D8C  0E34               	movlw	52
 17853  005D8E  0100               	movlb	0	; () banked
 17854  005D90  6F80               	movwf	??_readADC& (0+255),b
 17855  005D92  0EF1               	movlw	241
 17856  005D94                     u12207:
 17857  005D94  2EE8               	decfsz	wreg,f,c
 17858  005D96  D7FE               	bra	u12207
 17859  005D98  2F80               	decfsz	??_readADC& (0+255),f,b
 17860  005D9A  D7FC               	bra	u12207
 17861  005D9C  D000               	nop2	
 17862  005D9E                     l6689:
 17863  005D9E  A2C2               	btfss	4034,1,c	;volatile
 17864  005DA0  0012               	return	
 17865  005DA2  D7F4               	goto	l6687
 17866  005DA4                     __end_of_readADC:
 17867                           	opt stack 0
 17868                           tblptru	equ	0xFF8
 17869                           tblptrh	equ	0xFF7
 17870                           tblptrl	equ	0xFF6
 17871                           tablat	equ	0xFF5
 17872                           prodh	equ	0xFF4
 17873                           prodl	equ	0xFF3
 17874                           intcon	equ	0xFF2
 17875                           intcon2	equ	0xFF1
 17876                           intcon3	equ	0xFF0
 17877                           postinc0	equ	0xFEE
 17878                           wreg	equ	0xFE8
 17879                           postdec1	equ	0xFE5
 17880                           fsr1l	equ	0xFE1
 17881                           indf2	equ	0xFDF
 17882                           postinc2	equ	0xFDE
 17883                           postdec2	equ	0xFDD
 17884                           fsr2h	equ	0xFDA
 17885                           fsr2l	equ	0xFD9
 17886                           status	equ	0xFD8
 17887                           
 17888 ;; *************** function _printf *****************
 17889 ;; Defined at:
 17890 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 17891 ;; Parameters:    Size  Location     Type
 17892 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 17893 ;;		 -> STR_128(18), STR_127(18), STR_126(17), STR_125(17), 
 17894 ;;		 -> STR_124(15), STR_123(15), STR_122(18), STR_121(15), 
 17895 ;;		 -> STR_120(18), STR_119(18), STR_118(17), STR_117(17), 
 17896 ;;		 -> STR_116(17), STR_115(17), STR_114(17), STR_113(17), 
 17897 ;;		 -> STR_112(18), STR_111(17), STR_110(15), STR_109(15), 
 17898 ;;		 -> STR_108(15), STR_107(17), STR_106(17), STR_105(17), 
 17899 ;;		 -> STR_104(16), STR_103(17), STR_102(17), STR_101(17), 
 17900 ;;		 -> STR_100(17), STR_99(17), STR_98(17), STR_97(15), 
 17901 ;;		 -> STR_96(11), STR_95(17), STR_94(11), STR_93(17), 
 17902 ;;		 -> STR_92(14), STR_91(15), STR_90(14), STR_89(10), 
 17903 ;;		 -> STR_88(9), STR_87(9), STR_86(10), STR_85(10), 
 17904 ;;		 -> STR_84(16), STR_83(15), STR_82(3), STR_81(18), 
 17905 ;;		 -> STR_80(3), STR_79(18), STR_78(14), STR_77(8), 
 17906 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 17907 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 17908 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(16), 
 17909 ;;		 -> STR_64(16), STR_63(24), STR_50(17), STR_49(17), 
 17910 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 17911 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 17912 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 17913 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 17914 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 17915 ;;		 -> STR_28(17), STR_27(17), STR_26(17), STR_25(17), 
 17916 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 17917 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 17918 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 17919 ;; Auto vars:     Size  Location     Type
 17920 ;;  tmpval          4    0        struct .
 17921 ;;  width           2   41[BANK0 ] int 
 17922 ;;  val             2   37[BANK0 ] unsigned int 
 17923 ;;  len             2   35[BANK0 ] unsigned int 
 17924 ;;  ap              2   33[BANK0 ] PTR void [1]
 17925 ;;		 -> ?i2_printf(2), ?_printf(2), 
 17926 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 17927 ;;		 -> STR_129(7), count_total(2), printRTC@month(4), UI@month(4), 
 17928 ;;  c               1   40[BANK0 ] char 
 17929 ;;  flag            1   39[BANK0 ] unsigned char 
 17930 ;;  prec            1   30[BANK0 ] char 
 17931 ;; Return value:  Size  Location     Type
 17932 ;;                  2   14[BANK0 ] int 
 17933 ;; Registers used:
 17934 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17935 ;; Tracked objects:
 17936 ;;		On entry : 0/0
 17937 ;;		On exit  : 0/0
 17938 ;;		Unchanged: 0/0
 17939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17940 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17941 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17942 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17943 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17944 ;;Total ram usage:       29 bytes
 17945 ;; Hardware stack levels used:    1
 17946 ;; Hardware stack levels required when called:    9
 17947 ;; This function calls:
 17948 ;;		___lwdiv
 17949 ;;		___lwmod
 17950 ;;		___wmul
 17951 ;;		_isdigit
 17952 ;;		_putch
 17953 ;; This function is called by:
 17954 ;;		_UI
 17955 ;;		_change_state_to_menu_start
 17956 ;;		_change_state_to_menu_12
 17957 ;;		_change_state_to_menu_22
 17958 ;;		_printRTC
 17959 ;;		_EEPROM_write
 17960 ;;		_Test
 17961 ;;		_algorithmTest
 17962 ;;		_sensorTest
 17963 ;;		_actuatorTest
 17964 ;;		_BothServos
 17965 ;;		_PortTestDC
 17966 ;;		_PlatformTest
 17967 ;;		_SpeedTest
 17968 ;;		_BlockerTest
 17969 ;;		_arm
 17970 ;;		_PortTestPusher
 17971 ;; This function uses a non-reentrant model
 17972 ;;
 17973                           
 17974                           	psect	text56
 17975  001CCE                     __ptext56:
 17976                           	opt stack 0
 17977  001CCE                     _printf:
 17978                           	opt stack 18
 17979                           
 17980                           ;doprnt.c: 466: va_list ap;
 17981                           ;doprnt.c: 499: signed char c;
 17982                           ;doprnt.c: 501: int width;
 17983                           ;doprnt.c: 506: signed char prec;
 17984                           ;doprnt.c: 508: unsigned char flag;
 17985                           ;doprnt.c: 523: union {
 17986                           ;doprnt.c: 524: unsigned long vd;
 17987                           ;doprnt.c: 525: double integ;
 17988                           ;doprnt.c: 526: } tmpval;
 17989                           ;doprnt.c: 528: unsigned int val;
 17990                           ;doprnt.c: 529: unsigned len;
 17991                           ;doprnt.c: 530: const char * cp;
 17992                           ;doprnt.c: 533: *ap = __va_start();
 17993                           
 17994                           ;incstack = 0
 17995  001CCE  0E90               	movlw	low (?_printf+2)
 17996  001CD0  0100               	movlb	0	; () banked
 17997  001CD2  6FA1               	movwf	printf@ap& (0+255),b
 17998  001CD4  0E00               	movlw	high (?_printf+2)
 17999  001CD6  0100               	movlb	0	; () banked
 18000  001CD8  6FA2               	movwf	(printf@ap+1)& (0+255),b
 18001                           
 18002                           ;doprnt.c: 536: while(c = *f++) {
 18003  001CDA  D205               	goto	l7021
 18004  001CDC                     l6891:
 18005                           
 18006                           ; BSR set to: 0
 18007                           ;doprnt.c: 538: if(c != '%')
 18008  001CDC  0E25               	movlw	37
 18009  001CDE  0100               	movlb	0	; () banked
 18010  001CE0  19A8               	xorwf	printf@c& (0+255),w,b
 18011  001CE2  B4D8               	btfsc	status,2,c
 18012  001CE4  D005               	goto	l6895
 18013                           
 18014                           ; BSR set to: 0
 18015                           ;doprnt.c: 540: {
 18016                           ;doprnt.c: 541: (putch(c) );
 18017  001CE6  0100               	movlb	0	; () banked
 18018  001CE8  51A8               	movf	printf@c& (0+255),w,b
 18019  001CEA  ECC9  F02F         	call	_putch
 18020                           
 18021                           ;doprnt.c: 542: continue;
 18022  001CEE  D1FB               	goto	l7021
 18023  001CF0                     l6895:
 18024                           
 18025                           ;doprnt.c: 543: }
 18026                           ;doprnt.c: 546: width = 0;
 18027  001CF0  0E00               	movlw	0
 18028  001CF2  0100               	movlb	0	; () banked
 18029  001CF4  6FAA               	movwf	(printf@width+1)& (0+255),b
 18030  001CF6  0E00               	movlw	0
 18031  001CF8  6FA9               	movwf	printf@width& (0+255),b
 18032                           
 18033                           ;doprnt.c: 548: flag = 0;
 18034  001CFA  0E00               	movlw	0
 18035  001CFC  0100               	movlb	0	; () banked
 18036  001CFE  6FA7               	movwf	printf@flag& (0+255),b
 18037                           
 18038                           ; BSR set to: 0
 18039                           ;doprnt.c: 551: switch(*f) {
 18040                           
 18041                           ;doprnt.c: 550: for(;;) {
 18042  001D00  D005               	goto	l6901
 18043  001D02                     l6897:
 18044                           
 18045                           ;doprnt.c: 580: flag |= 0x04;
 18046  001D02  0100               	movlb	0	; () banked
 18047  001D04  85A7               	bsf	printf@flag& (0+255),2,b
 18048                           
 18049                           ;doprnt.c: 581: f++;
 18050  001D06  0100               	movlb	0	; () banked
 18051  001D08  4B8E               	infsnz	printf@f& (0+255),f,b
 18052  001D0A  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18053  001D0C                     l6901:
 18054  001D0C  C08E  FFF6         	movff	printf@f,tblptrl
 18055  001D10  C08F  FFF7         	movff	printf@f+1,tblptrh
 18056  001D14                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18057  001D14  6AF8               	clrf	tblptru,c
 18058  001D16                     	endif
 18059  001D16                     	if	0	;tblptru may be non-zero
 18060  001D16                     	endif
 18061  001D16  0008               	tblrd		*
 18062  001D18  50F5               	movf	tablat,w,c
 18063                           
 18064                           ; Switch size 1, requested type "space"
 18065                           ; Number of cases is 1, Range of values is 48 to 48
 18066                           ; switch strategies available:
 18067                           ; Name         Instructions Cycles
 18068                           ; simple_byte            4     3 (average)
 18069                           ;	Chosen strategy is simple_byte
 18070  001D1A  0A30               	xorlw	48	; case 48
 18071  001D1C  B4D8               	btfsc	status,2,c
 18072  001D1E  D7F1               	goto	l6897
 18073                           
 18074                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 18075                           
 18076                           ;doprnt.c: 586: }
 18077                           
 18078                           ;doprnt.c: 585: break;
 18079  001D20  C08E  FFF6         	movff	printf@f,tblptrl
 18080  001D24  C08F  FFF7         	movff	printf@f+1,tblptrh
 18081  001D28                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18082  001D28  6AF8               	clrf	tblptru,c
 18083  001D2A                     	endif
 18084  001D2A                     	if	0	;tblptru may be non-zero
 18085  001D2A                     	endif
 18086  001D2A  0008               	tblrd		*
 18087  001D2C  50F5               	movf	tablat,w,c
 18088  001D2E  ECD2  F02E         	call	_isdigit
 18089  001D32  A0D8               	btfss	status,0,c
 18090  001D34  D0D2               	goto	l6949
 18091                           
 18092                           ;doprnt.c: 598: width = 0;
 18093  001D36  0E00               	movlw	0
 18094  001D38  0100               	movlb	0	; () banked
 18095  001D3A  6FAA               	movwf	(printf@width+1)& (0+255),b
 18096  001D3C  0E00               	movlw	0
 18097  001D3E  6FA9               	movwf	printf@width& (0+255),b
 18098  001D40                     l6907:
 18099                           
 18100                           ;doprnt.c: 600: width *= 10;
 18101  001D40  C0A9  F080         	movff	printf@width,___wmul@multiplier
 18102  001D44  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 18103  001D48  0E00               	movlw	0
 18104  001D4A  0100               	movlb	0	; () banked
 18105  001D4C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18106  001D4E  0E0A               	movlw	10
 18107  001D50  6F82               	movwf	___wmul@multiplicand& (0+255),b
 18108  001D52  EC3B  F02D         	call	___wmul	;wreg free
 18109  001D56  C080  F0A9         	movff	?___wmul,printf@width
 18110  001D5A  C081  F0AA         	movff	?___wmul+1,printf@width+1
 18111                           
 18112                           ;doprnt.c: 601: width += *f++ - '0';
 18113  001D5E  0ED0               	movlw	208
 18114  001D60  0100               	movlb	0	; () banked
 18115  001D62  6F9A               	movwf	??_printf& (0+255),b
 18116  001D64  0EFF               	movlw	255
 18117  001D66  0100               	movlb	0	; () banked
 18118  001D68  6F9B               	movwf	(??_printf+1)& (0+255),b
 18119  001D6A  C08E  FFF6         	movff	printf@f,tblptrl
 18120  001D6E  C08F  FFF7         	movff	printf@f+1,tblptrh
 18121  001D72                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18122  001D72  6AF8               	clrf	tblptru,c
 18123  001D74                     	endif
 18124  001D74                     	if	0	;tblptru may be non-zero
 18125  001D74                     	endif
 18126  001D74  0008               	tblrd		*
 18127  001D76  50F5               	movf	tablat,w,c
 18128  001D78  0100               	movlb	0	; () banked
 18129  001D7A  6F9C               	movwf	(??_printf+2)& (0+255),b
 18130  001D7C  6B9D               	clrf	(??_printf+3)& (0+255),b
 18131  001D7E  0100               	movlb	0	; () banked
 18132  001D80  519A               	movf	??_printf& (0+255),w,b
 18133  001D82  0100               	movlb	0	; () banked
 18134  001D84  279C               	addwf	(??_printf+2)& (0+255),f,b
 18135  001D86  0100               	movlb	0	; () banked
 18136  001D88  519B               	movf	(??_printf+1)& (0+255),w,b
 18137  001D8A  0100               	movlb	0	; () banked
 18138  001D8C  239D               	addwfc	(??_printf+3)& (0+255),f,b
 18139  001D8E  0100               	movlb	0	; () banked
 18140  001D90  519C               	movf	(??_printf+2)& (0+255),w,b
 18141  001D92  0100               	movlb	0	; () banked
 18142  001D94  27A9               	addwf	printf@width& (0+255),f,b
 18143  001D96  0100               	movlb	0	; () banked
 18144  001D98  519D               	movf	(??_printf+3)& (0+255),w,b
 18145  001D9A  0100               	movlb	0	; () banked
 18146  001D9C  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 18147                           
 18148                           ; BSR set to: 0
 18149  001D9E  0100               	movlb	0	; () banked
 18150  001DA0  4B8E               	infsnz	printf@f& (0+255),f,b
 18151  001DA2  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18152                           
 18153                           ; BSR set to: 0
 18154                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 18155  001DA4  C08E  FFF6         	movff	printf@f,tblptrl
 18156  001DA8  C08F  FFF7         	movff	printf@f+1,tblptrh
 18157  001DAC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18158  001DAC  6AF8               	clrf	tblptru,c
 18159  001DAE                     	endif
 18160  001DAE                     	if	0	;tblptru may be non-zero
 18161  001DAE                     	endif
 18162  001DAE  0008               	tblrd		*
 18163  001DB0  50F5               	movf	tablat,w,c
 18164  001DB2  ECD2  F02E         	call	_isdigit
 18165  001DB6  A0D8               	btfss	status,0,c
 18166  001DB8  D090               	goto	l6949
 18167  001DBA  D7C2               	goto	l6907
 18168  001DBC                     l6915:
 18169                           
 18170                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 18171  001DBC  C0A1  FFD9         	movff	printf@ap,fsr2l
 18172  001DC0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 18173  001DC4  CFDE F09F          	movff	postinc2,printf@cp
 18174  001DC8  CFDD F0A0          	movff	postdec2,printf@cp+1
 18175  001DCC  0E02               	movlw	2
 18176  001DCE  0100               	movlb	0	; () banked
 18177  001DD0  27A1               	addwf	printf@ap& (0+255),f,b
 18178  001DD2  0E00               	movlw	0
 18179  001DD4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 18180                           
 18181                           ; BSR set to: 0
 18182                           ;doprnt.c: 740: if(!cp)
 18183  001DD6  0100               	movlb	0	; () banked
 18184  001DD8  519F               	movf	printf@cp& (0+255),w,b
 18185  001DDA  0100               	movlb	0	; () banked
 18186  001DDC  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 18187  001DDE  A4D8               	btfss	status,2,c
 18188  001DE0  D006               	goto	l6923
 18189                           
 18190                           ; BSR set to: 0
 18191                           ;doprnt.c: 741: cp = "(null)";
 18192  001DE2  0EB5               	movlw	low STR_129
 18193  001DE4  0100               	movlb	0	; () banked
 18194  001DE6  6F9F               	movwf	printf@cp& (0+255),b
 18195  001DE8  0EFF               	movlw	high STR_129
 18196  001DEA  0100               	movlb	0	; () banked
 18197  001DEC  6FA0               	movwf	(printf@cp+1)& (0+255),b
 18198  001DEE                     l6923:
 18199                           
 18200                           ; BSR set to: 0
 18201                           ;doprnt.c: 745: len = 0;
 18202  001DEE  0E00               	movlw	0
 18203  001DF0  0100               	movlb	0	; () banked
 18204  001DF2  6FA4               	movwf	(printf@len+1)& (0+255),b
 18205  001DF4  0E00               	movlw	0
 18206  001DF6  6FA3               	movwf	printf@len& (0+255),b
 18207                           
 18208                           ;doprnt.c: 746: while(cp[len])
 18209  001DF8  D003               	goto	l6927
 18210  001DFA                     l6925:
 18211                           
 18212                           ;doprnt.c: 747: len++;
 18213  001DFA  0100               	movlb	0	; () banked
 18214  001DFC  4BA3               	infsnz	printf@len& (0+255),f,b
 18215  001DFE  2BA4               	incf	(printf@len+1)& (0+255),f,b
 18216  001E00                     l6927:
 18217                           
 18218                           ; BSR set to: 0
 18219  001E00  0100               	movlb	0	; () banked
 18220  001E02  51A3               	movf	printf@len& (0+255),w,b
 18221  001E04  0100               	movlb	0	; () banked
 18222  001E06  259F               	addwf	printf@cp& (0+255),w,b
 18223  001E08  0100               	movlb	0	; () banked
 18224  001E0A  6F9A               	movwf	??_printf& (0+255),b
 18225  001E0C  0100               	movlb	0	; () banked
 18226  001E0E  51A4               	movf	(printf@len+1)& (0+255),w,b
 18227  001E10  0100               	movlb	0	; () banked
 18228  001E12  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 18229  001E14  0100               	movlb	0	; () banked
 18230  001E16  6F9B               	movwf	(??_printf+1)& (0+255),b
 18231  001E18  C09A  FFF6         	movff	??_printf,tblptrl
 18232  001E1C  C09B  FFF7         	movff	??_printf+1,tblptrh
 18233  001E20  0E00               	movlw	low (__mediumconst shr (0+16))
 18234  001E22  6EF8               	movwf	tblptru,c
 18235  001E24  0E0F               	movlw	(high __ramtop+-1)
 18236  001E26  64F7               	cpfsgt	tblptrh,c
 18237  001E28  D003               	bra	u5687
 18238  001E2A  0008               	tblrd		*
 18239  001E2C  50F5               	movf	tablat,w,c
 18240  001E2E  D005               	bra	u5680
 18241  001E30                     u5687:
 18242  001E30  CFF6 FFE9          	movff	tblptrl,fsr0l
 18243  001E34  CFF7 FFEA          	movff	tblptrh,fsr0h
 18244  001E38  50EF               	movf	indf0,w,c
 18245  001E3A                     u5680:
 18246  001E3A  0900               	iorlw	0
 18247  001E3C  A4D8               	btfss	status,2,c
 18248  001E3E  D7DD               	goto	l6925
 18249                           
 18250                           ;doprnt.c: 757: if(width > len)
 18251  001E40  0100               	movlb	0	; () banked
 18252  001E42  51A9               	movf	printf@width& (0+255),w,b
 18253  001E44  0100               	movlb	0	; () banked
 18254  001E46  5DA3               	subwf	printf@len& (0+255),w,b
 18255  001E48  0100               	movlb	0	; () banked
 18256  001E4A  51AA               	movf	(printf@width+1)& (0+255),w,b
 18257  001E4C  0100               	movlb	0	; () banked
 18258  001E4E  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 18259  001E50  B0D8               	btfsc	status,0,c
 18260  001E52  D009               	goto	l6933
 18261                           
 18262                           ; BSR set to: 0
 18263                           ;doprnt.c: 758: width -= len;
 18264  001E54  0100               	movlb	0	; () banked
 18265  001E56  51A3               	movf	printf@len& (0+255),w,b
 18266  001E58  0100               	movlb	0	; () banked
 18267  001E5A  5FA9               	subwf	printf@width& (0+255),f,b
 18268  001E5C  0100               	movlb	0	; () banked
 18269  001E5E  51A4               	movf	(printf@len+1)& (0+255),w,b
 18270  001E60  0100               	movlb	0	; () banked
 18271  001E62  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 18272  001E64  D009               	goto	l6937
 18273  001E66                     l6933:
 18274                           
 18275                           ; BSR set to: 0
 18276                           ;doprnt.c: 759: else
 18277                           ;doprnt.c: 760: width = 0;
 18278  001E66  0E00               	movlw	0
 18279  001E68  0100               	movlb	0	; () banked
 18280  001E6A  6FAA               	movwf	(printf@width+1)& (0+255),b
 18281  001E6C  0E00               	movlw	0
 18282  001E6E  6FA9               	movwf	printf@width& (0+255),b
 18283                           
 18284                           ; BSR set to: 0
 18285                           ;doprnt.c: 764: while(width--)
 18286  001E70  D003               	goto	l6937
 18287  001E72                     l6935:
 18288                           
 18289                           ; BSR set to: 0
 18290                           ;doprnt.c: 765: (putch(' ') );
 18291  001E72  0E20               	movlw	32
 18292  001E74  ECC9  F02F         	call	_putch
 18293  001E78                     l6937:
 18294  001E78  0100               	movlb	0	; () banked
 18295  001E7A  07A9               	decf	printf@width& (0+255),f,b
 18296  001E7C  A0D8               	btfss	status,0,c
 18297  001E7E  07AA               	decf	(printf@width+1)& (0+255),f,b
 18298  001E80  0100               	movlb	0	; () banked
 18299  001E82  29A9               	incf	printf@width& (0+255),w,b
 18300  001E84  E1F6               	bnz	l6935
 18301  001E86  0100               	movlb	0	; () banked
 18302  001E88  29AA               	incf	(printf@width+1)& (0+255),w,b
 18303  001E8A  B4D8               	btfsc	status,2,c
 18304  001E8C  D017               	goto	l6943
 18305  001E8E  D7F1               	goto	l6935
 18306  001E90                     l6939:
 18307                           
 18308                           ; BSR set to: 0
 18309                           ;doprnt.c: 768: (putch(*cp++) );
 18310  001E90  C09F  FFF6         	movff	printf@cp,tblptrl
 18311  001E94  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 18312  001E98  0E00               	movlw	low (__mediumconst shr (0+16))
 18313  001E9A  6EF8               	movwf	tblptru,c
 18314  001E9C  0E0F               	movlw	(high __ramtop+-1)
 18315  001E9E  64F7               	cpfsgt	tblptrh,c
 18316  001EA0  D003               	bra	u5727
 18317  001EA2  0008               	tblrd		*
 18318  001EA4  50F5               	movf	tablat,w,c
 18319  001EA6  D005               	bra	u5720
 18320  001EA8                     u5727:
 18321  001EA8  CFF6 FFE9          	movff	tblptrl,fsr0l
 18322  001EAC  CFF7 FFEA          	movff	tblptrh,fsr0h
 18323  001EB0  50EF               	movf	indf0,w,c
 18324  001EB2                     u5720:
 18325  001EB2  ECC9  F02F         	call	_putch
 18326  001EB6  0100               	movlb	0	; () banked
 18327  001EB8  4B9F               	infsnz	printf@cp& (0+255),f,b
 18328  001EBA  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 18329  001EBC                     l6943:
 18330                           
 18331                           ; BSR set to: 0
 18332  001EBC  0100               	movlb	0	; () banked
 18333  001EBE  07A3               	decf	printf@len& (0+255),f,b
 18334  001EC0  A0D8               	btfss	status,0,c
 18335  001EC2  07A4               	decf	(printf@len+1)& (0+255),f,b
 18336  001EC4  0100               	movlb	0	; () banked
 18337  001EC6  29A3               	incf	printf@len& (0+255),w,b
 18338  001EC8  E1E3               	bnz	l6939
 18339  001ECA  0100               	movlb	0	; () banked
 18340  001ECC  29A4               	incf	(printf@len+1)& (0+255),w,b
 18341  001ECE  B4D8               	btfsc	status,2,c
 18342  001ED0  D10A               	goto	l7021
 18343  001ED2  D7DE               	goto	l6939
 18344  001ED4                     l6945:
 18345                           
 18346                           ; BSR set to: 0
 18347                           ;doprnt.c: 818: flag |= 0x40;
 18348  001ED4  0100               	movlb	0	; () banked
 18349  001ED6  8DA7               	bsf	printf@flag& (0+255),6,b
 18350                           
 18351                           ; BSR set to: 0
 18352                           ;doprnt.c: 822: }
 18353                           
 18354                           ;doprnt.c: 819: break;
 18355  001ED8  D01D               	goto	l1569
 18356  001EDA                     l6949:
 18357  001EDA  C08E  FFF6         	movff	printf@f,tblptrl
 18358  001EDE  C08F  FFF7         	movff	printf@f+1,tblptrh
 18359  001EE2  0100               	movlb	0	; () banked
 18360  001EE4  4B8E               	infsnz	printf@f& (0+255),f,b
 18361  001EE6  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18362  001EE8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18363  001EE8  6AF8               	clrf	tblptru,c
 18364  001EEA                     	endif
 18365  001EEA                     	if	0	;tblptru may be non-zero
 18366  001EEA                     	endif
 18367  001EEA  0008               	tblrd		*
 18368  001EEC  CFF5 F0A8          	movff	tablat,printf@c
 18369  001EF0  0100               	movlb	0	; () banked
 18370  001EF2  51A8               	movf	printf@c& (0+255),w,b
 18371                           
 18372                           ; Switch size 1, requested type "space"
 18373                           ; Number of cases is 5, Range of values is 0 to 117
 18374                           ; switch strategies available:
 18375                           ; Name         Instructions Cycles
 18376                           ; simple_byte           16     9 (average)
 18377                           ;	Chosen strategy is simple_byte
 18378  001EF4  0A00               	xorlw	0	; case 0
 18379  001EF6  B4D8               	btfsc	status,2,c
 18380  001EF8  0012               	return	
 18381  001EFA  0A64               	xorlw	100	; case 100
 18382  001EFC  B4D8               	btfsc	status,2,c
 18383  001EFE  D00A               	goto	l1569
 18384  001F00  0A0D               	xorlw	13	; case 105
 18385  001F02  B4D8               	btfsc	status,2,c
 18386  001F04  D007               	goto	l1569
 18387  001F06  0A1A               	xorlw	26	; case 115
 18388  001F08  B4D8               	btfsc	status,2,c
 18389  001F0A  D758               	goto	l6915
 18390  001F0C  0A06               	xorlw	6	; case 117
 18391  001F0E  B4D8               	btfsc	status,2,c
 18392  001F10  D7E1               	goto	l6945
 18393  001F12  D0E9               	goto	l7021
 18394  001F14                     l1569:
 18395                           
 18396                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 18397  001F14  0100               	movlb	0	; () banked
 18398  001F16  BDA7               	btfsc	printf@flag& (0+255),6,b
 18399  001F18  D019               	goto	l6961
 18400                           
 18401                           ; BSR set to: 0
 18402                           ;doprnt.c: 1253: {
 18403                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 18404  001F1A  C0A1  FFD9         	movff	printf@ap,fsr2l
 18405  001F1E  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 18406  001F22  CFDE F0A5          	movff	postinc2,printf@val
 18407  001F26  CFDD F0A6          	movff	postdec2,printf@val+1
 18408                           
 18409                           ; BSR set to: 0
 18410  001F2A  0E02               	movlw	2
 18411  001F2C  0100               	movlb	0	; () banked
 18412  001F2E  27A1               	addwf	printf@ap& (0+255),f,b
 18413  001F30  0E00               	movlw	0
 18414  001F32  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 18415                           
 18416                           ; BSR set to: 0
 18417                           ;doprnt.c: 1261: if((int)val < 0) {
 18418  001F34  0100               	movlb	0	; () banked
 18419  001F36  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 18420  001F38  D016               	goto	l6965
 18421                           
 18422                           ; BSR set to: 0
 18423                           ;doprnt.c: 1262: flag |= 0x03;
 18424  001F3A  0E03               	movlw	3
 18425  001F3C  0100               	movlb	0	; () banked
 18426  001F3E  13A7               	iorwf	printf@flag& (0+255),f,b
 18427                           
 18428                           ; BSR set to: 0
 18429                           ;doprnt.c: 1263: val = -val;
 18430  001F40  0100               	movlb	0	; () banked
 18431  001F42  6DA5               	negf	printf@val& (0+255),b
 18432  001F44  1FA6               	comf	(printf@val+1)& (0+255),f,b
 18433  001F46  B0D8               	btfsc	status,0,c
 18434  001F48  2BA6               	incf	(printf@val+1)& (0+255),f,b
 18435                           
 18436                           ; BSR set to: 0
 18437                           ;doprnt.c: 1264: }
 18438                           ;doprnt.c: 1266: }
 18439  001F4A  D00D               	goto	l6965
 18440  001F4C                     l6961:
 18441                           
 18442                           ; BSR set to: 0
 18443                           ;doprnt.c: 1268: else
 18444                           ;doprnt.c: 1273: {
 18445                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 18446  001F4C  C0A1  FFD9         	movff	printf@ap,fsr2l
 18447  001F50  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 18448  001F54  CFDE F0A5          	movff	postinc2,printf@val
 18449  001F58  CFDD F0A6          	movff	postdec2,printf@val+1
 18450                           
 18451                           ; BSR set to: 0
 18452  001F5C  0E02               	movlw	2
 18453  001F5E  0100               	movlb	0	; () banked
 18454  001F60  27A1               	addwf	printf@ap& (0+255),f,b
 18455  001F62  0E00               	movlw	0
 18456  001F64  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 18457  001F66                     l6965:
 18458                           
 18459                           ; BSR set to: 0
 18460                           ;doprnt.c: 1287: }
 18461                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 18462  001F66  0E01               	movlw	1
 18463  001F68  0100               	movlb	0	; () banked
 18464  001F6A  6FA8               	movwf	printf@c& (0+255),b
 18465  001F6C                     l6967:
 18466                           
 18467                           ; BSR set to: 0
 18468  001F6C  0E05               	movlw	5
 18469  001F6E  0100               	movlb	0	; () banked
 18470  001F70  19A8               	xorwf	printf@c& (0+255),w,b
 18471  001F72  B4D8               	btfsc	status,2,c
 18472  001F74  D019               	goto	l6979
 18473                           
 18474                           ; BSR set to: 0
 18475                           ;doprnt.c: 1306: if(val < dpowers[c])
 18476                           
 18477                           ; BSR set to: 0
 18478                           
 18479                           ; BSR set to: 0
 18480  001F76  0100               	movlb	0	; () banked
 18481  001F78  51A8               	movf	printf@c& (0+255),w,b
 18482  001F7A  0D02               	mullw	2
 18483  001F7C  0EB8               	movlw	low _dpowers
 18484  001F7E  24F3               	addwf	prodl,w,c
 18485  001F80  6EF6               	movwf	tblptrl,c
 18486  001F82  0EFA               	movlw	high _dpowers
 18487  001F84  20F4               	addwfc	prodh,w,c
 18488  001F86  6EF7               	movwf	tblptrh,c
 18489  001F88                     	if	1	;There are 3 active tblptr bytes
 18490  001F88  6AF8               	clrf	tblptru,c
 18491  001F8A  0E00               	movlw	low (__mediumconst shr (0+16))
 18492  001F8C  22F8               	addwfc	tblptru,f,c
 18493  001F8E                     	endif
 18494  001F8E  0009               	tblrd		*+
 18495  001F90  50F5               	movf	tablat,w,c
 18496  001F92  0100               	movlb	0	; () banked
 18497  001F94  5DA5               	subwf	printf@val& (0+255),w,b
 18498  001F96  0009               	tblrd		*+
 18499  001F98  50F5               	movf	tablat,w,c
 18500  001F9A  0100               	movlb	0	; () banked
 18501  001F9C  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 18502  001F9E  A0D8               	btfss	status,0,c
 18503  001FA0  D003               	goto	l6979
 18504                           
 18505                           ; BSR set to: 0
 18506                           
 18507                           ; BSR set to: 0
 18508                           
 18509                           ; BSR set to: 0
 18510                           ;doprnt.c: 1307: break;
 18511  001FA2  0100               	movlb	0	; () banked
 18512  001FA4  2BA8               	incf	printf@c& (0+255),f,b
 18513  001FA6  D7E2               	goto	l6967
 18514  001FA8                     l6979:
 18515                           
 18516                           ; BSR set to: 0
 18517                           ;doprnt.c: 1345: if(width && flag & 0x03)
 18518  001FA8  0100               	movlb	0	; () banked
 18519  001FAA  51A9               	movf	printf@width& (0+255),w,b
 18520  001FAC  0100               	movlb	0	; () banked
 18521  001FAE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18522  001FB0  B4D8               	btfsc	status,2,c
 18523  001FB2  D00B               	goto	l6985
 18524                           
 18525                           ; BSR set to: 0
 18526  001FB4  C0A7  F09A         	movff	printf@flag,??_printf
 18527  001FB8  0E03               	movlw	3
 18528  001FBA  0100               	movlb	0	; () banked
 18529  001FBC  179A               	andwf	??_printf& (0+255),f,b
 18530  001FBE  B4D8               	btfsc	status,2,c
 18531  001FC0  D004               	goto	l6985
 18532                           
 18533                           ; BSR set to: 0
 18534                           ;doprnt.c: 1346: width--;
 18535  001FC2  0100               	movlb	0	; () banked
 18536  001FC4  07A9               	decf	printf@width& (0+255),f,b
 18537  001FC6  A0D8               	btfss	status,0,c
 18538  001FC8  07AA               	decf	(printf@width+1)& (0+255),f,b
 18539  001FCA                     l6985:
 18540                           
 18541                           ; BSR set to: 0
 18542                           ;doprnt.c: 1381: if(width > c)
 18543  001FCA  0E80               	movlw	128
 18544  001FCC  0100               	movlb	0	; () banked
 18545  001FCE  BFA8               	btfsc	printf@c& (0+255),7,b
 18546  001FD0  0E7F               	movlw	127
 18547  001FD2  0100               	movlb	0	; () banked
 18548  001FD4  6F9A               	movwf	??_printf& (0+255),b
 18549  001FD6  0100               	movlb	0	; () banked
 18550  001FD8  51A9               	movf	printf@width& (0+255),w,b
 18551  001FDA  0100               	movlb	0	; () banked
 18552  001FDC  5DA8               	subwf	printf@c& (0+255),w,b
 18553  001FDE  0100               	movlb	0	; () banked
 18554  001FE0  51AA               	movf	(printf@width+1)& (0+255),w,b
 18555  001FE2  0A80               	xorlw	128
 18556  001FE4  0100               	movlb	0	; () banked
 18557  001FE6  599A               	subwfb	??_printf& (0+255),w,b
 18558  001FE8  B0D8               	btfsc	status,0,c
 18559  001FEA  D00B               	goto	l6989
 18560                           
 18561                           ; BSR set to: 0
 18562                           ;doprnt.c: 1382: width -= c;
 18563  001FEC  0100               	movlb	0	; () banked
 18564  001FEE  51A8               	movf	printf@c& (0+255),w,b
 18565  001FF0  0100               	movlb	0	; () banked
 18566  001FF2  5FA9               	subwf	printf@width& (0+255),f,b
 18567  001FF4  0E00               	movlw	0
 18568  001FF6  0100               	movlb	0	; () banked
 18569  001FF8  BFA8               	btfsc	printf@c& (0+255),7,b
 18570  001FFA  0EFF               	movlw	255
 18571  001FFC  0100               	movlb	0	; () banked
 18572  001FFE  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 18573  002000  D005               	goto	l6991
 18574  002002                     l6989:
 18575                           
 18576                           ; BSR set to: 0
 18577                           ;doprnt.c: 1383: else
 18578                           ;doprnt.c: 1384: width = 0;
 18579  002002  0E00               	movlw	0
 18580  002004  0100               	movlb	0	; () banked
 18581  002006  6FAA               	movwf	(printf@width+1)& (0+255),b
 18582  002008  0E00               	movlw	0
 18583  00200A  6FA9               	movwf	printf@width& (0+255),b
 18584  00200C                     l6991:
 18585                           
 18586                           ; BSR set to: 0
 18587                           ;doprnt.c: 1387: if(flag & 0x04) {
 18588  00200C  0100               	movlb	0	; () banked
 18589  00200E  A5A7               	btfss	printf@flag& (0+255),2,b
 18590  002010  D018               	goto	l7003
 18591                           
 18592                           ; BSR set to: 0
 18593                           ;doprnt.c: 1392: if(flag & 0x03)
 18594  002012  C0A7  F09A         	movff	printf@flag,??_printf
 18595  002016  0E03               	movlw	3
 18596  002018  0100               	movlb	0	; () banked
 18597  00201A  179A               	andwf	??_printf& (0+255),f,b
 18598  00201C  B4D8               	btfsc	status,2,c
 18599  00201E  D003               	goto	l6997
 18600                           
 18601                           ; BSR set to: 0
 18602                           ;doprnt.c: 1393: (putch('-') );
 18603  002020  0E2D               	movlw	45
 18604  002022  ECC9  F02F         	call	_putch
 18605  002026                     l6997:
 18606                           
 18607                           ;doprnt.c: 1415: if(width)
 18608  002026  0100               	movlb	0	; () banked
 18609  002028  51A9               	movf	printf@width& (0+255),w,b
 18610  00202A  0100               	movlb	0	; () banked
 18611  00202C  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18612  00202E  B4D8               	btfsc	status,2,c
 18613  002030  D025               	goto	l7013
 18614                           
 18615                           ; BSR set to: 0
 18616                           ;doprnt.c: 1417: (putch('0') );
 18617                           
 18618                           ; BSR set to: 0
 18619                           
 18620                           ;doprnt.c: 1416: do
 18621  002032  0E30               	movlw	48
 18622  002034  ECC9  F02F         	call	_putch
 18623                           
 18624                           ;doprnt.c: 1418: while(--width);
 18625  002038  0100               	movlb	0	; () banked
 18626  00203A  07A9               	decf	printf@width& (0+255),f,b
 18627  00203C  A0D8               	btfss	status,0,c
 18628  00203E  07AA               	decf	(printf@width+1)& (0+255),f,b
 18629  002040  D7F2               	goto	l6997
 18630  002042                     l7003:
 18631                           
 18632                           ; BSR set to: 0
 18633                           ;doprnt.c: 1422: {
 18634                           ;doprnt.c: 1424: if(width
 18635                           ;doprnt.c: 1428: )
 18636  002042  0100               	movlb	0	; () banked
 18637  002044  51A9               	movf	printf@width& (0+255),w,b
 18638  002046  0100               	movlb	0	; () banked
 18639  002048  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18640  00204A  B4D8               	btfsc	status,2,c
 18641  00204C  D00D               	goto	l7009
 18642  00204E                     l7005:
 18643                           
 18644                           ; BSR set to: 0
 18645                           ;doprnt.c: 1430: (putch(' ') );
 18646  00204E  0E20               	movlw	32
 18647  002050  ECC9  F02F         	call	_putch
 18648                           
 18649                           ;doprnt.c: 1431: while(--width);
 18650  002054  0100               	movlb	0	; () banked
 18651  002056  07A9               	decf	printf@width& (0+255),f,b
 18652  002058  A0D8               	btfss	status,0,c
 18653  00205A  07AA               	decf	(printf@width+1)& (0+255),f,b
 18654  00205C  0100               	movlb	0	; () banked
 18655  00205E  51A9               	movf	printf@width& (0+255),w,b
 18656  002060  0100               	movlb	0	; () banked
 18657  002062  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18658  002064  A4D8               	btfss	status,2,c
 18659  002066  D7F3               	goto	l7005
 18660  002068                     l7009:
 18661                           
 18662                           ; BSR set to: 0
 18663                           ;doprnt.c: 1438: if(flag & 0x03)
 18664  002068  C0A7  F09A         	movff	printf@flag,??_printf
 18665  00206C  0E03               	movlw	3
 18666  00206E  0100               	movlb	0	; () banked
 18667  002070  179A               	andwf	??_printf& (0+255),f,b
 18668  002072  B4D8               	btfsc	status,2,c
 18669  002074  D003               	goto	l7013
 18670                           
 18671                           ; BSR set to: 0
 18672                           ;doprnt.c: 1439: (putch('-') );
 18673  002076  0E2D               	movlw	45
 18674  002078  ECC9  F02F         	call	_putch
 18675  00207C                     l7013:
 18676                           
 18677                           ;doprnt.c: 1469: }
 18678                           ;doprnt.c: 1472: prec = c;
 18679  00207C  C0A8  F09E         	movff	printf@c,printf@prec
 18680                           
 18681                           ;doprnt.c: 1474: while(prec--) {
 18682  002080  D02C               	goto	l7019
 18683  002082                     l7015:
 18684                           
 18685                           ;doprnt.c: 1478: {
 18686                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18687  002082  0100               	movlb	0	; () banked
 18688  002084  519E               	movf	printf@prec& (0+255),w,b
 18689  002086  0D02               	mullw	2
 18690  002088  0EB8               	movlw	low _dpowers
 18691  00208A  24F3               	addwf	prodl,w,c
 18692  00208C  6EF6               	movwf	tblptrl,c
 18693  00208E  0EFA               	movlw	high _dpowers
 18694  002090  20F4               	addwfc	prodh,w,c
 18695  002092  6EF7               	movwf	tblptrh,c
 18696  002094                     	if	1	;There are 3 active tblptr bytes
 18697  002094  6AF8               	clrf	tblptru,c
 18698  002096  0E00               	movlw	low (__mediumconst shr (0+16))
 18699  002098  22F8               	addwfc	tblptru,f,c
 18700  00209A                     	endif
 18701  00209A  0009               	tblrd		*+
 18702  00209C  CFF5 F082          	movff	tablat,___lwdiv@divisor
 18703  0020A0  000A               	tblrd		*-
 18704  0020A2  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 18705  0020A6  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 18706  0020AA  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 18707  0020AE  ECC4  F029         	call	___lwdiv	;wreg free
 18708  0020B2  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 18709  0020B6  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 18710  0020BA  0E00               	movlw	0
 18711  0020BC  0100               	movlb	0	; () banked
 18712  0020BE  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 18713  0020C0  0E0A               	movlw	10
 18714  0020C2  6F89               	movwf	___lwmod@divisor& (0+255),b
 18715  0020C4  EC0D  F02B         	call	___lwmod	;wreg free
 18716  0020C8  0100               	movlb	0	; () banked
 18717  0020CA  5187               	movf	?___lwmod& (0+255),w,b
 18718  0020CC  0F30               	addlw	48
 18719  0020CE  0100               	movlb	0	; () banked
 18720  0020D0  6FA8               	movwf	printf@c& (0+255),b
 18721                           
 18722                           ; BSR set to: 0
 18723                           ;doprnt.c: 1523: }
 18724                           ;doprnt.c: 1524: (putch(c) );
 18725  0020D2  0100               	movlb	0	; () banked
 18726  0020D4  51A8               	movf	printf@c& (0+255),w,b
 18727  0020D6  ECC9  F02F         	call	_putch
 18728  0020DA                     l7019:
 18729  0020DA  0100               	movlb	0	; () banked
 18730  0020DC  079E               	decf	printf@prec& (0+255),f,b
 18731  0020DE  0100               	movlb	0	; () banked
 18732  0020E0  299E               	incf	printf@prec& (0+255),w,b
 18733  0020E2  A4D8               	btfss	status,2,c
 18734  0020E4  D7CE               	goto	l7015
 18735  0020E6                     l7021:
 18736  0020E6  C08E  FFF6         	movff	printf@f,tblptrl
 18737  0020EA  C08F  FFF7         	movff	printf@f+1,tblptrh
 18738  0020EE  0100               	movlb	0	; () banked
 18739  0020F0  4B8E               	infsnz	printf@f& (0+255),f,b
 18740  0020F2  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18741  0020F4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18742  0020F4  6AF8               	clrf	tblptru,c
 18743  0020F6                     	endif
 18744  0020F6                     	if	0	;tblptru may be non-zero
 18745  0020F6                     	endif
 18746  0020F6  0008               	tblrd		*
 18747  0020F8  CFF5 F0A8          	movff	tablat,printf@c
 18748  0020FC  0100               	movlb	0	; () banked
 18749  0020FE  51A8               	movf	printf@c& (0+255),w,b
 18750  002100  B4D8               	btfsc	status,2,c
 18751  002102  0012               	return	
 18752  002104  D5EB               	goto	l6891
 18753  002106                     __end_of_printf:
 18754                           	opt stack 0
 18755                           tblptru	equ	0xFF8
 18756                           tblptrh	equ	0xFF7
 18757                           tblptrl	equ	0xFF6
 18758                           tablat	equ	0xFF5
 18759                           prodh	equ	0xFF4
 18760                           prodl	equ	0xFF3
 18761                           intcon	equ	0xFF2
 18762                           intcon2	equ	0xFF1
 18763                           intcon3	equ	0xFF0
 18764                           indf0	equ	0xFEF
 18765                           postinc0	equ	0xFEE
 18766                           fsr0h	equ	0xFEA
 18767                           fsr0l	equ	0xFE9
 18768                           wreg	equ	0xFE8
 18769                           postdec1	equ	0xFE5
 18770                           fsr1l	equ	0xFE1
 18771                           indf2	equ	0xFDF
 18772                           postinc2	equ	0xFDE
 18773                           postdec2	equ	0xFDD
 18774                           fsr2h	equ	0xFDA
 18775                           fsr2l	equ	0xFD9
 18776                           status	equ	0xFD8
 18777                           
 18778 ;; *************** function _putch *****************
 18779 ;; Defined at:
 18780 ;;		line 20 in file "lcd.c"
 18781 ;; Parameters:    Size  Location     Type
 18782 ;;  data            1    wreg     unsigned char 
 18783 ;; Auto vars:     Size  Location     Type
 18784 ;;  data            1    2[BANK0 ] unsigned char 
 18785 ;; Return value:  Size  Location     Type
 18786 ;;                  1    wreg      void 
 18787 ;; Registers used:
 18788 ;;		wreg, status,2, status,0, cstack
 18789 ;; Tracked objects:
 18790 ;;		On entry : 0/0
 18791 ;;		On exit  : 0/0
 18792 ;;		Unchanged: 0/0
 18793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18795 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18797 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18798 ;;Total ram usage:        1 bytes
 18799 ;; Hardware stack levels used:    1
 18800 ;; Hardware stack levels required when called:    8
 18801 ;; This function calls:
 18802 ;;		_lcdNibble
 18803 ;; This function is called by:
 18804 ;;		_printf
 18805 ;; This function uses a non-reentrant model
 18806 ;;
 18807                           
 18808                           	psect	text57
 18809  005F92                     __ptext57:
 18810                           	opt stack 0
 18811  005F92                     _putch:
 18812                           	opt stack 18
 18813                           
 18814                           ;incstack = 0
 18815                           ;putch@data stored from wreg
 18816  005F92  0100               	movlb	0	; () banked
 18817  005F94  6F82               	movwf	putch@data& (0+255),b
 18818                           
 18819                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 18820  005F96  848C               	bsf	3980,2,c	;volatile
 18821                           
 18822                           ;lcd.c: 22: lcdNibble(data);
 18823  005F98  0100               	movlb	0	; () banked
 18824  005F9A  5182               	movf	putch@data& (0+255),w,b
 18825  005F9C  EC71  F02A         	call	_lcdNibble
 18826  005FA0  0012               	return		;funcret
 18827  005FA2                     __end_of_putch:
 18828                           	opt stack 0
 18829                           tblptru	equ	0xFF8
 18830                           tblptrh	equ	0xFF7
 18831                           tblptrl	equ	0xFF6
 18832                           tablat	equ	0xFF5
 18833                           prodh	equ	0xFF4
 18834                           prodl	equ	0xFF3
 18835                           intcon	equ	0xFF2
 18836                           intcon2	equ	0xFF1
 18837                           intcon3	equ	0xFF0
 18838                           indf0	equ	0xFEF
 18839                           postinc0	equ	0xFEE
 18840                           fsr0h	equ	0xFEA
 18841                           fsr0l	equ	0xFE9
 18842                           wreg	equ	0xFE8
 18843                           postdec1	equ	0xFE5
 18844                           fsr1l	equ	0xFE1
 18845                           indf2	equ	0xFDF
 18846                           postinc2	equ	0xFDE
 18847                           postdec2	equ	0xFDD
 18848                           fsr2h	equ	0xFDA
 18849                           fsr2l	equ	0xFD9
 18850                           status	equ	0xFD8
 18851                           
 18852 ;; *************** function _isdigit *****************
 18853 ;; Defined at:
 18854 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 18855 ;; Parameters:    Size  Location     Type
 18856 ;;  c               1    wreg     unsigned char 
 18857 ;; Auto vars:     Size  Location     Type
 18858 ;;  c               1    2[BANK0 ] unsigned char 
 18859 ;; Return value:  Size  Location     Type
 18860 ;;		None               void
 18861 ;; Registers used:
 18862 ;;		wreg, status,2, status,0
 18863 ;; Tracked objects:
 18864 ;;		On entry : 0/0
 18865 ;;		On exit  : 0/0
 18866 ;;		Unchanged: 0/0
 18867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18869 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18870 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18871 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18872 ;;Total ram usage:        3 bytes
 18873 ;; Hardware stack levels used:    1
 18874 ;; Hardware stack levels required when called:    7
 18875 ;; This function calls:
 18876 ;;		Nothing
 18877 ;; This function is called by:
 18878 ;;		_printf
 18879 ;; This function uses a non-reentrant model
 18880 ;;
 18881                           
 18882                           	psect	text58
 18883  005DA4                     __ptext58:
 18884                           	opt stack 0
 18885  005DA4                     _isdigit:
 18886                           	opt stack 19
 18887                           
 18888                           ;incstack = 0
 18889                           ;isdigit@c stored from wreg
 18890  005DA4  0100               	movlb	0	; () banked
 18891  005DA6  6F82               	movwf	isdigit@c& (0+255),b
 18892  005DA8  0E00               	movlw	0
 18893  005DAA  0100               	movlb	0	; () banked
 18894  005DAC  6F81               	movwf	_isdigit$2072& (0+255),b
 18895                           
 18896                           ; BSR set to: 0
 18897  005DAE  0E3A               	movlw	58
 18898  005DB0  0100               	movlb	0	; () banked
 18899  005DB2  6182               	cpfslt	isdigit@c& (0+255),b
 18900  005DB4  D007               	goto	l6729
 18901                           
 18902                           ; BSR set to: 0
 18903  005DB6  0E2F               	movlw	47
 18904  005DB8  0100               	movlb	0	; () banked
 18905  005DBA  6582               	cpfsgt	isdigit@c& (0+255),b
 18906  005DBC  D003               	goto	l6729
 18907                           
 18908                           ; BSR set to: 0
 18909  005DBE  0E01               	movlw	1
 18910  005DC0  0100               	movlb	0	; () banked
 18911  005DC2  6F81               	movwf	_isdigit$2072& (0+255),b
 18912  005DC4                     l6729:
 18913                           
 18914                           ; BSR set to: 0
 18915  005DC4  C081  F080         	movff	_isdigit$2072,??_isdigit
 18916  005DC8  0100               	movlb	0	; () banked
 18917  005DCA  3180               	rrcf	??_isdigit& (0+255),w,b
 18918  005DCC  0012               	return	
 18919  005DCE                     __end_of_isdigit:
 18920                           	opt stack 0
 18921                           tblptru	equ	0xFF8
 18922                           tblptrh	equ	0xFF7
 18923                           tblptrl	equ	0xFF6
 18924                           tablat	equ	0xFF5
 18925                           prodh	equ	0xFF4
 18926                           prodl	equ	0xFF3
 18927                           intcon	equ	0xFF2
 18928                           intcon2	equ	0xFF1
 18929                           intcon3	equ	0xFF0
 18930                           indf0	equ	0xFEF
 18931                           postinc0	equ	0xFEE
 18932                           fsr0h	equ	0xFEA
 18933                           fsr0l	equ	0xFE9
 18934                           wreg	equ	0xFE8
 18935                           postdec1	equ	0xFE5
 18936                           fsr1l	equ	0xFE1
 18937                           indf2	equ	0xFDF
 18938                           postinc2	equ	0xFDE
 18939                           postdec2	equ	0xFDD
 18940                           fsr2h	equ	0xFDA
 18941                           fsr2l	equ	0xFD9
 18942                           status	equ	0xFD8
 18943                           
 18944 ;; *************** function ___wmul *****************
 18945 ;; Defined at:
 18946 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 18947 ;; Parameters:    Size  Location     Type
 18948 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18949 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18950 ;; Auto vars:     Size  Location     Type
 18951 ;;  product         2    4[BANK0 ] unsigned int 
 18952 ;; Return value:  Size  Location     Type
 18953 ;;                  2    0[BANK0 ] unsigned int 
 18954 ;; Registers used:
 18955 ;;		wreg, status,2, status,0, prodl, prodh
 18956 ;; Tracked objects:
 18957 ;;		On entry : 0/0
 18958 ;;		On exit  : 0/0
 18959 ;;		Unchanged: 0/0
 18960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18961 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18962 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18964 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18965 ;;Total ram usage:        6 bytes
 18966 ;; Hardware stack levels used:    1
 18967 ;; Hardware stack levels required when called:    7
 18968 ;; This function calls:
 18969 ;;		Nothing
 18970 ;; This function is called by:
 18971 ;;		_printf
 18972 ;; This function uses a non-reentrant model
 18973 ;;
 18974                           
 18975                           	psect	text59
 18976  005A76                     __ptext59:
 18977                           	opt stack 0
 18978  005A76                     ___wmul:
 18979                           	opt stack 19
 18980                           
 18981                           ; BSR set to: 0
 18982                           ;incstack = 0
 18983  005A76  0100               	movlb	0	; () banked
 18984  005A78  5180               	movf	___wmul@multiplier& (0+255),w,b
 18985  005A7A  0100               	movlb	0	; () banked
 18986  005A7C  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18987  005A7E  CFF3 F084          	movff	prodl,___wmul@product
 18988  005A82  CFF4 F085          	movff	prodh,___wmul@product+1
 18989  005A86  0100               	movlb	0	; () banked
 18990  005A88  5180               	movf	___wmul@multiplier& (0+255),w,b
 18991  005A8A  0100               	movlb	0	; () banked
 18992  005A8C  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 18993  005A8E  50F3               	movf	prodl,w,c
 18994  005A90  0100               	movlb	0	; () banked
 18995  005A92  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18996  005A94  0100               	movlb	0	; () banked
 18997  005A96  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 18998  005A98  0100               	movlb	0	; () banked
 18999  005A9A  0382               	mulwf	___wmul@multiplicand& (0+255),b
 19000  005A9C  50F3               	movf	prodl,w,c
 19001  005A9E  0100               	movlb	0	; () banked
 19002  005AA0  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 19003                           
 19004                           ; BSR set to: 0
 19005  005AA2  C084  F080         	movff	___wmul@product,?___wmul
 19006  005AA6  C085  F081         	movff	___wmul@product+1,?___wmul+1
 19007  005AAA  0012               	return	
 19008  005AAC                     __end_of___wmul:
 19009                           	opt stack 0
 19010                           tblptru	equ	0xFF8
 19011                           tblptrh	equ	0xFF7
 19012                           tblptrl	equ	0xFF6
 19013                           tablat	equ	0xFF5
 19014                           prodh	equ	0xFF4
 19015                           prodl	equ	0xFF3
 19016                           intcon	equ	0xFF2
 19017                           intcon2	equ	0xFF1
 19018                           intcon3	equ	0xFF0
 19019                           indf0	equ	0xFEF
 19020                           postinc0	equ	0xFEE
 19021                           fsr0h	equ	0xFEA
 19022                           fsr0l	equ	0xFE9
 19023                           wreg	equ	0xFE8
 19024                           postdec1	equ	0xFE5
 19025                           fsr1l	equ	0xFE1
 19026                           indf2	equ	0xFDF
 19027                           postinc2	equ	0xFDE
 19028                           postdec2	equ	0xFDD
 19029                           fsr2h	equ	0xFDA
 19030                           fsr2l	equ	0xFD9
 19031                           status	equ	0xFD8
 19032                           
 19033 ;; *************** function ___lwmod *****************
 19034 ;; Defined at:
 19035 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 19036 ;; Parameters:    Size  Location     Type
 19037 ;;  dividend        2    7[BANK0 ] unsigned int 
 19038 ;;  divisor         2    9[BANK0 ] unsigned int 
 19039 ;; Auto vars:     Size  Location     Type
 19040 ;;  counter         1   11[BANK0 ] unsigned char 
 19041 ;; Return value:  Size  Location     Type
 19042 ;;                  2    7[BANK0 ] unsigned int 
 19043 ;; Registers used:
 19044 ;;		wreg, status,2, status,0
 19045 ;; Tracked objects:
 19046 ;;		On entry : 0/0
 19047 ;;		On exit  : 0/0
 19048 ;;		Unchanged: 0/0
 19049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19050 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19051 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19053 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19054 ;;Total ram usage:        5 bytes
 19055 ;; Hardware stack levels used:    1
 19056 ;; Hardware stack levels required when called:    7
 19057 ;; This function calls:
 19058 ;;		Nothing
 19059 ;; This function is called by:
 19060 ;;		_printf
 19061 ;; This function uses a non-reentrant model
 19062 ;;
 19063                           
 19064                           	psect	text60
 19065  00561A                     __ptext60:
 19066                           	opt stack 0
 19067  00561A                     ___lwmod:
 19068                           	opt stack 19
 19069                           
 19070                           ; BSR set to: 0
 19071                           ;incstack = 0
 19072  00561A  0100               	movlb	0	; () banked
 19073  00561C  5189               	movf	___lwmod@divisor& (0+255),w,b
 19074  00561E  0100               	movlb	0	; () banked
 19075  005620  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 19076  005622  B4D8               	btfsc	status,2,c
 19077  005624  D026               	goto	l2026
 19078                           
 19079                           ; BSR set to: 0
 19080  005626  0E01               	movlw	1
 19081  005628  0100               	movlb	0	; () banked
 19082  00562A  6F8B               	movwf	___lwmod@counter& (0+255),b
 19083  00562C  D006               	goto	l6767
 19084  00562E                     l6765:
 19085                           
 19086                           ; BSR set to: 0
 19087  00562E  0100               	movlb	0	; () banked
 19088  005630  90D8               	bcf	status,0,c
 19089  005632  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 19090  005634  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 19091  005636  0100               	movlb	0	; () banked
 19092  005638  2B8B               	incf	___lwmod@counter& (0+255),f,b
 19093  00563A                     l6767:
 19094                           
 19095                           ; BSR set to: 0
 19096  00563A  0100               	movlb	0	; () banked
 19097  00563C  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 19098  00563E  D7F7               	goto	l6765
 19099  005640                     l6769:
 19100                           
 19101                           ; BSR set to: 0
 19102  005640  0100               	movlb	0	; () banked
 19103  005642  5189               	movf	___lwmod@divisor& (0+255),w,b
 19104  005644  0100               	movlb	0	; () banked
 19105  005646  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 19106  005648  0100               	movlb	0	; () banked
 19107  00564A  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 19108  00564C  0100               	movlb	0	; () banked
 19109  00564E  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 19110  005650  A0D8               	btfss	status,0,c
 19111  005652  D008               	goto	l6773
 19112                           
 19113                           ; BSR set to: 0
 19114  005654  0100               	movlb	0	; () banked
 19115  005656  5189               	movf	___lwmod@divisor& (0+255),w,b
 19116  005658  0100               	movlb	0	; () banked
 19117  00565A  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 19118  00565C  0100               	movlb	0	; () banked
 19119  00565E  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 19120  005660  0100               	movlb	0	; () banked
 19121  005662  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 19122  005664                     l6773:
 19123                           
 19124                           ; BSR set to: 0
 19125  005664  0100               	movlb	0	; () banked
 19126  005666  90D8               	bcf	status,0,c
 19127  005668  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 19128  00566A  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 19129                           
 19130                           ; BSR set to: 0
 19131  00566C  0100               	movlb	0	; () banked
 19132  00566E  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 19133  005670  D7E7               	goto	l6769
 19134  005672                     l2026:
 19135                           
 19136                           ; BSR set to: 0
 19137  005672  C087  F087         	movff	___lwmod@dividend,?___lwmod
 19138  005676  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 19139                           
 19140                           ; BSR set to: 0
 19141  00567A  0012               	return		;funcret
 19142  00567C                     __end_of___lwmod:
 19143                           	opt stack 0
 19144                           tblptru	equ	0xFF8
 19145                           tblptrh	equ	0xFF7
 19146                           tblptrl	equ	0xFF6
 19147                           tablat	equ	0xFF5
 19148                           prodh	equ	0xFF4
 19149                           prodl	equ	0xFF3
 19150                           intcon	equ	0xFF2
 19151                           intcon2	equ	0xFF1
 19152                           intcon3	equ	0xFF0
 19153                           indf0	equ	0xFEF
 19154                           postinc0	equ	0xFEE
 19155                           fsr0h	equ	0xFEA
 19156                           fsr0l	equ	0xFE9
 19157                           wreg	equ	0xFE8
 19158                           postdec1	equ	0xFE5
 19159                           fsr1l	equ	0xFE1
 19160                           indf2	equ	0xFDF
 19161                           postinc2	equ	0xFDE
 19162                           postdec2	equ	0xFDD
 19163                           fsr2h	equ	0xFDA
 19164                           fsr2l	equ	0xFD9
 19165                           status	equ	0xFD8
 19166                           
 19167 ;; *************** function ___lwdiv *****************
 19168 ;; Defined at:
 19169 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 19170 ;; Parameters:    Size  Location     Type
 19171 ;;  dividend        2    0[BANK0 ] unsigned int 
 19172 ;;  divisor         2    2[BANK0 ] unsigned int 
 19173 ;; Auto vars:     Size  Location     Type
 19174 ;;  quotient        2    4[BANK0 ] unsigned int 
 19175 ;;  counter         1    6[BANK0 ] unsigned char 
 19176 ;; Return value:  Size  Location     Type
 19177 ;;                  2    0[BANK0 ] unsigned int 
 19178 ;; Registers used:
 19179 ;;		wreg, status,2, status,0
 19180 ;; Tracked objects:
 19181 ;;		On entry : 0/0
 19182 ;;		On exit  : 0/0
 19183 ;;		Unchanged: 0/0
 19184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19185 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19186 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19188 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19189 ;;Total ram usage:        7 bytes
 19190 ;; Hardware stack levels used:    1
 19191 ;; Hardware stack levels required when called:    7
 19192 ;; This function calls:
 19193 ;;		Nothing
 19194 ;; This function is called by:
 19195 ;;		_printf
 19196 ;; This function uses a non-reentrant model
 19197 ;;
 19198                           
 19199                           	psect	text61
 19200  005388                     __ptext61:
 19201                           	opt stack 0
 19202  005388                     ___lwdiv:
 19203                           	opt stack 19
 19204                           
 19205                           ; BSR set to: 0
 19206                           ;incstack = 0
 19207  005388  0E00               	movlw	0
 19208  00538A  0100               	movlb	0	; () banked
 19209  00538C  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 19210  00538E  0E00               	movlw	0
 19211  005390  6F84               	movwf	___lwdiv@quotient& (0+255),b
 19212                           
 19213                           ; BSR set to: 0
 19214  005392  0100               	movlb	0	; () banked
 19215  005394  5182               	movf	___lwdiv@divisor& (0+255),w,b
 19216  005396  0100               	movlb	0	; () banked
 19217  005398  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 19218  00539A  B4D8               	btfsc	status,2,c
 19219  00539C  D02C               	goto	l2016
 19220                           
 19221                           ; BSR set to: 0
 19222  00539E  0E01               	movlw	1
 19223  0053A0  0100               	movlb	0	; () banked
 19224  0053A2  6F86               	movwf	___lwdiv@counter& (0+255),b
 19225  0053A4  D006               	goto	l6747
 19226  0053A6                     l6745:
 19227                           
 19228                           ; BSR set to: 0
 19229  0053A6  0100               	movlb	0	; () banked
 19230  0053A8  90D8               	bcf	status,0,c
 19231  0053AA  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 19232  0053AC  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 19233  0053AE  0100               	movlb	0	; () banked
 19234  0053B0  2B86               	incf	___lwdiv@counter& (0+255),f,b
 19235  0053B2                     l6747:
 19236                           
 19237                           ; BSR set to: 0
 19238  0053B2  0100               	movlb	0	; () banked
 19239  0053B4  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 19240  0053B6  D7F7               	goto	l6745
 19241  0053B8                     l6749:
 19242                           
 19243                           ; BSR set to: 0
 19244  0053B8  0100               	movlb	0	; () banked
 19245  0053BA  90D8               	bcf	status,0,c
 19246  0053BC  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 19247  0053BE  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 19248                           
 19249                           ; BSR set to: 0
 19250  0053C0  0100               	movlb	0	; () banked
 19251  0053C2  5182               	movf	___lwdiv@divisor& (0+255),w,b
 19252  0053C4  0100               	movlb	0	; () banked
 19253  0053C6  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 19254  0053C8  0100               	movlb	0	; () banked
 19255  0053CA  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 19256  0053CC  0100               	movlb	0	; () banked
 19257  0053CE  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 19258  0053D0  A0D8               	btfss	status,0,c
 19259  0053D2  D00A               	goto	l6757
 19260                           
 19261                           ; BSR set to: 0
 19262  0053D4  0100               	movlb	0	; () banked
 19263  0053D6  5182               	movf	___lwdiv@divisor& (0+255),w,b
 19264  0053D8  0100               	movlb	0	; () banked
 19265  0053DA  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 19266  0053DC  0100               	movlb	0	; () banked
 19267  0053DE  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 19268  0053E0  0100               	movlb	0	; () banked
 19269  0053E2  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 19270                           
 19271                           ; BSR set to: 0
 19272  0053E4  0100               	movlb	0	; () banked
 19273  0053E6  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 19274  0053E8                     l6757:
 19275                           
 19276                           ; BSR set to: 0
 19277  0053E8  0100               	movlb	0	; () banked
 19278  0053EA  90D8               	bcf	status,0,c
 19279  0053EC  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 19280  0053EE  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 19281                           
 19282                           ; BSR set to: 0
 19283  0053F0  0100               	movlb	0	; () banked
 19284  0053F2  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 19285  0053F4  D7E1               	goto	l6749
 19286  0053F6                     l2016:
 19287                           
 19288                           ; BSR set to: 0
 19289  0053F6  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 19290  0053FA  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 19291                           
 19292                           ; BSR set to: 0
 19293  0053FE  0012               	return		;funcret
 19294  005400                     __end_of___lwdiv:
 19295                           	opt stack 0
 19296                           tblptru	equ	0xFF8
 19297                           tblptrh	equ	0xFF7
 19298                           tblptrl	equ	0xFF6
 19299                           tablat	equ	0xFF5
 19300                           prodh	equ	0xFF4
 19301                           prodl	equ	0xFF3
 19302                           intcon	equ	0xFF2
 19303                           intcon2	equ	0xFF1
 19304                           intcon3	equ	0xFF0
 19305                           indf0	equ	0xFEF
 19306                           postinc0	equ	0xFEE
 19307                           fsr0h	equ	0xFEA
 19308                           fsr0l	equ	0xFE9
 19309                           wreg	equ	0xFE8
 19310                           postdec1	equ	0xFE5
 19311                           fsr1l	equ	0xFE1
 19312                           indf2	equ	0xFDF
 19313                           postinc2	equ	0xFDE
 19314                           postdec2	equ	0xFDD
 19315                           fsr2h	equ	0xFDA
 19316                           fsr2l	equ	0xFD9
 19317                           status	equ	0xFD8
 19318                           
 19319 ;; *************** function _lcdInst *****************
 19320 ;; Defined at:
 19321 ;;		line 15 in file "lcd.c"
 19322 ;; Parameters:    Size  Location     Type
 19323 ;;  data            1    wreg     unsigned char 
 19324 ;; Auto vars:     Size  Location     Type
 19325 ;;  data            1    2[BANK0 ] unsigned char 
 19326 ;; Return value:  Size  Location     Type
 19327 ;;                  1    wreg      void 
 19328 ;; Registers used:
 19329 ;;		wreg, status,2, status,0, cstack
 19330 ;; Tracked objects:
 19331 ;;		On entry : 0/0
 19332 ;;		On exit  : 0/0
 19333 ;;		Unchanged: 0/0
 19334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19336 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19338 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19339 ;;Total ram usage:        1 bytes
 19340 ;; Hardware stack levels used:    1
 19341 ;; Hardware stack levels required when called:    8
 19342 ;; This function calls:
 19343 ;;		_lcdNibble
 19344 ;; This function is called by:
 19345 ;;		_UI
 19346 ;;		_change_state_to_menu_start
 19347 ;;		_change_state_to_menu_12
 19348 ;;		_change_state_to_menu_22
 19349 ;;		_initLCD
 19350 ;;		_printRTC
 19351 ;;		_Loading
 19352 ;;		_EEPROM_write
 19353 ;;		_Test
 19354 ;;		_algorithmTest
 19355 ;;		_sensorTest
 19356 ;;		_actuatorTest
 19357 ;;		_BothServos
 19358 ;;		_PortTestDC
 19359 ;;		_PlatformTest
 19360 ;;		_SpeedTest
 19361 ;;		_BlockerTest
 19362 ;;		_arm
 19363 ;;		_PortTestPusher
 19364 ;; This function uses a non-reentrant model
 19365 ;;
 19366                           
 19367                           	psect	text62
 19368  005FA2                     __ptext62:
 19369                           	opt stack 0
 19370  005FA2                     _lcdInst:
 19371                           	opt stack 20
 19372                           
 19373                           ; BSR set to: 0
 19374                           ;incstack = 0
 19375                           ;lcdInst@data stored from wreg
 19376  005FA2  0100               	movlb	0	; () banked
 19377  005FA4  6F82               	movwf	lcdInst@data& (0+255),b
 19378                           
 19379                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 19380  005FA6  948C               	bcf	3980,2,c	;volatile
 19381                           
 19382                           ;lcd.c: 17: lcdNibble(data);
 19383  005FA8  0100               	movlb	0	; () banked
 19384  005FAA  5182               	movf	lcdInst@data& (0+255),w,b
 19385  005FAC  EC71  F02A         	call	_lcdNibble
 19386  005FB0  0012               	return		;funcret
 19387  005FB2                     __end_of_lcdInst:
 19388                           	opt stack 0
 19389                           tblptru	equ	0xFF8
 19390                           tblptrh	equ	0xFF7
 19391                           tblptrl	equ	0xFF6
 19392                           tablat	equ	0xFF5
 19393                           prodh	equ	0xFF4
 19394                           prodl	equ	0xFF3
 19395                           intcon	equ	0xFF2
 19396                           intcon2	equ	0xFF1
 19397                           intcon3	equ	0xFF0
 19398                           indf0	equ	0xFEF
 19399                           postinc0	equ	0xFEE
 19400                           fsr0h	equ	0xFEA
 19401                           fsr0l	equ	0xFE9
 19402                           wreg	equ	0xFE8
 19403                           postdec1	equ	0xFE5
 19404                           fsr1l	equ	0xFE1
 19405                           indf2	equ	0xFDF
 19406                           postinc2	equ	0xFDE
 19407                           postdec2	equ	0xFDD
 19408                           fsr2h	equ	0xFDA
 19409                           fsr2l	equ	0xFD9
 19410                           status	equ	0xFD8
 19411                           
 19412 ;; *************** function _lcdNibble *****************
 19413 ;; Defined at:
 19414 ;;		line 25 in file "lcd.c"
 19415 ;; Parameters:    Size  Location     Type
 19416 ;;  data            1    wreg     unsigned char 
 19417 ;; Auto vars:     Size  Location     Type
 19418 ;;  data            1    1[BANK0 ] unsigned char 
 19419 ;;  temp            1    0[BANK0 ] unsigned char 
 19420 ;; Return value:  Size  Location     Type
 19421 ;;                  1    wreg      void 
 19422 ;; Registers used:
 19423 ;;		wreg, status,2, status,0
 19424 ;; Tracked objects:
 19425 ;;		On entry : 0/0
 19426 ;;		On exit  : 0/0
 19427 ;;		Unchanged: 0/0
 19428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19430 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19432 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19433 ;;Total ram usage:        2 bytes
 19434 ;; Hardware stack levels used:    1
 19435 ;; Hardware stack levels required when called:    7
 19436 ;; This function calls:
 19437 ;;		Nothing
 19438 ;; This function is called by:
 19439 ;;		_lcdInst
 19440 ;;		_putch
 19441 ;; This function uses a non-reentrant model
 19442 ;;
 19443                           
 19444                           	psect	text63
 19445  0054E2                     __ptext63:
 19446                           	opt stack 0
 19447  0054E2                     _lcdNibble:
 19448                           	opt stack 20
 19449                           
 19450                           ;incstack = 0
 19451                           ;lcdNibble@data stored from wreg
 19452  0054E2  0100               	movlb	0	; () banked
 19453  0054E4  6F81               	movwf	lcdNibble@data& (0+255),b
 19454                           
 19455                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 19456  0054E6  9EF2               	bcf	intcon,7,c	;volatile
 19457                           
 19458                           ;lcd.c: 28: char temp = data & 0xF0;
 19459  0054E8  0100               	movlb	0	; () banked
 19460  0054EA  5181               	movf	lcdNibble@data& (0+255),w,b
 19461  0054EC  0BF0               	andlw	240
 19462  0054EE  0100               	movlb	0	; () banked
 19463  0054F0  6F80               	movwf	lcdNibble@temp& (0+255),b
 19464                           
 19465                           ;lcd.c: 29: LATD = LATD & 0x0F;
 19466  0054F2  508C               	movf	3980,w,c	;volatile
 19467  0054F4  0B0F               	andlw	15
 19468  0054F6  6E8C               	movwf	3980,c	;volatile
 19469                           
 19470                           ;lcd.c: 30: LATD = temp | LATD;
 19471  0054F8  0100               	movlb	0	; () banked
 19472  0054FA  5180               	movf	lcdNibble@temp& (0+255),w,b
 19473  0054FC  108C               	iorwf	3980,w,c	;volatile
 19474  0054FE  6E8C               	movwf	3980,c	;volatile
 19475                           
 19476                           ; BSR set to: 0
 19477                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 19478  005500  868C               	bsf	3980,3,c	;volatile
 19479                           
 19480                           ; BSR set to: 0
 19481                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19482  005502  0E42               	movlw	66
 19483  005504                     u12217:
 19484  005504  2EE8               	decfsz	wreg,f,c
 19485  005506  D7FE               	bra	u12217
 19486  005508  D000               	nop2	
 19487                           
 19488                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 19489  00550A  968C               	bcf	3980,3,c	;volatile
 19490                           
 19491                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19492  00550C  0E42               	movlw	66
 19493  00550E                     u12227:
 19494  00550E  2EE8               	decfsz	wreg,f,c
 19495  005510  D7FE               	bra	u12227
 19496  005512  D000               	nop2	
 19497                           
 19498                           ;lcd.c: 37: data = data << 4;
 19499  005514  0100               	movlb	0	; () banked
 19500  005516  3981               	swapf	lcdNibble@data& (0+255),w,b
 19501  005518  0BF0               	andlw	240
 19502  00551A  0100               	movlb	0	; () banked
 19503  00551C  6F81               	movwf	lcdNibble@data& (0+255),b
 19504                           
 19505                           ;lcd.c: 39: temp = data & 0xF0;
 19506  00551E  0100               	movlb	0	; () banked
 19507  005520  5181               	movf	lcdNibble@data& (0+255),w,b
 19508  005522  0BF0               	andlw	240
 19509  005524  0100               	movlb	0	; () banked
 19510  005526  6F80               	movwf	lcdNibble@temp& (0+255),b
 19511                           
 19512                           ;lcd.c: 40: LATD = LATD & 0x0F;
 19513  005528  508C               	movf	3980,w,c	;volatile
 19514  00552A  0B0F               	andlw	15
 19515  00552C  6E8C               	movwf	3980,c	;volatile
 19516                           
 19517                           ;lcd.c: 41: LATD = temp | LATD;
 19518  00552E  0100               	movlb	0	; () banked
 19519  005530  5180               	movf	lcdNibble@temp& (0+255),w,b
 19520  005532  108C               	iorwf	3980,w,c	;volatile
 19521  005534  6E8C               	movwf	3980,c	;volatile
 19522                           
 19523                           ; BSR set to: 0
 19524                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 19525  005536  868C               	bsf	3980,3,c	;volatile
 19526                           
 19527                           ; BSR set to: 0
 19528                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19529  005538  0E42               	movlw	66
 19530  00553A                     u12237:
 19531  00553A  2EE8               	decfsz	wreg,f,c
 19532  00553C  D7FE               	bra	u12237
 19533  00553E  D000               	nop2	
 19534                           
 19535                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 19536  005540  968C               	bcf	3980,3,c	;volatile
 19537                           
 19538                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19539  005542  0E42               	movlw	66
 19540  005544                     u12247:
 19541  005544  2EE8               	decfsz	wreg,f,c
 19542  005546  D7FE               	bra	u12247
 19543  005548  D000               	nop2	
 19544                           
 19545                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 19546  00554A  8EF2               	bsf	intcon,7,c	;volatile
 19547  00554C  0012               	return		;funcret
 19548  00554E                     __end_of_lcdNibble:
 19549                           	opt stack 0
 19550                           tblptru	equ	0xFF8
 19551                           tblptrh	equ	0xFF7
 19552                           tblptrl	equ	0xFF6
 19553                           tablat	equ	0xFF5
 19554                           prodh	equ	0xFF4
 19555                           prodl	equ	0xFF3
 19556                           intcon	equ	0xFF2
 19557                           intcon2	equ	0xFF1
 19558                           intcon3	equ	0xFF0
 19559                           indf0	equ	0xFEF
 19560                           postinc0	equ	0xFEE
 19561                           fsr0h	equ	0xFEA
 19562                           fsr0l	equ	0xFE9
 19563                           wreg	equ	0xFE8
 19564                           postdec1	equ	0xFE5
 19565                           fsr1l	equ	0xFE1
 19566                           indf2	equ	0xFDF
 19567                           postinc2	equ	0xFDE
 19568                           postdec2	equ	0xFDD
 19569                           fsr2h	equ	0xFDA
 19570                           fsr2l	equ	0xFD9
 19571                           status	equ	0xFD8
 19572                           
 19573 ;; *************** function _handler *****************
 19574 ;; Defined at:
 19575 ;;		line 16 in file "interruptHandler.c"
 19576 ;; Parameters:    Size  Location     Type
 19577 ;;		None
 19578 ;; Auto vars:     Size  Location     Type
 19579 ;;		None
 19580 ;; Return value:  Size  Location     Type
 19581 ;;                  1    wreg      void 
 19582 ;; Registers used:
 19583 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19584 ;; Tracked objects:
 19585 ;;		On entry : 0/0
 19586 ;;		On exit  : 0/0
 19587 ;;		Unchanged: 0/0
 19588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19591 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19592 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19593 ;;Total ram usage:       16 bytes
 19594 ;; Hardware stack levels used:    1
 19595 ;; Hardware stack levels required when called:    6
 19596 ;; This function calls:
 19597 ;;		_printSortTimer
 19598 ;;		_updateArmState
 19599 ;;		_updateMenu
 19600 ;;		_updateServoStates
 19601 ;;		i2_change_state_to_menu_start
 19602 ;; This function is called by:
 19603 ;;		Interrupt level 2
 19604 ;; This function uses a non-reentrant model
 19605 ;;
 19606                           
 19607                           	psect	intcode
 19608  000008                     __pintcode:
 19609                           	opt stack 0
 19610  000008                     _handler:
 19611                           	opt stack 18
 19612                           
 19613                           ;incstack = 0
 19614  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19615  00000A  ED28  F01E         	call	int_func,f	;refresh shadow registers
 19616                           tblptru	equ	0xFF8
 19617                           tblptrh	equ	0xFF7
 19618                           tblptrl	equ	0xFF6
 19619                           tablat	equ	0xFF5
 19620                           prodh	equ	0xFF4
 19621                           prodl	equ	0xFF3
 19622                           intcon	equ	0xFF2
 19623                           intcon2	equ	0xFF1
 19624                           intcon3	equ	0xFF0
 19625                           indf0	equ	0xFEF
 19626                           postinc0	equ	0xFEE
 19627                           fsr0h	equ	0xFEA
 19628                           fsr0l	equ	0xFE9
 19629                           wreg	equ	0xFE8
 19630                           postdec1	equ	0xFE5
 19631                           fsr1l	equ	0xFE1
 19632                           indf2	equ	0xFDF
 19633                           postinc2	equ	0xFDE
 19634                           postdec2	equ	0xFDD
 19635                           fsr2h	equ	0xFDA
 19636                           fsr2l	equ	0xFD9
 19637                           status	equ	0xFD8
 19638                           
 19639                           	psect	intcode_body
 19640  003C50                     __pintcode_body:
 19641                           	opt stack 18
 19642  003C50                     int_func:
 19643                           	opt stack 18
 19644  003C50  0006               	pop		; remove dummy address from shadow register refresh
 19645  003C52  CFFA F04D          	movff	pclath,??_handler+2
 19646  003C56  CFFB F04E          	movff	pclatu,??_handler+3
 19647  003C5A  CFE9 F04F          	movff	fsr0l,??_handler+4
 19648  003C5E  CFEA F050          	movff	fsr0h,??_handler+5
 19649  003C62  CFE1 F051          	movff	fsr1l,??_handler+6
 19650  003C66  CFE2 F052          	movff	fsr1h,??_handler+7
 19651  003C6A  CFD9 F053          	movff	fsr2l,??_handler+8
 19652  003C6E  CFDA F054          	movff	fsr2h,??_handler+9
 19653  003C72  CFF3 F055          	movff	prodl,??_handler+10
 19654  003C76  CFF4 F056          	movff	prodh,??_handler+11
 19655  003C7A  CFF6 F057          	movff	tblptrl,??_handler+12
 19656  003C7E  CFF7 F058          	movff	tblptrh,??_handler+13
 19657  003C82  CFF8 F059          	movff	tblptru,??_handler+14
 19658  003C86  CFF5 F05A          	movff	tablat,??_handler+15
 19659                           
 19660                           ;interruptHandler.c: 18: if(INT1IF){
 19661  003C8A  A0F0               	btfss	intcon3,0,c	;volatile
 19662  003C8C  D034               	goto	i2l10487
 19663                           
 19664                           ;interruptHandler.c: 19: INT1IF = 0;
 19665  003C8E  90F0               	bcf	intcon3,0,c	;volatile
 19666                           
 19667                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 19668  003C90  3881               	swapf	3969,w,c	;volatile
 19669  003C92  0B0F               	andlw	15
 19670  003C94  0B0F               	andlw	15
 19671  003C96  6E4B               	movwf	??_handler& (0+255),c
 19672  003C98  6A4C               	clrf	(??_handler+1)& (0+255),c
 19673  003C9A  0EA7               	movlw	low _keys
 19674  003C9C  244B               	addwf	??_handler,w,c
 19675  003C9E  6EF6               	movwf	tblptrl,c
 19676  003CA0  0EFA               	movlw	high _keys
 19677  003CA2  204C               	addwfc	??_handler+1,w,c
 19678  003CA4  6EF7               	movwf	tblptrh,c
 19679  003CA6                     	if	1	;There are 3 active tblptr bytes
 19680  003CA6  6AF8               	clrf	tblptru,c
 19681  003CA8  0E00               	movlw	low (__mediumconst shr (0+16))
 19682  003CAA  22F8               	addwfc	tblptru,f,c
 19683  003CAC                     	endif
 19684  003CAC  0008               	tblrd		*
 19685  003CAE  CFF5 F07D          	movff	tablat,_input	;volatile
 19686                           
 19687                           ;interruptHandler.c: 21: if(input == '*'){
 19688  003CB2  0E2A               	movlw	42
 19689  003CB4  187D               	xorwf	_input,w,c	;volatile
 19690  003CB6  B4D8               	btfsc	status,2,c
 19691  003CB8  D00D               	goto	i2l10481
 19692  003CBA  D018               	goto	i2l10483
 19693  003CBC                     i2l10471:
 19694                           
 19695                           ;interruptHandler.c: 24: machine_state = Testing_state;
 19696  003CBC  0E03               	movlw	3
 19697  003CBE  D007               	goto	L16
 19698  003CC0                     i2l10473:
 19699                           
 19700                           ; BSR set to: 0
 19701                           ;interruptHandler.c: 27: machine_state = UI_state;
 19702  003CC0  0E00               	movlw	0
 19703  003CC2  0100               	movlb	0	; () banked
 19704  003CC4  6FFC               	movwf	_machine_state& (0+255),b
 19705                           
 19706                           ; BSR set to: 0
 19707                           ;interruptHandler.c: 28: change_state_to_menu_start();
 19708  003CC6  ECFB  F02E         	call	i2_change_state_to_menu_start	;wreg free
 19709                           
 19710                           ;interruptHandler.c: 29: break;
 19711  003CCA  D015               	goto	i2l10487
 19712  003CCC                     i2l10477:
 19713                           
 19714                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 19715  003CCC  0E02               	movlw	2
 19716  003CCE                     L16:
 19717  003CCE  0100               	movlb	0	; () banked
 19718  003CD0  6FFC               	movwf	_machine_state& (0+255),b
 19719                           
 19720                           ; BSR set to: 0
 19721                           ;interruptHandler.c: 33: }
 19722                           
 19723                           ;interruptHandler.c: 32: break;
 19724  003CD2  D011               	goto	i2l10487
 19725  003CD4                     i2l10481:
 19726  003CD4  0100               	movlb	0	; () banked
 19727  003CD6  51FC               	movf	_machine_state& (0+255),w,b
 19728                           
 19729                           ; Switch size 1, requested type "space"
 19730                           ; Number of cases is 3, Range of values is 0 to 3
 19731                           ; switch strategies available:
 19732                           ; Name         Instructions Cycles
 19733                           ; simple_byte           10     6 (average)
 19734                           ;	Chosen strategy is simple_byte
 19735  003CD8  0A00               	xorlw	0	; case 0
 19736  003CDA  B4D8               	btfsc	status,2,c
 19737  003CDC  D7EF               	goto	i2l10471
 19738  003CDE  0A01               	xorlw	1	; case 1
 19739  003CE0  B4D8               	btfsc	status,2,c
 19740  003CE2  D7F4               	goto	i2l10477
 19741  003CE4  0A02               	xorlw	2	; case 3
 19742  003CE6  B4D8               	btfsc	status,2,c
 19743  003CE8  D7EB               	goto	i2l10473
 19744                           
 19745                           ; BSR set to: 0
 19746                           ;interruptHandler.c: 34: }
 19747  003CEA  D005               	goto	i2l10487
 19748  003CEC                     i2l10483:
 19749                           
 19750                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 19751  003CEC  0100               	movlb	0	; () banked
 19752  003CEE  51FC               	movf	_machine_state& (0+255),w,b
 19753  003CF0  B4D8               	btfsc	status,2,c
 19754                           
 19755                           ; BSR set to: 0
 19756                           ;interruptHandler.c: 36: updateMenu();
 19757  003CF2  ECB7  F01A         	call	_updateMenu	;wreg free
 19758  003CF6                     i2l10487:
 19759                           
 19760                           ;interruptHandler.c: 37: }
 19761                           ;interruptHandler.c: 38: }
 19762                           ;interruptHandler.c: 41: if(TMR0IF){
 19763  003CF6  A4F2               	btfss	intcon,2,c	;volatile
 19764  003CF8  D00C               	goto	i2l10501
 19765                           
 19766                           ;interruptHandler.c: 42: TMR0IF = 0;
 19767  003CFA  94F2               	bcf	intcon,2,c	;volatile
 19768                           
 19769                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 19770  003CFC  0100               	movlb	0	; () banked
 19771  003CFE  05FC               	decf	_machine_state& (0+255),w,b
 19772  003D00  A4D8               	btfss	status,2,c
 19773  003D02  D007               	goto	i2l10501
 19774                           
 19775                           ; BSR set to: 0
 19776                           ;interruptHandler.c: 44: printSortTimer();
 19777  003D04  EC24  F016         	call	_printSortTimer	;wreg free
 19778                           
 19779                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 19780  003D08  0E85               	movlw	133
 19781  003D0A  6ED7               	movwf	4055,c	;volatile
 19782                           
 19783                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 19784  003D0C  0EEE               	movlw	238
 19785  003D0E  6ED6               	movwf	4054,c	;volatile
 19786                           
 19787                           ;interruptHandler.c: 48: TMR0ON = 1;
 19788  003D10  8ED5               	bsf	4053,7,c	;volatile
 19789  003D12                     i2l10501:
 19790                           
 19791                           ;interruptHandler.c: 49: }
 19792                           ;interruptHandler.c: 50: }
 19793                           ;interruptHandler.c: 53: if(TMR1IF){
 19794  003D12  A09E               	btfss	3998,0,c	;volatile
 19795  003D14  D028               	goto	i2l10529
 19796                           
 19797                           ;interruptHandler.c: 54: TMR1IF = 0;
 19798  003D16  909E               	bcf	3998,0,c	;volatile
 19799                           
 19800                           ;interruptHandler.c: 55: TMR1ON = 0;
 19801  003D18  90CD               	bcf	4045,0,c	;volatile
 19802                           
 19803                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 19804  003D1A  0100               	movlb	0	; () banked
 19805  003D1C  05FC               	decf	_machine_state& (0+255),w,b
 19806  003D1E  A4D8               	btfss	status,2,c
 19807  003D20  D022               	goto	i2l10529
 19808                           
 19809                           ; BSR set to: 0
 19810                           ;interruptHandler.c: 57: if(was_low_1){
 19811  003D22  5077               	movf	_was_low_1,w,c	;volatile
 19812  003D24  1078               	iorwf	_was_low_1+1,w,c	;volatile
 19813  003D26  B4D8               	btfsc	status,2,c
 19814  003D28  D00A               	goto	i2l1071
 19815                           
 19816                           ; BSR set to: 0
 19817                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 19818  003D2A  828B               	bsf	3979,1,c	;volatile
 19819                           
 19820                           ; BSR set to: 0
 19821                           ;interruptHandler.c: 59: was_low_1 = 0;
 19822  003D2C  0E00               	movlw	0
 19823  003D2E  6E78               	movwf	_was_low_1+1,c	;volatile
 19824  003D30  0E00               	movlw	0
 19825  003D32  6E77               	movwf	_was_low_1,c	;volatile
 19826                           
 19827                           ; BSR set to: 0
 19828                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 19829  003D34  C05B  FFCF         	movff	_servoTimes,4047	;volatile
 19830                           
 19831                           ; BSR set to: 0
 19832                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 19833  003D38  C05D  FFCE         	movff	_servoTimes+2,4046	;volatile
 19834                           
 19835                           ;interruptHandler.c: 62: }
 19836  003D3C  D00D               	goto	i2l10523
 19837  003D3E                     i2l1071:
 19838                           
 19839                           ; BSR set to: 0
 19840                           ;interruptHandler.c: 63: else{
 19841                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 19842  003D3E  928B               	bcf	3979,1,c	;volatile
 19843                           
 19844                           ; BSR set to: 0
 19845                           ;interruptHandler.c: 65: was_low_1 = 1;
 19846  003D40  0E00               	movlw	0
 19847  003D42  6E78               	movwf	_was_low_1+1,c	;volatile
 19848  003D44  0E01               	movlw	1
 19849  003D46  6E77               	movwf	_was_low_1,c	;volatile
 19850                           
 19851                           ; BSR set to: 0
 19852                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 19853  003D48  505B               	movf	_servoTimes,w,c
 19854  003D4A  0800               	sublw	0
 19855  003D4C  0F20               	addlw	32
 19856  003D4E  6ECF               	movwf	4047,c	;volatile
 19857                           
 19858                           ; BSR set to: 0
 19859                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 19860  003D50  505D               	movf	_servoTimes+2,w,c
 19861  003D52  0800               	sublw	0
 19862  003D54  0F20               	addlw	32
 19863  003D56  6ECE               	movwf	4046,c	;volatile
 19864  003D58                     i2l10523:
 19865                           
 19866                           ; BSR set to: 0
 19867                           ;interruptHandler.c: 68: }
 19868                           ;interruptHandler.c: 69: TMR1ON = 1;
 19869  003D58  80CD               	bsf	4045,0,c	;volatile
 19870                           
 19871                           ; BSR set to: 0
 19872                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 19873  003D5A  0E0A               	movlw	10
 19874  003D5C  266D               	addwf	_servo_timer_counter,f,c	;volatile
 19875  003D5E  0E00               	movlw	0
 19876  003D60  226E               	addwfc	_servo_timer_counter+1,f,c	;volatile
 19877                           
 19878                           ; BSR set to: 0
 19879                           ;interruptHandler.c: 72: updateServoStates();
 19880  003D62  EC1D  F01F         	call	_updateServoStates	;wreg free
 19881  003D66                     i2l10529:
 19882                           
 19883                           ;interruptHandler.c: 73: }
 19884                           ;interruptHandler.c: 74: }
 19885                           ;interruptHandler.c: 77: if(TMR2IF){
 19886  003D66  A29E               	btfss	3998,1,c	;volatile
 19887  003D68  D026               	goto	i2l10555
 19888                           
 19889                           ;interruptHandler.c: 80: TMR2IF = 0;
 19890  003D6A  929E               	bcf	3998,1,c	;volatile
 19891                           
 19892                           ;interruptHandler.c: 81: TMR2ON = 0;
 19893  003D6C  94CA               	bcf	4042,2,c	;volatile
 19894                           
 19895                           ;interruptHandler.c: 82: timer2_counter++;
 19896  003D6E  4A73               	infsnz	_timer2_counter,f,c	;volatile
 19897  003D70  2A74               	incf	_timer2_counter+1,f,c	;volatile
 19898                           
 19899                           ;interruptHandler.c: 83: if(machine_state == Sorting_state){
 19900  003D72  0100               	movlb	0	; () banked
 19901  003D74  05FC               	decf	_machine_state& (0+255),w,b
 19902  003D76  A4D8               	btfss	status,2,c
 19903  003D78  D01E               	goto	i2l10555
 19904                           
 19905                           ; BSR set to: 0
 19906                           ;interruptHandler.c: 84: if(was_low_2 && (timer2_counter == 2)){
 19907  003D7A  5079               	movf	_was_low_2,w,c	;volatile
 19908  003D7C  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19909  003D7E  B4D8               	btfsc	status,2,c
 19910  003D80  D00A               	goto	i2l10545
 19911                           
 19912                           ; BSR set to: 0
 19913  003D82  0E02               	movlw	2
 19914  003D84  1873               	xorwf	_timer2_counter,w,c	;volatile
 19915  003D86  1074               	iorwf	_timer2_counter+1,w,c	;volatile
 19916  003D88  A4D8               	btfss	status,2,c
 19917  003D8A  D005               	goto	i2l10545
 19918                           
 19919                           ; BSR set to: 0
 19920                           ;interruptHandler.c: 86: LATBbits.LATB3 = 1;
 19921  003D8C  868A               	bsf	3978,3,c	;volatile
 19922                           
 19923                           ; BSR set to: 0
 19924                           ;interruptHandler.c: 87: was_low_2 = 0;
 19925  003D8E  0E00               	movlw	0
 19926  003D90  6E7A               	movwf	_was_low_2+1,c	;volatile
 19927  003D92  0E00               	movlw	0
 19928  003D94  D008               	goto	L17
 19929  003D96                     i2l10545:
 19930                           
 19931                           ; BSR set to: 0
 19932                           ;interruptHandler.c: 90: else if(!was_low_2){
 19933  003D96  5079               	movf	_was_low_2,w,c	;volatile
 19934  003D98  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19935  003D9A  A4D8               	btfss	status,2,c
 19936  003D9C  D009               	goto	i2l10551
 19937                           
 19938                           ; BSR set to: 0
 19939                           ;interruptHandler.c: 91: LATBbits.LATB3 = 0;
 19940  003D9E  968A               	bcf	3978,3,c	;volatile
 19941                           
 19942                           ; BSR set to: 0
 19943                           ;interruptHandler.c: 92: was_low_2 = 1;
 19944  003DA0  0E00               	movlw	0
 19945  003DA2  6E7A               	movwf	_was_low_2+1,c	;volatile
 19946  003DA4  0E01               	movlw	1
 19947  003DA6                     L17:
 19948  003DA6  6E79               	movwf	_was_low_2,c	;volatile
 19949                           
 19950                           ;interruptHandler.c: 93: timer2_counter = 0;
 19951  003DA8  0E00               	movlw	0
 19952  003DAA  6E74               	movwf	_timer2_counter+1,c	;volatile
 19953  003DAC  0E00               	movlw	0
 19954  003DAE  6E73               	movwf	_timer2_counter,c	;volatile
 19955  003DB0                     i2l10551:
 19956                           
 19957                           ; BSR set to: 0
 19958                           ;interruptHandler.c: 94: }
 19959                           ;interruptHandler.c: 95: updateArmState();
 19960  003DB0  ECCB  F02C         	call	_updateArmState	;wreg free
 19961                           
 19962                           ;interruptHandler.c: 96: TMR2ON = 1;
 19963  003DB4  84CA               	bsf	4042,2,c	;volatile
 19964  003DB6                     i2l10555:
 19965                           
 19966                           ;interruptHandler.c: 97: }
 19967                           ;interruptHandler.c: 98: }
 19968                           ;interruptHandler.c: 101: if(TMR3IF){
 19969  003DB6  A2A1               	btfss	4001,1,c	;volatile
 19970  003DB8  D022               	goto	i2l1082
 19971                           
 19972                           ;interruptHandler.c: 102: TMR3IF = 0;
 19973  003DBA  92A1               	bcf	4001,1,c	;volatile
 19974                           
 19975                           ;interruptHandler.c: 103: TMR3ON = 0;
 19976  003DBC  90B1               	bcf	4017,0,c	;volatile
 19977                           
 19978                           ;interruptHandler.c: 104: if(machine_state == Sorting_state){
 19979  003DBE  0100               	movlb	0	; () banked
 19980  003DC0  05FC               	decf	_machine_state& (0+255),w,b
 19981  003DC2  A4D8               	btfss	status,2,c
 19982  003DC4  D01C               	goto	i2l1082
 19983                           
 19984                           ; BSR set to: 0
 19985                           ;interruptHandler.c: 105: if(was_low_3){
 19986  003DC6  507B               	movf	_was_low_3,w,c	;volatile
 19987  003DC8  107C               	iorwf	_was_low_3+1,w,c	;volatile
 19988  003DCA  B4D8               	btfsc	status,2,c
 19989  003DCC  D00A               	goto	i2l1080
 19990                           
 19991                           ; BSR set to: 0
 19992                           ;interruptHandler.c: 106: LATCbits.LATC2 = 1;
 19993  003DCE  848B               	bsf	3979,2,c	;volatile
 19994                           
 19995                           ; BSR set to: 0
 19996                           ;interruptHandler.c: 107: was_low_3 = 0;
 19997  003DD0  0E00               	movlw	0
 19998  003DD2  6E7C               	movwf	_was_low_3+1,c	;volatile
 19999  003DD4  0E00               	movlw	0
 20000  003DD6  6E7B               	movwf	_was_low_3,c	;volatile
 20001                           
 20002                           ; BSR set to: 0
 20003                           ;interruptHandler.c: 108: TMR3H = servoTimes[2];
 20004  003DD8  C05F  FFB3         	movff	_servoTimes+4,4019	;volatile
 20005                           
 20006                           ; BSR set to: 0
 20007                           ;interruptHandler.c: 109: TMR3L = servoTimes[3];
 20008  003DDC  C061  FFB2         	movff	_servoTimes+6,4018	;volatile
 20009                           
 20010                           ;interruptHandler.c: 110: }
 20011  003DE0  D00D               	goto	i2l10577
 20012  003DE2                     i2l1080:
 20013                           
 20014                           ; BSR set to: 0
 20015                           ;interruptHandler.c: 111: else{
 20016                           ;interruptHandler.c: 112: LATCbits.LATC2 = 0;
 20017  003DE2  948B               	bcf	3979,2,c	;volatile
 20018                           
 20019                           ; BSR set to: 0
 20020                           ;interruptHandler.c: 113: was_low_3 = 1;
 20021  003DE4  0E00               	movlw	0
 20022  003DE6  6E7C               	movwf	_was_low_3+1,c	;volatile
 20023  003DE8  0E01               	movlw	1
 20024  003DEA  6E7B               	movwf	_was_low_3,c	;volatile
 20025                           
 20026                           ; BSR set to: 0
 20027                           ;interruptHandler.c: 114: TMR3H = 20000 - servoTimes[2];
 20028  003DEC  505F               	movf	_servoTimes+4,w,c
 20029  003DEE  0800               	sublw	0
 20030  003DF0  0F20               	addlw	32
 20031  003DF2  6EB3               	movwf	4019,c	;volatile
 20032                           
 20033                           ; BSR set to: 0
 20034                           ;interruptHandler.c: 115: TMR3L = 20000 - servoTimes[3];
 20035  003DF4  5061               	movf	_servoTimes+6,w,c
 20036  003DF6  0800               	sublw	0
 20037  003DF8  0F20               	addlw	32
 20038  003DFA  6EB2               	movwf	4018,c	;volatile
 20039  003DFC                     i2l10577:
 20040                           
 20041                           ; BSR set to: 0
 20042                           ;interruptHandler.c: 116: }
 20043                           ;interruptHandler.c: 117: TMR3ON = 1;
 20044  003DFC  80B1               	bsf	4017,0,c	;volatile
 20045  003DFE                     i2l1082:
 20046  003DFE  C05A  FFF5         	movff	??_handler+15,tablat
 20047  003E02  C059  FFF8         	movff	??_handler+14,tblptru
 20048  003E06  C058  FFF7         	movff	??_handler+13,tblptrh
 20049  003E0A  C057  FFF6         	movff	??_handler+12,tblptrl
 20050  003E0E  C056  FFF4         	movff	??_handler+11,prodh
 20051  003E12  C055  FFF3         	movff	??_handler+10,prodl
 20052  003E16  C054  FFDA         	movff	??_handler+9,fsr2h
 20053  003E1A  C053  FFD9         	movff	??_handler+8,fsr2l
 20054  003E1E  C052  FFE2         	movff	??_handler+7,fsr1h
 20055  003E22  C051  FFE1         	movff	??_handler+6,fsr1l
 20056  003E26  C050  FFEA         	movff	??_handler+5,fsr0h
 20057  003E2A  C04F  FFE9         	movff	??_handler+4,fsr0l
 20058  003E2E  C04E  FFFB         	movff	??_handler+3,pclatu
 20059  003E32  C04D  FFFA         	movff	??_handler+2,pclath
 20060  003E36  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 20061  003E38  0011               	retfie		f
 20062  003E3A                     __end_of_handler:
 20063                           	opt stack 0
 20064                           pclatu	equ	0xFFB
 20065                           pclath	equ	0xFFA
 20066                           tblptru	equ	0xFF8
 20067                           tblptrh	equ	0xFF7
 20068                           tblptrl	equ	0xFF6
 20069                           tablat	equ	0xFF5
 20070                           prodh	equ	0xFF4
 20071                           prodl	equ	0xFF3
 20072                           intcon	equ	0xFF2
 20073                           intcon2	equ	0xFF1
 20074                           intcon3	equ	0xFF0
 20075                           indf0	equ	0xFEF
 20076                           postinc0	equ	0xFEE
 20077                           fsr0h	equ	0xFEA
 20078                           fsr0l	equ	0xFE9
 20079                           wreg	equ	0xFE8
 20080                           postdec1	equ	0xFE5
 20081                           fsr1h	equ	0xFE2
 20082                           fsr1l	equ	0xFE1
 20083                           indf2	equ	0xFDF
 20084                           postinc2	equ	0xFDE
 20085                           postdec2	equ	0xFDD
 20086                           fsr2h	equ	0xFDA
 20087                           fsr2l	equ	0xFD9
 20088                           status	equ	0xFD8
 20089                           
 20090 ;; *************** function _updateServoStates *****************
 20091 ;; Defined at:
 20092 ;;		line 621 in file "sort.c"
 20093 ;; Parameters:    Size  Location     Type
 20094 ;;		None
 20095 ;; Auto vars:     Size  Location     Type
 20096 ;;		None
 20097 ;; Return value:  Size  Location     Type
 20098 ;;                  1    wreg      void 
 20099 ;; Registers used:
 20100 ;;		wreg, status,2, status,0, cstack
 20101 ;; Tracked objects:
 20102 ;;		On entry : 0/0
 20103 ;;		On exit  : 0/0
 20104 ;;		Unchanged: 0/0
 20105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20108 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20109 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20110 ;;Total ram usage:        2 bytes
 20111 ;; Hardware stack levels used:    1
 20112 ;; Hardware stack levels required when called:    1
 20113 ;; This function calls:
 20114 ;;		i2_updateServoPosition
 20115 ;; This function is called by:
 20116 ;;		_handler
 20117 ;; This function uses a non-reentrant model
 20118 ;;
 20119                           
 20120                           	psect	text65
 20121  003E3A                     __ptext65:
 20122                           	opt stack 0
 20123  003E3A                     _updateServoStates:
 20124                           	opt stack 22
 20125                           
 20126                           ;sort.c: 623: if(servo_timer_counter >= servo_timer_target){
 20127                           
 20128                           ;incstack = 0
 20129  003E3A  506F               	movf	_servo_timer_target,w,c	;volatile
 20130  003E3C  5C6D               	subwf	_servo_timer_counter,w,c	;volatile
 20131  003E3E  506E               	movf	_servo_timer_counter+1,w,c	;volatile
 20132  003E40  0A80               	xorlw	128
 20133  003E42  6E09               	movwf	??_updateServoStates& (0+255),c
 20134  003E44  5070               	movf	_servo_timer_target+1,w,c	;volatile
 20135  003E46  0A80               	xorlw	128
 20136  003E48  5809               	subwfb	??_updateServoStates& (0+255),w,c
 20137  003E4A  A0D8               	btfss	status,0,c
 20138  003E4C  0012               	return	
 20139                           
 20140                           ;sort.c: 625: if(f_panning_to_bin){
 20141  003E4E  5069               	movf	_f_panning_to_bin,w,c	;volatile
 20142  003E50  106A               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 20143  003E52  A4D8               	btfss	status,2,c
 20144  003E54  D036               	goto	i2l10345
 20145  003E56  D05F               	goto	i2l10349
 20146  003E58                     i2l10319:
 20147                           
 20148                           ;sort.c: 629: updateServoPosition(1260, 3);
 20149  003E58  0E04               	movlw	4
 20150  003E5A  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20151  003E5C  0EEC               	movlw	236
 20152  003E5E  6E01               	movwf	i2updateServoPosition@time_us,c
 20153  003E60  0E00               	movlw	0
 20154  003E62  6E04               	movwf	i2updateServoPosition@timer+1,c
 20155  003E64  0E03               	movlw	3
 20156  003E66  6E03               	movwf	i2updateServoPosition@timer,c
 20157  003E68  ECA7  F02A         	call	i2_updateServoPosition	;wreg free
 20158  003E6C  D025               	goto	i2l10339
 20159  003E6E                     i2l10323:
 20160                           
 20161                           ;sort.c: 631: servo_timer_target = 700;
 20162  003E6E  0E02               	movlw	2
 20163  003E70  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20164  003E72  0EBC               	movlw	188
 20165  003E74  6E6F               	movwf	_servo_timer_target,c	;volatile
 20166                           
 20167                           ;sort.c: 632: break;
 20168  003E76  D04A               	goto	i2l10347
 20169  003E78                     i2l10325:
 20170                           
 20171                           ;sort.c: 634: updateServoPosition(1260, 3);
 20172  003E78  0E04               	movlw	4
 20173  003E7A  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20174  003E7C  0EEC               	movlw	236
 20175  003E7E  6E01               	movwf	i2updateServoPosition@time_us,c
 20176  003E80  0E00               	movlw	0
 20177  003E82  6E04               	movwf	i2updateServoPosition@timer+1,c
 20178  003E84  0E03               	movlw	3
 20179  003E86  6E03               	movwf	i2updateServoPosition@timer,c
 20180  003E88  ECA7  F02A         	call	i2_updateServoPosition	;wreg free
 20181  003E8C  D015               	goto	i2l10339
 20182  003E8E                     i2l10331:
 20183                           
 20184                           ;sort.c: 640: updateServoPosition(1390, 3);
 20185  003E8E  0E05               	movlw	5
 20186  003E90  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20187  003E92  0E6E               	movlw	110
 20188  003E94  6E01               	movwf	i2updateServoPosition@time_us,c
 20189  003E96  0E00               	movlw	0
 20190  003E98  6E04               	movwf	i2updateServoPosition@timer+1,c
 20191  003E9A  0E03               	movlw	3
 20192  003E9C  6E03               	movwf	i2updateServoPosition@timer,c
 20193  003E9E  ECA7  F02A         	call	i2_updateServoPosition	;wreg free
 20194  003EA2  D00A               	goto	i2l10339
 20195  003EA4                     i2l10337:
 20196                           
 20197                           ;sort.c: 645: updateServoPosition(1390, 3);
 20198  003EA4  0E05               	movlw	5
 20199  003EA6  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20200  003EA8  0E6E               	movlw	110
 20201  003EAA  6E01               	movwf	i2updateServoPosition@time_us,c
 20202  003EAC  0E00               	movlw	0
 20203  003EAE  6E04               	movwf	i2updateServoPosition@timer+1,c
 20204  003EB0  0E03               	movlw	3
 20205  003EB2  6E03               	movwf	i2updateServoPosition@timer,c
 20206  003EB4  ECA7  F02A         	call	i2_updateServoPosition	;wreg free
 20207  003EB8                     i2l10339:
 20208                           
 20209                           ;sort.c: 646: servo_timer_counter = 0;
 20210  003EB8  0E00               	movlw	0
 20211  003EBA  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20212  003EBC  0E00               	movlw	0
 20213  003EBE  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20214  003EC0  D7D6               	goto	i2l10323
 20215  003EC2                     i2l10345:
 20216  003EC2  C06B  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 20217  003EC6  C06C  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 20218                           
 20219                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 20220                           ; Switch size 1, requested type "space"
 20221                           ; Number of cases is 4, Range of values is 1 to 9
 20222                           ; switch strategies available:
 20223                           ; Name         Instructions Cycles
 20224                           ; simple_byte           13     7 (average)
 20225                           ;	Chosen strategy is simple_byte
 20226  003ECA  500A               	movf	??_updateServoStates+1,w,c
 20227  003ECC  0A01               	xorlw	1	; case 1
 20228  003ECE  B4D8               	btfsc	status,2,c
 20229  003ED0  D00A               	goto	i2l11023
 20230  003ED2  0A02               	xorlw	2	; case 3
 20231  003ED4  B4D8               	btfsc	status,2,c
 20232  003ED6  D00C               	goto	i2l11025
 20233  003ED8  0A05               	xorlw	5	; case 6
 20234  003EDA  B4D8               	btfsc	status,2,c
 20235  003EDC  D00E               	goto	i2l11027
 20236  003EDE  0A0F               	xorlw	15	; case 9
 20237  003EE0  B4D8               	btfsc	status,2,c
 20238  003EE2  D010               	goto	i2l11029
 20239  003EE4  D013               	goto	i2l10347
 20240  003EE6                     i2l11023:
 20241                           
 20242                           ; Switch size 1, requested type "space"
 20243                           ; Number of cases is 1, Range of values is 244 to 244
 20244                           ; switch strategies available:
 20245                           ; Name         Instructions Cycles
 20246                           ; simple_byte            4     3 (average)
 20247                           ;	Chosen strategy is simple_byte
 20248  003EE6  5009               	movf	??_updateServoStates,w,c
 20249  003EE8  0AF4               	xorlw	244	; case 244
 20250  003EEA  B4D8               	btfsc	status,2,c
 20251  003EEC  D7B5               	goto	i2l10319
 20252  003EEE  D00E               	goto	i2l10347
 20253  003EF0                     i2l11025:
 20254                           
 20255                           ; Switch size 1, requested type "space"
 20256                           ; Number of cases is 1, Range of values is 82 to 82
 20257                           ; switch strategies available:
 20258                           ; Name         Instructions Cycles
 20259                           ; simple_byte            4     3 (average)
 20260                           ;	Chosen strategy is simple_byte
 20261  003EF0  5009               	movf	??_updateServoStates,w,c
 20262  003EF2  0A52               	xorlw	82	; case 82
 20263  003EF4  B4D8               	btfsc	status,2,c
 20264  003EF6  D7C0               	goto	i2l10325
 20265  003EF8  D009               	goto	i2l10347
 20266  003EFA                     i2l11027:
 20267                           
 20268                           ; Switch size 1, requested type "space"
 20269                           ; Number of cases is 1, Range of values is 134 to 134
 20270                           ; switch strategies available:
 20271                           ; Name         Instructions Cycles
 20272                           ; simple_byte            4     3 (average)
 20273                           ;	Chosen strategy is simple_byte
 20274  003EFA  5009               	movf	??_updateServoStates,w,c
 20275  003EFC  0A86               	xorlw	134	; case 134
 20276  003EFE  B4D8               	btfsc	status,2,c
 20277  003F00  D7C6               	goto	i2l10331
 20278  003F02  D004               	goto	i2l10347
 20279  003F04                     i2l11029:
 20280                           
 20281                           ; Switch size 1, requested type "space"
 20282                           ; Number of cases is 1, Range of values is 96 to 96
 20283                           ; switch strategies available:
 20284                           ; Name         Instructions Cycles
 20285                           ; simple_byte            4     3 (average)
 20286                           ;	Chosen strategy is simple_byte
 20287  003F04  5009               	movf	??_updateServoStates,w,c
 20288  003F06  0A60               	xorlw	96	; case 96
 20289  003F08  B4D8               	btfsc	status,2,c
 20290  003F0A  D7CC               	goto	i2l10337
 20291  003F0C                     i2l10347:
 20292                           
 20293                           ;sort.c: 652: f_panning_to_bin = 0;
 20294  003F0C  0E00               	movlw	0
 20295  003F0E  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
 20296  003F10  0E00               	movlw	0
 20297  003F12  6E69               	movwf	_f_panning_to_bin,c	;volatile
 20298                           
 20299                           ;sort.c: 653: }
 20300  003F14  0012               	return	
 20301  003F16                     i2l10349:
 20302                           
 20303                           ;sort.c: 654: else if(pan_servo_state == 1200){
 20304  003F16  0EB0               	movlw	176
 20305  003F18  186B               	xorwf	_pan_servo_state,w,c	;volatile
 20306  003F1A  E15A               	bnz	i2l10379
 20307  003F1C  0E04               	movlw	4
 20308  003F1E  186C               	xorwf	_pan_servo_state+1,w,c	;volatile
 20309  003F20  A4D8               	btfss	status,2,c
 20310  003F22  D056               	goto	i2l10379
 20311                           
 20312                           ;sort.c: 656: servo_timer_counter = 0;
 20313  003F24  0E00               	movlw	0
 20314  003F26  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20315  003F28  0E00               	movlw	0
 20316  003F2A  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20317                           
 20318                           ;sort.c: 657: }
 20319  003F2C  0012               	return	
 20320  003F2E                     i2l10353:
 20321                           
 20322                           ;sort.c: 662: updateServoPosition(1050, 3);
 20323  003F2E  0E04               	movlw	4
 20324  003F30  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20325  003F32  0E1A               	movlw	26
 20326  003F34  6E01               	movwf	i2updateServoPosition@time_us,c
 20327  003F36  0E00               	movlw	0
 20328  003F38  6E04               	movwf	i2updateServoPosition@timer+1,c
 20329  003F3A  0E03               	movlw	3
 20330  003F3C  6E03               	movwf	i2updateServoPosition@timer,c
 20331  003F3E  ECA7  F02A         	call	i2_updateServoPosition	;wreg free
 20332                           
 20333                           ;sort.c: 663: servo_timer_counter = 0;
 20334  003F42  0E00               	movlw	0
 20335  003F44  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20336  003F46  0E00               	movlw	0
 20337  003F48  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20338                           
 20339                           ;sort.c: 664: servo_timer_target = 750;
 20340  003F4A  0E02               	movlw	2
 20341  003F4C  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20342  003F4E  0EEE               	movlw	238
 20343  003F50  6E6F               	movwf	_servo_timer_target,c	;volatile
 20344                           
 20345                           ;sort.c: 665: break;
 20346  003F52  0012               	return	
 20347  003F54                     i2l10359:
 20348                           
 20349                           ;sort.c: 667: updateServoPosition(1050, 3);
 20350  003F54  0E04               	movlw	4
 20351  003F56  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20352  003F58  0E1A               	movlw	26
 20353  003F5A  6E01               	movwf	i2updateServoPosition@time_us,c
 20354  003F5C  0E00               	movlw	0
 20355  003F5E  6E04               	movwf	i2updateServoPosition@timer+1,c
 20356  003F60  0E03               	movlw	3
 20357  003F62  6E03               	movwf	i2updateServoPosition@timer,c
 20358  003F64  ECA7  F02A         	call	i2_updateServoPosition	;wreg free
 20359                           
 20360                           ;sort.c: 668: servo_timer_counter = 0;
 20361  003F68  0E00               	movlw	0
 20362  003F6A  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20363  003F6C  0E00               	movlw	0
 20364  003F6E  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20365                           
 20366                           ;sort.c: 669: servo_timer_target = 750;
 20367  003F70  0E02               	movlw	2
 20368  003F72  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20369  003F74  0EEE               	movlw	238
 20370  003F76  6E6F               	movwf	_servo_timer_target,c	;volatile
 20371                           
 20372                           ;sort.c: 670: break;
 20373  003F78  0012               	return	
 20374  003F7A                     i2l10365:
 20375                           
 20376                           ;sort.c: 673: updateServoPosition(1200, 1);
 20377  003F7A  0E04               	movlw	4
 20378  003F7C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20379  003F7E  0EB0               	movlw	176
 20380  003F80  6E01               	movwf	i2updateServoPosition@time_us,c
 20381  003F82  0E00               	movlw	0
 20382  003F84  6E04               	movwf	i2updateServoPosition@timer+1,c
 20383  003F86  0E01               	movlw	1
 20384  003F88  6E03               	movwf	i2updateServoPosition@timer,c
 20385  003F8A  ECA7  F02A         	call	i2_updateServoPosition	;wreg free
 20386                           
 20387                           ;sort.c: 674: updateServoPosition(1050, 3);
 20388  003F8E  0E04               	movlw	4
 20389  003F90  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20390  003F92  0E1A               	movlw	26
 20391  003F94  6E01               	movwf	i2updateServoPosition@time_us,c
 20392  003F96  0E00               	movlw	0
 20393  003F98  6E04               	movwf	i2updateServoPosition@timer+1,c
 20394  003F9A  0E03               	movlw	3
 20395  003F9C  6E03               	movwf	i2updateServoPosition@timer,c
 20396  003F9E  ECA7  F02A         	call	i2_updateServoPosition	;wreg free
 20397                           
 20398                           ;sort.c: 675: servo_timer_counter = 0;
 20399  003FA2  0E00               	movlw	0
 20400  003FA4  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20401  003FA6  0E00               	movlw	0
 20402  003FA8  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20403                           
 20404                           ;sort.c: 676: servo_timer_target = 9999;
 20405  003FAA  0E27               	movlw	39
 20406  003FAC  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20407  003FAE  0E0F               	movlw	15
 20408  003FB0  6E6F               	movwf	_servo_timer_target,c	;volatile
 20409                           
 20410                           ;sort.c: 678: f_can_distributed = 1;
 20411  003FB2  0E00               	movlw	0
 20412  003FB4  0101               	movlb	1	; () banked
 20413  003FB6  6F38               	movwf	(_f_can_distributed+1)& (0+255),b
 20414  003FB8  0E01               	movlw	1
 20415  003FBA  6F37               	movwf	_f_can_distributed& (0+255),b
 20416                           
 20417                           ; BSR set to: 1
 20418                           ;sort.c: 679: if(f_lastCan == 1){
 20419  003FBC  0100               	movlb	0	; () banked
 20420  003FBE  05EA               	decf	_f_lastCan& (0+255),w,b
 20421  003FC0  0100               	movlb	0	; () banked
 20422  003FC2  11EB               	iorwf	(_f_lastCan+1)& (0+255),w,b
 20423  003FC4  A4D8               	btfss	status,2,c
 20424  003FC6  0012               	return	
 20425                           
 20426                           ; BSR set to: 0
 20427                           ;sort.c: 680: machine_state = DoneSorting_state;
 20428  003FC8  0E02               	movlw	2
 20429  003FCA  0100               	movlb	0	; () banked
 20430  003FCC  6FFC               	movwf	_machine_state& (0+255),b
 20431                           
 20432                           ; BSR set to: 0
 20433                           ;sort.c: 686: }
 20434                           
 20435                           ; BSR set to: 0
 20436                           ;sort.c: 685: break;
 20437                           
 20438                           ;sort.c: 684: default:
 20439                           
 20440                           ; BSR set to: 0
 20441                           ;sort.c: 681: }
 20442                           ;sort.c: 682: break;
 20443  003FCE  0012               	return	
 20444  003FD0                     i2l10379:
 20445  003FD0  C071  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 20446  003FD4  C072  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 20447                           
 20448                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 20449                           ; Switch size 1, requested type "space"
 20450                           ; Number of cases is 2, Range of values is 4 to 5
 20451                           ; switch strategies available:
 20452                           ; Name         Instructions Cycles
 20453                           ; simple_byte            7     4 (average)
 20454                           ;	Chosen strategy is simple_byte
 20455  003FD8  500A               	movf	??_updateServoStates+1,w,c
 20456  003FDA  0A04               	xorlw	4	; case 4
 20457  003FDC  B4D8               	btfsc	status,2,c
 20458  003FDE  D004               	goto	i2l11031
 20459  003FE0  0A01               	xorlw	1	; case 5
 20460  003FE2  A4D8               	btfss	status,2,c
 20461  003FE4  0012               	return	
 20462  003FE6  D008               	goto	i2l11033
 20463  003FE8                     i2l11031:
 20464                           
 20465                           ; Switch size 1, requested type "space"
 20466                           ; Number of cases is 2, Range of values is 26 to 236
 20467                           ; switch strategies available:
 20468                           ; Name         Instructions Cycles
 20469                           ; simple_byte            7     4 (average)
 20470                           ;	Chosen strategy is simple_byte
 20471  003FE8  5009               	movf	??_updateServoStates,w,c
 20472  003FEA  0A1A               	xorlw	26	; case 26
 20473  003FEC  B4D8               	btfsc	status,2,c
 20474  003FEE  D7C5               	goto	i2l10365
 20475  003FF0  0AF6               	xorlw	246	; case 236
 20476  003FF2  A4D8               	btfss	status,2,c
 20477  003FF4  0012               	return	
 20478  003FF6  D79B               	goto	i2l10353
 20479  003FF8                     i2l11033:
 20480                           
 20481                           ; Switch size 1, requested type "space"
 20482                           ; Number of cases is 1, Range of values is 110 to 110
 20483                           ; switch strategies available:
 20484                           ; Name         Instructions Cycles
 20485                           ; simple_byte            4     3 (average)
 20486                           ;	Chosen strategy is simple_byte
 20487  003FF8  5009               	movf	??_updateServoStates,w,c
 20488  003FFA  0A6E               	xorlw	110	; case 110
 20489  003FFC  A4D8               	btfss	status,2,c
 20490  003FFE  0012               	return	
 20491  004000  D7A9               	goto	i2l10359
 20492  004002                     __end_of_updateServoStates:
 20493                           	opt stack 0
 20494                           pclatu	equ	0xFFB
 20495                           pclath	equ	0xFFA
 20496                           tblptru	equ	0xFF8
 20497                           tblptrh	equ	0xFF7
 20498                           tblptrl	equ	0xFF6
 20499                           tablat	equ	0xFF5
 20500                           prodh	equ	0xFF4
 20501                           prodl	equ	0xFF3
 20502                           intcon	equ	0xFF2
 20503                           intcon2	equ	0xFF1
 20504                           intcon3	equ	0xFF0
 20505                           indf0	equ	0xFEF
 20506                           postinc0	equ	0xFEE
 20507                           fsr0h	equ	0xFEA
 20508                           fsr0l	equ	0xFE9
 20509                           wreg	equ	0xFE8
 20510                           postdec1	equ	0xFE5
 20511                           fsr1h	equ	0xFE2
 20512                           fsr1l	equ	0xFE1
 20513                           indf2	equ	0xFDF
 20514                           postinc2	equ	0xFDE
 20515                           postdec2	equ	0xFDD
 20516                           fsr2h	equ	0xFDA
 20517                           fsr2l	equ	0xFD9
 20518                           status	equ	0xFD8
 20519                           
 20520 ;; *************** function i2_updateServoPosition *****************
 20521 ;; Defined at:
 20522 ;;		line 606 in file "sort.c"
 20523 ;; Parameters:    Size  Location     Type
 20524 ;;  time_us         2    0[COMRAM] int 
 20525 ;;  timer           2    2[COMRAM] int 
 20526 ;; Auto vars:     Size  Location     Type
 20527 ;;  updateServoP    2    6[COMRAM] unsigned int 
 20528 ;; Return value:  Size  Location     Type
 20529 ;;                  1    wreg      void 
 20530 ;; Registers used:
 20531 ;;		wreg, status,2, status,0
 20532 ;; Tracked objects:
 20533 ;;		On entry : 0/0
 20534 ;;		On exit  : 0/0
 20535 ;;		Unchanged: 0/0
 20536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20537 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20538 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20539 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20540 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20541 ;;Total ram usage:        8 bytes
 20542 ;; Hardware stack levels used:    1
 20543 ;; This function calls:
 20544 ;;		Nothing
 20545 ;; This function is called by:
 20546 ;;		_updateServoStates
 20547 ;; This function uses a non-reentrant model
 20548 ;;
 20549                           
 20550                           	psect	text66
 20551  00554E                     __ptext66:
 20552                           	opt stack 0
 20553  00554E                     i2_updateServoPosition:
 20554                           	opt stack 22
 20555                           
 20556                           ;sort.c: 607: unsigned int my_time = 65535 - time_us;
 20557                           
 20558                           ;incstack = 0
 20559  00554E  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 20560  005552  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 20561  005556  1E05               	comf	??i2_updateServoPosition,f,c
 20562  005558  1E06               	comf	??i2_updateServoPosition+1,f,c
 20563  00555A  4A05               	infsnz	??i2_updateServoPosition,f,c
 20564  00555C  2A06               	incf	??i2_updateServoPosition+1,f,c
 20565  00555E  0EFF               	movlw	255
 20566  005560  2405               	addwf	??i2_updateServoPosition,w,c
 20567  005562  6E07               	movwf	i2updateServoPosition@my_time,c
 20568  005564  0EFF               	movlw	255
 20569  005566  2006               	addwfc	??i2_updateServoPosition+1,w,c
 20570  005568  6E08               	movwf	i2updateServoPosition@my_time+1,c
 20571                           
 20572                           ;sort.c: 608: switch(timer){
 20573  00556A  D015               	goto	i2l9483
 20574  00556C                     i2l9477:
 20575                           
 20576                           ;sort.c: 610: servoTimes[0] = my_time >> 8;
 20577  00556C  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20578  00556E  6E5B               	movwf	_servoTimes,c
 20579  005570  6A5C               	clrf	_servoTimes+1,c
 20580                           
 20581                           ;sort.c: 611: servoTimes[1] = my_time & 0xFF;
 20582  005572  5007               	movf	i2updateServoPosition@my_time,w,c
 20583  005574  6E5D               	movwf	_servoTimes+2,c
 20584  005576  6A5E               	clrf	_servoTimes+3,c
 20585                           
 20586                           ;sort.c: 613: pan_servo_state = time_us;
 20587  005578  C001  F06B         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 20588  00557C  C002  F06C         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 20589  005580                     i2l952:
 20590                           
 20591                           ;sort.c: 615: servoTimes[2] = my_time >> 8;
 20592  005580  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20593  005582  6E5F               	movwf	_servoTimes+4,c
 20594  005584  6A60               	clrf	_servoTimes+5,c
 20595                           
 20596                           ;sort.c: 616: servoTimes[3] = my_time & 0xFF;
 20597  005586  5007               	movf	i2updateServoPosition@my_time,w,c
 20598  005588  6E61               	movwf	_servoTimes+6,c
 20599  00558A  6A62               	clrf	_servoTimes+7,c
 20600                           
 20601                           ;sort.c: 618: tilt_servo_state = time_us;
 20602  00558C  C001  F071         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 20603  005590  C002  F072         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 20604                           
 20605                           ;sort.c: 619: }
 20606  005594  0012               	return	
 20607  005596                     i2l9483:
 20608  005596  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 20609  00559A  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 20610                           
 20611                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20612                           ; Switch size 1, requested type "space"
 20613                           ; Number of cases is 1, Range of values is 0 to 0
 20614                           ; switch strategies available:
 20615                           ; Name         Instructions Cycles
 20616                           ; simple_byte            4     3 (average)
 20617                           ;	Chosen strategy is simple_byte
 20618  00559E  5006               	movf	??i2_updateServoPosition+1,w,c
 20619  0055A0  0A00               	xorlw	0	; case 0
 20620  0055A2  A4D8               	btfss	status,2,c
 20621  0055A4  0012               	return	
 20622                           
 20623                           ; Switch size 1, requested type "space"
 20624                           ; Number of cases is 2, Range of values is 1 to 3
 20625                           ; switch strategies available:
 20626                           ; Name         Instructions Cycles
 20627                           ; simple_byte            7     4 (average)
 20628                           ;	Chosen strategy is simple_byte
 20629  0055A6  5005               	movf	??i2_updateServoPosition,w,c
 20630  0055A8  0A01               	xorlw	1	; case 1
 20631  0055AA  B4D8               	btfsc	status,2,c
 20632  0055AC  D7DF               	goto	i2l9477
 20633  0055AE  0A02               	xorlw	2	; case 3
 20634  0055B0  A4D8               	btfss	status,2,c
 20635  0055B2  0012               	return	
 20636  0055B4  D7E5               	goto	i2l952
 20637  0055B6                     __end_ofi2_updateServoPosition:
 20638                           	opt stack 0
 20639                           pclatu	equ	0xFFB
 20640                           pclath	equ	0xFFA
 20641                           tblptru	equ	0xFF8
 20642                           tblptrh	equ	0xFF7
 20643                           tblptrl	equ	0xFF6
 20644                           tablat	equ	0xFF5
 20645                           prodh	equ	0xFF4
 20646                           prodl	equ	0xFF3
 20647                           intcon	equ	0xFF2
 20648                           intcon2	equ	0xFF1
 20649                           intcon3	equ	0xFF0
 20650                           indf0	equ	0xFEF
 20651                           postinc0	equ	0xFEE
 20652                           fsr0h	equ	0xFEA
 20653                           fsr0l	equ	0xFE9
 20654                           wreg	equ	0xFE8
 20655                           postdec1	equ	0xFE5
 20656                           fsr1h	equ	0xFE2
 20657                           fsr1l	equ	0xFE1
 20658                           indf2	equ	0xFDF
 20659                           postinc2	equ	0xFDE
 20660                           postdec2	equ	0xFDD
 20661                           fsr2h	equ	0xFDA
 20662                           fsr2l	equ	0xFD9
 20663                           status	equ	0xFD8
 20664                           
 20665 ;; *************** function _updateMenu *****************
 20666 ;; Defined at:
 20667 ;;		line 216 in file "UI.c"
 20668 ;; Parameters:    Size  Location     Type
 20669 ;;		None
 20670 ;; Auto vars:     Size  Location     Type
 20671 ;;		None
 20672 ;; Return value:  Size  Location     Type
 20673 ;;                  1    wreg      void 
 20674 ;; Registers used:
 20675 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20676 ;; Tracked objects:
 20677 ;;		On entry : 0/0
 20678 ;;		On exit  : 0/0
 20679 ;;		Unchanged: 0/0
 20680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20683 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20684 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20685 ;;Total ram usage:        2 bytes
 20686 ;; Hardware stack levels used:    1
 20687 ;; Hardware stack levels required when called:    5
 20688 ;; This function calls:
 20689 ;;		_change_state_to_logs_11
 20690 ;;		_change_state_to_logs_12
 20691 ;;		_change_state_to_logs_22
 20692 ;;		_change_state_to_logs_23
 20693 ;;		_change_state_to_logs_33
 20694 ;;		_change_state_to_logs_34
 20695 ;;		_change_state_to_menu_11
 20696 ;;		_change_state_to_menu_23
 20697 ;;		_dispLogs
 20698 ;;		_inputHandler
 20699 ;;		i2_change_state_to_menu_12
 20700 ;;		i2_change_state_to_menu_22
 20701 ;;		i2_change_state_to_menu_start
 20702 ;; This function is called by:
 20703 ;;		_handler
 20704 ;; This function uses a non-reentrant model
 20705 ;;
 20706                           
 20707                           	psect	text67
 20708  00356E                     __ptext67:
 20709                           	opt stack 0
 20710  00356E                     _updateMenu:
 20711                           	opt stack 18
 20712                           
 20713                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 20714                           
 20715                           ;incstack = 0
 20716  00356E  0E00               	movlw	0
 20717  003570  6E76               	movwf	_up+1,c
 20718  003572  0E00               	movlw	0
 20719  003574  6E75               	movwf	_up,c
 20720  003576  0E00               	movlw	0
 20721  003578  6E66               	movwf	_down+1,c
 20722  00357A  0E00               	movlw	0
 20723  00357C  6E65               	movwf	_down,c
 20724  00357E  0E00               	movlw	0
 20725  003580  6E68               	movwf	_enter+1,c
 20726  003582  0E00               	movlw	0
 20727  003584  6E67               	movwf	_enter,c
 20728  003586  0E00               	movlw	0
 20729  003588  6E64               	movwf	_back+1,c
 20730  00358A  0E00               	movlw	0
 20731  00358C  6E63               	movwf	_back,c
 20732                           
 20733                           ;UI.c: 218: (INTCONbits.GIE = 0);
 20734  00358E  9EF2               	bcf	intcon,7,c	;volatile
 20735                           
 20736                           ;UI.c: 220: if (inputHandler()
 20737                           ;UI.c: 223: ){
 20738  003590  EC32  F01D         	call	_inputHandler	;wreg free
 20739  003594  502A               	movf	?_inputHandler,w,c
 20740  003596  102B               	iorwf	?_inputHandler+1,w,c
 20741  003598  A4D8               	btfss	status,2,c
 20742  00359A  D112               	goto	i2l10053
 20743  00359C  D146               	goto	i2l273
 20744  00359E                     i2l9905:
 20745                           
 20746                           ;UI.c: 227: change_state_to_menu_11();
 20747  00359E  ECE8  F02D         	call	_change_state_to_menu_11	;wreg free
 20748                           
 20749                           ;UI.c: 228: break;
 20750  0035A2  D143               	goto	i2l273
 20751  0035A4                     i2l9907:
 20752                           
 20753                           ;UI.c: 231: if(up){
 20754  0035A4  5075               	movf	_up,w,c
 20755  0035A6  1076               	iorwf	_up+1,w,c
 20756  0035A8  B4D8               	btfsc	status,2,c
 20757  0035AA  D003               	goto	i2l9911
 20758                           
 20759                           ;UI.c: 232: change_state_to_menu_23();
 20760  0035AC  ECD0  F02D         	call	_change_state_to_menu_23	;wreg free
 20761                           
 20762                           ;UI.c: 233: }
 20763  0035B0  D13C               	goto	i2l273
 20764  0035B2                     i2l9911:
 20765                           
 20766                           ;UI.c: 234: else if(down){
 20767  0035B2  5065               	movf	_down,w,c
 20768  0035B4  1066               	iorwf	_down+1,w,c
 20769  0035B6  B4D8               	btfsc	status,2,c
 20770  0035B8  D003               	goto	i2l9915
 20771                           
 20772                           ;UI.c: 235: change_state_to_menu_12();
 20773  0035BA  ECB8  F02D         	call	i2_change_state_to_menu_12	;wreg free
 20774                           
 20775                           ;UI.c: 236: }
 20776  0035BE  D135               	goto	i2l273
 20777  0035C0                     i2l9915:
 20778                           
 20779                           ;UI.c: 237: else if(enter){
 20780  0035C0  5067               	movf	_enter,w,c
 20781  0035C2  1068               	iorwf	_enter+1,w,c
 20782  0035C4  B4D8               	btfsc	status,2,c
 20783  0035C6  D131               	goto	i2l273
 20784                           
 20785                           ;UI.c: 238: change_state_to_menu_start();
 20786  0035C8  ECFB  F02E         	call	i2_change_state_to_menu_start	;wreg free
 20787                           
 20788                           ;UI.c: 239: }
 20789                           ;UI.c: 240: break;
 20790  0035CC  D12E               	goto	i2l273
 20791  0035CE                     i2l9919:
 20792                           
 20793                           ;UI.c: 243: if(up){
 20794  0035CE  5075               	movf	_up,w,c
 20795  0035D0  1076               	iorwf	_up+1,w,c
 20796  0035D2  B4D8               	btfsc	status,2,c
 20797  0035D4  D003               	goto	i2l9923
 20798                           
 20799                           ;UI.c: 244: change_state_to_menu_11();
 20800  0035D6  ECE8  F02D         	call	_change_state_to_menu_11	;wreg free
 20801                           
 20802                           ;UI.c: 245: }
 20803  0035DA  D127               	goto	i2l273
 20804  0035DC                     i2l9923:
 20805                           
 20806                           ;UI.c: 246: else if(down){
 20807  0035DC  5065               	movf	_down,w,c
 20808  0035DE  1066               	iorwf	_down+1,w,c
 20809  0035E0  B4D8               	btfsc	status,2,c
 20810  0035E2  D011               	goto	i2l9939
 20811                           
 20812                           ;UI.c: 247: change_state_to_menu_23();
 20813  0035E4  ECD0  F02D         	call	_change_state_to_menu_23	;wreg free
 20814                           
 20815                           ;UI.c: 248: }
 20816  0035E8  D120               	goto	i2l273
 20817  0035EA                     i2l9931:
 20818                           
 20819                           ;UI.c: 255: if(up){
 20820  0035EA  5075               	movf	_up,w,c
 20821  0035EC  1076               	iorwf	_up+1,w,c
 20822  0035EE  B4D8               	btfsc	status,2,c
 20823  0035F0  D003               	goto	i2l9935
 20824                           
 20825                           ;UI.c: 256: change_state_to_menu_11();
 20826  0035F2  ECE8  F02D         	call	_change_state_to_menu_11	;wreg free
 20827                           
 20828                           ;UI.c: 257: }
 20829  0035F6  D119               	goto	i2l273
 20830  0035F8                     i2l9935:
 20831                           
 20832                           ;UI.c: 258: else if(down){
 20833  0035F8  5065               	movf	_down,w,c
 20834  0035FA  1066               	iorwf	_down+1,w,c
 20835  0035FC  B4D8               	btfsc	status,2,c
 20836  0035FE  D003               	goto	i2l9939
 20837                           
 20838                           ;UI.c: 259: change_state_to_menu_23();
 20839  003600  ECD0  F02D         	call	_change_state_to_menu_23	;wreg free
 20840                           
 20841                           ;UI.c: 260: }
 20842  003604  D112               	goto	i2l273
 20843  003606                     i2l9939:
 20844                           
 20845                           ;UI.c: 261: else if(enter){
 20846  003606  5067               	movf	_enter,w,c
 20847  003608  1068               	iorwf	_enter+1,w,c
 20848  00360A  B4D8               	btfsc	status,2,c
 20849  00360C  D10E               	goto	i2l273
 20850                           
 20851                           ;UI.c: 262: machine_state = Sorting_state;
 20852  00360E  0E01               	movlw	1
 20853  003610  0100               	movlb	0	; () banked
 20854  003612  6FFC               	movwf	_machine_state& (0+255),b
 20855                           
 20856                           ; BSR set to: 0
 20857                           ;UI.c: 263: }
 20858                           ;UI.c: 264: break;
 20859                           
 20860                           ; BSR set to: 0
 20861                           
 20862                           ; BSR set to: 0
 20863  003614  D10A               	goto	i2l273
 20864  003616                     i2l9943:
 20865                           
 20866                           ;UI.c: 267: if(up){
 20867  003616  5075               	movf	_up,w,c
 20868  003618  1076               	iorwf	_up+1,w,c
 20869  00361A  B4D8               	btfsc	status,2,c
 20870  00361C  D003               	goto	i2l9947
 20871                           
 20872                           ;UI.c: 268: change_state_to_menu_22();
 20873  00361E  ECA0  F02D         	call	i2_change_state_to_menu_22	;wreg free
 20874                           
 20875                           ;UI.c: 269: }
 20876  003622  D103               	goto	i2l273
 20877  003624                     i2l9947:
 20878                           
 20879                           ;UI.c: 270: else if(down){
 20880  003624  5065               	movf	_down,w,c
 20881  003626  1066               	iorwf	_down+1,w,c
 20882  003628  B4D8               	btfsc	status,2,c
 20883  00362A  D003               	goto	i2l9951
 20884                           
 20885                           ;UI.c: 271: change_state_to_menu_11();
 20886  00362C  ECE8  F02D         	call	_change_state_to_menu_11	;wreg free
 20887                           
 20888                           ;UI.c: 272: }
 20889  003630  D0FC               	goto	i2l273
 20890  003632                     i2l9951:
 20891                           
 20892                           ;UI.c: 273: else if(enter){
 20893  003632  5067               	movf	_enter,w,c
 20894  003634  1068               	iorwf	_enter+1,w,c
 20895  003636  B4D8               	btfsc	status,2,c
 20896  003638  D0F8               	goto	i2l273
 20897                           
 20898                           ;UI.c: 274: change_state_to_logs_11();
 20899  00363A  EC60  F02E         	call	_change_state_to_logs_11	;wreg free
 20900                           
 20901                           ;UI.c: 275: }
 20902                           ;UI.c: 276: break;
 20903  00363E  D0F5               	goto	i2l273
 20904  003640                     i2l9955:
 20905                           
 20906                           ;UI.c: 279: if(up){
 20907  003640  5075               	movf	_up,w,c
 20908  003642  1076               	iorwf	_up+1,w,c
 20909  003644  B4D8               	btfsc	status,2,c
 20910  003646  D003               	goto	i2l9959
 20911                           
 20912                           ;UI.c: 280: change_state_to_logs_34();
 20913  003648  EC00  F02E         	call	_change_state_to_logs_34	;wreg free
 20914                           
 20915                           ;UI.c: 281: }
 20916  00364C  D0EE               	goto	i2l273
 20917  00364E                     i2l9959:
 20918                           
 20919                           ;UI.c: 282: else if(down){
 20920  00364E  5065               	movf	_down,w,c
 20921  003650  1066               	iorwf	_down+1,w,c
 20922  003652  B4D8               	btfsc	status,2,c
 20923  003654  D003               	goto	i2l9963
 20924                           
 20925                           ;UI.c: 283: change_state_to_logs_12();
 20926  003656  EC48  F02E         	call	_change_state_to_logs_12	;wreg free
 20927                           
 20928                           ;UI.c: 284: }
 20929  00365A  D0E7               	goto	i2l273
 20930  00365C                     i2l9963:
 20931                           
 20932                           ;UI.c: 285: else if(enter){
 20933  00365C  5067               	movf	_enter,w,c
 20934  00365E  1068               	iorwf	_enter+1,w,c
 20935  003660  B4D8               	btfsc	status,2,c
 20936  003662  D007               	goto	i2l9967
 20937                           
 20938                           ;UI.c: 286: dispLogs(1);
 20939  003664  0E00               	movlw	0
 20940  003666  6E13               	movwf	dispLogs@myLog+1,c
 20941  003668  0E01               	movlw	1
 20942  00366A  6E12               	movwf	dispLogs@myLog,c
 20943  00366C  EC35  F02F         	call	_dispLogs	;wreg free
 20944                           
 20945                           ;UI.c: 287: }
 20946  003670  D0DC               	goto	i2l273
 20947  003672                     i2l9967:
 20948                           
 20949                           ;UI.c: 288: else if(back){
 20950  003672  5063               	movf	_back,w,c
 20951  003674  1064               	iorwf	_back+1,w,c
 20952  003676  B4D8               	btfsc	status,2,c
 20953  003678  D0D8               	goto	i2l273
 20954                           
 20955                           ;UI.c: 289: change_state_to_menu_23();
 20956  00367A  ECD0  F02D         	call	_change_state_to_menu_23	;wreg free
 20957                           
 20958                           ;UI.c: 290: }
 20959                           ;UI.c: 291: break;
 20960  00367E  D0D5               	goto	i2l273
 20961  003680                     i2l9971:
 20962                           
 20963                           ;UI.c: 294: if(up){
 20964  003680  5075               	movf	_up,w,c
 20965  003682  1076               	iorwf	_up+1,w,c
 20966  003684  B4D8               	btfsc	status,2,c
 20967  003686  D003               	goto	i2l9975
 20968                           
 20969                           ;UI.c: 295: change_state_to_logs_11();
 20970  003688  EC60  F02E         	call	_change_state_to_logs_11	;wreg free
 20971                           
 20972                           ;UI.c: 296: }
 20973  00368C  D0CE               	goto	i2l273
 20974  00368E                     i2l9975:
 20975                           
 20976                           ;UI.c: 297: else if(down){
 20977  00368E  5065               	movf	_down,w,c
 20978  003690  1066               	iorwf	_down+1,w,c
 20979  003692  B4D8               	btfsc	status,2,c
 20980  003694  D003               	goto	i2l9979
 20981                           
 20982                           ;UI.c: 298: change_state_to_logs_23();
 20983  003696  EC8F  F02E         	call	_change_state_to_logs_23	;wreg free
 20984                           
 20985                           ;UI.c: 299: }
 20986  00369A  D0C7               	goto	i2l273
 20987  00369C                     i2l9979:
 20988                           
 20989                           ;UI.c: 300: else if(enter){
 20990  00369C  5067               	movf	_enter,w,c
 20991  00369E  1068               	iorwf	_enter+1,w,c
 20992  0036A0  B4D8               	btfsc	status,2,c
 20993  0036A2  D007               	goto	i2l9983
 20994                           
 20995                           ;UI.c: 301: dispLogs(2);
 20996  0036A4  0E00               	movlw	0
 20997  0036A6  6E13               	movwf	dispLogs@myLog+1,c
 20998  0036A8  0E02               	movlw	2
 20999  0036AA  6E12               	movwf	dispLogs@myLog,c
 21000  0036AC  EC35  F02F         	call	_dispLogs	;wreg free
 21001                           
 21002                           ;UI.c: 302: }
 21003  0036B0  D0BC               	goto	i2l273
 21004  0036B2                     i2l9983:
 21005                           
 21006                           ;UI.c: 303: else if(back){
 21007  0036B2  5063               	movf	_back,w,c
 21008  0036B4  1064               	iorwf	_back+1,w,c
 21009  0036B6  B4D8               	btfsc	status,2,c
 21010  0036B8  D0B8               	goto	i2l273
 21011                           
 21012                           ;UI.c: 304: change_state_to_menu_23();
 21013  0036BA  ECD0  F02D         	call	_change_state_to_menu_23	;wreg free
 21014                           
 21015                           ;UI.c: 305: }
 21016                           ;UI.c: 306: break;
 21017  0036BE  D0B5               	goto	i2l273
 21018  0036C0                     i2l9987:
 21019                           
 21020                           ;UI.c: 309: if(up){
 21021  0036C0  5075               	movf	_up,w,c
 21022  0036C2  1076               	iorwf	_up+1,w,c
 21023  0036C4  B4D8               	btfsc	status,2,c
 21024  0036C6  D003               	goto	i2l9991
 21025                           
 21026                           ;UI.c: 310: change_state_to_logs_11();
 21027  0036C8  EC60  F02E         	call	_change_state_to_logs_11	;wreg free
 21028                           
 21029                           ;UI.c: 311: }
 21030  0036CC  D0AE               	goto	i2l273
 21031  0036CE                     i2l9991:
 21032                           
 21033                           ;UI.c: 312: else if(down){
 21034  0036CE  5065               	movf	_down,w,c
 21035  0036D0  1066               	iorwf	_down+1,w,c
 21036  0036D2  B4D8               	btfsc	status,2,c
 21037  0036D4  D003               	goto	i2l9995
 21038                           
 21039                           ;UI.c: 313: change_state_to_logs_23();
 21040  0036D6  EC8F  F02E         	call	_change_state_to_logs_23	;wreg free
 21041                           
 21042                           ;UI.c: 314: }
 21043  0036DA  D0A7               	goto	i2l273
 21044  0036DC                     i2l9995:
 21045                           
 21046                           ;UI.c: 315: else if(enter){
 21047  0036DC  5067               	movf	_enter,w,c
 21048  0036DE  1068               	iorwf	_enter+1,w,c
 21049  0036E0  B4D8               	btfsc	status,2,c
 21050  0036E2  D007               	goto	i2l9999
 21051                           
 21052                           ;UI.c: 316: dispLogs(2);
 21053  0036E4  0E00               	movlw	0
 21054  0036E6  6E13               	movwf	dispLogs@myLog+1,c
 21055  0036E8  0E02               	movlw	2
 21056  0036EA  6E12               	movwf	dispLogs@myLog,c
 21057  0036EC  EC35  F02F         	call	_dispLogs	;wreg free
 21058                           
 21059                           ;UI.c: 317: }
 21060  0036F0  D09C               	goto	i2l273
 21061  0036F2                     i2l9999:
 21062                           
 21063                           ;UI.c: 318: else if(back){
 21064  0036F2  5063               	movf	_back,w,c
 21065  0036F4  1064               	iorwf	_back+1,w,c
 21066  0036F6  B4D8               	btfsc	status,2,c
 21067  0036F8  D098               	goto	i2l273
 21068                           
 21069                           ;UI.c: 319: change_state_to_menu_23();
 21070  0036FA  ECD0  F02D         	call	_change_state_to_menu_23	;wreg free
 21071                           
 21072                           ;UI.c: 320: }
 21073                           ;UI.c: 321: break;
 21074  0036FE  D095               	goto	i2l273
 21075  003700                     i2l10003:
 21076                           
 21077                           ;UI.c: 324: if(up){
 21078  003700  5075               	movf	_up,w,c
 21079  003702  1076               	iorwf	_up+1,w,c
 21080  003704  B4D8               	btfsc	status,2,c
 21081  003706  D003               	goto	i2l10007
 21082                           
 21083                           ;UI.c: 325: change_state_to_logs_22();
 21084  003708  EC30  F02E         	call	_change_state_to_logs_22	;wreg free
 21085                           
 21086                           ;UI.c: 326: }
 21087  00370C  D08E               	goto	i2l273
 21088  00370E                     i2l10007:
 21089                           
 21090                           ;UI.c: 327: else if(down){
 21091  00370E  5065               	movf	_down,w,c
 21092  003710  1066               	iorwf	_down+1,w,c
 21093  003712  B4D8               	btfsc	status,2,c
 21094  003714  D003               	goto	i2l10011
 21095                           
 21096                           ;UI.c: 328: change_state_to_logs_34();
 21097  003716  EC00  F02E         	call	_change_state_to_logs_34	;wreg free
 21098                           
 21099                           ;UI.c: 329: }
 21100  00371A  D087               	goto	i2l273
 21101  00371C                     i2l10011:
 21102                           
 21103                           ;UI.c: 330: else if(enter){
 21104  00371C  5067               	movf	_enter,w,c
 21105  00371E  1068               	iorwf	_enter+1,w,c
 21106  003720  B4D8               	btfsc	status,2,c
 21107  003722  D007               	goto	i2l10015
 21108                           
 21109                           ;UI.c: 331: dispLogs(3);
 21110  003724  0E00               	movlw	0
 21111  003726  6E13               	movwf	dispLogs@myLog+1,c
 21112  003728  0E03               	movlw	3
 21113  00372A  6E12               	movwf	dispLogs@myLog,c
 21114  00372C  EC35  F02F         	call	_dispLogs	;wreg free
 21115                           
 21116                           ;UI.c: 332: }
 21117  003730  D07C               	goto	i2l273
 21118  003732                     i2l10015:
 21119                           
 21120                           ;UI.c: 333: else if(back){
 21121  003732  5063               	movf	_back,w,c
 21122  003734  1064               	iorwf	_back+1,w,c
 21123  003736  B4D8               	btfsc	status,2,c
 21124  003738  D078               	goto	i2l273
 21125                           
 21126                           ;UI.c: 334: change_state_to_menu_23();
 21127  00373A  ECD0  F02D         	call	_change_state_to_menu_23	;wreg free
 21128                           
 21129                           ;UI.c: 335: }
 21130                           ;UI.c: 336: break;
 21131  00373E  D075               	goto	i2l273
 21132  003740                     i2l10019:
 21133                           
 21134                           ;UI.c: 339: if(up){
 21135  003740  5075               	movf	_up,w,c
 21136  003742  1076               	iorwf	_up+1,w,c
 21137  003744  B4D8               	btfsc	status,2,c
 21138  003746  D003               	goto	i2l10023
 21139                           
 21140                           ;UI.c: 340: change_state_to_logs_22();
 21141  003748  EC30  F02E         	call	_change_state_to_logs_22	;wreg free
 21142                           
 21143                           ;UI.c: 341: }
 21144  00374C  D06E               	goto	i2l273
 21145  00374E                     i2l10023:
 21146                           
 21147                           ;UI.c: 342: else if(down){
 21148  00374E  5065               	movf	_down,w,c
 21149  003750  1066               	iorwf	_down+1,w,c
 21150  003752  B4D8               	btfsc	status,2,c
 21151  003754  D003               	goto	i2l10027
 21152                           
 21153                           ;UI.c: 343: change_state_to_logs_34();
 21154  003756  EC00  F02E         	call	_change_state_to_logs_34	;wreg free
 21155                           
 21156                           ;UI.c: 344: }
 21157  00375A  D067               	goto	i2l273
 21158  00375C                     i2l10027:
 21159                           
 21160                           ;UI.c: 345: else if(enter){
 21161  00375C  5067               	movf	_enter,w,c
 21162  00375E  1068               	iorwf	_enter+1,w,c
 21163  003760  B4D8               	btfsc	status,2,c
 21164  003762  D007               	goto	i2l10031
 21165                           
 21166                           ;UI.c: 346: dispLogs(3);
 21167  003764  0E00               	movlw	0
 21168  003766  6E13               	movwf	dispLogs@myLog+1,c
 21169  003768  0E03               	movlw	3
 21170  00376A  6E12               	movwf	dispLogs@myLog,c
 21171  00376C  EC35  F02F         	call	_dispLogs	;wreg free
 21172                           
 21173                           ;UI.c: 347: }
 21174  003770  D05C               	goto	i2l273
 21175  003772                     i2l10031:
 21176                           
 21177                           ;UI.c: 348: else if(back){
 21178  003772  5063               	movf	_back,w,c
 21179  003774  1064               	iorwf	_back+1,w,c
 21180  003776  B4D8               	btfsc	status,2,c
 21181  003778  D058               	goto	i2l273
 21182                           
 21183                           ;UI.c: 349: change_state_to_menu_23();
 21184  00377A  ECD0  F02D         	call	_change_state_to_menu_23	;wreg free
 21185                           
 21186                           ;UI.c: 350: }
 21187                           ;UI.c: 351: break;
 21188  00377E  D055               	goto	i2l273
 21189  003780                     i2l10035:
 21190                           
 21191                           ;UI.c: 354: if(up){
 21192  003780  5075               	movf	_up,w,c
 21193  003782  1076               	iorwf	_up+1,w,c
 21194  003784  B4D8               	btfsc	status,2,c
 21195  003786  D003               	goto	i2l10039
 21196                           
 21197                           ;UI.c: 355: change_state_to_logs_33();
 21198  003788  EC18  F02E         	call	_change_state_to_logs_33	;wreg free
 21199                           
 21200                           ;UI.c: 356: }
 21201  00378C  D04E               	goto	i2l273
 21202  00378E                     i2l10039:
 21203                           
 21204                           ;UI.c: 357: else if(down){
 21205  00378E  5065               	movf	_down,w,c
 21206  003790  1066               	iorwf	_down+1,w,c
 21207  003792  B4D8               	btfsc	status,2,c
 21208  003794  D003               	goto	i2l10043
 21209                           
 21210                           ;UI.c: 358: change_state_to_logs_11();
 21211  003796  EC60  F02E         	call	_change_state_to_logs_11	;wreg free
 21212                           
 21213                           ;UI.c: 359: }
 21214  00379A  D047               	goto	i2l273
 21215  00379C                     i2l10043:
 21216                           
 21217                           ;UI.c: 360: else if(enter){
 21218  00379C  5067               	movf	_enter,w,c
 21219  00379E  1068               	iorwf	_enter+1,w,c
 21220  0037A0  B4D8               	btfsc	status,2,c
 21221  0037A2  D007               	goto	i2l10047
 21222                           
 21223                           ;UI.c: 361: dispLogs(4);
 21224  0037A4  0E00               	movlw	0
 21225  0037A6  6E13               	movwf	dispLogs@myLog+1,c
 21226  0037A8  0E04               	movlw	4
 21227  0037AA  6E12               	movwf	dispLogs@myLog,c
 21228  0037AC  EC35  F02F         	call	_dispLogs	;wreg free
 21229                           
 21230                           ;UI.c: 362: }
 21231  0037B0  D03C               	goto	i2l273
 21232  0037B2                     i2l10047:
 21233                           
 21234                           ;UI.c: 363: else if(back){
 21235  0037B2  5063               	movf	_back,w,c
 21236  0037B4  1064               	iorwf	_back+1,w,c
 21237  0037B6  B4D8               	btfsc	status,2,c
 21238  0037B8  D038               	goto	i2l273
 21239                           
 21240                           ;UI.c: 364: change_state_to_menu_23();
 21241  0037BA  ECD0  F02D         	call	_change_state_to_menu_23	;wreg free
 21242                           
 21243                           ;UI.c: 370: }
 21244                           
 21245                           ;UI.c: 369: break;
 21246                           
 21247                           ;UI.c: 368: default:
 21248                           
 21249                           ;UI.c: 365: }
 21250                           ;UI.c: 366: break;
 21251  0037BE  D035               	goto	i2l273
 21252  0037C0                     i2l10053:
 21253  0037C0  C0E6  F043         	movff	_cur_state,??_updateMenu
 21254  0037C4  C0E7  F044         	movff	_cur_state+1,??_updateMenu+1
 21255                           
 21256                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 21257                           ; Switch size 1, requested type "space"
 21258                           ; Number of cases is 3, Range of values is 0 to 4
 21259                           ; switch strategies available:
 21260                           ; Name         Instructions Cycles
 21261                           ; simple_byte           10     6 (average)
 21262                           ;	Chosen strategy is simple_byte
 21263  0037C8  5044               	movf	??_updateMenu+1,w,c
 21264  0037CA  0A00               	xorlw	0	; case 0
 21265  0037CC  B4D8               	btfsc	status,2,c
 21266  0037CE  D007               	goto	i2l11037
 21267  0037D0  0A03               	xorlw	3	; case 3
 21268  0037D2  B4D8               	btfsc	status,2,c
 21269  0037D4  D015               	goto	i2l11039
 21270  0037D6  0A07               	xorlw	7	; case 4
 21271  0037D8  B4D8               	btfsc	status,2,c
 21272  0037DA  D020               	goto	i2l11041
 21273  0037DC  D026               	goto	i2l273
 21274  0037DE                     i2l11037:
 21275                           
 21276                           ; Switch size 1, requested type "space"
 21277                           ; Number of cases is 5, Range of values is 0 to 23
 21278                           ; switch strategies available:
 21279                           ; Name         Instructions Cycles
 21280                           ; simple_byte           16     9 (average)
 21281                           ;	Chosen strategy is simple_byte
 21282  0037DE  5043               	movf	??_updateMenu,w,c
 21283  0037E0  0A00               	xorlw	0	; case 0
 21284  0037E2  B4D8               	btfsc	status,2,c
 21285  0037E4  D6DC               	goto	i2l9905
 21286  0037E6  0A0B               	xorlw	11	; case 11
 21287  0037E8  B4D8               	btfsc	status,2,c
 21288  0037EA  D6DC               	goto	i2l9907
 21289  0037EC  0A07               	xorlw	7	; case 12
 21290  0037EE  B4D8               	btfsc	status,2,c
 21291  0037F0  D6EE               	goto	i2l9919
 21292  0037F2  0A1A               	xorlw	26	; case 22
 21293  0037F4  B4D8               	btfsc	status,2,c
 21294  0037F6  D6F9               	goto	i2l9931
 21295  0037F8  0A01               	xorlw	1	; case 23
 21296  0037FA  B4D8               	btfsc	status,2,c
 21297  0037FC  D70C               	goto	i2l9943
 21298  0037FE  D015               	goto	i2l273
 21299  003800                     i2l11039:
 21300                           
 21301                           ; Switch size 1, requested type "space"
 21302                           ; Number of cases is 4, Range of values is 243 to 255
 21303                           ; switch strategies available:
 21304                           ; Name         Instructions Cycles
 21305                           ; simple_byte           13     7 (average)
 21306                           ;	Chosen strategy is simple_byte
 21307  003800  5043               	movf	??_updateMenu,w,c
 21308  003802  0AF3               	xorlw	243	; case 243
 21309  003804  B4D8               	btfsc	status,2,c
 21310  003806  D71C               	goto	i2l9955
 21311  003808  0A07               	xorlw	7	; case 244
 21312  00380A  B4D8               	btfsc	status,2,c
 21313  00380C  D739               	goto	i2l9971
 21314  00380E  0A0A               	xorlw	10	; case 254
 21315  003810  B4D8               	btfsc	status,2,c
 21316  003812  D756               	goto	i2l9987
 21317  003814  0A01               	xorlw	1	; case 255
 21318  003816  B4D8               	btfsc	status,2,c
 21319  003818  D773               	goto	i2l10003
 21320  00381A  D007               	goto	i2l273
 21321  00381C                     i2l11041:
 21322                           
 21323                           ; Switch size 1, requested type "space"
 21324                           ; Number of cases is 2, Range of values is 9 to 10
 21325                           ; switch strategies available:
 21326                           ; Name         Instructions Cycles
 21327                           ; simple_byte            7     4 (average)
 21328                           ;	Chosen strategy is simple_byte
 21329  00381C  5043               	movf	??_updateMenu,w,c
 21330  00381E  0A09               	xorlw	9	; case 9
 21331  003820  B4D8               	btfsc	status,2,c
 21332  003822  D78E               	goto	i2l10019
 21333  003824  0A03               	xorlw	3	; case 10
 21334  003826  B4D8               	btfsc	status,2,c
 21335  003828  D7AB               	goto	i2l10035
 21336  00382A                     i2l273:
 21337                           
 21338                           ;UI.c: 371: }
 21339                           ;UI.c: 372: (INTCONbits.GIE = 1);
 21340  00382A  8EF2               	bsf	intcon,7,c	;volatile
 21341  00382C  0012               	return		;funcret
 21342  00382E                     __end_of_updateMenu:
 21343                           	opt stack 0
 21344                           pclatu	equ	0xFFB
 21345                           pclath	equ	0xFFA
 21346                           tblptru	equ	0xFF8
 21347                           tblptrh	equ	0xFF7
 21348                           tblptrl	equ	0xFF6
 21349                           tablat	equ	0xFF5
 21350                           prodh	equ	0xFF4
 21351                           prodl	equ	0xFF3
 21352                           intcon	equ	0xFF2
 21353                           intcon2	equ	0xFF1
 21354                           intcon3	equ	0xFF0
 21355                           indf0	equ	0xFEF
 21356                           postinc0	equ	0xFEE
 21357                           fsr0h	equ	0xFEA
 21358                           fsr0l	equ	0xFE9
 21359                           wreg	equ	0xFE8
 21360                           postdec1	equ	0xFE5
 21361                           fsr1h	equ	0xFE2
 21362                           fsr1l	equ	0xFE1
 21363                           indf2	equ	0xFDF
 21364                           postinc2	equ	0xFDE
 21365                           postdec2	equ	0xFDD
 21366                           fsr2h	equ	0xFDA
 21367                           fsr2l	equ	0xFD9
 21368                           status	equ	0xFD8
 21369                           
 21370 ;; *************** function i2_change_state_to_menu_start *****************
 21371 ;; Defined at:
 21372 ;;		line 477 in file "UI.c"
 21373 ;; Parameters:    Size  Location     Type
 21374 ;;		None
 21375 ;; Auto vars:     Size  Location     Type
 21376 ;;		None
 21377 ;; Return value:  Size  Location     Type
 21378 ;;                  1    wreg      void 
 21379 ;; Registers used:
 21380 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21381 ;; Tracked objects:
 21382 ;;		On entry : 0/0
 21383 ;;		On exit  : 0/0
 21384 ;;		Unchanged: 0/0
 21385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21390 ;;Total ram usage:        0 bytes
 21391 ;; Hardware stack levels used:    1
 21392 ;; Hardware stack levels required when called:    4
 21393 ;; This function calls:
 21394 ;;		i2_lcdInst
 21395 ;;		i2_printRTC
 21396 ;;		i2_printf
 21397 ;; This function is called by:
 21398 ;;		_updateMenu
 21399 ;;		_handler
 21400 ;; This function uses a non-reentrant model
 21401 ;;
 21402                           
 21403                           	psect	text68
 21404  005DF6                     __ptext68:
 21405                           	opt stack 0
 21406  005DF6                     i2_change_state_to_menu_start:
 21407                           	opt stack 19
 21408                           
 21409                           ;UI.c: 478: cur_state = 0;
 21410                           
 21411                           ;incstack = 0
 21412  005DF6  0E00               	movlw	0
 21413  005DF8  0100               	movlb	0	; () banked
 21414  005DFA  6FE7               	movwf	(_cur_state+1)& (0+255),b
 21415  005DFC  0E00               	movlw	0
 21416  005DFE  6FE6               	movwf	_cur_state& (0+255),b
 21417                           
 21418                           ; BSR set to: 0
 21419                           ;UI.c: 480: lcdInst(0b10000000);;
 21420  005E00  0E80               	movlw	128
 21421  005E02  ECDF  F02F         	call	i2_lcdInst
 21422                           
 21423                           ;UI.c: 481: printRTC();
 21424  005E06  EC17  F01C         	call	i2_printRTC	;wreg free
 21425                           
 21426                           ;UI.c: 482: lcdInst(0b11000000);;
 21427  005E0A  0EC0               	movlw	192
 21428  005E0C  ECDF  F02F         	call	i2_lcdInst
 21429                           
 21430                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 21431  005E10  0E06               	movlw	low STR_30
 21432  005E12  6E0D               	movwf	i2printf@f,c
 21433  005E14  0EFE               	movlw	high STR_30
 21434  005E16  6E0E               	movwf	i2printf@f+1,c
 21435  005E18  EC6D  F014         	call	i2_printf	;wreg free
 21436  005E1C  0012               	return		;funcret
 21437  005E1E                     __end_ofi2_change_state_to_menu_start:
 21438                           	opt stack 0
 21439                           pclatu	equ	0xFFB
 21440                           pclath	equ	0xFFA
 21441                           tblptru	equ	0xFF8
 21442                           tblptrh	equ	0xFF7
 21443                           tblptrl	equ	0xFF6
 21444                           tablat	equ	0xFF5
 21445                           prodh	equ	0xFF4
 21446                           prodl	equ	0xFF3
 21447                           intcon	equ	0xFF2
 21448                           intcon2	equ	0xFF1
 21449                           intcon3	equ	0xFF0
 21450                           indf0	equ	0xFEF
 21451                           postinc0	equ	0xFEE
 21452                           fsr0h	equ	0xFEA
 21453                           fsr0l	equ	0xFE9
 21454                           wreg	equ	0xFE8
 21455                           postdec1	equ	0xFE5
 21456                           fsr1h	equ	0xFE2
 21457                           fsr1l	equ	0xFE1
 21458                           indf2	equ	0xFDF
 21459                           postinc2	equ	0xFDE
 21460                           postdec2	equ	0xFDD
 21461                           fsr2h	equ	0xFDA
 21462                           fsr2l	equ	0xFD9
 21463                           status	equ	0xFD8
 21464                           
 21465 ;; *************** function i2_printRTC *****************
 21466 ;; Defined at:
 21467 ;;		line 63 in file "RTC.c"
 21468 ;; Parameters:    Size  Location     Type
 21469 ;;		None
 21470 ;; Auto vars:     Size  Location     Type
 21471 ;;  printRTC       14   44[COMRAM] int [7]
 21472 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 21473 ;;  printRTC        2   64[COMRAM] int 
 21474 ;;  printRTC        2   58[COMRAM] int 
 21475 ;; Return value:  Size  Location     Type
 21476 ;;                  1    wreg      void 
 21477 ;; Registers used:
 21478 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21479 ;; Tracked objects:
 21480 ;;		On entry : 0/0
 21481 ;;		On exit  : 0/0
 21482 ;;		Unchanged: 0/0
 21483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21485 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21486 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21487 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21488 ;;Total ram usage:       25 bytes
 21489 ;; Hardware stack levels used:    1
 21490 ;; Hardware stack levels required when called:    3
 21491 ;; This function calls:
 21492 ;;		i2_getRTC
 21493 ;;		i2_lcdInst
 21494 ;;		i2_printf
 21495 ;;		i2_strcpy
 21496 ;; This function is called by:
 21497 ;;		i2_change_state_to_menu_start
 21498 ;; This function uses a non-reentrant model
 21499 ;;
 21500                           
 21501                           	psect	text69
 21502  00382E                     __ptext69:
 21503                           	opt stack 0
 21504  00382E                     i2_printRTC:
 21505                           	opt stack 19
 21506                           
 21507                           ;RTC.c: 64: getRTC();
 21508                           
 21509                           ;incstack = 0
 21510  00382E  EC00  F02A         	call	i2_getRTC	;wreg free
 21511                           
 21512                           ;RTC.c: 65: char month[] = "MMM";
 21513  003832  C151  F03D         	movff	printRTC@F3240,i2printRTC@month
 21514  003836  C152  F03E         	movff	printRTC@F3240+1,i2printRTC@month+1
 21515  00383A  C153  F03F         	movff	printRTC@F3240+2,i2printRTC@month+2
 21516  00383E  C154  F040         	movff	printRTC@F3240+3,i2printRTC@month+3
 21517                           
 21518                           ;RTC.c: 66: int INT_time[7];
 21519                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 21520  003842  0E00               	movlw	0
 21521  003844  6E42               	movwf	i2printRTC@i+1,c
 21522  003846  0E00               	movlw	0
 21523  003848  6E41               	movwf	i2printRTC@i,c
 21524  00384A  BE42               	btfsc	i2printRTC@i+1,7,c
 21525  00384C  D006               	goto	i2l7745
 21526  00384E  5042               	movf	i2printRTC@i+1,w,c
 21527  003850  E135               	bnz	i2l632
 21528  003852  0E07               	movlw	7
 21529  003854  5C41               	subwf	i2printRTC@i,w,c
 21530  003856  B0D8               	btfsc	status,0,c
 21531  003858  D031               	goto	i2l632
 21532  00385A                     i2l7745:
 21533                           
 21534                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 21535  00385A  0E1C               	movlw	low _time
 21536  00385C  2441               	addwf	i2printRTC@i,w,c
 21537  00385E  6ED9               	movwf	fsr2l,c
 21538  003860  0E01               	movlw	high _time
 21539  003862  2042               	addwfc	i2printRTC@i+1,w,c
 21540  003864  6EDA               	movwf	fsr2h,c
 21541  003866  50DF               	movf	indf2,w,c
 21542  003868  6E2A               	movwf	??i2_printRTC& (0+255),c
 21543  00386A  3A2A               	swapf	??i2_printRTC,f,c
 21544  00386C  0E0F               	movlw	15
 21545  00386E  162A               	andwf	??i2_printRTC,f,c
 21546  003870  0E0F               	movlw	15
 21547  003872  162A               	andwf	??i2_printRTC,f,c
 21548  003874  502A               	movf	??i2_printRTC,w,c
 21549  003876  0D0A               	mullw	10
 21550  003878  0E1C               	movlw	low _time
 21551  00387A  2441               	addwf	i2printRTC@i,w,c
 21552  00387C  6ED9               	movwf	fsr2l,c
 21553  00387E  0E01               	movlw	high _time
 21554  003880  2042               	addwfc	i2printRTC@i+1,w,c
 21555  003882  6EDA               	movwf	fsr2h,c
 21556  003884  50DF               	movf	indf2,w,c
 21557  003886  0B0F               	andlw	15
 21558  003888  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 21559  00388A  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 21560  00388C  50F3               	movf	prodl,w,c
 21561  00388E  262B               	addwf	??i2_printRTC+1,f,c
 21562  003890  50F4               	movf	prodh,w,c
 21563  003892  222C               	addwfc	??i2_printRTC+2,f,c
 21564  003894  90D8               	bcf	status,0,c
 21565  003896  3441               	rlcf	i2printRTC@i,w,c
 21566  003898  6ED9               	movwf	fsr2l,c
 21567  00389A  3442               	rlcf	i2printRTC@i+1,w,c
 21568  00389C  6EDA               	movwf	fsr2h,c
 21569  00389E  0E2D               	movlw	low i2printRTC@INT_time
 21570  0038A0  26D9               	addwf	fsr2l,f,c
 21571  0038A2  0E00               	movlw	high i2printRTC@INT_time
 21572  0038A4  22DA               	addwfc	fsr2h,f,c
 21573  0038A6  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 21574  0038AA  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 21575  0038AE  4A41               	infsnz	i2printRTC@i,f,c
 21576  0038B0  2A42               	incf	i2printRTC@i+1,f,c
 21577  0038B2  BE42               	btfsc	i2printRTC@i+1,7,c
 21578  0038B4  D7D2               	goto	i2l7745
 21579  0038B6  5042               	movf	i2printRTC@i+1,w,c
 21580  0038B8  E101               	bnz	i2u670_40
 21581  0038BA  D7CB               	goto	L18
 21582  0038BC                     i2u670_40:
 21583  0038BC                     i2l632:
 21584                           
 21585                           ;RTC.c: 69: }
 21586                           ;RTC.c: 70: int RTC_month = INT_time[5];
 21587  0038BC  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 21588  0038C0  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 21589                           
 21590                           ;RTC.c: 72: switch(RTC_month){
 21591  0038C4  D084               	goto	i2l7777
 21592  0038C6                     i2l7751:
 21593                           
 21594                           ;RTC.c: 74: strcpy(month, "JAN");
 21595  0038C6  0E3D               	movlw	low i2printRTC@month
 21596  0038C8  6E01               	movwf	i2strcpy@to,c
 21597  0038CA  0E00               	movlw	high i2printRTC@month
 21598  0038CC  6E02               	movwf	i2strcpy@to+1,c
 21599  0038CE  0EDA               	movlw	low STR_8
 21600  0038D0  6E03               	movwf	i2strcpy@from,c
 21601  0038D2  0EFF               	movlw	high STR_8
 21602  0038D4  6E04               	movwf	i2strcpy@from+1,c
 21603  0038D6  EC6F  F02D         	call	i2_strcpy	;wreg free
 21604                           
 21605                           ;RTC.c: 75: break;
 21606  0038DA  D0A6               	goto	i2l7779
 21607  0038DC                     i2l7753:
 21608                           
 21609                           ;RTC.c: 77: strcpy(month, "FEB");
 21610  0038DC  0E3D               	movlw	low i2printRTC@month
 21611  0038DE  6E01               	movwf	i2strcpy@to,c
 21612  0038E0  0E00               	movlw	high i2printRTC@month
 21613  0038E2  6E02               	movwf	i2strcpy@to+1,c
 21614  0038E4  0ECA               	movlw	low STR_9
 21615  0038E6  6E03               	movwf	i2strcpy@from,c
 21616  0038E8  0EFF               	movlw	high STR_9
 21617  0038EA  6E04               	movwf	i2strcpy@from+1,c
 21618  0038EC  EC6F  F02D         	call	i2_strcpy	;wreg free
 21619                           
 21620                           ;RTC.c: 78: break;
 21621  0038F0  D09B               	goto	i2l7779
 21622  0038F2                     i2l7755:
 21623                           
 21624                           ;RTC.c: 80: strcpy(month, "MAR");
 21625  0038F2  0E3D               	movlw	low i2printRTC@month
 21626  0038F4  6E01               	movwf	i2strcpy@to,c
 21627  0038F6  0E00               	movlw	high i2printRTC@month
 21628  0038F8  6E02               	movwf	i2strcpy@to+1,c
 21629  0038FA  0EE6               	movlw	low STR_10
 21630  0038FC  6E03               	movwf	i2strcpy@from,c
 21631  0038FE  0EFF               	movlw	high STR_10
 21632  003900  6E04               	movwf	i2strcpy@from+1,c
 21633  003902  EC6F  F02D         	call	i2_strcpy	;wreg free
 21634                           
 21635                           ;RTC.c: 81: break;
 21636  003906  D090               	goto	i2l7779
 21637  003908                     i2l7757:
 21638                           
 21639                           ;RTC.c: 83: strcpy(month, "APR");
 21640  003908  0E3D               	movlw	low i2printRTC@month
 21641  00390A  6E01               	movwf	i2strcpy@to,c
 21642  00390C  0E00               	movlw	high i2printRTC@month
 21643  00390E  6E02               	movwf	i2strcpy@to+1,c
 21644  003910  0EEA               	movlw	low STR_11
 21645  003912  6E03               	movwf	i2strcpy@from,c
 21646  003914  0EFF               	movlw	high STR_11
 21647  003916  6E04               	movwf	i2strcpy@from+1,c
 21648  003918  EC6F  F02D         	call	i2_strcpy	;wreg free
 21649                           
 21650                           ;RTC.c: 84: break;
 21651  00391C  D085               	goto	i2l7779
 21652  00391E                     i2l7759:
 21653                           
 21654                           ;RTC.c: 86: strcpy(month, "MAY");
 21655  00391E  0E3D               	movlw	low i2printRTC@month
 21656  003920  6E01               	movwf	i2strcpy@to,c
 21657  003922  0E00               	movlw	high i2printRTC@month
 21658  003924  6E02               	movwf	i2strcpy@to+1,c
 21659  003926  0EFA               	movlw	low STR_12
 21660  003928  6E03               	movwf	i2strcpy@from,c
 21661  00392A  0EFF               	movlw	high STR_12
 21662  00392C  6E04               	movwf	i2strcpy@from+1,c
 21663  00392E  EC6F  F02D         	call	i2_strcpy	;wreg free
 21664                           
 21665                           ;RTC.c: 87: break;
 21666  003932  D07A               	goto	i2l7779
 21667  003934                     i2l7761:
 21668                           
 21669                           ;RTC.c: 89: strcpy(month, "JUN");
 21670  003934  0E3D               	movlw	low i2printRTC@month
 21671  003936  6E01               	movwf	i2strcpy@to,c
 21672  003938  0E00               	movlw	high i2printRTC@month
 21673  00393A  6E02               	movwf	i2strcpy@to+1,c
 21674  00393C  0EDE               	movlw	low STR_13
 21675  00393E  6E03               	movwf	i2strcpy@from,c
 21676  003940  0EFF               	movlw	high STR_13
 21677  003942  6E04               	movwf	i2strcpy@from+1,c
 21678  003944  EC6F  F02D         	call	i2_strcpy	;wreg free
 21679                           
 21680                           ;RTC.c: 90: break;
 21681  003948  D06F               	goto	i2l7779
 21682  00394A                     i2l7763:
 21683                           
 21684                           ;RTC.c: 92: strcpy(month, "JUL");
 21685  00394A  0E3D               	movlw	low i2printRTC@month
 21686  00394C  6E01               	movwf	i2strcpy@to,c
 21687  00394E  0E00               	movlw	high i2printRTC@month
 21688  003950  6E02               	movwf	i2strcpy@to+1,c
 21689  003952  0ED6               	movlw	low STR_14
 21690  003954  6E03               	movwf	i2strcpy@from,c
 21691  003956  0EFF               	movlw	high STR_14
 21692  003958  6E04               	movwf	i2strcpy@from+1,c
 21693  00395A  EC6F  F02D         	call	i2_strcpy	;wreg free
 21694                           
 21695                           ;RTC.c: 93: break;
 21696  00395E  D064               	goto	i2l7779
 21697  003960                     i2l7765:
 21698                           
 21699                           ;RTC.c: 95: strcpy(month, "AUG");
 21700  003960  0E3D               	movlw	low i2printRTC@month
 21701  003962  6E01               	movwf	i2strcpy@to,c
 21702  003964  0E00               	movlw	high i2printRTC@month
 21703  003966  6E02               	movwf	i2strcpy@to+1,c
 21704  003968  0ED2               	movlw	low STR_15
 21705  00396A  6E03               	movwf	i2strcpy@from,c
 21706  00396C  0EFF               	movlw	high STR_15
 21707  00396E  6E04               	movwf	i2strcpy@from+1,c
 21708  003970  EC6F  F02D         	call	i2_strcpy	;wreg free
 21709                           
 21710                           ;RTC.c: 96: break;
 21711  003974  D059               	goto	i2l7779
 21712  003976                     i2l7767:
 21713                           
 21714                           ;RTC.c: 98: strcpy(month, "SEP");
 21715  003976  0E3D               	movlw	low i2printRTC@month
 21716  003978  6E01               	movwf	i2strcpy@to,c
 21717  00397A  0E00               	movlw	high i2printRTC@month
 21718  00397C  6E02               	movwf	i2strcpy@to+1,c
 21719  00397E  0EE2               	movlw	low STR_16
 21720  003980  6E03               	movwf	i2strcpy@from,c
 21721  003982  0EFF               	movlw	high STR_16
 21722  003984  6E04               	movwf	i2strcpy@from+1,c
 21723  003986  EC6F  F02D         	call	i2_strcpy	;wreg free
 21724                           
 21725                           ;RTC.c: 99: break;
 21726  00398A  D04E               	goto	i2l7779
 21727  00398C                     i2l7769:
 21728                           
 21729                           ;RTC.c: 101: strcpy(month, "OCT");
 21730  00398C  0E3D               	movlw	low i2printRTC@month
 21731  00398E  6E01               	movwf	i2strcpy@to,c
 21732  003990  0E00               	movlw	high i2printRTC@month
 21733  003992  6E02               	movwf	i2strcpy@to+1,c
 21734  003994  0EF2               	movlw	low STR_17
 21735  003996  6E03               	movwf	i2strcpy@from,c
 21736  003998  0EFF               	movlw	high STR_17
 21737  00399A  6E04               	movwf	i2strcpy@from+1,c
 21738  00399C  EC6F  F02D         	call	i2_strcpy	;wreg free
 21739                           
 21740                           ;RTC.c: 102: break;
 21741  0039A0  D043               	goto	i2l7779
 21742  0039A2                     i2l7771:
 21743                           
 21744                           ;RTC.c: 104: strcpy(month, "NOV");
 21745  0039A2  0E3D               	movlw	low i2printRTC@month
 21746  0039A4  6E01               	movwf	i2strcpy@to,c
 21747  0039A6  0E00               	movlw	high i2printRTC@month
 21748  0039A8  6E02               	movwf	i2strcpy@to+1,c
 21749  0039AA  0EF6               	movlw	low STR_18
 21750  0039AC  6E03               	movwf	i2strcpy@from,c
 21751  0039AE  0EFF               	movlw	high STR_18
 21752  0039B0  6E04               	movwf	i2strcpy@from+1,c
 21753  0039B2  EC6F  F02D         	call	i2_strcpy	;wreg free
 21754                           
 21755                           ;RTC.c: 105: break;
 21756  0039B6  D038               	goto	i2l7779
 21757  0039B8                     i2l7773:
 21758                           
 21759                           ;RTC.c: 107: strcpy(month, "DEC");
 21760  0039B8  0E3D               	movlw	low i2printRTC@month
 21761  0039BA  6E01               	movwf	i2strcpy@to,c
 21762  0039BC  0E00               	movlw	high i2printRTC@month
 21763  0039BE  6E02               	movwf	i2strcpy@to+1,c
 21764  0039C0  0ECE               	movlw	low STR_19
 21765  0039C2  6E03               	movwf	i2strcpy@from,c
 21766  0039C4  0EFF               	movlw	high STR_19
 21767  0039C6  6E04               	movwf	i2strcpy@from+1,c
 21768  0039C8  EC6F  F02D         	call	i2_strcpy	;wreg free
 21769                           
 21770                           ;RTC.c: 109: }
 21771                           
 21772                           ;RTC.c: 108: break;
 21773  0039CC  D02D               	goto	i2l7779
 21774  0039CE                     i2l7777:
 21775  0039CE  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 21776  0039D2  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 21777                           
 21778                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21779                           ; Switch size 1, requested type "space"
 21780                           ; Number of cases is 1, Range of values is 0 to 0
 21781                           ; switch strategies available:
 21782                           ; Name         Instructions Cycles
 21783                           ; simple_byte            4     3 (average)
 21784                           ;	Chosen strategy is simple_byte
 21785  0039D6  502B               	movf	??i2_printRTC+1,w,c
 21786  0039D8  0A00               	xorlw	0	; case 0
 21787  0039DA  A4D8               	btfss	status,2,c
 21788  0039DC  D025               	goto	i2l7779
 21789                           
 21790                           ; Switch size 1, requested type "space"
 21791                           ; Number of cases is 12, Range of values is 1 to 12
 21792                           ; switch strategies available:
 21793                           ; Name         Instructions Cycles
 21794                           ; simple_byte           37    19 (average)
 21795                           ;	Chosen strategy is simple_byte
 21796  0039DE  502A               	movf	??i2_printRTC,w,c
 21797  0039E0  0A01               	xorlw	1	; case 1
 21798  0039E2  B4D8               	btfsc	status,2,c
 21799  0039E4  D770               	goto	i2l7751
 21800  0039E6  0A03               	xorlw	3	; case 2
 21801  0039E8  B4D8               	btfsc	status,2,c
 21802  0039EA  D778               	goto	i2l7753
 21803  0039EC  0A01               	xorlw	1	; case 3
 21804  0039EE  B4D8               	btfsc	status,2,c
 21805  0039F0  D780               	goto	i2l7755
 21806  0039F2  0A07               	xorlw	7	; case 4
 21807  0039F4  B4D8               	btfsc	status,2,c
 21808  0039F6  D788               	goto	i2l7757
 21809  0039F8  0A01               	xorlw	1	; case 5
 21810  0039FA  B4D8               	btfsc	status,2,c
 21811  0039FC  D790               	goto	i2l7759
 21812  0039FE  0A03               	xorlw	3	; case 6
 21813  003A00  B4D8               	btfsc	status,2,c
 21814  003A02  D798               	goto	i2l7761
 21815  003A04  0A01               	xorlw	1	; case 7
 21816  003A06  B4D8               	btfsc	status,2,c
 21817  003A08  D7A0               	goto	i2l7763
 21818  003A0A  0A0F               	xorlw	15	; case 8
 21819  003A0C  B4D8               	btfsc	status,2,c
 21820  003A0E  D7A8               	goto	i2l7765
 21821  003A10  0A01               	xorlw	1	; case 9
 21822  003A12  B4D8               	btfsc	status,2,c
 21823  003A14  D7B0               	goto	i2l7767
 21824  003A16  0A03               	xorlw	3	; case 10
 21825  003A18  B4D8               	btfsc	status,2,c
 21826  003A1A  D7B8               	goto	i2l7769
 21827  003A1C  0A01               	xorlw	1	; case 11
 21828  003A1E  B4D8               	btfsc	status,2,c
 21829  003A20  D7C0               	goto	i2l7771
 21830  003A22  0A07               	xorlw	7	; case 12
 21831  003A24  B4D8               	btfsc	status,2,c
 21832  003A26  D7C8               	goto	i2l7773
 21833  003A28                     i2l7779:
 21834                           
 21835                           ;RTC.c: 110: lcdInst(0b10000000);;
 21836  003A28  0E80               	movlw	128
 21837  003A2A  ECDF  F02F         	call	i2_lcdInst
 21838                           
 21839                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 21840  003A2E  0EC2               	movlw	low STR_21
 21841  003A30  6E0D               	movwf	i2printf@f,c
 21842  003A32  0EFA               	movlw	high STR_21
 21843  003A34  6E0E               	movwf	i2printf@f+1,c
 21844  003A36  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 21845  003A3A  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 21846  003A3E  0E3D               	movlw	low i2printRTC@month
 21847  003A40  6E11               	movwf	?i2_printf+4,c
 21848  003A42  0E00               	movlw	high i2printRTC@month
 21849  003A44  6E12               	movwf	?i2_printf+5,c
 21850  003A46  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 21851  003A4A  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 21852  003A4E  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 21853  003A52  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 21854  003A56  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 21855  003A5A  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 21856  003A5E  EC6D  F014         	call	i2_printf	;wreg free
 21857  003A62  0012               	return		;funcret
 21858  003A64                     __end_ofi2_printRTC:
 21859                           	opt stack 0
 21860                           pclatu	equ	0xFFB
 21861                           pclath	equ	0xFFA
 21862                           tblptru	equ	0xFF8
 21863                           tblptrh	equ	0xFF7
 21864                           tblptrl	equ	0xFF6
 21865                           tablat	equ	0xFF5
 21866                           prodh	equ	0xFF4
 21867                           prodl	equ	0xFF3
 21868                           intcon	equ	0xFF2
 21869                           intcon2	equ	0xFF1
 21870                           intcon3	equ	0xFF0
 21871                           indf0	equ	0xFEF
 21872                           postinc0	equ	0xFEE
 21873                           fsr0h	equ	0xFEA
 21874                           fsr0l	equ	0xFE9
 21875                           wreg	equ	0xFE8
 21876                           postdec1	equ	0xFE5
 21877                           fsr1h	equ	0xFE2
 21878                           fsr1l	equ	0xFE1
 21879                           indf2	equ	0xFDF
 21880                           postinc2	equ	0xFDE
 21881                           postdec2	equ	0xFDD
 21882                           fsr2h	equ	0xFDA
 21883                           fsr2l	equ	0xFD9
 21884                           status	equ	0xFD8
 21885                           
 21886 ;; *************** function i2_strcpy *****************
 21887 ;; Defined at:
 21888 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 21889 ;; Parameters:    Size  Location     Type
 21890 ;;  to              2    0[COMRAM] PTR unsigned char 
 21891 ;;		 -> printRTC@month(4), UI@month(4), 
 21892 ;;  from            2    2[COMRAM] PTR const unsigned char 
 21893 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 21894 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 21895 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 21896 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 21897 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 21898 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 21899 ;;		 -> STR_8(4), 
 21900 ;; Auto vars:     Size  Location     Type
 21901 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 21902 ;;		 -> printRTC@month(4), UI@month(4), 
 21903 ;; Return value:  Size  Location     Type
 21904 ;;                  2    0[COMRAM] PTR unsigned char 
 21905 ;; Registers used:
 21906 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 21907 ;; Tracked objects:
 21908 ;;		On entry : 0/0
 21909 ;;		On exit  : 0/0
 21910 ;;		Unchanged: 0/0
 21911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21912 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21913 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21915 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21916 ;;Total ram usage:        6 bytes
 21917 ;; Hardware stack levels used:    1
 21918 ;; This function calls:
 21919 ;;		Nothing
 21920 ;; This function is called by:
 21921 ;;		i2_printRTC
 21922 ;; This function uses a non-reentrant model
 21923 ;;
 21924                           
 21925                           	psect	text70
 21926  005ADE                     __ptext70:
 21927                           	opt stack 0
 21928  005ADE                     i2_strcpy:
 21929                           	opt stack 21
 21930                           
 21931                           ;incstack = 0
 21932  005ADE  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 21933  005AE2  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 21934  005AE6  D004               	goto	i2l7303
 21935  005AE8                     i2l7301:
 21936  005AE8  4A05               	infsnz	i2strcpy@cp,f,c
 21937  005AEA  2A06               	incf	i2strcpy@cp+1,f,c
 21938  005AEC  4A03               	infsnz	i2strcpy@from,f,c
 21939  005AEE  2A04               	incf	i2strcpy@from+1,f,c
 21940  005AF0                     i2l7303:
 21941  005AF0  C003  FFF6         	movff	i2strcpy@from,tblptrl
 21942  005AF4  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 21943  005AF8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21944  005AF8  6AF8               	clrf	tblptru,c
 21945  005AFA                     	endif
 21946  005AFA                     	if	0	;tblptru may be non-zero
 21947  005AFA                     	endif
 21948  005AFA  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 21949  005AFE  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 21950  005B02  0008               	tblrd		*
 21951  005B04  CFF5 FFDF          	movff	tablat,indf2
 21952  005B08  50DF               	movf	indf2,w,c
 21953  005B0A  B4D8               	btfsc	status,2,c
 21954  005B0C  0012               	return	
 21955  005B0E  D7EC               	goto	i2l7301
 21956  005B10                     __end_ofi2_strcpy:
 21957                           	opt stack 0
 21958                           pclatu	equ	0xFFB
 21959                           pclath	equ	0xFFA
 21960                           tblptru	equ	0xFF8
 21961                           tblptrh	equ	0xFF7
 21962                           tblptrl	equ	0xFF6
 21963                           tablat	equ	0xFF5
 21964                           prodh	equ	0xFF4
 21965                           prodl	equ	0xFF3
 21966                           intcon	equ	0xFF2
 21967                           intcon2	equ	0xFF1
 21968                           intcon3	equ	0xFF0
 21969                           indf0	equ	0xFEF
 21970                           postinc0	equ	0xFEE
 21971                           fsr0h	equ	0xFEA
 21972                           fsr0l	equ	0xFE9
 21973                           wreg	equ	0xFE8
 21974                           postdec1	equ	0xFE5
 21975                           fsr1h	equ	0xFE2
 21976                           fsr1l	equ	0xFE1
 21977                           indf2	equ	0xFDF
 21978                           postinc2	equ	0xFDE
 21979                           postdec2	equ	0xFDD
 21980                           fsr2h	equ	0xFDA
 21981                           fsr2l	equ	0xFD9
 21982                           status	equ	0xFD8
 21983                           
 21984 ;; *************** function _inputHandler *****************
 21985 ;; Defined at:
 21986 ;;		line 375 in file "UI.c"
 21987 ;; Parameters:    Size  Location     Type
 21988 ;;		None
 21989 ;; Auto vars:     Size  Location     Type
 21990 ;;		None
 21991 ;; Return value:  Size  Location     Type
 21992 ;;                  2   41[COMRAM] int 
 21993 ;; Registers used:
 21994 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21995 ;; Tracked objects:
 21996 ;;		On entry : 0/0
 21997 ;;		On exit  : 0/0
 21998 ;;		Unchanged: 0/0
 21999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22000 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22002 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22003 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22004 ;;Total ram usage:        4 bytes
 22005 ;; Hardware stack levels used:    1
 22006 ;; Hardware stack levels required when called:    4
 22007 ;; This function calls:
 22008 ;;		_change_state_to_logs_11
 22009 ;;		_change_state_to_logs_12
 22010 ;;		_change_state_to_logs_22
 22011 ;;		_change_state_to_logs_23
 22012 ;;		_change_state_to_logs_33
 22013 ;;		_change_state_to_logs_34
 22014 ;;		_change_state_to_menu_11
 22015 ;;		_change_state_to_menu_23
 22016 ;;		i2_change_state_to_menu_12
 22017 ;;		i2_change_state_to_menu_22
 22018 ;; This function is called by:
 22019 ;;		_updateMenu
 22020 ;; This function uses a non-reentrant model
 22021 ;;
 22022                           
 22023                           	psect	text71
 22024  003A64                     __ptext71:
 22025                           	opt stack 0
 22026  003A64                     _inputHandler:
 22027                           	opt stack 18
 22028                           
 22029                           ;UI.c: 380: if(firstboot){
 22030                           
 22031                           ;incstack = 0
 22032  003A64  0101               	movlb	1	; () banked
 22033  003A66  513D               	movf	_firstboot& (0+255),w,b
 22034  003A68  0101               	movlb	1	; () banked
 22035  003A6A  113E               	iorwf	(_firstboot+1)& (0+255),w,b
 22036  003A6C  B4D8               	btfsc	status,2,c
 22037  003A6E  D00C               	goto	i2l7847
 22038                           
 22039                           ; BSR set to: 1
 22040                           ;UI.c: 381: change_state_to_menu_11();
 22041  003A70  ECE8  F02D         	call	_change_state_to_menu_11	;wreg free
 22042                           
 22043                           ;UI.c: 382: firstboot = 0;
 22044  003A74  0E00               	movlw	0
 22045  003A76  0101               	movlb	1	; () banked
 22046  003A78  6F3E               	movwf	(_firstboot+1)& (0+255),b
 22047  003A7A  0E00               	movlw	0
 22048  003A7C  6F3D               	movwf	_firstboot& (0+255),b
 22049                           
 22050                           ; BSR set to: 1
 22051                           ;UI.c: 383: return 0;
 22052  003A7E  0E00               	movlw	0
 22053  003A80  6E2B               	movwf	?_inputHandler+1,c
 22054  003A82  0E00               	movlw	0
 22055  003A84  6E2A               	movwf	?_inputHandler,c
 22056                           
 22057                           ; BSR set to: 1
 22058  003A86  0012               	return	
 22059  003A88                     i2l7847:
 22060                           
 22061                           ; BSR set to: 1
 22062                           ;UI.c: 384: }
 22063                           ;UI.c: 385: if (logstate){
 22064  003A88  0100               	movlb	0	; () banked
 22065  003A8A  51F8               	movf	_logstate& (0+255),w,b
 22066  003A8C  0100               	movlb	0	; () banked
 22067  003A8E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 22068  003A90  B4D8               	btfsc	status,2,c
 22069  003A92  D0C7               	goto	i2l7965
 22070                           
 22071                           ; BSR set to: 0
 22072                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 22073  003A94  0E43               	movlw	67
 22074  003A96  187D               	xorwf	_input,w,c	;volatile
 22075  003A98  A4D8               	btfss	status,2,c
 22076  003A9A  D012               	goto	i2l7865
 22077                           
 22078                           ; BSR set to: 0
 22079  003A9C  B281               	btfsc	3969,1,c	;volatile
 22080  003A9E  D009               	goto	i2l7857
 22081  003AA0  D00F               	goto	i2l7865
 22082  003AA2                     i2l7855:
 22083                           
 22084                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 22085  003AA2  0E68               	movlw	104
 22086  003AA4  6E2C               	movwf	??_inputHandler& (0+255),c
 22087  003AA6  0EE4               	movlw	228
 22088  003AA8                     i2u1225_47:
 22089  003AA8  2EE8               	decfsz	wreg,f,c
 22090  003AAA  D7FE               	bra	i2u1225_47
 22091  003AAC  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 22092  003AAE  D7FC               	bra	i2u1225_47
 22093  003AB0  D000               	nop2	
 22094  003AB2                     i2l7857:
 22095  003AB2  B281               	btfsc	3969,1,c	;volatile
 22096  003AB4  D7F6               	goto	i2l7855
 22097  003AB6                     i2l7859:
 22098                           
 22099                           ;UI.c: 390: }
 22100                           ;UI.c: 391: return 0;
 22101  003AB6  0E00               	movlw	0
 22102  003AB8  6E2B               	movwf	?_inputHandler+1,c
 22103  003ABA  0E00               	movlw	0
 22104  003ABC  6E2A               	movwf	?_inputHandler,c
 22105  003ABE  0012               	return	
 22106  003AC0                     i2l7865:
 22107                           
 22108                           ;UI.c: 393: else if (input == 'D'){
 22109  003AC0  0E44               	movlw	68
 22110  003AC2  187D               	xorwf	_input,w,c	;volatile
 22111  003AC4  A4D8               	btfss	status,2,c
 22112  003AC6  D7F7               	goto	i2l7859
 22113                           
 22114                           ;UI.c: 395: logstate = 0;
 22115  003AC8  0E00               	movlw	0
 22116  003ACA  0100               	movlb	0	; () banked
 22117  003ACC  6FF9               	movwf	(_logstate+1)& (0+255),b
 22118  003ACE  0E00               	movlw	0
 22119  003AD0  6FF8               	movwf	_logstate& (0+255),b
 22120                           
 22121                           ;UI.c: 396: switch(cur_state){
 22122  003AD2  D012               	goto	i2l7883
 22123  003AD4                     i2l7869:
 22124                           
 22125                           ;UI.c: 398: change_state_to_logs_11();
 22126  003AD4  EC60  F02E         	call	_change_state_to_logs_11	;wreg free
 22127                           
 22128                           ;UI.c: 399: break;
 22129  003AD8  D7EE               	goto	i2l7859
 22130  003ADA                     i2l7871:
 22131                           
 22132                           ;UI.c: 401: change_state_to_logs_12();
 22133  003ADA  EC48  F02E         	call	_change_state_to_logs_12	;wreg free
 22134                           
 22135                           ;UI.c: 402: break;
 22136  003ADE  D7EB               	goto	i2l7859
 22137  003AE0                     i2l7873:
 22138                           
 22139                           ;UI.c: 404: change_state_to_logs_22();
 22140  003AE0  EC30  F02E         	call	_change_state_to_logs_22	;wreg free
 22141                           
 22142                           ;UI.c: 405: break;
 22143  003AE4  D7E8               	goto	i2l7859
 22144  003AE6                     i2l7875:
 22145                           
 22146                           ;UI.c: 407: change_state_to_logs_23();
 22147  003AE6  EC8F  F02E         	call	_change_state_to_logs_23	;wreg free
 22148                           
 22149                           ;UI.c: 408: break;
 22150  003AEA  D7E5               	goto	i2l7859
 22151  003AEC                     i2l7877:
 22152                           
 22153                           ;UI.c: 410: change_state_to_logs_33();
 22154  003AEC  EC18  F02E         	call	_change_state_to_logs_33	;wreg free
 22155                           
 22156                           ;UI.c: 411: break;
 22157  003AF0  D7E2               	goto	i2l7859
 22158  003AF2                     i2l7879:
 22159                           
 22160                           ;UI.c: 413: change_state_to_logs_34();
 22161  003AF2  EC00  F02E         	call	_change_state_to_logs_34	;wreg free
 22162                           
 22163                           ;UI.c: 415: }
 22164                           
 22165                           ;UI.c: 414: break;
 22166  003AF6  D7DF               	goto	i2l7859
 22167  003AF8                     i2l7883:
 22168  003AF8  C0E6  F02C         	movff	_cur_state,??_inputHandler
 22169  003AFC  C0E7  F02D         	movff	_cur_state+1,??_inputHandler+1
 22170                           
 22171                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 22172                           ; Switch size 1, requested type "space"
 22173                           ; Number of cases is 2, Range of values is 3 to 4
 22174                           ; switch strategies available:
 22175                           ; Name         Instructions Cycles
 22176                           ; simple_byte            7     4 (average)
 22177                           ;	Chosen strategy is simple_byte
 22178  003B00  502D               	movf	??_inputHandler+1,w,c
 22179  003B02  0A03               	xorlw	3	; case 3
 22180  003B04  B4D8               	btfsc	status,2,c
 22181  003B06  D004               	goto	i2l11045
 22182  003B08  0A07               	xorlw	7	; case 4
 22183  003B0A  B4D8               	btfsc	status,2,c
 22184  003B0C  D00F               	goto	i2l11047
 22185  003B0E  D7D3               	goto	i2l7859
 22186  003B10                     i2l11045:
 22187                           
 22188                           ; Switch size 1, requested type "space"
 22189                           ; Number of cases is 4, Range of values is 243 to 255
 22190                           ; switch strategies available:
 22191                           ; Name         Instructions Cycles
 22192                           ; simple_byte           13     7 (average)
 22193                           ;	Chosen strategy is simple_byte
 22194  003B10  502C               	movf	??_inputHandler,w,c
 22195  003B12  0AF3               	xorlw	243	; case 243
 22196  003B14  B4D8               	btfsc	status,2,c
 22197  003B16  D7DE               	goto	i2l7869
 22198  003B18  0A07               	xorlw	7	; case 244
 22199  003B1A  B4D8               	btfsc	status,2,c
 22200  003B1C  D7DE               	goto	i2l7871
 22201  003B1E  0A0A               	xorlw	10	; case 254
 22202  003B20  B4D8               	btfsc	status,2,c
 22203  003B22  D7DE               	goto	i2l7873
 22204  003B24  0A01               	xorlw	1	; case 255
 22205  003B26  B4D8               	btfsc	status,2,c
 22206  003B28  D7DE               	goto	i2l7875
 22207  003B2A  D7C5               	goto	i2l7859
 22208  003B2C                     i2l11047:
 22209                           
 22210                           ; Switch size 1, requested type "space"
 22211                           ; Number of cases is 2, Range of values is 9 to 10
 22212                           ; switch strategies available:
 22213                           ; Name         Instructions Cycles
 22214                           ; simple_byte            7     4 (average)
 22215                           ;	Chosen strategy is simple_byte
 22216  003B2C  502C               	movf	??_inputHandler,w,c
 22217  003B2E  0A09               	xorlw	9	; case 9
 22218  003B30  B4D8               	btfsc	status,2,c
 22219  003B32  D7DC               	goto	i2l7877
 22220  003B34  0A03               	xorlw	3	; case 10
 22221  003B36  B4D8               	btfsc	status,2,c
 22222  003B38  D7DC               	goto	i2l7879
 22223  003B3A  D7BD               	goto	i2l7859
 22224  003B3C                     i2l7895:
 22225                           
 22226                           ;UI.c: 425: if(cur_state == 11){
 22227  003B3C  0E0B               	movlw	11
 22228  003B3E  0100               	movlb	0	; () banked
 22229  003B40  19E6               	xorwf	_cur_state& (0+255),w,b
 22230  003B42  0100               	movlb	0	; () banked
 22231  003B44  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 22232  003B46  A4D8               	btfss	status,2,c
 22233  003B48  D005               	goto	i2l7903
 22234                           
 22235                           ; BSR set to: 0
 22236                           ;UI.c: 426: return 0;
 22237  003B4A  0E00               	movlw	0
 22238  003B4C  6E2B               	movwf	?_inputHandler+1,c
 22239  003B4E  0E00               	movlw	0
 22240  003B50  6E2A               	movwf	?_inputHandler,c
 22241                           
 22242                           ; BSR set to: 0
 22243  003B52  0012               	return	
 22244  003B54                     i2l7903:
 22245                           
 22246                           ; BSR set to: 0
 22247                           ;UI.c: 428: else{
 22248                           ;UI.c: 429: change_state_to_menu_11();
 22249  003B54  ECE8  F02D         	call	_change_state_to_menu_11	;wreg free
 22250                           
 22251                           ;UI.c: 430: }
 22252                           ;UI.c: 431: return 0;
 22253  003B58  0E00               	movlw	0
 22254  003B5A  6E2B               	movwf	?_inputHandler+1,c
 22255  003B5C  0E00               	movlw	0
 22256  003B5E  6E2A               	movwf	?_inputHandler,c
 22257  003B60  0012               	return	
 22258  003B62                     i2l7909:
 22259                           
 22260                           ;UI.c: 433: if(cur_state == 22 || cur_state == 12){
 22261  003B62  0E16               	movlw	22
 22262  003B64  0100               	movlb	0	; () banked
 22263  003B66  19E6               	xorwf	_cur_state& (0+255),w,b
 22264  003B68  0100               	movlb	0	; () banked
 22265  003B6A  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 22266  003B6C  B4D8               	btfsc	status,2,c
 22267  003B6E  D007               	goto	i2l7913
 22268                           
 22269                           ; BSR set to: 0
 22270  003B70  0E0C               	movlw	12
 22271  003B72  0100               	movlb	0	; () banked
 22272  003B74  19E6               	xorwf	_cur_state& (0+255),w,b
 22273  003B76  0100               	movlb	0	; () banked
 22274  003B78  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 22275  003B7A  A4D8               	btfss	status,2,c
 22276  003B7C  D005               	goto	i2l7919
 22277  003B7E                     i2l7913:
 22278                           
 22279                           ; BSR set to: 0
 22280                           ;UI.c: 434: return 0;
 22281  003B7E  0E00               	movlw	0
 22282  003B80  6E2B               	movwf	?_inputHandler+1,c
 22283  003B82  0E00               	movlw	0
 22284  003B84  6E2A               	movwf	?_inputHandler,c
 22285                           
 22286                           ; BSR set to: 0
 22287  003B86  0012               	return	
 22288  003B88                     i2l7919:
 22289                           
 22290                           ; BSR set to: 0
 22291                           ;UI.c: 436: else if(cur_state == 23){
 22292  003B88  0E17               	movlw	23
 22293  003B8A  0100               	movlb	0	; () banked
 22294  003B8C  19E6               	xorwf	_cur_state& (0+255),w,b
 22295  003B8E  0100               	movlb	0	; () banked
 22296  003B90  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 22297  003B92  A4D8               	btfss	status,2,c
 22298  003B94  D003               	goto	i2l7923
 22299                           
 22300                           ; BSR set to: 0
 22301                           ;UI.c: 437: change_state_to_menu_22();
 22302  003B96  ECA0  F02D         	call	i2_change_state_to_menu_22	;wreg free
 22303                           
 22304                           ;UI.c: 438: }
 22305  003B9A  D002               	goto	i2l7925
 22306  003B9C                     i2l7923:
 22307                           
 22308                           ;UI.c: 439: else{
 22309                           ;UI.c: 440: change_state_to_menu_12();
 22310  003B9C  ECB8  F02D         	call	i2_change_state_to_menu_12	;wreg free
 22311  003BA0                     i2l7925:
 22312                           
 22313                           ;UI.c: 441: }
 22314                           ;UI.c: 442: return 0;
 22315  003BA0  0E00               	movlw	0
 22316  003BA2  6E2B               	movwf	?_inputHandler+1,c
 22317  003BA4  0E00               	movlw	0
 22318  003BA6  6E2A               	movwf	?_inputHandler,c
 22319  003BA8  0012               	return	
 22320  003BAA                     i2l7929:
 22321                           
 22322                           ;UI.c: 444: if(cur_state == 23){
 22323  003BAA  0E17               	movlw	23
 22324  003BAC  0100               	movlb	0	; () banked
 22325  003BAE  19E6               	xorwf	_cur_state& (0+255),w,b
 22326  003BB0  0100               	movlb	0	; () banked
 22327  003BB2  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 22328  003BB4  A4D8               	btfss	status,2,c
 22329  003BB6  D005               	goto	i2l7937
 22330                           
 22331                           ; BSR set to: 0
 22332                           ;UI.c: 445: return 0;
 22333  003BB8  0E00               	movlw	0
 22334  003BBA  6E2B               	movwf	?_inputHandler+1,c
 22335  003BBC  0E00               	movlw	0
 22336  003BBE  6E2A               	movwf	?_inputHandler,c
 22337                           
 22338                           ; BSR set to: 0
 22339  003BC0  0012               	return	
 22340  003BC2                     i2l7937:
 22341                           
 22342                           ; BSR set to: 0
 22343                           ;UI.c: 447: else{
 22344                           ;UI.c: 448: change_state_to_menu_23();
 22345  003BC2  ECD0  F02D         	call	_change_state_to_menu_23	;wreg free
 22346                           
 22347                           ;UI.c: 449: }
 22348                           ;UI.c: 450: return 0;
 22349  003BC6  0E00               	movlw	0
 22350  003BC8  6E2B               	movwf	?_inputHandler+1,c
 22351  003BCA  0E00               	movlw	0
 22352  003BCC  6E2A               	movwf	?_inputHandler,c
 22353  003BCE  0012               	return	
 22354  003BD0                     i2l7943:
 22355                           
 22356                           ;UI.c: 453: up = 1;
 22357  003BD0  0E00               	movlw	0
 22358  003BD2  6E76               	movwf	_up+1,c
 22359  003BD4  0E01               	movlw	1
 22360  003BD6  6E75               	movwf	_up,c
 22361                           
 22362                           ;UI.c: 454: return 1;
 22363  003BD8  0E00               	movlw	0
 22364  003BDA  6E2B               	movwf	?_inputHandler+1,c
 22365  003BDC  0E01               	movlw	1
 22366  003BDE  6E2A               	movwf	?_inputHandler,c
 22367  003BE0  0012               	return	
 22368  003BE2                     i2l7947:
 22369                           
 22370                           ;UI.c: 456: down = 1;
 22371  003BE2  0E00               	movlw	0
 22372  003BE4  6E66               	movwf	_down+1,c
 22373  003BE6  0E01               	movlw	1
 22374  003BE8  6E65               	movwf	_down,c
 22375                           
 22376                           ;UI.c: 457: return 1;
 22377  003BEA  0E00               	movlw	0
 22378  003BEC  6E2B               	movwf	?_inputHandler+1,c
 22379  003BEE  0E01               	movlw	1
 22380  003BF0  6E2A               	movwf	?_inputHandler,c
 22381  003BF2  0012               	return	
 22382  003BF4                     i2l7951:
 22383                           
 22384                           ;UI.c: 459: enter = 1;
 22385  003BF4  0E00               	movlw	0
 22386  003BF6  6E68               	movwf	_enter+1,c
 22387  003BF8  0E01               	movlw	1
 22388  003BFA  6E67               	movwf	_enter,c
 22389                           
 22390                           ;UI.c: 460: return 1;
 22391  003BFC  0E00               	movlw	0
 22392  003BFE  6E2B               	movwf	?_inputHandler+1,c
 22393  003C00  0E01               	movlw	1
 22394  003C02  6E2A               	movwf	?_inputHandler,c
 22395  003C04  0012               	return	
 22396  003C06                     i2l7955:
 22397                           
 22398                           ;UI.c: 462: back = 1;
 22399  003C06  0E00               	movlw	0
 22400  003C08  6E64               	movwf	_back+1,c
 22401  003C0A  0E01               	movlw	1
 22402  003C0C  6E63               	movwf	_back,c
 22403                           
 22404                           ;UI.c: 463: return 1;
 22405  003C0E  0E00               	movlw	0
 22406  003C10  6E2B               	movwf	?_inputHandler+1,c
 22407  003C12  0E01               	movlw	1
 22408  003C14  6E2A               	movwf	?_inputHandler,c
 22409  003C16  0012               	return	
 22410  003C18                     i2l7959:
 22411                           
 22412                           ;UI.c: 466: return 1;
 22413  003C18  0E00               	movlw	0
 22414  003C1A  6E2B               	movwf	?_inputHandler+1,c
 22415  003C1C  0E01               	movlw	1
 22416  003C1E  6E2A               	movwf	?_inputHandler,c
 22417                           
 22418                           ;UI.c: 467: }
 22419  003C20  0012               	return	
 22420  003C22                     i2l7965:
 22421  003C22  507D               	movf	_input,w,c	;volatile
 22422                           
 22423                           ; Switch size 1, requested type "space"
 22424                           ; Number of cases is 7, Range of values is 49 to 68
 22425                           ; switch strategies available:
 22426                           ; Name         Instructions Cycles
 22427                           ; simple_byte           22    12 (average)
 22428                           ;	Chosen strategy is simple_byte
 22429  003C24  0A31               	xorlw	49	; case 49
 22430  003C26  B4D8               	btfsc	status,2,c
 22431  003C28  D789               	goto	i2l7895
 22432  003C2A  0A03               	xorlw	3	; case 50
 22433  003C2C  B4D8               	btfsc	status,2,c
 22434  003C2E  D799               	goto	i2l7909
 22435  003C30  0A01               	xorlw	1	; case 51
 22436  003C32  B4D8               	btfsc	status,2,c
 22437  003C34  D7BA               	goto	i2l7929
 22438  003C36  0A72               	xorlw	114	; case 65
 22439  003C38  B4D8               	btfsc	status,2,c
 22440  003C3A  D7CA               	goto	i2l7943
 22441  003C3C  0A03               	xorlw	3	; case 66
 22442  003C3E  B4D8               	btfsc	status,2,c
 22443  003C40  D7D0               	goto	i2l7947
 22444  003C42  0A01               	xorlw	1	; case 67
 22445  003C44  B4D8               	btfsc	status,2,c
 22446  003C46  D7D6               	goto	i2l7951
 22447  003C48  0A07               	xorlw	7	; case 68
 22448  003C4A  B4D8               	btfsc	status,2,c
 22449  003C4C  D7DC               	goto	i2l7955
 22450  003C4E  D7E4               	goto	i2l7959
 22451  003C50                     __end_of_inputHandler:
 22452                           	opt stack 0
 22453                           pclatu	equ	0xFFB
 22454                           pclath	equ	0xFFA
 22455                           tblptru	equ	0xFF8
 22456                           tblptrh	equ	0xFF7
 22457                           tblptrl	equ	0xFF6
 22458                           tablat	equ	0xFF5
 22459                           prodh	equ	0xFF4
 22460                           prodl	equ	0xFF3
 22461                           intcon	equ	0xFF2
 22462                           intcon2	equ	0xFF1
 22463                           intcon3	equ	0xFF0
 22464                           indf0	equ	0xFEF
 22465                           postinc0	equ	0xFEE
 22466                           fsr0h	equ	0xFEA
 22467                           fsr0l	equ	0xFE9
 22468                           wreg	equ	0xFE8
 22469                           postdec1	equ	0xFE5
 22470                           fsr1h	equ	0xFE2
 22471                           fsr1l	equ	0xFE1
 22472                           indf2	equ	0xFDF
 22473                           postinc2	equ	0xFDE
 22474                           postdec2	equ	0xFDD
 22475                           fsr2h	equ	0xFDA
 22476                           fsr2l	equ	0xFD9
 22477                           status	equ	0xFD8
 22478                           
 22479 ;; *************** function i2_change_state_to_menu_22 *****************
 22480 ;; Defined at:
 22481 ;;		line 501 in file "UI.c"
 22482 ;; Parameters:    Size  Location     Type
 22483 ;;		None
 22484 ;; Auto vars:     Size  Location     Type
 22485 ;;		None
 22486 ;; Return value:  Size  Location     Type
 22487 ;;                  1    wreg      void 
 22488 ;; Registers used:
 22489 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22490 ;; Tracked objects:
 22491 ;;		On entry : 0/0
 22492 ;;		On exit  : 0/0
 22493 ;;		Unchanged: 0/0
 22494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22499 ;;Total ram usage:        0 bytes
 22500 ;; Hardware stack levels used:    1
 22501 ;; Hardware stack levels required when called:    3
 22502 ;; This function calls:
 22503 ;;		i2_lcdInst
 22504 ;;		i2_printf
 22505 ;; This function is called by:
 22506 ;;		_updateMenu
 22507 ;;		_inputHandler
 22508 ;; This function uses a non-reentrant model
 22509 ;;
 22510                           
 22511                           	psect	text72
 22512  005B40                     __ptext72:
 22513                           	opt stack 0
 22514  005B40                     i2_change_state_to_menu_22:
 22515                           	opt stack 19
 22516                           
 22517                           ;UI.c: 502: cur_state = 22;
 22518                           
 22519                           ;incstack = 0
 22520  005B40  0E00               	movlw	0
 22521  005B42  0100               	movlb	0	; () banked
 22522  005B44  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22523  005B46  0E16               	movlw	22
 22524  005B48  6FE6               	movwf	_cur_state& (0+255),b
 22525                           
 22526                           ; BSR set to: 0
 22527                           ;UI.c: 504: lcdInst(0b10000000);;
 22528  005B4A  0E80               	movlw	128
 22529  005B4C  ECDF  F02F         	call	i2_lcdInst
 22530                           
 22531                           ;UI.c: 505: printf("2. SORT        <");
 22532  005B50  0ED3               	movlw	low STR_34
 22533  005B52  6E0D               	movwf	i2printf@f,c
 22534  005B54  0EFD               	movlw	high STR_34
 22535  005B56  6E0E               	movwf	i2printf@f+1,c
 22536  005B58  EC6D  F014         	call	i2_printf	;wreg free
 22537                           
 22538                           ;UI.c: 506: lcdInst(0b11000000);;
 22539  005B5C  0EC0               	movlw	192
 22540  005B5E  ECDF  F02F         	call	i2_lcdInst
 22541                           
 22542                           ;UI.c: 507: printf("3. LOGS         ");
 22543  005B62  0E18               	movlw	low STR_36
 22544  005B64  6E0D               	movwf	i2printf@f,c
 22545  005B66  0EFD               	movlw	high STR_36
 22546  005B68  6E0E               	movwf	i2printf@f+1,c
 22547  005B6A  EC6D  F014         	call	i2_printf	;wreg free
 22548  005B6E  0012               	return		;funcret
 22549  005B70                     __end_ofi2_change_state_to_menu_22:
 22550                           	opt stack 0
 22551                           pclatu	equ	0xFFB
 22552                           pclath	equ	0xFFA
 22553                           tblptru	equ	0xFF8
 22554                           tblptrh	equ	0xFF7
 22555                           tblptrl	equ	0xFF6
 22556                           tablat	equ	0xFF5
 22557                           prodh	equ	0xFF4
 22558                           prodl	equ	0xFF3
 22559                           intcon	equ	0xFF2
 22560                           intcon2	equ	0xFF1
 22561                           intcon3	equ	0xFF0
 22562                           indf0	equ	0xFEF
 22563                           postinc0	equ	0xFEE
 22564                           fsr0h	equ	0xFEA
 22565                           fsr0l	equ	0xFE9
 22566                           wreg	equ	0xFE8
 22567                           postdec1	equ	0xFE5
 22568                           fsr1h	equ	0xFE2
 22569                           fsr1l	equ	0xFE1
 22570                           indf2	equ	0xFDF
 22571                           postinc2	equ	0xFDE
 22572                           postdec2	equ	0xFDD
 22573                           fsr2h	equ	0xFDA
 22574                           fsr2l	equ	0xFD9
 22575                           status	equ	0xFD8
 22576                           
 22577 ;; *************** function i2_change_state_to_menu_12 *****************
 22578 ;; Defined at:
 22579 ;;		line 493 in file "UI.c"
 22580 ;; Parameters:    Size  Location     Type
 22581 ;;		None
 22582 ;; Auto vars:     Size  Location     Type
 22583 ;;		None
 22584 ;; Return value:  Size  Location     Type
 22585 ;;                  1    wreg      void 
 22586 ;; Registers used:
 22587 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22588 ;; Tracked objects:
 22589 ;;		On entry : 0/0
 22590 ;;		On exit  : 0/0
 22591 ;;		Unchanged: 0/0
 22592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22597 ;;Total ram usage:        0 bytes
 22598 ;; Hardware stack levels used:    1
 22599 ;; Hardware stack levels required when called:    3
 22600 ;; This function calls:
 22601 ;;		i2_lcdInst
 22602 ;;		i2_printf
 22603 ;; This function is called by:
 22604 ;;		_updateMenu
 22605 ;;		_inputHandler
 22606 ;; This function uses a non-reentrant model
 22607 ;;
 22608                           
 22609                           	psect	text73
 22610  005B70                     __ptext73:
 22611                           	opt stack 0
 22612  005B70                     i2_change_state_to_menu_12:
 22613                           	opt stack 19
 22614                           
 22615                           ;UI.c: 494: cur_state = 12;
 22616                           
 22617                           ;incstack = 0
 22618  005B70  0E00               	movlw	0
 22619  005B72  0100               	movlb	0	; () banked
 22620  005B74  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22621  005B76  0E0C               	movlw	12
 22622  005B78  6FE6               	movwf	_cur_state& (0+255),b
 22623                           
 22624                           ; BSR set to: 0
 22625                           ;UI.c: 496: lcdInst(0b10000000);;
 22626  005B7A  0E80               	movlw	128
 22627  005B7C  ECDF  F02F         	call	i2_lcdInst
 22628                           
 22629                           ;UI.c: 497: printf("1. DATE/TIME    ");
 22630  005B80  0E3A               	movlw	low STR_33
 22631  005B82  6E0D               	movwf	i2printf@f,c
 22632  005B84  0EFD               	movlw	high STR_33
 22633  005B86  6E0E               	movwf	i2printf@f+1,c
 22634  005B88  EC6D  F014         	call	i2_printf	;wreg free
 22635                           
 22636                           ;UI.c: 498: lcdInst(0b11000000);;
 22637  005B8C  0EC0               	movlw	192
 22638  005B8E  ECDF  F02F         	call	i2_lcdInst
 22639                           
 22640                           ;UI.c: 499: printf("2. SORT        <");
 22641  005B92  0ED3               	movlw	low STR_34
 22642  005B94  6E0D               	movwf	i2printf@f,c
 22643  005B96  0EFD               	movlw	high STR_34
 22644  005B98  6E0E               	movwf	i2printf@f+1,c
 22645  005B9A  EC6D  F014         	call	i2_printf	;wreg free
 22646  005B9E  0012               	return		;funcret
 22647  005BA0                     __end_ofi2_change_state_to_menu_12:
 22648                           	opt stack 0
 22649                           pclatu	equ	0xFFB
 22650                           pclath	equ	0xFFA
 22651                           tblptru	equ	0xFF8
 22652                           tblptrh	equ	0xFF7
 22653                           tblptrl	equ	0xFF6
 22654                           tablat	equ	0xFF5
 22655                           prodh	equ	0xFF4
 22656                           prodl	equ	0xFF3
 22657                           intcon	equ	0xFF2
 22658                           intcon2	equ	0xFF1
 22659                           intcon3	equ	0xFF0
 22660                           indf0	equ	0xFEF
 22661                           postinc0	equ	0xFEE
 22662                           fsr0h	equ	0xFEA
 22663                           fsr0l	equ	0xFE9
 22664                           wreg	equ	0xFE8
 22665                           postdec1	equ	0xFE5
 22666                           fsr1h	equ	0xFE2
 22667                           fsr1l	equ	0xFE1
 22668                           indf2	equ	0xFDF
 22669                           postinc2	equ	0xFDE
 22670                           postdec2	equ	0xFDD
 22671                           fsr2h	equ	0xFDA
 22672                           fsr2l	equ	0xFD9
 22673                           status	equ	0xFD8
 22674                           
 22675 ;; *************** function _change_state_to_menu_23 *****************
 22676 ;; Defined at:
 22677 ;;		line 509 in file "UI.c"
 22678 ;; Parameters:    Size  Location     Type
 22679 ;;		None
 22680 ;; Auto vars:     Size  Location     Type
 22681 ;;		None
 22682 ;; Return value:  Size  Location     Type
 22683 ;;                  1    wreg      void 
 22684 ;; Registers used:
 22685 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22686 ;; Tracked objects:
 22687 ;;		On entry : 0/0
 22688 ;;		On exit  : 0/0
 22689 ;;		Unchanged: 0/0
 22690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22695 ;;Total ram usage:        0 bytes
 22696 ;; Hardware stack levels used:    1
 22697 ;; Hardware stack levels required when called:    3
 22698 ;; This function calls:
 22699 ;;		i2_lcdInst
 22700 ;;		i2_printf
 22701 ;; This function is called by:
 22702 ;;		_updateMenu
 22703 ;;		_inputHandler
 22704 ;; This function uses a non-reentrant model
 22705 ;;
 22706                           
 22707                           	psect	text74
 22708  005BA0                     __ptext74:
 22709                           	opt stack 0
 22710  005BA0                     _change_state_to_menu_23:
 22711                           	opt stack 18
 22712                           
 22713                           ;UI.c: 510: cur_state = 23;
 22714                           
 22715                           ;incstack = 0
 22716  005BA0  0E00               	movlw	0
 22717  005BA2  0100               	movlb	0	; () banked
 22718  005BA4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22719  005BA6  0E17               	movlw	23
 22720  005BA8  6FE6               	movwf	_cur_state& (0+255),b
 22721                           
 22722                           ; BSR set to: 0
 22723                           ;UI.c: 512: lcdInst(0b10000000);;
 22724  005BAA  0E80               	movlw	128
 22725  005BAC  ECDF  F02F         	call	i2_lcdInst
 22726                           
 22727                           ;UI.c: 513: printf("2. SORT         ");
 22728  005BB0  0E29               	movlw	low STR_32
 22729  005BB2  6E0D               	movwf	i2printf@f,c
 22730  005BB4  0EFD               	movlw	high STR_32
 22731  005BB6  6E0E               	movwf	i2printf@f+1,c
 22732  005BB8  EC6D  F014         	call	i2_printf	;wreg free
 22733                           
 22734                           ;UI.c: 514: lcdInst(0b11000000);;
 22735  005BBC  0EC0               	movlw	192
 22736  005BBE  ECDF  F02F         	call	i2_lcdInst
 22737                           
 22738                           ;UI.c: 515: printf("3. LOGS        <");
 22739  005BC2  0EC2               	movlw	low STR_38
 22740  005BC4  6E0D               	movwf	i2printf@f,c
 22741  005BC6  0EFD               	movlw	high STR_38
 22742  005BC8  6E0E               	movwf	i2printf@f+1,c
 22743  005BCA  EC6D  F014         	call	i2_printf	;wreg free
 22744  005BCE  0012               	return		;funcret
 22745  005BD0                     __end_of_change_state_to_menu_23:
 22746                           	opt stack 0
 22747                           pclatu	equ	0xFFB
 22748                           pclath	equ	0xFFA
 22749                           tblptru	equ	0xFF8
 22750                           tblptrh	equ	0xFF7
 22751                           tblptrl	equ	0xFF6
 22752                           tablat	equ	0xFF5
 22753                           prodh	equ	0xFF4
 22754                           prodl	equ	0xFF3
 22755                           intcon	equ	0xFF2
 22756                           intcon2	equ	0xFF1
 22757                           intcon3	equ	0xFF0
 22758                           indf0	equ	0xFEF
 22759                           postinc0	equ	0xFEE
 22760                           fsr0h	equ	0xFEA
 22761                           fsr0l	equ	0xFE9
 22762                           wreg	equ	0xFE8
 22763                           postdec1	equ	0xFE5
 22764                           fsr1h	equ	0xFE2
 22765                           fsr1l	equ	0xFE1
 22766                           indf2	equ	0xFDF
 22767                           postinc2	equ	0xFDE
 22768                           postdec2	equ	0xFDD
 22769                           fsr2h	equ	0xFDA
 22770                           fsr2l	equ	0xFD9
 22771                           status	equ	0xFD8
 22772                           
 22773 ;; *************** function _change_state_to_menu_11 *****************
 22774 ;; Defined at:
 22775 ;;		line 485 in file "UI.c"
 22776 ;; Parameters:    Size  Location     Type
 22777 ;;		None
 22778 ;; Auto vars:     Size  Location     Type
 22779 ;;		None
 22780 ;; Return value:  Size  Location     Type
 22781 ;;                  1    wreg      void 
 22782 ;; Registers used:
 22783 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22784 ;; Tracked objects:
 22785 ;;		On entry : 0/0
 22786 ;;		On exit  : 0/0
 22787 ;;		Unchanged: 0/0
 22788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22793 ;;Total ram usage:        0 bytes
 22794 ;; Hardware stack levels used:    1
 22795 ;; Hardware stack levels required when called:    3
 22796 ;; This function calls:
 22797 ;;		i2_lcdInst
 22798 ;;		i2_printf
 22799 ;; This function is called by:
 22800 ;;		_updateMenu
 22801 ;;		_inputHandler
 22802 ;; This function uses a non-reentrant model
 22803 ;;
 22804                           
 22805                           	psect	text75
 22806  005BD0                     __ptext75:
 22807                           	opt stack 0
 22808  005BD0                     _change_state_to_menu_11:
 22809                           	opt stack 18
 22810                           
 22811                           ;UI.c: 486: cur_state = 11;
 22812                           
 22813                           ;incstack = 0
 22814  005BD0  0E00               	movlw	0
 22815  005BD2  0100               	movlb	0	; () banked
 22816  005BD4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22817  005BD6  0E0B               	movlw	11
 22818  005BD8  6FE6               	movwf	_cur_state& (0+255),b
 22819                           
 22820                           ; BSR set to: 0
 22821                           ;UI.c: 488: lcdInst(0b10000000);;
 22822  005BDA  0E80               	movlw	128
 22823  005BDC  ECDF  F02F         	call	i2_lcdInst
 22824                           
 22825                           ;UI.c: 489: printf("1. DATE/TIME   <");
 22826  005BE0  0EE4               	movlw	low STR_31
 22827  005BE2  6E0D               	movwf	i2printf@f,c
 22828  005BE4  0EFD               	movlw	high STR_31
 22829  005BE6  6E0E               	movwf	i2printf@f+1,c
 22830  005BE8  EC6D  F014         	call	i2_printf	;wreg free
 22831                           
 22832                           ;UI.c: 490: lcdInst(0b11000000);;
 22833  005BEC  0EC0               	movlw	192
 22834  005BEE  ECDF  F02F         	call	i2_lcdInst
 22835                           
 22836                           ;UI.c: 491: printf("2. SORT         ");
 22837  005BF2  0E29               	movlw	low STR_32
 22838  005BF4  6E0D               	movwf	i2printf@f,c
 22839  005BF6  0EFD               	movlw	high STR_32
 22840  005BF8  6E0E               	movwf	i2printf@f+1,c
 22841  005BFA  EC6D  F014         	call	i2_printf	;wreg free
 22842  005BFE  0012               	return		;funcret
 22843  005C00                     __end_of_change_state_to_menu_11:
 22844                           	opt stack 0
 22845                           pclatu	equ	0xFFB
 22846                           pclath	equ	0xFFA
 22847                           tblptru	equ	0xFF8
 22848                           tblptrh	equ	0xFF7
 22849                           tblptrl	equ	0xFF6
 22850                           tablat	equ	0xFF5
 22851                           prodh	equ	0xFF4
 22852                           prodl	equ	0xFF3
 22853                           intcon	equ	0xFF2
 22854                           intcon2	equ	0xFF1
 22855                           intcon3	equ	0xFF0
 22856                           indf0	equ	0xFEF
 22857                           postinc0	equ	0xFEE
 22858                           fsr0h	equ	0xFEA
 22859                           fsr0l	equ	0xFE9
 22860                           wreg	equ	0xFE8
 22861                           postdec1	equ	0xFE5
 22862                           fsr1h	equ	0xFE2
 22863                           fsr1l	equ	0xFE1
 22864                           indf2	equ	0xFDF
 22865                           postinc2	equ	0xFDE
 22866                           postdec2	equ	0xFDD
 22867                           fsr2h	equ	0xFDA
 22868                           fsr2l	equ	0xFD9
 22869                           status	equ	0xFD8
 22870                           
 22871 ;; *************** function _change_state_to_logs_34 *****************
 22872 ;; Defined at:
 22873 ;;		line 552 in file "UI.c"
 22874 ;; Parameters:    Size  Location     Type
 22875 ;;		None
 22876 ;; Auto vars:     Size  Location     Type
 22877 ;;		None
 22878 ;; Return value:  Size  Location     Type
 22879 ;;                  1    wreg      void 
 22880 ;; Registers used:
 22881 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22882 ;; Tracked objects:
 22883 ;;		On entry : 0/0
 22884 ;;		On exit  : 0/0
 22885 ;;		Unchanged: 0/0
 22886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22891 ;;Total ram usage:        0 bytes
 22892 ;; Hardware stack levels used:    1
 22893 ;; Hardware stack levels required when called:    3
 22894 ;; This function calls:
 22895 ;;		i2_lcdInst
 22896 ;;		i2_printf
 22897 ;; This function is called by:
 22898 ;;		_updateMenu
 22899 ;;		_inputHandler
 22900 ;; This function uses a non-reentrant model
 22901 ;;
 22902                           
 22903                           	psect	text76
 22904  005C00                     __ptext76:
 22905                           	opt stack 0
 22906  005C00                     _change_state_to_logs_34:
 22907                           	opt stack 18
 22908                           
 22909                           ;UI.c: 553: cur_state = 1034;
 22910                           
 22911                           ;incstack = 0
 22912  005C00  0E04               	movlw	4
 22913  005C02  0100               	movlb	0	; () banked
 22914  005C04  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22915  005C06  0E0A               	movlw	10
 22916  005C08  6FE6               	movwf	_cur_state& (0+255),b
 22917                           
 22918                           ; BSR set to: 0
 22919                           ;UI.c: 554: lcdInst(0b10000000);;
 22920  005C0A  0E80               	movlw	128
 22921  005C0C  ECDF  F02F         	call	i2_lcdInst
 22922                           
 22923                           ;UI.c: 555: printf("LOG 3           ");
 22924  005C10  0EF6               	movlw	low STR_44
 22925  005C12  6E0D               	movwf	i2printf@f,c
 22926  005C14  0EFC               	movlw	high STR_44
 22927  005C16  6E0E               	movwf	i2printf@f+1,c
 22928  005C18  EC6D  F014         	call	i2_printf	;wreg free
 22929                           
 22930                           ;UI.c: 556: lcdInst(0b11000000);;
 22931  005C1C  0EC0               	movlw	192
 22932  005C1E  ECDF  F02F         	call	i2_lcdInst
 22933                           
 22934                           ;UI.c: 557: printf("LOG 4          <");
 22935  005C22  0EB1               	movlw	low STR_50
 22936  005C24  6E0D               	movwf	i2printf@f,c
 22937  005C26  0EFD               	movlw	high STR_50
 22938  005C28  6E0E               	movwf	i2printf@f+1,c
 22939  005C2A  EC6D  F014         	call	i2_printf	;wreg free
 22940  005C2E  0012               	return		;funcret
 22941  005C30                     __end_of_change_state_to_logs_34:
 22942                           	opt stack 0
 22943                           pclatu	equ	0xFFB
 22944                           pclath	equ	0xFFA
 22945                           tblptru	equ	0xFF8
 22946                           tblptrh	equ	0xFF7
 22947                           tblptrl	equ	0xFF6
 22948                           tablat	equ	0xFF5
 22949                           prodh	equ	0xFF4
 22950                           prodl	equ	0xFF3
 22951                           intcon	equ	0xFF2
 22952                           intcon2	equ	0xFF1
 22953                           intcon3	equ	0xFF0
 22954                           indf0	equ	0xFEF
 22955                           postinc0	equ	0xFEE
 22956                           fsr0h	equ	0xFEA
 22957                           fsr0l	equ	0xFE9
 22958                           wreg	equ	0xFE8
 22959                           postdec1	equ	0xFE5
 22960                           fsr1h	equ	0xFE2
 22961                           fsr1l	equ	0xFE1
 22962                           indf2	equ	0xFDF
 22963                           postinc2	equ	0xFDE
 22964                           postdec2	equ	0xFDD
 22965                           fsr2h	equ	0xFDA
 22966                           fsr2l	equ	0xFD9
 22967                           status	equ	0xFD8
 22968                           
 22969 ;; *************** function _change_state_to_logs_33 *****************
 22970 ;; Defined at:
 22971 ;;		line 545 in file "UI.c"
 22972 ;; Parameters:    Size  Location     Type
 22973 ;;		None
 22974 ;; Auto vars:     Size  Location     Type
 22975 ;;		None
 22976 ;; Return value:  Size  Location     Type
 22977 ;;                  1    wreg      void 
 22978 ;; Registers used:
 22979 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22980 ;; Tracked objects:
 22981 ;;		On entry : 0/0
 22982 ;;		On exit  : 0/0
 22983 ;;		Unchanged: 0/0
 22984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22989 ;;Total ram usage:        0 bytes
 22990 ;; Hardware stack levels used:    1
 22991 ;; Hardware stack levels required when called:    3
 22992 ;; This function calls:
 22993 ;;		i2_lcdInst
 22994 ;;		i2_printf
 22995 ;; This function is called by:
 22996 ;;		_updateMenu
 22997 ;;		_inputHandler
 22998 ;; This function uses a non-reentrant model
 22999 ;;
 23000                           
 23001                           	psect	text77
 23002  005C30                     __ptext77:
 23003                           	opt stack 0
 23004  005C30                     _change_state_to_logs_33:
 23005                           	opt stack 18
 23006                           
 23007                           ;UI.c: 546: cur_state = 1033;
 23008                           
 23009                           ;incstack = 0
 23010  005C30  0E04               	movlw	4
 23011  005C32  0100               	movlb	0	; () banked
 23012  005C34  6FE7               	movwf	(_cur_state+1)& (0+255),b
 23013  005C36  0E09               	movlw	9
 23014  005C38  6FE6               	movwf	_cur_state& (0+255),b
 23015                           
 23016                           ; BSR set to: 0
 23017                           ;UI.c: 547: lcdInst(0b10000000);;
 23018  005C3A  0E80               	movlw	128
 23019  005C3C  ECDF  F02F         	call	i2_lcdInst
 23020                           
 23021                           ;UI.c: 548: printf("LOG 3          <");
 23022  005C40  0EA0               	movlw	low STR_46
 23023  005C42  6E0D               	movwf	i2printf@f,c
 23024  005C44  0EFD               	movlw	high STR_46
 23025  005C46  6E0E               	movwf	i2printf@f+1,c
 23026  005C48  EC6D  F014         	call	i2_printf	;wreg free
 23027                           
 23028                           ;UI.c: 549: lcdInst(0b11000000);;
 23029  005C4C  0EC0               	movlw	192
 23030  005C4E  ECDF  F02F         	call	i2_lcdInst
 23031                           
 23032                           ;UI.c: 550: printf("LOG 4           ");
 23033  005C52  0E07               	movlw	low STR_48
 23034  005C54  6E0D               	movwf	i2printf@f,c
 23035  005C56  0EFD               	movlw	high STR_48
 23036  005C58  6E0E               	movwf	i2printf@f+1,c
 23037  005C5A  EC6D  F014         	call	i2_printf	;wreg free
 23038  005C5E  0012               	return		;funcret
 23039  005C60                     __end_of_change_state_to_logs_33:
 23040                           	opt stack 0
 23041                           pclatu	equ	0xFFB
 23042                           pclath	equ	0xFFA
 23043                           tblptru	equ	0xFF8
 23044                           tblptrh	equ	0xFF7
 23045                           tblptrl	equ	0xFF6
 23046                           tablat	equ	0xFF5
 23047                           prodh	equ	0xFF4
 23048                           prodl	equ	0xFF3
 23049                           intcon	equ	0xFF2
 23050                           intcon2	equ	0xFF1
 23051                           intcon3	equ	0xFF0
 23052                           indf0	equ	0xFEF
 23053                           postinc0	equ	0xFEE
 23054                           fsr0h	equ	0xFEA
 23055                           fsr0l	equ	0xFE9
 23056                           wreg	equ	0xFE8
 23057                           postdec1	equ	0xFE5
 23058                           fsr1h	equ	0xFE2
 23059                           fsr1l	equ	0xFE1
 23060                           indf2	equ	0xFDF
 23061                           postinc2	equ	0xFDE
 23062                           postdec2	equ	0xFDD
 23063                           fsr2h	equ	0xFDA
 23064                           fsr2l	equ	0xFD9
 23065                           status	equ	0xFD8
 23066                           
 23067 ;; *************** function _change_state_to_logs_23 *****************
 23068 ;; Defined at:
 23069 ;;		line 538 in file "UI.c"
 23070 ;; Parameters:    Size  Location     Type
 23071 ;;		None
 23072 ;; Auto vars:     Size  Location     Type
 23073 ;;		None
 23074 ;; Return value:  Size  Location     Type
 23075 ;;                  1    wreg      void 
 23076 ;; Registers used:
 23077 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23078 ;; Tracked objects:
 23079 ;;		On entry : 0/0
 23080 ;;		On exit  : 0/0
 23081 ;;		Unchanged: 0/0
 23082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23087 ;;Total ram usage:        0 bytes
 23088 ;; Hardware stack levels used:    1
 23089 ;; Hardware stack levels required when called:    3
 23090 ;; This function calls:
 23091 ;;		i2_lcdInst
 23092 ;;		i2_printf
 23093 ;; This function is called by:
 23094 ;;		_updateMenu
 23095 ;;		_inputHandler
 23096 ;; This function uses a non-reentrant model
 23097 ;;
 23098                           
 23099                           	psect	text78
 23100  005D1E                     __ptext78:
 23101                           	opt stack 0
 23102  005D1E                     _change_state_to_logs_23:
 23103                           	opt stack 18
 23104                           
 23105                           ;UI.c: 539: cur_state = 1023;
 23106                           
 23107                           ;incstack = 0
 23108  005D1E  0E03               	movlw	3
 23109  005D20  0100               	movlb	0	; () banked
 23110  005D22  6FE7               	movwf	(_cur_state+1)& (0+255),b
 23111  005D24  69E6               	setf	_cur_state& (0+255),b
 23112                           
 23113                           ; BSR set to: 0
 23114                           ;UI.c: 540: lcdInst(0b10000000);;
 23115  005D26  0E80               	movlw	128
 23116  005D28  ECDF  F02F         	call	i2_lcdInst
 23117                           
 23118                           ;UI.c: 541: printf("LOG 2           ");
 23119  005D2C  0EE5               	movlw	low STR_40
 23120  005D2E  6E0D               	movwf	i2printf@f,c
 23121  005D30  0EFC               	movlw	high STR_40
 23122  005D32  6E0E               	movwf	i2printf@f+1,c
 23123  005D34  EC6D  F014         	call	i2_printf	;wreg free
 23124                           
 23125                           ;UI.c: 542: lcdInst(0b11000000);;
 23126  005D38  0EC0               	movlw	192
 23127  005D3A  ECDF  F02F         	call	i2_lcdInst
 23128                           
 23129                           ;UI.c: 543: printf("LOG 3          <");
 23130  005D3E  0EA0               	movlw	low STR_46
 23131  005D40  6E0D               	movwf	i2printf@f,c
 23132  005D42  0EFD               	movlw	high STR_46
 23133  005D44  6E0E               	movwf	i2printf@f+1,c
 23134  005D46  EC6D  F014         	call	i2_printf	;wreg free
 23135  005D4A  0012               	return		;funcret
 23136  005D4C                     __end_of_change_state_to_logs_23:
 23137                           	opt stack 0
 23138                           pclatu	equ	0xFFB
 23139                           pclath	equ	0xFFA
 23140                           tblptru	equ	0xFF8
 23141                           tblptrh	equ	0xFF7
 23142                           tblptrl	equ	0xFF6
 23143                           tablat	equ	0xFF5
 23144                           prodh	equ	0xFF4
 23145                           prodl	equ	0xFF3
 23146                           intcon	equ	0xFF2
 23147                           intcon2	equ	0xFF1
 23148                           intcon3	equ	0xFF0
 23149                           indf0	equ	0xFEF
 23150                           postinc0	equ	0xFEE
 23151                           fsr0h	equ	0xFEA
 23152                           fsr0l	equ	0xFE9
 23153                           wreg	equ	0xFE8
 23154                           postdec1	equ	0xFE5
 23155                           fsr1h	equ	0xFE2
 23156                           fsr1l	equ	0xFE1
 23157                           indf2	equ	0xFDF
 23158                           postinc2	equ	0xFDE
 23159                           postdec2	equ	0xFDD
 23160                           fsr2h	equ	0xFDA
 23161                           fsr2l	equ	0xFD9
 23162                           status	equ	0xFD8
 23163                           
 23164 ;; *************** function _change_state_to_logs_22 *****************
 23165 ;; Defined at:
 23166 ;;		line 531 in file "UI.c"
 23167 ;; Parameters:    Size  Location     Type
 23168 ;;		None
 23169 ;; Auto vars:     Size  Location     Type
 23170 ;;		None
 23171 ;; Return value:  Size  Location     Type
 23172 ;;                  1    wreg      void 
 23173 ;; Registers used:
 23174 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23175 ;; Tracked objects:
 23176 ;;		On entry : 0/0
 23177 ;;		On exit  : 0/0
 23178 ;;		Unchanged: 0/0
 23179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23183 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23184 ;;Total ram usage:        0 bytes
 23185 ;; Hardware stack levels used:    1
 23186 ;; Hardware stack levels required when called:    3
 23187 ;; This function calls:
 23188 ;;		i2_lcdInst
 23189 ;;		i2_printf
 23190 ;; This function is called by:
 23191 ;;		_updateMenu
 23192 ;;		_inputHandler
 23193 ;; This function uses a non-reentrant model
 23194 ;;
 23195                           
 23196                           	psect	text79
 23197  005C60                     __ptext79:
 23198                           	opt stack 0
 23199  005C60                     _change_state_to_logs_22:
 23200                           	opt stack 18
 23201                           
 23202                           ;UI.c: 532: cur_state = 1022;
 23203                           
 23204                           ;incstack = 0
 23205  005C60  0E03               	movlw	3
 23206  005C62  0100               	movlb	0	; () banked
 23207  005C64  6FE7               	movwf	(_cur_state+1)& (0+255),b
 23208  005C66  0EFE               	movlw	254
 23209  005C68  6FE6               	movwf	_cur_state& (0+255),b
 23210                           
 23211                           ; BSR set to: 0
 23212                           ;UI.c: 533: lcdInst(0b10000000);;
 23213  005C6A  0E80               	movlw	128
 23214  005C6C  ECDF  F02F         	call	i2_lcdInst
 23215                           
 23216                           ;UI.c: 534: printf("LOG 2          <");
 23217  005C70  0E8F               	movlw	low STR_42
 23218  005C72  6E0D               	movwf	i2printf@f,c
 23219  005C74  0EFD               	movlw	high STR_42
 23220  005C76  6E0E               	movwf	i2printf@f+1,c
 23221  005C78  EC6D  F014         	call	i2_printf	;wreg free
 23222                           
 23223                           ;UI.c: 535: lcdInst(0b11000000);;
 23224  005C7C  0EC0               	movlw	192
 23225  005C7E  ECDF  F02F         	call	i2_lcdInst
 23226                           
 23227                           ;UI.c: 536: printf("LOG 3           ");
 23228  005C82  0EF6               	movlw	low STR_44
 23229  005C84  6E0D               	movwf	i2printf@f,c
 23230  005C86  0EFC               	movlw	high STR_44
 23231  005C88  6E0E               	movwf	i2printf@f+1,c
 23232  005C8A  EC6D  F014         	call	i2_printf	;wreg free
 23233  005C8E  0012               	return		;funcret
 23234  005C90                     __end_of_change_state_to_logs_22:
 23235                           	opt stack 0
 23236                           pclatu	equ	0xFFB
 23237                           pclath	equ	0xFFA
 23238                           tblptru	equ	0xFF8
 23239                           tblptrh	equ	0xFF7
 23240                           tblptrl	equ	0xFF6
 23241                           tablat	equ	0xFF5
 23242                           prodh	equ	0xFF4
 23243                           prodl	equ	0xFF3
 23244                           intcon	equ	0xFF2
 23245                           intcon2	equ	0xFF1
 23246                           intcon3	equ	0xFF0
 23247                           indf0	equ	0xFEF
 23248                           postinc0	equ	0xFEE
 23249                           fsr0h	equ	0xFEA
 23250                           fsr0l	equ	0xFE9
 23251                           wreg	equ	0xFE8
 23252                           postdec1	equ	0xFE5
 23253                           fsr1h	equ	0xFE2
 23254                           fsr1l	equ	0xFE1
 23255                           indf2	equ	0xFDF
 23256                           postinc2	equ	0xFDE
 23257                           postdec2	equ	0xFDD
 23258                           fsr2h	equ	0xFDA
 23259                           fsr2l	equ	0xFD9
 23260                           status	equ	0xFD8
 23261                           
 23262 ;; *************** function _change_state_to_logs_12 *****************
 23263 ;; Defined at:
 23264 ;;		line 524 in file "UI.c"
 23265 ;; Parameters:    Size  Location     Type
 23266 ;;		None
 23267 ;; Auto vars:     Size  Location     Type
 23268 ;;		None
 23269 ;; Return value:  Size  Location     Type
 23270 ;;                  1    wreg      void 
 23271 ;; Registers used:
 23272 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23273 ;; Tracked objects:
 23274 ;;		On entry : 0/0
 23275 ;;		On exit  : 0/0
 23276 ;;		Unchanged: 0/0
 23277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23281 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23282 ;;Total ram usage:        0 bytes
 23283 ;; Hardware stack levels used:    1
 23284 ;; Hardware stack levels required when called:    3
 23285 ;; This function calls:
 23286 ;;		i2_lcdInst
 23287 ;;		i2_printf
 23288 ;; This function is called by:
 23289 ;;		_updateMenu
 23290 ;;		_inputHandler
 23291 ;; This function uses a non-reentrant model
 23292 ;;
 23293                           
 23294                           	psect	text80
 23295  005C90                     __ptext80:
 23296                           	opt stack 0
 23297  005C90                     _change_state_to_logs_12:
 23298                           	opt stack 18
 23299                           
 23300                           ;UI.c: 525: cur_state = 1012;
 23301                           
 23302                           ;incstack = 0
 23303  005C90  0E03               	movlw	3
 23304  005C92  0100               	movlb	0	; () banked
 23305  005C94  6FE7               	movwf	(_cur_state+1)& (0+255),b
 23306  005C96  0EF4               	movlw	244
 23307  005C98  6FE6               	movwf	_cur_state& (0+255),b
 23308                           
 23309                           ; BSR set to: 0
 23310                           ;UI.c: 526: lcdInst(0b10000000);;
 23311  005C9A  0E80               	movlw	128
 23312  005C9C  ECDF  F02F         	call	i2_lcdInst
 23313                           
 23314                           ;UI.c: 527: printf("LOG 1           ");
 23315  005CA0  0ED4               	movlw	low STR_41
 23316  005CA2  6E0D               	movwf	i2printf@f,c
 23317  005CA4  0EFC               	movlw	high STR_41
 23318  005CA6  6E0E               	movwf	i2printf@f+1,c
 23319  005CA8  EC6D  F014         	call	i2_printf	;wreg free
 23320                           
 23321                           ;UI.c: 528: lcdInst(0b11000000);;
 23322  005CAC  0EC0               	movlw	192
 23323  005CAE  ECDF  F02F         	call	i2_lcdInst
 23324                           
 23325                           ;UI.c: 529: printf("LOG 2          <");
 23326  005CB2  0E8F               	movlw	low STR_42
 23327  005CB4  6E0D               	movwf	i2printf@f,c
 23328  005CB6  0EFD               	movlw	high STR_42
 23329  005CB8  6E0E               	movwf	i2printf@f+1,c
 23330  005CBA  EC6D  F014         	call	i2_printf	;wreg free
 23331  005CBE  0012               	return		;funcret
 23332  005CC0                     __end_of_change_state_to_logs_12:
 23333                           	opt stack 0
 23334                           pclatu	equ	0xFFB
 23335                           pclath	equ	0xFFA
 23336                           tblptru	equ	0xFF8
 23337                           tblptrh	equ	0xFF7
 23338                           tblptrl	equ	0xFF6
 23339                           tablat	equ	0xFF5
 23340                           prodh	equ	0xFF4
 23341                           prodl	equ	0xFF3
 23342                           intcon	equ	0xFF2
 23343                           intcon2	equ	0xFF1
 23344                           intcon3	equ	0xFF0
 23345                           indf0	equ	0xFEF
 23346                           postinc0	equ	0xFEE
 23347                           fsr0h	equ	0xFEA
 23348                           fsr0l	equ	0xFE9
 23349                           wreg	equ	0xFE8
 23350                           postdec1	equ	0xFE5
 23351                           fsr1h	equ	0xFE2
 23352                           fsr1l	equ	0xFE1
 23353                           indf2	equ	0xFDF
 23354                           postinc2	equ	0xFDE
 23355                           postdec2	equ	0xFDD
 23356                           fsr2h	equ	0xFDA
 23357                           fsr2l	equ	0xFD9
 23358                           status	equ	0xFD8
 23359                           
 23360 ;; *************** function _change_state_to_logs_11 *****************
 23361 ;; Defined at:
 23362 ;;		line 517 in file "UI.c"
 23363 ;; Parameters:    Size  Location     Type
 23364 ;;		None
 23365 ;; Auto vars:     Size  Location     Type
 23366 ;;		None
 23367 ;; Return value:  Size  Location     Type
 23368 ;;                  1    wreg      void 
 23369 ;; Registers used:
 23370 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23371 ;; Tracked objects:
 23372 ;;		On entry : 0/0
 23373 ;;		On exit  : 0/0
 23374 ;;		Unchanged: 0/0
 23375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23379 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23380 ;;Total ram usage:        0 bytes
 23381 ;; Hardware stack levels used:    1
 23382 ;; Hardware stack levels required when called:    3
 23383 ;; This function calls:
 23384 ;;		i2_lcdInst
 23385 ;;		i2_printf
 23386 ;; This function is called by:
 23387 ;;		_updateMenu
 23388 ;;		_inputHandler
 23389 ;; This function uses a non-reentrant model
 23390 ;;
 23391                           
 23392                           	psect	text81
 23393  005CC0                     __ptext81:
 23394                           	opt stack 0
 23395  005CC0                     _change_state_to_logs_11:
 23396                           	opt stack 18
 23397                           
 23398                           ;UI.c: 518: cur_state = 1011;
 23399                           
 23400                           ;incstack = 0
 23401  005CC0  0E03               	movlw	3
 23402  005CC2  0100               	movlb	0	; () banked
 23403  005CC4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 23404  005CC6  0EF3               	movlw	243
 23405  005CC8  6FE6               	movwf	_cur_state& (0+255),b
 23406                           
 23407                           ; BSR set to: 0
 23408                           ;UI.c: 519: lcdInst(0b10000000);;
 23409  005CCA  0E80               	movlw	128
 23410  005CCC  ECDF  F02F         	call	i2_lcdInst
 23411                           
 23412                           ;UI.c: 520: printf("LOG 1          <");
 23413  005CD0  0E7E               	movlw	low STR_39
 23414  005CD2  6E0D               	movwf	i2printf@f,c
 23415  005CD4  0EFD               	movlw	high STR_39
 23416  005CD6  6E0E               	movwf	i2printf@f+1,c
 23417  005CD8  EC6D  F014         	call	i2_printf	;wreg free
 23418                           
 23419                           ;UI.c: 521: lcdInst(0b11000000);;
 23420  005CDC  0EC0               	movlw	192
 23421  005CDE  ECDF  F02F         	call	i2_lcdInst
 23422                           
 23423                           ;UI.c: 522: printf("LOG 2           ");
 23424  005CE2  0EE5               	movlw	low STR_40
 23425  005CE4  6E0D               	movwf	i2printf@f,c
 23426  005CE6  0EFC               	movlw	high STR_40
 23427  005CE8  6E0E               	movwf	i2printf@f+1,c
 23428  005CEA  EC6D  F014         	call	i2_printf	;wreg free
 23429  005CEE  0012               	return		;funcret
 23430  005CF0                     __end_of_change_state_to_logs_11:
 23431                           	opt stack 0
 23432                           pclatu	equ	0xFFB
 23433                           pclath	equ	0xFFA
 23434                           tblptru	equ	0xFF8
 23435                           tblptrh	equ	0xFF7
 23436                           tblptrl	equ	0xFF6
 23437                           tablat	equ	0xFF5
 23438                           prodh	equ	0xFF4
 23439                           prodl	equ	0xFF3
 23440                           intcon	equ	0xFF2
 23441                           intcon2	equ	0xFF1
 23442                           intcon3	equ	0xFF0
 23443                           indf0	equ	0xFEF
 23444                           postinc0	equ	0xFEE
 23445                           fsr0h	equ	0xFEA
 23446                           fsr0l	equ	0xFE9
 23447                           wreg	equ	0xFE8
 23448                           postdec1	equ	0xFE5
 23449                           fsr1h	equ	0xFE2
 23450                           fsr1l	equ	0xFE1
 23451                           indf2	equ	0xFDF
 23452                           postinc2	equ	0xFDE
 23453                           postdec2	equ	0xFDD
 23454                           fsr2h	equ	0xFDA
 23455                           fsr2l	equ	0xFD9
 23456                           status	equ	0xFD8
 23457                           
 23458 ;; *************** function _dispLogs *****************
 23459 ;; Defined at:
 23460 ;;		line 470 in file "UI.c"
 23461 ;; Parameters:    Size  Location     Type
 23462 ;;  myLog           2   17[COMRAM] int 
 23463 ;; Auto vars:     Size  Location     Type
 23464 ;;		None
 23465 ;; Return value:  Size  Location     Type
 23466 ;;                  1    wreg      void 
 23467 ;; Registers used:
 23468 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23469 ;; Tracked objects:
 23470 ;;		On entry : 0/0
 23471 ;;		On exit  : 0/0
 23472 ;;		Unchanged: 0/0
 23473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23474 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23477 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23478 ;;Total ram usage:        2 bytes
 23479 ;; Hardware stack levels used:    1
 23480 ;; Hardware stack levels required when called:    2
 23481 ;; This function calls:
 23482 ;;		_retrieveLog
 23483 ;; This function is called by:
 23484 ;;		_updateMenu
 23485 ;; This function uses a non-reentrant model
 23486 ;;
 23487                           
 23488                           	psect	text82
 23489  005E6A                     __ptext82:
 23490                           	opt stack 0
 23491  005E6A                     _dispLogs:
 23492                           	opt stack 20
 23493                           
 23494                           ;UI.c: 471: logstate = 1;
 23495                           
 23496                           ;incstack = 0
 23497  005E6A  0E00               	movlw	0
 23498  005E6C  0100               	movlb	0	; () banked
 23499  005E6E  6FF9               	movwf	(_logstate+1)& (0+255),b
 23500  005E70  0E01               	movlw	1
 23501  005E72  6FF8               	movwf	_logstate& (0+255),b
 23502                           
 23503                           ; BSR set to: 0
 23504                           ;UI.c: 472: log = myLog;
 23505  005E74  C012  F0EE         	movff	dispLogs@myLog,_log
 23506  005E78  C013  F0EF         	movff	dispLogs@myLog+1,_log+1
 23507                           
 23508                           ; BSR set to: 0
 23509                           ;UI.c: 473: retrieveLog(myLog - 1);
 23510  005E7C  0EFF               	movlw	255
 23511  005E7E  2412               	addwf	dispLogs@myLog,w,c
 23512  005E80  6E07               	movwf	retrieveLog@logNum,c
 23513  005E82  0EFF               	movlw	255
 23514  005E84  2013               	addwfc	dispLogs@myLog+1,w,c
 23515  005E86  6E08               	movwf	retrieveLog@logNum+1,c
 23516  005E88  EC86  F021         	call	_retrieveLog	;wreg free
 23517  005E8C  0012               	return		;funcret
 23518  005E8E                     __end_of_dispLogs:
 23519                           	opt stack 0
 23520                           pclatu	equ	0xFFB
 23521                           pclath	equ	0xFFA
 23522                           tblptru	equ	0xFF8
 23523                           tblptrh	equ	0xFF7
 23524                           tblptrl	equ	0xFF6
 23525                           tablat	equ	0xFF5
 23526                           prodh	equ	0xFF4
 23527                           prodl	equ	0xFF3
 23528                           intcon	equ	0xFF2
 23529                           intcon2	equ	0xFF1
 23530                           intcon3	equ	0xFF0
 23531                           indf0	equ	0xFEF
 23532                           postinc0	equ	0xFEE
 23533                           fsr0h	equ	0xFEA
 23534                           fsr0l	equ	0xFE9
 23535                           wreg	equ	0xFE8
 23536                           postdec1	equ	0xFE5
 23537                           fsr1h	equ	0xFE2
 23538                           fsr1l	equ	0xFE1
 23539                           indf2	equ	0xFDF
 23540                           postinc2	equ	0xFDE
 23541                           postdec2	equ	0xFDD
 23542                           fsr2h	equ	0xFDA
 23543                           fsr2l	equ	0xFD9
 23544                           status	equ	0xFD8
 23545                           
 23546 ;; *************** function _retrieveLog *****************
 23547 ;; Defined at:
 23548 ;;		line 138 in file "EEPROM.c"
 23549 ;; Parameters:    Size  Location     Type
 23550 ;;  logNum          2    6[COMRAM] int 
 23551 ;; Auto vars:     Size  Location     Type
 23552 ;;  i               2   13[COMRAM] int 
 23553 ;;  addr            2   15[COMRAM] unsigned short 
 23554 ;;  byte3           1   12[COMRAM] unsigned char 
 23555 ;;  byte2           1   11[COMRAM] unsigned char 
 23556 ;;  byte1           1   10[COMRAM] unsigned char 
 23557 ;; Return value:  Size  Location     Type
 23558 ;;                  1    wreg      void 
 23559 ;; Registers used:
 23560 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23561 ;; Tracked objects:
 23562 ;;		On entry : 0/0
 23563 ;;		On exit  : 0/0
 23564 ;;		Unchanged: 0/0
 23565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23566 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23567 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23568 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23569 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23570 ;;Total ram usage:       11 bytes
 23571 ;; Hardware stack levels used:    1
 23572 ;; Hardware stack levels required when called:    1
 23573 ;; This function calls:
 23574 ;;		i2_EEPROM_read
 23575 ;;		i2___wmul
 23576 ;; This function is called by:
 23577 ;;		_dispLogs
 23578 ;; This function uses a non-reentrant model
 23579 ;;
 23580                           
 23581                           	psect	text83
 23582  00430C                     __ptext83:
 23583                           	opt stack 0
 23584  00430C                     _retrieveLog:
 23585                           	opt stack 20
 23586                           
 23587                           ;EEPROM.c: 144: unsigned short addr = 1 + logNum * 11;
 23588                           
 23589                           ;incstack = 0
 23590  00430C  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 23591  004310  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 23592  004314  0E00               	movlw	0
 23593  004316  6E04               	movwf	i2___wmul@multiplicand+1,c
 23594  004318  0E0B               	movlw	11
 23595  00431A  6E03               	movwf	i2___wmul@multiplicand,c
 23596  00431C  EC0F  F02F         	call	i2___wmul	;wreg free
 23597  004320  0E01               	movlw	1
 23598  004322  2401               	addwf	?i2___wmul,w,c
 23599  004324  6E10               	movwf	retrieveLog@addr,c
 23600  004326  0E00               	movlw	0
 23601  004328  2002               	addwfc	?i2___wmul+1,w,c
 23602  00432A  6E11               	movwf	retrieveLog@addr+1,c
 23603                           
 23604                           ;EEPROM.c: 147: unsigned char byte1 = EEPROM_read(addr);
 23605  00432C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23606  004330  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23607  004334  ECAB  F02F         	call	i2_EEPROM_read	;wreg free
 23608  004338  6E0B               	movwf	retrieveLog@byte1,c
 23609                           
 23610                           ;EEPROM.c: 148: log_completion = (int)(byte1 & 0b10000000);
 23611  00433A  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23612  00433E  0E80               	movlw	128
 23613  004340  1609               	andwf	??_retrieveLog,f,c
 23614  004342  5009               	movf	??_retrieveLog,w,c
 23615  004344  0100               	movlb	0	; () banked
 23616  004346  6FF0               	movwf	_log_completion& (0+255),b
 23617  004348  6BF1               	clrf	(_log_completion+1)& (0+255),b
 23618                           
 23619                           ; BSR set to: 0
 23620                           ;EEPROM.c: 149: log_count_total = (int)(byte1 & 0b00001111);
 23621  00434A  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23622  00434E  0E0F               	movlw	15
 23623  004350  1609               	andwf	??_retrieveLog,f,c
 23624  004352  5009               	movf	??_retrieveLog,w,c
 23625  004354  0101               	movlb	1	; () banked
 23626  004356  6F45               	movwf	_log_count_total& (0+255),b
 23627  004358  6B46               	clrf	(_log_count_total+1)& (0+255),b
 23628                           
 23629                           ; BSR set to: 1
 23630                           ;EEPROM.c: 150: addr++;
 23631  00435A  4A10               	infsnz	retrieveLog@addr,f,c
 23632  00435C  2A11               	incf	retrieveLog@addr+1,f,c
 23633                           
 23634                           ; BSR set to: 1
 23635                           ;EEPROM.c: 153: unsigned char byte2 = EEPROM_read(addr);
 23636  00435E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23637  004362  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23638  004366  ECAB  F02F         	call	i2_EEPROM_read	;wreg free
 23639  00436A  6E0C               	movwf	retrieveLog@byte2,c
 23640                           
 23641                           ;EEPROM.c: 154: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 23642  00436C  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23643  004370  3A09               	swapf	??_retrieveLog,f,c
 23644  004372  0E0F               	movlw	15
 23645  004374  1609               	andwf	??_retrieveLog,f,c
 23646  004376  0E0F               	movlw	15
 23647  004378  1609               	andwf	??_retrieveLog,f,c
 23648  00437A  5009               	movf	??_retrieveLog,w,c
 23649  00437C  0100               	movlb	0	; () banked
 23650  00437E  6FF2               	movwf	_log_count_pop_no_tab& (0+255),b
 23651  004380  6BF3               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 23652                           
 23653                           ; BSR set to: 0
 23654                           ;EEPROM.c: 155: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 23655  004382  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23656  004386  0E0F               	movlw	15
 23657  004388  1609               	andwf	??_retrieveLog,f,c
 23658  00438A  5009               	movf	??_retrieveLog,w,c
 23659  00438C  0100               	movlb	0	; () banked
 23660  00438E  6FF4               	movwf	_log_count_pop_w_tab& (0+255),b
 23661  004390  6BF5               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 23662                           
 23663                           ; BSR set to: 0
 23664                           ;EEPROM.c: 156: addr++;
 23665  004392  4A10               	infsnz	retrieveLog@addr,f,c
 23666  004394  2A11               	incf	retrieveLog@addr+1,f,c
 23667                           
 23668                           ; BSR set to: 0
 23669                           ;EEPROM.c: 157: unsigned char byte3 = EEPROM_read(addr);
 23670  004396  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23671  00439A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23672  00439E  ECAB  F02F         	call	i2_EEPROM_read	;wreg free
 23673  0043A2  6E0D               	movwf	retrieveLog@byte3,c
 23674                           
 23675                           ;EEPROM.c: 158: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 23676  0043A4  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23677  0043A8  3A09               	swapf	??_retrieveLog,f,c
 23678  0043AA  0E0F               	movlw	15
 23679  0043AC  1609               	andwf	??_retrieveLog,f,c
 23680  0043AE  0E0F               	movlw	15
 23681  0043B0  1609               	andwf	??_retrieveLog,f,c
 23682  0043B2  5009               	movf	??_retrieveLog,w,c
 23683  0043B4  0101               	movlb	1	; () banked
 23684  0043B6  6F43               	movwf	_log_count_can_w_lab& (0+255),b
 23685  0043B8  6B44               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 23686                           
 23687                           ; BSR set to: 1
 23688                           ;EEPROM.c: 159: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 23689  0043BA  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23690  0043BE  0E0F               	movlw	15
 23691  0043C0  1609               	andwf	??_retrieveLog,f,c
 23692  0043C2  5009               	movf	??_retrieveLog,w,c
 23693  0043C4  0101               	movlb	1	; () banked
 23694  0043C6  6F41               	movwf	_log_count_can_no_lab& (0+255),b
 23695  0043C8  6B42               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 23696                           
 23697                           ; BSR set to: 1
 23698                           ;EEPROM.c: 160: addr++;
 23699  0043CA  4A10               	infsnz	retrieveLog@addr,f,c
 23700  0043CC  2A11               	incf	retrieveLog@addr+1,f,c
 23701                           
 23702                           ; BSR set to: 1
 23703                           ;EEPROM.c: 163: for(int i = 0; i < 7; i++){
 23704  0043CE  0E00               	movlw	0
 23705  0043D0  6E0F               	movwf	retrieveLog@i+1,c
 23706  0043D2  0E00               	movlw	0
 23707  0043D4  6E0E               	movwf	retrieveLog@i,c
 23708  0043D6                     i2l7479:
 23709                           
 23710                           ; BSR set to: 1
 23711  0043D6  BE0F               	btfsc	retrieveLog@i+1,7,c
 23712  0043D8  D006               	goto	i2l7483
 23713  0043DA  500F               	movf	retrieveLog@i+1,w,c
 23714  0043DC  E11E               	bnz	i2l7491
 23715  0043DE  0E07               	movlw	7
 23716  0043E0  5C0E               	subwf	retrieveLog@i,w,c
 23717  0043E2  B0D8               	btfsc	status,0,c
 23718  0043E4  D01A               	goto	i2l7491
 23719  0043E6                     i2l7483:
 23720                           
 23721                           ;EEPROM.c: 164: log_startTime[i] = (int)EEPROM_read(addr);
 23722  0043E6  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23723  0043EA  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23724  0043EE  ECAB  F02F         	call	i2_EEPROM_read	;wreg free
 23725  0043F2  6E09               	movwf	??_retrieveLog& (0+255),c
 23726  0043F4  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 23727  0043F6  90D8               	bcf	status,0,c
 23728  0043F8  340E               	rlcf	retrieveLog@i,w,c
 23729  0043FA  6ED9               	movwf	fsr2l,c
 23730  0043FC  340F               	rlcf	retrieveLog@i+1,w,c
 23731  0043FE  6EDA               	movwf	fsr2h,c
 23732  004400  0E00               	movlw	low _log_startTime
 23733  004402  26D9               	addwf	fsr2l,f,c
 23734  004404  0E01               	movlw	high _log_startTime
 23735  004406  22DA               	addwfc	fsr2h,f,c
 23736  004408  C009  FFDE         	movff	??_retrieveLog,postinc2
 23737  00440C  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 23738                           
 23739                           ;EEPROM.c: 165: addr++;
 23740  004410  4A10               	infsnz	retrieveLog@addr,f,c
 23741  004412  2A11               	incf	retrieveLog@addr+1,f,c
 23742  004414  4A0E               	infsnz	retrieveLog@i,f,c
 23743  004416  2A0F               	incf	retrieveLog@i+1,f,c
 23744  004418  D7DE               	goto	i2l7479
 23745  00441A                     i2l7491:
 23746                           
 23747                           ;EEPROM.c: 166: }
 23748                           ;EEPROM.c: 169: log_total_time = (int)EEPROM_read(addr);
 23749  00441A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23750  00441E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23751  004422  ECAB  F02F         	call	i2_EEPROM_read	;wreg free
 23752  004426  6E09               	movwf	??_retrieveLog& (0+255),c
 23753  004428  5009               	movf	??_retrieveLog,w,c
 23754  00442A  0100               	movlb	0	; () banked
 23755  00442C  6FF6               	movwf	_log_total_time& (0+255),b
 23756  00442E  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 23757                           
 23758                           ; BSR set to: 0
 23759  004430  0012               	return		;funcret
 23760  004432                     __end_of_retrieveLog:
 23761                           	opt stack 0
 23762                           pclatu	equ	0xFFB
 23763                           pclath	equ	0xFFA
 23764                           tblptru	equ	0xFF8
 23765                           tblptrh	equ	0xFF7
 23766                           tblptrl	equ	0xFF6
 23767                           tablat	equ	0xFF5
 23768                           prodh	equ	0xFF4
 23769                           prodl	equ	0xFF3
 23770                           intcon	equ	0xFF2
 23771                           intcon2	equ	0xFF1
 23772                           intcon3	equ	0xFF0
 23773                           indf0	equ	0xFEF
 23774                           postinc0	equ	0xFEE
 23775                           fsr0h	equ	0xFEA
 23776                           fsr0l	equ	0xFE9
 23777                           wreg	equ	0xFE8
 23778                           postdec1	equ	0xFE5
 23779                           fsr1h	equ	0xFE2
 23780                           fsr1l	equ	0xFE1
 23781                           indf2	equ	0xFDF
 23782                           postinc2	equ	0xFDE
 23783                           postdec2	equ	0xFDD
 23784                           fsr2h	equ	0xFDA
 23785                           fsr2l	equ	0xFD9
 23786                           status	equ	0xFD8
 23787                           
 23788 ;; *************** function i2_EEPROM_read *****************
 23789 ;; Defined at:
 23790 ;;		line 72 in file "EEPROM.c"
 23791 ;; Parameters:    Size  Location     Type
 23792 ;;  address         2    0[COMRAM] unsigned short 
 23793 ;; Auto vars:     Size  Location     Type
 23794 ;;		None
 23795 ;; Return value:  Size  Location     Type
 23796 ;;                  1    wreg      unsigned char 
 23797 ;; Registers used:
 23798 ;;		wreg, status,2
 23799 ;; Tracked objects:
 23800 ;;		On entry : 0/0
 23801 ;;		On exit  : 0/0
 23802 ;;		Unchanged: 0/0
 23803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23804 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23807 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23808 ;;Total ram usage:        2 bytes
 23809 ;; Hardware stack levels used:    1
 23810 ;; This function calls:
 23811 ;;		Nothing
 23812 ;; This function is called by:
 23813 ;;		_retrieveLog
 23814 ;; This function uses a non-reentrant model
 23815 ;;
 23816                           
 23817                           	psect	text84
 23818  005F56                     __ptext84:
 23819                           	opt stack 0
 23820  005F56                     i2_EEPROM_read:
 23821                           	opt stack 20
 23822                           
 23823                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
 23824                           
 23825                           ; BSR set to: 0
 23826                           ;incstack = 0
 23827  005F56  5002               	movf	i2EEPROM_read@address+1,w,c
 23828  005F58  6EAA               	movwf	4010,c	;volatile
 23829                           
 23830                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
 23831  005F5A  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 23832                           
 23833                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
 23834  005F5E  9EA6               	bcf	4006,7,c	;volatile
 23835                           
 23836                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
 23837  005F60  9CA6               	bcf	4006,6,c	;volatile
 23838                           
 23839                           ;EEPROM.c: 79: EECON1bits.RD = 1;
 23840  005F62  80A6               	bsf	4006,0,c	;volatile
 23841  005F64                     i2l1163:
 23842  005F64  B0A6               	btfsc	4006,0,c	;volatile
 23843  005F66  D7FE               	goto	i2l1163
 23844                           
 23845                           ;EEPROM.c: 85: return EEDATA;
 23846  005F68  50A8               	movf	4008,w,c	;volatile
 23847  005F6A  0012               	return	
 23848  005F6C                     __end_ofi2_EEPROM_read:
 23849                           	opt stack 0
 23850                           pclatu	equ	0xFFB
 23851                           pclath	equ	0xFFA
 23852                           tblptru	equ	0xFF8
 23853                           tblptrh	equ	0xFF7
 23854                           tblptrl	equ	0xFF6
 23855                           tablat	equ	0xFF5
 23856                           prodh	equ	0xFF4
 23857                           prodl	equ	0xFF3
 23858                           intcon	equ	0xFF2
 23859                           intcon2	equ	0xFF1
 23860                           intcon3	equ	0xFF0
 23861                           indf0	equ	0xFEF
 23862                           postinc0	equ	0xFEE
 23863                           fsr0h	equ	0xFEA
 23864                           fsr0l	equ	0xFE9
 23865                           wreg	equ	0xFE8
 23866                           postdec1	equ	0xFE5
 23867                           fsr1h	equ	0xFE2
 23868                           fsr1l	equ	0xFE1
 23869                           indf2	equ	0xFDF
 23870                           postinc2	equ	0xFDE
 23871                           postdec2	equ	0xFDD
 23872                           fsr2h	equ	0xFDA
 23873                           fsr2l	equ	0xFD9
 23874                           status	equ	0xFD8
 23875                           
 23876 ;; *************** function _updateArmState *****************
 23877 ;; Defined at:
 23878 ;;		line 690 in file "sort.c"
 23879 ;; Parameters:    Size  Location     Type
 23880 ;;		None
 23881 ;; Auto vars:     Size  Location     Type
 23882 ;;		None
 23883 ;; Return value:  Size  Location     Type
 23884 ;;                  1    wreg      void 
 23885 ;; Registers used:
 23886 ;;		wreg, status,2, status,0
 23887 ;; Tracked objects:
 23888 ;;		On entry : 0/0
 23889 ;;		On exit  : 0/0
 23890 ;;		Unchanged: 0/0
 23891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23894 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23895 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23896 ;;Total ram usage:        2 bytes
 23897 ;; Hardware stack levels used:    1
 23898 ;; This function calls:
 23899 ;;		Nothing
 23900 ;; This function is called by:
 23901 ;;		_handler
 23902 ;; This function uses a non-reentrant model
 23903 ;;
 23904                           
 23905                           	psect	text85
 23906  005996                     __ptext85:
 23907                           	opt stack 0
 23908  005996                     _updateArmState:
 23909                           	opt stack 23
 23910                           
 23911                           ;sort.c: 697: if(!was_low_2){
 23912                           
 23913                           ;incstack = 0
 23914  005996  5079               	movf	_was_low_2,w,c	;volatile
 23915  005998  107A               	iorwf	_was_low_2+1,w,c	;volatile
 23916  00599A  B4D8               	btfsc	status,2,c
 23917  00599C  D007               	goto	i2l10415
 23918  00599E  D016               	goto	i2l979
 23919  0059A0                     i2l10409:
 23920                           
 23921                           ;sort.c: 702: PR2 = 0x20;
 23922  0059A0  0E20               	movlw	32
 23923  0059A2  6ECB               	movwf	4043,c	;volatile
 23924                           
 23925                           ;sort.c: 703: break;
 23926  0059A4  0012               	return	
 23927  0059A6                     i2l10411:
 23928                           
 23929                           ;sort.c: 706: PR2 = 0x40;
 23930  0059A6  0E40               	movlw	64
 23931  0059A8  6ECB               	movwf	4043,c	;volatile
 23932                           
 23933                           ;sort.c: 708: }
 23934                           
 23935                           ;sort.c: 707: break;
 23936  0059AA  0012               	return	
 23937  0059AC                     i2l10415:
 23938  0059AC  C0E8  F001         	movff	_f_arm_position,??_updateArmState	;volatile
 23939  0059B0  C0E9  F002         	movff	_f_arm_position+1,??_updateArmState+1	;volatile
 23940                           
 23941                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 23942                           ; Switch size 1, requested type "space"
 23943                           ; Number of cases is 1, Range of values is 0 to 0
 23944                           ; switch strategies available:
 23945                           ; Name         Instructions Cycles
 23946                           ; simple_byte            4     3 (average)
 23947                           ;	Chosen strategy is simple_byte
 23948  0059B4  5002               	movf	??_updateArmState+1,w,c
 23949  0059B6  0A00               	xorlw	0	; case 0
 23950  0059B8  A4D8               	btfss	status,2,c
 23951  0059BA  0012               	return	
 23952                           
 23953                           ; Switch size 1, requested type "space"
 23954                           ; Number of cases is 2, Range of values is 0 to 1
 23955                           ; switch strategies available:
 23956                           ; Name         Instructions Cycles
 23957                           ; simple_byte            7     4 (average)
 23958                           ;	Chosen strategy is simple_byte
 23959  0059BC  5001               	movf	??_updateArmState,w,c
 23960  0059BE  0A00               	xorlw	0	; case 0
 23961  0059C0  B4D8               	btfsc	status,2,c
 23962  0059C2  D7EE               	goto	i2l10409
 23963  0059C4  0A01               	xorlw	1	; case 1
 23964  0059C6  A4D8               	btfss	status,2,c
 23965                           
 23966                           ;sort.c: 709: }
 23967  0059C8  0012               	return	
 23968  0059CA  D7ED               	goto	i2l10411
 23969  0059CC                     i2l979:
 23970                           
 23971                           ;sort.c: 710: else{
 23972                           ;sort.c: 712: PR2 = 0xFF;
 23973  0059CC  68CB               	setf	4043,c	;volatile
 23974  0059CE  0012               	return	
 23975  0059D0                     __end_of_updateArmState:
 23976                           	opt stack 0
 23977                           pclatu	equ	0xFFB
 23978                           pclath	equ	0xFFA
 23979                           tblptru	equ	0xFF8
 23980                           tblptrh	equ	0xFF7
 23981                           tblptrl	equ	0xFF6
 23982                           tablat	equ	0xFF5
 23983                           prodh	equ	0xFF4
 23984                           prodl	equ	0xFF3
 23985                           intcon	equ	0xFF2
 23986                           intcon2	equ	0xFF1
 23987                           intcon3	equ	0xFF0
 23988                           indf0	equ	0xFEF
 23989                           postinc0	equ	0xFEE
 23990                           fsr0h	equ	0xFEA
 23991                           fsr0l	equ	0xFE9
 23992                           wreg	equ	0xFE8
 23993                           postdec1	equ	0xFE5
 23994                           fsr1h	equ	0xFE2
 23995                           fsr1l	equ	0xFE1
 23996                           indf2	equ	0xFDF
 23997                           postinc2	equ	0xFDE
 23998                           postdec2	equ	0xFDD
 23999                           fsr2h	equ	0xFDA
 24000                           fsr2l	equ	0xFD9
 24001                           status	equ	0xFD8
 24002                           
 24003 ;; *************** function _printSortTimer *****************
 24004 ;; Defined at:
 24005 ;;		line 518 in file "sort.c"
 24006 ;; Parameters:    Size  Location     Type
 24007 ;;		None
 24008 ;; Auto vars:     Size  Location     Type
 24009 ;;  i               2   70[COMRAM] int 
 24010 ;;  i               2   72[COMRAM] int 
 24011 ;;  curTime        14   44[COMRAM] int [7]
 24012 ;;  timeDiff        2   68[COMRAM] unsigned int 
 24013 ;;  sec             2   64[COMRAM] int 
 24014 ;;  min             2   62[COMRAM] int 
 24015 ;;  cur_sec         2   60[COMRAM] unsigned int 
 24016 ;;  start_sec       2   58[COMRAM] unsigned int 
 24017 ;; Return value:  Size  Location     Type
 24018 ;;                  1    wreg      void 
 24019 ;; Registers used:
 24020 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24021 ;; Tracked objects:
 24022 ;;		On entry : 0/0
 24023 ;;		On exit  : 0/0
 24024 ;;		Unchanged: 0/0
 24025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24027 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24028 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24029 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24030 ;;Total ram usage:       33 bytes
 24031 ;; Hardware stack levels used:    1
 24032 ;; Hardware stack levels required when called:    3
 24033 ;; This function calls:
 24034 ;;		i2___awmod
 24035 ;;		i2___lwdiv
 24036 ;;		i2___lwmod
 24037 ;;		i2___wmul
 24038 ;;		i2_delay_ms
 24039 ;;		i2_getRTC
 24040 ;;		i2_lcdInst
 24041 ;;		i2_printf
 24042 ;; This function is called by:
 24043 ;;		_handler
 24044 ;; This function uses a non-reentrant model
 24045 ;;
 24046                           
 24047                           	psect	text86
 24048  002C48                     __ptext86:
 24049                           	opt stack 0
 24050  002C48                     _printSortTimer:
 24051                           	opt stack 20
 24052                           
 24053                           ;sort.c: 519: getRTC();
 24054                           
 24055                           ;incstack = 0
 24056  002C48  EC00  F02A         	call	i2_getRTC	;wreg free
 24057                           
 24058                           ;sort.c: 520: int curTime[7];
 24059                           ;sort.c: 521: for(int i = 0; i < 7; i++){
 24060  002C4C  0E00               	movlw	0
 24061  002C4E  6E4A               	movwf	printSortTimer@i+1,c
 24062  002C50  0E00               	movlw	0
 24063  002C52  6E49               	movwf	printSortTimer@i,c
 24064  002C54                     i2l10233:
 24065  002C54  BE4A               	btfsc	printSortTimer@i+1,7,c
 24066  002C56  D006               	goto	i2l10237
 24067  002C58  504A               	movf	printSortTimer@i+1,w,c
 24068  002C5A  E131               	bnz	i2l10243
 24069  002C5C  0E07               	movlw	7
 24070  002C5E  5C49               	subwf	printSortTimer@i,w,c
 24071  002C60  B0D8               	btfsc	status,0,c
 24072  002C62  D02D               	goto	i2l10243
 24073  002C64                     i2l10237:
 24074                           
 24075                           ;sort.c: 522: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 24076  002C64  0E1C               	movlw	low _time
 24077  002C66  2449               	addwf	printSortTimer@i,w,c
 24078  002C68  6ED9               	movwf	fsr2l,c
 24079  002C6A  0E01               	movlw	high _time
 24080  002C6C  204A               	addwfc	printSortTimer@i+1,w,c
 24081  002C6E  6EDA               	movwf	fsr2h,c
 24082  002C70  50DF               	movf	indf2,w,c
 24083  002C72  6E2A               	movwf	??_printSortTimer& (0+255),c
 24084  002C74  3A2A               	swapf	??_printSortTimer,f,c
 24085  002C76  0E0F               	movlw	15
 24086  002C78  162A               	andwf	??_printSortTimer,f,c
 24087  002C7A  0E0F               	movlw	15
 24088  002C7C  162A               	andwf	??_printSortTimer,f,c
 24089  002C7E  502A               	movf	??_printSortTimer,w,c
 24090  002C80  0D0A               	mullw	10
 24091  002C82  0E1C               	movlw	low _time
 24092  002C84  2449               	addwf	printSortTimer@i,w,c
 24093  002C86  6ED9               	movwf	fsr2l,c
 24094  002C88  0E01               	movlw	high _time
 24095  002C8A  204A               	addwfc	printSortTimer@i+1,w,c
 24096  002C8C  6EDA               	movwf	fsr2h,c
 24097  002C8E  50DF               	movf	indf2,w,c
 24098  002C90  0B0F               	andlw	15
 24099  002C92  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 24100  002C94  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 24101  002C96  50F3               	movf	prodl,w,c
 24102  002C98  262B               	addwf	??_printSortTimer+1,f,c
 24103  002C9A  50F4               	movf	prodh,w,c
 24104  002C9C  222C               	addwfc	??_printSortTimer+2,f,c
 24105  002C9E  90D8               	bcf	status,0,c
 24106  002CA0  3449               	rlcf	printSortTimer@i,w,c
 24107  002CA2  6ED9               	movwf	fsr2l,c
 24108  002CA4  344A               	rlcf	printSortTimer@i+1,w,c
 24109  002CA6  6EDA               	movwf	fsr2h,c
 24110  002CA8  0E2D               	movlw	low printSortTimer@curTime
 24111  002CAA  26D9               	addwf	fsr2l,f,c
 24112  002CAC  0E00               	movlw	high printSortTimer@curTime
 24113  002CAE  22DA               	addwfc	fsr2h,f,c
 24114  002CB0  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 24115  002CB4  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 24116  002CB8  4A49               	infsnz	printSortTimer@i,f,c
 24117  002CBA  2A4A               	incf	printSortTimer@i+1,f,c
 24118  002CBC  D7CB               	goto	i2l10233
 24119  002CBE                     i2l10243:
 24120                           
 24121                           ;sort.c: 523: }
 24122                           ;sort.c: 524: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 24123  002CBE  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 24124  002CC2  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 24125  002CC6  0E00               	movlw	0
 24126  002CC8  6E04               	movwf	i2___wmul@multiplicand+1,c
 24127  002CCA  0E3C               	movlw	60
 24128  002CCC  6E03               	movwf	i2___wmul@multiplicand,c
 24129  002CCE  EC0F  F02F         	call	i2___wmul	;wreg free
 24130  002CD2  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 24131  002CD6  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 24132  002CDA  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 24133  002CDE  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 24134  002CE2  0E0E               	movlw	14
 24135  002CE4  6E04               	movwf	i2___wmul@multiplicand+1,c
 24136  002CE6  0E10               	movlw	16
 24137  002CE8  6E03               	movwf	i2___wmul@multiplicand,c
 24138  002CEA  EC0F  F02F         	call	i2___wmul	;wreg free
 24139  002CEE  5001               	movf	?i2___wmul,w,c
 24140  002CF0  262A               	addwf	??_printSortTimer,f,c
 24141  002CF2  5002               	movf	?i2___wmul+1,w,c
 24142  002CF4  222B               	addwfc	??_printSortTimer+1,f,c
 24143  002CF6  0101               	movlb	1	; () banked
 24144  002CF8  510E               	movf	_startTime& (0+255),w,b
 24145  002CFA  242A               	addwf	??_printSortTimer,w,c
 24146  002CFC  6E3B               	movwf	printSortTimer@start_sec,c
 24147  002CFE  0101               	movlb	1	; () banked
 24148  002D00  510F               	movf	(_startTime+1)& (0+255),w,b
 24149  002D02  202B               	addwfc	??_printSortTimer+1,w,c
 24150  002D04  6E3C               	movwf	printSortTimer@start_sec+1,c
 24151                           
 24152                           ;sort.c: 525: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 24153  002D06  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 24154  002D0A  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 24155  002D0E  0E00               	movlw	0
 24156  002D10  6E04               	movwf	i2___wmul@multiplicand+1,c
 24157  002D12  0E3C               	movlw	60
 24158  002D14  6E03               	movwf	i2___wmul@multiplicand,c
 24159  002D16  EC0F  F02F         	call	i2___wmul	;wreg free
 24160  002D1A  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 24161  002D1E  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 24162  002D22  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 24163  002D26  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 24164  002D2A  0E0E               	movlw	14
 24165  002D2C  6E04               	movwf	i2___wmul@multiplicand+1,c
 24166  002D2E  0E10               	movlw	16
 24167  002D30  6E03               	movwf	i2___wmul@multiplicand,c
 24168  002D32  EC0F  F02F         	call	i2___wmul	;wreg free
 24169  002D36  5001               	movf	?i2___wmul,w,c
 24170  002D38  262A               	addwf	??_printSortTimer,f,c
 24171  002D3A  5002               	movf	?i2___wmul+1,w,c
 24172  002D3C  222B               	addwfc	??_printSortTimer+1,f,c
 24173  002D3E  502D               	movf	printSortTimer@curTime,w,c
 24174  002D40  242A               	addwf	??_printSortTimer,w,c
 24175  002D42  6E3D               	movwf	printSortTimer@cur_sec,c
 24176  002D44  502E               	movf	printSortTimer@curTime+1,w,c
 24177  002D46  202B               	addwfc	??_printSortTimer+1,w,c
 24178  002D48  6E3E               	movwf	printSortTimer@cur_sec+1,c
 24179                           
 24180                           ;sort.c: 526: unsigned int timeDiff = cur_sec - start_sec;
 24181  002D4A  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 24182  002D4E  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 24183  002D52  1E2A               	comf	??_printSortTimer,f,c
 24184  002D54  1E2B               	comf	??_printSortTimer+1,f,c
 24185  002D56  4A2A               	infsnz	??_printSortTimer,f,c
 24186  002D58  2A2B               	incf	??_printSortTimer+1,f,c
 24187  002D5A  503D               	movf	printSortTimer@cur_sec,w,c
 24188  002D5C  242A               	addwf	??_printSortTimer,w,c
 24189  002D5E  6E45               	movwf	printSortTimer@timeDiff,c
 24190  002D60  503E               	movf	printSortTimer@cur_sec+1,w,c
 24191  002D62  202B               	addwfc	??_printSortTimer+1,w,c
 24192  002D64  6E46               	movwf	printSortTimer@timeDiff+1,c
 24193                           
 24194                           ;sort.c: 528: total_time = timeDiff;
 24195  002D66  C045  F0FA         	movff	printSortTimer@timeDiff,_total_time
 24196  002D6A  C046  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 24197                           
 24198                           ;sort.c: 530: if(f_most_recent_sort_time){
 24199  002D6E  0101               	movlb	1	; () banked
 24200  002D70  5139               	movf	_f_most_recent_sort_time& (0+255),w,b
 24201  002D72  0101               	movlb	1	; () banked
 24202  002D74  113A               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 24203  002D76  B4D8               	btfsc	status,2,c
 24204  002D78  D009               	goto	i2l10255
 24205                           
 24206                           ; BSR set to: 1
 24207                           ;sort.c: 531: most_recent_sort_time = total_time;
 24208  002D7A  C0FA  F147         	movff	_total_time,_most_recent_sort_time
 24209  002D7E  C0FB  F148         	movff	_total_time+1,_most_recent_sort_time+1
 24210                           
 24211                           ; BSR set to: 1
 24212                           ;sort.c: 532: f_most_recent_sort_time = 0;
 24213  002D82  0E00               	movlw	0
 24214  002D84  0101               	movlb	1	; () banked
 24215  002D86  6F3A               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 24216  002D88  0E00               	movlw	0
 24217  002D8A  6F39               	movwf	_f_most_recent_sort_time& (0+255),b
 24218  002D8C                     i2l10255:
 24219                           
 24220                           ; BSR set to: 1
 24221                           ;sort.c: 533: }
 24222                           ;sort.c: 536: if(total_time >= 20){
 24223  002D8C  0100               	movlb	0	; () banked
 24224  002D8E  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 24225  002D90  D05B               	goto	i2l920
 24226  002D92  0100               	movlb	0	; () banked
 24227  002D94  51FB               	movf	(_total_time+1)& (0+255),w,b
 24228  002D96  E105               	bnz	i2u1025_40
 24229  002D98  0E14               	movlw	20
 24230  002D9A  0100               	movlb	0	; () banked
 24231  002D9C  5DFA               	subwf	_total_time& (0+255),w,b
 24232  002D9E  A0D8               	btfss	status,0,c
 24233  002DA0  D053               	goto	i2l920
 24234  002DA2                     i2u1025_40:
 24235                           
 24236                           ; BSR set to: 0
 24237                           ;sort.c: 537: if(LATBbits.LATB2 == 0){
 24238  002DA2  B48A               	btfsc	3978,2,c	;volatile
 24239  002DA4  D036               	goto	i2l10277
 24240                           
 24241                           ; BSR set to: 0
 24242                           ;sort.c: 538: motor_toggle_count++;
 24243  002DA6  0101               	movlb	1	; () banked
 24244  002DA8  4B49               	infsnz	_motor_toggle_count& (0+255),f,b
 24245  002DAA  2B4A               	incf	(_motor_toggle_count+1)& (0+255),f,b
 24246                           
 24247                           ; BSR set to: 1
 24248                           ;sort.c: 539: if(motor_toggle_count == 2){
 24249  002DAC  0E02               	movlw	2
 24250  002DAE  0101               	movlb	1	; () banked
 24251  002DB0  1949               	xorwf	_motor_toggle_count& (0+255),w,b
 24252  002DB2  0101               	movlb	1	; () banked
 24253  002DB4  114A               	iorwf	(_motor_toggle_count+1)& (0+255),w,b
 24254  002DB6  A4D8               	btfss	status,2,c
 24255  002DB8  D047               	goto	i2l920
 24256                           
 24257                           ; BSR set to: 1
 24258                           ;sort.c: 540: motor_toggle_count = 0;
 24259  002DBA  0E00               	movlw	0
 24260  002DBC  0101               	movlb	1	; () banked
 24261  002DBE  6F4A               	movwf	(_motor_toggle_count+1)& (0+255),b
 24262  002DC0  0E00               	movlw	0
 24263  002DC2  6F49               	movwf	_motor_toggle_count& (0+255),b
 24264                           
 24265                           ;sort.c: 541: for(int i=0; i<46; i++){
 24266  002DC4  0E00               	movlw	0
 24267  002DC6  6E48               	movwf	printSortTimer@i_1168+1,c
 24268  002DC8  0E00               	movlw	0
 24269  002DCA  6E47               	movwf	printSortTimer@i_1168,c
 24270                           
 24271                           ; BSR set to: 1
 24272  002DCC  BE48               	btfsc	printSortTimer@i_1168+1,7,c
 24273  002DCE  D006               	goto	i2l10269
 24274  002DD0  5048               	movf	printSortTimer@i_1168+1,w,c
 24275  002DD2  E11D               	bnz	i2l924
 24276  002DD4  0E2E               	movlw	46
 24277  002DD6  5C47               	subwf	printSortTimer@i_1168,w,c
 24278  002DD8  B0D8               	btfsc	status,0,c
 24279  002DDA  D019               	goto	i2l924
 24280  002DDC                     i2l10269:
 24281                           
 24282                           ;sort.c: 542: LATBbits.LATB2 = !LATBbits.LATB2;
 24283  002DDC  B48A               	btfsc	3978,2,c	;volatile
 24284  002DDE  D003               	goto	i2u1029_40
 24285  002DE0  6A2A               	clrf	??_printSortTimer& (0+255),c
 24286  002DE2  2A2A               	incf	??_printSortTimer& (0+255),f,c
 24287  002DE4  D001               	goto	i2u1030_48
 24288  002DE6                     i2u1029_40:
 24289  002DE6  6A2A               	clrf	??_printSortTimer& (0+255),c
 24290  002DE8                     i2u1030_48:
 24291  002DE8  462A               	rlncf	??_printSortTimer,f,c
 24292  002DEA  462A               	rlncf	??_printSortTimer,f,c
 24293  002DEC  508A               	movf	3978,w,c	;volatile
 24294  002DEE  182A               	xorwf	??_printSortTimer,w,c
 24295  002DF0  0BFB               	andlw	-5
 24296  002DF2  182A               	xorwf	??_printSortTimer,w,c
 24297  002DF4  6E8A               	movwf	3978,c	;volatile
 24298                           
 24299                           ;sort.c: 543: delay_ms(45-i);
 24300  002DF6  5047               	movf	printSortTimer@i_1168,w,c
 24301  002DF8  0800               	sublw	0
 24302  002DFA  0F2D               	addlw	45
 24303  002DFC  EC86  F02F         	call	i2_delay_ms
 24304  002E00  4A47               	infsnz	printSortTimer@i_1168,f,c
 24305  002E02  2A48               	incf	printSortTimer@i_1168+1,f,c
 24306  002E04  BE48               	btfsc	printSortTimer@i_1168+1,7,c
 24307  002E06  D7EA               	goto	i2l10269
 24308  002E08  5048               	movf	printSortTimer@i_1168+1,w,c
 24309  002E0A  E101               	bnz	i2u1031_40
 24310  002E0C  D7E3               	goto	L19
 24311  002E0E                     i2u1031_40:
 24312  002E0E                     i2l924:
 24313                           
 24314                           ;sort.c: 544: }
 24315                           ;sort.c: 545: LATBbits.LATB2 = 1;
 24316  002E0E  848A               	bsf	3978,2,c	;volatile
 24317                           
 24318                           ;sort.c: 546: }
 24319                           ;sort.c: 547: }
 24320  002E10  D01B               	goto	i2l920
 24321  002E12                     i2l10277:
 24322                           
 24323                           ;sort.c: 548: else if(total_time % 20 == 0){
 24324  002E12  C0FA  F001         	movff	_total_time,i2___awmod@dividend
 24325  002E16  C0FB  F002         	movff	_total_time+1,i2___awmod@dividend+1
 24326  002E1A  0E00               	movlw	0
 24327  002E1C  6E04               	movwf	i2___awmod@divisor+1,c
 24328  002E1E  0E14               	movlw	20
 24329  002E20  6E03               	movwf	i2___awmod@divisor,c
 24330  002E22  EC39  F02A         	call	i2___awmod	;wreg free
 24331  002E26  5001               	movf	?i2___awmod,w,c
 24332  002E28  1002               	iorwf	?i2___awmod+1,w,c
 24333  002E2A  A4D8               	btfss	status,2,c
 24334  002E2C  D00D               	goto	i2l920
 24335                           
 24336                           ;sort.c: 549: LATBbits.LATB2 = !LATBbits.LATB2;
 24337  002E2E  B48A               	btfsc	3978,2,c	;volatile
 24338  002E30  D003               	goto	i2u1033_40
 24339  002E32  6A2A               	clrf	??_printSortTimer& (0+255),c
 24340  002E34  2A2A               	incf	??_printSortTimer& (0+255),f,c
 24341  002E36  D001               	goto	i2u1034_48
 24342  002E38                     i2u1033_40:
 24343  002E38  6A2A               	clrf	??_printSortTimer& (0+255),c
 24344  002E3A                     i2u1034_48:
 24345  002E3A  462A               	rlncf	??_printSortTimer,f,c
 24346  002E3C  462A               	rlncf	??_printSortTimer,f,c
 24347  002E3E  508A               	movf	3978,w,c	;volatile
 24348  002E40  182A               	xorwf	??_printSortTimer,w,c
 24349  002E42  0BFB               	andlw	-5
 24350  002E44  182A               	xorwf	??_printSortTimer,w,c
 24351  002E46  6E8A               	movwf	3978,c	;volatile
 24352  002E48                     i2l920:
 24353                           
 24354                           ;sort.c: 550: }
 24355                           ;sort.c: 551: }
 24356                           ;sort.c: 554: if(total_time >= 30){
 24357  002E48  0100               	movlb	0	; () banked
 24358  002E4A  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 24359  002E4C  D034               	goto	i2l927
 24360  002E4E  0100               	movlb	0	; () banked
 24361  002E50  51FB               	movf	(_total_time+1)& (0+255),w,b
 24362  002E52  E105               	bnz	i2u1035_40
 24363  002E54  0E1E               	movlw	30
 24364  002E56  0100               	movlb	0	; () banked
 24365  002E58  5DFA               	subwf	_total_time& (0+255),w,b
 24366  002E5A  A0D8               	btfss	status,0,c
 24367  002E5C  D02C               	goto	i2l927
 24368  002E5E                     i2u1035_40:
 24369                           
 24370                           ; BSR set to: 0
 24371                           ;sort.c: 555: if(LATBbits.LATB0 == 1){
 24372  002E5E  A08A               	btfss	3978,0,c	;volatile
 24373  002E60  D011               	goto	i2l10291
 24374                           
 24375                           ; BSR set to: 0
 24376                           ;sort.c: 556: agitator_toggle_count++;
 24377  002E62  0101               	movlb	1	; () banked
 24378  002E64  4B23               	infsnz	_agitator_toggle_count& (0+255),f,b
 24379  002E66  2B24               	incf	(_agitator_toggle_count+1)& (0+255),f,b
 24380                           
 24381                           ; BSR set to: 1
 24382                           ;sort.c: 557: if(agitator_toggle_count == 2){
 24383  002E68  0E02               	movlw	2
 24384  002E6A  0101               	movlb	1	; () banked
 24385  002E6C  1923               	xorwf	_agitator_toggle_count& (0+255),w,b
 24386  002E6E  0101               	movlb	1	; () banked
 24387  002E70  1124               	iorwf	(_agitator_toggle_count+1)& (0+255),w,b
 24388  002E72  A4D8               	btfss	status,2,c
 24389  002E74  D020               	goto	i2l927
 24390                           
 24391                           ; BSR set to: 1
 24392                           ;sort.c: 558: agitator_toggle_count = 0;
 24393  002E76  0E00               	movlw	0
 24394  002E78  0101               	movlb	1	; () banked
 24395  002E7A  6F24               	movwf	(_agitator_toggle_count+1)& (0+255),b
 24396  002E7C  0E00               	movlw	0
 24397  002E7E  6F23               	movwf	_agitator_toggle_count& (0+255),b
 24398                           
 24399                           ; BSR set to: 1
 24400                           ;sort.c: 559: LATBbits.LATB0 = 0;
 24401  002E80  908A               	bcf	3978,0,c	;volatile
 24402                           
 24403                           ; BSR set to: 1
 24404                           ;sort.c: 560: }
 24405                           ;sort.c: 561: }
 24406  002E82  D019               	goto	i2l927
 24407  002E84                     i2l10291:
 24408                           
 24409                           ;sort.c: 562: else if(total_time % 30 == 0){
 24410  002E84  C0FA  F001         	movff	_total_time,i2___awmod@dividend
 24411  002E88  C0FB  F002         	movff	_total_time+1,i2___awmod@dividend+1
 24412  002E8C  0E00               	movlw	0
 24413  002E8E  6E04               	movwf	i2___awmod@divisor+1,c
 24414  002E90  0E1E               	movlw	30
 24415  002E92  6E03               	movwf	i2___awmod@divisor,c
 24416  002E94  EC39  F02A         	call	i2___awmod	;wreg free
 24417  002E98  5001               	movf	?i2___awmod,w,c
 24418  002E9A  1002               	iorwf	?i2___awmod+1,w,c
 24419  002E9C  A4D8               	btfss	status,2,c
 24420  002E9E  D00B               	goto	i2l927
 24421                           
 24422                           ;sort.c: 563: LATBbits.LATB0 = !LATBbits.LATB0;
 24423  002EA0  B08A               	btfsc	3978,0,c	;volatile
 24424  002EA2  D003               	goto	i2u1039_40
 24425  002EA4  6A2A               	clrf	??_printSortTimer& (0+255),c
 24426  002EA6  2A2A               	incf	??_printSortTimer& (0+255),f,c
 24427  002EA8  D001               	goto	i2u1040_48
 24428  002EAA                     i2u1039_40:
 24429  002EAA  6A2A               	clrf	??_printSortTimer& (0+255),c
 24430  002EAC                     i2u1040_48:
 24431  002EAC  508A               	movf	3978,w,c	;volatile
 24432  002EAE  182A               	xorwf	??_printSortTimer,w,c
 24433  002EB0  0BFE               	andlw	-2
 24434  002EB2  182A               	xorwf	??_printSortTimer,w,c
 24435  002EB4  6E8A               	movwf	3978,c	;volatile
 24436  002EB6                     i2l927:
 24437                           
 24438                           ;sort.c: 564: }
 24439                           ;sort.c: 565: }
 24440                           ;sort.c: 567: if((total_time - most_recent_sort_time == 42) || (total_time == 179)){
 24441  002EB6  C147  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 24442  002EBA  C148  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 24443  002EBE  1E2A               	comf	??_printSortTimer,f,c
 24444  002EC0  1E2B               	comf	??_printSortTimer+1,f,c
 24445  002EC2  4A2A               	infsnz	??_printSortTimer,f,c
 24446  002EC4  2A2B               	incf	??_printSortTimer+1,f,c
 24447  002EC6  0100               	movlb	0	; () banked
 24448  002EC8  51FA               	movf	_total_time& (0+255),w,b
 24449  002ECA  262A               	addwf	??_printSortTimer,f,c
 24450  002ECC  0100               	movlb	0	; () banked
 24451  002ECE  51FB               	movf	(_total_time+1)& (0+255),w,b
 24452  002ED0  222B               	addwfc	??_printSortTimer+1,f,c
 24453  002ED2  0E2A               	movlw	42
 24454  002ED4  182A               	xorwf	??_printSortTimer,w,c
 24455  002ED6  102B               	iorwf	??_printSortTimer+1,w,c
 24456  002ED8  B4D8               	btfsc	status,2,c
 24457  002EDA  D007               	goto	i2l10297
 24458                           
 24459                           ; BSR set to: 0
 24460  002EDC  0EB3               	movlw	179
 24461  002EDE  0100               	movlb	0	; () banked
 24462  002EE0  19FA               	xorwf	_total_time& (0+255),w,b
 24463  002EE2  0100               	movlb	0	; () banked
 24464  002EE4  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 24465  002EE6  A4D8               	btfss	status,2,c
 24466  002EE8  D003               	goto	i2l10299
 24467  002EEA                     i2l10297:
 24468                           
 24469                           ; BSR set to: 0
 24470                           ;sort.c: 568: machine_state = DoneSorting_state;
 24471  002EEA  0E02               	movlw	2
 24472  002EEC  0100               	movlb	0	; () banked
 24473  002EEE  6FFC               	movwf	_machine_state& (0+255),b
 24474  002EF0                     i2l10299:
 24475                           
 24476                           ; BSR set to: 0
 24477                           ;sort.c: 570: }
 24478                           ;sort.c: 572: int min = (timeDiff % 3600) / 60;
 24479  002EF0  0E0E               	movlw	14
 24480  002EF2  6E04               	movwf	i2___lwmod@divisor+1,c
 24481  002EF4  0E10               	movlw	16
 24482  002EF6  6E03               	movwf	i2___lwmod@divisor,c
 24483  002EF8  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 24484  002EFC  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 24485  002F00  ECAA  F02C         	call	i2___lwmod	;wreg free
 24486  002F04  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 24487  002F08  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 24488  002F0C  0E00               	movlw	0
 24489  002F0E  6E09               	movwf	i2___lwdiv@divisor+1,c
 24490  002F10  0E3C               	movlw	60
 24491  002F12  6E08               	movwf	i2___lwdiv@divisor,c
 24492  002F14  ECC9  F02B         	call	i2___lwdiv	;wreg free
 24493  002F18  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 24494  002F1C  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 24495                           
 24496                           ;sort.c: 573: int sec = (timeDiff % 3600) % 60;
 24497  002F20  0E0E               	movlw	14
 24498  002F22  6E04               	movwf	i2___lwmod@divisor+1,c
 24499  002F24  0E10               	movlw	16
 24500  002F26  6E03               	movwf	i2___lwmod@divisor,c
 24501  002F28  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 24502  002F2C  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 24503  002F30  ECAA  F02C         	call	i2___lwmod	;wreg free
 24504  002F34  C001  F043         	movff	?i2___lwmod,_printSortTimer$2574
 24505  002F38  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2574+1
 24506                           
 24507                           ;sort.c: 573: int sec = (timeDiff % 3600) % 60;
 24508  002F3C  C043  F001         	movff	_printSortTimer$2574,i2___lwmod@dividend
 24509  002F40  C044  F002         	movff	_printSortTimer$2574+1,i2___lwmod@dividend+1
 24510  002F44  0E00               	movlw	0
 24511  002F46  6E04               	movwf	i2___lwmod@divisor+1,c
 24512  002F48  0E3C               	movlw	60
 24513  002F4A  6E03               	movwf	i2___lwmod@divisor,c
 24514  002F4C  ECAA  F02C         	call	i2___lwmod	;wreg free
 24515  002F50  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 24516  002F54  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 24517                           
 24518                           ;sort.c: 575: lcdInst(0b10000000);;
 24519  002F58  0E80               	movlw	128
 24520  002F5A  ECDF  F02F         	call	i2_lcdInst
 24521                           
 24522                           ;sort.c: 576: printf("SORTING...     ");
 24523  002F5E  0E59               	movlw	low STR_64
 24524  002F60  6E0D               	movwf	i2printf@f,c
 24525  002F62  0EFE               	movlw	high STR_64
 24526  002F64  6E0E               	movwf	i2printf@f+1,c
 24527  002F66  EC6D  F014         	call	i2_printf	;wreg free
 24528                           
 24529                           ;sort.c: 577: lcdInst(0b11000000);;
 24530  002F6A  0EC0               	movlw	192
 24531  002F6C  ECDF  F02F         	call	i2_lcdInst
 24532                           
 24533                           ;sort.c: 578: printf("TIME %d:%02d   ", min, sec);
 24534  002F70  0E69               	movlw	low STR_65
 24535  002F72  6E0D               	movwf	i2printf@f,c
 24536  002F74  0EFE               	movlw	high STR_65
 24537  002F76  6E0E               	movwf	i2printf@f+1,c
 24538  002F78  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 24539  002F7C  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 24540  002F80  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 24541  002F84  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 24542  002F88  EC6D  F014         	call	i2_printf	;wreg free
 24543  002F8C  0012               	return		;funcret
 24544  002F8E                     __end_of_printSortTimer:
 24545                           	opt stack 0
 24546                           pclatu	equ	0xFFB
 24547                           pclath	equ	0xFFA
 24548                           tblptru	equ	0xFF8
 24549                           tblptrh	equ	0xFF7
 24550                           tblptrl	equ	0xFF6
 24551                           tablat	equ	0xFF5
 24552                           prodh	equ	0xFF4
 24553                           prodl	equ	0xFF3
 24554                           intcon	equ	0xFF2
 24555                           intcon2	equ	0xFF1
 24556                           intcon3	equ	0xFF0
 24557                           indf0	equ	0xFEF
 24558                           postinc0	equ	0xFEE
 24559                           fsr0h	equ	0xFEA
 24560                           fsr0l	equ	0xFE9
 24561                           wreg	equ	0xFE8
 24562                           postdec1	equ	0xFE5
 24563                           fsr1h	equ	0xFE2
 24564                           fsr1l	equ	0xFE1
 24565                           indf2	equ	0xFDF
 24566                           postinc2	equ	0xFDE
 24567                           postdec2	equ	0xFDD
 24568                           fsr2h	equ	0xFDA
 24569                           fsr2l	equ	0xFD9
 24570                           status	equ	0xFD8
 24571                           
 24572 ;; *************** function i2_printf *****************
 24573 ;; Defined at:
 24574 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 24575 ;; Parameters:    Size  Location     Type
 24576 ;;  f               2   12[COMRAM] PTR const unsigned char 
 24577 ;;		 -> STR_128(18), STR_127(18), STR_126(17), STR_125(17), 
 24578 ;;		 -> STR_124(15), STR_123(15), STR_122(18), STR_121(15), 
 24579 ;;		 -> STR_120(18), STR_119(18), STR_118(17), STR_117(17), 
 24580 ;;		 -> STR_116(17), STR_115(17), STR_114(17), STR_113(17), 
 24581 ;;		 -> STR_112(18), STR_111(17), STR_110(15), STR_109(15), 
 24582 ;;		 -> STR_108(15), STR_107(17), STR_106(17), STR_105(17), 
 24583 ;;		 -> STR_104(16), STR_103(17), STR_102(17), STR_101(17), 
 24584 ;;		 -> STR_100(17), STR_99(17), STR_98(17), STR_97(15), 
 24585 ;;		 -> STR_96(11), STR_95(17), STR_94(11), STR_93(17), 
 24586 ;;		 -> STR_92(14), STR_91(15), STR_90(14), STR_89(10), 
 24587 ;;		 -> STR_88(9), STR_87(9), STR_86(10), STR_85(10), 
 24588 ;;		 -> STR_84(16), STR_83(15), STR_82(3), STR_81(18), 
 24589 ;;		 -> STR_80(3), STR_79(18), STR_78(14), STR_77(8), 
 24590 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 24591 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 24592 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(16), 
 24593 ;;		 -> STR_64(16), STR_63(24), STR_50(17), STR_49(17), 
 24594 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 24595 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 24596 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 24597 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 24598 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 24599 ;;		 -> STR_28(17), STR_27(17), STR_26(17), STR_25(17), 
 24600 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 24601 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 24602 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 24603 ;; Auto vars:     Size  Location     Type
 24604 ;;  printf          4    0        struct .
 24605 ;;  printf          2   39[COMRAM] int 
 24606 ;;  printf          2   35[COMRAM] unsigned int 
 24607 ;;  printf          2   33[COMRAM] unsigned int 
 24608 ;;  printf          2   31[COMRAM] PTR void [1]
 24609 ;;		 -> ?i2_printf(2), ?_printf(2), 
 24610 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 24611 ;;		 -> STR_129(7), count_total(2), printRTC@month(4), UI@month(4), 
 24612 ;;  printf          1   38[COMRAM] char 
 24613 ;;  printf          1   37[COMRAM] unsigned char 
 24614 ;;  printf          1   28[COMRAM] char 
 24615 ;; Return value:  Size  Location     Type
 24616 ;;                  2   12[COMRAM] int 
 24617 ;; Registers used:
 24618 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24619 ;; Tracked objects:
 24620 ;;		On entry : 0/0
 24621 ;;		On exit  : 0/0
 24622 ;;		Unchanged: 0/0
 24623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24624 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24625 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24626 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24627 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24628 ;;Total ram usage:       29 bytes
 24629 ;; Hardware stack levels used:    1
 24630 ;; Hardware stack levels required when called:    2
 24631 ;; This function calls:
 24632 ;;		i2___lwdiv
 24633 ;;		i2___lwmod
 24634 ;;		i2___wmul
 24635 ;;		i2_isdigit
 24636 ;;		i2_putch
 24637 ;; This function is called by:
 24638 ;;		_change_state_to_menu_11
 24639 ;;		_change_state_to_menu_23
 24640 ;;		_change_state_to_logs_11
 24641 ;;		_change_state_to_logs_12
 24642 ;;		_change_state_to_logs_22
 24643 ;;		_change_state_to_logs_23
 24644 ;;		_change_state_to_logs_33
 24645 ;;		_change_state_to_logs_34
 24646 ;;		_printSortTimer
 24647 ;;		i2_change_state_to_menu_start
 24648 ;;		i2_change_state_to_menu_12
 24649 ;;		i2_change_state_to_menu_22
 24650 ;;		i2_printRTC
 24651 ;; This function uses a non-reentrant model
 24652 ;;
 24653                           
 24654                           	psect	text87
 24655  0028DA                     __ptext87:
 24656                           	opt stack 0
 24657  0028DA                     i2_printf:
 24658                           	opt stack 20
 24659                           
 24660                           ;doprnt.c: 466: va_list ap;
 24661                           ;doprnt.c: 499: signed char c;
 24662                           ;doprnt.c: 501: int width;
 24663                           ;doprnt.c: 506: signed char prec;
 24664                           ;doprnt.c: 508: unsigned char flag;
 24665                           ;doprnt.c: 523: union {
 24666                           ;doprnt.c: 524: unsigned long vd;
 24667                           ;doprnt.c: 525: double integ;
 24668                           ;doprnt.c: 526: } tmpval;
 24669                           ;doprnt.c: 528: unsigned int val;
 24670                           ;doprnt.c: 529: unsigned len;
 24671                           ;doprnt.c: 530: const char * cp;
 24672                           ;doprnt.c: 533: *ap = __va_start();
 24673                           
 24674                           ;incstack = 0
 24675  0028DA  0E0F               	movlw	low (?i2_printf+2)
 24676  0028DC  6E20               	movwf	i2printf@ap,c
 24677  0028DE  0E00               	movlw	high (?i2_printf+2)
 24678  0028E0  6E21               	movwf	i2printf@ap+1,c
 24679                           
 24680                           ;doprnt.c: 536: while(c = *f++) {
 24681  0028E2  D1A4               	goto	i2l7297
 24682  0028E4                     i2l7167:
 24683                           
 24684                           ;doprnt.c: 538: if(c != '%')
 24685  0028E4  0E25               	movlw	37
 24686  0028E6  1827               	xorwf	i2printf@c,w,c
 24687  0028E8  B4D8               	btfsc	status,2,c
 24688  0028EA  D004               	goto	i2l7171
 24689                           
 24690                           ;doprnt.c: 540: {
 24691                           ;doprnt.c: 541: (putch(c) );
 24692  0028EC  5027               	movf	i2printf@c,w,c
 24693  0028EE  ECD9  F02F         	call	i2_putch
 24694                           
 24695                           ;doprnt.c: 542: continue;
 24696  0028F2  D19C               	goto	i2l7297
 24697  0028F4                     i2l7171:
 24698                           
 24699                           ;doprnt.c: 543: }
 24700                           ;doprnt.c: 546: width = 0;
 24701  0028F4  0E00               	movlw	0
 24702  0028F6  6E29               	movwf	i2printf@width+1,c
 24703  0028F8  0E00               	movlw	0
 24704  0028FA  6E28               	movwf	i2printf@width,c
 24705                           
 24706                           ;doprnt.c: 548: flag = 0;
 24707  0028FC  0E00               	movlw	0
 24708  0028FE  6E26               	movwf	i2printf@flag,c
 24709                           
 24710                           ;doprnt.c: 551: switch(*f) {
 24711                           
 24712                           ;doprnt.c: 550: for(;;) {
 24713  002900  D003               	goto	i2l7177
 24714  002902                     i2l7173:
 24715                           
 24716                           ;doprnt.c: 580: flag |= 0x04;
 24717  002902  8426               	bsf	i2printf@flag,2,c
 24718                           
 24719                           ;doprnt.c: 581: f++;
 24720  002904  4A0D               	infsnz	i2printf@f,f,c
 24721  002906  2A0E               	incf	i2printf@f+1,f,c
 24722  002908                     i2l7177:
 24723  002908  C00D  FFF6         	movff	i2printf@f,tblptrl
 24724  00290C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24725  002910                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24726  002910  6AF8               	clrf	tblptru,c
 24727  002912                     	endif
 24728  002912                     	if	0	;tblptru may be non-zero
 24729  002912                     	endif
 24730  002912  0008               	tblrd		*
 24731  002914  50F5               	movf	tablat,w,c
 24732                           
 24733                           ; Switch size 1, requested type "space"
 24734                           ; Number of cases is 1, Range of values is 48 to 48
 24735                           ; switch strategies available:
 24736                           ; Name         Instructions Cycles
 24737                           ; simple_byte            4     3 (average)
 24738                           ;	Chosen strategy is simple_byte
 24739  002916  0A30               	xorlw	48	; case 48
 24740  002918  B4D8               	btfsc	status,2,c
 24741  00291A  D7F3               	goto	i2l7173
 24742                           
 24743                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 24744                           
 24745                           ;doprnt.c: 586: }
 24746                           
 24747                           ;doprnt.c: 585: break;
 24748  00291C  C00D  FFF6         	movff	i2printf@f,tblptrl
 24749  002920  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24750  002924                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24751  002924  6AF8               	clrf	tblptru,c
 24752  002926                     	endif
 24753  002926                     	if	0	;tblptru may be non-zero
 24754  002926                     	endif
 24755  002926  0008               	tblrd		*
 24756  002928  50F5               	movf	tablat,w,c
 24757  00292A  EC69  F02F         	call	i2_isdigit
 24758  00292E  A0D8               	btfss	status,0,c
 24759  002930  D0A6               	goto	i2l7225
 24760                           
 24761                           ;doprnt.c: 598: width = 0;
 24762  002932  0E00               	movlw	0
 24763  002934  6E29               	movwf	i2printf@width+1,c
 24764  002936  0E00               	movlw	0
 24765  002938  6E28               	movwf	i2printf@width,c
 24766  00293A                     i2l7183:
 24767                           
 24768                           ;doprnt.c: 600: width *= 10;
 24769  00293A  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 24770  00293E  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 24771  002942  0E00               	movlw	0
 24772  002944  6E04               	movwf	i2___wmul@multiplicand+1,c
 24773  002946  0E0A               	movlw	10
 24774  002948  6E03               	movwf	i2___wmul@multiplicand,c
 24775  00294A  EC0F  F02F         	call	i2___wmul	;wreg free
 24776  00294E  C001  F028         	movff	?i2___wmul,i2printf@width
 24777  002952  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 24778                           
 24779                           ;doprnt.c: 601: width += *f++ - '0';
 24780  002956  0ED0               	movlw	208
 24781  002958  6E19               	movwf	??i2_printf& (0+255),c
 24782  00295A  0EFF               	movlw	255
 24783  00295C  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24784  00295E  C00D  FFF6         	movff	i2printf@f,tblptrl
 24785  002962  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24786  002966                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24787  002966  6AF8               	clrf	tblptru,c
 24788  002968                     	endif
 24789  002968                     	if	0	;tblptru may be non-zero
 24790  002968                     	endif
 24791  002968  0008               	tblrd		*
 24792  00296A  50F5               	movf	tablat,w,c
 24793  00296C  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 24794  00296E  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 24795  002970  5019               	movf	??i2_printf,w,c
 24796  002972  261B               	addwf	??i2_printf+2,f,c
 24797  002974  501A               	movf	??i2_printf+1,w,c
 24798  002976  221C               	addwfc	??i2_printf+3,f,c
 24799  002978  501B               	movf	??i2_printf+2,w,c
 24800  00297A  2628               	addwf	i2printf@width,f,c
 24801  00297C  501C               	movf	??i2_printf+3,w,c
 24802  00297E  2229               	addwfc	i2printf@width+1,f,c
 24803  002980  4A0D               	infsnz	i2printf@f,f,c
 24804  002982  2A0E               	incf	i2printf@f+1,f,c
 24805                           
 24806                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 24807  002984  C00D  FFF6         	movff	i2printf@f,tblptrl
 24808  002988  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24809  00298C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24810  00298C  6AF8               	clrf	tblptru,c
 24811  00298E                     	endif
 24812  00298E                     	if	0	;tblptru may be non-zero
 24813  00298E                     	endif
 24814  00298E  0008               	tblrd		*
 24815  002990  50F5               	movf	tablat,w,c
 24816  002992  EC69  F02F         	call	i2_isdigit
 24817  002996  A0D8               	btfss	status,0,c
 24818  002998  D072               	goto	i2l7225
 24819  00299A  D7CF               	goto	i2l7183
 24820  00299C                     i2l7191:
 24821                           
 24822                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 24823  00299C  C020  FFD9         	movff	i2printf@ap,fsr2l
 24824  0029A0  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24825  0029A4  CFDE F01E          	movff	postinc2,i2printf@cp
 24826  0029A8  CFDD F01F          	movff	postdec2,i2printf@cp+1
 24827  0029AC  0E02               	movlw	2
 24828  0029AE  2620               	addwf	i2printf@ap,f,c
 24829  0029B0  0E00               	movlw	0
 24830  0029B2  2221               	addwfc	i2printf@ap+1,f,c
 24831                           
 24832                           ;doprnt.c: 740: if(!cp)
 24833  0029B4  501E               	movf	i2printf@cp,w,c
 24834  0029B6  101F               	iorwf	i2printf@cp+1,w,c
 24835  0029B8  A4D8               	btfss	status,2,c
 24836  0029BA  D004               	goto	i2l7199
 24837                           
 24838                           ;doprnt.c: 741: cp = "(null)";
 24839  0029BC  0EB5               	movlw	low STR_129
 24840  0029BE  6E1E               	movwf	i2printf@cp,c
 24841  0029C0  0EFF               	movlw	high STR_129
 24842  0029C2  6E1F               	movwf	i2printf@cp+1,c
 24843  0029C4                     i2l7199:
 24844                           
 24845                           ;doprnt.c: 745: len = 0;
 24846  0029C4  0E00               	movlw	0
 24847  0029C6  6E23               	movwf	i2printf@len+1,c
 24848  0029C8  0E00               	movlw	0
 24849  0029CA  6E22               	movwf	i2printf@len,c
 24850                           
 24851                           ;doprnt.c: 746: while(cp[len])
 24852  0029CC  D002               	goto	i2l7203
 24853  0029CE                     i2l7201:
 24854                           
 24855                           ;doprnt.c: 747: len++;
 24856  0029CE  4A22               	infsnz	i2printf@len,f,c
 24857  0029D0  2A23               	incf	i2printf@len+1,f,c
 24858  0029D2                     i2l7203:
 24859  0029D2  5022               	movf	i2printf@len,w,c
 24860  0029D4  241E               	addwf	i2printf@cp,w,c
 24861  0029D6  6E19               	movwf	??i2_printf& (0+255),c
 24862  0029D8  5023               	movf	i2printf@len+1,w,c
 24863  0029DA  201F               	addwfc	i2printf@cp+1,w,c
 24864  0029DC  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24865  0029DE  C019  FFF6         	movff	??i2_printf,tblptrl
 24866  0029E2  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 24867  0029E6  0E00               	movlw	low (__mediumconst shr (0+16))
 24868  0029E8  6EF8               	movwf	tblptru,c
 24869  0029EA  0E0F               	movlw	(high __ramtop+-1)
 24870  0029EC  64F7               	cpfsgt	tblptrh,c
 24871  0029EE  D003               	bra	i2u613_47
 24872  0029F0  0008               	tblrd		*
 24873  0029F2  50F5               	movf	tablat,w,c
 24874  0029F4  D005               	bra	i2u613_40
 24875  0029F6                     i2u613_47:
 24876  0029F6  CFF6 FFE9          	movff	tblptrl,fsr0l
 24877  0029FA  CFF7 FFEA          	movff	tblptrh,fsr0h
 24878  0029FE  50EF               	movf	indf0,w,c
 24879  002A00                     i2u613_40:
 24880  002A00  0900               	iorlw	0
 24881  002A02  A4D8               	btfss	status,2,c
 24882  002A04  D7E4               	goto	i2l7201
 24883                           
 24884                           ;doprnt.c: 757: if(width > len)
 24885  002A06  5028               	movf	i2printf@width,w,c
 24886  002A08  5C22               	subwf	i2printf@len,w,c
 24887  002A0A  5029               	movf	i2printf@width+1,w,c
 24888  002A0C  5823               	subwfb	i2printf@len+1,w,c
 24889  002A0E  B0D8               	btfsc	status,0,c
 24890  002A10  D005               	goto	i2l7209
 24891                           
 24892                           ;doprnt.c: 758: width -= len;
 24893  002A12  5022               	movf	i2printf@len,w,c
 24894  002A14  5E28               	subwf	i2printf@width,f,c
 24895  002A16  5023               	movf	i2printf@len+1,w,c
 24896  002A18  5A29               	subwfb	i2printf@width+1,f,c
 24897  002A1A  D008               	goto	i2l7213
 24898  002A1C                     i2l7209:
 24899                           
 24900                           ;doprnt.c: 759: else
 24901                           ;doprnt.c: 760: width = 0;
 24902  002A1C  0E00               	movlw	0
 24903  002A1E  6E29               	movwf	i2printf@width+1,c
 24904  002A20  0E00               	movlw	0
 24905  002A22  6E28               	movwf	i2printf@width,c
 24906                           
 24907                           ;doprnt.c: 764: while(width--)
 24908  002A24  D003               	goto	i2l7213
 24909  002A26                     i2l7211:
 24910                           
 24911                           ;doprnt.c: 765: (putch(' ') );
 24912  002A26  0E20               	movlw	32
 24913  002A28  ECD9  F02F         	call	i2_putch
 24914  002A2C                     i2l7213:
 24915  002A2C  0628               	decf	i2printf@width,f,c
 24916  002A2E  A0D8               	btfss	status,0,c
 24917  002A30  0629               	decf	i2printf@width+1,f,c
 24918  002A32  2828               	incf	i2printf@width,w,c
 24919  002A34  E1F8               	bnz	i2l7211
 24920  002A36  2829               	incf	i2printf@width+1,w,c
 24921  002A38  B4D8               	btfsc	status,2,c
 24922  002A3A  D016               	goto	i2l7219
 24923  002A3C  D7F4               	goto	i2l7211
 24924  002A3E                     i2l7215:
 24925                           
 24926                           ;doprnt.c: 768: (putch(*cp++) );
 24927  002A3E  C01E  FFF6         	movff	i2printf@cp,tblptrl
 24928  002A42  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 24929  002A46  0E00               	movlw	low (__mediumconst shr (0+16))
 24930  002A48  6EF8               	movwf	tblptru,c
 24931  002A4A  0E0F               	movlw	(high __ramtop+-1)
 24932  002A4C  64F7               	cpfsgt	tblptrh,c
 24933  002A4E  D003               	bra	i2u617_47
 24934  002A50  0008               	tblrd		*
 24935  002A52  50F5               	movf	tablat,w,c
 24936  002A54  D005               	bra	i2u617_40
 24937  002A56                     i2u617_47:
 24938  002A56  CFF6 FFE9          	movff	tblptrl,fsr0l
 24939  002A5A  CFF7 FFEA          	movff	tblptrh,fsr0h
 24940  002A5E  50EF               	movf	indf0,w,c
 24941  002A60                     i2u617_40:
 24942  002A60  ECD9  F02F         	call	i2_putch
 24943  002A64  4A1E               	infsnz	i2printf@cp,f,c
 24944  002A66  2A1F               	incf	i2printf@cp+1,f,c
 24945  002A68                     i2l7219:
 24946  002A68  0622               	decf	i2printf@len,f,c
 24947  002A6A  A0D8               	btfss	status,0,c
 24948  002A6C  0623               	decf	i2printf@len+1,f,c
 24949  002A6E  2822               	incf	i2printf@len,w,c
 24950  002A70  E1E6               	bnz	i2l7215
 24951  002A72  2823               	incf	i2printf@len+1,w,c
 24952  002A74  B4D8               	btfsc	status,2,c
 24953  002A76  D0DA               	goto	i2l7297
 24954  002A78  D7E2               	goto	i2l7215
 24955  002A7A                     i2l7221:
 24956                           
 24957                           ;doprnt.c: 818: flag |= 0x40;
 24958  002A7A  8C26               	bsf	i2printf@flag,6,c
 24959                           
 24960                           ;doprnt.c: 822: }
 24961                           
 24962                           ;doprnt.c: 819: break;
 24963  002A7C  D01B               	goto	i2l1569
 24964  002A7E                     i2l7225:
 24965  002A7E  C00D  FFF6         	movff	i2printf@f,tblptrl
 24966  002A82  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24967  002A86  4A0D               	infsnz	i2printf@f,f,c
 24968  002A88  2A0E               	incf	i2printf@f+1,f,c
 24969  002A8A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24970  002A8A  6AF8               	clrf	tblptru,c
 24971  002A8C                     	endif
 24972  002A8C                     	if	0	;tblptru may be non-zero
 24973  002A8C                     	endif
 24974  002A8C  0008               	tblrd		*
 24975  002A8E  CFF5 F027          	movff	tablat,i2printf@c
 24976  002A92  5027               	movf	i2printf@c,w,c
 24977                           
 24978                           ; Switch size 1, requested type "space"
 24979                           ; Number of cases is 5, Range of values is 0 to 117
 24980                           ; switch strategies available:
 24981                           ; Name         Instructions Cycles
 24982                           ; simple_byte           16     9 (average)
 24983                           ;	Chosen strategy is simple_byte
 24984  002A94  0A00               	xorlw	0	; case 0
 24985  002A96  B4D8               	btfsc	status,2,c
 24986  002A98  0012               	return	
 24987  002A9A  0A64               	xorlw	100	; case 100
 24988  002A9C  B4D8               	btfsc	status,2,c
 24989  002A9E  D00A               	goto	i2l1569
 24990  002AA0  0A0D               	xorlw	13	; case 105
 24991  002AA2  B4D8               	btfsc	status,2,c
 24992  002AA4  D007               	goto	i2l1569
 24993  002AA6  0A1A               	xorlw	26	; case 115
 24994  002AA8  B4D8               	btfsc	status,2,c
 24995  002AAA  D778               	goto	i2l7191
 24996  002AAC  0A06               	xorlw	6	; case 117
 24997  002AAE  B4D8               	btfsc	status,2,c
 24998  002AB0  D7E4               	goto	i2l7221
 24999  002AB2  D0BC               	goto	i2l7297
 25000  002AB4                     i2l1569:
 25001                           
 25002                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 25003  002AB4  BC26               	btfsc	i2printf@flag,6,c
 25004  002AB6  D015               	goto	i2l7237
 25005                           
 25006                           ;doprnt.c: 1253: {
 25007                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 25008  002AB8  C020  FFD9         	movff	i2printf@ap,fsr2l
 25009  002ABC  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 25010  002AC0  CFDE F024          	movff	postinc2,i2printf@val
 25011  002AC4  CFDD F025          	movff	postdec2,i2printf@val+1
 25012  002AC8  0E02               	movlw	2
 25013  002ACA  2620               	addwf	i2printf@ap,f,c
 25014  002ACC  0E00               	movlw	0
 25015  002ACE  2221               	addwfc	i2printf@ap+1,f,c
 25016                           
 25017                           ;doprnt.c: 1261: if((int)val < 0) {
 25018  002AD0  AE25               	btfss	i2printf@val+1,7,c
 25019  002AD2  D013               	goto	i2l7241
 25020                           
 25021                           ;doprnt.c: 1262: flag |= 0x03;
 25022  002AD4  0E03               	movlw	3
 25023  002AD6  1226               	iorwf	i2printf@flag,f,c
 25024                           
 25025                           ;doprnt.c: 1263: val = -val;
 25026  002AD8  6C24               	negf	i2printf@val,c
 25027  002ADA  1E25               	comf	i2printf@val+1,f,c
 25028  002ADC  B0D8               	btfsc	status,0,c
 25029  002ADE  2A25               	incf	i2printf@val+1,f,c
 25030                           
 25031                           ;doprnt.c: 1264: }
 25032                           ;doprnt.c: 1266: }
 25033  002AE0  D00C               	goto	i2l7241
 25034  002AE2                     i2l7237:
 25035                           
 25036                           ;doprnt.c: 1268: else
 25037                           ;doprnt.c: 1273: {
 25038                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 25039  002AE2  C020  FFD9         	movff	i2printf@ap,fsr2l
 25040  002AE6  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 25041  002AEA  CFDE F024          	movff	postinc2,i2printf@val
 25042  002AEE  CFDD F025          	movff	postdec2,i2printf@val+1
 25043  002AF2  0E02               	movlw	2
 25044  002AF4  2620               	addwf	i2printf@ap,f,c
 25045  002AF6  0E00               	movlw	0
 25046  002AF8  2221               	addwfc	i2printf@ap+1,f,c
 25047  002AFA                     i2l7241:
 25048                           
 25049                           ;doprnt.c: 1287: }
 25050                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 25051  002AFA  0E01               	movlw	1
 25052  002AFC  6E27               	movwf	i2printf@c,c
 25053  002AFE                     i2l7243:
 25054  002AFE  0E05               	movlw	5
 25055  002B00  1827               	xorwf	i2printf@c,w,c
 25056  002B02  B4D8               	btfsc	status,2,c
 25057  002B04  D015               	goto	i2l7255
 25058                           
 25059                           ;doprnt.c: 1306: if(val < dpowers[c])
 25060  002B06  5027               	movf	i2printf@c,w,c
 25061  002B08  0D02               	mullw	2
 25062  002B0A  0EB8               	movlw	low _dpowers
 25063  002B0C  24F3               	addwf	prodl,w,c
 25064  002B0E  6EF6               	movwf	tblptrl,c
 25065  002B10  0EFA               	movlw	high _dpowers
 25066  002B12  20F4               	addwfc	prodh,w,c
 25067  002B14  6EF7               	movwf	tblptrh,c
 25068  002B16                     	if	1	;There are 3 active tblptr bytes
 25069  002B16  6AF8               	clrf	tblptru,c
 25070  002B18  0E00               	movlw	low (__mediumconst shr (0+16))
 25071  002B1A  22F8               	addwfc	tblptru,f,c
 25072  002B1C                     	endif
 25073  002B1C  0009               	tblrd		*+
 25074  002B1E  50F5               	movf	tablat,w,c
 25075  002B20  5C24               	subwf	i2printf@val,w,c
 25076  002B22  0009               	tblrd		*+
 25077  002B24  50F5               	movf	tablat,w,c
 25078  002B26  5825               	subwfb	i2printf@val+1,w,c
 25079  002B28  A0D8               	btfss	status,0,c
 25080  002B2A  D002               	goto	i2l7255
 25081                           
 25082                           ;doprnt.c: 1307: break;
 25083  002B2C  2A27               	incf	i2printf@c,f,c
 25084  002B2E  D7E7               	goto	i2l7243
 25085  002B30                     i2l7255:
 25086                           
 25087                           ;doprnt.c: 1345: if(width && flag & 0x03)
 25088  002B30  5028               	movf	i2printf@width,w,c
 25089  002B32  1029               	iorwf	i2printf@width+1,w,c
 25090  002B34  B4D8               	btfsc	status,2,c
 25091  002B36  D009               	goto	i2l7261
 25092  002B38  C026  F019         	movff	i2printf@flag,??i2_printf
 25093  002B3C  0E03               	movlw	3
 25094  002B3E  1619               	andwf	??i2_printf,f,c
 25095  002B40  B4D8               	btfsc	status,2,c
 25096  002B42  D003               	goto	i2l7261
 25097                           
 25098                           ;doprnt.c: 1346: width--;
 25099  002B44  0628               	decf	i2printf@width,f,c
 25100  002B46  A0D8               	btfss	status,0,c
 25101  002B48  0629               	decf	i2printf@width+1,f,c
 25102  002B4A                     i2l7261:
 25103                           
 25104                           ;doprnt.c: 1381: if(width > c)
 25105  002B4A  0E80               	movlw	128
 25106  002B4C  BE27               	btfsc	i2printf@c,7,c
 25107  002B4E  0E7F               	movlw	127
 25108  002B50  6E19               	movwf	??i2_printf& (0+255),c
 25109  002B52  5028               	movf	i2printf@width,w,c
 25110  002B54  5C27               	subwf	i2printf@c,w,c
 25111  002B56  5029               	movf	i2printf@width+1,w,c
 25112  002B58  0A80               	xorlw	128
 25113  002B5A  5819               	subwfb	??i2_printf& (0+255),w,c
 25114  002B5C  B0D8               	btfsc	status,0,c
 25115  002B5E  D007               	goto	i2l7265
 25116                           
 25117                           ;doprnt.c: 1382: width -= c;
 25118  002B60  5027               	movf	i2printf@c,w,c
 25119  002B62  5E28               	subwf	i2printf@width,f,c
 25120  002B64  0E00               	movlw	0
 25121  002B66  BE27               	btfsc	i2printf@c,7,c
 25122  002B68  0EFF               	movlw	255
 25123  002B6A  5A29               	subwfb	i2printf@width+1,f,c
 25124  002B6C  D004               	goto	i2l7267
 25125  002B6E                     i2l7265:
 25126                           
 25127                           ;doprnt.c: 1383: else
 25128                           ;doprnt.c: 1384: width = 0;
 25129  002B6E  0E00               	movlw	0
 25130  002B70  6E29               	movwf	i2printf@width+1,c
 25131  002B72  0E00               	movlw	0
 25132  002B74  6E28               	movwf	i2printf@width,c
 25133  002B76                     i2l7267:
 25134                           
 25135                           ;doprnt.c: 1387: if(flag & 0x04) {
 25136  002B76  A426               	btfss	i2printf@flag,2,c
 25137  002B78  D014               	goto	i2l7279
 25138                           
 25139                           ;doprnt.c: 1392: if(flag & 0x03)
 25140  002B7A  C026  F019         	movff	i2printf@flag,??i2_printf
 25141  002B7E  0E03               	movlw	3
 25142  002B80  1619               	andwf	??i2_printf,f,c
 25143  002B82  B4D8               	btfsc	status,2,c
 25144  002B84  D003               	goto	i2l7273
 25145                           
 25146                           ;doprnt.c: 1393: (putch('-') );
 25147  002B86  0E2D               	movlw	45
 25148  002B88  ECD9  F02F         	call	i2_putch
 25149  002B8C                     i2l7273:
 25150                           
 25151                           ;doprnt.c: 1415: if(width)
 25152  002B8C  5028               	movf	i2printf@width,w,c
 25153  002B8E  1029               	iorwf	i2printf@width+1,w,c
 25154  002B90  B4D8               	btfsc	status,2,c
 25155  002B92  D01E               	goto	i2l7289
 25156                           
 25157                           ;doprnt.c: 1417: (putch('0') );
 25158                           
 25159                           ;doprnt.c: 1416: do
 25160  002B94  0E30               	movlw	48
 25161  002B96  ECD9  F02F         	call	i2_putch
 25162                           
 25163                           ;doprnt.c: 1418: while(--width);
 25164  002B9A  0628               	decf	i2printf@width,f,c
 25165  002B9C  A0D8               	btfss	status,0,c
 25166  002B9E  0629               	decf	i2printf@width+1,f,c
 25167  002BA0  D7F5               	goto	i2l7273
 25168  002BA2                     i2l7279:
 25169                           
 25170                           ;doprnt.c: 1422: {
 25171                           ;doprnt.c: 1424: if(width
 25172                           ;doprnt.c: 1428: )
 25173  002BA2  5028               	movf	i2printf@width,w,c
 25174  002BA4  1029               	iorwf	i2printf@width+1,w,c
 25175  002BA6  B4D8               	btfsc	status,2,c
 25176  002BA8  D00A               	goto	i2l7285
 25177  002BAA                     i2l7281:
 25178                           
 25179                           ;doprnt.c: 1430: (putch(' ') );
 25180  002BAA  0E20               	movlw	32
 25181  002BAC  ECD9  F02F         	call	i2_putch
 25182                           
 25183                           ;doprnt.c: 1431: while(--width);
 25184  002BB0  0628               	decf	i2printf@width,f,c
 25185  002BB2  A0D8               	btfss	status,0,c
 25186  002BB4  0629               	decf	i2printf@width+1,f,c
 25187  002BB6  5028               	movf	i2printf@width,w,c
 25188  002BB8  1029               	iorwf	i2printf@width+1,w,c
 25189  002BBA  A4D8               	btfss	status,2,c
 25190  002BBC  D7F6               	goto	i2l7281
 25191  002BBE                     i2l7285:
 25192                           
 25193                           ;doprnt.c: 1438: if(flag & 0x03)
 25194  002BBE  C026  F019         	movff	i2printf@flag,??i2_printf
 25195  002BC2  0E03               	movlw	3
 25196  002BC4  1619               	andwf	??i2_printf,f,c
 25197  002BC6  B4D8               	btfsc	status,2,c
 25198  002BC8  D003               	goto	i2l7289
 25199                           
 25200                           ;doprnt.c: 1439: (putch('-') );
 25201  002BCA  0E2D               	movlw	45
 25202  002BCC  ECD9  F02F         	call	i2_putch
 25203  002BD0                     i2l7289:
 25204                           
 25205                           ;doprnt.c: 1469: }
 25206                           ;doprnt.c: 1472: prec = c;
 25207  002BD0  C027  F01D         	movff	i2printf@c,i2printf@prec
 25208                           
 25209                           ;doprnt.c: 1474: while(prec--) {
 25210  002BD4  D027               	goto	i2l7295
 25211  002BD6                     i2l7291:
 25212                           
 25213                           ;doprnt.c: 1478: {
 25214                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 25215  002BD6  501D               	movf	i2printf@prec,w,c
 25216  002BD8  0D02               	mullw	2
 25217  002BDA  0EB8               	movlw	low _dpowers
 25218  002BDC  24F3               	addwf	prodl,w,c
 25219  002BDE  6EF6               	movwf	tblptrl,c
 25220  002BE0  0EFA               	movlw	high _dpowers
 25221  002BE2  20F4               	addwfc	prodh,w,c
 25222  002BE4  6EF7               	movwf	tblptrh,c
 25223  002BE6                     	if	1	;There are 3 active tblptr bytes
 25224  002BE6  6AF8               	clrf	tblptru,c
 25225  002BE8  0E00               	movlw	low (__mediumconst shr (0+16))
 25226  002BEA  22F8               	addwfc	tblptru,f,c
 25227  002BEC                     	endif
 25228  002BEC  0009               	tblrd		*+
 25229  002BEE  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 25230  002BF2  000A               	tblrd		*-
 25231  002BF4  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 25232  002BF8  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 25233  002BFC  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 25234  002C00  ECC9  F02B         	call	i2___lwdiv	;wreg free
 25235  002C04  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 25236  002C08  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 25237  002C0C  0E00               	movlw	0
 25238  002C0E  6E04               	movwf	i2___lwmod@divisor+1,c
 25239  002C10  0E0A               	movlw	10
 25240  002C12  6E03               	movwf	i2___lwmod@divisor,c
 25241  002C14  ECAA  F02C         	call	i2___lwmod	;wreg free
 25242  002C18  5001               	movf	?i2___lwmod,w,c
 25243  002C1A  0F30               	addlw	48
 25244  002C1C  6E27               	movwf	i2printf@c,c
 25245                           
 25246                           ;doprnt.c: 1523: }
 25247                           ;doprnt.c: 1524: (putch(c) );
 25248  002C1E  5027               	movf	i2printf@c,w,c
 25249  002C20  ECD9  F02F         	call	i2_putch
 25250  002C24                     i2l7295:
 25251  002C24  061D               	decf	i2printf@prec,f,c
 25252  002C26  281D               	incf	i2printf@prec,w,c
 25253  002C28  A4D8               	btfss	status,2,c
 25254  002C2A  D7D5               	goto	i2l7291
 25255  002C2C                     i2l7297:
 25256  002C2C  C00D  FFF6         	movff	i2printf@f,tblptrl
 25257  002C30  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 25258  002C34  4A0D               	infsnz	i2printf@f,f,c
 25259  002C36  2A0E               	incf	i2printf@f+1,f,c
 25260  002C38                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 25261  002C38  6AF8               	clrf	tblptru,c
 25262  002C3A                     	endif
 25263  002C3A                     	if	0	;tblptru may be non-zero
 25264  002C3A                     	endif
 25265  002C3A  0008               	tblrd		*
 25266  002C3C  CFF5 F027          	movff	tablat,i2printf@c
 25267  002C40  5027               	movf	i2printf@c,w,c
 25268  002C42  B4D8               	btfsc	status,2,c
 25269  002C44  0012               	return	
 25270  002C46  D64E               	goto	i2l7167
 25271  002C48                     __end_ofi2_printf:
 25272                           	opt stack 0
 25273                           pclatu	equ	0xFFB
 25274                           pclath	equ	0xFFA
 25275                           tblptru	equ	0xFF8
 25276                           tblptrh	equ	0xFF7
 25277                           tblptrl	equ	0xFF6
 25278                           tablat	equ	0xFF5
 25279                           prodh	equ	0xFF4
 25280                           prodl	equ	0xFF3
 25281                           intcon	equ	0xFF2
 25282                           intcon2	equ	0xFF1
 25283                           intcon3	equ	0xFF0
 25284                           indf0	equ	0xFEF
 25285                           postinc0	equ	0xFEE
 25286                           fsr0h	equ	0xFEA
 25287                           fsr0l	equ	0xFE9
 25288                           wreg	equ	0xFE8
 25289                           postdec1	equ	0xFE5
 25290                           fsr1h	equ	0xFE2
 25291                           fsr1l	equ	0xFE1
 25292                           indf2	equ	0xFDF
 25293                           postinc2	equ	0xFDE
 25294                           postdec2	equ	0xFDD
 25295                           fsr2h	equ	0xFDA
 25296                           fsr2l	equ	0xFD9
 25297                           status	equ	0xFD8
 25298                           
 25299 ;; *************** function i2_putch *****************
 25300 ;; Defined at:
 25301 ;;		line 20 in file "lcd.c"
 25302 ;; Parameters:    Size  Location     Type
 25303 ;;  data            1    wreg     unsigned char 
 25304 ;; Auto vars:     Size  Location     Type
 25305 ;;  data            1    2[COMRAM] unsigned char 
 25306 ;; Return value:  Size  Location     Type
 25307 ;;                  1    wreg      void 
 25308 ;; Registers used:
 25309 ;;		wreg, status,2, status,0, cstack
 25310 ;; Tracked objects:
 25311 ;;		On entry : 0/0
 25312 ;;		On exit  : 0/0
 25313 ;;		Unchanged: 0/0
 25314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25316 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25318 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25319 ;;Total ram usage:        1 bytes
 25320 ;; Hardware stack levels used:    1
 25321 ;; Hardware stack levels required when called:    1
 25322 ;; This function calls:
 25323 ;;		i2_lcdNibble
 25324 ;; This function is called by:
 25325 ;;		i2_printf
 25326 ;; This function uses a non-reentrant model
 25327 ;;
 25328                           
 25329                           	psect	text88
 25330  005FB2                     __ptext88:
 25331                           	opt stack 0
 25332  005FB2                     i2_putch:
 25333                           	opt stack 20
 25334                           
 25335                           ;incstack = 0
 25336                           ;i2putch@data stored from wreg
 25337  005FB2  6E03               	movwf	i2putch@data,c
 25338                           
 25339                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 25340  005FB4  848C               	bsf	3980,2,c	;volatile
 25341                           
 25342                           ;lcd.c: 22: lcdNibble(data);
 25343  005FB6  5003               	movf	i2putch@data,w,c
 25344  005FB8  EC9C  F02B         	call	i2_lcdNibble
 25345  005FBC  0012               	return		;funcret
 25346  005FBE                     __end_ofi2_putch:
 25347                           	opt stack 0
 25348                           pclatu	equ	0xFFB
 25349                           pclath	equ	0xFFA
 25350                           tblptru	equ	0xFF8
 25351                           tblptrh	equ	0xFF7
 25352                           tblptrl	equ	0xFF6
 25353                           tablat	equ	0xFF5
 25354                           prodh	equ	0xFF4
 25355                           prodl	equ	0xFF3
 25356                           intcon	equ	0xFF2
 25357                           intcon2	equ	0xFF1
 25358                           intcon3	equ	0xFF0
 25359                           indf0	equ	0xFEF
 25360                           postinc0	equ	0xFEE
 25361                           fsr0h	equ	0xFEA
 25362                           fsr0l	equ	0xFE9
 25363                           wreg	equ	0xFE8
 25364                           postdec1	equ	0xFE5
 25365                           fsr1h	equ	0xFE2
 25366                           fsr1l	equ	0xFE1
 25367                           indf2	equ	0xFDF
 25368                           postinc2	equ	0xFDE
 25369                           postdec2	equ	0xFDD
 25370                           fsr2h	equ	0xFDA
 25371                           fsr2l	equ	0xFD9
 25372                           status	equ	0xFD8
 25373                           
 25374 ;; *************** function i2_isdigit *****************
 25375 ;; Defined at:
 25376 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 25377 ;; Parameters:    Size  Location     Type
 25378 ;;  c               1    wreg     unsigned char 
 25379 ;; Auto vars:     Size  Location     Type
 25380 ;;  c               1    2[COMRAM] unsigned char 
 25381 ;; Return value:  Size  Location     Type
 25382 ;;		None               void
 25383 ;; Registers used:
 25384 ;;		wreg, status,2, status,0
 25385 ;; Tracked objects:
 25386 ;;		On entry : 0/0
 25387 ;;		On exit  : 0/0
 25388 ;;		Unchanged: 0/0
 25389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25391 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25392 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25393 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25394 ;;Total ram usage:        3 bytes
 25395 ;; Hardware stack levels used:    1
 25396 ;; This function calls:
 25397 ;;		Nothing
 25398 ;; This function is called by:
 25399 ;;		i2_printf
 25400 ;; This function uses a non-reentrant model
 25401 ;;
 25402                           
 25403                           	psect	text89
 25404  005ED2                     __ptext89:
 25405                           	opt stack 0
 25406  005ED2                     i2_isdigit:
 25407                           	opt stack 21
 25408                           
 25409                           ;incstack = 0
 25410                           ;i2isdigit@c stored from wreg
 25411  005ED2  6E03               	movwf	i2isdigit@c,c
 25412  005ED4  0E00               	movlw	0
 25413  005ED6  6E02               	movwf	i2_isdigit$2072,c
 25414  005ED8  0E3A               	movlw	58
 25415  005EDA  6003               	cpfslt	i2isdigit@c,c
 25416  005EDC  D005               	goto	i2l6821
 25417  005EDE  0E2F               	movlw	47
 25418  005EE0  6403               	cpfsgt	i2isdigit@c,c
 25419  005EE2  D002               	goto	i2l6821
 25420  005EE4  0E01               	movlw	1
 25421  005EE6  6E02               	movwf	i2_isdigit$2072,c
 25422  005EE8                     i2l6821:
 25423  005EE8  C002  F001         	movff	i2_isdigit$2072,??i2_isdigit
 25424  005EEC  3001               	rrcf	??i2_isdigit,w,c
 25425  005EEE  0012               	return	
 25426  005EF0                     __end_ofi2_isdigit:
 25427                           	opt stack 0
 25428                           pclatu	equ	0xFFB
 25429                           pclath	equ	0xFFA
 25430                           tblptru	equ	0xFF8
 25431                           tblptrh	equ	0xFF7
 25432                           tblptrl	equ	0xFF6
 25433                           tablat	equ	0xFF5
 25434                           prodh	equ	0xFF4
 25435                           prodl	equ	0xFF3
 25436                           intcon	equ	0xFF2
 25437                           intcon2	equ	0xFF1
 25438                           intcon3	equ	0xFF0
 25439                           indf0	equ	0xFEF
 25440                           postinc0	equ	0xFEE
 25441                           fsr0h	equ	0xFEA
 25442                           fsr0l	equ	0xFE9
 25443                           wreg	equ	0xFE8
 25444                           postdec1	equ	0xFE5
 25445                           fsr1h	equ	0xFE2
 25446                           fsr1l	equ	0xFE1
 25447                           indf2	equ	0xFDF
 25448                           postinc2	equ	0xFDE
 25449                           postdec2	equ	0xFDD
 25450                           fsr2h	equ	0xFDA
 25451                           fsr2l	equ	0xFD9
 25452                           status	equ	0xFD8
 25453                           
 25454 ;; *************** function i2___wmul *****************
 25455 ;; Defined at:
 25456 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 25457 ;; Parameters:    Size  Location     Type
 25458 ;;  multiplier      2    0[COMRAM] unsigned int 
 25459 ;;  multiplicand    2    2[COMRAM] unsigned int 
 25460 ;; Auto vars:     Size  Location     Type
 25461 ;;  __wmul          2    4[COMRAM] unsigned int 
 25462 ;; Return value:  Size  Location     Type
 25463 ;;                  2    0[COMRAM] unsigned int 
 25464 ;; Registers used:
 25465 ;;		wreg, status,2, status,0, prodl, prodh
 25466 ;; Tracked objects:
 25467 ;;		On entry : 0/0
 25468 ;;		On exit  : 0/0
 25469 ;;		Unchanged: 0/0
 25470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25471 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25472 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25474 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25475 ;;Total ram usage:        6 bytes
 25476 ;; Hardware stack levels used:    1
 25477 ;; This function calls:
 25478 ;;		Nothing
 25479 ;; This function is called by:
 25480 ;;		_printSortTimer
 25481 ;;		_retrieveLog
 25482 ;;		i2_printf
 25483 ;; This function uses a non-reentrant model
 25484 ;;
 25485                           
 25486                           	psect	text90
 25487  005E1E                     __ptext90:
 25488                           	opt stack 0
 25489  005E1E                     i2___wmul:
 25490                           	opt stack 21
 25491                           
 25492                           ;incstack = 0
 25493  005E1E  5001               	movf	i2___wmul@multiplier,w,c
 25494  005E20  0203               	mulwf	i2___wmul@multiplicand,c
 25495  005E22  CFF3 F005          	movff	prodl,i2___wmul@product
 25496  005E26  CFF4 F006          	movff	prodh,i2___wmul@product+1
 25497  005E2A  5001               	movf	i2___wmul@multiplier,w,c
 25498  005E2C  0204               	mulwf	i2___wmul@multiplicand+1,c
 25499  005E2E  50F3               	movf	prodl,w,c
 25500  005E30  2606               	addwf	i2___wmul@product+1,f,c
 25501  005E32  5002               	movf	i2___wmul@multiplier+1,w,c
 25502  005E34  0203               	mulwf	i2___wmul@multiplicand,c
 25503  005E36  50F3               	movf	prodl,w,c
 25504  005E38  2606               	addwf	i2___wmul@product+1,f,c
 25505  005E3A  C005  F001         	movff	i2___wmul@product,?i2___wmul
 25506  005E3E  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 25507  005E42  0012               	return	
 25508  005E44                     __end_ofi2___wmul:
 25509                           	opt stack 0
 25510                           pclatu	equ	0xFFB
 25511                           pclath	equ	0xFFA
 25512                           tblptru	equ	0xFF8
 25513                           tblptrh	equ	0xFF7
 25514                           tblptrl	equ	0xFF6
 25515                           tablat	equ	0xFF5
 25516                           prodh	equ	0xFF4
 25517                           prodl	equ	0xFF3
 25518                           intcon	equ	0xFF2
 25519                           intcon2	equ	0xFF1
 25520                           intcon3	equ	0xFF0
 25521                           indf0	equ	0xFEF
 25522                           postinc0	equ	0xFEE
 25523                           fsr0h	equ	0xFEA
 25524                           fsr0l	equ	0xFE9
 25525                           wreg	equ	0xFE8
 25526                           postdec1	equ	0xFE5
 25527                           fsr1h	equ	0xFE2
 25528                           fsr1l	equ	0xFE1
 25529                           indf2	equ	0xFDF
 25530                           postinc2	equ	0xFDE
 25531                           postdec2	equ	0xFDD
 25532                           fsr2h	equ	0xFDA
 25533                           fsr2l	equ	0xFD9
 25534                           status	equ	0xFD8
 25535                           
 25536 ;; *************** function i2___lwmod *****************
 25537 ;; Defined at:
 25538 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 25539 ;; Parameters:    Size  Location     Type
 25540 ;;  dividend        2    0[COMRAM] unsigned int 
 25541 ;;  divisor         2    2[COMRAM] unsigned int 
 25542 ;; Auto vars:     Size  Location     Type
 25543 ;;  __lwmod         1    4[COMRAM] unsigned char 
 25544 ;; Return value:  Size  Location     Type
 25545 ;;                  2    0[COMRAM] unsigned int 
 25546 ;; Registers used:
 25547 ;;		wreg, status,2, status,0
 25548 ;; Tracked objects:
 25549 ;;		On entry : 0/0
 25550 ;;		On exit  : 0/0
 25551 ;;		Unchanged: 0/0
 25552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25553 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25554 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25556 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25557 ;;Total ram usage:        5 bytes
 25558 ;; Hardware stack levels used:    1
 25559 ;; This function calls:
 25560 ;;		Nothing
 25561 ;; This function is called by:
 25562 ;;		_printSortTimer
 25563 ;;		i2_printf
 25564 ;; This function uses a non-reentrant model
 25565 ;;
 25566                           
 25567                           	psect	text91
 25568  005954                     __ptext91:
 25569                           	opt stack 0
 25570  005954                     i2___lwmod:
 25571                           	opt stack 21
 25572                           
 25573                           ;incstack = 0
 25574  005954  5003               	movf	i2___lwmod@divisor,w,c
 25575  005956  1004               	iorwf	i2___lwmod@divisor+1,w,c
 25576  005958  B4D8               	btfsc	status,2,c
 25577  00595A  D018               	goto	i2l2026
 25578  00595C  0E01               	movlw	1
 25579  00595E  6E05               	movwf	i2___lwmod@counter,c
 25580  005960  D004               	goto	i2l6853
 25581  005962                     i2l6851:
 25582  005962  90D8               	bcf	status,0,c
 25583  005964  3603               	rlcf	i2___lwmod@divisor,f,c
 25584  005966  3604               	rlcf	i2___lwmod@divisor+1,f,c
 25585  005968  2A05               	incf	i2___lwmod@counter,f,c
 25586  00596A                     i2l6853:
 25587  00596A  AE04               	btfss	i2___lwmod@divisor+1,7,c
 25588  00596C  D7FA               	goto	i2l6851
 25589  00596E                     i2l6855:
 25590  00596E  5003               	movf	i2___lwmod@divisor,w,c
 25591  005970  5C01               	subwf	i2___lwmod@dividend,w,c
 25592  005972  5004               	movf	i2___lwmod@divisor+1,w,c
 25593  005974  5802               	subwfb	i2___lwmod@dividend+1,w,c
 25594  005976  A0D8               	btfss	status,0,c
 25595  005978  D004               	goto	i2l6859
 25596  00597A  5003               	movf	i2___lwmod@divisor,w,c
 25597  00597C  5E01               	subwf	i2___lwmod@dividend,f,c
 25598  00597E  5004               	movf	i2___lwmod@divisor+1,w,c
 25599  005980  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 25600  005982                     i2l6859:
 25601  005982  90D8               	bcf	status,0,c
 25602  005984  3204               	rrcf	i2___lwmod@divisor+1,f,c
 25603  005986  3203               	rrcf	i2___lwmod@divisor,f,c
 25604  005988  2E05               	decfsz	i2___lwmod@counter,f,c
 25605  00598A  D7F1               	goto	i2l6855
 25606  00598C                     i2l2026:
 25607  00598C  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 25608  005990  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 25609  005994  0012               	return		;funcret
 25610  005996                     __end_ofi2___lwmod:
 25611                           	opt stack 0
 25612                           pclatu	equ	0xFFB
 25613                           pclath	equ	0xFFA
 25614                           tblptru	equ	0xFF8
 25615                           tblptrh	equ	0xFF7
 25616                           tblptrl	equ	0xFF6
 25617                           tablat	equ	0xFF5
 25618                           prodh	equ	0xFF4
 25619                           prodl	equ	0xFF3
 25620                           intcon	equ	0xFF2
 25621                           intcon2	equ	0xFF1
 25622                           intcon3	equ	0xFF0
 25623                           indf0	equ	0xFEF
 25624                           postinc0	equ	0xFEE
 25625                           fsr0h	equ	0xFEA
 25626                           fsr0l	equ	0xFE9
 25627                           wreg	equ	0xFE8
 25628                           postdec1	equ	0xFE5
 25629                           fsr1h	equ	0xFE2
 25630                           fsr1l	equ	0xFE1
 25631                           indf2	equ	0xFDF
 25632                           postinc2	equ	0xFDE
 25633                           postdec2	equ	0xFDD
 25634                           fsr2h	equ	0xFDA
 25635                           fsr2l	equ	0xFD9
 25636                           status	equ	0xFD8
 25637                           
 25638 ;; *************** function i2___lwdiv *****************
 25639 ;; Defined at:
 25640 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 25641 ;; Parameters:    Size  Location     Type
 25642 ;;  dividend        2    5[COMRAM] unsigned int 
 25643 ;;  divisor         2    7[COMRAM] unsigned int 
 25644 ;; Auto vars:     Size  Location     Type
 25645 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 25646 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 25647 ;; Return value:  Size  Location     Type
 25648 ;;                  2    5[COMRAM] unsigned int 
 25649 ;; Registers used:
 25650 ;;		wreg, status,2, status,0
 25651 ;; Tracked objects:
 25652 ;;		On entry : 0/0
 25653 ;;		On exit  : 0/0
 25654 ;;		Unchanged: 0/0
 25655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25656 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25657 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25659 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25660 ;;Total ram usage:        7 bytes
 25661 ;; Hardware stack levels used:    1
 25662 ;; This function calls:
 25663 ;;		Nothing
 25664 ;; This function is called by:
 25665 ;;		_printSortTimer
 25666 ;;		i2_printf
 25667 ;; This function uses a non-reentrant model
 25668 ;;
 25669                           
 25670                           	psect	text92
 25671  005792                     __ptext92:
 25672                           	opt stack 0
 25673  005792                     i2___lwdiv:
 25674                           	opt stack 21
 25675                           
 25676                           ;incstack = 0
 25677  005792  0E00               	movlw	0
 25678  005794  6E0B               	movwf	i2___lwdiv@quotient+1,c
 25679  005796  0E00               	movlw	0
 25680  005798  6E0A               	movwf	i2___lwdiv@quotient,c
 25681  00579A  5008               	movf	i2___lwdiv@divisor,w,c
 25682  00579C  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 25683  00579E  B4D8               	btfsc	status,2,c
 25684  0057A0  D01C               	goto	i2l2016
 25685  0057A2  0E01               	movlw	1
 25686  0057A4  6E0C               	movwf	i2___lwdiv@counter,c
 25687  0057A6  D004               	goto	i2l6833
 25688  0057A8                     i2l6831:
 25689  0057A8  90D8               	bcf	status,0,c
 25690  0057AA  3608               	rlcf	i2___lwdiv@divisor,f,c
 25691  0057AC  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 25692  0057AE  2A0C               	incf	i2___lwdiv@counter,f,c
 25693  0057B0                     i2l6833:
 25694  0057B0  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 25695  0057B2  D7FA               	goto	i2l6831
 25696  0057B4                     i2l6835:
 25697  0057B4  90D8               	bcf	status,0,c
 25698  0057B6  360A               	rlcf	i2___lwdiv@quotient,f,c
 25699  0057B8  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 25700  0057BA  5008               	movf	i2___lwdiv@divisor,w,c
 25701  0057BC  5C06               	subwf	i2___lwdiv@dividend,w,c
 25702  0057BE  5009               	movf	i2___lwdiv@divisor+1,w,c
 25703  0057C0  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 25704  0057C2  A0D8               	btfss	status,0,c
 25705  0057C4  D005               	goto	i2l6843
 25706  0057C6  5008               	movf	i2___lwdiv@divisor,w,c
 25707  0057C8  5E06               	subwf	i2___lwdiv@dividend,f,c
 25708  0057CA  5009               	movf	i2___lwdiv@divisor+1,w,c
 25709  0057CC  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 25710  0057CE  800A               	bsf	i2___lwdiv@quotient,0,c
 25711  0057D0                     i2l6843:
 25712  0057D0  90D8               	bcf	status,0,c
 25713  0057D2  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 25714  0057D4  3208               	rrcf	i2___lwdiv@divisor,f,c
 25715  0057D6  2E0C               	decfsz	i2___lwdiv@counter,f,c
 25716  0057D8  D7ED               	goto	i2l6835
 25717  0057DA                     i2l2016:
 25718  0057DA  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 25719  0057DE  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 25720  0057E2  0012               	return		;funcret
 25721  0057E4                     __end_ofi2___lwdiv:
 25722                           	opt stack 0
 25723                           pclatu	equ	0xFFB
 25724                           pclath	equ	0xFFA
 25725                           tblptru	equ	0xFF8
 25726                           tblptrh	equ	0xFF7
 25727                           tblptrl	equ	0xFF6
 25728                           tablat	equ	0xFF5
 25729                           prodh	equ	0xFF4
 25730                           prodl	equ	0xFF3
 25731                           intcon	equ	0xFF2
 25732                           intcon2	equ	0xFF1
 25733                           intcon3	equ	0xFF0
 25734                           indf0	equ	0xFEF
 25735                           postinc0	equ	0xFEE
 25736                           fsr0h	equ	0xFEA
 25737                           fsr0l	equ	0xFE9
 25738                           wreg	equ	0xFE8
 25739                           postdec1	equ	0xFE5
 25740                           fsr1h	equ	0xFE2
 25741                           fsr1l	equ	0xFE1
 25742                           indf2	equ	0xFDF
 25743                           postinc2	equ	0xFDE
 25744                           postdec2	equ	0xFDD
 25745                           fsr2h	equ	0xFDA
 25746                           fsr2l	equ	0xFD9
 25747                           status	equ	0xFD8
 25748                           
 25749 ;; *************** function i2_lcdInst *****************
 25750 ;; Defined at:
 25751 ;;		line 15 in file "lcd.c"
 25752 ;; Parameters:    Size  Location     Type
 25753 ;;  data            1    wreg     unsigned char 
 25754 ;; Auto vars:     Size  Location     Type
 25755 ;;  data            1    2[COMRAM] unsigned char 
 25756 ;; Return value:  Size  Location     Type
 25757 ;;                  1    wreg      void 
 25758 ;; Registers used:
 25759 ;;		wreg, status,2, status,0, cstack
 25760 ;; Tracked objects:
 25761 ;;		On entry : 0/0
 25762 ;;		On exit  : 0/0
 25763 ;;		Unchanged: 0/0
 25764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25766 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25768 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25769 ;;Total ram usage:        1 bytes
 25770 ;; Hardware stack levels used:    1
 25771 ;; Hardware stack levels required when called:    1
 25772 ;; This function calls:
 25773 ;;		i2_lcdNibble
 25774 ;; This function is called by:
 25775 ;;		_change_state_to_menu_11
 25776 ;;		_change_state_to_menu_23
 25777 ;;		_change_state_to_logs_11
 25778 ;;		_change_state_to_logs_12
 25779 ;;		_change_state_to_logs_22
 25780 ;;		_change_state_to_logs_23
 25781 ;;		_change_state_to_logs_33
 25782 ;;		_change_state_to_logs_34
 25783 ;;		_printSortTimer
 25784 ;;		i2_change_state_to_menu_start
 25785 ;;		i2_change_state_to_menu_12
 25786 ;;		i2_change_state_to_menu_22
 25787 ;;		i2_printRTC
 25788 ;; This function uses a non-reentrant model
 25789 ;;
 25790                           
 25791                           	psect	text93
 25792  005FBE                     __ptext93:
 25793                           	opt stack 0
 25794  005FBE                     i2_lcdInst:
 25795                           	opt stack 20
 25796                           
 25797                           ;incstack = 0
 25798                           ;i2lcdInst@data stored from wreg
 25799  005FBE  6E03               	movwf	i2lcdInst@data,c
 25800                           
 25801                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 25802  005FC0  948C               	bcf	3980,2,c	;volatile
 25803                           
 25804                           ;lcd.c: 17: lcdNibble(data);
 25805  005FC2  5003               	movf	i2lcdInst@data,w,c
 25806  005FC4  EC9C  F02B         	call	i2_lcdNibble
 25807  005FC8  0012               	return		;funcret
 25808  005FCA                     __end_ofi2_lcdInst:
 25809                           	opt stack 0
 25810                           pclatu	equ	0xFFB
 25811                           pclath	equ	0xFFA
 25812                           tblptru	equ	0xFF8
 25813                           tblptrh	equ	0xFF7
 25814                           tblptrl	equ	0xFF6
 25815                           tablat	equ	0xFF5
 25816                           prodh	equ	0xFF4
 25817                           prodl	equ	0xFF3
 25818                           intcon	equ	0xFF2
 25819                           intcon2	equ	0xFF1
 25820                           intcon3	equ	0xFF0
 25821                           indf0	equ	0xFEF
 25822                           postinc0	equ	0xFEE
 25823                           fsr0h	equ	0xFEA
 25824                           fsr0l	equ	0xFE9
 25825                           wreg	equ	0xFE8
 25826                           postdec1	equ	0xFE5
 25827                           fsr1h	equ	0xFE2
 25828                           fsr1l	equ	0xFE1
 25829                           indf2	equ	0xFDF
 25830                           postinc2	equ	0xFDE
 25831                           postdec2	equ	0xFDD
 25832                           fsr2h	equ	0xFDA
 25833                           fsr2l	equ	0xFD9
 25834                           status	equ	0xFD8
 25835                           
 25836 ;; *************** function i2_lcdNibble *****************
 25837 ;; Defined at:
 25838 ;;		line 25 in file "lcd.c"
 25839 ;; Parameters:    Size  Location     Type
 25840 ;;  data            1    wreg     unsigned char 
 25841 ;; Auto vars:     Size  Location     Type
 25842 ;;  data            1    1[COMRAM] unsigned char 
 25843 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 25844 ;; Return value:  Size  Location     Type
 25845 ;;                  1    wreg      void 
 25846 ;; Registers used:
 25847 ;;		wreg, status,2, status,0
 25848 ;; Tracked objects:
 25849 ;;		On entry : 0/0
 25850 ;;		On exit  : 0/0
 25851 ;;		Unchanged: 0/0
 25852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25854 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25856 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25857 ;;Total ram usage:        2 bytes
 25858 ;; Hardware stack levels used:    1
 25859 ;; This function calls:
 25860 ;;		Nothing
 25861 ;; This function is called by:
 25862 ;;		i2_lcdInst
 25863 ;;		i2_putch
 25864 ;; This function uses a non-reentrant model
 25865 ;;
 25866                           
 25867                           	psect	text94
 25868  005738                     __ptext94:
 25869                           	opt stack 0
 25870  005738                     i2_lcdNibble:
 25871                           	opt stack 20
 25872                           
 25873                           ;incstack = 0
 25874                           ;i2lcdNibble@data stored from wreg
 25875  005738  6E02               	movwf	i2lcdNibble@data,c
 25876                           
 25877                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 25878  00573A  9EF2               	bcf	intcon,7,c	;volatile
 25879                           
 25880                           ;lcd.c: 28: char temp = data & 0xF0;
 25881  00573C  5002               	movf	i2lcdNibble@data,w,c
 25882  00573E  0BF0               	andlw	240
 25883  005740  6E01               	movwf	i2lcdNibble@temp,c
 25884                           
 25885                           ;lcd.c: 29: LATD = LATD & 0x0F;
 25886  005742  508C               	movf	3980,w,c	;volatile
 25887  005744  0B0F               	andlw	15
 25888  005746  6E8C               	movwf	3980,c	;volatile
 25889                           
 25890                           ;lcd.c: 30: LATD = temp | LATD;
 25891  005748  5001               	movf	i2lcdNibble@temp,w,c
 25892  00574A  108C               	iorwf	3980,w,c	;volatile
 25893  00574C  6E8C               	movwf	3980,c	;volatile
 25894                           
 25895                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 25896  00574E  868C               	bsf	3980,3,c	;volatile
 25897                           
 25898                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25899  005750  0E42               	movlw	66
 25900  005752                     i2u1226_47:
 25901  005752  2EE8               	decfsz	wreg,f,c
 25902  005754  D7FE               	bra	i2u1226_47
 25903  005756  D000               	nop2	
 25904                           
 25905                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 25906  005758  968C               	bcf	3980,3,c	;volatile
 25907                           
 25908                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25909  00575A  0E42               	movlw	66
 25910  00575C                     i2u1227_47:
 25911  00575C  2EE8               	decfsz	wreg,f,c
 25912  00575E  D7FE               	bra	i2u1227_47
 25913  005760  D000               	nop2	
 25914                           
 25915                           ;lcd.c: 37: data = data << 4;
 25916  005762  3802               	swapf	i2lcdNibble@data,w,c
 25917  005764  0BF0               	andlw	240
 25918  005766  6E02               	movwf	i2lcdNibble@data,c
 25919                           
 25920                           ;lcd.c: 39: temp = data & 0xF0;
 25921  005768  5002               	movf	i2lcdNibble@data,w,c
 25922  00576A  0BF0               	andlw	240
 25923  00576C  6E01               	movwf	i2lcdNibble@temp,c
 25924                           
 25925                           ;lcd.c: 40: LATD = LATD & 0x0F;
 25926  00576E  508C               	movf	3980,w,c	;volatile
 25927  005770  0B0F               	andlw	15
 25928  005772  6E8C               	movwf	3980,c	;volatile
 25929                           
 25930                           ;lcd.c: 41: LATD = temp | LATD;
 25931  005774  5001               	movf	i2lcdNibble@temp,w,c
 25932  005776  108C               	iorwf	3980,w,c	;volatile
 25933  005778  6E8C               	movwf	3980,c	;volatile
 25934                           
 25935                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 25936  00577A  868C               	bsf	3980,3,c	;volatile
 25937                           
 25938                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25939  00577C  0E42               	movlw	66
 25940  00577E                     i2u1228_47:
 25941  00577E  2EE8               	decfsz	wreg,f,c
 25942  005780  D7FE               	bra	i2u1228_47
 25943  005782  D000               	nop2	
 25944                           
 25945                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 25946  005784  968C               	bcf	3980,3,c	;volatile
 25947                           
 25948                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25949  005786  0E42               	movlw	66
 25950  005788                     i2u1229_47:
 25951  005788  2EE8               	decfsz	wreg,f,c
 25952  00578A  D7FE               	bra	i2u1229_47
 25953  00578C  D000               	nop2	
 25954                           
 25955                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 25956  00578E  8EF2               	bsf	intcon,7,c	;volatile
 25957  005790  0012               	return		;funcret
 25958  005792                     __end_ofi2_lcdNibble:
 25959                           	opt stack 0
 25960                           pclatu	equ	0xFFB
 25961                           pclath	equ	0xFFA
 25962                           tblptru	equ	0xFF8
 25963                           tblptrh	equ	0xFF7
 25964                           tblptrl	equ	0xFF6
 25965                           tablat	equ	0xFF5
 25966                           prodh	equ	0xFF4
 25967                           prodl	equ	0xFF3
 25968                           intcon	equ	0xFF2
 25969                           intcon2	equ	0xFF1
 25970                           intcon3	equ	0xFF0
 25971                           indf0	equ	0xFEF
 25972                           postinc0	equ	0xFEE
 25973                           fsr0h	equ	0xFEA
 25974                           fsr0l	equ	0xFE9
 25975                           wreg	equ	0xFE8
 25976                           postdec1	equ	0xFE5
 25977                           fsr1h	equ	0xFE2
 25978                           fsr1l	equ	0xFE1
 25979                           indf2	equ	0xFDF
 25980                           postinc2	equ	0xFDE
 25981                           postdec2	equ	0xFDD
 25982                           fsr2h	equ	0xFDA
 25983                           fsr2l	equ	0xFD9
 25984                           status	equ	0xFD8
 25985                           
 25986 ;; *************** function i2_getRTC *****************
 25987 ;; Defined at:
 25988 ;;		line 44 in file "RTC.c"
 25989 ;; Parameters:    Size  Location     Type
 25990 ;;		None
 25991 ;; Auto vars:     Size  Location     Type
 25992 ;;  getRTC          2    3[COMRAM] int 
 25993 ;; Return value:  Size  Location     Type
 25994 ;;                  1    wreg      void 
 25995 ;; Registers used:
 25996 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25997 ;; Tracked objects:
 25998 ;;		On entry : 0/0
 25999 ;;		On exit  : 0/0
 26000 ;;		Unchanged: 0/0
 26001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26003 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26005 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26006 ;;Total ram usage:        2 bytes
 26007 ;; Hardware stack levels used:    1
 26008 ;; Hardware stack levels required when called:    2
 26009 ;; This function calls:
 26010 ;;		i2_I2C_Master_Read
 26011 ;;		i2_I2C_Master_Start
 26012 ;;		i2_I2C_Master_Stop
 26013 ;;		i2_I2C_Master_Write
 26014 ;; This function is called by:
 26015 ;;		_printSortTimer
 26016 ;;		i2_printRTC
 26017 ;; This function uses a non-reentrant model
 26018 ;;
 26019                           
 26020                           	psect	text95
 26021  005400                     __ptext95:
 26022                           	opt stack 0
 26023  005400                     i2_getRTC:
 26024                           	opt stack 19
 26025                           
 26026                           ;RTC.c: 48: I2C_Master_Start();
 26027                           
 26028                           ;incstack = 0
 26029  005400  ECFF  F02F         	call	i2_I2C_Master_Start	;wreg free
 26030                           
 26031                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 26032  005404  0E00               	movlw	0
 26033  005406  6E03               	movwf	i2I2C_Master_Write@d+1,c
 26034  005408  0ED0               	movlw	208
 26035  00540A  6E02               	movwf	i2I2C_Master_Write@d,c
 26036  00540C  ECEA  F02F         	call	i2_I2C_Master_Write	;wreg free
 26037                           
 26038                           ;RTC.c: 50: I2C_Master_Write(0x00);
 26039  005410  0E00               	movlw	0
 26040  005412  6E03               	movwf	i2I2C_Master_Write@d+1,c
 26041  005414  0E00               	movlw	0
 26042  005416  6E02               	movwf	i2I2C_Master_Write@d,c
 26043  005418  ECEA  F02F         	call	i2_I2C_Master_Write	;wreg free
 26044                           
 26045                           ;RTC.c: 51: I2C_Master_Stop();
 26046  00541C  ECFB  F02F         	call	i2_I2C_Master_Stop	;wreg free
 26047                           
 26048                           ;RTC.c: 54: I2C_Master_Start();
 26049  005420  ECFF  F02F         	call	i2_I2C_Master_Start	;wreg free
 26050                           
 26051                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 26052  005424  0E00               	movlw	0
 26053  005426  6E03               	movwf	i2I2C_Master_Write@d+1,c
 26054  005428  0ED1               	movlw	209
 26055  00542A  6E02               	movwf	i2I2C_Master_Write@d,c
 26056  00542C  ECEA  F02F         	call	i2_I2C_Master_Write	;wreg free
 26057                           
 26058                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 26059  005430  0E00               	movlw	0
 26060  005432  6E05               	movwf	i2getRTC@i+1,c
 26061  005434  0E00               	movlw	0
 26062  005436  6E04               	movwf	i2getRTC@i,c
 26063  005438                     i2l7139:
 26064  005438  BE05               	btfsc	i2getRTC@i+1,7,c
 26065  00543A  D006               	goto	i2l7143
 26066  00543C  5005               	movf	i2getRTC@i+1,w,c
 26067  00543E  E111               	bnz	i2l7149
 26068  005440  0E06               	movlw	6
 26069  005442  5C04               	subwf	i2getRTC@i,w,c
 26070  005444  B0D8               	btfsc	status,0,c
 26071  005446  D00D               	goto	i2l7149
 26072  005448                     i2l7143:
 26073                           
 26074                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 26075  005448  0E1C               	movlw	low _time
 26076  00544A  2404               	addwf	i2getRTC@i,w,c
 26077  00544C  6ED9               	movwf	fsr2l,c
 26078  00544E  0E01               	movlw	high _time
 26079  005450  2005               	addwfc	i2getRTC@i+1,w,c
 26080  005452  6EDA               	movwf	fsr2h,c
 26081  005454  0E01               	movlw	1
 26082  005456  EC22  F02F         	call	i2_I2C_Master_Read
 26083  00545A  6EDF               	movwf	indf2,c
 26084  00545C  4A04               	infsnz	i2getRTC@i,f,c
 26085  00545E  2A05               	incf	i2getRTC@i+1,f,c
 26086  005460  D7EB               	goto	i2l7139
 26087  005462                     i2l7149:
 26088                           
 26089                           ;RTC.c: 58: }
 26090                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 26091  005462  0E00               	movlw	0
 26092  005464  EC22  F02F         	call	i2_I2C_Master_Read
 26093  005468  0101               	movlb	1	; () banked
 26094  00546A  6F22               	movwf	(_time+6)& (0+255),b
 26095                           
 26096                           ;RTC.c: 60: I2C_Master_Stop();
 26097  00546C  ECFB  F02F         	call	i2_I2C_Master_Stop	;wreg free
 26098  005470  0012               	return		;funcret
 26099  005472                     __end_ofi2_getRTC:
 26100                           	opt stack 0
 26101                           pclatu	equ	0xFFB
 26102                           pclath	equ	0xFFA
 26103                           tblptru	equ	0xFF8
 26104                           tblptrh	equ	0xFF7
 26105                           tblptrl	equ	0xFF6
 26106                           tablat	equ	0xFF5
 26107                           prodh	equ	0xFF4
 26108                           prodl	equ	0xFF3
 26109                           intcon	equ	0xFF2
 26110                           intcon2	equ	0xFF1
 26111                           intcon3	equ	0xFF0
 26112                           indf0	equ	0xFEF
 26113                           postinc0	equ	0xFEE
 26114                           fsr0h	equ	0xFEA
 26115                           fsr0l	equ	0xFE9
 26116                           wreg	equ	0xFE8
 26117                           postdec1	equ	0xFE5
 26118                           fsr1h	equ	0xFE2
 26119                           fsr1l	equ	0xFE1
 26120                           indf2	equ	0xFDF
 26121                           postinc2	equ	0xFDE
 26122                           postdec2	equ	0xFDD
 26123                           fsr2h	equ	0xFDA
 26124                           fsr2l	equ	0xFD9
 26125                           status	equ	0xFD8
 26126                           
 26127 ;; *************** function i2_I2C_Master_Write *****************
 26128 ;; Defined at:
 26129 ;;		line 49 in file "I2C.c"
 26130 ;; Parameters:    Size  Location     Type
 26131 ;;  d               2    1[COMRAM] unsigned int 
 26132 ;; Auto vars:     Size  Location     Type
 26133 ;;		None
 26134 ;; Return value:  Size  Location     Type
 26135 ;;                  1    wreg      void 
 26136 ;; Registers used:
 26137 ;;		wreg, status,2, status,0, cstack
 26138 ;; Tracked objects:
 26139 ;;		On entry : 0/0
 26140 ;;		On exit  : 0/0
 26141 ;;		Unchanged: 0/0
 26142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26143 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26146 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26147 ;;Total ram usage:        2 bytes
 26148 ;; Hardware stack levels used:    1
 26149 ;; Hardware stack levels required when called:    1
 26150 ;; This function calls:
 26151 ;;		i2_I2C_Master_Wait
 26152 ;; This function is called by:
 26153 ;;		i2_getRTC
 26154 ;; This function uses a non-reentrant model
 26155 ;;
 26156                           
 26157                           	psect	text96
 26158  005FD4                     __ptext96:
 26159                           	opt stack 0
 26160  005FD4                     i2_I2C_Master_Write:
 26161                           	opt stack 19
 26162                           
 26163                           ;I2C.c: 51: I2C_Master_Wait();
 26164                           
 26165                           ;incstack = 0
 26166  005FD4  ECC0  F02F         	call	i2_I2C_Master_Wait	;wreg free
 26167                           
 26168                           ;I2C.c: 52: SSPBUF = d;
 26169  005FD8  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 26170  005FDC  0012               	return		;funcret
 26171  005FDE                     __end_ofi2_I2C_Master_Write:
 26172                           	opt stack 0
 26173                           pclatu	equ	0xFFB
 26174                           pclath	equ	0xFFA
 26175                           tblptru	equ	0xFF8
 26176                           tblptrh	equ	0xFF7
 26177                           tblptrl	equ	0xFF6
 26178                           tablat	equ	0xFF5
 26179                           prodh	equ	0xFF4
 26180                           prodl	equ	0xFF3
 26181                           intcon	equ	0xFF2
 26182                           intcon2	equ	0xFF1
 26183                           intcon3	equ	0xFF0
 26184                           indf0	equ	0xFEF
 26185                           postinc0	equ	0xFEE
 26186                           fsr0h	equ	0xFEA
 26187                           fsr0l	equ	0xFE9
 26188                           wreg	equ	0xFE8
 26189                           postdec1	equ	0xFE5
 26190                           fsr1h	equ	0xFE2
 26191                           fsr1l	equ	0xFE1
 26192                           indf2	equ	0xFDF
 26193                           postinc2	equ	0xFDE
 26194                           postdec2	equ	0xFDD
 26195                           fsr2h	equ	0xFDA
 26196                           fsr2l	equ	0xFD9
 26197                           status	equ	0xFD8
 26198                           
 26199 ;; *************** function i2_I2C_Master_Stop *****************
 26200 ;; Defined at:
 26201 ;;		line 43 in file "I2C.c"
 26202 ;; Parameters:    Size  Location     Type
 26203 ;;		None
 26204 ;; Auto vars:     Size  Location     Type
 26205 ;;		None
 26206 ;; Return value:  Size  Location     Type
 26207 ;;                  1    wreg      void 
 26208 ;; Registers used:
 26209 ;;		wreg, status,2, status,0, cstack
 26210 ;; Tracked objects:
 26211 ;;		On entry : 0/0
 26212 ;;		On exit  : 0/0
 26213 ;;		Unchanged: 0/0
 26214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26218 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26219 ;;Total ram usage:        0 bytes
 26220 ;; Hardware stack levels used:    1
 26221 ;; Hardware stack levels required when called:    1
 26222 ;; This function calls:
 26223 ;;		i2_I2C_Master_Wait
 26224 ;; This function is called by:
 26225 ;;		i2_getRTC
 26226 ;; This function uses a non-reentrant model
 26227 ;;
 26228                           
 26229                           	psect	text97
 26230  005FF6                     __ptext97:
 26231                           	opt stack 0
 26232  005FF6                     i2_I2C_Master_Stop:
 26233                           	opt stack 19
 26234                           
 26235                           ;I2C.c: 45: I2C_Master_Wait();
 26236                           
 26237                           ;incstack = 0
 26238  005FF6  ECC0  F02F         	call	i2_I2C_Master_Wait	;wreg free
 26239                           
 26240                           ;I2C.c: 46: PEN = 1;
 26241  005FFA  84C5               	bsf	4037,2,c	;volatile
 26242  005FFC  0012               	return		;funcret
 26243  005FFE                     __end_ofi2_I2C_Master_Stop:
 26244                           	opt stack 0
 26245                           pclatu	equ	0xFFB
 26246                           pclath	equ	0xFFA
 26247                           tblptru	equ	0xFF8
 26248                           tblptrh	equ	0xFF7
 26249                           tblptrl	equ	0xFF6
 26250                           tablat	equ	0xFF5
 26251                           prodh	equ	0xFF4
 26252                           prodl	equ	0xFF3
 26253                           intcon	equ	0xFF2
 26254                           intcon2	equ	0xFF1
 26255                           intcon3	equ	0xFF0
 26256                           indf0	equ	0xFEF
 26257                           postinc0	equ	0xFEE
 26258                           fsr0h	equ	0xFEA
 26259                           fsr0l	equ	0xFE9
 26260                           wreg	equ	0xFE8
 26261                           postdec1	equ	0xFE5
 26262                           fsr1h	equ	0xFE2
 26263                           fsr1l	equ	0xFE1
 26264                           indf2	equ	0xFDF
 26265                           postinc2	equ	0xFDE
 26266                           postdec2	equ	0xFDD
 26267                           fsr2h	equ	0xFDA
 26268                           fsr2l	equ	0xFD9
 26269                           status	equ	0xFD8
 26270                           
 26271 ;; *************** function i2_I2C_Master_Start *****************
 26272 ;; Defined at:
 26273 ;;		line 31 in file "I2C.c"
 26274 ;; Parameters:    Size  Location     Type
 26275 ;;		None
 26276 ;; Auto vars:     Size  Location     Type
 26277 ;;		None
 26278 ;; Return value:  Size  Location     Type
 26279 ;;                  1    wreg      void 
 26280 ;; Registers used:
 26281 ;;		wreg, status,2, status,0, cstack
 26282 ;; Tracked objects:
 26283 ;;		On entry : 0/0
 26284 ;;		On exit  : 0/0
 26285 ;;		Unchanged: 0/0
 26286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26290 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26291 ;;Total ram usage:        0 bytes
 26292 ;; Hardware stack levels used:    1
 26293 ;; Hardware stack levels required when called:    1
 26294 ;; This function calls:
 26295 ;;		i2_I2C_Master_Wait
 26296 ;; This function is called by:
 26297 ;;		i2_getRTC
 26298 ;; This function uses a non-reentrant model
 26299 ;;
 26300                           
 26301                           	psect	text98
 26302  005FFE                     __ptext98:
 26303                           	opt stack 0
 26304  005FFE                     i2_I2C_Master_Start:
 26305                           	opt stack 19
 26306                           
 26307                           ;I2C.c: 33: I2C_Master_Wait();
 26308                           
 26309                           ;incstack = 0
 26310  005FFE  ECC0  F02F         	call	i2_I2C_Master_Wait	;wreg free
 26311                           
 26312                           ;I2C.c: 34: SEN = 1;
 26313  006002  80C5               	bsf	4037,0,c	;volatile
 26314  006004  0012               	return		;funcret
 26315  006006                     __end_ofi2_I2C_Master_Start:
 26316                           	opt stack 0
 26317                           pclatu	equ	0xFFB
 26318                           pclath	equ	0xFFA
 26319                           tblptru	equ	0xFF8
 26320                           tblptrh	equ	0xFF7
 26321                           tblptrl	equ	0xFF6
 26322                           tablat	equ	0xFF5
 26323                           prodh	equ	0xFF4
 26324                           prodl	equ	0xFF3
 26325                           intcon	equ	0xFF2
 26326                           intcon2	equ	0xFF1
 26327                           intcon3	equ	0xFF0
 26328                           indf0	equ	0xFEF
 26329                           postinc0	equ	0xFEE
 26330                           fsr0h	equ	0xFEA
 26331                           fsr0l	equ	0xFE9
 26332                           wreg	equ	0xFE8
 26333                           postdec1	equ	0xFE5
 26334                           fsr1h	equ	0xFE2
 26335                           fsr1l	equ	0xFE1
 26336                           indf2	equ	0xFDF
 26337                           postinc2	equ	0xFDE
 26338                           postdec2	equ	0xFDD
 26339                           fsr2h	equ	0xFDA
 26340                           fsr2l	equ	0xFD9
 26341                           status	equ	0xFD8
 26342                           
 26343 ;; *************** function i2_I2C_Master_Read *****************
 26344 ;; Defined at:
 26345 ;;		line 55 in file "I2C.c"
 26346 ;; Parameters:    Size  Location     Type
 26347 ;;  a               1    wreg     unsigned char 
 26348 ;; Auto vars:     Size  Location     Type
 26349 ;;  a               1    1[COMRAM] unsigned char 
 26350 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 26351 ;; Return value:  Size  Location     Type
 26352 ;;                  1    wreg      unsigned char 
 26353 ;; Registers used:
 26354 ;;		wreg, status,2, status,0, cstack
 26355 ;; Tracked objects:
 26356 ;;		On entry : 0/0
 26357 ;;		On exit  : 0/0
 26358 ;;		Unchanged: 0/0
 26359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26361 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26363 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26364 ;;Total ram usage:        2 bytes
 26365 ;; Hardware stack levels used:    1
 26366 ;; Hardware stack levels required when called:    1
 26367 ;; This function calls:
 26368 ;;		i2_I2C_Master_Wait
 26369 ;; This function is called by:
 26370 ;;		i2_getRTC
 26371 ;; This function uses a non-reentrant model
 26372 ;;
 26373                           
 26374                           	psect	text99
 26375  005E44                     __ptext99:
 26376                           	opt stack 0
 26377  005E44                     i2_I2C_Master_Read:
 26378                           	opt stack 19
 26379                           
 26380                           ;incstack = 0
 26381                           ;i2I2C_Master_Read@a stored from wreg
 26382  005E44  6E02               	movwf	i2I2C_Master_Read@a,c
 26383                           
 26384                           ;I2C.c: 57: unsigned char temp;
 26385                           ;I2C.c: 58: I2C_Master_Wait();
 26386  005E46  ECC0  F02F         	call	i2_I2C_Master_Wait	;wreg free
 26387                           
 26388                           ;I2C.c: 59: RCEN = 1;
 26389  005E4A  86C5               	bsf	4037,3,c	;volatile
 26390                           
 26391                           ;I2C.c: 60: I2C_Master_Wait();
 26392  005E4C  ECC0  F02F         	call	i2_I2C_Master_Wait	;wreg free
 26393                           
 26394                           ;I2C.c: 61: temp = SSPBUF;
 26395  005E50  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 26396                           
 26397                           ;I2C.c: 62: I2C_Master_Wait();
 26398  005E54  ECC0  F02F         	call	i2_I2C_Master_Wait	;wreg free
 26399                           
 26400                           ;I2C.c: 63: ACKDT = (a)?0:1;
 26401  005E58  5002               	movf	i2I2C_Master_Read@a,w,c
 26402  005E5A  A4D8               	btfss	status,2,c
 26403  005E5C  D002               	goto	i2u548_40
 26404  005E5E  8AC5               	bsf	4037,5,c	;volatile
 26405  005E60  D001               	goto	i2l6797
 26406  005E62                     i2u548_40:
 26407  005E62  9AC5               	bcf	4037,5,c	;volatile
 26408  005E64                     i2l6797:
 26409                           
 26410                           ;I2C.c: 64: ACKEN = 1;
 26411  005E64  88C5               	bsf	4037,4,c	;volatile
 26412                           
 26413                           ;I2C.c: 65: return temp;
 26414  005E66  5003               	movf	i2I2C_Master_Read@temp,w,c
 26415  005E68  0012               	return	
 26416  005E6A                     __end_ofi2_I2C_Master_Read:
 26417                           	opt stack 0
 26418                           pclatu	equ	0xFFB
 26419                           pclath	equ	0xFFA
 26420                           tblptru	equ	0xFF8
 26421                           tblptrh	equ	0xFF7
 26422                           tblptrl	equ	0xFF6
 26423                           tablat	equ	0xFF5
 26424                           prodh	equ	0xFF4
 26425                           prodl	equ	0xFF3
 26426                           intcon	equ	0xFF2
 26427                           intcon2	equ	0xFF1
 26428                           intcon3	equ	0xFF0
 26429                           indf0	equ	0xFEF
 26430                           postinc0	equ	0xFEE
 26431                           fsr0h	equ	0xFEA
 26432                           fsr0l	equ	0xFE9
 26433                           wreg	equ	0xFE8
 26434                           postdec1	equ	0xFE5
 26435                           fsr1h	equ	0xFE2
 26436                           fsr1l	equ	0xFE1
 26437                           indf2	equ	0xFDF
 26438                           postinc2	equ	0xFDE
 26439                           postdec2	equ	0xFDD
 26440                           fsr2h	equ	0xFDA
 26441                           fsr2l	equ	0xFD9
 26442                           status	equ	0xFD8
 26443                           
 26444 ;; *************** function i2_I2C_Master_Wait *****************
 26445 ;; Defined at:
 26446 ;;		line 26 in file "I2C.c"
 26447 ;; Parameters:    Size  Location     Type
 26448 ;;		None
 26449 ;; Auto vars:     Size  Location     Type
 26450 ;;		None
 26451 ;; Return value:  Size  Location     Type
 26452 ;;                  1    wreg      void 
 26453 ;; Registers used:
 26454 ;;		wreg, status,2, status,0
 26455 ;; Tracked objects:
 26456 ;;		On entry : 0/0
 26457 ;;		On exit  : 0/0
 26458 ;;		Unchanged: 0/0
 26459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26462 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26463 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26464 ;;Total ram usage:        1 bytes
 26465 ;; Hardware stack levels used:    1
 26466 ;; This function calls:
 26467 ;;		Nothing
 26468 ;; This function is called by:
 26469 ;;		i2_I2C_Master_Start
 26470 ;;		i2_I2C_Master_Stop
 26471 ;;		i2_I2C_Master_Write
 26472 ;;		i2_I2C_Master_Read
 26473 ;; This function uses a non-reentrant model
 26474 ;;
 26475                           
 26476                           	psect	text100
 26477  005F80                     __ptext100:
 26478                           	opt stack 0
 26479  005F80                     i2_I2C_Master_Wait:
 26480                           	opt stack 19
 26481  005F80                     i2l76:
 26482  005F80  B4C7               	btfsc	4039,2,c	;volatile
 26483  005F82  D7FE               	goto	i2l76
 26484  005F84  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 26485  005F88  0E1F               	movlw	31
 26486  005F8A  1601               	andwf	??i2_I2C_Master_Wait,f,c
 26487  005F8C  B4D8               	btfsc	status,2,c
 26488  005F8E  0012               	return	
 26489  005F90  D7F7               	goto	i2l76
 26490  005F92                     __end_ofi2_I2C_Master_Wait:
 26491                           	opt stack 0
 26492                           pclatu	equ	0xFFB
 26493                           pclath	equ	0xFFA
 26494                           tblptru	equ	0xFF8
 26495                           tblptrh	equ	0xFF7
 26496                           tblptrl	equ	0xFF6
 26497                           tablat	equ	0xFF5
 26498                           prodh	equ	0xFF4
 26499                           prodl	equ	0xFF3
 26500                           intcon	equ	0xFF2
 26501                           intcon2	equ	0xFF1
 26502                           intcon3	equ	0xFF0
 26503                           indf0	equ	0xFEF
 26504                           postinc0	equ	0xFEE
 26505                           fsr0h	equ	0xFEA
 26506                           fsr0l	equ	0xFE9
 26507                           wreg	equ	0xFE8
 26508                           postdec1	equ	0xFE5
 26509                           fsr1h	equ	0xFE2
 26510                           fsr1l	equ	0xFE1
 26511                           indf2	equ	0xFDF
 26512                           postinc2	equ	0xFDE
 26513                           postdec2	equ	0xFDD
 26514                           fsr2h	equ	0xFDA
 26515                           fsr2l	equ	0xFD9
 26516                           status	equ	0xFD8
 26517                           
 26518 ;; *************** function i2_delay_ms *****************
 26519 ;; Defined at:
 26520 ;;		line 716 in file "sort.c"
 26521 ;; Parameters:    Size  Location     Type
 26522 ;;  milliseconds    1    wreg     unsigned char 
 26523 ;; Auto vars:     Size  Location     Type
 26524 ;;  milliseconds    1    1[COMRAM] unsigned char 
 26525 ;; Return value:  Size  Location     Type
 26526 ;;                  1    wreg      void 
 26527 ;; Registers used:
 26528 ;;		wreg, status,2, status,0, cstack
 26529 ;; Tracked objects:
 26530 ;;		On entry : 0/0
 26531 ;;		On exit  : 0/0
 26532 ;;		Unchanged: 0/0
 26533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26535 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26536 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26537 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26538 ;;Total ram usage:        2 bytes
 26539 ;; Hardware stack levels used:    1
 26540 ;; This function calls:
 26541 ;;		Nothing
 26542 ;; This function is called by:
 26543 ;;		_printSortTimer
 26544 ;; This function uses a non-reentrant model
 26545 ;;
 26546                           
 26547                           	psect	text101
 26548  005F0C                     __ptext101:
 26549                           	opt stack 0
 26550  005F0C                     i2_delay_ms:
 26551                           	opt stack 22
 26552                           
 26553                           ;incstack = 0
 26554                           ;i2delay_ms@milliseconds stored from wreg
 26555  005F0C  6E02               	movwf	i2delay_ms@milliseconds,c
 26556                           
 26557                           ;sort.c: 717: while(milliseconds > 0)
 26558  005F0E  D008               	goto	i2l9495
 26559  005F10                     i2l9491:
 26560                           
 26561                           ;sort.c: 718: {
 26562                           ;sort.c: 719: milliseconds--;
 26563  005F10  0602               	decf	i2delay_ms@milliseconds,f,c
 26564                           
 26565                           ;sort.c: 720: _delay((unsigned long)((990)*(32000000/4000000.0)));
 26566  005F12  0E0B               	movlw	11
 26567  005F14  6E01               	movwf	??i2_delay_ms& (0+255),c
 26568  005F16  0E48               	movlw	72
 26569  005F18                     i2u1230_47:
 26570  005F18  2EE8               	decfsz	wreg,f,c
 26571  005F1A  D7FE               	bra	i2u1230_47
 26572  005F1C  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 26573  005F1E  D7FC               	bra	i2u1230_47
 26574  005F20                     i2l9495:
 26575  005F20  5002               	movf	i2delay_ms@milliseconds,w,c
 26576  005F22  B4D8               	btfsc	status,2,c
 26577  005F24  0012               	return	
 26578  005F26  D7F4               	goto	i2l9491
 26579  005F28                     __end_ofi2_delay_ms:
 26580                           	opt stack 0
 26581                           pclatu	equ	0xFFB
 26582                           pclath	equ	0xFFA
 26583                           tblptru	equ	0xFF8
 26584                           tblptrh	equ	0xFF7
 26585                           tblptrl	equ	0xFF6
 26586                           tablat	equ	0xFF5
 26587                           prodh	equ	0xFF4
 26588                           prodl	equ	0xFF3
 26589                           intcon	equ	0xFF2
 26590                           intcon2	equ	0xFF1
 26591                           intcon3	equ	0xFF0
 26592                           indf0	equ	0xFEF
 26593                           postinc0	equ	0xFEE
 26594                           fsr0h	equ	0xFEA
 26595                           fsr0l	equ	0xFE9
 26596                           wreg	equ	0xFE8
 26597                           postdec1	equ	0xFE5
 26598                           fsr1h	equ	0xFE2
 26599                           fsr1l	equ	0xFE1
 26600                           indf2	equ	0xFDF
 26601                           postinc2	equ	0xFDE
 26602                           postdec2	equ	0xFDD
 26603                           fsr2h	equ	0xFDA
 26604                           fsr2l	equ	0xFD9
 26605                           status	equ	0xFD8
 26606                           
 26607 ;; *************** function i2___awmod *****************
 26608 ;; Defined at:
 26609 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 26610 ;; Parameters:    Size  Location     Type
 26611 ;;  dividend        2    0[COMRAM] int 
 26612 ;;  divisor         2    2[COMRAM] int 
 26613 ;; Auto vars:     Size  Location     Type
 26614 ;;  __awmod         1    5[COMRAM] unsigned char 
 26615 ;;  __awmod         1    4[COMRAM] unsigned char 
 26616 ;; Return value:  Size  Location     Type
 26617 ;;                  2    0[COMRAM] int 
 26618 ;; Registers used:
 26619 ;;		wreg, status,2, status,0
 26620 ;; Tracked objects:
 26621 ;;		On entry : 0/0
 26622 ;;		On exit  : 0/0
 26623 ;;		Unchanged: 0/0
 26624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26625 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26626 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26628 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26629 ;;Total ram usage:        6 bytes
 26630 ;; Hardware stack levels used:    1
 26631 ;; This function calls:
 26632 ;;		Nothing
 26633 ;; This function is called by:
 26634 ;;		_printSortTimer
 26635 ;; This function uses a non-reentrant model
 26636 ;;
 26637                           
 26638                           	psect	text102
 26639  005472                     __ptext102:
 26640                           	opt stack 0
 26641  005472                     i2___awmod:
 26642                           	opt stack 22
 26643                           
 26644                           ;incstack = 0
 26645  005472  0E00               	movlw	0
 26646  005474  6E06               	movwf	i2___awmod@sign,c
 26647  005476  AE02               	btfss	i2___awmod@dividend+1,7,c
 26648  005478  D006               	goto	i2l9505
 26649  00547A  6C01               	negf	i2___awmod@dividend,c
 26650  00547C  1E02               	comf	i2___awmod@dividend+1,f,c
 26651  00547E  B0D8               	btfsc	status,0,c
 26652  005480  2A02               	incf	i2___awmod@dividend+1,f,c
 26653  005482  0E01               	movlw	1
 26654  005484  6E06               	movwf	i2___awmod@sign,c
 26655  005486                     i2l9505:
 26656  005486  AE04               	btfss	i2___awmod@divisor+1,7,c
 26657  005488  D004               	goto	i2l9509
 26658  00548A  6C03               	negf	i2___awmod@divisor,c
 26659  00548C  1E04               	comf	i2___awmod@divisor+1,f,c
 26660  00548E  B0D8               	btfsc	status,0,c
 26661  005490  2A04               	incf	i2___awmod@divisor+1,f,c
 26662  005492                     i2l9509:
 26663  005492  5003               	movf	i2___awmod@divisor,w,c
 26664  005494  1004               	iorwf	i2___awmod@divisor+1,w,c
 26665  005496  B4D8               	btfsc	status,2,c
 26666  005498  D018               	goto	i2l9525
 26667  00549A  0E01               	movlw	1
 26668  00549C  6E05               	movwf	i2___awmod@counter,c
 26669  00549E  D004               	goto	i2l9515
 26670  0054A0                     i2l9513:
 26671  0054A0  90D8               	bcf	status,0,c
 26672  0054A2  3603               	rlcf	i2___awmod@divisor,f,c
 26673  0054A4  3604               	rlcf	i2___awmod@divisor+1,f,c
 26674  0054A6  2A05               	incf	i2___awmod@counter,f,c
 26675  0054A8                     i2l9515:
 26676  0054A8  AE04               	btfss	i2___awmod@divisor+1,7,c
 26677  0054AA  D7FA               	goto	i2l9513
 26678  0054AC                     i2l9517:
 26679  0054AC  5003               	movf	i2___awmod@divisor,w,c
 26680  0054AE  5C01               	subwf	i2___awmod@dividend,w,c
 26681  0054B0  5004               	movf	i2___awmod@divisor+1,w,c
 26682  0054B2  5802               	subwfb	i2___awmod@dividend+1,w,c
 26683  0054B4  A0D8               	btfss	status,0,c
 26684  0054B6  D004               	goto	i2l9521
 26685  0054B8  5003               	movf	i2___awmod@divisor,w,c
 26686  0054BA  5E01               	subwf	i2___awmod@dividend,f,c
 26687  0054BC  5004               	movf	i2___awmod@divisor+1,w,c
 26688  0054BE  5A02               	subwfb	i2___awmod@dividend+1,f,c
 26689  0054C0                     i2l9521:
 26690  0054C0  90D8               	bcf	status,0,c
 26691  0054C2  3204               	rrcf	i2___awmod@divisor+1,f,c
 26692  0054C4  3203               	rrcf	i2___awmod@divisor,f,c
 26693  0054C6  2E05               	decfsz	i2___awmod@counter,f,c
 26694  0054C8  D7F1               	goto	i2l9517
 26695  0054CA                     i2l9525:
 26696  0054CA  5006               	movf	i2___awmod@sign,w,c
 26697  0054CC  B4D8               	btfsc	status,2,c
 26698  0054CE  D004               	goto	i2l9529
 26699  0054D0  6C01               	negf	i2___awmod@dividend,c
 26700  0054D2  1E02               	comf	i2___awmod@dividend+1,f,c
 26701  0054D4  B0D8               	btfsc	status,0,c
 26702  0054D6  2A02               	incf	i2___awmod@dividend+1,f,c
 26703  0054D8                     i2l9529:
 26704  0054D8  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 26705  0054DC  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 26706  0054E0  0012               	return	
 26707  0054E2                     __end_ofi2___awmod:
 26708                           	opt stack 0
 26709                           pclatu	equ	0xFFB
 26710                           pclath	equ	0xFFA
 26711                           tblptru	equ	0xFF8
 26712                           tblptrh	equ	0xFF7
 26713                           tblptrl	equ	0xFF6
 26714                           tablat	equ	0xFF5
 26715                           prodh	equ	0xFF4
 26716                           prodl	equ	0xFF3
 26717                           intcon	equ	0xFF2
 26718                           intcon2	equ	0xFF1
 26719                           intcon3	equ	0xFF0
 26720                           indf0	equ	0xFEF
 26721                           postinc0	equ	0xFEE
 26722                           fsr0h	equ	0xFEA
 26723                           fsr0l	equ	0xFE9
 26724                           wreg	equ	0xFE8
 26725                           postdec1	equ	0xFE5
 26726                           fsr1h	equ	0xFE2
 26727                           fsr1l	equ	0xFE1
 26728                           indf2	equ	0xFDF
 26729                           postinc2	equ	0xFDE
 26730                           postdec2	equ	0xFDD
 26731                           fsr2h	equ	0xFDA
 26732                           fsr2l	equ	0xFD9
 26733                           status	equ	0xFD8
 26734                           pclatu	equ	0xFFB
 26735                           pclath	equ	0xFFA
 26736                           tblptru	equ	0xFF8
 26737                           tblptrh	equ	0xFF7
 26738                           tblptrl	equ	0xFF6
 26739                           tablat	equ	0xFF5
 26740                           prodh	equ	0xFF4
 26741                           prodl	equ	0xFF3
 26742                           intcon	equ	0xFF2
 26743                           intcon2	equ	0xFF1
 26744                           intcon3	equ	0xFF0
 26745                           indf0	equ	0xFEF
 26746                           postinc0	equ	0xFEE
 26747                           fsr0h	equ	0xFEA
 26748                           fsr0l	equ	0xFE9
 26749                           wreg	equ	0xFE8
 26750                           postdec1	equ	0xFE5
 26751                           fsr1h	equ	0xFE2
 26752                           fsr1l	equ	0xFE1
 26753                           indf2	equ	0xFDF
 26754                           postinc2	equ	0xFDE
 26755                           postdec2	equ	0xFDD
 26756                           fsr2h	equ	0xFDA
 26757                           fsr2l	equ	0xFD9
 26758                           status	equ	0xFD8
 26759                           
 26760                           	psect	rparam
 26761  0000                     pclatu	equ	0xFFB
 26762                           pclath	equ	0xFFA
 26763                           tblptru	equ	0xFF8
 26764                           tblptrh	equ	0xFF7
 26765                           tblptrl	equ	0xFF6
 26766                           tablat	equ	0xFF5
 26767                           prodh	equ	0xFF4
 26768                           prodl	equ	0xFF3
 26769                           intcon	equ	0xFF2
 26770                           intcon2	equ	0xFF1
 26771                           intcon3	equ	0xFF0
 26772                           indf0	equ	0xFEF
 26773                           postinc0	equ	0xFEE
 26774                           fsr0h	equ	0xFEA
 26775                           fsr0l	equ	0xFE9
 26776                           wreg	equ	0xFE8
 26777                           postdec1	equ	0xFE5
 26778                           fsr1h	equ	0xFE2
 26779                           fsr1l	equ	0xFE1
 26780                           indf2	equ	0xFDF
 26781                           postinc2	equ	0xFDE
 26782                           postdec2	equ	0xFDD
 26783                           fsr2h	equ	0xFDA
 26784                           fsr2l	equ	0xFD9
 26785                           status	equ	0xFD8
 26786                           
 26787                           	psect	temp
 26788  00007E                     btemp:
 26789                           	opt stack 0
 26790  00007E                     	ds	1
 26791  0000                     int$flags	set	btemp
 26792                           pclatu	equ	0xFFB
 26793                           pclath	equ	0xFFA
 26794                           tblptru	equ	0xFF8
 26795                           tblptrh	equ	0xFF7
 26796                           tblptrl	equ	0xFF6
 26797                           tablat	equ	0xFF5
 26798                           prodh	equ	0xFF4
 26799                           prodl	equ	0xFF3
 26800                           intcon	equ	0xFF2
 26801                           intcon2	equ	0xFF1
 26802                           intcon3	equ	0xFF0
 26803                           indf0	equ	0xFEF
 26804                           postinc0	equ	0xFEE
 26805                           fsr0h	equ	0xFEA
 26806                           fsr0l	equ	0xFE9
 26807                           wreg	equ	0xFE8
 26808                           postdec1	equ	0xFE5
 26809                           fsr1h	equ	0xFE2
 26810                           fsr1l	equ	0xFE1
 26811                           indf2	equ	0xFDF
 26812                           postinc2	equ	0xFDE
 26813                           postdec2	equ	0xFDD
 26814                           fsr2h	equ	0xFDA
 26815                           fsr2l	equ	0xFD9
 26816                           status	equ	0xFD8


Data Sizes:
    Strings     1340
    Constant    27
    Data        8
    BSS         150
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      85
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_129(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_128(CODE[18]), STR_127(CODE[18]), STR_126(CODE[17]), STR_125(CODE[17]), 
		 -> STR_124(CODE[15]), STR_123(CODE[15]), STR_122(CODE[18]), STR_121(CODE[15]), 
		 -> STR_120(CODE[18]), STR_119(CODE[18]), STR_118(CODE[17]), STR_117(CODE[17]), 
		 -> STR_116(CODE[17]), STR_115(CODE[17]), STR_114(CODE[17]), STR_113(CODE[17]), 
		 -> STR_112(CODE[18]), STR_111(CODE[17]), STR_110(CODE[15]), STR_109(CODE[15]), 
		 -> STR_108(CODE[15]), STR_107(CODE[17]), STR_106(CODE[17]), STR_105(CODE[17]), 
		 -> STR_104(CODE[16]), STR_103(CODE[17]), STR_102(CODE[17]), STR_101(CODE[17]), 
		 -> STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[15]), 
		 -> STR_96(CODE[11]), STR_95(CODE[17]), STR_94(CODE[11]), STR_93(CODE[17]), 
		 -> STR_92(CODE[14]), STR_91(CODE[15]), STR_90(CODE[14]), STR_89(CODE[10]), 
		 -> STR_88(CODE[9]), STR_87(CODE[9]), STR_86(CODE[10]), STR_85(CODE[10]), 
		 -> STR_84(CODE[16]), STR_83(CODE[15]), STR_82(CODE[3]), STR_81(CODE[18]), 
		 -> STR_80(CODE[3]), STR_79(CODE[18]), STR_78(CODE[14]), STR_77(CODE[8]), 
		 -> STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), 
		 -> STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), 
		 -> STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[16]), 
		 -> STR_64(CODE[16]), STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), 
		 -> STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), 
		 -> STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), 
		 -> STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), 
		 -> STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), 
		 -> STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), 
		 -> STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), 
		 -> STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), 
		 -> STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), 
		 -> STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _ID->___ftge
    _readIR->_readADC
    _readCOND->_readADC
    ___ftge->___awtoft
    ___awtoft->___awdiv
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _initEEPROM->_EEPROM_write
    _EEPROM_write->_printf
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PortTestPusher->_printf
    _PortTestDC->_printf
    _PlatformTest->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  242489
                    _I2C_Master_Init
                               _Test
                                 _UI
                         _initEEPROM
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   30730
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   19606
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                5     3      2     841
                                              8 BANK0      5     3      2
                             _readIR
 ---------------------------------------------------------------------------------
 (2) _ID                                                  29    29      0    5731
                                             27 BANK0     29    29      0
                            ___awdiv
                           ___awtoft
                             ___ftge
                           _delay_ms
                           _readCOND
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               6     4      2     687
                                              2 BANK0      6     4      2
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _readCOND                                             4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     520
                                             18 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2236
                                             14 BANK0      4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1953
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5393
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11606
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23352
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22438
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initEEPROM                                           0     0      0   10859
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10859
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   47248
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13403
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    9035
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    9035
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1216
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1196
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  117581
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                       _PlatformTest
                         _PortTestDC
                     _PortTestPusher
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           6     6      0    9192
                                             43 BANK0      6     6      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9104
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    9035
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15671
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    9035
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestPusher                                       1     1      0    9035
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    9035
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PlatformTest                                        12    12      0    9308
                                             43 BANK0     12    12      0
                            _lcdInst
                             _printf
                            _readADC
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19821
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                        _stopSignals
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5393
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5393
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                         10    10      0    9310
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8900
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   84367
                                             74 COMRAM    16    16      0
                     _printSortTimer
                     _updateArmState
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _updateArmState                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    5279
                                             41 COMRAM    33    33      0
                          i2___awmod
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) i2___awmod                                            6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
       _updateServoPosition
     _PlatformTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _stopSignals
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTestPusher
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initEEPROM
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       ___awdiv
         ___awmod (ARG)
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftge
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
       _delay_ms
       _readCOND
         _readADC
       _readIR
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___awmod
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateArmState
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      55       7       33.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     152      34        0.0%
DATA                 0      0     152       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Apr 12 04:13:41 2017

                                    _i 013F                     i2_I2C_Master_Start 5FFE  
                   i2_I2C_Master_Write 5FD4                                     _ID 1192  
                                   l76 5F6C                       _f_panning_to_bin 0069  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
               __end_of_updateArmState 59D0                                    ID@i 00A1  
                                  ID@j 00B4                                    ID@n 00B6  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l190 00E2  
                                  l193 00E6                                    l513 4C2E  
                                  l198 0102                                    l632 335A  
                                  l800 1812                                    l810 18E6  
                                  l812 193C                                    l821 1A0E  
                                  l813 1920                                    l831 1AA0  
                                  l840 1B96                                    l833 1AE8  
                                  l850 1C08                                    l818 19D4  
                                  l851 1C1E                                    l843 1C68  
                                  l828 1B28                                    l845 1BBA  
                                  l870 145A                                    l855 1CC0  
                                  l847 1BCC                                    l839 1C6A  
                                  l952 52D2                                    l864 12D2  
                                  l848 1BE0                                    l873 14BA  
                                  l849 1BF4                                    l866 1340  
                                  l891 172C                                    l887 167A  
                                  l888 1694                           __CFG_CPB$OFF 000000  
                                  _PR2 000FCB                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 4002                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _arm 4644  
                                  _log 00EE                                    _sel 00FD  
                                  _var 014B                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 41C8                    _log_count_can_w_lab 0143  
                           i2_delay_ms 5F0C        __end_of_change_state_to_menu_11 5C00  
      __end_of_change_state_to_menu_12 5A40        __end_of_change_state_to_menu_22 5A08  
      __end_of_change_state_to_menu_23 5BD0           _f_can_coming_to_distribution 0135  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 5CF0  
      __end_of_change_state_to_logs_12 5CC0        __end_of_change_state_to_logs_22 5C90  
      __end_of_change_state_to_logs_23 5D4C        __end_of_change_state_to_logs_33 5C60  
      __end_of_change_state_to_logs_34 5C30                                   ??_ID 009B  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1300 2556  
                                 l1150 4764                                   l2016 53F6  
                                 l1321 2744                                   l2026 5672  
                                 l1314 2742                                   l1306 263A  
                                 l1411 4A26                                   l1163 5F38  
                                 l1172 42F6                                   l1317 273C  
                                 l1422 4A98                                   l1430 4AB2  
                                 l1351 09EE                                   l1327 27D8  
                                 l1344 0944                                   l1512 4734  
                                 l1521 472E                                   l1513 46F6  
                                 l1265 4584                                   l1354 0A54  
                                 l1427 4AAC                                   l1355 0AA2  
                                 l1347 0948                                   l1291 496E  
                                 l1460 3290                                   l1356 0B08  
                                 l1268 45A4                                   l1445 3296  
                                 l1381 0EB0                                   l1357 0B56  
                                 l1454 320A                                   l1535 5730  
                                 l1288 496A                                   l1529 5720  
                                 l1393 104A                                   l1297 2552  
                                 l1458 3262                                   l1475 51E0  
                                 l1492 4104                                   l1468 51D0  
                                 ?_arm 0001                                   l1398 1120  
                                 l1569 1F14                                   l1497 4150  
                                 l1833 450A                                   l1498 416A  
                                 l7003 2042                                   l1963 4E84  
                                 l7005 204E                                   l7013 207C  
                                 l7021 20E6                                   l7015 2082  
                                 l7009 2068                                   l7033 5146  
                                 l7025 5A4A                                   l7105 4530  
                                 l7019 20DA                                   l7043 517C  
                                 l7027 5A56                                   l7115 4E08  
                                 l7061 52BA                                   l7037 515C  
                                 l7117 4E18                                   l8013 17D0  
                                 l7127 4E72                                   l7119 4E1E  
                                 l8111 19F8                                   l8023 181A  
                                 l9001 114A                                   l7081 4460  
                                 l8201 1C72                                   l8121 1A2A  
                                 l7067 52EC                                   l9011 1172  
                                 l7091 44EE                                   l7083 446E  
                                 l8131 1A7A                                   l9101 4AA0  
                                 l9005 1162                                   l7341 33BE  
                                 l7093 44FC                                   l7085 449E  
                                 l7077 444C                                   l8301 140E  
                                 l8133 1A84                                   l8125 1A50  
                                 l8213 1CB4                                   l8109 19EE  
                                 l8061 18D0                                   l9015 118A  
                                 l9007 1168                                   l6711 5D16  
                                 l7351 3454                                   l7343 33DC  
                                 l7335 3364                                   l8303 1418  
                                 l7511 4EA4                                   l8215 1CC2  
                                 l8071 1900                                   l8039 1860  
                                 _ADIE 007CEE                                   l9201 3154  
                                 l7353 3472                                   l7345 33FA  
                                 l7337 3382                                   l7361 34CC  
                                 l7329 32D8                                   l7089 44BE  
                                 l8313 1466                                   l7521 4F30  
                                 l8145 1ADC                                   l8137 1AA4  
                                 l8073 190A                                   l9051 46E8  
                                 l7355 3490                                   l7347 3418  
                                 l7339 33A0                                   l7363 352A  
                                 l7099 4514                                   l7611 5226  
                                 l7515 4EBA                                   l6901 1D0C  
                                 l9221 31CC                                   l9213 3196  
                                 l9061 4720                                   l9045 46B8  
                                 l7357 34AE                                   l7349 3436  
                                 l8413 4842                                   l7701 4C94  
                                 l8341 15C2                                   l8333 158C  
                                 l8261 128E                                   l8165 1BA2  
                                 l9127 5208                                   l8415 485C  
                                 l8423 48AA                                   l7711 4D18  
                                 l8407 172E                                   l8343 15CA  
                                 l8247 1232                                   l7631 5286  
                                 l7615 523C                                   l6745 53A6  
                                 l6729 5DC4                                   l9225 31E0  
                                 l9049 46DE                                   l9057 46FC  
                                 l7561 47DA                                   l8417 4876  
                                 l8425 48D8                                   l7705 4CD4  
                                 l8249 123A                                   l8193 1C2A  
                                 l6747 53B2                                   l6923 1DEE  
                                 l6915 1DBC                                   l6907 1D40  
                                 l9243 324C                                   l9219 31B6  
                                 l9163 2FEE                                   l9059 4716  
                                 l8507 2634                                   l7803 50FE  
                                 l8419 4890                                   l8371 164E  
                                 l8355 1606                                   l8347 15DE  
                                 l7627 526E                                   l8195 1C60  
                                 l8099 19BE                                   l6757 53E8  
                                 l6749 53B8                                   l6773 5664  
                                 l6765 562E                                   l6933 1E66  
                                 l6925 1DFA                                   l9405 4130  
                                 l9229 31F4                                   l9181 309E  
                                 l9093 4A64                                   l8509 2642  
                                 l7661 4D6C                                   l7573 4812  
                                 l7557 47D0                                   l7565 47F2  
                                 l6767 563A                                   l6943 1EBC  
                                 l6935 1E72                                   l6927 1E00  
                                 l6687 5D8C                                   l9407 413A  
                                 l9239 3238                                   l9183 30A4  
                                 l8631 09B2                                   l8527 26FA  
                                 l7663 4D78                                   l7655 4D4E  
                                 l7583 5DEA                                   l8375 1664  
                                 l8367 163E                                   l8359 1616  
                                 l8279 12FC                                   l6769 5640  
                                 l6961 1F4C                                   l6945 1ED4  
                                 l6937 1E78                                   l6689 5D9E  
                                 l9417 416C                                   l9097 4A8C  
                                 l8721 0BDC                                   l8641 09DA  
                                 l8633 09B8                                   l7681 4DD0  
                                 l7673 4DAE                                   l7665 4D7E  
                                 l7649 4D38                                   l9441 4F6C  
                                 l9601 01C6                                   l7569 4808  
                                 l6873 5056                                   l6939 1E90  
                                 l6891 1CDC                                   l9419 417C  
                                 l9427 41C2                                   l8803 0D80  
                                 l8731 0C04                                   l8555 27D4  
                                 l9611 01EE                                   l9603 01CC  
                                 l7579 5DD4                                   l6867 500E  
                                 l6965 1F66                                   l6949 1EDA  
                                 l9373 408C                                   l9381 40D2  
                                 l8901 0F7C                                   l8821 0DE2  
                                 l8813 0DA8                                   l8805 0D86  
                                 l8725 0BF4                                   l8717 0BD2  
                                 l8637 09C2                                   l8549 2792  
                                 l7677 4DBC                                   l9461 4FD8  
                                 l9453 4FB6                                   l9445 4F80  
                                 l9437 4F5C                                   l7693 592C  
                                 l6869 5032                                   l6991 200C  
                                 l6967 1F6C                                   l6895 1CF0  
                                 l8911 0FA4                                   l8831 0E0A  
                                 l8751 0C78                                   l8743 0C56  
                                 l8735 0C1C                                   l8727 0BFA  
                                 l8591 28D2                                   l8575 2854  
                                 l8567 2824                                   l9447 4F8C  
                                 l9711 0544                                   l9703 0522  
                                 l9631 024E                                   l9607 01D6  
                                 l8399 16EA                                   l6985 1FCA  
                                 l6897 1D02                                   l8905 0F86  
                                 l8825 0DEC                                   l8809 0D90  
                                 l8761 0CA0                                   l8753 0C7E  
                                 l8489 257C                                   l9449 4F92  
                                 l9457 4FC4                                   l9721 0560  
                                 l9617 01FC                                   l7793 50BC  
                                 l6979 1FA8                                   l8931 100A  
                                 l8915 0FAE                                   l8851 0E70  
                                 l8835 0E14                                   l8747 0C60  
                                 l8587 289C                                   l8579 288A  
                                 l9803 0738                                   l9707 052C  
                                 l9635 0258                                   l9571 0128  
                                 l6997 2026                                   l6989 2002  
                                 l9397 4106                                   l8941 1032  
                                 l8909 0F9E                                   l8861 0E98  
                                 l8829 0E04                                   l8773 0CE4  
                                 l8757 0C88                                   l9725 0578  
                                 l9717 0556                                   l9653 02A4  
                                 l9645 0282                                   l9565 00FE  
                                 l7797 50D2                                   l9399 4116  
                                 l8935 1022                                   l8927 1000  
                                 l8919 0FC6                                   l8855 0E88  
                                 l8847 0E66                                   l8839 0E2C  
                                 l8783 0D0C                                   l9807 0750  
                                 l9671 0314                                   l9639 0270  
                                 l9583 015C                                   l9575 013A  
                                 l8961 109A                                   l8937 1028  
                                 l8857 0E8E                                   l8777 0CFC  
                                 l8769 0CDA                                   l9833 07D8  
                                 l9825 07B6                                   l9753 0660  
                                 l9745 063E                                   l9681 03AA  
                                 l9673 0332                                   l9649 028C  
                                 l8971 10C2                                   l8883 0F1A  
                                 l8875 0EF8                                   l8795 0D5E  
                                 l8787 0D24                                   l8779 0D02  
                                 l9843 07F4                                   l9763 067C  
                                 l9691 0440                                   l9683 03C8  
                                 l9675 0350                                   l9587 016E  
                                 l9579 0144                                   l8965 10A4  
                                 l8893 0F42                                   l8885 0F20  
                                 l9829 07C0                                   l9749 0648  
                                 l9693 045E                                   l9685 03E6  
                                 l9677 036E                                   l9669 02F6  
                                 l8975 10CC                                   l8879 0F02  
                                 l8799 0D68                                   l9847 080C  
                                 l9839 07EA                                   l9767 0694  
                                 l9759 0672                                   l9687 0404  
                                 l9679 038C                                   STR_1 FB7F  
                                 STR_2 FF56                                   l8985 110A  
                                 l8969 10BC                                   l8889 0F2A  
                                 l9873 088C                                   l9865 086A  
                                 l9793 071C                                   l9785 06FA  
                                 l9689 0422                                   l9697 047C  
                                 STR_3 FB6D                                   STR_4 FE79  
                                 l8995 113A                                   l8979 10E4  
                                 l9883 08A8                                   l9699 04E0  
                                 l9891 08CC                                   STR_5 FB6D  
                                 STR_6 FDF5                                   l8997 1140  
                                 l9869 0874                                   l9789 0704  
                                 STR_7 FFC3                                   STR_8 FFDA  
                                 l9887 08C0                                   l9879 089E  
                                 l9799 072E                                   STR_9 FFCA  
              ??i2_updateServoPosition 0005                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 _PEIE 007F96                                   u5600 504C  
                                 u6410 335A                                   u5610 504E  
                                 u5620 58C0                                   u5380 5D14  
                                 u7140 1AFA                                   _RCEN 007E2B  
                                 u5621 58BC                                   u5630 58C2  
                                 u5720 1EB2                                   u7160 1B20  
                                 u9001 40FA                                   u9010 40FC  
                                 u6370 5874                                   u7410 1458  
                                 u7170 1B22                                   u6380 5876  
                                 u5580 5028                                   u5590 502A  
                                 u7350 138E                                   u7158 1AFE  
                                 u5727 1EA8                                   u5680 1E3A  
                                 u7440 153A                                   u7360 1390  
                                 u7610 172C                                   u7450 153C  
                                 u7370 13E2                                   u9051 4126  
                                 u6395 56AC                                   i2l76 5F80  
                                 u9060 4128                                   u8500 470E  
                                 u7380 13E4                                   u7710 2684  
                                 u5687 1E30                                   u8600 4A7A  
                                 u8440 46D4                                   u7720 2686  
                                 u7608 16FA                                   u8450 46D6  
                                 u7820 2878                                   u6860 17DC  
                                 u7670 25BE                                   u7590 16F6  
                                 u7920 09EE                                   u7760 2724  
                                 u7680 25C0                                   u6880 1812  
                                 u8810 317E                                   u8730 3030  
                                 u8618 4A7E                                   u8570 4A50  
                                 u8490 470C                                   u7850 28C0  
                                 u8740 3032                                   u7940 0AA2  
                                 u7828 287C                                   u6878 17E0  
                                 u8760 30E6                                   u7960 0B56  
                                 u8770 30E8                                   u7858 28C4  
                                 u7778 2728                                   u8860 31C4  
                                 u8828 3182                                   u8588 4A54  
                                 u8870 31DC                                   u8871 31D8  
                                 _RSEN 007E29                            _stopSignals 5EF0  
                                 _Test 453E                                   _back 0063  
                                 _main 4B8C                                   _down 0065  
                         ___ftpack@arg 0080                                   _keys FAA7  
                         ___ftpack@exp 0083                                   _time 011C  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 5E8E  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 0141  
                      __end_ofi2_putch 5FBE                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 382E  
                          i2_lcdNibble 5738                        __end_of_Loading 1CCE  
                 __end_of_actuatorTest 1192                                  ??_arm 00AB  
                                ID@res 00AE             i2updateServoPosition@timer 0003  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                                  l10201 45B0  
                                l10211 45CE                                  l10203 45B6  
                                l10213 45D4                                  l10205 45BC  
                                l10221 45E6                                  l10215 45DA  
                                l10207 45C2                                  l10223 4638  
                                l10143 4214                                  l10217 45E0  
                                l10209 45C8                                  l10145 4228  
                                l10183 4540                                  l10169 42B0  
                                l10441 4C00                                  l10433 4BD6  
                                l10443 4C06                                  l10435 4BEC  
                                l10453 4C24                                  l10445 4C0C  
                                l10199 45AA                                  l10455 4C2A  
                                l10459 4C30                   __end_of_EEPROM_write 482A  
                          ID@time_1150 009D                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 4DDA                        ?_updateArmState 0001  
                                _EEADR 000FA9                                  STR_10 FFE6  
                                STR_11 FFEA                                  STR_12 FFFA  
                                STR_20 FFEE                                  STR_13 FFDE  
                                STR_21 FAC2                                  STR_14 FFD6  
                                STR_22 FF9A                                  STR_30 FE06  
                                STR_15 FFD2                                  STR_23 FF48  
                                STR_31 FDE4                                  STR_16 FFE2  
                                STR_24 FD4B                                  STR_32 FD29  
                                STR_40 FCE5                                  STR_17 FFF2  
                                STR_25 FE28                                  STR_33 FD3A  
                                STR_41 FCD4                                  STR_18 FFF6  
                                STR_34 FDD3                                  STR_50 FDB1  
                                STR_42 FD8F                                  STR_26 FD5C  
                                STR_43 FD8F                                  STR_35 FDD3  
                                STR_51 FFDA                                  STR_19 FFCE  
                                STR_27 FE17                                  STR_52 FFCA  
                                STR_60 FFF2                                  STR_28 FD6D  
                                STR_36 FD18                                  STR_44 FCF6  
                      __end_of___awmod 4FE2                                  STR_45 FCE5  
                                STR_37 FD29                                  STR_53 FFE6  
                                STR_61 FFF6                                  STR_29 FE25  
                                STR_62 FFCE                                  STR_54 FFEA  
                                STR_70 FF01                                  STR_38 FDC2  
                                STR_46 FDA0                                  STR_47 FDA0  
                                STR_55 FFFA                                  STR_63 FAC2  
                                STR_71 FF3A                                  STR_39 FD7E  
                                STR_56 FFDE                                  STR_80 FE25  
                                STR_64 FE59                                  STR_48 FD07  
                                STR_72 FC5D                                  STR_49 FCF6  
                                STR_57 FFD6                                  STR_73 FF1E  
                                STR_65 FE69                                  STR_81 FB13  
                                STR_58 FFD2                                  STR_90 FF3A  
                                STR_82 FE25                                  STR_74 FF64  
                                STR_66 FADA                                  STR_59 FFE2  
                                STR_67 FFBC                                  STR_91 FEF2  
                                STR_75 FEE3                                  STR_83 FEB6  
                                STR_76 FF2C                                  STR_92 FF10  
                                STR_84 FE39                                  STR_68 FC90  
                                STR_77 FFAD                                  STR_85 FF86  
                                STR_69 FCA1                                  STR_93 FC6E  
                                STR_86 FF86                                  STR_78 FF3A  
                                STR_94 FF70                                  STR_87 FFA4  
                                STR_95 FC7F                                  STR_79 FB25  
                                STR_88 FFA4                                  STR_96 FF7B  
                                STR_89 FF90                                  STR_97 FED4  
                                STR_98 FBE6                                  STR_99 FBD5  
         i2updateServoPosition@my_time 0007                                  ?_sort 0001  
                      __end_of___lldiv 4E96           i2updateServoPosition@time_us 0001  
                                u11007 16AE                                  u11017 5DE0  
                                u11107 0188                                  u11027 58D2  
                                u10180 42F6                                  u11117 01DE  
                                u11037 5906                                  u12007 21AC  
                                u11207 0684                                  u11127 020A  
                                u11047 4786                                  _T0CON 000FD5  
                                u12017 21E0                                  u11217 06AE  
                                u11137 0260                                  u11057 47E2  
                                u12107 23F6                                  u12027 2212  
                                u11307 454E                                  u11227 070C  
                                u11147 0294                                  u11067 481A  
                      ___awdiv@divisor 0088                                  u12117 2428  
                                u12037 225E                                  u11317 2502  
                                u11237 0740                                  u11157 02BE  
                                u11077 002A                                  u12207 5D94  
                                u12127 2474                                  u12047 2292  
                                u11407 27C8                                  u11327 2546  
                                u11247 076A                                  u11167 0534  
                                u11087 0114                                  _T1CON 000FCD  
                                u12217 5504                                  u12137 24A8  
                                u12057 22C4                                  u11417 27EA  
                                u11337 2568                                  u11257 07C8  
                                u11177 0568                                  u11097 014C  
                                u12227 550E                                  u12147 24DA  
                                u12067 2310                                  u11507 095A  
                                u11427 2818                                  u11347 25D4  
                                u11267 07FC                                  u11187 0592  
                                u10707 192E                                  u12237 553A  
                                u12157 5352                                  u12077 2344  
                                u11517 09CA                                  u11437 2832  
                                u11357 2628                                  u11277 0826  
                                u11197 0650                                  u10717 194C  
                                u12247 5544                                  u12167 536E  
                                u12087 2376                                  u11607 0C0C  
                                u11527 09FE                                  u11447 4652  
                                u11367 269A                                  u11287 087C  
                                u10807 1BBE                                  u10727 1980  
                                _T2CON 000FCA                                  u12177 4038  
                                u12097 23C2                                  u11617 0C68  
                                u11537 0A64                                  u11457 491A  
                                u11377 26EE                                  u11297 08B0  
                                u10817 1BC6                                  u10737 19D8  
                                u10657 175E                                  u12187 4154  
                                u11707 0EA0                                  u11627 0C90  
                                u11547 0A82                                  u11467 495E  
                                u11387 2756                                  u10907 1C22  
                                u10827 1BD0                                  u10747 19E0  
                                u10667 188E                                  u12197 415E  
                                u11717 0F0A                                  u11637 0CEC  
                                u11557 0AB2                                  u11477 4980  
                                u11397 2784                                  u10917 1C8C  
                                u10837 1BDA                                  u10757 1A12  
                                u10677 18EA                                  u11807 1124  
                                u11727 0F32                                  u11647 0D14  
                                u11567 0B18                                  u11487 08F4  
                                u10927 5ACA                                  u10847 1BE4  
                                u10767 1A1C                                  u10687 18F2  
                                _T3CON 000FB1                                  u11817 112E  
                                u11737 0F8E                                  u11657 0D70  
                                u11577 0B36                                  u11497 0938  
                                u10937 5244                                  u10857 1BEE  
                                u10777 1A38                                  u10697 1924  
                                u11907 3046                                  u11827 1152  
                                u11747 0FB6                                  u11667 0D98  
                                u11587 0B66                                  u10947 11AC  
                                u10867 1BF8                                  u10787 1B42  
                                u11917 3092                                  u11837 117A  
                                u11757 1012                                  u11677 0DF4  
                                u11597 0BE4                                  u10957 11F2  
                                u10877 1C00                                  u10797 1B84  
                                u11927 30FC                                  u11847 519A  
                                u11767 103A                                  u11687 0E1C  
                                u10967 12E2                                  u10887 1C0C  
                                u11937 3148                                  u11857 51EA  
                                u11777 105C                                  u11697 0E78  
                                u10977 14CA                                  u10897 1C16  
                                u11947 3214                                  u11867 51FE  
                                u11787 10AC                                  u10987 167E  
                                u11957 3226                                  u11877 56EA  
                                u11797 10D4                                  u10997 1688  
                                u11967 326C                                  u11887 49F0  
                                u11977 327E                                  u11897 2FCC  
                                u11987 2114                                  u11997 2160  
                      __end_of___lwdiv 5400                        __end_of___lwmod 567C  
                                i2l273 382A                                  i2l632 38BC  
                                i2l920 2E48                                  i2l924 2E0E  
                                i2l927 2EB6                                  i2l952 5580  
                      ___awdiv@counter 008A                                  i2l979 59CC  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 2106                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 5FB2                        __end_of_handler 3E3A  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 5DA4  
                      __end_of_initLCD 5910                         __CFG_EBTRB$OFF 000000  
                                _debug 012F                             i2isdigit@c 0003  
                        ___awtoft@sign 0091                                  _getIR 5210  
                      __end_of_loadRTC 5106                        __end_of_readMAG 58CA  
                      __end_of_dpowers FAC2                                  _first 013B  
                                _enter 0067                                  arm@on 00AC  
                      __end_of_isdigit 5DCE                                  _input 007D  
                        ___ftpack@sign 0084                                  _putch 5F92  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 5E44                       __end_ofi2_getRTC 5472  
                  _log_count_pop_w_tab 00F4                                  status 000FD8  
                          readCOND@res 0084                     __size_ofi2___awmod 0070  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 2C48                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 5B10  
                          Loading@addr 00B3                       _count_can_no_lab 0125  
                 printSortTimer@i_1168 0047                   __size_of_EEPROM_read 0018  
                      __initialization 57E4                         readIR@ana_port 0082  
                         __end_of_Test 4644                     __size_ofi2_lcdInst 000C  
                         __end_of_main 4C54                           __end_of_keys FAB8  
                         __end_of_sort 5EB0                             i2printf@ap 0020  
                           i2printf@cp 001E                     __size_ofi2_isdigit 001E  
                          _BlockerTest 4002                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00C4  
                        __activetblptr 000003                                 ID@res1 00AA  
                               ID@res2 00AC             __size_of_updateServoStates 01C8  
                               ID@time 00A9             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                            ?i2_delay_ms 0001  
                               ?_getIR 0088                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FBB3                                 STR_101 FC3B  
                               STR_110 FE98                                 STR_102 FC4C  
                               STR_111 FCC3                                 STR_103 FB91  
                               STR_104 FE49                                 STR_120 FB01  
                               STR_112 FAEF                                 STR_121 FE89  
                               STR_113 FBF7                                 STR_105 FBC4  
                               STR_114 FC2A                                 STR_106 FBA2  
                               STR_122 FB49                                 _ADRESH 000FC4  
                               STR_107 FBC4                                 STR_115 FC2A  
                               STR_123 FE89                                 STR_124 FE89  
                               STR_108 FEC5                                 STR_116 FC19  
                               _EEADRH 000FAA                                 STR_117 FC2A  
                               STR_109 FEA7                                 STR_125 FC08  
                               STR_118 FC19                                 STR_126 FCB2  
                               _ADRESL 000FC3                                 STR_127 FAEF  
                               STR_119 FB37                                 STR_128 FB5B  
                               STR_129 FFB5                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                       __end_of___awtoft 5954  
                               ?_putch 0001                       __end_of___ftpack 453E  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 5B70              i2_change_state_to_menu_22 5B40  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1071 3D3E  
                               i2l2016 57DA                                 i2l1080 3DE2  
                               i2l2026 598C                                 i2l1082 3DFE  
                               i2l1163 5F64                                 i2l1569 2AB4  
                               i2l7201 29CE                                 i2l7211 2A26  
                               i2l7203 29D2                                 i2l7221 2A7A  
                               i2l7213 2A2C                                 i2l7301 5AE8  
                               i2l7143 5448                                 i2l7215 2A3E  
                               i2l7303 5AF0                                 i2l7241 2AFA  
                               i2l7209 2A1C                                 i2l7225 2A7E  
                               i2l7139 5438                                 i2l7243 2AFE  
                               i2l7219 2A68                                 i2l7171 28F4  
                               i2l7149 5462                                 i2l7261 2B4A  
                               i2l7237 2AE2                                 i2l7173 2902  
                               i2l7255 2B30                                 i2l7191 299C  
                               i2l7183 293A                                 i2l7167 28E4  
                               i2l7281 2BAA                                 i2l7273 2B8C  
                               i2l7265 2B6E                                 i2l7177 2908  
                               i2l7291 2BD6                                 i2l7267 2B76  
                               i2l6821 5EE8                                 i2l7285 2BBE  
                               i2l6831 57A8                                 i2l7295 2C24  
                               i2l7279 2BA2                                 i2l7199 29C4  
                               i2l6833 57B0                                 i2l7289 2BD0  
                               i2l7297 2C2C                                 i2l6843 57D0  
                               i2l6835 57B4                                 i2l6851 5962  
                               i2l7491 441A                                 i2l7483 43E6  
                               i2l6853 596A                                 i2l6855 596E  
                               i2l7479 43D6                                 i2l7903 3B54  
                               i2l7751 38C6                                 i2l9521 54C0  
                               i2l9513 54A0                                 i2l9505 5486  
                               i2l7913 3B7E                                 i2l7761 3934  
                               i2l7753 38DC                                 i2l7745 385A  
                               i2l9515 54A8                                 i2l6859 5982  
                               i2l7923 3B9C                                 i2l7771 39A2  
                               i2l7763 394A                                 i2l7755 38F2  
                               i2l9517 54AC                                 i2l9525 54CA  
                               i2l9509 5492                                 i2l6797 5E64  
                               i2l7925 3BA0                                 i2l7909 3B62  
                               i2l7773 39B8                                 i2l7765 3960  
                               i2l7757 3908                                 i2l7951 3BF4  
                               i2l7943 3BD0                                 i2l7919 3B88  
                               i2l7871 3ADA                                 i2l7855 3AA2  
                               i2l7847 3A88                                 i2l7767 3976  
                               i2l7759 391E                                 i2l9529 54D8  
                               i2l7937 3BC2                                 i2l7929 3BAA  
                               i2l7873 3AE0                                 i2l7857 3AB2  
                               i2l7865 3AC0                                 i2l7769 398C  
                               i2l7777 39CE                                 i2l9491 5F10  
                               i2l7955 3C06                                 i2l7947 3BE2  
                               i2l7875 3AE6                                 i2l7883 3AF8  
                               i2l7859 3AB6                                 i2l7779 3A28  
                               i2l9483 5596                                 i2l7877 3AEC  
                               i2l7869 3AD4                                 i2l7965 3C22  
                               i2l9477 556C                                 i2l9495 5F20  
                               i2l7959 3C18                                 i2l7895 3B3C  
                               i2l7879 3AF2                                 i2l9911 35B2  
                               i2l9905 359E                                 i2l9931 35EA  
                               i2l9923 35DC                                 i2l9915 35C0  
                               i2l9907 35A4                                 i2l9951 3632  
                               i2l9943 3616                                 i2l9935 35F8  
                               i2l9919 35CE                                 i2l9971 3680  
                               i2l9963 365C                                 i2l9955 3640  
                               i2l9947 3624                                 i2l9939 3606  
                               i2l9991 36CE                                 i2l9983 36B2  
                               i2l9975 368E                                 i2l9967 3672  
                               i2l9959 364E                                 i2l9995 36DC  
                               i2l9987 36C0                                 i2l9979 369C  
              _f_most_recent_sort_time 0139                                 i2l9999 36F2  
                        PlatformTest@i 00B1                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR2IF 007CF1                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR2ON 007E52  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                     __end_of_delay_ms 5DF6                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 5E8E  
                               ___ftge 4C54                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 490C  
                               ___wmul 5A76                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 5AAC  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                     __end_of_readCOND 587E                                 _getRTC 5106  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 5ED2                                 _initUI 5B10  
                               _readIR 4FE2                                 _logRun 41C8  
                               getIR@i 008B                                 clear_0 580A  
                               clear_1 5816                                 clear_2 5822  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestDC 49E2                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1CCE  
                            ??_handler 004B                __size_of_initGlobalVars 00D4  
                         ?_retrieveLog 0007                                 _strcpy 5A40  
                   __size_of_SpeedTest 0084                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 5E1E  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 5DF6  
                          ?_BothServos 0001                              ??_isdigit 0080  
                    __end_ofi2___awmod 54E2                      __end_ofi2___lwdiv 57E4  
                     __end_of_printRTC 356E                           __mediumconst FAA6  
                    __end_ofi2___lwmod 5996                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00F2                         i2___awmod@sign 0006  
                __end_of_algorithmTest 49E2                      __end_ofi2_lcdInst 5FCA  
                    __end_ofi2_isdigit 5EF0                             __accesstop 0080  
              __end_of__initialization 5828                          ?_inputHandler 002A  
                           ___ftge@ff1 0092                             ___ftge@ff2 0095  
                _most_recent_sort_time 0147                          ___rparam_used 000001  
                        ?_PlatformTest 0001                printSortTimer@start_sec 003B  
                __size_of_actuatorTest 08B8                             ___awtoft@c 008E  
                        i2_EEPROM_read 5F56                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                         __pcstackCOMRAM 0001  
                _agitator_toggle_count 0123                  __size_of_EEPROM_write 00E8  
                  __size_ofi2_delay_ms 001C                           __pidataBANK1 5FDE  
                  BlockerTest@cam_flag 00B1                          __end_of_getIR 5292  
                          i2printRTC@i 0041                          _initSortTimer 4E96  
          __end_of_updateServoPosition 5310                          __end_of_putch 5FA2  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 173A                             __end_of_UI 08DA  
                            ?i2___wmul 0001                     __size_of_lcdNibble 006C  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 5D78  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 5D4C  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                              ??_getIR 008A                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0129                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 08DA  
              __size_of_PortTestPusher 005C                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C         __size_ofi2_updateServoPosition 0068  
        __end_ofi2_updateServoPosition 55B6                           _EEPROM_write 4742  
                       ??_PlatformTest 00AB               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
                              UI@F3250 014D               ?_change_state_to_menu_23 0001  
                    __end_of_SpeedTest 5210                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 03EE                      printRTC@RTC_month 00BC  
                              ?___ftge 0092                                _ID$1141 009E  
                              _ID$1154 00A0                                _ID$1149 009F  
                         ?i2_lcdNibble 0001                                UI@i_413 00C9  
                              UI@i_440 00CF                                UI@i_416 00CA  
                              UI@i_417 00CB                                UI@i_451 00D4  
                              UI@i_443 00D0                                UI@i_435 00CC  
                              UI@i_452 00D5                                UI@i_444 00D1  
                              UI@i_436 00CD                                UI@i_447 00D2  
                              UI@i_439 00CE                                UI@i_448 00D3  
                     ??_updateArmState 0001                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0082                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                            ?___awtoft 008E                              ?___ftpack 0080  
                          ?_PortTestDC 0001                                ?_printf 008E  
                              _UI$2434 00C6                                ?_strcpy 0080  
                      _pan_servo_state 006B                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                                i2l10011 371C  
                              i2l10003 3700                                i2l10031 3772  
                              i2l10023 374E                                i2l10015 3732  
                              i2l10007 370E                                i2l10043 379C  
                              i2l10035 3780                                i2l10027 375C  
                              i2l10019 3740                                i2l10053 37C0  
                              i2l10047 37B2                                i2l10039 378E  
                              i2l11031 3FE8                                i2l11023 3EE6  
                              i2l10233 2C54                                i2l11041 381C  
                              i2l11033 3FF8                                i2l11025 3EF0  
                              i2l10243 2CBE                                i2l10411 59A6  
                              i2l11027 3EFA                                i2l10331 3E8E  
                              i2l10323 3E6E                                i2l10237 2C64  
                              i2l11045 3B10                                i2l11037 37DE  
                              i2l11029 3F04                                i2l10325 3E78  
                              i2l10501 3D12                                i2l10255 2D8C  
                              i2l10415 59AC                                i2l11047 3B2C  
                              i2l11039 3800                                i2l10319 3E58  
                              i2l10409 59A0                                i2l10353 3F2E  
                              i2l10337 3EA4                                i2l10345 3EC2  
                              i2l10291 2E84                                i2l10339 3EB8  
                              i2l10347 3F0C                                i2l10523 3D58  
                              i2l10269 2DDC                                i2l10277 2E12  
                              i2l10365 3F7A                                i2l10349 3F16  
                              i2l10359 3F54                                i2l10551 3DB0  
                              i2l10471 3CBC                                i2l10297 2EEA  
                              i2l10545 3D96                                i2l10529 3D66  
                              i2l10473 3CC0                                i2l10481 3CD4  
                              i2l10299 2EF0                                i2l10379 3FD0  
                              i2l10555 3DB6                                i2l10483 3CEC  
                              i2l10477 3CCC                                i2l10487 3CF6  
                              i2l10577 3DFC                              ?_delay_ms 0001  
                       PlatformTest@on 00B5                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                _RTCflag 00E4  
                            ?_readCOND 0001                             _initEEPROM 5F40  
                              i2_putch 5FB2                              ?_initTime 0080  
                      _f_loadingNewCan 00EC                        i2printRTC@month 003D  
                __size_of_Distribution 00E2            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 554E                                _Loading 173A  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                        __size_of___ftge 00C8  
                              ___awdiv 4D1C                                ___awmod 4F40  
                           _initServos 5310                                ___lldiv 4DDA  
                      __size_of___wmul 0036                        __size_of_getMAG 0032  
                              ___lwdiv 5388                                ___lwmod 561A  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                           ?_BlockerTest 0001  
                      __size_of_initUI 0030                        __size_of_readIR 0098  
                              __pcinit 57E4                             ??___awtoft 0091  
                 i2EEPROM_read@address 0001                        __size_of_logRun 0144  
                           ??___ftpack 0085                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 4AB8  
                              _lcdInst 5FA2                                _handler 0008  
                              __ptext0 4B8C                                __ptext1 5E8E  
                              __ptext2 173A                                __ptext3 4E96  
                              __ptext4 4AB8                                __ptext5 5AAC  
                              __ptext6 5210                                __ptext7 1192  
                              __ptext8 4FE2                                __ptext9 5832  
                      __size_of_printf 0438                                _readADC 5D78  
                      __size_of_strcpy 0036                                _initLCD 58CA  
                              _cur_can 012D                                _loadRTC 507A  
                              _readMAG 587E                                _dpowers FAB8  
                   actuatorTest@i_1760 00B2                     actuatorTest@i_1761 00B3  
                   actuatorTest@i_1770 00B9                     actuatorTest@i_1754 00AE  
                   actuatorTest@i_1763 00B4                     actuatorTest@i_1755 00AF  
                   actuatorTest@i_1747 00AD                           __size_of_arm 00FE  
                   actuatorTest@i_1780 00BF                     actuatorTest@i_1764 00B5  
                   actuatorTest@i_1773 00BA                     actuatorTest@i_1757 00B0  
                   actuatorTest@i_1774 00BB                     actuatorTest@i_1766 00B6  
                   actuatorTest@i_1758 00B1                     actuatorTest@i_1783 00C0  
                   actuatorTest@i_1767 00B7                     actuatorTest@i_1784 00C1  
                   actuatorTest@i_1776 00BC                     actuatorTest@i_1777 00BD  
                   actuatorTest@i_1769 00B8                     actuatorTest@i_1786 00C2  
                   actuatorTest@i_1787 00C3                     actuatorTest@i_1779 00BE  
                              _isdigit 5DA4                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 0126  
                   _motor_toggle_count 0149                           ??i2_delay_ms 0001  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 482A  
                       __pintcode_body 3C50                   PlatformTest@res_1799 00AF  
                 end_of_initialization 5828                             ??_readCOND 0082  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 3C50  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                            i2u1031_40 2E0E                              i2u1030_48 2DE8  
                  __size_of_PortTestDC 00D6                              i2u1040_48 2EAC  
                            i2u1033_40 2E38                              i2u1025_40 2DA2  
                            i2u1035_40 2E5E                              i2u1034_48 2E3A  
                            i2u1029_40 2DE6                              i2u1230_47 5F18  
                            i2u1039_40 2EAA                              i2u1225_47 3AA8  
                            i2u1226_47 5752                              i2u1227_47 575C  
                            i2u1228_47 577E                              i2u1229_47 5788  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                     __end_ofi2_delay_ms 5F28  
               __end_of_initGlobalVars 4B8C                             _sensorTest 24F4  
                           _servoTimes 005B                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 3C50  
                         ??_BothServos 00AB                  __end_of_machineConfig 561A  
                 __end_of_PlatformTest 32A4                             _updateMenu 356E  
                    i2_I2C_Master_Read 5E44                              _IR_signal 00E0  
                    i2_I2C_Master_Wait 5F80                      i2_I2C_Master_Stop 5FF6  
                            i2___awmod 5472                      i2___lwdiv@divisor 0008  
                      _log_count_total 0145                         _PortTestPusher 56DC  
                            i2___lwdiv 5792                              i2___lwmod 5954  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 3A64  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                            ?_initEEPROM 0001  
                            i2_lcdInst 5FBE                          Loading@i_1125 00B6  
                        Loading@i_1134 00B8                          Loading@i_1136 00BA  
                        Loading@i_1137 00BC                          Loading@i_1139 00BE  
                           _total_time 00FA                            printf@width 00A9  
                 __size_of_stopSignals 001C                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 5ED2                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 24F4                    __end_of_EEPROM_read 5F40  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___ftge 4D1C                         __end_of___wmul 5AAC  
                       __end_of_getMAG 5ADE                         __end_of_getRTC 518C  
                 __size_ofi2_lcdNibble 005A                         _timer2_counter 0073  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 5B40                         __end_of_readIR 507A  
                       __end_of_logRun 430C                       i2___wmul@product 0005  
                       __end_of_printf 2106                           i2printf@flag 0026  
                       __end_of_strcpy 5A76              __end_ofi2_I2C_Master_Read 5E6A  
            __end_ofi2_I2C_Master_Wait 5F92                           i2printf@prec 001D  
                  start_initialization 57E4              __end_ofi2_I2C_Master_Stop 5FFE  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 0127            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                 __end_of_PortTestPusher 5738  
                          __end_of_arm 4742                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1413 00B0  
                i2I2C_Master_Read@temp 0003                             ?i2___awmod 0001  
                 BlockerTest@cond_flag 00B3                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                               ??___ftge 0098  
                            _SpeedTest 518C                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                            ?_sensorTest 0001  
                          __pdataBANK1 014D                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0084  
                             ??_logRun 00B1                               ID@i_1153 00A5  
                             ID@i_1155 00A7                               ID@i_1156 00B2  
                             ID@i_1148 00A3                           ??_PortTestDC 00AB  
               printSortTimer@timeDiff 0045       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    __size_of_initEEPROM 0016  
                 __size_of_BlockerTest 01C6                    _printSortTimer$2574 0043  
                    __size_of___awtoft 0044                      __size_of___ftpack 010C  
                          __pbssCOMRAM 005B           __size_of_updateServoPosition 007E  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
                      ?_PortTestPusher 0001                __size_of_printSortTimer 0346  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$2072 0081                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 003F  
                    printSortTimer@sec 0041                    __size_of_initServos 0078  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                     _tilt_servo_state 0071                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 012B  
                    __size_of_readCOND 004C                            _EEPROM_read 5F28  
                     _I2C_Master_Start 5FEE                     __end_of_PortTestDC 4AB8  
                            _f_lastCan 00EA                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 5FCA  
                    __size_of_initTime 0022                  i2_updateServoPosition 554E  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FAA6                              _lcdNibble 54E2  
                __size_of_inputHandler 01EC                               ?___awdiv 0086  
                            __ptext100 5F80                              __ptext101 5F0C  
                            __ptext102 5472                               ?___awmod 0080  
                             ?___lldiv 0080                         _sensor_outputs 00DA  
                             ?___lwdiv 0080                               ?___lwmod 0087  
                __size_of_PlatformTest 0316                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 013D                              _cur_state 00E6  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0082  
                          ??i2___awmod 0005                          _algorithmTest 490C  
                          ??i2___lwdiv 000A                            _COND_signal 00DE  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 05A8                              getIR@port 0088  
                          __size_of_UI 08C8                    __size_of_sensorTest 03E6  
           __end_ofi2_I2C_Master_Start 6006             __end_ofi2_I2C_Master_Write 5FDE  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATBbits 000F8A  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                         _inputHandler 3A64                            ??i2_isdigit 0001  
                         _PlatformTest 2F8E                           BlockerTest@i 00AD  
                             _PIR2bits 000FA1                               i2u613_40 2A00  
                             i2u613_47 29F6                        PlatformTest@res 00AD  
                             i2u617_40 2A60                               i2u617_47 2A56  
                             i2u548_40 5E62                               i2u670_40 38BC  
                  __size_of_updateMenu 02C0                         _log_completion 00F0  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0077                              _was_low_2 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 5E1E  
                        lcdNibble@data 0081                               i2_getRTC 5400  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                __size_of_updateArmState 003A  
                             Loading@i 00C0                               Loading@j 00C2  
                             i2_printf 28DA                               i2_strcpy 5ADE  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 57F8                     i2___awmod@dividend 0001  
                         ??_initEEPROM 00B1                              readIR@res 0086  
               ?i2_updateServoPosition 0001                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 5F6C  
                          _count_total 00FE                 i2delay_ms@milliseconds 0002  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 0594                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                          ??_SpeedTest 00AB                  __end_of_initSortTimer 4F40  
                         ??_initServos 0088                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 5BD0  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 5A08  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 59D0  
              _change_state_to_menu_23 5BA0                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 5CC0                _change_state_to_logs_12 5C90  
              _change_state_to_logs_22 5C60                _change_state_to_logs_23 5D1E  
              _change_state_to_logs_33 5C30                _change_state_to_logs_34 5C00  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                             ___awtoft 5910                               ___ftpack 4432  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 3E32                     __end_of_initEEPROM 5F56  
                      _I2C_Master_Init 567C                       __size_of_readADC 002C  
                      _I2C_Master_Read 5CF0                       __size_of_initLCD 0046  
                         _f_ID_receive 0131                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 5F6C  
                      _I2C_Master_Stop 5FE6                       __size_of_isdigit 002A  
                             _delay_ms 5DCE                         _printSortTimer 2C48  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 4432                               __ptext10 5DCE  
                             __ptext11 4C54                               __ptext20 4DDA  
                             __ptext12 5910                               __ptext21 5D4C  
                             __ptext13 4432                               __ptext30 5106  
                             __ptext22 5EB0                               __ptext14 482A  
                             __ptext31 5FCA                               __ptext23 58CA  
                             __ptext15 55B6                               __ptext40 453E  
                             __ptext32 5FE6                               __ptext24 5F40  
                             __ptext16 41C8                               __ptext41 24F4  
                             __ptext33 5FEE                               __ptext25 4742  
                             __ptext17 5B10                               __ptext50 2106  
                             __ptext42 587E                               __ptext34 5CF0  
                             __ptext26 5F28                               __ptext18 507A  
                             __ptext51 5EF0                               __ptext43 4644  
                             __ptext35 5F6C                               __ptext27 0012  
                             __ptext19 567C                               __ptext60 561A  
                             __ptext52 5310                               __ptext44 490C  
                             __ptext36 59D0                               __ptext28 32A4  
                             __ptext61 5388                               __ptext53 5292  
                             __ptext45 08DA                               __ptext37 5A08  
                             __ptext29 5A40                               __ptext70 5ADE  
                             __ptext62 5FA2                               __ptext54 4002  
                             __ptext46 518C                               __ptext38 4F40  
                             __ptext71 3A64                               __ptext63 54E2  
                             __ptext55 5D78                               __ptext47 56DC  
                             __ptext39 4D1C                               __ptext80 5C90  
                             __ptext72 5B40                               __ptext56 1CCE  
                             __ptext48 49E2                               __ptext81 5CC0  
                             __ptext73 5B70                               __ptext65 3E3A  
                             __ptext57 5F92                               __ptext49 2F8E  
                             __ptext90 5E1E                               __ptext82 5E6A  
                             __ptext74 5BA0                               __ptext66 554E  
                             __ptext58 5DA4                               __ptext91 5954  
                             __ptext83 430C                               __ptext75 5BD0  
                             __ptext67 356E                               __ptext59 5A76  
                             __ptext92 5792                               __ptext84 5F56  
                             __ptext76 5C00                               __ptext68 5DF6  
                             __ptext93 5FBE                               __ptext85 5996  
                             __ptext77 5C30                               __ptext69 382E  
                             __ptext94 5738                               __ptext86 2C48  
                             __ptext78 5D1E                               __ptext95 5400  
                             __ptext87 28DA                               __ptext79 5C60  
                             __ptext96 5FD4                               __ptext88 5FB2  
                             __ptext97 5FF6                               __ptext89 5ED2  
                             __ptext98 5FFE                               __ptext99 5E44  
                             _dispLogs 5E6A                          ?_actuatorTest 0001  
                   PlatformTest@i_1803 00B3                               _readCOND 5832  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$2072 0002                     __end_of_initServos 5388  
                        __size_of_Test 0106                          ?_EEPROM_write 00AB  
                             _initTime 5EB0                          __size_of_main 00C8  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F8                    _updateServoPosition 5292  
               __size_of_machineConfig 0064                          ??i2_lcdNibble 0001  
                             _printRTC 32A4                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F6  
                   _f_can_coming_to_ID 0133                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 5BA0  
    __end_ofi2_change_state_to_menu_22 5B70                       ??_PortTestPusher 00AB  
                             loadRTC@i 0096                      i2___awmod@divisor 0003  
               __end_of_printSortTimer 2F8E                              putch@data 0082  
                    i2___awmod@counter 0005               __end_of_I2C_Master_Start 5FF6  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 5FD4  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00E2                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                   sensorTest@res_1724 00AF                    _servo_timer_counter 006D  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                       BlockerTest@res 00AF                     __end_of_sensorTest 28DA  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 5F0C  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 382E                __end_of_I2C_Master_Init 56DC  
              __end_of_I2C_Master_Read 5D1E                __end_of_I2C_Master_Wait 5F80  
                        ??_BlockerTest 00AB                __end_of_I2C_Master_Stop 5FEE  
                          lcdInst@data 0082                          printRTC@F3240 0151  
                         retrieveLog@i 000E                            _retrieveLog 430C  
                  __end_ofi2_lcdNibble 5792                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                     _servo_timer_target 006F  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                      ___lwmod@divisor 0089                         _updateArmState 5996  
                    _f_can_distributed 0137                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 55B6  
                      ___lwmod@counter 008B                      _updateServoStates 3E3A  
                        printRTC@month 00BE                          ?_Distribution 0001  
                   ?_updateServoStates 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                         _f_arm_position 00E8  
                  ??_updateServoStates 0009                     i2printRTC@INT_time 002D  
