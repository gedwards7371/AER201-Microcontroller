

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Apr 11 15:36:43 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	text99,global,reloc=2,class=CODE,delta=1
   115                           	psect	text100,global,reloc=2,class=CODE,delta=1
   116                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   117                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   118                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   119  0000                     
   120                           ; Version 1.40
   121                           ; Generated 01/12/2016 GMT
   122                           ; 
   123                           ; Copyright © 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   124                           ; All rights reserved.
   125                           ; 
   126                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   127                           ; 
   128                           ; Redistribution and use in source and binary forms, with or without modification, are
   129                           ; permitted provided that the following conditions are met:
   130                           ; 
   131                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   132                           ;        conditions and the following disclaimer.
   133                           ; 
   134                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   135                           ;        of conditions and the following disclaimer in the documentation and/or other
   136                           ;        materials provided with the distribution.
   137                           ; 
   138                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   139                           ;        software without specific prior written permission.
   140                           ; 
   141                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   142                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   143                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   144                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   145                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   146                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   147                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   148                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   149                           ; 
   150                           ; 
   151                           ; Code-generator required, PIC18F4620 Definitions
   152                           ; 
   153                           ; SFR Addresses
   154  0000                     
   155                           	psect	idataBANK1
   156  005B8C                     __pidataBANK1:
   157                           	opt stack 0
   158                           
   159                           ;initializer for UI@F3247
   160  005B8C  4D                 	db	77
   161  005B8D  4D                 	db	77
   162  005B8E  4D                 	db	77
   163  005B8F  00                 	db	0
   164                           
   165                           ;initializer for printRTC@F3237
   166  005B90  4D                 	db	77
   167  005B91  4D                 	db	77
   168  005B92  4D                 	db	77
   169  005B93  00                 	db	0
   170                           
   171                           	psect	mediumconst
   172  00FA9E                     __pmediumconst:
   173                           	opt stack 0
   174  00FA9E  00                 	db	0
   175  00FA9F                     _keys:
   176                           	opt stack 0
   177  00FA9F  31                 	db	49
   178  00FAA0  32                 	db	50
   179  00FAA1  33                 	db	51
   180  00FAA2  41                 	db	65
   181  00FAA3  34                 	db	52
   182  00FAA4  35                 	db	53
   183  00FAA5  36                 	db	54
   184  00FAA6  42                 	db	66
   185  00FAA7  37                 	db	55
   186  00FAA8  38                 	db	56
   187  00FAA9  39                 	db	57
   188  00FAAA  43                 	db	67
   189  00FAAB  2A                 	db	42
   190  00FAAC  30                 	db	48
   191  00FAAD  23                 	db	35
   192  00FAAE  44                 	db	68
   193  00FAAF  00                 	db	0
   194  00FAB0                     __end_of_keys:
   195                           	opt stack 0
   196  00FAB0                     _dpowers:
   197                           	opt stack 0
   198  00FAB0  0001               	dw	1
   199  00FAB2  000A               	dw	10
   200  00FAB4  0064               	dw	100
   201  00FAB6  03E8               	dw	1000
   202  00FAB8  2710               	dw	10000
   203  00FABA                     __end_of_dpowers:
   204                           	opt stack 0
   205  0000                     _ADCON0	set	4034
   206  0000                     _ADCON0bits	set	4034
   207  0000                     _ADCON1	set	4033
   208  0000                     _ADCON2	set	4032
   209  0000                     _ADRESH	set	4036
   210  0000                     _ADRESL	set	4035
   211  0000                     _CMCONbits	set	4020
   212  0000                     _CVRCON	set	4021
   213  0000                     _EEADR	set	4009
   214  0000                     _EEADRH	set	4010
   215  0000                     _EECON1bits	set	4006
   216  0000                     _EECON2	set	4007
   217  0000                     _EEDATA	set	4008
   218  0000                     _INTCONbits	set	4082
   219  0000                     _LATA	set	3977
   220  0000                     _LATAbits	set	3977
   221  0000                     _LATB	set	3978
   222  0000                     _LATBbits	set	3978
   223  0000                     _LATC	set	3979
   224  0000                     _LATCbits	set	3979
   225  0000                     _LATD	set	3980
   226  0000                     _LATDbits	set	3980
   227  0000                     _LATE	set	3981
   228  0000                     _OSCCON	set	4051
   229  0000                     _OSCTUNEbits	set	3995
   230  0000                     _PIR2bits	set	4001
   231  0000                     _PORTAbits	set	3968
   232  0000                     _PORTB	set	3969
   233  0000                     _PORTBbits	set	3969
   234  0000                     _PR2	set	4043
   235  0000                     _SSPADD	set	4040
   236  0000                     _SSPBUF	set	4041
   237  0000                     _SSPCON1	set	4038
   238  0000                     _SSPCON2	set	4037
   239  0000                     _SSPSTAT	set	4039
   240  0000                     _T0CON	set	4053
   241  0000                     _T1CON	set	4045
   242  0000                     _T2CON	set	4042
   243  0000                     _T3CON	set	4017
   244  0000                     _TMR0H	set	4055
   245  0000                     _TMR0L	set	4054
   246  0000                     _TMR1H	set	4047
   247  0000                     _TMR1L	set	4046
   248  0000                     _TMR3H	set	4019
   249  0000                     _TMR3L	set	4018
   250  0000                     _TRISA	set	3986
   251  0000                     _TRISB	set	3987
   252  0000                     _TRISC	set	3988
   253  0000                     _TRISD	set	3989
   254  0000                     _TRISE	set	3990
   255  0000                     _ACKDT	set	32301
   256  0000                     _ACKEN	set	32300
   257  0000                     _ADIE	set	31982
   258  0000                     _INT1IE	set	32643
   259  0000                     _INT1IF	set	32640
   260  0000                     _PEIE	set	32662
   261  0000                     _PEN	set	32298
   262  0000                     _RCEN	set	32299
   263  0000                     _RSEN	set	32297
   264  0000                     _SEN	set	32296
   265  0000                     _TMR0IE	set	32661
   266  0000                     _TMR0IF	set	32658
   267  0000                     _TMR0ON	set	32431
   268  0000                     _TMR1IE	set	31976
   269  0000                     _TMR1IF	set	31984
   270  0000                     _TMR1ON	set	32360
   271  0000                     _TMR2IE	set	31977
   272  0000                     _TMR2IF	set	31985
   273  0000                     _TMR2ON	set	32338
   274  0000                     _TMR3IE	set	32001
   275  0000                     _TMR3IF	set	32009
   276  0000                     _TMR3ON	set	32136
   277  0000                     _TRISC3	set	31907
   278  0000                     _TRISC4	set	31908
   279  0000                     _nRBPU	set	32655
   280  00FABA                     STR_21:
   281  00FABA  25                 	db	37
   282  00FABB  30                 	db	48	;'0'
   283  00FABC  32                 	db	50	;'2'
   284  00FABD  64                 	db	100	;'d'
   285  00FABE  25                 	db	37
   286  00FABF  73                 	db	115	;'s'
   287  00FAC0  20                 	db	32
   288  00FAC1  7C                 	db	124
   289  00FAC2  20                 	db	32
   290  00FAC3  25                 	db	37
   291  00FAC4  30                 	db	48	;'0'
   292  00FAC5  32                 	db	50	;'2'
   293  00FAC6  64                 	db	100	;'d'
   294  00FAC7  3A                 	db	58	;':'
   295  00FAC8  25                 	db	37
   296  00FAC9  30                 	db	48	;'0'
   297  00FACA  32                 	db	50	;'2'
   298  00FACB  64                 	db	100	;'d'
   299  00FACC  3A                 	db	58	;':'
   300  00FACD  25                 	db	37
   301  00FACE  30                 	db	48	;'0'
   302  00FACF  32                 	db	50	;'2'
   303  00FAD0  64                 	db	100	;'d'
   304  00FAD1  00                 	db	0
   305  00FAD2                     STR_66:
   306  00FAD2  28                 	db	40
   307  00FAD3  64                 	db	100	;'d'
   308  00FAD4  61                 	db	97	;'a'
   309  00FAD5  74                 	db	116	;'t'
   310  00FAD6  61                 	db	97	;'a'
   311  00FAD7  3A                 	db	58	;':'
   312  00FAD8  20                 	db	32
   313  00FAD9  25                 	db	37
   314  00FADA  75                 	db	117	;'u'
   315  00FADB  2C                 	db	44
   316  00FADC  20                 	db	32
   317  00FADD  61                 	db	97	;'a'
   318  00FADE  64                 	db	100	;'d'
   319  00FADF  64                 	db	100	;'d'
   320  00FAE0  72                 	db	114	;'r'
   321  00FAE1  3A                 	db	58	;':'
   322  00FAE2  20                 	db	32
   323  00FAE3  25                 	db	37
   324  00FAE4  75                 	db	117	;'u'
   325  00FAE5  29                 	db	41
   326  00FAE6  00                 	db	0
   327  00FAE7                     STR_111:
   328  00FAE7  44                 	db	68	;'D'
   329  00FAE8  20                 	db	32
   330  00FAE9  57                 	db	87	;'W'
   331  00FAEA  49                 	db	73	;'I'
   332  00FAEB  4C                 	db	76	;'L'
   333  00FAEC  4C                 	db	76	;'L'
   334  00FAED  20                 	db	32
   335  00FAEE  52                 	db	82	;'R'
   336  00FAEF  45                 	db	69	;'E'
   337  00FAF0  54                 	db	84	;'T'
   338  00FAF1  55                 	db	85	;'U'
   339  00FAF2  52                 	db	82	;'R'
   340  00FAF3  4E                 	db	78	;'N'
   341  00FAF4  20                 	db	32
   342  00FAF5  20                 	db	32
   343  00FAF6  20                 	db	32
   344  00FAF7  20                 	db	32
   345  00FAF8  00                 	db	0
   346  00FAF9                     STR_121:
   347  00FAF9  4F                 	db	79	;'O'
   348  00FAFA  54                 	db	84	;'T'
   349  00FAFB  48                 	db	72	;'H'
   350  00FAFC  45                 	db	69	;'E'
   351  00FAFD  52                 	db	82	;'R'
   352  00FAFE  20                 	db	32
   353  00FAFF  53                 	db	83	;'S'
   354  00FB00  45                 	db	69	;'E'
   355  00FB01  54                 	db	84	;'T'
   356  00FB02  53                 	db	83	;'S'
   357  00FB03  20                 	db	32
   358  00FB04  52                 	db	82	;'R'
   359  00FB05  41                 	db	65	;'A'
   360  00FB06  35                 	db	53	;'5'
   361  00FB07  20                 	db	32
   362  00FB08  20                 	db	32
   363  00FB09  20                 	db	32
   364  00FB0A  00                 	db	0
   365  00FB0B                     STR_120:
   366  00FB0B  53                 	db	83	;'S'
   367  00FB0C  3A                 	db	58	;':'
   368  00FB0D  20                 	db	32
   369  00FB0E  44                 	db	68	;'D'
   370  00FB0F  20                 	db	32
   371  00FB10  57                 	db	87	;'W'
   372  00FB11  49                 	db	73	;'I'
   373  00FB12  4C                 	db	76	;'L'
   374  00FB13  4C                 	db	76	;'L'
   375  00FB14  20                 	db	32
   376  00FB15  52                 	db	82	;'R'
   377  00FB16  45                 	db	69	;'E'
   378  00FB17  54                 	db	84	;'T'
   379  00FB18  55                 	db	85	;'U'
   380  00FB19  52                 	db	82	;'R'
   381  00FB1A  4E                 	db	78	;'N'
   382  00FB1B  20                 	db	32
   383  00FB1C  00                 	db	0
   384  00FB1D                     STR_123:
   385  00FB1D  4F                 	db	79	;'O'
   386  00FB1E  54                 	db	84	;'T'
   387  00FB1F  48                 	db	72	;'H'
   388  00FB20  45                 	db	69	;'E'
   389  00FB21  52                 	db	82	;'R'
   390  00FB22  3A                 	db	58	;':'
   391  00FB23  20                 	db	32
   392  00FB24  43                 	db	67	;'C'
   393  00FB25  41                 	db	65	;'A'
   394  00FB26  4D                 	db	77	;'M'
   395  00FB27  20                 	db	32
   396  00FB28  54                 	db	84	;'T'
   397  00FB29  4F                 	db	79	;'O'
   398  00FB2A  47                 	db	71	;'G'
   399  00FB2B  47                 	db	71	;'G'
   400  00FB2C  4C                 	db	76	;'L'
   401  00FB2D  45                 	db	69	;'E'
   402  00FB2E  00                 	db	0
   403  00FB2F                     STR_129:
   404  00FB2F  4F                 	db	79	;'O'
   405  00FB30  54                 	db	84	;'T'
   406  00FB31  48                 	db	72	;'H'
   407  00FB32  45                 	db	69	;'E'
   408  00FB33  52                 	db	82	;'R'
   409  00FB34  20                 	db	32
   410  00FB35  53                 	db	83	;'S'
   411  00FB36  45                 	db	69	;'E'
   412  00FB37  54                 	db	84	;'T'
   413  00FB38  53                 	db	83	;'S'
   414  00FB39  20                 	db	32
   415  00FB3A  50                 	db	80	;'P'
   416  00FB3B  55                 	db	85	;'U'
   417  00FB3C  53                 	db	83	;'S'
   418  00FB3D  48                 	db	72	;'H'
   419  00FB3E  45                 	db	69	;'E'
   420  00FB3F  52                 	db	82	;'R'
   421  00FB40  00                 	db	0
   422  00FB41                     STR_3:
   423  00FB41  2D                 	db	45
   424  00FB42  2D                 	db	45
   425  00FB43  20                 	db	32
   426  00FB44  4C                 	db	76	;'L'
   427  00FB45  4F                 	db	79	;'O'
   428  00FB46  47                 	db	71	;'G'
   429  00FB47  20                 	db	32
   430  00FB48  25                 	db	37
   431  00FB49  32                 	db	50	;'2'
   432  00FB4A  64                 	db	100	;'d'
   433  00FB4B  20                 	db	32
   434  00FB4C  48                 	db	72	;'H'
   435  00FB4D  45                 	db	69	;'E'
   436  00FB4E  52                 	db	82	;'R'
   437  00FB4F  45                 	db	69	;'E'
   438  00FB50  2D                 	db	45
   439  00FB51  2D                 	db	45
   440  00FB52  00                 	db	0
   441  00FB53                     STR_1:
   442  00FB53  52                 	db	82	;'R'
   443  00FB54  45                 	db	69	;'E'
   444  00FB55  53                 	db	83	;'S'
   445  00FB56  55                 	db	85	;'U'
   446  00FB57  4C                 	db	76	;'L'
   447  00FB58  54                 	db	84	;'T'
   448  00FB59  53                 	db	83	;'S'
   449  00FB5A  20                 	db	32
   450  00FB5B  49                 	db	73	;'I'
   451  00FB5C  4E                 	db	78	;'N'
   452  00FB5D  20                 	db	32
   453  00FB5E  4C                 	db	76	;'L'
   454  00FB5F  4F                 	db	79	;'O'
   455  00FB60  47                 	db	71	;'G'
   456  00FB61  20                 	db	32
   457  00FB62  25                 	db	37
   458  00FB63  64                 	db	100	;'d'
   459  00FB64  00                 	db	0
   460  00FB65                     STR_102:
   461  00FB65  4D                 	db	77	;'M'
   462  00FB66  49                 	db	73	;'I'
   463  00FB67  44                 	db	68	;'D'
   464  00FB68  20                 	db	32
   465  00FB69  2D                 	db	45
   466  00FB6A  2D                 	db	45
   467  00FB6B  20                 	db	32
   468  00FB6C  32                 	db	50	;'2'
   469  00FB6D  73                 	db	115	;'s'
   470  00FB6E  20                 	db	32
   471  00FB6F  20                 	db	32
   472  00FB70  20                 	db	32
   473  00FB71  20                 	db	32
   474  00FB72  20                 	db	32
   475  00FB73  20                 	db	32
   476  00FB74  20                 	db	32
   477  00FB75  00                 	db	0
   478  00FB76                     STR_105:
   479  00FB76  44                 	db	68	;'D'
   480  00FB77  52                 	db	82	;'R'
   481  00FB78  4F                 	db	79	;'O'
   482  00FB79  50                 	db	80	;'P'
   483  00FB7A  20                 	db	32
   484  00FB7B  2D                 	db	45
   485  00FB7C  2D                 	db	45
   486  00FB7D  20                 	db	32
   487  00FB7E  32                 	db	50	;'2'
   488  00FB7F  73                 	db	115	;'s'
   489  00FB80  20                 	db	32
   490  00FB81  20                 	db	32
   491  00FB82  20                 	db	32
   492  00FB83  20                 	db	32
   493  00FB84  20                 	db	32
   494  00FB85  20                 	db	32
   495  00FB86  00                 	db	0
   496  00FB87                     STR_99:
   497  00FB87  4C                 	db	76	;'L'
   498  00FB88  45                 	db	69	;'E'
   499  00FB89  46                 	db	70	;'F'
   500  00FB8A  54                 	db	84	;'T'
   501  00FB8B  20                 	db	32
   502  00FB8C  2D                 	db	45
   503  00FB8D  2D                 	db	45
   504  00FB8E  20                 	db	32
   505  00FB8F  32                 	db	50	;'2'
   506  00FB90  73                 	db	115	;'s'
   507  00FB91  20                 	db	32
   508  00FB92  20                 	db	32
   509  00FB93  20                 	db	32
   510  00FB94  20                 	db	32
   511  00FB95  20                 	db	32
   512  00FB96  20                 	db	32
   513  00FB97  00                 	db	0
   514  00FB98                     STR_104:
   515  00FB98  4C                 	db	76	;'L'
   516  00FB99  45                 	db	69	;'E'
   517  00FB9A  56                 	db	86	;'V'
   518  00FB9B  45                 	db	69	;'E'
   519  00FB9C  4C                 	db	76	;'L'
   520  00FB9D  20                 	db	32
   521  00FB9E  2D                 	db	45
   522  00FB9F  2D                 	db	45
   523  00FBA0  20                 	db	32
   524  00FBA1  32                 	db	50	;'2'
   525  00FBA2  73                 	db	115	;'s'
   526  00FBA3  20                 	db	32
   527  00FBA4  20                 	db	32
   528  00FBA5  20                 	db	32
   529  00FBA6  20                 	db	32
   530  00FBA7  20                 	db	32
   531  00FBA8  00                 	db	0
   532  00FBA9                     STR_98:
   533  00FBA9  52                 	db	82	;'R'
   534  00FBAA  49                 	db	73	;'I'
   535  00FBAB  47                 	db	71	;'G'
   536  00FBAC  48                 	db	72	;'H'
   537  00FBAD  54                 	db	84	;'T'
   538  00FBAE  20                 	db	32
   539  00FBAF  2D                 	db	45
   540  00FBB0  2D                 	db	45
   541  00FBB1  20                 	db	32
   542  00FBB2  32                 	db	50	;'2'
   543  00FBB3  73                 	db	115	;'s'
   544  00FBB4  20                 	db	32
   545  00FBB5  20                 	db	32
   546  00FBB6  20                 	db	32
   547  00FBB7  20                 	db	32
   548  00FBB8  20                 	db	32
   549  00FBB9  00                 	db	0
   550  00FBBA                     STR_97:
   551  00FBBA  4D                 	db	77	;'M'
   552  00FBBB  49                 	db	73	;'I'
   553  00FBBC  44                 	db	68	;'D'
   554  00FBBD  44                 	db	68	;'D'
   555  00FBBE  4C                 	db	76	;'L'
   556  00FBBF  45                 	db	69	;'E'
   557  00FBC0  20                 	db	32
   558  00FBC1  2D                 	db	45
   559  00FBC2  2D                 	db	45
   560  00FBC3  20                 	db	32
   561  00FBC4  32                 	db	50	;'2'
   562  00FBC5  73                 	db	115	;'s'
   563  00FBC6  20                 	db	32
   564  00FBC7  20                 	db	32
   565  00FBC8  20                 	db	32
   566  00FBC9  20                 	db	32
   567  00FBCA  00                 	db	0
   568  00FBCB                     STR_112:
   569  00FBCB  4F                 	db	79	;'O'
   570  00FBCC  54                 	db	84	;'T'
   571  00FBCD  48                 	db	72	;'H'
   572  00FBCE  45                 	db	69	;'E'
   573  00FBCF  52                 	db	82	;'R'
   574  00FBD0  20                 	db	32
   575  00FBD1  53                 	db	83	;'S'
   576  00FBD2  45                 	db	69	;'E'
   577  00FBD3  54                 	db	84	;'T'
   578  00FBD4  53                 	db	83	;'S'
   579  00FBD5  20                 	db	32
   580  00FBD6  44                 	db	68	;'D'
   581  00FBD7  43                 	db	67	;'C'
   582  00FBD8  20                 	db	32
   583  00FBD9  20                 	db	32
   584  00FBDA  20                 	db	32
   585  00FBDB  00                 	db	0
   586  00FBDC                     STR_118:
   587  00FBDC  44                 	db	68	;'D'
   588  00FBDD  20                 	db	32
   589  00FBDE  57                 	db	87	;'W'
   590  00FBDF  49                 	db	73	;'I'
   591  00FBE0  4C                 	db	76	;'L'
   592  00FBE1  4C                 	db	76	;'L'
   593  00FBE2  20                 	db	32
   594  00FBE3  52                 	db	82	;'R'
   595  00FBE4  45                 	db	69	;'E'
   596  00FBE5  54                 	db	84	;'T'
   597  00FBE6  55                 	db	85	;'U'
   598  00FBE7  52                 	db	82	;'R'
   599  00FBE8  4E                 	db	78	;'N'
   600  00FBE9  20                 	db	32
   601  00FBEA  20                 	db	32
   602  00FBEB  20                 	db	32
   603  00FBEC  00                 	db	0
   604  00FBED                     STR_115:
   605  00FBED  35                 	db	53	;'5'
   606  00FBEE  3A                 	db	58	;':'
   607  00FBEF  48                 	db	72	;'H'
   608  00FBF0  7C                 	db	124
   609  00FBF1  36                 	db	54	;'6'
   610  00FBF2  3A                 	db	58	;':'
   611  00FBF3  4C                 	db	76	;'L'
   612  00FBF4  7C                 	db	124
   613  00FBF5  49                 	db	73	;'I'
   614  00FBF6  52                 	db	82	;'R'
   615  00FBF7  3A                 	db	58	;':'
   616  00FBF8  25                 	db	37
   617  00FBF9  64                 	db	100	;'d'
   618  00FBFA  20                 	db	32
   619  00FBFB  20                 	db	32
   620  00FBFC  20                 	db	32
   621  00FBFD  00                 	db	0
   622  00FBFE                     STR_113:
   623  00FBFE  31                 	db	49	;'1'
   624  00FBFF  3A                 	db	58	;':'
   625  00FC00  20                 	db	32
   626  00FC01  44                 	db	68	;'D'
   627  00FC02  43                 	db	67	;'C'
   628  00FC03  20                 	db	32
   629  00FC04  7C                 	db	124
   630  00FC05  20                 	db	32
   631  00FC06  41                 	db	65	;'A'
   632  00FC07  3A                 	db	58	;':'
   633  00FC08  20                 	db	32
   634  00FC09  41                 	db	65	;'A'
   635  00FC0A  52                 	db	82	;'R'
   636  00FC0B  4D                 	db	77	;'M'
   637  00FC0C  20                 	db	32
   638  00FC0D  20                 	db	32
   639  00FC0E  00                 	db	0
   640  00FC0F                     STR_100:
   641  00FC0F  4D                 	db	77	;'M'
   642  00FC10  49                 	db	73	;'I'
   643  00FC11  44                 	db	68	;'D'
   644  00FC12  2D                 	db	45
   645  00FC13  4C                 	db	76	;'L'
   646  00FC14  45                 	db	69	;'E'
   647  00FC15  46                 	db	70	;'F'
   648  00FC16  54                 	db	84	;'T'
   649  00FC17  20                 	db	32
   650  00FC18  2D                 	db	45
   651  00FC19  2D                 	db	45
   652  00FC1A  20                 	db	32
   653  00FC1B  32                 	db	50	;'2'
   654  00FC1C  73                 	db	115	;'s'
   655  00FC1D  20                 	db	32
   656  00FC1E  20                 	db	32
   657  00FC1F  00                 	db	0
   658  00FC20                     STR_101:
   659  00FC20  4D                 	db	77	;'M'
   660  00FC21  49                 	db	73	;'I'
   661  00FC22  44                 	db	68	;'D'
   662  00FC23  2D                 	db	45
   663  00FC24  52                 	db	82	;'R'
   664  00FC25  49                 	db	73	;'I'
   665  00FC26  47                 	db	71	;'G'
   666  00FC27  48                 	db	72	;'H'
   667  00FC28  54                 	db	84	;'T'
   668  00FC29  20                 	db	32
   669  00FC2A  2D                 	db	45
   670  00FC2B  2D                 	db	45
   671  00FC2C  20                 	db	32
   672  00FC2D  32                 	db	50	;'2'
   673  00FC2E  73                 	db	115	;'s'
   674  00FC2F  20                 	db	32
   675  00FC30  00                 	db	0
   676  00FC31  45                 	db	69	;'E'
   677  00FC32  4C                 	db	76	;'L'
   678  00FC33  53                 	db	83	;'S'
   679  00FC34  45                 	db	69	;'E'
   680  00FC35  20                 	db	32
   681  00FC36  54                 	db	84	;'T'
   682  00FC37  4F                 	db	79	;'O'
   683  00FC38  47                 	db	71	;'G'
   684  00FC39  47                 	db	71	;'G'
   685  00FC3A  4C                 	db	76	;'L'
   686  00FC3B  45                 	db	69	;'E'
   687  00FC3C  53                 	db	83	;'S'
   688  00FC3D  20                 	db	32
   689  00FC3E  52                 	db	82	;'R'
   690  00FC3F  41                 	db	65	;'A'
   691  00FC40  35                 	db	53	;'5'
   692  00FC41  00                 	db	0
   693  00FC42                     STR_72:
   694  00FC42  41                 	db	65	;'A'
   695  00FC43  4C                 	db	76	;'L'
   696  00FC44  47                 	db	71	;'G'
   697  00FC45  31                 	db	49	;'1'
   698  00FC46  3A                 	db	58	;':'
   699  00FC47  20                 	db	32
   700  00FC48  39                 	db	57	;'9'
   701  00FC49  20                 	db	32
   702  00FC4A  50                 	db	80	;'P'
   703  00FC4B  4F                 	db	79	;'O'
   704  00FC4C  50                 	db	80	;'P'
   705  00FC4D  4E                 	db	78	;'N'
   706  00FC4E  4F                 	db	79	;'O'
   707  00FC4F  54                 	db	84	;'T'
   708  00FC50  41                 	db	65	;'A'
   709  00FC51  42                 	db	66	;'B'
   710  00FC52  00                 	db	0
   711  00FC53                     STR_92:
   712  00FC53  54                 	db	84	;'T'
   713  00FC54  53                 	db	83	;'S'
   714  00FC55  54                 	db	84	;'T'
   715  00FC56  3A                 	db	58	;':'
   716  00FC57  20                 	db	32
   717  00FC58  43                 	db	67	;'C'
   718  00FC59  4F                 	db	79	;'O'
   719  00FC5A  4E                 	db	78	;'N'
   720  00FC5B  44                 	db	68	;'D'
   721  00FC5C  20                 	db	32
   722  00FC5D  53                 	db	83	;'S'
   723  00FC5E  4F                 	db	79	;'O'
   724  00FC5F  4C                 	db	76	;'L'
   725  00FC60  4E                 	db	78	;'N'
   726  00FC61  27                 	db	39
   727  00FC62  44                 	db	68	;'D'
   728  00FC63  00                 	db	0
   729  00FC64                     STR_94:
   730  00FC64  54                 	db	84	;'T'
   731  00FC65  53                 	db	83	;'S'
   732  00FC66  54                 	db	84	;'T'
   733  00FC67  3A                 	db	58	;':'
   734  00FC68  20                 	db	32
   735  00FC69  50                 	db	80	;'P'
   736  00FC6A  55                 	db	85	;'U'
   737  00FC6B  53                 	db	83	;'S'
   738  00FC6C  48                 	db	72	;'H'
   739  00FC6D  20                 	db	32
   740  00FC6E  53                 	db	83	;'S'
   741  00FC6F  4F                 	db	79	;'O'
   742  00FC70  4C                 	db	76	;'L'
   743  00FC71  4E                 	db	78	;'N'
   744  00FC72  27                 	db	39
   745  00FC73  44                 	db	68	;'D'
   746  00FC74  00                 	db	0
   747  00FC75                     STR_68:
   748  00FC75  32                 	db	50	;'2'
   749  00FC76  2E                 	db	46
   750  00FC77  53                 	db	83	;'S'
   751  00FC78  4E                 	db	78	;'N'
   752  00FC79  52                 	db	82	;'R'
   753  00FC7A  7C                 	db	124
   754  00FC7B  34                 	db	52	;'4'
   755  00FC7C  2E                 	db	46
   756  00FC7D  48                 	db	72	;'H'
   757  00FC7E  49                 	db	73	;'I'
   758  00FC7F  7C                 	db	124
   759  00FC80  35                 	db	53	;'5'
   760  00FC81  2E                 	db	46
   761  00FC82  4D                 	db	77	;'M'
   762  00FC83  45                 	db	69	;'E'
   763  00FC84  44                 	db	68	;'D'
   764  00FC85  00                 	db	0
   765  00FC86                     STR_69:
   766  00FC86  42                 	db	66	;'B'
   767  00FC87  2E                 	db	46
   768  00FC88  50                 	db	80	;'P'
   769  00FC89  4C                 	db	76	;'L'
   770  00FC8A  41                 	db	65	;'A'
   771  00FC8B  7C                 	db	124
   772  00FC8C  38                 	db	56	;'8'
   773  00FC8D  2E                 	db	46
   774  00FC8E  53                 	db	83	;'S'
   775  00FC8F  56                 	db	86	;'V'
   776  00FC90  7C                 	db	124
   777  00FC91  39                 	db	57	;'9'
   778  00FC92  2E                 	db	46
   779  00FC93  42                 	db	66	;'B'
   780  00FC94  4C                 	db	76	;'L'
   781  00FC95  4B                 	db	75	;'K'
   782  00FC96  00                 	db	0
   783  00FC97                     STR_127:
   784  00FC97  45                 	db	69	;'E'
   785  00FC98  4C                 	db	76	;'L'
   786  00FC99  53                 	db	83	;'S'
   787  00FC9A  45                 	db	69	;'E'
   788  00FC9B  20                 	db	32
   789  00FC9C  54                 	db	84	;'T'
   790  00FC9D  4F                 	db	79	;'O'
   791  00FC9E  47                 	db	71	;'G'
   792  00FC9F  47                 	db	71	;'G'
   793  00FCA0  4C                 	db	76	;'L'
   794  00FCA1  45                 	db	69	;'E'
   795  00FCA2  53                 	db	83	;'S'
   796  00FCA3  20                 	db	32
   797  00FCA4  41                 	db	65	;'A'
   798  00FCA5  52                 	db	82	;'R'
   799  00FCA6  4D                 	db	77	;'M'
   800  00FCA7  00                 	db	0
   801  00FCA8                     STR_110:
   802  00FCA8  54                 	db	84	;'T'
   803  00FCA9  53                 	db	83	;'S'
   804  00FCAA  54                 	db	84	;'T'
   805  00FCAB  3A                 	db	58	;':'
   806  00FCAC  20                 	db	32
   807  00FCAD  42                 	db	66	;'B'
   808  00FCAE  4F                 	db	79	;'O'
   809  00FCAF  54                 	db	84	;'T'
   810  00FCB0  48                 	db	72	;'H'
   811  00FCB1  20                 	db	32
   812  00FCB2  53                 	db	83	;'S'
   813  00FCB3  45                 	db	69	;'E'
   814  00FCB4  52                 	db	82	;'R'
   815  00FCB5  56                 	db	86	;'V'
   816  00FCB6  4F                 	db	79	;'O'
   817  00FCB7  53                 	db	83	;'S'
   818  00FCB8  00                 	db	0
   819  00FCB9                     STR_41:
   820  00FCB9  4C                 	db	76	;'L'
   821  00FCBA  4F                 	db	79	;'O'
   822  00FCBB  47                 	db	71	;'G'
   823  00FCBC  20                 	db	32
   824  00FCBD  31                 	db	49	;'1'
   825  00FCBE  20                 	db	32
   826  00FCBF  20                 	db	32
   827  00FCC0  20                 	db	32
   828  00FCC1  20                 	db	32
   829  00FCC2  20                 	db	32
   830  00FCC3  20                 	db	32
   831  00FCC4  20                 	db	32
   832  00FCC5  20                 	db	32
   833  00FCC6  20                 	db	32
   834  00FCC7  20                 	db	32
   835  00FCC8  20                 	db	32
   836  00FCC9  00                 	db	0
   837  00FCCA                     STR_40:
   838  00FCCA  4C                 	db	76	;'L'
   839  00FCCB  4F                 	db	79	;'O'
   840  00FCCC  47                 	db	71	;'G'
   841  00FCCD  20                 	db	32
   842  00FCCE  32                 	db	50	;'2'
   843  00FCCF  20                 	db	32
   844  00FCD0  20                 	db	32
   845  00FCD1  20                 	db	32
   846  00FCD2  20                 	db	32
   847  00FCD3  20                 	db	32
   848  00FCD4  20                 	db	32
   849  00FCD5  20                 	db	32
   850  00FCD6  20                 	db	32
   851  00FCD7  20                 	db	32
   852  00FCD8  20                 	db	32
   853  00FCD9  20                 	db	32
   854  00FCDA  00                 	db	0
   855  00FCDB                     STR_44:
   856  00FCDB  4C                 	db	76	;'L'
   857  00FCDC  4F                 	db	79	;'O'
   858  00FCDD  47                 	db	71	;'G'
   859  00FCDE  20                 	db	32
   860  00FCDF  33                 	db	51	;'3'
   861  00FCE0  20                 	db	32
   862  00FCE1  20                 	db	32
   863  00FCE2  20                 	db	32
   864  00FCE3  20                 	db	32
   865  00FCE4  20                 	db	32
   866  00FCE5  20                 	db	32
   867  00FCE6  20                 	db	32
   868  00FCE7  20                 	db	32
   869  00FCE8  20                 	db	32
   870  00FCE9  20                 	db	32
   871  00FCEA  20                 	db	32
   872  00FCEB  00                 	db	0
   873  00FCEC                     STR_48:
   874  00FCEC  4C                 	db	76	;'L'
   875  00FCED  4F                 	db	79	;'O'
   876  00FCEE  47                 	db	71	;'G'
   877  00FCEF  20                 	db	32
   878  00FCF0  34                 	db	52	;'4'
   879  00FCF1  20                 	db	32
   880  00FCF2  20                 	db	32
   881  00FCF3  20                 	db	32
   882  00FCF4  20                 	db	32
   883  00FCF5  20                 	db	32
   884  00FCF6  20                 	db	32
   885  00FCF7  20                 	db	32
   886  00FCF8  20                 	db	32
   887  00FCF9  20                 	db	32
   888  00FCFA  20                 	db	32
   889  00FCFB  20                 	db	32
   890  00FCFC  00                 	db	0
   891  00FCFD                     STR_36:
   892  00FCFD  33                 	db	51	;'3'
   893  00FCFE  2E                 	db	46
   894  00FCFF  20                 	db	32
   895  00FD00  4C                 	db	76	;'L'
   896  00FD01  4F                 	db	79	;'O'
   897  00FD02  47                 	db	71	;'G'
   898  00FD03  53                 	db	83	;'S'
   899  00FD04  20                 	db	32
   900  00FD05  20                 	db	32
   901  00FD06  20                 	db	32
   902  00FD07  20                 	db	32
   903  00FD08  20                 	db	32
   904  00FD09  20                 	db	32
   905  00FD0A  20                 	db	32
   906  00FD0B  20                 	db	32
   907  00FD0C  20                 	db	32
   908  00FD0D  00                 	db	0
   909  00FD0E                     STR_32:
   910  00FD0E  32                 	db	50	;'2'
   911  00FD0F  2E                 	db	46
   912  00FD10  20                 	db	32
   913  00FD11  53                 	db	83	;'S'
   914  00FD12  4F                 	db	79	;'O'
   915  00FD13  52                 	db	82	;'R'
   916  00FD14  54                 	db	84	;'T'
   917  00FD15  20                 	db	32
   918  00FD16  20                 	db	32
   919  00FD17  20                 	db	32
   920  00FD18  20                 	db	32
   921  00FD19  20                 	db	32
   922  00FD1A  20                 	db	32
   923  00FD1B  20                 	db	32
   924  00FD1C  20                 	db	32
   925  00FD1D  20                 	db	32
   926  00FD1E  00                 	db	0
   927  00FD1F                     STR_33:
   928  00FD1F  31                 	db	49	;'1'
   929  00FD20  2E                 	db	46
   930  00FD21  20                 	db	32
   931  00FD22  44                 	db	68	;'D'
   932  00FD23  41                 	db	65	;'A'
   933  00FD24  54                 	db	84	;'T'
   934  00FD25  45                 	db	69	;'E'
   935  00FD26  2F                 	db	47
   936  00FD27  54                 	db	84	;'T'
   937  00FD28  49                 	db	73	;'I'
   938  00FD29  4D                 	db	77	;'M'
   939  00FD2A  45                 	db	69	;'E'
   940  00FD2B  20                 	db	32
   941  00FD2C  20                 	db	32
   942  00FD2D  20                 	db	32
   943  00FD2E  20                 	db	32
   944  00FD2F  00                 	db	0
   945  00FD30                     STR_24:
   946  00FD30  20                 	db	32
   947  00FD31  2D                 	db	45
   948  00FD32  2D                 	db	45
   949  00FD33  20                 	db	32
   950  00FD34  50                 	db	80	;'P'
   951  00FD35  4F                 	db	79	;'O'
   952  00FD36  50                 	db	80	;'P'
   953  00FD37  20                 	db	32
   954  00FD38  20                 	db	32
   955  00FD39  43                 	db	67	;'C'
   956  00FD3A  41                 	db	65	;'A'
   957  00FD3B  4E                 	db	78	;'N'
   958  00FD3C  20                 	db	32
   959  00FD3D  2D                 	db	45
   960  00FD3E  2D                 	db	45
   961  00FD3F  20                 	db	32
   962  00FD40  00                 	db	0
   963  00FD41                     STR_26:
   964  00FD41  20                 	db	32
   965  00FD42  2D                 	db	45
   966  00FD43  2D                 	db	45
   967  00FD44  20                 	db	32
   968  00FD45  53                 	db	83	;'S'
   969  00FD46  4F                 	db	79	;'O'
   970  00FD47  55                 	db	85	;'U'
   971  00FD48  50                 	db	80	;'P'
   972  00FD49  20                 	db	32
   973  00FD4A  43                 	db	67	;'C'
   974  00FD4B  41                 	db	65	;'A'
   975  00FD4C  4E                 	db	78	;'N'
   976  00FD4D  20                 	db	32
   977  00FD4E  2D                 	db	45
   978  00FD4F  2D                 	db	45
   979  00FD50  20                 	db	32
   980  00FD51  00                 	db	0
   981  00FD52                     STR_28:
   982  00FD52  2D                 	db	45
   983  00FD53  2D                 	db	45
   984  00FD54  20                 	db	32
   985  00FD55  54                 	db	84	;'T'
   986  00FD56  4F                 	db	79	;'O'
   987  00FD57  54                 	db	84	;'T'
   988  00FD58  41                 	db	65	;'A'
   989  00FD59  4C                 	db	76	;'L'
   990  00FD5A  20                 	db	32
   991  00FD5B  43                 	db	67	;'C'
   992  00FD5C  41                 	db	65	;'A'
   993  00FD5D  4E                 	db	78	;'N'
   994  00FD5E  53                 	db	83	;'S'
   995  00FD5F  20                 	db	32
   996  00FD60  2D                 	db	45
   997  00FD61  2D                 	db	45
   998  00FD62  00                 	db	0
   999  00FD63                     STR_39:
  1000  00FD63  4C                 	db	76	;'L'
  1001  00FD64  4F                 	db	79	;'O'
  1002  00FD65  47                 	db	71	;'G'
  1003  00FD66  20                 	db	32
  1004  00FD67  31                 	db	49	;'1'
  1005  00FD68  20                 	db	32
  1006  00FD69  20                 	db	32
  1007  00FD6A  20                 	db	32
  1008  00FD6B  20                 	db	32
  1009  00FD6C  20                 	db	32
  1010  00FD6D  20                 	db	32
  1011  00FD6E  20                 	db	32
  1012  00FD6F  20                 	db	32
  1013  00FD70  20                 	db	32
  1014  00FD71  20                 	db	32
  1015  00FD72  3C                 	db	60	;'<'
  1016  00FD73  00                 	db	0
  1017  00FD74                     STR_42:
  1018  00FD74  4C                 	db	76	;'L'
  1019  00FD75  4F                 	db	79	;'O'
  1020  00FD76  47                 	db	71	;'G'
  1021  00FD77  20                 	db	32
  1022  00FD78  32                 	db	50	;'2'
  1023  00FD79  20                 	db	32
  1024  00FD7A  20                 	db	32
  1025  00FD7B  20                 	db	32
  1026  00FD7C  20                 	db	32
  1027  00FD7D  20                 	db	32
  1028  00FD7E  20                 	db	32
  1029  00FD7F  20                 	db	32
  1030  00FD80  20                 	db	32
  1031  00FD81  20                 	db	32
  1032  00FD82  20                 	db	32
  1033  00FD83  3C                 	db	60	;'<'
  1034  00FD84  00                 	db	0
  1035  00FD85                     STR_46:
  1036  00FD85  4C                 	db	76	;'L'
  1037  00FD86  4F                 	db	79	;'O'
  1038  00FD87  47                 	db	71	;'G'
  1039  00FD88  20                 	db	32
  1040  00FD89  33                 	db	51	;'3'
  1041  00FD8A  20                 	db	32
  1042  00FD8B  20                 	db	32
  1043  00FD8C  20                 	db	32
  1044  00FD8D  20                 	db	32
  1045  00FD8E  20                 	db	32
  1046  00FD8F  20                 	db	32
  1047  00FD90  20                 	db	32
  1048  00FD91  20                 	db	32
  1049  00FD92  20                 	db	32
  1050  00FD93  20                 	db	32
  1051  00FD94  3C                 	db	60	;'<'
  1052  00FD95  00                 	db	0
  1053  00FD96                     STR_50:
  1054  00FD96  4C                 	db	76	;'L'
  1055  00FD97  4F                 	db	79	;'O'
  1056  00FD98  47                 	db	71	;'G'
  1057  00FD99  20                 	db	32
  1058  00FD9A  34                 	db	52	;'4'
  1059  00FD9B  20                 	db	32
  1060  00FD9C  20                 	db	32
  1061  00FD9D  20                 	db	32
  1062  00FD9E  20                 	db	32
  1063  00FD9F  20                 	db	32
  1064  00FDA0  20                 	db	32
  1065  00FDA1  20                 	db	32
  1066  00FDA2  20                 	db	32
  1067  00FDA3  20                 	db	32
  1068  00FDA4  20                 	db	32
  1069  00FDA5  3C                 	db	60	;'<'
  1070  00FDA6  00                 	db	0
  1071  00FDA7                     STR_38:
  1072  00FDA7  33                 	db	51	;'3'
  1073  00FDA8  2E                 	db	46
  1074  00FDA9  20                 	db	32
  1075  00FDAA  4C                 	db	76	;'L'
  1076  00FDAB  4F                 	db	79	;'O'
  1077  00FDAC  47                 	db	71	;'G'
  1078  00FDAD  53                 	db	83	;'S'
  1079  00FDAE  20                 	db	32
  1080  00FDAF  20                 	db	32
  1081  00FDB0  20                 	db	32
  1082  00FDB1  20                 	db	32
  1083  00FDB2  20                 	db	32
  1084  00FDB3  20                 	db	32
  1085  00FDB4  20                 	db	32
  1086  00FDB5  20                 	db	32
  1087  00FDB6  3C                 	db	60	;'<'
  1088  00FDB7  00                 	db	0
  1089  00FDB8                     STR_34:
  1090  00FDB8  32                 	db	50	;'2'
  1091  00FDB9  2E                 	db	46
  1092  00FDBA  20                 	db	32
  1093  00FDBB  53                 	db	83	;'S'
  1094  00FDBC  4F                 	db	79	;'O'
  1095  00FDBD  52                 	db	82	;'R'
  1096  00FDBE  54                 	db	84	;'T'
  1097  00FDBF  20                 	db	32
  1098  00FDC0  20                 	db	32
  1099  00FDC1  20                 	db	32
  1100  00FDC2  20                 	db	32
  1101  00FDC3  20                 	db	32
  1102  00FDC4  20                 	db	32
  1103  00FDC5  20                 	db	32
  1104  00FDC6  20                 	db	32
  1105  00FDC7  3C                 	db	60	;'<'
  1106  00FDC8  00                 	db	0
  1107  00FDC9                     STR_31:
  1108  00FDC9  31                 	db	49	;'1'
  1109  00FDCA  2E                 	db	46
  1110  00FDCB  20                 	db	32
  1111  00FDCC  44                 	db	68	;'D'
  1112  00FDCD  41                 	db	65	;'A'
  1113  00FDCE  54                 	db	84	;'T'
  1114  00FDCF  45                 	db	69	;'E'
  1115  00FDD0  2F                 	db	47
  1116  00FDD1  54                 	db	84	;'T'
  1117  00FDD2  49                 	db	73	;'I'
  1118  00FDD3  4D                 	db	77	;'M'
  1119  00FDD4  45                 	db	69	;'E'
  1120  00FDD5  20                 	db	32
  1121  00FDD6  20                 	db	32
  1122  00FDD7  20                 	db	32
  1123  00FDD8  3C                 	db	60	;'<'
  1124  00FDD9  00                 	db	0
  1125  00FDDA                     STR_6:
  1126  00FDDA  50                 	db	80	;'P'
  1127  00FDDB  41                 	db	65	;'A'
  1128  00FDDC  55                 	db	85	;'U'
  1129  00FDDD  53                 	db	83	;'S'
  1130  00FDDE  45                 	db	69	;'E'
  1131  00FDDF  20                 	db	32
  1132  00FDE0  3C                 	db	60	;'<'
  1133  00FDE1  20                 	db	32
  1134  00FDE2  7C                 	db	124
  1135  00FDE3  20                 	db	32
  1136  00FDE4  42                 	db	66	;'B'
  1137  00FDE5  41                 	db	65	;'A'
  1138  00FDE6  43                 	db	67	;'C'
  1139  00FDE7  4B                 	db	75	;'K'
  1140  00FDE8  20                 	db	32
  1141  00FDE9  3E                 	db	62	;'>'
  1142  00FDEA  00                 	db	0
  1143  00FDEB                     STR_30:
  1144  00FDEB  50                 	db	80	;'P'
  1145  00FDEC  55                 	db	85	;'U'
  1146  00FDED  53                 	db	83	;'S'
  1147  00FDEE  48                 	db	72	;'H'
  1148  00FDEF  20                 	db	32
  1149  00FDF0  54                 	db	84	;'T'
  1150  00FDF1  4F                 	db	79	;'O'
  1151  00FDF2  20                 	db	32
  1152  00FDF3  43                 	db	67	;'C'
  1153  00FDF4  4F                 	db	79	;'O'
  1154  00FDF5  4E                 	db	78	;'N'
  1155  00FDF6  54                 	db	84	;'T'
  1156  00FDF7  49                 	db	73	;'I'
  1157  00FDF8  4E                 	db	78	;'N'
  1158  00FDF9  55                 	db	85	;'U'
  1159  00FDFA  45                 	db	69	;'E'
  1160  00FDFB  00                 	db	0
  1161  00FDFC                     STR_27:
  1162  00FDFC  4E                 	db	78	;'N'
  1163  00FDFD  4C                 	db	76	;'L'
  1164  00FDFE  41                 	db	65	;'A'
  1165  00FDFF  42                 	db	66	;'B'
  1166  00FE00  3A                 	db	58	;':'
  1167  00FE01  20                 	db	32
  1168  00FE02  25                 	db	37
  1169  00FE03  64                 	db	100	;'d'
  1170  00FE04  7C                 	db	124
  1171  00FE05  4C                 	db	76	;'L'
  1172  00FE06  41                 	db	65	;'A'
  1173  00FE07  42                 	db	66	;'B'
  1174  00FE08  3A                 	db	58	;':'
  1175  00FE09  20                 	db	32
  1176  00FE0A  25                 	db	37
  1177  00FE0B  64                 	db	100	;'d'
  1178  00FE0C  00                 	db	0
  1179  00FE0D                     STR_25:
  1180  00FE0D  4E                 	db	78	;'N'
  1181  00FE0E  54                 	db	84	;'T'
  1182  00FE0F  41                 	db	65	;'A'
  1183  00FE10  42                 	db	66	;'B'
  1184  00FE11  3A                 	db	58	;':'
  1185  00FE12  20                 	db	32
  1186  00FE13  25                 	db	37
  1187  00FE14  64                 	db	100	;'d'
  1188  00FE15  7C                 	db	124
  1189  00FE16  54                 	db	84	;'T'
  1190  00FE17  41                 	db	65	;'A'
  1191  00FE18  42                 	db	66	;'B'
  1192  00FE19  3A                 	db	58	;':'
  1193  00FE1A  20                 	db	32
  1194  00FE1B  25                 	db	37
  1195  00FE1C  64                 	db	100	;'d'
  1196  00FE1D  00                 	db	0
  1197  00FE1E                     STR_83:
  1198  00FE1E  4D                 	db	77	;'M'
  1199  00FE1F  41                 	db	65	;'A'
  1200  00FE20  47                 	db	71	;'G'
  1201  00FE21  5F                 	db	95	;'_'
  1202  00FE22  73                 	db	115	;'s'
  1203  00FE23  69                 	db	105	;'i'
  1204  00FE24  67                 	db	103	;'g'
  1205  00FE25  6E                 	db	110	;'n'
  1206  00FE26  61                 	db	97	;'a'
  1207  00FE27  6C                 	db	108	;'l'
  1208  00FE28  3A                 	db	58	;':'
  1209  00FE29  20                 	db	32
  1210  00FE2A  25                 	db	37
  1211  00FE2B  64                 	db	100	;'d'
  1212  00FE2C  20                 	db	32
  1213  00FE2D  00                 	db	0
  1214  00FE2E                     STR_103:
  1215  00FE2E  54                 	db	84	;'T'
  1216  00FE2F  53                 	db	83	;'S'
  1217  00FE30  54                 	db	84	;'T'
  1218  00FE31  3A                 	db	58	;':'
  1219  00FE32  20                 	db	32
  1220  00FE33  54                 	db	84	;'T'
  1221  00FE34  49                 	db	73	;'I'
  1222  00FE35  4C                 	db	76	;'L'
  1223  00FE36  54                 	db	84	;'T'
  1224  00FE37  20                 	db	32
  1225  00FE38  53                 	db	83	;'S'
  1226  00FE39  45                 	db	69	;'E'
  1227  00FE3A  52                 	db	82	;'R'
  1228  00FE3B  56                 	db	86	;'V'
  1229  00FE3C  4F                 	db	79	;'O'
  1230  00FE3D  00                 	db	0
  1231  00FE3E                     STR_64:
  1232  00FE3E  53                 	db	83	;'S'
  1233  00FE3F  4F                 	db	79	;'O'
  1234  00FE40  52                 	db	82	;'R'
  1235  00FE41  54                 	db	84	;'T'
  1236  00FE42  49                 	db	73	;'I'
  1237  00FE43  4E                 	db	78	;'N'
  1238  00FE44  47                 	db	71	;'G'
  1239  00FE45  2E                 	db	46
  1240  00FE46  2E                 	db	46
  1241  00FE47  2E                 	db	46
  1242  00FE48  20                 	db	32
  1243  00FE49  20                 	db	32
  1244  00FE4A  20                 	db	32
  1245  00FE4B  20                 	db	32
  1246  00FE4C  20                 	db	32
  1247  00FE4D  00                 	db	0
  1248  00FE4E                     STR_65:
  1249  00FE4E  54                 	db	84	;'T'
  1250  00FE4F  49                 	db	73	;'I'
  1251  00FE50  4D                 	db	77	;'M'
  1252  00FE51  45                 	db	69	;'E'
  1253  00FE52  20                 	db	32
  1254  00FE53  25                 	db	37
  1255  00FE54  64                 	db	100	;'d'
  1256  00FE55  3A                 	db	58	;':'
  1257  00FE56  25                 	db	37
  1258  00FE57  30                 	db	48	;'0'
  1259  00FE58  32                 	db	50	;'2'
  1260  00FE59  64                 	db	100	;'d'
  1261  00FE5A  20                 	db	32
  1262  00FE5B  20                 	db	32
  1263  00FE5C  20                 	db	32
  1264  00FE5D  00                 	db	0
  1265  00FE5E                     STR_4:
  1266  00FE5E  44                 	db	68	;'D'
  1267  00FE5F  49                 	db	73	;'I'
  1268  00FE60  44                 	db	68	;'D'
  1269  00FE61  4E                 	db	78	;'N'
  1270  00FE62  27                 	db	39
  1271  00FE63  54                 	db	84	;'T'
  1272  00FE64  20                 	db	32
  1273  00FE65  43                 	db	67	;'C'
  1274  00FE66  4F                 	db	79	;'O'
  1275  00FE67  4D                 	db	77	;'M'
  1276  00FE68  50                 	db	80	;'P'
  1277  00FE69  4C                 	db	76	;'L'
  1278  00FE6A  45                 	db	69	;'E'
  1279  00FE6B  54                 	db	84	;'T'
  1280  00FE6C  45                 	db	69	;'E'
  1281  00FE6D  00                 	db	0
  1282  00FE6E                     STR_122:
  1283  00FE6E  44                 	db	68	;'D'
  1284  00FE6F  3A                 	db	58	;':'
  1285  00FE70  52                 	db	82	;'R'
  1286  00FE71  45                 	db	69	;'E'
  1287  00FE72  54                 	db	84	;'T'
  1288  00FE73  7C                 	db	124
  1289  00FE74  32                 	db	50	;'2'
  1290  00FE75  3A                 	db	58	;':'
  1291  00FE76  43                 	db	67	;'C'
  1292  00FE77  20                 	db	32
  1293  00FE78  25                 	db	37
  1294  00FE79  64                 	db	100	;'d'
  1295  00FE7A  20                 	db	32
  1296  00FE7B  20                 	db	32
  1297  00FE7C  00                 	db	0
  1298  00FE7D                     STR_80:
  1299  00FE7D  49                 	db	73	;'I'
  1300  00FE7E  52                 	db	82	;'R'
  1301  00FE7F  5F                 	db	95	;'_'
  1302  00FE80  73                 	db	115	;'s'
  1303  00FE81  69                 	db	105	;'i'
  1304  00FE82  67                 	db	103	;'g'
  1305  00FE83  6E                 	db	110	;'n'
  1306  00FE84  61                 	db	97	;'a'
  1307  00FE85  6C                 	db	108	;'l'
  1308  00FE86  3A                 	db	58	;':'
  1309  00FE87  20                 	db	32
  1310  00FE88  25                 	db	37
  1311  00FE89  64                 	db	100	;'d'
  1312  00FE8A  20                 	db	32
  1313  00FE8B  00                 	db	0
  1314  00FE8C                     STR_109:
  1315  00FE8C  43                 	db	67	;'C'
  1316  00FE8D  41                 	db	65	;'A'
  1317  00FE8E  4D                 	db	77	;'M'
  1318  00FE8F  20                 	db	32
  1319  00FE90  44                 	db	68	;'D'
  1320  00FE91  57                 	db	87	;'W'
  1321  00FE92  4E                 	db	78	;'N'
  1322  00FE93  20                 	db	32
  1323  00FE94  7C                 	db	124
  1324  00FE95  52                 	db	82	;'R'
  1325  00FE96  43                 	db	67	;'C'
  1326  00FE97  30                 	db	48	;'0'
  1327  00FE98  3D                 	db	61	;'='
  1328  00FE99  30                 	db	48	;'0'
  1329  00FE9A  00                 	db	0
  1330  00FE9B                     STR_108:
  1331  00FE9B  43                 	db	67	;'C'
  1332  00FE9C  41                 	db	65	;'A'
  1333  00FE9D  4D                 	db	77	;'M'
  1334  00FE9E  20                 	db	32
  1335  00FE9F  55                 	db	85	;'U'
  1336  00FEA0  50                 	db	80	;'P'
  1337  00FEA1  20                 	db	32
  1338  00FEA2  20                 	db	32
  1339  00FEA3  7C                 	db	124
  1340  00FEA4  52                 	db	82	;'R'
  1341  00FEA5  43                 	db	67	;'C'
  1342  00FEA6  30                 	db	48	;'0'
  1343  00FEA7  3D                 	db	61	;'='
  1344  00FEA8  31                 	db	49	;'1'
  1345  00FEA9  00                 	db	0
  1346  00FEAA                     STR_82:
  1347  00FEAA  54                 	db	84	;'T'
  1348  00FEAB  53                 	db	83	;'S'
  1349  00FEAC  54                 	db	84	;'T'
  1350  00FEAD  3A                 	db	58	;':'
  1351  00FEAE  20                 	db	32
  1352  00FEAF  4D                 	db	77	;'M'
  1353  00FEB0  41                 	db	65	;'A'
  1354  00FEB1  47                 	db	71	;'G'
  1355  00FEB2  4E                 	db	78	;'N'
  1356  00FEB3  45                 	db	69	;'E'
  1357  00FEB4  54                 	db	84	;'T'
  1358  00FEB5  49                 	db	73	;'I'
  1359  00FEB6  53                 	db	83	;'S'
  1360  00FEB7  4D                 	db	77	;'M'
  1361  00FEB8  00                 	db	0
  1362  00FEB9                     STR_107:
  1363  00FEB9  54                 	db	84	;'T'
  1364  00FEBA  53                 	db	83	;'S'
  1365  00FEBB  54                 	db	84	;'T'
  1366  00FEBC  3A                 	db	58	;':'
  1367  00FEBD  20                 	db	32
  1368  00FEBE  43                 	db	67	;'C'
  1369  00FEBF  41                 	db	65	;'A'
  1370  00FEC0  4D                 	db	77	;'M'
  1371  00FEC1  20                 	db	32
  1372  00FEC2  53                 	db	83	;'S'
  1373  00FEC3  45                 	db	69	;'E'
  1374  00FEC4  52                 	db	82	;'R'
  1375  00FEC5  56                 	db	86	;'V'
  1376  00FEC6  4F                 	db	79	;'O'
  1377  00FEC7  00                 	db	0
  1378  00FEC8                     STR_96:
  1379  00FEC8  54                 	db	84	;'T'
  1380  00FEC9  53                 	db	83	;'S'
  1381  00FECA  54                 	db	84	;'T'
  1382  00FECB  3A                 	db	58	;':'
  1383  00FECC  20                 	db	32
  1384  00FECD  50                 	db	80	;'P'
  1385  00FECE  41                 	db	65	;'A'
  1386  00FECF  4E                 	db	78	;'N'
  1387  00FED0  20                 	db	32
  1388  00FED1  53                 	db	83	;'S'
  1389  00FED2  45                 	db	69	;'E'
  1390  00FED3  52                 	db	82	;'R'
  1391  00FED4  56                 	db	86	;'V'
  1392  00FED5  4F                 	db	79	;'O'
  1393  00FED6  00                 	db	0
  1394  00FED7                     STR_75:
  1395  00FED7  41                 	db	65	;'A'
  1396  00FED8  4C                 	db	76	;'L'
  1397  00FED9  47                 	db	71	;'G'
  1398  00FEDA  34                 	db	52	;'4'
  1399  00FEDB  3A                 	db	58	;':'
  1400  00FEDC  20                 	db	32
  1401  00FEDD  41                 	db	65	;'A'
  1402  00FEDE  4C                 	db	76	;'L'
  1403  00FEDF  4C                 	db	76	;'L'
  1404  00FEE0  20                 	db	32
  1405  00FEE1  43                 	db	67	;'C'
  1406  00FEE2  41                 	db	65	;'A'
  1407  00FEE3  4E                 	db	78	;'N'
  1408  00FEE4  53                 	db	83	;'S'
  1409  00FEE5  00                 	db	0
  1410  00FEE6                     STR_90:
  1411  00FEE6  54                 	db	84	;'T'
  1412  00FEE7  53                 	db	83	;'S'
  1413  00FEE8  54                 	db	84	;'T'
  1414  00FEE9  3A                 	db	58	;':'
  1415  00FEEA  20                 	db	32
  1416  00FEEB  44                 	db	68	;'D'
  1417  00FEEC  43                 	db	67	;'C'
  1418  00FEED  20                 	db	32
  1419  00FEEE  4D                 	db	77	;'M'
  1420  00FEEF  4F                 	db	79	;'O'
  1421  00FEF0  54                 	db	84	;'T'
  1422  00FEF1  4F                 	db	79	;'O'
  1423  00FEF2  52                 	db	82	;'R'
  1424  00FEF3  53                 	db	83	;'S'
  1425  00FEF4  00                 	db	0
  1426  00FEF5                     STR_70:
  1427  00FEF5  41                 	db	65	;'A'
  1428  00FEF6  4C                 	db	76	;'L'
  1429  00FEF7  47                 	db	71	;'G'
  1430  00FEF8  4F                 	db	79	;'O'
  1431  00FEF9  52                 	db	82	;'R'
  1432  00FEFA  49                 	db	73	;'I'
  1433  00FEFB  54                 	db	84	;'T'
  1434  00FEFC  48                 	db	72	;'H'
  1435  00FEFD  4D                 	db	77	;'M'
  1436  00FEFE  20                 	db	32
  1437  00FEFF  54                 	db	84	;'T'
  1438  00FF00  45                 	db	69	;'E'
  1439  00FF01  53                 	db	83	;'S'
  1440  00FF02  54                 	db	84	;'T'
  1441  00FF03  00                 	db	0
  1442  00FF04                     STR_91:
  1443  00FF04  50                 	db	80	;'P'
  1444  00FF05  49                 	db	73	;'I'
  1445  00FF06  4E                 	db	78	;'N'
  1446  00FF07  20                 	db	32
  1447  00FF08  52                 	db	82	;'R'
  1448  00FF09  41                 	db	65	;'A'
  1449  00FF0A  35                 	db	53	;'5'
  1450  00FF0B  20                 	db	32
  1451  00FF0C  48                 	db	72	;'H'
  1452  00FF0D  49                 	db	73	;'I'
  1453  00FF0E  47                 	db	71	;'G'
  1454  00FF0F  48                 	db	72	;'H'
  1455  00FF10  2E                 	db	46
  1456  00FF11  00                 	db	0
  1457  00FF12                     STR_73:
  1458  00FF12  41                 	db	65	;'A'
  1459  00FF13  4C                 	db	76	;'L'
  1460  00FF14  47                 	db	71	;'G'
  1461  00FF15  32                 	db	50	;'2'
  1462  00FF16  3A                 	db	58	;':'
  1463  00FF17  20                 	db	32
  1464  00FF18  31                 	db	49	;'1'
  1465  00FF19  32                 	db	50	;'2'
  1466  00FF1A  20                 	db	32
  1467  00FF1B  43                 	db	67	;'C'
  1468  00FF1C  41                 	db	65	;'A'
  1469  00FF1D  4E                 	db	78	;'N'
  1470  00FF1E  53                 	db	83	;'S'
  1471  00FF1F  00                 	db	0
  1472  00FF20                     STR_76:
  1473  00FF20  41                 	db	65	;'A'
  1474  00FF21  4C                 	db	76	;'L'
  1475  00FF22  47                 	db	71	;'G'
  1476  00FF23  35                 	db	53	;'5'
  1477  00FF24  3A                 	db	58	;':'
  1478  00FF25  20                 	db	32
  1479  00FF26  4E                 	db	78	;'N'
  1480  00FF27  4F                 	db	79	;'O'
  1481  00FF28  20                 	db	32
  1482  00FF29  43                 	db	67	;'C'
  1483  00FF2A  41                 	db	65	;'A'
  1484  00FF2B  4E                 	db	78	;'N'
  1485  00FF2C  53                 	db	83	;'S'
  1486  00FF2D  00                 	db	0
  1487  00FF2E                     STR_71:
  1488  00FF2E  50                 	db	80	;'P'
  1489  00FF2F  55                 	db	85	;'U'
  1490  00FF30  53                 	db	83	;'S'
  1491  00FF31  48                 	db	72	;'H'
  1492  00FF32  20                 	db	32
  1493  00FF33  54                 	db	84	;'T'
  1494  00FF34  4F                 	db	79	;'O'
  1495  00FF35  20                 	db	32
  1496  00FF36  53                 	db	83	;'S'
  1497  00FF37  54                 	db	84	;'T'
  1498  00FF38  41                 	db	65	;'A'
  1499  00FF39  52                 	db	82	;'R'
  1500  00FF3A  54                 	db	84	;'T'
  1501  00FF3B  00                 	db	0
  1502  00FF3C                     STR_23:
  1503  00FF3C  25                 	db	37
  1504  00FF3D  64                 	db	100	;'d'
  1505  00FF3E  20                 	db	32
  1506  00FF3F  4D                 	db	77	;'M'
  1507  00FF40  49                 	db	73	;'I'
  1508  00FF41  4E                 	db	78	;'N'
  1509  00FF42  20                 	db	32
  1510  00FF43  25                 	db	37
  1511  00FF44  64                 	db	100	;'d'
  1512  00FF45  20                 	db	32
  1513  00FF46  53                 	db	83	;'S'
  1514  00FF47  45                 	db	69	;'E'
  1515  00FF48  43                 	db	67	;'C'
  1516  00FF49  00                 	db	0
  1517  00FF4A                     STR_2:
  1518  00FF4A  54                 	db	84	;'T'
  1519  00FF4B  49                 	db	73	;'I'
  1520  00FF4C  4D                 	db	77	;'M'
  1521  00FF4D  45                 	db	69	;'E'
  1522  00FF4E  3A                 	db	58	;':'
  1523  00FF4F  20                 	db	32
  1524  00FF50  25                 	db	37
  1525  00FF51  64                 	db	100	;'d'
  1526  00FF52  3A                 	db	58	;':'
  1527  00FF53  25                 	db	37
  1528  00FF54  30                 	db	48	;'0'
  1529  00FF55  32                 	db	50	;'2'
  1530  00FF56  64                 	db	100	;'d'
  1531  00FF57  00                 	db	0
  1532  00FF58                     STR_79:
  1533  00FF58  54                 	db	84	;'T'
  1534  00FF59  53                 	db	83	;'S'
  1535  00FF5A  54                 	db	84	;'T'
  1536  00FF5B  3A                 	db	58	;':'
  1537  00FF5C  20                 	db	32
  1538  00FF5D  49                 	db	73	;'I'
  1539  00FF5E  52                 	db	82	;'R'
  1540  00FF5F  20                 	db	32
  1541  00FF60  53                 	db	83	;'S'
  1542  00FF61  4E                 	db	78	;'N'
  1543  00FF62  53                 	db	83	;'S'
  1544  00FF63  52                 	db	82	;'R'
  1545  00FF64  00                 	db	0
  1546  00FF65                     STR_74:
  1547  00FF65  41                 	db	65	;'A'
  1548  00FF66  4C                 	db	76	;'L'
  1549  00FF67  47                 	db	71	;'G'
  1550  00FF68  33                 	db	51	;'3'
  1551  00FF69  3A                 	db	58	;':'
  1552  00FF6A  20                 	db	32
  1553  00FF6B  31                 	db	49	;'1'
  1554  00FF6C  20                 	db	32
  1555  00FF6D  43                 	db	67	;'C'
  1556  00FF6E  41                 	db	65	;'A'
  1557  00FF6F  4E                 	db	78	;'N'
  1558  00FF70  00                 	db	0
  1559  00FF71                     STR_93:
  1560  00FF71  50                 	db	80	;'P'
  1561  00FF72  49                 	db	73	;'I'
  1562  00FF73  4E                 	db	78	;'N'
  1563  00FF74  20                 	db	32
  1564  00FF75  52                 	db	82	;'R'
  1565  00FF76  41                 	db	65	;'A'
  1566  00FF77  33                 	db	51	;'3'
  1567  00FF78  2E                 	db	46
  1568  00FF79  2E                 	db	46
  1569  00FF7A  2E                 	db	46
  1570  00FF7B  00                 	db	0
  1571  00FF7C                     STR_95:
  1572  00FF7C  50                 	db	80	;'P'
  1573  00FF7D  49                 	db	73	;'I'
  1574  00FF7E  4E                 	db	78	;'N'
  1575  00FF7F  20                 	db	32
  1576  00FF80  52                 	db	82	;'R'
  1577  00FF81  41                 	db	65	;'A'
  1578  00FF82  34                 	db	52	;'4'
  1579  00FF83  2E                 	db	46
  1580  00FF84  2E                 	db	46
  1581  00FF85  2E                 	db	46
  1582  00FF86  00                 	db	0
  1583  00FF87                     STR_84:
  1584  00FF87  54                 	db	84	;'T'
  1585  00FF88  53                 	db	83	;'S'
  1586  00FF89  54                 	db	84	;'T'
  1587  00FF8A  3A                 	db	58	;':'
  1588  00FF8B  20                 	db	32
  1589  00FF8C  43                 	db	67	;'C'
  1590  00FF8D  4F                 	db	79	;'O'
  1591  00FF8E  4E                 	db	78	;'N'
  1592  00FF8F  44                 	db	68	;'D'
  1593  00FF90  00                 	db	0
  1594  00FF91                     STR_88:
  1595  00FF91  41                 	db	65	;'A'
  1596  00FF92  43                 	db	67	;'C'
  1597  00FF93  54                 	db	84	;'T'
  1598  00FF94  55                 	db	85	;'U'
  1599  00FF95  41                 	db	65	;'A'
  1600  00FF96  54                 	db	84	;'T'
  1601  00FF97  4F                 	db	79	;'O'
  1602  00FF98  52                 	db	82	;'R'
  1603  00FF99  53                 	db	83	;'S'
  1604  00FF9A  00                 	db	0
  1605  00FF9B                     STR_22:
  1606  00FF9B  44                 	db	68	;'D'
  1607  00FF9C  55                 	db	85	;'U'
  1608  00FF9D  52                 	db	82	;'R'
  1609  00FF9E  41                 	db	65	;'A'
  1610  00FF9F  54                 	db	84	;'T'
  1611  00FFA0  49                 	db	73	;'I'
  1612  00FFA1  4F                 	db	79	;'O'
  1613  00FFA2  4E                 	db	78	;'N'
  1614  00FFA3  3A                 	db	58	;':'
  1615  00FFA4  00                 	db	0
  1616  00FFA5                     STR_86:
  1617  00FFA5  43                 	db	67	;'C'
  1618  00FFA6  4F                 	db	79	;'O'
  1619  00FFA7  4E                 	db	78	;'N'
  1620  00FFA8  44                 	db	68	;'D'
  1621  00FFA9  3A                 	db	58	;':'
  1622  00FFAA  20                 	db	32
  1623  00FFAB  25                 	db	37
  1624  00FFAC  64                 	db	100	;'d'
  1625  00FFAD  00                 	db	0
  1626  00FFAE                     STR_77:
  1627  00FFAE  53                 	db	83	;'S'
  1628  00FFAF  45                 	db	69	;'E'
  1629  00FFB0  4E                 	db	78	;'N'
  1630  00FFB1  53                 	db	83	;'S'
  1631  00FFB2  4F                 	db	79	;'O'
  1632  00FFB3  52                 	db	82	;'R'
  1633  00FFB4  53                 	db	83	;'S'
  1634  00FFB5  00                 	db	0
  1635  00FFB6                     STR_130:
  1636  00FFB6  28                 	db	40
  1637  00FFB7  6E                 	db	110	;'n'
  1638  00FFB8  75                 	db	117	;'u'
  1639  00FFB9  6C                 	db	108	;'l'
  1640  00FFBA  6C                 	db	108	;'l'
  1641  00FFBB  29                 	db	41
  1642  00FFBC  00                 	db	0
  1643  00FFBD                     STR_67:
  1644  00FFBD  46                 	db	70	;'F'
  1645  00FFBE  41                 	db	65	;'A'
  1646  00FFBF  49                 	db	73	;'I'
  1647  00FFC0  4C                 	db	76	;'L'
  1648  00FFC1  45                 	db	69	;'E'
  1649  00FFC2  44                 	db	68	;'D'
  1650  00FFC3  00                 	db	0
  1651  00FFC4                     STR_7:
  1652  00FFC4  53                 	db	83	;'S'
  1653  00FFC5  54                 	db	84	;'T'
  1654  00FFC6  41                 	db	65	;'A'
  1655  00FFC7  52                 	db	82	;'R'
  1656  00FFC8  54                 	db	84	;'T'
  1657  00FFC9  3A                 	db	58	;':'
  1658  00FFCA  00                 	db	0
  1659  00FFCB                     STR_9:
  1660  00FFCB  46                 	db	70	;'F'
  1661  00FFCC  45                 	db	69	;'E'
  1662  00FFCD  42                 	db	66	;'B'
  1663  00FFCE  00                 	db	0
  1664  00FFCF                     STR_19:
  1665  00FFCF  44                 	db	68	;'D'
  1666  00FFD0  45                 	db	69	;'E'
  1667  00FFD1  43                 	db	67	;'C'
  1668  00FFD2  00                 	db	0
  1669  00FFD3                     STR_15:
  1670  00FFD3  41                 	db	65	;'A'
  1671  00FFD4  55                 	db	85	;'U'
  1672  00FFD5  47                 	db	71	;'G'
  1673  00FFD6  00                 	db	0
  1674  00FFD7                     STR_14:
  1675  00FFD7  4A                 	db	74	;'J'
  1676  00FFD8  55                 	db	85	;'U'
  1677  00FFD9  4C                 	db	76	;'L'
  1678  00FFDA  00                 	db	0
  1679  00FFDB                     STR_8:
  1680  00FFDB  4A                 	db	74	;'J'
  1681  00FFDC  41                 	db	65	;'A'
  1682  00FFDD  4E                 	db	78	;'N'
  1683  00FFDE  00                 	db	0
  1684  00FFDF                     STR_13:
  1685  00FFDF  4A                 	db	74	;'J'
  1686  00FFE0  55                 	db	85	;'U'
  1687  00FFE1  4E                 	db	78	;'N'
  1688  00FFE2  00                 	db	0
  1689  00FFE3                     STR_16:
  1690  00FFE3  53                 	db	83	;'S'
  1691  00FFE4  45                 	db	69	;'E'
  1692  00FFE5  50                 	db	80	;'P'
  1693  00FFE6  00                 	db	0
  1694  00FFE7                     STR_10:
  1695  00FFE7  4D                 	db	77	;'M'
  1696  00FFE8  41                 	db	65	;'A'
  1697  00FFE9  52                 	db	82	;'R'
  1698  00FFEA  00                 	db	0
  1699  00FFEB                     STR_11:
  1700  00FFEB  41                 	db	65	;'A'
  1701  00FFEC  50                 	db	80	;'P'
  1702  00FFED  52                 	db	82	;'R'
  1703  00FFEE  00                 	db	0
  1704  00FFEF                     STR_20:
  1705  00FFEF  45                 	db	69	;'E'
  1706  00FFF0  52                 	db	82	;'R'
  1707  00FFF1  52                 	db	82	;'R'
  1708  00FFF2  00                 	db	0
  1709  00FFF3                     STR_17:
  1710  00FFF3  4F                 	db	79	;'O'
  1711  00FFF4  43                 	db	67	;'C'
  1712  00FFF5  54                 	db	84	;'T'
  1713  00FFF6  00                 	db	0
  1714  00FFF7                     STR_18:
  1715  00FFF7  4E                 	db	78	;'N'
  1716  00FFF8  4F                 	db	79	;'O'
  1717  00FFF9  56                 	db	86	;'V'
  1718  00FFFA  00                 	db	0
  1719  00FFFB                     STR_12:
  1720  00FFFB  4D                 	db	77	;'M'
  1721  00FFFC  41                 	db	65	;'A'
  1722  00FFFD  59                 	db	89	;'Y'
  1723  00FFFE  00                 	db	0
  1724  0000                     
  1725                           ; #config settings
  1726  00FFFF  00                 	db	0	; dummy byte at the end
  1727  0000                     
  1728                           	psect	cinit
  1729  005362                     __pcinit:
  1730                           	opt stack 0
  1731  005362                     start_initialization:
  1732                           	opt stack 0
  1733  005362                     __initialization:
  1734                           	opt stack 0
  1735                           
  1736                           ; Initialize objects allocated to BANK1 (8 bytes)
  1737                           ; load TBLPTR registers with __pidataBANK1
  1738  005362  0E8C               	movlw	low __pidataBANK1
  1739  005364  6EF6               	movwf	tblptrl,c
  1740  005366  0E5B               	movlw	high __pidataBANK1
  1741  005368  6EF7               	movwf	tblptrh,c
  1742  00536A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1743  00536C  6EF8               	movwf	tblptru,c
  1744  00536E  EE01  F049         	lfsr	0,__pdataBANK1
  1745  005372  EE10 F008          	lfsr	1,8
  1746  005376                     copy_data0:
  1747  005376  0009               	tblrd		*+
  1748  005378  CFF5 FFEE          	movff	tablat,postinc0
  1749  00537C  50E5               	movf	postdec1,w,c
  1750  00537E  50E1               	movf	fsr1l,w,c
  1751  005380  E1FA               	bnz	copy_data0
  1752                           
  1753                           ; Clear objects allocated to BANK1 (73 bytes)
  1754  005382  EE01  F000         	lfsr	0,__pbssBANK1
  1755  005386  0E49               	movlw	73
  1756  005388                     clear_0:
  1757  005388  6AEE               	clrf	postinc0,c
  1758  00538A  06E8               	decf	wreg,f,c
  1759  00538C  E1FD               	bnz	clear_0
  1760                           
  1761                           ; Clear objects allocated to BANK0 (38 bytes)
  1762  00538E  EE00  F0DA         	lfsr	0,__pbssBANK0
  1763  005392  0E26               	movlw	38
  1764  005394                     clear_1:
  1765  005394  6AEE               	clrf	postinc0,c
  1766  005396  06E8               	decf	wreg,f,c
  1767  005398  E1FD               	bnz	clear_1
  1768                           
  1769                           ; Clear objects allocated to COMRAM (37 bytes)
  1770  00539A  EE00  F059         	lfsr	0,__pbssCOMRAM
  1771  00539E  0E25               	movlw	37
  1772  0053A0                     clear_2:
  1773  0053A0  6AEE               	clrf	postinc0,c
  1774  0053A2  06E8               	decf	wreg,f,c
  1775  0053A4  E1FD               	bnz	clear_2
  1776  0053A6                     end_of_initialization:
  1777                           	opt stack 0
  1778  0053A6                     __end_of__initialization:
  1779                           	opt stack 0
  1780  0053A6  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1781  0053A8  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1782  0053AA  0100               	movlb	0
  1783  0053AC  EFE3  F023         	goto	_main	;jump to C main() function
  1784                           tblptru	equ	0xFF8
  1785                           tblptrh	equ	0xFF7
  1786                           tblptrl	equ	0xFF6
  1787                           tablat	equ	0xFF5
  1788                           postinc0	equ	0xFEE
  1789                           wreg	equ	0xFE8
  1790                           postdec1	equ	0xFE5
  1791                           fsr1l	equ	0xFE1
  1792                           
  1793                           	psect	bssCOMRAM
  1794  000059                     __pbssCOMRAM:
  1795                           	opt stack 0
  1796  000059                     _servoTimes:
  1797                           	opt stack 0
  1798  000059                     	ds	8
  1799  000061                     _back:
  1800                           	opt stack 0
  1801  000061                     	ds	2
  1802  000063                     _down:
  1803                           	opt stack 0
  1804  000063                     	ds	2
  1805  000065                     _enter:
  1806                           	opt stack 0
  1807  000065                     	ds	2
  1808  000067                     _f_panning_to_bin:
  1809                           	opt stack 0
  1810  000067                     	ds	2
  1811  000069                     _log_count_can_no_lab:
  1812                           	opt stack 0
  1813  000069                     	ds	2
  1814  00006B                     _pan_servo_state:
  1815                           	opt stack 0
  1816  00006B                     	ds	2
  1817  00006D                     _servo_timer_counter:
  1818                           	opt stack 0
  1819  00006D                     	ds	2
  1820  00006F                     _servo_timer_target:
  1821                           	opt stack 0
  1822  00006F                     	ds	2
  1823  000071                     _tilt_servo_state:
  1824                           	opt stack 0
  1825  000071                     	ds	2
  1826  000073                     _timer2_counter:
  1827                           	opt stack 0
  1828  000073                     	ds	2
  1829  000075                     _up:
  1830                           	opt stack 0
  1831  000075                     	ds	2
  1832  000077                     _was_low_1:
  1833                           	opt stack 0
  1834  000077                     	ds	2
  1835  000079                     _was_low_2:
  1836                           	opt stack 0
  1837  000079                     	ds	2
  1838  00007B                     _was_low_3:
  1839                           	opt stack 0
  1840  00007B                     	ds	2
  1841  00007D                     _input:
  1842                           	opt stack 0
  1843  00007D                     	ds	1
  1844                           tblptru	equ	0xFF8
  1845                           tblptrh	equ	0xFF7
  1846                           tblptrl	equ	0xFF6
  1847                           tablat	equ	0xFF5
  1848                           postinc0	equ	0xFEE
  1849                           wreg	equ	0xFE8
  1850                           postdec1	equ	0xFE5
  1851                           fsr1l	equ	0xFE1
  1852                           
  1853                           	psect	bssBANK0
  1854  0000DA                     __pbssBANK0:
  1855                           	opt stack 0
  1856  0000DA                     _sensor_outputs:
  1857                           	opt stack 0
  1858  0000DA                     	ds	4
  1859  0000DE                     _COND_signal:
  1860                           	opt stack 0
  1861  0000DE                     	ds	2
  1862  0000E0                     _IR_signal:
  1863                           	opt stack 0
  1864  0000E0                     	ds	2
  1865  0000E2                     _MAG_signal:
  1866                           	opt stack 0
  1867  0000E2                     	ds	2
  1868  0000E4                     _RTCflag:
  1869                           	opt stack 0
  1870  0000E4                     	ds	2
  1871  0000E6                     _cur_state:
  1872                           	opt stack 0
  1873  0000E6                     	ds	2
  1874  0000E8                     _f_arm_position:
  1875                           	opt stack 0
  1876  0000E8                     	ds	2
  1877  0000EA                     _f_lastCan:
  1878                           	opt stack 0
  1879  0000EA                     	ds	2
  1880  0000EC                     _f_loadingNewCan:
  1881                           	opt stack 0
  1882  0000EC                     	ds	2
  1883  0000EE                     _log:
  1884                           	opt stack 0
  1885  0000EE                     	ds	2
  1886  0000F0                     _log_completion:
  1887                           	opt stack 0
  1888  0000F0                     	ds	2
  1889  0000F2                     _log_count_pop_no_tab:
  1890                           	opt stack 0
  1891  0000F2                     	ds	2
  1892  0000F4                     _log_count_pop_w_tab:
  1893                           	opt stack 0
  1894  0000F4                     	ds	2
  1895  0000F6                     _log_total_time:
  1896                           	opt stack 0
  1897  0000F6                     	ds	2
  1898  0000F8                     _logstate:
  1899                           	opt stack 0
  1900  0000F8                     	ds	2
  1901  0000FA                     _total_time:
  1902                           	opt stack 0
  1903  0000FA                     	ds	2
  1904  0000FC                     _machine_state:
  1905                           	opt stack 0
  1906  0000FC                     	ds	1
  1907  0000FD                     _sel:
  1908                           	opt stack 0
  1909  0000FD                     	ds	1
  1910  0000FE                     _count_total:
  1911                           	opt stack 0
  1912  0000FE                     	ds	2
  1913                           tblptru	equ	0xFF8
  1914                           tblptrh	equ	0xFF7
  1915                           tblptrl	equ	0xFF6
  1916                           tablat	equ	0xFF5
  1917                           postinc0	equ	0xFEE
  1918                           wreg	equ	0xFE8
  1919                           postdec1	equ	0xFE5
  1920                           fsr1l	equ	0xFE1
  1921                           
  1922                           	psect	bssBANK1
  1923  000100                     __pbssBANK1:
  1924                           	opt stack 0
  1925  000100                     _log_startTime:
  1926                           	opt stack 0
  1927  000100                     	ds	14
  1928  00010E                     _startTime:
  1929                           	opt stack 0
  1930  00010E                     	ds	14
  1931  00011C                     _time:
  1932                           	opt stack 0
  1933  00011C                     	ds	7
  1934  000123                     _count_can_no_lab:
  1935                           	opt stack 0
  1936  000123                     	ds	2
  1937  000125                     _count_can_w_lab:
  1938                           	opt stack 0
  1939  000125                     	ds	2
  1940  000127                     _count_pop_no_tab:
  1941                           	opt stack 0
  1942  000127                     	ds	2
  1943  000129                     _count_pop_w_tab:
  1944                           	opt stack 0
  1945  000129                     	ds	2
  1946  00012B                     _cur_can:
  1947                           	opt stack 0
  1948  00012B                     	ds	2
  1949  00012D                     _debug:
  1950                           	opt stack 0
  1951  00012D                     	ds	2
  1952  00012F                     _f_ID_receive:
  1953                           	opt stack 0
  1954  00012F                     	ds	2
  1955  000131                     _f_can_coming_to_ID:
  1956                           	opt stack 0
  1957  000131                     	ds	2
  1958  000133                     _f_can_coming_to_distribution:
  1959                           	opt stack 0
  1960  000133                     	ds	2
  1961  000135                     _f_can_distributed:
  1962                           	opt stack 0
  1963  000135                     	ds	2
  1964  000137                     _f_most_recent_sort_time:
  1965                           	opt stack 0
  1966  000137                     	ds	2
  1967  000139                     _first:
  1968                           	opt stack 0
  1969  000139                     	ds	2
  1970  00013B                     _firstboot:
  1971                           	opt stack 0
  1972  00013B                     	ds	2
  1973  00013D                     _i:
  1974                           	opt stack 0
  1975  00013D                     	ds	2
  1976  00013F                     _log_count_can_w_lab:
  1977                           	opt stack 0
  1978  00013F                     	ds	2
  1979  000141                     _log_count_total:
  1980                           	opt stack 0
  1981  000141                     	ds	2
  1982  000143                     _most_recent_sort_time:
  1983                           	opt stack 0
  1984  000143                     	ds	2
  1985  000145                     _motor_toggle_count:
  1986                           	opt stack 0
  1987  000145                     	ds	2
  1988  000147                     _var:
  1989                           	opt stack 0
  1990  000147                     	ds	2
  1991                           tblptru	equ	0xFF8
  1992                           tblptrh	equ	0xFF7
  1993                           tblptrl	equ	0xFF6
  1994                           tablat	equ	0xFF5
  1995                           postinc0	equ	0xFEE
  1996                           wreg	equ	0xFE8
  1997                           postdec1	equ	0xFE5
  1998                           fsr1l	equ	0xFE1
  1999                           
  2000                           	psect	dataBANK1
  2001  000149                     __pdataBANK1:
  2002                           	opt stack 0
  2003  000149                     UI@F3247:
  2004                           	opt stack 0
  2005  000149                     	ds	4
  2006  00014D                     printRTC@F3237:
  2007                           	opt stack 0
  2008  00014D                     	ds	4
  2009                           tblptru	equ	0xFF8
  2010                           tblptrh	equ	0xFF7
  2011                           tblptrl	equ	0xFF6
  2012                           tablat	equ	0xFF5
  2013                           postinc0	equ	0xFEE
  2014                           wreg	equ	0xFE8
  2015                           postdec1	equ	0xFE5
  2016                           fsr1l	equ	0xFE1
  2017                           
  2018                           	psect	cstackBANK0
  2019  000080                     __pcstackBANK0:
  2020                           	opt stack 0
  2021  000080                     ??_delay_ms:
  2022  000080                     ??_isdigit:
  2023  000080                     ??_readADC:
  2024  000080                     ??_I2C_Master_Wait:
  2025  000080                     ?___wmul:
  2026                           	opt stack 0
  2027  000080                     ?___awmod:
  2028                           	opt stack 0
  2029  000080                     ?___lwdiv:
  2030                           	opt stack 0
  2031  000080                     ?___ftpack:
  2032                           	opt stack 0
  2033  000080                     ?___lldiv:
  2034                           	opt stack 0
  2035  000080                     lcdNibble@temp:
  2036                           	opt stack 0
  2037  000080                     initTime@m:
  2038                           	opt stack 0
  2039  000080                     updateServoPosition@time_us:
  2040                           	opt stack 0
  2041  000080                     EEPROM_read@address:
  2042                           	opt stack 0
  2043  000080                     ___wmul@multiplier:
  2044                           	opt stack 0
  2045  000080                     ___awmod@dividend:
  2046                           	opt stack 0
  2047  000080                     ___lwdiv@dividend:
  2048                           	opt stack 0
  2049  000080                     strcpy@to:
  2050                           	opt stack 0
  2051  000080                     ___ftpack@arg:
  2052                           	opt stack 0
  2053  000080                     ___lldiv@dividend:
  2054                           	opt stack 0
  2055                           
  2056                           ; 4 bytes @ 0x0
  2057  000080                     	ds	1
  2058  000081                     readADC@channel:
  2059                           	opt stack 0
  2060  000081                     I2C_Master_Read@a:
  2061                           	opt stack 0
  2062  000081                     lcdNibble@data:
  2063                           	opt stack 0
  2064  000081                     initTime@h:
  2065                           	opt stack 0
  2066  000081                     delay_ms@milliseconds:
  2067                           	opt stack 0
  2068  000081                     _isdigit$2068:
  2069                           	opt stack 0
  2070  000081                     I2C_Master_Write@d:
  2071                           	opt stack 0
  2072                           
  2073                           ; 2 bytes @ 0x1
  2074  000081                     	ds	1
  2075  000082                     ??_readIR:
  2076  000082                     ??_readMAG:
  2077  000082                     ??_readCOND:
  2078  000082                     I2C_Master_Read@temp:
  2079                           	opt stack 0
  2080  000082                     lcdInst@data:
  2081                           	opt stack 0
  2082  000082                     putch@data:
  2083                           	opt stack 0
  2084  000082                     initTime@w:
  2085                           	opt stack 0
  2086  000082                     isdigit@c:
  2087                           	opt stack 0
  2088  000082                     updateServoPosition@timer:
  2089                           	opt stack 0
  2090  000082                     ___wmul@multiplicand:
  2091                           	opt stack 0
  2092  000082                     ___awmod@divisor:
  2093                           	opt stack 0
  2094  000082                     ___lwdiv@divisor:
  2095                           	opt stack 0
  2096  000082                     strcpy@from:
  2097                           	opt stack 0
  2098                           
  2099                           ; 2 bytes @ 0x2
  2100  000082                     	ds	1
  2101  000083                     ??_initLCD:
  2102  000083                     initTime@DD:
  2103                           	opt stack 0
  2104  000083                     ___ftpack@exp:
  2105                           	opt stack 0
  2106  000083                     getRTC@i:
  2107                           	opt stack 0
  2108                           
  2109                           ; 2 bytes @ 0x3
  2110  000083                     	ds	1
  2111  000084                     ??_updateServoPosition:
  2112  000084                     initTime@MM:
  2113                           	opt stack 0
  2114  000084                     ___awmod@counter:
  2115                           	opt stack 0
  2116  000084                     ___ftpack@sign:
  2117                           	opt stack 0
  2118  000084                     readIR@res:
  2119                           	opt stack 0
  2120  000084                     readMAG@res:
  2121                           	opt stack 0
  2122  000084                     readCOND@res:
  2123                           	opt stack 0
  2124  000084                     ___wmul@product:
  2125                           	opt stack 0
  2126  000084                     ___lwdiv@quotient:
  2127                           	opt stack 0
  2128  000084                     strcpy@cp:
  2129                           	opt stack 0
  2130  000084                     ___lldiv@divisor:
  2131                           	opt stack 0
  2132                           
  2133                           ; 4 bytes @ 0x4
  2134  000084                     	ds	1
  2135  000085                     ??_initSortTimer:
  2136  000085                     ??___ftpack:
  2137  000085                     initTime@YY:
  2138                           	opt stack 0
  2139  000085                     ___awmod@sign:
  2140                           	opt stack 0
  2141                           
  2142                           ; 1 bytes @ 0x5
  2143  000085                     	ds	1
  2144  000086                     ??_getIR:
  2145  000086                     ??_getMAG:
  2146  000086                     ?___awdiv:
  2147                           	opt stack 0
  2148  000086                     initTime@s:
  2149                           	opt stack 0
  2150  000086                     ___lwdiv@counter:
  2151                           	opt stack 0
  2152  000086                     updateServoPosition@my_time:
  2153                           	opt stack 0
  2154  000086                     ___awdiv@dividend:
  2155                           	opt stack 0
  2156                           
  2157                           ; 2 bytes @ 0x6
  2158  000086                     	ds	1
  2159  000087                     ?___lwmod:
  2160                           	opt stack 0
  2161  000087                     getIR@i:
  2162                           	opt stack 0
  2163  000087                     ___lwmod@dividend:
  2164                           	opt stack 0
  2165                           
  2166                           ; 2 bytes @ 0x7
  2167  000087                     	ds	1
  2168  000088                     ??_Distribution:
  2169  000088                     ??_initServos:
  2170  000088                     initSortTimer@i:
  2171                           	opt stack 0
  2172  000088                     ___awdiv@divisor:
  2173                           	opt stack 0
  2174  000088                     ___lldiv@quotient:
  2175                           	opt stack 0
  2176                           
  2177                           ; 4 bytes @ 0x8
  2178  000088                     	ds	1
  2179  000089                     ___lwmod@divisor:
  2180                           	opt stack 0
  2181                           
  2182                           ; 2 bytes @ 0x9
  2183  000089                     	ds	1
  2184  00008A                     ___awdiv@counter:
  2185                           	opt stack 0
  2186                           
  2187                           ; 1 bytes @ 0xA
  2188  00008A                     	ds	1
  2189  00008B                     ___awdiv@sign:
  2190                           	opt stack 0
  2191  00008B                     ___lwmod@counter:
  2192                           	opt stack 0
  2193                           
  2194                           ; 1 bytes @ 0xB
  2195  00008B                     	ds	1
  2196  00008C                     ___lldiv@counter:
  2197                           	opt stack 0
  2198  00008C                     ___awdiv@quotient:
  2199                           	opt stack 0
  2200                           
  2201                           ; 2 bytes @ 0xC
  2202  00008C                     	ds	1
  2203  00008D                     I2C_Master_Init@c:
  2204                           	opt stack 0
  2205                           
  2206                           ; 4 bytes @ 0xD
  2207  00008D                     	ds	1
  2208  00008E                     ?_printf:
  2209                           	opt stack 0
  2210  00008E                     ?___awtoft:
  2211                           	opt stack 0
  2212  00008E                     printf@f:
  2213                           	opt stack 0
  2214  00008E                     ___awtoft@c:
  2215                           	opt stack 0
  2216                           
  2217                           ; 2 bytes @ 0xE
  2218  00008E                     	ds	3
  2219  000091                     ??_I2C_Master_Init:
  2220  000091                     ___awtoft@sign:
  2221                           	opt stack 0
  2222                           
  2223                           ; 1 bytes @ 0x11
  2224  000091                     	ds	1
  2225  000092                     ___ftge@ff1:
  2226                           	opt stack 0
  2227                           
  2228                           ; 3 bytes @ 0x12
  2229  000092                     	ds	3
  2230  000095                     ??_loadRTC:
  2231  000095                     ___ftge@ff2:
  2232                           	opt stack 0
  2233                           
  2234                           ; 3 bytes @ 0x15
  2235  000095                     	ds	1
  2236  000096                     loadRTC@i:
  2237                           	opt stack 0
  2238                           
  2239                           ; 2 bytes @ 0x16
  2240  000096                     	ds	2
  2241  000098                     ??___ftge:
  2242                           
  2243                           ; 1 bytes @ 0x18
  2244  000098                     	ds	2
  2245  00009A                     ??_printf:
  2246                           
  2247                           ; 1 bytes @ 0x1A
  2248  00009A                     	ds	1
  2249  00009B                     ??_ID:
  2250                           
  2251                           ; 1 bytes @ 0x1B
  2252  00009B                     	ds	2
  2253  00009D                     ID@res:
  2254                           	opt stack 0
  2255                           
  2256                           ; 10 bytes @ 0x1D
  2257  00009D                     	ds	1
  2258  00009E                     printf@prec:
  2259                           	opt stack 0
  2260                           
  2261                           ; 1 bytes @ 0x1E
  2262  00009E                     	ds	1
  2263  00009F                     printf@cp:
  2264                           	opt stack 0
  2265                           
  2266                           ; 2 bytes @ 0x1F
  2267  00009F                     	ds	2
  2268  0000A1                     printf@ap:
  2269                           	opt stack 0
  2270                           
  2271                           ; 2 bytes @ 0x21
  2272  0000A1                     	ds	2
  2273  0000A3                     printf@len:
  2274                           	opt stack 0
  2275                           
  2276                           ; 2 bytes @ 0x23
  2277  0000A3                     	ds	2
  2278  0000A5                     printf@val:
  2279                           	opt stack 0
  2280                           
  2281                           ; 2 bytes @ 0x25
  2282  0000A5                     	ds	2
  2283  0000A7                     ID@time_1146:
  2284                           	opt stack 0
  2285  0000A7                     printf@flag:
  2286                           	opt stack 0
  2287                           
  2288                           ; 1 bytes @ 0x27
  2289  0000A7                     	ds	1
  2290  0000A8                     _ID$1145:
  2291                           	opt stack 0
  2292  0000A8                     printf@c:
  2293                           	opt stack 0
  2294                           
  2295                           ; 1 bytes @ 0x28
  2296  0000A8                     	ds	1
  2297  0000A9                     _ID$1150:
  2298                           	opt stack 0
  2299  0000A9                     printf@width:
  2300                           	opt stack 0
  2301                           
  2302                           ; 2 bytes @ 0x29
  2303  0000A9                     	ds	1
  2304  0000AA                     ID@i:
  2305                           	opt stack 0
  2306                           
  2307                           ; 2 bytes @ 0x2A
  2308  0000AA                     	ds	1
  2309  0000AB                     ??_printRTC:
  2310  0000AB                     ??_algorithmTest:
  2311  0000AB                     ??_sensorTest:
  2312  0000AB                     ??_actuatorTest:
  2313  0000AB                     ??_arm:
  2314  0000AB                     ??_PortTestDC:
  2315  0000AB                     ??_SpeedTest:
  2316  0000AB                     ??_PortTestPusher:
  2317  0000AB                     ??_PlatformTest:
  2318  0000AB                     ??_BothServos:
  2319  0000AB                     ??_BlockerTest:
  2320  0000AB                     EEPROM_write@address:
  2321                           	opt stack 0
  2322                           
  2323                           ; 2 bytes @ 0x2B
  2324  0000AB                     	ds	1
  2325  0000AC                     ID@i_1144:
  2326                           	opt stack 0
  2327  0000AC                     arm@on:
  2328                           	opt stack 0
  2329                           
  2330                           ; 2 bytes @ 0x2C
  2331  0000AC                     	ds	1
  2332  0000AD                     EEPROM_write@data:
  2333                           	opt stack 0
  2334  0000AD                     actuatorTest@i_1739:
  2335                           	opt stack 0
  2336  0000AD                     sensorTest@res:
  2337                           	opt stack 0
  2338  0000AD                     PlatformTest@res:
  2339                           	opt stack 0
  2340  0000AD                     BlockerTest@i:
  2341                           	opt stack 0
  2342                           
  2343                           ; 2 bytes @ 0x2D
  2344  0000AD                     	ds	1
  2345  0000AE                     ??_EEPROM_write:
  2346  0000AE                     actuatorTest@i_1746:
  2347                           	opt stack 0
  2348  0000AE                     ID@i_1149:
  2349                           	opt stack 0
  2350  0000AE                     printRTC@INT_time:
  2351                           	opt stack 0
  2352                           
  2353                           ; 14 bytes @ 0x2E
  2354  0000AE                     	ds	1
  2355  0000AF                     EEPROM_write@i:
  2356                           	opt stack 0
  2357  0000AF                     actuatorTest@i_1747:
  2358                           	opt stack 0
  2359  0000AF                     PlatformTest@res_1791:
  2360                           	opt stack 0
  2361  0000AF                     BlockerTest@res:
  2362                           	opt stack 0
  2363                           
  2364                           ; 2 bytes @ 0x2F
  2365  0000AF                     	ds	1
  2366  0000B0                     EEPROM_write@i_1407:
  2367                           	opt stack 0
  2368  0000B0                     actuatorTest@i_1749:
  2369                           	opt stack 0
  2370  0000B0                     ID@i_1151:
  2371                           	opt stack 0
  2372                           
  2373                           ; 2 bytes @ 0x30
  2374  0000B0                     	ds	1
  2375  0000B1                     ??_Loading:
  2376  0000B1                     logRun@num:
  2377                           	opt stack 0
  2378  0000B1                     actuatorTest@i_1750:
  2379                           	opt stack 0
  2380  0000B1                     PlatformTest@i:
  2381                           	opt stack 0
  2382  0000B1                     BlockerTest@cam_flag:
  2383                           	opt stack 0
  2384                           
  2385                           ; 2 bytes @ 0x31
  2386  0000B1                     	ds	1
  2387  0000B2                     ID@time:
  2388                           	opt stack 0
  2389  0000B2                     logRun@byte1:
  2390                           	opt stack 0
  2391  0000B2                     actuatorTest@i_1752:
  2392                           	opt stack 0
  2393                           
  2394                           ; 1 bytes @ 0x32
  2395  0000B2                     	ds	1
  2396  0000B3                     logRun@byte2:
  2397                           	opt stack 0
  2398  0000B3                     actuatorTest@i_1753:
  2399                           	opt stack 0
  2400  0000B3                     Loading@addr:
  2401                           	opt stack 0
  2402  0000B3                     ID@res1:
  2403                           	opt stack 0
  2404  0000B3                     PlatformTest@i_1795:
  2405                           	opt stack 0
  2406  0000B3                     BlockerTest@cond_flag:
  2407                           	opt stack 0
  2408                           
  2409                           ; 2 bytes @ 0x33
  2410  0000B3                     	ds	1
  2411  0000B4                     logRun@byte3:
  2412                           	opt stack 0
  2413  0000B4                     actuatorTest@i_1755:
  2414                           	opt stack 0
  2415                           
  2416                           ; 1 bytes @ 0x34
  2417  0000B4                     	ds	1
  2418  0000B5                     Loading@byte1:
  2419                           	opt stack 0
  2420  0000B5                     logRun@byte_i:
  2421                           	opt stack 0
  2422  0000B5                     actuatorTest@i_1756:
  2423                           	opt stack 0
  2424  0000B5                     ID@res2:
  2425                           	opt stack 0
  2426  0000B5                     PlatformTest@on:
  2427                           	opt stack 0
  2428                           
  2429                           ; 2 bytes @ 0x35
  2430  0000B5                     	ds	1
  2431  0000B6                     logRun@byte11:
  2432                           	opt stack 0
  2433  0000B6                     actuatorTest@i_1758:
  2434                           	opt stack 0
  2435  0000B6                     Loading@i_1122:
  2436                           	opt stack 0
  2437                           
  2438                           ; 2 bytes @ 0x36
  2439  0000B6                     	ds	1
  2440  0000B7                     actuatorTest@i_1759:
  2441                           	opt stack 0
  2442  0000B7                     ID@i_1152:
  2443                           	opt stack 0
  2444  0000B7                     logRun@i:
  2445                           	opt stack 0
  2446                           
  2447                           ; 2 bytes @ 0x37
  2448  0000B7                     	ds	1
  2449  0000B8                     actuatorTest@i_1761:
  2450                           	opt stack 0
  2451  0000B8                     Loading@i_1131:
  2452                           	opt stack 0
  2453                           
  2454                           ; 2 bytes @ 0x38
  2455  0000B8                     	ds	1
  2456  0000B9                     actuatorTest@i_1762:
  2457                           	opt stack 0
  2458  0000B9                     ID@j:
  2459                           	opt stack 0
  2460  0000B9                     logRun@addr:
  2461                           	opt stack 0
  2462                           
  2463                           ; 2 bytes @ 0x39
  2464  0000B9                     	ds	1
  2465  0000BA                     actuatorTest@i_1765:
  2466                           	opt stack 0
  2467  0000BA                     Loading@i_1133:
  2468                           	opt stack 0
  2469                           
  2470                           ; 2 bytes @ 0x3A
  2471  0000BA                     	ds	1
  2472  0000BB                     actuatorTest@i_1766:
  2473                           	opt stack 0
  2474  0000BB                     ID@n:
  2475                           	opt stack 0
  2476                           
  2477                           ; 2 bytes @ 0x3B
  2478  0000BB                     	ds	1
  2479  0000BC                     actuatorTest@i_1768:
  2480                           	opt stack 0
  2481  0000BC                     printRTC@RTC_month:
  2482                           	opt stack 0
  2483  0000BC                     Loading@i_1134:
  2484                           	opt stack 0
  2485                           
  2486                           ; 2 bytes @ 0x3C
  2487  0000BC                     	ds	1
  2488  0000BD                     actuatorTest@i_1769:
  2489                           	opt stack 0
  2490                           
  2491                           ; 1 bytes @ 0x3D
  2492  0000BD                     	ds	1
  2493  0000BE                     actuatorTest@i_1771:
  2494                           	opt stack 0
  2495  0000BE                     Loading@i_1136:
  2496                           	opt stack 0
  2497  0000BE                     printRTC@month:
  2498                           	opt stack 0
  2499                           
  2500                           ; 4 bytes @ 0x3E
  2501  0000BE                     	ds	1
  2502  0000BF                     actuatorTest@i_1772:
  2503                           	opt stack 0
  2504                           
  2505                           ; 1 bytes @ 0x3F
  2506  0000BF                     	ds	1
  2507  0000C0                     actuatorTest@i_1775:
  2508                           	opt stack 0
  2509  0000C0                     Loading@i:
  2510                           	opt stack 0
  2511                           
  2512                           ; 2 bytes @ 0x40
  2513  0000C0                     	ds	1
  2514  0000C1                     actuatorTest@i_1776:
  2515                           	opt stack 0
  2516                           
  2517                           ; 1 bytes @ 0x41
  2518  0000C1                     	ds	1
  2519  0000C2                     actuatorTest@i_1778:
  2520                           	opt stack 0
  2521  0000C2                     printRTC@i:
  2522                           	opt stack 0
  2523  0000C2                     Loading@j:
  2524                           	opt stack 0
  2525                           
  2526                           ; 2 bytes @ 0x42
  2527  0000C2                     	ds	1
  2528  0000C3                     actuatorTest@i_1779:
  2529                           	opt stack 0
  2530                           
  2531                           ; 1 bytes @ 0x43
  2532  0000C3                     	ds	1
  2533  0000C4                     ??_UI:
  2534  0000C4                     actuatorTest@i:
  2535                           	opt stack 0
  2536                           
  2537                           ; 2 bytes @ 0x44
  2538  0000C4                     	ds	2
  2539  0000C6                     ??_Test:
  2540  0000C6                     _UI$2433:
  2541                           	opt stack 0
  2542                           
  2543                           ; 2 bytes @ 0x46
  2544  0000C6                     	ds	2
  2545  0000C8                     UI@i:
  2546                           	opt stack 0
  2547                           
  2548                           ; 1 bytes @ 0x48
  2549  0000C8                     	ds	1
  2550  0000C9                     UI@i_412:
  2551                           	opt stack 0
  2552                           
  2553                           ; 1 bytes @ 0x49
  2554  0000C9                     	ds	1
  2555  0000CA                     UI@i_415:
  2556                           	opt stack 0
  2557                           
  2558                           ; 1 bytes @ 0x4A
  2559  0000CA                     	ds	1
  2560  0000CB                     UI@i_416:
  2561                           	opt stack 0
  2562                           
  2563                           ; 1 bytes @ 0x4B
  2564  0000CB                     	ds	1
  2565  0000CC                     UI@i_434:
  2566                           	opt stack 0
  2567                           
  2568                           ; 1 bytes @ 0x4C
  2569  0000CC                     	ds	1
  2570  0000CD                     UI@i_435:
  2571                           	opt stack 0
  2572                           
  2573                           ; 1 bytes @ 0x4D
  2574  0000CD                     	ds	1
  2575  0000CE                     UI@i_438:
  2576                           	opt stack 0
  2577                           
  2578                           ; 1 bytes @ 0x4E
  2579  0000CE                     	ds	1
  2580  0000CF                     UI@i_439:
  2581                           	opt stack 0
  2582                           
  2583                           ; 1 bytes @ 0x4F
  2584  0000CF                     	ds	1
  2585  0000D0                     UI@i_442:
  2586                           	opt stack 0
  2587                           
  2588                           ; 1 bytes @ 0x50
  2589  0000D0                     	ds	1
  2590  0000D1                     UI@i_443:
  2591                           	opt stack 0
  2592                           
  2593                           ; 1 bytes @ 0x51
  2594  0000D1                     	ds	1
  2595  0000D2                     UI@i_446:
  2596                           	opt stack 0
  2597                           
  2598                           ; 1 bytes @ 0x52
  2599  0000D2                     	ds	1
  2600  0000D3                     UI@i_447:
  2601                           	opt stack 0
  2602                           
  2603                           ; 1 bytes @ 0x53
  2604  0000D3                     	ds	1
  2605  0000D4                     UI@i_450:
  2606                           	opt stack 0
  2607                           
  2608                           ; 1 bytes @ 0x54
  2609  0000D4                     	ds	1
  2610  0000D5                     UI@i_451:
  2611                           	opt stack 0
  2612                           
  2613                           ; 1 bytes @ 0x55
  2614  0000D5                     	ds	1
  2615  0000D6                     UI@month:
  2616                           	opt stack 0
  2617                           
  2618                           ; 4 bytes @ 0x56
  2619  0000D6                     	ds	4
  2620  0000DA                     tblptru	equ	0xFF8
  2621                           tblptrh	equ	0xFF7
  2622                           tblptrl	equ	0xFF6
  2623                           tablat	equ	0xFF5
  2624                           postinc0	equ	0xFEE
  2625                           wreg	equ	0xFE8
  2626                           postdec1	equ	0xFE5
  2627                           fsr1l	equ	0xFE1
  2628                           
  2629                           ; 1 bytes @ 0x5A
  2630                           
  2631                           	psect	cstackCOMRAM
  2632  000001                     __pcstackCOMRAM:
  2633                           	opt stack 0
  2634  000001                     ??_updateArmState:
  2635  000001                     ??i2_I2C_Master_Wait:
  2636  000001                     ??i2_isdigit:
  2637  000001                     ?i2___wmul:
  2638                           	opt stack 0
  2639  000001                     ?i2___lwmod:
  2640                           	opt stack 0
  2641  000001                     i2lcdNibble@temp:
  2642                           	opt stack 0
  2643  000001                     i2updateServoPosition@time_us:
  2644                           	opt stack 0
  2645  000001                     i2EEPROM_read@address:
  2646                           	opt stack 0
  2647  000001                     i2___wmul@multiplier:
  2648                           	opt stack 0
  2649  000001                     i2___lwmod@dividend:
  2650                           	opt stack 0
  2651  000001                     i2strcpy@to:
  2652                           	opt stack 0
  2653                           
  2654                           ; 2 bytes @ 0x0
  2655  000001                     	ds	1
  2656  000002                     i2I2C_Master_Read@a:
  2657                           	opt stack 0
  2658  000002                     i2lcdNibble@data:
  2659                           	opt stack 0
  2660  000002                     i2_isdigit$2068:
  2661                           	opt stack 0
  2662  000002                     i2I2C_Master_Write@d:
  2663                           	opt stack 0
  2664                           
  2665                           ; 2 bytes @ 0x1
  2666  000002                     	ds	1
  2667  000003                     i2I2C_Master_Read@temp:
  2668                           	opt stack 0
  2669  000003                     i2lcdInst@data:
  2670                           	opt stack 0
  2671  000003                     i2putch@data:
  2672                           	opt stack 0
  2673  000003                     i2isdigit@c:
  2674                           	opt stack 0
  2675  000003                     i2updateServoPosition@timer:
  2676                           	opt stack 0
  2677  000003                     i2___wmul@multiplicand:
  2678                           	opt stack 0
  2679  000003                     i2___lwmod@divisor:
  2680                           	opt stack 0
  2681  000003                     i2strcpy@from:
  2682                           	opt stack 0
  2683                           
  2684                           ; 2 bytes @ 0x2
  2685  000003                     	ds	1
  2686  000004                     i2getRTC@i:
  2687                           	opt stack 0
  2688                           
  2689                           ; 2 bytes @ 0x3
  2690  000004                     	ds	1
  2691  000005                     ??i2_updateServoPosition:
  2692  000005                     i2___lwmod@counter:
  2693                           	opt stack 0
  2694  000005                     i2___wmul@product:
  2695                           	opt stack 0
  2696  000005                     i2strcpy@cp:
  2697                           	opt stack 0
  2698                           
  2699                           ; 2 bytes @ 0x4
  2700  000005                     	ds	1
  2701  000006                     ?i2___lwdiv:
  2702                           	opt stack 0
  2703  000006                     i2___lwdiv@dividend:
  2704                           	opt stack 0
  2705                           
  2706                           ; 2 bytes @ 0x5
  2707  000006                     	ds	1
  2708  000007                     retrieveLog@logNum:
  2709                           	opt stack 0
  2710  000007                     i2updateServoPosition@my_time:
  2711                           	opt stack 0
  2712                           
  2713                           ; 2 bytes @ 0x6
  2714  000007                     	ds	1
  2715  000008                     i2___lwdiv@divisor:
  2716                           	opt stack 0
  2717                           
  2718                           ; 2 bytes @ 0x7
  2719  000008                     	ds	1
  2720  000009                     ??_retrieveLog:
  2721  000009                     ??_updateServoStates:
  2722                           
  2723                           ; 1 bytes @ 0x8
  2724  000009                     	ds	1
  2725  00000A                     i2___lwdiv@quotient:
  2726                           	opt stack 0
  2727                           
  2728                           ; 2 bytes @ 0x9
  2729  00000A                     	ds	1
  2730  00000B                     retrieveLog@byte1:
  2731                           	opt stack 0
  2732                           
  2733                           ; 1 bytes @ 0xA
  2734  00000B                     	ds	1
  2735  00000C                     retrieveLog@byte2:
  2736                           	opt stack 0
  2737  00000C                     i2___lwdiv@counter:
  2738                           	opt stack 0
  2739                           
  2740                           ; 1 bytes @ 0xB
  2741  00000C                     	ds	1
  2742  00000D                     ?i2_printf:
  2743                           	opt stack 0
  2744  00000D                     retrieveLog@byte3:
  2745                           	opt stack 0
  2746  00000D                     i2printf@f:
  2747                           	opt stack 0
  2748                           
  2749                           ; 2 bytes @ 0xC
  2750  00000D                     	ds	1
  2751  00000E                     retrieveLog@i:
  2752                           	opt stack 0
  2753                           
  2754                           ; 2 bytes @ 0xD
  2755  00000E                     	ds	2
  2756  000010                     retrieveLog@addr:
  2757                           	opt stack 0
  2758                           
  2759                           ; 2 bytes @ 0xF
  2760  000010                     	ds	2
  2761  000012                     dispLogs@myLog:
  2762                           	opt stack 0
  2763                           
  2764                           ; 2 bytes @ 0x11
  2765  000012                     	ds	2
  2766  000014                     
  2767                           ; 1 bytes @ 0x13
  2768  000014                     	ds	5
  2769  000019                     ??i2_printf:
  2770                           
  2771                           ; 1 bytes @ 0x18
  2772  000019                     	ds	4
  2773  00001D                     i2printf@prec:
  2774                           	opt stack 0
  2775                           
  2776                           ; 1 bytes @ 0x1C
  2777  00001D                     	ds	1
  2778  00001E                     i2printf@cp:
  2779                           	opt stack 0
  2780                           
  2781                           ; 2 bytes @ 0x1D
  2782  00001E                     	ds	2
  2783  000020                     i2printf@ap:
  2784                           	opt stack 0
  2785                           
  2786                           ; 2 bytes @ 0x1F
  2787  000020                     	ds	2
  2788  000022                     i2printf@len:
  2789                           	opt stack 0
  2790                           
  2791                           ; 2 bytes @ 0x21
  2792  000022                     	ds	2
  2793  000024                     i2printf@val:
  2794                           	opt stack 0
  2795                           
  2796                           ; 2 bytes @ 0x23
  2797  000024                     	ds	2
  2798  000026                     i2printf@flag:
  2799                           	opt stack 0
  2800                           
  2801                           ; 1 bytes @ 0x25
  2802  000026                     	ds	1
  2803  000027                     i2printf@c:
  2804                           	opt stack 0
  2805                           
  2806                           ; 1 bytes @ 0x26
  2807  000027                     	ds	1
  2808  000028                     i2printf@width:
  2809                           	opt stack 0
  2810                           
  2811                           ; 2 bytes @ 0x27
  2812  000028                     	ds	2
  2813  00002A                     ??_printSortTimer:
  2814  00002A                     ??i2_printRTC:
  2815  00002A                     ?_inputHandler:
  2816                           	opt stack 0
  2817                           
  2818                           ; 2 bytes @ 0x29
  2819  00002A                     	ds	2
  2820  00002C                     ??_inputHandler:
  2821                           
  2822                           ; 1 bytes @ 0x2B
  2823  00002C                     	ds	1
  2824  00002D                     printSortTimer@curTime:
  2825                           	opt stack 0
  2826  00002D                     i2printRTC@INT_time:
  2827                           	opt stack 0
  2828                           
  2829                           ; 14 bytes @ 0x2C
  2830  00002D                     	ds	14
  2831  00003B                     printSortTimer@start_sec:
  2832                           	opt stack 0
  2833  00003B                     i2printRTC@RTC_month:
  2834                           	opt stack 0
  2835                           
  2836                           ; 2 bytes @ 0x3A
  2837  00003B                     	ds	2
  2838  00003D                     printSortTimer@cur_sec:
  2839                           	opt stack 0
  2840  00003D                     i2printRTC@month:
  2841                           	opt stack 0
  2842                           
  2843                           ; 4 bytes @ 0x3C
  2844  00003D                     	ds	2
  2845  00003F                     printSortTimer@min:
  2846                           	opt stack 0
  2847                           
  2848                           ; 2 bytes @ 0x3E
  2849  00003F                     	ds	2
  2850  000041                     printSortTimer@sec:
  2851                           	opt stack 0
  2852  000041                     i2printRTC@i:
  2853                           	opt stack 0
  2854                           
  2855                           ; 2 bytes @ 0x40
  2856  000041                     	ds	2
  2857  000043                     ??_updateMenu:
  2858  000043                     _printSortTimer$2560:
  2859                           	opt stack 0
  2860                           
  2861                           ; 2 bytes @ 0x42
  2862  000043                     	ds	2
  2863  000045                     printSortTimer@timeDiff:
  2864                           	opt stack 0
  2865                           
  2866                           ; 2 bytes @ 0x44
  2867  000045                     	ds	2
  2868  000047                     printSortTimer@i:
  2869                           	opt stack 0
  2870                           
  2871                           ; 2 bytes @ 0x46
  2872  000047                     	ds	2
  2873  000049                     ??_handler:
  2874                           
  2875                           ; 1 bytes @ 0x48
  2876  000049                     	ds	16
  2877                           tblptru	equ	0xFF8
  2878                           tblptrh	equ	0xFF7
  2879                           tblptrl	equ	0xFF6
  2880                           tablat	equ	0xFF5
  2881                           postinc0	equ	0xFEE
  2882                           wreg	equ	0xFE8
  2883                           postdec1	equ	0xFE5
  2884                           fsr1l	equ	0xFE1
  2885                           
  2886 ;;
  2887 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2888 ;;
  2889 ;; *************** function _main *****************
  2890 ;; Defined at:
  2891 ;;		line 19 in file "main.c"
  2892 ;; Parameters:    Size  Location     Type
  2893 ;;		None
  2894 ;; Auto vars:     Size  Location     Type
  2895 ;;		None
  2896 ;; Return value:  Size  Location     Type
  2897 ;;                  1    wreg      void 
  2898 ;; Registers used:
  2899 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2900 ;; Tracked objects:
  2901 ;;		On entry : 0/0
  2902 ;;		On exit  : 0/0
  2903 ;;		Unchanged: 0/0
  2904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2909 ;;Total ram usage:        0 bytes
  2910 ;; Hardware stack levels required when called:   13
  2911 ;; This function calls:
  2912 ;;		_I2C_Master_Init
  2913 ;;		_Test
  2914 ;;		_UI
  2915 ;;		_initEEPROM
  2916 ;;		_initLCD
  2917 ;;		_initTime
  2918 ;;		_initUI
  2919 ;;		_logRun
  2920 ;;		_machineConfig
  2921 ;;		_sort
  2922 ;;		_stopSignals
  2923 ;; This function is called by:
  2924 ;;		Startup code after reset
  2925 ;; This function uses a non-reentrant model
  2926 ;;
  2927                           
  2928                           	psect	text0
  2929  0047C6                     __ptext0:
  2930                           	opt stack 0
  2931  0047C6                     _main:
  2932                           	opt stack 18
  2933                           
  2934                           ;main.c: 20: machineConfig();
  2935                           
  2936                           ;incstack = 0
  2937  0047C6  EC6C  F028         	call	_machineConfig	;wreg free
  2938                           
  2939                           ;main.c: 21: initLCD();
  2940  0047CA  EC4A  F02A         	call	_initLCD	;wreg free
  2941                           
  2942                           ;main.c: 24: RTCflag = 0;
  2943  0047CE  0E00               	movlw	0
  2944  0047D0  0100               	movlb	0	; () banked
  2945  0047D2  6FE5               	movwf	(_RTCflag+1)& (0+255),b
  2946  0047D4  0E00               	movlw	0
  2947  0047D6  6FE4               	movwf	_RTCflag& (0+255),b
  2948                           
  2949                           ;main.c: 25: if(RTCflag){
  2950  0047D8  0100               	movlb	0	; () banked
  2951  0047DA  51E4               	movf	_RTCflag& (0+255),w,b
  2952  0047DC  0100               	movlb	0	; () banked
  2953  0047DE  11E5               	iorwf	(_RTCflag+1)& (0+255),w,b
  2954  0047E0  B4D8               	btfsc	status,2,c
  2955  0047E2  D016               	goto	l10079
  2956                           
  2957                           ; BSR set to: 0
  2958                           ;main.c: 26: initTime(0x42, 0x47, 0x17, 0x07, 0x08, 0x04, 0x17);
  2959  0047E4  0E47               	movlw	71
  2960  0047E6  0100               	movlb	0	; () banked
  2961  0047E8  6F80               	movwf	initTime@m& (0+255),b
  2962  0047EA  0E17               	movlw	23
  2963  0047EC  0100               	movlb	0	; () banked
  2964  0047EE  6F81               	movwf	initTime@h& (0+255),b
  2965  0047F0  0E07               	movlw	7
  2966  0047F2  0100               	movlb	0	; () banked
  2967  0047F4  6F82               	movwf	initTime@w& (0+255),b
  2968  0047F6  0E08               	movlw	8
  2969  0047F8  0100               	movlb	0	; () banked
  2970  0047FA  6F83               	movwf	initTime@DD& (0+255),b
  2971  0047FC  0E04               	movlw	4
  2972  0047FE  0100               	movlb	0	; () banked
  2973  004800  6F84               	movwf	initTime@MM& (0+255),b
  2974  004802  0E17               	movlw	23
  2975  004804  0100               	movlb	0	; () banked
  2976  004806  6F85               	movwf	initTime@YY& (0+255),b
  2977  004808  0E42               	movlw	66
  2978  00480A  EC3D  F02D         	call	_initTime
  2979                           
  2980                           ;main.c: 27: }
  2981  00480E  D00B               	goto	l10081
  2982  004810                     l10079:
  2983                           
  2984                           ;main.c: 28: else{
  2985                           ;main.c: 29: I2C_Master_Init(10000);
  2986  004810  0E10               	movlw	16
  2987  004812  0100               	movlb	0	; () banked
  2988  004814  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2989  004816  0E27               	movlw	39
  2990  004818  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2991  00481A  0E00               	movlw	0
  2992  00481C  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2993  00481E  0E00               	movlw	0
  2994  004820  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2995  004822  ECCF  F028         	call	_I2C_Master_Init	;wreg free
  2996  004826                     l10081:
  2997                           
  2998                           ;main.c: 30: }
  2999                           ;main.c: 32: initUI();
  3000  004826  EC6D  F02B         	call	_initUI	;wreg free
  3001                           
  3002                           ;main.c: 33: first = 1;
  3003  00482A  0E00               	movlw	0
  3004  00482C  0101               	movlb	1	; () banked
  3005  00482E  6F3A               	movwf	(_first+1)& (0+255),b
  3006  004830  0E01               	movlw	1
  3007  004832  6F39               	movwf	_first& (0+255),b
  3008                           
  3009                           ; BSR set to: 1
  3010                           ;main.c: 34: initEEPROM();
  3011  004834  EC77  F02D         	call	_initEEPROM	;wreg free
  3012                           
  3013                           ;main.c: 45: switch(machine_state){
  3014                           
  3015                           ;main.c: 44: while(1){
  3016  004838  D018               	goto	l10105
  3017  00483A                     l10087:
  3018                           
  3019                           ;main.c: 47: UI();
  3020  00483A  EC09  F000         	call	_UI	;wreg free
  3021                           
  3022                           ;main.c: 48: break;
  3023  00483E  D015               	goto	l10105
  3024  004840                     l10089:
  3025                           
  3026                           ;main.c: 50: sort();
  3027  004840  EC2C  F02D         	call	_sort	;wreg free
  3028                           
  3029                           ;main.c: 51: break;
  3030  004844  D012               	goto	l10105
  3031  004846                     l10091:
  3032                           
  3033                           ;main.c: 53: stopSignals();
  3034  004846  EC5D  F02D         	call	_stopSignals	;wreg free
  3035                           
  3036                           ;main.c: 54: logRun();
  3037  00484A  EC72  F01F         	call	_logRun	;wreg free
  3038                           
  3039                           ;main.c: 55: first = 1;
  3040  00484E  0E00               	movlw	0
  3041  004850  0101               	movlb	1	; () banked
  3042  004852  6F3A               	movwf	(_first+1)& (0+255),b
  3043  004854  0E01               	movlw	1
  3044  004856  6F39               	movwf	_first& (0+255),b
  3045                           
  3046                           ; BSR set to: 1
  3047                           ;main.c: 56: UI();
  3048  004858  EC09  F000         	call	_UI	;wreg free
  3049                           
  3050                           ;main.c: 57: break;
  3051  00485C  D006               	goto	l10105
  3052  00485E                     l10099:
  3053                           
  3054                           ;main.c: 59: Test();
  3055  00485E  EC2C  F021         	call	_Test	;wreg free
  3056                           
  3057                           ;main.c: 60: break;
  3058  004862  D003               	goto	l10105
  3059  004864                     l10101:
  3060                           
  3061                           ;main.c: 62: stopSignals();
  3062  004864  EC5D  F02D         	call	_stopSignals	;wreg free
  3063  004868                     l508:
  3064  004868  D7FF               	goto	l508
  3065  00486A                     l10105:
  3066  00486A  0100               	movlb	0	; () banked
  3067  00486C  51FC               	movf	_machine_state& (0+255),w,b
  3068                           
  3069                           ; Switch size 1, requested type "space"
  3070                           ; Number of cases is 5, Range of values is 0 to 4
  3071                           ; switch strategies available:
  3072                           ; Name         Instructions Cycles
  3073                           ; simple_byte           16     9 (average)
  3074                           ;	Chosen strategy is simple_byte
  3075  00486E  0A00               	xorlw	0	; case 0
  3076  004870  B4D8               	btfsc	status,2,c
  3077  004872  D7E3               	goto	l10087
  3078  004874  0A01               	xorlw	1	; case 1
  3079  004876  B4D8               	btfsc	status,2,c
  3080  004878  D7E3               	goto	l10089
  3081  00487A  0A03               	xorlw	3	; case 2
  3082  00487C  B4D8               	btfsc	status,2,c
  3083  00487E  D7E3               	goto	l10091
  3084  004880  0A01               	xorlw	1	; case 3
  3085  004882  B4D8               	btfsc	status,2,c
  3086  004884  D7EC               	goto	l10099
  3087  004886  0A07               	xorlw	7	; case 4
  3088  004888  B4D8               	btfsc	status,2,c
  3089  00488A  D7EC               	goto	l10101
  3090                           
  3091                           ; BSR set to: 0
  3092                           
  3093                           ; BSR set to: 0
  3094  00488C  D7EE               	goto	l10105
  3095  00488E                     __end_of_main:
  3096                           	opt stack 0
  3097                           tblptru	equ	0xFF8
  3098                           tblptrh	equ	0xFF7
  3099                           tblptrl	equ	0xFF6
  3100                           tablat	equ	0xFF5
  3101                           postinc0	equ	0xFEE
  3102                           wreg	equ	0xFE8
  3103                           postdec1	equ	0xFE5
  3104                           fsr1l	equ	0xFE1
  3105                           status	equ	0xFD8
  3106                           
  3107 ;; *************** function _sort *****************
  3108 ;; Defined at:
  3109 ;;		line 70 in file "sort.c"
  3110 ;; Parameters:    Size  Location     Type
  3111 ;;		None
  3112 ;; Auto vars:     Size  Location     Type
  3113 ;;		None
  3114 ;; Return value:  Size  Location     Type
  3115 ;;                  1    wreg      void 
  3116 ;; Registers used:
  3117 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3118 ;; Tracked objects:
  3119 ;;		On entry : 0/0
  3120 ;;		On exit  : 0/0
  3121 ;;		Unchanged: 0/0
  3122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3126 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3127 ;;Total ram usage:        0 bytes
  3128 ;; Hardware stack levels used:    1
  3129 ;; Hardware stack levels required when called:   12
  3130 ;; This function calls:
  3131 ;;		_Distribution
  3132 ;;		_ID
  3133 ;;		_Loading
  3134 ;; This function is called by:
  3135 ;;		_main
  3136 ;; This function uses a non-reentrant model
  3137 ;;
  3138                           
  3139                           	psect	text1
  3140  005A58                     __ptext1:
  3141                           	opt stack 0
  3142  005A58                     _sort:
  3143                           	opt stack 18
  3144                           
  3145                           ;sort.c: 71: if(machine_state == Sorting_state){
  3146                           
  3147                           ; BSR set to: 0
  3148                           ;incstack = 0
  3149  005A58  0100               	movlb	0	; () banked
  3150  005A5A  05FC               	decf	_machine_state& (0+255),w,b
  3151  005A5C  B4D8               	btfsc	status,2,c
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;sort.c: 72: Loading();
  3155  005A5E  ECC9  F008         	call	_Loading	;wreg free
  3156                           
  3157                           ;sort.c: 73: }
  3158                           ;sort.c: 74: if(machine_state == Sorting_state){
  3159  005A62  0100               	movlb	0	; () banked
  3160  005A64  05FC               	decf	_machine_state& (0+255),w,b
  3161  005A66  B4D8               	btfsc	status,2,c
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;sort.c: 75: ID();
  3165  005A68  EC66  F00B         	call	_ID	;wreg free
  3166                           
  3167                           ;sort.c: 76: }
  3168                           ;sort.c: 77: if(machine_state == Sorting_state){
  3169  005A6C  0100               	movlb	0	; () banked
  3170  005A6E  05FC               	decf	_machine_state& (0+255),w,b
  3171  005A70  A4D8               	btfss	status,2,c
  3172  005A72  0012               	return	
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;sort.c: 78: Distribution();
  3176  005A74  ECA2  F022         	call	_Distribution	;wreg free
  3177  005A78  0012               	return	
  3178  005A7A                     __end_of_sort:
  3179                           	opt stack 0
  3180                           tblptru	equ	0xFF8
  3181                           tblptrh	equ	0xFF7
  3182                           tblptrl	equ	0xFF6
  3183                           tablat	equ	0xFF5
  3184                           postinc0	equ	0xFEE
  3185                           wreg	equ	0xFE8
  3186                           postdec1	equ	0xFE5
  3187                           fsr1l	equ	0xFE1
  3188                           status	equ	0xFD8
  3189                           
  3190 ;; *************** function _Loading *****************
  3191 ;; Defined at:
  3192 ;;		line 82 in file "sort.c"
  3193 ;; Parameters:    Size  Location     Type
  3194 ;;		None
  3195 ;; Auto vars:     Size  Location     Type
  3196 ;;  i               2   62[BANK0 ] int 
  3197 ;;  i               2   60[BANK0 ] int 
  3198 ;;  i               2   58[BANK0 ] int 
  3199 ;;  i               2   56[BANK0 ] int 
  3200 ;;  i               2   54[BANK0 ] int 
  3201 ;;  j               2   66[BANK0 ] int 
  3202 ;;  i               2   64[BANK0 ] int 
  3203 ;;  addr            2   51[BANK0 ] unsigned short 
  3204 ;;  byte1           1   53[BANK0 ] unsigned char 
  3205 ;; Return value:  Size  Location     Type
  3206 ;;                  1    wreg      void 
  3207 ;; Registers used:
  3208 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3209 ;; Tracked objects:
  3210 ;;		On entry : 0/0
  3211 ;;		On exit  : 0/0
  3212 ;;		Unchanged: 0/0
  3213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3215 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3216 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3217 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3218 ;;Total ram usage:       19 bytes
  3219 ;; Hardware stack levels used:    1
  3220 ;; Hardware stack levels required when called:   11
  3221 ;; This function calls:
  3222 ;;		_EEPROM_read
  3223 ;;		_EEPROM_write
  3224 ;;		_delay_ms
  3225 ;;		_getIR
  3226 ;;		_getMAG
  3227 ;;		_initGlobalVars
  3228 ;;		_initServos
  3229 ;;		_initSortTimer
  3230 ;;		_lcdInst
  3231 ;;		_readIR
  3232 ;; This function is called by:
  3233 ;;		_sort
  3234 ;; This function uses a non-reentrant model
  3235 ;;
  3236                           
  3237                           	psect	text2
  3238  001192                     __ptext2:
  3239                           	opt stack 0
  3240  001192                     _Loading:
  3241                           	opt stack 18
  3242                           
  3243                           ;sort.c: 83: if(first){
  3244                           
  3245                           ;incstack = 0
  3246  001192  0101               	movlb	1	; () banked
  3247  001194  5139               	movf	_first& (0+255),w,b
  3248  001196  0101               	movlb	1	; () banked
  3249  001198  113A               	iorwf	(_first+1)& (0+255),w,b
  3250  00119A  B4D8               	btfsc	status,2,c
  3251  00119C  D069               	goto	l7815
  3252                           
  3253                           ; BSR set to: 1
  3254                           ;sort.c: 84: TMR1IE = 1;
  3255  00119E  809D               	bsf	3997,0,c	;volatile
  3256                           
  3257                           ;sort.c: 85: TMR2IE = 1;
  3258  0011A0  829D               	bsf	3997,1,c	;volatile
  3259                           
  3260                           ;sort.c: 86: TMR3IE = 1;
  3261  0011A2  82A0               	bsf	4000,1,c	;volatile
  3262                           
  3263                           ; BSR set to: 1
  3264                           ;sort.c: 87: initGlobalVars();
  3265  0011A4  EC7E  F023         	call	_initGlobalVars	;wreg free
  3266                           
  3267                           ;sort.c: 88: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3268  0011A8  0E01               	movlw	1
  3269  0011AA  ECA8  F02D         	call	_lcdInst
  3270  0011AE  0E68               	movlw	104
  3271  0011B0  0100               	movlb	0	; () banked
  3272  0011B2  6FB1               	movwf	??_Loading& (0+255),b
  3273  0011B4  0EE4               	movlw	228
  3274  0011B6                     u9677:
  3275  0011B6  2EE8               	decfsz	wreg,f,c
  3276  0011B8  D7FE               	bra	u9677
  3277  0011BA  2FB1               	decfsz	??_Loading& (0+255),f,b
  3278  0011BC  D7FC               	bra	u9677
  3279  0011BE  F000               	nop	
  3280                           
  3281                           ;sort.c: 89: initSortTimer();
  3282  0011C0  EC68  F025         	call	_initSortTimer	;wreg free
  3283                           
  3284                           ;sort.c: 90: LATCbits.LATC5 = 1;
  3285  0011C4  8A8B               	bsf	3979,5,c	;volatile
  3286                           
  3287                           ;sort.c: 95: sel = EEPROM_read(0);
  3288  0011C6  0E00               	movlw	0
  3289  0011C8  0100               	movlb	0	; () banked
  3290  0011CA  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3291  0011CC  0E00               	movlw	0
  3292  0011CE  6F80               	movwf	EEPROM_read@address& (0+255),b
  3293  0011D0  EC6B  F02D         	call	_EEPROM_read	;wreg free
  3294  0011D4  0100               	movlb	0	; () banked
  3295  0011D6  6FFD               	movwf	_sel& (0+255),b
  3296                           
  3297                           ; BSR set to: 0
  3298                           ;sort.c: 96: unsigned short addr = 1 + 11 * sel;
  3299  0011D8  0100               	movlb	0	; () banked
  3300  0011DA  51FD               	movf	_sel& (0+255),w,b
  3301  0011DC  0D0B               	mullw	11
  3302  0011DE  0E01               	movlw	1
  3303  0011E0  24F3               	addwf	prodl,w,c
  3304  0011E2  0100               	movlb	0	; () banked
  3305  0011E4  6FB3               	movwf	Loading@addr& (0+255),b
  3306  0011E6  0E00               	movlw	0
  3307  0011E8  20F4               	addwfc	prodh,w,c
  3308  0011EA  0100               	movlb	0	; () banked
  3309  0011EC  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3310                           
  3311                           ; BSR set to: 0
  3312                           ;sort.c: 97: unsigned char byte1 = 0b01111111;
  3313  0011EE  0E7F               	movlw	127
  3314  0011F0  0100               	movlb	0	; () banked
  3315  0011F2  6FB5               	movwf	Loading@byte1& (0+255),b
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;sort.c: 98: EEPROM_write(addr, byte1);
  3319  0011F4  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3320  0011F8  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3321  0011FC  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3322  001200  EC2E  F022         	call	_EEPROM_write	;wreg free
  3323                           
  3324                           ;sort.c: 101: LATBbits.LATB2 = 0;
  3325  001204  948A               	bcf	3978,2,c	;volatile
  3326                           
  3327                           ;sort.c: 103: for(int i=0; i<46; i++){
  3328  001206  0E00               	movlw	0
  3329  001208  0100               	movlb	0	; () banked
  3330  00120A  6FC1               	movwf	(Loading@i+1)& (0+255),b
  3331  00120C  0E00               	movlw	0
  3332  00120E  6FC0               	movwf	Loading@i& (0+255),b
  3333                           
  3334                           ; BSR set to: 0
  3335  001210  0100               	movlb	0	; () banked
  3336  001212  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3337  001214  D008               	goto	l7805
  3338  001216  0100               	movlb	0	; () banked
  3339  001218  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3340  00121A  E126               	bnz	l793
  3341  00121C  0E2E               	movlw	46
  3342  00121E  0100               	movlb	0	; () banked
  3343  001220  5DC0               	subwf	Loading@i& (0+255),w,b
  3344  001222  B0D8               	btfsc	status,0,c
  3345  001224  D021               	goto	l793
  3346  001226                     l7805:
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;sort.c: 104: LATBbits.LATB2 = !LATBbits.LATB2;
  3350  001226  B48A               	btfsc	3978,2,c	;volatile
  3351  001228  D004               	goto	u6350
  3352  00122A  0100               	movlb	0	; () banked
  3353  00122C  6BB1               	clrf	??_Loading& (0+255),b
  3354  00122E  2BB1               	incf	??_Loading& (0+255),f,b
  3355  001230  D002               	goto	u6368
  3356  001232                     u6350:
  3357  001232  0100               	movlb	0	; () banked
  3358  001234  6BB1               	clrf	??_Loading& (0+255),b
  3359  001236                     u6368:
  3360  001236  0100               	movlb	0	; () banked
  3361  001238  47B1               	rlncf	??_Loading& (0+255),f,b
  3362  00123A  47B1               	rlncf	??_Loading& (0+255),f,b
  3363  00123C  508A               	movf	3978,w,c	;volatile
  3364  00123E  0100               	movlb	0	; () banked
  3365  001240  19B1               	xorwf	??_Loading& (0+255),w,b
  3366  001242  0BFB               	andlw	-5
  3367  001244  19B1               	xorwf	??_Loading& (0+255),w,b
  3368  001246  6E8A               	movwf	3978,c	;volatile
  3369                           
  3370                           ; BSR set to: 0
  3371                           ;sort.c: 105: delay_ms(45-i);
  3372  001248  0100               	movlb	0	; () banked
  3373  00124A  51C0               	movf	Loading@i& (0+255),w,b
  3374  00124C  0800               	sublw	0
  3375  00124E  0F2D               	addlw	45
  3376  001250  ECCC  F02C         	call	_delay_ms
  3377  001254  0100               	movlb	0	; () banked
  3378  001256  4BC0               	infsnz	Loading@i& (0+255),f,b
  3379  001258  2BC1               	incf	(Loading@i+1)& (0+255),f,b
  3380                           
  3381                           ; BSR set to: 0
  3382  00125A  0100               	movlb	0	; () banked
  3383  00125C  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3384  00125E  D7E3               	goto	l7805
  3385  001260  0100               	movlb	0	; () banked
  3386  001262  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3387  001264  E101               	bnz	u6370
  3388  001266  D7DA               	goto	L1
  3389  001268                     u6370:
  3390  001268                     l793:
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;sort.c: 106: }
  3394                           ;sort.c: 107: LATBbits.LATB2 = 1;
  3395  001268  848A               	bsf	3978,2,c	;volatile
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;sort.c: 110: initServos();
  3399  00126A  EC18  F027         	call	_initServos	;wreg free
  3400                           
  3401                           ;sort.c: 111: }
  3402  00126E  0012               	return	
  3403  001270                     l7815:
  3404                           
  3405                           ;sort.c: 112: else{
  3406                           ;sort.c: 115: if(!f_loadingNewCan){
  3407  001270  0100               	movlb	0	; () banked
  3408  001272  51EC               	movf	_f_loadingNewCan& (0+255),w,b
  3409  001274  0100               	movlb	0	; () banked
  3410  001276  11ED               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3411  001278  A4D8               	btfss	status,2,c
  3412  00127A  D018               	goto	l7831
  3413                           
  3414                           ; BSR set to: 0
  3415                           ;sort.c: 117: getIR();
  3416  00127C  EC90  F027         	call	_getIR	;wreg free
  3417                           
  3418                           ;sort.c: 119: if(!f_loadingNewCan){
  3419  001280  0100               	movlb	0	; () banked
  3420  001282  51EC               	movf	_f_loadingNewCan& (0+255),w,b
  3421  001284  0100               	movlb	0	; () banked
  3422  001286  11ED               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3423  001288  B4D8               	btfsc	status,2,c
  3424  00128A  0012               	return	
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;sort.c: 123: else{
  3428                           ;sort.c: 124: count_total++;
  3429                           
  3430                           ; BSR set to: 0
  3431                           
  3432                           ; BSR set to: 0
  3433                           ;sort.c: 121: }
  3434                           
  3435                           ; BSR set to: 0
  3436                           ;sort.c: 120: return;
  3437  00128C  0100               	movlb	0	; () banked
  3438  00128E  4BFE               	infsnz	_count_total& (0+255),f,b
  3439  001290  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;sort.c: 125: if(count_total == 12){
  3443  001292  0E0C               	movlw	12
  3444  001294  0100               	movlb	0	; () banked
  3445  001296  19FE               	xorwf	_count_total& (0+255),w,b
  3446  001298  0100               	movlb	0	; () banked
  3447  00129A  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3448  00129C  A4D8               	btfss	status,2,c
  3449  00129E  0012               	return	
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;sort.c: 126: f_lastCan = 1;
  3453  0012A0  0E00               	movlw	0
  3454  0012A2  0100               	movlb	0	; () banked
  3455  0012A4  6FEB               	movwf	(_f_lastCan+1)& (0+255),b
  3456  0012A6  0E01               	movlw	1
  3457  0012A8  6FEA               	movwf	_f_lastCan& (0+255),b
  3458                           
  3459                           ; BSR set to: 0
  3460                           ;sort.c: 127: }
  3461                           ;sort.c: 128: }
  3462                           ;sort.c: 129: }
  3463                           
  3464                           ; BSR set to: 0
  3465  0012AA  0012               	return	
  3466  0012AC                     l7831:
  3467                           
  3468                           ; BSR set to: 0
  3469                           ;sort.c: 132: else if(f_ID_receive){
  3470  0012AC  0101               	movlb	1	; () banked
  3471  0012AE  512F               	movf	_f_ID_receive& (0+255),w,b
  3472  0012B0  0101               	movlb	1	; () banked
  3473  0012B2  1130               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3474  0012B4  B4D8               	btfsc	status,2,c
  3475  0012B6  0012               	return	
  3476                           
  3477                           ; BSR set to: 1
  3478                           ;sort.c: 133: f_most_recent_sort_time = 1;
  3479  0012B8  0E00               	movlw	0
  3480  0012BA  0101               	movlb	1	; () banked
  3481  0012BC  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3482  0012BE  0E01               	movlw	1
  3483  0012C0  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  3484                           
  3485                           ;sort.c: 134: f_loadingNewCan = 0;
  3486  0012C2  0E00               	movlw	0
  3487  0012C4  0100               	movlb	0	; () banked
  3488  0012C6  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3489  0012C8  0E00               	movlw	0
  3490  0012CA  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;sort.c: 135: _delay((unsigned long)((400)*(32000000/4000.0)));
  3494  0012CC  0E11               	movlw	17
  3495  0012CE  0100               	movlb	0	; () banked
  3496  0012D0  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3497  0012D2  0E3C               	movlw	60
  3498  0012D4  0100               	movlb	0	; () banked
  3499  0012D6  6FB1               	movwf	??_Loading& (0+255),b
  3500  0012D8  0ECB               	movlw	203
  3501  0012DA                     u9687:
  3502  0012DA  2EE8               	decfsz	wreg,f,c
  3503  0012DC  D7FE               	bra	u9687
  3504  0012DE  2FB1               	decfsz	??_Loading& (0+255),f,b
  3505  0012E0  D7FC               	bra	u9687
  3506  0012E2  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3507  0012E4  D7FA               	bra	u9687
  3508                           
  3509                           ;sort.c: 136: LATBbits.LATB2 = 0;
  3510  0012E6  948A               	bcf	3978,2,c	;volatile
  3511                           
  3512                           ;sort.c: 140: f_arm_position = 1;
  3513  0012E8  0E00               	movlw	0
  3514  0012EA  0100               	movlb	0	; () banked
  3515  0012EC  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3516  0012EE  0E01               	movlw	1
  3517  0012F0  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  3518                           
  3519                           ; BSR set to: 0
  3520                           ;sort.c: 142: delay_ms(750);
  3521  0012F2  0EEE               	movlw	238
  3522  0012F4  ECCC  F02C         	call	_delay_ms
  3523                           
  3524                           ;sort.c: 143: getMAG();
  3525  0012F8  EC3B  F02B         	call	_getMAG	;wreg free
  3526                           
  3527                           ;sort.c: 144: sensor_outputs[0] = MAG_signal;
  3528  0012FC  C0E2  F0DA         	movff	_MAG_signal,_sensor_outputs
  3529  001300  C0E3  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3530                           
  3531                           ;sort.c: 146: TMR2IE = 0;
  3532  001304  929D               	bcf	3997,1,c	;volatile
  3533                           
  3534                           ;sort.c: 147: if(sensor_outputs[0]){
  3535  001306  0100               	movlb	0	; () banked
  3536  001308  51DA               	movf	_sensor_outputs& (0+255),w,b
  3537  00130A  0100               	movlb	0	; () banked
  3538  00130C  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3539  00130E  B4D8               	btfsc	status,2,c
  3540  001310  D01D               	goto	l7863
  3541                           
  3542                           ; BSR set to: 0
  3543                           ;sort.c: 148: for(int i = 0; i<2500; i++){
  3544  001312  0E00               	movlw	0
  3545  001314  0100               	movlb	0	; () banked
  3546  001316  6FB7               	movwf	(Loading@i_1122+1)& (0+255),b
  3547  001318  0E00               	movlw	0
  3548  00131A  6FB6               	movwf	Loading@i_1122& (0+255),b
  3549  00131C                     l7853:
  3550                           
  3551                           ; BSR set to: 0
  3552  00131C  0100               	movlb	0	; () banked
  3553  00131E  BFB7               	btfsc	(Loading@i_1122+1)& (0+255),7,b
  3554  001320  D008               	goto	l803
  3555  001322  0EC4               	movlw	196
  3556  001324  0100               	movlb	0	; () banked
  3557  001326  5DB6               	subwf	Loading@i_1122& (0+255),w,b
  3558  001328  0E09               	movlw	9
  3559  00132A  0100               	movlb	0	; () banked
  3560  00132C  59B7               	subwfb	(Loading@i_1122+1)& (0+255),w,b
  3561  00132E  B0D8               	btfsc	status,0,c
  3562  001330  D02B               	goto	l805
  3563  001332                     l803:
  3564                           
  3565                           ; BSR set to: 0
  3566                           ;sort.c: 149: LATAbits.LATA4 = 1;
  3567  001332  8889               	bsf	3977,4,c	;volatile
  3568                           
  3569                           ; BSR set to: 0
  3570                           ;sort.c: 150: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3571  001334  0EC8               	movlw	200
  3572  001336                     u9697:
  3573  001336  2EE8               	decfsz	wreg,f,c
  3574  001338  D7FE               	bra	u9697
  3575                           
  3576                           ;sort.c: 151: LATAbits.LATA4 = 0;
  3577  00133A  9889               	bcf	3977,4,c	;volatile
  3578                           
  3579                           ;sort.c: 152: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3580  00133C  0E42               	movlw	66
  3581  00133E                     u9707:
  3582  00133E  2EE8               	decfsz	wreg,f,c
  3583  001340  D7FE               	bra	u9707
  3584  001342  D000               	nop2	
  3585  001344  0100               	movlb	0	; () banked
  3586  001346  4BB6               	infsnz	Loading@i_1122& (0+255),f,b
  3587  001348  2BB7               	incf	(Loading@i_1122+1)& (0+255),f,b
  3588  00134A  D7E8               	goto	l7853
  3589  00134C                     l7863:
  3590                           
  3591                           ; BSR set to: 0
  3592                           ;sort.c: 155: else{
  3593                           ;sort.c: 156: for(int i = 0; i<2500; i++){
  3594  00134C  0E00               	movlw	0
  3595  00134E  0100               	movlb	0	; () banked
  3596  001350  6FB9               	movwf	(Loading@i_1131+1)& (0+255),b
  3597  001352  0E00               	movlw	0
  3598  001354  6FB8               	movwf	Loading@i_1131& (0+255),b
  3599  001356                     l7865:
  3600                           
  3601                           ; BSR set to: 0
  3602  001356  0100               	movlb	0	; () banked
  3603  001358  BFB9               	btfsc	(Loading@i_1131+1)& (0+255),7,b
  3604  00135A  D008               	goto	l806
  3605  00135C  0EC4               	movlw	196
  3606  00135E  0100               	movlb	0	; () banked
  3607  001360  5DB8               	subwf	Loading@i_1131& (0+255),w,b
  3608  001362  0E09               	movlw	9
  3609  001364  0100               	movlb	0	; () banked
  3610  001366  59B9               	subwfb	(Loading@i_1131+1)& (0+255),w,b
  3611  001368  B0D8               	btfsc	status,0,c
  3612  00136A  D00E               	goto	l805
  3613  00136C                     l806:
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;sort.c: 157: LATAbits.LATA4 = 1;
  3617  00136C  8889               	bsf	3977,4,c	;volatile
  3618                           
  3619                           ; BSR set to: 0
  3620                           ;sort.c: 158: _delay((unsigned long)((50)*(32000000/4000000.0)));
  3621  00136E  0E85               	movlw	133
  3622  001370                     u9717:
  3623  001370  2EE8               	decfsz	wreg,f,c
  3624  001372  D7FE               	bra	u9717
  3625  001374  F000               	nop	
  3626                           
  3627                           ;sort.c: 159: LATAbits.LATA4 = 0;
  3628  001376  9889               	bcf	3977,4,c	;volatile
  3629                           
  3630                           ;sort.c: 160: _delay((unsigned long)((50)*(32000000/4000000.0)));
  3631  001378  0E85               	movlw	133
  3632  00137A                     u9727:
  3633  00137A  2EE8               	decfsz	wreg,f,c
  3634  00137C  D7FE               	bra	u9727
  3635  00137E  F000               	nop	
  3636  001380  0100               	movlb	0	; () banked
  3637  001382  4BB8               	infsnz	Loading@i_1131& (0+255),f,b
  3638  001384  2BB9               	incf	(Loading@i_1131+1)& (0+255),f,b
  3639  001386  D7E7               	goto	l7865
  3640  001388                     l805:
  3641                           
  3642                           ; BSR set to: 0
  3643                           ;sort.c: 161: }
  3644                           ;sort.c: 162: }
  3645                           ;sort.c: 163: TMR2IE = 1;
  3646  001388  829D               	bsf	3997,1,c	;volatile
  3647                           
  3648                           ; BSR set to: 0
  3649                           ;sort.c: 164: _delay((unsigned long)((350)*(32000000/4000.0)));
  3650  00138A  0E0F               	movlw	15
  3651  00138C  0100               	movlb	0	; () banked
  3652  00138E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3653  001390  0E35               	movlw	53
  3654  001392  0100               	movlb	0	; () banked
  3655  001394  6FB1               	movwf	??_Loading& (0+255),b
  3656  001396  0E51               	movlw	81
  3657  001398                     u9737:
  3658  001398  2EE8               	decfsz	wreg,f,c
  3659  00139A  D7FE               	bra	u9737
  3660  00139C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3661  00139E  D7FC               	bra	u9737
  3662  0013A0  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3663  0013A2  D7FA               	bra	u9737
  3664                           
  3665                           ;sort.c: 166: readIR();
  3666  0013A4  ECD8  F029         	call	_readIR	;wreg free
  3667                           
  3668                           ;sort.c: 167: if(IR_signal==1){
  3669  0013A8  0100               	movlb	0	; () banked
  3670  0013AA  05E0               	decf	_IR_signal& (0+255),w,b
  3671  0013AC  0100               	movlb	0	; () banked
  3672  0013AE  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3673  0013B0  A4D8               	btfss	status,2,c
  3674  0013B2  D186               	goto	l8003
  3675                           
  3676                           ; BSR set to: 0
  3677                           ;sort.c: 168: _delay((unsigned long)((70)*(32000000/4000.0)));
  3678  0013B4  0E03               	movlw	3
  3679  0013B6  0100               	movlb	0	; () banked
  3680  0013B8  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3681  0013BA  0ED8               	movlw	216
  3682  0013BC  0100               	movlb	0	; () banked
  3683  0013BE  6FB1               	movwf	??_Loading& (0+255),b
  3684  0013C0  0E41               	movlw	65
  3685  0013C2                     u9747:
  3686  0013C2  2EE8               	decfsz	wreg,f,c
  3687  0013C4  D7FE               	bra	u9747
  3688  0013C6  2FB1               	decfsz	??_Loading& (0+255),f,b
  3689  0013C8  D7FC               	bra	u9747
  3690  0013CA  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3691  0013CC  D7FA               	bra	u9747
  3692  0013CE  D000               	nop2	
  3693                           
  3694                           ;sort.c: 169: readIR();
  3695  0013D0  ECD8  F029         	call	_readIR	;wreg free
  3696                           
  3697                           ;sort.c: 170: if(IR_signal==1){
  3698  0013D4  0100               	movlb	0	; () banked
  3699  0013D6  05E0               	decf	_IR_signal& (0+255),w,b
  3700  0013D8  0100               	movlb	0	; () banked
  3701  0013DA  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3702  0013DC  A4D8               	btfss	status,2,c
  3703  0013DE  D041               	goto	l7913
  3704                           
  3705                           ; BSR set to: 0
  3706                           ;sort.c: 171: if(sensor_outputs[0]){
  3707  0013E0  0100               	movlb	0	; () banked
  3708  0013E2  51DA               	movf	_sensor_outputs& (0+255),w,b
  3709  0013E4  0100               	movlb	0	; () banked
  3710  0013E6  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3711  0013E8  B4D8               	btfsc	status,2,c
  3712  0013EA  D01D               	goto	l7901
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;sort.c: 172: for(int i = 0; i<2500; i++){
  3716  0013EC  0E00               	movlw	0
  3717  0013EE  0100               	movlb	0	; () banked
  3718  0013F0  6FBB               	movwf	(Loading@i_1133+1)& (0+255),b
  3719  0013F2  0E00               	movlw	0
  3720  0013F4  6FBA               	movwf	Loading@i_1133& (0+255),b
  3721  0013F6                     l7891:
  3722                           
  3723                           ; BSR set to: 0
  3724  0013F6  0100               	movlb	0	; () banked
  3725  0013F8  BFBB               	btfsc	(Loading@i_1133+1)& (0+255),7,b
  3726  0013FA  D008               	goto	l811
  3727  0013FC  0EC4               	movlw	196
  3728  0013FE  0100               	movlb	0	; () banked
  3729  001400  5DBA               	subwf	Loading@i_1133& (0+255),w,b
  3730  001402  0E09               	movlw	9
  3731  001404  0100               	movlb	0	; () banked
  3732  001406  59BB               	subwfb	(Loading@i_1133+1)& (0+255),w,b
  3733  001408  B0D8               	btfsc	status,0,c
  3734  00140A  D02B               	goto	l7913
  3735  00140C                     l811:
  3736                           
  3737                           ; BSR set to: 0
  3738                           ;sort.c: 173: LATAbits.LATA4 = 1;
  3739  00140C  8889               	bsf	3977,4,c	;volatile
  3740                           
  3741                           ; BSR set to: 0
  3742                           ;sort.c: 174: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3743  00140E  0EC8               	movlw	200
  3744  001410                     u9757:
  3745  001410  2EE8               	decfsz	wreg,f,c
  3746  001412  D7FE               	bra	u9757
  3747                           
  3748                           ;sort.c: 175: LATAbits.LATA4 = 0;
  3749  001414  9889               	bcf	3977,4,c	;volatile
  3750                           
  3751                           ;sort.c: 176: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3752  001416  0E42               	movlw	66
  3753  001418                     u9767:
  3754  001418  2EE8               	decfsz	wreg,f,c
  3755  00141A  D7FE               	bra	u9767
  3756  00141C  D000               	nop2	
  3757  00141E  0100               	movlb	0	; () banked
  3758  001420  4BBA               	infsnz	Loading@i_1133& (0+255),f,b
  3759  001422  2BBB               	incf	(Loading@i_1133+1)& (0+255),f,b
  3760  001424  D7E8               	goto	l7891
  3761  001426                     l7901:
  3762                           
  3763                           ; BSR set to: 0
  3764                           ;sort.c: 179: else{
  3765                           ;sort.c: 180: for(int i = 0; i<2500; i++){
  3766  001426  0E00               	movlw	0
  3767  001428  0100               	movlb	0	; () banked
  3768  00142A  6FBD               	movwf	(Loading@i_1134+1)& (0+255),b
  3769  00142C  0E00               	movlw	0
  3770  00142E  6FBC               	movwf	Loading@i_1134& (0+255),b
  3771  001430                     l7903:
  3772                           
  3773                           ; BSR set to: 0
  3774  001430  0100               	movlb	0	; () banked
  3775  001432  BFBD               	btfsc	(Loading@i_1134+1)& (0+255),7,b
  3776  001434  D008               	goto	l814
  3777  001436  0EC4               	movlw	196
  3778  001438  0100               	movlb	0	; () banked
  3779  00143A  5DBC               	subwf	Loading@i_1134& (0+255),w,b
  3780  00143C  0E09               	movlw	9
  3781  00143E  0100               	movlb	0	; () banked
  3782  001440  59BD               	subwfb	(Loading@i_1134+1)& (0+255),w,b
  3783  001442  B0D8               	btfsc	status,0,c
  3784  001444  D00E               	goto	l7913
  3785  001446                     l814:
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;sort.c: 181: LATAbits.LATA4 = 1;
  3789  001446  8889               	bsf	3977,4,c	;volatile
  3790                           
  3791                           ; BSR set to: 0
  3792                           ;sort.c: 182: _delay((unsigned long)((50)*(32000000/4000000.0)));
  3793  001448  0E85               	movlw	133
  3794  00144A                     u9777:
  3795  00144A  2EE8               	decfsz	wreg,f,c
  3796  00144C  D7FE               	bra	u9777
  3797  00144E  F000               	nop	
  3798                           
  3799                           ;sort.c: 183: LATAbits.LATA4 = 0;
  3800  001450  9889               	bcf	3977,4,c	;volatile
  3801                           
  3802                           ;sort.c: 184: _delay((unsigned long)((40)*(32000000/4000000.0)));
  3803  001452  0E6A               	movlw	106
  3804  001454                     u9787:
  3805  001454  2EE8               	decfsz	wreg,f,c
  3806  001456  D7FE               	bra	u9787
  3807  001458  D000               	nop2	
  3808  00145A  0100               	movlb	0	; () banked
  3809  00145C  4BBC               	infsnz	Loading@i_1134& (0+255),f,b
  3810  00145E  2BBD               	incf	(Loading@i_1134+1)& (0+255),f,b
  3811  001460  D7E7               	goto	l7903
  3812  001462                     l7913:
  3813                           
  3814                           ; BSR set to: 0
  3815                           ;sort.c: 185: }
  3816                           ;sort.c: 186: }
  3817                           ;sort.c: 187: }
  3818                           ;sort.c: 189: _delay((unsigned long)((350)*(32000000/4000.0)));
  3819  001462  0E0F               	movlw	15
  3820  001464  0100               	movlb	0	; () banked
  3821  001466  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3822  001468  0E35               	movlw	53
  3823  00146A  0100               	movlb	0	; () banked
  3824  00146C  6FB1               	movwf	??_Loading& (0+255),b
  3825  00146E  0E51               	movlw	81
  3826  001470                     u9797:
  3827  001470  2EE8               	decfsz	wreg,f,c
  3828  001472  D7FE               	bra	u9797
  3829  001474  2FB1               	decfsz	??_Loading& (0+255),f,b
  3830  001476  D7FC               	bra	u9797
  3831  001478  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3832  00147A  D7FA               	bra	u9797
  3833                           
  3834                           ;sort.c: 191: int j = 0;
  3835  00147C  0E00               	movlw	0
  3836  00147E  0100               	movlb	0	; () banked
  3837  001480  6FC3               	movwf	(Loading@j+1)& (0+255),b
  3838  001482  0E00               	movlw	0
  3839  001484  6FC2               	movwf	Loading@j& (0+255),b
  3840                           
  3841                           ;sort.c: 192: while(IR_signal == 1){
  3842  001486  D115               	goto	l8001
  3843  001488                     l7917:
  3844                           
  3845                           ; BSR set to: 0
  3846                           ;sort.c: 193: readIR();
  3847  001488  ECD8  F029         	call	_readIR	;wreg free
  3848                           
  3849                           ;sort.c: 194: if(j == 3 || j == 4){
  3850  00148C  0E03               	movlw	3
  3851  00148E  0100               	movlb	0	; () banked
  3852  001490  19C2               	xorwf	Loading@j& (0+255),w,b
  3853  001492  0100               	movlb	0	; () banked
  3854  001494  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3855  001496  B4D8               	btfsc	status,2,c
  3856  001498  D007               	goto	l7923
  3857                           
  3858                           ; BSR set to: 0
  3859  00149A  0E04               	movlw	4
  3860  00149C  0100               	movlb	0	; () banked
  3861  00149E  19C2               	xorwf	Loading@j& (0+255),w,b
  3862  0014A0  0100               	movlb	0	; () banked
  3863  0014A2  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3864  0014A4  A4D8               	btfss	status,2,c
  3865  0014A6  D005               	goto	l7925
  3866  0014A8                     l7923:
  3867                           
  3868                           ; BSR set to: 0
  3869                           ;sort.c: 195: f_arm_position = 0;
  3870  0014A8  0E00               	movlw	0
  3871  0014AA  0100               	movlb	0	; () banked
  3872  0014AC  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3873  0014AE  0E00               	movlw	0
  3874  0014B0  D022               	goto	L2
  3875  0014B2                     l7925:
  3876                           
  3877                           ; BSR set to: 0
  3878                           ;sort.c: 197: else if(j == 5 || j == 6){
  3879  0014B2  0E05               	movlw	5
  3880  0014B4  0100               	movlb	0	; () banked
  3881  0014B6  19C2               	xorwf	Loading@j& (0+255),w,b
  3882  0014B8  0100               	movlb	0	; () banked
  3883  0014BA  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3884  0014BC  B4D8               	btfsc	status,2,c
  3885  0014BE  D007               	goto	l824
  3886                           
  3887                           ; BSR set to: 0
  3888  0014C0  0E06               	movlw	6
  3889  0014C2  0100               	movlb	0	; () banked
  3890  0014C4  19C2               	xorwf	Loading@j& (0+255),w,b
  3891  0014C6  0100               	movlb	0	; () banked
  3892  0014C8  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3893  0014CA  A4D8               	btfss	status,2,c
  3894  0014CC  D002               	goto	l7929
  3895  0014CE                     l824:
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;sort.c: 198: LATBbits.LATB2 = 1;
  3899  0014CE  848A               	bsf	3978,2,c	;volatile
  3900                           
  3901                           ;sort.c: 199: }
  3902  0014D0  D034               	goto	l821
  3903  0014D2                     l7929:
  3904                           
  3905                           ; BSR set to: 0
  3906                           ;sort.c: 200: else if(j == 7 || j == 8){
  3907  0014D2  0E07               	movlw	7
  3908  0014D4  0100               	movlb	0	; () banked
  3909  0014D6  19C2               	xorwf	Loading@j& (0+255),w,b
  3910  0014D8  0100               	movlb	0	; () banked
  3911  0014DA  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3912  0014DC  B4D8               	btfsc	status,2,c
  3913  0014DE  D007               	goto	l7933
  3914                           
  3915                           ; BSR set to: 0
  3916  0014E0  0E08               	movlw	8
  3917  0014E2  0100               	movlb	0	; () banked
  3918  0014E4  19C2               	xorwf	Loading@j& (0+255),w,b
  3919  0014E6  0100               	movlb	0	; () banked
  3920  0014E8  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3921  0014EA  A4D8               	btfss	status,2,c
  3922  0014EC  D006               	goto	l826
  3923  0014EE                     l7933:
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;sort.c: 201: f_arm_position = 1;
  3927  0014EE  0E00               	movlw	0
  3928  0014F0  0100               	movlb	0	; () banked
  3929  0014F2  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3930  0014F4  0E01               	movlw	1
  3931  0014F6                     L2:
  3932  0014F6  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  3933                           
  3934                           ;sort.c: 202: }
  3935  0014F8  D020               	goto	l821
  3936  0014FA                     l826:
  3937                           
  3938                           ; BSR set to: 0
  3939                           ;sort.c: 203: else if(j % 2 == 0){
  3940  0014FA  0100               	movlb	0	; () banked
  3941  0014FC  B1C2               	btfsc	Loading@j& (0+255),0,b
  3942  0014FE  D01D               	goto	l821
  3943                           
  3944                           ; BSR set to: 0
  3945                           ;sort.c: 204: LATBbits.LATB2 = !LATBbits.LATB2;
  3946  001500  B48A               	btfsc	3978,2,c	;volatile
  3947  001502  D004               	goto	u6610
  3948  001504  0100               	movlb	0	; () banked
  3949  001506  6BB1               	clrf	??_Loading& (0+255),b
  3950  001508  2BB1               	incf	??_Loading& (0+255),f,b
  3951  00150A  D002               	goto	u6628
  3952  00150C                     u6610:
  3953  00150C  0100               	movlb	0	; () banked
  3954  00150E  6BB1               	clrf	??_Loading& (0+255),b
  3955  001510                     u6628:
  3956  001510  0100               	movlb	0	; () banked
  3957  001512  47B1               	rlncf	??_Loading& (0+255),f,b
  3958  001514  47B1               	rlncf	??_Loading& (0+255),f,b
  3959  001516  508A               	movf	3978,w,c	;volatile
  3960  001518  0100               	movlb	0	; () banked
  3961  00151A  19B1               	xorwf	??_Loading& (0+255),w,b
  3962  00151C  0BFB               	andlw	-5
  3963  00151E  19B1               	xorwf	??_Loading& (0+255),w,b
  3964  001520  6E8A               	movwf	3978,c	;volatile
  3965                           
  3966                           ;sort.c: 205: f_arm_position = !f_arm_position;
  3967  001522  0100               	movlb	0	; () banked
  3968  001524  51E8               	movf	_f_arm_position& (0+255),w,b	;volatile
  3969  001526  0100               	movlb	0	; () banked
  3970  001528  11E9               	iorwf	(_f_arm_position+1)& (0+255),w,b	;volatile
  3971  00152A  A4D8               	btfss	status,2,c
  3972  00152C  D002               	goto	u6630
  3973  00152E  0E01               	movlw	1
  3974  001530  D001               	goto	u6640
  3975  001532                     u6630:
  3976  001532  0E00               	movlw	0
  3977  001534                     u6640:
  3978  001534  0100               	movlb	0	; () banked
  3979  001536  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  3980  001538  6BE9               	clrf	(_f_arm_position+1)& (0+255),b	;volatile
  3981  00153A                     l821:
  3982                           
  3983                           ; BSR set to: 0
  3984                           ;sort.c: 206: }
  3985                           ;sort.c: 209: if(IR_signal==1){
  3986  00153A  0100               	movlb	0	; () banked
  3987  00153C  05E0               	decf	_IR_signal& (0+255),w,b
  3988  00153E  0100               	movlb	0	; () banked
  3989  001540  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3990  001542  A4D8               	btfss	status,2,c
  3991  001544  D09A               	goto	l7989
  3992                           
  3993                           ; BSR set to: 0
  3994                           ;sort.c: 210: _delay((unsigned long)((350)*(32000000/4000.0)));
  3995  001546  0E0F               	movlw	15
  3996  001548  0100               	movlb	0	; () banked
  3997  00154A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3998  00154C  0E35               	movlw	53
  3999  00154E  0100               	movlb	0	; () banked
  4000  001550  6FB1               	movwf	??_Loading& (0+255),b
  4001  001552  0E51               	movlw	81
  4002  001554                     u9807:
  4003  001554  2EE8               	decfsz	wreg,f,c
  4004  001556  D7FE               	bra	u9807
  4005  001558  2FB1               	decfsz	??_Loading& (0+255),f,b
  4006  00155A  D7FC               	bra	u9807
  4007  00155C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4008  00155E  D7FA               	bra	u9807
  4009                           
  4010                           ;sort.c: 211: readIR();
  4011  001560  ECD8  F029         	call	_readIR	;wreg free
  4012                           
  4013                           ;sort.c: 212: if(IR_signal==1){
  4014  001564  0100               	movlb	0	; () banked
  4015  001566  05E0               	decf	_IR_signal& (0+255),w,b
  4016  001568  0100               	movlb	0	; () banked
  4017  00156A  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4018  00156C  A4D8               	btfss	status,2,c
  4019  00156E  D081               	goto	l832
  4020                           
  4021                           ; BSR set to: 0
  4022                           ;sort.c: 213: if(sensor_outputs[0]){
  4023  001570  0100               	movlb	0	; () banked
  4024  001572  51DA               	movf	_sensor_outputs& (0+255),w,b
  4025  001574  0100               	movlb	0	; () banked
  4026  001576  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4027  001578  B4D8               	btfsc	status,2,c
  4028  00157A  D011               	goto	l833
  4029                           
  4030                           ; BSR set to: 0
  4031                           ;sort.c: 214: LATAbits.LATA4 = 1;
  4032  00157C  8889               	bsf	3977,4,c	;volatile
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;sort.c: 215: _delay((unsigned long)((250)*(32000000/4000.0)));
  4036  00157E  0E0B               	movlw	11
  4037  001580  0100               	movlb	0	; () banked
  4038  001582  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4039  001584  0E26               	movlw	38
  4040  001586  0100               	movlb	0	; () banked
  4041  001588  6FB1               	movwf	??_Loading& (0+255),b
  4042  00158A  0E5D               	movlw	93
  4043  00158C                     u9817:
  4044  00158C  2EE8               	decfsz	wreg,f,c
  4045  00158E  D7FE               	bra	u9817
  4046  001590  2FB1               	decfsz	??_Loading& (0+255),f,b
  4047  001592  D7FC               	bra	u9817
  4048  001594  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4049  001596  D7FA               	bra	u9817
  4050  001598  D000               	nop2	
  4051                           
  4052                           ;sort.c: 216: LATAbits.LATA4 = 0;
  4053  00159A  9889               	bcf	3977,4,c	;volatile
  4054                           
  4055                           ;sort.c: 217: }
  4056  00159C  D06A               	goto	l832
  4057  00159E                     l833:
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;sort.c: 218: else{
  4061                           ;sort.c: 219: TMR2IE = 0;
  4062  00159E  929D               	bcf	3997,1,c	;volatile
  4063                           
  4064                           ; BSR set to: 0
  4065                           ;sort.c: 220: for(int i = 0; i<2500; i++){
  4066  0015A0  0E00               	movlw	0
  4067  0015A2  0100               	movlb	0	; () banked
  4068  0015A4  6FBF               	movwf	(Loading@i_1136+1)& (0+255),b
  4069  0015A6  0E00               	movlw	0
  4070  0015A8  6FBE               	movwf	Loading@i_1136& (0+255),b
  4071  0015AA                     l7953:
  4072                           
  4073                           ; BSR set to: 0
  4074  0015AA  0100               	movlb	0	; () banked
  4075  0015AC  BFBF               	btfsc	(Loading@i_1136+1)& (0+255),7,b
  4076  0015AE  D041               	goto	l7981
  4077  0015B0  0EC4               	movlw	196
  4078  0015B2  0100               	movlb	0	; () banked
  4079  0015B4  5DBE               	subwf	Loading@i_1136& (0+255),w,b
  4080  0015B6  0E09               	movlw	9
  4081  0015B8  0100               	movlb	0	; () banked
  4082  0015BA  59BF               	subwfb	(Loading@i_1136+1)& (0+255),w,b
  4083  0015BC  B0D8               	btfsc	status,0,c
  4084  0015BE  D058               	goto	l836
  4085  0015C0  D038               	goto	l7981
  4086  0015C2                     l838:
  4087                           
  4088                           ; BSR set to: 0
  4089                           ;sort.c: 223: LATAbits.LATA4 = 1;
  4090  0015C2  8889               	bsf	3977,4,c	;volatile
  4091                           
  4092                           ; BSR set to: 0
  4093                           ;sort.c: 224: _delay((unsigned long)((75)*(32000000/4000000.0)));
  4094  0015C4  0EC8               	movlw	200
  4095  0015C6                     u9827:
  4096  0015C6  2EE8               	decfsz	wreg,f,c
  4097  0015C8  D7FE               	bra	u9827
  4098                           
  4099                           ;sort.c: 225: LATAbits.LATA4 = 0;
  4100  0015CA  9889               	bcf	3977,4,c	;volatile
  4101                           
  4102                           ;sort.c: 226: _delay((unsigned long)((25)*(32000000/4000000.0)));
  4103  0015CC  0E42               	movlw	66
  4104  0015CE                     u9837:
  4105  0015CE  2EE8               	decfsz	wreg,f,c
  4106  0015D0  D7FE               	bra	u9837
  4107  0015D2  D01C               	goto	L3
  4108  0015D4                     l840:
  4109                           
  4110                           ; BSR set to: 0
  4111                           ;sort.c: 229: LATAbits.LATA4 = 1;
  4112  0015D4  8889               	bsf	3977,4,c	;volatile
  4113                           
  4114                           ; BSR set to: 0
  4115                           ;sort.c: 230: _delay((unsigned long)((80)*(32000000/4000000.0)));
  4116  0015D6  0ED5               	movlw	213
  4117  0015D8                     u9847:
  4118  0015D8  2EE8               	decfsz	wreg,f,c
  4119  0015DA  D7FE               	bra	u9847
  4120  0015DC  F000               	nop	
  4121                           
  4122                           ;sort.c: 231: LATAbits.LATA4 = 0;
  4123  0015DE  9889               	bcf	3977,4,c	;volatile
  4124                           
  4125                           ;sort.c: 232: _delay((unsigned long)((20)*(32000000/4000000.0)));
  4126  0015E0  0E35               	movlw	53
  4127  0015E2                     u9857:
  4128  0015E2  2EE8               	decfsz	wreg,f,c
  4129  0015E4  D7FE               	bra	u9857
  4130  0015E6  D01D               	goto	L4
  4131  0015E8                     l841:
  4132                           
  4133                           ; BSR set to: 0
  4134                           ;sort.c: 235: LATAbits.LATA4 = 1;
  4135  0015E8  8889               	bsf	3977,4,c	;volatile
  4136                           
  4137                           ; BSR set to: 0
  4138                           ;sort.c: 236: _delay((unsigned long)((85)*(32000000/4000000.0)));
  4139  0015EA  0EE2               	movlw	226
  4140  0015EC                     u9867:
  4141  0015EC  2EE8               	decfsz	wreg,f,c
  4142  0015EE  D7FE               	bra	u9867
  4143  0015F0  D000               	nop2	
  4144                           
  4145                           ;sort.c: 237: LATAbits.LATA4 = 0;
  4146  0015F2  9889               	bcf	3977,4,c	;volatile
  4147                           
  4148                           ;sort.c: 238: _delay((unsigned long)((15)*(32000000/4000000.0)));
  4149  0015F4  0E28               	movlw	40
  4150  0015F6                     u9877:
  4151  0015F6  2EE8               	decfsz	wreg,f,c
  4152  0015F8  D7FE               	bra	u9877
  4153                           
  4154                           ;sort.c: 239: break;
  4155  0015FA  D036               	goto	l7983
  4156  0015FC                     l842:
  4157                           
  4158                           ; BSR set to: 0
  4159                           ;sort.c: 241: LATAbits.LATA4 = 1;
  4160  0015FC  8889               	bsf	3977,4,c	;volatile
  4161                           
  4162                           ; BSR set to: 0
  4163                           ;sort.c: 242: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4164  0015FE  0EF0               	movlw	240
  4165  001600                     u9887:
  4166  001600  2EE8               	decfsz	wreg,f,c
  4167  001602  D7FE               	bra	u9887
  4168                           
  4169                           ;sort.c: 243: LATAbits.LATA4 = 0;
  4170  001604  9889               	bcf	3977,4,c	;volatile
  4171                           
  4172                           ;sort.c: 244: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4173  001606  0E1A               	movlw	26
  4174  001608                     u9897:
  4175  001608  2EE8               	decfsz	wreg,f,c
  4176  00160A  D7FE               	bra	u9897
  4177  00160C                     L3:
  4178  00160C  D000               	nop2	
  4179                           
  4180                           ;sort.c: 245: break;
  4181  00160E  D02C               	goto	l7983
  4182  001610                     l843:
  4183                           
  4184                           ; BSR set to: 0
  4185                           ;sort.c: 247: LATAbits.LATA4 = 1;
  4186  001610  8889               	bsf	3977,4,c	;volatile
  4187                           
  4188                           ; BSR set to: 0
  4189                           ;sort.c: 248: _delay((unsigned long)((95)*(32000000/4000000.0)));
  4190  001612  0EFD               	movlw	253
  4191  001614                     u9907:
  4192  001614  2EE8               	decfsz	wreg,f,c
  4193  001616  D7FE               	bra	u9907
  4194  001618  F000               	nop	
  4195                           
  4196                           ;sort.c: 249: LATAbits.LATA4 = 0;
  4197  00161A  9889               	bcf	3977,4,c	;volatile
  4198                           
  4199                           ;sort.c: 250: _delay((unsigned long)((50)*(32000000/4000000.0)));
  4200  00161C  0E85               	movlw	133
  4201  00161E                     u9917:
  4202  00161E  2EE8               	decfsz	wreg,f,c
  4203  001620  D7FE               	bra	u9917
  4204  001622                     L4:
  4205  001622  F000               	nop	
  4206                           
  4207                           ;sort.c: 251: break;
  4208  001624  D021               	goto	l7983
  4209  001626                     l844:
  4210                           
  4211                           ; BSR set to: 0
  4212                           ;sort.c: 253: LATAbits.LATA4 = 1;
  4213  001626  8889               	bsf	3977,4,c	;volatile
  4214                           
  4215                           ; BSR set to: 0
  4216                           ;sort.c: 254: _delay((unsigned long)((100)*(32000000/4000000.0)));
  4217  001628  0EA0               	movlw	160
  4218  00162A                     u9927:
  4219  00162A  D000               	nop2	
  4220  00162C  2EE8               	decfsz	wreg,f,c
  4221  00162E  D7FD               	bra	u9927
  4222                           
  4223                           ;sort.c: 256: }
  4224                           
  4225                           ;sort.c: 255: break;
  4226  001630  D01B               	goto	l7983
  4227  001632                     l7981:
  4228  001632  C0C2  F0B1         	movff	Loading@j,??_Loading
  4229  001636  C0C3  F0B2         	movff	Loading@j+1,??_Loading+1
  4230                           
  4231                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4232                           ; Switch size 1, requested type "space"
  4233                           ; Number of cases is 1, Range of values is 0 to 0
  4234                           ; switch strategies available:
  4235                           ; Name         Instructions Cycles
  4236                           ; simple_byte            4     3 (average)
  4237                           ;	Chosen strategy is simple_byte
  4238  00163A  0100               	movlb	0	; () banked
  4239  00163C  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4240  00163E  0A00               	xorlw	0	; case 0
  4241  001640  A4D8               	btfss	status,2,c
  4242  001642  D7F1               	goto	l844
  4243                           
  4244                           ; BSR set to: 0
  4245                           ; Switch size 1, requested type "space"
  4246                           ; Number of cases is 5, Range of values is 0 to 4
  4247                           ; switch strategies available:
  4248                           ; Name         Instructions Cycles
  4249                           ; simple_byte           16     9 (average)
  4250                           ;	Chosen strategy is simple_byte
  4251  001644  0100               	movlb	0	; () banked
  4252  001646  51B1               	movf	??_Loading& (0+255),w,b
  4253  001648  0A00               	xorlw	0	; case 0
  4254  00164A  B4D8               	btfsc	status,2,c
  4255  00164C  D7BA               	goto	l838
  4256  00164E  0A01               	xorlw	1	; case 1
  4257  001650  B4D8               	btfsc	status,2,c
  4258  001652  D7C0               	goto	l840
  4259  001654  0A03               	xorlw	3	; case 2
  4260  001656  B4D8               	btfsc	status,2,c
  4261  001658  D7C7               	goto	l841
  4262  00165A  0A01               	xorlw	1	; case 3
  4263  00165C  B4D8               	btfsc	status,2,c
  4264  00165E  D7CE               	goto	l842
  4265  001660  0A07               	xorlw	7	; case 4
  4266  001662  B4D8               	btfsc	status,2,c
  4267  001664  D7D5               	goto	l843
  4268  001666  D7DF               	goto	l844
  4269  001668                     l7983:
  4270  001668  0100               	movlb	0	; () banked
  4271  00166A  4BBE               	infsnz	Loading@i_1136& (0+255),f,b
  4272  00166C  2BBF               	incf	(Loading@i_1136+1)& (0+255),f,b
  4273  00166E  D79D               	goto	l7953
  4274  001670                     l836:
  4275                           
  4276                           ; BSR set to: 0
  4277                           ;sort.c: 257: }
  4278                           ;sort.c: 258: TMR2IE = 1;
  4279  001670  829D               	bsf	3997,1,c	;volatile
  4280  001672                     l832:
  4281                           
  4282                           ;sort.c: 259: }
  4283                           ;sort.c: 260: }
  4284                           ;sort.c: 261: LATAbits.LATA4 = 0;
  4285  001672  9889               	bcf	3977,4,c	;volatile
  4286                           
  4287                           ;sort.c: 262: j++;
  4288  001674  0100               	movlb	0	; () banked
  4289  001676  4BC2               	infsnz	Loading@j& (0+255),f,b
  4290  001678  2BC3               	incf	(Loading@j+1)& (0+255),f,b
  4291  00167A                     l7989:
  4292                           
  4293                           ; BSR set to: 0
  4294                           ;sort.c: 263: }
  4295                           ;sort.c: 265: if(!IR_signal){
  4296  00167A  0100               	movlb	0	; () banked
  4297  00167C  51E0               	movf	_IR_signal& (0+255),w,b
  4298  00167E  0100               	movlb	0	; () banked
  4299  001680  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4300  001682  A4D8               	btfss	status,2,c
  4301  001684  D016               	goto	l8001
  4302                           
  4303                           ; BSR set to: 0
  4304                           ;sort.c: 266: _delay((unsigned long)((500)*(32000000/4000.0)));
  4305  001686  0E15               	movlw	21
  4306  001688  0100               	movlb	0	; () banked
  4307  00168A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4308  00168C  0E4B               	movlw	75
  4309  00168E  0100               	movlb	0	; () banked
  4310  001690  6FB1               	movwf	??_Loading& (0+255),b
  4311  001692  0EBE               	movlw	190
  4312  001694                     u9937:
  4313  001694  2EE8               	decfsz	wreg,f,c
  4314  001696  D7FE               	bra	u9937
  4315  001698  2FB1               	decfsz	??_Loading& (0+255),f,b
  4316  00169A  D7FC               	bra	u9937
  4317  00169C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4318  00169E  D7FA               	bra	u9937
  4319  0016A0  F000               	nop	
  4320                           
  4321                           ;sort.c: 267: readIR();
  4322  0016A2  ECD8  F029         	call	_readIR	;wreg free
  4323                           
  4324                           ;sort.c: 268: if(IR_signal==1){
  4325  0016A6  0100               	movlb	0	; () banked
  4326  0016A8  05E0               	decf	_IR_signal& (0+255),w,b
  4327  0016AA  0100               	movlb	0	; () banked
  4328  0016AC  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4329  0016AE  A4D8               	btfss	status,2,c
  4330  0016B0  D006               	goto	l848
  4331  0016B2                     l8001:
  4332                           
  4333                           ; BSR set to: 0
  4334  0016B2  0100               	movlb	0	; () banked
  4335  0016B4  05E0               	decf	_IR_signal& (0+255),w,b
  4336  0016B6  0100               	movlb	0	; () banked
  4337  0016B8  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4338  0016BA  B4D8               	btfsc	status,2,c
  4339  0016BC  D6E5               	goto	l7917
  4340  0016BE                     l848:
  4341                           
  4342                           ; BSR set to: 0
  4343                           ;sort.c: 273: }
  4344                           ;sort.c: 274: }
  4345                           ;sort.c: 275: }
  4346                           ;sort.c: 276: LATBbits.LATB2 = 0;
  4347  0016BE  948A               	bcf	3978,2,c	;volatile
  4348  0016C0                     l8003:
  4349                           
  4350                           ; BSR set to: 0
  4351                           ;sort.c: 277: }
  4352                           ;sort.c: 278: f_can_coming_to_ID = 1;
  4353  0016C0  0E00               	movlw	0
  4354  0016C2  0101               	movlb	1	; () banked
  4355  0016C4  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4356  0016C6  0E01               	movlw	1
  4357  0016C8  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4358                           
  4359                           ; BSR set to: 1
  4360                           
  4361                           ; BSR set to: 1
  4362  0016CA  0012               	return	
  4363  0016CC                     __end_of_Loading:
  4364                           	opt stack 0
  4365                           tblptru	equ	0xFF8
  4366                           tblptrh	equ	0xFF7
  4367                           tblptrl	equ	0xFF6
  4368                           tablat	equ	0xFF5
  4369                           prodh	equ	0xFF4
  4370                           prodl	equ	0xFF3
  4371                           postinc0	equ	0xFEE
  4372                           wreg	equ	0xFE8
  4373                           postdec1	equ	0xFE5
  4374                           fsr1l	equ	0xFE1
  4375                           status	equ	0xFD8
  4376                           
  4377 ;; *************** function _initSortTimer *****************
  4378 ;; Defined at:
  4379 ;;		line 466 in file "sort.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;		None
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;  i               2    8[BANK0 ] int 
  4384 ;; Return value:  Size  Location     Type
  4385 ;;                  1    wreg      void 
  4386 ;; Registers used:
  4387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4388 ;; Tracked objects:
  4389 ;;		On entry : 0/0
  4390 ;;		On exit  : 0/0
  4391 ;;		Unchanged: 0/0
  4392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4394 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4395 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4396 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4397 ;;Total ram usage:        5 bytes
  4398 ;; Hardware stack levels used:    1
  4399 ;; Hardware stack levels required when called:   10
  4400 ;; This function calls:
  4401 ;;		_getRTC
  4402 ;; This function is called by:
  4403 ;;		_Loading
  4404 ;; This function uses a non-reentrant model
  4405 ;;
  4406                           
  4407                           	psect	text3
  4408  004AD0                     __ptext3:
  4409                           	opt stack 0
  4410  004AD0                     _initSortTimer:
  4411                           	opt stack 18
  4412                           
  4413                           ;sort.c: 468: getRTC();
  4414                           
  4415                           ;incstack = 0
  4416  004AD0  EC54  F026         	call	_getRTC	;wreg free
  4417                           
  4418                           ;sort.c: 469: for(int i = 0; i < 7; i++){
  4419  004AD4  0E00               	movlw	0
  4420  004AD6  0100               	movlb	0	; () banked
  4421  004AD8  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4422  004ADA  0E00               	movlw	0
  4423  004ADC  6F88               	movwf	initSortTimer@i& (0+255),b
  4424  004ADE                     l7305:
  4425                           
  4426                           ; BSR set to: 0
  4427  004ADE  0100               	movlb	0	; () banked
  4428  004AE0  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4429  004AE2  D008               	goto	l7309
  4430  004AE4  0100               	movlb	0	; () banked
  4431  004AE6  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4432  004AE8  E140               	bnz	l7315
  4433  004AEA  0E07               	movlw	7
  4434  004AEC  0100               	movlb	0	; () banked
  4435  004AEE  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4436  004AF0  B0D8               	btfsc	status,0,c
  4437  004AF2  D03B               	goto	l7315
  4438  004AF4                     l7309:
  4439                           
  4440                           ; BSR set to: 0
  4441                           ;sort.c: 470: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4442  004AF4  0E1C               	movlw	low _time
  4443  004AF6  0100               	movlb	0	; () banked
  4444  004AF8  2588               	addwf	initSortTimer@i& (0+255),w,b
  4445  004AFA  6ED9               	movwf	fsr2l,c
  4446  004AFC  0E01               	movlw	high _time
  4447  004AFE  0100               	movlb	0	; () banked
  4448  004B00  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4449  004B02  6EDA               	movwf	fsr2h,c
  4450  004B04  50DF               	movf	indf2,w,c
  4451  004B06  0100               	movlb	0	; () banked
  4452  004B08  6F85               	movwf	??_initSortTimer& (0+255),b
  4453  004B0A  0100               	movlb	0	; () banked
  4454  004B0C  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4455  004B0E  0E0F               	movlw	15
  4456  004B10  1785               	andwf	??_initSortTimer& (0+255),f,b
  4457  004B12  0E0F               	movlw	15
  4458  004B14  0100               	movlb	0	; () banked
  4459  004B16  1785               	andwf	??_initSortTimer& (0+255),f,b
  4460  004B18  0100               	movlb	0	; () banked
  4461  004B1A  5185               	movf	??_initSortTimer& (0+255),w,b
  4462  004B1C  0D0A               	mullw	10
  4463  004B1E  0E1C               	movlw	low _time
  4464  004B20  0100               	movlb	0	; () banked
  4465  004B22  2588               	addwf	initSortTimer@i& (0+255),w,b
  4466  004B24  6ED9               	movwf	fsr2l,c
  4467  004B26  0E01               	movlw	high _time
  4468  004B28  0100               	movlb	0	; () banked
  4469  004B2A  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4470  004B2C  6EDA               	movwf	fsr2h,c
  4471  004B2E  50DF               	movf	indf2,w,c
  4472  004B30  0B0F               	andlw	15
  4473  004B32  0100               	movlb	0	; () banked
  4474  004B34  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4475  004B36  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4476  004B38  50F3               	movf	prodl,w,c
  4477  004B3A  0100               	movlb	0	; () banked
  4478  004B3C  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4479  004B3E  50F4               	movf	prodh,w,c
  4480  004B40  0100               	movlb	0	; () banked
  4481  004B42  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4482  004B44  90D8               	bcf	status,0,c
  4483  004B46  0100               	movlb	0	; () banked
  4484  004B48  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4485  004B4A  6ED9               	movwf	fsr2l,c
  4486  004B4C  0100               	movlb	0	; () banked
  4487  004B4E  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4488  004B50  6EDA               	movwf	fsr2h,c
  4489  004B52  0E0E               	movlw	low _startTime
  4490  004B54  26D9               	addwf	fsr2l,f,c
  4491  004B56  0E01               	movlw	high _startTime
  4492  004B58  22DA               	addwfc	fsr2h,f,c
  4493  004B5A  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4494  004B5E  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4495                           
  4496                           ; BSR set to: 0
  4497  004B62  0100               	movlb	0	; () banked
  4498  004B64  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4499  004B66  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4500  004B68  D7BA               	goto	l7305
  4501  004B6A                     l7315:
  4502                           
  4503                           ; BSR set to: 0
  4504                           ;sort.c: 471: }
  4505                           ;sort.c: 473: T0CON = 0b00010111;
  4506  004B6A  0E17               	movlw	23
  4507  004B6C  6ED5               	movwf	4053,c	;volatile
  4508                           
  4509                           ;sort.c: 482: TMR0H = 0b10000101;
  4510  004B6E  0E85               	movlw	133
  4511  004B70  6ED7               	movwf	4055,c	;volatile
  4512                           
  4513                           ;sort.c: 483: TMR0L = 0b11101110;
  4514  004B72  0EEE               	movlw	238
  4515  004B74  6ED6               	movwf	4054,c	;volatile
  4516                           
  4517                           ; BSR set to: 0
  4518                           ;sort.c: 484: TMR0ON = 1;
  4519  004B76  8ED5               	bsf	4053,7,c	;volatile
  4520                           
  4521                           ; BSR set to: 0
  4522  004B78  0012               	return		;funcret
  4523  004B7A                     __end_of_initSortTimer:
  4524                           	opt stack 0
  4525                           tblptru	equ	0xFF8
  4526                           tblptrh	equ	0xFF7
  4527                           tblptrl	equ	0xFF6
  4528                           tablat	equ	0xFF5
  4529                           prodh	equ	0xFF4
  4530                           prodl	equ	0xFF3
  4531                           postinc0	equ	0xFEE
  4532                           wreg	equ	0xFE8
  4533                           postdec1	equ	0xFE5
  4534                           fsr1l	equ	0xFE1
  4535                           indf2	equ	0xFDF
  4536                           postinc2	equ	0xFDE
  4537                           postdec2	equ	0xFDD
  4538                           fsr2h	equ	0xFDA
  4539                           fsr2l	equ	0xFD9
  4540                           status	equ	0xFD8
  4541                           
  4542 ;; *************** function _initGlobalVars *****************
  4543 ;; Defined at:
  4544 ;;		line 431 in file "sort.c"
  4545 ;; Parameters:    Size  Location     Type
  4546 ;;		None
  4547 ;; Auto vars:     Size  Location     Type
  4548 ;;		None
  4549 ;; Return value:  Size  Location     Type
  4550 ;;                  1    wreg      void 
  4551 ;; Registers used:
  4552 ;;		wreg, status,2
  4553 ;; Tracked objects:
  4554 ;;		On entry : 0/0
  4555 ;;		On exit  : 0/0
  4556 ;;		Unchanged: 0/0
  4557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4562 ;;Total ram usage:        0 bytes
  4563 ;; Hardware stack levels used:    1
  4564 ;; Hardware stack levels required when called:    7
  4565 ;; This function calls:
  4566 ;;		Nothing
  4567 ;; This function is called by:
  4568 ;;		_Loading
  4569 ;; This function uses a non-reentrant model
  4570 ;;
  4571                           
  4572                           	psect	text4
  4573  0046FC                     __ptext4:
  4574                           	opt stack 0
  4575  0046FC                     _initGlobalVars:
  4576                           	opt stack 21
  4577                           
  4578                           ;sort.c: 433: first = 0;
  4579                           
  4580                           ; BSR set to: 0
  4581                           ;incstack = 0
  4582  0046FC  0E00               	movlw	0
  4583  0046FE  0101               	movlb	1	; () banked
  4584  004700  6F3A               	movwf	(_first+1)& (0+255),b
  4585  004702  0E00               	movlw	0
  4586  004704  6F39               	movwf	_first& (0+255),b
  4587                           
  4588                           ;sort.c: 436: f_loadingNewCan = 0;
  4589  004706  0E00               	movlw	0
  4590  004708  0100               	movlb	0	; () banked
  4591  00470A  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4592  00470C  0E00               	movlw	0
  4593  00470E  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  4594                           
  4595                           ;sort.c: 437: f_lastCan = 0;
  4596  004710  0E00               	movlw	0
  4597  004712  0100               	movlb	0	; () banked
  4598  004714  6FEB               	movwf	(_f_lastCan+1)& (0+255),b
  4599  004716  0E00               	movlw	0
  4600  004718  6FEA               	movwf	_f_lastCan& (0+255),b
  4601                           
  4602                           ;sort.c: 438: f_ID_receive = 1;
  4603  00471A  0E00               	movlw	0
  4604  00471C  0101               	movlb	1	; () banked
  4605  00471E  6F30               	movwf	(_f_ID_receive+1)& (0+255),b
  4606  004720  0E01               	movlw	1
  4607  004722  6F2F               	movwf	_f_ID_receive& (0+255),b
  4608                           
  4609                           ;sort.c: 439: f_can_coming_to_ID = 0;
  4610  004724  0E00               	movlw	0
  4611  004726  0101               	movlb	1	; () banked
  4612  004728  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4613  00472A  0E00               	movlw	0
  4614  00472C  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4615                           
  4616                           ;sort.c: 440: f_can_coming_to_distribution = 0;
  4617  00472E  0E00               	movlw	0
  4618  004730  0101               	movlb	1	; () banked
  4619  004732  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4620  004734  0E00               	movlw	0
  4621  004736  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  4622                           
  4623                           ;sort.c: 441: f_can_distributed = 1;
  4624  004738  0E00               	movlw	0
  4625  00473A  0101               	movlb	1	; () banked
  4626  00473C  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  4627  00473E  0E01               	movlw	1
  4628  004740  6F35               	movwf	_f_can_distributed& (0+255),b
  4629                           
  4630                           ;sort.c: 442: f_most_recent_sort_time = 0;
  4631  004742  0E00               	movlw	0
  4632  004744  0101               	movlb	1	; () banked
  4633  004746  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4634  004748  0E00               	movlw	0
  4635  00474A  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  4636                           
  4637                           ;sort.c: 445: count_total = 0;
  4638  00474C  0E00               	movlw	0
  4639  00474E  0100               	movlb	0	; () banked
  4640  004750  6FFF               	movwf	(_count_total+1)& (0+255),b
  4641  004752  0E00               	movlw	0
  4642  004754  6FFE               	movwf	_count_total& (0+255),b
  4643                           
  4644                           ;sort.c: 446: count_pop_no_tab = 0;
  4645  004756  0E00               	movlw	0
  4646  004758  0101               	movlb	1	; () banked
  4647  00475A  6F28               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4648  00475C  0E00               	movlw	0
  4649  00475E  6F27               	movwf	_count_pop_no_tab& (0+255),b
  4650                           
  4651                           ;sort.c: 447: count_pop_w_tab = 0;
  4652  004760  0E00               	movlw	0
  4653  004762  0101               	movlb	1	; () banked
  4654  004764  6F2A               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4655  004766  0E00               	movlw	0
  4656  004768  6F29               	movwf	_count_pop_w_tab& (0+255),b
  4657                           
  4658                           ;sort.c: 448: count_can_w_lab = 0;
  4659  00476A  0E00               	movlw	0
  4660  00476C  0101               	movlb	1	; () banked
  4661  00476E  6F26               	movwf	(_count_can_w_lab+1)& (0+255),b
  4662  004770  0E00               	movlw	0
  4663  004772  6F25               	movwf	_count_can_w_lab& (0+255),b
  4664                           
  4665                           ;sort.c: 449: count_can_no_lab = 0;
  4666  004774  0E00               	movlw	0
  4667  004776  0101               	movlb	1	; () banked
  4668  004778  6F24               	movwf	(_count_can_no_lab+1)& (0+255),b
  4669  00477A  0E00               	movlw	0
  4670  00477C  6F23               	movwf	_count_can_no_lab& (0+255),b
  4671                           
  4672                           ;sort.c: 452: most_recent_sort_time = 999;
  4673  00477E  0E03               	movlw	3
  4674  004780  0101               	movlb	1	; () banked
  4675  004782  6F44               	movwf	(_most_recent_sort_time+1)& (0+255),b
  4676  004784  0EE7               	movlw	231
  4677  004786  6F43               	movwf	_most_recent_sort_time& (0+255),b
  4678                           
  4679                           ;sort.c: 455: motor_toggle_count = 0;
  4680  004788  0E00               	movlw	0
  4681  00478A  0101               	movlb	1	; () banked
  4682  00478C  6F46               	movwf	(_motor_toggle_count+1)& (0+255),b
  4683  00478E  0E00               	movlw	0
  4684  004790  6F45               	movwf	_motor_toggle_count& (0+255),b
  4685                           
  4686                           ;sort.c: 458: servo_timer_counter = 0;
  4687  004792  0E00               	movlw	0
  4688  004794  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
  4689  004796  0E00               	movlw	0
  4690  004798  6E6D               	movwf	_servo_timer_counter,c	;volatile
  4691                           
  4692                           ;sort.c: 459: servo_timer_target = 9999;
  4693  00479A  0E27               	movlw	39
  4694  00479C  6E70               	movwf	_servo_timer_target+1,c	;volatile
  4695  00479E  0E0F               	movlw	15
  4696  0047A0  6E6F               	movwf	_servo_timer_target,c	;volatile
  4697                           
  4698                           ;sort.c: 460: timer2_counter = 0;
  4699  0047A2  0E00               	movlw	0
  4700  0047A4  6E74               	movwf	_timer2_counter+1,c	;volatile
  4701  0047A6  0E00               	movlw	0
  4702  0047A8  6E73               	movwf	_timer2_counter,c	;volatile
  4703                           
  4704                           ;sort.c: 461: f_arm_position = 0;
  4705  0047AA  0E00               	movlw	0
  4706  0047AC  0100               	movlb	0	; () banked
  4707  0047AE  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4708  0047B0  0E00               	movlw	0
  4709  0047B2  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  4710                           
  4711                           ; BSR set to: 0
  4712                           ;sort.c: 462: pan_servo_state = -1;
  4713  0047B4  686B               	setf	_pan_servo_state,c	;volatile
  4714  0047B6  686C               	setf	_pan_servo_state+1,c	;volatile
  4715                           
  4716                           ; BSR set to: 0
  4717                           ;sort.c: 463: tilt_servo_state = -1;
  4718  0047B8  6871               	setf	_tilt_servo_state,c	;volatile
  4719  0047BA  6872               	setf	_tilt_servo_state+1,c	;volatile
  4720                           
  4721                           ;sort.c: 464: f_panning_to_bin = 0;
  4722  0047BC  0E00               	movlw	0
  4723  0047BE  6E68               	movwf	_f_panning_to_bin+1,c	;volatile
  4724  0047C0  0E00               	movlw	0
  4725  0047C2  6E67               	movwf	_f_panning_to_bin,c	;volatile
  4726                           
  4727                           ; BSR set to: 0
  4728  0047C4  0012               	return		;funcret
  4729  0047C6                     __end_of_initGlobalVars:
  4730                           	opt stack 0
  4731                           tblptru	equ	0xFF8
  4732                           tblptrh	equ	0xFF7
  4733                           tblptrl	equ	0xFF6
  4734                           tablat	equ	0xFF5
  4735                           prodh	equ	0xFF4
  4736                           prodl	equ	0xFF3
  4737                           postinc0	equ	0xFEE
  4738                           wreg	equ	0xFE8
  4739                           postdec1	equ	0xFE5
  4740                           fsr1l	equ	0xFE1
  4741                           indf2	equ	0xFDF
  4742                           postinc2	equ	0xFDE
  4743                           postdec2	equ	0xFDD
  4744                           fsr2h	equ	0xFDA
  4745                           fsr2l	equ	0xFD9
  4746                           status	equ	0xFD8
  4747                           
  4748 ;; *************** function _getMAG *****************
  4749 ;; Defined at:
  4750 ;;		line 571 in file "sort.c"
  4751 ;; Parameters:    Size  Location     Type
  4752 ;;		None
  4753 ;; Auto vars:     Size  Location     Type
  4754 ;;		None
  4755 ;; Return value:  Size  Location     Type
  4756 ;;                  1    wreg      void 
  4757 ;; Registers used:
  4758 ;;		wreg, status,2, status,0, cstack
  4759 ;; Tracked objects:
  4760 ;;		On entry : 0/0
  4761 ;;		On exit  : 0/0
  4762 ;;		Unchanged: 0/0
  4763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4766 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4767 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4768 ;;Total ram usage:        2 bytes
  4769 ;; Hardware stack levels used:    1
  4770 ;; Hardware stack levels required when called:    9
  4771 ;; This function calls:
  4772 ;;		_readMAG
  4773 ;; This function is called by:
  4774 ;;		_Loading
  4775 ;; This function uses a non-reentrant model
  4776 ;;
  4777                           
  4778                           	psect	text5
  4779  005676                     __ptext5:
  4780                           	opt stack 0
  4781  005676                     _getMAG:
  4782                           	opt stack 19
  4783                           
  4784                           ;sort.c: 572: readMAG();
  4785                           
  4786                           ; BSR set to: 0
  4787                           ;incstack = 0
  4788  005676  EC24  F02A         	call	_readMAG	;wreg free
  4789                           
  4790                           ;sort.c: 574: if(MAG_signal==1){
  4791  00567A  0100               	movlb	0	; () banked
  4792  00567C  05E2               	decf	_MAG_signal& (0+255),w,b
  4793  00567E  0100               	movlb	0	; () banked
  4794  005680  11E3               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4795  005682  A4D8               	btfss	status,2,c
  4796  005684  0012               	return	
  4797                           
  4798                           ; BSR set to: 0
  4799                           ;sort.c: 575: _delay((unsigned long)((500)*(32000000/4000.0)));
  4800  005686  0E15               	movlw	21
  4801  005688  0100               	movlb	0	; () banked
  4802  00568A  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4803  00568C  0E4B               	movlw	75
  4804  00568E  0100               	movlb	0	; () banked
  4805  005690  6F86               	movwf	??_getMAG& (0+255),b
  4806  005692  0EBE               	movlw	190
  4807  005694                     u9947:
  4808  005694  2EE8               	decfsz	wreg,f,c
  4809  005696  D7FE               	bra	u9947
  4810  005698  2F86               	decfsz	??_getMAG& (0+255),f,b
  4811  00569A  D7FC               	bra	u9947
  4812  00569C  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4813  00569E  D7FA               	bra	u9947
  4814  0056A0  F000               	nop	
  4815                           
  4816                           ;sort.c: 576: readMAG();
  4817  0056A2  EC24  F02A         	call	_readMAG	;wreg free
  4818  0056A6  0012               	return	
  4819  0056A8                     __end_of_getMAG:
  4820                           	opt stack 0
  4821                           tblptru	equ	0xFF8
  4822                           tblptrh	equ	0xFF7
  4823                           tblptrl	equ	0xFF6
  4824                           tablat	equ	0xFF5
  4825                           prodh	equ	0xFF4
  4826                           prodl	equ	0xFF3
  4827                           postinc0	equ	0xFEE
  4828                           wreg	equ	0xFE8
  4829                           postdec1	equ	0xFE5
  4830                           fsr1l	equ	0xFE1
  4831                           indf2	equ	0xFDF
  4832                           postinc2	equ	0xFDE
  4833                           postdec2	equ	0xFDD
  4834                           fsr2h	equ	0xFDA
  4835                           fsr2l	equ	0xFD9
  4836                           status	equ	0xFD8
  4837                           
  4838 ;; *************** function _getIR *****************
  4839 ;; Defined at:
  4840 ;;		line 555 in file "sort.c"
  4841 ;; Parameters:    Size  Location     Type
  4842 ;;		None
  4843 ;; Auto vars:     Size  Location     Type
  4844 ;;  i               2    7[BANK0 ] int 
  4845 ;; Return value:  Size  Location     Type
  4846 ;;                  1    wreg      void 
  4847 ;; Registers used:
  4848 ;;		wreg, status,2, status,0, cstack
  4849 ;; Tracked objects:
  4850 ;;		On entry : 0/0
  4851 ;;		On exit  : 0/0
  4852 ;;		Unchanged: 0/0
  4853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4855 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4856 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4857 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4858 ;;Total ram usage:        3 bytes
  4859 ;; Hardware stack levels used:    1
  4860 ;; Hardware stack levels required when called:    9
  4861 ;; This function calls:
  4862 ;;		_readIR
  4863 ;; This function is called by:
  4864 ;;		_Loading
  4865 ;; This function uses a non-reentrant model
  4866 ;;
  4867                           
  4868                           	psect	text6
  4869  004F20                     __ptext6:
  4870                           	opt stack 0
  4871  004F20                     _getIR:
  4872                           	opt stack 19
  4873                           
  4874                           ;sort.c: 556: readIR();
  4875                           
  4876                           ;incstack = 0
  4877  004F20  ECD8  F029         	call	_readIR	;wreg free
  4878                           
  4879                           ;sort.c: 557: for(int i = 0; i < 150; i++){
  4880  004F24  0E00               	movlw	0
  4881  004F26  0100               	movlb	0	; () banked
  4882  004F28  6F88               	movwf	(getIR@i+1)& (0+255),b
  4883  004F2A  0E00               	movlw	0
  4884  004F2C  6F87               	movwf	getIR@i& (0+255),b
  4885  004F2E                     l7405:
  4886                           
  4887                           ; BSR set to: 0
  4888  004F2E  0100               	movlb	0	; () banked
  4889  004F30  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4890  004F32  D008               	goto	l7409
  4891  004F34  0100               	movlb	0	; () banked
  4892  004F36  5188               	movf	(getIR@i+1)& (0+255),w,b
  4893  004F38  E11A               	bnz	l7421
  4894  004F3A  0E96               	movlw	150
  4895  004F3C  0100               	movlb	0	; () banked
  4896  004F3E  5D87               	subwf	getIR@i& (0+255),w,b
  4897  004F40  B0D8               	btfsc	status,0,c
  4898  004F42  D015               	goto	l7421
  4899  004F44                     l7409:
  4900                           
  4901                           ; BSR set to: 0
  4902                           ;sort.c: 558: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4903  004F44  0E06               	movlw	6
  4904  004F46  0100               	movlb	0	; () banked
  4905  004F48  6F86               	movwf	??_getIR& (0+255),b
  4906  004F4A  0E30               	movlw	48
  4907  004F4C                     u9957:
  4908  004F4C  2EE8               	decfsz	wreg,f,c
  4909  004F4E  D7FE               	bra	u9957
  4910  004F50  2F86               	decfsz	??_getIR& (0+255),f,b
  4911  004F52  D7FC               	bra	u9957
  4912  004F54  F000               	nop	
  4913                           
  4914                           ;sort.c: 559: readIR();
  4915  004F56  ECD8  F029         	call	_readIR	;wreg free
  4916                           
  4917                           ;sort.c: 560: if(!IR_signal){
  4918  004F5A  0100               	movlb	0	; () banked
  4919  004F5C  51E0               	movf	_IR_signal& (0+255),w,b
  4920  004F5E  0100               	movlb	0	; () banked
  4921  004F60  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4922  004F62  B4D8               	btfsc	status,2,c
  4923  004F64  D004               	goto	l7421
  4924                           
  4925                           ; BSR set to: 0
  4926                           
  4927                           ; BSR set to: 0
  4928                           
  4929                           ; BSR set to: 0
  4930                           ;sort.c: 561: break;
  4931  004F66  0100               	movlb	0	; () banked
  4932  004F68  4B87               	infsnz	getIR@i& (0+255),f,b
  4933  004F6A  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4934  004F6C  D7E0               	goto	l7405
  4935  004F6E                     l7421:
  4936                           
  4937                           ; BSR set to: 0
  4938                           ;sort.c: 562: }
  4939                           ;sort.c: 563: }
  4940                           ;sort.c: 564: if(IR_signal==1){
  4941  004F6E  0100               	movlb	0	; () banked
  4942  004F70  05E0               	decf	_IR_signal& (0+255),w,b
  4943  004F72  0100               	movlb	0	; () banked
  4944  004F74  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4945  004F76  A4D8               	btfss	status,2,c
  4946  004F78  D006               	goto	l7425
  4947                           
  4948                           ; BSR set to: 0
  4949                           ;sort.c: 565: f_loadingNewCan = 1;
  4950  004F7A  0E00               	movlw	0
  4951  004F7C  0100               	movlb	0	; () banked
  4952  004F7E  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4953  004F80  0E01               	movlw	1
  4954  004F82  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  4955                           
  4956                           ;sort.c: 566: }
  4957  004F84  0012               	return	
  4958  004F86                     l7425:
  4959                           
  4960                           ; BSR set to: 0
  4961                           ;sort.c: 567: else{
  4962                           ;sort.c: 568: f_loadingNewCan = 0;
  4963  004F86  0E00               	movlw	0
  4964  004F88  0100               	movlb	0	; () banked
  4965  004F8A  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4966  004F8C  0E00               	movlw	0
  4967  004F8E  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  4968  004F90  0012               	return	
  4969  004F92                     __end_of_getIR:
  4970                           	opt stack 0
  4971                           tblptru	equ	0xFF8
  4972                           tblptrh	equ	0xFF7
  4973                           tblptrl	equ	0xFF6
  4974                           tablat	equ	0xFF5
  4975                           prodh	equ	0xFF4
  4976                           prodl	equ	0xFF3
  4977                           postinc0	equ	0xFEE
  4978                           wreg	equ	0xFE8
  4979                           postdec1	equ	0xFE5
  4980                           fsr1l	equ	0xFE1
  4981                           indf2	equ	0xFDF
  4982                           postinc2	equ	0xFDE
  4983                           postdec2	equ	0xFDD
  4984                           fsr2h	equ	0xFDA
  4985                           fsr2l	equ	0xFD9
  4986                           status	equ	0xFD8
  4987                           
  4988 ;; *************** function _readIR *****************
  4989 ;; Defined at:
  4990 ;;		line 23 in file "ADCFunctionality.c"
  4991 ;; Parameters:    Size  Location     Type
  4992 ;;		None
  4993 ;; Auto vars:     Size  Location     Type
  4994 ;;  res             2    4[BANK0 ] int 
  4995 ;; Return value:  Size  Location     Type
  4996 ;;                  1    wreg      void 
  4997 ;; Registers used:
  4998 ;;		wreg, status,2, status,0, cstack
  4999 ;; Tracked objects:
  5000 ;;		On entry : 0/0
  5001 ;;		On exit  : 0/0
  5002 ;;		Unchanged: 0/0
  5003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5005 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5006 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5007 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5008 ;;Total ram usage:        4 bytes
  5009 ;; Hardware stack levels used:    1
  5010 ;; Hardware stack levels required when called:    8
  5011 ;; This function calls:
  5012 ;;		_readADC
  5013 ;; This function is called by:
  5014 ;;		_Loading
  5015 ;;		_getIR
  5016 ;; This function uses a non-reentrant model
  5017 ;;
  5018                           
  5019                           	psect	text7
  5020  0053B0                     __ptext7:
  5021                           	opt stack 0
  5022  0053B0                     _readIR:
  5023                           	opt stack 20
  5024                           
  5025                           ;ADCFunctionality.c: 24: readADC(0);
  5026                           
  5027                           ; BSR set to: 0
  5028                           ;incstack = 0
  5029  0053B0  0E00               	movlw	0
  5030  0053B2  ECA1  F02C         	call	_readADC
  5031                           
  5032                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  5033  0053B6  50C3               	movf	4035,w,c	;volatile
  5034  0053B8  CFC4 F082          	movff	4036,??_readIR	;volatile
  5035  0053BC  0100               	movlb	0	; () banked
  5036  0053BE  6B83               	clrf	(??_readIR+1)& (0+255),b
  5037  0053C0  C082  F083         	movff	??_readIR,??_readIR+1
  5038  0053C4  0100               	movlb	0	; () banked
  5039  0053C6  6B82               	clrf	??_readIR& (0+255),b
  5040  0053C8  0100               	movlb	0	; () banked
  5041  0053CA  1182               	iorwf	??_readIR& (0+255),w,b
  5042  0053CC  0100               	movlb	0	; () banked
  5043  0053CE  6F84               	movwf	readIR@res& (0+255),b
  5044  0053D0  0100               	movlb	0	; () banked
  5045  0053D2  5183               	movf	(??_readIR+1)& (0+255),w,b
  5046  0053D4  0100               	movlb	0	; () banked
  5047  0053D6  6F85               	movwf	(readIR@res+1)& (0+255),b
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  5051  0053D8  0100               	movlb	0	; () banked
  5052  0053DA  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  5053  0053DC  D00A               	goto	u5090
  5054  0053DE  0E21               	movlw	33
  5055  0053E0  0100               	movlb	0	; () banked
  5056  0053E2  5D84               	subwf	readIR@res& (0+255),w,b
  5057  0053E4  0E03               	movlw	3
  5058  0053E6  0100               	movlb	0	; () banked
  5059  0053E8  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  5060  0053EA  A0D8               	btfss	status,0,c
  5061  0053EC  D002               	goto	u5090
  5062  0053EE  0E01               	movlw	1
  5063  0053F0  D001               	goto	u5100
  5064  0053F2                     u5090:
  5065  0053F2  0E00               	movlw	0
  5066  0053F4                     u5100:
  5067  0053F4  0100               	movlb	0	; () banked
  5068  0053F6  6FE0               	movwf	_IR_signal& (0+255),b
  5069  0053F8  6BE1               	clrf	(_IR_signal+1)& (0+255),b
  5070                           
  5071                           ; BSR set to: 0
  5072  0053FA  0012               	return		;funcret
  5073  0053FC                     __end_of_readIR:
  5074                           	opt stack 0
  5075                           tblptru	equ	0xFF8
  5076                           tblptrh	equ	0xFF7
  5077                           tblptrl	equ	0xFF6
  5078                           tablat	equ	0xFF5
  5079                           prodh	equ	0xFF4
  5080                           prodl	equ	0xFF3
  5081                           postinc0	equ	0xFEE
  5082                           wreg	equ	0xFE8
  5083                           postdec1	equ	0xFE5
  5084                           fsr1l	equ	0xFE1
  5085                           indf2	equ	0xFDF
  5086                           postinc2	equ	0xFDE
  5087                           postdec2	equ	0xFDD
  5088                           fsr2h	equ	0xFDA
  5089                           fsr2l	equ	0xFD9
  5090                           status	equ	0xFD8
  5091                           
  5092 ;; *************** function _ID *****************
  5093 ;; Defined at:
  5094 ;;		line 282 in file "sort.c"
  5095 ;; Parameters:    Size  Location     Type
  5096 ;;		None
  5097 ;; Auto vars:     Size  Location     Type
  5098 ;;  i               2   46[BANK0 ] int 
  5099 ;;  i               2   55[BANK0 ] int 
  5100 ;;  j               2   57[BANK0 ] int 
  5101 ;;  i               2   44[BANK0 ] int 
  5102 ;;  i               2   42[BANK0 ] int 
  5103 ;;  i               2   48[BANK0 ] int 
  5104 ;;  res            10   29[BANK0 ] int [5]
  5105 ;;  time            1   39[BANK0 ] const unsigned char 
  5106 ;;  res2            2   53[BANK0 ] int 
  5107 ;;  res1            2   51[BANK0 ] int 
  5108 ;;  time            1   50[BANK0 ] const unsigned char 
  5109 ;;  n               2   59[BANK0 ] const int 
  5110 ;; Return value:  Size  Location     Type
  5111 ;;                  1    wreg      void 
  5112 ;; Registers used:
  5113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5114 ;; Tracked objects:
  5115 ;;		On entry : 0/0
  5116 ;;		On exit  : 0/0
  5117 ;;		Unchanged: 0/0
  5118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5120 ;;      Locals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5121 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5122 ;;      Totals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5123 ;;Total ram usage:       34 bytes
  5124 ;; Hardware stack levels used:    1
  5125 ;; Hardware stack levels required when called:    9
  5126 ;; This function calls:
  5127 ;;		___awdiv
  5128 ;;		___awtoft
  5129 ;;		___ftge
  5130 ;;		_delay_ms
  5131 ;;		_readCOND
  5132 ;; This function is called by:
  5133 ;;		_sort
  5134 ;; This function uses a non-reentrant model
  5135 ;;
  5136                           
  5137                           	psect	text8
  5138  0016CC                     __ptext8:
  5139                           	opt stack 0
  5140  0016CC                     _ID:
  5141                           	opt stack 20
  5142                           
  5143                           ;sort.c: 283: if(f_can_coming_to_ID){
  5144                           
  5145                           ; BSR set to: 0
  5146                           ;incstack = 0
  5147  0016CC  0101               	movlb	1	; () banked
  5148  0016CE  5131               	movf	_f_can_coming_to_ID& (0+255),w,b
  5149  0016D0  0101               	movlb	1	; () banked
  5150  0016D2  1132               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  5151  0016D4  B4D8               	btfsc	status,2,c
  5152  0016D6  0012               	return	
  5153                           
  5154                           ; BSR set to: 1
  5155                           ;sort.c: 285: _delay((unsigned long)((1000)*(32000000/4000.0)));
  5156  0016D8  0E29               	movlw	41
  5157  0016DA  0100               	movlb	0	; () banked
  5158  0016DC  6F9C               	movwf	(??_ID+1)& (0+255),b
  5159  0016DE  0E96               	movlw	150
  5160  0016E0  0100               	movlb	0	; () banked
  5161  0016E2  6F9B               	movwf	??_ID& (0+255),b
  5162  0016E4  0E7F               	movlw	127
  5163  0016E6                     u9967:
  5164  0016E6  2EE8               	decfsz	wreg,f,c
  5165  0016E8  D7FE               	bra	u9967
  5166  0016EA  2F9B               	decfsz	??_ID& (0+255),f,b
  5167  0016EC  D7FC               	bra	u9967
  5168  0016EE  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5169  0016F0  D7FA               	bra	u9967
  5170                           
  5171                           ;sort.c: 287: f_arm_position = 0;
  5172  0016F2  0E00               	movlw	0
  5173  0016F4  0100               	movlb	0	; () banked
  5174  0016F6  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  5175  0016F8  0E00               	movlw	0
  5176  0016FA  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  5177                           
  5178                           ; BSR set to: 0
  5179                           ;sort.c: 289: LATAbits.LATA3 = 1;
  5180  0016FC  8689               	bsf	3977,3,c	;volatile
  5181                           
  5182                           ; BSR set to: 0
  5183                           ;sort.c: 292: const int n = 10;
  5184  0016FE  0E00               	movlw	0
  5185  001700  0100               	movlb	0	; () banked
  5186  001702  6FBC               	movwf	(ID@n+1)& (0+255),b
  5187  001704  0E0A               	movlw	10
  5188  001706  6FBB               	movwf	ID@n& (0+255),b
  5189                           
  5190                           ; BSR set to: 0
  5191                           ;sort.c: 294: if(!sensor_outputs[0]){
  5192  001708  0100               	movlb	0	; () banked
  5193  00170A  51DA               	movf	_sensor_outputs& (0+255),w,b
  5194  00170C  0100               	movlb	0	; () banked
  5195  00170E  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5196  001710  A4D8               	btfss	status,2,c
  5197  001712  D0E3               	goto	l8073
  5198                           
  5199                           ; BSR set to: 0
  5200                           ;sort.c: 295: const unsigned char time = (600 / n);
  5201  001714  0E02               	movlw	2
  5202  001716  0100               	movlb	0	; () banked
  5203  001718  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5204  00171A  0E58               	movlw	88
  5205  00171C  6F86               	movwf	___awdiv@dividend& (0+255),b
  5206  00171E  C0BB  F088         	movff	ID@n,___awdiv@divisor
  5207  001722  C0BC  F089         	movff	ID@n+1,___awdiv@divisor+1
  5208  001726  ECAB  F024         	call	___awdiv	;wreg free
  5209  00172A  0100               	movlb	0	; () banked
  5210  00172C  5186               	movf	?___awdiv& (0+255),w,b
  5211  00172E  0100               	movlb	0	; () banked
  5212  001730  6FB2               	movwf	ID@time& (0+255),b
  5213                           
  5214                           ; BSR set to: 0
  5215                           ;sort.c: 296: int res1 = 0;
  5216  001732  0E00               	movlw	0
  5217  001734  0100               	movlb	0	; () banked
  5218  001736  6FB4               	movwf	(ID@res1+1)& (0+255),b
  5219  001738  0E00               	movlw	0
  5220  00173A  6FB3               	movwf	ID@res1& (0+255),b
  5221                           
  5222                           ; BSR set to: 0
  5223                           ;sort.c: 297: int res2 = 0;
  5224  00173C  0E00               	movlw	0
  5225  00173E  0100               	movlb	0	; () banked
  5226  001740  6FB6               	movwf	(ID@res2+1)& (0+255),b
  5227  001742  0E00               	movlw	0
  5228  001744  6FB5               	movwf	ID@res2& (0+255),b
  5229                           
  5230                           ; BSR set to: 0
  5231                           ;sort.c: 298: for(int i = 0; i<n; i++){
  5232  001746  0E00               	movlw	0
  5233  001748  0100               	movlb	0	; () banked
  5234  00174A  6FAB               	movwf	(ID@i+1)& (0+255),b
  5235  00174C  0E00               	movlw	0
  5236  00174E  6FAA               	movwf	ID@i& (0+255),b
  5237  001750                     l8031:
  5238                           
  5239                           ; BSR set to: 0
  5240  001750  0100               	movlb	0	; () banked
  5241  001752  51BB               	movf	ID@n& (0+255),w,b
  5242  001754  0100               	movlb	0	; () banked
  5243  001756  5DAA               	subwf	ID@i& (0+255),w,b
  5244  001758  0100               	movlb	0	; () banked
  5245  00175A  51AB               	movf	(ID@i+1)& (0+255),w,b
  5246  00175C  0A80               	xorlw	128
  5247  00175E  0100               	movlb	0	; () banked
  5248  001760  6F9B               	movwf	??_ID& (0+255),b
  5249  001762  0100               	movlb	0	; () banked
  5250  001764  51BC               	movf	(ID@n+1)& (0+255),w,b
  5251  001766  0A80               	xorlw	128
  5252  001768  0100               	movlb	0	; () banked
  5253  00176A  599B               	subwfb	??_ID& (0+255),w,b
  5254  00176C  B0D8               	btfsc	status,0,c
  5255  00176E  D012               	goto	l854
  5256                           
  5257                           ; BSR set to: 0
  5258                           ;sort.c: 299: delay_ms(time);
  5259                           
  5260                           ; BSR set to: 0
  5261                           
  5262                           ; BSR set to: 0
  5263  001770  0100               	movlb	0	; () banked
  5264  001772  51B2               	movf	ID@time& (0+255),w,b
  5265  001774  ECCC  F02C         	call	_delay_ms
  5266                           
  5267                           ;sort.c: 300: readCOND();
  5268  001778  ECFE  F029         	call	_readCOND	;wreg free
  5269                           
  5270                           ;sort.c: 301: res1 += COND_signal;
  5271  00177C  0100               	movlb	0	; () banked
  5272  00177E  51DE               	movf	_COND_signal& (0+255),w,b
  5273  001780  0100               	movlb	0	; () banked
  5274  001782  27B3               	addwf	ID@res1& (0+255),f,b
  5275  001784  0100               	movlb	0	; () banked
  5276  001786  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5277  001788  0100               	movlb	0	; () banked
  5278  00178A  23B4               	addwfc	(ID@res1+1)& (0+255),f,b
  5279                           
  5280                           ; BSR set to: 0
  5281  00178C  0100               	movlb	0	; () banked
  5282  00178E  4BAA               	infsnz	ID@i& (0+255),f,b
  5283  001790  2BAB               	incf	(ID@i+1)& (0+255),f,b
  5284  001792  D7DE               	goto	l8031
  5285  001794                     l854:
  5286                           
  5287                           ; BSR set to: 0
  5288                           ;sort.c: 302: }
  5289                           ;sort.c: 303: LATAbits.LATA3 = 0;
  5290  001794  9689               	bcf	3977,3,c	;volatile
  5291                           
  5292                           ; BSR set to: 0
  5293                           ;sort.c: 304: _delay((unsigned long)((200)*(32000000/4000.0)));
  5294  001796  0E09               	movlw	9
  5295  001798  0100               	movlb	0	; () banked
  5296  00179A  6F9C               	movwf	(??_ID+1)& (0+255),b
  5297  00179C  0E1E               	movlw	30
  5298  00179E  0100               	movlb	0	; () banked
  5299  0017A0  6F9B               	movwf	??_ID& (0+255),b
  5300  0017A2  0EE4               	movlw	228
  5301  0017A4                     u9977:
  5302  0017A4  2EE8               	decfsz	wreg,f,c
  5303  0017A6  D7FE               	bra	u9977
  5304  0017A8  2F9B               	decfsz	??_ID& (0+255),f,b
  5305  0017AA  D7FC               	bra	u9977
  5306  0017AC  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5307  0017AE  D7FA               	bra	u9977
  5308  0017B0  F000               	nop	
  5309                           
  5310                           ;sort.c: 305: LATAbits.LATA3 = 1;
  5311  0017B2  8689               	bsf	3977,3,c	;volatile
  5312                           
  5313                           ;sort.c: 306: for(int i = 0; i<n; i++){
  5314  0017B4  0E00               	movlw	0
  5315  0017B6  0100               	movlb	0	; () banked
  5316  0017B8  6FAD               	movwf	(ID@i_1144+1)& (0+255),b
  5317  0017BA  0E00               	movlw	0
  5318  0017BC  6FAC               	movwf	ID@i_1144& (0+255),b
  5319  0017BE                     l8049:
  5320                           
  5321                           ; BSR set to: 0
  5322  0017BE  0100               	movlb	0	; () banked
  5323  0017C0  51BB               	movf	ID@n& (0+255),w,b
  5324  0017C2  0100               	movlb	0	; () banked
  5325  0017C4  5DAC               	subwf	ID@i_1144& (0+255),w,b
  5326  0017C6  0100               	movlb	0	; () banked
  5327  0017C8  51AD               	movf	(ID@i_1144+1)& (0+255),w,b
  5328  0017CA  0A80               	xorlw	128
  5329  0017CC  0100               	movlb	0	; () banked
  5330  0017CE  6F9B               	movwf	??_ID& (0+255),b
  5331  0017D0  0100               	movlb	0	; () banked
  5332  0017D2  51BC               	movf	(ID@n+1)& (0+255),w,b
  5333  0017D4  0A80               	xorlw	128
  5334  0017D6  0100               	movlb	0	; () banked
  5335  0017D8  599B               	subwfb	??_ID& (0+255),w,b
  5336  0017DA  B0D8               	btfsc	status,0,c
  5337  0017DC  D012               	goto	l856
  5338                           
  5339                           ; BSR set to: 0
  5340                           ;sort.c: 307: delay_ms(time);
  5341                           
  5342                           ; BSR set to: 0
  5343                           
  5344                           ; BSR set to: 0
  5345  0017DE  0100               	movlb	0	; () banked
  5346  0017E0  51B2               	movf	ID@time& (0+255),w,b
  5347  0017E2  ECCC  F02C         	call	_delay_ms
  5348                           
  5349                           ;sort.c: 308: readCOND();
  5350  0017E6  ECFE  F029         	call	_readCOND	;wreg free
  5351                           
  5352                           ;sort.c: 309: res2 += COND_signal;
  5353  0017EA  0100               	movlb	0	; () banked
  5354  0017EC  51DE               	movf	_COND_signal& (0+255),w,b
  5355  0017EE  0100               	movlb	0	; () banked
  5356  0017F0  27B5               	addwf	ID@res2& (0+255),f,b
  5357  0017F2  0100               	movlb	0	; () banked
  5358  0017F4  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5359  0017F6  0100               	movlb	0	; () banked
  5360  0017F8  23B6               	addwfc	(ID@res2+1)& (0+255),f,b
  5361                           
  5362                           ; BSR set to: 0
  5363  0017FA  0100               	movlb	0	; () banked
  5364  0017FC  4BAC               	infsnz	ID@i_1144& (0+255),f,b
  5365  0017FE  2BAD               	incf	(ID@i_1144+1)& (0+255),f,b
  5366  001800  D7DE               	goto	l8049
  5367  001802                     l856:
  5368                           
  5369                           ; BSR set to: 0
  5370                           ;sort.c: 310: }
  5371                           ;sort.c: 311: LATAbits.LATA3 = 0;
  5372  001802  9689               	bcf	3977,3,c	;volatile
  5373                           
  5374                           ; BSR set to: 0
  5375                           ;sort.c: 312: res1 = ((res1 / n) > 0.3) ? 1 : 0;
  5376  001804  0E9A               	movlw	154
  5377  001806  0100               	movlb	0	; () banked
  5378  001808  6F92               	movwf	___ftge@ff1& (0+255),b
  5379  00180A  0E99               	movlw	153
  5380  00180C  0100               	movlb	0	; () banked
  5381  00180E  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5382  001810  0E3E               	movlw	62
  5383  001812  0100               	movlb	0	; () banked
  5384  001814  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5385  001816  C0BB  F088         	movff	ID@n,___awdiv@divisor
  5386  00181A  C0BC  F089         	movff	ID@n+1,___awdiv@divisor+1
  5387  00181E  C0B3  F086         	movff	ID@res1,___awdiv@dividend
  5388  001822  C0B4  F087         	movff	ID@res1+1,___awdiv@dividend+1
  5389  001826  ECAB  F024         	call	___awdiv	;wreg free
  5390  00182A  C086  F08E         	movff	?___awdiv,___awtoft@c
  5391  00182E  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5392  001832  EC6D  F02A         	call	___awtoft	;wreg free
  5393  001836  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5394  00183A  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5395  00183E  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5396  001842  EC47  F024         	call	___ftge	;wreg free
  5397  001846  0100               	movlb	0	; () banked
  5398  001848  B0D8               	btfsc	status,0,c
  5399  00184A  D002               	goto	u6790
  5400  00184C  0E01               	movlw	1
  5401  00184E  D001               	goto	u6800
  5402  001850                     u6790:
  5403  001850  0E00               	movlw	0
  5404  001852                     u6800:
  5405  001852  0100               	movlb	0	; () banked
  5406  001854  6FB3               	movwf	ID@res1& (0+255),b
  5407  001856  6BB4               	clrf	(ID@res1+1)& (0+255),b
  5408                           
  5409                           ;sort.c: 313: res2 = ((res2 / n) > 0.3) ? 1 : 0;
  5410  001858  0E9A               	movlw	154
  5411  00185A  0100               	movlb	0	; () banked
  5412  00185C  6F92               	movwf	___ftge@ff1& (0+255),b
  5413  00185E  0E99               	movlw	153
  5414  001860  0100               	movlb	0	; () banked
  5415  001862  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5416  001864  0E3E               	movlw	62
  5417  001866  0100               	movlb	0	; () banked
  5418  001868  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5419  00186A  C0BB  F088         	movff	ID@n,___awdiv@divisor
  5420  00186E  C0BC  F089         	movff	ID@n+1,___awdiv@divisor+1
  5421  001872  C0B5  F086         	movff	ID@res2,___awdiv@dividend
  5422  001876  C0B6  F087         	movff	ID@res2+1,___awdiv@dividend+1
  5423  00187A  ECAB  F024         	call	___awdiv	;wreg free
  5424  00187E  C086  F08E         	movff	?___awdiv,___awtoft@c
  5425  001882  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5426  001886  EC6D  F02A         	call	___awtoft	;wreg free
  5427  00188A  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5428  00188E  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5429  001892  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5430  001896  EC47  F024         	call	___ftge	;wreg free
  5431  00189A  0100               	movlb	0	; () banked
  5432  00189C  B0D8               	btfsc	status,0,c
  5433  00189E  D002               	goto	u6810
  5434  0018A0  0E01               	movlw	1
  5435  0018A2  D001               	goto	u6820
  5436  0018A4                     u6810:
  5437  0018A4  0E00               	movlw	0
  5438  0018A6                     u6820:
  5439  0018A6  0100               	movlb	0	; () banked
  5440  0018A8  6FB5               	movwf	ID@res2& (0+255),b
  5441  0018AA  6BB6               	clrf	(ID@res2+1)& (0+255),b
  5442                           
  5443                           ; BSR set to: 0
  5444                           ;sort.c: 316: sensor_outputs[1] = (res1 || res2);
  5445  0018AC  0E01               	movlw	1
  5446  0018AE  0100               	movlb	0	; () banked
  5447  0018B0  6FA8               	movwf	_ID$1145& (0+255),b
  5448                           
  5449                           ; BSR set to: 0
  5450  0018B2  0100               	movlb	0	; () banked
  5451  0018B4  51B3               	movf	ID@res1& (0+255),w,b
  5452  0018B6  0100               	movlb	0	; () banked
  5453  0018B8  11B4               	iorwf	(ID@res1+1)& (0+255),w,b
  5454  0018BA  A4D8               	btfss	status,2,c
  5455  0018BC  D009               	goto	l8071
  5456                           
  5457                           ; BSR set to: 0
  5458  0018BE  0100               	movlb	0	; () banked
  5459  0018C0  51B5               	movf	ID@res2& (0+255),w,b
  5460  0018C2  0100               	movlb	0	; () banked
  5461  0018C4  11B6               	iorwf	(ID@res2+1)& (0+255),w,b
  5462  0018C6  A4D8               	btfss	status,2,c
  5463  0018C8  D003               	goto	l8071
  5464                           
  5465                           ; BSR set to: 0
  5466  0018CA  0E00               	movlw	0
  5467  0018CC  0100               	movlb	0	; () banked
  5468  0018CE  6FA8               	movwf	_ID$1145& (0+255),b
  5469  0018D0                     l8071:
  5470                           
  5471                           ; BSR set to: 0
  5472  0018D0  C0A8  F0DC         	movff	_ID$1145,_sensor_outputs+2
  5473  0018D4  0100               	movlb	0	; () banked
  5474  0018D6  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5475                           
  5476                           ;sort.c: 317: }
  5477  0018D8  D0E3               	goto	l8117
  5478  0018DA                     l8073:
  5479                           
  5480                           ; BSR set to: 0
  5481                           ;sort.c: 318: else{
  5482                           ;sort.c: 319: const unsigned char time = (400 / n);
  5483  0018DA  0E01               	movlw	1
  5484  0018DC  0100               	movlb	0	; () banked
  5485  0018DE  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5486  0018E0  0E90               	movlw	144
  5487  0018E2  6F86               	movwf	___awdiv@dividend& (0+255),b
  5488  0018E4  C0BB  F088         	movff	ID@n,___awdiv@divisor
  5489  0018E8  C0BC  F089         	movff	ID@n+1,___awdiv@divisor+1
  5490  0018EC  ECAB  F024         	call	___awdiv	;wreg free
  5491  0018F0  0100               	movlb	0	; () banked
  5492  0018F2  5186               	movf	?___awdiv& (0+255),w,b
  5493  0018F4  0100               	movlb	0	; () banked
  5494  0018F6  6FA7               	movwf	ID@time_1146& (0+255),b
  5495                           
  5496                           ; BSR set to: 0
  5497                           ;sort.c: 320: int res[5];
  5498                           ;sort.c: 322: for(int j = 0; j < 5; j++){
  5499  0018F8  0E00               	movlw	0
  5500  0018FA  0100               	movlb	0	; () banked
  5501  0018FC  6FBA               	movwf	(ID@j+1)& (0+255),b
  5502  0018FE  0E00               	movlw	0
  5503  001900  6FB9               	movwf	ID@j& (0+255),b
  5504                           
  5505                           ; BSR set to: 0
  5506  001902  0100               	movlb	0	; () banked
  5507  001904  BFBA               	btfsc	(ID@j+1)& (0+255),7,b
  5508  001906  D00A               	goto	l860
  5509  001908  0100               	movlb	0	; () banked
  5510  00190A  51BA               	movf	(ID@j+1)& (0+255),w,b
  5511  00190C  E106               	bnz	u6850
  5512  00190E  0E05               	movlw	5
  5513  001910  0100               	movlb	0	; () banked
  5514  001912  5DB9               	subwf	ID@j& (0+255),w,b
  5515  001914  B0D8               	btfsc	status,0,c
  5516  001916  D0C4               	goto	l8117
  5517  001918  D001               	goto	l860
  5518  00191A                     u6850:
  5519                           
  5520                           ; BSR set to: 0
  5521  00191A  D0C2               	goto	l8117
  5522  00191C                     l860:
  5523                           
  5524                           ; BSR set to: 0
  5525                           ;sort.c: 323: LATAbits.LATA3 = 1;
  5526  00191C  8689               	bsf	3977,3,c	;volatile
  5527                           
  5528                           ; BSR set to: 0
  5529                           ;sort.c: 324: for(int i = 0; i<n; i++){
  5530  00191E  0E00               	movlw	0
  5531  001920  0100               	movlb	0	; () banked
  5532  001922  6FAF               	movwf	(ID@i_1149+1)& (0+255),b
  5533  001924  0E00               	movlw	0
  5534  001926  6FAE               	movwf	ID@i_1149& (0+255),b
  5535  001928                     l8083:
  5536                           
  5537                           ; BSR set to: 0
  5538  001928  0100               	movlb	0	; () banked
  5539  00192A  51BB               	movf	ID@n& (0+255),w,b
  5540  00192C  0100               	movlb	0	; () banked
  5541  00192E  5DAE               	subwf	ID@i_1149& (0+255),w,b
  5542  001930  0100               	movlb	0	; () banked
  5543  001932  51AF               	movf	(ID@i_1149+1)& (0+255),w,b
  5544  001934  0A80               	xorlw	128
  5545  001936  0100               	movlb	0	; () banked
  5546  001938  6F9B               	movwf	??_ID& (0+255),b
  5547  00193A  0100               	movlb	0	; () banked
  5548  00193C  51BC               	movf	(ID@n+1)& (0+255),w,b
  5549  00193E  0A80               	xorlw	128
  5550  001940  0100               	movlb	0	; () banked
  5551  001942  599B               	subwfb	??_ID& (0+255),w,b
  5552  001944  B0D8               	btfsc	status,0,c
  5553  001946  D01A               	goto	l863
  5554                           
  5555                           ; BSR set to: 0
  5556                           ;sort.c: 325: delay_ms(time);
  5557                           
  5558                           ; BSR set to: 0
  5559                           
  5560                           ; BSR set to: 0
  5561  001948  0100               	movlb	0	; () banked
  5562  00194A  51A7               	movf	ID@time_1146& (0+255),w,b
  5563  00194C  ECCC  F02C         	call	_delay_ms
  5564                           
  5565                           ;sort.c: 326: readCOND();
  5566  001950  ECFE  F029         	call	_readCOND	;wreg free
  5567                           
  5568                           ;sort.c: 327: res[j] += COND_signal;
  5569  001954  90D8               	bcf	status,0,c
  5570  001956  0100               	movlb	0	; () banked
  5571  001958  35B9               	rlcf	ID@j& (0+255),w,b
  5572  00195A  6ED9               	movwf	fsr2l,c
  5573  00195C  0100               	movlb	0	; () banked
  5574  00195E  35BA               	rlcf	(ID@j+1)& (0+255),w,b
  5575  001960  6EDA               	movwf	fsr2h,c
  5576  001962  0E9D               	movlw	low ID@res
  5577  001964  26D9               	addwf	fsr2l,f,c
  5578  001966  0E00               	movlw	high ID@res
  5579  001968  22DA               	addwfc	fsr2h,f,c
  5580  00196A  0100               	movlb	0	; () banked
  5581  00196C  51DE               	movf	_COND_signal& (0+255),w,b
  5582  00196E  26DE               	addwf	postinc2,f,c
  5583  001970  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5584  001972  22DD               	addwfc	postdec2,f,c
  5585                           
  5586                           ; BSR set to: 0
  5587  001974  0100               	movlb	0	; () banked
  5588  001976  4BAE               	infsnz	ID@i_1149& (0+255),f,b
  5589  001978  2BAF               	incf	(ID@i_1149+1)& (0+255),f,b
  5590  00197A  D7D6               	goto	l8083
  5591  00197C                     l863:
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;sort.c: 328: }
  5595                           ;sort.c: 329: LATAbits.LATA3 = 0;
  5596  00197C  9689               	bcf	3977,3,c	;volatile
  5597                           
  5598                           ; BSR set to: 0
  5599                           ;sort.c: 331: _delay((unsigned long)((200)*(32000000/4000.0)));
  5600  00197E  0E09               	movlw	9
  5601  001980  0100               	movlb	0	; () banked
  5602  001982  6F9C               	movwf	(??_ID+1)& (0+255),b
  5603  001984  0E1E               	movlw	30
  5604  001986  0100               	movlb	0	; () banked
  5605  001988  6F9B               	movwf	??_ID& (0+255),b
  5606  00198A  0EE4               	movlw	228
  5607  00198C                     u9987:
  5608  00198C  2EE8               	decfsz	wreg,f,c
  5609  00198E  D7FE               	bra	u9987
  5610  001990  2F9B               	decfsz	??_ID& (0+255),f,b
  5611  001992  D7FC               	bra	u9987
  5612  001994  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5613  001996  D7FA               	bra	u9987
  5614  001998  F000               	nop	
  5615                           
  5616                           ;sort.c: 334: res[j] = ((res[j] / n) > 0.3) ? 1 : 0;
  5617  00199A  0E9A               	movlw	154
  5618  00199C  0100               	movlb	0	; () banked
  5619  00199E  6F92               	movwf	___ftge@ff1& (0+255),b
  5620  0019A0  0E99               	movlw	153
  5621  0019A2  0100               	movlb	0	; () banked
  5622  0019A4  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5623  0019A6  0E3E               	movlw	62
  5624  0019A8  0100               	movlb	0	; () banked
  5625  0019AA  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5626  0019AC  C0BB  F088         	movff	ID@n,___awdiv@divisor
  5627  0019B0  C0BC  F089         	movff	ID@n+1,___awdiv@divisor+1
  5628  0019B4  90D8               	bcf	status,0,c
  5629  0019B6  0100               	movlb	0	; () banked
  5630  0019B8  35B9               	rlcf	ID@j& (0+255),w,b
  5631  0019BA  6ED9               	movwf	fsr2l,c
  5632  0019BC  0100               	movlb	0	; () banked
  5633  0019BE  35BA               	rlcf	(ID@j+1)& (0+255),w,b
  5634  0019C0  6EDA               	movwf	fsr2h,c
  5635  0019C2  0E9D               	movlw	low ID@res
  5636  0019C4  26D9               	addwf	fsr2l,f,c
  5637  0019C6  0E00               	movlw	high ID@res
  5638  0019C8  22DA               	addwfc	fsr2h,f,c
  5639  0019CA  CFDE F086          	movff	postinc2,___awdiv@dividend
  5640  0019CE  CFDD F087          	movff	postdec2,___awdiv@dividend+1
  5641  0019D2  ECAB  F024         	call	___awdiv	;wreg free
  5642  0019D6  C086  F08E         	movff	?___awdiv,___awtoft@c
  5643  0019DA  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5644  0019DE  EC6D  F02A         	call	___awtoft	;wreg free
  5645  0019E2  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5646  0019E6  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5647  0019EA  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5648  0019EE  EC47  F024         	call	___ftge	;wreg free
  5649  0019F2  0100               	movlb	0	; () banked
  5650  0019F4  B0D8               	btfsc	status,0,c
  5651  0019F6  D002               	goto	u6880
  5652  0019F8  0E01               	movlw	1
  5653  0019FA  D001               	goto	u6890
  5654  0019FC                     u6880:
  5655  0019FC  0E00               	movlw	0
  5656  0019FE                     u6890:
  5657  0019FE  0100               	movlb	0	; () banked
  5658  001A00  6F9B               	movwf	??_ID& (0+255),b
  5659  001A02  6B9C               	clrf	(??_ID+1)& (0+255),b
  5660  001A04  90D8               	bcf	status,0,c
  5661  001A06  0100               	movlb	0	; () banked
  5662  001A08  35B9               	rlcf	ID@j& (0+255),w,b
  5663  001A0A  6ED9               	movwf	fsr2l,c
  5664  001A0C  0100               	movlb	0	; () banked
  5665  001A0E  35BA               	rlcf	(ID@j+1)& (0+255),w,b
  5666  001A10  6EDA               	movwf	fsr2h,c
  5667  001A12  0E9D               	movlw	low ID@res
  5668  001A14  26D9               	addwf	fsr2l,f,c
  5669  001A16  0E00               	movlw	high ID@res
  5670  001A18  22DA               	addwfc	fsr2h,f,c
  5671  001A1A  C09B  FFDE         	movff	??_ID,postinc2
  5672  001A1E  C09C  FFDD         	movff	??_ID+1,postdec2
  5673                           
  5674                           ; BSR set to: 0
  5675                           ;sort.c: 335: if(j==0){
  5676  001A22  0100               	movlb	0	; () banked
  5677  001A24  51B9               	movf	ID@j& (0+255),w,b
  5678  001A26  0100               	movlb	0	; () banked
  5679  001A28  11BA               	iorwf	(ID@j+1)& (0+255),w,b
  5680  001A2A  A4D8               	btfss	status,2,c
  5681  001A2C  D010               	goto	l8103
  5682                           
  5683                           ; BSR set to: 0
  5684                           ;sort.c: 336: sensor_outputs[1] = res[j];
  5685  001A2E  90D8               	bcf	status,0,c
  5686  001A30  0100               	movlb	0	; () banked
  5687  001A32  35B9               	rlcf	ID@j& (0+255),w,b
  5688  001A34  6ED9               	movwf	fsr2l,c
  5689  001A36  0100               	movlb	0	; () banked
  5690  001A38  35BA               	rlcf	(ID@j+1)& (0+255),w,b
  5691  001A3A  6EDA               	movwf	fsr2h,c
  5692  001A3C  0E9D               	movlw	low ID@res
  5693  001A3E  26D9               	addwf	fsr2l,f,c
  5694  001A40  0E00               	movlw	high ID@res
  5695  001A42  22DA               	addwfc	fsr2h,f,c
  5696  001A44  CFDE F0DC          	movff	postinc2,_sensor_outputs+2
  5697  001A48  CFDD F0DD          	movff	postdec2,_sensor_outputs+3
  5698                           
  5699                           ;sort.c: 337: }
  5700  001A4C  D01F               	goto	l8113
  5701  001A4E                     l8103:
  5702                           
  5703                           ; BSR set to: 0
  5704                           ;sort.c: 338: else{
  5705                           ;sort.c: 339: sensor_outputs[1] = sensor_outputs[1] || res[j];
  5706  001A4E  0E01               	movlw	1
  5707  001A50  0100               	movlb	0	; () banked
  5708  001A52  6FA9               	movwf	_ID$1150& (0+255),b
  5709                           
  5710                           ; BSR set to: 0
  5711  001A54  0100               	movlb	0	; () banked
  5712  001A56  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5713  001A58  0100               	movlb	0	; () banked
  5714  001A5A  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5715  001A5C  A4D8               	btfss	status,2,c
  5716  001A5E  D012               	goto	l8111
  5717                           
  5718                           ; BSR set to: 0
  5719  001A60  90D8               	bcf	status,0,c
  5720  001A62  0100               	movlb	0	; () banked
  5721  001A64  35B9               	rlcf	ID@j& (0+255),w,b
  5722  001A66  6ED9               	movwf	fsr2l,c
  5723  001A68  0100               	movlb	0	; () banked
  5724  001A6A  35BA               	rlcf	(ID@j+1)& (0+255),w,b
  5725  001A6C  6EDA               	movwf	fsr2h,c
  5726  001A6E  0E9D               	movlw	low ID@res
  5727  001A70  26D9               	addwf	fsr2l,f,c
  5728  001A72  0E00               	movlw	high ID@res
  5729  001A74  22DA               	addwfc	fsr2h,f,c
  5730  001A76  50DE               	movf	postinc2,w,c
  5731  001A78  10DE               	iorwf	postinc2,w,c
  5732  001A7A  A4D8               	btfss	status,2,c
  5733  001A7C  D003               	goto	l8111
  5734                           
  5735                           ; BSR set to: 0
  5736  001A7E  0E00               	movlw	0
  5737  001A80  0100               	movlb	0	; () banked
  5738  001A82  6FA9               	movwf	_ID$1150& (0+255),b
  5739  001A84                     l8111:
  5740                           
  5741                           ; BSR set to: 0
  5742  001A84  C0A9  F0DC         	movff	_ID$1150,_sensor_outputs+2
  5743  001A88  0100               	movlb	0	; () banked
  5744  001A8A  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5745  001A8C                     l8113:
  5746                           
  5747                           ; BSR set to: 0
  5748  001A8C  0100               	movlb	0	; () banked
  5749  001A8E  4BB9               	infsnz	ID@j& (0+255),f,b
  5750  001A90  2BBA               	incf	(ID@j+1)& (0+255),f,b
  5751                           
  5752                           ; BSR set to: 0
  5753  001A92  0100               	movlb	0	; () banked
  5754  001A94  BFBA               	btfsc	(ID@j+1)& (0+255),7,b
  5755  001A96  D742               	goto	l860
  5756  001A98  0100               	movlb	0	; () banked
  5757  001A9A  51BA               	movf	(ID@j+1)& (0+255),w,b
  5758  001A9C  E101               	bnz	l8117
  5759  001A9E  D737               	goto	L5
  5760  001AA0                     l8117:
  5761                           
  5762                           ; BSR set to: 0
  5763                           ;sort.c: 340: }
  5764                           ;sort.c: 341: }
  5765                           ;sort.c: 342: }
  5766                           ;sort.c: 350: if(!sensor_outputs[0]){
  5767  001AA0  0100               	movlb	0	; () banked
  5768  001AA2  51DA               	movf	_sensor_outputs& (0+255),w,b
  5769  001AA4  0100               	movlb	0	; () banked
  5770  001AA6  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5771  001AA8  A4D8               	btfss	status,2,c
  5772  001AAA  D016               	goto	l8129
  5773                           
  5774                           ; BSR set to: 0
  5775                           ;sort.c: 351: if(!sensor_outputs[1]){
  5776  001AAC  0100               	movlb	0	; () banked
  5777  001AAE  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5778  001AB0  0100               	movlb	0	; () banked
  5779  001AB2  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5780  001AB4  A4D8               	btfss	status,2,c
  5781  001AB6  D008               	goto	l8125
  5782                           
  5783                           ; BSR set to: 0
  5784                           ;sort.c: 352: count_pop_no_tab++;
  5785  001AB8  0101               	movlb	1	; () banked
  5786  001ABA  4B27               	infsnz	_count_pop_no_tab& (0+255),f,b
  5787  001ABC  2B28               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5788                           
  5789                           ; BSR set to: 1
  5790                           ;sort.c: 353: cur_can = 0;
  5791  001ABE  0E00               	movlw	0
  5792  001AC0  0101               	movlb	1	; () banked
  5793  001AC2  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5794  001AC4  0E00               	movlw	0
  5795  001AC6  D007               	goto	L6
  5796  001AC8                     l8125:
  5797                           
  5798                           ;sort.c: 355: else{
  5799                           ;sort.c: 356: count_pop_w_tab++;
  5800  001AC8  0101               	movlb	1	; () banked
  5801  001ACA  4B29               	infsnz	_count_pop_w_tab& (0+255),f,b
  5802  001ACC  2B2A               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5803                           
  5804                           ; BSR set to: 1
  5805                           ;sort.c: 357: cur_can = 1;
  5806  001ACE  0E00               	movlw	0
  5807  001AD0  0101               	movlb	1	; () banked
  5808  001AD2  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5809  001AD4  0E01               	movlw	1
  5810  001AD6                     L6:
  5811  001AD6  6F2B               	movwf	_cur_can& (0+255),b
  5812  001AD8                     l8129:
  5813                           
  5814                           ;sort.c: 358: }
  5815                           ;sort.c: 359: }
  5816                           ;sort.c: 360: if(sensor_outputs[0]){
  5817  001AD8  0100               	movlb	0	; () banked
  5818  001ADA  51DA               	movf	_sensor_outputs& (0+255),w,b
  5819  001ADC  0100               	movlb	0	; () banked
  5820  001ADE  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5821  001AE0  B4D8               	btfsc	status,2,c
  5822  001AE2  D016               	goto	l8141
  5823                           
  5824                           ; BSR set to: 0
  5825                           ;sort.c: 361: if(!sensor_outputs[1]){
  5826  001AE4  0100               	movlb	0	; () banked
  5827  001AE6  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5828  001AE8  0100               	movlb	0	; () banked
  5829  001AEA  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5830  001AEC  A4D8               	btfss	status,2,c
  5831  001AEE  D008               	goto	l8137
  5832                           
  5833                           ; BSR set to: 0
  5834                           ;sort.c: 362: count_can_w_lab++;
  5835  001AF0  0101               	movlb	1	; () banked
  5836  001AF2  4B25               	infsnz	_count_can_w_lab& (0+255),f,b
  5837  001AF4  2B26               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5838                           
  5839                           ; BSR set to: 1
  5840                           ;sort.c: 363: cur_can = 2;
  5841  001AF6  0E00               	movlw	0
  5842  001AF8  0101               	movlb	1	; () banked
  5843  001AFA  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5844  001AFC  0E02               	movlw	2
  5845  001AFE  D007               	goto	L7
  5846  001B00                     l8137:
  5847                           
  5848                           ;sort.c: 365: else{
  5849                           ;sort.c: 366: count_can_no_lab++;
  5850  001B00  0101               	movlb	1	; () banked
  5851  001B02  4B23               	infsnz	_count_can_no_lab& (0+255),f,b
  5852  001B04  2B24               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5853                           
  5854                           ; BSR set to: 1
  5855                           ;sort.c: 367: cur_can = 3;
  5856  001B06  0E00               	movlw	0
  5857  001B08  0101               	movlb	1	; () banked
  5858  001B0A  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5859  001B0C  0E03               	movlw	3
  5860  001B0E                     L7:
  5861  001B0E  6F2B               	movwf	_cur_can& (0+255),b
  5862  001B10                     l8141:
  5863  001B10  0101               	movlb	1	; () banked
  5864  001B12  5135               	movf	_f_can_distributed& (0+255),w,b
  5865  001B14  0101               	movlb	1	; () banked
  5866  001B16  1136               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5867  001B18  B4D8               	btfsc	status,2,c
  5868  001B1A  D7FA               	goto	l8141
  5869                           
  5870                           ; BSR set to: 1
  5871                           ;sort.c: 373: for(int i=0;i<10000;i++)
  5872                           
  5873                           ; BSR set to: 1
  5874  001B1C  0E00               	movlw	0
  5875  001B1E  0100               	movlb	0	; () banked
  5876  001B20  6FB1               	movwf	(ID@i_1151+1)& (0+255),b
  5877  001B22  0E00               	movlw	0
  5878  001B24  6FB0               	movwf	ID@i_1151& (0+255),b
  5879  001B26                     l8145:
  5880                           
  5881                           ; BSR set to: 0
  5882  001B26  0100               	movlb	0	; () banked
  5883  001B28  BFB1               	btfsc	(ID@i_1151+1)& (0+255),7,b
  5884  001B2A  D008               	goto	l877
  5885  001B2C  0E10               	movlw	16
  5886  001B2E  0100               	movlb	0	; () banked
  5887  001B30  5DB0               	subwf	ID@i_1151& (0+255),w,b
  5888  001B32  0E27               	movlw	39
  5889  001B34  0100               	movlb	0	; () banked
  5890  001B36  59B1               	subwfb	(ID@i_1151+1)& (0+255),w,b
  5891  001B38  B0D8               	btfsc	status,0,c
  5892  001B3A  D00D               	goto	l878
  5893  001B3C                     l877:
  5894                           
  5895                           ; BSR set to: 0
  5896                           ;sort.c: 374: {
  5897                           ;sort.c: 375: LATCbits.LATC0 = 1;
  5898  001B3C  808B               	bsf	3979,0,c	;volatile
  5899                           
  5900                           ; BSR set to: 0
  5901                           ;sort.c: 376: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5902  001B3E  0E1A               	movlw	26
  5903  001B40                     u9997:
  5904  001B40  2EE8               	decfsz	wreg,f,c
  5905  001B42  D7FE               	bra	u9997
  5906  001B44  D000               	nop2	
  5907                           
  5908                           ;sort.c: 377: LATCbits.LATC0 = 0;
  5909  001B46  908B               	bcf	3979,0,c	;volatile
  5910                           
  5911                           ;sort.c: 378: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5912  001B48  0EF0               	movlw	240
  5913  001B4A                     u10007:
  5914  001B4A  2EE8               	decfsz	wreg,f,c
  5915  001B4C  D7FE               	bra	u10007
  5916  001B4E  0100               	movlb	0	; () banked
  5917  001B50  4BB0               	infsnz	ID@i_1151& (0+255),f,b
  5918  001B52  2BB1               	incf	(ID@i_1151+1)& (0+255),f,b
  5919  001B54  D7E8               	goto	l8145
  5920  001B56                     l878:
  5921                           
  5922                           ; BSR set to: 0
  5923                           ;sort.c: 379: }
  5924                           ;sort.c: 381: LATCbits.LATC0 = 0;
  5925  001B56  908B               	bcf	3979,0,c	;volatile
  5926                           
  5927                           ; BSR set to: 0
  5928                           ;sort.c: 383: f_can_coming_to_distribution = 1;
  5929  001B58  0E00               	movlw	0
  5930  001B5A  0101               	movlb	1	; () banked
  5931  001B5C  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5932  001B5E  0E01               	movlw	1
  5933  001B60  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5934                           
  5935                           ; BSR set to: 1
  5936                           ;sort.c: 384: _delay((unsigned long)((750)*(32000000/4000.0)));
  5937  001B62  0E1F               	movlw	31
  5938  001B64  0100               	movlb	0	; () banked
  5939  001B66  6F9C               	movwf	(??_ID+1)& (0+255),b
  5940  001B68  0E71               	movlw	113
  5941  001B6A  0100               	movlb	0	; () banked
  5942  001B6C  6F9B               	movwf	??_ID& (0+255),b
  5943  001B6E  0E1E               	movlw	30
  5944  001B70                     u10017:
  5945  001B70  2EE8               	decfsz	wreg,f,c
  5946  001B72  D7FE               	bra	u10017
  5947  001B74  2F9B               	decfsz	??_ID& (0+255),f,b
  5948  001B76  D7FC               	bra	u10017
  5949  001B78  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5950  001B7A  D7FA               	bra	u10017
  5951  001B7C  F000               	nop	
  5952                           
  5953                           ;sort.c: 385: LATCbits.LATC0 = 1;
  5954  001B7E  808B               	bsf	3979,0,c	;volatile
  5955                           
  5956                           ;sort.c: 388: if(!f_lastCan){
  5957  001B80  0100               	movlb	0	; () banked
  5958  001B82  51EA               	movf	_f_lastCan& (0+255),w,b
  5959  001B84  0100               	movlb	0	; () banked
  5960  001B86  11EB               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5961  001B88  A4D8               	btfss	status,2,c
  5962  001B8A  D032               	goto	l8177
  5963                           
  5964                           ; BSR set to: 0
  5965                           ;sort.c: 389: for(int i=0; i<46; i++){
  5966  001B8C  0E00               	movlw	0
  5967  001B8E  0100               	movlb	0	; () banked
  5968  001B90  6FB8               	movwf	(ID@i_1152+1)& (0+255),b
  5969  001B92  0E00               	movlw	0
  5970  001B94  6FB7               	movwf	ID@i_1152& (0+255),b
  5971                           
  5972                           ; BSR set to: 0
  5973  001B96  0100               	movlb	0	; () banked
  5974  001B98  BFB8               	btfsc	(ID@i_1152+1)& (0+255),7,b
  5975  001B9A  D008               	goto	l8169
  5976  001B9C  0100               	movlb	0	; () banked
  5977  001B9E  51B8               	movf	(ID@i_1152+1)& (0+255),w,b
  5978  001BA0  E126               	bnz	l881
  5979  001BA2  0E2E               	movlw	46
  5980  001BA4  0100               	movlb	0	; () banked
  5981  001BA6  5DB7               	subwf	ID@i_1152& (0+255),w,b
  5982  001BA8  B0D8               	btfsc	status,0,c
  5983  001BAA  D021               	goto	l881
  5984  001BAC                     l8169:
  5985                           
  5986                           ; BSR set to: 0
  5987                           ;sort.c: 390: LATBbits.LATB2 = !LATBbits.LATB2;
  5988  001BAC  B48A               	btfsc	3978,2,c	;volatile
  5989  001BAE  D004               	goto	u7030
  5990  001BB0  0100               	movlb	0	; () banked
  5991  001BB2  6B9B               	clrf	??_ID& (0+255),b
  5992  001BB4  2B9B               	incf	??_ID& (0+255),f,b
  5993  001BB6  D002               	goto	u7048
  5994  001BB8                     u7030:
  5995  001BB8  0100               	movlb	0	; () banked
  5996  001BBA  6B9B               	clrf	??_ID& (0+255),b
  5997  001BBC                     u7048:
  5998  001BBC  0100               	movlb	0	; () banked
  5999  001BBE  479B               	rlncf	??_ID& (0+255),f,b
  6000  001BC0  479B               	rlncf	??_ID& (0+255),f,b
  6001  001BC2  508A               	movf	3978,w,c	;volatile
  6002  001BC4  0100               	movlb	0	; () banked
  6003  001BC6  199B               	xorwf	??_ID& (0+255),w,b
  6004  001BC8  0BFB               	andlw	-5
  6005  001BCA  199B               	xorwf	??_ID& (0+255),w,b
  6006  001BCC  6E8A               	movwf	3978,c	;volatile
  6007                           
  6008                           ; BSR set to: 0
  6009                           ;sort.c: 391: delay_ms(45-i);
  6010  001BCE  0100               	movlb	0	; () banked
  6011  001BD0  51B7               	movf	ID@i_1152& (0+255),w,b
  6012  001BD2  0800               	sublw	0
  6013  001BD4  0F2D               	addlw	45
  6014  001BD6  ECCC  F02C         	call	_delay_ms
  6015  001BDA  0100               	movlb	0	; () banked
  6016  001BDC  4BB7               	infsnz	ID@i_1152& (0+255),f,b
  6017  001BDE  2BB8               	incf	(ID@i_1152+1)& (0+255),f,b
  6018                           
  6019                           ; BSR set to: 0
  6020  001BE0  0100               	movlb	0	; () banked
  6021  001BE2  BFB8               	btfsc	(ID@i_1152+1)& (0+255),7,b
  6022  001BE4  D7E3               	goto	l8169
  6023  001BE6  0100               	movlb	0	; () banked
  6024  001BE8  51B8               	movf	(ID@i_1152+1)& (0+255),w,b
  6025  001BEA  E101               	bnz	u7050
  6026  001BEC  D7DA               	goto	L8
  6027  001BEE                     u7050:
  6028  001BEE                     l881:
  6029                           
  6030                           ; BSR set to: 0
  6031                           ;sort.c: 392: }
  6032                           ;sort.c: 393: LATBbits.LATB2 = 1;
  6033  001BEE  848A               	bsf	3978,2,c	;volatile
  6034  001BF0                     l8177:
  6035                           
  6036                           ; BSR set to: 0
  6037                           ;sort.c: 394: }
  6038                           ;sort.c: 396: f_can_coming_to_ID = 0;
  6039  001BF0  0E00               	movlw	0
  6040  001BF2  0101               	movlb	1	; () banked
  6041  001BF4  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  6042  001BF6  0E00               	movlw	0
  6043  001BF8  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  6044  001BFA  0012               	return	
  6045  001BFC                     __end_of_ID:
  6046                           	opt stack 0
  6047                           tblptru	equ	0xFF8
  6048                           tblptrh	equ	0xFF7
  6049                           tblptrl	equ	0xFF6
  6050                           tablat	equ	0xFF5
  6051                           prodh	equ	0xFF4
  6052                           prodl	equ	0xFF3
  6053                           postinc0	equ	0xFEE
  6054                           wreg	equ	0xFE8
  6055                           postdec1	equ	0xFE5
  6056                           fsr1l	equ	0xFE1
  6057                           indf2	equ	0xFDF
  6058                           postinc2	equ	0xFDE
  6059                           postdec2	equ	0xFDD
  6060                           fsr2h	equ	0xFDA
  6061                           fsr2l	equ	0xFD9
  6062                           status	equ	0xFD8
  6063                           
  6064 ;; *************** function _readCOND *****************
  6065 ;; Defined at:
  6066 ;;		line 35 in file "ADCFunctionality.c"
  6067 ;; Parameters:    Size  Location     Type
  6068 ;;		None
  6069 ;; Auto vars:     Size  Location     Type
  6070 ;;  res             2    4[BANK0 ] int 
  6071 ;; Return value:  Size  Location     Type
  6072 ;;                  1    wreg      void 
  6073 ;; Registers used:
  6074 ;;		wreg, status,2, status,0, cstack
  6075 ;; Tracked objects:
  6076 ;;		On entry : 0/0
  6077 ;;		On exit  : 0/0
  6078 ;;		Unchanged: 0/0
  6079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6081 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6082 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6083 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6084 ;;Total ram usage:        4 bytes
  6085 ;; Hardware stack levels used:    1
  6086 ;; Hardware stack levels required when called:    8
  6087 ;; This function calls:
  6088 ;;		_readADC
  6089 ;; This function is called by:
  6090 ;;		_ID
  6091 ;; This function uses a non-reentrant model
  6092 ;;
  6093                           
  6094                           	psect	text9
  6095  0053FC                     __ptext9:
  6096                           	opt stack 0
  6097  0053FC                     _readCOND:
  6098                           	opt stack 20
  6099                           
  6100                           ;ADCFunctionality.c: 36: readADC(2);
  6101                           
  6102                           ; BSR set to: 1
  6103                           ;incstack = 0
  6104  0053FC  0E02               	movlw	2
  6105  0053FE  ECA1  F02C         	call	_readADC
  6106                           
  6107                           ;ADCFunctionality.c: 37: int res = ADRESH<<8 | ADRESL;
  6108  005402  50C3               	movf	4035,w,c	;volatile
  6109  005404  CFC4 F082          	movff	4036,??_readCOND	;volatile
  6110  005408  0100               	movlb	0	; () banked
  6111  00540A  6B83               	clrf	(??_readCOND+1)& (0+255),b
  6112  00540C  C082  F083         	movff	??_readCOND,??_readCOND+1
  6113  005410  0100               	movlb	0	; () banked
  6114  005412  6B82               	clrf	??_readCOND& (0+255),b
  6115  005414  0100               	movlb	0	; () banked
  6116  005416  1182               	iorwf	??_readCOND& (0+255),w,b
  6117  005418  0100               	movlb	0	; () banked
  6118  00541A  6F84               	movwf	readCOND@res& (0+255),b
  6119  00541C  0100               	movlb	0	; () banked
  6120  00541E  5183               	movf	(??_readCOND+1)& (0+255),w,b
  6121  005420  0100               	movlb	0	; () banked
  6122  005422  6F85               	movwf	(readCOND@res+1)& (0+255),b
  6123                           
  6124                           ; BSR set to: 0
  6125                           ;ADCFunctionality.c: 38: COND_signal = (res > 300) ? 1 : 0;
  6126  005424  0100               	movlb	0	; () banked
  6127  005426  BF85               	btfsc	(readCOND@res+1)& (0+255),7,b
  6128  005428  D00A               	goto	u5860
  6129  00542A  0E2D               	movlw	45
  6130  00542C  0100               	movlb	0	; () banked
  6131  00542E  5D84               	subwf	readCOND@res& (0+255),w,b
  6132  005430  0E01               	movlw	1
  6133  005432  0100               	movlb	0	; () banked
  6134  005434  5985               	subwfb	(readCOND@res+1)& (0+255),w,b
  6135  005436  A0D8               	btfss	status,0,c
  6136  005438  D002               	goto	u5860
  6137  00543A  0E01               	movlw	1
  6138  00543C  D001               	goto	u5870
  6139  00543E                     u5860:
  6140  00543E  0E00               	movlw	0
  6141  005440                     u5870:
  6142  005440  0100               	movlb	0	; () banked
  6143  005442  6FDE               	movwf	_COND_signal& (0+255),b
  6144  005444  6BDF               	clrf	(_COND_signal+1)& (0+255),b
  6145                           
  6146                           ; BSR set to: 0
  6147  005446  0012               	return		;funcret
  6148  005448                     __end_of_readCOND:
  6149                           	opt stack 0
  6150                           tblptru	equ	0xFF8
  6151                           tblptrh	equ	0xFF7
  6152                           tblptrl	equ	0xFF6
  6153                           tablat	equ	0xFF5
  6154                           prodh	equ	0xFF4
  6155                           prodl	equ	0xFF3
  6156                           postinc0	equ	0xFEE
  6157                           wreg	equ	0xFE8
  6158                           postdec1	equ	0xFE5
  6159                           fsr1l	equ	0xFE1
  6160                           indf2	equ	0xFDF
  6161                           postinc2	equ	0xFDE
  6162                           postdec2	equ	0xFDD
  6163                           fsr2h	equ	0xFDA
  6164                           fsr2l	equ	0xFD9
  6165                           status	equ	0xFD8
  6166                           
  6167 ;; *************** function _delay_ms *****************
  6168 ;; Defined at:
  6169 ;;		line 690 in file "sort.c"
  6170 ;; Parameters:    Size  Location     Type
  6171 ;;  milliseconds    1    wreg     unsigned char 
  6172 ;; Auto vars:     Size  Location     Type
  6173 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  6174 ;; Return value:  Size  Location     Type
  6175 ;;                  1    wreg      void 
  6176 ;; Registers used:
  6177 ;;		wreg, status,2, status,0, cstack
  6178 ;; Tracked objects:
  6179 ;;		On entry : 0/0
  6180 ;;		On exit  : 0/0
  6181 ;;		Unchanged: 0/0
  6182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6184 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6185 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6186 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6187 ;;Total ram usage:        2 bytes
  6188 ;; Hardware stack levels used:    1
  6189 ;; Hardware stack levels required when called:    7
  6190 ;; This function calls:
  6191 ;;		Nothing
  6192 ;; This function is called by:
  6193 ;;		_Loading
  6194 ;;		_ID
  6195 ;; This function uses a non-reentrant model
  6196 ;;
  6197                           
  6198                           	psect	text10
  6199  005998                     __ptext10:
  6200                           	opt stack 0
  6201  005998                     _delay_ms:
  6202                           	opt stack 21
  6203                           
  6204                           ; BSR set to: 0
  6205                           ;incstack = 0
  6206                           ;delay_ms@milliseconds stored from wreg
  6207  005998  0100               	movlb	0	; () banked
  6208  00599A  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  6209                           
  6210                           ;sort.c: 691: while(milliseconds > 0)
  6211  00599C  D00B               	goto	l7377
  6212  00599E                     l7373:
  6213                           
  6214                           ;sort.c: 692: {
  6215                           ;sort.c: 693: milliseconds--;
  6216  00599E  0100               	movlb	0	; () banked
  6217  0059A0  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  6218                           
  6219                           ; BSR set to: 0
  6220                           ;sort.c: 694: _delay((unsigned long)((990)*(32000000/4000000.0)));
  6221  0059A2  0E0B               	movlw	11
  6222  0059A4  0100               	movlb	0	; () banked
  6223  0059A6  6F80               	movwf	??_delay_ms& (0+255),b
  6224  0059A8  0E47               	movlw	71
  6225  0059AA                     u10027:
  6226  0059AA  2EE8               	decfsz	wreg,f,c
  6227  0059AC  D7FE               	bra	u10027
  6228  0059AE  2F80               	decfsz	??_delay_ms& (0+255),f,b
  6229  0059B0  D7FC               	bra	u10027
  6230  0059B2  D000               	nop2	
  6231  0059B4                     l7377:
  6232  0059B4  0100               	movlb	0	; () banked
  6233  0059B6  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  6234  0059B8  0100               	movlb	0	; () banked
  6235  0059BA  B4D8               	btfsc	status,2,c
  6236  0059BC  0012               	return	
  6237  0059BE  D7EF               	goto	l7373
  6238  0059C0                     __end_of_delay_ms:
  6239                           	opt stack 0
  6240                           tblptru	equ	0xFF8
  6241                           tblptrh	equ	0xFF7
  6242                           tblptrl	equ	0xFF6
  6243                           tablat	equ	0xFF5
  6244                           prodh	equ	0xFF4
  6245                           prodl	equ	0xFF3
  6246                           postinc0	equ	0xFEE
  6247                           wreg	equ	0xFE8
  6248                           postdec1	equ	0xFE5
  6249                           fsr1l	equ	0xFE1
  6250                           indf2	equ	0xFDF
  6251                           postinc2	equ	0xFDE
  6252                           postdec2	equ	0xFDD
  6253                           fsr2h	equ	0xFDA
  6254                           fsr2l	equ	0xFD9
  6255                           status	equ	0xFD8
  6256                           
  6257 ;; *************** function ___ftge *****************
  6258 ;; Defined at:
  6259 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  6260 ;; Parameters:    Size  Location     Type
  6261 ;;  ff1             3   18[BANK0 ] float 
  6262 ;;  ff2             3   21[BANK0 ] float 
  6263 ;; Auto vars:     Size  Location     Type
  6264 ;;		None
  6265 ;; Return value:  Size  Location     Type
  6266 ;;		None               void
  6267 ;; Registers used:
  6268 ;;		wreg, status,2, status,0
  6269 ;; Tracked objects:
  6270 ;;		On entry : 0/0
  6271 ;;		On exit  : 0/0
  6272 ;;		Unchanged: 0/0
  6273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6274 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6276 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6277 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6278 ;;Total ram usage:        9 bytes
  6279 ;; Hardware stack levels used:    1
  6280 ;; Hardware stack levels required when called:    7
  6281 ;; This function calls:
  6282 ;;		Nothing
  6283 ;; This function is called by:
  6284 ;;		_ID
  6285 ;; This function uses a non-reentrant model
  6286 ;;
  6287                           
  6288                           	psect	text11
  6289  00488E                     __ptext11:
  6290                           	opt stack 0
  6291  00488E                     ___ftge:
  6292                           	opt stack 21
  6293                           
  6294                           ; BSR set to: 0
  6295                           ;incstack = 0
  6296  00488E  0100               	movlb	0	; () banked
  6297  004890  AF94               	btfss	(___ftge@ff1+2)& (0+255),7,b
  6298  004892  D01D               	goto	l7495
  6299                           
  6300                           ; BSR set to: 0
  6301  004894  C092  F098         	movff	___ftge@ff1,??___ftge
  6302  004898  C093  F099         	movff	___ftge@ff1+1,??___ftge+1
  6303  00489C  C094  F09A         	movff	___ftge@ff1+2,??___ftge+2
  6304  0048A0  0100               	movlb	0	; () banked
  6305  0048A2  1F98               	comf	??___ftge& (0+255),f,b
  6306  0048A4  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6307  0048A6  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6308  0048A8  2B98               	incf	??___ftge& (0+255),f,b
  6309  0048AA  0E00               	movlw	0
  6310  0048AC  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6311  0048AE  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6312  0048B0  0E00               	movlw	0
  6313  0048B2  0100               	movlb	0	; () banked
  6314  0048B4  2598               	addwf	??___ftge& (0+255),w,b
  6315  0048B6  0100               	movlb	0	; () banked
  6316  0048B8  6F92               	movwf	___ftge@ff1& (0+255),b
  6317  0048BA  0E00               	movlw	0
  6318  0048BC  0100               	movlb	0	; () banked
  6319  0048BE  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6320  0048C0  0100               	movlb	0	; () banked
  6321  0048C2  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  6322  0048C4  0E80               	movlw	128
  6323  0048C6  0100               	movlb	0	; () banked
  6324  0048C8  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6325  0048CA  0100               	movlb	0	; () banked
  6326  0048CC  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  6327  0048CE                     l7495:
  6328                           
  6329                           ; BSR set to: 0
  6330  0048CE  0100               	movlb	0	; () banked
  6331  0048D0  AF97               	btfss	(___ftge@ff2+2)& (0+255),7,b
  6332  0048D2  D01D               	goto	l7499
  6333                           
  6334                           ; BSR set to: 0
  6335  0048D4  C095  F098         	movff	___ftge@ff2,??___ftge
  6336  0048D8  C096  F099         	movff	___ftge@ff2+1,??___ftge+1
  6337  0048DC  C097  F09A         	movff	___ftge@ff2+2,??___ftge+2
  6338  0048E0  0100               	movlb	0	; () banked
  6339  0048E2  1F98               	comf	??___ftge& (0+255),f,b
  6340  0048E4  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6341  0048E6  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6342  0048E8  2B98               	incf	??___ftge& (0+255),f,b
  6343  0048EA  0E00               	movlw	0
  6344  0048EC  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6345  0048EE  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6346  0048F0  0E00               	movlw	0
  6347  0048F2  0100               	movlb	0	; () banked
  6348  0048F4  2598               	addwf	??___ftge& (0+255),w,b
  6349  0048F6  0100               	movlb	0	; () banked
  6350  0048F8  6F95               	movwf	___ftge@ff2& (0+255),b
  6351  0048FA  0E00               	movlw	0
  6352  0048FC  0100               	movlb	0	; () banked
  6353  0048FE  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6354  004900  0100               	movlb	0	; () banked
  6355  004902  6F96               	movwf	(___ftge@ff2+1)& (0+255),b
  6356  004904  0E80               	movlw	128
  6357  004906  0100               	movlb	0	; () banked
  6358  004908  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6359  00490A  0100               	movlb	0	; () banked
  6360  00490C  6F97               	movwf	(___ftge@ff2+2)& (0+255),b
  6361  00490E                     l7499:
  6362                           
  6363                           ; BSR set to: 0
  6364  00490E  0E00               	movlw	0
  6365  004910  0100               	movlb	0	; () banked
  6366  004912  1B92               	xorwf	___ftge@ff1& (0+255),f,b
  6367  004914  0E00               	movlw	0
  6368  004916  0100               	movlb	0	; () banked
  6369  004918  1B93               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  6370  00491A  0E80               	movlw	128
  6371  00491C  0100               	movlb	0	; () banked
  6372  00491E  1B94               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  6373                           
  6374                           ; BSR set to: 0
  6375  004920  0E00               	movlw	0
  6376  004922  0100               	movlb	0	; () banked
  6377  004924  1B95               	xorwf	___ftge@ff2& (0+255),f,b
  6378  004926  0E00               	movlw	0
  6379  004928  0100               	movlb	0	; () banked
  6380  00492A  1B96               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  6381  00492C  0E80               	movlw	128
  6382  00492E  0100               	movlb	0	; () banked
  6383  004930  1B97               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  6384  004932  0100               	movlb	0	; () banked
  6385  004934  5195               	movf	___ftge@ff2& (0+255),w,b
  6386  004936  0100               	movlb	0	; () banked
  6387  004938  5D92               	subwf	___ftge@ff1& (0+255),w,b
  6388  00493A  0100               	movlb	0	; () banked
  6389  00493C  5196               	movf	(___ftge@ff2+1)& (0+255),w,b
  6390  00493E  0100               	movlb	0	; () banked
  6391  004940  5993               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  6392  004942  0100               	movlb	0	; () banked
  6393  004944  5197               	movf	(___ftge@ff2+2)& (0+255),w,b
  6394  004946  0100               	movlb	0	; () banked
  6395  004948  5994               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  6396  00494A  B0D8               	btfsc	status,0,c
  6397  00494C  D002               	goto	l7505
  6398                           
  6399                           ; BSR set to: 0
  6400  00494E  90D8               	bcf	status,0,c
  6401  004950  0012               	return	
  6402  004952                     l7505:
  6403                           
  6404                           ; BSR set to: 0
  6405  004952  80D8               	bsf	status,0,c
  6406                           
  6407                           ; BSR set to: 0
  6408  004954  0012               	return	
  6409  004956                     __end_of___ftge:
  6410                           	opt stack 0
  6411                           tblptru	equ	0xFF8
  6412                           tblptrh	equ	0xFF7
  6413                           tblptrl	equ	0xFF6
  6414                           tablat	equ	0xFF5
  6415                           prodh	equ	0xFF4
  6416                           prodl	equ	0xFF3
  6417                           postinc0	equ	0xFEE
  6418                           wreg	equ	0xFE8
  6419                           postdec1	equ	0xFE5
  6420                           fsr1l	equ	0xFE1
  6421                           indf2	equ	0xFDF
  6422                           postinc2	equ	0xFDE
  6423                           postdec2	equ	0xFDD
  6424                           fsr2h	equ	0xFDA
  6425                           fsr2l	equ	0xFD9
  6426                           status	equ	0xFD8
  6427                           
  6428 ;; *************** function ___awtoft *****************
  6429 ;; Defined at:
  6430 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  6431 ;; Parameters:    Size  Location     Type
  6432 ;;  c               2   14[BANK0 ] int 
  6433 ;; Auto vars:     Size  Location     Type
  6434 ;;  sign            1   17[BANK0 ] unsigned char 
  6435 ;; Return value:  Size  Location     Type
  6436 ;;                  3   14[BANK0 ] float 
  6437 ;; Registers used:
  6438 ;;		wreg, status,2, status,0, cstack
  6439 ;; Tracked objects:
  6440 ;;		On entry : 0/0
  6441 ;;		On exit  : 0/0
  6442 ;;		Unchanged: 0/0
  6443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6444 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6445 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6447 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6448 ;;Total ram usage:        4 bytes
  6449 ;; Hardware stack levels used:    1
  6450 ;; Hardware stack levels required when called:    8
  6451 ;; This function calls:
  6452 ;;		___ftpack
  6453 ;; This function is called by:
  6454 ;;		_ID
  6455 ;; This function uses a non-reentrant model
  6456 ;;
  6457                           
  6458                           	psect	text12
  6459  0054DA                     __ptext12:
  6460                           	opt stack 0
  6461  0054DA                     ___awtoft:
  6462                           	opt stack 20
  6463                           
  6464                           ; BSR set to: 0
  6465                           ;incstack = 0
  6466  0054DA  0E00               	movlw	0
  6467  0054DC  0100               	movlb	0	; () banked
  6468  0054DE  6F91               	movwf	___awtoft@sign& (0+255),b
  6469                           
  6470                           ; BSR set to: 0
  6471  0054E0  0100               	movlb	0	; () banked
  6472  0054E2  AF8F               	btfss	(___awtoft@c+1)& (0+255),7,b
  6473  0054E4  D008               	goto	l7487
  6474                           
  6475                           ; BSR set to: 0
  6476  0054E6  0100               	movlb	0	; () banked
  6477  0054E8  6D8E               	negf	___awtoft@c& (0+255),b
  6478  0054EA  1F8F               	comf	(___awtoft@c+1)& (0+255),f,b
  6479  0054EC  B0D8               	btfsc	status,0,c
  6480  0054EE  2B8F               	incf	(___awtoft@c+1)& (0+255),f,b
  6481                           
  6482                           ; BSR set to: 0
  6483  0054F0  0E01               	movlw	1
  6484  0054F2  0100               	movlb	0	; () banked
  6485  0054F4  6F91               	movwf	___awtoft@sign& (0+255),b
  6486  0054F6                     l7487:
  6487                           
  6488                           ; BSR set to: 0
  6489  0054F6  C08E  F080         	movff	___awtoft@c,___ftpack@arg
  6490  0054FA  C08F  F081         	movff	___awtoft@c+1,___ftpack@arg+1
  6491  0054FE  0100               	movlb	0	; () banked
  6492  005500  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  6493  005502  0E8E               	movlw	142
  6494  005504  0100               	movlb	0	; () banked
  6495  005506  6F83               	movwf	___ftpack@exp& (0+255),b
  6496  005508  C091  F084         	movff	___awtoft@sign,___ftpack@sign
  6497  00550C  ECA6  F020         	call	___ftpack	;wreg free
  6498  005510  C080  F08E         	movff	?___ftpack,?___awtoft
  6499  005514  C081  F08F         	movff	?___ftpack+1,?___awtoft+1
  6500  005518  C082  F090         	movff	?___ftpack+2,?___awtoft+2
  6501  00551C  0012               	return	
  6502  00551E                     __end_of___awtoft:
  6503                           	opt stack 0
  6504                           tblptru	equ	0xFF8
  6505                           tblptrh	equ	0xFF7
  6506                           tblptrl	equ	0xFF6
  6507                           tablat	equ	0xFF5
  6508                           prodh	equ	0xFF4
  6509                           prodl	equ	0xFF3
  6510                           postinc0	equ	0xFEE
  6511                           wreg	equ	0xFE8
  6512                           postdec1	equ	0xFE5
  6513                           fsr1l	equ	0xFE1
  6514                           indf2	equ	0xFDF
  6515                           postinc2	equ	0xFDE
  6516                           postdec2	equ	0xFDD
  6517                           fsr2h	equ	0xFDA
  6518                           fsr2l	equ	0xFD9
  6519                           status	equ	0xFD8
  6520                           
  6521 ;; *************** function ___ftpack *****************
  6522 ;; Defined at:
  6523 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  6524 ;; Parameters:    Size  Location     Type
  6525 ;;  arg             3    0[BANK0 ] unsigned um
  6526 ;;  exp             1    3[BANK0 ] unsigned char 
  6527 ;;  sign            1    4[BANK0 ] unsigned char 
  6528 ;; Auto vars:     Size  Location     Type
  6529 ;;		None
  6530 ;; Return value:  Size  Location     Type
  6531 ;;                  3    0[BANK0 ] float 
  6532 ;; Registers used:
  6533 ;;		wreg, status,2, status,0
  6534 ;; Tracked objects:
  6535 ;;		On entry : 0/0
  6536 ;;		On exit  : 0/0
  6537 ;;		Unchanged: 0/0
  6538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6539 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6541 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6542 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6543 ;;Total ram usage:        8 bytes
  6544 ;; Hardware stack levels used:    1
  6545 ;; Hardware stack levels required when called:    7
  6546 ;; This function calls:
  6547 ;;		Nothing
  6548 ;; This function is called by:
  6549 ;;		___awtoft
  6550 ;; This function uses a non-reentrant model
  6551 ;;
  6552                           
  6553                           	psect	text13
  6554  00414C                     __ptext13:
  6555                           	opt stack 0
  6556  00414C                     ___ftpack:
  6557                           	opt stack 20
  6558                           
  6559                           ;incstack = 0
  6560  00414C  0100               	movlb	0	; () banked
  6561  00414E  5183               	movf	___ftpack@exp& (0+255),w,b
  6562  004150  0100               	movlb	0	; () banked
  6563  004152  B4D8               	btfsc	status,2,c
  6564  004154  D008               	goto	l6871
  6565                           
  6566                           ; BSR set to: 0
  6567  004156  0100               	movlb	0	; () banked
  6568  004158  5180               	movf	___ftpack@arg& (0+255),w,b
  6569  00415A  0100               	movlb	0	; () banked
  6570  00415C  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  6571  00415E  0100               	movlb	0	; () banked
  6572  004160  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  6573  004162  A4D8               	btfss	status,2,c
  6574  004164  D011               	goto	l6877
  6575  004166                     l6871:
  6576                           
  6577                           ; BSR set to: 0
  6578  004166  0E00               	movlw	0
  6579  004168  0100               	movlb	0	; () banked
  6580  00416A  6F80               	movwf	?___ftpack& (0+255),b
  6581  00416C  0E00               	movlw	0
  6582  00416E  0100               	movlb	0	; () banked
  6583  004170  6F81               	movwf	(?___ftpack+1)& (0+255),b
  6584  004172  0E00               	movlw	0
  6585  004174  0100               	movlb	0	; () banked
  6586  004176  6F82               	movwf	(?___ftpack+2)& (0+255),b
  6587                           
  6588                           ; BSR set to: 0
  6589  004178  0012               	return	
  6590  00417A                     l6875:
  6591                           
  6592                           ; BSR set to: 0
  6593  00417A  0100               	movlb	0	; () banked
  6594  00417C  2B83               	incf	___ftpack@exp& (0+255),f,b
  6595  00417E  0100               	movlb	0	; () banked
  6596  004180  90D8               	bcf	status,0,c
  6597  004182  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6598  004184  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6599  004186  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6600  004188                     l6877:
  6601                           
  6602                           ; BSR set to: 0
  6603  004188  0E00               	movlw	0
  6604  00418A  0100               	movlb	0	; () banked
  6605  00418C  1580               	andwf	___ftpack@arg& (0+255),w,b
  6606  00418E  0100               	movlb	0	; () banked
  6607  004190  6F85               	movwf	??___ftpack& (0+255),b
  6608  004192  0E00               	movlw	0
  6609  004194  0100               	movlb	0	; () banked
  6610  004196  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6611  004198  0100               	movlb	0	; () banked
  6612  00419A  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6613  00419C  0EFE               	movlw	254
  6614  00419E  0100               	movlb	0	; () banked
  6615  0041A0  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6616  0041A2  0100               	movlb	0	; () banked
  6617  0041A4  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6618  0041A6  0100               	movlb	0	; () banked
  6619  0041A8  5185               	movf	??___ftpack& (0+255),w,b
  6620  0041AA  0100               	movlb	0	; () banked
  6621  0041AC  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6622  0041AE  0100               	movlb	0	; () banked
  6623  0041B0  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6624  0041B2  B4D8               	btfsc	status,2,c
  6625  0041B4  D011               	goto	l6883
  6626  0041B6  D7E1               	goto	l6875
  6627  0041B8                     l6879:
  6628                           
  6629                           ; BSR set to: 0
  6630  0041B8  0100               	movlb	0	; () banked
  6631  0041BA  2B83               	incf	___ftpack@exp& (0+255),f,b
  6632                           
  6633                           ; BSR set to: 0
  6634  0041BC  0E01               	movlw	1
  6635  0041BE  0100               	movlb	0	; () banked
  6636  0041C0  2780               	addwf	___ftpack@arg& (0+255),f,b
  6637  0041C2  0E00               	movlw	0
  6638  0041C4  0100               	movlb	0	; () banked
  6639  0041C6  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  6640  0041C8  0E00               	movlw	0
  6641  0041CA  0100               	movlb	0	; () banked
  6642  0041CC  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  6643  0041CE  0100               	movlb	0	; () banked
  6644  0041D0  90D8               	bcf	status,0,c
  6645  0041D2  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6646  0041D4  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6647  0041D6  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6648  0041D8                     l6883:
  6649                           
  6650                           ; BSR set to: 0
  6651  0041D8  0E00               	movlw	0
  6652  0041DA  0100               	movlb	0	; () banked
  6653  0041DC  1580               	andwf	___ftpack@arg& (0+255),w,b
  6654  0041DE  0100               	movlb	0	; () banked
  6655  0041E0  6F85               	movwf	??___ftpack& (0+255),b
  6656  0041E2  0E00               	movlw	0
  6657  0041E4  0100               	movlb	0	; () banked
  6658  0041E6  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6659  0041E8  0100               	movlb	0	; () banked
  6660  0041EA  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6661  0041EC  0EFF               	movlw	255
  6662  0041EE  0100               	movlb	0	; () banked
  6663  0041F0  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6664  0041F2  0100               	movlb	0	; () banked
  6665  0041F4  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6666  0041F6  0100               	movlb	0	; () banked
  6667  0041F8  5185               	movf	??___ftpack& (0+255),w,b
  6668  0041FA  0100               	movlb	0	; () banked
  6669  0041FC  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6670  0041FE  0100               	movlb	0	; () banked
  6671  004200  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6672  004202  B4D8               	btfsc	status,2,c
  6673  004204  D008               	goto	l6887
  6674  004206  D7D8               	goto	l6879
  6675  004208                     l6885:
  6676                           
  6677                           ; BSR set to: 0
  6678  004208  0100               	movlb	0	; () banked
  6679  00420A  0783               	decf	___ftpack@exp& (0+255),f,b
  6680  00420C  0100               	movlb	0	; () banked
  6681  00420E  90D8               	bcf	status,0,c
  6682  004210  3780               	rlcf	___ftpack@arg& (0+255),f,b
  6683  004212  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  6684  004214  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  6685  004216                     l6887:
  6686                           
  6687                           ; BSR set to: 0
  6688  004216  0100               	movlb	0	; () banked
  6689  004218  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  6690  00421A  D004               	goto	l1791
  6691                           
  6692                           ; BSR set to: 0
  6693  00421C  0E02               	movlw	2
  6694  00421E  0100               	movlb	0	; () banked
  6695  004220  6183               	cpfslt	___ftpack@exp& (0+255),b
  6696  004222  D7F2               	goto	l6885
  6697  004224                     l1791:
  6698                           
  6699                           ; BSR set to: 0
  6700  004224  0100               	movlb	0	; () banked
  6701  004226  B183               	btfsc	___ftpack@exp& (0+255),0,b
  6702  004228  D002               	goto	l6893
  6703                           
  6704                           ; BSR set to: 0
  6705  00422A  0100               	movlb	0	; () banked
  6706  00422C  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  6707  00422E                     l6893:
  6708                           
  6709                           ; BSR set to: 0
  6710  00422E  0100               	movlb	0	; () banked
  6711  004230  90D8               	bcf	status,0,c
  6712  004232  3383               	rrcf	___ftpack@exp& (0+255),f,b
  6713  004234  0100               	movlb	0	; () banked
  6714  004236  5183               	movf	___ftpack@exp& (0+255),w,b
  6715  004238  0100               	movlb	0	; () banked
  6716  00423A  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  6717                           
  6718                           ; BSR set to: 0
  6719  00423C  0100               	movlb	0	; () banked
  6720  00423E  5184               	movf	___ftpack@sign& (0+255),w,b
  6721  004240  0100               	movlb	0	; () banked
  6722  004242  B4D8               	btfsc	status,2,c
  6723  004244  D002               	goto	l6899
  6724                           
  6725                           ; BSR set to: 0
  6726  004246  0100               	movlb	0	; () banked
  6727  004248  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  6728  00424A                     l6899:
  6729                           
  6730                           ; BSR set to: 0
  6731  00424A  C080  F080         	movff	___ftpack@arg,?___ftpack
  6732  00424E  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  6733  004252  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  6734  004256  0012               	return	
  6735  004258                     __end_of___ftpack:
  6736                           	opt stack 0
  6737                           tblptru	equ	0xFF8
  6738                           tblptrh	equ	0xFF7
  6739                           tblptrl	equ	0xFF6
  6740                           tablat	equ	0xFF5
  6741                           prodh	equ	0xFF4
  6742                           prodl	equ	0xFF3
  6743                           postinc0	equ	0xFEE
  6744                           wreg	equ	0xFE8
  6745                           postdec1	equ	0xFE5
  6746                           fsr1l	equ	0xFE1
  6747                           indf2	equ	0xFDF
  6748                           postinc2	equ	0xFDE
  6749                           postdec2	equ	0xFDD
  6750                           fsr2h	equ	0xFDA
  6751                           fsr2l	equ	0xFD9
  6752                           status	equ	0xFD8
  6753                           
  6754 ;; *************** function _Distribution *****************
  6755 ;; Defined at:
  6756 ;;		line 399 in file "sort.c"
  6757 ;; Parameters:    Size  Location     Type
  6758 ;;		None
  6759 ;; Auto vars:     Size  Location     Type
  6760 ;;		None
  6761 ;; Return value:  Size  Location     Type
  6762 ;;                  1    wreg      void 
  6763 ;; Registers used:
  6764 ;;		wreg, status,2, status,0, cstack
  6765 ;; Tracked objects:
  6766 ;;		On entry : 0/0
  6767 ;;		On exit  : 0/0
  6768 ;;		Unchanged: 0/0
  6769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6772 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6773 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6774 ;;Total ram usage:        2 bytes
  6775 ;; Hardware stack levels used:    1
  6776 ;; Hardware stack levels required when called:    8
  6777 ;; This function calls:
  6778 ;;		_updateServoPosition
  6779 ;; This function is called by:
  6780 ;;		_sort
  6781 ;; This function uses a non-reentrant model
  6782 ;;
  6783                           
  6784                           	psect	text14
  6785  004544                     __ptext14:
  6786                           	opt stack 0
  6787  004544                     _Distribution:
  6788                           	opt stack 21
  6789                           
  6790                           ;sort.c: 400: if(f_can_coming_to_distribution){
  6791                           
  6792                           ; BSR set to: 0
  6793                           ;incstack = 0
  6794  004544  0101               	movlb	1	; () banked
  6795  004546  5133               	movf	_f_can_coming_to_distribution& (0+255),w,b
  6796  004548  0101               	movlb	1	; () banked
  6797  00454A  1134               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  6798  00454C  B4D8               	btfsc	status,2,c
  6799  00454E  0012               	return	
  6800                           
  6801                           ; BSR set to: 1
  6802                           ;sort.c: 401: f_can_distributed = 0;
  6803  004550  0E00               	movlw	0
  6804  004552  0101               	movlb	1	; () banked
  6805  004554  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  6806  004556  0E00               	movlw	0
  6807  004558  6F35               	movwf	_f_can_distributed& (0+255),b
  6808                           
  6809                           ;sort.c: 408: switch(cur_can){
  6810  00455A  D034               	goto	l8193
  6811  00455C                     l8183:
  6812                           
  6813                           ;sort.c: 410: updateServoPosition(500, 1);
  6814  00455C  0E01               	movlw	1
  6815  00455E  0100               	movlb	0	; () banked
  6816  004560  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6817  004562  0EF4               	movlw	244
  6818  004564  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6819  004566  0E00               	movlw	0
  6820  004568  0100               	movlb	0	; () banked
  6821  00456A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6822  00456C  0E01               	movlw	1
  6823  00456E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6824  004570  ECD9  F026         	call	_updateServoPosition	;wreg free
  6825                           
  6826                           ;sort.c: 411: break;
  6827  004574  D03E               	goto	l8195
  6828  004576                     l8185:
  6829                           
  6830                           ;sort.c: 413: updateServoPosition(850, 1);
  6831  004576  0E03               	movlw	3
  6832  004578  0100               	movlb	0	; () banked
  6833  00457A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6834  00457C  0E52               	movlw	82
  6835  00457E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6836  004580  0E00               	movlw	0
  6837  004582  0100               	movlb	0	; () banked
  6838  004584  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6839  004586  0E01               	movlw	1
  6840  004588  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6841  00458A  ECD9  F026         	call	_updateServoPosition	;wreg free
  6842                           
  6843                           ;sort.c: 414: break;
  6844  00458E  D031               	goto	l8195
  6845  004590                     l8187:
  6846                           
  6847                           ;sort.c: 416: updateServoPosition(1670, 1);
  6848  004590  0E06               	movlw	6
  6849  004592  0100               	movlb	0	; () banked
  6850  004594  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6851  004596  0E86               	movlw	134
  6852  004598  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6853  00459A  0E00               	movlw	0
  6854  00459C  0100               	movlb	0	; () banked
  6855  00459E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6856  0045A0  0E01               	movlw	1
  6857  0045A2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6858  0045A4  ECD9  F026         	call	_updateServoPosition	;wreg free
  6859                           
  6860                           ;sort.c: 417: break;
  6861  0045A8  D024               	goto	l8195
  6862  0045AA                     l8189:
  6863                           
  6864                           ;sort.c: 419: updateServoPosition(2400, 1);
  6865  0045AA  0E09               	movlw	9
  6866  0045AC  0100               	movlb	0	; () banked
  6867  0045AE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6868  0045B0  0E60               	movlw	96
  6869  0045B2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6870  0045B4  0E00               	movlw	0
  6871  0045B6  0100               	movlb	0	; () banked
  6872  0045B8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6873  0045BA  0E01               	movlw	1
  6874  0045BC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6875  0045BE  ECD9  F026         	call	_updateServoPosition	;wreg free
  6876                           
  6877                           ;sort.c: 423: }
  6878                           
  6879                           ;sort.c: 422: break;
  6880                           
  6881                           ;sort.c: 421: default:
  6882                           
  6883                           ;sort.c: 420: break;
  6884  0045C2  D017               	goto	l8195
  6885  0045C4                     l8193:
  6886  0045C4  C12B  F088         	movff	_cur_can,??_Distribution
  6887  0045C8  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  6888                           
  6889                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6890                           ; Switch size 1, requested type "space"
  6891                           ; Number of cases is 1, Range of values is 0 to 0
  6892                           ; switch strategies available:
  6893                           ; Name         Instructions Cycles
  6894                           ; simple_byte            4     3 (average)
  6895                           ;	Chosen strategy is simple_byte
  6896  0045CC  0100               	movlb	0	; () banked
  6897  0045CE  5189               	movf	(??_Distribution+1)& (0+255),w,b
  6898  0045D0  0A00               	xorlw	0	; case 0
  6899  0045D2  A4D8               	btfss	status,2,c
  6900  0045D4  D00E               	goto	l8195
  6901                           
  6902                           ; BSR set to: 0
  6903                           ; Switch size 1, requested type "space"
  6904                           ; Number of cases is 4, Range of values is 0 to 3
  6905                           ; switch strategies available:
  6906                           ; Name         Instructions Cycles
  6907                           ; simple_byte           13     7 (average)
  6908                           ;	Chosen strategy is simple_byte
  6909  0045D6  0100               	movlb	0	; () banked
  6910  0045D8  5188               	movf	??_Distribution& (0+255),w,b
  6911  0045DA  0A00               	xorlw	0	; case 0
  6912  0045DC  B4D8               	btfsc	status,2,c
  6913  0045DE  D7BE               	goto	l8183
  6914  0045E0  0A01               	xorlw	1	; case 1
  6915  0045E2  B4D8               	btfsc	status,2,c
  6916  0045E4  D7C8               	goto	l8185
  6917  0045E6  0A03               	xorlw	3	; case 2
  6918  0045E8  B4D8               	btfsc	status,2,c
  6919  0045EA  D7D2               	goto	l8187
  6920  0045EC  0A01               	xorlw	1	; case 3
  6921  0045EE  B4D8               	btfsc	status,2,c
  6922  0045F0  D7DC               	goto	l8189
  6923  0045F2                     l8195:
  6924                           
  6925                           ;sort.c: 424: updateServoPosition(1050, 3);
  6926  0045F2  0E04               	movlw	4
  6927  0045F4  0100               	movlb	0	; () banked
  6928  0045F6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6929  0045F8  0E1A               	movlw	26
  6930  0045FA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6931  0045FC  0E00               	movlw	0
  6932  0045FE  0100               	movlb	0	; () banked
  6933  004600  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6934  004602  0E03               	movlw	3
  6935  004604  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6936  004606  ECD9  F026         	call	_updateServoPosition	;wreg free
  6937                           
  6938                           ;sort.c: 425: servo_timer_target = 750;
  6939  00460A  0E02               	movlw	2
  6940  00460C  6E70               	movwf	_servo_timer_target+1,c	;volatile
  6941  00460E  0EEE               	movlw	238
  6942  004610  6E6F               	movwf	_servo_timer_target,c	;volatile
  6943                           
  6944                           ;sort.c: 426: f_panning_to_bin = 1;
  6945  004612  0E00               	movlw	0
  6946  004614  6E68               	movwf	_f_panning_to_bin+1,c	;volatile
  6947  004616  0E01               	movlw	1
  6948  004618  6E67               	movwf	_f_panning_to_bin,c	;volatile
  6949                           
  6950                           ;sort.c: 427: f_can_coming_to_distribution = 0;
  6951  00461A  0E00               	movlw	0
  6952  00461C  0101               	movlb	1	; () banked
  6953  00461E  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  6954  004620  0E00               	movlw	0
  6955  004622  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  6956  004624  0012               	return	
  6957  004626                     __end_of_Distribution:
  6958                           	opt stack 0
  6959                           tblptru	equ	0xFF8
  6960                           tblptrh	equ	0xFF7
  6961                           tblptrl	equ	0xFF6
  6962                           tablat	equ	0xFF5
  6963                           prodh	equ	0xFF4
  6964                           prodl	equ	0xFF3
  6965                           postinc0	equ	0xFEE
  6966                           wreg	equ	0xFE8
  6967                           postdec1	equ	0xFE5
  6968                           fsr1l	equ	0xFE1
  6969                           indf2	equ	0xFDF
  6970                           postinc2	equ	0xFDE
  6971                           postdec2	equ	0xFDD
  6972                           fsr2h	equ	0xFDA
  6973                           fsr2l	equ	0xFD9
  6974                           status	equ	0xFD8
  6975                           
  6976 ;; *************** function _machineConfig *****************
  6977 ;; Defined at:
  6978 ;;		line 15 in file "MachineConfig.c"
  6979 ;; Parameters:    Size  Location     Type
  6980 ;;		None
  6981 ;; Auto vars:     Size  Location     Type
  6982 ;;		None
  6983 ;; Return value:  Size  Location     Type
  6984 ;;                  1    wreg      void 
  6985 ;; Registers used:
  6986 ;;		wreg, status,2
  6987 ;; Tracked objects:
  6988 ;;		On entry : 0/0
  6989 ;;		On exit  : 0/0
  6990 ;;		Unchanged: 0/0
  6991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6996 ;;Total ram usage:        0 bytes
  6997 ;; Hardware stack levels used:    1
  6998 ;; Hardware stack levels required when called:    7
  6999 ;; This function calls:
  7000 ;;		Nothing
  7001 ;; This function is called by:
  7002 ;;		_main
  7003 ;; This function uses a non-reentrant model
  7004 ;;
  7005                           
  7006                           	psect	text15
  7007  0050D8                     __ptext15:
  7008                           	opt stack 0
  7009  0050D8                     _machineConfig:
  7010                           	opt stack 23
  7011                           
  7012                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  7013                           
  7014                           ; BSR set to: 1
  7015                           ;incstack = 0
  7016  0050D8  0EF0               	movlw	240
  7017  0050DA  6ED3               	movwf	4051,c	;volatile
  7018                           
  7019                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  7020  0050DC  8C9B               	bsf	3995,6,c	;volatile
  7021                           
  7022                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  7023  0050DE  0E07               	movlw	7
  7024  0050E0  6E92               	movwf	3986,c	;volatile
  7025                           
  7026                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  7027  0050E2  0EF2               	movlw	242
  7028  0050E4  6E93               	movwf	3987,c	;volatile
  7029                           
  7030                           ;MachineConfig.c: 27: TRISC = 0x00;
  7031  0050E6  0E00               	movlw	0
  7032  0050E8  6E94               	movwf	3988,c	;volatile
  7033                           
  7034                           ;MachineConfig.c: 31: TRISD = 0x00;
  7035  0050EA  0E00               	movlw	0
  7036  0050EC  6E95               	movwf	3989,c	;volatile
  7037                           
  7038                           ;MachineConfig.c: 34: TRISE = 0x00;
  7039  0050EE  0E00               	movlw	0
  7040  0050F0  6E96               	movwf	3990,c	;volatile
  7041                           
  7042                           ;MachineConfig.c: 37: LATA = 0x00;
  7043  0050F2  0E00               	movlw	0
  7044  0050F4  6E89               	movwf	3977,c	;volatile
  7045                           
  7046                           ;MachineConfig.c: 38: LATB = 0x00;
  7047  0050F6  0E00               	movlw	0
  7048  0050F8  6E8A               	movwf	3978,c	;volatile
  7049                           
  7050                           ;MachineConfig.c: 39: LATC = 0x00;
  7051  0050FA  0E00               	movlw	0
  7052  0050FC  6E8B               	movwf	3979,c	;volatile
  7053                           
  7054                           ;MachineConfig.c: 40: LATD = 0x00;
  7055  0050FE  0E00               	movlw	0
  7056  005100  6E8C               	movwf	3980,c	;volatile
  7057                           
  7058                           ;MachineConfig.c: 41: LATE = 0x00;
  7059  005102  0E00               	movlw	0
  7060  005104  6E8D               	movwf	3981,c	;volatile
  7061                           
  7062                           ;MachineConfig.c: 43: nRBPU = 0;
  7063  005106  9EF1               	bcf	intcon2,7,c	;volatile
  7064                           
  7065                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  7066  005108  0E00               	movlw	0
  7067  00510A  6EC2               	movwf	4034,c	;volatile
  7068                           
  7069                           ;MachineConfig.c: 47: ADCON1 = 0b00001100;
  7070  00510C  0E0C               	movlw	12
  7071  00510E  6EC1               	movwf	4033,c	;volatile
  7072                           
  7073                           ;MachineConfig.c: 51: CVRCON = 0x00;
  7074  005110  0E00               	movlw	0
  7075  005112  6EB5               	movwf	4021,c	;volatile
  7076                           
  7077                           ;MachineConfig.c: 52: CMCONbits.CIS = 0;
  7078  005114  96B4               	bcf	4020,3,c	;volatile
  7079                           
  7080                           ;MachineConfig.c: 53: ADCON2 = 0b10110001;
  7081  005116  0EB1               	movlw	177
  7082  005118  6EC0               	movwf	4032,c	;volatile
  7083                           
  7084                           ;MachineConfig.c: 56: INT1IE = 1;
  7085  00511A  86F0               	bsf	intcon3,3,c	;volatile
  7086                           
  7087                           ;MachineConfig.c: 58: TMR0IE = 1;
  7088  00511C  8AF2               	bsf	intcon,5,c	;volatile
  7089                           
  7090                           ;MachineConfig.c: 59: TMR1IE = 1;
  7091  00511E  809D               	bsf	3997,0,c	;volatile
  7092                           
  7093                           ;MachineConfig.c: 60: TMR2IE = 1;
  7094  005120  829D               	bsf	3997,1,c	;volatile
  7095                           
  7096                           ;MachineConfig.c: 61: TMR3IE = 1;
  7097  005122  82A0               	bsf	4000,1,c	;volatile
  7098                           
  7099                           ;MachineConfig.c: 63: T1CON = 0b10110000;
  7100  005124  0EB0               	movlw	176
  7101  005126  6ECD               	movwf	4045,c	;volatile
  7102                           
  7103                           ;MachineConfig.c: 64: T2CON = 0b01111011;
  7104  005128  0E7B               	movlw	123
  7105  00512A  6ECA               	movwf	4042,c	;volatile
  7106                           
  7107                           ;MachineConfig.c: 65: PR2 = 0x22;
  7108  00512C  0E22               	movlw	34
  7109  00512E  6ECB               	movwf	4043,c	;volatile
  7110                           
  7111                           ;MachineConfig.c: 66: T3CON = 0b10110000;
  7112  005130  0EB0               	movlw	176
  7113  005132  6EB1               	movwf	4017,c	;volatile
  7114                           
  7115                           ;MachineConfig.c: 67: PEIE = 1;
  7116  005134  8CF2               	bsf	intcon,6,c	;volatile
  7117                           
  7118                           ;MachineConfig.c: 68: ADIE = 0;
  7119  005136  9C9D               	bcf	3997,6,c	;volatile
  7120                           
  7121                           ;MachineConfig.c: 69: (INTCONbits.GIE = 0);
  7122  005138  9EF2               	bcf	intcon,7,c	;volatile
  7123  00513A  0012               	return		;funcret
  7124  00513C                     __end_of_machineConfig:
  7125                           	opt stack 0
  7126                           tblptru	equ	0xFF8
  7127                           tblptrh	equ	0xFF7
  7128                           tblptrl	equ	0xFF6
  7129                           tablat	equ	0xFF5
  7130                           prodh	equ	0xFF4
  7131                           prodl	equ	0xFF3
  7132                           intcon	equ	0xFF2
  7133                           intcon2	equ	0xFF1
  7134                           intcon3	equ	0xFF0
  7135                           postinc0	equ	0xFEE
  7136                           wreg	equ	0xFE8
  7137                           postdec1	equ	0xFE5
  7138                           fsr1l	equ	0xFE1
  7139                           indf2	equ	0xFDF
  7140                           postinc2	equ	0xFDE
  7141                           postdec2	equ	0xFDD
  7142                           fsr2h	equ	0xFDA
  7143                           fsr2l	equ	0xFD9
  7144                           status	equ	0xFD8
  7145                           
  7146 ;; *************** function _logRun *****************
  7147 ;; Defined at:
  7148 ;;		line 88 in file "EEPROM.c"
  7149 ;; Parameters:    Size  Location     Type
  7150 ;;		None
  7151 ;; Auto vars:     Size  Location     Type
  7152 ;;  byte_i          1   53[BANK0 ] unsigned char 
  7153 ;;  i               2   55[BANK0 ] int 
  7154 ;;  num             1   49[BANK0 ] unsigned char 
  7155 ;;  addr            2   57[BANK0 ] unsigned short 
  7156 ;;  byte11          1   54[BANK0 ] unsigned char 
  7157 ;;  byte3           1   52[BANK0 ] unsigned char 
  7158 ;;  byte2           1   51[BANK0 ] unsigned char 
  7159 ;;  byte1           1   50[BANK0 ] unsigned char 
  7160 ;; Return value:  Size  Location     Type
  7161 ;;                  1    wreg      void 
  7162 ;; Registers used:
  7163 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7164 ;; Tracked objects:
  7165 ;;		On entry : 0/0
  7166 ;;		On exit  : 0/0
  7167 ;;		Unchanged: 0/0
  7168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7170 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7172 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7173 ;;Total ram usage:       10 bytes
  7174 ;; Hardware stack levels used:    1
  7175 ;; Hardware stack levels required when called:   11
  7176 ;; This function calls:
  7177 ;;		_EEPROM_read
  7178 ;;		_EEPROM_write
  7179 ;; This function is called by:
  7180 ;;		_main
  7181 ;; This function uses a non-reentrant model
  7182 ;;
  7183                           
  7184                           	psect	text16
  7185  003EE4                     __ptext16:
  7186                           	opt stack 0
  7187  003EE4                     _logRun:
  7188                           	opt stack 19
  7189                           
  7190                           ;EEPROM.c: 101: sel = EEPROM_read(0);
  7191                           
  7192                           ;incstack = 0
  7193  003EE4  0E00               	movlw	0
  7194  003EE6  0100               	movlb	0	; () banked
  7195  003EE8  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  7196  003EEA  0E00               	movlw	0
  7197  003EEC  6F80               	movwf	EEPROM_read@address& (0+255),b
  7198  003EEE  EC6B  F02D         	call	_EEPROM_read	;wreg free
  7199  003EF2  0100               	movlb	0	; () banked
  7200  003EF4  6FFD               	movwf	_sel& (0+255),b
  7201                           
  7202                           ; BSR set to: 0
  7203                           ;EEPROM.c: 102: unsigned short addr = 1 + 11 * sel;
  7204  003EF6  0100               	movlb	0	; () banked
  7205  003EF8  51FD               	movf	_sel& (0+255),w,b
  7206  003EFA  0D0B               	mullw	11
  7207  003EFC  0E01               	movlw	1
  7208  003EFE  24F3               	addwf	prodl,w,c
  7209  003F00  0100               	movlb	0	; () banked
  7210  003F02  6FB9               	movwf	logRun@addr& (0+255),b
  7211  003F04  0E00               	movlw	0
  7212  003F06  20F4               	addwfc	prodh,w,c
  7213  003F08  0100               	movlb	0	; () banked
  7214  003F0A  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  7215                           
  7216                           ; BSR set to: 0
  7217                           ;EEPROM.c: 105: if (sel < 3){
  7218  003F0C  0E03               	movlw	3
  7219  003F0E  0100               	movlb	0	; () banked
  7220  003F10  61FD               	cpfslt	_sel& (0+255),b
  7221  003F12  D00E               	goto	l9827
  7222                           
  7223                           ; BSR set to: 0
  7224                           ;EEPROM.c: 106: unsigned char num = sel+1;
  7225  003F14  0100               	movlb	0	; () banked
  7226  003F16  29FD               	incf	_sel& (0+255),w,b
  7227  003F18  0100               	movlb	0	; () banked
  7228  003F1A  6FB1               	movwf	logRun@num& (0+255),b
  7229                           
  7230                           ; BSR set to: 0
  7231                           ;EEPROM.c: 107: EEPROM_write(0, num);
  7232  003F1C  0E00               	movlw	0
  7233  003F1E  0100               	movlb	0	; () banked
  7234  003F20  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7235  003F22  0E00               	movlw	0
  7236  003F24  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7237  003F26  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  7238  003F2A  EC2E  F022         	call	_EEPROM_write	;wreg free
  7239                           
  7240                           ;EEPROM.c: 108: }
  7241  003F2E  D00A               	goto	l9829
  7242  003F30                     l9827:
  7243                           
  7244                           ;EEPROM.c: 109: else{
  7245                           ;EEPROM.c: 110: EEPROM_write(0, 0);
  7246  003F30  0E00               	movlw	0
  7247  003F32  0100               	movlb	0	; () banked
  7248  003F34  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7249  003F36  0E00               	movlw	0
  7250  003F38  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7251  003F3A  0E00               	movlw	0
  7252  003F3C  0100               	movlb	0	; () banked
  7253  003F3E  6FAD               	movwf	EEPROM_write@data& (0+255),b
  7254  003F40  EC2E  F022         	call	_EEPROM_write	;wreg free
  7255  003F44                     l9829:
  7256                           
  7257                           ;EEPROM.c: 111: }
  7258                           ;EEPROM.c: 114: unsigned char byte1 = 0b10000000 | count_total;
  7259  003F44  0100               	movlb	0	; () banked
  7260  003F46  51FE               	movf	_count_total& (0+255),w,b
  7261  003F48  0980               	iorlw	128
  7262  003F4A  0100               	movlb	0	; () banked
  7263  003F4C  6FB2               	movwf	logRun@byte1& (0+255),b
  7264                           
  7265                           ; BSR set to: 0
  7266                           ;EEPROM.c: 115: EEPROM_write(addr, byte1);
  7267  003F4E  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7268  003F52  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7269  003F56  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  7270  003F5A  EC2E  F022         	call	_EEPROM_write	;wreg free
  7271                           
  7272                           ;EEPROM.c: 116: addr++;
  7273  003F5E  0100               	movlb	0	; () banked
  7274  003F60  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7275  003F62  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7276                           
  7277                           ; BSR set to: 0
  7278                           ;EEPROM.c: 119: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  7279  003F64  0101               	movlb	1	; () banked
  7280  003F66  3927               	swapf	_count_pop_no_tab& (0+255),w,b
  7281  003F68  0BF0               	andlw	240
  7282  003F6A  0101               	movlb	1	; () banked
  7283  003F6C  1129               	iorwf	_count_pop_w_tab& (0+255),w,b
  7284  003F6E  0100               	movlb	0	; () banked
  7285  003F70  6FB3               	movwf	logRun@byte2& (0+255),b
  7286                           
  7287                           ; BSR set to: 0
  7288                           ;EEPROM.c: 120: EEPROM_write(addr, byte2);
  7289  003F72  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7290  003F76  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7291  003F7A  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  7292  003F7E  EC2E  F022         	call	_EEPROM_write	;wreg free
  7293                           
  7294                           ;EEPROM.c: 121: addr++;
  7295  003F82  0100               	movlb	0	; () banked
  7296  003F84  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7297  003F86  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7298                           
  7299                           ; BSR set to: 0
  7300                           ;EEPROM.c: 122: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  7301  003F88  0101               	movlb	1	; () banked
  7302  003F8A  3925               	swapf	_count_can_w_lab& (0+255),w,b
  7303  003F8C  0BF0               	andlw	240
  7304  003F8E  0101               	movlb	1	; () banked
  7305  003F90  1123               	iorwf	_count_can_no_lab& (0+255),w,b
  7306  003F92  0100               	movlb	0	; () banked
  7307  003F94  6FB4               	movwf	logRun@byte3& (0+255),b
  7308                           
  7309                           ; BSR set to: 0
  7310                           ;EEPROM.c: 123: EEPROM_write(addr, byte3);
  7311  003F96  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7312  003F9A  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7313  003F9E  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  7314  003FA2  EC2E  F022         	call	_EEPROM_write	;wreg free
  7315                           
  7316                           ;EEPROM.c: 124: addr++;
  7317  003FA6  0100               	movlb	0	; () banked
  7318  003FA8  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7319  003FAA  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7320                           
  7321                           ; BSR set to: 0
  7322                           ;EEPROM.c: 127: for(int i = 0; i < 7; i++){
  7323  003FAC  0E00               	movlw	0
  7324  003FAE  0100               	movlb	0	; () banked
  7325  003FB0  6FB8               	movwf	(logRun@i+1)& (0+255),b
  7326  003FB2  0E00               	movlw	0
  7327  003FB4  6FB7               	movwf	logRun@i& (0+255),b
  7328                           
  7329                           ; BSR set to: 0
  7330  003FB6  0100               	movlb	0	; () banked
  7331  003FB8  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7332  003FBA  D008               	goto	l9853
  7333  003FBC  0100               	movlb	0	; () banked
  7334  003FBE  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7335  003FC0  E128               	bnz	l1150
  7336  003FC2  0E07               	movlw	7
  7337  003FC4  0100               	movlb	0	; () banked
  7338  003FC6  5DB7               	subwf	logRun@i& (0+255),w,b
  7339  003FC8  B0D8               	btfsc	status,0,c
  7340  003FCA  D023               	goto	l1150
  7341  003FCC                     l9853:
  7342                           
  7343                           ; BSR set to: 0
  7344                           ;EEPROM.c: 128: unsigned char byte_i = startTime[i];
  7345  003FCC  90D8               	bcf	status,0,c
  7346  003FCE  0100               	movlb	0	; () banked
  7347  003FD0  35B7               	rlcf	logRun@i& (0+255),w,b
  7348  003FD2  6ED9               	movwf	fsr2l,c
  7349  003FD4  0100               	movlb	0	; () banked
  7350  003FD6  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  7351  003FD8  6EDA               	movwf	fsr2h,c
  7352  003FDA  0E0E               	movlw	low _startTime
  7353  003FDC  26D9               	addwf	fsr2l,f,c
  7354  003FDE  0E01               	movlw	high _startTime
  7355  003FE0  22DA               	addwfc	fsr2h,f,c
  7356  003FE2  50DF               	movf	indf2,w,c
  7357  003FE4  0100               	movlb	0	; () banked
  7358  003FE6  6FB5               	movwf	logRun@byte_i& (0+255),b
  7359                           
  7360                           ; BSR set to: 0
  7361                           ;EEPROM.c: 129: EEPROM_write(addr, byte_i);
  7362  003FE8  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7363  003FEC  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7364  003FF0  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  7365  003FF4  EC2E  F022         	call	_EEPROM_write	;wreg free
  7366                           
  7367                           ;EEPROM.c: 130: addr++;
  7368  003FF8  0100               	movlb	0	; () banked
  7369  003FFA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7370  003FFC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7371                           
  7372                           ; BSR set to: 0
  7373  003FFE  0100               	movlb	0	; () banked
  7374  004000  4BB7               	infsnz	logRun@i& (0+255),f,b
  7375  004002  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  7376                           
  7377                           ; BSR set to: 0
  7378  004004  0100               	movlb	0	; () banked
  7379  004006  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7380  004008  D7E1               	goto	l9853
  7381  00400A  0100               	movlb	0	; () banked
  7382  00400C  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7383  00400E  E101               	bnz	u9340
  7384  004010  D7D8               	goto	L9
  7385  004012                     u9340:
  7386  004012                     l1150:
  7387                           
  7388                           ; BSR set to: 0
  7389                           ;EEPROM.c: 131: }
  7390                           ;EEPROM.c: 134: unsigned char byte11 = total_time;
  7391  004012  C0FA  F0B6         	movff	_total_time,logRun@byte11
  7392                           
  7393                           ; BSR set to: 0
  7394                           ;EEPROM.c: 135: EEPROM_write(addr, byte11);
  7395  004016  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7396  00401A  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7397  00401E  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  7398  004022  EC2E  F022         	call	_EEPROM_write	;wreg free
  7399  004026  0012               	return		;funcret
  7400  004028                     __end_of_logRun:
  7401                           	opt stack 0
  7402                           tblptru	equ	0xFF8
  7403                           tblptrh	equ	0xFF7
  7404                           tblptrl	equ	0xFF6
  7405                           tablat	equ	0xFF5
  7406                           prodh	equ	0xFF4
  7407                           prodl	equ	0xFF3
  7408                           intcon	equ	0xFF2
  7409                           intcon2	equ	0xFF1
  7410                           intcon3	equ	0xFF0
  7411                           postinc0	equ	0xFEE
  7412                           wreg	equ	0xFE8
  7413                           postdec1	equ	0xFE5
  7414                           fsr1l	equ	0xFE1
  7415                           indf2	equ	0xFDF
  7416                           postinc2	equ	0xFDE
  7417                           postdec2	equ	0xFDD
  7418                           fsr2h	equ	0xFDA
  7419                           fsr2l	equ	0xFD9
  7420                           status	equ	0xFD8
  7421                           
  7422 ;; *************** function _initUI *****************
  7423 ;; Defined at:
  7424 ;;		line 62 in file "UI.c"
  7425 ;; Parameters:    Size  Location     Type
  7426 ;;		None
  7427 ;; Auto vars:     Size  Location     Type
  7428 ;;		None
  7429 ;; Return value:  Size  Location     Type
  7430 ;;                  1    wreg      void 
  7431 ;; Registers used:
  7432 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7433 ;; Tracked objects:
  7434 ;;		On entry : 0/0
  7435 ;;		On exit  : 0/0
  7436 ;;		Unchanged: 0/0
  7437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7442 ;;Total ram usage:        0 bytes
  7443 ;; Hardware stack levels used:    1
  7444 ;; Hardware stack levels required when called:   12
  7445 ;; This function calls:
  7446 ;;		_change_state_to_menu_start
  7447 ;;		_loadRTC
  7448 ;; This function is called by:
  7449 ;;		_main
  7450 ;; This function uses a non-reentrant model
  7451 ;;
  7452                           
  7453                           	psect	text17
  7454  0056DA                     __ptext17:
  7455                           	opt stack 0
  7456  0056DA                     _initUI:
  7457                           	opt stack 18
  7458                           
  7459                           ;UI.c: 63: (INTCONbits.GIE = 1);
  7460                           
  7461                           ;incstack = 0
  7462  0056DA  8EF2               	bsf	intcon,7,c	;volatile
  7463                           
  7464                           ;UI.c: 64: machine_state = UI_state;
  7465  0056DC  0E00               	movlw	0
  7466  0056DE  0100               	movlb	0	; () banked
  7467  0056E0  6FFC               	movwf	_machine_state& (0+255),b
  7468                           
  7469                           ;UI.c: 65: logstate = 0;
  7470  0056E2  0E00               	movlw	0
  7471  0056E4  0100               	movlb	0	; () banked
  7472  0056E6  6FF9               	movwf	(_logstate+1)& (0+255),b
  7473  0056E8  0E00               	movlw	0
  7474  0056EA  6FF8               	movwf	_logstate& (0+255),b
  7475                           
  7476                           ; BSR set to: 0
  7477                           ;UI.c: 67: if(RTCflag){
  7478  0056EC  0100               	movlb	0	; () banked
  7479  0056EE  51E4               	movf	_RTCflag& (0+255),w,b
  7480  0056F0  0100               	movlb	0	; () banked
  7481  0056F2  11E5               	iorwf	(_RTCflag+1)& (0+255),w,b
  7482  0056F4  A4D8               	btfss	status,2,c
  7483                           
  7484                           ; BSR set to: 0
  7485                           ;UI.c: 68: loadRTC();
  7486  0056F6  EC0E  F026         	call	_loadRTC	;wreg free
  7487                           
  7488                           ;UI.c: 69: }
  7489                           ;UI.c: 71: change_state_to_menu_start();
  7490  0056FA  EC8B  F02C         	call	_change_state_to_menu_start	;wreg free
  7491                           
  7492                           ;UI.c: 72: firstboot = 1;
  7493  0056FE  0E00               	movlw	0
  7494  005700  0101               	movlb	1	; () banked
  7495  005702  6F3C               	movwf	(_firstboot+1)& (0+255),b
  7496  005704  0E01               	movlw	1
  7497  005706  6F3B               	movwf	_firstboot& (0+255),b
  7498                           
  7499                           ; BSR set to: 1
  7500  005708  0012               	return		;funcret
  7501  00570A                     __end_of_initUI:
  7502                           	opt stack 0
  7503                           tblptru	equ	0xFF8
  7504                           tblptrh	equ	0xFF7
  7505                           tblptrl	equ	0xFF6
  7506                           tablat	equ	0xFF5
  7507                           prodh	equ	0xFF4
  7508                           prodl	equ	0xFF3
  7509                           intcon	equ	0xFF2
  7510                           intcon2	equ	0xFF1
  7511                           intcon3	equ	0xFF0
  7512                           postinc0	equ	0xFEE
  7513                           wreg	equ	0xFE8
  7514                           postdec1	equ	0xFE5
  7515                           fsr1l	equ	0xFE1
  7516                           indf2	equ	0xFDF
  7517                           postinc2	equ	0xFDE
  7518                           postdec2	equ	0xFDD
  7519                           fsr2h	equ	0xFDA
  7520                           fsr2l	equ	0xFD9
  7521                           status	equ	0xFD8
  7522                           
  7523 ;; *************** function _loadRTC *****************
  7524 ;; Defined at:
  7525 ;;		line 28 in file "RTC.c"
  7526 ;; Parameters:    Size  Location     Type
  7527 ;;		None
  7528 ;; Auto vars:     Size  Location     Type
  7529 ;;  i               2   22[BANK0 ] int 
  7530 ;; Return value:  Size  Location     Type
  7531 ;;                  1    wreg      void 
  7532 ;; Registers used:
  7533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7534 ;; Tracked objects:
  7535 ;;		On entry : 0/0
  7536 ;;		On exit  : 0/0
  7537 ;;		Unchanged: 0/0
  7538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7540 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7541 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7542 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7543 ;;Total ram usage:        3 bytes
  7544 ;; Hardware stack levels used:    1
  7545 ;; Hardware stack levels required when called:    9
  7546 ;; This function calls:
  7547 ;;		_I2C_Master_Init
  7548 ;;		_I2C_Master_Start
  7549 ;;		_I2C_Master_Stop
  7550 ;;		_I2C_Master_Write
  7551 ;; This function is called by:
  7552 ;;		_initUI
  7553 ;; This function uses a non-reentrant model
  7554 ;;
  7555                           
  7556                           	psect	text18
  7557  004C1C                     __ptext18:
  7558                           	opt stack 0
  7559  004C1C                     _loadRTC:
  7560                           	opt stack 20
  7561                           
  7562                           ;RTC.c: 30: I2C_Master_Init(10000);
  7563                           
  7564                           ; BSR set to: 1
  7565                           ;incstack = 0
  7566  004C1C  0E10               	movlw	16
  7567  004C1E  0100               	movlb	0	; () banked
  7568  004C20  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  7569  004C22  0E27               	movlw	39
  7570  004C24  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  7571  004C26  0E00               	movlw	0
  7572  004C28  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  7573  004C2A  0E00               	movlw	0
  7574  004C2C  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  7575  004C2E  ECCF  F028         	call	_I2C_Master_Init	;wreg free
  7576                           
  7577                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  7578  004C32  9EF2               	bcf	intcon,7,c	;volatile
  7579                           
  7580                           ;RTC.c: 34: I2C_Master_Start();
  7581  004C34  ECCE  F02D         	call	_I2C_Master_Start	;wreg free
  7582                           
  7583                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  7584  004C38  0E00               	movlw	0
  7585  004C3A  0100               	movlb	0	; () banked
  7586  004C3C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7587  004C3E  0ED0               	movlw	208
  7588  004C40  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7589  004C42  ECBC  F02D         	call	_I2C_Master_Write	;wreg free
  7590                           
  7591                           ;RTC.c: 36: I2C_Master_Write(0x00);
  7592  004C46  0E00               	movlw	0
  7593  004C48  0100               	movlb	0	; () banked
  7594  004C4A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7595  004C4C  0E00               	movlw	0
  7596  004C4E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7597  004C50  ECBC  F02D         	call	_I2C_Master_Write	;wreg free
  7598                           
  7599                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  7600  004C54  0E00               	movlw	0
  7601  004C56  0100               	movlb	0	; () banked
  7602  004C58  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  7603  004C5A  0E00               	movlw	0
  7604  004C5C  6F96               	movwf	loadRTC@i& (0+255),b
  7605  004C5E                     l7587:
  7606                           
  7607                           ; BSR set to: 0
  7608  004C5E  0100               	movlb	0	; () banked
  7609  004C60  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  7610  004C62  D008               	goto	l7591
  7611  004C64  0100               	movlb	0	; () banked
  7612  004C66  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  7613  004C68  E11B               	bnz	l7597
  7614  004C6A  0E07               	movlw	7
  7615  004C6C  0100               	movlb	0	; () banked
  7616  004C6E  5D96               	subwf	loadRTC@i& (0+255),w,b
  7617  004C70  B0D8               	btfsc	status,0,c
  7618  004C72  D016               	goto	l7597
  7619  004C74                     l7591:
  7620                           
  7621                           ; BSR set to: 0
  7622                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  7623  004C74  0E1C               	movlw	low _time
  7624  004C76  0100               	movlb	0	; () banked
  7625  004C78  2596               	addwf	loadRTC@i& (0+255),w,b
  7626  004C7A  6ED9               	movwf	fsr2l,c
  7627  004C7C  0E01               	movlw	high _time
  7628  004C7E  0100               	movlb	0	; () banked
  7629  004C80  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  7630  004C82  6EDA               	movwf	fsr2h,c
  7631  004C84  50DF               	movf	indf2,w,c
  7632  004C86  0100               	movlb	0	; () banked
  7633  004C88  6F95               	movwf	??_loadRTC& (0+255),b
  7634  004C8A  0100               	movlb	0	; () banked
  7635  004C8C  5195               	movf	??_loadRTC& (0+255),w,b
  7636  004C8E  0100               	movlb	0	; () banked
  7637  004C90  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7638  004C92  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  7639  004C94  ECBC  F02D         	call	_I2C_Master_Write	;wreg free
  7640  004C98  0100               	movlb	0	; () banked
  7641  004C9A  4B96               	infsnz	loadRTC@i& (0+255),f,b
  7642  004C9C  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  7643  004C9E  D7DF               	goto	l7587
  7644  004CA0                     l7597:
  7645                           
  7646                           ; BSR set to: 0
  7647                           ;RTC.c: 39: }
  7648                           ;RTC.c: 40: I2C_Master_Stop();
  7649  004CA0  ECCA  F02D         	call	_I2C_Master_Stop	;wreg free
  7650                           
  7651                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  7652  004CA4  8EF2               	bsf	intcon,7,c	;volatile
  7653  004CA6  0012               	return		;funcret
  7654  004CA8                     __end_of_loadRTC:
  7655                           	opt stack 0
  7656                           tblptru	equ	0xFF8
  7657                           tblptrh	equ	0xFF7
  7658                           tblptrl	equ	0xFF6
  7659                           tablat	equ	0xFF5
  7660                           prodh	equ	0xFF4
  7661                           prodl	equ	0xFF3
  7662                           intcon	equ	0xFF2
  7663                           intcon2	equ	0xFF1
  7664                           intcon3	equ	0xFF0
  7665                           postinc0	equ	0xFEE
  7666                           wreg	equ	0xFE8
  7667                           postdec1	equ	0xFE5
  7668                           fsr1l	equ	0xFE1
  7669                           indf2	equ	0xFDF
  7670                           postinc2	equ	0xFDE
  7671                           postdec2	equ	0xFDD
  7672                           fsr2h	equ	0xFDA
  7673                           fsr2l	equ	0xFD9
  7674                           status	equ	0xFD8
  7675                           
  7676 ;; *************** function _I2C_Master_Init *****************
  7677 ;; Defined at:
  7678 ;;		line 15 in file "I2C.c"
  7679 ;; Parameters:    Size  Location     Type
  7680 ;;  c               4   13[BANK0 ] const unsigned long 
  7681 ;; Auto vars:     Size  Location     Type
  7682 ;;		None
  7683 ;; Return value:  Size  Location     Type
  7684 ;;                  1    wreg      void 
  7685 ;; Registers used:
  7686 ;;		wreg, status,2, status,0, cstack
  7687 ;; Tracked objects:
  7688 ;;		On entry : 0/0
  7689 ;;		On exit  : 0/0
  7690 ;;		Unchanged: 0/0
  7691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7692 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7694 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7695 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7696 ;;Total ram usage:        8 bytes
  7697 ;; Hardware stack levels used:    1
  7698 ;; Hardware stack levels required when called:    8
  7699 ;; This function calls:
  7700 ;;		___lldiv
  7701 ;; This function is called by:
  7702 ;;		_main
  7703 ;;		_loadRTC
  7704 ;; This function uses a non-reentrant model
  7705 ;;
  7706                           
  7707                           	psect	text19
  7708  00519E                     __ptext19:
  7709                           	opt stack 0
  7710  00519E                     _I2C_Master_Init:
  7711                           	opt stack 20
  7712                           
  7713                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  7714                           
  7715                           ;incstack = 0
  7716  00519E  0E00               	movlw	0
  7717  0051A0  6EC7               	movwf	4039,c	;volatile
  7718                           
  7719                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  7720  0051A2  0E28               	movlw	40
  7721  0051A4  6EC6               	movwf	4038,c	;volatile
  7722                           
  7723                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  7724  0051A6  0E00               	movlw	0
  7725  0051A8  6EC5               	movwf	4037,c	;volatile
  7726                           
  7727                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  7728  0051AA  0E00               	movlw	0
  7729  0051AC  0100               	movlb	0	; () banked
  7730  0051AE  6F80               	movwf	___lldiv@dividend& (0+255),b
  7731  0051B0  0E48               	movlw	72
  7732  0051B2  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  7733  0051B4  0EE8               	movlw	232
  7734  0051B6  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  7735  0051B8  0E01               	movlw	1
  7736  0051BA  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  7737  0051BC  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  7738  0051C0  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  7739  0051C4  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  7740  0051C8  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  7741  0051CC  0E02               	movlw	2
  7742  0051CE                     u5885:
  7743  0051CE  90D8               	bcf	status,0,c
  7744  0051D0  0100               	movlb	0	; () banked
  7745  0051D2  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  7746  0051D4  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  7747  0051D6  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  7748  0051D8  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  7749  0051DA  2EE8               	decfsz	wreg,f,c
  7750  0051DC  D7F8               	goto	u5885
  7751  0051DE  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  7752  0051E2  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  7753  0051E6  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  7754  0051EA  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  7755  0051EE  EC0A  F025         	call	___lldiv	;wreg free
  7756  0051F2  0100               	movlb	0	; () banked
  7757  0051F4  0580               	decf	?___lldiv& (0+255),w,b
  7758  0051F6  6EC8               	movwf	4040,c	;volatile
  7759                           
  7760                           ; BSR set to: 0
  7761                           ;I2C.c: 22: TRISC3 = 1;
  7762  0051F8  8694               	bsf	3988,3,c	;volatile
  7763                           
  7764                           ; BSR set to: 0
  7765                           ;I2C.c: 23: TRISC4 = 1;
  7766  0051FA  8894               	bsf	3988,4,c	;volatile
  7767                           
  7768                           ; BSR set to: 0
  7769  0051FC  0012               	return		;funcret
  7770  0051FE                     __end_of_I2C_Master_Init:
  7771                           	opt stack 0
  7772                           tblptru	equ	0xFF8
  7773                           tblptrh	equ	0xFF7
  7774                           tblptrl	equ	0xFF6
  7775                           tablat	equ	0xFF5
  7776                           prodh	equ	0xFF4
  7777                           prodl	equ	0xFF3
  7778                           intcon	equ	0xFF2
  7779                           intcon2	equ	0xFF1
  7780                           intcon3	equ	0xFF0
  7781                           postinc0	equ	0xFEE
  7782                           wreg	equ	0xFE8
  7783                           postdec1	equ	0xFE5
  7784                           fsr1l	equ	0xFE1
  7785                           indf2	equ	0xFDF
  7786                           postinc2	equ	0xFDE
  7787                           postdec2	equ	0xFDD
  7788                           fsr2h	equ	0xFDA
  7789                           fsr2l	equ	0xFD9
  7790                           status	equ	0xFD8
  7791                           
  7792 ;; *************** function ___lldiv *****************
  7793 ;; Defined at:
  7794 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  7795 ;; Parameters:    Size  Location     Type
  7796 ;;  dividend        4    0[BANK0 ] unsigned long 
  7797 ;;  divisor         4    4[BANK0 ] unsigned long 
  7798 ;; Auto vars:     Size  Location     Type
  7799 ;;  quotient        4    8[BANK0 ] unsigned long 
  7800 ;;  counter         1   12[BANK0 ] unsigned char 
  7801 ;; Return value:  Size  Location     Type
  7802 ;;                  4    0[BANK0 ] unsigned long 
  7803 ;; Registers used:
  7804 ;;		wreg, status,2, status,0
  7805 ;; Tracked objects:
  7806 ;;		On entry : 0/0
  7807 ;;		On exit  : 0/0
  7808 ;;		Unchanged: 0/0
  7809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7810 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7811 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7813 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7814 ;;Total ram usage:       13 bytes
  7815 ;; Hardware stack levels used:    1
  7816 ;; Hardware stack levels required when called:    7
  7817 ;; This function calls:
  7818 ;;		Nothing
  7819 ;; This function is called by:
  7820 ;;		_I2C_Master_Init
  7821 ;; This function uses a non-reentrant model
  7822 ;;
  7823                           
  7824                           	psect	text20
  7825  004A14                     __ptext20:
  7826                           	opt stack 0
  7827  004A14                     ___lldiv:
  7828                           	opt stack 20
  7829                           
  7830                           ; BSR set to: 0
  7831                           ;incstack = 0
  7832  004A14  0E00               	movlw	0
  7833  004A16  0100               	movlb	0	; () banked
  7834  004A18  6F88               	movwf	___lldiv@quotient& (0+255),b
  7835  004A1A  0E00               	movlw	0
  7836  004A1C  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  7837  004A1E  0E00               	movlw	0
  7838  004A20  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  7839  004A22  0E00               	movlw	0
  7840  004A24  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  7841                           
  7842                           ; BSR set to: 0
  7843  004A26  0100               	movlb	0	; () banked
  7844  004A28  5184               	movf	___lldiv@divisor& (0+255),w,b
  7845  004A2A  0100               	movlb	0	; () banked
  7846  004A2C  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7847  004A2E  0100               	movlb	0	; () banked
  7848  004A30  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7849  004A32  0100               	movlb	0	; () banked
  7850  004A34  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7851  004A36  B4D8               	btfsc	status,2,c
  7852  004A38  D042               	goto	l1921
  7853                           
  7854                           ; BSR set to: 0
  7855  004A3A  0E01               	movlw	1
  7856  004A3C  0100               	movlb	0	; () banked
  7857  004A3E  6F8C               	movwf	___lldiv@counter& (0+255),b
  7858  004A40  D008               	goto	l6911
  7859  004A42                     l6909:
  7860                           
  7861                           ; BSR set to: 0
  7862  004A42  0100               	movlb	0	; () banked
  7863  004A44  90D8               	bcf	status,0,c
  7864  004A46  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  7865  004A48  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7866  004A4A  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7867  004A4C  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7868  004A4E  0100               	movlb	0	; () banked
  7869  004A50  2B8C               	incf	___lldiv@counter& (0+255),f,b
  7870  004A52                     l6911:
  7871                           
  7872                           ; BSR set to: 0
  7873  004A52  0100               	movlb	0	; () banked
  7874  004A54  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7875  004A56  D7F5               	goto	l6909
  7876  004A58                     l6913:
  7877                           
  7878                           ; BSR set to: 0
  7879  004A58  0100               	movlb	0	; () banked
  7880  004A5A  90D8               	bcf	status,0,c
  7881  004A5C  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  7882  004A5E  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7883  004A60  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7884  004A62  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7885                           
  7886                           ; BSR set to: 0
  7887  004A64  0100               	movlb	0	; () banked
  7888  004A66  5184               	movf	___lldiv@divisor& (0+255),w,b
  7889  004A68  0100               	movlb	0	; () banked
  7890  004A6A  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  7891  004A6C  0100               	movlb	0	; () banked
  7892  004A6E  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7893  004A70  0100               	movlb	0	; () banked
  7894  004A72  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7895  004A74  0100               	movlb	0	; () banked
  7896  004A76  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7897  004A78  0100               	movlb	0	; () banked
  7898  004A7A  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7899  004A7C  0100               	movlb	0	; () banked
  7900  004A7E  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7901  004A80  0100               	movlb	0	; () banked
  7902  004A82  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7903  004A84  A0D8               	btfss	status,0,c
  7904  004A86  D012               	goto	l6921
  7905                           
  7906                           ; BSR set to: 0
  7907  004A88  0100               	movlb	0	; () banked
  7908  004A8A  5184               	movf	___lldiv@divisor& (0+255),w,b
  7909  004A8C  0100               	movlb	0	; () banked
  7910  004A8E  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  7911  004A90  0100               	movlb	0	; () banked
  7912  004A92  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7913  004A94  0100               	movlb	0	; () banked
  7914  004A96  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7915  004A98  0100               	movlb	0	; () banked
  7916  004A9A  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7917  004A9C  0100               	movlb	0	; () banked
  7918  004A9E  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7919  004AA0  0100               	movlb	0	; () banked
  7920  004AA2  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7921  004AA4  0100               	movlb	0	; () banked
  7922  004AA6  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7923                           
  7924                           ; BSR set to: 0
  7925  004AA8  0100               	movlb	0	; () banked
  7926  004AAA  8188               	bsf	___lldiv@quotient& (0+255),0,b
  7927  004AAC                     l6921:
  7928                           
  7929                           ; BSR set to: 0
  7930  004AAC  0100               	movlb	0	; () banked
  7931  004AAE  90D8               	bcf	status,0,c
  7932  004AB0  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7933  004AB2  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7934  004AB4  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7935  004AB6  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  7936                           
  7937                           ; BSR set to: 0
  7938  004AB8  0100               	movlb	0	; () banked
  7939  004ABA  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  7940  004ABC  D7CD               	goto	l6913
  7941  004ABE                     l1921:
  7942                           
  7943                           ; BSR set to: 0
  7944  004ABE  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7945  004AC2  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7946  004AC6  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7947  004ACA  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7948                           
  7949                           ; BSR set to: 0
  7950  004ACE  0012               	return		;funcret
  7951  004AD0                     __end_of___lldiv:
  7952                           	opt stack 0
  7953                           tblptru	equ	0xFF8
  7954                           tblptrh	equ	0xFF7
  7955                           tblptrl	equ	0xFF6
  7956                           tablat	equ	0xFF5
  7957                           prodh	equ	0xFF4
  7958                           prodl	equ	0xFF3
  7959                           intcon	equ	0xFF2
  7960                           intcon2	equ	0xFF1
  7961                           intcon3	equ	0xFF0
  7962                           postinc0	equ	0xFEE
  7963                           wreg	equ	0xFE8
  7964                           postdec1	equ	0xFE5
  7965                           fsr1l	equ	0xFE1
  7966                           indf2	equ	0xFDF
  7967                           postinc2	equ	0xFDE
  7968                           postdec2	equ	0xFDD
  7969                           fsr2h	equ	0xFDA
  7970                           fsr2l	equ	0xFD9
  7971                           status	equ	0xFD8
  7972                           
  7973 ;; *************** function _change_state_to_menu_start *****************
  7974 ;; Defined at:
  7975 ;;		line 477 in file "UI.c"
  7976 ;; Parameters:    Size  Location     Type
  7977 ;;		None
  7978 ;; Auto vars:     Size  Location     Type
  7979 ;;		None
  7980 ;; Return value:  Size  Location     Type
  7981 ;;                  1    wreg      void 
  7982 ;; Registers used:
  7983 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7984 ;; Tracked objects:
  7985 ;;		On entry : 0/0
  7986 ;;		On exit  : 0/0
  7987 ;;		Unchanged: 0/0
  7988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7993 ;;Total ram usage:        0 bytes
  7994 ;; Hardware stack levels used:    1
  7995 ;; Hardware stack levels required when called:   11
  7996 ;; This function calls:
  7997 ;;		_lcdInst
  7998 ;;		_printRTC
  7999 ;;		_printf
  8000 ;; This function is called by:
  8001 ;;		_initUI
  8002 ;; This function uses a non-reentrant model
  8003 ;;
  8004                           
  8005                           	psect	text21
  8006  005916                     __ptext21:
  8007                           	opt stack 0
  8008  005916                     _change_state_to_menu_start:
  8009                           	opt stack 18
  8010                           
  8011                           ;UI.c: 478: cur_state = 0;
  8012                           
  8013                           ; BSR set to: 0
  8014                           ;incstack = 0
  8015  005916  0E00               	movlw	0
  8016  005918  0100               	movlb	0	; () banked
  8017  00591A  6FE7               	movwf	(_cur_state+1)& (0+255),b
  8018  00591C  0E00               	movlw	0
  8019  00591E  6FE6               	movwf	_cur_state& (0+255),b
  8020                           
  8021                           ; BSR set to: 0
  8022                           ;UI.c: 480: lcdInst(0b10000000);;
  8023  005920  0E80               	movlw	128
  8024  005922  ECA8  F02D         	call	_lcdInst
  8025                           
  8026                           ;UI.c: 481: printRTC();
  8027  005926  ECD2  F016         	call	_printRTC	;wreg free
  8028                           
  8029                           ;UI.c: 482: lcdInst(0b11000000);;
  8030  00592A  0EC0               	movlw	192
  8031  00592C  ECA8  F02D         	call	_lcdInst
  8032                           
  8033                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  8034  005930  0EEB               	movlw	low STR_30
  8035  005932  0100               	movlb	0	; () banked
  8036  005934  6F8E               	movwf	printf@f& (0+255),b
  8037  005936  0EFD               	movlw	high STR_30
  8038  005938  0100               	movlb	0	; () banked
  8039  00593A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8040  00593C  ECFE  F00D         	call	_printf	;wreg free
  8041  005940  0012               	return		;funcret
  8042  005942                     __end_of_change_state_to_menu_start:
  8043                           	opt stack 0
  8044                           tblptru	equ	0xFF8
  8045                           tblptrh	equ	0xFF7
  8046                           tblptrl	equ	0xFF6
  8047                           tablat	equ	0xFF5
  8048                           prodh	equ	0xFF4
  8049                           prodl	equ	0xFF3
  8050                           intcon	equ	0xFF2
  8051                           intcon2	equ	0xFF1
  8052                           intcon3	equ	0xFF0
  8053                           postinc0	equ	0xFEE
  8054                           wreg	equ	0xFE8
  8055                           postdec1	equ	0xFE5
  8056                           fsr1l	equ	0xFE1
  8057                           indf2	equ	0xFDF
  8058                           postinc2	equ	0xFDE
  8059                           postdec2	equ	0xFDD
  8060                           fsr2h	equ	0xFDA
  8061                           fsr2l	equ	0xFD9
  8062                           status	equ	0xFD8
  8063                           
  8064 ;; *************** function _initTime *****************
  8065 ;; Defined at:
  8066 ;;		line 17 in file "RTC.c"
  8067 ;; Parameters:    Size  Location     Type
  8068 ;;  s               1    wreg     unsigned char 
  8069 ;;  m               1    0[BANK0 ] unsigned char 
  8070 ;;  h               1    1[BANK0 ] unsigned char 
  8071 ;;  w               1    2[BANK0 ] unsigned char 
  8072 ;;  DD              1    3[BANK0 ] unsigned char 
  8073 ;;  MM              1    4[BANK0 ] unsigned char 
  8074 ;;  YY              1    5[BANK0 ] unsigned char 
  8075 ;; Auto vars:     Size  Location     Type
  8076 ;;  s               1    6[BANK0 ] unsigned char 
  8077 ;; Return value:  Size  Location     Type
  8078 ;;                  1    wreg      void 
  8079 ;; Registers used:
  8080 ;;		wreg
  8081 ;; Tracked objects:
  8082 ;;		On entry : 0/0
  8083 ;;		On exit  : 0/0
  8084 ;;		Unchanged: 0/0
  8085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8086 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8087 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8089 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8090 ;;Total ram usage:        7 bytes
  8091 ;; Hardware stack levels used:    1
  8092 ;; Hardware stack levels required when called:    7
  8093 ;; This function calls:
  8094 ;;		Nothing
  8095 ;; This function is called by:
  8096 ;;		_main
  8097 ;; This function uses a non-reentrant model
  8098 ;;
  8099                           
  8100                           	psect	text22
  8101  005A7A                     __ptext22:
  8102                           	opt stack 0
  8103  005A7A                     _initTime:
  8104                           	opt stack 23
  8105                           
  8106                           ;incstack = 0
  8107                           ;initTime@s stored from wreg
  8108  005A7A  0100               	movlb	0	; () banked
  8109  005A7C  6F86               	movwf	initTime@s& (0+255),b
  8110                           
  8111                           ;RTC.c: 19: time[0] = s;
  8112  005A7E  C086  F11C         	movff	initTime@s,_time
  8113                           
  8114                           ;RTC.c: 20: time[1] = m;
  8115  005A82  C080  F11D         	movff	initTime@m,_time+1
  8116                           
  8117                           ;RTC.c: 21: time[2] = h;
  8118  005A86  C081  F11E         	movff	initTime@h,_time+2
  8119                           
  8120                           ;RTC.c: 22: time[3] = w;
  8121  005A8A  C082  F11F         	movff	initTime@w,_time+3
  8122                           
  8123                           ;RTC.c: 23: time[4] = DD;
  8124  005A8E  C083  F120         	movff	initTime@DD,_time+4
  8125                           
  8126                           ;RTC.c: 24: time[5] = MM;
  8127  005A92  C084  F121         	movff	initTime@MM,_time+5
  8128                           
  8129                           ;RTC.c: 25: time[6] = YY;
  8130  005A96  C085  F122         	movff	initTime@YY,_time+6
  8131  005A9A  0012               	return		;funcret
  8132  005A9C                     __end_of_initTime:
  8133                           	opt stack 0
  8134                           tblptru	equ	0xFF8
  8135                           tblptrh	equ	0xFF7
  8136                           tblptrl	equ	0xFF6
  8137                           tablat	equ	0xFF5
  8138                           prodh	equ	0xFF4
  8139                           prodl	equ	0xFF3
  8140                           intcon	equ	0xFF2
  8141                           intcon2	equ	0xFF1
  8142                           intcon3	equ	0xFF0
  8143                           postinc0	equ	0xFEE
  8144                           wreg	equ	0xFE8
  8145                           postdec1	equ	0xFE5
  8146                           fsr1l	equ	0xFE1
  8147                           indf2	equ	0xFDF
  8148                           postinc2	equ	0xFDE
  8149                           postdec2	equ	0xFDD
  8150                           fsr2h	equ	0xFDA
  8151                           fsr2l	equ	0xFD9
  8152                           status	equ	0xFD8
  8153                           
  8154 ;; *************** function _initLCD *****************
  8155 ;; Defined at:
  8156 ;;		line 50 in file "lcd.c"
  8157 ;; Parameters:    Size  Location     Type
  8158 ;;		None
  8159 ;; Auto vars:     Size  Location     Type
  8160 ;;		None
  8161 ;; Return value:  Size  Location     Type
  8162 ;;                  1    wreg      void 
  8163 ;; Registers used:
  8164 ;;		wreg, status,2, status,0, cstack
  8165 ;; Tracked objects:
  8166 ;;		On entry : 0/0
  8167 ;;		On exit  : 0/0
  8168 ;;		Unchanged: 0/0
  8169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8172 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8173 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8174 ;;Total ram usage:        1 bytes
  8175 ;; Hardware stack levels used:    1
  8176 ;; Hardware stack levels required when called:    9
  8177 ;; This function calls:
  8178 ;;		_lcdInst
  8179 ;; This function is called by:
  8180 ;;		_main
  8181 ;; This function uses a non-reentrant model
  8182 ;;
  8183                           
  8184                           	psect	text23
  8185  005494                     __ptext23:
  8186                           	opt stack 0
  8187  005494                     _initLCD:
  8188                           	opt stack 21
  8189                           
  8190                           ;lcd.c: 51: _delay((unsigned long)((15)*(32000000/4000.0)));
  8191                           
  8192                           ;incstack = 0
  8193  005494  0E9C               	movlw	156
  8194  005496  0100               	movlb	0	; () banked
  8195  005498  6F83               	movwf	??_initLCD& (0+255),b
  8196  00549A  0ED7               	movlw	215
  8197  00549C                     u10037:
  8198  00549C  2EE8               	decfsz	wreg,f,c
  8199  00549E  D7FE               	bra	u10037
  8200  0054A0  2F83               	decfsz	??_initLCD& (0+255),f,b
  8201  0054A2  D7FC               	bra	u10037
  8202                           
  8203                           ;lcd.c: 52: lcdInst(0b00110011);
  8204  0054A4  0E33               	movlw	51
  8205  0054A6  ECA8  F02D         	call	_lcdInst
  8206                           
  8207                           ;lcd.c: 53: lcdInst(0b00110010);
  8208  0054AA  0E32               	movlw	50
  8209  0054AC  ECA8  F02D         	call	_lcdInst
  8210                           
  8211                           ;lcd.c: 55: lcdInst(0b00101000);
  8212  0054B0  0E28               	movlw	40
  8213  0054B2  ECA8  F02D         	call	_lcdInst
  8214                           
  8215                           ;lcd.c: 56: lcdInst(0b00001100);
  8216  0054B6  0E0C               	movlw	12
  8217  0054B8  ECA8  F02D         	call	_lcdInst
  8218                           
  8219                           ;lcd.c: 57: lcdInst(0b00000110);
  8220  0054BC  0E06               	movlw	6
  8221  0054BE  ECA8  F02D         	call	_lcdInst
  8222                           
  8223                           ;lcd.c: 58: lcdInst(0b00000001);
  8224  0054C2  0E01               	movlw	1
  8225  0054C4  ECA8  F02D         	call	_lcdInst
  8226                           
  8227                           ;lcd.c: 59: _delay((unsigned long)((15)*(32000000/4000.0)));
  8228  0054C8  0E9C               	movlw	156
  8229  0054CA  0100               	movlb	0	; () banked
  8230  0054CC  6F83               	movwf	??_initLCD& (0+255),b
  8231  0054CE  0ED7               	movlw	215
  8232  0054D0                     u10047:
  8233  0054D0  2EE8               	decfsz	wreg,f,c
  8234  0054D2  D7FE               	bra	u10047
  8235  0054D4  2F83               	decfsz	??_initLCD& (0+255),f,b
  8236  0054D6  D7FC               	bra	u10047
  8237  0054D8  0012               	return		;funcret
  8238  0054DA                     __end_of_initLCD:
  8239                           	opt stack 0
  8240                           tblptru	equ	0xFF8
  8241                           tblptrh	equ	0xFF7
  8242                           tblptrl	equ	0xFF6
  8243                           tablat	equ	0xFF5
  8244                           prodh	equ	0xFF4
  8245                           prodl	equ	0xFF3
  8246                           intcon	equ	0xFF2
  8247                           intcon2	equ	0xFF1
  8248                           intcon3	equ	0xFF0
  8249                           postinc0	equ	0xFEE
  8250                           wreg	equ	0xFE8
  8251                           postdec1	equ	0xFE5
  8252                           fsr1l	equ	0xFE1
  8253                           indf2	equ	0xFDF
  8254                           postinc2	equ	0xFDE
  8255                           postdec2	equ	0xFDD
  8256                           fsr2h	equ	0xFDA
  8257                           fsr2l	equ	0xFD9
  8258                           status	equ	0xFD8
  8259                           
  8260 ;; *************** function _initEEPROM *****************
  8261 ;; Defined at:
  8262 ;;		line 32 in file "EEPROM.c"
  8263 ;; Parameters:    Size  Location     Type
  8264 ;;		None
  8265 ;; Auto vars:     Size  Location     Type
  8266 ;;		None
  8267 ;; Return value:  Size  Location     Type
  8268 ;;                  1    wreg      void 
  8269 ;; Registers used:
  8270 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8271 ;; Tracked objects:
  8272 ;;		On entry : 0/0
  8273 ;;		On exit  : 0/0
  8274 ;;		Unchanged: 0/0
  8275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8280 ;;Total ram usage:        0 bytes
  8281 ;; Hardware stack levels used:    1
  8282 ;; Hardware stack levels required when called:   11
  8283 ;; This function calls:
  8284 ;;		_EEPROM_write
  8285 ;; This function is called by:
  8286 ;;		_main
  8287 ;; This function uses a non-reentrant model
  8288 ;;
  8289                           
  8290                           	psect	text24
  8291  005AEE                     __ptext24:
  8292                           	opt stack 0
  8293  005AEE                     _initEEPROM:
  8294                           	opt stack 19
  8295                           
  8296                           ;EEPROM.c: 33: EEPROM_write(0, 0x01);
  8297                           
  8298                           ;incstack = 0
  8299  005AEE  0E00               	movlw	0
  8300  005AF0  0100               	movlb	0	; () banked
  8301  005AF2  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  8302  005AF4  0E00               	movlw	0
  8303  005AF6  6FAB               	movwf	EEPROM_write@address& (0+255),b
  8304  005AF8  0E01               	movlw	1
  8305  005AFA  0100               	movlb	0	; () banked
  8306  005AFC  6FAD               	movwf	EEPROM_write@data& (0+255),b
  8307  005AFE  EC2E  F022         	call	_EEPROM_write	;wreg free
  8308  005B02  0012               	return		;funcret
  8309  005B04                     __end_of_initEEPROM:
  8310                           	opt stack 0
  8311                           tblptru	equ	0xFF8
  8312                           tblptrh	equ	0xFF7
  8313                           tblptrl	equ	0xFF6
  8314                           tablat	equ	0xFF5
  8315                           prodh	equ	0xFF4
  8316                           prodl	equ	0xFF3
  8317                           intcon	equ	0xFF2
  8318                           intcon2	equ	0xFF1
  8319                           intcon3	equ	0xFF0
  8320                           postinc0	equ	0xFEE
  8321                           wreg	equ	0xFE8
  8322                           postdec1	equ	0xFE5
  8323                           fsr1l	equ	0xFE1
  8324                           indf2	equ	0xFDF
  8325                           postinc2	equ	0xFDE
  8326                           postdec2	equ	0xFDD
  8327                           fsr2h	equ	0xFDA
  8328                           fsr2l	equ	0xFD9
  8329                           status	equ	0xFD8
  8330                           
  8331 ;; *************** function _EEPROM_write *****************
  8332 ;; Defined at:
  8333 ;;		line 36 in file "EEPROM.c"
  8334 ;; Parameters:    Size  Location     Type
  8335 ;;  address         2   43[BANK0 ] unsigned short 
  8336 ;;  data            1   45[BANK0 ] unsigned char 
  8337 ;; Auto vars:     Size  Location     Type
  8338 ;;  i               1   48[BANK0 ] unsigned char 
  8339 ;;  i               1   47[BANK0 ] unsigned char 
  8340 ;; Return value:  Size  Location     Type
  8341 ;;                  1    wreg      void 
  8342 ;; Registers used:
  8343 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8344 ;; Tracked objects:
  8345 ;;		On entry : 0/0
  8346 ;;		On exit  : 0/0
  8347 ;;		Unchanged: 0/0
  8348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8349 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8350 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8351 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8352 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8353 ;;Total ram usage:        6 bytes
  8354 ;; Hardware stack levels used:    1
  8355 ;; Hardware stack levels required when called:   10
  8356 ;; This function calls:
  8357 ;;		_EEPROM_read
  8358 ;;		_lcdInst
  8359 ;;		_printf
  8360 ;; This function is called by:
  8361 ;;		_Loading
  8362 ;;		_initEEPROM
  8363 ;;		_logRun
  8364 ;; This function uses a non-reentrant model
  8365 ;;
  8366                           
  8367                           	psect	text25
  8368  00445C                     __ptext25:
  8369                           	opt stack 0
  8370  00445C                     _EEPROM_write:
  8371                           	opt stack 18
  8372                           
  8373                           ;EEPROM.c: 37: EECON1bits.WREN = 1;
  8374                           
  8375                           ;incstack = 0
  8376  00445C  84A6               	bsf	4006,2,c	;volatile
  8377                           
  8378                           ;EEPROM.c: 40: EEADRH = (unsigned char)(address >> 8);
  8379  00445E  0100               	movlb	0	; () banked
  8380  004460  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  8381  004462  6EAA               	movwf	4010,c	;volatile
  8382                           
  8383                           ; BSR set to: 0
  8384                           ;EEPROM.c: 41: EEADR = (unsigned char)address;
  8385  004464  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  8386                           
  8387                           ; BSR set to: 0
  8388                           ;EEPROM.c: 43: EEDATA = data;
  8389  004468  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  8390                           
  8391                           ; BSR set to: 0
  8392                           ;EEPROM.c: 44: EECON1bits.EEPGD = 0;
  8393  00446C  9EA6               	bcf	4006,7,c	;volatile
  8394                           
  8395                           ; BSR set to: 0
  8396                           ;EEPROM.c: 45: EECON1bits.CFGS = 0;
  8397  00446E  9CA6               	bcf	4006,6,c	;volatile
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;EEPROM.c: 47: (INTCONbits.GIE = 0);
  8401  004470  9EF2               	bcf	intcon,7,c	;volatile
  8402                           
  8403                           ;EEPROM.c: 49: EECON2 = 0x55;
  8404  004472  0E55               	movlw	85
  8405  004474  6EA7               	movwf	4007,c	;volatile
  8406                           
  8407                           ;EEPROM.c: 50: EECON2 = 0x0AA;
  8408  004476  0EAA               	movlw	170
  8409  004478  6EA7               	movwf	4007,c	;volatile
  8410                           
  8411                           ; BSR set to: 0
  8412                           ;EEPROM.c: 51: EECON1bits.WR = 1;
  8413  00447A  82A6               	bsf	4006,1,c	;volatile
  8414                           
  8415                           ; BSR set to: 0
  8416                           ;EEPROM.c: 52: (INTCONbits.GIE = 1);
  8417  00447C  8EF2               	bsf	intcon,7,c	;volatile
  8418  00447E                     l1128:
  8419  00447E  A8A1               	btfss	4001,4,c	;volatile
  8420  004480  D7FE               	goto	l1128
  8421                           
  8422                           ;EEPROM.c: 57: PIR2bits.EEIF = 0;
  8423  004482  98A1               	bcf	4001,4,c	;volatile
  8424                           
  8425                           ;EEPROM.c: 58: EECON1bits.WREN = 0;
  8426  004484  94A6               	bcf	4006,2,c	;volatile
  8427                           
  8428                           ;EEPROM.c: 61: if(debug){
  8429  004486  0101               	movlb	1	; () banked
  8430  004488  512D               	movf	_debug& (0+255),w,b
  8431  00448A  0101               	movlb	1	; () banked
  8432  00448C  112E               	iorwf	(_debug+1)& (0+255),w,b
  8433  00448E  B4D8               	btfsc	status,2,c
  8434  004490  0012               	return	
  8435                           
  8436                           ; BSR set to: 1
  8437                           ;EEPROM.c: 62: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8438  004492  0E01               	movlw	1
  8439  004494  ECA8  F02D         	call	_lcdInst
  8440  004498  0E68               	movlw	104
  8441  00449A  0100               	movlb	0	; () banked
  8442  00449C  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8443  00449E  0EE4               	movlw	228
  8444  0044A0                     u10057:
  8445  0044A0  2EE8               	decfsz	wreg,f,c
  8446  0044A2  D7FE               	bra	u10057
  8447  0044A4  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8448  0044A6  D7FC               	bra	u10057
  8449  0044A8  F000               	nop	
  8450                           
  8451                           ;EEPROM.c: 63: lcdInst(0b10000000);;
  8452  0044AA  0E80               	movlw	128
  8453  0044AC  ECA8  F02D         	call	_lcdInst
  8454                           
  8455                           ;EEPROM.c: 64: if(EEPROM_read(address)==data){
  8456  0044B0  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  8457  0044B4  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  8458  0044B8  EC6B  F02D         	call	_EEPROM_read	;wreg free
  8459  0044BC  0100               	movlb	0	; () banked
  8460  0044BE  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  8461  0044C0  A4D8               	btfss	status,2,c
  8462  0044C2  D024               	goto	l7359
  8463                           
  8464                           ; BSR set to: 0
  8465                           ;EEPROM.c: 65: printf("(data: %u, addr: %u)", data, address);
  8466  0044C4  0ED2               	movlw	low STR_66
  8467  0044C6  0100               	movlb	0	; () banked
  8468  0044C8  6F8E               	movwf	printf@f& (0+255),b
  8469  0044CA  0EFA               	movlw	high STR_66
  8470  0044CC  0100               	movlb	0	; () banked
  8471  0044CE  6F8F               	movwf	(printf@f+1)& (0+255),b
  8472  0044D0  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  8473  0044D4  0100               	movlb	0	; () banked
  8474  0044D6  6B91               	clrf	(?_printf+3)& (0+255),b
  8475  0044D8  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  8476  0044DC  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  8477  0044E0  ECFE  F00D         	call	_printf	;wreg free
  8478                           
  8479                           ;EEPROM.c: 66: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  8480  0044E4  0E00               	movlw	0
  8481  0044E6  0100               	movlb	0	; () banked
  8482  0044E8  6FAF               	movwf	EEPROM_write@i& (0+255),b
  8483  0044EA                     l7351:
  8484                           
  8485                           ; BSR set to: 0
  8486  0044EA  0E63               	movlw	99
  8487  0044EC  0100               	movlb	0	; () banked
  8488  0044EE  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  8489  0044F0  D001               	goto	l7355
  8490  0044F2  0012               	return	
  8491  0044F4                     l7355:
  8492                           
  8493                           ; BSR set to: 0
  8494  0044F4  0E68               	movlw	104
  8495  0044F6  0100               	movlb	0	; () banked
  8496  0044F8  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8497  0044FA  0EE4               	movlw	228
  8498  0044FC                     u10067:
  8499  0044FC  2EE8               	decfsz	wreg,f,c
  8500  0044FE  D7FE               	bra	u10067
  8501  004500  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8502  004502  D7FC               	bra	u10067
  8503  004504  F000               	nop	
  8504  004506  0100               	movlb	0	; () banked
  8505  004508  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  8506  00450A  D7EF               	goto	l7351
  8507  00450C                     l7359:
  8508                           
  8509                           ; BSR set to: 0
  8510                           ;EEPROM.c: 68: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  8511  00450C  0EBD               	movlw	low STR_67
  8512  00450E  0100               	movlb	0	; () banked
  8513  004510  6F8E               	movwf	printf@f& (0+255),b
  8514  004512  0EFF               	movlw	high STR_67
  8515  004514  0100               	movlb	0	; () banked
  8516  004516  6F8F               	movwf	(printf@f+1)& (0+255),b
  8517  004518  ECFE  F00D         	call	_printf	;wreg free
  8518  00451C  0E00               	movlw	0
  8519  00451E  0100               	movlb	0	; () banked
  8520  004520  6FB0               	movwf	EEPROM_write@i_1407& (0+255),b
  8521  004522                     l7363:
  8522                           
  8523                           ; BSR set to: 0
  8524  004522  0E63               	movlw	99
  8525  004524  0100               	movlb	0	; () banked
  8526  004526  65B0               	cpfsgt	EEPROM_write@i_1407& (0+255),b
  8527  004528  D001               	goto	l7367
  8528  00452A  0012               	return	
  8529  00452C                     l7367:
  8530                           
  8531                           ; BSR set to: 0
  8532  00452C  0E68               	movlw	104
  8533  00452E  0100               	movlb	0	; () banked
  8534  004530  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8535  004532  0EE4               	movlw	228
  8536  004534                     u10077:
  8537  004534  2EE8               	decfsz	wreg,f,c
  8538  004536  D7FE               	bra	u10077
  8539  004538  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8540  00453A  D7FC               	bra	u10077
  8541  00453C  F000               	nop	
  8542  00453E  0100               	movlb	0	; () banked
  8543  004540  2BB0               	incf	EEPROM_write@i_1407& (0+255),f,b
  8544  004542  D7EF               	goto	l7363
  8545  004544                     __end_of_EEPROM_write:
  8546                           	opt stack 0
  8547                           tblptru	equ	0xFF8
  8548                           tblptrh	equ	0xFF7
  8549                           tblptrl	equ	0xFF6
  8550                           tablat	equ	0xFF5
  8551                           prodh	equ	0xFF4
  8552                           prodl	equ	0xFF3
  8553                           intcon	equ	0xFF2
  8554                           intcon2	equ	0xFF1
  8555                           intcon3	equ	0xFF0
  8556                           postinc0	equ	0xFEE
  8557                           wreg	equ	0xFE8
  8558                           postdec1	equ	0xFE5
  8559                           fsr1l	equ	0xFE1
  8560                           indf2	equ	0xFDF
  8561                           postinc2	equ	0xFDE
  8562                           postdec2	equ	0xFDD
  8563                           fsr2h	equ	0xFDA
  8564                           fsr2l	equ	0xFD9
  8565                           status	equ	0xFD8
  8566                           
  8567 ;; *************** function _EEPROM_read *****************
  8568 ;; Defined at:
  8569 ;;		line 72 in file "EEPROM.c"
  8570 ;; Parameters:    Size  Location     Type
  8571 ;;  address         2    0[BANK0 ] unsigned short 
  8572 ;; Auto vars:     Size  Location     Type
  8573 ;;		None
  8574 ;; Return value:  Size  Location     Type
  8575 ;;                  1    wreg      unsigned char 
  8576 ;; Registers used:
  8577 ;;		wreg, status,2
  8578 ;; Tracked objects:
  8579 ;;		On entry : 0/0
  8580 ;;		On exit  : 0/0
  8581 ;;		Unchanged: 0/0
  8582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8583 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8586 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8587 ;;Total ram usage:        2 bytes
  8588 ;; Hardware stack levels used:    1
  8589 ;; Hardware stack levels required when called:    7
  8590 ;; This function calls:
  8591 ;;		Nothing
  8592 ;; This function is called by:
  8593 ;;		_Loading
  8594 ;;		_EEPROM_write
  8595 ;;		_logRun
  8596 ;; This function uses a non-reentrant model
  8597 ;;
  8598                           
  8599                           	psect	text26
  8600  005AD6                     __ptext26:
  8601                           	opt stack 0
  8602  005AD6                     _EEPROM_read:
  8603                           	opt stack 20
  8604                           
  8605                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
  8606                           
  8607                           ;incstack = 0
  8608  005AD6  0100               	movlb	0	; () banked
  8609  005AD8  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  8610  005ADA  6EAA               	movwf	4010,c	;volatile
  8611                           
  8612                           ; BSR set to: 0
  8613                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
  8614  005ADC  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  8615                           
  8616                           ; BSR set to: 0
  8617                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
  8618  005AE0  9EA6               	bcf	4006,7,c	;volatile
  8619                           
  8620                           ; BSR set to: 0
  8621                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
  8622  005AE2  9CA6               	bcf	4006,6,c	;volatile
  8623                           
  8624                           ; BSR set to: 0
  8625                           ;EEPROM.c: 79: EECON1bits.RD = 1;
  8626  005AE4  80A6               	bsf	4006,0,c	;volatile
  8627  005AE6                     l1141:
  8628  005AE6  B0A6               	btfsc	4006,0,c	;volatile
  8629  005AE8  D7FE               	goto	l1141
  8630                           
  8631                           ;EEPROM.c: 85: return EEDATA;
  8632  005AEA  50A8               	movf	4008,w,c	;volatile
  8633  005AEC  0012               	return	
  8634  005AEE                     __end_of_EEPROM_read:
  8635                           	opt stack 0
  8636                           tblptru	equ	0xFF8
  8637                           tblptrh	equ	0xFF7
  8638                           tblptrl	equ	0xFF6
  8639                           tablat	equ	0xFF5
  8640                           prodh	equ	0xFF4
  8641                           prodl	equ	0xFF3
  8642                           intcon	equ	0xFF2
  8643                           intcon2	equ	0xFF1
  8644                           intcon3	equ	0xFF0
  8645                           postinc0	equ	0xFEE
  8646                           wreg	equ	0xFE8
  8647                           postdec1	equ	0xFE5
  8648                           fsr1l	equ	0xFE1
  8649                           indf2	equ	0xFDF
  8650                           postinc2	equ	0xFDE
  8651                           postdec2	equ	0xFDD
  8652                           fsr2h	equ	0xFDA
  8653                           fsr2l	equ	0xFD9
  8654                           status	equ	0xFD8
  8655                           
  8656 ;; *************** function _UI *****************
  8657 ;; Defined at:
  8658 ;;		line 76 in file "UI.c"
  8659 ;; Parameters:    Size  Location     Type
  8660 ;;		None
  8661 ;; Auto vars:     Size  Location     Type
  8662 ;;  i               1   73[BANK0 ] unsigned char 
  8663 ;;  i               1   85[BANK0 ] unsigned char 
  8664 ;;  i               1   84[BANK0 ] unsigned char 
  8665 ;;  i               1   83[BANK0 ] unsigned char 
  8666 ;;  i               1   82[BANK0 ] unsigned char 
  8667 ;;  i               1   81[BANK0 ] unsigned char 
  8668 ;;  i               1   80[BANK0 ] unsigned char 
  8669 ;;  i               1   79[BANK0 ] unsigned char 
  8670 ;;  i               1   78[BANK0 ] unsigned char 
  8671 ;;  i               1   77[BANK0 ] unsigned char 
  8672 ;;  i               1   76[BANK0 ] unsigned char 
  8673 ;;  i               1   75[BANK0 ] unsigned char 
  8674 ;;  i               1   74[BANK0 ] unsigned char 
  8675 ;;  month           4   86[BANK0 ] unsigned char [4]
  8676 ;;  i               1   72[BANK0 ] unsigned char 
  8677 ;; Return value:  Size  Location     Type
  8678 ;;                  1    wreg      void 
  8679 ;; Registers used:
  8680 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8681 ;; Tracked objects:
  8682 ;;		On entry : 0/0
  8683 ;;		On exit  : 0/0
  8684 ;;		Unchanged: 0/0
  8685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8687 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8688 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8689 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8690 ;;Total ram usage:       22 bytes
  8691 ;; Hardware stack levels used:    1
  8692 ;; Hardware stack levels required when called:   11
  8693 ;; This function calls:
  8694 ;;		___awdiv
  8695 ;;		___awmod
  8696 ;;		_change_state_to_menu_12
  8697 ;;		_change_state_to_menu_22
  8698 ;;		_lcdInst
  8699 ;;		_printRTC
  8700 ;;		_printf
  8701 ;;		_strcpy
  8702 ;; This function is called by:
  8703 ;;		_main
  8704 ;; This function uses a non-reentrant model
  8705 ;;
  8706                           
  8707                           	psect	text27
  8708  000012                     __ptext27:
  8709                           	opt stack 0
  8710  000012                     _UI:
  8711                           	opt stack 19
  8712                           
  8713                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  8714                           
  8715                           ;incstack = 0
  8716  000012  0E02               	movlw	2
  8717  000014  0100               	movlb	0	; () banked
  8718  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  8719  000018  A4D8               	btfss	status,2,c
  8720  00001A  D086               	goto	l9255
  8721                           
  8722                           ; BSR set to: 0
  8723                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8724  00001C  0E01               	movlw	1
  8725  00001E  ECA8  F02D         	call	_lcdInst
  8726  000022  0E68               	movlw	104
  8727  000024  0100               	movlb	0	; () banked
  8728  000026  6FC4               	movwf	??_UI& (0+255),b
  8729  000028  0EE4               	movlw	228
  8730  00002A                     u10087:
  8731  00002A  2EE8               	decfsz	wreg,f,c
  8732  00002C  D7FE               	bra	u10087
  8733  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  8734  000030  D7FC               	bra	u10087
  8735  000032  F000               	nop	
  8736                           
  8737                           ;UI.c: 79: lcdInst(0b10000000);;
  8738  000034  0E80               	movlw	128
  8739  000036  ECA8  F02D         	call	_lcdInst
  8740                           
  8741                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  8742  00003A  0E53               	movlw	low STR_1
  8743  00003C  0100               	movlb	0	; () banked
  8744  00003E  6F8E               	movwf	printf@f& (0+255),b
  8745  000040  0EFB               	movlw	high STR_1
  8746  000042  0100               	movlb	0	; () banked
  8747  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  8748  000046  0E01               	movlw	1
  8749  000048  0100               	movlb	0	; () banked
  8750  00004A  25FD               	addwf	_sel& (0+255),w,b
  8751  00004C  0100               	movlb	0	; () banked
  8752  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  8753  000050  0100               	movlb	0	; () banked
  8754  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  8755  000054  0E00               	movlw	0
  8756  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  8757  000058  ECFE  F00D         	call	_printf	;wreg free
  8758                           
  8759                           ;UI.c: 81: lcdInst(0b11000000);;
  8760  00005C  0EC0               	movlw	192
  8761  00005E  ECA8  F02D         	call	_lcdInst
  8762                           
  8763                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  8764  000062  0E0E               	movlw	14
  8765  000064  0100               	movlb	0	; () banked
  8766  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8767  000068  0E10               	movlw	16
  8768  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  8769  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  8770  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  8771  000074  ECBD  F025         	call	___awmod	;wreg free
  8772  000078  C080  F0C6         	movff	?___awmod,_UI$2433
  8773  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2433+1
  8774                           
  8775                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  8776  000080  0E4A               	movlw	low STR_2
  8777  000082  0100               	movlb	0	; () banked
  8778  000084  6F8E               	movwf	printf@f& (0+255),b
  8779  000086  0EFF               	movlw	high STR_2
  8780  000088  0100               	movlb	0	; () banked
  8781  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8782  00008C  0E0E               	movlw	14
  8783  00008E  0100               	movlb	0	; () banked
  8784  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8785  000092  0E10               	movlw	16
  8786  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  8787  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  8788  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  8789  00009E  ECBD  F025         	call	___awmod	;wreg free
  8790  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  8791  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8792  0000AA  0E00               	movlw	0
  8793  0000AC  0100               	movlb	0	; () banked
  8794  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8795  0000B0  0E3C               	movlw	60
  8796  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  8797  0000B4  ECAB  F024         	call	___awdiv	;wreg free
  8798  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  8799  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  8800  0000C0  C0C6  F080         	movff	_UI$2433,___awmod@dividend
  8801  0000C4  C0C7  F081         	movff	_UI$2433+1,___awmod@dividend+1
  8802  0000C8  0E00               	movlw	0
  8803  0000CA  0100               	movlb	0	; () banked
  8804  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8805  0000CE  0E3C               	movlw	60
  8806  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  8807  0000D2  ECBD  F025         	call	___awmod	;wreg free
  8808  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  8809  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  8810  0000DE  ECFE  F00D         	call	_printf	;wreg free
  8811  0000E2                     l185:
  8812  0000E2  B281               	btfsc	3969,1,c	;volatile
  8813  0000E4  D7FE               	goto	l185
  8814  0000E6                     l188:
  8815  0000E6  A281               	btfss	3969,1,c	;volatile
  8816  0000E8  D7FE               	goto	l188
  8817                           
  8818                           ;UI.c: 86: }
  8819                           ;UI.c: 87: if(cur_state == 12){
  8820  0000EA  0E0C               	movlw	12
  8821  0000EC  0100               	movlb	0	; () banked
  8822  0000EE  19E6               	xorwf	_cur_state& (0+255),w,b
  8823  0000F0  0100               	movlb	0	; () banked
  8824  0000F2  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8825  0000F4  A4D8               	btfss	status,2,c
  8826  0000F6  D003               	goto	l9249
  8827                           
  8828                           ; BSR set to: 0
  8829                           ;UI.c: 88: change_state_to_menu_12();
  8830  0000F8  ECE9  F02A         	call	_change_state_to_menu_12	;wreg free
  8831                           
  8832                           ;UI.c: 89: }
  8833  0000FC  D002               	goto	l193
  8834  0000FE                     l9249:
  8835                           
  8836                           ;UI.c: 90: else{
  8837                           ;UI.c: 91: change_state_to_menu_22();
  8838  0000FE  ECCD  F02A         	call	_change_state_to_menu_22	;wreg free
  8839  000102                     l193:
  8840  000102  B281               	btfsc	3969,1,c	;volatile
  8841  000104  D7FE               	goto	l193
  8842                           
  8843                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  8844  000106  0E05               	movlw	5
  8845  000108  0100               	movlb	0	; () banked
  8846  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  8847  00010C  0E0F               	movlw	15
  8848  00010E  0100               	movlb	0	; () banked
  8849  000110  6FC4               	movwf	??_UI& (0+255),b
  8850  000112  0EF1               	movlw	241
  8851  000114                     u10097:
  8852  000114  2EE8               	decfsz	wreg,f,c
  8853  000116  D7FE               	bra	u10097
  8854  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  8855  00011A  D7FC               	bra	u10097
  8856  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  8857  00011E  D7FA               	bra	u10097
  8858                           
  8859                           ;UI.c: 95: machine_state = UI_state;
  8860  000120  0E00               	movlw	0
  8861  000122  0100               	movlb	0	; () banked
  8862  000124  6FFC               	movwf	_machine_state& (0+255),b
  8863                           
  8864                           ;UI.c: 96: }
  8865  000126  D3D2               	goto	l9575
  8866  000128                     l9255:
  8867                           
  8868                           ; BSR set to: 0
  8869                           ;UI.c: 97: else if(cur_state == 0){
  8870  000128  0100               	movlb	0	; () banked
  8871  00012A  51E6               	movf	_cur_state& (0+255),w,b
  8872  00012C  0100               	movlb	0	; () banked
  8873  00012E  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8874  000130  A4D8               	btfss	status,2,c
  8875  000132  D3CC               	goto	l9575
  8876                           
  8877                           ; BSR set to: 0
  8878                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  8879  000134  0E00               	movlw	0
  8880  000136  0100               	movlb	0	; () banked
  8881  000138  6FC8               	movwf	UI@i& (0+255),b
  8882  00013A                     l9259:
  8883                           
  8884                           ; BSR set to: 0
  8885  00013A  0E63               	movlw	99
  8886  00013C  0100               	movlb	0	; () banked
  8887  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  8888  000140  D001               	goto	l9263
  8889  000142  D00C               	goto	l9267
  8890  000144                     l9263:
  8891                           
  8892                           ; BSR set to: 0
  8893  000144  0E68               	movlw	104
  8894  000146  0100               	movlb	0	; () banked
  8895  000148  6FC4               	movwf	??_UI& (0+255),b
  8896  00014A  0EE4               	movlw	228
  8897  00014C                     u10107:
  8898  00014C  2EE8               	decfsz	wreg,f,c
  8899  00014E  D7FE               	bra	u10107
  8900  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  8901  000152  D7FC               	bra	u10107
  8902  000154  F000               	nop	
  8903  000156  0100               	movlb	0	; () banked
  8904  000158  2BC8               	incf	UI@i& (0+255),f,b
  8905  00015A  D7EF               	goto	l9259
  8906  00015C                     l9267:
  8907                           
  8908                           ; BSR set to: 0
  8909                           ;UI.c: 99: if(cur_state == 0){
  8910  00015C  0100               	movlb	0	; () banked
  8911  00015E  51E6               	movf	_cur_state& (0+255),w,b
  8912  000160  0100               	movlb	0	; () banked
  8913  000162  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8914  000164  A4D8               	btfss	status,2,c
  8915  000166  D3B2               	goto	l9575
  8916                           
  8917                           ; BSR set to: 0
  8918                           ;UI.c: 100: printRTC();
  8919  000168  ECD2  F016         	call	_printRTC	;wreg free
  8920                           
  8921                           ;UI.c: 101: }
  8922                           ;UI.c: 102: }
  8923                           ;UI.c: 103: while(logstate){
  8924  00016C  D3AF               	goto	l9575
  8925  00016E                     l9271:
  8926                           
  8927                           ;UI.c: 105: if(!log_completion){
  8928  00016E  0100               	movlb	0	; () banked
  8929  000170  51F0               	movf	_log_completion& (0+255),w,b
  8930  000172  0100               	movlb	0	; () banked
  8931  000174  11F1               	iorwf	(_log_completion+1)& (0+255),w,b
  8932  000176  A4D8               	btfss	status,2,c
  8933  000178  D041               	goto	l9301
  8934                           
  8935                           ; BSR set to: 0
  8936                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8937  00017A  0E01               	movlw	1
  8938  00017C  ECA8  F02D         	call	_lcdInst
  8939  000180  0E68               	movlw	104
  8940  000182  0100               	movlb	0	; () banked
  8941  000184  6FC4               	movwf	??_UI& (0+255),b
  8942  000186  0EE4               	movlw	228
  8943  000188                     u10117:
  8944  000188  2EE8               	decfsz	wreg,f,c
  8945  00018A  D7FE               	bra	u10117
  8946  00018C  2FC4               	decfsz	??_UI& (0+255),f,b
  8947  00018E  D7FC               	bra	u10117
  8948  000190  F000               	nop	
  8949                           
  8950                           ;UI.c: 107: lcdInst(0b10000000);;
  8951  000192  0E80               	movlw	128
  8952  000194  ECA8  F02D         	call	_lcdInst
  8953                           
  8954                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  8955  000198  0E41               	movlw	low STR_3
  8956  00019A  0100               	movlb	0	; () banked
  8957  00019C  6F8E               	movwf	printf@f& (0+255),b
  8958  00019E  0EFB               	movlw	high STR_3
  8959  0001A0  0100               	movlb	0	; () banked
  8960  0001A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  8961  0001A4  C0EE  F090         	movff	_log,?_printf+2
  8962  0001A8  C0EF  F091         	movff	_log+1,?_printf+3
  8963  0001AC  ECFE  F00D         	call	_printf	;wreg free
  8964                           
  8965                           ;UI.c: 109: lcdInst(0b11000000);;
  8966  0001B0  0EC0               	movlw	192
  8967  0001B2  ECA8  F02D         	call	_lcdInst
  8968                           
  8969                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  8970  0001B6  0E5E               	movlw	low STR_4
  8971  0001B8  0100               	movlb	0	; () banked
  8972  0001BA  6F8E               	movwf	printf@f& (0+255),b
  8973  0001BC  0EFE               	movlw	high STR_4
  8974  0001BE  0100               	movlb	0	; () banked
  8975  0001C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  8976  0001C2  ECFE  F00D         	call	_printf	;wreg free
  8977  0001C6                     l9285:
  8978  0001C6  0E00               	movlw	0
  8979  0001C8  0100               	movlb	0	; () banked
  8980  0001CA  6FC9               	movwf	UI@i_412& (0+255),b
  8981  0001CC                     l9287:
  8982                           
  8983                           ; BSR set to: 0
  8984  0001CC  0E63               	movlw	99
  8985  0001CE  0100               	movlb	0	; () banked
  8986  0001D0  65C9               	cpfsgt	UI@i_412& (0+255),b
  8987  0001D2  D001               	goto	l9291
  8988  0001D4  D00C               	goto	l9295
  8989  0001D6                     l9291:
  8990                           
  8991                           ; BSR set to: 0
  8992  0001D6  0E68               	movlw	104
  8993  0001D8  0100               	movlb	0	; () banked
  8994  0001DA  6FC4               	movwf	??_UI& (0+255),b
  8995  0001DC  0EE4               	movlw	228
  8996  0001DE                     u10127:
  8997  0001DE  2EE8               	decfsz	wreg,f,c
  8998  0001E0  D7FE               	bra	u10127
  8999  0001E2  2FC4               	decfsz	??_UI& (0+255),f,b
  9000  0001E4  D7FC               	bra	u10127
  9001  0001E6  F000               	nop	
  9002  0001E8  0100               	movlb	0	; () banked
  9003  0001EA  2BC9               	incf	UI@i_412& (0+255),f,b
  9004  0001EC  D7EF               	goto	l9287
  9005  0001EE                     l9295:
  9006                           
  9007                           ; BSR set to: 0
  9008  0001EE  0100               	movlb	0	; () banked
  9009  0001F0  51F8               	movf	_logstate& (0+255),w,b
  9010  0001F2  0100               	movlb	0	; () banked
  9011  0001F4  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9012  0001F6  B4D8               	btfsc	status,2,c
  9013  0001F8  0012               	return	
  9014  0001FA  D7E5               	goto	l9285
  9015  0001FC                     l9301:
  9016                           
  9017                           ; BSR set to: 0
  9018                           ;UI.c: 114: else{
  9019                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9020  0001FC  0E01               	movlw	1
  9021  0001FE  ECA8  F02D         	call	_lcdInst
  9022  000202  0E68               	movlw	104
  9023  000204  0100               	movlb	0	; () banked
  9024  000206  6FC4               	movwf	??_UI& (0+255),b
  9025  000208  0EE4               	movlw	228
  9026  00020A                     u10137:
  9027  00020A  2EE8               	decfsz	wreg,f,c
  9028  00020C  D7FE               	bra	u10137
  9029  00020E  2FC4               	decfsz	??_UI& (0+255),f,b
  9030  000210  D7FC               	bra	u10137
  9031  000212  F000               	nop	
  9032                           
  9033                           ;UI.c: 116: lcdInst(0b10000000);;
  9034  000214  0E80               	movlw	128
  9035  000216  ECA8  F02D         	call	_lcdInst
  9036                           
  9037                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  9038  00021A  0E41               	movlw	low STR_3
  9039  00021C  0100               	movlb	0	; () banked
  9040  00021E  6F8E               	movwf	printf@f& (0+255),b
  9041  000220  0EFB               	movlw	high STR_3
  9042  000222  0100               	movlb	0	; () banked
  9043  000224  6F8F               	movwf	(printf@f+1)& (0+255),b
  9044  000226  C0EE  F090         	movff	_log,?_printf+2
  9045  00022A  C0EF  F091         	movff	_log+1,?_printf+3
  9046  00022E  ECFE  F00D         	call	_printf	;wreg free
  9047                           
  9048                           ;UI.c: 118: lcdInst(0b11000000);;
  9049  000232  0EC0               	movlw	192
  9050  000234  ECA8  F02D         	call	_lcdInst
  9051                           
  9052                           ;UI.c: 119: printf("PAUSE < | BACK >");
  9053  000238  0EDA               	movlw	low STR_6
  9054  00023A  0100               	movlb	0	; () banked
  9055  00023C  6F8E               	movwf	printf@f& (0+255),b
  9056  00023E  0EFD               	movlw	high STR_6
  9057  000240  0100               	movlb	0	; () banked
  9058  000242  6F8F               	movwf	(printf@f+1)& (0+255),b
  9059  000244  ECFE  F00D         	call	_printf	;wreg free
  9060                           
  9061                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9062  000248  0E00               	movlw	0
  9063  00024A  0100               	movlb	0	; () banked
  9064  00024C  6FCA               	movwf	UI@i_415& (0+255),b
  9065  00024E                     l9315:
  9066                           
  9067                           ; BSR set to: 0
  9068  00024E  0E63               	movlw	99
  9069  000250  0100               	movlb	0	; () banked
  9070  000252  65CA               	cpfsgt	UI@i_415& (0+255),b
  9071  000254  D001               	goto	l9319
  9072  000256  D00C               	goto	l9323
  9073  000258                     l9319:
  9074                           
  9075                           ; BSR set to: 0
  9076  000258  0E68               	movlw	104
  9077  00025A  0100               	movlb	0	; () banked
  9078  00025C  6FC4               	movwf	??_UI& (0+255),b
  9079  00025E  0EE4               	movlw	228
  9080  000260                     u10147:
  9081  000260  2EE8               	decfsz	wreg,f,c
  9082  000262  D7FE               	bra	u10147
  9083  000264  2FC4               	decfsz	??_UI& (0+255),f,b
  9084  000266  D7FC               	bra	u10147
  9085  000268  F000               	nop	
  9086  00026A  0100               	movlb	0	; () banked
  9087  00026C  2BCA               	incf	UI@i_415& (0+255),f,b
  9088  00026E  D7EF               	goto	l9315
  9089  000270                     l9323:
  9090                           
  9091                           ; BSR set to: 0
  9092  000270  0100               	movlb	0	; () banked
  9093  000272  51F8               	movf	_logstate& (0+255),w,b
  9094  000274  0100               	movlb	0	; () banked
  9095  000276  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9096  000278  B4D8               	btfsc	status,2,c
  9097  00027A  0012               	return	
  9098                           
  9099                           ; BSR set to: 0
  9100                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9101                           
  9102                           ; BSR set to: 0
  9103                           
  9104                           ; BSR set to: 0
  9105  00027C  0E00               	movlw	0
  9106  00027E  0100               	movlb	0	; () banked
  9107  000280  6FCB               	movwf	UI@i_416& (0+255),b
  9108  000282                     l9329:
  9109                           
  9110                           ; BSR set to: 0
  9111  000282  0E63               	movlw	99
  9112  000284  0100               	movlb	0	; () banked
  9113  000286  65CB               	cpfsgt	UI@i_416& (0+255),b
  9114  000288  D001               	goto	l9333
  9115  00028A  D00C               	goto	l9337
  9116  00028C                     l9333:
  9117                           
  9118                           ; BSR set to: 0
  9119  00028C  0E68               	movlw	104
  9120  00028E  0100               	movlb	0	; () banked
  9121  000290  6FC4               	movwf	??_UI& (0+255),b
  9122  000292  0EE4               	movlw	228
  9123  000294                     u10157:
  9124  000294  2EE8               	decfsz	wreg,f,c
  9125  000296  D7FE               	bra	u10157
  9126  000298  2FC4               	decfsz	??_UI& (0+255),f,b
  9127  00029A  D7FC               	bra	u10157
  9128  00029C  F000               	nop	
  9129  00029E  0100               	movlb	0	; () banked
  9130  0002A0  2BCB               	incf	UI@i_416& (0+255),f,b
  9131  0002A2  D7EF               	goto	l9329
  9132  0002A4                     l9337:
  9133                           
  9134                           ; BSR set to: 0
  9135  0002A4  0100               	movlb	0	; () banked
  9136  0002A6  51F8               	movf	_logstate& (0+255),w,b
  9137  0002A8  0100               	movlb	0	; () banked
  9138  0002AA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9139  0002AC  B4D8               	btfsc	status,2,c
  9140  0002AE  0012               	return	
  9141                           
  9142                           ; BSR set to: 0
  9143                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9144                           
  9145                           ; BSR set to: 0
  9146                           
  9147                           ; BSR set to: 0
  9148  0002B0  0E01               	movlw	1
  9149  0002B2  ECA8  F02D         	call	_lcdInst
  9150  0002B6  0E68               	movlw	104
  9151  0002B8  0100               	movlb	0	; () banked
  9152  0002BA  6FC4               	movwf	??_UI& (0+255),b
  9153  0002BC  0EE4               	movlw	228
  9154  0002BE                     u10167:
  9155  0002BE  2EE8               	decfsz	wreg,f,c
  9156  0002C0  D7FE               	bra	u10167
  9157  0002C2  2FC4               	decfsz	??_UI& (0+255),f,b
  9158  0002C4  D7FC               	bra	u10167
  9159  0002C6  F000               	nop	
  9160                           
  9161                           ;UI.c: 125: lcdInst(0b10000000);;
  9162  0002C8  0E80               	movlw	128
  9163  0002CA  ECA8  F02D         	call	_lcdInst
  9164                           
  9165                           ;UI.c: 126: printf("START:");
  9166  0002CE  0EC4               	movlw	low STR_7
  9167  0002D0  0100               	movlb	0	; () banked
  9168  0002D2  6F8E               	movwf	printf@f& (0+255),b
  9169  0002D4  0EFF               	movlw	high STR_7
  9170  0002D6  0100               	movlb	0	; () banked
  9171  0002D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9172  0002DA  ECFE  F00D         	call	_printf	;wreg free
  9173                           
  9174                           ;UI.c: 127: lcdInst(0b11000000);;
  9175  0002DE  0EC0               	movlw	192
  9176  0002E0  ECA8  F02D         	call	_lcdInst
  9177                           
  9178                           ;UI.c: 128: char month[] = "MMM";
  9179  0002E4  C149  F0D6         	movff	UI@F3247,UI@month
  9180  0002E8  C14A  F0D7         	movff	UI@F3247+1,UI@month+1
  9181  0002EC  C14B  F0D8         	movff	UI@F3247+2,UI@month+2
  9182  0002F0  C14C  F0D9         	movff	UI@F3247+3,UI@month+3
  9183                           
  9184                           ;UI.c: 129: switch(log_startTime[5]){
  9185  0002F4  D0C3               	goto	l9381
  9186  0002F6                     l9353:
  9187                           
  9188                           ;UI.c: 131: strcpy(month, "JAN");
  9189  0002F6  0ED6               	movlw	low UI@month
  9190  0002F8  0100               	movlb	0	; () banked
  9191  0002FA  6F80               	movwf	strcpy@to& (0+255),b
  9192  0002FC  0E00               	movlw	high UI@month
  9193  0002FE  0100               	movlb	0	; () banked
  9194  000300  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9195  000302  0EDB               	movlw	low STR_8
  9196  000304  0100               	movlb	0	; () banked
  9197  000306  6F82               	movwf	strcpy@from& (0+255),b
  9198  000308  0EFF               	movlw	high STR_8
  9199  00030A  0100               	movlb	0	; () banked
  9200  00030C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9201  00030E  EC05  F02B         	call	_strcpy	;wreg free
  9202                           
  9203                           ;UI.c: 132: break;
  9204  000312  D0E6               	goto	l9383
  9205  000314                     l9355:
  9206                           
  9207                           ;UI.c: 134: strcpy(month, "FEB");
  9208  000314  0ED6               	movlw	low UI@month
  9209  000316  0100               	movlb	0	; () banked
  9210  000318  6F80               	movwf	strcpy@to& (0+255),b
  9211  00031A  0E00               	movlw	high UI@month
  9212  00031C  0100               	movlb	0	; () banked
  9213  00031E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9214  000320  0ECB               	movlw	low STR_9
  9215  000322  0100               	movlb	0	; () banked
  9216  000324  6F82               	movwf	strcpy@from& (0+255),b
  9217  000326  0EFF               	movlw	high STR_9
  9218  000328  0100               	movlb	0	; () banked
  9219  00032A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9220  00032C  EC05  F02B         	call	_strcpy	;wreg free
  9221                           
  9222                           ;UI.c: 135: break;
  9223  000330  D0D7               	goto	l9383
  9224  000332                     l9357:
  9225                           
  9226                           ;UI.c: 137: strcpy(month, "MAR");
  9227  000332  0ED6               	movlw	low UI@month
  9228  000334  0100               	movlb	0	; () banked
  9229  000336  6F80               	movwf	strcpy@to& (0+255),b
  9230  000338  0E00               	movlw	high UI@month
  9231  00033A  0100               	movlb	0	; () banked
  9232  00033C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9233  00033E  0EE7               	movlw	low STR_10
  9234  000340  0100               	movlb	0	; () banked
  9235  000342  6F82               	movwf	strcpy@from& (0+255),b
  9236  000344  0EFF               	movlw	high STR_10
  9237  000346  0100               	movlb	0	; () banked
  9238  000348  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9239  00034A  EC05  F02B         	call	_strcpy	;wreg free
  9240                           
  9241                           ;UI.c: 138: break;
  9242  00034E  D0C8               	goto	l9383
  9243  000350                     l9359:
  9244                           
  9245                           ;UI.c: 140: strcpy(month, "APR");
  9246  000350  0ED6               	movlw	low UI@month
  9247  000352  0100               	movlb	0	; () banked
  9248  000354  6F80               	movwf	strcpy@to& (0+255),b
  9249  000356  0E00               	movlw	high UI@month
  9250  000358  0100               	movlb	0	; () banked
  9251  00035A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9252  00035C  0EEB               	movlw	low STR_11
  9253  00035E  0100               	movlb	0	; () banked
  9254  000360  6F82               	movwf	strcpy@from& (0+255),b
  9255  000362  0EFF               	movlw	high STR_11
  9256  000364  0100               	movlb	0	; () banked
  9257  000366  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9258  000368  EC05  F02B         	call	_strcpy	;wreg free
  9259                           
  9260                           ;UI.c: 141: break;
  9261  00036C  D0B9               	goto	l9383
  9262  00036E                     l9361:
  9263                           
  9264                           ;UI.c: 143: strcpy(month, "MAY");
  9265  00036E  0ED6               	movlw	low UI@month
  9266  000370  0100               	movlb	0	; () banked
  9267  000372  6F80               	movwf	strcpy@to& (0+255),b
  9268  000374  0E00               	movlw	high UI@month
  9269  000376  0100               	movlb	0	; () banked
  9270  000378  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9271  00037A  0EFB               	movlw	low STR_12
  9272  00037C  0100               	movlb	0	; () banked
  9273  00037E  6F82               	movwf	strcpy@from& (0+255),b
  9274  000380  0EFF               	movlw	high STR_12
  9275  000382  0100               	movlb	0	; () banked
  9276  000384  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9277  000386  EC05  F02B         	call	_strcpy	;wreg free
  9278                           
  9279                           ;UI.c: 144: break;
  9280  00038A  D0AA               	goto	l9383
  9281  00038C                     l9363:
  9282                           
  9283                           ;UI.c: 146: strcpy(month, "JUN");
  9284  00038C  0ED6               	movlw	low UI@month
  9285  00038E  0100               	movlb	0	; () banked
  9286  000390  6F80               	movwf	strcpy@to& (0+255),b
  9287  000392  0E00               	movlw	high UI@month
  9288  000394  0100               	movlb	0	; () banked
  9289  000396  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9290  000398  0EDF               	movlw	low STR_13
  9291  00039A  0100               	movlb	0	; () banked
  9292  00039C  6F82               	movwf	strcpy@from& (0+255),b
  9293  00039E  0EFF               	movlw	high STR_13
  9294  0003A0  0100               	movlb	0	; () banked
  9295  0003A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9296  0003A4  EC05  F02B         	call	_strcpy	;wreg free
  9297                           
  9298                           ;UI.c: 147: break;
  9299  0003A8  D09B               	goto	l9383
  9300  0003AA                     l9365:
  9301                           
  9302                           ;UI.c: 149: strcpy(month, "JUL");
  9303  0003AA  0ED6               	movlw	low UI@month
  9304  0003AC  0100               	movlb	0	; () banked
  9305  0003AE  6F80               	movwf	strcpy@to& (0+255),b
  9306  0003B0  0E00               	movlw	high UI@month
  9307  0003B2  0100               	movlb	0	; () banked
  9308  0003B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9309  0003B6  0ED7               	movlw	low STR_14
  9310  0003B8  0100               	movlb	0	; () banked
  9311  0003BA  6F82               	movwf	strcpy@from& (0+255),b
  9312  0003BC  0EFF               	movlw	high STR_14
  9313  0003BE  0100               	movlb	0	; () banked
  9314  0003C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9315  0003C2  EC05  F02B         	call	_strcpy	;wreg free
  9316                           
  9317                           ;UI.c: 150: break;
  9318  0003C6  D08C               	goto	l9383
  9319  0003C8                     l9367:
  9320                           
  9321                           ;UI.c: 152: strcpy(month, "AUG");
  9322  0003C8  0ED6               	movlw	low UI@month
  9323  0003CA  0100               	movlb	0	; () banked
  9324  0003CC  6F80               	movwf	strcpy@to& (0+255),b
  9325  0003CE  0E00               	movlw	high UI@month
  9326  0003D0  0100               	movlb	0	; () banked
  9327  0003D2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9328  0003D4  0ED3               	movlw	low STR_15
  9329  0003D6  0100               	movlb	0	; () banked
  9330  0003D8  6F82               	movwf	strcpy@from& (0+255),b
  9331  0003DA  0EFF               	movlw	high STR_15
  9332  0003DC  0100               	movlb	0	; () banked
  9333  0003DE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9334  0003E0  EC05  F02B         	call	_strcpy	;wreg free
  9335                           
  9336                           ;UI.c: 153: break;
  9337  0003E4  D07D               	goto	l9383
  9338  0003E6                     l9369:
  9339                           
  9340                           ;UI.c: 155: strcpy(month, "SEP");
  9341  0003E6  0ED6               	movlw	low UI@month
  9342  0003E8  0100               	movlb	0	; () banked
  9343  0003EA  6F80               	movwf	strcpy@to& (0+255),b
  9344  0003EC  0E00               	movlw	high UI@month
  9345  0003EE  0100               	movlb	0	; () banked
  9346  0003F0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9347  0003F2  0EE3               	movlw	low STR_16
  9348  0003F4  0100               	movlb	0	; () banked
  9349  0003F6  6F82               	movwf	strcpy@from& (0+255),b
  9350  0003F8  0EFF               	movlw	high STR_16
  9351  0003FA  0100               	movlb	0	; () banked
  9352  0003FC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9353  0003FE  EC05  F02B         	call	_strcpy	;wreg free
  9354                           
  9355                           ;UI.c: 156: break;
  9356  000402  D06E               	goto	l9383
  9357  000404                     l9371:
  9358                           
  9359                           ;UI.c: 158: strcpy(month, "OCT");
  9360  000404  0ED6               	movlw	low UI@month
  9361  000406  0100               	movlb	0	; () banked
  9362  000408  6F80               	movwf	strcpy@to& (0+255),b
  9363  00040A  0E00               	movlw	high UI@month
  9364  00040C  0100               	movlb	0	; () banked
  9365  00040E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9366  000410  0EF3               	movlw	low STR_17
  9367  000412  0100               	movlb	0	; () banked
  9368  000414  6F82               	movwf	strcpy@from& (0+255),b
  9369  000416  0EFF               	movlw	high STR_17
  9370  000418  0100               	movlb	0	; () banked
  9371  00041A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9372  00041C  EC05  F02B         	call	_strcpy	;wreg free
  9373                           
  9374                           ;UI.c: 159: break;
  9375  000420  D05F               	goto	l9383
  9376  000422                     l9373:
  9377                           
  9378                           ;UI.c: 161: strcpy(month, "NOV");
  9379  000422  0ED6               	movlw	low UI@month
  9380  000424  0100               	movlb	0	; () banked
  9381  000426  6F80               	movwf	strcpy@to& (0+255),b
  9382  000428  0E00               	movlw	high UI@month
  9383  00042A  0100               	movlb	0	; () banked
  9384  00042C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9385  00042E  0EF7               	movlw	low STR_18
  9386  000430  0100               	movlb	0	; () banked
  9387  000432  6F82               	movwf	strcpy@from& (0+255),b
  9388  000434  0EFF               	movlw	high STR_18
  9389  000436  0100               	movlb	0	; () banked
  9390  000438  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9391  00043A  EC05  F02B         	call	_strcpy	;wreg free
  9392                           
  9393                           ;UI.c: 162: break;
  9394  00043E  D050               	goto	l9383
  9395  000440                     l9375:
  9396                           
  9397                           ;UI.c: 164: strcpy(month, "DEC");
  9398  000440  0ED6               	movlw	low UI@month
  9399  000442  0100               	movlb	0	; () banked
  9400  000444  6F80               	movwf	strcpy@to& (0+255),b
  9401  000446  0E00               	movlw	high UI@month
  9402  000448  0100               	movlb	0	; () banked
  9403  00044A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9404  00044C  0ECF               	movlw	low STR_19
  9405  00044E  0100               	movlb	0	; () banked
  9406  000450  6F82               	movwf	strcpy@from& (0+255),b
  9407  000452  0EFF               	movlw	high STR_19
  9408  000454  0100               	movlb	0	; () banked
  9409  000456  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9410  000458  EC05  F02B         	call	_strcpy	;wreg free
  9411                           
  9412                           ;UI.c: 165: break;
  9413  00045C  D041               	goto	l9383
  9414  00045E                     l9377:
  9415                           
  9416                           ;UI.c: 167: strcpy(month, "ERR");
  9417  00045E  0ED6               	movlw	low UI@month
  9418  000460  0100               	movlb	0	; () banked
  9419  000462  6F80               	movwf	strcpy@to& (0+255),b
  9420  000464  0E00               	movlw	high UI@month
  9421  000466  0100               	movlb	0	; () banked
  9422  000468  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9423  00046A  0EEF               	movlw	low STR_20
  9424  00046C  0100               	movlb	0	; () banked
  9425  00046E  6F82               	movwf	strcpy@from& (0+255),b
  9426  000470  0EFF               	movlw	high STR_20
  9427  000472  0100               	movlb	0	; () banked
  9428  000474  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9429  000476  EC05  F02B         	call	_strcpy	;wreg free
  9430                           
  9431                           ;UI.c: 169: }
  9432                           
  9433                           ;UI.c: 168: break;
  9434  00047A  D032               	goto	l9383
  9435  00047C                     l9381:
  9436  00047C  EE21  F00A         	lfsr	2,_log_startTime+10
  9437  000480  CFDE F0C4          	movff	postinc2,??_UI
  9438  000484  CFDD F0C5          	movff	postdec2,??_UI+1
  9439                           
  9440                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9441                           ; Switch size 1, requested type "space"
  9442                           ; Number of cases is 1, Range of values is 0 to 0
  9443                           ; switch strategies available:
  9444                           ; Name         Instructions Cycles
  9445                           ; simple_byte            4     3 (average)
  9446                           ;	Chosen strategy is simple_byte
  9447  000488  0100               	movlb	0	; () banked
  9448  00048A  51C5               	movf	(??_UI+1)& (0+255),w,b
  9449  00048C  0A00               	xorlw	0	; case 0
  9450  00048E  A4D8               	btfss	status,2,c
  9451  000490  D7E6               	goto	l9377
  9452                           
  9453                           ; BSR set to: 0
  9454                           ; Switch size 1, requested type "space"
  9455                           ; Number of cases is 12, Range of values is 1 to 12
  9456                           ; switch strategies available:
  9457                           ; Name         Instructions Cycles
  9458                           ; simple_byte           37    19 (average)
  9459                           ;	Chosen strategy is simple_byte
  9460  000492  0100               	movlb	0	; () banked
  9461  000494  51C4               	movf	??_UI& (0+255),w,b
  9462  000496  0A01               	xorlw	1	; case 1
  9463  000498  B4D8               	btfsc	status,2,c
  9464  00049A  D72D               	goto	l9353
  9465  00049C  0A03               	xorlw	3	; case 2
  9466  00049E  B4D8               	btfsc	status,2,c
  9467  0004A0  D739               	goto	l9355
  9468  0004A2  0A01               	xorlw	1	; case 3
  9469  0004A4  B4D8               	btfsc	status,2,c
  9470  0004A6  D745               	goto	l9357
  9471  0004A8  0A07               	xorlw	7	; case 4
  9472  0004AA  B4D8               	btfsc	status,2,c
  9473  0004AC  D751               	goto	l9359
  9474  0004AE  0A01               	xorlw	1	; case 5
  9475  0004B0  B4D8               	btfsc	status,2,c
  9476  0004B2  D75D               	goto	l9361
  9477  0004B4  0A03               	xorlw	3	; case 6
  9478  0004B6  B4D8               	btfsc	status,2,c
  9479  0004B8  D769               	goto	l9363
  9480  0004BA  0A01               	xorlw	1	; case 7
  9481  0004BC  B4D8               	btfsc	status,2,c
  9482  0004BE  D775               	goto	l9365
  9483  0004C0  0A0F               	xorlw	15	; case 8
  9484  0004C2  B4D8               	btfsc	status,2,c
  9485  0004C4  D781               	goto	l9367
  9486  0004C6  0A01               	xorlw	1	; case 9
  9487  0004C8  B4D8               	btfsc	status,2,c
  9488  0004CA  D78D               	goto	l9369
  9489  0004CC  0A03               	xorlw	3	; case 10
  9490  0004CE  B4D8               	btfsc	status,2,c
  9491  0004D0  D799               	goto	l9371
  9492  0004D2  0A01               	xorlw	1	; case 11
  9493  0004D4  B4D8               	btfsc	status,2,c
  9494  0004D6  D7A5               	goto	l9373
  9495  0004D8  0A07               	xorlw	7	; case 12
  9496  0004DA  B4D8               	btfsc	status,2,c
  9497  0004DC  D7B1               	goto	l9375
  9498  0004DE  D7BF               	goto	l9377
  9499  0004E0                     l9383:
  9500                           
  9501                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  9502  0004E0  0EBA               	movlw	low STR_21
  9503  0004E2  0100               	movlb	0	; () banked
  9504  0004E4  6F8E               	movwf	printf@f& (0+255),b
  9505  0004E6  0EFA               	movlw	high STR_21
  9506  0004E8  0100               	movlb	0	; () banked
  9507  0004EA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9508  0004EC  C108  F090         	movff	_log_startTime+8,?_printf+2
  9509  0004F0  C109  F091         	movff	_log_startTime+9,?_printf+3
  9510  0004F4  0ED6               	movlw	low UI@month
  9511  0004F6  0100               	movlb	0	; () banked
  9512  0004F8  6F92               	movwf	(?_printf+4)& (0+255),b
  9513  0004FA  0E00               	movlw	high UI@month
  9514  0004FC  0100               	movlb	0	; () banked
  9515  0004FE  6F93               	movwf	(?_printf+5)& (0+255),b
  9516  000500  C104  F094         	movff	_log_startTime+4,?_printf+6
  9517  000504  C105  F095         	movff	_log_startTime+5,?_printf+7
  9518  000508  C102  F096         	movff	_log_startTime+2,?_printf+8
  9519  00050C  C103  F097         	movff	_log_startTime+3,?_printf+9
  9520  000510  C100  F098         	movff	_log_startTime,?_printf+10
  9521  000514  C101  F099         	movff	_log_startTime+1,?_printf+11
  9522  000518  ECFE  F00D         	call	_printf	;wreg free
  9523                           
  9524                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9525  00051C  0E00               	movlw	0
  9526  00051E  0100               	movlb	0	; () banked
  9527  000520  6FCC               	movwf	UI@i_434& (0+255),b
  9528  000522                     l9387:
  9529                           
  9530                           ; BSR set to: 0
  9531  000522  0E63               	movlw	99
  9532  000524  0100               	movlb	0	; () banked
  9533  000526  65CC               	cpfsgt	UI@i_434& (0+255),b
  9534  000528  D001               	goto	l9391
  9535  00052A  D00C               	goto	l9395
  9536  00052C                     l9391:
  9537                           
  9538                           ; BSR set to: 0
  9539  00052C  0E68               	movlw	104
  9540  00052E  0100               	movlb	0	; () banked
  9541  000530  6FC4               	movwf	??_UI& (0+255),b
  9542  000532  0EE4               	movlw	228
  9543  000534                     u10177:
  9544  000534  2EE8               	decfsz	wreg,f,c
  9545  000536  D7FE               	bra	u10177
  9546  000538  2FC4               	decfsz	??_UI& (0+255),f,b
  9547  00053A  D7FC               	bra	u10177
  9548  00053C  F000               	nop	
  9549  00053E  0100               	movlb	0	; () banked
  9550  000540  2BCC               	incf	UI@i_434& (0+255),f,b
  9551  000542  D7EF               	goto	l9387
  9552  000544                     l9395:
  9553                           
  9554                           ; BSR set to: 0
  9555  000544  0100               	movlb	0	; () banked
  9556  000546  51F8               	movf	_logstate& (0+255),w,b
  9557  000548  0100               	movlb	0	; () banked
  9558  00054A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9559  00054C  B4D8               	btfsc	status,2,c
  9560  00054E  0012               	return	
  9561                           
  9562                           ; BSR set to: 0
  9563                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9564                           
  9565                           ; BSR set to: 0
  9566                           
  9567                           ; BSR set to: 0
  9568  000550  0E00               	movlw	0
  9569  000552  0100               	movlb	0	; () banked
  9570  000554  6FCD               	movwf	UI@i_435& (0+255),b
  9571  000556                     l9401:
  9572                           
  9573                           ; BSR set to: 0
  9574  000556  0E63               	movlw	99
  9575  000558  0100               	movlb	0	; () banked
  9576  00055A  65CD               	cpfsgt	UI@i_435& (0+255),b
  9577  00055C  D001               	goto	l9405
  9578  00055E  D00C               	goto	l9409
  9579  000560                     l9405:
  9580                           
  9581                           ; BSR set to: 0
  9582  000560  0E68               	movlw	104
  9583  000562  0100               	movlb	0	; () banked
  9584  000564  6FC4               	movwf	??_UI& (0+255),b
  9585  000566  0EE4               	movlw	228
  9586  000568                     u10187:
  9587  000568  2EE8               	decfsz	wreg,f,c
  9588  00056A  D7FE               	bra	u10187
  9589  00056C  2FC4               	decfsz	??_UI& (0+255),f,b
  9590  00056E  D7FC               	bra	u10187
  9591  000570  F000               	nop	
  9592  000572  0100               	movlb	0	; () banked
  9593  000574  2BCD               	incf	UI@i_435& (0+255),f,b
  9594  000576  D7EF               	goto	l9401
  9595  000578                     l9409:
  9596                           
  9597                           ; BSR set to: 0
  9598  000578  0100               	movlb	0	; () banked
  9599  00057A  51F8               	movf	_logstate& (0+255),w,b
  9600  00057C  0100               	movlb	0	; () banked
  9601  00057E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9602  000580  B4D8               	btfsc	status,2,c
  9603  000582  0012               	return	
  9604                           
  9605                           ; BSR set to: 0
  9606                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9607                           
  9608                           ; BSR set to: 0
  9609                           
  9610                           ; BSR set to: 0
  9611  000584  0E01               	movlw	1
  9612  000586  ECA8  F02D         	call	_lcdInst
  9613  00058A  0E68               	movlw	104
  9614  00058C  0100               	movlb	0	; () banked
  9615  00058E  6FC4               	movwf	??_UI& (0+255),b
  9616  000590  0EE4               	movlw	228
  9617  000592                     u10197:
  9618  000592  2EE8               	decfsz	wreg,f,c
  9619  000594  D7FE               	bra	u10197
  9620  000596  2FC4               	decfsz	??_UI& (0+255),f,b
  9621  000598  D7FC               	bra	u10197
  9622  00059A  F000               	nop	
  9623                           
  9624                           ;UI.c: 176: lcdInst(0b10000000);;
  9625  00059C  0E80               	movlw	128
  9626  00059E  ECA8  F02D         	call	_lcdInst
  9627                           
  9628                           ;UI.c: 177: printf("DURATION:");
  9629  0005A2  0E9B               	movlw	low STR_22
  9630  0005A4  0100               	movlb	0	; () banked
  9631  0005A6  6F8E               	movwf	printf@f& (0+255),b
  9632  0005A8  0EFF               	movlw	high STR_22
  9633  0005AA  0100               	movlb	0	; () banked
  9634  0005AC  6F8F               	movwf	(printf@f+1)& (0+255),b
  9635  0005AE  ECFE  F00D         	call	_printf	;wreg free
  9636                           
  9637                           ;UI.c: 178: lcdInst(0b11000000);;
  9638  0005B2  0EC0               	movlw	192
  9639  0005B4  ECA8  F02D         	call	_lcdInst
  9640                           
  9641                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9642  0005B8  0E0E               	movlw	14
  9643  0005BA  0100               	movlb	0	; () banked
  9644  0005BC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9645  0005BE  0E10               	movlw	16
  9646  0005C0  6F82               	movwf	___awmod@divisor& (0+255),b
  9647  0005C2  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9648  0005C6  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9649  0005CA  ECBD  F025         	call	___awmod	;wreg free
  9650  0005CE  C080  F0C6         	movff	?___awmod,_UI$2433
  9651  0005D2  C081  F0C7         	movff	?___awmod+1,_UI$2433+1
  9652                           
  9653                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9654  0005D6  0E3C               	movlw	low STR_23
  9655  0005D8  0100               	movlb	0	; () banked
  9656  0005DA  6F8E               	movwf	printf@f& (0+255),b
  9657  0005DC  0EFF               	movlw	high STR_23
  9658  0005DE  0100               	movlb	0	; () banked
  9659  0005E0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9660  0005E2  0E0E               	movlw	14
  9661  0005E4  0100               	movlb	0	; () banked
  9662  0005E6  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9663  0005E8  0E10               	movlw	16
  9664  0005EA  6F82               	movwf	___awmod@divisor& (0+255),b
  9665  0005EC  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9666  0005F0  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9667  0005F4  ECBD  F025         	call	___awmod	;wreg free
  9668  0005F8  C080  F086         	movff	?___awmod,___awdiv@dividend
  9669  0005FC  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  9670  000600  0E00               	movlw	0
  9671  000602  0100               	movlb	0	; () banked
  9672  000604  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  9673  000606  0E3C               	movlw	60
  9674  000608  6F88               	movwf	___awdiv@divisor& (0+255),b
  9675  00060A  ECAB  F024         	call	___awdiv	;wreg free
  9676  00060E  C086  F090         	movff	?___awdiv,?_printf+2
  9677  000612  C087  F091         	movff	?___awdiv+1,?_printf+3
  9678  000616  C0C6  F080         	movff	_UI$2433,___awmod@dividend
  9679  00061A  C0C7  F081         	movff	_UI$2433+1,___awmod@dividend+1
  9680  00061E  0E00               	movlw	0
  9681  000620  0100               	movlb	0	; () banked
  9682  000622  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9683  000624  0E3C               	movlw	60
  9684  000626  6F82               	movwf	___awmod@divisor& (0+255),b
  9685  000628  ECBD  F025         	call	___awmod	;wreg free
  9686  00062C  C080  F092         	movff	?___awmod,?_printf+4
  9687  000630  C081  F093         	movff	?___awmod+1,?_printf+5
  9688  000634  ECFE  F00D         	call	_printf	;wreg free
  9689                           
  9690                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9691  000638  0E00               	movlw	0
  9692  00063A  0100               	movlb	0	; () banked
  9693  00063C  6FCE               	movwf	UI@i_438& (0+255),b
  9694  00063E                     l9429:
  9695                           
  9696                           ; BSR set to: 0
  9697  00063E  0E63               	movlw	99
  9698  000640  0100               	movlb	0	; () banked
  9699  000642  65CE               	cpfsgt	UI@i_438& (0+255),b
  9700  000644  D001               	goto	l9433
  9701  000646  D00C               	goto	l9437
  9702  000648                     l9433:
  9703                           
  9704                           ; BSR set to: 0
  9705  000648  0E68               	movlw	104
  9706  00064A  0100               	movlb	0	; () banked
  9707  00064C  6FC4               	movwf	??_UI& (0+255),b
  9708  00064E  0EE4               	movlw	228
  9709  000650                     u10207:
  9710  000650  2EE8               	decfsz	wreg,f,c
  9711  000652  D7FE               	bra	u10207
  9712  000654  2FC4               	decfsz	??_UI& (0+255),f,b
  9713  000656  D7FC               	bra	u10207
  9714  000658  F000               	nop	
  9715  00065A  0100               	movlb	0	; () banked
  9716  00065C  2BCE               	incf	UI@i_438& (0+255),f,b
  9717  00065E  D7EF               	goto	l9429
  9718  000660                     l9437:
  9719                           
  9720                           ; BSR set to: 0
  9721  000660  0100               	movlb	0	; () banked
  9722  000662  51F8               	movf	_logstate& (0+255),w,b
  9723  000664  0100               	movlb	0	; () banked
  9724  000666  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9725  000668  B4D8               	btfsc	status,2,c
  9726  00066A  0012               	return	
  9727                           
  9728                           ; BSR set to: 0
  9729                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9730                           
  9731                           ; BSR set to: 0
  9732                           
  9733                           ; BSR set to: 0
  9734  00066C  0E00               	movlw	0
  9735  00066E  0100               	movlb	0	; () banked
  9736  000670  6FCF               	movwf	UI@i_439& (0+255),b
  9737  000672                     l9443:
  9738                           
  9739                           ; BSR set to: 0
  9740  000672  0E63               	movlw	99
  9741  000674  0100               	movlb	0	; () banked
  9742  000676  65CF               	cpfsgt	UI@i_439& (0+255),b
  9743  000678  D001               	goto	l9447
  9744  00067A  D00C               	goto	l9451
  9745  00067C                     l9447:
  9746                           
  9747                           ; BSR set to: 0
  9748  00067C  0E68               	movlw	104
  9749  00067E  0100               	movlb	0	; () banked
  9750  000680  6FC4               	movwf	??_UI& (0+255),b
  9751  000682  0EE4               	movlw	228
  9752  000684                     u10217:
  9753  000684  2EE8               	decfsz	wreg,f,c
  9754  000686  D7FE               	bra	u10217
  9755  000688  2FC4               	decfsz	??_UI& (0+255),f,b
  9756  00068A  D7FC               	bra	u10217
  9757  00068C  F000               	nop	
  9758  00068E  0100               	movlb	0	; () banked
  9759  000690  2BCF               	incf	UI@i_439& (0+255),f,b
  9760  000692  D7EF               	goto	l9443
  9761  000694                     l9451:
  9762                           
  9763                           ; BSR set to: 0
  9764  000694  0100               	movlb	0	; () banked
  9765  000696  51F8               	movf	_logstate& (0+255),w,b
  9766  000698  0100               	movlb	0	; () banked
  9767  00069A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9768  00069C  B4D8               	btfsc	status,2,c
  9769  00069E  0012               	return	
  9770                           
  9771                           ; BSR set to: 0
  9772                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9773                           
  9774                           ; BSR set to: 0
  9775                           
  9776                           ; BSR set to: 0
  9777  0006A0  0E01               	movlw	1
  9778  0006A2  ECA8  F02D         	call	_lcdInst
  9779  0006A6  0E68               	movlw	104
  9780  0006A8  0100               	movlb	0	; () banked
  9781  0006AA  6FC4               	movwf	??_UI& (0+255),b
  9782  0006AC  0EE4               	movlw	228
  9783  0006AE                     u10227:
  9784  0006AE  2EE8               	decfsz	wreg,f,c
  9785  0006B0  D7FE               	bra	u10227
  9786  0006B2  2FC4               	decfsz	??_UI& (0+255),f,b
  9787  0006B4  D7FC               	bra	u10227
  9788  0006B6  F000               	nop	
  9789                           
  9790                           ;UI.c: 185: lcdInst(0b10000000);;
  9791  0006B8  0E80               	movlw	128
  9792  0006BA  ECA8  F02D         	call	_lcdInst
  9793                           
  9794                           ;UI.c: 186: printf(" -- POP  CAN -- ");
  9795  0006BE  0E30               	movlw	low STR_24
  9796  0006C0  0100               	movlb	0	; () banked
  9797  0006C2  6F8E               	movwf	printf@f& (0+255),b
  9798  0006C4  0EFD               	movlw	high STR_24
  9799  0006C6  0100               	movlb	0	; () banked
  9800  0006C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9801  0006CA  ECFE  F00D         	call	_printf	;wreg free
  9802                           
  9803                           ;UI.c: 187: lcdInst(0b11000000);;
  9804  0006CE  0EC0               	movlw	192
  9805  0006D0  ECA8  F02D         	call	_lcdInst
  9806                           
  9807                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  9808  0006D4  0E0D               	movlw	low STR_25
  9809  0006D6  0100               	movlb	0	; () banked
  9810  0006D8  6F8E               	movwf	printf@f& (0+255),b
  9811  0006DA  0EFE               	movlw	high STR_25
  9812  0006DC  0100               	movlb	0	; () banked
  9813  0006DE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9814  0006E0  C0F2  F090         	movff	_log_count_pop_no_tab,?_printf+2
  9815  0006E4  C0F3  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  9816  0006E8  C0F4  F092         	movff	_log_count_pop_w_tab,?_printf+4
  9817  0006EC  C0F5  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  9818  0006F0  ECFE  F00D         	call	_printf	;wreg free
  9819                           
  9820                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9821  0006F4  0E00               	movlw	0
  9822  0006F6  0100               	movlb	0	; () banked
  9823  0006F8  6FD0               	movwf	UI@i_442& (0+255),b
  9824  0006FA                     l9469:
  9825                           
  9826                           ; BSR set to: 0
  9827  0006FA  0E63               	movlw	99
  9828  0006FC  0100               	movlb	0	; () banked
  9829  0006FE  65D0               	cpfsgt	UI@i_442& (0+255),b
  9830  000700  D001               	goto	l9473
  9831  000702  D00C               	goto	l9477
  9832  000704                     l9473:
  9833                           
  9834                           ; BSR set to: 0
  9835  000704  0E68               	movlw	104
  9836  000706  0100               	movlb	0	; () banked
  9837  000708  6FC4               	movwf	??_UI& (0+255),b
  9838  00070A  0EE4               	movlw	228
  9839  00070C                     u10237:
  9840  00070C  2EE8               	decfsz	wreg,f,c
  9841  00070E  D7FE               	bra	u10237
  9842  000710  2FC4               	decfsz	??_UI& (0+255),f,b
  9843  000712  D7FC               	bra	u10237
  9844  000714  F000               	nop	
  9845  000716  0100               	movlb	0	; () banked
  9846  000718  2BD0               	incf	UI@i_442& (0+255),f,b
  9847  00071A  D7EF               	goto	l9469
  9848  00071C                     l9477:
  9849                           
  9850                           ; BSR set to: 0
  9851  00071C  0100               	movlb	0	; () banked
  9852  00071E  51F8               	movf	_logstate& (0+255),w,b
  9853  000720  0100               	movlb	0	; () banked
  9854  000722  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9855  000724  B4D8               	btfsc	status,2,c
  9856  000726  0012               	return	
  9857                           
  9858                           ; BSR set to: 0
  9859                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9860                           
  9861                           ; BSR set to: 0
  9862                           
  9863                           ; BSR set to: 0
  9864  000728  0E00               	movlw	0
  9865  00072A  0100               	movlb	0	; () banked
  9866  00072C  6FD1               	movwf	UI@i_443& (0+255),b
  9867  00072E                     l9483:
  9868                           
  9869                           ; BSR set to: 0
  9870  00072E  0E63               	movlw	99
  9871  000730  0100               	movlb	0	; () banked
  9872  000732  65D1               	cpfsgt	UI@i_443& (0+255),b
  9873  000734  D001               	goto	l9487
  9874  000736  D00C               	goto	l9491
  9875  000738                     l9487:
  9876                           
  9877                           ; BSR set to: 0
  9878  000738  0E68               	movlw	104
  9879  00073A  0100               	movlb	0	; () banked
  9880  00073C  6FC4               	movwf	??_UI& (0+255),b
  9881  00073E  0EE4               	movlw	228
  9882  000740                     u10247:
  9883  000740  2EE8               	decfsz	wreg,f,c
  9884  000742  D7FE               	bra	u10247
  9885  000744  2FC4               	decfsz	??_UI& (0+255),f,b
  9886  000746  D7FC               	bra	u10247
  9887  000748  F000               	nop	
  9888  00074A  0100               	movlb	0	; () banked
  9889  00074C  2BD1               	incf	UI@i_443& (0+255),f,b
  9890  00074E  D7EF               	goto	l9483
  9891  000750                     l9491:
  9892                           
  9893                           ; BSR set to: 0
  9894  000750  0100               	movlb	0	; () banked
  9895  000752  51F8               	movf	_logstate& (0+255),w,b
  9896  000754  0100               	movlb	0	; () banked
  9897  000756  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9898  000758  B4D8               	btfsc	status,2,c
  9899  00075A  0012               	return	
  9900                           
  9901                           ; BSR set to: 0
  9902                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9903                           
  9904                           ; BSR set to: 0
  9905                           
  9906                           ; BSR set to: 0
  9907  00075C  0E01               	movlw	1
  9908  00075E  ECA8  F02D         	call	_lcdInst
  9909  000762  0E68               	movlw	104
  9910  000764  0100               	movlb	0	; () banked
  9911  000766  6FC4               	movwf	??_UI& (0+255),b
  9912  000768  0EE4               	movlw	228
  9913  00076A                     u10257:
  9914  00076A  2EE8               	decfsz	wreg,f,c
  9915  00076C  D7FE               	bra	u10257
  9916  00076E  2FC4               	decfsz	??_UI& (0+255),f,b
  9917  000770  D7FC               	bra	u10257
  9918  000772  F000               	nop	
  9919                           
  9920                           ;UI.c: 194: lcdInst(0b10000000);;
  9921  000774  0E80               	movlw	128
  9922  000776  ECA8  F02D         	call	_lcdInst
  9923                           
  9924                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
  9925  00077A  0E41               	movlw	low STR_26
  9926  00077C  0100               	movlb	0	; () banked
  9927  00077E  6F8E               	movwf	printf@f& (0+255),b
  9928  000780  0EFD               	movlw	high STR_26
  9929  000782  0100               	movlb	0	; () banked
  9930  000784  6F8F               	movwf	(printf@f+1)& (0+255),b
  9931  000786  ECFE  F00D         	call	_printf	;wreg free
  9932                           
  9933                           ;UI.c: 196: lcdInst(0b11000000);;
  9934  00078A  0EC0               	movlw	192
  9935  00078C  ECA8  F02D         	call	_lcdInst
  9936                           
  9937                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  9938  000790  0EFC               	movlw	low STR_27
  9939  000792  0100               	movlb	0	; () banked
  9940  000794  6F8E               	movwf	printf@f& (0+255),b
  9941  000796  0EFD               	movlw	high STR_27
  9942  000798  0100               	movlb	0	; () banked
  9943  00079A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9944  00079C  C069  F090         	movff	_log_count_can_no_lab,?_printf+2
  9945  0007A0  C06A  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  9946  0007A4  C13F  F092         	movff	_log_count_can_w_lab,?_printf+4
  9947  0007A8  C140  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  9948  0007AC  ECFE  F00D         	call	_printf	;wreg free
  9949                           
  9950                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9951  0007B0  0E00               	movlw	0
  9952  0007B2  0100               	movlb	0	; () banked
  9953  0007B4  6FD2               	movwf	UI@i_446& (0+255),b
  9954  0007B6                     l9509:
  9955                           
  9956                           ; BSR set to: 0
  9957  0007B6  0E63               	movlw	99
  9958  0007B8  0100               	movlb	0	; () banked
  9959  0007BA  65D2               	cpfsgt	UI@i_446& (0+255),b
  9960  0007BC  D001               	goto	l9513
  9961  0007BE  D00C               	goto	l9517
  9962  0007C0                     l9513:
  9963                           
  9964                           ; BSR set to: 0
  9965  0007C0  0E68               	movlw	104
  9966  0007C2  0100               	movlb	0	; () banked
  9967  0007C4  6FC4               	movwf	??_UI& (0+255),b
  9968  0007C6  0EE4               	movlw	228
  9969  0007C8                     u10267:
  9970  0007C8  2EE8               	decfsz	wreg,f,c
  9971  0007CA  D7FE               	bra	u10267
  9972  0007CC  2FC4               	decfsz	??_UI& (0+255),f,b
  9973  0007CE  D7FC               	bra	u10267
  9974  0007D0  F000               	nop	
  9975  0007D2  0100               	movlb	0	; () banked
  9976  0007D4  2BD2               	incf	UI@i_446& (0+255),f,b
  9977  0007D6  D7EF               	goto	l9509
  9978  0007D8                     l9517:
  9979                           
  9980                           ; BSR set to: 0
  9981  0007D8  0100               	movlb	0	; () banked
  9982  0007DA  51F8               	movf	_logstate& (0+255),w,b
  9983  0007DC  0100               	movlb	0	; () banked
  9984  0007DE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9985  0007E0  B4D8               	btfsc	status,2,c
  9986  0007E2  0012               	return	
  9987                           
  9988                           ; BSR set to: 0
  9989                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9990                           
  9991                           ; BSR set to: 0
  9992                           
  9993                           ; BSR set to: 0
  9994  0007E4  0E00               	movlw	0
  9995  0007E6  0100               	movlb	0	; () banked
  9996  0007E8  6FD3               	movwf	UI@i_447& (0+255),b
  9997  0007EA                     l9523:
  9998                           
  9999                           ; BSR set to: 0
 10000  0007EA  0E63               	movlw	99
 10001  0007EC  0100               	movlb	0	; () banked
 10002  0007EE  65D3               	cpfsgt	UI@i_447& (0+255),b
 10003  0007F0  D001               	goto	l9527
 10004  0007F2  D00C               	goto	l9531
 10005  0007F4                     l9527:
 10006                           
 10007                           ; BSR set to: 0
 10008  0007F4  0E68               	movlw	104
 10009  0007F6  0100               	movlb	0	; () banked
 10010  0007F8  6FC4               	movwf	??_UI& (0+255),b
 10011  0007FA  0EE4               	movlw	228
 10012  0007FC                     u10277:
 10013  0007FC  2EE8               	decfsz	wreg,f,c
 10014  0007FE  D7FE               	bra	u10277
 10015  000800  2FC4               	decfsz	??_UI& (0+255),f,b
 10016  000802  D7FC               	bra	u10277
 10017  000804  F000               	nop	
 10018  000806  0100               	movlb	0	; () banked
 10019  000808  2BD3               	incf	UI@i_447& (0+255),f,b
 10020  00080A  D7EF               	goto	l9523
 10021  00080C                     l9531:
 10022                           
 10023                           ; BSR set to: 0
 10024  00080C  0100               	movlb	0	; () banked
 10025  00080E  51F8               	movf	_logstate& (0+255),w,b
 10026  000810  0100               	movlb	0	; () banked
 10027  000812  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10028  000814  B4D8               	btfsc	status,2,c
 10029  000816  0012               	return	
 10030                           
 10031                           ; BSR set to: 0
 10032                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10033                           
 10034                           ; BSR set to: 0
 10035                           
 10036                           ; BSR set to: 0
 10037  000818  0E01               	movlw	1
 10038  00081A  ECA8  F02D         	call	_lcdInst
 10039  00081E  0E68               	movlw	104
 10040  000820  0100               	movlb	0	; () banked
 10041  000822  6FC4               	movwf	??_UI& (0+255),b
 10042  000824  0EE4               	movlw	228
 10043  000826                     u10287:
 10044  000826  2EE8               	decfsz	wreg,f,c
 10045  000828  D7FE               	bra	u10287
 10046  00082A  2FC4               	decfsz	??_UI& (0+255),f,b
 10047  00082C  D7FC               	bra	u10287
 10048  00082E  F000               	nop	
 10049                           
 10050                           ;UI.c: 203: lcdInst(0b10000000);;
 10051  000830  0E80               	movlw	128
 10052  000832  ECA8  F02D         	call	_lcdInst
 10053                           
 10054                           ;UI.c: 204: printf("-- TOTAL CANS --");
 10055  000836  0E52               	movlw	low STR_28
 10056  000838  0100               	movlb	0	; () banked
 10057  00083A  6F8E               	movwf	printf@f& (0+255),b
 10058  00083C  0EFD               	movlw	high STR_28
 10059  00083E  0100               	movlb	0	; () banked
 10060  000840  6F8F               	movwf	(printf@f+1)& (0+255),b
 10061  000842  ECFE  F00D         	call	_printf	;wreg free
 10062                           
 10063                           ;UI.c: 205: lcdInst(0b11000000);;
 10064  000846  0EC0               	movlw	192
 10065  000848  ECA8  F02D         	call	_lcdInst
 10066                           
 10067                           ;UI.c: 206: printf("%d", log_count_total);
 10068  00084C  0E0A               	movlw	low (STR_27+14)
 10069  00084E  0100               	movlb	0	; () banked
 10070  000850  6F8E               	movwf	printf@f& (0+255),b
 10071  000852  0EFE               	movlw	high (STR_27+14)
 10072  000854  0100               	movlb	0	; () banked
 10073  000856  6F8F               	movwf	(printf@f+1)& (0+255),b
 10074  000858  C141  F090         	movff	_log_count_total,?_printf+2
 10075  00085C  C142  F091         	movff	_log_count_total+1,?_printf+3
 10076  000860  ECFE  F00D         	call	_printf	;wreg free
 10077                           
 10078                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10079  000864  0E00               	movlw	0
 10080  000866  0100               	movlb	0	; () banked
 10081  000868  6FD4               	movwf	UI@i_450& (0+255),b
 10082  00086A                     l9549:
 10083                           
 10084                           ; BSR set to: 0
 10085  00086A  0E63               	movlw	99
 10086  00086C  0100               	movlb	0	; () banked
 10087  00086E  65D4               	cpfsgt	UI@i_450& (0+255),b
 10088  000870  D001               	goto	l9553
 10089  000872  D00C               	goto	l9557
 10090  000874                     l9553:
 10091                           
 10092                           ; BSR set to: 0
 10093  000874  0E68               	movlw	104
 10094  000876  0100               	movlb	0	; () banked
 10095  000878  6FC4               	movwf	??_UI& (0+255),b
 10096  00087A  0EE4               	movlw	228
 10097  00087C                     u10297:
 10098  00087C  2EE8               	decfsz	wreg,f,c
 10099  00087E  D7FE               	bra	u10297
 10100  000880  2FC4               	decfsz	??_UI& (0+255),f,b
 10101  000882  D7FC               	bra	u10297
 10102  000884  F000               	nop	
 10103  000886  0100               	movlb	0	; () banked
 10104  000888  2BD4               	incf	UI@i_450& (0+255),f,b
 10105  00088A  D7EF               	goto	l9549
 10106  00088C                     l9557:
 10107                           
 10108                           ; BSR set to: 0
 10109  00088C  0100               	movlb	0	; () banked
 10110  00088E  51F8               	movf	_logstate& (0+255),w,b
 10111  000890  0100               	movlb	0	; () banked
 10112  000892  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10113  000894  B4D8               	btfsc	status,2,c
 10114  000896  0012               	return	
 10115                           
 10116                           ; BSR set to: 0
 10117                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10118                           
 10119                           ; BSR set to: 0
 10120                           
 10121                           ; BSR set to: 0
 10122  000898  0E00               	movlw	0
 10123  00089A  0100               	movlb	0	; () banked
 10124  00089C  6FD5               	movwf	UI@i_451& (0+255),b
 10125  00089E                     l9563:
 10126                           
 10127                           ; BSR set to: 0
 10128  00089E  0E63               	movlw	99
 10129  0008A0  0100               	movlb	0	; () banked
 10130  0008A2  65D5               	cpfsgt	UI@i_451& (0+255),b
 10131  0008A4  D001               	goto	l9567
 10132  0008A6  D00C               	goto	l9571
 10133  0008A8                     l9567:
 10134                           
 10135                           ; BSR set to: 0
 10136  0008A8  0E68               	movlw	104
 10137  0008AA  0100               	movlb	0	; () banked
 10138  0008AC  6FC4               	movwf	??_UI& (0+255),b
 10139  0008AE  0EE4               	movlw	228
 10140  0008B0                     u10307:
 10141  0008B0  2EE8               	decfsz	wreg,f,c
 10142  0008B2  D7FE               	bra	u10307
 10143  0008B4  2FC4               	decfsz	??_UI& (0+255),f,b
 10144  0008B6  D7FC               	bra	u10307
 10145  0008B8  F000               	nop	
 10146  0008BA  0100               	movlb	0	; () banked
 10147  0008BC  2BD5               	incf	UI@i_451& (0+255),f,b
 10148  0008BE  D7EF               	goto	l9563
 10149  0008C0                     l9571:
 10150                           
 10151                           ; BSR set to: 0
 10152  0008C0  0100               	movlb	0	; () banked
 10153  0008C2  51F8               	movf	_logstate& (0+255),w,b
 10154  0008C4  0100               	movlb	0	; () banked
 10155  0008C6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10156  0008C8  B4D8               	btfsc	status,2,c
 10157  0008CA  0012               	return	
 10158  0008CC                     l9575:
 10159  0008CC  0100               	movlb	0	; () banked
 10160  0008CE  51F8               	movf	_logstate& (0+255),w,b
 10161  0008D0  0100               	movlb	0	; () banked
 10162  0008D2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10163  0008D4  B4D8               	btfsc	status,2,c
 10164  0008D6  0012               	return	
 10165  0008D8  D44A               	goto	l9271
 10166  0008DA                     __end_of_UI:
 10167                           	opt stack 0
 10168                           tblptru	equ	0xFF8
 10169                           tblptrh	equ	0xFF7
 10170                           tblptrl	equ	0xFF6
 10171                           tablat	equ	0xFF5
 10172                           prodh	equ	0xFF4
 10173                           prodl	equ	0xFF3
 10174                           intcon	equ	0xFF2
 10175                           intcon2	equ	0xFF1
 10176                           intcon3	equ	0xFF0
 10177                           postinc0	equ	0xFEE
 10178                           wreg	equ	0xFE8
 10179                           postdec1	equ	0xFE5
 10180                           fsr1l	equ	0xFE1
 10181                           indf2	equ	0xFDF
 10182                           postinc2	equ	0xFDE
 10183                           postdec2	equ	0xFDD
 10184                           fsr2h	equ	0xFDA
 10185                           fsr2l	equ	0xFD9
 10186                           status	equ	0xFD8
 10187                           
 10188 ;; *************** function _printRTC *****************
 10189 ;; Defined at:
 10190 ;;		line 63 in file "RTC.c"
 10191 ;; Parameters:    Size  Location     Type
 10192 ;;		None
 10193 ;; Auto vars:     Size  Location     Type
 10194 ;;  i               2   66[BANK0 ] int 
 10195 ;;  INT_time       14   46[BANK0 ] int [7]
 10196 ;;  month           4   62[BANK0 ] unsigned char [4]
 10197 ;;  RTC_month       2   60[BANK0 ] int 
 10198 ;; Return value:  Size  Location     Type
 10199 ;;                  1    wreg      void 
 10200 ;; Registers used:
 10201 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10202 ;; Tracked objects:
 10203 ;;		On entry : 0/0
 10204 ;;		On exit  : 0/0
 10205 ;;		Unchanged: 0/0
 10206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10208 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10209 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10210 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10211 ;;Total ram usage:       25 bytes
 10212 ;; Hardware stack levels used:    1
 10213 ;; Hardware stack levels required when called:   10
 10214 ;; This function calls:
 10215 ;;		_getRTC
 10216 ;;		_lcdInst
 10217 ;;		_printf
 10218 ;;		_strcpy
 10219 ;; This function is called by:
 10220 ;;		_UI
 10221 ;;		_change_state_to_menu_start
 10222 ;; This function uses a non-reentrant model
 10223 ;;
 10224                           
 10225                           	psect	text28
 10226  002DA4                     __ptext28:
 10227                           	opt stack 0
 10228  002DA4                     _printRTC:
 10229                           	opt stack 18
 10230                           
 10231                           ;RTC.c: 64: getRTC();
 10232                           
 10233                           ; BSR set to: 0
 10234                           ;incstack = 0
 10235  002DA4  EC54  F026         	call	_getRTC	;wreg free
 10236                           
 10237                           ;RTC.c: 65: char month[] = "MMM";
 10238  002DA8  C14D  F0BE         	movff	printRTC@F3237,printRTC@month
 10239  002DAC  C14E  F0BF         	movff	printRTC@F3237+1,printRTC@month+1
 10240  002DB0  C14F  F0C0         	movff	printRTC@F3237+2,printRTC@month+2
 10241  002DB4  C150  F0C1         	movff	printRTC@F3237+3,printRTC@month+3
 10242                           
 10243                           ;RTC.c: 66: int INT_time[7];
 10244                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 10245  002DB8  0E00               	movlw	0
 10246  002DBA  0100               	movlb	0	; () banked
 10247  002DBC  6FC3               	movwf	(printRTC@i+1)& (0+255),b
 10248  002DBE  0E00               	movlw	0
 10249  002DC0  6FC2               	movwf	printRTC@i& (0+255),b
 10250                           
 10251                           ; BSR set to: 0
 10252  002DC2  0100               	movlb	0	; () banked
 10253  002DC4  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10254  002DC6  D008               	goto	l7123
 10255  002DC8  0100               	movlb	0	; () banked
 10256  002DCA  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10257  002DCC  E146               	bnz	l627
 10258  002DCE  0E07               	movlw	7
 10259  002DD0  0100               	movlb	0	; () banked
 10260  002DD2  5DC2               	subwf	printRTC@i& (0+255),w,b
 10261  002DD4  B0D8               	btfsc	status,0,c
 10262  002DD6  D041               	goto	l627
 10263  002DD8                     l7123:
 10264                           
 10265                           ; BSR set to: 0
 10266                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 10267  002DD8  0E1C               	movlw	low _time
 10268  002DDA  0100               	movlb	0	; () banked
 10269  002DDC  25C2               	addwf	printRTC@i& (0+255),w,b
 10270  002DDE  6ED9               	movwf	fsr2l,c
 10271  002DE0  0E01               	movlw	high _time
 10272  002DE2  0100               	movlb	0	; () banked
 10273  002DE4  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10274  002DE6  6EDA               	movwf	fsr2h,c
 10275  002DE8  50DF               	movf	indf2,w,c
 10276  002DEA  0100               	movlb	0	; () banked
 10277  002DEC  6FAB               	movwf	??_printRTC& (0+255),b
 10278  002DEE  0100               	movlb	0	; () banked
 10279  002DF0  3BAB               	swapf	??_printRTC& (0+255),f,b
 10280  002DF2  0E0F               	movlw	15
 10281  002DF4  17AB               	andwf	??_printRTC& (0+255),f,b
 10282  002DF6  0E0F               	movlw	15
 10283  002DF8  0100               	movlb	0	; () banked
 10284  002DFA  17AB               	andwf	??_printRTC& (0+255),f,b
 10285  002DFC  0100               	movlb	0	; () banked
 10286  002DFE  51AB               	movf	??_printRTC& (0+255),w,b
 10287  002E00  0D0A               	mullw	10
 10288  002E02  0E1C               	movlw	low _time
 10289  002E04  0100               	movlb	0	; () banked
 10290  002E06  25C2               	addwf	printRTC@i& (0+255),w,b
 10291  002E08  6ED9               	movwf	fsr2l,c
 10292  002E0A  0E01               	movlw	high _time
 10293  002E0C  0100               	movlb	0	; () banked
 10294  002E0E  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10295  002E10  6EDA               	movwf	fsr2h,c
 10296  002E12  50DF               	movf	indf2,w,c
 10297  002E14  0B0F               	andlw	15
 10298  002E16  0100               	movlb	0	; () banked
 10299  002E18  6FAC               	movwf	(??_printRTC+1)& (0+255),b
 10300  002E1A  6BAD               	clrf	(??_printRTC+2)& (0+255),b
 10301  002E1C  50F3               	movf	prodl,w,c
 10302  002E1E  0100               	movlb	0	; () banked
 10303  002E20  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
 10304  002E22  50F4               	movf	prodh,w,c
 10305  002E24  0100               	movlb	0	; () banked
 10306  002E26  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
 10307  002E28  90D8               	bcf	status,0,c
 10308  002E2A  0100               	movlb	0	; () banked
 10309  002E2C  35C2               	rlcf	printRTC@i& (0+255),w,b
 10310  002E2E  6ED9               	movwf	fsr2l,c
 10311  002E30  0100               	movlb	0	; () banked
 10312  002E32  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
 10313  002E34  6EDA               	movwf	fsr2h,c
 10314  002E36  0EAE               	movlw	low printRTC@INT_time
 10315  002E38  26D9               	addwf	fsr2l,f,c
 10316  002E3A  0E00               	movlw	high printRTC@INT_time
 10317  002E3C  22DA               	addwfc	fsr2h,f,c
 10318  002E3E  C0AC  FFDE         	movff	??_printRTC+1,postinc2
 10319  002E42  C0AD  FFDD         	movff	??_printRTC+2,postdec2
 10320                           
 10321                           ; BSR set to: 0
 10322  002E46  0100               	movlb	0	; () banked
 10323  002E48  4BC2               	infsnz	printRTC@i& (0+255),f,b
 10324  002E4A  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
 10325                           
 10326                           ; BSR set to: 0
 10327  002E4C  0100               	movlb	0	; () banked
 10328  002E4E  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10329  002E50  D7C3               	goto	l7123
 10330  002E52  0100               	movlb	0	; () banked
 10331  002E54  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10332  002E56  E101               	bnz	u5900
 10333  002E58  D7BA               	goto	L10
 10334  002E5A                     u5900:
 10335  002E5A                     l627:
 10336                           
 10337                           ; BSR set to: 0
 10338                           ;RTC.c: 69: }
 10339                           ;RTC.c: 70: int RTC_month = INT_time[5];
 10340  002E5A  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
 10341  002E5E  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
 10342                           
 10343                           ;RTC.c: 72: switch(RTC_month){
 10344  002E62  D0B4               	goto	l7155
 10345  002E64                     l7129:
 10346                           
 10347                           ; BSR set to: 0
 10348                           ;RTC.c: 74: strcpy(month, "JAN");
 10349  002E64  0EBE               	movlw	low printRTC@month
 10350  002E66  0100               	movlb	0	; () banked
 10351  002E68  6F80               	movwf	strcpy@to& (0+255),b
 10352  002E6A  0E00               	movlw	high printRTC@month
 10353  002E6C  0100               	movlb	0	; () banked
 10354  002E6E  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10355  002E70  0EDB               	movlw	low STR_8
 10356  002E72  0100               	movlb	0	; () banked
 10357  002E74  6F82               	movwf	strcpy@from& (0+255),b
 10358  002E76  0EFF               	movlw	high STR_8
 10359  002E78  0100               	movlb	0	; () banked
 10360  002E7A  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10361  002E7C  EC05  F02B         	call	_strcpy	;wreg free
 10362                           
 10363                           ;RTC.c: 75: break;
 10364  002E80  D0D4               	goto	l7157
 10365  002E82                     l7131:
 10366                           
 10367                           ;RTC.c: 77: strcpy(month, "FEB");
 10368  002E82  0EBE               	movlw	low printRTC@month
 10369  002E84  0100               	movlb	0	; () banked
 10370  002E86  6F80               	movwf	strcpy@to& (0+255),b
 10371  002E88  0E00               	movlw	high printRTC@month
 10372  002E8A  0100               	movlb	0	; () banked
 10373  002E8C  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10374  002E8E  0ECB               	movlw	low STR_9
 10375  002E90  0100               	movlb	0	; () banked
 10376  002E92  6F82               	movwf	strcpy@from& (0+255),b
 10377  002E94  0EFF               	movlw	high STR_9
 10378  002E96  0100               	movlb	0	; () banked
 10379  002E98  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10380  002E9A  EC05  F02B         	call	_strcpy	;wreg free
 10381                           
 10382                           ;RTC.c: 78: break;
 10383  002E9E  D0C5               	goto	l7157
 10384  002EA0                     l7133:
 10385                           
 10386                           ;RTC.c: 80: strcpy(month, "MAR");
 10387  002EA0  0EBE               	movlw	low printRTC@month
 10388  002EA2  0100               	movlb	0	; () banked
 10389  002EA4  6F80               	movwf	strcpy@to& (0+255),b
 10390  002EA6  0E00               	movlw	high printRTC@month
 10391  002EA8  0100               	movlb	0	; () banked
 10392  002EAA  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10393  002EAC  0EE7               	movlw	low STR_10
 10394  002EAE  0100               	movlb	0	; () banked
 10395  002EB0  6F82               	movwf	strcpy@from& (0+255),b
 10396  002EB2  0EFF               	movlw	high STR_10
 10397  002EB4  0100               	movlb	0	; () banked
 10398  002EB6  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10399  002EB8  EC05  F02B         	call	_strcpy	;wreg free
 10400                           
 10401                           ;RTC.c: 81: break;
 10402  002EBC  D0B6               	goto	l7157
 10403  002EBE                     l7135:
 10404                           
 10405                           ;RTC.c: 83: strcpy(month, "APR");
 10406  002EBE  0EBE               	movlw	low printRTC@month
 10407  002EC0  0100               	movlb	0	; () banked
 10408  002EC2  6F80               	movwf	strcpy@to& (0+255),b
 10409  002EC4  0E00               	movlw	high printRTC@month
 10410  002EC6  0100               	movlb	0	; () banked
 10411  002EC8  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10412  002ECA  0EEB               	movlw	low STR_11
 10413  002ECC  0100               	movlb	0	; () banked
 10414  002ECE  6F82               	movwf	strcpy@from& (0+255),b
 10415  002ED0  0EFF               	movlw	high STR_11
 10416  002ED2  0100               	movlb	0	; () banked
 10417  002ED4  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10418  002ED6  EC05  F02B         	call	_strcpy	;wreg free
 10419                           
 10420                           ;RTC.c: 84: break;
 10421  002EDA  D0A7               	goto	l7157
 10422  002EDC                     l7137:
 10423                           
 10424                           ;RTC.c: 86: strcpy(month, "MAY");
 10425  002EDC  0EBE               	movlw	low printRTC@month
 10426  002EDE  0100               	movlb	0	; () banked
 10427  002EE0  6F80               	movwf	strcpy@to& (0+255),b
 10428  002EE2  0E00               	movlw	high printRTC@month
 10429  002EE4  0100               	movlb	0	; () banked
 10430  002EE6  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10431  002EE8  0EFB               	movlw	low STR_12
 10432  002EEA  0100               	movlb	0	; () banked
 10433  002EEC  6F82               	movwf	strcpy@from& (0+255),b
 10434  002EEE  0EFF               	movlw	high STR_12
 10435  002EF0  0100               	movlb	0	; () banked
 10436  002EF2  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10437  002EF4  EC05  F02B         	call	_strcpy	;wreg free
 10438                           
 10439                           ;RTC.c: 87: break;
 10440  002EF8  D098               	goto	l7157
 10441  002EFA                     l7139:
 10442                           
 10443                           ;RTC.c: 89: strcpy(month, "JUN");
 10444  002EFA  0EBE               	movlw	low printRTC@month
 10445  002EFC  0100               	movlb	0	; () banked
 10446  002EFE  6F80               	movwf	strcpy@to& (0+255),b
 10447  002F00  0E00               	movlw	high printRTC@month
 10448  002F02  0100               	movlb	0	; () banked
 10449  002F04  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10450  002F06  0EDF               	movlw	low STR_13
 10451  002F08  0100               	movlb	0	; () banked
 10452  002F0A  6F82               	movwf	strcpy@from& (0+255),b
 10453  002F0C  0EFF               	movlw	high STR_13
 10454  002F0E  0100               	movlb	0	; () banked
 10455  002F10  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10456  002F12  EC05  F02B         	call	_strcpy	;wreg free
 10457                           
 10458                           ;RTC.c: 90: break;
 10459  002F16  D089               	goto	l7157
 10460  002F18                     l7141:
 10461                           
 10462                           ;RTC.c: 92: strcpy(month, "JUL");
 10463  002F18  0EBE               	movlw	low printRTC@month
 10464  002F1A  0100               	movlb	0	; () banked
 10465  002F1C  6F80               	movwf	strcpy@to& (0+255),b
 10466  002F1E  0E00               	movlw	high printRTC@month
 10467  002F20  0100               	movlb	0	; () banked
 10468  002F22  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10469  002F24  0ED7               	movlw	low STR_14
 10470  002F26  0100               	movlb	0	; () banked
 10471  002F28  6F82               	movwf	strcpy@from& (0+255),b
 10472  002F2A  0EFF               	movlw	high STR_14
 10473  002F2C  0100               	movlb	0	; () banked
 10474  002F2E  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10475  002F30  EC05  F02B         	call	_strcpy	;wreg free
 10476                           
 10477                           ;RTC.c: 93: break;
 10478  002F34  D07A               	goto	l7157
 10479  002F36                     l7143:
 10480                           
 10481                           ;RTC.c: 95: strcpy(month, "AUG");
 10482  002F36  0EBE               	movlw	low printRTC@month
 10483  002F38  0100               	movlb	0	; () banked
 10484  002F3A  6F80               	movwf	strcpy@to& (0+255),b
 10485  002F3C  0E00               	movlw	high printRTC@month
 10486  002F3E  0100               	movlb	0	; () banked
 10487  002F40  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10488  002F42  0ED3               	movlw	low STR_15
 10489  002F44  0100               	movlb	0	; () banked
 10490  002F46  6F82               	movwf	strcpy@from& (0+255),b
 10491  002F48  0EFF               	movlw	high STR_15
 10492  002F4A  0100               	movlb	0	; () banked
 10493  002F4C  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10494  002F4E  EC05  F02B         	call	_strcpy	;wreg free
 10495                           
 10496                           ;RTC.c: 96: break;
 10497  002F52  D06B               	goto	l7157
 10498  002F54                     l7145:
 10499                           
 10500                           ;RTC.c: 98: strcpy(month, "SEP");
 10501  002F54  0EBE               	movlw	low printRTC@month
 10502  002F56  0100               	movlb	0	; () banked
 10503  002F58  6F80               	movwf	strcpy@to& (0+255),b
 10504  002F5A  0E00               	movlw	high printRTC@month
 10505  002F5C  0100               	movlb	0	; () banked
 10506  002F5E  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10507  002F60  0EE3               	movlw	low STR_16
 10508  002F62  0100               	movlb	0	; () banked
 10509  002F64  6F82               	movwf	strcpy@from& (0+255),b
 10510  002F66  0EFF               	movlw	high STR_16
 10511  002F68  0100               	movlb	0	; () banked
 10512  002F6A  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10513  002F6C  EC05  F02B         	call	_strcpy	;wreg free
 10514                           
 10515                           ;RTC.c: 99: break;
 10516  002F70  D05C               	goto	l7157
 10517  002F72                     l7147:
 10518                           
 10519                           ;RTC.c: 101: strcpy(month, "OCT");
 10520  002F72  0EBE               	movlw	low printRTC@month
 10521  002F74  0100               	movlb	0	; () banked
 10522  002F76  6F80               	movwf	strcpy@to& (0+255),b
 10523  002F78  0E00               	movlw	high printRTC@month
 10524  002F7A  0100               	movlb	0	; () banked
 10525  002F7C  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10526  002F7E  0EF3               	movlw	low STR_17
 10527  002F80  0100               	movlb	0	; () banked
 10528  002F82  6F82               	movwf	strcpy@from& (0+255),b
 10529  002F84  0EFF               	movlw	high STR_17
 10530  002F86  0100               	movlb	0	; () banked
 10531  002F88  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10532  002F8A  EC05  F02B         	call	_strcpy	;wreg free
 10533                           
 10534                           ;RTC.c: 102: break;
 10535  002F8E  D04D               	goto	l7157
 10536  002F90                     l7149:
 10537                           
 10538                           ;RTC.c: 104: strcpy(month, "NOV");
 10539  002F90  0EBE               	movlw	low printRTC@month
 10540  002F92  0100               	movlb	0	; () banked
 10541  002F94  6F80               	movwf	strcpy@to& (0+255),b
 10542  002F96  0E00               	movlw	high printRTC@month
 10543  002F98  0100               	movlb	0	; () banked
 10544  002F9A  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10545  002F9C  0EF7               	movlw	low STR_18
 10546  002F9E  0100               	movlb	0	; () banked
 10547  002FA0  6F82               	movwf	strcpy@from& (0+255),b
 10548  002FA2  0EFF               	movlw	high STR_18
 10549  002FA4  0100               	movlb	0	; () banked
 10550  002FA6  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10551  002FA8  EC05  F02B         	call	_strcpy	;wreg free
 10552                           
 10553                           ;RTC.c: 105: break;
 10554  002FAC  D03E               	goto	l7157
 10555  002FAE                     l7151:
 10556                           
 10557                           ;RTC.c: 107: strcpy(month, "DEC");
 10558  002FAE  0EBE               	movlw	low printRTC@month
 10559  002FB0  0100               	movlb	0	; () banked
 10560  002FB2  6F80               	movwf	strcpy@to& (0+255),b
 10561  002FB4  0E00               	movlw	high printRTC@month
 10562  002FB6  0100               	movlb	0	; () banked
 10563  002FB8  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10564  002FBA  0ECF               	movlw	low STR_19
 10565  002FBC  0100               	movlb	0	; () banked
 10566  002FBE  6F82               	movwf	strcpy@from& (0+255),b
 10567  002FC0  0EFF               	movlw	high STR_19
 10568  002FC2  0100               	movlb	0	; () banked
 10569  002FC4  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10570  002FC6  EC05  F02B         	call	_strcpy	;wreg free
 10571                           
 10572                           ;RTC.c: 109: }
 10573                           
 10574                           ;RTC.c: 108: break;
 10575  002FCA  D02F               	goto	l7157
 10576  002FCC                     l7155:
 10577  002FCC  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
 10578  002FD0  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
 10579                           
 10580                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10581                           ; Switch size 1, requested type "space"
 10582                           ; Number of cases is 1, Range of values is 0 to 0
 10583                           ; switch strategies available:
 10584                           ; Name         Instructions Cycles
 10585                           ; simple_byte            4     3 (average)
 10586                           ;	Chosen strategy is simple_byte
 10587  002FD4  0100               	movlb	0	; () banked
 10588  002FD6  51AC               	movf	(??_printRTC+1)& (0+255),w,b
 10589  002FD8  0A00               	xorlw	0	; case 0
 10590  002FDA  A4D8               	btfss	status,2,c
 10591  002FDC  D026               	goto	l7157
 10592                           
 10593                           ; BSR set to: 0
 10594                           ; Switch size 1, requested type "space"
 10595                           ; Number of cases is 12, Range of values is 1 to 12
 10596                           ; switch strategies available:
 10597                           ; Name         Instructions Cycles
 10598                           ; simple_byte           37    19 (average)
 10599                           ;	Chosen strategy is simple_byte
 10600  002FDE  0100               	movlb	0	; () banked
 10601  002FE0  51AB               	movf	??_printRTC& (0+255),w,b
 10602  002FE2  0A01               	xorlw	1	; case 1
 10603  002FE4  B4D8               	btfsc	status,2,c
 10604  002FE6  D73E               	goto	l7129
 10605  002FE8  0A03               	xorlw	3	; case 2
 10606  002FEA  B4D8               	btfsc	status,2,c
 10607  002FEC  D74A               	goto	l7131
 10608  002FEE  0A01               	xorlw	1	; case 3
 10609  002FF0  B4D8               	btfsc	status,2,c
 10610  002FF2  D756               	goto	l7133
 10611  002FF4  0A07               	xorlw	7	; case 4
 10612  002FF6  B4D8               	btfsc	status,2,c
 10613  002FF8  D762               	goto	l7135
 10614  002FFA  0A01               	xorlw	1	; case 5
 10615  002FFC  B4D8               	btfsc	status,2,c
 10616  002FFE  D76E               	goto	l7137
 10617  003000  0A03               	xorlw	3	; case 6
 10618  003002  B4D8               	btfsc	status,2,c
 10619  003004  D77A               	goto	l7139
 10620  003006  0A01               	xorlw	1	; case 7
 10621  003008  B4D8               	btfsc	status,2,c
 10622  00300A  D786               	goto	l7141
 10623  00300C  0A0F               	xorlw	15	; case 8
 10624  00300E  B4D8               	btfsc	status,2,c
 10625  003010  D792               	goto	l7143
 10626  003012  0A01               	xorlw	1	; case 9
 10627  003014  B4D8               	btfsc	status,2,c
 10628  003016  D79E               	goto	l7145
 10629  003018  0A03               	xorlw	3	; case 10
 10630  00301A  B4D8               	btfsc	status,2,c
 10631  00301C  D7AA               	goto	l7147
 10632  00301E  0A01               	xorlw	1	; case 11
 10633  003020  B4D8               	btfsc	status,2,c
 10634  003022  D7B6               	goto	l7149
 10635  003024  0A07               	xorlw	7	; case 12
 10636  003026  B4D8               	btfsc	status,2,c
 10637  003028  D7C2               	goto	l7151
 10638  00302A                     l7157:
 10639                           
 10640                           ;RTC.c: 110: lcdInst(0b10000000);;
 10641  00302A  0E80               	movlw	128
 10642  00302C  ECA8  F02D         	call	_lcdInst
 10643                           
 10644                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 10645  003030  0EBA               	movlw	low STR_21
 10646  003032  0100               	movlb	0	; () banked
 10647  003034  6F8E               	movwf	printf@f& (0+255),b
 10648  003036  0EFA               	movlw	high STR_21
 10649  003038  0100               	movlb	0	; () banked
 10650  00303A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10651  00303C  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
 10652  003040  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
 10653  003044  0EBE               	movlw	low printRTC@month
 10654  003046  0100               	movlb	0	; () banked
 10655  003048  6F92               	movwf	(?_printf+4)& (0+255),b
 10656  00304A  0E00               	movlw	high printRTC@month
 10657  00304C  0100               	movlb	0	; () banked
 10658  00304E  6F93               	movwf	(?_printf+5)& (0+255),b
 10659  003050  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
 10660  003054  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
 10661  003058  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
 10662  00305C  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
 10663  003060  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
 10664  003064  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
 10665  003068  ECFE  F00D         	call	_printf	;wreg free
 10666  00306C  0012               	return		;funcret
 10667  00306E                     __end_of_printRTC:
 10668                           	opt stack 0
 10669                           tblptru	equ	0xFF8
 10670                           tblptrh	equ	0xFF7
 10671                           tblptrl	equ	0xFF6
 10672                           tablat	equ	0xFF5
 10673                           prodh	equ	0xFF4
 10674                           prodl	equ	0xFF3
 10675                           intcon	equ	0xFF2
 10676                           intcon2	equ	0xFF1
 10677                           intcon3	equ	0xFF0
 10678                           postinc0	equ	0xFEE
 10679                           wreg	equ	0xFE8
 10680                           postdec1	equ	0xFE5
 10681                           fsr1l	equ	0xFE1
 10682                           indf2	equ	0xFDF
 10683                           postinc2	equ	0xFDE
 10684                           postdec2	equ	0xFDD
 10685                           fsr2h	equ	0xFDA
 10686                           fsr2l	equ	0xFD9
 10687                           status	equ	0xFD8
 10688                           
 10689 ;; *************** function _strcpy *****************
 10690 ;; Defined at:
 10691 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 10692 ;; Parameters:    Size  Location     Type
 10693 ;;  to              2    0[BANK0 ] PTR unsigned char 
 10694 ;;		 -> printRTC@month(4), UI@month(4), 
 10695 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 10696 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 10697 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 10698 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 10699 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 10700 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 10701 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 10702 ;;		 -> STR_8(4), 
 10703 ;; Auto vars:     Size  Location     Type
 10704 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 10705 ;;		 -> printRTC@month(4), UI@month(4), 
 10706 ;; Return value:  Size  Location     Type
 10707 ;;                  2    0[BANK0 ] PTR unsigned char 
 10708 ;; Registers used:
 10709 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10710 ;; Tracked objects:
 10711 ;;		On entry : 0/0
 10712 ;;		On exit  : 0/0
 10713 ;;		Unchanged: 0/0
 10714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10715 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10716 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10718 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10719 ;;Total ram usage:        6 bytes
 10720 ;; Hardware stack levels used:    1
 10721 ;; Hardware stack levels required when called:    7
 10722 ;; This function calls:
 10723 ;;		Nothing
 10724 ;; This function is called by:
 10725 ;;		_UI
 10726 ;;		_printRTC
 10727 ;; This function uses a non-reentrant model
 10728 ;;
 10729                           
 10730                           	psect	text29
 10731  00560A                     __ptext29:
 10732                           	opt stack 0
 10733  00560A                     _strcpy:
 10734                           	opt stack 20
 10735                           
 10736                           ;incstack = 0
 10737  00560A  C080  F084         	movff	strcpy@to,strcpy@cp
 10738  00560E  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
 10739  005612  D006               	goto	l6821
 10740  005614                     l6819:
 10741  005614  0100               	movlb	0	; () banked
 10742  005616  4B84               	infsnz	strcpy@cp& (0+255),f,b
 10743  005618  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
 10744  00561A  0100               	movlb	0	; () banked
 10745  00561C  4B82               	infsnz	strcpy@from& (0+255),f,b
 10746  00561E  2B83               	incf	(strcpy@from+1)& (0+255),f,b
 10747  005620                     l6821:
 10748  005620  C082  FFF6         	movff	strcpy@from,tblptrl
 10749  005624  C083  FFF7         	movff	strcpy@from+1,tblptrh
 10750  005628                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10751  005628  6AF8               	clrf	tblptru,c
 10752  00562A                     	endif
 10753  00562A                     	if	0	;tblptru may be non-zero
 10754  00562A                     	endif
 10755  00562A  C084  FFD9         	movff	strcpy@cp,fsr2l
 10756  00562E  C085  FFDA         	movff	strcpy@cp+1,fsr2h
 10757  005632  0008               	tblrd		*
 10758  005634  CFF5 FFDF          	movff	tablat,indf2
 10759  005638  50DF               	movf	indf2,w,c
 10760  00563A  B4D8               	btfsc	status,2,c
 10761  00563C  0012               	return	
 10762  00563E  D7EA               	goto	l6819
 10763  005640                     __end_of_strcpy:
 10764                           	opt stack 0
 10765                           tblptru	equ	0xFF8
 10766                           tblptrh	equ	0xFF7
 10767                           tblptrl	equ	0xFF6
 10768                           tablat	equ	0xFF5
 10769                           prodh	equ	0xFF4
 10770                           prodl	equ	0xFF3
 10771                           intcon	equ	0xFF2
 10772                           intcon2	equ	0xFF1
 10773                           intcon3	equ	0xFF0
 10774                           postinc0	equ	0xFEE
 10775                           wreg	equ	0xFE8
 10776                           postdec1	equ	0xFE5
 10777                           fsr1l	equ	0xFE1
 10778                           indf2	equ	0xFDF
 10779                           postinc2	equ	0xFDE
 10780                           postdec2	equ	0xFDD
 10781                           fsr2h	equ	0xFDA
 10782                           fsr2l	equ	0xFD9
 10783                           status	equ	0xFD8
 10784                           
 10785 ;; *************** function _getRTC *****************
 10786 ;; Defined at:
 10787 ;;		line 44 in file "RTC.c"
 10788 ;; Parameters:    Size  Location     Type
 10789 ;;		None
 10790 ;; Auto vars:     Size  Location     Type
 10791 ;;  i               2    3[BANK0 ] int 
 10792 ;; Return value:  Size  Location     Type
 10793 ;;                  1    wreg      void 
 10794 ;; Registers used:
 10795 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10796 ;; Tracked objects:
 10797 ;;		On entry : 0/0
 10798 ;;		On exit  : 0/0
 10799 ;;		Unchanged: 0/0
 10800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10802 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10804 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10805 ;;Total ram usage:        2 bytes
 10806 ;; Hardware stack levels used:    1
 10807 ;; Hardware stack levels required when called:    9
 10808 ;; This function calls:
 10809 ;;		_I2C_Master_Read
 10810 ;;		_I2C_Master_Start
 10811 ;;		_I2C_Master_Stop
 10812 ;;		_I2C_Master_Write
 10813 ;; This function is called by:
 10814 ;;		_printRTC
 10815 ;;		_initSortTimer
 10816 ;; This function uses a non-reentrant model
 10817 ;;
 10818                           
 10819                           	psect	text30
 10820  004CA8                     __ptext30:
 10821                           	opt stack 0
 10822  004CA8                     _getRTC:
 10823                           	opt stack 18
 10824                           
 10825                           ;RTC.c: 48: I2C_Master_Start();
 10826                           
 10827                           ;incstack = 0
 10828  004CA8  ECCE  F02D         	call	_I2C_Master_Start	;wreg free
 10829                           
 10830                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 10831  004CAC  0E00               	movlw	0
 10832  004CAE  0100               	movlb	0	; () banked
 10833  004CB0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10834  004CB2  0ED0               	movlw	208
 10835  004CB4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10836  004CB6  ECBC  F02D         	call	_I2C_Master_Write	;wreg free
 10837                           
 10838                           ;RTC.c: 50: I2C_Master_Write(0x00);
 10839  004CBA  0E00               	movlw	0
 10840  004CBC  0100               	movlb	0	; () banked
 10841  004CBE  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10842  004CC0  0E00               	movlw	0
 10843  004CC2  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10844  004CC4  ECBC  F02D         	call	_I2C_Master_Write	;wreg free
 10845                           
 10846                           ;RTC.c: 51: I2C_Master_Stop();
 10847  004CC8  ECCA  F02D         	call	_I2C_Master_Stop	;wreg free
 10848                           
 10849                           ;RTC.c: 54: I2C_Master_Start();
 10850  004CCC  ECCE  F02D         	call	_I2C_Master_Start	;wreg free
 10851                           
 10852                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 10853  004CD0  0E00               	movlw	0
 10854  004CD2  0100               	movlb	0	; () banked
 10855  004CD4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10856  004CD6  0ED1               	movlw	209
 10857  004CD8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10858  004CDA  ECBC  F02D         	call	_I2C_Master_Write	;wreg free
 10859                           
 10860                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 10861  004CDE  0E00               	movlw	0
 10862  004CE0  0100               	movlb	0	; () banked
 10863  004CE2  6F84               	movwf	(getRTC@i+1)& (0+255),b
 10864  004CE4  0E00               	movlw	0
 10865  004CE6  6F83               	movwf	getRTC@i& (0+255),b
 10866  004CE8                     l6827:
 10867                           
 10868                           ; BSR set to: 0
 10869  004CE8  0100               	movlb	0	; () banked
 10870  004CEA  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
 10871  004CEC  D008               	goto	l6831
 10872  004CEE  0100               	movlb	0	; () banked
 10873  004CF0  5184               	movf	(getRTC@i+1)& (0+255),w,b
 10874  004CF2  E115               	bnz	l6837
 10875  004CF4  0E06               	movlw	6
 10876  004CF6  0100               	movlb	0	; () banked
 10877  004CF8  5D83               	subwf	getRTC@i& (0+255),w,b
 10878  004CFA  B0D8               	btfsc	status,0,c
 10879  004CFC  D010               	goto	l6837
 10880  004CFE                     l6831:
 10881                           
 10882                           ; BSR set to: 0
 10883                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 10884  004CFE  0E1C               	movlw	low _time
 10885  004D00  0100               	movlb	0	; () banked
 10886  004D02  2583               	addwf	getRTC@i& (0+255),w,b
 10887  004D04  6ED9               	movwf	fsr2l,c
 10888  004D06  0E01               	movlw	high _time
 10889  004D08  0100               	movlb	0	; () banked
 10890  004D0A  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
 10891  004D0C  6EDA               	movwf	fsr2h,c
 10892  004D0E  0E01               	movlw	1
 10893  004D10  EC5D  F02C         	call	_I2C_Master_Read
 10894  004D14  6EDF               	movwf	indf2,c
 10895  004D16  0100               	movlb	0	; () banked
 10896  004D18  4B83               	infsnz	getRTC@i& (0+255),f,b
 10897  004D1A  2B84               	incf	(getRTC@i+1)& (0+255),f,b
 10898  004D1C  D7E5               	goto	l6827
 10899  004D1E                     l6837:
 10900                           
 10901                           ; BSR set to: 0
 10902                           ;RTC.c: 58: }
 10903                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 10904  004D1E  0E00               	movlw	0
 10905  004D20  EC5D  F02C         	call	_I2C_Master_Read
 10906  004D24  0101               	movlb	1	; () banked
 10907  004D26  6F22               	movwf	(_time+6)& (0+255),b
 10908                           
 10909                           ;RTC.c: 60: I2C_Master_Stop();
 10910  004D28  ECCA  F02D         	call	_I2C_Master_Stop	;wreg free
 10911  004D2C  0012               	return		;funcret
 10912  004D2E                     __end_of_getRTC:
 10913                           	opt stack 0
 10914                           tblptru	equ	0xFF8
 10915                           tblptrh	equ	0xFF7
 10916                           tblptrl	equ	0xFF6
 10917                           tablat	equ	0xFF5
 10918                           prodh	equ	0xFF4
 10919                           prodl	equ	0xFF3
 10920                           intcon	equ	0xFF2
 10921                           intcon2	equ	0xFF1
 10922                           intcon3	equ	0xFF0
 10923                           postinc0	equ	0xFEE
 10924                           wreg	equ	0xFE8
 10925                           postdec1	equ	0xFE5
 10926                           fsr1l	equ	0xFE1
 10927                           indf2	equ	0xFDF
 10928                           postinc2	equ	0xFDE
 10929                           postdec2	equ	0xFDD
 10930                           fsr2h	equ	0xFDA
 10931                           fsr2l	equ	0xFD9
 10932                           status	equ	0xFD8
 10933                           
 10934 ;; *************** function _I2C_Master_Write *****************
 10935 ;; Defined at:
 10936 ;;		line 49 in file "I2C.c"
 10937 ;; Parameters:    Size  Location     Type
 10938 ;;  d               2    1[BANK0 ] unsigned int 
 10939 ;; Auto vars:     Size  Location     Type
 10940 ;;		None
 10941 ;; Return value:  Size  Location     Type
 10942 ;;                  1    wreg      void 
 10943 ;; Registers used:
 10944 ;;		wreg, status,2, status,0, cstack
 10945 ;; Tracked objects:
 10946 ;;		On entry : 0/0
 10947 ;;		On exit  : 0/0
 10948 ;;		Unchanged: 0/0
 10949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10950 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10953 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10954 ;;Total ram usage:        2 bytes
 10955 ;; Hardware stack levels used:    1
 10956 ;; Hardware stack levels required when called:    8
 10957 ;; This function calls:
 10958 ;;		_I2C_Master_Wait
 10959 ;; This function is called by:
 10960 ;;		_loadRTC
 10961 ;;		_getRTC
 10962 ;; This function uses a non-reentrant model
 10963 ;;
 10964                           
 10965                           	psect	text31
 10966  005B78                     __ptext31:
 10967                           	opt stack 0
 10968  005B78                     _I2C_Master_Write:
 10969                           	opt stack 18
 10970                           
 10971                           ;I2C.c: 51: I2C_Master_Wait();
 10972                           
 10973                           ;incstack = 0
 10974  005B78  EC8D  F02D         	call	_I2C_Master_Wait	;wreg free
 10975                           
 10976                           ;I2C.c: 52: SSPBUF = d;
 10977  005B7C  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 10978  005B80  0012               	return		;funcret
 10979  005B82                     __end_of_I2C_Master_Write:
 10980                           	opt stack 0
 10981                           tblptru	equ	0xFF8
 10982                           tblptrh	equ	0xFF7
 10983                           tblptrl	equ	0xFF6
 10984                           tablat	equ	0xFF5
 10985                           prodh	equ	0xFF4
 10986                           prodl	equ	0xFF3
 10987                           intcon	equ	0xFF2
 10988                           intcon2	equ	0xFF1
 10989                           intcon3	equ	0xFF0
 10990                           postinc0	equ	0xFEE
 10991                           wreg	equ	0xFE8
 10992                           postdec1	equ	0xFE5
 10993                           fsr1l	equ	0xFE1
 10994                           indf2	equ	0xFDF
 10995                           postinc2	equ	0xFDE
 10996                           postdec2	equ	0xFDD
 10997                           fsr2h	equ	0xFDA
 10998                           fsr2l	equ	0xFD9
 10999                           status	equ	0xFD8
 11000                           
 11001 ;; *************** function _I2C_Master_Stop *****************
 11002 ;; Defined at:
 11003 ;;		line 43 in file "I2C.c"
 11004 ;; Parameters:    Size  Location     Type
 11005 ;;		None
 11006 ;; Auto vars:     Size  Location     Type
 11007 ;;		None
 11008 ;; Return value:  Size  Location     Type
 11009 ;;                  1    wreg      void 
 11010 ;; Registers used:
 11011 ;;		wreg, status,2, status,0, cstack
 11012 ;; Tracked objects:
 11013 ;;		On entry : 0/0
 11014 ;;		On exit  : 0/0
 11015 ;;		Unchanged: 0/0
 11016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11020 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11021 ;;Total ram usage:        0 bytes
 11022 ;; Hardware stack levels used:    1
 11023 ;; Hardware stack levels required when called:    8
 11024 ;; This function calls:
 11025 ;;		_I2C_Master_Wait
 11026 ;; This function is called by:
 11027 ;;		_loadRTC
 11028 ;;		_getRTC
 11029 ;; This function uses a non-reentrant model
 11030 ;;
 11031                           
 11032                           	psect	text32
 11033  005B94                     __ptext32:
 11034                           	opt stack 0
 11035  005B94                     _I2C_Master_Stop:
 11036                           	opt stack 18
 11037                           
 11038                           ;I2C.c: 45: I2C_Master_Wait();
 11039                           
 11040                           ;incstack = 0
 11041  005B94  EC8D  F02D         	call	_I2C_Master_Wait	;wreg free
 11042                           
 11043                           ;I2C.c: 46: PEN = 1;
 11044  005B98  84C5               	bsf	4037,2,c	;volatile
 11045  005B9A  0012               	return		;funcret
 11046  005B9C                     __end_of_I2C_Master_Stop:
 11047                           	opt stack 0
 11048                           tblptru	equ	0xFF8
 11049                           tblptrh	equ	0xFF7
 11050                           tblptrl	equ	0xFF6
 11051                           tablat	equ	0xFF5
 11052                           prodh	equ	0xFF4
 11053                           prodl	equ	0xFF3
 11054                           intcon	equ	0xFF2
 11055                           intcon2	equ	0xFF1
 11056                           intcon3	equ	0xFF0
 11057                           postinc0	equ	0xFEE
 11058                           wreg	equ	0xFE8
 11059                           postdec1	equ	0xFE5
 11060                           fsr1l	equ	0xFE1
 11061                           indf2	equ	0xFDF
 11062                           postinc2	equ	0xFDE
 11063                           postdec2	equ	0xFDD
 11064                           fsr2h	equ	0xFDA
 11065                           fsr2l	equ	0xFD9
 11066                           status	equ	0xFD8
 11067                           
 11068 ;; *************** function _I2C_Master_Start *****************
 11069 ;; Defined at:
 11070 ;;		line 31 in file "I2C.c"
 11071 ;; Parameters:    Size  Location     Type
 11072 ;;		None
 11073 ;; Auto vars:     Size  Location     Type
 11074 ;;		None
 11075 ;; Return value:  Size  Location     Type
 11076 ;;                  1    wreg      void 
 11077 ;; Registers used:
 11078 ;;		wreg, status,2, status,0, cstack
 11079 ;; Tracked objects:
 11080 ;;		On entry : 0/0
 11081 ;;		On exit  : 0/0
 11082 ;;		Unchanged: 0/0
 11083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11088 ;;Total ram usage:        0 bytes
 11089 ;; Hardware stack levels used:    1
 11090 ;; Hardware stack levels required when called:    8
 11091 ;; This function calls:
 11092 ;;		_I2C_Master_Wait
 11093 ;; This function is called by:
 11094 ;;		_loadRTC
 11095 ;;		_getRTC
 11096 ;; This function uses a non-reentrant model
 11097 ;;
 11098                           
 11099                           	psect	text33
 11100  005B9C                     __ptext33:
 11101                           	opt stack 0
 11102  005B9C                     _I2C_Master_Start:
 11103                           	opt stack 18
 11104                           
 11105                           ;I2C.c: 33: I2C_Master_Wait();
 11106                           
 11107                           ;incstack = 0
 11108  005B9C  EC8D  F02D         	call	_I2C_Master_Wait	;wreg free
 11109                           
 11110                           ;I2C.c: 34: SEN = 1;
 11111  005BA0  80C5               	bsf	4037,0,c	;volatile
 11112  005BA2  0012               	return		;funcret
 11113  005BA4                     __end_of_I2C_Master_Start:
 11114                           	opt stack 0
 11115                           tblptru	equ	0xFF8
 11116                           tblptrh	equ	0xFF7
 11117                           tblptrl	equ	0xFF6
 11118                           tablat	equ	0xFF5
 11119                           prodh	equ	0xFF4
 11120                           prodl	equ	0xFF3
 11121                           intcon	equ	0xFF2
 11122                           intcon2	equ	0xFF1
 11123                           intcon3	equ	0xFF0
 11124                           postinc0	equ	0xFEE
 11125                           wreg	equ	0xFE8
 11126                           postdec1	equ	0xFE5
 11127                           fsr1l	equ	0xFE1
 11128                           indf2	equ	0xFDF
 11129                           postinc2	equ	0xFDE
 11130                           postdec2	equ	0xFDD
 11131                           fsr2h	equ	0xFDA
 11132                           fsr2l	equ	0xFD9
 11133                           status	equ	0xFD8
 11134                           
 11135 ;; *************** function _I2C_Master_Read *****************
 11136 ;; Defined at:
 11137 ;;		line 55 in file "I2C.c"
 11138 ;; Parameters:    Size  Location     Type
 11139 ;;  a               1    wreg     unsigned char 
 11140 ;; Auto vars:     Size  Location     Type
 11141 ;;  a               1    1[BANK0 ] unsigned char 
 11142 ;;  temp            1    2[BANK0 ] unsigned char 
 11143 ;; Return value:  Size  Location     Type
 11144 ;;                  1    wreg      unsigned char 
 11145 ;; Registers used:
 11146 ;;		wreg, status,2, status,0, cstack
 11147 ;; Tracked objects:
 11148 ;;		On entry : 0/0
 11149 ;;		On exit  : 0/0
 11150 ;;		Unchanged: 0/0
 11151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11153 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11155 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11156 ;;Total ram usage:        2 bytes
 11157 ;; Hardware stack levels used:    1
 11158 ;; Hardware stack levels required when called:    8
 11159 ;; This function calls:
 11160 ;;		_I2C_Master_Wait
 11161 ;; This function is called by:
 11162 ;;		_getRTC
 11163 ;; This function uses a non-reentrant model
 11164 ;;
 11165                           
 11166                           	psect	text34
 11167  0058BA                     __ptext34:
 11168                           	opt stack 0
 11169  0058BA                     _I2C_Master_Read:
 11170                           	opt stack 18
 11171                           
 11172                           ;incstack = 0
 11173                           ;I2C_Master_Read@a stored from wreg
 11174  0058BA  0100               	movlb	0	; () banked
 11175  0058BC  6F81               	movwf	I2C_Master_Read@a& (0+255),b
 11176                           
 11177                           ;I2C.c: 57: unsigned char temp;
 11178                           ;I2C.c: 58: I2C_Master_Wait();
 11179  0058BE  EC8D  F02D         	call	_I2C_Master_Wait	;wreg free
 11180                           
 11181                           ;I2C.c: 59: RCEN = 1;
 11182  0058C2  86C5               	bsf	4037,3,c	;volatile
 11183                           
 11184                           ;I2C.c: 60: I2C_Master_Wait();
 11185  0058C4  EC8D  F02D         	call	_I2C_Master_Wait	;wreg free
 11186                           
 11187                           ;I2C.c: 61: temp = SSPBUF;
 11188  0058C8  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
 11189                           
 11190                           ;I2C.c: 62: I2C_Master_Wait();
 11191  0058CC  EC8D  F02D         	call	_I2C_Master_Wait	;wreg free
 11192                           
 11193                           ;I2C.c: 63: ACKDT = (a)?0:1;
 11194  0058D0  0100               	movlb	0	; () banked
 11195  0058D2  5181               	movf	I2C_Master_Read@a& (0+255),w,b
 11196  0058D4  0100               	movlb	0	; () banked
 11197  0058D6  A4D8               	btfss	status,2,c
 11198  0058D8  D002               	goto	u4890
 11199  0058DA  8AC5               	bsf	4037,5,c	;volatile
 11200  0058DC  D001               	goto	l6515
 11201  0058DE                     u4890:
 11202  0058DE  9AC5               	bcf	4037,5,c	;volatile
 11203  0058E0                     l6515:
 11204                           
 11205                           ;I2C.c: 64: ACKEN = 1;
 11206  0058E0  88C5               	bsf	4037,4,c	;volatile
 11207                           
 11208                           ;I2C.c: 65: return temp;
 11209  0058E2  0100               	movlb	0	; () banked
 11210  0058E4  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 11211  0058E6  0012               	return	
 11212  0058E8                     __end_of_I2C_Master_Read:
 11213                           	opt stack 0
 11214                           tblptru	equ	0xFF8
 11215                           tblptrh	equ	0xFF7
 11216                           tblptrl	equ	0xFF6
 11217                           tablat	equ	0xFF5
 11218                           prodh	equ	0xFF4
 11219                           prodl	equ	0xFF3
 11220                           intcon	equ	0xFF2
 11221                           intcon2	equ	0xFF1
 11222                           intcon3	equ	0xFF0
 11223                           postinc0	equ	0xFEE
 11224                           wreg	equ	0xFE8
 11225                           postdec1	equ	0xFE5
 11226                           fsr1l	equ	0xFE1
 11227                           indf2	equ	0xFDF
 11228                           postinc2	equ	0xFDE
 11229                           postdec2	equ	0xFDD
 11230                           fsr2h	equ	0xFDA
 11231                           fsr2l	equ	0xFD9
 11232                           status	equ	0xFD8
 11233                           
 11234 ;; *************** function _I2C_Master_Wait *****************
 11235 ;; Defined at:
 11236 ;;		line 26 in file "I2C.c"
 11237 ;; Parameters:    Size  Location     Type
 11238 ;;		None
 11239 ;; Auto vars:     Size  Location     Type
 11240 ;;		None
 11241 ;; Return value:  Size  Location     Type
 11242 ;;                  1    wreg      void 
 11243 ;; Registers used:
 11244 ;;		wreg, status,2, status,0
 11245 ;; Tracked objects:
 11246 ;;		On entry : 0/0
 11247 ;;		On exit  : 0/0
 11248 ;;		Unchanged: 0/0
 11249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11252 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11253 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11254 ;;Total ram usage:        1 bytes
 11255 ;; Hardware stack levels used:    1
 11256 ;; Hardware stack levels required when called:    7
 11257 ;; This function calls:
 11258 ;;		Nothing
 11259 ;; This function is called by:
 11260 ;;		_I2C_Master_Start
 11261 ;;		_I2C_Master_Stop
 11262 ;;		_I2C_Master_Write
 11263 ;;		_I2C_Master_Read
 11264 ;;		_I2C_Master_RepeatedStart
 11265 ;; This function uses a non-reentrant model
 11266 ;;
 11267                           
 11268                           	psect	text35
 11269  005B1A                     __ptext35:
 11270                           	opt stack 0
 11271  005B1A                     _I2C_Master_Wait:
 11272                           	opt stack 18
 11273  005B1A                     l71:
 11274  005B1A  B4C7               	btfsc	4039,2,c	;volatile
 11275  005B1C  D7FE               	goto	l71
 11276  005B1E  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 11277  005B22  0E1F               	movlw	31
 11278  005B24  0100               	movlb	0	; () banked
 11279  005B26  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 11280  005B28  B4D8               	btfsc	status,2,c
 11281  005B2A  0012               	return	
 11282  005B2C  D7F6               	goto	l71
 11283  005B2E                     __end_of_I2C_Master_Wait:
 11284                           	opt stack 0
 11285                           tblptru	equ	0xFF8
 11286                           tblptrh	equ	0xFF7
 11287                           tblptrl	equ	0xFF6
 11288                           tablat	equ	0xFF5
 11289                           prodh	equ	0xFF4
 11290                           prodl	equ	0xFF3
 11291                           intcon	equ	0xFF2
 11292                           intcon2	equ	0xFF1
 11293                           intcon3	equ	0xFF0
 11294                           postinc0	equ	0xFEE
 11295                           wreg	equ	0xFE8
 11296                           postdec1	equ	0xFE5
 11297                           fsr1l	equ	0xFE1
 11298                           indf2	equ	0xFDF
 11299                           postinc2	equ	0xFDE
 11300                           postdec2	equ	0xFDD
 11301                           fsr2h	equ	0xFDA
 11302                           fsr2l	equ	0xFD9
 11303                           status	equ	0xFD8
 11304                           
 11305 ;; *************** function _change_state_to_menu_22 *****************
 11306 ;; Defined at:
 11307 ;;		line 501 in file "UI.c"
 11308 ;; Parameters:    Size  Location     Type
 11309 ;;		None
 11310 ;; Auto vars:     Size  Location     Type
 11311 ;;		None
 11312 ;; Return value:  Size  Location     Type
 11313 ;;                  1    wreg      void 
 11314 ;; Registers used:
 11315 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11316 ;; Tracked objects:
 11317 ;;		On entry : 0/0
 11318 ;;		On exit  : 0/0
 11319 ;;		Unchanged: 0/0
 11320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11324 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11325 ;;Total ram usage:        0 bytes
 11326 ;; Hardware stack levels used:    1
 11327 ;; Hardware stack levels required when called:   10
 11328 ;; This function calls:
 11329 ;;		_lcdInst
 11330 ;;		_printf
 11331 ;; This function is called by:
 11332 ;;		_UI
 11333 ;; This function uses a non-reentrant model
 11334 ;;
 11335                           
 11336                           	psect	text36
 11337  00559A                     __ptext36:
 11338                           	opt stack 0
 11339  00559A                     _change_state_to_menu_22:
 11340                           	opt stack 19
 11341                           
 11342                           ;UI.c: 502: cur_state = 22;
 11343                           
 11344                           ; BSR set to: 0
 11345                           ;incstack = 0
 11346  00559A  0E00               	movlw	0
 11347  00559C  0100               	movlb	0	; () banked
 11348  00559E  6FE7               	movwf	(_cur_state+1)& (0+255),b
 11349  0055A0  0E16               	movlw	22
 11350  0055A2  6FE6               	movwf	_cur_state& (0+255),b
 11351                           
 11352                           ; BSR set to: 0
 11353                           ;UI.c: 504: lcdInst(0b10000000);;
 11354  0055A4  0E80               	movlw	128
 11355  0055A6  ECA8  F02D         	call	_lcdInst
 11356                           
 11357                           ;UI.c: 505: printf("2. SORT        <");
 11358  0055AA  0EB8               	movlw	low STR_34
 11359  0055AC  0100               	movlb	0	; () banked
 11360  0055AE  6F8E               	movwf	printf@f& (0+255),b
 11361  0055B0  0EFD               	movlw	high STR_34
 11362  0055B2  0100               	movlb	0	; () banked
 11363  0055B4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11364  0055B6  ECFE  F00D         	call	_printf	;wreg free
 11365                           
 11366                           ;UI.c: 506: lcdInst(0b11000000);;
 11367  0055BA  0EC0               	movlw	192
 11368  0055BC  ECA8  F02D         	call	_lcdInst
 11369                           
 11370                           ;UI.c: 507: printf("3. LOGS         ");
 11371  0055C0  0EFD               	movlw	low STR_36
 11372  0055C2  0100               	movlb	0	; () banked
 11373  0055C4  6F8E               	movwf	printf@f& (0+255),b
 11374  0055C6  0EFC               	movlw	high STR_36
 11375  0055C8  0100               	movlb	0	; () banked
 11376  0055CA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11377  0055CC  ECFE  F00D         	call	_printf	;wreg free
 11378  0055D0  0012               	return		;funcret
 11379  0055D2                     __end_of_change_state_to_menu_22:
 11380                           	opt stack 0
 11381                           tblptru	equ	0xFF8
 11382                           tblptrh	equ	0xFF7
 11383                           tblptrl	equ	0xFF6
 11384                           tablat	equ	0xFF5
 11385                           prodh	equ	0xFF4
 11386                           prodl	equ	0xFF3
 11387                           intcon	equ	0xFF2
 11388                           intcon2	equ	0xFF1
 11389                           intcon3	equ	0xFF0
 11390                           postinc0	equ	0xFEE
 11391                           wreg	equ	0xFE8
 11392                           postdec1	equ	0xFE5
 11393                           fsr1l	equ	0xFE1
 11394                           indf2	equ	0xFDF
 11395                           postinc2	equ	0xFDE
 11396                           postdec2	equ	0xFDD
 11397                           fsr2h	equ	0xFDA
 11398                           fsr2l	equ	0xFD9
 11399                           status	equ	0xFD8
 11400                           
 11401 ;; *************** function _change_state_to_menu_12 *****************
 11402 ;; Defined at:
 11403 ;;		line 493 in file "UI.c"
 11404 ;; Parameters:    Size  Location     Type
 11405 ;;		None
 11406 ;; Auto vars:     Size  Location     Type
 11407 ;;		None
 11408 ;; Return value:  Size  Location     Type
 11409 ;;                  1    wreg      void 
 11410 ;; Registers used:
 11411 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11412 ;; Tracked objects:
 11413 ;;		On entry : 0/0
 11414 ;;		On exit  : 0/0
 11415 ;;		Unchanged: 0/0
 11416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11421 ;;Total ram usage:        0 bytes
 11422 ;; Hardware stack levels used:    1
 11423 ;; Hardware stack levels required when called:   10
 11424 ;; This function calls:
 11425 ;;		_lcdInst
 11426 ;;		_printf
 11427 ;; This function is called by:
 11428 ;;		_UI
 11429 ;; This function uses a non-reentrant model
 11430 ;;
 11431                           
 11432                           	psect	text37
 11433  0055D2                     __ptext37:
 11434                           	opt stack 0
 11435  0055D2                     _change_state_to_menu_12:
 11436                           	opt stack 19
 11437                           
 11438                           ;UI.c: 494: cur_state = 12;
 11439                           
 11440                           ;incstack = 0
 11441  0055D2  0E00               	movlw	0
 11442  0055D4  0100               	movlb	0	; () banked
 11443  0055D6  6FE7               	movwf	(_cur_state+1)& (0+255),b
 11444  0055D8  0E0C               	movlw	12
 11445  0055DA  6FE6               	movwf	_cur_state& (0+255),b
 11446                           
 11447                           ; BSR set to: 0
 11448                           ;UI.c: 496: lcdInst(0b10000000);;
 11449  0055DC  0E80               	movlw	128
 11450  0055DE  ECA8  F02D         	call	_lcdInst
 11451                           
 11452                           ;UI.c: 497: printf("1. DATE/TIME    ");
 11453  0055E2  0E1F               	movlw	low STR_33
 11454  0055E4  0100               	movlb	0	; () banked
 11455  0055E6  6F8E               	movwf	printf@f& (0+255),b
 11456  0055E8  0EFD               	movlw	high STR_33
 11457  0055EA  0100               	movlb	0	; () banked
 11458  0055EC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11459  0055EE  ECFE  F00D         	call	_printf	;wreg free
 11460                           
 11461                           ;UI.c: 498: lcdInst(0b11000000);;
 11462  0055F2  0EC0               	movlw	192
 11463  0055F4  ECA8  F02D         	call	_lcdInst
 11464                           
 11465                           ;UI.c: 499: printf("2. SORT        <");
 11466  0055F8  0EB8               	movlw	low STR_34
 11467  0055FA  0100               	movlb	0	; () banked
 11468  0055FC  6F8E               	movwf	printf@f& (0+255),b
 11469  0055FE  0EFD               	movlw	high STR_34
 11470  005600  0100               	movlb	0	; () banked
 11471  005602  6F8F               	movwf	(printf@f+1)& (0+255),b
 11472  005604  ECFE  F00D         	call	_printf	;wreg free
 11473  005608  0012               	return		;funcret
 11474  00560A                     __end_of_change_state_to_menu_12:
 11475                           	opt stack 0
 11476                           tblptru	equ	0xFF8
 11477                           tblptrh	equ	0xFF7
 11478                           tblptrl	equ	0xFF6
 11479                           tablat	equ	0xFF5
 11480                           prodh	equ	0xFF4
 11481                           prodl	equ	0xFF3
 11482                           intcon	equ	0xFF2
 11483                           intcon2	equ	0xFF1
 11484                           intcon3	equ	0xFF0
 11485                           postinc0	equ	0xFEE
 11486                           wreg	equ	0xFE8
 11487                           postdec1	equ	0xFE5
 11488                           fsr1l	equ	0xFE1
 11489                           indf2	equ	0xFDF
 11490                           postinc2	equ	0xFDE
 11491                           postdec2	equ	0xFDD
 11492                           fsr2h	equ	0xFDA
 11493                           fsr2l	equ	0xFD9
 11494                           status	equ	0xFD8
 11495                           
 11496 ;; *************** function ___awmod *****************
 11497 ;; Defined at:
 11498 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 11499 ;; Parameters:    Size  Location     Type
 11500 ;;  dividend        2    0[BANK0 ] int 
 11501 ;;  divisor         2    2[BANK0 ] int 
 11502 ;; Auto vars:     Size  Location     Type
 11503 ;;  sign            1    5[BANK0 ] unsigned char 
 11504 ;;  counter         1    4[BANK0 ] unsigned char 
 11505 ;; Return value:  Size  Location     Type
 11506 ;;                  2    0[BANK0 ] int 
 11507 ;; Registers used:
 11508 ;;		wreg, status,2, status,0
 11509 ;; Tracked objects:
 11510 ;;		On entry : 0/0
 11511 ;;		On exit  : 0/0
 11512 ;;		Unchanged: 0/0
 11513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11514 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11515 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11517 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11518 ;;Total ram usage:        6 bytes
 11519 ;; Hardware stack levels used:    1
 11520 ;; Hardware stack levels required when called:    7
 11521 ;; This function calls:
 11522 ;;		Nothing
 11523 ;; This function is called by:
 11524 ;;		_UI
 11525 ;; This function uses a non-reentrant model
 11526 ;;
 11527                           
 11528                           	psect	text38
 11529  004B7A                     __ptext38:
 11530                           	opt stack 0
 11531  004B7A                     ___awmod:
 11532                           	opt stack 22
 11533                           
 11534                           ;incstack = 0
 11535  004B7A  0E00               	movlw	0
 11536  004B7C  0100               	movlb	0	; () banked
 11537  004B7E  6F85               	movwf	___awmod@sign& (0+255),b
 11538                           
 11539                           ; BSR set to: 0
 11540  004B80  0100               	movlb	0	; () banked
 11541  004B82  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 11542  004B84  D008               	goto	l9165
 11543                           
 11544                           ; BSR set to: 0
 11545  004B86  0100               	movlb	0	; () banked
 11546  004B88  6D80               	negf	___awmod@dividend& (0+255),b
 11547  004B8A  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11548  004B8C  B0D8               	btfsc	status,0,c
 11549  004B8E  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11550                           
 11551                           ; BSR set to: 0
 11552  004B90  0E01               	movlw	1
 11553  004B92  0100               	movlb	0	; () banked
 11554  004B94  6F85               	movwf	___awmod@sign& (0+255),b
 11555  004B96                     l9165:
 11556                           
 11557                           ; BSR set to: 0
 11558  004B96  0100               	movlb	0	; () banked
 11559  004B98  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11560  004B9A  D005               	goto	l9169
 11561                           
 11562                           ; BSR set to: 0
 11563  004B9C  0100               	movlb	0	; () banked
 11564  004B9E  6D82               	negf	___awmod@divisor& (0+255),b
 11565  004BA0  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 11566  004BA2  B0D8               	btfsc	status,0,c
 11567  004BA4  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 11568  004BA6                     l9169:
 11569                           
 11570                           ; BSR set to: 0
 11571  004BA6  0100               	movlb	0	; () banked
 11572  004BA8  5182               	movf	___awmod@divisor& (0+255),w,b
 11573  004BAA  0100               	movlb	0	; () banked
 11574  004BAC  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 11575  004BAE  B4D8               	btfsc	status,2,c
 11576  004BB0  D026               	goto	l9185
 11577                           
 11578                           ; BSR set to: 0
 11579  004BB2  0E01               	movlw	1
 11580  004BB4  0100               	movlb	0	; () banked
 11581  004BB6  6F84               	movwf	___awmod@counter& (0+255),b
 11582  004BB8  D006               	goto	l9175
 11583  004BBA                     l9173:
 11584                           
 11585                           ; BSR set to: 0
 11586  004BBA  0100               	movlb	0	; () banked
 11587  004BBC  90D8               	bcf	status,0,c
 11588  004BBE  3782               	rlcf	___awmod@divisor& (0+255),f,b
 11589  004BC0  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 11590  004BC2  0100               	movlb	0	; () banked
 11591  004BC4  2B84               	incf	___awmod@counter& (0+255),f,b
 11592  004BC6                     l9175:
 11593                           
 11594                           ; BSR set to: 0
 11595  004BC6  0100               	movlb	0	; () banked
 11596  004BC8  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11597  004BCA  D7F7               	goto	l9173
 11598  004BCC                     l9177:
 11599                           
 11600                           ; BSR set to: 0
 11601  004BCC  0100               	movlb	0	; () banked
 11602  004BCE  5182               	movf	___awmod@divisor& (0+255),w,b
 11603  004BD0  0100               	movlb	0	; () banked
 11604  004BD2  5D80               	subwf	___awmod@dividend& (0+255),w,b
 11605  004BD4  0100               	movlb	0	; () banked
 11606  004BD6  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11607  004BD8  0100               	movlb	0	; () banked
 11608  004BDA  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 11609  004BDC  A0D8               	btfss	status,0,c
 11610  004BDE  D008               	goto	l9181
 11611                           
 11612                           ; BSR set to: 0
 11613  004BE0  0100               	movlb	0	; () banked
 11614  004BE2  5182               	movf	___awmod@divisor& (0+255),w,b
 11615  004BE4  0100               	movlb	0	; () banked
 11616  004BE6  5F80               	subwf	___awmod@dividend& (0+255),f,b
 11617  004BE8  0100               	movlb	0	; () banked
 11618  004BEA  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11619  004BEC  0100               	movlb	0	; () banked
 11620  004BEE  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 11621  004BF0                     l9181:
 11622                           
 11623                           ; BSR set to: 0
 11624  004BF0  0100               	movlb	0	; () banked
 11625  004BF2  90D8               	bcf	status,0,c
 11626  004BF4  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 11627  004BF6  3382               	rrcf	___awmod@divisor& (0+255),f,b
 11628                           
 11629                           ; BSR set to: 0
 11630  004BF8  0100               	movlb	0	; () banked
 11631  004BFA  2F84               	decfsz	___awmod@counter& (0+255),f,b
 11632  004BFC  D7E7               	goto	l9177
 11633  004BFE                     l9185:
 11634                           
 11635                           ; BSR set to: 0
 11636  004BFE  0100               	movlb	0	; () banked
 11637  004C00  5185               	movf	___awmod@sign& (0+255),w,b
 11638  004C02  0100               	movlb	0	; () banked
 11639  004C04  B4D8               	btfsc	status,2,c
 11640  004C06  D005               	goto	l9189
 11641                           
 11642                           ; BSR set to: 0
 11643  004C08  0100               	movlb	0	; () banked
 11644  004C0A  6D80               	negf	___awmod@dividend& (0+255),b
 11645  004C0C  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11646  004C0E  B0D8               	btfsc	status,0,c
 11647  004C10  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11648  004C12                     l9189:
 11649                           
 11650                           ; BSR set to: 0
 11651  004C12  C080  F080         	movff	___awmod@dividend,?___awmod
 11652  004C16  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 11653  004C1A  0012               	return	
 11654  004C1C                     __end_of___awmod:
 11655                           	opt stack 0
 11656                           tblptru	equ	0xFF8
 11657                           tblptrh	equ	0xFF7
 11658                           tblptrl	equ	0xFF6
 11659                           tablat	equ	0xFF5
 11660                           prodh	equ	0xFF4
 11661                           prodl	equ	0xFF3
 11662                           intcon	equ	0xFF2
 11663                           intcon2	equ	0xFF1
 11664                           intcon3	equ	0xFF0
 11665                           postinc0	equ	0xFEE
 11666                           wreg	equ	0xFE8
 11667                           postdec1	equ	0xFE5
 11668                           fsr1l	equ	0xFE1
 11669                           indf2	equ	0xFDF
 11670                           postinc2	equ	0xFDE
 11671                           postdec2	equ	0xFDD
 11672                           fsr2h	equ	0xFDA
 11673                           fsr2l	equ	0xFD9
 11674                           status	equ	0xFD8
 11675                           
 11676 ;; *************** function ___awdiv *****************
 11677 ;; Defined at:
 11678 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 11679 ;; Parameters:    Size  Location     Type
 11680 ;;  dividend        2    6[BANK0 ] int 
 11681 ;;  divisor         2    8[BANK0 ] int 
 11682 ;; Auto vars:     Size  Location     Type
 11683 ;;  quotient        2   12[BANK0 ] int 
 11684 ;;  sign            1   11[BANK0 ] unsigned char 
 11685 ;;  counter         1   10[BANK0 ] unsigned char 
 11686 ;; Return value:  Size  Location     Type
 11687 ;;                  2    6[BANK0 ] int 
 11688 ;; Registers used:
 11689 ;;		wreg, status,2, status,0
 11690 ;; Tracked objects:
 11691 ;;		On entry : 0/0
 11692 ;;		On exit  : 0/0
 11693 ;;		Unchanged: 0/0
 11694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11695 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11696 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11698 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11699 ;;Total ram usage:        8 bytes
 11700 ;; Hardware stack levels used:    1
 11701 ;; Hardware stack levels required when called:    7
 11702 ;; This function calls:
 11703 ;;		Nothing
 11704 ;; This function is called by:
 11705 ;;		_UI
 11706 ;;		_ID
 11707 ;; This function uses a non-reentrant model
 11708 ;;
 11709                           
 11710                           	psect	text39
 11711  004956                     __ptext39:
 11712                           	opt stack 0
 11713  004956                     ___awdiv:
 11714                           	opt stack 21
 11715                           
 11716                           ; BSR set to: 0
 11717                           ;incstack = 0
 11718  004956  0E00               	movlw	0
 11719  004958  0100               	movlb	0	; () banked
 11720  00495A  6F8B               	movwf	___awdiv@sign& (0+255),b
 11721                           
 11722                           ; BSR set to: 0
 11723  00495C  0100               	movlb	0	; () banked
 11724  00495E  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11725  004960  D008               	goto	l7443
 11726                           
 11727                           ; BSR set to: 0
 11728  004962  0100               	movlb	0	; () banked
 11729  004964  6D88               	negf	___awdiv@divisor& (0+255),b
 11730  004966  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 11731  004968  B0D8               	btfsc	status,0,c
 11732  00496A  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 11733                           
 11734                           ; BSR set to: 0
 11735  00496C  0E01               	movlw	1
 11736  00496E  0100               	movlb	0	; () banked
 11737  004970  6F8B               	movwf	___awdiv@sign& (0+255),b
 11738  004972                     l7443:
 11739                           
 11740                           ; BSR set to: 0
 11741  004972  0100               	movlb	0	; () banked
 11742  004974  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 11743  004976  D008               	goto	l7449
 11744                           
 11745                           ; BSR set to: 0
 11746  004978  0100               	movlb	0	; () banked
 11747  00497A  6D86               	negf	___awdiv@dividend& (0+255),b
 11748  00497C  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 11749  00497E  B0D8               	btfsc	status,0,c
 11750  004980  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 11751                           
 11752                           ; BSR set to: 0
 11753  004982  0E01               	movlw	1
 11754  004984  0100               	movlb	0	; () banked
 11755  004986  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 11756  004988                     l7449:
 11757                           
 11758                           ; BSR set to: 0
 11759  004988  0E00               	movlw	0
 11760  00498A  0100               	movlb	0	; () banked
 11761  00498C  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 11762  00498E  0E00               	movlw	0
 11763  004990  6F8C               	movwf	___awdiv@quotient& (0+255),b
 11764                           
 11765                           ; BSR set to: 0
 11766  004992  0100               	movlb	0	; () banked
 11767  004994  5188               	movf	___awdiv@divisor& (0+255),w,b
 11768  004996  0100               	movlb	0	; () banked
 11769  004998  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 11770  00499A  B4D8               	btfsc	status,2,c
 11771  00499C  D02C               	goto	l7471
 11772                           
 11773                           ; BSR set to: 0
 11774  00499E  0E01               	movlw	1
 11775  0049A0  0100               	movlb	0	; () banked
 11776  0049A2  6F8A               	movwf	___awdiv@counter& (0+255),b
 11777  0049A4  D006               	goto	l7457
 11778  0049A6                     l7455:
 11779                           
 11780                           ; BSR set to: 0
 11781  0049A6  0100               	movlb	0	; () banked
 11782  0049A8  90D8               	bcf	status,0,c
 11783  0049AA  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 11784  0049AC  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 11785  0049AE  0100               	movlb	0	; () banked
 11786  0049B0  2B8A               	incf	___awdiv@counter& (0+255),f,b
 11787  0049B2                     l7457:
 11788                           
 11789                           ; BSR set to: 0
 11790  0049B2  0100               	movlb	0	; () banked
 11791  0049B4  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11792  0049B6  D7F7               	goto	l7455
 11793  0049B8                     l7459:
 11794                           
 11795                           ; BSR set to: 0
 11796  0049B8  0100               	movlb	0	; () banked
 11797  0049BA  90D8               	bcf	status,0,c
 11798  0049BC  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 11799  0049BE  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 11800                           
 11801                           ; BSR set to: 0
 11802  0049C0  0100               	movlb	0	; () banked
 11803  0049C2  5188               	movf	___awdiv@divisor& (0+255),w,b
 11804  0049C4  0100               	movlb	0	; () banked
 11805  0049C6  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 11806  0049C8  0100               	movlb	0	; () banked
 11807  0049CA  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 11808  0049CC  0100               	movlb	0	; () banked
 11809  0049CE  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 11810  0049D0  A0D8               	btfss	status,0,c
 11811  0049D2  D00A               	goto	l7467
 11812                           
 11813                           ; BSR set to: 0
 11814  0049D4  0100               	movlb	0	; () banked
 11815  0049D6  5188               	movf	___awdiv@divisor& (0+255),w,b
 11816  0049D8  0100               	movlb	0	; () banked
 11817  0049DA  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 11818  0049DC  0100               	movlb	0	; () banked
 11819  0049DE  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 11820  0049E0  0100               	movlb	0	; () banked
 11821  0049E2  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 11822                           
 11823                           ; BSR set to: 0
 11824  0049E4  0100               	movlb	0	; () banked
 11825  0049E6  818C               	bsf	___awdiv@quotient& (0+255),0,b
 11826  0049E8                     l7467:
 11827                           
 11828                           ; BSR set to: 0
 11829  0049E8  0100               	movlb	0	; () banked
 11830  0049EA  90D8               	bcf	status,0,c
 11831  0049EC  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 11832  0049EE  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 11833                           
 11834                           ; BSR set to: 0
 11835  0049F0  0100               	movlb	0	; () banked
 11836  0049F2  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 11837  0049F4  D7E1               	goto	l7459
 11838  0049F6                     l7471:
 11839                           
 11840                           ; BSR set to: 0
 11841  0049F6  0100               	movlb	0	; () banked
 11842  0049F8  518B               	movf	___awdiv@sign& (0+255),w,b
 11843  0049FA  0100               	movlb	0	; () banked
 11844  0049FC  B4D8               	btfsc	status,2,c
 11845  0049FE  D005               	goto	l7475
 11846                           
 11847                           ; BSR set to: 0
 11848  004A00  0100               	movlb	0	; () banked
 11849  004A02  6D8C               	negf	___awdiv@quotient& (0+255),b
 11850  004A04  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 11851  004A06  B0D8               	btfsc	status,0,c
 11852  004A08  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 11853  004A0A                     l7475:
 11854                           
 11855                           ; BSR set to: 0
 11856  004A0A  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 11857  004A0E  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 11858  004A12  0012               	return	
 11859  004A14                     __end_of___awdiv:
 11860                           	opt stack 0
 11861                           tblptru	equ	0xFF8
 11862                           tblptrh	equ	0xFF7
 11863                           tblptrl	equ	0xFF6
 11864                           tablat	equ	0xFF5
 11865                           prodh	equ	0xFF4
 11866                           prodl	equ	0xFF3
 11867                           intcon	equ	0xFF2
 11868                           intcon2	equ	0xFF1
 11869                           intcon3	equ	0xFF0
 11870                           postinc0	equ	0xFEE
 11871                           wreg	equ	0xFE8
 11872                           postdec1	equ	0xFE5
 11873                           fsr1l	equ	0xFE1
 11874                           indf2	equ	0xFDF
 11875                           postinc2	equ	0xFDE
 11876                           postdec2	equ	0xFDD
 11877                           fsr2h	equ	0xFDA
 11878                           fsr2l	equ	0xFD9
 11879                           status	equ	0xFD8
 11880                           
 11881 ;; *************** function _Test *****************
 11882 ;; Defined at:
 11883 ;;		line 31 in file "Test.c"
 11884 ;; Parameters:    Size  Location     Type
 11885 ;;		None
 11886 ;; Auto vars:     Size  Location     Type
 11887 ;;		None
 11888 ;; Return value:  Size  Location     Type
 11889 ;;                  1    wreg      void 
 11890 ;; Registers used:
 11891 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11892 ;; Tracked objects:
 11893 ;;		On entry : 0/0
 11894 ;;		On exit  : 0/0
 11895 ;;		Unchanged: 0/0
 11896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11899 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11900 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11901 ;;Total ram usage:        2 bytes
 11902 ;; Hardware stack levels used:    1
 11903 ;; Hardware stack levels required when called:   11
 11904 ;; This function calls:
 11905 ;;		_BlockerTest
 11906 ;;		_BothServos
 11907 ;;		_PlatformTest
 11908 ;;		_PortTestDC
 11909 ;;		_PortTestPusher
 11910 ;;		_SpeedTest
 11911 ;;		_actuatorTest
 11912 ;;		_algorithmTest
 11913 ;;		_arm
 11914 ;;		_lcdInst
 11915 ;;		_printf
 11916 ;;		_sensorTest
 11917 ;; This function is called by:
 11918 ;;		_main
 11919 ;; This function uses a non-reentrant model
 11920 ;;
 11921                           
 11922                           	psect	text40
 11923  004258                     __ptext40:
 11924                           	opt stack 0
 11925  004258                     _Test:
 11926                           	opt stack 19
 11927                           
 11928                           ;Test.c: 33: while(machine_state == Testing_state){
 11929                           
 11930                           ; BSR set to: 0
 11931                           ;incstack = 0
 11932  004258  D07C               	goto	l9907
 11933  00425A                     l9867:
 11934                           
 11935                           ;Test.c: 34: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11936  00425A  0E01               	movlw	1
 11937  00425C  ECA8  F02D         	call	_lcdInst
 11938  004260  0E68               	movlw	104
 11939  004262  0100               	movlb	0	; () banked
 11940  004264  6FC6               	movwf	??_Test& (0+255),b
 11941  004266  0EE4               	movlw	228
 11942  004268                     u10317:
 11943  004268  2EE8               	decfsz	wreg,f,c
 11944  00426A  D7FE               	bra	u10317
 11945  00426C  2FC6               	decfsz	??_Test& (0+255),f,b
 11946  00426E  D7FC               	bra	u10317
 11947  004270  F000               	nop	
 11948  004272  0E80               	movlw	128
 11949  004274  ECA8  F02D         	call	_lcdInst
 11950                           
 11951                           ;Test.c: 35: printf("2.SNR|4.HI|5.MED");
 11952  004278  0E75               	movlw	low STR_68
 11953  00427A  0100               	movlb	0	; () banked
 11954  00427C  6F8E               	movwf	printf@f& (0+255),b
 11955  00427E  0EFC               	movlw	high STR_68
 11956  004280  0100               	movlb	0	; () banked
 11957  004282  6F8F               	movwf	(printf@f+1)& (0+255),b
 11958  004284  ECFE  F00D         	call	_printf	;wreg free
 11959                           
 11960                           ;Test.c: 36: lcdInst(0b11000000);;
 11961  004288  0EC0               	movlw	192
 11962  00428A  ECA8  F02D         	call	_lcdInst
 11963                           
 11964                           ;Test.c: 37: printf("B.PLA|8.SV|9.BLK");
 11965  00428E  0E86               	movlw	low STR_69
 11966  004290  0100               	movlb	0	; () banked
 11967  004292  6F8E               	movwf	printf@f& (0+255),b
 11968  004294  0EFC               	movlw	high STR_69
 11969  004296  0100               	movlb	0	; () banked
 11970  004298  6F8F               	movwf	(printf@f+1)& (0+255),b
 11971  00429A  ECFE  F00D         	call	_printf	;wreg free
 11972  00429E                     l1243:
 11973  00429E  A281               	btfss	3969,1,c	;volatile
 11974  0042A0  D7FE               	goto	l1243
 11975                           
 11976                           ;Test.c: 39: var = PORTB >> 4;
 11977  0042A2  CF81 F0C6          	movff	3969,??_Test	;volatile
 11978  0042A6  0100               	movlb	0	; () banked
 11979  0042A8  3BC6               	swapf	??_Test& (0+255),f,b
 11980  0042AA  0E0F               	movlw	15
 11981  0042AC  17C6               	andwf	??_Test& (0+255),f,b
 11982  0042AE  0100               	movlb	0	; () banked
 11983  0042B0  51C6               	movf	??_Test& (0+255),w,b
 11984  0042B2  0101               	movlb	1	; () banked
 11985  0042B4  6F47               	movwf	_var& (0+255),b
 11986  0042B6  6B48               	clrf	(_var+1)& (0+255),b
 11987                           
 11988                           ; BSR set to: 1
 11989                           ;Test.c: 40: var++;
 11990  0042B8  0101               	movlb	1	; () banked
 11991  0042BA  4B47               	infsnz	_var& (0+255),f,b
 11992  0042BC  2B48               	incf	(_var+1)& (0+255),f,b
 11993  0042BE                     l1246:
 11994  0042BE  A281               	btfss	3969,1,c	;volatile
 11995  0042C0  D01F               	goto	l9905
 11996  0042C2  D7FD               	goto	l1246
 11997  0042C4                     l9883:
 11998                           
 11999                           ;Test.c: 44: algorithmTest();
 12000  0042C4  EC13  F023         	call	_algorithmTest	;wreg free
 12001                           
 12002                           ;Test.c: 45: break;
 12003  0042C8  D044               	goto	l9907
 12004  0042CA                     l9885:
 12005                           
 12006                           ;Test.c: 47: sensorTest();
 12007  0042CA  EC53  F015         	call	_sensorTest	;wreg free
 12008                           
 12009                           ;Test.c: 48: break;
 12010  0042CE  D041               	goto	l9907
 12011  0042D0                     l9887:
 12012                           
 12013                           ;Test.c: 50: actuatorTest();
 12014  0042D0  EC6D  F004         	call	_actuatorTest	;wreg free
 12015                           
 12016                           ;Test.c: 51: break;
 12017  0042D4  D03E               	goto	l9907
 12018  0042D6                     l9889:
 12019                           
 12020                           ;Test.c: 53: arm();
 12021  0042D6  ECAF  F021         	call	_arm	;wreg free
 12022                           
 12023                           ;Test.c: 54: break;
 12024  0042DA  D03B               	goto	l9907
 12025  0042DC                     l9891:
 12026                           
 12027                           ;Test.c: 56: PortTestDC();
 12028  0042DC  EC2D  F029         	call	_PortTestDC	;wreg free
 12029                           
 12030                           ;Test.c: 57: break;
 12031  0042E0  D038               	goto	l9907
 12032  0042E2                     l9893:
 12033                           
 12034                           ;Test.c: 59: SpeedTest();
 12035  0042E2  EC97  F026         	call	_SpeedTest	;wreg free
 12036                           
 12037                           ;Test.c: 60: break;
 12038  0042E6  D035               	goto	l9907
 12039  0042E8                     l9895:
 12040                           
 12041                           ;Test.c: 62: PortTestPusher();
 12042  0042E8  ECFF  F028         	call	_PortTestPusher	;wreg free
 12043                           
 12044                           ;Test.c: 63: break;
 12045  0042EC  D032               	goto	l9907
 12046  0042EE                     l9897:
 12047                           
 12048                           ;Test.c: 65: PlatformTest();
 12049  0042EE  ECC8  F013         	call	_PlatformTest	;wreg free
 12050                           
 12051                           ;Test.c: 66: break;
 12052  0042F2  D02F               	goto	l9907
 12053  0042F4                     l9899:
 12054                           
 12055                           ;Test.c: 68: BothServos();
 12056  0042F4  EC1A  F010         	call	_BothServos	;wreg free
 12057                           
 12058                           ;Test.c: 69: break;
 12059  0042F8  D02C               	goto	l9907
 12060  0042FA                     l9901:
 12061                           
 12062                           ;Test.c: 71: BlockerTest();
 12063  0042FA  EC8F  F01E         	call	_BlockerTest	;wreg free
 12064                           
 12065                           ;Test.c: 75: }
 12066                           
 12067                           ;Test.c: 74: break;
 12068                           
 12069                           ;Test.c: 73: default:
 12070                           
 12071                           ;Test.c: 72: break;
 12072  0042FE  D029               	goto	l9907
 12073  004300                     l9905:
 12074  004300  C147  F0C6         	movff	_var,??_Test
 12075  004304  C148  F0C7         	movff	_var+1,??_Test+1
 12076                           
 12077                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12078                           ; Switch size 1, requested type "space"
 12079                           ; Number of cases is 1, Range of values is 0 to 0
 12080                           ; switch strategies available:
 12081                           ; Name         Instructions Cycles
 12082                           ; simple_byte            4     3 (average)
 12083                           ;	Chosen strategy is simple_byte
 12084  004308  0100               	movlb	0	; () banked
 12085  00430A  51C7               	movf	(??_Test+1)& (0+255),w,b
 12086  00430C  0A00               	xorlw	0	; case 0
 12087  00430E  A4D8               	btfss	status,2,c
 12088  004310  D020               	goto	l9907
 12089                           
 12090                           ; BSR set to: 0
 12091                           ; Switch size 1, requested type "space"
 12092                           ; Number of cases is 10, Range of values is 1 to 11
 12093                           ; switch strategies available:
 12094                           ; Name         Instructions Cycles
 12095                           ; simple_byte           31    16 (average)
 12096                           ;	Chosen strategy is simple_byte
 12097  004312  0100               	movlb	0	; () banked
 12098  004314  51C6               	movf	??_Test& (0+255),w,b
 12099  004316  0A01               	xorlw	1	; case 1
 12100  004318  B4D8               	btfsc	status,2,c
 12101  00431A  D7D4               	goto	l9883
 12102  00431C  0A03               	xorlw	3	; case 2
 12103  00431E  B4D8               	btfsc	status,2,c
 12104  004320  D7D4               	goto	l9885
 12105  004322  0A01               	xorlw	1	; case 3
 12106  004324  B4D8               	btfsc	status,2,c
 12107  004326  D7D4               	goto	l9887
 12108  004328  0A07               	xorlw	7	; case 4
 12109  00432A  B4D8               	btfsc	status,2,c
 12110  00432C  D7D4               	goto	l9889
 12111  00432E  0A01               	xorlw	1	; case 5
 12112  004330  B4D8               	btfsc	status,2,c
 12113  004332  D7D4               	goto	l9891
 12114  004334  0A03               	xorlw	3	; case 6
 12115  004336  B4D8               	btfsc	status,2,c
 12116  004338  D7D4               	goto	l9893
 12117  00433A  0A01               	xorlw	1	; case 7
 12118  00433C  B4D8               	btfsc	status,2,c
 12119  00433E  D7D4               	goto	l9895
 12120  004340  0A0F               	xorlw	15	; case 8
 12121  004342  B4D8               	btfsc	status,2,c
 12122  004344  D7D4               	goto	l9897
 12123  004346  0A02               	xorlw	2	; case 10
 12124  004348  B4D8               	btfsc	status,2,c
 12125  00434A  D7D4               	goto	l9899
 12126  00434C  0A01               	xorlw	1	; case 11
 12127  00434E  B4D8               	btfsc	status,2,c
 12128  004350  D7D4               	goto	l9901
 12129  004352                     l9907:
 12130  004352  0E03               	movlw	3
 12131  004354  0100               	movlb	0	; () banked
 12132  004356  19FC               	xorwf	_machine_state& (0+255),w,b
 12133  004358  A4D8               	btfss	status,2,c
 12134  00435A  0012               	return	
 12135  00435C  D77E               	goto	l9867
 12136  00435E                     __end_of_Test:
 12137                           	opt stack 0
 12138                           tblptru	equ	0xFF8
 12139                           tblptrh	equ	0xFF7
 12140                           tblptrl	equ	0xFF6
 12141                           tablat	equ	0xFF5
 12142                           prodh	equ	0xFF4
 12143                           prodl	equ	0xFF3
 12144                           intcon	equ	0xFF2
 12145                           intcon2	equ	0xFF1
 12146                           intcon3	equ	0xFF0
 12147                           postinc0	equ	0xFEE
 12148                           wreg	equ	0xFE8
 12149                           postdec1	equ	0xFE5
 12150                           fsr1l	equ	0xFE1
 12151                           indf2	equ	0xFDF
 12152                           postinc2	equ	0xFDE
 12153                           postdec2	equ	0xFDD
 12154                           fsr2h	equ	0xFDA
 12155                           fsr2l	equ	0xFD9
 12156                           status	equ	0xFD8
 12157                           
 12158 ;; *************** function _sensorTest *****************
 12159 ;; Defined at:
 12160 ;;		line 123 in file "Test.c"
 12161 ;; Parameters:    Size  Location     Type
 12162 ;;		None
 12163 ;; Auto vars:     Size  Location     Type
 12164 ;;  res             2   45[BANK0 ] int 
 12165 ;; Return value:  Size  Location     Type
 12166 ;;                  1    wreg      void 
 12167 ;; Registers used:
 12168 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12169 ;; Tracked objects:
 12170 ;;		On entry : 0/0
 12171 ;;		On exit  : 0/0
 12172 ;;		Unchanged: 0/0
 12173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12175 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12176 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12177 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12178 ;;Total ram usage:        4 bytes
 12179 ;; Hardware stack levels used:    1
 12180 ;; Hardware stack levels required when called:   10
 12181 ;; This function calls:
 12182 ;;		_lcdInst
 12183 ;;		_printf
 12184 ;;		_readADC
 12185 ;;		_readMAG
 12186 ;; This function is called by:
 12187 ;;		_Test
 12188 ;; This function uses a non-reentrant model
 12189 ;;
 12190                           
 12191                           	psect	text41
 12192  002AA6                     __ptext41:
 12193                           	opt stack 0
 12194  002AA6                     _sensorTest:
 12195                           	opt stack 19
 12196                           
 12197                           ;Test.c: 125: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12198                           
 12199                           ; BSR set to: 0
 12200                           ;incstack = 0
 12201  002AA6  0E01               	movlw	1
 12202  002AA8  ECA8  F02D         	call	_lcdInst
 12203  002AAC  0E68               	movlw	104
 12204  002AAE  0100               	movlb	0	; () banked
 12205  002AB0  6FAB               	movwf	??_sensorTest& (0+255),b
 12206  002AB2  0EE4               	movlw	228
 12207  002AB4                     u10327:
 12208  002AB4  2EE8               	decfsz	wreg,f,c
 12209  002AB6  D7FE               	bra	u10327
 12210  002AB8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12211  002ABA  D7FC               	bra	u10327
 12212  002ABC  F000               	nop	
 12213  002ABE  0E80               	movlw	128
 12214  002AC0  ECA8  F02D         	call	_lcdInst
 12215                           
 12216                           ;Test.c: 126: printf("SENSORS");
 12217  002AC4  0EAE               	movlw	low STR_77
 12218  002AC6  0100               	movlb	0	; () banked
 12219  002AC8  6F8E               	movwf	printf@f& (0+255),b
 12220  002ACA  0EFF               	movlw	high STR_77
 12221  002ACC  0100               	movlb	0	; () banked
 12222  002ACE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12223  002AD0  ECFE  F00D         	call	_printf	;wreg free
 12224                           
 12225                           ;Test.c: 127: lcdInst(0b11000000);;
 12226  002AD4  0EC0               	movlw	192
 12227  002AD6  ECA8  F02D         	call	_lcdInst
 12228                           
 12229                           ;Test.c: 128: printf("PUSH TO START");
 12230  002ADA  0E2E               	movlw	low STR_71
 12231  002ADC  0100               	movlb	0	; () banked
 12232  002ADE  6F8E               	movwf	printf@f& (0+255),b
 12233  002AE0  0EFF               	movlw	high STR_71
 12234  002AE2  0100               	movlb	0	; () banked
 12235  002AE4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12236  002AE6  ECFE  F00D         	call	_printf	;wreg free
 12237                           
 12238                           ;Test.c: 129: _delay((unsigned long)((100)*(32000000/4000.0)));
 12239  002AEA  0E05               	movlw	5
 12240  002AEC  0100               	movlb	0	; () banked
 12241  002AEE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12242  002AF0  0E0F               	movlw	15
 12243  002AF2  0100               	movlb	0	; () banked
 12244  002AF4  6FAB               	movwf	??_sensorTest& (0+255),b
 12245  002AF6  0EF1               	movlw	241
 12246  002AF8                     u10337:
 12247  002AF8  2EE8               	decfsz	wreg,f,c
 12248  002AFA  D7FE               	bra	u10337
 12249  002AFC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12250  002AFE  D7FC               	bra	u10337
 12251  002B00  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12252  002B02  D7FA               	bra	u10337
 12253  002B04                     l1275:
 12254  002B04  A281               	btfss	3969,1,c	;volatile
 12255  002B06  D7FE               	goto	l1275
 12256  002B08                     l1278:
 12257  002B08  B281               	btfsc	3969,1,c	;volatile
 12258  002B0A  D7FE               	goto	l1278
 12259                           
 12260                           ;Test.c: 132: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12261  002B0C  0E01               	movlw	1
 12262  002B0E  ECA8  F02D         	call	_lcdInst
 12263  002B12  0E68               	movlw	104
 12264  002B14  0100               	movlb	0	; () banked
 12265  002B16  6FAB               	movwf	??_sensorTest& (0+255),b
 12266  002B18  0EE4               	movlw	228
 12267  002B1A                     u10347:
 12268  002B1A  2EE8               	decfsz	wreg,f,c
 12269  002B1C  D7FE               	bra	u10347
 12270  002B1E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12271  002B20  D7FC               	bra	u10347
 12272  002B22  F000               	nop	
 12273  002B24  0E80               	movlw	128
 12274  002B26  ECA8  F02D         	call	_lcdInst
 12275                           
 12276                           ;Test.c: 137: printf("TST: IR SNSR");
 12277  002B2A  0E58               	movlw	low STR_79
 12278  002B2C  0100               	movlb	0	; () banked
 12279  002B2E  6F8E               	movwf	printf@f& (0+255),b
 12280  002B30  0EFF               	movlw	high STR_79
 12281  002B32  0100               	movlb	0	; () banked
 12282  002B34  6F8F               	movwf	(printf@f+1)& (0+255),b
 12283  002B36  ECFE  F00D         	call	_printf	;wreg free
 12284                           
 12285                           ;Test.c: 138: _delay((unsigned long)((100)*(32000000/4000.0)));
 12286  002B3A  0E05               	movlw	5
 12287  002B3C  0100               	movlb	0	; () banked
 12288  002B3E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12289  002B40  0E0F               	movlw	15
 12290  002B42  0100               	movlb	0	; () banked
 12291  002B44  6FAB               	movwf	??_sensorTest& (0+255),b
 12292  002B46  0EF1               	movlw	241
 12293  002B48                     u10357:
 12294  002B48  2EE8               	decfsz	wreg,f,c
 12295  002B4A  D7FE               	bra	u10357
 12296  002B4C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12297  002B4E  D7FC               	bra	u10357
 12298  002B50  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12299  002B52  D7FA               	bra	u10357
 12300                           
 12301                           ;Test.c: 139: LATCbits.LATC5 = 1;
 12302  002B54  8A8B               	bsf	3979,5,c	;volatile
 12303                           
 12304                           ;Test.c: 141: while(PORTBbits.RB1 == 0){
 12305  002B56  D05C               	goto	l8281
 12306  002B58                     l8263:
 12307                           
 12308                           ;Test.c: 142: readADC(0);
 12309  002B58  0E00               	movlw	0
 12310  002B5A  ECA1  F02C         	call	_readADC
 12311                           
 12312                           ;Test.c: 143: int res = ADRESH<<8 | ADRESL;
 12313  002B5E  50C3               	movf	4035,w,c	;volatile
 12314  002B60  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 12315  002B64  0100               	movlb	0	; () banked
 12316  002B66  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 12317  002B68  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 12318  002B6C  0100               	movlb	0	; () banked
 12319  002B6E  6BAB               	clrf	??_sensorTest& (0+255),b
 12320  002B70  0100               	movlb	0	; () banked
 12321  002B72  11AB               	iorwf	??_sensorTest& (0+255),w,b
 12322  002B74  0100               	movlb	0	; () banked
 12323  002B76  6FAD               	movwf	sensorTest@res& (0+255),b
 12324  002B78  0100               	movlb	0	; () banked
 12325  002B7A  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 12326  002B7C  0100               	movlb	0	; () banked
 12327  002B7E  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 12328                           
 12329                           ; BSR set to: 0
 12330                           ;Test.c: 144: IR_signal = (res > 800) ? 1 : 0;
 12331  002B80  0100               	movlb	0	; () banked
 12332  002B82  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 12333  002B84  D00A               	goto	u7110
 12334  002B86  0E21               	movlw	33
 12335  002B88  0100               	movlb	0	; () banked
 12336  002B8A  5DAD               	subwf	sensorTest@res& (0+255),w,b
 12337  002B8C  0E03               	movlw	3
 12338  002B8E  0100               	movlb	0	; () banked
 12339  002B90  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 12340  002B92  A0D8               	btfss	status,0,c
 12341  002B94  D002               	goto	u7110
 12342  002B96  0E01               	movlw	1
 12343  002B98  D001               	goto	u7120
 12344  002B9A                     u7110:
 12345  002B9A  0E00               	movlw	0
 12346  002B9C                     u7120:
 12347  002B9C  0100               	movlb	0	; () banked
 12348  002B9E  6FE0               	movwf	_IR_signal& (0+255),b
 12349  002BA0  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 12350                           
 12351                           ;Test.c: 146: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12352  002BA2  0E01               	movlw	1
 12353  002BA4  ECA8  F02D         	call	_lcdInst
 12354  002BA8  0E68               	movlw	104
 12355  002BAA  0100               	movlb	0	; () banked
 12356  002BAC  6FAB               	movwf	??_sensorTest& (0+255),b
 12357  002BAE  0EE4               	movlw	228
 12358  002BB0                     u10367:
 12359  002BB0  2EE8               	decfsz	wreg,f,c
 12360  002BB2  D7FE               	bra	u10367
 12361  002BB4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12362  002BB6  D7FC               	bra	u10367
 12363  002BB8  F000               	nop	
 12364  002BBA  0E80               	movlw	128
 12365  002BBC  ECA8  F02D         	call	_lcdInst
 12366                           
 12367                           ;Test.c: 147: printf("IR_signal: %d ", IR_signal);
 12368  002BC0  0E7D               	movlw	low STR_80
 12369  002BC2  0100               	movlb	0	; () banked
 12370  002BC4  6F8E               	movwf	printf@f& (0+255),b
 12371  002BC6  0EFE               	movlw	high STR_80
 12372  002BC8  0100               	movlb	0	; () banked
 12373  002BCA  6F8F               	movwf	(printf@f+1)& (0+255),b
 12374  002BCC  C0E0  F090         	movff	_IR_signal,?_printf+2
 12375  002BD0  C0E1  F091         	movff	_IR_signal+1,?_printf+3
 12376  002BD4  ECFE  F00D         	call	_printf	;wreg free
 12377                           
 12378                           ;Test.c: 148: lcdInst(0b11000000);;
 12379  002BD8  0EC0               	movlw	192
 12380  002BDA  ECA8  F02D         	call	_lcdInst
 12381                           
 12382                           ;Test.c: 149: printf("%d", res);
 12383  002BDE  0E0A               	movlw	low (STR_27+14)
 12384  002BE0  0100               	movlb	0	; () banked
 12385  002BE2  6F8E               	movwf	printf@f& (0+255),b
 12386  002BE4  0EFE               	movlw	high (STR_27+14)
 12387  002BE6  0100               	movlb	0	; () banked
 12388  002BE8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12389  002BEA  C0AD  F090         	movff	sensorTest@res,?_printf+2
 12390  002BEE  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 12391  002BF2  ECFE  F00D         	call	_printf	;wreg free
 12392                           
 12393                           ;Test.c: 150: _delay((unsigned long)((100)*(32000000/4000.0)));
 12394  002BF6  0E05               	movlw	5
 12395  002BF8  0100               	movlb	0	; () banked
 12396  002BFA  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12397  002BFC  0E0F               	movlw	15
 12398  002BFE  0100               	movlb	0	; () banked
 12399  002C00  6FAB               	movwf	??_sensorTest& (0+255),b
 12400  002C02  0EF1               	movlw	241
 12401  002C04                     u10377:
 12402  002C04  2EE8               	decfsz	wreg,f,c
 12403  002C06  D7FE               	bra	u10377
 12404  002C08  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12405  002C0A  D7FC               	bra	u10377
 12406  002C0C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12407  002C0E  D7FA               	bra	u10377
 12408  002C10                     l8281:
 12409  002C10  A281               	btfss	3969,1,c	;volatile
 12410  002C12  D7A2               	goto	l8263
 12411                           
 12412                           ;Test.c: 151: }
 12413                           ;Test.c: 152: LATCbits.LATC5 = 0;
 12414  002C14  9A8B               	bcf	3979,5,c	;volatile
 12415                           
 12416                           ;Test.c: 160: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12417  002C16  0E01               	movlw	1
 12418  002C18  ECA8  F02D         	call	_lcdInst
 12419  002C1C  0E68               	movlw	104
 12420  002C1E  0100               	movlb	0	; () banked
 12421  002C20  6FAB               	movwf	??_sensorTest& (0+255),b
 12422  002C22  0EE4               	movlw	228
 12423  002C24                     u10387:
 12424  002C24  2EE8               	decfsz	wreg,f,c
 12425  002C26  D7FE               	bra	u10387
 12426  002C28  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12427  002C2A  D7FC               	bra	u10387
 12428  002C2C  F000               	nop	
 12429  002C2E  0E80               	movlw	128
 12430  002C30  ECA8  F02D         	call	_lcdInst
 12431                           
 12432                           ;Test.c: 161: printf("TST: MAGNETISM");
 12433  002C34  0EAA               	movlw	low STR_82
 12434  002C36  0100               	movlb	0	; () banked
 12435  002C38  6F8E               	movwf	printf@f& (0+255),b
 12436  002C3A  0EFE               	movlw	high STR_82
 12437  002C3C  0100               	movlb	0	; () banked
 12438  002C3E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12439  002C40  ECFE  F00D         	call	_printf	;wreg free
 12440                           
 12441                           ;Test.c: 162: _delay((unsigned long)((100)*(32000000/4000.0)));
 12442  002C44  0E05               	movlw	5
 12443  002C46  0100               	movlb	0	; () banked
 12444  002C48  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12445  002C4A  0E0F               	movlw	15
 12446  002C4C  0100               	movlb	0	; () banked
 12447  002C4E  6FAB               	movwf	??_sensorTest& (0+255),b
 12448  002C50  0EF1               	movlw	241
 12449  002C52                     u10397:
 12450  002C52  2EE8               	decfsz	wreg,f,c
 12451  002C54  D7FE               	bra	u10397
 12452  002C56  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12453  002C58  D7FC               	bra	u10397
 12454  002C5A  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12455  002C5C  D7FA               	bra	u10397
 12456                           
 12457                           ;Test.c: 163: while(PORTBbits.RB1 == 0){
 12458  002C5E  D021               	goto	l8299
 12459  002C60                     l8293:
 12460                           
 12461                           ;Test.c: 164: readMAG();
 12462  002C60  EC24  F02A         	call	_readMAG	;wreg free
 12463                           
 12464                           ;Test.c: 165: lcdInst(0b10000000);;
 12465  002C64  0E80               	movlw	128
 12466  002C66  ECA8  F02D         	call	_lcdInst
 12467                           
 12468                           ;Test.c: 166: lcdInst(0b11000000);;
 12469  002C6A  0EC0               	movlw	192
 12470  002C6C  ECA8  F02D         	call	_lcdInst
 12471                           
 12472                           ;Test.c: 167: printf("MAG_signal: %d ", MAG_signal);
 12473  002C70  0E1E               	movlw	low STR_83
 12474  002C72  0100               	movlb	0	; () banked
 12475  002C74  6F8E               	movwf	printf@f& (0+255),b
 12476  002C76  0EFE               	movlw	high STR_83
 12477  002C78  0100               	movlb	0	; () banked
 12478  002C7A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12479  002C7C  C0E2  F090         	movff	_MAG_signal,?_printf+2
 12480  002C80  C0E3  F091         	movff	_MAG_signal+1,?_printf+3
 12481  002C84  ECFE  F00D         	call	_printf	;wreg free
 12482                           
 12483                           ;Test.c: 168: _delay((unsigned long)((100)*(32000000/4000.0)));
 12484  002C88  0E05               	movlw	5
 12485  002C8A  0100               	movlb	0	; () banked
 12486  002C8C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12487  002C8E  0E0F               	movlw	15
 12488  002C90  0100               	movlb	0	; () banked
 12489  002C92  6FAB               	movwf	??_sensorTest& (0+255),b
 12490  002C94  0EF1               	movlw	241
 12491  002C96                     u10407:
 12492  002C96  2EE8               	decfsz	wreg,f,c
 12493  002C98  D7FE               	bra	u10407
 12494  002C9A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12495  002C9C  D7FC               	bra	u10407
 12496  002C9E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12497  002CA0  D7FA               	bra	u10407
 12498  002CA2                     l8299:
 12499  002CA2  A281               	btfss	3969,1,c	;volatile
 12500  002CA4  D7DD               	goto	l8293
 12501                           
 12502                           ;Test.c: 169: }
 12503                           ;Test.c: 174: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12504  002CA6  0E01               	movlw	1
 12505  002CA8  ECA8  F02D         	call	_lcdInst
 12506  002CAC  0E68               	movlw	104
 12507  002CAE  0100               	movlb	0	; () banked
 12508  002CB0  6FAB               	movwf	??_sensorTest& (0+255),b
 12509  002CB2  0EE4               	movlw	228
 12510  002CB4                     u10417:
 12511  002CB4  2EE8               	decfsz	wreg,f,c
 12512  002CB6  D7FE               	bra	u10417
 12513  002CB8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12514  002CBA  D7FC               	bra	u10417
 12515  002CBC  F000               	nop	
 12516  002CBE  0E80               	movlw	128
 12517  002CC0  ECA8  F02D         	call	_lcdInst
 12518                           
 12519                           ;Test.c: 175: printf("TST: COND");
 12520  002CC4  0E87               	movlw	low STR_84
 12521  002CC6  0100               	movlb	0	; () banked
 12522  002CC8  6F8E               	movwf	printf@f& (0+255),b
 12523  002CCA  0EFF               	movlw	high STR_84
 12524  002CCC  0100               	movlb	0	; () banked
 12525  002CCE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12526  002CD0  ECFE  F00D         	call	_printf	;wreg free
 12527                           
 12528                           ;Test.c: 176: _delay((unsigned long)((100)*(32000000/4000.0)));
 12529  002CD4  0E05               	movlw	5
 12530  002CD6  0100               	movlb	0	; () banked
 12531  002CD8  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12532  002CDA  0E0F               	movlw	15
 12533  002CDC  0100               	movlb	0	; () banked
 12534  002CDE  6FAB               	movwf	??_sensorTest& (0+255),b
 12535  002CE0  0EF1               	movlw	241
 12536  002CE2                     u10427:
 12537  002CE2  2EE8               	decfsz	wreg,f,c
 12538  002CE4  D7FE               	bra	u10427
 12539  002CE6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12540  002CE8  D7FC               	bra	u10427
 12541  002CEA  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12542  002CEC  D7FA               	bra	u10427
 12543  002CEE                     l8311:
 12544                           
 12545                           ;Test.c: 178: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12546  002CEE  0E01               	movlw	1
 12547  002CF0  ECA8  F02D         	call	_lcdInst
 12548  002CF4  0E68               	movlw	104
 12549  002CF6  0100               	movlb	0	; () banked
 12550  002CF8  6FAB               	movwf	??_sensorTest& (0+255),b
 12551  002CFA  0EE4               	movlw	228
 12552  002CFC                     u10437:
 12553  002CFC  2EE8               	decfsz	wreg,f,c
 12554  002CFE  D7FE               	bra	u10437
 12555  002D00  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12556  002D02  D7FC               	bra	u10437
 12557  002D04  F000               	nop	
 12558  002D06  0E80               	movlw	128
 12559  002D08  ECA8  F02D         	call	_lcdInst
 12560                           
 12561                           ;Test.c: 179: printf("TST: COND");
 12562  002D0C  0E87               	movlw	low STR_84
 12563  002D0E  0100               	movlb	0	; () banked
 12564  002D10  6F8E               	movwf	printf@f& (0+255),b
 12565  002D12  0EFF               	movlw	high STR_84
 12566  002D14  0100               	movlb	0	; () banked
 12567  002D16  6F8F               	movwf	(printf@f+1)& (0+255),b
 12568  002D18  ECFE  F00D         	call	_printf	;wreg free
 12569                           
 12570                           ;Test.c: 180: while(PORTBbits.RB1 == 0){
 12571  002D1C  D01B               	goto	l8323
 12572  002D1E                     l8319:
 12573                           
 12574                           ;Test.c: 184: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12575  002D1E  0E80               	movlw	128
 12576  002D20  ECA8  F02D         	call	_lcdInst
 12577  002D24  0EC0               	movlw	192
 12578  002D26  ECA8  F02D         	call	_lcdInst
 12579                           
 12580                           ;Test.c: 185: printf("COND: %d", PORTAbits.RA2);
 12581  002D2A  0EA5               	movlw	low STR_86
 12582  002D2C  0100               	movlb	0	; () banked
 12583  002D2E  6F8E               	movwf	printf@f& (0+255),b
 12584  002D30  0EFF               	movlw	high STR_86
 12585  002D32  0100               	movlb	0	; () banked
 12586  002D34  6F8F               	movwf	(printf@f+1)& (0+255),b
 12587  002D36  A480               	btfss	3968,2,c	;volatile
 12588  002D38  D004               	goto	u7150
 12589  002D3A  0100               	movlb	0	; () banked
 12590  002D3C  6BAB               	clrf	??_sensorTest& (0+255),b
 12591  002D3E  2BAB               	incf	??_sensorTest& (0+255),f,b
 12592  002D40  D002               	goto	u7158
 12593  002D42                     u7150:
 12594  002D42  0100               	movlb	0	; () banked
 12595  002D44  6BAB               	clrf	??_sensorTest& (0+255),b
 12596  002D46                     u7158:
 12597  002D46  0100               	movlb	0	; () banked
 12598  002D48  51AB               	movf	??_sensorTest& (0+255),w,b
 12599  002D4A  0100               	movlb	0	; () banked
 12600  002D4C  6F90               	movwf	(?_printf+2)& (0+255),b
 12601  002D4E  6B91               	clrf	(?_printf+3)& (0+255),b
 12602  002D50  ECFE  F00D         	call	_printf	;wreg free
 12603  002D54                     l8323:
 12604  002D54  A281               	btfss	3969,1,c	;volatile
 12605  002D56  D7E3               	goto	l8319
 12606                           
 12607                           ;Test.c: 186: }
 12608                           ;Test.c: 187: if(PORTB >> 4 == 0b1111){
 12609  002D58  3881               	swapf	3969,w,c	;volatile
 12610  002D5A  0B0F               	andlw	15
 12611  002D5C  0A0F               	xorlw	15
 12612  002D5E  B4D8               	btfsc	status,2,c
 12613  002D60  0012               	return	
 12614                           
 12615                           ;Test.c: 190: else{
 12616                           ;Test.c: 191: LATAbits.LATA3 = 1;
 12617                           
 12618                           ;Test.c: 189: }
 12619                           
 12620                           ;Test.c: 188: break;
 12621  002D62  8689               	bsf	3977,3,c	;volatile
 12622                           
 12623                           ;Test.c: 192: while(PORTBbits.RB1 == 1){
 12624  002D64  D01B               	goto	l8335
 12625  002D66                     l8331:
 12626                           
 12627                           ;Test.c: 194: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12628  002D66  0E80               	movlw	128
 12629  002D68  ECA8  F02D         	call	_lcdInst
 12630  002D6C  0EC0               	movlw	192
 12631  002D6E  ECA8  F02D         	call	_lcdInst
 12632                           
 12633                           ;Test.c: 195: printf("COND: %d", PORTAbits.RA2);
 12634  002D72  0EA5               	movlw	low STR_86
 12635  002D74  0100               	movlb	0	; () banked
 12636  002D76  6F8E               	movwf	printf@f& (0+255),b
 12637  002D78  0EFF               	movlw	high STR_86
 12638  002D7A  0100               	movlb	0	; () banked
 12639  002D7C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12640  002D7E  A480               	btfss	3968,2,c	;volatile
 12641  002D80  D004               	goto	u7180
 12642  002D82  0100               	movlb	0	; () banked
 12643  002D84  6BAB               	clrf	??_sensorTest& (0+255),b
 12644  002D86  2BAB               	incf	??_sensorTest& (0+255),f,b
 12645  002D88  D002               	goto	u7188
 12646  002D8A                     u7180:
 12647  002D8A  0100               	movlb	0	; () banked
 12648  002D8C  6BAB               	clrf	??_sensorTest& (0+255),b
 12649  002D8E                     u7188:
 12650  002D8E  0100               	movlb	0	; () banked
 12651  002D90  51AB               	movf	??_sensorTest& (0+255),w,b
 12652  002D92  0100               	movlb	0	; () banked
 12653  002D94  6F90               	movwf	(?_printf+2)& (0+255),b
 12654  002D96  6B91               	clrf	(?_printf+3)& (0+255),b
 12655  002D98  ECFE  F00D         	call	_printf	;wreg free
 12656  002D9C                     l8335:
 12657  002D9C  B281               	btfsc	3969,1,c	;volatile
 12658  002D9E  D7E3               	goto	l8331
 12659                           
 12660                           ;Test.c: 196: }
 12661                           ;Test.c: 197: LATAbits.LATA3 = !1;
 12662  002DA0  9689               	bcf	3977,3,c	;volatile
 12663  002DA2  D7A5               	goto	l8311
 12664  002DA4                     __end_of_sensorTest:
 12665                           	opt stack 0
 12666                           tblptru	equ	0xFF8
 12667                           tblptrh	equ	0xFF7
 12668                           tblptrl	equ	0xFF6
 12669                           tablat	equ	0xFF5
 12670                           prodh	equ	0xFF4
 12671                           prodl	equ	0xFF3
 12672                           intcon	equ	0xFF2
 12673                           intcon2	equ	0xFF1
 12674                           intcon3	equ	0xFF0
 12675                           postinc0	equ	0xFEE
 12676                           wreg	equ	0xFE8
 12677                           postdec1	equ	0xFE5
 12678                           fsr1l	equ	0xFE1
 12679                           indf2	equ	0xFDF
 12680                           postinc2	equ	0xFDE
 12681                           postdec2	equ	0xFDD
 12682                           fsr2h	equ	0xFDA
 12683                           fsr2l	equ	0xFD9
 12684                           status	equ	0xFD8
 12685                           
 12686 ;; *************** function _readMAG *****************
 12687 ;; Defined at:
 12688 ;;		line 29 in file "ADCFunctionality.c"
 12689 ;; Parameters:    Size  Location     Type
 12690 ;;		None
 12691 ;; Auto vars:     Size  Location     Type
 12692 ;;  res             2    4[BANK0 ] int 
 12693 ;; Return value:  Size  Location     Type
 12694 ;;                  1    wreg      void 
 12695 ;; Registers used:
 12696 ;;		wreg, status,2, status,0, cstack
 12697 ;; Tracked objects:
 12698 ;;		On entry : 0/0
 12699 ;;		On exit  : 0/0
 12700 ;;		Unchanged: 0/0
 12701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12703 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12704 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12705 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12706 ;;Total ram usage:        4 bytes
 12707 ;; Hardware stack levels used:    1
 12708 ;; Hardware stack levels required when called:    8
 12709 ;; This function calls:
 12710 ;;		_readADC
 12711 ;; This function is called by:
 12712 ;;		_getMAG
 12713 ;;		_sensorTest
 12714 ;; This function uses a non-reentrant model
 12715 ;;
 12716                           
 12717                           	psect	text42
 12718  005448                     __ptext42:
 12719                           	opt stack 0
 12720  005448                     _readMAG:
 12721                           	opt stack 19
 12722                           
 12723                           ;ADCFunctionality.c: 30: readADC(1);
 12724                           
 12725                           ;incstack = 0
 12726  005448  0E01               	movlw	1
 12727  00544A  ECA1  F02C         	call	_readADC
 12728                           
 12729                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 12730  00544E  50C3               	movf	4035,w,c	;volatile
 12731  005450  CFC4 F082          	movff	4036,??_readMAG	;volatile
 12732  005454  0100               	movlb	0	; () banked
 12733  005456  6B83               	clrf	(??_readMAG+1)& (0+255),b
 12734  005458  C082  F083         	movff	??_readMAG,??_readMAG+1
 12735  00545C  0100               	movlb	0	; () banked
 12736  00545E  6B82               	clrf	??_readMAG& (0+255),b
 12737  005460  0100               	movlb	0	; () banked
 12738  005462  1182               	iorwf	??_readMAG& (0+255),w,b
 12739  005464  0100               	movlb	0	; () banked
 12740  005466  6F84               	movwf	readMAG@res& (0+255),b
 12741  005468  0100               	movlb	0	; () banked
 12742  00546A  5183               	movf	(??_readMAG+1)& (0+255),w,b
 12743  00546C  0100               	movlb	0	; () banked
 12744  00546E  6F85               	movwf	(readMAG@res+1)& (0+255),b
 12745                           
 12746                           ; BSR set to: 0
 12747                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 12748  005470  0100               	movlb	0	; () banked
 12749  005472  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 12750  005474  D008               	goto	u5111
 12751  005476  0100               	movlb	0	; () banked
 12752  005478  5185               	movf	(readMAG@res+1)& (0+255),w,b
 12753  00547A  E107               	bnz	u5110
 12754  00547C  0E96               	movlw	150
 12755  00547E  0100               	movlb	0	; () banked
 12756  005480  5D84               	subwf	readMAG@res& (0+255),w,b
 12757  005482  B0D8               	btfsc	status,0,c
 12758  005484  D002               	goto	u5110
 12759  005486                     u5111:
 12760  005486  0E01               	movlw	1
 12761  005488  D001               	goto	u5120
 12762  00548A                     u5110:
 12763  00548A  0E00               	movlw	0
 12764  00548C                     u5120:
 12765  00548C  0100               	movlb	0	; () banked
 12766  00548E  6FE2               	movwf	_MAG_signal& (0+255),b
 12767  005490  6BE3               	clrf	(_MAG_signal+1)& (0+255),b
 12768                           
 12769                           ; BSR set to: 0
 12770  005492  0012               	return		;funcret
 12771  005494                     __end_of_readMAG:
 12772                           	opt stack 0
 12773                           tblptru	equ	0xFF8
 12774                           tblptrh	equ	0xFF7
 12775                           tblptrl	equ	0xFF6
 12776                           tablat	equ	0xFF5
 12777                           prodh	equ	0xFF4
 12778                           prodl	equ	0xFF3
 12779                           intcon	equ	0xFF2
 12780                           intcon2	equ	0xFF1
 12781                           intcon3	equ	0xFF0
 12782                           postinc0	equ	0xFEE
 12783                           wreg	equ	0xFE8
 12784                           postdec1	equ	0xFE5
 12785                           fsr1l	equ	0xFE1
 12786                           indf2	equ	0xFDF
 12787                           postinc2	equ	0xFDE
 12788                           postdec2	equ	0xFDD
 12789                           fsr2h	equ	0xFDA
 12790                           fsr2l	equ	0xFD9
 12791                           status	equ	0xFD8
 12792                           
 12793 ;; *************** function _arm *****************
 12794 ;; Defined at:
 12795 ;;		line 639 in file "Test.c"
 12796 ;; Parameters:    Size  Location     Type
 12797 ;;		None
 12798 ;; Auto vars:     Size  Location     Type
 12799 ;;  on              2   44[BANK0 ] int 
 12800 ;; Return value:  Size  Location     Type
 12801 ;;                  1    wreg      void 
 12802 ;; Registers used:
 12803 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12804 ;; Tracked objects:
 12805 ;;		On entry : 0/0
 12806 ;;		On exit  : 0/0
 12807 ;;		Unchanged: 0/0
 12808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12810 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12811 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12812 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12813 ;;Total ram usage:        3 bytes
 12814 ;; Hardware stack levels used:    1
 12815 ;; Hardware stack levels required when called:   10
 12816 ;; This function calls:
 12817 ;;		_lcdInst
 12818 ;;		_printf
 12819 ;;		_stopSignals
 12820 ;; This function is called by:
 12821 ;;		_Test
 12822 ;; This function uses a non-reentrant model
 12823 ;;
 12824                           
 12825                           	psect	text43
 12826  00435E                     __ptext43:
 12827                           	opt stack 0
 12828  00435E                     _arm:
 12829                           	opt stack 19
 12830                           
 12831                           ;Test.c: 640: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12832                           
 12833                           ; BSR set to: 0
 12834                           ;incstack = 0
 12835  00435E  0E01               	movlw	1
 12836  004360  ECA8  F02D         	call	_lcdInst
 12837  004364  0E68               	movlw	104
 12838  004366  0100               	movlb	0	; () banked
 12839  004368  6FAB               	movwf	??_arm& (0+255),b
 12840  00436A  0EE4               	movlw	228
 12841  00436C                     u10447:
 12842  00436C  2EE8               	decfsz	wreg,f,c
 12843  00436E  D7FE               	bra	u10447
 12844  004370  2FAB               	decfsz	??_arm& (0+255),f,b
 12845  004372  D7FC               	bra	u10447
 12846  004374  F000               	nop	
 12847  004376  0E80               	movlw	128
 12848  004378  ECA8  F02D         	call	_lcdInst
 12849                           
 12850                           ;Test.c: 641: printf("D WILL RETURN   ");
 12851  00437C  0EDC               	movlw	low STR_118
 12852  00437E  0100               	movlb	0	; () banked
 12853  004380  6F8E               	movwf	printf@f& (0+255),b
 12854  004382  0EFB               	movlw	high STR_118
 12855  004384  0100               	movlb	0	; () banked
 12856  004386  6F8F               	movwf	(printf@f+1)& (0+255),b
 12857  004388  ECFE  F00D         	call	_printf	;wreg free
 12858                           
 12859                           ;Test.c: 642: lcdInst(0b11000000);;
 12860  00438C  0EC0               	movlw	192
 12861  00438E  ECA8  F02D         	call	_lcdInst
 12862                           
 12863                           ;Test.c: 643: printf("ELSE TOGGLES ARM");
 12864  004392  0E97               	movlw	low STR_127
 12865  004394  0100               	movlb	0	; () banked
 12866  004396  6F8E               	movwf	printf@f& (0+255),b
 12867  004398  0EFC               	movlw	high STR_127
 12868  00439A  0100               	movlb	0	; () banked
 12869  00439C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12870  00439E  ECFE  F00D         	call	_printf	;wreg free
 12871                           
 12872                           ;Test.c: 645: (INTCONbits.GIE = 1);
 12873  0043A2  8EF2               	bsf	intcon,7,c	;volatile
 12874                           
 12875                           ;Test.c: 646: machine_state = Sorting_state;
 12876  0043A4  0E01               	movlw	1
 12877  0043A6  0100               	movlb	0	; () banked
 12878  0043A8  6FFC               	movwf	_machine_state& (0+255),b
 12879                           
 12880                           ; BSR set to: 0
 12881                           ;Test.c: 647: f_arm_position = 2;
 12882  0043AA  0E00               	movlw	0
 12883  0043AC  0100               	movlb	0	; () banked
 12884  0043AE  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12885  0043B0  0E02               	movlw	2
 12886  0043B2  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 12887                           
 12888                           ; BSR set to: 0
 12889                           ;Test.c: 648: timer2_counter = 0;
 12890  0043B4  0E00               	movlw	0
 12891  0043B6  6E74               	movwf	_timer2_counter+1,c	;volatile
 12892  0043B8  0E00               	movlw	0
 12893  0043BA  6E73               	movwf	_timer2_counter,c	;volatile
 12894                           
 12895                           ; BSR set to: 0
 12896                           ;Test.c: 649: LATBbits.LATB3 = 1;
 12897  0043BC  868A               	bsf	3978,3,c	;volatile
 12898                           
 12899                           ; BSR set to: 0
 12900                           ;Test.c: 650: TMR2ON = 1;
 12901  0043BE  84CA               	bsf	4042,2,c	;volatile
 12902                           
 12903                           ; BSR set to: 0
 12904                           ;Test.c: 651: was_low_2 = 0;
 12905  0043C0  0E00               	movlw	0
 12906  0043C2  6E7A               	movwf	_was_low_2+1,c	;volatile
 12907  0043C4  0E00               	movlw	0
 12908  0043C6  6E79               	movwf	_was_low_2,c	;volatile
 12909                           
 12910                           ; BSR set to: 0
 12911                           ;Test.c: 653: int on = 0;
 12912  0043C8  0E00               	movlw	0
 12913  0043CA  0100               	movlb	0	; () banked
 12914  0043CC  6FAD               	movwf	(arm@on+1)& (0+255),b
 12915  0043CE  0E00               	movlw	0
 12916  0043D0  6FAC               	movwf	arm@on& (0+255),b
 12917  0043D2                     l8789:
 12918                           
 12919                           ;Test.c: 655: if(on){
 12920  0043D2  0100               	movlb	0	; () banked
 12921  0043D4  51AC               	movf	arm@on& (0+255),w,b
 12922  0043D6  0100               	movlb	0	; () banked
 12923  0043D8  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12924  0043DA  B4D8               	btfsc	status,2,c
 12925  0043DC  D01C               	goto	l8801
 12926                           
 12927                           ; BSR set to: 0
 12928                           ;Test.c: 656: on = !on;
 12929  0043DE  0100               	movlb	0	; () banked
 12930  0043E0  51AC               	movf	arm@on& (0+255),w,b
 12931  0043E2  0100               	movlb	0	; () banked
 12932  0043E4  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12933  0043E6  A4D8               	btfss	status,2,c
 12934  0043E8  D002               	goto	u7770
 12935  0043EA  0E01               	movlw	1
 12936  0043EC  D001               	goto	u7780
 12937  0043EE                     u7770:
 12938  0043EE  0E00               	movlw	0
 12939  0043F0                     u7780:
 12940  0043F0  0100               	movlb	0	; () banked
 12941  0043F2  6FAC               	movwf	arm@on& (0+255),b
 12942  0043F4  6BAD               	clrf	(arm@on+1)& (0+255),b
 12943                           
 12944                           ;Test.c: 657: while(PORTBbits.RB1 == 0){
 12945  0043F6  D005               	goto	l8795
 12946  0043F8                     l8793:
 12947                           
 12948                           ; BSR set to: 0
 12949                           ;Test.c: 658: f_arm_position = 0;
 12950  0043F8  0E00               	movlw	0
 12951  0043FA  0100               	movlb	0	; () banked
 12952  0043FC  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12953  0043FE  0E00               	movlw	0
 12954  004400  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 12955  004402                     l8795:
 12956                           
 12957                           ; BSR set to: 0
 12958  004402  A281               	btfss	3969,1,c	;volatile
 12959  004404  D7F9               	goto	l8793
 12960                           
 12961                           ; BSR set to: 0
 12962                           ;Test.c: 659: }
 12963                           ;Test.c: 660: if(PORTB >> 4 == 0b1111){
 12964                           
 12965                           ; BSR set to: 0
 12966  004406  3881               	swapf	3969,w,c	;volatile
 12967  004408  0B0F               	andlw	15
 12968  00440A  0A0F               	xorlw	15
 12969  00440C  B4D8               	btfsc	status,2,c
 12970  00440E  D01F               	goto	l1470
 12971  004410                     l1471:
 12972  004410  A281               	btfss	3969,1,c	;volatile
 12973  004412  D7DF               	goto	l8789
 12974  004414  D7FD               	goto	l1471
 12975  004416                     l8801:
 12976                           
 12977                           ;Test.c: 665: else{
 12978                           ;Test.c: 666: on = !on;
 12979  004416  0100               	movlb	0	; () banked
 12980  004418  51AC               	movf	arm@on& (0+255),w,b
 12981  00441A  0100               	movlb	0	; () banked
 12982  00441C  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12983  00441E  A4D8               	btfss	status,2,c
 12984  004420  D002               	goto	u7820
 12985  004422  0E01               	movlw	1
 12986  004424  D001               	goto	u7830
 12987  004426                     u7820:
 12988  004426  0E00               	movlw	0
 12989  004428                     u7830:
 12990  004428  0100               	movlb	0	; () banked
 12991  00442A  6FAC               	movwf	arm@on& (0+255),b
 12992  00442C  6BAD               	clrf	(arm@on+1)& (0+255),b
 12993                           
 12994                           ;Test.c: 667: while(PORTBbits.RB1 == 0){
 12995  00442E  D005               	goto	l8805
 12996  004430                     l8803:
 12997                           
 12998                           ; BSR set to: 0
 12999                           ;Test.c: 668: f_arm_position = 1;
 13000  004430  0E00               	movlw	0
 13001  004432  0100               	movlb	0	; () banked
 13002  004434  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 13003  004436  0E01               	movlw	1
 13004  004438  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 13005  00443A                     l8805:
 13006                           
 13007                           ; BSR set to: 0
 13008  00443A  A281               	btfss	3969,1,c	;volatile
 13009  00443C  D7F9               	goto	l8803
 13010                           
 13011                           ; BSR set to: 0
 13012                           ;Test.c: 669: }
 13013                           ;Test.c: 670: if(PORTB >> 4 == 0b1111){
 13014                           
 13015                           ; BSR set to: 0
 13016  00443E  3881               	swapf	3969,w,c	;volatile
 13017  004440  0B0F               	andlw	15
 13018  004442  0A0F               	xorlw	15
 13019  004444  B4D8               	btfsc	status,2,c
 13020  004446  D003               	goto	l1470
 13021  004448                     l1479:
 13022  004448  A281               	btfss	3969,1,c	;volatile
 13023  00444A  D7C3               	goto	l8789
 13024  00444C  D7FD               	goto	l1479
 13025  00444E                     l1470:
 13026                           
 13027                           ; BSR set to: 0
 13028                           ;Test.c: 674: }
 13029                           ;Test.c: 675: }
 13030                           ;Test.c: 677: (INTCONbits.GIE = 0);
 13031  00444E  9EF2               	bcf	intcon,7,c	;volatile
 13032                           
 13033                           ; BSR set to: 0
 13034                           ;Test.c: 678: stopSignals();
 13035  004450  EC5D  F02D         	call	_stopSignals	;wreg free
 13036                           
 13037                           ;Test.c: 679: machine_state = Testing_state;
 13038  004454  0E03               	movlw	3
 13039  004456  0100               	movlb	0	; () banked
 13040  004458  6FFC               	movwf	_machine_state& (0+255),b
 13041                           
 13042                           ; BSR set to: 0
 13043  00445A  0012               	return		;funcret
 13044  00445C                     __end_of_arm:
 13045                           	opt stack 0
 13046                           tblptru	equ	0xFF8
 13047                           tblptrh	equ	0xFF7
 13048                           tblptrl	equ	0xFF6
 13049                           tablat	equ	0xFF5
 13050                           prodh	equ	0xFF4
 13051                           prodl	equ	0xFF3
 13052                           intcon	equ	0xFF2
 13053                           intcon2	equ	0xFF1
 13054                           intcon3	equ	0xFF0
 13055                           postinc0	equ	0xFEE
 13056                           wreg	equ	0xFE8
 13057                           postdec1	equ	0xFE5
 13058                           fsr1l	equ	0xFE1
 13059                           indf2	equ	0xFDF
 13060                           postinc2	equ	0xFDE
 13061                           postdec2	equ	0xFDD
 13062                           fsr2h	equ	0xFDA
 13063                           fsr2l	equ	0xFD9
 13064                           status	equ	0xFD8
 13065                           
 13066 ;; *************** function _algorithmTest *****************
 13067 ;; Defined at:
 13068 ;;		line 79 in file "Test.c"
 13069 ;; Parameters:    Size  Location     Type
 13070 ;;		None
 13071 ;; Auto vars:     Size  Location     Type
 13072 ;;		None
 13073 ;; Return value:  Size  Location     Type
 13074 ;;                  1    wreg      void 
 13075 ;; Registers used:
 13076 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13077 ;; Tracked objects:
 13078 ;;		On entry : 0/0
 13079 ;;		On exit  : 0/0
 13080 ;;		Unchanged: 0/0
 13081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13084 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13085 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13086 ;;Total ram usage:        2 bytes
 13087 ;; Hardware stack levels used:    1
 13088 ;; Hardware stack levels required when called:   10
 13089 ;; This function calls:
 13090 ;;		_lcdInst
 13091 ;;		_printf
 13092 ;; This function is called by:
 13093 ;;		_Test
 13094 ;; This function uses a non-reentrant model
 13095 ;;
 13096                           
 13097                           	psect	text44
 13098  004626                     __ptext44:
 13099                           	opt stack 0
 13100  004626                     _algorithmTest:
 13101                           	opt stack 19
 13102                           
 13103                           ;Test.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13104                           
 13105                           ; BSR set to: 0
 13106                           ;incstack = 0
 13107  004626  0E01               	movlw	1
 13108  004628  ECA8  F02D         	call	_lcdInst
 13109  00462C  0E68               	movlw	104
 13110  00462E  0100               	movlb	0	; () banked
 13111  004630  6FAB               	movwf	??_algorithmTest& (0+255),b
 13112  004632  0EE4               	movlw	228
 13113  004634                     u10457:
 13114  004634  2EE8               	decfsz	wreg,f,c
 13115  004636  D7FE               	bra	u10457
 13116  004638  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13117  00463A  D7FC               	bra	u10457
 13118  00463C  F000               	nop	
 13119  00463E  0E80               	movlw	128
 13120  004640  ECA8  F02D         	call	_lcdInst
 13121                           
 13122                           ;Test.c: 82: printf("ALGORITHM TEST");
 13123  004644  0EF5               	movlw	low STR_70
 13124  004646  0100               	movlb	0	; () banked
 13125  004648  6F8E               	movwf	printf@f& (0+255),b
 13126  00464A  0EFE               	movlw	high STR_70
 13127  00464C  0100               	movlb	0	; () banked
 13128  00464E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13129  004650  ECFE  F00D         	call	_printf	;wreg free
 13130                           
 13131                           ;Test.c: 83: lcdInst(0b11000000);;
 13132  004654  0EC0               	movlw	192
 13133  004656  ECA8  F02D         	call	_lcdInst
 13134                           
 13135                           ;Test.c: 84: printf("PUSH TO START");
 13136  00465A  0E2E               	movlw	low STR_71
 13137  00465C  0100               	movlb	0	; () banked
 13138  00465E  6F8E               	movwf	printf@f& (0+255),b
 13139  004660  0EFF               	movlw	high STR_71
 13140  004662  0100               	movlb	0	; () banked
 13141  004664  6F8F               	movwf	(printf@f+1)& (0+255),b
 13142  004666  ECFE  F00D         	call	_printf	;wreg free
 13143                           
 13144                           ;Test.c: 85: _delay((unsigned long)((100)*(32000000/4000.0)));
 13145  00466A  0E05               	movlw	5
 13146  00466C  0100               	movlb	0	; () banked
 13147  00466E  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 13148  004670  0E0F               	movlw	15
 13149  004672  0100               	movlb	0	; () banked
 13150  004674  6FAB               	movwf	??_algorithmTest& (0+255),b
 13151  004676  0EF1               	movlw	241
 13152  004678                     u10467:
 13153  004678  2EE8               	decfsz	wreg,f,c
 13154  00467A  D7FE               	bra	u10467
 13155  00467C  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13156  00467E  D7FC               	bra	u10467
 13157  004680  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 13158  004682  D7FA               	bra	u10467
 13159  004684                     l1266:
 13160  004684  A281               	btfss	3969,1,c	;volatile
 13161  004686  D7FE               	goto	l1266
 13162  004688                     l1269:
 13163  004688  B281               	btfsc	3969,1,c	;volatile
 13164  00468A  D7FE               	goto	l1269
 13165                           
 13166                           ;Test.c: 88: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13167  00468C  0E01               	movlw	1
 13168  00468E  ECA8  F02D         	call	_lcdInst
 13169  004692  0E68               	movlw	104
 13170  004694  0100               	movlb	0	; () banked
 13171  004696  6FAB               	movwf	??_algorithmTest& (0+255),b
 13172  004698  0EE4               	movlw	228
 13173  00469A                     u10477:
 13174  00469A  2EE8               	decfsz	wreg,f,c
 13175  00469C  D7FE               	bra	u10477
 13176  00469E  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13177  0046A0  D7FC               	bra	u10477
 13178  0046A2  F000               	nop	
 13179  0046A4  0E80               	movlw	128
 13180  0046A6  ECA8  F02D         	call	_lcdInst
 13181                           
 13182                           ;Test.c: 93: printf("ALG1: 9 POPNOTAB");
 13183  0046AA  0E42               	movlw	low STR_72
 13184  0046AC  0100               	movlb	0	; () banked
 13185  0046AE  6F8E               	movwf	printf@f& (0+255),b
 13186  0046B0  0EFC               	movlw	high STR_72
 13187  0046B2  0100               	movlb	0	; () banked
 13188  0046B4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13189  0046B6  ECFE  F00D         	call	_printf	;wreg free
 13190                           
 13191                           ;Test.c: 100: printf("ALG2: 12 CANS");
 13192  0046BA  0E12               	movlw	low STR_73
 13193  0046BC  0100               	movlb	0	; () banked
 13194  0046BE  6F8E               	movwf	printf@f& (0+255),b
 13195  0046C0  0EFF               	movlw	high STR_73
 13196  0046C2  0100               	movlb	0	; () banked
 13197  0046C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13198  0046C6  ECFE  F00D         	call	_printf	;wreg free
 13199                           
 13200                           ;Test.c: 109: printf("ALG3: 1 CAN");
 13201  0046CA  0E65               	movlw	low STR_74
 13202  0046CC  0100               	movlb	0	; () banked
 13203  0046CE  6F8E               	movwf	printf@f& (0+255),b
 13204  0046D0  0EFF               	movlw	high STR_74
 13205  0046D2  0100               	movlb	0	; () banked
 13206  0046D4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13207  0046D6  ECFE  F00D         	call	_printf	;wreg free
 13208                           
 13209                           ;Test.c: 115: printf("ALG4: ALL CANS");
 13210  0046DA  0ED7               	movlw	low STR_75
 13211  0046DC  0100               	movlb	0	; () banked
 13212  0046DE  6F8E               	movwf	printf@f& (0+255),b
 13213  0046E0  0EFE               	movlw	high STR_75
 13214  0046E2  0100               	movlb	0	; () banked
 13215  0046E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13216  0046E6  ECFE  F00D         	call	_printf	;wreg free
 13217                           
 13218                           ;Test.c: 120: printf("ALG5: NO CANS");
 13219  0046EA  0E20               	movlw	low STR_76
 13220  0046EC  0100               	movlb	0	; () banked
 13221  0046EE  6F8E               	movwf	printf@f& (0+255),b
 13222  0046F0  0EFF               	movlw	high STR_76
 13223  0046F2  0100               	movlb	0	; () banked
 13224  0046F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13225  0046F6  ECFE  F00D         	call	_printf	;wreg free
 13226  0046FA  0012               	return		;funcret
 13227  0046FC                     __end_of_algorithmTest:
 13228                           	opt stack 0
 13229                           tblptru	equ	0xFF8
 13230                           tblptrh	equ	0xFF7
 13231                           tblptrl	equ	0xFF6
 13232                           tablat	equ	0xFF5
 13233                           prodh	equ	0xFF4
 13234                           prodl	equ	0xFF3
 13235                           intcon	equ	0xFF2
 13236                           intcon2	equ	0xFF1
 13237                           intcon3	equ	0xFF0
 13238                           postinc0	equ	0xFEE
 13239                           wreg	equ	0xFE8
 13240                           postdec1	equ	0xFE5
 13241                           fsr1l	equ	0xFE1
 13242                           indf2	equ	0xFDF
 13243                           postinc2	equ	0xFDE
 13244                           postdec2	equ	0xFDD
 13245                           fsr2h	equ	0xFDA
 13246                           fsr2l	equ	0xFD9
 13247                           status	equ	0xFD8
 13248                           
 13249 ;; *************** function _actuatorTest *****************
 13250 ;; Defined at:
 13251 ;;		line 202 in file "Test.c"
 13252 ;; Parameters:    Size  Location     Type
 13253 ;;		None
 13254 ;; Auto vars:     Size  Location     Type
 13255 ;;  i               1   45[BANK0 ] unsigned char 
 13256 ;;  i               1   67[BANK0 ] unsigned char 
 13257 ;;  i               1   66[BANK0 ] unsigned char 
 13258 ;;  i               1   65[BANK0 ] unsigned char 
 13259 ;;  i               1   64[BANK0 ] unsigned char 
 13260 ;;  i               1   63[BANK0 ] unsigned char 
 13261 ;;  i               1   62[BANK0 ] unsigned char 
 13262 ;;  i               1   61[BANK0 ] unsigned char 
 13263 ;;  i               1   60[BANK0 ] unsigned char 
 13264 ;;  i               1   59[BANK0 ] unsigned char 
 13265 ;;  i               1   58[BANK0 ] unsigned char 
 13266 ;;  i               1   57[BANK0 ] unsigned char 
 13267 ;;  i               1   56[BANK0 ] unsigned char 
 13268 ;;  i               1   55[BANK0 ] unsigned char 
 13269 ;;  i               1   54[BANK0 ] unsigned char 
 13270 ;;  i               1   53[BANK0 ] unsigned char 
 13271 ;;  i               1   52[BANK0 ] unsigned char 
 13272 ;;  i               1   51[BANK0 ] unsigned char 
 13273 ;;  i               1   50[BANK0 ] unsigned char 
 13274 ;;  i               1   49[BANK0 ] unsigned char 
 13275 ;;  i               1   48[BANK0 ] unsigned char 
 13276 ;;  i               1   47[BANK0 ] unsigned char 
 13277 ;;  i               1   46[BANK0 ] unsigned char 
 13278 ;;  i               2   68[BANK0 ] int 
 13279 ;; Return value:  Size  Location     Type
 13280 ;;                  1    wreg      void 
 13281 ;; Registers used:
 13282 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13283 ;; Tracked objects:
 13284 ;;		On entry : 0/0
 13285 ;;		On exit  : 0/0
 13286 ;;		Unchanged: 0/0
 13287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13289 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13290 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13291 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13292 ;;Total ram usage:       27 bytes
 13293 ;; Hardware stack levels used:    1
 13294 ;; Hardware stack levels required when called:   10
 13295 ;; This function calls:
 13296 ;;		_lcdInst
 13297 ;;		_printf
 13298 ;;		_updateServoPosition
 13299 ;; This function is called by:
 13300 ;;		_Test
 13301 ;; This function uses a non-reentrant model
 13302 ;;
 13303                           
 13304                           	psect	text45
 13305  0008DA                     __ptext45:
 13306                           	opt stack 0
 13307  0008DA                     _actuatorTest:
 13308                           	opt stack 19
 13309                           
 13310                           ;Test.c: 204: int i = 0;
 13311                           
 13312                           ;incstack = 0
 13313  0008DA  0E00               	movlw	0
 13314  0008DC  0100               	movlb	0	; () banked
 13315  0008DE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13316  0008E0  0E00               	movlw	0
 13317  0008E2  6FC4               	movwf	actuatorTest@i& (0+255),b
 13318                           
 13319                           ; BSR set to: 0
 13320                           ;Test.c: 206: (INTCONbits.GIE = 1);
 13321  0008E4  8EF2               	bsf	intcon,7,c	;volatile
 13322                           
 13323                           ; BSR set to: 0
 13324                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13325  0008E6  0E01               	movlw	1
 13326  0008E8  ECA8  F02D         	call	_lcdInst
 13327  0008EC  0E68               	movlw	104
 13328  0008EE  0100               	movlb	0	; () banked
 13329  0008F0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13330  0008F2  0EE4               	movlw	228
 13331  0008F4                     u10487:
 13332  0008F4  2EE8               	decfsz	wreg,f,c
 13333  0008F6  D7FE               	bra	u10487
 13334  0008F8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13335  0008FA  D7FC               	bra	u10487
 13336  0008FC  F000               	nop	
 13337  0008FE  0E80               	movlw	128
 13338  000900  ECA8  F02D         	call	_lcdInst
 13339                           
 13340                           ;Test.c: 208: printf("ACTUATORS");
 13341  000904  0E91               	movlw	low STR_88
 13342  000906  0100               	movlb	0	; () banked
 13343  000908  6F8E               	movwf	printf@f& (0+255),b
 13344  00090A  0EFF               	movlw	high STR_88
 13345  00090C  0100               	movlb	0	; () banked
 13346  00090E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13347  000910  ECFE  F00D         	call	_printf	;wreg free
 13348                           
 13349                           ;Test.c: 209: lcdInst(0b11000000);;
 13350  000914  0EC0               	movlw	192
 13351  000916  ECA8  F02D         	call	_lcdInst
 13352                           
 13353                           ;Test.c: 210: printf("PUSH TO START");
 13354  00091A  0E2E               	movlw	low STR_71
 13355  00091C  0100               	movlb	0	; () banked
 13356  00091E  6F8E               	movwf	printf@f& (0+255),b
 13357  000920  0EFF               	movlw	high STR_71
 13358  000922  0100               	movlb	0	; () banked
 13359  000924  6F8F               	movwf	(printf@f+1)& (0+255),b
 13360  000926  ECFE  F00D         	call	_printf	;wreg free
 13361                           
 13362                           ;Test.c: 211: _delay((unsigned long)((100)*(32000000/4000.0)));
 13363  00092A  0E05               	movlw	5
 13364  00092C  0100               	movlb	0	; () banked
 13365  00092E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13366  000930  0E0F               	movlw	15
 13367  000932  0100               	movlb	0	; () banked
 13368  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 13369  000936  0EF1               	movlw	241
 13370  000938                     u10497:
 13371  000938  2EE8               	decfsz	wreg,f,c
 13372  00093A  D7FE               	bra	u10497
 13373  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13374  00093E  D7FC               	bra	u10497
 13375  000940  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13376  000942  D7FA               	bra	u10497
 13377  000944                     l1301:
 13378  000944  A281               	btfss	3969,1,c	;volatile
 13379  000946  D7FE               	goto	l1301
 13380  000948                     l1304:
 13381  000948  B281               	btfsc	3969,1,c	;volatile
 13382  00094A  D7FE               	goto	l1304
 13383                           
 13384                           ;Test.c: 214: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13385  00094C  0E01               	movlw	1
 13386  00094E  ECA8  F02D         	call	_lcdInst
 13387  000952  0E68               	movlw	104
 13388  000954  0100               	movlb	0	; () banked
 13389  000956  6FAB               	movwf	??_actuatorTest& (0+255),b
 13390  000958  0EE4               	movlw	228
 13391  00095A                     u10507:
 13392  00095A  2EE8               	decfsz	wreg,f,c
 13393  00095C  D7FE               	bra	u10507
 13394  00095E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13395  000960  D7FC               	bra	u10507
 13396  000962  F000               	nop	
 13397  000964  0E80               	movlw	128
 13398  000966  ECA8  F02D         	call	_lcdInst
 13399                           
 13400                           ;Test.c: 219: printf("TST: DC MOTORS");
 13401  00096A  0EE6               	movlw	low STR_90
 13402  00096C  0100               	movlb	0	; () banked
 13403  00096E  6F8E               	movwf	printf@f& (0+255),b
 13404  000970  0EFE               	movlw	high STR_90
 13405  000972  0100               	movlb	0	; () banked
 13406  000974  6F8F               	movwf	(printf@f+1)& (0+255),b
 13407  000976  ECFE  F00D         	call	_printf	;wreg free
 13408                           
 13409                           ;Test.c: 220: lcdInst(0b11000000);;
 13410  00097A  0EC0               	movlw	192
 13411  00097C  ECA8  F02D         	call	_lcdInst
 13412                           
 13413                           ;Test.c: 221: printf("PIN RA5 HIGH.");
 13414  000980  0E04               	movlw	low STR_91
 13415  000982  0100               	movlb	0	; () banked
 13416  000984  6F8E               	movwf	printf@f& (0+255),b
 13417  000986  0EFF               	movlw	high STR_91
 13418  000988  0100               	movlb	0	; () banked
 13419  00098A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13420  00098C  ECFE  F00D         	call	_printf	;wreg free
 13421                           
 13422                           ;Test.c: 222: LATBbits.LATB2 = 1;
 13423  000990  848A               	bsf	3978,2,c	;volatile
 13424                           
 13425                           ;Test.c: 223: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 13426  000992  0E00               	movlw	0
 13427  000994  0100               	movlb	0	; () banked
 13428  000996  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13429  000998  0E00               	movlw	0
 13430  00099A  6FC4               	movwf	actuatorTest@i& (0+255),b
 13431                           
 13432                           ; BSR set to: 0
 13433  00099C  0100               	movlb	0	; () banked
 13434  00099E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13435  0009A0  D008               	goto	l8375
 13436  0009A2  0100               	movlb	0	; () banked
 13437  0009A4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13438  0009A6  E123               	bnz	l1308
 13439  0009A8  0E05               	movlw	5
 13440  0009AA  0100               	movlb	0	; () banked
 13441  0009AC  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13442  0009AE  B0D8               	btfsc	status,0,c
 13443  0009B0  D01E               	goto	l1308
 13444  0009B2                     l8375:
 13445                           
 13446                           ; BSR set to: 0
 13447  0009B2  0E00               	movlw	0
 13448  0009B4  0100               	movlb	0	; () banked
 13449  0009B6  6FAD               	movwf	actuatorTest@i_1739& (0+255),b
 13450  0009B8                     l8377:
 13451                           
 13452                           ; BSR set to: 0
 13453  0009B8  0E63               	movlw	99
 13454  0009BA  0100               	movlb	0	; () banked
 13455  0009BC  65AD               	cpfsgt	actuatorTest@i_1739& (0+255),b
 13456  0009BE  D001               	goto	l8381
 13457  0009C0  D00C               	goto	l8385
 13458  0009C2                     l8381:
 13459                           
 13460                           ; BSR set to: 0
 13461  0009C2  0E68               	movlw	104
 13462  0009C4  0100               	movlb	0	; () banked
 13463  0009C6  6FAB               	movwf	??_actuatorTest& (0+255),b
 13464  0009C8  0EE4               	movlw	228
 13465  0009CA                     u10517:
 13466  0009CA  2EE8               	decfsz	wreg,f,c
 13467  0009CC  D7FE               	bra	u10517
 13468  0009CE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13469  0009D0  D7FC               	bra	u10517
 13470  0009D2  F000               	nop	
 13471  0009D4  0100               	movlb	0	; () banked
 13472  0009D6  2BAD               	incf	actuatorTest@i_1739& (0+255),f,b
 13473  0009D8  D7EF               	goto	l8377
 13474  0009DA                     l8385:
 13475                           
 13476                           ; BSR set to: 0
 13477  0009DA  0100               	movlb	0	; () banked
 13478  0009DC  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13479  0009DE  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13480                           
 13481                           ; BSR set to: 0
 13482  0009E0  0100               	movlb	0	; () banked
 13483  0009E2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13484  0009E4  D7E6               	goto	l8375
 13485  0009E6  0100               	movlb	0	; () banked
 13486  0009E8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13487  0009EA  E101               	bnz	u7250
 13488  0009EC  D7DD               	goto	L11
 13489  0009EE                     u7250:
 13490  0009EE                     l1308:
 13491                           
 13492                           ; BSR set to: 0
 13493                           ;Test.c: 224: LATBbits.LATB2 = 0;
 13494  0009EE  948A               	bcf	3978,2,c	;volatile
 13495                           
 13496                           ; BSR set to: 0
 13497                           ;Test.c: 225: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13498  0009F0  0E01               	movlw	1
 13499  0009F2  ECA8  F02D         	call	_lcdInst
 13500  0009F6  0E68               	movlw	104
 13501  0009F8  0100               	movlb	0	; () banked
 13502  0009FA  6FAB               	movwf	??_actuatorTest& (0+255),b
 13503  0009FC  0EE4               	movlw	228
 13504  0009FE                     u10527:
 13505  0009FE  2EE8               	decfsz	wreg,f,c
 13506  000A00  D7FE               	bra	u10527
 13507  000A02  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13508  000A04  D7FC               	bra	u10527
 13509  000A06  F000               	nop	
 13510  000A08  0E80               	movlw	128
 13511  000A0A  ECA8  F02D         	call	_lcdInst
 13512                           
 13513                           ;Test.c: 231: printf("TST: COND SOLN'D");
 13514  000A0E  0E53               	movlw	low STR_92
 13515  000A10  0100               	movlb	0	; () banked
 13516  000A12  6F8E               	movwf	printf@f& (0+255),b
 13517  000A14  0EFC               	movlw	high STR_92
 13518  000A16  0100               	movlb	0	; () banked
 13519  000A18  6F8F               	movwf	(printf@f+1)& (0+255),b
 13520  000A1A  ECFE  F00D         	call	_printf	;wreg free
 13521                           
 13522                           ;Test.c: 232: lcdInst(0b11000000);;
 13523  000A1E  0EC0               	movlw	192
 13524  000A20  ECA8  F02D         	call	_lcdInst
 13525                           
 13526                           ;Test.c: 233: printf("PIN RA3...");
 13527  000A24  0E71               	movlw	low STR_93
 13528  000A26  0100               	movlb	0	; () banked
 13529  000A28  6F8E               	movwf	printf@f& (0+255),b
 13530  000A2A  0EFF               	movlw	high STR_93
 13531  000A2C  0100               	movlb	0	; () banked
 13532  000A2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13533  000A30  ECFE  F00D         	call	_printf	;wreg free
 13534                           
 13535                           ;Test.c: 234: for(i=0;i<5;i++){
 13536  000A34  0E00               	movlw	0
 13537  000A36  0100               	movlb	0	; () banked
 13538  000A38  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13539  000A3A  0E00               	movlw	0
 13540  000A3C  6FC4               	movwf	actuatorTest@i& (0+255),b
 13541                           
 13542                           ; BSR set to: 0
 13543  000A3E  0100               	movlb	0	; () banked
 13544  000A40  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13545  000A42  D008               	goto	l1311
 13546  000A44  0100               	movlb	0	; () banked
 13547  000A46  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13548  000A48  E12C               	bnz	l1312
 13549  000A4A  0E05               	movlw	5
 13550  000A4C  0100               	movlb	0	; () banked
 13551  000A4E  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13552  000A50  B0D8               	btfsc	status,0,c
 13553  000A52  D027               	goto	l1312
 13554  000A54                     l1311:
 13555                           
 13556                           ; BSR set to: 0
 13557                           ;Test.c: 235: LATAbits.LATA3 = 1;
 13558  000A54  8689               	bsf	3977,3,c	;volatile
 13559                           
 13560                           ; BSR set to: 0
 13561                           ;Test.c: 236: _delay((unsigned long)((300)*(32000000/4000.0)));
 13562  000A56  0E0D               	movlw	13
 13563  000A58  0100               	movlb	0	; () banked
 13564  000A5A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13565  000A5C  0E2D               	movlw	45
 13566  000A5E  0100               	movlb	0	; () banked
 13567  000A60  6FAB               	movwf	??_actuatorTest& (0+255),b
 13568  000A62  0ED7               	movlw	215
 13569  000A64                     u10537:
 13570  000A64  2EE8               	decfsz	wreg,f,c
 13571  000A66  D7FE               	bra	u10537
 13572  000A68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13573  000A6A  D7FC               	bra	u10537
 13574  000A6C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13575  000A6E  D7FA               	bra	u10537
 13576  000A70  D000               	nop2	
 13577                           
 13578                           ;Test.c: 237: LATAbits.LATA3 = !1;
 13579  000A72  9689               	bcf	3977,3,c	;volatile
 13580                           
 13581                           ;Test.c: 238: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13582  000A74  0E1D               	movlw	29
 13583  000A76  0100               	movlb	0	; () banked
 13584  000A78  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13585  000A7A  0E69               	movlw	105
 13586  000A7C  0100               	movlb	0	; () banked
 13587  000A7E  6FAB               	movwf	??_actuatorTest& (0+255),b
 13588  000A80  0EA5               	movlw	165
 13589  000A82                     u10547:
 13590  000A82  2EE8               	decfsz	wreg,f,c
 13591  000A84  D7FE               	bra	u10547
 13592  000A86  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13593  000A88  D7FC               	bra	u10547
 13594  000A8A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13595  000A8C  D7FA               	bra	u10547
 13596  000A8E  0100               	movlb	0	; () banked
 13597  000A90  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13598  000A92  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13599  000A94  0100               	movlb	0	; () banked
 13600  000A96  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13601  000A98  D7DD               	goto	l1311
 13602  000A9A  0100               	movlb	0	; () banked
 13603  000A9C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13604  000A9E  E101               	bnz	u7270
 13605  000AA0  D7D4               	goto	L12
 13606  000AA2                     u7270:
 13607  000AA2                     l1312:
 13608                           
 13609                           ; BSR set to: 0
 13610                           ;Test.c: 239: }
 13611                           ;Test.c: 240: LATAbits.LATA3 = !1;
 13612  000AA2  9689               	bcf	3977,3,c	;volatile
 13613                           
 13614                           ; BSR set to: 0
 13615                           ;Test.c: 241: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13616  000AA4  0E01               	movlw	1
 13617  000AA6  ECA8  F02D         	call	_lcdInst
 13618  000AAA  0E68               	movlw	104
 13619  000AAC  0100               	movlb	0	; () banked
 13620  000AAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13621  000AB0  0EE4               	movlw	228
 13622  000AB2                     u10557:
 13623  000AB2  2EE8               	decfsz	wreg,f,c
 13624  000AB4  D7FE               	bra	u10557
 13625  000AB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13626  000AB8  D7FC               	bra	u10557
 13627  000ABA  F000               	nop	
 13628  000ABC  0E80               	movlw	128
 13629  000ABE  ECA8  F02D         	call	_lcdInst
 13630                           
 13631                           ;Test.c: 247: printf("TST: PUSH SOLN'D");
 13632  000AC2  0E64               	movlw	low STR_94
 13633  000AC4  0100               	movlb	0	; () banked
 13634  000AC6  6F8E               	movwf	printf@f& (0+255),b
 13635  000AC8  0EFC               	movlw	high STR_94
 13636  000ACA  0100               	movlb	0	; () banked
 13637  000ACC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13638  000ACE  ECFE  F00D         	call	_printf	;wreg free
 13639                           
 13640                           ;Test.c: 248: lcdInst(0b11000000);;
 13641  000AD2  0EC0               	movlw	192
 13642  000AD4  ECA8  F02D         	call	_lcdInst
 13643                           
 13644                           ;Test.c: 249: printf("PIN RA4...");
 13645  000AD8  0E7C               	movlw	low STR_95
 13646  000ADA  0100               	movlb	0	; () banked
 13647  000ADC  6F8E               	movwf	printf@f& (0+255),b
 13648  000ADE  0EFF               	movlw	high STR_95
 13649  000AE0  0100               	movlb	0	; () banked
 13650  000AE2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13651  000AE4  ECFE  F00D         	call	_printf	;wreg free
 13652                           
 13653                           ;Test.c: 250: for(i=0;i<5;i++){
 13654  000AE8  0E00               	movlw	0
 13655  000AEA  0100               	movlb	0	; () banked
 13656  000AEC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13657  000AEE  0E00               	movlw	0
 13658  000AF0  6FC4               	movwf	actuatorTest@i& (0+255),b
 13659                           
 13660                           ; BSR set to: 0
 13661  000AF2  0100               	movlb	0	; () banked
 13662  000AF4  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13663  000AF6  D008               	goto	l1313
 13664  000AF8  0100               	movlb	0	; () banked
 13665  000AFA  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13666  000AFC  E12C               	bnz	l1314
 13667  000AFE  0E05               	movlw	5
 13668  000B00  0100               	movlb	0	; () banked
 13669  000B02  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13670  000B04  B0D8               	btfsc	status,0,c
 13671  000B06  D027               	goto	l1314
 13672  000B08                     l1313:
 13673                           
 13674                           ; BSR set to: 0
 13675                           ;Test.c: 251: LATAbits.LATA4 = 1;
 13676  000B08  8889               	bsf	3977,4,c	;volatile
 13677                           
 13678                           ; BSR set to: 0
 13679                           ;Test.c: 252: _delay((unsigned long)((300)*(32000000/4000.0)));
 13680  000B0A  0E0D               	movlw	13
 13681  000B0C  0100               	movlb	0	; () banked
 13682  000B0E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13683  000B10  0E2D               	movlw	45
 13684  000B12  0100               	movlb	0	; () banked
 13685  000B14  6FAB               	movwf	??_actuatorTest& (0+255),b
 13686  000B16  0ED7               	movlw	215
 13687  000B18                     u10567:
 13688  000B18  2EE8               	decfsz	wreg,f,c
 13689  000B1A  D7FE               	bra	u10567
 13690  000B1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13691  000B1E  D7FC               	bra	u10567
 13692  000B20  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13693  000B22  D7FA               	bra	u10567
 13694  000B24  D000               	nop2	
 13695                           
 13696                           ;Test.c: 253: LATAbits.LATA4 = !1;
 13697  000B26  9889               	bcf	3977,4,c	;volatile
 13698                           
 13699                           ;Test.c: 254: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13700  000B28  0E1D               	movlw	29
 13701  000B2A  0100               	movlb	0	; () banked
 13702  000B2C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13703  000B2E  0E69               	movlw	105
 13704  000B30  0100               	movlb	0	; () banked
 13705  000B32  6FAB               	movwf	??_actuatorTest& (0+255),b
 13706  000B34  0EA5               	movlw	165
 13707  000B36                     u10577:
 13708  000B36  2EE8               	decfsz	wreg,f,c
 13709  000B38  D7FE               	bra	u10577
 13710  000B3A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13711  000B3C  D7FC               	bra	u10577
 13712  000B3E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13713  000B40  D7FA               	bra	u10577
 13714  000B42  0100               	movlb	0	; () banked
 13715  000B44  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13716  000B46  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13717  000B48  0100               	movlb	0	; () banked
 13718  000B4A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13719  000B4C  D7DD               	goto	l1313
 13720  000B4E  0100               	movlb	0	; () banked
 13721  000B50  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13722  000B52  E101               	bnz	u7290
 13723  000B54  D7D4               	goto	L13
 13724  000B56                     u7290:
 13725  000B56                     l1314:
 13726                           
 13727                           ; BSR set to: 0
 13728                           ;Test.c: 255: }
 13729                           ;Test.c: 256: LATAbits.LATA4 = !1;
 13730  000B56  9889               	bcf	3977,4,c	;volatile
 13731                           
 13732                           ; BSR set to: 0
 13733                           ;Test.c: 257: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13734  000B58  0E01               	movlw	1
 13735  000B5A  ECA8  F02D         	call	_lcdInst
 13736  000B5E  0E68               	movlw	104
 13737  000B60  0100               	movlb	0	; () banked
 13738  000B62  6FAB               	movwf	??_actuatorTest& (0+255),b
 13739  000B64  0EE4               	movlw	228
 13740  000B66                     u10587:
 13741  000B66  2EE8               	decfsz	wreg,f,c
 13742  000B68  D7FE               	bra	u10587
 13743  000B6A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13744  000B6C  D7FC               	bra	u10587
 13745  000B6E  F000               	nop	
 13746  000B70  0E80               	movlw	128
 13747  000B72  ECA8  F02D         	call	_lcdInst
 13748                           
 13749                           ;Test.c: 260: machine_state = Sorting_state;
 13750  000B76  0E01               	movlw	1
 13751  000B78  0100               	movlb	0	; () banked
 13752  000B7A  6FFC               	movwf	_machine_state& (0+255),b
 13753                           
 13754                           ; BSR set to: 0
 13755                           ;Test.c: 261: was_low_1 = 0;
 13756  000B7C  0E00               	movlw	0
 13757  000B7E  6E78               	movwf	_was_low_1+1,c	;volatile
 13758  000B80  0E00               	movlw	0
 13759  000B82  6E77               	movwf	_was_low_1,c	;volatile
 13760                           
 13761                           ; BSR set to: 0
 13762                           ;Test.c: 262: was_low_1 = 0;
 13763  000B84  0E00               	movlw	0
 13764  000B86  6E78               	movwf	_was_low_1+1,c	;volatile
 13765  000B88  0E00               	movlw	0
 13766  000B8A  6E77               	movwf	_was_low_1,c	;volatile
 13767                           
 13768                           ; BSR set to: 0
 13769                           ;Test.c: 269: printf("TST: PAN SERVO");
 13770  000B8C  0EC8               	movlw	low STR_96
 13771  000B8E  0100               	movlb	0	; () banked
 13772  000B90  6F8E               	movwf	printf@f& (0+255),b
 13773  000B92  0EFE               	movlw	high STR_96
 13774  000B94  0100               	movlb	0	; () banked
 13775  000B96  6F8F               	movwf	(printf@f+1)& (0+255),b
 13776  000B98  ECFE  F00D         	call	_printf	;wreg free
 13777                           
 13778                           ;Test.c: 270: lcdInst(0b11000000);;
 13779  000B9C  0EC0               	movlw	192
 13780  000B9E  ECA8  F02D         	call	_lcdInst
 13781                           
 13782                           ;Test.c: 271: printf("MIDDLE -- 2s    ");
 13783  000BA2  0EBA               	movlw	low STR_97
 13784  000BA4  0100               	movlb	0	; () banked
 13785  000BA6  6F8E               	movwf	printf@f& (0+255),b
 13786  000BA8  0EFB               	movlw	high STR_97
 13787  000BAA  0100               	movlb	0	; () banked
 13788  000BAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13789  000BAE  ECFE  F00D         	call	_printf	;wreg free
 13790                           
 13791                           ;Test.c: 272: updateServoPosition(1200, 1);
 13792  000BB2  0E04               	movlw	4
 13793  000BB4  0100               	movlb	0	; () banked
 13794  000BB6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13795  000BB8  0EB0               	movlw	176
 13796  000BBA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13797  000BBC  0E00               	movlw	0
 13798  000BBE  0100               	movlb	0	; () banked
 13799  000BC0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13800  000BC2  0E01               	movlw	1
 13801  000BC4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13802  000BC6  ECD9  F026         	call	_updateServoPosition	;wreg free
 13803                           
 13804                           ;Test.c: 273: TMR1ON = 1;
 13805  000BCA  80CD               	bsf	4045,0,c	;volatile
 13806                           
 13807                           ;Test.c: 274: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13808  000BCC  0E00               	movlw	0
 13809  000BCE  0100               	movlb	0	; () banked
 13810  000BD0  6FAE               	movwf	actuatorTest@i_1746& (0+255),b
 13811  000BD2                     l8461:
 13812                           
 13813                           ; BSR set to: 0
 13814  000BD2  0E63               	movlw	99
 13815  000BD4  0100               	movlb	0	; () banked
 13816  000BD6  65AE               	cpfsgt	actuatorTest@i_1746& (0+255),b
 13817  000BD8  D001               	goto	l8465
 13818  000BDA  D00C               	goto	l8469
 13819  000BDC                     l8465:
 13820                           
 13821                           ; BSR set to: 0
 13822  000BDC  0E68               	movlw	104
 13823  000BDE  0100               	movlb	0	; () banked
 13824  000BE0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13825  000BE2  0EE4               	movlw	228
 13826  000BE4                     u10597:
 13827  000BE4  2EE8               	decfsz	wreg,f,c
 13828  000BE6  D7FE               	bra	u10597
 13829  000BE8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13830  000BEA  D7FC               	bra	u10597
 13831  000BEC  F000               	nop	
 13832  000BEE  0100               	movlb	0	; () banked
 13833  000BF0  2BAE               	incf	actuatorTest@i_1746& (0+255),f,b
 13834  000BF2  D7EF               	goto	l8461
 13835  000BF4                     l8469:
 13836                           
 13837                           ; BSR set to: 0
 13838  000BF4  0E00               	movlw	0
 13839  000BF6  0100               	movlb	0	; () banked
 13840  000BF8  6FAF               	movwf	actuatorTest@i_1747& (0+255),b
 13841  000BFA                     l8471:
 13842                           
 13843                           ; BSR set to: 0
 13844  000BFA  0E63               	movlw	99
 13845  000BFC  0100               	movlb	0	; () banked
 13846  000BFE  65AF               	cpfsgt	actuatorTest@i_1747& (0+255),b
 13847  000C00  D001               	goto	l8475
 13848  000C02  D00C               	goto	l8479
 13849  000C04                     l8475:
 13850                           
 13851                           ; BSR set to: 0
 13852  000C04  0E68               	movlw	104
 13853  000C06  0100               	movlb	0	; () banked
 13854  000C08  6FAB               	movwf	??_actuatorTest& (0+255),b
 13855  000C0A  0EE4               	movlw	228
 13856  000C0C                     u10607:
 13857  000C0C  2EE8               	decfsz	wreg,f,c
 13858  000C0E  D7FE               	bra	u10607
 13859  000C10  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13860  000C12  D7FC               	bra	u10607
 13861  000C14  F000               	nop	
 13862  000C16  0100               	movlb	0	; () banked
 13863  000C18  2BAF               	incf	actuatorTest@i_1747& (0+255),f,b
 13864  000C1A  D7EF               	goto	l8471
 13865  000C1C                     l8479:
 13866                           
 13867                           ; BSR set to: 0
 13868                           ;Test.c: 276: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13869  000C1C  0E80               	movlw	128
 13870  000C1E  ECA8  F02D         	call	_lcdInst
 13871  000C22  0EC0               	movlw	192
 13872  000C24  ECA8  F02D         	call	_lcdInst
 13873                           
 13874                           ;Test.c: 277: printf("RIGHT -- 2s     ");
 13875  000C28  0EA9               	movlw	low STR_98
 13876  000C2A  0100               	movlb	0	; () banked
 13877  000C2C  6F8E               	movwf	printf@f& (0+255),b
 13878  000C2E  0EFB               	movlw	high STR_98
 13879  000C30  0100               	movlb	0	; () banked
 13880  000C32  6F8F               	movwf	(printf@f+1)& (0+255),b
 13881  000C34  ECFE  F00D         	call	_printf	;wreg free
 13882                           
 13883                           ;Test.c: 278: updateServoPosition(500, 1);
 13884  000C38  0E01               	movlw	1
 13885  000C3A  0100               	movlb	0	; () banked
 13886  000C3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13887  000C3E  0EF4               	movlw	244
 13888  000C40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13889  000C42  0E00               	movlw	0
 13890  000C44  0100               	movlb	0	; () banked
 13891  000C46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13892  000C48  0E01               	movlw	1
 13893  000C4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13894  000C4C  ECD9  F026         	call	_updateServoPosition	;wreg free
 13895                           
 13896                           ;Test.c: 279: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13897  000C50  0E00               	movlw	0
 13898  000C52  0100               	movlb	0	; () banked
 13899  000C54  6FB0               	movwf	actuatorTest@i_1749& (0+255),b
 13900  000C56                     l8487:
 13901                           
 13902                           ; BSR set to: 0
 13903  000C56  0E63               	movlw	99
 13904  000C58  0100               	movlb	0	; () banked
 13905  000C5A  65B0               	cpfsgt	actuatorTest@i_1749& (0+255),b
 13906  000C5C  D001               	goto	l8491
 13907  000C5E  D00C               	goto	l8495
 13908  000C60                     l8491:
 13909                           
 13910                           ; BSR set to: 0
 13911  000C60  0E68               	movlw	104
 13912  000C62  0100               	movlb	0	; () banked
 13913  000C64  6FAB               	movwf	??_actuatorTest& (0+255),b
 13914  000C66  0EE4               	movlw	228
 13915  000C68                     u10617:
 13916  000C68  2EE8               	decfsz	wreg,f,c
 13917  000C6A  D7FE               	bra	u10617
 13918  000C6C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13919  000C6E  D7FC               	bra	u10617
 13920  000C70  F000               	nop	
 13921  000C72  0100               	movlb	0	; () banked
 13922  000C74  2BB0               	incf	actuatorTest@i_1749& (0+255),f,b
 13923  000C76  D7EF               	goto	l8487
 13924  000C78                     l8495:
 13925                           
 13926                           ; BSR set to: 0
 13927  000C78  0E00               	movlw	0
 13928  000C7A  0100               	movlb	0	; () banked
 13929  000C7C  6FB1               	movwf	actuatorTest@i_1750& (0+255),b
 13930  000C7E                     l8497:
 13931                           
 13932                           ; BSR set to: 0
 13933  000C7E  0E63               	movlw	99
 13934  000C80  0100               	movlb	0	; () banked
 13935  000C82  65B1               	cpfsgt	actuatorTest@i_1750& (0+255),b
 13936  000C84  D001               	goto	l8501
 13937  000C86  D00C               	goto	l8505
 13938  000C88                     l8501:
 13939                           
 13940                           ; BSR set to: 0
 13941  000C88  0E68               	movlw	104
 13942  000C8A  0100               	movlb	0	; () banked
 13943  000C8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 13944  000C8E  0EE4               	movlw	228
 13945  000C90                     u10627:
 13946  000C90  2EE8               	decfsz	wreg,f,c
 13947  000C92  D7FE               	bra	u10627
 13948  000C94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13949  000C96  D7FC               	bra	u10627
 13950  000C98  F000               	nop	
 13951  000C9A  0100               	movlb	0	; () banked
 13952  000C9C  2BB1               	incf	actuatorTest@i_1750& (0+255),f,b
 13953  000C9E  D7EF               	goto	l8497
 13954  000CA0                     l8505:
 13955                           
 13956                           ; BSR set to: 0
 13957                           ;Test.c: 281: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13958  000CA0  0E80               	movlw	128
 13959  000CA2  ECA8  F02D         	call	_lcdInst
 13960  000CA6  0EC0               	movlw	192
 13961  000CA8  ECA8  F02D         	call	_lcdInst
 13962                           
 13963                           ;Test.c: 282: printf("LEFT -- 2s      ");
 13964  000CAC  0E87               	movlw	low STR_99
 13965  000CAE  0100               	movlb	0	; () banked
 13966  000CB0  6F8E               	movwf	printf@f& (0+255),b
 13967  000CB2  0EFB               	movlw	high STR_99
 13968  000CB4  0100               	movlb	0	; () banked
 13969  000CB6  6F8F               	movwf	(printf@f+1)& (0+255),b
 13970  000CB8  ECFE  F00D         	call	_printf	;wreg free
 13971                           
 13972                           ;Test.c: 283: updateServoPosition(2400, 1);
 13973  000CBC  0E09               	movlw	9
 13974  000CBE  0100               	movlb	0	; () banked
 13975  000CC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13976  000CC2  0E60               	movlw	96
 13977  000CC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13978  000CC6  0E00               	movlw	0
 13979  000CC8  0100               	movlb	0	; () banked
 13980  000CCA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13981  000CCC  0E01               	movlw	1
 13982  000CCE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13983  000CD0  ECD9  F026         	call	_updateServoPosition	;wreg free
 13984                           
 13985                           ;Test.c: 284: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13986  000CD4  0E00               	movlw	0
 13987  000CD6  0100               	movlb	0	; () banked
 13988  000CD8  6FB2               	movwf	actuatorTest@i_1752& (0+255),b
 13989  000CDA                     l8513:
 13990                           
 13991                           ; BSR set to: 0
 13992  000CDA  0E63               	movlw	99
 13993  000CDC  0100               	movlb	0	; () banked
 13994  000CDE  65B2               	cpfsgt	actuatorTest@i_1752& (0+255),b
 13995  000CE0  D001               	goto	l8517
 13996  000CE2  D00C               	goto	l8521
 13997  000CE4                     l8517:
 13998                           
 13999                           ; BSR set to: 0
 14000  000CE4  0E68               	movlw	104
 14001  000CE6  0100               	movlb	0	; () banked
 14002  000CE8  6FAB               	movwf	??_actuatorTest& (0+255),b
 14003  000CEA  0EE4               	movlw	228
 14004  000CEC                     u10637:
 14005  000CEC  2EE8               	decfsz	wreg,f,c
 14006  000CEE  D7FE               	bra	u10637
 14007  000CF0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14008  000CF2  D7FC               	bra	u10637
 14009  000CF4  F000               	nop	
 14010  000CF6  0100               	movlb	0	; () banked
 14011  000CF8  2BB2               	incf	actuatorTest@i_1752& (0+255),f,b
 14012  000CFA  D7EF               	goto	l8513
 14013  000CFC                     l8521:
 14014                           
 14015                           ; BSR set to: 0
 14016  000CFC  0E00               	movlw	0
 14017  000CFE  0100               	movlb	0	; () banked
 14018  000D00  6FB3               	movwf	actuatorTest@i_1753& (0+255),b
 14019  000D02                     l8523:
 14020                           
 14021                           ; BSR set to: 0
 14022  000D02  0E63               	movlw	99
 14023  000D04  0100               	movlb	0	; () banked
 14024  000D06  65B3               	cpfsgt	actuatorTest@i_1753& (0+255),b
 14025  000D08  D001               	goto	l8527
 14026  000D0A  D00C               	goto	l8531
 14027  000D0C                     l8527:
 14028                           
 14029                           ; BSR set to: 0
 14030  000D0C  0E68               	movlw	104
 14031  000D0E  0100               	movlb	0	; () banked
 14032  000D10  6FAB               	movwf	??_actuatorTest& (0+255),b
 14033  000D12  0EE4               	movlw	228
 14034  000D14                     u10647:
 14035  000D14  2EE8               	decfsz	wreg,f,c
 14036  000D16  D7FE               	bra	u10647
 14037  000D18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14038  000D1A  D7FC               	bra	u10647
 14039  000D1C  F000               	nop	
 14040  000D1E  0100               	movlb	0	; () banked
 14041  000D20  2BB3               	incf	actuatorTest@i_1753& (0+255),f,b
 14042  000D22  D7EF               	goto	l8523
 14043  000D24                     l8531:
 14044                           
 14045                           ; BSR set to: 0
 14046                           ;Test.c: 286: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14047  000D24  0E80               	movlw	128
 14048  000D26  ECA8  F02D         	call	_lcdInst
 14049  000D2A  0EC0               	movlw	192
 14050  000D2C  ECA8  F02D         	call	_lcdInst
 14051                           
 14052                           ;Test.c: 287: printf("MID-LEFT -- 2s  ");
 14053  000D30  0E0F               	movlw	low STR_100
 14054  000D32  0100               	movlb	0	; () banked
 14055  000D34  6F8E               	movwf	printf@f& (0+255),b
 14056  000D36  0EFC               	movlw	high STR_100
 14057  000D38  0100               	movlb	0	; () banked
 14058  000D3A  6F8F               	movwf	(printf@f+1)& (0+255),b
 14059  000D3C  ECFE  F00D         	call	_printf	;wreg free
 14060                           
 14061                           ;Test.c: 288: updateServoPosition(1670, 1);
 14062  000D40  0E06               	movlw	6
 14063  000D42  0100               	movlb	0	; () banked
 14064  000D44  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14065  000D46  0E86               	movlw	134
 14066  000D48  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14067  000D4A  0E00               	movlw	0
 14068  000D4C  0100               	movlb	0	; () banked
 14069  000D4E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14070  000D50  0E01               	movlw	1
 14071  000D52  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14072  000D54  ECD9  F026         	call	_updateServoPosition	;wreg free
 14073                           
 14074                           ;Test.c: 289: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14075  000D58  0E00               	movlw	0
 14076  000D5A  0100               	movlb	0	; () banked
 14077  000D5C  6FB4               	movwf	actuatorTest@i_1755& (0+255),b
 14078  000D5E                     l8539:
 14079                           
 14080                           ; BSR set to: 0
 14081  000D5E  0E63               	movlw	99
 14082  000D60  0100               	movlb	0	; () banked
 14083  000D62  65B4               	cpfsgt	actuatorTest@i_1755& (0+255),b
 14084  000D64  D001               	goto	l8543
 14085  000D66  D00C               	goto	l8547
 14086  000D68                     l8543:
 14087                           
 14088                           ; BSR set to: 0
 14089  000D68  0E68               	movlw	104
 14090  000D6A  0100               	movlb	0	; () banked
 14091  000D6C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14092  000D6E  0EE4               	movlw	228
 14093  000D70                     u10657:
 14094  000D70  2EE8               	decfsz	wreg,f,c
 14095  000D72  D7FE               	bra	u10657
 14096  000D74  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14097  000D76  D7FC               	bra	u10657
 14098  000D78  F000               	nop	
 14099  000D7A  0100               	movlb	0	; () banked
 14100  000D7C  2BB4               	incf	actuatorTest@i_1755& (0+255),f,b
 14101  000D7E  D7EF               	goto	l8539
 14102  000D80                     l8547:
 14103                           
 14104                           ; BSR set to: 0
 14105  000D80  0E00               	movlw	0
 14106  000D82  0100               	movlb	0	; () banked
 14107  000D84  6FB5               	movwf	actuatorTest@i_1756& (0+255),b
 14108  000D86                     l8549:
 14109                           
 14110                           ; BSR set to: 0
 14111  000D86  0E63               	movlw	99
 14112  000D88  0100               	movlb	0	; () banked
 14113  000D8A  65B5               	cpfsgt	actuatorTest@i_1756& (0+255),b
 14114  000D8C  D001               	goto	l8553
 14115  000D8E  D00C               	goto	l8557
 14116  000D90                     l8553:
 14117                           
 14118                           ; BSR set to: 0
 14119  000D90  0E68               	movlw	104
 14120  000D92  0100               	movlb	0	; () banked
 14121  000D94  6FAB               	movwf	??_actuatorTest& (0+255),b
 14122  000D96  0EE4               	movlw	228
 14123  000D98                     u10667:
 14124  000D98  2EE8               	decfsz	wreg,f,c
 14125  000D9A  D7FE               	bra	u10667
 14126  000D9C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14127  000D9E  D7FC               	bra	u10667
 14128  000DA0  F000               	nop	
 14129  000DA2  0100               	movlb	0	; () banked
 14130  000DA4  2BB5               	incf	actuatorTest@i_1756& (0+255),f,b
 14131  000DA6  D7EF               	goto	l8549
 14132  000DA8                     l8557:
 14133                           
 14134                           ; BSR set to: 0
 14135                           ;Test.c: 291: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14136  000DA8  0E80               	movlw	128
 14137  000DAA  ECA8  F02D         	call	_lcdInst
 14138  000DAE  0EC0               	movlw	192
 14139  000DB0  ECA8  F02D         	call	_lcdInst
 14140                           
 14141                           ;Test.c: 292: printf("MID-RIGHT -- 2s ");
 14142  000DB4  0E20               	movlw	low STR_101
 14143  000DB6  0100               	movlb	0	; () banked
 14144  000DB8  6F8E               	movwf	printf@f& (0+255),b
 14145  000DBA  0EFC               	movlw	high STR_101
 14146  000DBC  0100               	movlb	0	; () banked
 14147  000DBE  6F8F               	movwf	(printf@f+1)& (0+255),b
 14148  000DC0  ECFE  F00D         	call	_printf	;wreg free
 14149                           
 14150                           ;Test.c: 293: updateServoPosition(850, 1);
 14151  000DC4  0E03               	movlw	3
 14152  000DC6  0100               	movlb	0	; () banked
 14153  000DC8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14154  000DCA  0E52               	movlw	82
 14155  000DCC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14156  000DCE  0E00               	movlw	0
 14157  000DD0  0100               	movlb	0	; () banked
 14158  000DD2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14159  000DD4  0E01               	movlw	1
 14160  000DD6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14161  000DD8  ECD9  F026         	call	_updateServoPosition	;wreg free
 14162                           
 14163                           ;Test.c: 294: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14164  000DDC  0E00               	movlw	0
 14165  000DDE  0100               	movlb	0	; () banked
 14166  000DE0  6FB6               	movwf	actuatorTest@i_1758& (0+255),b
 14167  000DE2                     l8565:
 14168                           
 14169                           ; BSR set to: 0
 14170  000DE2  0E63               	movlw	99
 14171  000DE4  0100               	movlb	0	; () banked
 14172  000DE6  65B6               	cpfsgt	actuatorTest@i_1758& (0+255),b
 14173  000DE8  D001               	goto	l8569
 14174  000DEA  D00C               	goto	l8573
 14175  000DEC                     l8569:
 14176                           
 14177                           ; BSR set to: 0
 14178  000DEC  0E68               	movlw	104
 14179  000DEE  0100               	movlb	0	; () banked
 14180  000DF0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14181  000DF2  0EE4               	movlw	228
 14182  000DF4                     u10677:
 14183  000DF4  2EE8               	decfsz	wreg,f,c
 14184  000DF6  D7FE               	bra	u10677
 14185  000DF8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14186  000DFA  D7FC               	bra	u10677
 14187  000DFC  F000               	nop	
 14188  000DFE  0100               	movlb	0	; () banked
 14189  000E00  2BB6               	incf	actuatorTest@i_1758& (0+255),f,b
 14190  000E02  D7EF               	goto	l8565
 14191  000E04                     l8573:
 14192                           
 14193                           ; BSR set to: 0
 14194  000E04  0E00               	movlw	0
 14195  000E06  0100               	movlb	0	; () banked
 14196  000E08  6FB7               	movwf	actuatorTest@i_1759& (0+255),b
 14197  000E0A                     l8575:
 14198                           
 14199                           ; BSR set to: 0
 14200  000E0A  0E63               	movlw	99
 14201  000E0C  0100               	movlb	0	; () banked
 14202  000E0E  65B7               	cpfsgt	actuatorTest@i_1759& (0+255),b
 14203  000E10  D001               	goto	l8579
 14204  000E12  D00C               	goto	l8583
 14205  000E14                     l8579:
 14206                           
 14207                           ; BSR set to: 0
 14208  000E14  0E68               	movlw	104
 14209  000E16  0100               	movlb	0	; () banked
 14210  000E18  6FAB               	movwf	??_actuatorTest& (0+255),b
 14211  000E1A  0EE4               	movlw	228
 14212  000E1C                     u10687:
 14213  000E1C  2EE8               	decfsz	wreg,f,c
 14214  000E1E  D7FE               	bra	u10687
 14215  000E20  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14216  000E22  D7FC               	bra	u10687
 14217  000E24  F000               	nop	
 14218  000E26  0100               	movlb	0	; () banked
 14219  000E28  2BB7               	incf	actuatorTest@i_1759& (0+255),f,b
 14220  000E2A  D7EF               	goto	l8575
 14221  000E2C                     l8583:
 14222                           
 14223                           ; BSR set to: 0
 14224                           ;Test.c: 296: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14225  000E2C  0E80               	movlw	128
 14226  000E2E  ECA8  F02D         	call	_lcdInst
 14227  000E32  0EC0               	movlw	192
 14228  000E34  ECA8  F02D         	call	_lcdInst
 14229                           
 14230                           ;Test.c: 297: printf("MID -- 2s       ");
 14231  000E38  0E65               	movlw	low STR_102
 14232  000E3A  0100               	movlb	0	; () banked
 14233  000E3C  6F8E               	movwf	printf@f& (0+255),b
 14234  000E3E  0EFB               	movlw	high STR_102
 14235  000E40  0100               	movlb	0	; () banked
 14236  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
 14237  000E44  ECFE  F00D         	call	_printf	;wreg free
 14238                           
 14239                           ;Test.c: 298: updateServoPosition(1200, 1);
 14240  000E48  0E04               	movlw	4
 14241  000E4A  0100               	movlb	0	; () banked
 14242  000E4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14243  000E4E  0EB0               	movlw	176
 14244  000E50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14245  000E52  0E00               	movlw	0
 14246  000E54  0100               	movlb	0	; () banked
 14247  000E56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14248  000E58  0E01               	movlw	1
 14249  000E5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14250  000E5C  ECD9  F026         	call	_updateServoPosition	;wreg free
 14251                           
 14252                           ;Test.c: 299: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14253  000E60  0E00               	movlw	0
 14254  000E62  0100               	movlb	0	; () banked
 14255  000E64  6FB8               	movwf	actuatorTest@i_1761& (0+255),b
 14256  000E66                     l8591:
 14257                           
 14258                           ; BSR set to: 0
 14259  000E66  0E63               	movlw	99
 14260  000E68  0100               	movlb	0	; () banked
 14261  000E6A  65B8               	cpfsgt	actuatorTest@i_1761& (0+255),b
 14262  000E6C  D001               	goto	l8595
 14263  000E6E  D00C               	goto	l8599
 14264  000E70                     l8595:
 14265                           
 14266                           ; BSR set to: 0
 14267  000E70  0E68               	movlw	104
 14268  000E72  0100               	movlb	0	; () banked
 14269  000E74  6FAB               	movwf	??_actuatorTest& (0+255),b
 14270  000E76  0EE4               	movlw	228
 14271  000E78                     u10697:
 14272  000E78  2EE8               	decfsz	wreg,f,c
 14273  000E7A  D7FE               	bra	u10697
 14274  000E7C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14275  000E7E  D7FC               	bra	u10697
 14276  000E80  F000               	nop	
 14277  000E82  0100               	movlb	0	; () banked
 14278  000E84  2BB8               	incf	actuatorTest@i_1761& (0+255),f,b
 14279  000E86  D7EF               	goto	l8591
 14280  000E88                     l8599:
 14281                           
 14282                           ; BSR set to: 0
 14283  000E88  0E00               	movlw	0
 14284  000E8A  0100               	movlb	0	; () banked
 14285  000E8C  6FB9               	movwf	actuatorTest@i_1762& (0+255),b
 14286  000E8E                     l8601:
 14287                           
 14288                           ; BSR set to: 0
 14289  000E8E  0E63               	movlw	99
 14290  000E90  0100               	movlb	0	; () banked
 14291  000E92  65B9               	cpfsgt	actuatorTest@i_1762& (0+255),b
 14292  000E94  D001               	goto	l8605
 14293  000E96  D00C               	goto	l1338
 14294  000E98                     l8605:
 14295                           
 14296                           ; BSR set to: 0
 14297  000E98  0E68               	movlw	104
 14298  000E9A  0100               	movlb	0	; () banked
 14299  000E9C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14300  000E9E  0EE4               	movlw	228
 14301  000EA0                     u10707:
 14302  000EA0  2EE8               	decfsz	wreg,f,c
 14303  000EA2  D7FE               	bra	u10707
 14304  000EA4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14305  000EA6  D7FC               	bra	u10707
 14306  000EA8  F000               	nop	
 14307  000EAA  0100               	movlb	0	; () banked
 14308  000EAC  2BB9               	incf	actuatorTest@i_1762& (0+255),f,b
 14309  000EAE  D7EF               	goto	l8601
 14310  000EB0                     l1338:
 14311                           
 14312                           ; BSR set to: 0
 14313                           ;Test.c: 300: TMR1ON = 0;
 14314  000EB0  90CD               	bcf	4045,0,c	;volatile
 14315                           
 14316                           ; BSR set to: 0
 14317                           ;Test.c: 307: printf("TST: TILT SERVO");
 14318  000EB2  0E2E               	movlw	low STR_103
 14319  000EB4  0100               	movlb	0	; () banked
 14320  000EB6  6F8E               	movwf	printf@f& (0+255),b
 14321  000EB8  0EFE               	movlw	high STR_103
 14322  000EBA  0100               	movlb	0	; () banked
 14323  000EBC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14324  000EBE  ECFE  F00D         	call	_printf	;wreg free
 14325                           
 14326                           ;Test.c: 308: lcdInst(0b11000000);;
 14327  000EC2  0EC0               	movlw	192
 14328  000EC4  ECA8  F02D         	call	_lcdInst
 14329                           
 14330                           ;Test.c: 309: printf("LEVEL -- 2s     ");
 14331  000EC8  0E98               	movlw	low STR_104
 14332  000ECA  0100               	movlb	0	; () banked
 14333  000ECC  6F8E               	movwf	printf@f& (0+255),b
 14334  000ECE  0EFB               	movlw	high STR_104
 14335  000ED0  0100               	movlb	0	; () banked
 14336  000ED2  6F8F               	movwf	(printf@f+1)& (0+255),b
 14337  000ED4  ECFE  F00D         	call	_printf	;wreg free
 14338                           
 14339                           ;Test.c: 310: updateServoPosition(1050, 3);
 14340  000ED8  0E04               	movlw	4
 14341  000EDA  0100               	movlb	0	; () banked
 14342  000EDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14343  000EDE  0E1A               	movlw	26
 14344  000EE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14345  000EE2  0E00               	movlw	0
 14346  000EE4  0100               	movlb	0	; () banked
 14347  000EE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14348  000EE8  0E03               	movlw	3
 14349  000EEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14350  000EEC  ECD9  F026         	call	_updateServoPosition	;wreg free
 14351                           
 14352                           ;Test.c: 311: TMR3ON = 1;
 14353  000EF0  80B1               	bsf	4017,0,c	;volatile
 14354                           
 14355                           ;Test.c: 312: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14356  000EF2  0E00               	movlw	0
 14357  000EF4  0100               	movlb	0	; () banked
 14358  000EF6  6FBA               	movwf	actuatorTest@i_1765& (0+255),b
 14359  000EF8                     l8619:
 14360                           
 14361                           ; BSR set to: 0
 14362  000EF8  0E63               	movlw	99
 14363  000EFA  0100               	movlb	0	; () banked
 14364  000EFC  65BA               	cpfsgt	actuatorTest@i_1765& (0+255),b
 14365  000EFE  D001               	goto	l8623
 14366  000F00  D00C               	goto	l8627
 14367  000F02                     l8623:
 14368                           
 14369                           ; BSR set to: 0
 14370  000F02  0E68               	movlw	104
 14371  000F04  0100               	movlb	0	; () banked
 14372  000F06  6FAB               	movwf	??_actuatorTest& (0+255),b
 14373  000F08  0EE4               	movlw	228
 14374  000F0A                     u10717:
 14375  000F0A  2EE8               	decfsz	wreg,f,c
 14376  000F0C  D7FE               	bra	u10717
 14377  000F0E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14378  000F10  D7FC               	bra	u10717
 14379  000F12  F000               	nop	
 14380  000F14  0100               	movlb	0	; () banked
 14381  000F16  2BBA               	incf	actuatorTest@i_1765& (0+255),f,b
 14382  000F18  D7EF               	goto	l8619
 14383  000F1A                     l8627:
 14384                           
 14385                           ; BSR set to: 0
 14386  000F1A  0E00               	movlw	0
 14387  000F1C  0100               	movlb	0	; () banked
 14388  000F1E  6FBB               	movwf	actuatorTest@i_1766& (0+255),b
 14389  000F20                     l8629:
 14390                           
 14391                           ; BSR set to: 0
 14392  000F20  0E63               	movlw	99
 14393  000F22  0100               	movlb	0	; () banked
 14394  000F24  65BB               	cpfsgt	actuatorTest@i_1766& (0+255),b
 14395  000F26  D001               	goto	l8633
 14396  000F28  D00C               	goto	l8637
 14397  000F2A                     l8633:
 14398                           
 14399                           ; BSR set to: 0
 14400  000F2A  0E68               	movlw	104
 14401  000F2C  0100               	movlb	0	; () banked
 14402  000F2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14403  000F30  0EE4               	movlw	228
 14404  000F32                     u10727:
 14405  000F32  2EE8               	decfsz	wreg,f,c
 14406  000F34  D7FE               	bra	u10727
 14407  000F36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14408  000F38  D7FC               	bra	u10727
 14409  000F3A  F000               	nop	
 14410  000F3C  0100               	movlb	0	; () banked
 14411  000F3E  2BBB               	incf	actuatorTest@i_1766& (0+255),f,b
 14412  000F40  D7EF               	goto	l8629
 14413  000F42                     l8637:
 14414                           
 14415                           ; BSR set to: 0
 14416                           ;Test.c: 314: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14417  000F42  0E80               	movlw	128
 14418  000F44  ECA8  F02D         	call	_lcdInst
 14419  000F48  0EC0               	movlw	192
 14420  000F4A  ECA8  F02D         	call	_lcdInst
 14421                           
 14422                           ;Test.c: 315: printf("DROP -- 2s      ");
 14423  000F4E  0E76               	movlw	low STR_105
 14424  000F50  0100               	movlb	0	; () banked
 14425  000F52  6F8E               	movwf	printf@f& (0+255),b
 14426  000F54  0EFB               	movlw	high STR_105
 14427  000F56  0100               	movlb	0	; () banked
 14428  000F58  6F8F               	movwf	(printf@f+1)& (0+255),b
 14429  000F5A  ECFE  F00D         	call	_printf	;wreg free
 14430                           
 14431                           ;Test.c: 316: updateServoPosition(1260, 3);
 14432  000F5E  0E04               	movlw	4
 14433  000F60  0100               	movlb	0	; () banked
 14434  000F62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14435  000F64  0EEC               	movlw	236
 14436  000F66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14437  000F68  0E00               	movlw	0
 14438  000F6A  0100               	movlb	0	; () banked
 14439  000F6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14440  000F6E  0E03               	movlw	3
 14441  000F70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14442  000F72  ECD9  F026         	call	_updateServoPosition	;wreg free
 14443                           
 14444                           ;Test.c: 317: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14445  000F76  0E00               	movlw	0
 14446  000F78  0100               	movlb	0	; () banked
 14447  000F7A  6FBC               	movwf	actuatorTest@i_1768& (0+255),b
 14448  000F7C                     l8645:
 14449                           
 14450                           ; BSR set to: 0
 14451  000F7C  0E63               	movlw	99
 14452  000F7E  0100               	movlb	0	; () banked
 14453  000F80  65BC               	cpfsgt	actuatorTest@i_1768& (0+255),b
 14454  000F82  D001               	goto	l8649
 14455  000F84  D00C               	goto	l8653
 14456  000F86                     l8649:
 14457                           
 14458                           ; BSR set to: 0
 14459  000F86  0E68               	movlw	104
 14460  000F88  0100               	movlb	0	; () banked
 14461  000F8A  6FAB               	movwf	??_actuatorTest& (0+255),b
 14462  000F8C  0EE4               	movlw	228
 14463  000F8E                     u10737:
 14464  000F8E  2EE8               	decfsz	wreg,f,c
 14465  000F90  D7FE               	bra	u10737
 14466  000F92  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14467  000F94  D7FC               	bra	u10737
 14468  000F96  F000               	nop	
 14469  000F98  0100               	movlb	0	; () banked
 14470  000F9A  2BBC               	incf	actuatorTest@i_1768& (0+255),f,b
 14471  000F9C  D7EF               	goto	l8645
 14472  000F9E                     l8653:
 14473                           
 14474                           ; BSR set to: 0
 14475  000F9E  0E00               	movlw	0
 14476  000FA0  0100               	movlb	0	; () banked
 14477  000FA2  6FBD               	movwf	actuatorTest@i_1769& (0+255),b
 14478  000FA4                     l8655:
 14479                           
 14480                           ; BSR set to: 0
 14481  000FA4  0E63               	movlw	99
 14482  000FA6  0100               	movlb	0	; () banked
 14483  000FA8  65BD               	cpfsgt	actuatorTest@i_1769& (0+255),b
 14484  000FAA  D001               	goto	l8659
 14485  000FAC  D00C               	goto	l8663
 14486  000FAE                     l8659:
 14487                           
 14488                           ; BSR set to: 0
 14489  000FAE  0E68               	movlw	104
 14490  000FB0  0100               	movlb	0	; () banked
 14491  000FB2  6FAB               	movwf	??_actuatorTest& (0+255),b
 14492  000FB4  0EE4               	movlw	228
 14493  000FB6                     u10747:
 14494  000FB6  2EE8               	decfsz	wreg,f,c
 14495  000FB8  D7FE               	bra	u10747
 14496  000FBA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14497  000FBC  D7FC               	bra	u10747
 14498  000FBE  F000               	nop	
 14499  000FC0  0100               	movlb	0	; () banked
 14500  000FC2  2BBD               	incf	actuatorTest@i_1769& (0+255),f,b
 14501  000FC4  D7EF               	goto	l8655
 14502  000FC6                     l8663:
 14503                           
 14504                           ; BSR set to: 0
 14505                           ;Test.c: 319: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14506  000FC6  0E80               	movlw	128
 14507  000FC8  ECA8  F02D         	call	_lcdInst
 14508  000FCC  0EC0               	movlw	192
 14509  000FCE  ECA8  F02D         	call	_lcdInst
 14510                           
 14511                           ;Test.c: 320: printf("LEVEL -- 2s     ");
 14512  000FD2  0E98               	movlw	low STR_104
 14513  000FD4  0100               	movlb	0	; () banked
 14514  000FD6  6F8E               	movwf	printf@f& (0+255),b
 14515  000FD8  0EFB               	movlw	high STR_104
 14516  000FDA  0100               	movlb	0	; () banked
 14517  000FDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14518  000FDE  ECFE  F00D         	call	_printf	;wreg free
 14519                           
 14520                           ;Test.c: 321: updateServoPosition(1050, 3);
 14521  000FE2  0E04               	movlw	4
 14522  000FE4  0100               	movlb	0	; () banked
 14523  000FE6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14524  000FE8  0E1A               	movlw	26
 14525  000FEA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14526  000FEC  0E00               	movlw	0
 14527  000FEE  0100               	movlb	0	; () banked
 14528  000FF0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14529  000FF2  0E03               	movlw	3
 14530  000FF4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14531  000FF6  ECD9  F026         	call	_updateServoPosition	;wreg free
 14532                           
 14533                           ;Test.c: 322: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14534  000FFA  0E00               	movlw	0
 14535  000FFC  0100               	movlb	0	; () banked
 14536  000FFE  6FBE               	movwf	actuatorTest@i_1771& (0+255),b
 14537  001000                     l8671:
 14538                           
 14539                           ; BSR set to: 0
 14540  001000  0E63               	movlw	99
 14541  001002  0100               	movlb	0	; () banked
 14542  001004  65BE               	cpfsgt	actuatorTest@i_1771& (0+255),b
 14543  001006  D001               	goto	l8675
 14544  001008  D00C               	goto	l8679
 14545  00100A                     l8675:
 14546                           
 14547                           ; BSR set to: 0
 14548  00100A  0E68               	movlw	104
 14549  00100C  0100               	movlb	0	; () banked
 14550  00100E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14551  001010  0EE4               	movlw	228
 14552  001012                     u10757:
 14553  001012  2EE8               	decfsz	wreg,f,c
 14554  001014  D7FE               	bra	u10757
 14555  001016  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14556  001018  D7FC               	bra	u10757
 14557  00101A  F000               	nop	
 14558  00101C  0100               	movlb	0	; () banked
 14559  00101E  2BBE               	incf	actuatorTest@i_1771& (0+255),f,b
 14560  001020  D7EF               	goto	l8671
 14561  001022                     l8679:
 14562                           
 14563                           ; BSR set to: 0
 14564  001022  0E00               	movlw	0
 14565  001024  0100               	movlb	0	; () banked
 14566  001026  6FBF               	movwf	actuatorTest@i_1772& (0+255),b
 14567  001028                     l8681:
 14568                           
 14569                           ; BSR set to: 0
 14570  001028  0E63               	movlw	99
 14571  00102A  0100               	movlb	0	; () banked
 14572  00102C  65BF               	cpfsgt	actuatorTest@i_1772& (0+255),b
 14573  00102E  D001               	goto	l8685
 14574  001030  D00C               	goto	l1350
 14575  001032                     l8685:
 14576                           
 14577                           ; BSR set to: 0
 14578  001032  0E68               	movlw	104
 14579  001034  0100               	movlb	0	; () banked
 14580  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 14581  001038  0EE4               	movlw	228
 14582  00103A                     u10767:
 14583  00103A  2EE8               	decfsz	wreg,f,c
 14584  00103C  D7FE               	bra	u10767
 14585  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14586  001040  D7FC               	bra	u10767
 14587  001042  F000               	nop	
 14588  001044  0100               	movlb	0	; () banked
 14589  001046  2BBF               	incf	actuatorTest@i_1772& (0+255),f,b
 14590  001048  D7EF               	goto	l8681
 14591  00104A                     l1350:
 14592                           
 14593                           ; BSR set to: 0
 14594                           ;Test.c: 323: TMR3ON = 0;
 14595  00104A  90B1               	bcf	4017,0,c	;volatile
 14596                           
 14597                           ;Test.c: 324: (INTCONbits.GIE = 0);
 14598  00104C  9EF2               	bcf	intcon,7,c	;volatile
 14599                           
 14600                           ; BSR set to: 0
 14601                           ;Test.c: 329: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14602  00104E  0E01               	movlw	1
 14603  001050  ECA8  F02D         	call	_lcdInst
 14604  001054  0E68               	movlw	104
 14605  001056  0100               	movlb	0	; () banked
 14606  001058  6FAB               	movwf	??_actuatorTest& (0+255),b
 14607  00105A  0EE4               	movlw	228
 14608  00105C                     u10777:
 14609  00105C  2EE8               	decfsz	wreg,f,c
 14610  00105E  D7FE               	bra	u10777
 14611  001060  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14612  001062  D7FC               	bra	u10777
 14613  001064  F000               	nop	
 14614  001066  0E80               	movlw	128
 14615  001068  ECA8  F02D         	call	_lcdInst
 14616                           
 14617                           ;Test.c: 330: printf("TST: CAM SERVO");
 14618  00106C  0EB9               	movlw	low STR_107
 14619  00106E  0100               	movlb	0	; () banked
 14620  001070  6F8E               	movwf	printf@f& (0+255),b
 14621  001072  0EFE               	movlw	high STR_107
 14622  001074  0100               	movlb	0	; () banked
 14623  001076  6F8F               	movwf	(printf@f+1)& (0+255),b
 14624  001078  ECFE  F00D         	call	_printf	;wreg free
 14625                           
 14626                           ;Test.c: 331: lcdInst(0b11000000);;
 14627  00107C  0EC0               	movlw	192
 14628  00107E  ECA8  F02D         	call	_lcdInst
 14629                           
 14630                           ;Test.c: 332: printf("CAM UP  |RC0=1");
 14631  001082  0E9B               	movlw	low STR_108
 14632  001084  0100               	movlb	0	; () banked
 14633  001086  6F8E               	movwf	printf@f& (0+255),b
 14634  001088  0EFE               	movlw	high STR_108
 14635  00108A  0100               	movlb	0	; () banked
 14636  00108C  6F8F               	movwf	(printf@f+1)& (0+255),b
 14637  00108E  ECFE  F00D         	call	_printf	;wreg free
 14638                           
 14639                           ;Test.c: 333: LATCbits.LATC0 = 1;
 14640  001092  808B               	bsf	3979,0,c	;volatile
 14641                           
 14642                           ;Test.c: 334: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14643  001094  0E00               	movlw	0
 14644  001096  0100               	movlb	0	; () banked
 14645  001098  6FC0               	movwf	actuatorTest@i_1775& (0+255),b
 14646  00109A                     l8705:
 14647                           
 14648                           ; BSR set to: 0
 14649  00109A  0E63               	movlw	99
 14650  00109C  0100               	movlb	0	; () banked
 14651  00109E  65C0               	cpfsgt	actuatorTest@i_1775& (0+255),b
 14652  0010A0  D001               	goto	l8709
 14653  0010A2  D00C               	goto	l8713
 14654  0010A4                     l8709:
 14655                           
 14656                           ; BSR set to: 0
 14657  0010A4  0E68               	movlw	104
 14658  0010A6  0100               	movlb	0	; () banked
 14659  0010A8  6FAB               	movwf	??_actuatorTest& (0+255),b
 14660  0010AA  0EE4               	movlw	228
 14661  0010AC                     u10787:
 14662  0010AC  2EE8               	decfsz	wreg,f,c
 14663  0010AE  D7FE               	bra	u10787
 14664  0010B0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14665  0010B2  D7FC               	bra	u10787
 14666  0010B4  F000               	nop	
 14667  0010B6  0100               	movlb	0	; () banked
 14668  0010B8  2BC0               	incf	actuatorTest@i_1775& (0+255),f,b
 14669  0010BA  D7EF               	goto	l8705
 14670  0010BC                     l8713:
 14671                           
 14672                           ; BSR set to: 0
 14673  0010BC  0E00               	movlw	0
 14674  0010BE  0100               	movlb	0	; () banked
 14675  0010C0  6FC1               	movwf	actuatorTest@i_1776& (0+255),b
 14676  0010C2                     l8715:
 14677                           
 14678                           ; BSR set to: 0
 14679  0010C2  0E63               	movlw	99
 14680  0010C4  0100               	movlb	0	; () banked
 14681  0010C6  65C1               	cpfsgt	actuatorTest@i_1776& (0+255),b
 14682  0010C8  D001               	goto	l8719
 14683  0010CA  D00C               	goto	l8723
 14684  0010CC                     l8719:
 14685                           
 14686                           ; BSR set to: 0
 14687  0010CC  0E68               	movlw	104
 14688  0010CE  0100               	movlb	0	; () banked
 14689  0010D0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14690  0010D2  0EE4               	movlw	228
 14691  0010D4                     u10797:
 14692  0010D4  2EE8               	decfsz	wreg,f,c
 14693  0010D6  D7FE               	bra	u10797
 14694  0010D8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14695  0010DA  D7FC               	bra	u10797
 14696  0010DC  F000               	nop	
 14697  0010DE  0100               	movlb	0	; () banked
 14698  0010E0  2BC1               	incf	actuatorTest@i_1776& (0+255),f,b
 14699  0010E2  D7EF               	goto	l8715
 14700  0010E4                     l8723:
 14701                           
 14702                           ; BSR set to: 0
 14703                           ;Test.c: 335: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14704  0010E4  0E80               	movlw	128
 14705  0010E6  ECA8  F02D         	call	_lcdInst
 14706  0010EA  0EC0               	movlw	192
 14707  0010EC  ECA8  F02D         	call	_lcdInst
 14708                           
 14709                           ;Test.c: 336: printf("CAM DWN |RC0=0");
 14710  0010F0  0E8C               	movlw	low STR_109
 14711  0010F2  0100               	movlb	0	; () banked
 14712  0010F4  6F8E               	movwf	printf@f& (0+255),b
 14713  0010F6  0EFE               	movlw	high STR_109
 14714  0010F8  0100               	movlb	0	; () banked
 14715  0010FA  6F8F               	movwf	(printf@f+1)& (0+255),b
 14716  0010FC  ECFE  F00D         	call	_printf	;wreg free
 14717                           
 14718                           ;Test.c: 339: for(i=0;i<10000;i++)
 14719  001100  0E00               	movlw	0
 14720  001102  0100               	movlb	0	; () banked
 14721  001104  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14722  001106  0E00               	movlw	0
 14723  001108  6FC4               	movwf	actuatorTest@i& (0+255),b
 14724  00110A                     l8729:
 14725                           
 14726                           ; BSR set to: 0
 14727  00110A  0100               	movlb	0	; () banked
 14728  00110C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14729  00110E  D008               	goto	l1355
 14730  001110  0E10               	movlw	16
 14731  001112  0100               	movlb	0	; () banked
 14732  001114  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14733  001116  0E27               	movlw	39
 14734  001118  0100               	movlb	0	; () banked
 14735  00111A  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 14736  00111C  B0D8               	btfsc	status,0,c
 14737  00111E  D00D               	goto	l8739
 14738  001120                     l1355:
 14739                           
 14740                           ; BSR set to: 0
 14741                           ;Test.c: 340: {
 14742                           ;Test.c: 341: LATCbits.LATC0 = 1;
 14743  001120  808B               	bsf	3979,0,c	;volatile
 14744                           
 14745                           ; BSR set to: 0
 14746                           ;Test.c: 342: _delay((unsigned long)((10)*(32000000/4000000.0)));
 14747  001122  0E1A               	movlw	26
 14748  001124                     u10807:
 14749  001124  2EE8               	decfsz	wreg,f,c
 14750  001126  D7FE               	bra	u10807
 14751  001128  D000               	nop2	
 14752                           
 14753                           ;Test.c: 343: LATCbits.LATC0 = 0;
 14754  00112A  908B               	bcf	3979,0,c	;volatile
 14755                           
 14756                           ;Test.c: 344: _delay((unsigned long)((90)*(32000000/4000000.0)));
 14757  00112C  0EF0               	movlw	240
 14758  00112E                     u10817:
 14759  00112E  2EE8               	decfsz	wreg,f,c
 14760  001130  D7FE               	bra	u10817
 14761  001132  0100               	movlb	0	; () banked
 14762  001134  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14763  001136  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14764  001138  D7E8               	goto	l8729
 14765  00113A                     l8739:
 14766                           
 14767                           ; BSR set to: 0
 14768                           ;Test.c: 345: }
 14769                           ;Test.c: 347: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14770  00113A  0E00               	movlw	0
 14771  00113C  0100               	movlb	0	; () banked
 14772  00113E  6FC2               	movwf	actuatorTest@i_1778& (0+255),b
 14773  001140                     l8741:
 14774                           
 14775                           ; BSR set to: 0
 14776  001140  0E63               	movlw	99
 14777  001142  0100               	movlb	0	; () banked
 14778  001144  65C2               	cpfsgt	actuatorTest@i_1778& (0+255),b
 14779  001146  D001               	goto	l8745
 14780  001148  D00C               	goto	l8749
 14781  00114A                     l8745:
 14782                           
 14783                           ; BSR set to: 0
 14784  00114A  0E68               	movlw	104
 14785  00114C  0100               	movlb	0	; () banked
 14786  00114E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14787  001150  0EE4               	movlw	228
 14788  001152                     u10827:
 14789  001152  2EE8               	decfsz	wreg,f,c
 14790  001154  D7FE               	bra	u10827
 14791  001156  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14792  001158  D7FC               	bra	u10827
 14793  00115A  F000               	nop	
 14794  00115C  0100               	movlb	0	; () banked
 14795  00115E  2BC2               	incf	actuatorTest@i_1778& (0+255),f,b
 14796  001160  D7EF               	goto	l8741
 14797  001162                     l8749:
 14798                           
 14799                           ; BSR set to: 0
 14800  001162  0E00               	movlw	0
 14801  001164  0100               	movlb	0	; () banked
 14802  001166  6FC3               	movwf	actuatorTest@i_1779& (0+255),b
 14803  001168                     l8751:
 14804                           
 14805                           ; BSR set to: 0
 14806  001168  0E63               	movlw	99
 14807  00116A  0100               	movlb	0	; () banked
 14808  00116C  65C3               	cpfsgt	actuatorTest@i_1779& (0+255),b
 14809  00116E  D001               	goto	l8755
 14810  001170  D00C               	goto	l8759
 14811  001172                     l8755:
 14812                           
 14813                           ; BSR set to: 0
 14814  001172  0E68               	movlw	104
 14815  001174  0100               	movlb	0	; () banked
 14816  001176  6FAB               	movwf	??_actuatorTest& (0+255),b
 14817  001178  0EE4               	movlw	228
 14818  00117A                     u10837:
 14819  00117A  2EE8               	decfsz	wreg,f,c
 14820  00117C  D7FE               	bra	u10837
 14821  00117E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14822  001180  D7FC               	bra	u10837
 14823  001182  F000               	nop	
 14824  001184  0100               	movlb	0	; () banked
 14825  001186  2BC3               	incf	actuatorTest@i_1779& (0+255),f,b
 14826  001188  D7EF               	goto	l8751
 14827  00118A                     l8759:
 14828                           
 14829                           ; BSR set to: 0
 14830                           ;Test.c: 348: machine_state = Testing_state;
 14831  00118A  0E03               	movlw	3
 14832  00118C  0100               	movlb	0	; () banked
 14833  00118E  6FFC               	movwf	_machine_state& (0+255),b
 14834                           
 14835                           ; BSR set to: 0
 14836  001190  0012               	return		;funcret
 14837  001192                     __end_of_actuatorTest:
 14838                           	opt stack 0
 14839                           tblptru	equ	0xFF8
 14840                           tblptrh	equ	0xFF7
 14841                           tblptrl	equ	0xFF6
 14842                           tablat	equ	0xFF5
 14843                           prodh	equ	0xFF4
 14844                           prodl	equ	0xFF3
 14845                           intcon	equ	0xFF2
 14846                           intcon2	equ	0xFF1
 14847                           intcon3	equ	0xFF0
 14848                           postinc0	equ	0xFEE
 14849                           wreg	equ	0xFE8
 14850                           postdec1	equ	0xFE5
 14851                           fsr1l	equ	0xFE1
 14852                           indf2	equ	0xFDF
 14853                           postinc2	equ	0xFDE
 14854                           postdec2	equ	0xFDD
 14855                           fsr2h	equ	0xFDA
 14856                           fsr2l	equ	0xFD9
 14857                           status	equ	0xFD8
 14858                           
 14859 ;; *************** function _SpeedTest *****************
 14860 ;; Defined at:
 14861 ;;		line 541 in file "Test.c"
 14862 ;; Parameters:    Size  Location     Type
 14863 ;;		None
 14864 ;; Auto vars:     Size  Location     Type
 14865 ;;		None
 14866 ;; Return value:  Size  Location     Type
 14867 ;;                  1    wreg      void 
 14868 ;; Registers used:
 14869 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14870 ;; Tracked objects:
 14871 ;;		On entry : 0/0
 14872 ;;		On exit  : 0/0
 14873 ;;		Unchanged: 0/0
 14874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14877 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14878 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14879 ;;Total ram usage:        1 bytes
 14880 ;; Hardware stack levels used:    1
 14881 ;; Hardware stack levels required when called:   10
 14882 ;; This function calls:
 14883 ;;		_lcdInst
 14884 ;;		_printf
 14885 ;; This function is called by:
 14886 ;;		_Test
 14887 ;; This function uses a non-reentrant model
 14888 ;;
 14889                           
 14890                           	psect	text46
 14891  004D2E                     __ptext46:
 14892                           	opt stack 0
 14893  004D2E                     _SpeedTest:
 14894                           	opt stack 19
 14895                           
 14896                           ;Test.c: 543: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14897                           
 14898                           ; BSR set to: 0
 14899                           ;incstack = 0
 14900  004D2E  0E01               	movlw	1
 14901  004D30  ECA8  F02D         	call	_lcdInst
 14902  004D34  0E68               	movlw	104
 14903  004D36  0100               	movlb	0	; () banked
 14904  004D38  6FAB               	movwf	??_SpeedTest& (0+255),b
 14905  004D3A  0EE4               	movlw	228
 14906  004D3C                     u10847:
 14907  004D3C  2EE8               	decfsz	wreg,f,c
 14908  004D3E  D7FE               	bra	u10847
 14909  004D40  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14910  004D42  D7FC               	bra	u10847
 14911  004D44  F000               	nop	
 14912  004D46  0E80               	movlw	128
 14913  004D48  ECA8  F02D         	call	_lcdInst
 14914                           
 14915                           ;Test.c: 544: printf("S: D WILL RETURN ");
 14916  004D4C  0E0B               	movlw	low STR_120
 14917  004D4E  0100               	movlb	0	; () banked
 14918  004D50  6F8E               	movwf	printf@f& (0+255),b
 14919  004D52  0EFB               	movlw	high STR_120
 14920  004D54  0100               	movlb	0	; () banked
 14921  004D56  6F8F               	movwf	(printf@f+1)& (0+255),b
 14922  004D58  ECFE  F00D         	call	_printf	;wreg free
 14923                           
 14924                           ;Test.c: 545: lcdInst(0b11000000);;
 14925  004D5C  0EC0               	movlw	192
 14926  004D5E  ECA8  F02D         	call	_lcdInst
 14927                           
 14928                           ;Test.c: 546: printf("OTHER SETS RA5   ");
 14929  004D62  0EF9               	movlw	low STR_121
 14930  004D64  0100               	movlb	0	; () banked
 14931  004D66  6F8E               	movwf	printf@f& (0+255),b
 14932  004D68  0EFA               	movlw	high STR_121
 14933  004D6A  0100               	movlb	0	; () banked
 14934  004D6C  6F8F               	movwf	(printf@f+1)& (0+255),b
 14935  004D6E  ECFE  F00D         	call	_printf	;wreg free
 14936  004D72                     l1426:
 14937  004D72  A281               	btfss	3969,1,c	;volatile
 14938  004D74  D7FE               	goto	l1426
 14939                           
 14940                           ;Test.c: 551: }
 14941                           ;Test.c: 552: if(PORTB >> 4 == 0b1111){
 14942  004D76  3881               	swapf	3969,w,c	;volatile
 14943  004D78  0B0F               	andlw	15
 14944  004D7A  0A0F               	xorlw	15
 14945  004D7C  B4D8               	btfsc	status,2,c
 14946  004D7E  0012               	return	
 14947  004D80  D014               	goto	l8855
 14948  004D82                     l1433:
 14949                           
 14950                           ;Test.c: 557: LATBbits.LATB2 = 1;
 14951  004D82  848A               	bsf	3978,2,c	;volatile
 14952                           
 14953                           ;Test.c: 558: _delay((unsigned long)((5)*(32000000/4000.0)));
 14954  004D84  0E34               	movlw	52
 14955  004D86  0100               	movlb	0	; () banked
 14956  004D88  6FAB               	movwf	??_SpeedTest& (0+255),b
 14957  004D8A  0EF1               	movlw	241
 14958  004D8C                     u10857:
 14959  004D8C  2EE8               	decfsz	wreg,f,c
 14960  004D8E  D7FE               	bra	u10857
 14961  004D90  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14962  004D92  D7FC               	bra	u10857
 14963  004D94  D000               	nop2	
 14964                           
 14965                           ;Test.c: 559: LATBbits.LATB2 = 0;
 14966  004D96  948A               	bcf	3978,2,c	;volatile
 14967                           
 14968                           ;Test.c: 560: _delay((unsigned long)((5)*(32000000/4000.0)));
 14969  004D98  0E34               	movlw	52
 14970  004D9A  0100               	movlb	0	; () banked
 14971  004D9C  6FAB               	movwf	??_SpeedTest& (0+255),b
 14972  004D9E  0EF1               	movlw	241
 14973  004DA0                     u10867:
 14974  004DA0  2EE8               	decfsz	wreg,f,c
 14975  004DA2  D7FE               	bra	u10867
 14976  004DA4  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14977  004DA6  D7FC               	bra	u10867
 14978  004DA8  D000               	nop2	
 14979  004DAA                     l8855:
 14980  004DAA  B281               	btfsc	3969,1,c	;volatile
 14981  004DAC  D7EA               	goto	l1433
 14982                           
 14983                           ;Test.c: 563: }
 14984                           ;Test.c: 564: LATBbits.LATB2 = 0;
 14985  004DAE  948A               	bcf	3978,2,c	;volatile
 14986  004DB0  D7E0               	goto	l1426
 14987  004DB2                     __end_of_SpeedTest:
 14988                           	opt stack 0
 14989                           tblptru	equ	0xFF8
 14990                           tblptrh	equ	0xFF7
 14991                           tblptrl	equ	0xFF6
 14992                           tablat	equ	0xFF5
 14993                           prodh	equ	0xFF4
 14994                           prodl	equ	0xFF3
 14995                           intcon	equ	0xFF2
 14996                           intcon2	equ	0xFF1
 14997                           intcon3	equ	0xFF0
 14998                           postinc0	equ	0xFEE
 14999                           wreg	equ	0xFE8
 15000                           postdec1	equ	0xFE5
 15001                           fsr1l	equ	0xFE1
 15002                           indf2	equ	0xFDF
 15003                           postinc2	equ	0xFDE
 15004                           postdec2	equ	0xFDD
 15005                           fsr2h	equ	0xFDA
 15006                           fsr2l	equ	0xFD9
 15007                           status	equ	0xFD8
 15008                           
 15009 ;; *************** function _PortTestPusher *****************
 15010 ;; Defined at:
 15011 ;;		line 682 in file "Test.c"
 15012 ;; Parameters:    Size  Location     Type
 15013 ;;		None
 15014 ;; Auto vars:     Size  Location     Type
 15015 ;;		None
 15016 ;; Return value:  Size  Location     Type
 15017 ;;                  1    wreg      void 
 15018 ;; Registers used:
 15019 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15020 ;; Tracked objects:
 15021 ;;		On entry : 0/0
 15022 ;;		On exit  : 0/0
 15023 ;;		Unchanged: 0/0
 15024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15027 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15028 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15029 ;;Total ram usage:        1 bytes
 15030 ;; Hardware stack levels used:    1
 15031 ;; Hardware stack levels required when called:   10
 15032 ;; This function calls:
 15033 ;;		_lcdInst
 15034 ;;		_printf
 15035 ;; This function is called by:
 15036 ;;		_Test
 15037 ;; This function uses a non-reentrant model
 15038 ;;
 15039                           
 15040                           	psect	text47
 15041  0051FE                     __ptext47:
 15042                           	opt stack 0
 15043  0051FE                     _PortTestPusher:
 15044                           	opt stack 19
 15045                           
 15046                           ;Test.c: 683: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15047                           
 15048                           ;incstack = 0
 15049  0051FE  0E01               	movlw	1
 15050  005200  ECA8  F02D         	call	_lcdInst
 15051  005204  0E68               	movlw	104
 15052  005206  0100               	movlb	0	; () banked
 15053  005208  6FAB               	movwf	??_PortTestPusher& (0+255),b
 15054  00520A  0EE4               	movlw	228
 15055  00520C                     u10877:
 15056  00520C  2EE8               	decfsz	wreg,f,c
 15057  00520E  D7FE               	bra	u10877
 15058  005210  2FAB               	decfsz	??_PortTestPusher& (0+255),f,b
 15059  005212  D7FC               	bra	u10877
 15060  005214  F000               	nop	
 15061  005216  0E80               	movlw	128
 15062  005218  ECA8  F02D         	call	_lcdInst
 15063                           
 15064                           ;Test.c: 684: printf("D WILL RETURN    ");
 15065  00521C  0EE7               	movlw	low STR_111
 15066  00521E  0100               	movlb	0	; () banked
 15067  005220  6F8E               	movwf	printf@f& (0+255),b
 15068  005222  0EFA               	movlw	high STR_111
 15069  005224  0100               	movlb	0	; () banked
 15070  005226  6F8F               	movwf	(printf@f+1)& (0+255),b
 15071  005228  ECFE  F00D         	call	_printf	;wreg free
 15072                           
 15073                           ;Test.c: 685: lcdInst(0b11000000);;
 15074  00522C  0EC0               	movlw	192
 15075  00522E  ECA8  F02D         	call	_lcdInst
 15076                           
 15077                           ;Test.c: 686: printf("OTHER SETS PUSHER");
 15078  005232  0E2F               	movlw	low STR_129
 15079  005234  0100               	movlb	0	; () banked
 15080  005236  6F8E               	movwf	printf@f& (0+255),b
 15081  005238  0EFB               	movlw	high STR_129
 15082  00523A  0100               	movlb	0	; () banked
 15083  00523C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15084  00523E  ECFE  F00D         	call	_printf	;wreg free
 15085  005242                     l1487:
 15086  005242  A281               	btfss	3969,1,c	;volatile
 15087  005244  D7FE               	goto	l1487
 15088                           
 15089                           ;Test.c: 691: }
 15090                           ;Test.c: 692: if(PORTB >> 4 == 0b1111){
 15091  005246  3881               	swapf	3969,w,c	;volatile
 15092  005248  0B0F               	andlw	15
 15093  00524A  0A0F               	xorlw	15
 15094  00524C  B4D8               	btfsc	status,2,c
 15095  00524E  0012               	return	
 15096                           
 15097                           ;Test.c: 695: else{
 15098                           ;Test.c: 696: LATAbits.LATA4 = 1;
 15099                           
 15100                           ;Test.c: 694: }
 15101                           
 15102                           ;Test.c: 693: break;
 15103  005250  8889               	bsf	3977,4,c	;volatile
 15104  005252                     l1493:
 15105  005252  B281               	btfsc	3969,1,c	;volatile
 15106  005254  D7FE               	goto	l1493
 15107                           
 15108                           ;Test.c: 699: }
 15109                           ;Test.c: 700: LATAbits.LATA4 = 0;
 15110  005256  9889               	bcf	3977,4,c	;volatile
 15111  005258  D7F4               	goto	l1487
 15112  00525A                     __end_of_PortTestPusher:
 15113                           	opt stack 0
 15114                           tblptru	equ	0xFF8
 15115                           tblptrh	equ	0xFF7
 15116                           tblptrl	equ	0xFF6
 15117                           tablat	equ	0xFF5
 15118                           prodh	equ	0xFF4
 15119                           prodl	equ	0xFF3
 15120                           intcon	equ	0xFF2
 15121                           intcon2	equ	0xFF1
 15122                           intcon3	equ	0xFF0
 15123                           postinc0	equ	0xFEE
 15124                           wreg	equ	0xFE8
 15125                           postdec1	equ	0xFE5
 15126                           fsr1l	equ	0xFE1
 15127                           indf2	equ	0xFDF
 15128                           postinc2	equ	0xFDE
 15129                           postdec2	equ	0xFDD
 15130                           fsr2h	equ	0xFDA
 15131                           fsr2l	equ	0xFD9
 15132                           status	equ	0xFD8
 15133                           
 15134 ;; *************** function _PortTestDC *****************
 15135 ;; Defined at:
 15136 ;;		line 411 in file "Test.c"
 15137 ;; Parameters:    Size  Location     Type
 15138 ;;		None
 15139 ;; Auto vars:     Size  Location     Type
 15140 ;;		None
 15141 ;; Return value:  Size  Location     Type
 15142 ;;                  1    wreg      void 
 15143 ;; Registers used:
 15144 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15145 ;; Tracked objects:
 15146 ;;		On entry : 0/0
 15147 ;;		On exit  : 0/0
 15148 ;;		Unchanged: 0/0
 15149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15152 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15153 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15154 ;;Total ram usage:        1 bytes
 15155 ;; Hardware stack levels used:    1
 15156 ;; Hardware stack levels required when called:   10
 15157 ;; This function calls:
 15158 ;;		_lcdInst
 15159 ;;		_printf
 15160 ;; This function is called by:
 15161 ;;		_Test
 15162 ;; This function uses a non-reentrant model
 15163 ;;
 15164                           
 15165                           	psect	text48
 15166  00525A                     __ptext48:
 15167                           	opt stack 0
 15168  00525A                     _PortTestDC:
 15169                           	opt stack 19
 15170                           
 15171                           ;Test.c: 412: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15172                           
 15173                           ;incstack = 0
 15174  00525A  0E01               	movlw	1
 15175  00525C  ECA8  F02D         	call	_lcdInst
 15176  005260  0E68               	movlw	104
 15177  005262  0100               	movlb	0	; () banked
 15178  005264  6FAB               	movwf	??_PortTestDC& (0+255),b
 15179  005266  0EE4               	movlw	228
 15180  005268                     u10887:
 15181  005268  2EE8               	decfsz	wreg,f,c
 15182  00526A  D7FE               	bra	u10887
 15183  00526C  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 15184  00526E  D7FC               	bra	u10887
 15185  005270  F000               	nop	
 15186  005272  0E80               	movlw	128
 15187  005274  ECA8  F02D         	call	_lcdInst
 15188                           
 15189                           ;Test.c: 413: printf("D WILL RETURN    ");
 15190  005278  0EE7               	movlw	low STR_111
 15191  00527A  0100               	movlb	0	; () banked
 15192  00527C  6F8E               	movwf	printf@f& (0+255),b
 15193  00527E  0EFA               	movlw	high STR_111
 15194  005280  0100               	movlb	0	; () banked
 15195  005282  6F8F               	movwf	(printf@f+1)& (0+255),b
 15196  005284  ECFE  F00D         	call	_printf	;wreg free
 15197                           
 15198                           ;Test.c: 414: lcdInst(0b11000000);;
 15199  005288  0EC0               	movlw	192
 15200  00528A  ECA8  F02D         	call	_lcdInst
 15201                           
 15202                           ;Test.c: 415: printf("OTHER SETS DC   ");
 15203  00528E  0ECB               	movlw	low STR_112
 15204  005290  0100               	movlb	0	; () banked
 15205  005292  6F8E               	movwf	printf@f& (0+255),b
 15206  005294  0EFB               	movlw	high STR_112
 15207  005296  0100               	movlb	0	; () banked
 15208  005298  6F8F               	movwf	(printf@f+1)& (0+255),b
 15209  00529A  ECFE  F00D         	call	_printf	;wreg free
 15210  00529E                     l1368:
 15211  00529E  A281               	btfss	3969,1,c	;volatile
 15212  0052A0  D7FE               	goto	l1368
 15213                           
 15214                           ;Test.c: 420: }
 15215                           ;Test.c: 421: if(PORTB >> 4 == 0b1111){
 15216  0052A2  3881               	swapf	3969,w,c	;volatile
 15217  0052A4  0B0F               	andlw	15
 15218  0052A6  0A0F               	xorlw	15
 15219  0052A8  B4D8               	btfsc	status,2,c
 15220  0052AA  0012               	return	
 15221                           
 15222                           ;Test.c: 424: else{
 15223                           ;Test.c: 425: LATBbits.LATB2 = 1;
 15224                           
 15225                           ;Test.c: 423: }
 15226                           
 15227                           ;Test.c: 422: break;
 15228  0052AC  848A               	bsf	3978,2,c	;volatile
 15229  0052AE                     l1374:
 15230  0052AE  B281               	btfsc	3969,1,c	;volatile
 15231  0052B0  D7FE               	goto	l1374
 15232                           
 15233                           ;Test.c: 428: }
 15234                           ;Test.c: 429: LATBbits.LATB2 = 0;
 15235  0052B2  948A               	bcf	3978,2,c	;volatile
 15236  0052B4  D7F4               	goto	l1368
 15237  0052B6                     __end_of_PortTestDC:
 15238                           	opt stack 0
 15239                           tblptru	equ	0xFF8
 15240                           tblptrh	equ	0xFF7
 15241                           tblptrl	equ	0xFF6
 15242                           tablat	equ	0xFF5
 15243                           prodh	equ	0xFF4
 15244                           prodl	equ	0xFF3
 15245                           intcon	equ	0xFF2
 15246                           intcon2	equ	0xFF1
 15247                           intcon3	equ	0xFF0
 15248                           postinc0	equ	0xFEE
 15249                           wreg	equ	0xFE8
 15250                           postdec1	equ	0xFE5
 15251                           fsr1l	equ	0xFE1
 15252                           indf2	equ	0xFDF
 15253                           postinc2	equ	0xFDE
 15254                           postdec2	equ	0xFDD
 15255                           fsr2h	equ	0xFDA
 15256                           fsr2l	equ	0xFD9
 15257                           status	equ	0xFD8
 15258                           
 15259 ;; *************** function _PlatformTest *****************
 15260 ;; Defined at:
 15261 ;;		line 434 in file "Test.c"
 15262 ;; Parameters:    Size  Location     Type
 15263 ;;		None
 15264 ;; Auto vars:     Size  Location     Type
 15265 ;;  i               2   51[BANK0 ] int 
 15266 ;;  i               2   49[BANK0 ] int 
 15267 ;;  res             2   47[BANK0 ] int 
 15268 ;;  res             2   45[BANK0 ] int 
 15269 ;;  on              2   53[BANK0 ] int 
 15270 ;; Return value:  Size  Location     Type
 15271 ;;                  1    wreg      void 
 15272 ;; Registers used:
 15273 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15274 ;; Tracked objects:
 15275 ;;		On entry : 0/0
 15276 ;;		On exit  : 0/0
 15277 ;;		Unchanged: 0/0
 15278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15280 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15281 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15282 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15283 ;;Total ram usage:       12 bytes
 15284 ;; Hardware stack levels used:    1
 15285 ;; Hardware stack levels required when called:   10
 15286 ;; This function calls:
 15287 ;;		_lcdInst
 15288 ;;		_printf
 15289 ;;		_readADC
 15290 ;;		_stopSignals
 15291 ;; This function is called by:
 15292 ;;		_Test
 15293 ;; This function uses a non-reentrant model
 15294 ;;
 15295                           
 15296                           	psect	text49
 15297  002790                     __ptext49:
 15298                           	opt stack 0
 15299  002790                     _PlatformTest:
 15300                           	opt stack 19
 15301                           
 15302                           ;Test.c: 435: LATCbits.LATC5 = 1;
 15303                           
 15304                           ;incstack = 0
 15305  002790  8A8B               	bsf	3979,5,c	;volatile
 15306                           
 15307                           ;Test.c: 437: machine_state = Sorting_state;
 15308  002792  0E01               	movlw	1
 15309  002794  0100               	movlb	0	; () banked
 15310  002796  6FFC               	movwf	_machine_state& (0+255),b
 15311                           
 15312                           ;Test.c: 438: f_arm_position = 0;
 15313  002798  0E00               	movlw	0
 15314  00279A  0100               	movlb	0	; () banked
 15315  00279C  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15316  00279E  0E00               	movlw	0
 15317  0027A0  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 15318                           
 15319                           ;Test.c: 439: timer2_counter = 0;
 15320  0027A2  0E00               	movlw	0
 15321  0027A4  6E74               	movwf	_timer2_counter+1,c	;volatile
 15322  0027A6  0E00               	movlw	0
 15323  0027A8  6E73               	movwf	_timer2_counter,c	;volatile
 15324                           
 15325                           ; BSR set to: 0
 15326                           ;Test.c: 440: LATBbits.LATB3 = 0;
 15327  0027AA  968A               	bcf	3978,3,c	;volatile
 15328                           
 15329                           ; BSR set to: 0
 15330                           ;Test.c: 441: TMR2ON = 1;
 15331  0027AC  84CA               	bsf	4042,2,c	;volatile
 15332                           
 15333                           ;Test.c: 442: was_low_2 = 0;
 15334  0027AE  0E00               	movlw	0
 15335  0027B0  6E7A               	movwf	_was_low_2+1,c	;volatile
 15336  0027B2  0E00               	movlw	0
 15337  0027B4  6E79               	movwf	_was_low_2,c	;volatile
 15338                           
 15339                           ;Test.c: 444: int on = 1;
 15340  0027B6  0E00               	movlw	0
 15341  0027B8  0100               	movlb	0	; () banked
 15342  0027BA  6FB6               	movwf	(PlatformTest@on+1)& (0+255),b
 15343  0027BC  0E01               	movlw	1
 15344  0027BE  6FB5               	movwf	PlatformTest@on& (0+255),b
 15345                           
 15346                           ; BSR set to: 0
 15347                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15348  0027C0  0E01               	movlw	1
 15349  0027C2  ECA8  F02D         	call	_lcdInst
 15350  0027C6  0E68               	movlw	104
 15351  0027C8  0100               	movlb	0	; () banked
 15352  0027CA  6FAB               	movwf	??_PlatformTest& (0+255),b
 15353  0027CC  0EE4               	movlw	228
 15354  0027CE                     u10897:
 15355  0027CE  2EE8               	decfsz	wreg,f,c
 15356  0027D0  D7FE               	bra	u10897
 15357  0027D2  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15358  0027D4  D7FC               	bra	u10897
 15359  0027D6  F000               	nop	
 15360  0027D8  0E80               	movlw	128
 15361  0027DA  ECA8  F02D         	call	_lcdInst
 15362                           
 15363                           ;Test.c: 446: printf("1: DC | A: ARM  ");
 15364  0027DE  0EFE               	movlw	low STR_113
 15365  0027E0  0100               	movlb	0	; () banked
 15366  0027E2  6F8E               	movwf	printf@f& (0+255),b
 15367  0027E4  0EFB               	movlw	high STR_113
 15368  0027E6  0100               	movlb	0	; () banked
 15369  0027E8  6F8F               	movwf	(printf@f+1)& (0+255),b
 15370  0027EA  ECFE  F00D         	call	_printf	;wreg free
 15371                           
 15372                           ;Test.c: 448: while(PORTBbits.RB1 == 0){
 15373  0027EE  D058               	goto	l8909
 15374  0027F0                     l8891:
 15375                           
 15376                           ;Test.c: 449: readADC(0);
 15377  0027F0  0E00               	movlw	0
 15378  0027F2  ECA1  F02C         	call	_readADC
 15379                           
 15380                           ;Test.c: 450: int res = ADRESH<<8 | ADRESL;
 15381  0027F6  50C3               	movf	4035,w,c	;volatile
 15382  0027F8  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15383  0027FC  0100               	movlb	0	; () banked
 15384  0027FE  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15385  002800  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15386  002804  0100               	movlb	0	; () banked
 15387  002806  6BAB               	clrf	??_PlatformTest& (0+255),b
 15388  002808  0100               	movlb	0	; () banked
 15389  00280A  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15390  00280C  0100               	movlb	0	; () banked
 15391  00280E  6FAD               	movwf	PlatformTest@res& (0+255),b
 15392  002810  0100               	movlb	0	; () banked
 15393  002812  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15394  002814  0100               	movlb	0	; () banked
 15395  002816  6FAE               	movwf	(PlatformTest@res+1)& (0+255),b
 15396                           
 15397                           ; BSR set to: 0
 15398                           ;Test.c: 451: IR_signal = (res > 800) ? 1 : 0;
 15399  002818  0100               	movlb	0	; () banked
 15400  00281A  BFAE               	btfsc	(PlatformTest@res+1)& (0+255),7,b
 15401  00281C  D00A               	goto	u7960
 15402  00281E  0E21               	movlw	33
 15403  002820  0100               	movlb	0	; () banked
 15404  002822  5DAD               	subwf	PlatformTest@res& (0+255),w,b
 15405  002824  0E03               	movlw	3
 15406  002826  0100               	movlb	0	; () banked
 15407  002828  59AE               	subwfb	(PlatformTest@res+1)& (0+255),w,b
 15408  00282A  A0D8               	btfss	status,0,c
 15409  00282C  D002               	goto	u7960
 15410  00282E  0E01               	movlw	1
 15411  002830  D001               	goto	u7970
 15412  002832                     u7960:
 15413  002832  0E00               	movlw	0
 15414  002834                     u7970:
 15415  002834  0100               	movlb	0	; () banked
 15416  002836  6FE0               	movwf	_IR_signal& (0+255),b
 15417  002838  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 15418                           
 15419                           ;Test.c: 453: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15420  00283A  0E01               	movlw	1
 15421  00283C  ECA8  F02D         	call	_lcdInst
 15422  002840  0E68               	movlw	104
 15423  002842  0100               	movlb	0	; () banked
 15424  002844  6FAB               	movwf	??_PlatformTest& (0+255),b
 15425  002846  0EE4               	movlw	228
 15426  002848                     u10907:
 15427  002848  2EE8               	decfsz	wreg,f,c
 15428  00284A  D7FE               	bra	u10907
 15429  00284C  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15430  00284E  D7FC               	bra	u10907
 15431  002850  F000               	nop	
 15432  002852  0E80               	movlw	128
 15433  002854  ECA8  F02D         	call	_lcdInst
 15434                           
 15435                           ;Test.c: 454: printf("1: DC | A: ARM  ");
 15436  002858  0EFE               	movlw	low STR_113
 15437  00285A  0100               	movlb	0	; () banked
 15438  00285C  6F8E               	movwf	printf@f& (0+255),b
 15439  00285E  0EFB               	movlw	high STR_113
 15440  002860  0100               	movlb	0	; () banked
 15441  002862  6F8F               	movwf	(printf@f+1)& (0+255),b
 15442  002864  ECFE  F00D         	call	_printf	;wreg free
 15443                           
 15444                           ;Test.c: 455: lcdInst(0b11000000);;
 15445  002868  0EC0               	movlw	192
 15446  00286A  ECA8  F02D         	call	_lcdInst
 15447                           
 15448                           ;Test.c: 456: printf("5:H|6:L|IR:%d   ", res);
 15449  00286E  0EED               	movlw	low STR_115
 15450  002870  0100               	movlb	0	; () banked
 15451  002872  6F8E               	movwf	printf@f& (0+255),b
 15452  002874  0EFB               	movlw	high STR_115
 15453  002876  0100               	movlb	0	; () banked
 15454  002878  6F8F               	movwf	(printf@f+1)& (0+255),b
 15455  00287A  C0AD  F090         	movff	PlatformTest@res,?_printf+2
 15456  00287E  C0AE  F091         	movff	PlatformTest@res+1,?_printf+3
 15457  002882  ECFE  F00D         	call	_printf	;wreg free
 15458                           
 15459                           ;Test.c: 457: _delay((unsigned long)((100)*(32000000/4000.0)));
 15460  002886  0E05               	movlw	5
 15461  002888  0100               	movlb	0	; () banked
 15462  00288A  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15463  00288C  0E0F               	movlw	15
 15464  00288E  0100               	movlb	0	; () banked
 15465  002890  6FAB               	movwf	??_PlatformTest& (0+255),b
 15466  002892  0EF1               	movlw	241
 15467  002894                     u10917:
 15468  002894  2EE8               	decfsz	wreg,f,c
 15469  002896  D7FE               	bra	u10917
 15470  002898  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15471  00289A  D7FC               	bra	u10917
 15472  00289C  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15473  00289E  D7FA               	bra	u10917
 15474  0028A0                     l8909:
 15475  0028A0  B281               	btfsc	3969,1,c	;volatile
 15476  0028A2  D059               	goto	l8929
 15477  0028A4  D7A5               	goto	l8891
 15478  0028A6                     l8911:
 15479                           
 15480                           ;Test.c: 462: readADC(0);
 15481  0028A6  0E00               	movlw	0
 15482  0028A8  ECA1  F02C         	call	_readADC
 15483                           
 15484                           ;Test.c: 463: int res = ADRESH<<8 | ADRESL;
 15485  0028AC  50C3               	movf	4035,w,c	;volatile
 15486  0028AE  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15487  0028B2  0100               	movlb	0	; () banked
 15488  0028B4  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15489  0028B6  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15490  0028BA  0100               	movlb	0	; () banked
 15491  0028BC  6BAB               	clrf	??_PlatformTest& (0+255),b
 15492  0028BE  0100               	movlb	0	; () banked
 15493  0028C0  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15494  0028C2  0100               	movlb	0	; () banked
 15495  0028C4  6FAF               	movwf	PlatformTest@res_1791& (0+255),b
 15496  0028C6  0100               	movlb	0	; () banked
 15497  0028C8  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15498  0028CA  0100               	movlb	0	; () banked
 15499  0028CC  6FB0               	movwf	(PlatformTest@res_1791+1)& (0+255),b
 15500                           
 15501                           ; BSR set to: 0
 15502                           ;Test.c: 464: IR_signal = (res > 800) ? 1 : 0;
 15503  0028CE  0100               	movlb	0	; () banked
 15504  0028D0  BFB0               	btfsc	(PlatformTest@res_1791+1)& (0+255),7,b
 15505  0028D2  D00A               	goto	u7990
 15506  0028D4  0E21               	movlw	33
 15507  0028D6  0100               	movlb	0	; () banked
 15508  0028D8  5DAF               	subwf	PlatformTest@res_1791& (0+255),w,b
 15509  0028DA  0E03               	movlw	3
 15510  0028DC  0100               	movlb	0	; () banked
 15511  0028DE  59B0               	subwfb	(PlatformTest@res_1791+1)& (0+255),w,b
 15512  0028E0  A0D8               	btfss	status,0,c
 15513  0028E2  D002               	goto	u7990
 15514  0028E4  0E01               	movlw	1
 15515  0028E6  D001               	goto	u8000
 15516  0028E8                     u7990:
 15517  0028E8  0E00               	movlw	0
 15518  0028EA                     u8000:
 15519  0028EA  0100               	movlb	0	; () banked
 15520  0028EC  6FE0               	movwf	_IR_signal& (0+255),b
 15521  0028EE  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 15522                           
 15523                           ;Test.c: 466: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15524  0028F0  0E01               	movlw	1
 15525  0028F2  ECA8  F02D         	call	_lcdInst
 15526  0028F6  0E68               	movlw	104
 15527  0028F8  0100               	movlb	0	; () banked
 15528  0028FA  6FAB               	movwf	??_PlatformTest& (0+255),b
 15529  0028FC  0EE4               	movlw	228
 15530  0028FE                     u10927:
 15531  0028FE  2EE8               	decfsz	wreg,f,c
 15532  002900  D7FE               	bra	u10927
 15533  002902  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15534  002904  D7FC               	bra	u10927
 15535  002906  F000               	nop	
 15536  002908  0E80               	movlw	128
 15537  00290A  ECA8  F02D         	call	_lcdInst
 15538                           
 15539                           ;Test.c: 467: printf("1: DC | A: ARM  ");
 15540  00290E  0EFE               	movlw	low STR_113
 15541  002910  0100               	movlb	0	; () banked
 15542  002912  6F8E               	movwf	printf@f& (0+255),b
 15543  002914  0EFB               	movlw	high STR_113
 15544  002916  0100               	movlb	0	; () banked
 15545  002918  6F8F               	movwf	(printf@f+1)& (0+255),b
 15546  00291A  ECFE  F00D         	call	_printf	;wreg free
 15547                           
 15548                           ;Test.c: 468: lcdInst(0b11000000);;
 15549  00291E  0EC0               	movlw	192
 15550  002920  ECA8  F02D         	call	_lcdInst
 15551                           
 15552                           ;Test.c: 469: printf("5:H|6:L|IR:%d   ", res);
 15553  002924  0EED               	movlw	low STR_115
 15554  002926  0100               	movlb	0	; () banked
 15555  002928  6F8E               	movwf	printf@f& (0+255),b
 15556  00292A  0EFB               	movlw	high STR_115
 15557  00292C  0100               	movlb	0	; () banked
 15558  00292E  6F8F               	movwf	(printf@f+1)& (0+255),b
 15559  002930  C0AF  F090         	movff	PlatformTest@res_1791,?_printf+2
 15560  002934  C0B0  F091         	movff	PlatformTest@res_1791+1,?_printf+3
 15561  002938  ECFE  F00D         	call	_printf	;wreg free
 15562                           
 15563                           ;Test.c: 470: _delay((unsigned long)((100)*(32000000/4000.0)));
 15564  00293C  0E05               	movlw	5
 15565  00293E  0100               	movlb	0	; () banked
 15566  002940  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15567  002942  0E0F               	movlw	15
 15568  002944  0100               	movlb	0	; () banked
 15569  002946  6FAB               	movwf	??_PlatformTest& (0+255),b
 15570  002948  0EF1               	movlw	241
 15571  00294A                     u10937:
 15572  00294A  2EE8               	decfsz	wreg,f,c
 15573  00294C  D7FE               	bra	u10937
 15574  00294E  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15575  002950  D7FC               	bra	u10937
 15576  002952  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15577  002954  D7FA               	bra	u10937
 15578  002956                     l8929:
 15579  002956  A281               	btfss	3969,1,c	;volatile
 15580  002958  D7A6               	goto	l8911
 15581                           
 15582                           ;Test.c: 471: }
 15583                           ;Test.c: 472: if(PORTB >> 4 == 0b1111){
 15584  00295A  3881               	swapf	3969,w,c	;volatile
 15585  00295C  0B0F               	andlw	15
 15586  00295E  0A0F               	xorlw	15
 15587  002960  B4D8               	btfsc	status,2,c
 15588  002962  D09A               	goto	l1389
 15589                           
 15590                           ;Test.c: 475: else if(PORTB >> 4 == 0b0000){
 15591                           
 15592                           ;Test.c: 474: }
 15593                           
 15594                           ;Test.c: 473: break;
 15595  002964  CF81 F0AB          	movff	3969,??_PlatformTest	;volatile
 15596  002968  0100               	movlb	0	; () banked
 15597  00296A  3BAB               	swapf	??_PlatformTest& (0+255),f,b
 15598  00296C  0E0F               	movlw	15
 15599  00296E  17AB               	andwf	??_PlatformTest& (0+255),f,b
 15600  002970  A4D8               	btfss	status,2,c
 15601  002972  D012               	goto	l8941
 15602                           
 15603                           ; BSR set to: 0
 15604                           ;Test.c: 476: LATBbits.LATB2 = !LATBbits.LATB2;
 15605  002974  B48A               	btfsc	3978,2,c	;volatile
 15606  002976  D004               	goto	u8040
 15607  002978  0100               	movlb	0	; () banked
 15608  00297A  6BAB               	clrf	??_PlatformTest& (0+255),b
 15609  00297C  2BAB               	incf	??_PlatformTest& (0+255),f,b
 15610  00297E  D002               	goto	u8058
 15611  002980                     u8040:
 15612  002980  0100               	movlb	0	; () banked
 15613  002982  6BAB               	clrf	??_PlatformTest& (0+255),b
 15614  002984                     u8058:
 15615  002984  0100               	movlb	0	; () banked
 15616  002986  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 15617  002988  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 15618  00298A  508A               	movf	3978,w,c	;volatile
 15619  00298C  0100               	movlb	0	; () banked
 15620  00298E  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 15621  002990  0BFB               	andlw	-5
 15622  002992  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 15623  002994  6E8A               	movwf	3978,c	;volatile
 15624                           
 15625                           ;Test.c: 477: }
 15626  002996  D07D               	goto	l1404
 15627  002998                     l8941:
 15628                           
 15629                           ; BSR set to: 0
 15630                           ;Test.c: 478: else if(PORTB >> 4 == 0b0011){
 15631  002998  3881               	swapf	3969,w,c	;volatile
 15632  00299A  0B0F               	andlw	15
 15633  00299C  0A03               	xorlw	3
 15634  00299E  A4D8               	btfss	status,2,c
 15635  0029A0  D020               	goto	l8953
 15636                           
 15637                           ; BSR set to: 0
 15638                           ;Test.c: 479: if(on){
 15639  0029A2  0100               	movlb	0	; () banked
 15640  0029A4  51B5               	movf	PlatformTest@on& (0+255),w,b
 15641  0029A6  0100               	movlb	0	; () banked
 15642  0029A8  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 15643  0029AA  B4D8               	btfsc	status,2,c
 15644  0029AC  D010               	goto	l8949
 15645                           
 15646                           ; BSR set to: 0
 15647                           ;Test.c: 480: f_arm_position = 1;
 15648  0029AE  0E00               	movlw	0
 15649  0029B0  0100               	movlb	0	; () banked
 15650  0029B2  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15651  0029B4  0E01               	movlw	1
 15652  0029B6  D00F               	goto	L14
 15653  0029B8                     l8947:
 15654                           
 15655                           ; BSR set to: 0
 15656                           ;Test.c: 481: on = !on;
 15657  0029B8  0100               	movlb	0	; () banked
 15658  0029BA  51B5               	movf	PlatformTest@on& (0+255),w,b
 15659  0029BC  0100               	movlb	0	; () banked
 15660  0029BE  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 15661  0029C0  A4D8               	btfss	status,2,c
 15662  0029C2  D00D               	goto	u8100
 15663  0029C4  D00A               	goto	u8101
 15664  0029C6                     u8090:
 15665  0029C6  0100               	movlb	0	; () banked
 15666  0029C8  6FB5               	movwf	PlatformTest@on& (0+255),b
 15667  0029CA  6BB6               	clrf	(PlatformTest@on+1)& (0+255),b
 15668                           
 15669                           ;Test.c: 482: }
 15670  0029CC  D062               	goto	l1404
 15671  0029CE                     l8949:
 15672                           
 15673                           ; BSR set to: 0
 15674                           ;Test.c: 483: else{
 15675                           ;Test.c: 484: f_arm_position = 0;
 15676  0029CE  0E00               	movlw	0
 15677  0029D0  0100               	movlb	0	; () banked
 15678  0029D2  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15679  0029D4  0E00               	movlw	0
 15680  0029D6                     L14:
 15681  0029D6  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 15682  0029D8  D7EF               	goto	l8947
 15683  0029DA                     u8101:
 15684  0029DA  0E01               	movlw	1
 15685  0029DC  D7F4               	goto	u8090
 15686  0029DE                     u8100:
 15687  0029DE  0E00               	movlw	0
 15688  0029E0  D7F2               	goto	u8090
 15689  0029E2                     l8953:
 15690                           
 15691                           ; BSR set to: 0
 15692                           ;Test.c: 488: else if(PORTB >> 4 == 0b0101){
 15693  0029E2  3881               	swapf	3969,w,c	;volatile
 15694  0029E4  0B0F               	andlw	15
 15695  0029E6  0A05               	xorlw	5
 15696  0029E8  A4D8               	btfss	status,2,c
 15697  0029EA  D027               	goto	l8967
 15698                           
 15699                           ; BSR set to: 0
 15700                           ;Test.c: 490: for(int i = 0; i<30; i++){
 15701  0029EC  0E00               	movlw	0
 15702  0029EE  0100               	movlb	0	; () banked
 15703  0029F0  6FB2               	movwf	(PlatformTest@i+1)& (0+255),b
 15704  0029F2  0E00               	movlw	0
 15705  0029F4  6FB1               	movwf	PlatformTest@i& (0+255),b
 15706  0029F6                     l8957:
 15707                           
 15708                           ; BSR set to: 0
 15709  0029F6  0100               	movlb	0	; () banked
 15710  0029F8  BFB2               	btfsc	(PlatformTest@i+1)& (0+255),7,b
 15711  0029FA  D008               	goto	l1398
 15712  0029FC  0100               	movlb	0	; () banked
 15713  0029FE  51B2               	movf	(PlatformTest@i+1)& (0+255),w,b
 15714  002A00  E148               	bnz	l1404
 15715  002A02  0E1E               	movlw	30
 15716  002A04  0100               	movlb	0	; () banked
 15717  002A06  5DB1               	subwf	PlatformTest@i& (0+255),w,b
 15718  002A08  B0D8               	btfsc	status,0,c
 15719  002A0A  D043               	goto	l1404
 15720  002A0C                     l1398:
 15721                           
 15722                           ; BSR set to: 0
 15723                           ;Test.c: 491: LATAbits.LATA4 = 1;
 15724  002A0C  8889               	bsf	3977,4,c	;volatile
 15725                           
 15726                           ; BSR set to: 0
 15727                           ;Test.c: 492: _delay((unsigned long)((7500)*(32000000/4000000.0)));
 15728  002A0E  0E4E               	movlw	78
 15729  002A10  0100               	movlb	0	; () banked
 15730  002A12  6FAB               	movwf	??_PlatformTest& (0+255),b
 15731  002A14  0EEB               	movlw	235
 15732  002A16                     u10947:
 15733  002A16  2EE8               	decfsz	wreg,f,c
 15734  002A18  D7FE               	bra	u10947
 15735  002A1A  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15736  002A1C  D7FC               	bra	u10947
 15737                           
 15738                           ;Test.c: 493: LATAbits.LATA4 = 0;
 15739  002A1E  9889               	bcf	3977,4,c	;volatile
 15740                           
 15741                           ;Test.c: 494: _delay((unsigned long)((2500)*(32000000/4000000.0)));
 15742  002A20  0E1A               	movlw	26
 15743  002A22  0100               	movlb	0	; () banked
 15744  002A24  6FAB               	movwf	??_PlatformTest& (0+255),b
 15745  002A26  0EF8               	movlw	248
 15746  002A28                     u10957:
 15747  002A28  2EE8               	decfsz	wreg,f,c
 15748  002A2A  D7FE               	bra	u10957
 15749  002A2C  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15750  002A2E  D7FC               	bra	u10957
 15751  002A30  F000               	nop	
 15752  002A32  0100               	movlb	0	; () banked
 15753  002A34  4BB1               	infsnz	PlatformTest@i& (0+255),f,b
 15754  002A36  2BB2               	incf	(PlatformTest@i+1)& (0+255),f,b
 15755  002A38  D7DE               	goto	l8957
 15756  002A3A                     l8967:
 15757                           
 15758                           ; BSR set to: 0
 15759                           ;Test.c: 497: else if (PORTB >> 4 == 0b0110){
 15760  002A3A  3881               	swapf	3969,w,c	;volatile
 15761  002A3C  0B0F               	andlw	15
 15762  002A3E  0A06               	xorlw	6
 15763  002A40  A4D8               	btfss	status,2,c
 15764  002A42  D027               	goto	l1404
 15765                           
 15766                           ; BSR set to: 0
 15767                           ;Test.c: 499: for(int i = 0; i<30; i++){
 15768  002A44  0E00               	movlw	0
 15769  002A46  0100               	movlb	0	; () banked
 15770  002A48  6FB4               	movwf	(PlatformTest@i_1795+1)& (0+255),b
 15771  002A4A  0E00               	movlw	0
 15772  002A4C  6FB3               	movwf	PlatformTest@i_1795& (0+255),b
 15773  002A4E                     l8971:
 15774                           
 15775                           ; BSR set to: 0
 15776  002A4E  0100               	movlb	0	; () banked
 15777  002A50  BFB4               	btfsc	(PlatformTest@i_1795+1)& (0+255),7,b
 15778  002A52  D008               	goto	l1402
 15779  002A54  0100               	movlb	0	; () banked
 15780  002A56  51B4               	movf	(PlatformTest@i_1795+1)& (0+255),w,b
 15781  002A58  E11C               	bnz	l1404
 15782  002A5A  0E1E               	movlw	30
 15783  002A5C  0100               	movlb	0	; () banked
 15784  002A5E  5DB3               	subwf	PlatformTest@i_1795& (0+255),w,b
 15785  002A60  B0D8               	btfsc	status,0,c
 15786  002A62  D017               	goto	l1404
 15787  002A64                     l1402:
 15788                           
 15789                           ; BSR set to: 0
 15790                           ;Test.c: 500: LATAbits.LATA4 = 1;
 15791  002A64  8889               	bsf	3977,4,c	;volatile
 15792                           
 15793                           ; BSR set to: 0
 15794                           ;Test.c: 501: _delay((unsigned long)((5800)*(32000000/4000000.0)));
 15795  002A66  0E3D               	movlw	61
 15796  002A68  0100               	movlb	0	; () banked
 15797  002A6A  6FAB               	movwf	??_PlatformTest& (0+255),b
 15798  002A6C  0E41               	movlw	65
 15799  002A6E                     u10967:
 15800  002A6E  2EE8               	decfsz	wreg,f,c
 15801  002A70  D7FE               	bra	u10967
 15802  002A72  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15803  002A74  D7FC               	bra	u10967
 15804                           
 15805                           ;Test.c: 502: LATAbits.LATA4 = 0;
 15806  002A76  9889               	bcf	3977,4,c	;volatile
 15807                           
 15808                           ;Test.c: 503: _delay((unsigned long)((4200)*(32000000/4000000.0)));
 15809  002A78  0E2C               	movlw	44
 15810  002A7A  0100               	movlb	0	; () banked
 15811  002A7C  6FAB               	movwf	??_PlatformTest& (0+255),b
 15812  002A7E  0EA1               	movlw	161
 15813  002A80                     u10977:
 15814  002A80  2EE8               	decfsz	wreg,f,c
 15815  002A82  D7FE               	bra	u10977
 15816  002A84  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15817  002A86  D7FC               	bra	u10977
 15818  002A88  D000               	nop2	
 15819  002A8A  0100               	movlb	0	; () banked
 15820  002A8C  4BB3               	infsnz	PlatformTest@i_1795& (0+255),f,b
 15821  002A8E  2BB4               	incf	(PlatformTest@i_1795+1)& (0+255),f,b
 15822  002A90  D7DE               	goto	l8971
 15823  002A92                     l1404:
 15824  002A92  A281               	btfss	3969,1,c	;volatile
 15825  002A94  D760               	goto	l8929
 15826  002A96  D7FD               	goto	l1404
 15827  002A98                     l1389:
 15828                           
 15829                           ;Test.c: 508: }
 15830                           ;Test.c: 510: LATCbits.LATC5 = 0;
 15831  002A98  9A8B               	bcf	3979,5,c	;volatile
 15832                           
 15833                           ;Test.c: 511: stopSignals();
 15834  002A9A  EC5D  F02D         	call	_stopSignals	;wreg free
 15835                           
 15836                           ;Test.c: 512: machine_state = Testing_state;
 15837  002A9E  0E03               	movlw	3
 15838  002AA0  0100               	movlb	0	; () banked
 15839  002AA2  6FFC               	movwf	_machine_state& (0+255),b
 15840                           
 15841                           ; BSR set to: 0
 15842  002AA4  0012               	return		;funcret
 15843  002AA6                     __end_of_PlatformTest:
 15844                           	opt stack 0
 15845                           tblptru	equ	0xFF8
 15846                           tblptrh	equ	0xFF7
 15847                           tblptrl	equ	0xFF6
 15848                           tablat	equ	0xFF5
 15849                           prodh	equ	0xFF4
 15850                           prodl	equ	0xFF3
 15851                           intcon	equ	0xFF2
 15852                           intcon2	equ	0xFF1
 15853                           intcon3	equ	0xFF0
 15854                           postinc0	equ	0xFEE
 15855                           wreg	equ	0xFE8
 15856                           postdec1	equ	0xFE5
 15857                           fsr1l	equ	0xFE1
 15858                           indf2	equ	0xFDF
 15859                           postinc2	equ	0xFDE
 15860                           postdec2	equ	0xFDD
 15861                           fsr2h	equ	0xFDA
 15862                           fsr2l	equ	0xFD9
 15863                           status	equ	0xFD8
 15864                           
 15865 ;; *************** function _BothServos *****************
 15866 ;; Defined at:
 15867 ;;		line 351 in file "Test.c"
 15868 ;; Parameters:    Size  Location     Type
 15869 ;;		None
 15870 ;; Auto vars:     Size  Location     Type
 15871 ;;		None
 15872 ;; Return value:  Size  Location     Type
 15873 ;;                  1    wreg      void 
 15874 ;; Registers used:
 15875 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15876 ;; Tracked objects:
 15877 ;;		On entry : 0/0
 15878 ;;		On exit  : 0/0
 15879 ;;		Unchanged: 0/0
 15880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15883 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15884 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15885 ;;Total ram usage:        2 bytes
 15886 ;; Hardware stack levels used:    1
 15887 ;; Hardware stack levels required when called:   10
 15888 ;; This function calls:
 15889 ;;		_initServos
 15890 ;;		_lcdInst
 15891 ;;		_printf
 15892 ;;		_stopSignals
 15893 ;;		_updateServoPosition
 15894 ;; This function is called by:
 15895 ;;		_Test
 15896 ;; This function uses a non-reentrant model
 15897 ;;
 15898                           
 15899                           	psect	text50
 15900  002034                     __ptext50:
 15901                           	opt stack 0
 15902  002034                     _BothServos:
 15903                           	opt stack 19
 15904                           
 15905                           ;Test.c: 352: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15906                           
 15907                           ; BSR set to: 0
 15908                           ;incstack = 0
 15909  002034  0E01               	movlw	1
 15910  002036  ECA8  F02D         	call	_lcdInst
 15911  00203A  0E68               	movlw	104
 15912  00203C  0100               	movlb	0	; () banked
 15913  00203E  6FAB               	movwf	??_BothServos& (0+255),b
 15914  002040  0EE4               	movlw	228
 15915  002042                     u10987:
 15916  002042  2EE8               	decfsz	wreg,f,c
 15917  002044  D7FE               	bra	u10987
 15918  002046  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15919  002048  D7FC               	bra	u10987
 15920  00204A  F000               	nop	
 15921  00204C  0E80               	movlw	128
 15922  00204E  ECA8  F02D         	call	_lcdInst
 15923                           
 15924                           ;Test.c: 353: printf("TST: BOTH SERVOS");
 15925  002052  0EA8               	movlw	low STR_110
 15926  002054  0100               	movlb	0	; () banked
 15927  002056  6F8E               	movwf	printf@f& (0+255),b
 15928  002058  0EFC               	movlw	high STR_110
 15929  00205A  0100               	movlb	0	; () banked
 15930  00205C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15931  00205E  ECFE  F00D         	call	_printf	;wreg free
 15932                           
 15933                           ;Test.c: 354: TMR1ON = 1;
 15934  002062  80CD               	bsf	4045,0,c	;volatile
 15935                           
 15936                           ;Test.c: 355: TMR3ON = 1;
 15937  002064  80B1               	bsf	4017,0,c	;volatile
 15938                           
 15939                           ;Test.c: 356: machine_state = Sorting_state;
 15940  002066  0E01               	movlw	1
 15941  002068  0100               	movlb	0	; () banked
 15942  00206A  6FFC               	movwf	_machine_state& (0+255),b
 15943                           
 15944                           ; BSR set to: 0
 15945                           ;Test.c: 357: was_low_1 = 0;
 15946  00206C  0E00               	movlw	0
 15947  00206E  6E78               	movwf	_was_low_1+1,c	;volatile
 15948  002070  0E00               	movlw	0
 15949  002072  6E77               	movwf	_was_low_1,c	;volatile
 15950                           
 15951                           ; BSR set to: 0
 15952                           ;Test.c: 358: was_low_3 = 0;
 15953  002074  0E00               	movlw	0
 15954  002076  6E7C               	movwf	_was_low_3+1,c	;volatile
 15955  002078  0E00               	movlw	0
 15956  00207A  6E7B               	movwf	_was_low_3,c	;volatile
 15957                           
 15958                           ; BSR set to: 0
 15959                           ;Test.c: 364: initServos();
 15960  00207C  EC18  F027         	call	_initServos	;wreg free
 15961                           
 15962                           ;Test.c: 365: _delay((unsigned long)((1500)*(32000000/4000.0)));
 15963  002080  0E3D               	movlw	61
 15964  002082  0100               	movlb	0	; () banked
 15965  002084  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15966  002086  0EE1               	movlw	225
 15967  002088  0100               	movlb	0	; () banked
 15968  00208A  6FAB               	movwf	??_BothServos& (0+255),b
 15969  00208C  0E3F               	movlw	63
 15970  00208E                     u10997:
 15971  00208E  2EE8               	decfsz	wreg,f,c
 15972  002090  D7FE               	bra	u10997
 15973  002092  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15974  002094  D7FC               	bra	u10997
 15975  002096  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15976  002098  D7FA               	bra	u10997
 15977  00209A  D000               	nop2	
 15978                           
 15979                           ;Test.c: 367: updateServoPosition(500, 1);
 15980  00209C  0E01               	movlw	1
 15981  00209E  0100               	movlb	0	; () banked
 15982  0020A0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15983  0020A2  0EF4               	movlw	244
 15984  0020A4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15985  0020A6  0E00               	movlw	0
 15986  0020A8  0100               	movlb	0	; () banked
 15987  0020AA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15988  0020AC  0E01               	movlw	1
 15989  0020AE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15990  0020B0  ECD9  F026         	call	_updateServoPosition	;wreg free
 15991                           
 15992                           ;Test.c: 368: updateServoPosition(1050, 3);
 15993  0020B4  0E04               	movlw	4
 15994  0020B6  0100               	movlb	0	; () banked
 15995  0020B8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15996  0020BA  0E1A               	movlw	26
 15997  0020BC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15998  0020BE  0E00               	movlw	0
 15999  0020C0  0100               	movlb	0	; () banked
 16000  0020C2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16001  0020C4  0E03               	movlw	3
 16002  0020C6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16003  0020C8  ECD9  F026         	call	_updateServoPosition	;wreg free
 16004                           
 16005                           ;Test.c: 369: _delay((unsigned long)((750)*(32000000/4000.0)));
 16006  0020CC  0E1F               	movlw	31
 16007  0020CE  0100               	movlb	0	; () banked
 16008  0020D0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16009  0020D2  0E71               	movlw	113
 16010  0020D4  0100               	movlb	0	; () banked
 16011  0020D6  6FAB               	movwf	??_BothServos& (0+255),b
 16012  0020D8  0E1E               	movlw	30
 16013  0020DA                     u11007:
 16014  0020DA  2EE8               	decfsz	wreg,f,c
 16015  0020DC  D7FE               	bra	u11007
 16016  0020DE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16017  0020E0  D7FC               	bra	u11007
 16018  0020E2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16019  0020E4  D7FA               	bra	u11007
 16020  0020E6  F000               	nop	
 16021                           
 16022                           ;Test.c: 370: updateServoPosition(1260, 3);
 16023  0020E8  0E04               	movlw	4
 16024  0020EA  0100               	movlb	0	; () banked
 16025  0020EC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16026  0020EE  0EEC               	movlw	236
 16027  0020F0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16028  0020F2  0E00               	movlw	0
 16029  0020F4  0100               	movlb	0	; () banked
 16030  0020F6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16031  0020F8  0E03               	movlw	3
 16032  0020FA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16033  0020FC  ECD9  F026         	call	_updateServoPosition	;wreg free
 16034                           
 16035                           ;Test.c: 371: _delay((unsigned long)((700)*(32000000/4000.0)));
 16036  002100  0E1D               	movlw	29
 16037  002102  0100               	movlb	0	; () banked
 16038  002104  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16039  002106  0E69               	movlw	105
 16040  002108  0100               	movlb	0	; () banked
 16041  00210A  6FAB               	movwf	??_BothServos& (0+255),b
 16042  00210C  0EA5               	movlw	165
 16043  00210E                     u11017:
 16044  00210E  2EE8               	decfsz	wreg,f,c
 16045  002110  D7FE               	bra	u11017
 16046  002112  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16047  002114  D7FC               	bra	u11017
 16048  002116  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16049  002118  D7FA               	bra	u11017
 16050                           
 16051                           ;Test.c: 372: updateServoPosition(1050, 3);
 16052  00211A  0E04               	movlw	4
 16053  00211C  0100               	movlb	0	; () banked
 16054  00211E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16055  002120  0E1A               	movlw	26
 16056  002122  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16057  002124  0E00               	movlw	0
 16058  002126  0100               	movlb	0	; () banked
 16059  002128  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16060  00212A  0E03               	movlw	3
 16061  00212C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16062  00212E  ECD9  F026         	call	_updateServoPosition	;wreg free
 16063                           
 16064                           ;Test.c: 373: _delay((unsigned long)((750)*(32000000/4000.0)));
 16065  002132  0E1F               	movlw	31
 16066  002134  0100               	movlb	0	; () banked
 16067  002136  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16068  002138  0E71               	movlw	113
 16069  00213A  0100               	movlb	0	; () banked
 16070  00213C  6FAB               	movwf	??_BothServos& (0+255),b
 16071  00213E  0E1E               	movlw	30
 16072  002140                     u11027:
 16073  002140  2EE8               	decfsz	wreg,f,c
 16074  002142  D7FE               	bra	u11027
 16075  002144  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16076  002146  D7FC               	bra	u11027
 16077  002148  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16078  00214A  D7FA               	bra	u11027
 16079  00214C  F000               	nop	
 16080                           
 16081                           ;Test.c: 375: updateServoPosition(850, 1);
 16082  00214E  0E03               	movlw	3
 16083  002150  0100               	movlb	0	; () banked
 16084  002152  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16085  002154  0E52               	movlw	82
 16086  002156  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16087  002158  0E00               	movlw	0
 16088  00215A  0100               	movlb	0	; () banked
 16089  00215C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16090  00215E  0E01               	movlw	1
 16091  002160  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16092  002162  ECD9  F026         	call	_updateServoPosition	;wreg free
 16093                           
 16094                           ;Test.c: 376: updateServoPosition(1050, 3);
 16095  002166  0E04               	movlw	4
 16096  002168  0100               	movlb	0	; () banked
 16097  00216A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16098  00216C  0E1A               	movlw	26
 16099  00216E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16100  002170  0E00               	movlw	0
 16101  002172  0100               	movlb	0	; () banked
 16102  002174  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16103  002176  0E03               	movlw	3
 16104  002178  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16105  00217A  ECD9  F026         	call	_updateServoPosition	;wreg free
 16106                           
 16107                           ;Test.c: 377: _delay((unsigned long)((750)*(32000000/4000.0)));
 16108  00217E  0E1F               	movlw	31
 16109  002180  0100               	movlb	0	; () banked
 16110  002182  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16111  002184  0E71               	movlw	113
 16112  002186  0100               	movlb	0	; () banked
 16113  002188  6FAB               	movwf	??_BothServos& (0+255),b
 16114  00218A  0E1E               	movlw	30
 16115  00218C                     u11037:
 16116  00218C  2EE8               	decfsz	wreg,f,c
 16117  00218E  D7FE               	bra	u11037
 16118  002190  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16119  002192  D7FC               	bra	u11037
 16120  002194  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16121  002196  D7FA               	bra	u11037
 16122  002198  F000               	nop	
 16123                           
 16124                           ;Test.c: 378: updateServoPosition(1260, 3);
 16125  00219A  0E04               	movlw	4
 16126  00219C  0100               	movlb	0	; () banked
 16127  00219E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16128  0021A0  0EEC               	movlw	236
 16129  0021A2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16130  0021A4  0E00               	movlw	0
 16131  0021A6  0100               	movlb	0	; () banked
 16132  0021A8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16133  0021AA  0E03               	movlw	3
 16134  0021AC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16135  0021AE  ECD9  F026         	call	_updateServoPosition	;wreg free
 16136                           
 16137                           ;Test.c: 379: _delay((unsigned long)((700)*(32000000/4000.0)));
 16138  0021B2  0E1D               	movlw	29
 16139  0021B4  0100               	movlb	0	; () banked
 16140  0021B6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16141  0021B8  0E69               	movlw	105
 16142  0021BA  0100               	movlb	0	; () banked
 16143  0021BC  6FAB               	movwf	??_BothServos& (0+255),b
 16144  0021BE  0EA5               	movlw	165
 16145  0021C0                     u11047:
 16146  0021C0  2EE8               	decfsz	wreg,f,c
 16147  0021C2  D7FE               	bra	u11047
 16148  0021C4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16149  0021C6  D7FC               	bra	u11047
 16150  0021C8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16151  0021CA  D7FA               	bra	u11047
 16152                           
 16153                           ;Test.c: 380: updateServoPosition(1050, 3);
 16154  0021CC  0E04               	movlw	4
 16155  0021CE  0100               	movlb	0	; () banked
 16156  0021D0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16157  0021D2  0E1A               	movlw	26
 16158  0021D4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16159  0021D6  0E00               	movlw	0
 16160  0021D8  0100               	movlb	0	; () banked
 16161  0021DA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16162  0021DC  0E03               	movlw	3
 16163  0021DE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16164  0021E0  ECD9  F026         	call	_updateServoPosition	;wreg free
 16165                           
 16166                           ;Test.c: 381: _delay((unsigned long)((750)*(32000000/4000.0)));
 16167  0021E4  0E1F               	movlw	31
 16168  0021E6  0100               	movlb	0	; () banked
 16169  0021E8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16170  0021EA  0E71               	movlw	113
 16171  0021EC  0100               	movlb	0	; () banked
 16172  0021EE  6FAB               	movwf	??_BothServos& (0+255),b
 16173  0021F0  0E1E               	movlw	30
 16174  0021F2                     u11057:
 16175  0021F2  2EE8               	decfsz	wreg,f,c
 16176  0021F4  D7FE               	bra	u11057
 16177  0021F6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16178  0021F8  D7FC               	bra	u11057
 16179  0021FA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16180  0021FC  D7FA               	bra	u11057
 16181  0021FE  F000               	nop	
 16182                           
 16183                           ;Test.c: 383: updateServoPosition(500, 1);
 16184  002200  0E01               	movlw	1
 16185  002202  0100               	movlb	0	; () banked
 16186  002204  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16187  002206  0EF4               	movlw	244
 16188  002208  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16189  00220A  0E00               	movlw	0
 16190  00220C  0100               	movlb	0	; () banked
 16191  00220E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16192  002210  0E01               	movlw	1
 16193  002212  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16194  002214  ECD9  F026         	call	_updateServoPosition	;wreg free
 16195                           
 16196                           ;Test.c: 384: updateServoPosition(1050, 3);
 16197  002218  0E04               	movlw	4
 16198  00221A  0100               	movlb	0	; () banked
 16199  00221C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16200  00221E  0E1A               	movlw	26
 16201  002220  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16202  002222  0E00               	movlw	0
 16203  002224  0100               	movlb	0	; () banked
 16204  002226  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16205  002228  0E03               	movlw	3
 16206  00222A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16207  00222C  ECD9  F026         	call	_updateServoPosition	;wreg free
 16208                           
 16209                           ;Test.c: 385: _delay((unsigned long)((750)*(32000000/4000.0)));
 16210  002230  0E1F               	movlw	31
 16211  002232  0100               	movlb	0	; () banked
 16212  002234  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16213  002236  0E71               	movlw	113
 16214  002238  0100               	movlb	0	; () banked
 16215  00223A  6FAB               	movwf	??_BothServos& (0+255),b
 16216  00223C  0E1E               	movlw	30
 16217  00223E                     u11067:
 16218  00223E  2EE8               	decfsz	wreg,f,c
 16219  002240  D7FE               	bra	u11067
 16220  002242  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16221  002244  D7FC               	bra	u11067
 16222  002246  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16223  002248  D7FA               	bra	u11067
 16224  00224A  F000               	nop	
 16225                           
 16226                           ;Test.c: 386: updateServoPosition(1260, 3);
 16227  00224C  0E04               	movlw	4
 16228  00224E  0100               	movlb	0	; () banked
 16229  002250  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16230  002252  0EEC               	movlw	236
 16231  002254  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16232  002256  0E00               	movlw	0
 16233  002258  0100               	movlb	0	; () banked
 16234  00225A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16235  00225C  0E03               	movlw	3
 16236  00225E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16237  002260  ECD9  F026         	call	_updateServoPosition	;wreg free
 16238                           
 16239                           ;Test.c: 387: _delay((unsigned long)((700)*(32000000/4000.0)));
 16240  002264  0E1D               	movlw	29
 16241  002266  0100               	movlb	0	; () banked
 16242  002268  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16243  00226A  0E69               	movlw	105
 16244  00226C  0100               	movlb	0	; () banked
 16245  00226E  6FAB               	movwf	??_BothServos& (0+255),b
 16246  002270  0EA5               	movlw	165
 16247  002272                     u11077:
 16248  002272  2EE8               	decfsz	wreg,f,c
 16249  002274  D7FE               	bra	u11077
 16250  002276  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16251  002278  D7FC               	bra	u11077
 16252  00227A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16253  00227C  D7FA               	bra	u11077
 16254                           
 16255                           ;Test.c: 388: updateServoPosition(1050, 3);
 16256  00227E  0E04               	movlw	4
 16257  002280  0100               	movlb	0	; () banked
 16258  002282  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16259  002284  0E1A               	movlw	26
 16260  002286  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16261  002288  0E00               	movlw	0
 16262  00228A  0100               	movlb	0	; () banked
 16263  00228C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16264  00228E  0E03               	movlw	3
 16265  002290  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16266  002292  ECD9  F026         	call	_updateServoPosition	;wreg free
 16267                           
 16268                           ;Test.c: 389: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16269  002296  0E3D               	movlw	61
 16270  002298  0100               	movlb	0	; () banked
 16271  00229A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16272  00229C  0EE1               	movlw	225
 16273  00229E  0100               	movlb	0	; () banked
 16274  0022A0  6FAB               	movwf	??_BothServos& (0+255),b
 16275  0022A2  0E3F               	movlw	63
 16276  0022A4                     u11087:
 16277  0022A4  2EE8               	decfsz	wreg,f,c
 16278  0022A6  D7FE               	bra	u11087
 16279  0022A8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16280  0022AA  D7FC               	bra	u11087
 16281  0022AC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16282  0022AE  D7FA               	bra	u11087
 16283  0022B0  D000               	nop2	
 16284                           
 16285                           ;Test.c: 391: updateServoPosition(1670, 1);
 16286  0022B2  0E06               	movlw	6
 16287  0022B4  0100               	movlb	0	; () banked
 16288  0022B6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16289  0022B8  0E86               	movlw	134
 16290  0022BA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16291  0022BC  0E00               	movlw	0
 16292  0022BE  0100               	movlb	0	; () banked
 16293  0022C0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16294  0022C2  0E01               	movlw	1
 16295  0022C4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16296  0022C6  ECD9  F026         	call	_updateServoPosition	;wreg free
 16297                           
 16298                           ;Test.c: 392: updateServoPosition(1050, 3);
 16299  0022CA  0E04               	movlw	4
 16300  0022CC  0100               	movlb	0	; () banked
 16301  0022CE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16302  0022D0  0E1A               	movlw	26
 16303  0022D2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16304  0022D4  0E00               	movlw	0
 16305  0022D6  0100               	movlb	0	; () banked
 16306  0022D8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16307  0022DA  0E03               	movlw	3
 16308  0022DC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16309  0022DE  ECD9  F026         	call	_updateServoPosition	;wreg free
 16310                           
 16311                           ;Test.c: 393: _delay((unsigned long)((750)*(32000000/4000.0)));
 16312  0022E2  0E1F               	movlw	31
 16313  0022E4  0100               	movlb	0	; () banked
 16314  0022E6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16315  0022E8  0E71               	movlw	113
 16316  0022EA  0100               	movlb	0	; () banked
 16317  0022EC  6FAB               	movwf	??_BothServos& (0+255),b
 16318  0022EE  0E1E               	movlw	30
 16319  0022F0                     u11097:
 16320  0022F0  2EE8               	decfsz	wreg,f,c
 16321  0022F2  D7FE               	bra	u11097
 16322  0022F4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16323  0022F6  D7FC               	bra	u11097
 16324  0022F8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16325  0022FA  D7FA               	bra	u11097
 16326  0022FC  F000               	nop	
 16327                           
 16328                           ;Test.c: 394: updateServoPosition(1390, 3);
 16329  0022FE  0E05               	movlw	5
 16330  002300  0100               	movlb	0	; () banked
 16331  002302  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16332  002304  0E6E               	movlw	110
 16333  002306  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16334  002308  0E00               	movlw	0
 16335  00230A  0100               	movlb	0	; () banked
 16336  00230C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16337  00230E  0E03               	movlw	3
 16338  002310  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16339  002312  ECD9  F026         	call	_updateServoPosition	;wreg free
 16340                           
 16341                           ;Test.c: 395: _delay((unsigned long)((700)*(32000000/4000.0)));
 16342  002316  0E1D               	movlw	29
 16343  002318  0100               	movlb	0	; () banked
 16344  00231A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16345  00231C  0E69               	movlw	105
 16346  00231E  0100               	movlb	0	; () banked
 16347  002320  6FAB               	movwf	??_BothServos& (0+255),b
 16348  002322  0EA5               	movlw	165
 16349  002324                     u11107:
 16350  002324  2EE8               	decfsz	wreg,f,c
 16351  002326  D7FE               	bra	u11107
 16352  002328  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16353  00232A  D7FC               	bra	u11107
 16354  00232C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16355  00232E  D7FA               	bra	u11107
 16356                           
 16357                           ;Test.c: 396: updateServoPosition(1050, 3);
 16358  002330  0E04               	movlw	4
 16359  002332  0100               	movlb	0	; () banked
 16360  002334  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16361  002336  0E1A               	movlw	26
 16362  002338  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16363  00233A  0E00               	movlw	0
 16364  00233C  0100               	movlb	0	; () banked
 16365  00233E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16366  002340  0E03               	movlw	3
 16367  002342  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16368  002344  ECD9  F026         	call	_updateServoPosition	;wreg free
 16369                           
 16370                           ;Test.c: 397: _delay((unsigned long)((750)*(32000000/4000.0)));
 16371  002348  0E1F               	movlw	31
 16372  00234A  0100               	movlb	0	; () banked
 16373  00234C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16374  00234E  0E71               	movlw	113
 16375  002350  0100               	movlb	0	; () banked
 16376  002352  6FAB               	movwf	??_BothServos& (0+255),b
 16377  002354  0E1E               	movlw	30
 16378  002356                     u11117:
 16379  002356  2EE8               	decfsz	wreg,f,c
 16380  002358  D7FE               	bra	u11117
 16381  00235A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16382  00235C  D7FC               	bra	u11117
 16383  00235E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16384  002360  D7FA               	bra	u11117
 16385  002362  F000               	nop	
 16386                           
 16387                           ;Test.c: 399: updateServoPosition(2400, 1);
 16388  002364  0E09               	movlw	9
 16389  002366  0100               	movlb	0	; () banked
 16390  002368  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16391  00236A  0E60               	movlw	96
 16392  00236C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16393  00236E  0E00               	movlw	0
 16394  002370  0100               	movlb	0	; () banked
 16395  002372  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16396  002374  0E01               	movlw	1
 16397  002376  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16398  002378  ECD9  F026         	call	_updateServoPosition	;wreg free
 16399                           
 16400                           ;Test.c: 400: updateServoPosition(1050, 3);
 16401  00237C  0E04               	movlw	4
 16402  00237E  0100               	movlb	0	; () banked
 16403  002380  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16404  002382  0E1A               	movlw	26
 16405  002384  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16406  002386  0E00               	movlw	0
 16407  002388  0100               	movlb	0	; () banked
 16408  00238A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16409  00238C  0E03               	movlw	3
 16410  00238E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16411  002390  ECD9  F026         	call	_updateServoPosition	;wreg free
 16412                           
 16413                           ;Test.c: 401: _delay((unsigned long)((750)*(32000000/4000.0)));
 16414  002394  0E1F               	movlw	31
 16415  002396  0100               	movlb	0	; () banked
 16416  002398  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16417  00239A  0E71               	movlw	113
 16418  00239C  0100               	movlb	0	; () banked
 16419  00239E  6FAB               	movwf	??_BothServos& (0+255),b
 16420  0023A0  0E1E               	movlw	30
 16421  0023A2                     u11127:
 16422  0023A2  2EE8               	decfsz	wreg,f,c
 16423  0023A4  D7FE               	bra	u11127
 16424  0023A6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16425  0023A8  D7FC               	bra	u11127
 16426  0023AA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16427  0023AC  D7FA               	bra	u11127
 16428  0023AE  F000               	nop	
 16429                           
 16430                           ;Test.c: 402: updateServoPosition(1390, 3);
 16431  0023B0  0E05               	movlw	5
 16432  0023B2  0100               	movlb	0	; () banked
 16433  0023B4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16434  0023B6  0E6E               	movlw	110
 16435  0023B8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16436  0023BA  0E00               	movlw	0
 16437  0023BC  0100               	movlb	0	; () banked
 16438  0023BE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16439  0023C0  0E03               	movlw	3
 16440  0023C2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16441  0023C4  ECD9  F026         	call	_updateServoPosition	;wreg free
 16442                           
 16443                           ;Test.c: 403: _delay((unsigned long)((700)*(32000000/4000.0)));
 16444  0023C8  0E1D               	movlw	29
 16445  0023CA  0100               	movlb	0	; () banked
 16446  0023CC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16447  0023CE  0E69               	movlw	105
 16448  0023D0  0100               	movlb	0	; () banked
 16449  0023D2  6FAB               	movwf	??_BothServos& (0+255),b
 16450  0023D4  0EA5               	movlw	165
 16451  0023D6                     u11137:
 16452  0023D6  2EE8               	decfsz	wreg,f,c
 16453  0023D8  D7FE               	bra	u11137
 16454  0023DA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16455  0023DC  D7FC               	bra	u11137
 16456  0023DE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16457  0023E0  D7FA               	bra	u11137
 16458                           
 16459                           ;Test.c: 404: updateServoPosition(1050, 3);
 16460  0023E2  0E04               	movlw	4
 16461  0023E4  0100               	movlb	0	; () banked
 16462  0023E6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16463  0023E8  0E1A               	movlw	26
 16464  0023EA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16465  0023EC  0E00               	movlw	0
 16466  0023EE  0100               	movlb	0	; () banked
 16467  0023F0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16468  0023F2  0E03               	movlw	3
 16469  0023F4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16470  0023F6  ECD9  F026         	call	_updateServoPosition	;wreg free
 16471                           
 16472                           ;Test.c: 405: _delay((unsigned long)((750)*(32000000/4000.0)));
 16473  0023FA  0E1F               	movlw	31
 16474  0023FC  0100               	movlb	0	; () banked
 16475  0023FE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16476  002400  0E71               	movlw	113
 16477  002402  0100               	movlb	0	; () banked
 16478  002404  6FAB               	movwf	??_BothServos& (0+255),b
 16479  002406  0E1E               	movlw	30
 16480  002408                     u11147:
 16481  002408  2EE8               	decfsz	wreg,f,c
 16482  00240A  D7FE               	bra	u11147
 16483  00240C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16484  00240E  D7FC               	bra	u11147
 16485  002410  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16486  002412  D7FA               	bra	u11147
 16487  002414  F000               	nop	
 16488                           
 16489                           ;Test.c: 407: stopSignals();
 16490  002416  EC5D  F02D         	call	_stopSignals	;wreg free
 16491                           
 16492                           ;Test.c: 408: machine_state = Testing_state;
 16493  00241A  0E03               	movlw	3
 16494  00241C  0100               	movlb	0	; () banked
 16495  00241E  6FFC               	movwf	_machine_state& (0+255),b
 16496                           
 16497                           ; BSR set to: 0
 16498  002420  0012               	return		;funcret
 16499  002422                     __end_of_BothServos:
 16500                           	opt stack 0
 16501                           tblptru	equ	0xFF8
 16502                           tblptrh	equ	0xFF7
 16503                           tblptrl	equ	0xFF6
 16504                           tablat	equ	0xFF5
 16505                           prodh	equ	0xFF4
 16506                           prodl	equ	0xFF3
 16507                           intcon	equ	0xFF2
 16508                           intcon2	equ	0xFF1
 16509                           intcon3	equ	0xFF0
 16510                           postinc0	equ	0xFEE
 16511                           wreg	equ	0xFE8
 16512                           postdec1	equ	0xFE5
 16513                           fsr1l	equ	0xFE1
 16514                           indf2	equ	0xFDF
 16515                           postinc2	equ	0xFDE
 16516                           postdec2	equ	0xFDD
 16517                           fsr2h	equ	0xFDA
 16518                           fsr2l	equ	0xFD9
 16519                           status	equ	0xFD8
 16520                           
 16521 ;; *************** function _stopSignals *****************
 16522 ;; Defined at:
 16523 ;;		line 71 in file "main.c"
 16524 ;; Parameters:    Size  Location     Type
 16525 ;;		None
 16526 ;; Auto vars:     Size  Location     Type
 16527 ;;		None
 16528 ;; Return value:  Size  Location     Type
 16529 ;;                  1    wreg      void 
 16530 ;; Registers used:
 16531 ;;		wreg, status,2
 16532 ;; Tracked objects:
 16533 ;;		On entry : 0/0
 16534 ;;		On exit  : 0/0
 16535 ;;		Unchanged: 0/0
 16536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16541 ;;Total ram usage:        0 bytes
 16542 ;; Hardware stack levels used:    1
 16543 ;; Hardware stack levels required when called:    7
 16544 ;; This function calls:
 16545 ;;		Nothing
 16546 ;; This function is called by:
 16547 ;;		_main
 16548 ;;		_BothServos
 16549 ;;		_PlatformTest
 16550 ;;		_arm
 16551 ;; This function uses a non-reentrant model
 16552 ;;
 16553                           
 16554                           	psect	text51
 16555  005ABA                     __ptext51:
 16556                           	opt stack 0
 16557  005ABA                     _stopSignals:
 16558                           	opt stack 23
 16559                           
 16560                           ;main.c: 72: LATA = 0x00;
 16561                           
 16562                           ; BSR set to: 0
 16563                           ;incstack = 0
 16564  005ABA  0E00               	movlw	0
 16565  005ABC  6E89               	movwf	3977,c	;volatile
 16566                           
 16567                           ;main.c: 73: LATB = 0x00;
 16568  005ABE  0E00               	movlw	0
 16569  005AC0  6E8A               	movwf	3978,c	;volatile
 16570                           
 16571                           ;main.c: 74: LATC = 0x00;
 16572  005AC2  0E00               	movlw	0
 16573  005AC4  6E8B               	movwf	3979,c	;volatile
 16574                           
 16575                           ;main.c: 75: LATD = 0x00;
 16576  005AC6  0E00               	movlw	0
 16577  005AC8  6E8C               	movwf	3980,c	;volatile
 16578                           
 16579                           ;main.c: 76: LATE = 0x00;
 16580  005ACA  0E00               	movlw	0
 16581  005ACC  6E8D               	movwf	3981,c	;volatile
 16582                           
 16583                           ;main.c: 77: TMR1IE = 0;
 16584  005ACE  909D               	bcf	3997,0,c	;volatile
 16585                           
 16586                           ;main.c: 78: TMR2IE = 0;
 16587  005AD0  929D               	bcf	3997,1,c	;volatile
 16588                           
 16589                           ;main.c: 79: TMR3IE = 0;
 16590  005AD2  92A0               	bcf	4000,1,c	;volatile
 16591  005AD4  0012               	return		;funcret
 16592  005AD6                     __end_of_stopSignals:
 16593                           	opt stack 0
 16594                           tblptru	equ	0xFF8
 16595                           tblptrh	equ	0xFF7
 16596                           tblptrl	equ	0xFF6
 16597                           tablat	equ	0xFF5
 16598                           prodh	equ	0xFF4
 16599                           prodl	equ	0xFF3
 16600                           intcon	equ	0xFF2
 16601                           intcon2	equ	0xFF1
 16602                           intcon3	equ	0xFF0
 16603                           postinc0	equ	0xFEE
 16604                           wreg	equ	0xFE8
 16605                           postdec1	equ	0xFE5
 16606                           fsr1l	equ	0xFE1
 16607                           indf2	equ	0xFDF
 16608                           postinc2	equ	0xFDE
 16609                           postdec2	equ	0xFDD
 16610                           fsr2h	equ	0xFDA
 16611                           fsr2l	equ	0xFD9
 16612                           status	equ	0xFD8
 16613                           
 16614 ;; *************** function _initServos *****************
 16615 ;; Defined at:
 16616 ;;		line 486 in file "sort.c"
 16617 ;; Parameters:    Size  Location     Type
 16618 ;;		None
 16619 ;; Auto vars:     Size  Location     Type
 16620 ;;		None
 16621 ;; Return value:  Size  Location     Type
 16622 ;;                  1    wreg      void 
 16623 ;; Registers used:
 16624 ;;		wreg, status,2, status,0, cstack
 16625 ;; Tracked objects:
 16626 ;;		On entry : 0/0
 16627 ;;		On exit  : 0/0
 16628 ;;		Unchanged: 0/0
 16629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16632 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16633 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16634 ;;Total ram usage:        1 bytes
 16635 ;; Hardware stack levels used:    1
 16636 ;; Hardware stack levels required when called:    8
 16637 ;; This function calls:
 16638 ;;		_updateServoPosition
 16639 ;; This function is called by:
 16640 ;;		_Loading
 16641 ;;		_BothServos
 16642 ;; This function uses a non-reentrant model
 16643 ;;
 16644                           
 16645                           	psect	text52
 16646  004E30                     __ptext52:
 16647                           	opt stack 0
 16648  004E30                     _initServos:
 16649                           	opt stack 20
 16650                           
 16651                           ;sort.c: 488: updateServoPosition(1200, 1);
 16652                           
 16653                           ;incstack = 0
 16654  004E30  0E04               	movlw	4
 16655  004E32  0100               	movlb	0	; () banked
 16656  004E34  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16657  004E36  0EB0               	movlw	176
 16658  004E38  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16659  004E3A  0E00               	movlw	0
 16660  004E3C  0100               	movlb	0	; () banked
 16661  004E3E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16662  004E40  0E01               	movlw	1
 16663  004E42  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16664  004E44  ECD9  F026         	call	_updateServoPosition	;wreg free
 16665                           
 16666                           ;sort.c: 489: updateServoPosition(1050, 3);
 16667  004E48  0E04               	movlw	4
 16668  004E4A  0100               	movlb	0	; () banked
 16669  004E4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16670  004E4E  0E1A               	movlw	26
 16671  004E50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16672  004E52  0E00               	movlw	0
 16673  004E54  0100               	movlb	0	; () banked
 16674  004E56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16675  004E58  0E03               	movlw	3
 16676  004E5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16677  004E5C  ECD9  F026         	call	_updateServoPosition	;wreg free
 16678                           
 16679                           ;sort.c: 490: TMR1ON = 1;
 16680  004E60  80CD               	bsf	4045,0,c	;volatile
 16681                           
 16682                           ;sort.c: 491: was_low_1 = 0;
 16683  004E62  0E00               	movlw	0
 16684  004E64  6E78               	movwf	_was_low_1+1,c	;volatile
 16685  004E66  0E00               	movlw	0
 16686  004E68  6E77               	movwf	_was_low_1,c	;volatile
 16687                           
 16688                           ;sort.c: 493: _delay((unsigned long)((5)*(32000000/4000.0)));
 16689  004E6A  0E34               	movlw	52
 16690  004E6C  0100               	movlb	0	; () banked
 16691  004E6E  6F88               	movwf	??_initServos& (0+255),b
 16692  004E70  0EF1               	movlw	241
 16693  004E72                     u11157:
 16694  004E72  2EE8               	decfsz	wreg,f,c
 16695  004E74  D7FE               	bra	u11157
 16696  004E76  2F88               	decfsz	??_initServos& (0+255),f,b
 16697  004E78  D7FC               	bra	u11157
 16698  004E7A  D000               	nop2	
 16699                           
 16700                           ;sort.c: 495: TMR3ON = 1;
 16701  004E7C  80B1               	bsf	4017,0,c	;volatile
 16702                           
 16703                           ;sort.c: 496: was_low_3 = 0;
 16704  004E7E  0E00               	movlw	0
 16705  004E80  6E7C               	movwf	_was_low_3+1,c	;volatile
 16706  004E82  0E00               	movlw	0
 16707  004E84  6E7B               	movwf	_was_low_3,c	;volatile
 16708                           
 16709                           ;sort.c: 499: _delay((unsigned long)((1)*(32000000/4000.0)));
 16710  004E86  0E0B               	movlw	11
 16711  004E88  0100               	movlb	0	; () banked
 16712  004E8A  6F88               	movwf	??_initServos& (0+255),b
 16713  004E8C  0E62               	movlw	98
 16714  004E8E                     u11167:
 16715  004E8E  2EE8               	decfsz	wreg,f,c
 16716  004E90  D7FE               	bra	u11167
 16717  004E92  2F88               	decfsz	??_initServos& (0+255),f,b
 16718  004E94  D7FC               	bra	u11167
 16719  004E96  F000               	nop	
 16720                           
 16721                           ;sort.c: 500: LATBbits.LATB3 = 0;
 16722  004E98  968A               	bcf	3978,3,c	;volatile
 16723                           
 16724                           ;sort.c: 501: TMR2ON = 1;
 16725  004E9A  84CA               	bsf	4042,2,c	;volatile
 16726                           
 16727                           ;sort.c: 502: was_low_2 = 0;
 16728  004E9C  0E00               	movlw	0
 16729  004E9E  6E7A               	movwf	_was_low_2+1,c	;volatile
 16730  004EA0  0E00               	movlw	0
 16731  004EA2  6E79               	movwf	_was_low_2,c	;volatile
 16732                           
 16733                           ;sort.c: 504: LATCbits.LATC0 = 1;
 16734  004EA4  808B               	bsf	3979,0,c	;volatile
 16735  004EA6  0012               	return		;funcret
 16736  004EA8                     __end_of_initServos:
 16737                           	opt stack 0
 16738                           tblptru	equ	0xFF8
 16739                           tblptrh	equ	0xFF7
 16740                           tblptrl	equ	0xFF6
 16741                           tablat	equ	0xFF5
 16742                           prodh	equ	0xFF4
 16743                           prodl	equ	0xFF3
 16744                           intcon	equ	0xFF2
 16745                           intcon2	equ	0xFF1
 16746                           intcon3	equ	0xFF0
 16747                           postinc0	equ	0xFEE
 16748                           wreg	equ	0xFE8
 16749                           postdec1	equ	0xFE5
 16750                           fsr1l	equ	0xFE1
 16751                           indf2	equ	0xFDF
 16752                           postinc2	equ	0xFDE
 16753                           postdec2	equ	0xFDD
 16754                           fsr2h	equ	0xFDA
 16755                           fsr2l	equ	0xFD9
 16756                           status	equ	0xFD8
 16757                           
 16758 ;; *************** function _updateServoPosition *****************
 16759 ;; Defined at:
 16760 ;;		line 580 in file "sort.c"
 16761 ;; Parameters:    Size  Location     Type
 16762 ;;  time_us         2    0[BANK0 ] int 
 16763 ;;  timer           2    2[BANK0 ] int 
 16764 ;; Auto vars:     Size  Location     Type
 16765 ;;  my_time         2    6[BANK0 ] unsigned int 
 16766 ;; Return value:  Size  Location     Type
 16767 ;;                  1    wreg      void 
 16768 ;; Registers used:
 16769 ;;		wreg, status,2, status,0
 16770 ;; Tracked objects:
 16771 ;;		On entry : 0/0
 16772 ;;		On exit  : 0/0
 16773 ;;		Unchanged: 0/0
 16774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16775 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16776 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16777 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16778 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16779 ;;Total ram usage:        8 bytes
 16780 ;; Hardware stack levels used:    1
 16781 ;; Hardware stack levels required when called:    7
 16782 ;; This function calls:
 16783 ;;		Nothing
 16784 ;; This function is called by:
 16785 ;;		_Distribution
 16786 ;;		_initServos
 16787 ;;		_actuatorTest
 16788 ;;		_BothServos
 16789 ;; This function uses a non-reentrant model
 16790 ;;
 16791                           
 16792                           	psect	text53
 16793  004DB2                     __ptext53:
 16794                           	opt stack 0
 16795  004DB2                     _updateServoPosition:
 16796                           	opt stack 20
 16797                           
 16798                           ;sort.c: 581: unsigned int my_time = 65535 - time_us;
 16799                           
 16800                           ;incstack = 0
 16801  004DB2  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 16802  004DB6  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 16803  004DBA  0100               	movlb	0	; () banked
 16804  004DBC  1F84               	comf	??_updateServoPosition& (0+255),f,b
 16805  004DBE  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 16806  004DC0  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 16807  004DC2  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 16808  004DC4  0EFF               	movlw	255
 16809  004DC6  0100               	movlb	0	; () banked
 16810  004DC8  2584               	addwf	??_updateServoPosition& (0+255),w,b
 16811  004DCA  0100               	movlb	0	; () banked
 16812  004DCC  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 16813  004DCE  0EFF               	movlw	255
 16814  004DD0  0100               	movlb	0	; () banked
 16815  004DD2  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 16816  004DD4  0100               	movlb	0	; () banked
 16817  004DD6  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 16818                           
 16819                           ;sort.c: 582: switch(timer){
 16820  004DD8  D019               	goto	l6861
 16821  004DDA                     l6855:
 16822                           
 16823                           ; BSR set to: 0
 16824                           ;sort.c: 584: servoTimes[0] = my_time >> 8;
 16825  004DDA  0100               	movlb	0	; () banked
 16826  004DDC  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 16827  004DDE  6E59               	movwf	_servoTimes,c
 16828  004DE0  6A5A               	clrf	_servoTimes+1,c
 16829                           
 16830                           ;sort.c: 585: servoTimes[1] = my_time & 0xFF;
 16831  004DE2  0100               	movlb	0	; () banked
 16832  004DE4  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 16833  004DE6  6E5B               	movwf	_servoTimes+2,c
 16834  004DE8  6A5C               	clrf	_servoTimes+3,c
 16835                           
 16836                           ; BSR set to: 0
 16837                           ;sort.c: 587: pan_servo_state = time_us;
 16838  004DEA  C080  F06B         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 16839  004DEE  C081  F06C         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 16840  004DF2                     l930:
 16841                           
 16842                           ; BSR set to: 0
 16843                           ;sort.c: 589: servoTimes[2] = my_time >> 8;
 16844  004DF2  0100               	movlb	0	; () banked
 16845  004DF4  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 16846  004DF6  6E5D               	movwf	_servoTimes+4,c
 16847  004DF8  6A5E               	clrf	_servoTimes+5,c
 16848                           
 16849                           ;sort.c: 590: servoTimes[3] = my_time & 0xFF;
 16850  004DFA  0100               	movlb	0	; () banked
 16851  004DFC  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 16852  004DFE  6E5F               	movwf	_servoTimes+6,c
 16853  004E00  6A60               	clrf	_servoTimes+7,c
 16854                           
 16855                           ; BSR set to: 0
 16856                           ;sort.c: 592: tilt_servo_state = time_us;
 16857  004E02  C080  F071         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 16858  004E06  C081  F072         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 16859                           
 16860                           ;sort.c: 593: }
 16861  004E0A  0012               	return	
 16862  004E0C                     l6861:
 16863                           
 16864                           ; BSR set to: 0
 16865  004E0C  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 16866  004E10  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 16867                           
 16868                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16869                           ; Switch size 1, requested type "space"
 16870                           ; Number of cases is 1, Range of values is 0 to 0
 16871                           ; switch strategies available:
 16872                           ; Name         Instructions Cycles
 16873                           ; simple_byte            4     3 (average)
 16874                           ;	Chosen strategy is simple_byte
 16875  004E14  0100               	movlb	0	; () banked
 16876  004E16  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 16877  004E18  0A00               	xorlw	0	; case 0
 16878  004E1A  A4D8               	btfss	status,2,c
 16879  004E1C  0012               	return	
 16880                           
 16881                           ; BSR set to: 0
 16882                           ; Switch size 1, requested type "space"
 16883                           ; Number of cases is 2, Range of values is 1 to 3
 16884                           ; switch strategies available:
 16885                           ; Name         Instructions Cycles
 16886                           ; simple_byte            7     4 (average)
 16887                           ;	Chosen strategy is simple_byte
 16888  004E1E  0100               	movlb	0	; () banked
 16889  004E20  5184               	movf	??_updateServoPosition& (0+255),w,b
 16890  004E22  0A01               	xorlw	1	; case 1
 16891  004E24  B4D8               	btfsc	status,2,c
 16892  004E26  D7D9               	goto	l6855
 16893  004E28  0A02               	xorlw	2	; case 3
 16894  004E2A  A4D8               	btfss	status,2,c
 16895  004E2C  0012               	return	
 16896  004E2E  D7E1               	goto	l930
 16897  004E30                     __end_of_updateServoPosition:
 16898                           	opt stack 0
 16899                           tblptru	equ	0xFF8
 16900                           tblptrh	equ	0xFF7
 16901                           tblptrl	equ	0xFF6
 16902                           tablat	equ	0xFF5
 16903                           prodh	equ	0xFF4
 16904                           prodl	equ	0xFF3
 16905                           intcon	equ	0xFF2
 16906                           intcon2	equ	0xFF1
 16907                           intcon3	equ	0xFF0
 16908                           postinc0	equ	0xFEE
 16909                           wreg	equ	0xFE8
 16910                           postdec1	equ	0xFE5
 16911                           fsr1l	equ	0xFE1
 16912                           indf2	equ	0xFDF
 16913                           postinc2	equ	0xFDE
 16914                           postdec2	equ	0xFDD
 16915                           fsr2h	equ	0xFDA
 16916                           fsr2l	equ	0xFD9
 16917                           status	equ	0xFD8
 16918                           
 16919 ;; *************** function _BlockerTest *****************
 16920 ;; Defined at:
 16921 ;;		line 581 in file "Test.c"
 16922 ;; Parameters:    Size  Location     Type
 16923 ;;		None
 16924 ;; Auto vars:     Size  Location     Type
 16925 ;;  i               2   45[BANK0 ] int 
 16926 ;;  cond_flag       2   51[BANK0 ] int 
 16927 ;;  cam_flag        2   49[BANK0 ] int 
 16928 ;;  res             2   47[BANK0 ] int 
 16929 ;; Return value:  Size  Location     Type
 16930 ;;                  1    wreg      void 
 16931 ;; Registers used:
 16932 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16933 ;; Tracked objects:
 16934 ;;		On entry : 0/0
 16935 ;;		On exit  : 0/0
 16936 ;;		Unchanged: 0/0
 16937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16939 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16940 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16941 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16942 ;;Total ram usage:       10 bytes
 16943 ;; Hardware stack levels used:    1
 16944 ;; Hardware stack levels required when called:   10
 16945 ;; This function calls:
 16946 ;;		_lcdInst
 16947 ;;		_printf
 16948 ;;		_readADC
 16949 ;; This function is called by:
 16950 ;;		_Test
 16951 ;; This function uses a non-reentrant model
 16952 ;;
 16953                           
 16954                           	psect	text54
 16955  003D1E                     __ptext54:
 16956                           	opt stack 0
 16957  003D1E                     _BlockerTest:
 16958                           	opt stack 19
 16959                           
 16960                           ;Test.c: 582: readADC(2);
 16961                           
 16962                           ; BSR set to: 0
 16963                           ;incstack = 0
 16964  003D1E  0E02               	movlw	2
 16965  003D20  ECA1  F02C         	call	_readADC
 16966                           
 16967                           ;Test.c: 583: int res = ADRESH<<8 | ADRESL;
 16968  003D24  50C3               	movf	4035,w,c	;volatile
 16969  003D26  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 16970  003D2A  0100               	movlb	0	; () banked
 16971  003D2C  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 16972  003D2E  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 16973  003D32  0100               	movlb	0	; () banked
 16974  003D34  6BAB               	clrf	??_BlockerTest& (0+255),b
 16975  003D36  0100               	movlb	0	; () banked
 16976  003D38  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 16977  003D3A  0100               	movlb	0	; () banked
 16978  003D3C  6FAF               	movwf	BlockerTest@res& (0+255),b
 16979  003D3E  0100               	movlb	0	; () banked
 16980  003D40  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 16981  003D42  0100               	movlb	0	; () banked
 16982  003D44  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 16983                           
 16984                           ; BSR set to: 0
 16985                           ;Test.c: 585: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16986  003D46  0E01               	movlw	1
 16987  003D48  ECA8  F02D         	call	_lcdInst
 16988  003D4C  0E68               	movlw	104
 16989  003D4E  0100               	movlb	0	; () banked
 16990  003D50  6FAB               	movwf	??_BlockerTest& (0+255),b
 16991  003D52  0EE4               	movlw	228
 16992  003D54                     u11177:
 16993  003D54  2EE8               	decfsz	wreg,f,c
 16994  003D56  D7FE               	bra	u11177
 16995  003D58  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 16996  003D5A  D7FC               	bra	u11177
 16997  003D5C  F000               	nop	
 16998  003D5E  0E80               	movlw	128
 16999  003D60  ECA8  F02D         	call	_lcdInst
 17000                           
 17001                           ;Test.c: 586: printf("D:RET|2:C %d  ", res);
 17002  003D64  0E6E               	movlw	low STR_122
 17003  003D66  0100               	movlb	0	; () banked
 17004  003D68  6F8E               	movwf	printf@f& (0+255),b
 17005  003D6A  0EFE               	movlw	high STR_122
 17006  003D6C  0100               	movlb	0	; () banked
 17007  003D6E  6F8F               	movwf	(printf@f+1)& (0+255),b
 17008  003D70  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17009  003D74  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17010  003D78  ECFE  F00D         	call	_printf	;wreg free
 17011                           
 17012                           ;Test.c: 587: lcdInst(0b11000000);;
 17013  003D7C  0EC0               	movlw	192
 17014  003D7E  ECA8  F02D         	call	_lcdInst
 17015                           
 17016                           ;Test.c: 588: printf("OTHER: CAM TOGGLE");
 17017  003D82  0E1D               	movlw	low STR_123
 17018  003D84  0100               	movlb	0	; () banked
 17019  003D86  6F8E               	movwf	printf@f& (0+255),b
 17020  003D88  0EFB               	movlw	high STR_123
 17021  003D8A  0100               	movlb	0	; () banked
 17022  003D8C  6F8F               	movwf	(printf@f+1)& (0+255),b
 17023  003D8E  ECFE  F00D         	call	_printf	;wreg free
 17024                           
 17025                           ;Test.c: 589: int cam_flag = 1;
 17026  003D92  0E00               	movlw	0
 17027  003D94  0100               	movlb	0	; () banked
 17028  003D96  6FB2               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 17029  003D98  0E01               	movlw	1
 17030  003D9A  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17031                           
 17032                           ; BSR set to: 0
 17033                           ;Test.c: 590: int cond_flag = 0;
 17034  003D9C  0E00               	movlw	0
 17035  003D9E  0100               	movlb	0	; () banked
 17036  003DA0  6FB4               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 17037  003DA2  0E00               	movlw	0
 17038  003DA4  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17039                           
 17040                           ; BSR set to: 0
 17041                           ;Test.c: 593: while(PORTBbits.RB1 == 0){
 17042                           
 17043                           ;Test.c: 592: while(1){
 17044  003DA6  D023               	goto	l9109
 17045  003DA8                     l9101:
 17046                           
 17047                           ;Test.c: 594: readADC(2);
 17048  003DA8  0E02               	movlw	2
 17049  003DAA  ECA1  F02C         	call	_readADC
 17050                           
 17051                           ;Test.c: 595: res = ADRESH<<8 | ADRESL;
 17052  003DAE  50C3               	movf	4035,w,c	;volatile
 17053  003DB0  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17054  003DB4  0100               	movlb	0	; () banked
 17055  003DB6  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17056  003DB8  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17057  003DBC  0100               	movlb	0	; () banked
 17058  003DBE  6BAB               	clrf	??_BlockerTest& (0+255),b
 17059  003DC0  0100               	movlb	0	; () banked
 17060  003DC2  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17061  003DC4  0100               	movlb	0	; () banked
 17062  003DC6  6FAF               	movwf	BlockerTest@res& (0+255),b
 17063  003DC8  0100               	movlb	0	; () banked
 17064  003DCA  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17065  003DCC  0100               	movlb	0	; () banked
 17066  003DCE  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17067                           
 17068                           ; BSR set to: 0
 17069                           ;Test.c: 596: lcdInst(0b10000000);;
 17070  003DD0  0E80               	movlw	128
 17071  003DD2  ECA8  F02D         	call	_lcdInst
 17072                           
 17073                           ;Test.c: 597: printf("D:RET|2:C %d  ", res);
 17074  003DD6  0E6E               	movlw	low STR_122
 17075  003DD8  0100               	movlb	0	; () banked
 17076  003DDA  6F8E               	movwf	printf@f& (0+255),b
 17077  003DDC  0EFE               	movlw	high STR_122
 17078  003DDE  0100               	movlb	0	; () banked
 17079  003DE0  6F8F               	movwf	(printf@f+1)& (0+255),b
 17080  003DE2  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17081  003DE6  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17082  003DEA  ECFE  F00D         	call	_printf	;wreg free
 17083  003DEE                     l9109:
 17084  003DEE  A281               	btfss	3969,1,c	;volatile
 17085  003DF0  D7DB               	goto	l9101
 17086                           
 17087                           ;Test.c: 598: }
 17088                           ;Test.c: 599: if(PORTB >> 4 == 0b1111){
 17089  003DF2  3881               	swapf	3969,w,c	;volatile
 17090  003DF4  0B0F               	andlw	15
 17091  003DF6  0A0F               	xorlw	15
 17092  003DF8  B4D8               	btfsc	status,2,c
 17093  003DFA  0012               	return	
 17094                           
 17095                           ;Test.c: 602: else if(PORTB >> 4 == 0b0001){
 17096                           
 17097                           ;Test.c: 601: }
 17098                           
 17099                           ;Test.c: 600: break;
 17100  003DFC  3881               	swapf	3969,w,c	;volatile
 17101  003DFE  0B0F               	andlw	15
 17102  003E00  06E8               	decf	wreg,f,c
 17103  003E02  A4D8               	btfss	status,2,c
 17104  003E04  D016               	goto	l9127
 17105                           
 17106                           ;Test.c: 603: if(cond_flag){
 17107  003E06  0100               	movlb	0	; () banked
 17108  003E08  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17109  003E0A  0100               	movlb	0	; () banked
 17110  003E0C  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17111  003E0E  B4D8               	btfsc	status,2,c
 17112  003E10  D007               	goto	l1450
 17113                           
 17114                           ; BSR set to: 0
 17115                           ;Test.c: 604: LATAbits.LATA3 = 1;
 17116  003E12  8689               	bsf	3977,3,c	;volatile
 17117  003E14  D006               	goto	l9125
 17118  003E16                     u8231:
 17119  003E16  0E01               	movlw	1
 17120  003E18                     u8240:
 17121  003E18  0100               	movlb	0	; () banked
 17122  003E1A  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17123  003E1C  6BB4               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 17124                           
 17125                           ;Test.c: 606: }
 17126  003E1E  D05F               	goto	l9155
 17127  003E20                     l1450:
 17128                           
 17129                           ; BSR set to: 0
 17130                           ;Test.c: 607: else{
 17131                           ;Test.c: 608: LATAbits.LATA3 = 0;
 17132  003E20  9689               	bcf	3977,3,c	;volatile
 17133  003E22                     l9125:
 17134                           
 17135                           ; BSR set to: 0
 17136                           ;Test.c: 609: cond_flag = !cond_flag;
 17137  003E22  0100               	movlb	0	; () banked
 17138  003E24  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17139  003E26  0100               	movlb	0	; () banked
 17140  003E28  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17141  003E2A  B4D8               	btfsc	status,2,c
 17142  003E2C  D7F4               	goto	u8231
 17143  003E2E  0E00               	movlw	0
 17144  003E30  D7F3               	goto	u8240
 17145  003E32                     l9127:
 17146                           
 17147                           ;Test.c: 612: else{
 17148                           ;Test.c: 613: if(cam_flag){
 17149  003E32  0100               	movlb	0	; () banked
 17150  003E34  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17151  003E36  0100               	movlb	0	; () banked
 17152  003E38  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17153  003E3A  B4D8               	btfsc	status,2,c
 17154  003E3C  D007               	goto	l9133
 17155                           
 17156                           ; BSR set to: 0
 17157                           ;Test.c: 614: LATCbits.LATC0 = 1;
 17158  003E3E  808B               	bsf	3979,0,c	;volatile
 17159  003E40  D023               	goto	l9145
 17160  003E42                     u8281:
 17161  003E42  0E01               	movlw	1
 17162  003E44                     u8290:
 17163  003E44  0100               	movlb	0	; () banked
 17164  003E46  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17165  003E48  6BB2               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 17166                           
 17167                           ;Test.c: 616: }
 17168  003E4A  D049               	goto	l9155
 17169  003E4C                     l9133:
 17170                           
 17171                           ; BSR set to: 0
 17172                           ;Test.c: 617: else{
 17173                           ;Test.c: 618: for(int i=0;i<5000;i++)
 17174  003E4C  0E00               	movlw	0
 17175  003E4E  0100               	movlb	0	; () banked
 17176  003E50  6FAE               	movwf	(BlockerTest@i+1)& (0+255),b
 17177  003E52  0E00               	movlw	0
 17178  003E54  6FAD               	movwf	BlockerTest@i& (0+255),b
 17179  003E56                     l9135:
 17180                           
 17181                           ; BSR set to: 0
 17182  003E56  0100               	movlb	0	; () banked
 17183  003E58  BFAE               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 17184  003E5A  D008               	goto	l1455
 17185  003E5C  0E88               	movlw	136
 17186  003E5E  0100               	movlb	0	; () banked
 17187  003E60  5DAD               	subwf	BlockerTest@i& (0+255),w,b
 17188  003E62  0E13               	movlw	19
 17189  003E64  0100               	movlb	0	; () banked
 17190  003E66  59AE               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 17191  003E68  B0D8               	btfsc	status,0,c
 17192  003E6A  D00D               	goto	l1456
 17193  003E6C                     l1455:
 17194                           
 17195                           ; BSR set to: 0
 17196                           ;Test.c: 619: {
 17197                           ;Test.c: 620: LATCbits.LATC0 = 1;
 17198  003E6C  808B               	bsf	3979,0,c	;volatile
 17199                           
 17200                           ; BSR set to: 0
 17201                           ;Test.c: 621: _delay((unsigned long)((10)*(32000000/4000000.0)));
 17202  003E6E  0E1A               	movlw	26
 17203  003E70                     u11187:
 17204  003E70  2EE8               	decfsz	wreg,f,c
 17205  003E72  D7FE               	bra	u11187
 17206  003E74  D000               	nop2	
 17207                           
 17208                           ;Test.c: 622: LATCbits.LATC0 = 0;
 17209  003E76  908B               	bcf	3979,0,c	;volatile
 17210                           
 17211                           ;Test.c: 623: _delay((unsigned long)((90)*(32000000/4000000.0)));
 17212  003E78  0EF0               	movlw	240
 17213  003E7A                     u11197:
 17214  003E7A  2EE8               	decfsz	wreg,f,c
 17215  003E7C  D7FE               	bra	u11197
 17216  003E7E  0100               	movlb	0	; () banked
 17217  003E80  4BAD               	infsnz	BlockerTest@i& (0+255),f,b
 17218  003E82  2BAE               	incf	(BlockerTest@i+1)& (0+255),f,b
 17219  003E84  D7E8               	goto	l9135
 17220  003E86                     l1456:
 17221                           
 17222                           ; BSR set to: 0
 17223                           ;Test.c: 624: }
 17224                           ;Test.c: 625: LATCbits.LATC0 = 0;
 17225  003E86  908B               	bcf	3979,0,c	;volatile
 17226  003E88                     l9145:
 17227                           
 17228                           ; BSR set to: 0
 17229                           ;Test.c: 626: cam_flag = !cam_flag;
 17230  003E88  0100               	movlb	0	; () banked
 17231  003E8A  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17232  003E8C  0100               	movlb	0	; () banked
 17233  003E8E  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17234  003E90  B4D8               	btfsc	status,2,c
 17235  003E92  D7D7               	goto	u8281
 17236  003E94  0E00               	movlw	0
 17237  003E96  D7D6               	goto	u8290
 17238  003E98                     l9147:
 17239                           
 17240                           ;Test.c: 631: readADC(2);
 17241  003E98  0E02               	movlw	2
 17242  003E9A  ECA1  F02C         	call	_readADC
 17243                           
 17244                           ;Test.c: 632: res = ADRESH<<8 | ADRESL;
 17245  003E9E  50C3               	movf	4035,w,c	;volatile
 17246  003EA0  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17247  003EA4  0100               	movlb	0	; () banked
 17248  003EA6  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17249  003EA8  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17250  003EAC  0100               	movlb	0	; () banked
 17251  003EAE  6BAB               	clrf	??_BlockerTest& (0+255),b
 17252  003EB0  0100               	movlb	0	; () banked
 17253  003EB2  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17254  003EB4  0100               	movlb	0	; () banked
 17255  003EB6  6FAF               	movwf	BlockerTest@res& (0+255),b
 17256  003EB8  0100               	movlb	0	; () banked
 17257  003EBA  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17258  003EBC  0100               	movlb	0	; () banked
 17259  003EBE  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17260                           
 17261                           ; BSR set to: 0
 17262                           ;Test.c: 633: lcdInst(0b10000000);;
 17263  003EC0  0E80               	movlw	128
 17264  003EC2  ECA8  F02D         	call	_lcdInst
 17265                           
 17266                           ;Test.c: 634: printf("D:RET|2:C %d  ", res);
 17267  003EC6  0E6E               	movlw	low STR_122
 17268  003EC8  0100               	movlb	0	; () banked
 17269  003ECA  6F8E               	movwf	printf@f& (0+255),b
 17270  003ECC  0EFE               	movlw	high STR_122
 17271  003ECE  0100               	movlb	0	; () banked
 17272  003ED0  6F8F               	movwf	(printf@f+1)& (0+255),b
 17273  003ED2  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17274  003ED6  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17275  003EDA  ECFE  F00D         	call	_printf	;wreg free
 17276  003EDE                     l9155:
 17277  003EDE  A281               	btfss	3969,1,c	;volatile
 17278  003EE0  D786               	goto	l9109
 17279  003EE2  D7DA               	goto	l9147
 17280  003EE4                     __end_of_BlockerTest:
 17281                           	opt stack 0
 17282                           tblptru	equ	0xFF8
 17283                           tblptrh	equ	0xFF7
 17284                           tblptrl	equ	0xFF6
 17285                           tablat	equ	0xFF5
 17286                           prodh	equ	0xFF4
 17287                           prodl	equ	0xFF3
 17288                           intcon	equ	0xFF2
 17289                           intcon2	equ	0xFF1
 17290                           intcon3	equ	0xFF0
 17291                           postinc0	equ	0xFEE
 17292                           wreg	equ	0xFE8
 17293                           postdec1	equ	0xFE5
 17294                           fsr1l	equ	0xFE1
 17295                           indf2	equ	0xFDF
 17296                           postinc2	equ	0xFDE
 17297                           postdec2	equ	0xFDD
 17298                           fsr2h	equ	0xFDA
 17299                           fsr2l	equ	0xFD9
 17300                           status	equ	0xFD8
 17301                           
 17302 ;; *************** function _readADC *****************
 17303 ;; Defined at:
 17304 ;;		line 15 in file "ADCFunctionality.c"
 17305 ;; Parameters:    Size  Location     Type
 17306 ;;  channel         1    wreg     unsigned char 
 17307 ;; Auto vars:     Size  Location     Type
 17308 ;;  channel         1    1[BANK0 ] unsigned char 
 17309 ;; Return value:  Size  Location     Type
 17310 ;;                  1    wreg      void 
 17311 ;; Registers used:
 17312 ;;		wreg, status,2, status,0, cstack
 17313 ;; Tracked objects:
 17314 ;;		On entry : 0/0
 17315 ;;		On exit  : 0/0
 17316 ;;		Unchanged: 0/0
 17317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17319 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17320 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17321 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17322 ;;Total ram usage:        2 bytes
 17323 ;; Hardware stack levels used:    1
 17324 ;; Hardware stack levels required when called:    7
 17325 ;; This function calls:
 17326 ;;		Nothing
 17327 ;; This function is called by:
 17328 ;;		_readIR
 17329 ;;		_readMAG
 17330 ;;		_readCOND
 17331 ;;		_sensorTest
 17332 ;;		_PlatformTest
 17333 ;;		_BlockerTest
 17334 ;; This function uses a non-reentrant model
 17335 ;;
 17336                           
 17337                           	psect	text55
 17338  005942                     __ptext55:
 17339                           	opt stack 0
 17340  005942                     _readADC:
 17341                           	opt stack 20
 17342                           
 17343                           ;incstack = 0
 17344                           ;readADC@channel stored from wreg
 17345  005942  0100               	movlb	0	; () banked
 17346  005944  6F81               	movwf	readADC@channel& (0+255),b
 17347                           
 17348                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 17349  005946  0100               	movlb	0	; () banked
 17350  005948  4581               	rlncf	readADC@channel& (0+255),w,b
 17351  00594A  46E8               	rlncf	wreg,f,c
 17352  00594C  0BFC               	andlw	252
 17353  00594E  6EC2               	movwf	4034,c	;volatile
 17354                           
 17355                           ; BSR set to: 0
 17356                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 17357  005950  80C2               	bsf	4034,0,c	;volatile
 17358                           
 17359                           ; BSR set to: 0
 17360                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 17361  005952  82C2               	bsf	4034,1,c	;volatile
 17362                           
 17363                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 17364  005954  D009               	goto	l6493
 17365  005956                     l6491:
 17366  005956  0E34               	movlw	52
 17367  005958  0100               	movlb	0	; () banked
 17368  00595A  6F80               	movwf	??_readADC& (0+255),b
 17369  00595C  0EF1               	movlw	241
 17370  00595E                     u11207:
 17371  00595E  2EE8               	decfsz	wreg,f,c
 17372  005960  D7FE               	bra	u11207
 17373  005962  2F80               	decfsz	??_readADC& (0+255),f,b
 17374  005964  D7FC               	bra	u11207
 17375  005966  D000               	nop2	
 17376  005968                     l6493:
 17377  005968  A2C2               	btfss	4034,1,c	;volatile
 17378  00596A  0012               	return	
 17379  00596C  D7F4               	goto	l6491
 17380  00596E                     __end_of_readADC:
 17381                           	opt stack 0
 17382                           tblptru	equ	0xFF8
 17383                           tblptrh	equ	0xFF7
 17384                           tblptrl	equ	0xFF6
 17385                           tablat	equ	0xFF5
 17386                           prodh	equ	0xFF4
 17387                           prodl	equ	0xFF3
 17388                           intcon	equ	0xFF2
 17389                           intcon2	equ	0xFF1
 17390                           intcon3	equ	0xFF0
 17391                           postinc0	equ	0xFEE
 17392                           wreg	equ	0xFE8
 17393                           postdec1	equ	0xFE5
 17394                           fsr1l	equ	0xFE1
 17395                           indf2	equ	0xFDF
 17396                           postinc2	equ	0xFDE
 17397                           postdec2	equ	0xFDD
 17398                           fsr2h	equ	0xFDA
 17399                           fsr2l	equ	0xFD9
 17400                           status	equ	0xFD8
 17401                           
 17402 ;; *************** function _printf *****************
 17403 ;; Defined at:
 17404 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 17405 ;; Parameters:    Size  Location     Type
 17406 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 17407 ;;		 -> STR_129(18), STR_128(18), STR_127(17), STR_126(17), 
 17408 ;;		 -> STR_125(15), STR_124(15), STR_123(18), STR_122(15), 
 17409 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 17410 ;;		 -> STR_117(17), STR_116(17), STR_115(17), STR_114(17), 
 17411 ;;		 -> STR_113(17), STR_112(17), STR_111(18), STR_110(17), 
 17412 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 17413 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 17414 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 17415 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 17416 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 17417 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 17418 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 17419 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 17420 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 17421 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 17422 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 17423 ;;		 -> STR_65(16), STR_64(16), STR_63(24), STR_50(17), 
 17424 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 17425 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 17426 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 17427 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 17428 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 17429 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 17430 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 17431 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 17432 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 17433 ;; Auto vars:     Size  Location     Type
 17434 ;;  tmpval          4    0        struct .
 17435 ;;  width           2   41[BANK0 ] int 
 17436 ;;  val             2   37[BANK0 ] unsigned int 
 17437 ;;  len             2   35[BANK0 ] unsigned int 
 17438 ;;  ap              2   33[BANK0 ] PTR void [1]
 17439 ;;		 -> ?i2_printf(2), ?_printf(2), 
 17440 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 17441 ;;		 -> STR_130(7), count_total(2), printRTC@month(4), UI@month(4), 
 17442 ;;  c               1   40[BANK0 ] char 
 17443 ;;  flag            1   39[BANK0 ] unsigned char 
 17444 ;;  prec            1   30[BANK0 ] char 
 17445 ;; Return value:  Size  Location     Type
 17446 ;;                  2   14[BANK0 ] int 
 17447 ;; Registers used:
 17448 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17449 ;; Tracked objects:
 17450 ;;		On entry : 0/0
 17451 ;;		On exit  : 0/0
 17452 ;;		Unchanged: 0/0
 17453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17454 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17455 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17456 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17457 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17458 ;;Total ram usage:       29 bytes
 17459 ;; Hardware stack levels used:    1
 17460 ;; Hardware stack levels required when called:    9
 17461 ;; This function calls:
 17462 ;;		___lwdiv
 17463 ;;		___lwmod
 17464 ;;		___wmul
 17465 ;;		_isdigit
 17466 ;;		_putch
 17467 ;; This function is called by:
 17468 ;;		_UI
 17469 ;;		_change_state_to_menu_start
 17470 ;;		_change_state_to_menu_12
 17471 ;;		_change_state_to_menu_22
 17472 ;;		_printRTC
 17473 ;;		_EEPROM_write
 17474 ;;		_Test
 17475 ;;		_algorithmTest
 17476 ;;		_sensorTest
 17477 ;;		_actuatorTest
 17478 ;;		_BothServos
 17479 ;;		_PortTestDC
 17480 ;;		_PlatformTest
 17481 ;;		_SpeedTest
 17482 ;;		_BlockerTest
 17483 ;;		_arm
 17484 ;;		_PortTestPusher
 17485 ;;		_ToggleTestA5
 17486 ;; This function uses a non-reentrant model
 17487 ;;
 17488                           
 17489                           	psect	text56
 17490  001BFC                     __ptext56:
 17491                           	opt stack 0
 17492  001BFC                     _printf:
 17493                           	opt stack 18
 17494                           
 17495                           ;doprnt.c: 466: va_list ap;
 17496                           ;doprnt.c: 499: signed char c;
 17497                           ;doprnt.c: 501: int width;
 17498                           ;doprnt.c: 506: signed char prec;
 17499                           ;doprnt.c: 508: unsigned char flag;
 17500                           ;doprnt.c: 523: union {
 17501                           ;doprnt.c: 524: unsigned long vd;
 17502                           ;doprnt.c: 525: double integ;
 17503                           ;doprnt.c: 526: } tmpval;
 17504                           ;doprnt.c: 528: unsigned int val;
 17505                           ;doprnt.c: 529: unsigned len;
 17506                           ;doprnt.c: 530: const char * cp;
 17507                           ;doprnt.c: 533: *ap = __va_start();
 17508                           
 17509                           ;incstack = 0
 17510  001BFC  0E90               	movlw	low (?_printf+2)
 17511  001BFE  0100               	movlb	0	; () banked
 17512  001C00  6FA1               	movwf	printf@ap& (0+255),b
 17513  001C02  0E00               	movlw	high (?_printf+2)
 17514  001C04  0100               	movlb	0	; () banked
 17515  001C06  6FA2               	movwf	(printf@ap+1)& (0+255),b
 17516                           
 17517                           ;doprnt.c: 536: while(c = *f++) {
 17518  001C08  D205               	goto	l6815
 17519  001C0A                     l6685:
 17520                           
 17521                           ; BSR set to: 0
 17522                           ;doprnt.c: 538: if(c != '%')
 17523  001C0A  0E25               	movlw	37
 17524  001C0C  0100               	movlb	0	; () banked
 17525  001C0E  19A8               	xorwf	printf@c& (0+255),w,b
 17526  001C10  B4D8               	btfsc	status,2,c
 17527  001C12  D005               	goto	l6689
 17528                           
 17529                           ; BSR set to: 0
 17530                           ;doprnt.c: 540: {
 17531                           ;doprnt.c: 541: (putch(c) );
 17532  001C14  0100               	movlb	0	; () banked
 17533  001C16  51A8               	movf	printf@c& (0+255),w,b
 17534  001C18  ECA0  F02D         	call	_putch
 17535                           
 17536                           ;doprnt.c: 542: continue;
 17537  001C1C  D1FB               	goto	l6815
 17538  001C1E                     l6689:
 17539                           
 17540                           ;doprnt.c: 543: }
 17541                           ;doprnt.c: 546: width = 0;
 17542  001C1E  0E00               	movlw	0
 17543  001C20  0100               	movlb	0	; () banked
 17544  001C22  6FAA               	movwf	(printf@width+1)& (0+255),b
 17545  001C24  0E00               	movlw	0
 17546  001C26  6FA9               	movwf	printf@width& (0+255),b
 17547                           
 17548                           ;doprnt.c: 548: flag = 0;
 17549  001C28  0E00               	movlw	0
 17550  001C2A  0100               	movlb	0	; () banked
 17551  001C2C  6FA7               	movwf	printf@flag& (0+255),b
 17552                           
 17553                           ; BSR set to: 0
 17554                           ;doprnt.c: 551: switch(*f) {
 17555                           
 17556                           ;doprnt.c: 550: for(;;) {
 17557  001C2E  D005               	goto	l6695
 17558  001C30                     l6691:
 17559                           
 17560                           ;doprnt.c: 580: flag |= 0x04;
 17561  001C30  0100               	movlb	0	; () banked
 17562  001C32  85A7               	bsf	printf@flag& (0+255),2,b
 17563                           
 17564                           ;doprnt.c: 581: f++;
 17565  001C34  0100               	movlb	0	; () banked
 17566  001C36  4B8E               	infsnz	printf@f& (0+255),f,b
 17567  001C38  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17568  001C3A                     l6695:
 17569  001C3A  C08E  FFF6         	movff	printf@f,tblptrl
 17570  001C3E  C08F  FFF7         	movff	printf@f+1,tblptrh
 17571  001C42                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17572  001C42  6AF8               	clrf	tblptru,c
 17573  001C44                     	endif
 17574  001C44                     	if	0	;tblptru may be non-zero
 17575  001C44                     	endif
 17576  001C44  0008               	tblrd		*
 17577  001C46  50F5               	movf	tablat,w,c
 17578                           
 17579                           ; Switch size 1, requested type "space"
 17580                           ; Number of cases is 1, Range of values is 48 to 48
 17581                           ; switch strategies available:
 17582                           ; Name         Instructions Cycles
 17583                           ; simple_byte            4     3 (average)
 17584                           ;	Chosen strategy is simple_byte
 17585  001C48  0A30               	xorlw	48	; case 48
 17586  001C4A  B4D8               	btfsc	status,2,c
 17587  001C4C  D7F1               	goto	l6691
 17588                           
 17589                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 17590                           
 17591                           ;doprnt.c: 586: }
 17592                           
 17593                           ;doprnt.c: 585: break;
 17594  001C4E  C08E  FFF6         	movff	printf@f,tblptrl
 17595  001C52  C08F  FFF7         	movff	printf@f+1,tblptrh
 17596  001C56                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17597  001C56  6AF8               	clrf	tblptru,c
 17598  001C58                     	endif
 17599  001C58                     	if	0	;tblptru may be non-zero
 17600  001C58                     	endif
 17601  001C58  0008               	tblrd		*
 17602  001C5A  50F5               	movf	tablat,w,c
 17603  001C5C  ECB7  F02C         	call	_isdigit
 17604  001C60  A0D8               	btfss	status,0,c
 17605  001C62  D0D2               	goto	l6743
 17606                           
 17607                           ;doprnt.c: 598: width = 0;
 17608  001C64  0E00               	movlw	0
 17609  001C66  0100               	movlb	0	; () banked
 17610  001C68  6FAA               	movwf	(printf@width+1)& (0+255),b
 17611  001C6A  0E00               	movlw	0
 17612  001C6C  6FA9               	movwf	printf@width& (0+255),b
 17613  001C6E                     l6701:
 17614                           
 17615                           ;doprnt.c: 600: width *= 10;
 17616  001C6E  C0A9  F080         	movff	printf@width,___wmul@multiplier
 17617  001C72  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 17618  001C76  0E00               	movlw	0
 17619  001C78  0100               	movlb	0	; () banked
 17620  001C7A  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17621  001C7C  0E0A               	movlw	10
 17622  001C7E  6F82               	movwf	___wmul@multiplicand& (0+255),b
 17623  001C80  EC20  F02B         	call	___wmul	;wreg free
 17624  001C84  C080  F0A9         	movff	?___wmul,printf@width
 17625  001C88  C081  F0AA         	movff	?___wmul+1,printf@width+1
 17626                           
 17627                           ;doprnt.c: 601: width += *f++ - '0';
 17628  001C8C  0ED0               	movlw	208
 17629  001C8E  0100               	movlb	0	; () banked
 17630  001C90  6F9A               	movwf	??_printf& (0+255),b
 17631  001C92  0EFF               	movlw	255
 17632  001C94  0100               	movlb	0	; () banked
 17633  001C96  6F9B               	movwf	(??_printf+1)& (0+255),b
 17634  001C98  C08E  FFF6         	movff	printf@f,tblptrl
 17635  001C9C  C08F  FFF7         	movff	printf@f+1,tblptrh
 17636  001CA0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17637  001CA0  6AF8               	clrf	tblptru,c
 17638  001CA2                     	endif
 17639  001CA2                     	if	0	;tblptru may be non-zero
 17640  001CA2                     	endif
 17641  001CA2  0008               	tblrd		*
 17642  001CA4  50F5               	movf	tablat,w,c
 17643  001CA6  0100               	movlb	0	; () banked
 17644  001CA8  6F9C               	movwf	(??_printf+2)& (0+255),b
 17645  001CAA  6B9D               	clrf	(??_printf+3)& (0+255),b
 17646  001CAC  0100               	movlb	0	; () banked
 17647  001CAE  519A               	movf	??_printf& (0+255),w,b
 17648  001CB0  0100               	movlb	0	; () banked
 17649  001CB2  279C               	addwf	(??_printf+2)& (0+255),f,b
 17650  001CB4  0100               	movlb	0	; () banked
 17651  001CB6  519B               	movf	(??_printf+1)& (0+255),w,b
 17652  001CB8  0100               	movlb	0	; () banked
 17653  001CBA  239D               	addwfc	(??_printf+3)& (0+255),f,b
 17654  001CBC  0100               	movlb	0	; () banked
 17655  001CBE  519C               	movf	(??_printf+2)& (0+255),w,b
 17656  001CC0  0100               	movlb	0	; () banked
 17657  001CC2  27A9               	addwf	printf@width& (0+255),f,b
 17658  001CC4  0100               	movlb	0	; () banked
 17659  001CC6  519D               	movf	(??_printf+3)& (0+255),w,b
 17660  001CC8  0100               	movlb	0	; () banked
 17661  001CCA  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 17662                           
 17663                           ; BSR set to: 0
 17664  001CCC  0100               	movlb	0	; () banked
 17665  001CCE  4B8E               	infsnz	printf@f& (0+255),f,b
 17666  001CD0  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17667                           
 17668                           ; BSR set to: 0
 17669                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 17670  001CD2  C08E  FFF6         	movff	printf@f,tblptrl
 17671  001CD6  C08F  FFF7         	movff	printf@f+1,tblptrh
 17672  001CDA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17673  001CDA  6AF8               	clrf	tblptru,c
 17674  001CDC                     	endif
 17675  001CDC                     	if	0	;tblptru may be non-zero
 17676  001CDC                     	endif
 17677  001CDC  0008               	tblrd		*
 17678  001CDE  50F5               	movf	tablat,w,c
 17679  001CE0  ECB7  F02C         	call	_isdigit
 17680  001CE4  A0D8               	btfss	status,0,c
 17681  001CE6  D090               	goto	l6743
 17682  001CE8  D7C2               	goto	l6701
 17683  001CEA                     l6709:
 17684                           
 17685                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 17686  001CEA  C0A1  FFD9         	movff	printf@ap,fsr2l
 17687  001CEE  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17688  001CF2  CFDE F09F          	movff	postinc2,printf@cp
 17689  001CF6  CFDD F0A0          	movff	postdec2,printf@cp+1
 17690  001CFA  0E02               	movlw	2
 17691  001CFC  0100               	movlb	0	; () banked
 17692  001CFE  27A1               	addwf	printf@ap& (0+255),f,b
 17693  001D00  0E00               	movlw	0
 17694  001D02  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17695                           
 17696                           ; BSR set to: 0
 17697                           ;doprnt.c: 740: if(!cp)
 17698  001D04  0100               	movlb	0	; () banked
 17699  001D06  519F               	movf	printf@cp& (0+255),w,b
 17700  001D08  0100               	movlb	0	; () banked
 17701  001D0A  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 17702  001D0C  A4D8               	btfss	status,2,c
 17703  001D0E  D006               	goto	l6717
 17704                           
 17705                           ; BSR set to: 0
 17706                           ;doprnt.c: 741: cp = "(null)";
 17707  001D10  0EB6               	movlw	low STR_130
 17708  001D12  0100               	movlb	0	; () banked
 17709  001D14  6F9F               	movwf	printf@cp& (0+255),b
 17710  001D16  0EFF               	movlw	high STR_130
 17711  001D18  0100               	movlb	0	; () banked
 17712  001D1A  6FA0               	movwf	(printf@cp+1)& (0+255),b
 17713  001D1C                     l6717:
 17714                           
 17715                           ; BSR set to: 0
 17716                           ;doprnt.c: 745: len = 0;
 17717  001D1C  0E00               	movlw	0
 17718  001D1E  0100               	movlb	0	; () banked
 17719  001D20  6FA4               	movwf	(printf@len+1)& (0+255),b
 17720  001D22  0E00               	movlw	0
 17721  001D24  6FA3               	movwf	printf@len& (0+255),b
 17722                           
 17723                           ;doprnt.c: 746: while(cp[len])
 17724  001D26  D003               	goto	l6721
 17725  001D28                     l6719:
 17726                           
 17727                           ;doprnt.c: 747: len++;
 17728  001D28  0100               	movlb	0	; () banked
 17729  001D2A  4BA3               	infsnz	printf@len& (0+255),f,b
 17730  001D2C  2BA4               	incf	(printf@len+1)& (0+255),f,b
 17731  001D2E                     l6721:
 17732                           
 17733                           ; BSR set to: 0
 17734  001D2E  0100               	movlb	0	; () banked
 17735  001D30  51A3               	movf	printf@len& (0+255),w,b
 17736  001D32  0100               	movlb	0	; () banked
 17737  001D34  259F               	addwf	printf@cp& (0+255),w,b
 17738  001D36  0100               	movlb	0	; () banked
 17739  001D38  6F9A               	movwf	??_printf& (0+255),b
 17740  001D3A  0100               	movlb	0	; () banked
 17741  001D3C  51A4               	movf	(printf@len+1)& (0+255),w,b
 17742  001D3E  0100               	movlb	0	; () banked
 17743  001D40  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 17744  001D42  0100               	movlb	0	; () banked
 17745  001D44  6F9B               	movwf	(??_printf+1)& (0+255),b
 17746  001D46  C09A  FFF6         	movff	??_printf,tblptrl
 17747  001D4A  C09B  FFF7         	movff	??_printf+1,tblptrh
 17748  001D4E  0E00               	movlw	low (__mediumconst shr (0+16))
 17749  001D50  6EF8               	movwf	tblptru,c
 17750  001D52  0E0F               	movlw	(high __ramtop+-1)
 17751  001D54  64F7               	cpfsgt	tblptrh,c
 17752  001D56  D003               	bra	u5177
 17753  001D58  0008               	tblrd		*
 17754  001D5A  50F5               	movf	tablat,w,c
 17755  001D5C  D005               	bra	u5170
 17756  001D5E                     u5177:
 17757  001D5E  CFF6 FFE9          	movff	tblptrl,fsr0l
 17758  001D62  CFF7 FFEA          	movff	tblptrh,fsr0h
 17759  001D66  50EF               	movf	indf0,w,c
 17760  001D68                     u5170:
 17761  001D68  0900               	iorlw	0
 17762  001D6A  A4D8               	btfss	status,2,c
 17763  001D6C  D7DD               	goto	l6719
 17764                           
 17765                           ;doprnt.c: 757: if(width > len)
 17766  001D6E  0100               	movlb	0	; () banked
 17767  001D70  51A9               	movf	printf@width& (0+255),w,b
 17768  001D72  0100               	movlb	0	; () banked
 17769  001D74  5DA3               	subwf	printf@len& (0+255),w,b
 17770  001D76  0100               	movlb	0	; () banked
 17771  001D78  51AA               	movf	(printf@width+1)& (0+255),w,b
 17772  001D7A  0100               	movlb	0	; () banked
 17773  001D7C  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 17774  001D7E  B0D8               	btfsc	status,0,c
 17775  001D80  D009               	goto	l6727
 17776                           
 17777                           ; BSR set to: 0
 17778                           ;doprnt.c: 758: width -= len;
 17779  001D82  0100               	movlb	0	; () banked
 17780  001D84  51A3               	movf	printf@len& (0+255),w,b
 17781  001D86  0100               	movlb	0	; () banked
 17782  001D88  5FA9               	subwf	printf@width& (0+255),f,b
 17783  001D8A  0100               	movlb	0	; () banked
 17784  001D8C  51A4               	movf	(printf@len+1)& (0+255),w,b
 17785  001D8E  0100               	movlb	0	; () banked
 17786  001D90  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 17787  001D92  D009               	goto	l6731
 17788  001D94                     l6727:
 17789                           
 17790                           ; BSR set to: 0
 17791                           ;doprnt.c: 759: else
 17792                           ;doprnt.c: 760: width = 0;
 17793  001D94  0E00               	movlw	0
 17794  001D96  0100               	movlb	0	; () banked
 17795  001D98  6FAA               	movwf	(printf@width+1)& (0+255),b
 17796  001D9A  0E00               	movlw	0
 17797  001D9C  6FA9               	movwf	printf@width& (0+255),b
 17798                           
 17799                           ; BSR set to: 0
 17800                           ;doprnt.c: 764: while(width--)
 17801  001D9E  D003               	goto	l6731
 17802  001DA0                     l6729:
 17803                           
 17804                           ; BSR set to: 0
 17805                           ;doprnt.c: 765: (putch(' ') );
 17806  001DA0  0E20               	movlw	32
 17807  001DA2  ECA0  F02D         	call	_putch
 17808  001DA6                     l6731:
 17809  001DA6  0100               	movlb	0	; () banked
 17810  001DA8  07A9               	decf	printf@width& (0+255),f,b
 17811  001DAA  A0D8               	btfss	status,0,c
 17812  001DAC  07AA               	decf	(printf@width+1)& (0+255),f,b
 17813  001DAE  0100               	movlb	0	; () banked
 17814  001DB0  29A9               	incf	printf@width& (0+255),w,b
 17815  001DB2  E1F6               	bnz	l6729
 17816  001DB4  0100               	movlb	0	; () banked
 17817  001DB6  29AA               	incf	(printf@width+1)& (0+255),w,b
 17818  001DB8  B4D8               	btfsc	status,2,c
 17819  001DBA  D017               	goto	l6737
 17820  001DBC  D7F1               	goto	l6729
 17821  001DBE                     l6733:
 17822                           
 17823                           ; BSR set to: 0
 17824                           ;doprnt.c: 768: (putch(*cp++) );
 17825  001DBE  C09F  FFF6         	movff	printf@cp,tblptrl
 17826  001DC2  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 17827  001DC6  0E00               	movlw	low (__mediumconst shr (0+16))
 17828  001DC8  6EF8               	movwf	tblptru,c
 17829  001DCA  0E0F               	movlw	(high __ramtop+-1)
 17830  001DCC  64F7               	cpfsgt	tblptrh,c
 17831  001DCE  D003               	bra	u5217
 17832  001DD0  0008               	tblrd		*
 17833  001DD2  50F5               	movf	tablat,w,c
 17834  001DD4  D005               	bra	u5210
 17835  001DD6                     u5217:
 17836  001DD6  CFF6 FFE9          	movff	tblptrl,fsr0l
 17837  001DDA  CFF7 FFEA          	movff	tblptrh,fsr0h
 17838  001DDE  50EF               	movf	indf0,w,c
 17839  001DE0                     u5210:
 17840  001DE0  ECA0  F02D         	call	_putch
 17841  001DE4  0100               	movlb	0	; () banked
 17842  001DE6  4B9F               	infsnz	printf@cp& (0+255),f,b
 17843  001DE8  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 17844  001DEA                     l6737:
 17845                           
 17846                           ; BSR set to: 0
 17847  001DEA  0100               	movlb	0	; () banked
 17848  001DEC  07A3               	decf	printf@len& (0+255),f,b
 17849  001DEE  A0D8               	btfss	status,0,c
 17850  001DF0  07A4               	decf	(printf@len+1)& (0+255),f,b
 17851  001DF2  0100               	movlb	0	; () banked
 17852  001DF4  29A3               	incf	printf@len& (0+255),w,b
 17853  001DF6  E1E3               	bnz	l6733
 17854  001DF8  0100               	movlb	0	; () banked
 17855  001DFA  29A4               	incf	(printf@len+1)& (0+255),w,b
 17856  001DFC  B4D8               	btfsc	status,2,c
 17857  001DFE  D10A               	goto	l6815
 17858  001E00  D7DE               	goto	l6733
 17859  001E02                     l6739:
 17860                           
 17861                           ; BSR set to: 0
 17862                           ;doprnt.c: 818: flag |= 0x40;
 17863  001E02  0100               	movlb	0	; () banked
 17864  001E04  8DA7               	bsf	printf@flag& (0+255),6,b
 17865                           
 17866                           ; BSR set to: 0
 17867                           ;doprnt.c: 822: }
 17868                           
 17869                           ;doprnt.c: 819: break;
 17870  001E06  D01D               	goto	l1527
 17871  001E08                     l6743:
 17872  001E08  C08E  FFF6         	movff	printf@f,tblptrl
 17873  001E0C  C08F  FFF7         	movff	printf@f+1,tblptrh
 17874  001E10  0100               	movlb	0	; () banked
 17875  001E12  4B8E               	infsnz	printf@f& (0+255),f,b
 17876  001E14  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17877  001E16                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17878  001E16  6AF8               	clrf	tblptru,c
 17879  001E18                     	endif
 17880  001E18                     	if	0	;tblptru may be non-zero
 17881  001E18                     	endif
 17882  001E18  0008               	tblrd		*
 17883  001E1A  CFF5 F0A8          	movff	tablat,printf@c
 17884  001E1E  0100               	movlb	0	; () banked
 17885  001E20  51A8               	movf	printf@c& (0+255),w,b
 17886                           
 17887                           ; Switch size 1, requested type "space"
 17888                           ; Number of cases is 5, Range of values is 0 to 117
 17889                           ; switch strategies available:
 17890                           ; Name         Instructions Cycles
 17891                           ; simple_byte           16     9 (average)
 17892                           ;	Chosen strategy is simple_byte
 17893  001E22  0A00               	xorlw	0	; case 0
 17894  001E24  B4D8               	btfsc	status,2,c
 17895  001E26  0012               	return	
 17896  001E28  0A64               	xorlw	100	; case 100
 17897  001E2A  B4D8               	btfsc	status,2,c
 17898  001E2C  D00A               	goto	l1527
 17899  001E2E  0A0D               	xorlw	13	; case 105
 17900  001E30  B4D8               	btfsc	status,2,c
 17901  001E32  D007               	goto	l1527
 17902  001E34  0A1A               	xorlw	26	; case 115
 17903  001E36  B4D8               	btfsc	status,2,c
 17904  001E38  D758               	goto	l6709
 17905  001E3A  0A06               	xorlw	6	; case 117
 17906  001E3C  B4D8               	btfsc	status,2,c
 17907  001E3E  D7E1               	goto	l6739
 17908  001E40  D0E9               	goto	l6815
 17909  001E42                     l1527:
 17910                           
 17911                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 17912  001E42  0100               	movlb	0	; () banked
 17913  001E44  BDA7               	btfsc	printf@flag& (0+255),6,b
 17914  001E46  D019               	goto	l6755
 17915                           
 17916                           ; BSR set to: 0
 17917                           ;doprnt.c: 1253: {
 17918                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 17919  001E48  C0A1  FFD9         	movff	printf@ap,fsr2l
 17920  001E4C  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17921  001E50  CFDE F0A5          	movff	postinc2,printf@val
 17922  001E54  CFDD F0A6          	movff	postdec2,printf@val+1
 17923                           
 17924                           ; BSR set to: 0
 17925  001E58  0E02               	movlw	2
 17926  001E5A  0100               	movlb	0	; () banked
 17927  001E5C  27A1               	addwf	printf@ap& (0+255),f,b
 17928  001E5E  0E00               	movlw	0
 17929  001E60  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17930                           
 17931                           ; BSR set to: 0
 17932                           ;doprnt.c: 1261: if((int)val < 0) {
 17933  001E62  0100               	movlb	0	; () banked
 17934  001E64  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 17935  001E66  D016               	goto	l6759
 17936                           
 17937                           ; BSR set to: 0
 17938                           ;doprnt.c: 1262: flag |= 0x03;
 17939  001E68  0E03               	movlw	3
 17940  001E6A  0100               	movlb	0	; () banked
 17941  001E6C  13A7               	iorwf	printf@flag& (0+255),f,b
 17942                           
 17943                           ; BSR set to: 0
 17944                           ;doprnt.c: 1263: val = -val;
 17945  001E6E  0100               	movlb	0	; () banked
 17946  001E70  6DA5               	negf	printf@val& (0+255),b
 17947  001E72  1FA6               	comf	(printf@val+1)& (0+255),f,b
 17948  001E74  B0D8               	btfsc	status,0,c
 17949  001E76  2BA6               	incf	(printf@val+1)& (0+255),f,b
 17950                           
 17951                           ; BSR set to: 0
 17952                           ;doprnt.c: 1264: }
 17953                           ;doprnt.c: 1266: }
 17954  001E78  D00D               	goto	l6759
 17955  001E7A                     l6755:
 17956                           
 17957                           ; BSR set to: 0
 17958                           ;doprnt.c: 1268: else
 17959                           ;doprnt.c: 1273: {
 17960                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 17961  001E7A  C0A1  FFD9         	movff	printf@ap,fsr2l
 17962  001E7E  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17963  001E82  CFDE F0A5          	movff	postinc2,printf@val
 17964  001E86  CFDD F0A6          	movff	postdec2,printf@val+1
 17965                           
 17966                           ; BSR set to: 0
 17967  001E8A  0E02               	movlw	2
 17968  001E8C  0100               	movlb	0	; () banked
 17969  001E8E  27A1               	addwf	printf@ap& (0+255),f,b
 17970  001E90  0E00               	movlw	0
 17971  001E92  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17972  001E94                     l6759:
 17973                           
 17974                           ; BSR set to: 0
 17975                           ;doprnt.c: 1287: }
 17976                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 17977  001E94  0E01               	movlw	1
 17978  001E96  0100               	movlb	0	; () banked
 17979  001E98  6FA8               	movwf	printf@c& (0+255),b
 17980  001E9A                     l6761:
 17981                           
 17982                           ; BSR set to: 0
 17983  001E9A  0E05               	movlw	5
 17984  001E9C  0100               	movlb	0	; () banked
 17985  001E9E  19A8               	xorwf	printf@c& (0+255),w,b
 17986  001EA0  B4D8               	btfsc	status,2,c
 17987  001EA2  D019               	goto	l6773
 17988                           
 17989                           ; BSR set to: 0
 17990                           ;doprnt.c: 1306: if(val < dpowers[c])
 17991                           
 17992                           ; BSR set to: 0
 17993                           
 17994                           ; BSR set to: 0
 17995  001EA4  0100               	movlb	0	; () banked
 17996  001EA6  51A8               	movf	printf@c& (0+255),w,b
 17997  001EA8  0D02               	mullw	2
 17998  001EAA  0EB0               	movlw	low _dpowers
 17999  001EAC  24F3               	addwf	prodl,w,c
 18000  001EAE  6EF6               	movwf	tblptrl,c
 18001  001EB0  0EFA               	movlw	high _dpowers
 18002  001EB2  20F4               	addwfc	prodh,w,c
 18003  001EB4  6EF7               	movwf	tblptrh,c
 18004  001EB6                     	if	1	;There are 3 active tblptr bytes
 18005  001EB6  6AF8               	clrf	tblptru,c
 18006  001EB8  0E00               	movlw	low (__mediumconst shr (0+16))
 18007  001EBA  22F8               	addwfc	tblptru,f,c
 18008  001EBC                     	endif
 18009  001EBC  0009               	tblrd		*+
 18010  001EBE  50F5               	movf	tablat,w,c
 18011  001EC0  0100               	movlb	0	; () banked
 18012  001EC2  5DA5               	subwf	printf@val& (0+255),w,b
 18013  001EC4  0009               	tblrd		*+
 18014  001EC6  50F5               	movf	tablat,w,c
 18015  001EC8  0100               	movlb	0	; () banked
 18016  001ECA  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 18017  001ECC  A0D8               	btfss	status,0,c
 18018  001ECE  D003               	goto	l6773
 18019                           
 18020                           ; BSR set to: 0
 18021                           
 18022                           ; BSR set to: 0
 18023                           
 18024                           ; BSR set to: 0
 18025                           ;doprnt.c: 1307: break;
 18026  001ED0  0100               	movlb	0	; () banked
 18027  001ED2  2BA8               	incf	printf@c& (0+255),f,b
 18028  001ED4  D7E2               	goto	l6761
 18029  001ED6                     l6773:
 18030                           
 18031                           ; BSR set to: 0
 18032                           ;doprnt.c: 1345: if(width && flag & 0x03)
 18033  001ED6  0100               	movlb	0	; () banked
 18034  001ED8  51A9               	movf	printf@width& (0+255),w,b
 18035  001EDA  0100               	movlb	0	; () banked
 18036  001EDC  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18037  001EDE  B4D8               	btfsc	status,2,c
 18038  001EE0  D00B               	goto	l6779
 18039                           
 18040                           ; BSR set to: 0
 18041  001EE2  C0A7  F09A         	movff	printf@flag,??_printf
 18042  001EE6  0E03               	movlw	3
 18043  001EE8  0100               	movlb	0	; () banked
 18044  001EEA  179A               	andwf	??_printf& (0+255),f,b
 18045  001EEC  B4D8               	btfsc	status,2,c
 18046  001EEE  D004               	goto	l6779
 18047                           
 18048                           ; BSR set to: 0
 18049                           ;doprnt.c: 1346: width--;
 18050  001EF0  0100               	movlb	0	; () banked
 18051  001EF2  07A9               	decf	printf@width& (0+255),f,b
 18052  001EF4  A0D8               	btfss	status,0,c
 18053  001EF6  07AA               	decf	(printf@width+1)& (0+255),f,b
 18054  001EF8                     l6779:
 18055                           
 18056                           ; BSR set to: 0
 18057                           ;doprnt.c: 1381: if(width > c)
 18058  001EF8  0E80               	movlw	128
 18059  001EFA  0100               	movlb	0	; () banked
 18060  001EFC  BFA8               	btfsc	printf@c& (0+255),7,b
 18061  001EFE  0E7F               	movlw	127
 18062  001F00  0100               	movlb	0	; () banked
 18063  001F02  6F9A               	movwf	??_printf& (0+255),b
 18064  001F04  0100               	movlb	0	; () banked
 18065  001F06  51A9               	movf	printf@width& (0+255),w,b
 18066  001F08  0100               	movlb	0	; () banked
 18067  001F0A  5DA8               	subwf	printf@c& (0+255),w,b
 18068  001F0C  0100               	movlb	0	; () banked
 18069  001F0E  51AA               	movf	(printf@width+1)& (0+255),w,b
 18070  001F10  0A80               	xorlw	128
 18071  001F12  0100               	movlb	0	; () banked
 18072  001F14  599A               	subwfb	??_printf& (0+255),w,b
 18073  001F16  B0D8               	btfsc	status,0,c
 18074  001F18  D00B               	goto	l6783
 18075                           
 18076                           ; BSR set to: 0
 18077                           ;doprnt.c: 1382: width -= c;
 18078  001F1A  0100               	movlb	0	; () banked
 18079  001F1C  51A8               	movf	printf@c& (0+255),w,b
 18080  001F1E  0100               	movlb	0	; () banked
 18081  001F20  5FA9               	subwf	printf@width& (0+255),f,b
 18082  001F22  0E00               	movlw	0
 18083  001F24  0100               	movlb	0	; () banked
 18084  001F26  BFA8               	btfsc	printf@c& (0+255),7,b
 18085  001F28  0EFF               	movlw	255
 18086  001F2A  0100               	movlb	0	; () banked
 18087  001F2C  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 18088  001F2E  D005               	goto	l6785
 18089  001F30                     l6783:
 18090                           
 18091                           ; BSR set to: 0
 18092                           ;doprnt.c: 1383: else
 18093                           ;doprnt.c: 1384: width = 0;
 18094  001F30  0E00               	movlw	0
 18095  001F32  0100               	movlb	0	; () banked
 18096  001F34  6FAA               	movwf	(printf@width+1)& (0+255),b
 18097  001F36  0E00               	movlw	0
 18098  001F38  6FA9               	movwf	printf@width& (0+255),b
 18099  001F3A                     l6785:
 18100                           
 18101                           ; BSR set to: 0
 18102                           ;doprnt.c: 1387: if(flag & 0x04) {
 18103  001F3A  0100               	movlb	0	; () banked
 18104  001F3C  A5A7               	btfss	printf@flag& (0+255),2,b
 18105  001F3E  D018               	goto	l6797
 18106                           
 18107                           ; BSR set to: 0
 18108                           ;doprnt.c: 1392: if(flag & 0x03)
 18109  001F40  C0A7  F09A         	movff	printf@flag,??_printf
 18110  001F44  0E03               	movlw	3
 18111  001F46  0100               	movlb	0	; () banked
 18112  001F48  179A               	andwf	??_printf& (0+255),f,b
 18113  001F4A  B4D8               	btfsc	status,2,c
 18114  001F4C  D003               	goto	l6791
 18115                           
 18116                           ; BSR set to: 0
 18117                           ;doprnt.c: 1393: (putch('-') );
 18118  001F4E  0E2D               	movlw	45
 18119  001F50  ECA0  F02D         	call	_putch
 18120  001F54                     l6791:
 18121                           
 18122                           ;doprnt.c: 1415: if(width)
 18123  001F54  0100               	movlb	0	; () banked
 18124  001F56  51A9               	movf	printf@width& (0+255),w,b
 18125  001F58  0100               	movlb	0	; () banked
 18126  001F5A  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18127  001F5C  B4D8               	btfsc	status,2,c
 18128  001F5E  D025               	goto	l6807
 18129                           
 18130                           ; BSR set to: 0
 18131                           ;doprnt.c: 1417: (putch('0') );
 18132                           
 18133                           ; BSR set to: 0
 18134                           
 18135                           ;doprnt.c: 1416: do
 18136  001F60  0E30               	movlw	48
 18137  001F62  ECA0  F02D         	call	_putch
 18138                           
 18139                           ;doprnt.c: 1418: while(--width);
 18140  001F66  0100               	movlb	0	; () banked
 18141  001F68  07A9               	decf	printf@width& (0+255),f,b
 18142  001F6A  A0D8               	btfss	status,0,c
 18143  001F6C  07AA               	decf	(printf@width+1)& (0+255),f,b
 18144  001F6E  D7F2               	goto	l6791
 18145  001F70                     l6797:
 18146                           
 18147                           ; BSR set to: 0
 18148                           ;doprnt.c: 1422: {
 18149                           ;doprnt.c: 1424: if(width
 18150                           ;doprnt.c: 1428: )
 18151  001F70  0100               	movlb	0	; () banked
 18152  001F72  51A9               	movf	printf@width& (0+255),w,b
 18153  001F74  0100               	movlb	0	; () banked
 18154  001F76  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18155  001F78  B4D8               	btfsc	status,2,c
 18156  001F7A  D00D               	goto	l6803
 18157  001F7C                     l6799:
 18158                           
 18159                           ; BSR set to: 0
 18160                           ;doprnt.c: 1430: (putch(' ') );
 18161  001F7C  0E20               	movlw	32
 18162  001F7E  ECA0  F02D         	call	_putch
 18163                           
 18164                           ;doprnt.c: 1431: while(--width);
 18165  001F82  0100               	movlb	0	; () banked
 18166  001F84  07A9               	decf	printf@width& (0+255),f,b
 18167  001F86  A0D8               	btfss	status,0,c
 18168  001F88  07AA               	decf	(printf@width+1)& (0+255),f,b
 18169  001F8A  0100               	movlb	0	; () banked
 18170  001F8C  51A9               	movf	printf@width& (0+255),w,b
 18171  001F8E  0100               	movlb	0	; () banked
 18172  001F90  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18173  001F92  A4D8               	btfss	status,2,c
 18174  001F94  D7F3               	goto	l6799
 18175  001F96                     l6803:
 18176                           
 18177                           ; BSR set to: 0
 18178                           ;doprnt.c: 1438: if(flag & 0x03)
 18179  001F96  C0A7  F09A         	movff	printf@flag,??_printf
 18180  001F9A  0E03               	movlw	3
 18181  001F9C  0100               	movlb	0	; () banked
 18182  001F9E  179A               	andwf	??_printf& (0+255),f,b
 18183  001FA0  B4D8               	btfsc	status,2,c
 18184  001FA2  D003               	goto	l6807
 18185                           
 18186                           ; BSR set to: 0
 18187                           ;doprnt.c: 1439: (putch('-') );
 18188  001FA4  0E2D               	movlw	45
 18189  001FA6  ECA0  F02D         	call	_putch
 18190  001FAA                     l6807:
 18191                           
 18192                           ;doprnt.c: 1469: }
 18193                           ;doprnt.c: 1472: prec = c;
 18194  001FAA  C0A8  F09E         	movff	printf@c,printf@prec
 18195                           
 18196                           ;doprnt.c: 1474: while(prec--) {
 18197  001FAE  D02C               	goto	l6813
 18198  001FB0                     l6809:
 18199                           
 18200                           ;doprnt.c: 1478: {
 18201                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18202  001FB0  0100               	movlb	0	; () banked
 18203  001FB2  519E               	movf	printf@prec& (0+255),w,b
 18204  001FB4  0D02               	mullw	2
 18205  001FB6  0EB0               	movlw	low _dpowers
 18206  001FB8  24F3               	addwf	prodl,w,c
 18207  001FBA  6EF6               	movwf	tblptrl,c
 18208  001FBC  0EFA               	movlw	high _dpowers
 18209  001FBE  20F4               	addwfc	prodh,w,c
 18210  001FC0  6EF7               	movwf	tblptrh,c
 18211  001FC2                     	if	1	;There are 3 active tblptr bytes
 18212  001FC2  6AF8               	clrf	tblptru,c
 18213  001FC4  0E00               	movlw	low (__mediumconst shr (0+16))
 18214  001FC6  22F8               	addwfc	tblptru,f,c
 18215  001FC8                     	endif
 18216  001FC8  0009               	tblrd		*+
 18217  001FCA  CFF5 F082          	movff	tablat,___lwdiv@divisor
 18218  001FCE  000A               	tblrd		*-
 18219  001FD0  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 18220  001FD4  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 18221  001FD8  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 18222  001FDC  EC54  F027         	call	___lwdiv	;wreg free
 18223  001FE0  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 18224  001FE4  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 18225  001FE8  0E00               	movlw	0
 18226  001FEA  0100               	movlb	0	; () banked
 18227  001FEC  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 18228  001FEE  0E0A               	movlw	10
 18229  001FF0  6F89               	movwf	___lwmod@divisor& (0+255),b
 18230  001FF2  EC9E  F028         	call	___lwmod	;wreg free
 18231  001FF6  0100               	movlb	0	; () banked
 18232  001FF8  5187               	movf	?___lwmod& (0+255),w,b
 18233  001FFA  0F30               	addlw	48
 18234  001FFC  0100               	movlb	0	; () banked
 18235  001FFE  6FA8               	movwf	printf@c& (0+255),b
 18236                           
 18237                           ; BSR set to: 0
 18238                           ;doprnt.c: 1523: }
 18239                           ;doprnt.c: 1524: (putch(c) );
 18240  002000  0100               	movlb	0	; () banked
 18241  002002  51A8               	movf	printf@c& (0+255),w,b
 18242  002004  ECA0  F02D         	call	_putch
 18243  002008                     l6813:
 18244  002008  0100               	movlb	0	; () banked
 18245  00200A  079E               	decf	printf@prec& (0+255),f,b
 18246  00200C  0100               	movlb	0	; () banked
 18247  00200E  299E               	incf	printf@prec& (0+255),w,b
 18248  002010  A4D8               	btfss	status,2,c
 18249  002012  D7CE               	goto	l6809
 18250  002014                     l6815:
 18251  002014  C08E  FFF6         	movff	printf@f,tblptrl
 18252  002018  C08F  FFF7         	movff	printf@f+1,tblptrh
 18253  00201C  0100               	movlb	0	; () banked
 18254  00201E  4B8E               	infsnz	printf@f& (0+255),f,b
 18255  002020  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18256  002022                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18257  002022  6AF8               	clrf	tblptru,c
 18258  002024                     	endif
 18259  002024                     	if	0	;tblptru may be non-zero
 18260  002024                     	endif
 18261  002024  0008               	tblrd		*
 18262  002026  CFF5 F0A8          	movff	tablat,printf@c
 18263  00202A  0100               	movlb	0	; () banked
 18264  00202C  51A8               	movf	printf@c& (0+255),w,b
 18265  00202E  B4D8               	btfsc	status,2,c
 18266  002030  0012               	return	
 18267  002032  D5EB               	goto	l6685
 18268  002034                     __end_of_printf:
 18269                           	opt stack 0
 18270                           tblptru	equ	0xFF8
 18271                           tblptrh	equ	0xFF7
 18272                           tblptrl	equ	0xFF6
 18273                           tablat	equ	0xFF5
 18274                           prodh	equ	0xFF4
 18275                           prodl	equ	0xFF3
 18276                           intcon	equ	0xFF2
 18277                           intcon2	equ	0xFF1
 18278                           intcon3	equ	0xFF0
 18279                           indf0	equ	0xFEF
 18280                           postinc0	equ	0xFEE
 18281                           fsr0h	equ	0xFEA
 18282                           fsr0l	equ	0xFE9
 18283                           wreg	equ	0xFE8
 18284                           postdec1	equ	0xFE5
 18285                           fsr1l	equ	0xFE1
 18286                           indf2	equ	0xFDF
 18287                           postinc2	equ	0xFDE
 18288                           postdec2	equ	0xFDD
 18289                           fsr2h	equ	0xFDA
 18290                           fsr2l	equ	0xFD9
 18291                           status	equ	0xFD8
 18292                           
 18293 ;; *************** function _putch *****************
 18294 ;; Defined at:
 18295 ;;		line 20 in file "lcd.c"
 18296 ;; Parameters:    Size  Location     Type
 18297 ;;  data            1    wreg     unsigned char 
 18298 ;; Auto vars:     Size  Location     Type
 18299 ;;  data            1    2[BANK0 ] unsigned char 
 18300 ;; Return value:  Size  Location     Type
 18301 ;;                  1    wreg      void 
 18302 ;; Registers used:
 18303 ;;		wreg, status,2, status,0, cstack
 18304 ;; Tracked objects:
 18305 ;;		On entry : 0/0
 18306 ;;		On exit  : 0/0
 18307 ;;		Unchanged: 0/0
 18308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18310 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18312 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18313 ;;Total ram usage:        1 bytes
 18314 ;; Hardware stack levels used:    1
 18315 ;; Hardware stack levels required when called:    8
 18316 ;; This function calls:
 18317 ;;		_lcdNibble
 18318 ;; This function is called by:
 18319 ;;		_printf
 18320 ;; This function uses a non-reentrant model
 18321 ;;
 18322                           
 18323                           	psect	text57
 18324  005B40                     __ptext57:
 18325                           	opt stack 0
 18326  005B40                     _putch:
 18327                           	opt stack 18
 18328                           
 18329                           ;incstack = 0
 18330                           ;putch@data stored from wreg
 18331  005B40  0100               	movlb	0	; () banked
 18332  005B42  6F82               	movwf	putch@data& (0+255),b
 18333                           
 18334                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 18335  005B44  848C               	bsf	3980,2,c	;volatile
 18336                           
 18337                           ;lcd.c: 22: lcdNibble(data);
 18338  005B46  0100               	movlb	0	; () banked
 18339  005B48  5182               	movf	putch@data& (0+255),w,b
 18340  005B4A  EC02  F028         	call	_lcdNibble
 18341  005B4E  0012               	return		;funcret
 18342  005B50                     __end_of_putch:
 18343                           	opt stack 0
 18344                           tblptru	equ	0xFF8
 18345                           tblptrh	equ	0xFF7
 18346                           tblptrl	equ	0xFF6
 18347                           tablat	equ	0xFF5
 18348                           prodh	equ	0xFF4
 18349                           prodl	equ	0xFF3
 18350                           intcon	equ	0xFF2
 18351                           intcon2	equ	0xFF1
 18352                           intcon3	equ	0xFF0
 18353                           indf0	equ	0xFEF
 18354                           postinc0	equ	0xFEE
 18355                           fsr0h	equ	0xFEA
 18356                           fsr0l	equ	0xFE9
 18357                           wreg	equ	0xFE8
 18358                           postdec1	equ	0xFE5
 18359                           fsr1l	equ	0xFE1
 18360                           indf2	equ	0xFDF
 18361                           postinc2	equ	0xFDE
 18362                           postdec2	equ	0xFDD
 18363                           fsr2h	equ	0xFDA
 18364                           fsr2l	equ	0xFD9
 18365                           status	equ	0xFD8
 18366                           
 18367 ;; *************** function _isdigit *****************
 18368 ;; Defined at:
 18369 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 18370 ;; Parameters:    Size  Location     Type
 18371 ;;  c               1    wreg     unsigned char 
 18372 ;; Auto vars:     Size  Location     Type
 18373 ;;  c               1    2[BANK0 ] unsigned char 
 18374 ;; Return value:  Size  Location     Type
 18375 ;;		None               void
 18376 ;; Registers used:
 18377 ;;		wreg, status,2, status,0
 18378 ;; Tracked objects:
 18379 ;;		On entry : 0/0
 18380 ;;		On exit  : 0/0
 18381 ;;		Unchanged: 0/0
 18382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18384 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18385 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18386 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18387 ;;Total ram usage:        3 bytes
 18388 ;; Hardware stack levels used:    1
 18389 ;; Hardware stack levels required when called:    7
 18390 ;; This function calls:
 18391 ;;		Nothing
 18392 ;; This function is called by:
 18393 ;;		_printf
 18394 ;; This function uses a non-reentrant model
 18395 ;;
 18396                           
 18397                           	psect	text58
 18398  00596E                     __ptext58:
 18399                           	opt stack 0
 18400  00596E                     _isdigit:
 18401                           	opt stack 19
 18402                           
 18403                           ;incstack = 0
 18404                           ;isdigit@c stored from wreg
 18405  00596E  0100               	movlb	0	; () banked
 18406  005970  6F82               	movwf	isdigit@c& (0+255),b
 18407  005972  0E00               	movlw	0
 18408  005974  0100               	movlb	0	; () banked
 18409  005976  6F81               	movwf	_isdigit$2068& (0+255),b
 18410                           
 18411                           ; BSR set to: 0
 18412  005978  0E3A               	movlw	58
 18413  00597A  0100               	movlb	0	; () banked
 18414  00597C  6182               	cpfslt	isdigit@c& (0+255),b
 18415  00597E  D007               	goto	l6533
 18416                           
 18417                           ; BSR set to: 0
 18418  005980  0E2F               	movlw	47
 18419  005982  0100               	movlb	0	; () banked
 18420  005984  6582               	cpfsgt	isdigit@c& (0+255),b
 18421  005986  D003               	goto	l6533
 18422                           
 18423                           ; BSR set to: 0
 18424  005988  0E01               	movlw	1
 18425  00598A  0100               	movlb	0	; () banked
 18426  00598C  6F81               	movwf	_isdigit$2068& (0+255),b
 18427  00598E                     l6533:
 18428                           
 18429                           ; BSR set to: 0
 18430  00598E  C081  F080         	movff	_isdigit$2068,??_isdigit
 18431  005992  0100               	movlb	0	; () banked
 18432  005994  3180               	rrcf	??_isdigit& (0+255),w,b
 18433  005996  0012               	return	
 18434  005998                     __end_of_isdigit:
 18435                           	opt stack 0
 18436                           tblptru	equ	0xFF8
 18437                           tblptrh	equ	0xFF7
 18438                           tblptrl	equ	0xFF6
 18439                           tablat	equ	0xFF5
 18440                           prodh	equ	0xFF4
 18441                           prodl	equ	0xFF3
 18442                           intcon	equ	0xFF2
 18443                           intcon2	equ	0xFF1
 18444                           intcon3	equ	0xFF0
 18445                           indf0	equ	0xFEF
 18446                           postinc0	equ	0xFEE
 18447                           fsr0h	equ	0xFEA
 18448                           fsr0l	equ	0xFE9
 18449                           wreg	equ	0xFE8
 18450                           postdec1	equ	0xFE5
 18451                           fsr1l	equ	0xFE1
 18452                           indf2	equ	0xFDF
 18453                           postinc2	equ	0xFDE
 18454                           postdec2	equ	0xFDD
 18455                           fsr2h	equ	0xFDA
 18456                           fsr2l	equ	0xFD9
 18457                           status	equ	0xFD8
 18458                           
 18459 ;; *************** function ___wmul *****************
 18460 ;; Defined at:
 18461 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 18462 ;; Parameters:    Size  Location     Type
 18463 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18464 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18465 ;; Auto vars:     Size  Location     Type
 18466 ;;  product         2    4[BANK0 ] unsigned int 
 18467 ;; Return value:  Size  Location     Type
 18468 ;;                  2    0[BANK0 ] unsigned int 
 18469 ;; Registers used:
 18470 ;;		wreg, status,2, status,0, prodl, prodh
 18471 ;; Tracked objects:
 18472 ;;		On entry : 0/0
 18473 ;;		On exit  : 0/0
 18474 ;;		Unchanged: 0/0
 18475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18476 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18477 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18479 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18480 ;;Total ram usage:        6 bytes
 18481 ;; Hardware stack levels used:    1
 18482 ;; Hardware stack levels required when called:    7
 18483 ;; This function calls:
 18484 ;;		Nothing
 18485 ;; This function is called by:
 18486 ;;		_printf
 18487 ;; This function uses a non-reentrant model
 18488 ;;
 18489                           
 18490                           	psect	text59
 18491  005640                     __ptext59:
 18492                           	opt stack 0
 18493  005640                     ___wmul:
 18494                           	opt stack 19
 18495                           
 18496                           ; BSR set to: 0
 18497                           ;incstack = 0
 18498  005640  0100               	movlb	0	; () banked
 18499  005642  5180               	movf	___wmul@multiplier& (0+255),w,b
 18500  005644  0100               	movlb	0	; () banked
 18501  005646  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18502  005648  CFF3 F084          	movff	prodl,___wmul@product
 18503  00564C  CFF4 F085          	movff	prodh,___wmul@product+1
 18504  005650  0100               	movlb	0	; () banked
 18505  005652  5180               	movf	___wmul@multiplier& (0+255),w,b
 18506  005654  0100               	movlb	0	; () banked
 18507  005656  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 18508  005658  50F3               	movf	prodl,w,c
 18509  00565A  0100               	movlb	0	; () banked
 18510  00565C  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18511  00565E  0100               	movlb	0	; () banked
 18512  005660  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 18513  005662  0100               	movlb	0	; () banked
 18514  005664  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18515  005666  50F3               	movf	prodl,w,c
 18516  005668  0100               	movlb	0	; () banked
 18517  00566A  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18518                           
 18519                           ; BSR set to: 0
 18520  00566C  C084  F080         	movff	___wmul@product,?___wmul
 18521  005670  C085  F081         	movff	___wmul@product+1,?___wmul+1
 18522  005674  0012               	return	
 18523  005676                     __end_of___wmul:
 18524                           	opt stack 0
 18525                           tblptru	equ	0xFF8
 18526                           tblptrh	equ	0xFF7
 18527                           tblptrl	equ	0xFF6
 18528                           tablat	equ	0xFF5
 18529                           prodh	equ	0xFF4
 18530                           prodl	equ	0xFF3
 18531                           intcon	equ	0xFF2
 18532                           intcon2	equ	0xFF1
 18533                           intcon3	equ	0xFF0
 18534                           indf0	equ	0xFEF
 18535                           postinc0	equ	0xFEE
 18536                           fsr0h	equ	0xFEA
 18537                           fsr0l	equ	0xFE9
 18538                           wreg	equ	0xFE8
 18539                           postdec1	equ	0xFE5
 18540                           fsr1l	equ	0xFE1
 18541                           indf2	equ	0xFDF
 18542                           postinc2	equ	0xFDE
 18543                           postdec2	equ	0xFDD
 18544                           fsr2h	equ	0xFDA
 18545                           fsr2l	equ	0xFD9
 18546                           status	equ	0xFD8
 18547                           
 18548 ;; *************** function ___lwmod *****************
 18549 ;; Defined at:
 18550 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 18551 ;; Parameters:    Size  Location     Type
 18552 ;;  dividend        2    7[BANK0 ] unsigned int 
 18553 ;;  divisor         2    9[BANK0 ] unsigned int 
 18554 ;; Auto vars:     Size  Location     Type
 18555 ;;  counter         1   11[BANK0 ] unsigned char 
 18556 ;; Return value:  Size  Location     Type
 18557 ;;                  2    7[BANK0 ] unsigned int 
 18558 ;; Registers used:
 18559 ;;		wreg, status,2, status,0
 18560 ;; Tracked objects:
 18561 ;;		On entry : 0/0
 18562 ;;		On exit  : 0/0
 18563 ;;		Unchanged: 0/0
 18564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18565 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18566 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18568 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18569 ;;Total ram usage:        5 bytes
 18570 ;; Hardware stack levels used:    1
 18571 ;; Hardware stack levels required when called:    7
 18572 ;; This function calls:
 18573 ;;		Nothing
 18574 ;; This function is called by:
 18575 ;;		_printf
 18576 ;; This function uses a non-reentrant model
 18577 ;;
 18578                           
 18579                           	psect	text60
 18580  00513C                     __ptext60:
 18581                           	opt stack 0
 18582  00513C                     ___lwmod:
 18583                           	opt stack 19
 18584                           
 18585                           ; BSR set to: 0
 18586                           ;incstack = 0
 18587  00513C  0100               	movlb	0	; () banked
 18588  00513E  5189               	movf	___lwmod@divisor& (0+255),w,b
 18589  005140  0100               	movlb	0	; () banked
 18590  005142  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 18591  005144  B4D8               	btfsc	status,2,c
 18592  005146  D026               	goto	l1984
 18593                           
 18594                           ; BSR set to: 0
 18595  005148  0E01               	movlw	1
 18596  00514A  0100               	movlb	0	; () banked
 18597  00514C  6F8B               	movwf	___lwmod@counter& (0+255),b
 18598  00514E  D006               	goto	l6571
 18599  005150                     l6569:
 18600                           
 18601                           ; BSR set to: 0
 18602  005150  0100               	movlb	0	; () banked
 18603  005152  90D8               	bcf	status,0,c
 18604  005154  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 18605  005156  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 18606  005158  0100               	movlb	0	; () banked
 18607  00515A  2B8B               	incf	___lwmod@counter& (0+255),f,b
 18608  00515C                     l6571:
 18609                           
 18610                           ; BSR set to: 0
 18611  00515C  0100               	movlb	0	; () banked
 18612  00515E  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 18613  005160  D7F7               	goto	l6569
 18614  005162                     l6573:
 18615                           
 18616                           ; BSR set to: 0
 18617  005162  0100               	movlb	0	; () banked
 18618  005164  5189               	movf	___lwmod@divisor& (0+255),w,b
 18619  005166  0100               	movlb	0	; () banked
 18620  005168  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 18621  00516A  0100               	movlb	0	; () banked
 18622  00516C  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18623  00516E  0100               	movlb	0	; () banked
 18624  005170  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 18625  005172  A0D8               	btfss	status,0,c
 18626  005174  D008               	goto	l6577
 18627                           
 18628                           ; BSR set to: 0
 18629  005176  0100               	movlb	0	; () banked
 18630  005178  5189               	movf	___lwmod@divisor& (0+255),w,b
 18631  00517A  0100               	movlb	0	; () banked
 18632  00517C  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 18633  00517E  0100               	movlb	0	; () banked
 18634  005180  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18635  005182  0100               	movlb	0	; () banked
 18636  005184  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 18637  005186                     l6577:
 18638                           
 18639                           ; BSR set to: 0
 18640  005186  0100               	movlb	0	; () banked
 18641  005188  90D8               	bcf	status,0,c
 18642  00518A  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 18643  00518C  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 18644                           
 18645                           ; BSR set to: 0
 18646  00518E  0100               	movlb	0	; () banked
 18647  005190  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 18648  005192  D7E7               	goto	l6573
 18649  005194                     l1984:
 18650                           
 18651                           ; BSR set to: 0
 18652  005194  C087  F087         	movff	___lwmod@dividend,?___lwmod
 18653  005198  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 18654                           
 18655                           ; BSR set to: 0
 18656  00519C  0012               	return		;funcret
 18657  00519E                     __end_of___lwmod:
 18658                           	opt stack 0
 18659                           tblptru	equ	0xFF8
 18660                           tblptrh	equ	0xFF7
 18661                           tblptrl	equ	0xFF6
 18662                           tablat	equ	0xFF5
 18663                           prodh	equ	0xFF4
 18664                           prodl	equ	0xFF3
 18665                           intcon	equ	0xFF2
 18666                           intcon2	equ	0xFF1
 18667                           intcon3	equ	0xFF0
 18668                           indf0	equ	0xFEF
 18669                           postinc0	equ	0xFEE
 18670                           fsr0h	equ	0xFEA
 18671                           fsr0l	equ	0xFE9
 18672                           wreg	equ	0xFE8
 18673                           postdec1	equ	0xFE5
 18674                           fsr1l	equ	0xFE1
 18675                           indf2	equ	0xFDF
 18676                           postinc2	equ	0xFDE
 18677                           postdec2	equ	0xFDD
 18678                           fsr2h	equ	0xFDA
 18679                           fsr2l	equ	0xFD9
 18680                           status	equ	0xFD8
 18681                           
 18682 ;; *************** function ___lwdiv *****************
 18683 ;; Defined at:
 18684 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 18685 ;; Parameters:    Size  Location     Type
 18686 ;;  dividend        2    0[BANK0 ] unsigned int 
 18687 ;;  divisor         2    2[BANK0 ] unsigned int 
 18688 ;; Auto vars:     Size  Location     Type
 18689 ;;  quotient        2    4[BANK0 ] unsigned int 
 18690 ;;  counter         1    6[BANK0 ] unsigned char 
 18691 ;; Return value:  Size  Location     Type
 18692 ;;                  2    0[BANK0 ] unsigned int 
 18693 ;; Registers used:
 18694 ;;		wreg, status,2, status,0
 18695 ;; Tracked objects:
 18696 ;;		On entry : 0/0
 18697 ;;		On exit  : 0/0
 18698 ;;		Unchanged: 0/0
 18699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18700 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18701 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18703 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18704 ;;Total ram usage:        7 bytes
 18705 ;; Hardware stack levels used:    1
 18706 ;; Hardware stack levels required when called:    7
 18707 ;; This function calls:
 18708 ;;		Nothing
 18709 ;; This function is called by:
 18710 ;;		_printf
 18711 ;; This function uses a non-reentrant model
 18712 ;;
 18713                           
 18714                           	psect	text61
 18715  004EA8                     __ptext61:
 18716                           	opt stack 0
 18717  004EA8                     ___lwdiv:
 18718                           	opt stack 19
 18719                           
 18720                           ; BSR set to: 0
 18721                           ;incstack = 0
 18722  004EA8  0E00               	movlw	0
 18723  004EAA  0100               	movlb	0	; () banked
 18724  004EAC  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 18725  004EAE  0E00               	movlw	0
 18726  004EB0  6F84               	movwf	___lwdiv@quotient& (0+255),b
 18727                           
 18728                           ; BSR set to: 0
 18729  004EB2  0100               	movlb	0	; () banked
 18730  004EB4  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18731  004EB6  0100               	movlb	0	; () banked
 18732  004EB8  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 18733  004EBA  B4D8               	btfsc	status,2,c
 18734  004EBC  D02C               	goto	l1974
 18735                           
 18736                           ; BSR set to: 0
 18737  004EBE  0E01               	movlw	1
 18738  004EC0  0100               	movlb	0	; () banked
 18739  004EC2  6F86               	movwf	___lwdiv@counter& (0+255),b
 18740  004EC4  D006               	goto	l6551
 18741  004EC6                     l6549:
 18742                           
 18743                           ; BSR set to: 0
 18744  004EC6  0100               	movlb	0	; () banked
 18745  004EC8  90D8               	bcf	status,0,c
 18746  004ECA  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 18747  004ECC  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 18748  004ECE  0100               	movlb	0	; () banked
 18749  004ED0  2B86               	incf	___lwdiv@counter& (0+255),f,b
 18750  004ED2                     l6551:
 18751                           
 18752                           ; BSR set to: 0
 18753  004ED2  0100               	movlb	0	; () banked
 18754  004ED4  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 18755  004ED6  D7F7               	goto	l6549
 18756  004ED8                     l6553:
 18757                           
 18758                           ; BSR set to: 0
 18759  004ED8  0100               	movlb	0	; () banked
 18760  004EDA  90D8               	bcf	status,0,c
 18761  004EDC  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 18762  004EDE  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 18763                           
 18764                           ; BSR set to: 0
 18765  004EE0  0100               	movlb	0	; () banked
 18766  004EE2  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18767  004EE4  0100               	movlb	0	; () banked
 18768  004EE6  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 18769  004EE8  0100               	movlb	0	; () banked
 18770  004EEA  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18771  004EEC  0100               	movlb	0	; () banked
 18772  004EEE  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 18773  004EF0  A0D8               	btfss	status,0,c
 18774  004EF2  D00A               	goto	l6561
 18775                           
 18776                           ; BSR set to: 0
 18777  004EF4  0100               	movlb	0	; () banked
 18778  004EF6  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18779  004EF8  0100               	movlb	0	; () banked
 18780  004EFA  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 18781  004EFC  0100               	movlb	0	; () banked
 18782  004EFE  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18783  004F00  0100               	movlb	0	; () banked
 18784  004F02  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 18785                           
 18786                           ; BSR set to: 0
 18787  004F04  0100               	movlb	0	; () banked
 18788  004F06  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 18789  004F08                     l6561:
 18790                           
 18791                           ; BSR set to: 0
 18792  004F08  0100               	movlb	0	; () banked
 18793  004F0A  90D8               	bcf	status,0,c
 18794  004F0C  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 18795  004F0E  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 18796                           
 18797                           ; BSR set to: 0
 18798  004F10  0100               	movlb	0	; () banked
 18799  004F12  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 18800  004F14  D7E1               	goto	l6553
 18801  004F16                     l1974:
 18802                           
 18803                           ; BSR set to: 0
 18804  004F16  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 18805  004F1A  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 18806                           
 18807                           ; BSR set to: 0
 18808  004F1E  0012               	return		;funcret
 18809  004F20                     __end_of___lwdiv:
 18810                           	opt stack 0
 18811                           tblptru	equ	0xFF8
 18812                           tblptrh	equ	0xFF7
 18813                           tblptrl	equ	0xFF6
 18814                           tablat	equ	0xFF5
 18815                           prodh	equ	0xFF4
 18816                           prodl	equ	0xFF3
 18817                           intcon	equ	0xFF2
 18818                           intcon2	equ	0xFF1
 18819                           intcon3	equ	0xFF0
 18820                           indf0	equ	0xFEF
 18821                           postinc0	equ	0xFEE
 18822                           fsr0h	equ	0xFEA
 18823                           fsr0l	equ	0xFE9
 18824                           wreg	equ	0xFE8
 18825                           postdec1	equ	0xFE5
 18826                           fsr1l	equ	0xFE1
 18827                           indf2	equ	0xFDF
 18828                           postinc2	equ	0xFDE
 18829                           postdec2	equ	0xFDD
 18830                           fsr2h	equ	0xFDA
 18831                           fsr2l	equ	0xFD9
 18832                           status	equ	0xFD8
 18833                           
 18834 ;; *************** function _lcdInst *****************
 18835 ;; Defined at:
 18836 ;;		line 15 in file "lcd.c"
 18837 ;; Parameters:    Size  Location     Type
 18838 ;;  data            1    wreg     unsigned char 
 18839 ;; Auto vars:     Size  Location     Type
 18840 ;;  data            1    2[BANK0 ] unsigned char 
 18841 ;; Return value:  Size  Location     Type
 18842 ;;                  1    wreg      void 
 18843 ;; Registers used:
 18844 ;;		wreg, status,2, status,0, cstack
 18845 ;; Tracked objects:
 18846 ;;		On entry : 0/0
 18847 ;;		On exit  : 0/0
 18848 ;;		Unchanged: 0/0
 18849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18851 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18853 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18854 ;;Total ram usage:        1 bytes
 18855 ;; Hardware stack levels used:    1
 18856 ;; Hardware stack levels required when called:    8
 18857 ;; This function calls:
 18858 ;;		_lcdNibble
 18859 ;; This function is called by:
 18860 ;;		_UI
 18861 ;;		_change_state_to_menu_start
 18862 ;;		_change_state_to_menu_12
 18863 ;;		_change_state_to_menu_22
 18864 ;;		_initLCD
 18865 ;;		_printRTC
 18866 ;;		_Loading
 18867 ;;		_EEPROM_write
 18868 ;;		_Test
 18869 ;;		_algorithmTest
 18870 ;;		_sensorTest
 18871 ;;		_actuatorTest
 18872 ;;		_BothServos
 18873 ;;		_PortTestDC
 18874 ;;		_PlatformTest
 18875 ;;		_SpeedTest
 18876 ;;		_BlockerTest
 18877 ;;		_arm
 18878 ;;		_PortTestPusher
 18879 ;;		_ToggleTestA5
 18880 ;; This function uses a non-reentrant model
 18881 ;;
 18882                           
 18883                           	psect	text62
 18884  005B50                     __ptext62:
 18885                           	opt stack 0
 18886  005B50                     _lcdInst:
 18887                           	opt stack 20
 18888                           
 18889                           ; BSR set to: 0
 18890                           ;incstack = 0
 18891                           ;lcdInst@data stored from wreg
 18892  005B50  0100               	movlb	0	; () banked
 18893  005B52  6F82               	movwf	lcdInst@data& (0+255),b
 18894                           
 18895                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 18896  005B54  948C               	bcf	3980,2,c	;volatile
 18897                           
 18898                           ;lcd.c: 17: lcdNibble(data);
 18899  005B56  0100               	movlb	0	; () banked
 18900  005B58  5182               	movf	lcdInst@data& (0+255),w,b
 18901  005B5A  EC02  F028         	call	_lcdNibble
 18902  005B5E  0012               	return		;funcret
 18903  005B60                     __end_of_lcdInst:
 18904                           	opt stack 0
 18905                           tblptru	equ	0xFF8
 18906                           tblptrh	equ	0xFF7
 18907                           tblptrl	equ	0xFF6
 18908                           tablat	equ	0xFF5
 18909                           prodh	equ	0xFF4
 18910                           prodl	equ	0xFF3
 18911                           intcon	equ	0xFF2
 18912                           intcon2	equ	0xFF1
 18913                           intcon3	equ	0xFF0
 18914                           indf0	equ	0xFEF
 18915                           postinc0	equ	0xFEE
 18916                           fsr0h	equ	0xFEA
 18917                           fsr0l	equ	0xFE9
 18918                           wreg	equ	0xFE8
 18919                           postdec1	equ	0xFE5
 18920                           fsr1l	equ	0xFE1
 18921                           indf2	equ	0xFDF
 18922                           postinc2	equ	0xFDE
 18923                           postdec2	equ	0xFDD
 18924                           fsr2h	equ	0xFDA
 18925                           fsr2l	equ	0xFD9
 18926                           status	equ	0xFD8
 18927                           
 18928 ;; *************** function _lcdNibble *****************
 18929 ;; Defined at:
 18930 ;;		line 25 in file "lcd.c"
 18931 ;; Parameters:    Size  Location     Type
 18932 ;;  data            1    wreg     unsigned char 
 18933 ;; Auto vars:     Size  Location     Type
 18934 ;;  data            1    1[BANK0 ] unsigned char 
 18935 ;;  temp            1    0[BANK0 ] unsigned char 
 18936 ;; Return value:  Size  Location     Type
 18937 ;;                  1    wreg      void 
 18938 ;; Registers used:
 18939 ;;		wreg, status,2, status,0
 18940 ;; Tracked objects:
 18941 ;;		On entry : 0/0
 18942 ;;		On exit  : 0/0
 18943 ;;		Unchanged: 0/0
 18944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18946 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18948 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18949 ;;Total ram usage:        2 bytes
 18950 ;; Hardware stack levels used:    1
 18951 ;; Hardware stack levels required when called:    7
 18952 ;; This function calls:
 18953 ;;		Nothing
 18954 ;; This function is called by:
 18955 ;;		_lcdInst
 18956 ;;		_putch
 18957 ;; This function uses a non-reentrant model
 18958 ;;
 18959                           
 18960                           	psect	text63
 18961  005004                     __ptext63:
 18962                           	opt stack 0
 18963  005004                     _lcdNibble:
 18964                           	opt stack 20
 18965                           
 18966                           ;incstack = 0
 18967                           ;lcdNibble@data stored from wreg
 18968  005004  0100               	movlb	0	; () banked
 18969  005006  6F81               	movwf	lcdNibble@data& (0+255),b
 18970                           
 18971                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 18972  005008  9EF2               	bcf	intcon,7,c	;volatile
 18973                           
 18974                           ;lcd.c: 28: char temp = data & 0xF0;
 18975  00500A  0100               	movlb	0	; () banked
 18976  00500C  5181               	movf	lcdNibble@data& (0+255),w,b
 18977  00500E  0BF0               	andlw	240
 18978  005010  0100               	movlb	0	; () banked
 18979  005012  6F80               	movwf	lcdNibble@temp& (0+255),b
 18980                           
 18981                           ;lcd.c: 29: LATD = LATD & 0x0F;
 18982  005014  508C               	movf	3980,w,c	;volatile
 18983  005016  0B0F               	andlw	15
 18984  005018  6E8C               	movwf	3980,c	;volatile
 18985                           
 18986                           ;lcd.c: 30: LATD = temp | LATD;
 18987  00501A  0100               	movlb	0	; () banked
 18988  00501C  5180               	movf	lcdNibble@temp& (0+255),w,b
 18989  00501E  108C               	iorwf	3980,w,c	;volatile
 18990  005020  6E8C               	movwf	3980,c	;volatile
 18991                           
 18992                           ; BSR set to: 0
 18993                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 18994  005022  868C               	bsf	3980,3,c	;volatile
 18995                           
 18996                           ; BSR set to: 0
 18997                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18998  005024  0E42               	movlw	66
 18999  005026                     u11217:
 19000  005026  2EE8               	decfsz	wreg,f,c
 19001  005028  D7FE               	bra	u11217
 19002  00502A  D000               	nop2	
 19003                           
 19004                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 19005  00502C  968C               	bcf	3980,3,c	;volatile
 19006                           
 19007                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19008  00502E  0E42               	movlw	66
 19009  005030                     u11227:
 19010  005030  2EE8               	decfsz	wreg,f,c
 19011  005032  D7FE               	bra	u11227
 19012  005034  D000               	nop2	
 19013                           
 19014                           ;lcd.c: 37: data = data << 4;
 19015  005036  0100               	movlb	0	; () banked
 19016  005038  3981               	swapf	lcdNibble@data& (0+255),w,b
 19017  00503A  0BF0               	andlw	240
 19018  00503C  0100               	movlb	0	; () banked
 19019  00503E  6F81               	movwf	lcdNibble@data& (0+255),b
 19020                           
 19021                           ;lcd.c: 39: temp = data & 0xF0;
 19022  005040  0100               	movlb	0	; () banked
 19023  005042  5181               	movf	lcdNibble@data& (0+255),w,b
 19024  005044  0BF0               	andlw	240
 19025  005046  0100               	movlb	0	; () banked
 19026  005048  6F80               	movwf	lcdNibble@temp& (0+255),b
 19027                           
 19028                           ;lcd.c: 40: LATD = LATD & 0x0F;
 19029  00504A  508C               	movf	3980,w,c	;volatile
 19030  00504C  0B0F               	andlw	15
 19031  00504E  6E8C               	movwf	3980,c	;volatile
 19032                           
 19033                           ;lcd.c: 41: LATD = temp | LATD;
 19034  005050  0100               	movlb	0	; () banked
 19035  005052  5180               	movf	lcdNibble@temp& (0+255),w,b
 19036  005054  108C               	iorwf	3980,w,c	;volatile
 19037  005056  6E8C               	movwf	3980,c	;volatile
 19038                           
 19039                           ; BSR set to: 0
 19040                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 19041  005058  868C               	bsf	3980,3,c	;volatile
 19042                           
 19043                           ; BSR set to: 0
 19044                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19045  00505A  0E42               	movlw	66
 19046  00505C                     u11237:
 19047  00505C  2EE8               	decfsz	wreg,f,c
 19048  00505E  D7FE               	bra	u11237
 19049  005060  D000               	nop2	
 19050                           
 19051                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 19052  005062  968C               	bcf	3980,3,c	;volatile
 19053                           
 19054                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19055  005064  0E42               	movlw	66
 19056  005066                     u11247:
 19057  005066  2EE8               	decfsz	wreg,f,c
 19058  005068  D7FE               	bra	u11247
 19059  00506A  D000               	nop2	
 19060                           
 19061                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 19062  00506C  8EF2               	bsf	intcon,7,c	;volatile
 19063  00506E  0012               	return		;funcret
 19064  005070                     __end_of_lcdNibble:
 19065                           	opt stack 0
 19066                           tblptru	equ	0xFF8
 19067                           tblptrh	equ	0xFF7
 19068                           tblptrl	equ	0xFF6
 19069                           tablat	equ	0xFF5
 19070                           prodh	equ	0xFF4
 19071                           prodl	equ	0xFF3
 19072                           intcon	equ	0xFF2
 19073                           intcon2	equ	0xFF1
 19074                           intcon3	equ	0xFF0
 19075                           indf0	equ	0xFEF
 19076                           postinc0	equ	0xFEE
 19077                           fsr0h	equ	0xFEA
 19078                           fsr0l	equ	0xFE9
 19079                           wreg	equ	0xFE8
 19080                           postdec1	equ	0xFE5
 19081                           fsr1l	equ	0xFE1
 19082                           indf2	equ	0xFDF
 19083                           postinc2	equ	0xFDE
 19084                           postdec2	equ	0xFDD
 19085                           fsr2h	equ	0xFDA
 19086                           fsr2l	equ	0xFD9
 19087                           status	equ	0xFD8
 19088                           
 19089 ;; *************** function _handler *****************
 19090 ;; Defined at:
 19091 ;;		line 16 in file "interruptHandler.c"
 19092 ;; Parameters:    Size  Location     Type
 19093 ;;		None
 19094 ;; Auto vars:     Size  Location     Type
 19095 ;;		None
 19096 ;; Return value:  Size  Location     Type
 19097 ;;                  1    wreg      void 
 19098 ;; Registers used:
 19099 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19100 ;; Tracked objects:
 19101 ;;		On entry : 0/0
 19102 ;;		On exit  : 0/0
 19103 ;;		Unchanged: 0/0
 19104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19107 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19108 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19109 ;;Total ram usage:       16 bytes
 19110 ;; Hardware stack levels used:    1
 19111 ;; Hardware stack levels required when called:    6
 19112 ;; This function calls:
 19113 ;;		_printSortTimer
 19114 ;;		_updateArmState
 19115 ;;		_updateMenu
 19116 ;;		_updateServoStates
 19117 ;;		i2_change_state_to_menu_start
 19118 ;; This function is called by:
 19119 ;;		Interrupt level 2
 19120 ;; This function uses a non-reentrant model
 19121 ;;
 19122                           
 19123                           	psect	intcode
 19124  000008                     __pintcode:
 19125                           	opt stack 0
 19126  000008                     _handler:
 19127                           	opt stack 18
 19128                           
 19129                           ;incstack = 0
 19130  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19131  00000A  EDB6  F01C         	call	int_func,f	;refresh shadow registers
 19132                           tblptru	equ	0xFF8
 19133                           tblptrh	equ	0xFF7
 19134                           tblptrl	equ	0xFF6
 19135                           tablat	equ	0xFF5
 19136                           prodh	equ	0xFF4
 19137                           prodl	equ	0xFF3
 19138                           intcon	equ	0xFF2
 19139                           intcon2	equ	0xFF1
 19140                           intcon3	equ	0xFF0
 19141                           indf0	equ	0xFEF
 19142                           postinc0	equ	0xFEE
 19143                           fsr0h	equ	0xFEA
 19144                           fsr0l	equ	0xFE9
 19145                           wreg	equ	0xFE8
 19146                           postdec1	equ	0xFE5
 19147                           fsr1l	equ	0xFE1
 19148                           indf2	equ	0xFDF
 19149                           postinc2	equ	0xFDE
 19150                           postdec2	equ	0xFDD
 19151                           fsr2h	equ	0xFDA
 19152                           fsr2l	equ	0xFD9
 19153                           status	equ	0xFD8
 19154                           
 19155                           	psect	intcode_body
 19156  00396C                     __pintcode_body:
 19157                           	opt stack 18
 19158  00396C                     int_func:
 19159                           	opt stack 18
 19160  00396C  0006               	pop		; remove dummy address from shadow register refresh
 19161  00396E  CFFA F04B          	movff	pclath,??_handler+2
 19162  003972  CFFB F04C          	movff	pclatu,??_handler+3
 19163  003976  CFE9 F04D          	movff	fsr0l,??_handler+4
 19164  00397A  CFEA F04E          	movff	fsr0h,??_handler+5
 19165  00397E  CFE1 F04F          	movff	fsr1l,??_handler+6
 19166  003982  CFE2 F050          	movff	fsr1h,??_handler+7
 19167  003986  CFD9 F051          	movff	fsr2l,??_handler+8
 19168  00398A  CFDA F052          	movff	fsr2h,??_handler+9
 19169  00398E  CFF3 F053          	movff	prodl,??_handler+10
 19170  003992  CFF4 F054          	movff	prodh,??_handler+11
 19171  003996  CFF6 F055          	movff	tblptrl,??_handler+12
 19172  00399A  CFF7 F056          	movff	tblptrh,??_handler+13
 19173  00399E  CFF8 F057          	movff	tblptru,??_handler+14
 19174  0039A2  CFF5 F058          	movff	tablat,??_handler+15
 19175                           
 19176                           ;interruptHandler.c: 18: if(INT1IF){
 19177  0039A6  A0F0               	btfss	intcon3,0,c	;volatile
 19178  0039A8  D034               	goto	i2l10133
 19179                           
 19180                           ;interruptHandler.c: 19: INT1IF = 0;
 19181  0039AA  90F0               	bcf	intcon3,0,c	;volatile
 19182                           
 19183                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 19184  0039AC  3881               	swapf	3969,w,c	;volatile
 19185  0039AE  0B0F               	andlw	15
 19186  0039B0  0B0F               	andlw	15
 19187  0039B2  6E49               	movwf	??_handler& (0+255),c
 19188  0039B4  6A4A               	clrf	(??_handler+1)& (0+255),c
 19189  0039B6  0E9F               	movlw	low _keys
 19190  0039B8  2449               	addwf	??_handler,w,c
 19191  0039BA  6EF6               	movwf	tblptrl,c
 19192  0039BC  0EFA               	movlw	high _keys
 19193  0039BE  204A               	addwfc	??_handler+1,w,c
 19194  0039C0  6EF7               	movwf	tblptrh,c
 19195  0039C2                     	if	1	;There are 3 active tblptr bytes
 19196  0039C2  6AF8               	clrf	tblptru,c
 19197  0039C4  0E00               	movlw	low (__mediumconst shr (0+16))
 19198  0039C6  22F8               	addwfc	tblptru,f,c
 19199  0039C8                     	endif
 19200  0039C8  0008               	tblrd		*
 19201  0039CA  CFF5 F07D          	movff	tablat,_input	;volatile
 19202                           
 19203                           ;interruptHandler.c: 21: if(input == '*'){
 19204  0039CE  0E2A               	movlw	42
 19205  0039D0  187D               	xorwf	_input,w,c	;volatile
 19206  0039D2  B4D8               	btfsc	status,2,c
 19207  0039D4  D00D               	goto	i2l10127
 19208  0039D6  D018               	goto	i2l10129
 19209  0039D8                     i2l10117:
 19210                           
 19211                           ;interruptHandler.c: 24: machine_state = Testing_state;
 19212  0039D8  0E03               	movlw	3
 19213  0039DA  D007               	goto	L15
 19214  0039DC                     i2l10119:
 19215                           
 19216                           ; BSR set to: 0
 19217                           ;interruptHandler.c: 27: machine_state = UI_state;
 19218  0039DC  0E00               	movlw	0
 19219  0039DE  0100               	movlb	0	; () banked
 19220  0039E0  6FFC               	movwf	_machine_state& (0+255),b
 19221                           
 19222                           ; BSR set to: 0
 19223                           ;interruptHandler.c: 28: change_state_to_menu_start();
 19224  0039E2  ECE0  F02C         	call	i2_change_state_to_menu_start	;wreg free
 19225                           
 19226                           ;interruptHandler.c: 29: break;
 19227  0039E6  D015               	goto	i2l10133
 19228  0039E8                     i2l10123:
 19229                           
 19230                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 19231  0039E8  0E02               	movlw	2
 19232  0039EA                     L15:
 19233  0039EA  0100               	movlb	0	; () banked
 19234  0039EC  6FFC               	movwf	_machine_state& (0+255),b
 19235                           
 19236                           ; BSR set to: 0
 19237                           ;interruptHandler.c: 33: }
 19238                           
 19239                           ;interruptHandler.c: 32: break;
 19240  0039EE  D011               	goto	i2l10133
 19241  0039F0                     i2l10127:
 19242  0039F0  0100               	movlb	0	; () banked
 19243  0039F2  51FC               	movf	_machine_state& (0+255),w,b
 19244                           
 19245                           ; Switch size 1, requested type "space"
 19246                           ; Number of cases is 3, Range of values is 0 to 3
 19247                           ; switch strategies available:
 19248                           ; Name         Instructions Cycles
 19249                           ; simple_byte           10     6 (average)
 19250                           ;	Chosen strategy is simple_byte
 19251  0039F4  0A00               	xorlw	0	; case 0
 19252  0039F6  B4D8               	btfsc	status,2,c
 19253  0039F8  D7EF               	goto	i2l10117
 19254  0039FA  0A01               	xorlw	1	; case 1
 19255  0039FC  B4D8               	btfsc	status,2,c
 19256  0039FE  D7F4               	goto	i2l10123
 19257  003A00  0A02               	xorlw	2	; case 3
 19258  003A02  B4D8               	btfsc	status,2,c
 19259  003A04  D7EB               	goto	i2l10119
 19260                           
 19261                           ; BSR set to: 0
 19262                           ;interruptHandler.c: 34: }
 19263  003A06  D005               	goto	i2l10133
 19264  003A08                     i2l10129:
 19265                           
 19266                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 19267  003A08  0100               	movlb	0	; () banked
 19268  003A0A  51FC               	movf	_machine_state& (0+255),w,b
 19269  003A0C  B4D8               	btfsc	status,2,c
 19270                           
 19271                           ; BSR set to: 0
 19272                           ;interruptHandler.c: 36: updateMenu();
 19273  003A0E  EC37  F018         	call	_updateMenu	;wreg free
 19274  003A12                     i2l10133:
 19275                           
 19276                           ;interruptHandler.c: 37: }
 19277                           ;interruptHandler.c: 38: }
 19278                           ;interruptHandler.c: 41: if(TMR0IF){
 19279  003A12  A4F2               	btfss	intcon,2,c	;volatile
 19280  003A14  D00C               	goto	i2l10147
 19281                           
 19282                           ;interruptHandler.c: 42: TMR0IF = 0;
 19283  003A16  94F2               	bcf	intcon,2,c	;volatile
 19284                           
 19285                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 19286  003A18  0100               	movlb	0	; () banked
 19287  003A1A  05FC               	decf	_machine_state& (0+255),w,b
 19288  003A1C  A4D8               	btfss	status,2,c
 19289  003A1E  D007               	goto	i2l10147
 19290                           
 19291                           ; BSR set to: 0
 19292                           ;interruptHandler.c: 44: printSortTimer();
 19293  003A20  ECB2  F01A         	call	_printSortTimer	;wreg free
 19294                           
 19295                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 19296  003A24  0E85               	movlw	133
 19297  003A26  6ED7               	movwf	4055,c	;volatile
 19298                           
 19299                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 19300  003A28  0EEE               	movlw	238
 19301  003A2A  6ED6               	movwf	4054,c	;volatile
 19302                           
 19303                           ;interruptHandler.c: 48: TMR0ON = 1;
 19304  003A2C  8ED5               	bsf	4053,7,c	;volatile
 19305  003A2E                     i2l10147:
 19306                           
 19307                           ;interruptHandler.c: 49: }
 19308                           ;interruptHandler.c: 50: }
 19309                           ;interruptHandler.c: 53: if(TMR1IF){
 19310  003A2E  A09E               	btfss	3998,0,c	;volatile
 19311  003A30  D028               	goto	i2l10175
 19312                           
 19313                           ;interruptHandler.c: 54: TMR1IF = 0;
 19314  003A32  909E               	bcf	3998,0,c	;volatile
 19315                           
 19316                           ;interruptHandler.c: 55: TMR1ON = 0;
 19317  003A34  90CD               	bcf	4045,0,c	;volatile
 19318                           
 19319                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 19320  003A36  0100               	movlb	0	; () banked
 19321  003A38  05FC               	decf	_machine_state& (0+255),w,b
 19322  003A3A  A4D8               	btfss	status,2,c
 19323  003A3C  D022               	goto	i2l10175
 19324                           
 19325                           ; BSR set to: 0
 19326                           ;interruptHandler.c: 57: if(was_low_1){
 19327  003A3E  5077               	movf	_was_low_1,w,c	;volatile
 19328  003A40  1078               	iorwf	_was_low_1+1,w,c	;volatile
 19329  003A42  B4D8               	btfsc	status,2,c
 19330  003A44  D00A               	goto	i2l1049
 19331                           
 19332                           ; BSR set to: 0
 19333                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 19334  003A46  828B               	bsf	3979,1,c	;volatile
 19335                           
 19336                           ; BSR set to: 0
 19337                           ;interruptHandler.c: 59: was_low_1 = 0;
 19338  003A48  0E00               	movlw	0
 19339  003A4A  6E78               	movwf	_was_low_1+1,c	;volatile
 19340  003A4C  0E00               	movlw	0
 19341  003A4E  6E77               	movwf	_was_low_1,c	;volatile
 19342                           
 19343                           ; BSR set to: 0
 19344                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 19345  003A50  C059  FFCF         	movff	_servoTimes,4047	;volatile
 19346                           
 19347                           ; BSR set to: 0
 19348                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 19349  003A54  C05B  FFCE         	movff	_servoTimes+2,4046	;volatile
 19350                           
 19351                           ;interruptHandler.c: 62: }
 19352  003A58  D00D               	goto	i2l10169
 19353  003A5A                     i2l1049:
 19354                           
 19355                           ; BSR set to: 0
 19356                           ;interruptHandler.c: 63: else{
 19357                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 19358  003A5A  928B               	bcf	3979,1,c	;volatile
 19359                           
 19360                           ; BSR set to: 0
 19361                           ;interruptHandler.c: 65: was_low_1 = 1;
 19362  003A5C  0E00               	movlw	0
 19363  003A5E  6E78               	movwf	_was_low_1+1,c	;volatile
 19364  003A60  0E01               	movlw	1
 19365  003A62  6E77               	movwf	_was_low_1,c	;volatile
 19366                           
 19367                           ; BSR set to: 0
 19368                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 19369  003A64  5059               	movf	_servoTimes,w,c
 19370  003A66  0800               	sublw	0
 19371  003A68  0F20               	addlw	32
 19372  003A6A  6ECF               	movwf	4047,c	;volatile
 19373                           
 19374                           ; BSR set to: 0
 19375                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 19376  003A6C  505B               	movf	_servoTimes+2,w,c
 19377  003A6E  0800               	sublw	0
 19378  003A70  0F20               	addlw	32
 19379  003A72  6ECE               	movwf	4046,c	;volatile
 19380  003A74                     i2l10169:
 19381                           
 19382                           ; BSR set to: 0
 19383                           ;interruptHandler.c: 68: }
 19384                           ;interruptHandler.c: 69: TMR1ON = 1;
 19385  003A74  80CD               	bsf	4045,0,c	;volatile
 19386                           
 19387                           ; BSR set to: 0
 19388                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 19389  003A76  0E0A               	movlw	10
 19390  003A78  266D               	addwf	_servo_timer_counter,f,c	;volatile
 19391  003A7A  0E00               	movlw	0
 19392  003A7C  226E               	addwfc	_servo_timer_counter+1,f,c	;volatile
 19393                           
 19394                           ; BSR set to: 0
 19395                           ;interruptHandler.c: 72: updateServoStates();
 19396  003A7E  ECAB  F01D         	call	_updateServoStates	;wreg free
 19397  003A82                     i2l10175:
 19398                           
 19399                           ;interruptHandler.c: 73: }
 19400                           ;interruptHandler.c: 74: }
 19401                           ;interruptHandler.c: 77: if(TMR2IF){
 19402  003A82  A29E               	btfss	3998,1,c	;volatile
 19403  003A84  D026               	goto	i2l10201
 19404                           
 19405                           ;interruptHandler.c: 80: TMR2IF = 0;
 19406  003A86  929E               	bcf	3998,1,c	;volatile
 19407                           
 19408                           ;interruptHandler.c: 81: TMR2ON = 0;
 19409  003A88  94CA               	bcf	4042,2,c	;volatile
 19410                           
 19411                           ;interruptHandler.c: 82: timer2_counter++;
 19412  003A8A  4A73               	infsnz	_timer2_counter,f,c	;volatile
 19413  003A8C  2A74               	incf	_timer2_counter+1,f,c	;volatile
 19414                           
 19415                           ;interruptHandler.c: 83: if(machine_state == Sorting_state){
 19416  003A8E  0100               	movlb	0	; () banked
 19417  003A90  05FC               	decf	_machine_state& (0+255),w,b
 19418  003A92  A4D8               	btfss	status,2,c
 19419  003A94  D01E               	goto	i2l10201
 19420                           
 19421                           ; BSR set to: 0
 19422                           ;interruptHandler.c: 84: if(was_low_2 && (timer2_counter == 2)){
 19423  003A96  5079               	movf	_was_low_2,w,c	;volatile
 19424  003A98  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19425  003A9A  B4D8               	btfsc	status,2,c
 19426  003A9C  D00A               	goto	i2l10191
 19427                           
 19428                           ; BSR set to: 0
 19429  003A9E  0E02               	movlw	2
 19430  003AA0  1873               	xorwf	_timer2_counter,w,c	;volatile
 19431  003AA2  1074               	iorwf	_timer2_counter+1,w,c	;volatile
 19432  003AA4  A4D8               	btfss	status,2,c
 19433  003AA6  D005               	goto	i2l10191
 19434                           
 19435                           ; BSR set to: 0
 19436                           ;interruptHandler.c: 86: LATBbits.LATB3 = 1;
 19437  003AA8  868A               	bsf	3978,3,c	;volatile
 19438                           
 19439                           ; BSR set to: 0
 19440                           ;interruptHandler.c: 87: was_low_2 = 0;
 19441  003AAA  0E00               	movlw	0
 19442  003AAC  6E7A               	movwf	_was_low_2+1,c	;volatile
 19443  003AAE  0E00               	movlw	0
 19444  003AB0  D008               	goto	L16
 19445  003AB2                     i2l10191:
 19446                           
 19447                           ; BSR set to: 0
 19448                           ;interruptHandler.c: 90: else if(!was_low_2){
 19449  003AB2  5079               	movf	_was_low_2,w,c	;volatile
 19450  003AB4  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19451  003AB6  A4D8               	btfss	status,2,c
 19452  003AB8  D009               	goto	i2l10197
 19453                           
 19454                           ; BSR set to: 0
 19455                           ;interruptHandler.c: 91: LATBbits.LATB3 = 0;
 19456  003ABA  968A               	bcf	3978,3,c	;volatile
 19457                           
 19458                           ; BSR set to: 0
 19459                           ;interruptHandler.c: 92: was_low_2 = 1;
 19460  003ABC  0E00               	movlw	0
 19461  003ABE  6E7A               	movwf	_was_low_2+1,c	;volatile
 19462  003AC0  0E01               	movlw	1
 19463  003AC2                     L16:
 19464  003AC2  6E79               	movwf	_was_low_2,c	;volatile
 19465                           
 19466                           ;interruptHandler.c: 93: timer2_counter = 0;
 19467  003AC4  0E00               	movlw	0
 19468  003AC6  6E74               	movwf	_timer2_counter+1,c	;volatile
 19469  003AC8  0E00               	movlw	0
 19470  003ACA  6E73               	movwf	_timer2_counter,c	;volatile
 19471  003ACC                     i2l10197:
 19472                           
 19473                           ; BSR set to: 0
 19474                           ;interruptHandler.c: 94: }
 19475                           ;interruptHandler.c: 95: updateArmState();
 19476  003ACC  ECB0  F02A         	call	_updateArmState	;wreg free
 19477                           
 19478                           ;interruptHandler.c: 96: TMR2ON = 1;
 19479  003AD0  84CA               	bsf	4042,2,c	;volatile
 19480  003AD2                     i2l10201:
 19481                           
 19482                           ;interruptHandler.c: 97: }
 19483                           ;interruptHandler.c: 98: }
 19484                           ;interruptHandler.c: 101: if(TMR3IF){
 19485  003AD2  A2A1               	btfss	4001,1,c	;volatile
 19486  003AD4  D022               	goto	i2l1060
 19487                           
 19488                           ;interruptHandler.c: 102: TMR3IF = 0;
 19489  003AD6  92A1               	bcf	4001,1,c	;volatile
 19490                           
 19491                           ;interruptHandler.c: 103: TMR3ON = 0;
 19492  003AD8  90B1               	bcf	4017,0,c	;volatile
 19493                           
 19494                           ;interruptHandler.c: 104: if(machine_state == Sorting_state){
 19495  003ADA  0100               	movlb	0	; () banked
 19496  003ADC  05FC               	decf	_machine_state& (0+255),w,b
 19497  003ADE  A4D8               	btfss	status,2,c
 19498  003AE0  D01C               	goto	i2l1060
 19499                           
 19500                           ; BSR set to: 0
 19501                           ;interruptHandler.c: 105: if(was_low_3){
 19502  003AE2  507B               	movf	_was_low_3,w,c	;volatile
 19503  003AE4  107C               	iorwf	_was_low_3+1,w,c	;volatile
 19504  003AE6  B4D8               	btfsc	status,2,c
 19505  003AE8  D00A               	goto	i2l1058
 19506                           
 19507                           ; BSR set to: 0
 19508                           ;interruptHandler.c: 106: LATCbits.LATC2 = 1;
 19509  003AEA  848B               	bsf	3979,2,c	;volatile
 19510                           
 19511                           ; BSR set to: 0
 19512                           ;interruptHandler.c: 107: was_low_3 = 0;
 19513  003AEC  0E00               	movlw	0
 19514  003AEE  6E7C               	movwf	_was_low_3+1,c	;volatile
 19515  003AF0  0E00               	movlw	0
 19516  003AF2  6E7B               	movwf	_was_low_3,c	;volatile
 19517                           
 19518                           ; BSR set to: 0
 19519                           ;interruptHandler.c: 108: TMR3H = servoTimes[2];
 19520  003AF4  C05D  FFB3         	movff	_servoTimes+4,4019	;volatile
 19521                           
 19522                           ; BSR set to: 0
 19523                           ;interruptHandler.c: 109: TMR3L = servoTimes[3];
 19524  003AF8  C05F  FFB2         	movff	_servoTimes+6,4018	;volatile
 19525                           
 19526                           ;interruptHandler.c: 110: }
 19527  003AFC  D00D               	goto	i2l10223
 19528  003AFE                     i2l1058:
 19529                           
 19530                           ; BSR set to: 0
 19531                           ;interruptHandler.c: 111: else{
 19532                           ;interruptHandler.c: 112: LATCbits.LATC2 = 0;
 19533  003AFE  948B               	bcf	3979,2,c	;volatile
 19534                           
 19535                           ; BSR set to: 0
 19536                           ;interruptHandler.c: 113: was_low_3 = 1;
 19537  003B00  0E00               	movlw	0
 19538  003B02  6E7C               	movwf	_was_low_3+1,c	;volatile
 19539  003B04  0E01               	movlw	1
 19540  003B06  6E7B               	movwf	_was_low_3,c	;volatile
 19541                           
 19542                           ; BSR set to: 0
 19543                           ;interruptHandler.c: 114: TMR3H = 20000 - servoTimes[2];
 19544  003B08  505D               	movf	_servoTimes+4,w,c
 19545  003B0A  0800               	sublw	0
 19546  003B0C  0F20               	addlw	32
 19547  003B0E  6EB3               	movwf	4019,c	;volatile
 19548                           
 19549                           ; BSR set to: 0
 19550                           ;interruptHandler.c: 115: TMR3L = 20000 - servoTimes[3];
 19551  003B10  505F               	movf	_servoTimes+6,w,c
 19552  003B12  0800               	sublw	0
 19553  003B14  0F20               	addlw	32
 19554  003B16  6EB2               	movwf	4018,c	;volatile
 19555  003B18                     i2l10223:
 19556                           
 19557                           ; BSR set to: 0
 19558                           ;interruptHandler.c: 116: }
 19559                           ;interruptHandler.c: 117: TMR3ON = 1;
 19560  003B18  80B1               	bsf	4017,0,c	;volatile
 19561  003B1A                     i2l1060:
 19562  003B1A  C058  FFF5         	movff	??_handler+15,tablat
 19563  003B1E  C057  FFF8         	movff	??_handler+14,tblptru
 19564  003B22  C056  FFF7         	movff	??_handler+13,tblptrh
 19565  003B26  C055  FFF6         	movff	??_handler+12,tblptrl
 19566  003B2A  C054  FFF4         	movff	??_handler+11,prodh
 19567  003B2E  C053  FFF3         	movff	??_handler+10,prodl
 19568  003B32  C052  FFDA         	movff	??_handler+9,fsr2h
 19569  003B36  C051  FFD9         	movff	??_handler+8,fsr2l
 19570  003B3A  C050  FFE2         	movff	??_handler+7,fsr1h
 19571  003B3E  C04F  FFE1         	movff	??_handler+6,fsr1l
 19572  003B42  C04E  FFEA         	movff	??_handler+5,fsr0h
 19573  003B46  C04D  FFE9         	movff	??_handler+4,fsr0l
 19574  003B4A  C04C  FFFB         	movff	??_handler+3,pclatu
 19575  003B4E  C04B  FFFA         	movff	??_handler+2,pclath
 19576  003B52  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19577  003B54  0011               	retfie		f
 19578  003B56                     __end_of_handler:
 19579                           	opt stack 0
 19580                           pclatu	equ	0xFFB
 19581                           pclath	equ	0xFFA
 19582                           tblptru	equ	0xFF8
 19583                           tblptrh	equ	0xFF7
 19584                           tblptrl	equ	0xFF6
 19585                           tablat	equ	0xFF5
 19586                           prodh	equ	0xFF4
 19587                           prodl	equ	0xFF3
 19588                           intcon	equ	0xFF2
 19589                           intcon2	equ	0xFF1
 19590                           intcon3	equ	0xFF0
 19591                           indf0	equ	0xFEF
 19592                           postinc0	equ	0xFEE
 19593                           fsr0h	equ	0xFEA
 19594                           fsr0l	equ	0xFE9
 19595                           wreg	equ	0xFE8
 19596                           postdec1	equ	0xFE5
 19597                           fsr1h	equ	0xFE2
 19598                           fsr1l	equ	0xFE1
 19599                           indf2	equ	0xFDF
 19600                           postinc2	equ	0xFDE
 19601                           postdec2	equ	0xFDD
 19602                           fsr2h	equ	0xFDA
 19603                           fsr2l	equ	0xFD9
 19604                           status	equ	0xFD8
 19605                           
 19606 ;; *************** function _updateServoStates *****************
 19607 ;; Defined at:
 19608 ;;		line 595 in file "sort.c"
 19609 ;; Parameters:    Size  Location     Type
 19610 ;;		None
 19611 ;; Auto vars:     Size  Location     Type
 19612 ;;		None
 19613 ;; Return value:  Size  Location     Type
 19614 ;;                  1    wreg      void 
 19615 ;; Registers used:
 19616 ;;		wreg, status,2, status,0, cstack
 19617 ;; Tracked objects:
 19618 ;;		On entry : 0/0
 19619 ;;		On exit  : 0/0
 19620 ;;		Unchanged: 0/0
 19621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19624 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19625 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19626 ;;Total ram usage:        2 bytes
 19627 ;; Hardware stack levels used:    1
 19628 ;; Hardware stack levels required when called:    1
 19629 ;; This function calls:
 19630 ;;		i2_updateServoPosition
 19631 ;; This function is called by:
 19632 ;;		_handler
 19633 ;; This function uses a non-reentrant model
 19634 ;;
 19635                           
 19636                           	psect	text65
 19637  003B56                     __ptext65:
 19638                           	opt stack 0
 19639  003B56                     _updateServoStates:
 19640                           	opt stack 22
 19641                           
 19642                           ;sort.c: 597: if(servo_timer_counter >= servo_timer_target){
 19643                           
 19644                           ;incstack = 0
 19645  003B56  506F               	movf	_servo_timer_target,w,c	;volatile
 19646  003B58  5C6D               	subwf	_servo_timer_counter,w,c	;volatile
 19647  003B5A  506E               	movf	_servo_timer_counter+1,w,c	;volatile
 19648  003B5C  0A80               	xorlw	128
 19649  003B5E  6E09               	movwf	??_updateServoStates& (0+255),c
 19650  003B60  5070               	movf	_servo_timer_target+1,w,c	;volatile
 19651  003B62  0A80               	xorlw	128
 19652  003B64  5809               	subwfb	??_updateServoStates& (0+255),w,c
 19653  003B66  A0D8               	btfss	status,0,c
 19654  003B68  0012               	return	
 19655                           
 19656                           ;sort.c: 599: if(f_panning_to_bin){
 19657  003B6A  5067               	movf	_f_panning_to_bin,w,c	;volatile
 19658  003B6C  1068               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 19659  003B6E  A4D8               	btfss	status,2,c
 19660  003B70  D036               	goto	i2l9991
 19661  003B72  D05F               	goto	i2l9995
 19662  003B74                     i2l9965:
 19663                           
 19664                           ;sort.c: 603: updateServoPosition(1260, 3);
 19665  003B74  0E04               	movlw	4
 19666  003B76  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19667  003B78  0EEC               	movlw	236
 19668  003B7A  6E01               	movwf	i2updateServoPosition@time_us,c
 19669  003B7C  0E00               	movlw	0
 19670  003B7E  6E04               	movwf	i2updateServoPosition@timer+1,c
 19671  003B80  0E03               	movlw	3
 19672  003B82  6E03               	movwf	i2updateServoPosition@timer,c
 19673  003B84  EC38  F028         	call	i2_updateServoPosition	;wreg free
 19674  003B88  D025               	goto	i2l9985
 19675  003B8A                     i2l9969:
 19676                           
 19677                           ;sort.c: 605: servo_timer_target = 700;
 19678  003B8A  0E02               	movlw	2
 19679  003B8C  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19680  003B8E  0EBC               	movlw	188
 19681  003B90  6E6F               	movwf	_servo_timer_target,c	;volatile
 19682                           
 19683                           ;sort.c: 606: break;
 19684  003B92  D04A               	goto	i2l9993
 19685  003B94                     i2l9971:
 19686                           
 19687                           ;sort.c: 608: updateServoPosition(1260, 3);
 19688  003B94  0E04               	movlw	4
 19689  003B96  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19690  003B98  0EEC               	movlw	236
 19691  003B9A  6E01               	movwf	i2updateServoPosition@time_us,c
 19692  003B9C  0E00               	movlw	0
 19693  003B9E  6E04               	movwf	i2updateServoPosition@timer+1,c
 19694  003BA0  0E03               	movlw	3
 19695  003BA2  6E03               	movwf	i2updateServoPosition@timer,c
 19696  003BA4  EC38  F028         	call	i2_updateServoPosition	;wreg free
 19697  003BA8  D015               	goto	i2l9985
 19698  003BAA                     i2l9977:
 19699                           
 19700                           ;sort.c: 614: updateServoPosition(1390, 3);
 19701  003BAA  0E05               	movlw	5
 19702  003BAC  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19703  003BAE  0E6E               	movlw	110
 19704  003BB0  6E01               	movwf	i2updateServoPosition@time_us,c
 19705  003BB2  0E00               	movlw	0
 19706  003BB4  6E04               	movwf	i2updateServoPosition@timer+1,c
 19707  003BB6  0E03               	movlw	3
 19708  003BB8  6E03               	movwf	i2updateServoPosition@timer,c
 19709  003BBA  EC38  F028         	call	i2_updateServoPosition	;wreg free
 19710  003BBE  D00A               	goto	i2l9985
 19711  003BC0                     i2l9983:
 19712                           
 19713                           ;sort.c: 619: updateServoPosition(1390, 3);
 19714  003BC0  0E05               	movlw	5
 19715  003BC2  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19716  003BC4  0E6E               	movlw	110
 19717  003BC6  6E01               	movwf	i2updateServoPosition@time_us,c
 19718  003BC8  0E00               	movlw	0
 19719  003BCA  6E04               	movwf	i2updateServoPosition@timer+1,c
 19720  003BCC  0E03               	movlw	3
 19721  003BCE  6E03               	movwf	i2updateServoPosition@timer,c
 19722  003BD0  EC38  F028         	call	i2_updateServoPosition	;wreg free
 19723  003BD4                     i2l9985:
 19724                           
 19725                           ;sort.c: 620: servo_timer_counter = 0;
 19726  003BD4  0E00               	movlw	0
 19727  003BD6  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19728  003BD8  0E00               	movlw	0
 19729  003BDA  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19730  003BDC  D7D6               	goto	i2l9969
 19731  003BDE                     i2l9991:
 19732  003BDE  C06B  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 19733  003BE2  C06C  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 19734                           
 19735                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 19736                           ; Switch size 1, requested type "space"
 19737                           ; Number of cases is 4, Range of values is 1 to 9
 19738                           ; switch strategies available:
 19739                           ; Name         Instructions Cycles
 19740                           ; simple_byte           13     7 (average)
 19741                           ;	Chosen strategy is simple_byte
 19742  003BE6  500A               	movf	??_updateServoStates+1,w,c
 19743  003BE8  0A01               	xorlw	1	; case 1
 19744  003BEA  B4D8               	btfsc	status,2,c
 19745  003BEC  D00A               	goto	i2l10671
 19746  003BEE  0A02               	xorlw	2	; case 3
 19747  003BF0  B4D8               	btfsc	status,2,c
 19748  003BF2  D00C               	goto	i2l10673
 19749  003BF4  0A05               	xorlw	5	; case 6
 19750  003BF6  B4D8               	btfsc	status,2,c
 19751  003BF8  D00E               	goto	i2l10675
 19752  003BFA  0A0F               	xorlw	15	; case 9
 19753  003BFC  B4D8               	btfsc	status,2,c
 19754  003BFE  D010               	goto	i2l10677
 19755  003C00  D013               	goto	i2l9993
 19756  003C02                     i2l10671:
 19757                           
 19758                           ; Switch size 1, requested type "space"
 19759                           ; Number of cases is 1, Range of values is 244 to 244
 19760                           ; switch strategies available:
 19761                           ; Name         Instructions Cycles
 19762                           ; simple_byte            4     3 (average)
 19763                           ;	Chosen strategy is simple_byte
 19764  003C02  5009               	movf	??_updateServoStates,w,c
 19765  003C04  0AF4               	xorlw	244	; case 244
 19766  003C06  B4D8               	btfsc	status,2,c
 19767  003C08  D7B5               	goto	i2l9965
 19768  003C0A  D00E               	goto	i2l9993
 19769  003C0C                     i2l10673:
 19770                           
 19771                           ; Switch size 1, requested type "space"
 19772                           ; Number of cases is 1, Range of values is 82 to 82
 19773                           ; switch strategies available:
 19774                           ; Name         Instructions Cycles
 19775                           ; simple_byte            4     3 (average)
 19776                           ;	Chosen strategy is simple_byte
 19777  003C0C  5009               	movf	??_updateServoStates,w,c
 19778  003C0E  0A52               	xorlw	82	; case 82
 19779  003C10  B4D8               	btfsc	status,2,c
 19780  003C12  D7C0               	goto	i2l9971
 19781  003C14  D009               	goto	i2l9993
 19782  003C16                     i2l10675:
 19783                           
 19784                           ; Switch size 1, requested type "space"
 19785                           ; Number of cases is 1, Range of values is 134 to 134
 19786                           ; switch strategies available:
 19787                           ; Name         Instructions Cycles
 19788                           ; simple_byte            4     3 (average)
 19789                           ;	Chosen strategy is simple_byte
 19790  003C16  5009               	movf	??_updateServoStates,w,c
 19791  003C18  0A86               	xorlw	134	; case 134
 19792  003C1A  B4D8               	btfsc	status,2,c
 19793  003C1C  D7C6               	goto	i2l9977
 19794  003C1E  D004               	goto	i2l9993
 19795  003C20                     i2l10677:
 19796                           
 19797                           ; Switch size 1, requested type "space"
 19798                           ; Number of cases is 1, Range of values is 96 to 96
 19799                           ; switch strategies available:
 19800                           ; Name         Instructions Cycles
 19801                           ; simple_byte            4     3 (average)
 19802                           ;	Chosen strategy is simple_byte
 19803  003C20  5009               	movf	??_updateServoStates,w,c
 19804  003C22  0A60               	xorlw	96	; case 96
 19805  003C24  B4D8               	btfsc	status,2,c
 19806  003C26  D7CC               	goto	i2l9983
 19807  003C28                     i2l9993:
 19808                           
 19809                           ;sort.c: 626: f_panning_to_bin = 0;
 19810  003C28  0E00               	movlw	0
 19811  003C2A  6E68               	movwf	_f_panning_to_bin+1,c	;volatile
 19812  003C2C  0E00               	movlw	0
 19813  003C2E  6E67               	movwf	_f_panning_to_bin,c	;volatile
 19814                           
 19815                           ;sort.c: 627: }
 19816  003C30  0012               	return	
 19817  003C32                     i2l9995:
 19818                           
 19819                           ;sort.c: 628: else if(pan_servo_state == 1200){
 19820  003C32  0EB0               	movlw	176
 19821  003C34  186B               	xorwf	_pan_servo_state,w,c	;volatile
 19822  003C36  E15A               	bnz	i2l10025
 19823  003C38  0E04               	movlw	4
 19824  003C3A  186C               	xorwf	_pan_servo_state+1,w,c	;volatile
 19825  003C3C  A4D8               	btfss	status,2,c
 19826  003C3E  D056               	goto	i2l10025
 19827                           
 19828                           ;sort.c: 630: servo_timer_counter = 0;
 19829  003C40  0E00               	movlw	0
 19830  003C42  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19831  003C44  0E00               	movlw	0
 19832  003C46  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19833                           
 19834                           ;sort.c: 631: }
 19835  003C48  0012               	return	
 19836  003C4A                     i2l9999:
 19837                           
 19838                           ;sort.c: 636: updateServoPosition(1050, 3);
 19839  003C4A  0E04               	movlw	4
 19840  003C4C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19841  003C4E  0E1A               	movlw	26
 19842  003C50  6E01               	movwf	i2updateServoPosition@time_us,c
 19843  003C52  0E00               	movlw	0
 19844  003C54  6E04               	movwf	i2updateServoPosition@timer+1,c
 19845  003C56  0E03               	movlw	3
 19846  003C58  6E03               	movwf	i2updateServoPosition@timer,c
 19847  003C5A  EC38  F028         	call	i2_updateServoPosition	;wreg free
 19848                           
 19849                           ;sort.c: 637: servo_timer_counter = 0;
 19850  003C5E  0E00               	movlw	0
 19851  003C60  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19852  003C62  0E00               	movlw	0
 19853  003C64  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19854                           
 19855                           ;sort.c: 638: servo_timer_target = 750;
 19856  003C66  0E02               	movlw	2
 19857  003C68  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19858  003C6A  0EEE               	movlw	238
 19859  003C6C  6E6F               	movwf	_servo_timer_target,c	;volatile
 19860                           
 19861                           ;sort.c: 639: break;
 19862  003C6E  0012               	return	
 19863  003C70                     i2l10005:
 19864                           
 19865                           ;sort.c: 641: updateServoPosition(1050, 3);
 19866  003C70  0E04               	movlw	4
 19867  003C72  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19868  003C74  0E1A               	movlw	26
 19869  003C76  6E01               	movwf	i2updateServoPosition@time_us,c
 19870  003C78  0E00               	movlw	0
 19871  003C7A  6E04               	movwf	i2updateServoPosition@timer+1,c
 19872  003C7C  0E03               	movlw	3
 19873  003C7E  6E03               	movwf	i2updateServoPosition@timer,c
 19874  003C80  EC38  F028         	call	i2_updateServoPosition	;wreg free
 19875                           
 19876                           ;sort.c: 642: servo_timer_counter = 0;
 19877  003C84  0E00               	movlw	0
 19878  003C86  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19879  003C88  0E00               	movlw	0
 19880  003C8A  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19881                           
 19882                           ;sort.c: 643: servo_timer_target = 750;
 19883  003C8C  0E02               	movlw	2
 19884  003C8E  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19885  003C90  0EEE               	movlw	238
 19886  003C92  6E6F               	movwf	_servo_timer_target,c	;volatile
 19887                           
 19888                           ;sort.c: 644: break;
 19889  003C94  0012               	return	
 19890  003C96                     i2l10011:
 19891                           
 19892                           ;sort.c: 647: updateServoPosition(1200, 1);
 19893  003C96  0E04               	movlw	4
 19894  003C98  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19895  003C9A  0EB0               	movlw	176
 19896  003C9C  6E01               	movwf	i2updateServoPosition@time_us,c
 19897  003C9E  0E00               	movlw	0
 19898  003CA0  6E04               	movwf	i2updateServoPosition@timer+1,c
 19899  003CA2  0E01               	movlw	1
 19900  003CA4  6E03               	movwf	i2updateServoPosition@timer,c
 19901  003CA6  EC38  F028         	call	i2_updateServoPosition	;wreg free
 19902                           
 19903                           ;sort.c: 648: updateServoPosition(1050, 3);
 19904  003CAA  0E04               	movlw	4
 19905  003CAC  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19906  003CAE  0E1A               	movlw	26
 19907  003CB0  6E01               	movwf	i2updateServoPosition@time_us,c
 19908  003CB2  0E00               	movlw	0
 19909  003CB4  6E04               	movwf	i2updateServoPosition@timer+1,c
 19910  003CB6  0E03               	movlw	3
 19911  003CB8  6E03               	movwf	i2updateServoPosition@timer,c
 19912  003CBA  EC38  F028         	call	i2_updateServoPosition	;wreg free
 19913                           
 19914                           ;sort.c: 649: servo_timer_counter = 0;
 19915  003CBE  0E00               	movlw	0
 19916  003CC0  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19917  003CC2  0E00               	movlw	0
 19918  003CC4  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19919                           
 19920                           ;sort.c: 650: servo_timer_target = 9999;
 19921  003CC6  0E27               	movlw	39
 19922  003CC8  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19923  003CCA  0E0F               	movlw	15
 19924  003CCC  6E6F               	movwf	_servo_timer_target,c	;volatile
 19925                           
 19926                           ;sort.c: 652: f_can_distributed = 1;
 19927  003CCE  0E00               	movlw	0
 19928  003CD0  0101               	movlb	1	; () banked
 19929  003CD2  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
 19930  003CD4  0E01               	movlw	1
 19931  003CD6  6F35               	movwf	_f_can_distributed& (0+255),b
 19932                           
 19933                           ; BSR set to: 1
 19934                           ;sort.c: 653: if(f_lastCan == 1){
 19935  003CD8  0100               	movlb	0	; () banked
 19936  003CDA  05EA               	decf	_f_lastCan& (0+255),w,b
 19937  003CDC  0100               	movlb	0	; () banked
 19938  003CDE  11EB               	iorwf	(_f_lastCan+1)& (0+255),w,b
 19939  003CE0  A4D8               	btfss	status,2,c
 19940  003CE2  0012               	return	
 19941                           
 19942                           ; BSR set to: 0
 19943                           ;sort.c: 654: machine_state = DoneSorting_state;
 19944  003CE4  0E02               	movlw	2
 19945  003CE6  0100               	movlb	0	; () banked
 19946  003CE8  6FFC               	movwf	_machine_state& (0+255),b
 19947                           
 19948                           ; BSR set to: 0
 19949                           ;sort.c: 660: }
 19950                           
 19951                           ; BSR set to: 0
 19952                           ;sort.c: 659: break;
 19953                           
 19954                           ;sort.c: 658: default:
 19955                           
 19956                           ; BSR set to: 0
 19957                           ;sort.c: 655: }
 19958                           ;sort.c: 656: break;
 19959  003CEA  0012               	return	
 19960  003CEC                     i2l10025:
 19961  003CEC  C071  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 19962  003CF0  C072  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 19963                           
 19964                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 19965                           ; Switch size 1, requested type "space"
 19966                           ; Number of cases is 2, Range of values is 4 to 5
 19967                           ; switch strategies available:
 19968                           ; Name         Instructions Cycles
 19969                           ; simple_byte            7     4 (average)
 19970                           ;	Chosen strategy is simple_byte
 19971  003CF4  500A               	movf	??_updateServoStates+1,w,c
 19972  003CF6  0A04               	xorlw	4	; case 4
 19973  003CF8  B4D8               	btfsc	status,2,c
 19974  003CFA  D004               	goto	i2l10679
 19975  003CFC  0A01               	xorlw	1	; case 5
 19976  003CFE  A4D8               	btfss	status,2,c
 19977  003D00  0012               	return	
 19978  003D02  D008               	goto	i2l10681
 19979  003D04                     i2l10679:
 19980                           
 19981                           ; Switch size 1, requested type "space"
 19982                           ; Number of cases is 2, Range of values is 26 to 236
 19983                           ; switch strategies available:
 19984                           ; Name         Instructions Cycles
 19985                           ; simple_byte            7     4 (average)
 19986                           ;	Chosen strategy is simple_byte
 19987  003D04  5009               	movf	??_updateServoStates,w,c
 19988  003D06  0A1A               	xorlw	26	; case 26
 19989  003D08  B4D8               	btfsc	status,2,c
 19990  003D0A  D7C5               	goto	i2l10011
 19991  003D0C  0AF6               	xorlw	246	; case 236
 19992  003D0E  A4D8               	btfss	status,2,c
 19993  003D10  0012               	return	
 19994  003D12  D79B               	goto	i2l9999
 19995  003D14                     i2l10681:
 19996                           
 19997                           ; Switch size 1, requested type "space"
 19998                           ; Number of cases is 1, Range of values is 110 to 110
 19999                           ; switch strategies available:
 20000                           ; Name         Instructions Cycles
 20001                           ; simple_byte            4     3 (average)
 20002                           ;	Chosen strategy is simple_byte
 20003  003D14  5009               	movf	??_updateServoStates,w,c
 20004  003D16  0A6E               	xorlw	110	; case 110
 20005  003D18  A4D8               	btfss	status,2,c
 20006  003D1A  0012               	return	
 20007  003D1C  D7A9               	goto	i2l10005
 20008  003D1E                     __end_of_updateServoStates:
 20009                           	opt stack 0
 20010                           pclatu	equ	0xFFB
 20011                           pclath	equ	0xFFA
 20012                           tblptru	equ	0xFF8
 20013                           tblptrh	equ	0xFF7
 20014                           tblptrl	equ	0xFF6
 20015                           tablat	equ	0xFF5
 20016                           prodh	equ	0xFF4
 20017                           prodl	equ	0xFF3
 20018                           intcon	equ	0xFF2
 20019                           intcon2	equ	0xFF1
 20020                           intcon3	equ	0xFF0
 20021                           indf0	equ	0xFEF
 20022                           postinc0	equ	0xFEE
 20023                           fsr0h	equ	0xFEA
 20024                           fsr0l	equ	0xFE9
 20025                           wreg	equ	0xFE8
 20026                           postdec1	equ	0xFE5
 20027                           fsr1h	equ	0xFE2
 20028                           fsr1l	equ	0xFE1
 20029                           indf2	equ	0xFDF
 20030                           postinc2	equ	0xFDE
 20031                           postdec2	equ	0xFDD
 20032                           fsr2h	equ	0xFDA
 20033                           fsr2l	equ	0xFD9
 20034                           status	equ	0xFD8
 20035                           
 20036 ;; *************** function i2_updateServoPosition *****************
 20037 ;; Defined at:
 20038 ;;		line 580 in file "sort.c"
 20039 ;; Parameters:    Size  Location     Type
 20040 ;;  time_us         2    0[COMRAM] int 
 20041 ;;  timer           2    2[COMRAM] int 
 20042 ;; Auto vars:     Size  Location     Type
 20043 ;;  updateServoP    2    6[COMRAM] unsigned int 
 20044 ;; Return value:  Size  Location     Type
 20045 ;;                  1    wreg      void 
 20046 ;; Registers used:
 20047 ;;		wreg, status,2, status,0
 20048 ;; Tracked objects:
 20049 ;;		On entry : 0/0
 20050 ;;		On exit  : 0/0
 20051 ;;		Unchanged: 0/0
 20052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20053 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20054 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20055 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20056 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20057 ;;Total ram usage:        8 bytes
 20058 ;; Hardware stack levels used:    1
 20059 ;; This function calls:
 20060 ;;		Nothing
 20061 ;; This function is called by:
 20062 ;;		_updateServoStates
 20063 ;; This function uses a non-reentrant model
 20064 ;;
 20065                           
 20066                           	psect	text66
 20067  005070                     __ptext66:
 20068                           	opt stack 0
 20069  005070                     i2_updateServoPosition:
 20070                           	opt stack 22
 20071                           
 20072                           ;sort.c: 581: unsigned int my_time = 65535 - time_us;
 20073                           
 20074                           ;incstack = 0
 20075  005070  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 20076  005074  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 20077  005078  1E05               	comf	??i2_updateServoPosition,f,c
 20078  00507A  1E06               	comf	??i2_updateServoPosition+1,f,c
 20079  00507C  4A05               	infsnz	??i2_updateServoPosition,f,c
 20080  00507E  2A06               	incf	??i2_updateServoPosition+1,f,c
 20081  005080  0EFF               	movlw	255
 20082  005082  2405               	addwf	??i2_updateServoPosition,w,c
 20083  005084  6E07               	movwf	i2updateServoPosition@my_time,c
 20084  005086  0EFF               	movlw	255
 20085  005088  2006               	addwfc	??i2_updateServoPosition+1,w,c
 20086  00508A  6E08               	movwf	i2updateServoPosition@my_time+1,c
 20087                           
 20088                           ;sort.c: 582: switch(timer){
 20089  00508C  D015               	goto	i2l9211
 20090  00508E                     i2l9205:
 20091                           
 20092                           ;sort.c: 584: servoTimes[0] = my_time >> 8;
 20093  00508E  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20094  005090  6E59               	movwf	_servoTimes,c
 20095  005092  6A5A               	clrf	_servoTimes+1,c
 20096                           
 20097                           ;sort.c: 585: servoTimes[1] = my_time & 0xFF;
 20098  005094  5007               	movf	i2updateServoPosition@my_time,w,c
 20099  005096  6E5B               	movwf	_servoTimes+2,c
 20100  005098  6A5C               	clrf	_servoTimes+3,c
 20101                           
 20102                           ;sort.c: 587: pan_servo_state = time_us;
 20103  00509A  C001  F06B         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 20104  00509E  C002  F06C         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 20105  0050A2                     i2l930:
 20106                           
 20107                           ;sort.c: 589: servoTimes[2] = my_time >> 8;
 20108  0050A2  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20109  0050A4  6E5D               	movwf	_servoTimes+4,c
 20110  0050A6  6A5E               	clrf	_servoTimes+5,c
 20111                           
 20112                           ;sort.c: 590: servoTimes[3] = my_time & 0xFF;
 20113  0050A8  5007               	movf	i2updateServoPosition@my_time,w,c
 20114  0050AA  6E5F               	movwf	_servoTimes+6,c
 20115  0050AC  6A60               	clrf	_servoTimes+7,c
 20116                           
 20117                           ;sort.c: 592: tilt_servo_state = time_us;
 20118  0050AE  C001  F071         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 20119  0050B2  C002  F072         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 20120                           
 20121                           ;sort.c: 593: }
 20122  0050B6  0012               	return	
 20123  0050B8                     i2l9211:
 20124  0050B8  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 20125  0050BC  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 20126                           
 20127                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20128                           ; Switch size 1, requested type "space"
 20129                           ; Number of cases is 1, Range of values is 0 to 0
 20130                           ; switch strategies available:
 20131                           ; Name         Instructions Cycles
 20132                           ; simple_byte            4     3 (average)
 20133                           ;	Chosen strategy is simple_byte
 20134  0050C0  5006               	movf	??i2_updateServoPosition+1,w,c
 20135  0050C2  0A00               	xorlw	0	; case 0
 20136  0050C4  A4D8               	btfss	status,2,c
 20137  0050C6  0012               	return	
 20138                           
 20139                           ; Switch size 1, requested type "space"
 20140                           ; Number of cases is 2, Range of values is 1 to 3
 20141                           ; switch strategies available:
 20142                           ; Name         Instructions Cycles
 20143                           ; simple_byte            7     4 (average)
 20144                           ;	Chosen strategy is simple_byte
 20145  0050C8  5005               	movf	??i2_updateServoPosition,w,c
 20146  0050CA  0A01               	xorlw	1	; case 1
 20147  0050CC  B4D8               	btfsc	status,2,c
 20148  0050CE  D7DF               	goto	i2l9205
 20149  0050D0  0A02               	xorlw	2	; case 3
 20150  0050D2  A4D8               	btfss	status,2,c
 20151  0050D4  0012               	return	
 20152  0050D6  D7E5               	goto	i2l930
 20153  0050D8                     __end_ofi2_updateServoPosition:
 20154                           	opt stack 0
 20155                           pclatu	equ	0xFFB
 20156                           pclath	equ	0xFFA
 20157                           tblptru	equ	0xFF8
 20158                           tblptrh	equ	0xFF7
 20159                           tblptrl	equ	0xFF6
 20160                           tablat	equ	0xFF5
 20161                           prodh	equ	0xFF4
 20162                           prodl	equ	0xFF3
 20163                           intcon	equ	0xFF2
 20164                           intcon2	equ	0xFF1
 20165                           intcon3	equ	0xFF0
 20166                           indf0	equ	0xFEF
 20167                           postinc0	equ	0xFEE
 20168                           fsr0h	equ	0xFEA
 20169                           fsr0l	equ	0xFE9
 20170                           wreg	equ	0xFE8
 20171                           postdec1	equ	0xFE5
 20172                           fsr1h	equ	0xFE2
 20173                           fsr1l	equ	0xFE1
 20174                           indf2	equ	0xFDF
 20175                           postinc2	equ	0xFDE
 20176                           postdec2	equ	0xFDD
 20177                           fsr2h	equ	0xFDA
 20178                           fsr2l	equ	0xFD9
 20179                           status	equ	0xFD8
 20180                           
 20181 ;; *************** function _updateMenu *****************
 20182 ;; Defined at:
 20183 ;;		line 216 in file "UI.c"
 20184 ;; Parameters:    Size  Location     Type
 20185 ;;		None
 20186 ;; Auto vars:     Size  Location     Type
 20187 ;;		None
 20188 ;; Return value:  Size  Location     Type
 20189 ;;                  1    wreg      void 
 20190 ;; Registers used:
 20191 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20192 ;; Tracked objects:
 20193 ;;		On entry : 0/0
 20194 ;;		On exit  : 0/0
 20195 ;;		Unchanged: 0/0
 20196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20199 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20200 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20201 ;;Total ram usage:        2 bytes
 20202 ;; Hardware stack levels used:    1
 20203 ;; Hardware stack levels required when called:    5
 20204 ;; This function calls:
 20205 ;;		_change_state_to_logs_11
 20206 ;;		_change_state_to_logs_12
 20207 ;;		_change_state_to_logs_22
 20208 ;;		_change_state_to_logs_23
 20209 ;;		_change_state_to_logs_33
 20210 ;;		_change_state_to_logs_34
 20211 ;;		_change_state_to_menu_11
 20212 ;;		_change_state_to_menu_23
 20213 ;;		_dispLogs
 20214 ;;		_inputHandler
 20215 ;;		i2_change_state_to_menu_12
 20216 ;;		i2_change_state_to_menu_22
 20217 ;;		i2_change_state_to_menu_start
 20218 ;; This function is called by:
 20219 ;;		_handler
 20220 ;; This function uses a non-reentrant model
 20221 ;;
 20222                           
 20223                           	psect	text67
 20224  00306E                     __ptext67:
 20225                           	opt stack 0
 20226  00306E                     _updateMenu:
 20227                           	opt stack 18
 20228                           
 20229                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 20230                           
 20231                           ;incstack = 0
 20232  00306E  0E00               	movlw	0
 20233  003070  6E76               	movwf	_up+1,c
 20234  003072  0E00               	movlw	0
 20235  003074  6E75               	movwf	_up,c
 20236  003076  0E00               	movlw	0
 20237  003078  6E64               	movwf	_down+1,c
 20238  00307A  0E00               	movlw	0
 20239  00307C  6E63               	movwf	_down,c
 20240  00307E  0E00               	movlw	0
 20241  003080  6E66               	movwf	_enter+1,c
 20242  003082  0E00               	movlw	0
 20243  003084  6E65               	movwf	_enter,c
 20244  003086  0E00               	movlw	0
 20245  003088  6E62               	movwf	_back+1,c
 20246  00308A  0E00               	movlw	0
 20247  00308C  6E61               	movwf	_back,c
 20248                           
 20249                           ;UI.c: 218: (INTCONbits.GIE = 0);
 20250  00308E  9EF2               	bcf	intcon,7,c	;volatile
 20251                           
 20252                           ;UI.c: 220: if (inputHandler()
 20253                           ;UI.c: 223: ){
 20254  003090  ECC0  F01B         	call	_inputHandler	;wreg free
 20255  003094  502A               	movf	?_inputHandler,w,c
 20256  003096  102B               	iorwf	?_inputHandler+1,w,c
 20257  003098  A4D8               	btfss	status,2,c
 20258  00309A  D112               	goto	i2l9737
 20259  00309C  D146               	goto	i2l268
 20260  00309E                     i2l9589:
 20261                           
 20262                           ;UI.c: 227: change_state_to_menu_11();
 20263  00309E  ECCD  F02B         	call	_change_state_to_menu_11	;wreg free
 20264                           
 20265                           ;UI.c: 228: break;
 20266  0030A2  D143               	goto	i2l268
 20267  0030A4                     i2l9591:
 20268                           
 20269                           ;UI.c: 231: if(up){
 20270  0030A4  5075               	movf	_up,w,c
 20271  0030A6  1076               	iorwf	_up+1,w,c
 20272  0030A8  B4D8               	btfsc	status,2,c
 20273  0030AA  D003               	goto	i2l9595
 20274                           
 20275                           ;UI.c: 232: change_state_to_menu_23();
 20276  0030AC  ECB5  F02B         	call	_change_state_to_menu_23	;wreg free
 20277                           
 20278                           ;UI.c: 233: }
 20279  0030B0  D13C               	goto	i2l268
 20280  0030B2                     i2l9595:
 20281                           
 20282                           ;UI.c: 234: else if(down){
 20283  0030B2  5063               	movf	_down,w,c
 20284  0030B4  1064               	iorwf	_down+1,w,c
 20285  0030B6  B4D8               	btfsc	status,2,c
 20286  0030B8  D003               	goto	i2l9599
 20287                           
 20288                           ;UI.c: 235: change_state_to_menu_12();
 20289  0030BA  EC9D  F02B         	call	i2_change_state_to_menu_12	;wreg free
 20290                           
 20291                           ;UI.c: 236: }
 20292  0030BE  D135               	goto	i2l268
 20293  0030C0                     i2l9599:
 20294                           
 20295                           ;UI.c: 237: else if(enter){
 20296  0030C0  5065               	movf	_enter,w,c
 20297  0030C2  1066               	iorwf	_enter+1,w,c
 20298  0030C4  B4D8               	btfsc	status,2,c
 20299  0030C6  D131               	goto	i2l268
 20300                           
 20301                           ;UI.c: 238: change_state_to_menu_start();
 20302  0030C8  ECE0  F02C         	call	i2_change_state_to_menu_start	;wreg free
 20303                           
 20304                           ;UI.c: 239: }
 20305                           ;UI.c: 240: break;
 20306  0030CC  D12E               	goto	i2l268
 20307  0030CE                     i2l9603:
 20308                           
 20309                           ;UI.c: 243: if(up){
 20310  0030CE  5075               	movf	_up,w,c
 20311  0030D0  1076               	iorwf	_up+1,w,c
 20312  0030D2  B4D8               	btfsc	status,2,c
 20313  0030D4  D003               	goto	i2l9607
 20314                           
 20315                           ;UI.c: 244: change_state_to_menu_11();
 20316  0030D6  ECCD  F02B         	call	_change_state_to_menu_11	;wreg free
 20317                           
 20318                           ;UI.c: 245: }
 20319  0030DA  D127               	goto	i2l268
 20320  0030DC                     i2l9607:
 20321                           
 20322                           ;UI.c: 246: else if(down){
 20323  0030DC  5063               	movf	_down,w,c
 20324  0030DE  1064               	iorwf	_down+1,w,c
 20325  0030E0  B4D8               	btfsc	status,2,c
 20326  0030E2  D011               	goto	i2l9623
 20327                           
 20328                           ;UI.c: 247: change_state_to_menu_23();
 20329  0030E4  ECB5  F02B         	call	_change_state_to_menu_23	;wreg free
 20330                           
 20331                           ;UI.c: 248: }
 20332  0030E8  D120               	goto	i2l268
 20333  0030EA                     i2l9615:
 20334                           
 20335                           ;UI.c: 255: if(up){
 20336  0030EA  5075               	movf	_up,w,c
 20337  0030EC  1076               	iorwf	_up+1,w,c
 20338  0030EE  B4D8               	btfsc	status,2,c
 20339  0030F0  D003               	goto	i2l9619
 20340                           
 20341                           ;UI.c: 256: change_state_to_menu_11();
 20342  0030F2  ECCD  F02B         	call	_change_state_to_menu_11	;wreg free
 20343                           
 20344                           ;UI.c: 257: }
 20345  0030F6  D119               	goto	i2l268
 20346  0030F8                     i2l9619:
 20347                           
 20348                           ;UI.c: 258: else if(down){
 20349  0030F8  5063               	movf	_down,w,c
 20350  0030FA  1064               	iorwf	_down+1,w,c
 20351  0030FC  B4D8               	btfsc	status,2,c
 20352  0030FE  D003               	goto	i2l9623
 20353                           
 20354                           ;UI.c: 259: change_state_to_menu_23();
 20355  003100  ECB5  F02B         	call	_change_state_to_menu_23	;wreg free
 20356                           
 20357                           ;UI.c: 260: }
 20358  003104  D112               	goto	i2l268
 20359  003106                     i2l9623:
 20360                           
 20361                           ;UI.c: 261: else if(enter){
 20362  003106  5065               	movf	_enter,w,c
 20363  003108  1066               	iorwf	_enter+1,w,c
 20364  00310A  B4D8               	btfsc	status,2,c
 20365  00310C  D10E               	goto	i2l268
 20366                           
 20367                           ;UI.c: 262: machine_state = Sorting_state;
 20368  00310E  0E01               	movlw	1
 20369  003110  0100               	movlb	0	; () banked
 20370  003112  6FFC               	movwf	_machine_state& (0+255),b
 20371                           
 20372                           ; BSR set to: 0
 20373                           ;UI.c: 263: }
 20374                           ;UI.c: 264: break;
 20375                           
 20376                           ; BSR set to: 0
 20377                           
 20378                           ; BSR set to: 0
 20379  003114  D10A               	goto	i2l268
 20380  003116                     i2l9627:
 20381                           
 20382                           ;UI.c: 267: if(up){
 20383  003116  5075               	movf	_up,w,c
 20384  003118  1076               	iorwf	_up+1,w,c
 20385  00311A  B4D8               	btfsc	status,2,c
 20386  00311C  D003               	goto	i2l9631
 20387                           
 20388                           ;UI.c: 268: change_state_to_menu_22();
 20389  00311E  EC85  F02B         	call	i2_change_state_to_menu_22	;wreg free
 20390                           
 20391                           ;UI.c: 269: }
 20392  003122  D103               	goto	i2l268
 20393  003124                     i2l9631:
 20394                           
 20395                           ;UI.c: 270: else if(down){
 20396  003124  5063               	movf	_down,w,c
 20397  003126  1064               	iorwf	_down+1,w,c
 20398  003128  B4D8               	btfsc	status,2,c
 20399  00312A  D003               	goto	i2l9635
 20400                           
 20401                           ;UI.c: 271: change_state_to_menu_11();
 20402  00312C  ECCD  F02B         	call	_change_state_to_menu_11	;wreg free
 20403                           
 20404                           ;UI.c: 272: }
 20405  003130  D0FC               	goto	i2l268
 20406  003132                     i2l9635:
 20407                           
 20408                           ;UI.c: 273: else if(enter){
 20409  003132  5065               	movf	_enter,w,c
 20410  003134  1066               	iorwf	_enter+1,w,c
 20411  003136  B4D8               	btfsc	status,2,c
 20412  003138  D0F8               	goto	i2l268
 20413                           
 20414                           ;UI.c: 274: change_state_to_logs_11();
 20415  00313A  EC45  F02C         	call	_change_state_to_logs_11	;wreg free
 20416                           
 20417                           ;UI.c: 275: }
 20418                           ;UI.c: 276: break;
 20419  00313E  D0F5               	goto	i2l268
 20420  003140                     i2l9639:
 20421                           
 20422                           ;UI.c: 279: if(up){
 20423  003140  5075               	movf	_up,w,c
 20424  003142  1076               	iorwf	_up+1,w,c
 20425  003144  B4D8               	btfsc	status,2,c
 20426  003146  D003               	goto	i2l9643
 20427                           
 20428                           ;UI.c: 280: change_state_to_logs_34();
 20429  003148  ECE5  F02B         	call	_change_state_to_logs_34	;wreg free
 20430                           
 20431                           ;UI.c: 281: }
 20432  00314C  D0EE               	goto	i2l268
 20433  00314E                     i2l9643:
 20434                           
 20435                           ;UI.c: 282: else if(down){
 20436  00314E  5063               	movf	_down,w,c
 20437  003150  1064               	iorwf	_down+1,w,c
 20438  003152  B4D8               	btfsc	status,2,c
 20439  003154  D003               	goto	i2l9647
 20440                           
 20441                           ;UI.c: 283: change_state_to_logs_12();
 20442  003156  EC2D  F02C         	call	_change_state_to_logs_12	;wreg free
 20443                           
 20444                           ;UI.c: 284: }
 20445  00315A  D0E7               	goto	i2l268
 20446  00315C                     i2l9647:
 20447                           
 20448                           ;UI.c: 285: else if(enter){
 20449  00315C  5065               	movf	_enter,w,c
 20450  00315E  1066               	iorwf	_enter+1,w,c
 20451  003160  B4D8               	btfsc	status,2,c
 20452  003162  D007               	goto	i2l9651
 20453                           
 20454                           ;UI.c: 286: dispLogs(1);
 20455  003164  0E00               	movlw	0
 20456  003166  6E13               	movwf	dispLogs@myLog+1,c
 20457  003168  0E01               	movlw	1
 20458  00316A  6E12               	movwf	dispLogs@myLog,c
 20459  00316C  EC1A  F02D         	call	_dispLogs	;wreg free
 20460                           
 20461                           ;UI.c: 287: }
 20462  003170  D0DC               	goto	i2l268
 20463  003172                     i2l9651:
 20464                           
 20465                           ;UI.c: 288: else if(back){
 20466  003172  5061               	movf	_back,w,c
 20467  003174  1062               	iorwf	_back+1,w,c
 20468  003176  B4D8               	btfsc	status,2,c
 20469  003178  D0D8               	goto	i2l268
 20470                           
 20471                           ;UI.c: 289: change_state_to_menu_23();
 20472  00317A  ECB5  F02B         	call	_change_state_to_menu_23	;wreg free
 20473                           
 20474                           ;UI.c: 290: }
 20475                           ;UI.c: 291: break;
 20476  00317E  D0D5               	goto	i2l268
 20477  003180                     i2l9655:
 20478                           
 20479                           ;UI.c: 294: if(up){
 20480  003180  5075               	movf	_up,w,c
 20481  003182  1076               	iorwf	_up+1,w,c
 20482  003184  B4D8               	btfsc	status,2,c
 20483  003186  D003               	goto	i2l9659
 20484                           
 20485                           ;UI.c: 295: change_state_to_logs_11();
 20486  003188  EC45  F02C         	call	_change_state_to_logs_11	;wreg free
 20487                           
 20488                           ;UI.c: 296: }
 20489  00318C  D0CE               	goto	i2l268
 20490  00318E                     i2l9659:
 20491                           
 20492                           ;UI.c: 297: else if(down){
 20493  00318E  5063               	movf	_down,w,c
 20494  003190  1064               	iorwf	_down+1,w,c
 20495  003192  B4D8               	btfsc	status,2,c
 20496  003194  D003               	goto	i2l9663
 20497                           
 20498                           ;UI.c: 298: change_state_to_logs_23();
 20499  003196  EC74  F02C         	call	_change_state_to_logs_23	;wreg free
 20500                           
 20501                           ;UI.c: 299: }
 20502  00319A  D0C7               	goto	i2l268
 20503  00319C                     i2l9663:
 20504                           
 20505                           ;UI.c: 300: else if(enter){
 20506  00319C  5065               	movf	_enter,w,c
 20507  00319E  1066               	iorwf	_enter+1,w,c
 20508  0031A0  B4D8               	btfsc	status,2,c
 20509  0031A2  D007               	goto	i2l9667
 20510                           
 20511                           ;UI.c: 301: dispLogs(2);
 20512  0031A4  0E00               	movlw	0
 20513  0031A6  6E13               	movwf	dispLogs@myLog+1,c
 20514  0031A8  0E02               	movlw	2
 20515  0031AA  6E12               	movwf	dispLogs@myLog,c
 20516  0031AC  EC1A  F02D         	call	_dispLogs	;wreg free
 20517                           
 20518                           ;UI.c: 302: }
 20519  0031B0  D0BC               	goto	i2l268
 20520  0031B2                     i2l9667:
 20521                           
 20522                           ;UI.c: 303: else if(back){
 20523  0031B2  5061               	movf	_back,w,c
 20524  0031B4  1062               	iorwf	_back+1,w,c
 20525  0031B6  B4D8               	btfsc	status,2,c
 20526  0031B8  D0B8               	goto	i2l268
 20527                           
 20528                           ;UI.c: 304: change_state_to_menu_23();
 20529  0031BA  ECB5  F02B         	call	_change_state_to_menu_23	;wreg free
 20530                           
 20531                           ;UI.c: 305: }
 20532                           ;UI.c: 306: break;
 20533  0031BE  D0B5               	goto	i2l268
 20534  0031C0                     i2l9671:
 20535                           
 20536                           ;UI.c: 309: if(up){
 20537  0031C0  5075               	movf	_up,w,c
 20538  0031C2  1076               	iorwf	_up+1,w,c
 20539  0031C4  B4D8               	btfsc	status,2,c
 20540  0031C6  D003               	goto	i2l9675
 20541                           
 20542                           ;UI.c: 310: change_state_to_logs_11();
 20543  0031C8  EC45  F02C         	call	_change_state_to_logs_11	;wreg free
 20544                           
 20545                           ;UI.c: 311: }
 20546  0031CC  D0AE               	goto	i2l268
 20547  0031CE                     i2l9675:
 20548                           
 20549                           ;UI.c: 312: else if(down){
 20550  0031CE  5063               	movf	_down,w,c
 20551  0031D0  1064               	iorwf	_down+1,w,c
 20552  0031D2  B4D8               	btfsc	status,2,c
 20553  0031D4  D003               	goto	i2l9679
 20554                           
 20555                           ;UI.c: 313: change_state_to_logs_23();
 20556  0031D6  EC74  F02C         	call	_change_state_to_logs_23	;wreg free
 20557                           
 20558                           ;UI.c: 314: }
 20559  0031DA  D0A7               	goto	i2l268
 20560  0031DC                     i2l9679:
 20561                           
 20562                           ;UI.c: 315: else if(enter){
 20563  0031DC  5065               	movf	_enter,w,c
 20564  0031DE  1066               	iorwf	_enter+1,w,c
 20565  0031E0  B4D8               	btfsc	status,2,c
 20566  0031E2  D007               	goto	i2l9683
 20567                           
 20568                           ;UI.c: 316: dispLogs(2);
 20569  0031E4  0E00               	movlw	0
 20570  0031E6  6E13               	movwf	dispLogs@myLog+1,c
 20571  0031E8  0E02               	movlw	2
 20572  0031EA  6E12               	movwf	dispLogs@myLog,c
 20573  0031EC  EC1A  F02D         	call	_dispLogs	;wreg free
 20574                           
 20575                           ;UI.c: 317: }
 20576  0031F0  D09C               	goto	i2l268
 20577  0031F2                     i2l9683:
 20578                           
 20579                           ;UI.c: 318: else if(back){
 20580  0031F2  5061               	movf	_back,w,c
 20581  0031F4  1062               	iorwf	_back+1,w,c
 20582  0031F6  B4D8               	btfsc	status,2,c
 20583  0031F8  D098               	goto	i2l268
 20584                           
 20585                           ;UI.c: 319: change_state_to_menu_23();
 20586  0031FA  ECB5  F02B         	call	_change_state_to_menu_23	;wreg free
 20587                           
 20588                           ;UI.c: 320: }
 20589                           ;UI.c: 321: break;
 20590  0031FE  D095               	goto	i2l268
 20591  003200                     i2l9687:
 20592                           
 20593                           ;UI.c: 324: if(up){
 20594  003200  5075               	movf	_up,w,c
 20595  003202  1076               	iorwf	_up+1,w,c
 20596  003204  B4D8               	btfsc	status,2,c
 20597  003206  D003               	goto	i2l9691
 20598                           
 20599                           ;UI.c: 325: change_state_to_logs_22();
 20600  003208  EC15  F02C         	call	_change_state_to_logs_22	;wreg free
 20601                           
 20602                           ;UI.c: 326: }
 20603  00320C  D08E               	goto	i2l268
 20604  00320E                     i2l9691:
 20605                           
 20606                           ;UI.c: 327: else if(down){
 20607  00320E  5063               	movf	_down,w,c
 20608  003210  1064               	iorwf	_down+1,w,c
 20609  003212  B4D8               	btfsc	status,2,c
 20610  003214  D003               	goto	i2l9695
 20611                           
 20612                           ;UI.c: 328: change_state_to_logs_34();
 20613  003216  ECE5  F02B         	call	_change_state_to_logs_34	;wreg free
 20614                           
 20615                           ;UI.c: 329: }
 20616  00321A  D087               	goto	i2l268
 20617  00321C                     i2l9695:
 20618                           
 20619                           ;UI.c: 330: else if(enter){
 20620  00321C  5065               	movf	_enter,w,c
 20621  00321E  1066               	iorwf	_enter+1,w,c
 20622  003220  B4D8               	btfsc	status,2,c
 20623  003222  D007               	goto	i2l9699
 20624                           
 20625                           ;UI.c: 331: dispLogs(3);
 20626  003224  0E00               	movlw	0
 20627  003226  6E13               	movwf	dispLogs@myLog+1,c
 20628  003228  0E03               	movlw	3
 20629  00322A  6E12               	movwf	dispLogs@myLog,c
 20630  00322C  EC1A  F02D         	call	_dispLogs	;wreg free
 20631                           
 20632                           ;UI.c: 332: }
 20633  003230  D07C               	goto	i2l268
 20634  003232                     i2l9699:
 20635                           
 20636                           ;UI.c: 333: else if(back){
 20637  003232  5061               	movf	_back,w,c
 20638  003234  1062               	iorwf	_back+1,w,c
 20639  003236  B4D8               	btfsc	status,2,c
 20640  003238  D078               	goto	i2l268
 20641                           
 20642                           ;UI.c: 334: change_state_to_menu_23();
 20643  00323A  ECB5  F02B         	call	_change_state_to_menu_23	;wreg free
 20644                           
 20645                           ;UI.c: 335: }
 20646                           ;UI.c: 336: break;
 20647  00323E  D075               	goto	i2l268
 20648  003240                     i2l9703:
 20649                           
 20650                           ;UI.c: 339: if(up){
 20651  003240  5075               	movf	_up,w,c
 20652  003242  1076               	iorwf	_up+1,w,c
 20653  003244  B4D8               	btfsc	status,2,c
 20654  003246  D003               	goto	i2l9707
 20655                           
 20656                           ;UI.c: 340: change_state_to_logs_22();
 20657  003248  EC15  F02C         	call	_change_state_to_logs_22	;wreg free
 20658                           
 20659                           ;UI.c: 341: }
 20660  00324C  D06E               	goto	i2l268
 20661  00324E                     i2l9707:
 20662                           
 20663                           ;UI.c: 342: else if(down){
 20664  00324E  5063               	movf	_down,w,c
 20665  003250  1064               	iorwf	_down+1,w,c
 20666  003252  B4D8               	btfsc	status,2,c
 20667  003254  D003               	goto	i2l9711
 20668                           
 20669                           ;UI.c: 343: change_state_to_logs_34();
 20670  003256  ECE5  F02B         	call	_change_state_to_logs_34	;wreg free
 20671                           
 20672                           ;UI.c: 344: }
 20673  00325A  D067               	goto	i2l268
 20674  00325C                     i2l9711:
 20675                           
 20676                           ;UI.c: 345: else if(enter){
 20677  00325C  5065               	movf	_enter,w,c
 20678  00325E  1066               	iorwf	_enter+1,w,c
 20679  003260  B4D8               	btfsc	status,2,c
 20680  003262  D007               	goto	i2l9715
 20681                           
 20682                           ;UI.c: 346: dispLogs(3);
 20683  003264  0E00               	movlw	0
 20684  003266  6E13               	movwf	dispLogs@myLog+1,c
 20685  003268  0E03               	movlw	3
 20686  00326A  6E12               	movwf	dispLogs@myLog,c
 20687  00326C  EC1A  F02D         	call	_dispLogs	;wreg free
 20688                           
 20689                           ;UI.c: 347: }
 20690  003270  D05C               	goto	i2l268
 20691  003272                     i2l9715:
 20692                           
 20693                           ;UI.c: 348: else if(back){
 20694  003272  5061               	movf	_back,w,c
 20695  003274  1062               	iorwf	_back+1,w,c
 20696  003276  B4D8               	btfsc	status,2,c
 20697  003278  D058               	goto	i2l268
 20698                           
 20699                           ;UI.c: 349: change_state_to_menu_23();
 20700  00327A  ECB5  F02B         	call	_change_state_to_menu_23	;wreg free
 20701                           
 20702                           ;UI.c: 350: }
 20703                           ;UI.c: 351: break;
 20704  00327E  D055               	goto	i2l268
 20705  003280                     i2l9719:
 20706                           
 20707                           ;UI.c: 354: if(up){
 20708  003280  5075               	movf	_up,w,c
 20709  003282  1076               	iorwf	_up+1,w,c
 20710  003284  B4D8               	btfsc	status,2,c
 20711  003286  D003               	goto	i2l9723
 20712                           
 20713                           ;UI.c: 355: change_state_to_logs_33();
 20714  003288  ECFD  F02B         	call	_change_state_to_logs_33	;wreg free
 20715                           
 20716                           ;UI.c: 356: }
 20717  00328C  D04E               	goto	i2l268
 20718  00328E                     i2l9723:
 20719                           
 20720                           ;UI.c: 357: else if(down){
 20721  00328E  5063               	movf	_down,w,c
 20722  003290  1064               	iorwf	_down+1,w,c
 20723  003292  B4D8               	btfsc	status,2,c
 20724  003294  D003               	goto	i2l9727
 20725                           
 20726                           ;UI.c: 358: change_state_to_logs_11();
 20727  003296  EC45  F02C         	call	_change_state_to_logs_11	;wreg free
 20728                           
 20729                           ;UI.c: 359: }
 20730  00329A  D047               	goto	i2l268
 20731  00329C                     i2l9727:
 20732                           
 20733                           ;UI.c: 360: else if(enter){
 20734  00329C  5065               	movf	_enter,w,c
 20735  00329E  1066               	iorwf	_enter+1,w,c
 20736  0032A0  B4D8               	btfsc	status,2,c
 20737  0032A2  D007               	goto	i2l9731
 20738                           
 20739                           ;UI.c: 361: dispLogs(4);
 20740  0032A4  0E00               	movlw	0
 20741  0032A6  6E13               	movwf	dispLogs@myLog+1,c
 20742  0032A8  0E04               	movlw	4
 20743  0032AA  6E12               	movwf	dispLogs@myLog,c
 20744  0032AC  EC1A  F02D         	call	_dispLogs	;wreg free
 20745                           
 20746                           ;UI.c: 362: }
 20747  0032B0  D03C               	goto	i2l268
 20748  0032B2                     i2l9731:
 20749                           
 20750                           ;UI.c: 363: else if(back){
 20751  0032B2  5061               	movf	_back,w,c
 20752  0032B4  1062               	iorwf	_back+1,w,c
 20753  0032B6  B4D8               	btfsc	status,2,c
 20754  0032B8  D038               	goto	i2l268
 20755                           
 20756                           ;UI.c: 364: change_state_to_menu_23();
 20757  0032BA  ECB5  F02B         	call	_change_state_to_menu_23	;wreg free
 20758                           
 20759                           ;UI.c: 370: }
 20760                           
 20761                           ;UI.c: 369: break;
 20762                           
 20763                           ;UI.c: 368: default:
 20764                           
 20765                           ;UI.c: 365: }
 20766                           ;UI.c: 366: break;
 20767  0032BE  D035               	goto	i2l268
 20768  0032C0                     i2l9737:
 20769  0032C0  C0E6  F043         	movff	_cur_state,??_updateMenu
 20770  0032C4  C0E7  F044         	movff	_cur_state+1,??_updateMenu+1
 20771                           
 20772                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 20773                           ; Switch size 1, requested type "space"
 20774                           ; Number of cases is 3, Range of values is 0 to 4
 20775                           ; switch strategies available:
 20776                           ; Name         Instructions Cycles
 20777                           ; simple_byte           10     6 (average)
 20778                           ;	Chosen strategy is simple_byte
 20779  0032C8  5044               	movf	??_updateMenu+1,w,c
 20780  0032CA  0A00               	xorlw	0	; case 0
 20781  0032CC  B4D8               	btfsc	status,2,c
 20782  0032CE  D007               	goto	i2l10685
 20783  0032D0  0A03               	xorlw	3	; case 3
 20784  0032D2  B4D8               	btfsc	status,2,c
 20785  0032D4  D015               	goto	i2l10687
 20786  0032D6  0A07               	xorlw	7	; case 4
 20787  0032D8  B4D8               	btfsc	status,2,c
 20788  0032DA  D020               	goto	i2l10689
 20789  0032DC  D026               	goto	i2l268
 20790  0032DE                     i2l10685:
 20791                           
 20792                           ; Switch size 1, requested type "space"
 20793                           ; Number of cases is 5, Range of values is 0 to 23
 20794                           ; switch strategies available:
 20795                           ; Name         Instructions Cycles
 20796                           ; simple_byte           16     9 (average)
 20797                           ;	Chosen strategy is simple_byte
 20798  0032DE  5043               	movf	??_updateMenu,w,c
 20799  0032E0  0A00               	xorlw	0	; case 0
 20800  0032E2  B4D8               	btfsc	status,2,c
 20801  0032E4  D6DC               	goto	i2l9589
 20802  0032E6  0A0B               	xorlw	11	; case 11
 20803  0032E8  B4D8               	btfsc	status,2,c
 20804  0032EA  D6DC               	goto	i2l9591
 20805  0032EC  0A07               	xorlw	7	; case 12
 20806  0032EE  B4D8               	btfsc	status,2,c
 20807  0032F0  D6EE               	goto	i2l9603
 20808  0032F2  0A1A               	xorlw	26	; case 22
 20809  0032F4  B4D8               	btfsc	status,2,c
 20810  0032F6  D6F9               	goto	i2l9615
 20811  0032F8  0A01               	xorlw	1	; case 23
 20812  0032FA  B4D8               	btfsc	status,2,c
 20813  0032FC  D70C               	goto	i2l9627
 20814  0032FE  D015               	goto	i2l268
 20815  003300                     i2l10687:
 20816                           
 20817                           ; Switch size 1, requested type "space"
 20818                           ; Number of cases is 4, Range of values is 243 to 255
 20819                           ; switch strategies available:
 20820                           ; Name         Instructions Cycles
 20821                           ; simple_byte           13     7 (average)
 20822                           ;	Chosen strategy is simple_byte
 20823  003300  5043               	movf	??_updateMenu,w,c
 20824  003302  0AF3               	xorlw	243	; case 243
 20825  003304  B4D8               	btfsc	status,2,c
 20826  003306  D71C               	goto	i2l9639
 20827  003308  0A07               	xorlw	7	; case 244
 20828  00330A  B4D8               	btfsc	status,2,c
 20829  00330C  D739               	goto	i2l9655
 20830  00330E  0A0A               	xorlw	10	; case 254
 20831  003310  B4D8               	btfsc	status,2,c
 20832  003312  D756               	goto	i2l9671
 20833  003314  0A01               	xorlw	1	; case 255
 20834  003316  B4D8               	btfsc	status,2,c
 20835  003318  D773               	goto	i2l9687
 20836  00331A  D007               	goto	i2l268
 20837  00331C                     i2l10689:
 20838                           
 20839                           ; Switch size 1, requested type "space"
 20840                           ; Number of cases is 2, Range of values is 9 to 10
 20841                           ; switch strategies available:
 20842                           ; Name         Instructions Cycles
 20843                           ; simple_byte            7     4 (average)
 20844                           ;	Chosen strategy is simple_byte
 20845  00331C  5043               	movf	??_updateMenu,w,c
 20846  00331E  0A09               	xorlw	9	; case 9
 20847  003320  B4D8               	btfsc	status,2,c
 20848  003322  D78E               	goto	i2l9703
 20849  003324  0A03               	xorlw	3	; case 10
 20850  003326  B4D8               	btfsc	status,2,c
 20851  003328  D7AB               	goto	i2l9719
 20852  00332A                     i2l268:
 20853                           
 20854                           ;UI.c: 371: }
 20855                           ;UI.c: 372: (INTCONbits.GIE = 1);
 20856  00332A  8EF2               	bsf	intcon,7,c	;volatile
 20857  00332C  0012               	return		;funcret
 20858  00332E                     __end_of_updateMenu:
 20859                           	opt stack 0
 20860                           pclatu	equ	0xFFB
 20861                           pclath	equ	0xFFA
 20862                           tblptru	equ	0xFF8
 20863                           tblptrh	equ	0xFF7
 20864                           tblptrl	equ	0xFF6
 20865                           tablat	equ	0xFF5
 20866                           prodh	equ	0xFF4
 20867                           prodl	equ	0xFF3
 20868                           intcon	equ	0xFF2
 20869                           intcon2	equ	0xFF1
 20870                           intcon3	equ	0xFF0
 20871                           indf0	equ	0xFEF
 20872                           postinc0	equ	0xFEE
 20873                           fsr0h	equ	0xFEA
 20874                           fsr0l	equ	0xFE9
 20875                           wreg	equ	0xFE8
 20876                           postdec1	equ	0xFE5
 20877                           fsr1h	equ	0xFE2
 20878                           fsr1l	equ	0xFE1
 20879                           indf2	equ	0xFDF
 20880                           postinc2	equ	0xFDE
 20881                           postdec2	equ	0xFDD
 20882                           fsr2h	equ	0xFDA
 20883                           fsr2l	equ	0xFD9
 20884                           status	equ	0xFD8
 20885                           
 20886 ;; *************** function i2_change_state_to_menu_start *****************
 20887 ;; Defined at:
 20888 ;;		line 477 in file "UI.c"
 20889 ;; Parameters:    Size  Location     Type
 20890 ;;		None
 20891 ;; Auto vars:     Size  Location     Type
 20892 ;;		None
 20893 ;; Return value:  Size  Location     Type
 20894 ;;                  1    wreg      void 
 20895 ;; Registers used:
 20896 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20897 ;; Tracked objects:
 20898 ;;		On entry : 0/0
 20899 ;;		On exit  : 0/0
 20900 ;;		Unchanged: 0/0
 20901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20905 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20906 ;;Total ram usage:        0 bytes
 20907 ;; Hardware stack levels used:    1
 20908 ;; Hardware stack levels required when called:    4
 20909 ;; This function calls:
 20910 ;;		i2_lcdInst
 20911 ;;		i2_printRTC
 20912 ;;		i2_printf
 20913 ;; This function is called by:
 20914 ;;		_updateMenu
 20915 ;;		_handler
 20916 ;; This function uses a non-reentrant model
 20917 ;;
 20918                           
 20919                           	psect	text68
 20920  0059C0                     __ptext68:
 20921                           	opt stack 0
 20922  0059C0                     i2_change_state_to_menu_start:
 20923                           	opt stack 19
 20924                           
 20925                           ;UI.c: 478: cur_state = 0;
 20926                           
 20927                           ;incstack = 0
 20928  0059C0  0E00               	movlw	0
 20929  0059C2  0100               	movlb	0	; () banked
 20930  0059C4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 20931  0059C6  0E00               	movlw	0
 20932  0059C8  6FE6               	movwf	_cur_state& (0+255),b
 20933                           
 20934                           ; BSR set to: 0
 20935                           ;UI.c: 480: lcdInst(0b10000000);;
 20936  0059CA  0E80               	movlw	128
 20937  0059CC  ECB6  F02D         	call	i2_lcdInst
 20938                           
 20939                           ;UI.c: 481: printRTC();
 20940  0059D0  EC97  F019         	call	i2_printRTC	;wreg free
 20941                           
 20942                           ;UI.c: 482: lcdInst(0b11000000);;
 20943  0059D4  0EC0               	movlw	192
 20944  0059D6  ECB6  F02D         	call	i2_lcdInst
 20945                           
 20946                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 20947  0059DA  0EEB               	movlw	low STR_30
 20948  0059DC  6E0D               	movwf	i2printf@f,c
 20949  0059DE  0EFD               	movlw	high STR_30
 20950  0059E0  6E0E               	movwf	i2printf@f+1,c
 20951  0059E2  EC11  F012         	call	i2_printf	;wreg free
 20952  0059E6  0012               	return		;funcret
 20953  0059E8                     __end_ofi2_change_state_to_menu_start:
 20954                           	opt stack 0
 20955                           pclatu	equ	0xFFB
 20956                           pclath	equ	0xFFA
 20957                           tblptru	equ	0xFF8
 20958                           tblptrh	equ	0xFF7
 20959                           tblptrl	equ	0xFF6
 20960                           tablat	equ	0xFF5
 20961                           prodh	equ	0xFF4
 20962                           prodl	equ	0xFF3
 20963                           intcon	equ	0xFF2
 20964                           intcon2	equ	0xFF1
 20965                           intcon3	equ	0xFF0
 20966                           indf0	equ	0xFEF
 20967                           postinc0	equ	0xFEE
 20968                           fsr0h	equ	0xFEA
 20969                           fsr0l	equ	0xFE9
 20970                           wreg	equ	0xFE8
 20971                           postdec1	equ	0xFE5
 20972                           fsr1h	equ	0xFE2
 20973                           fsr1l	equ	0xFE1
 20974                           indf2	equ	0xFDF
 20975                           postinc2	equ	0xFDE
 20976                           postdec2	equ	0xFDD
 20977                           fsr2h	equ	0xFDA
 20978                           fsr2l	equ	0xFD9
 20979                           status	equ	0xFD8
 20980                           
 20981 ;; *************** function i2_printRTC *****************
 20982 ;; Defined at:
 20983 ;;		line 63 in file "RTC.c"
 20984 ;; Parameters:    Size  Location     Type
 20985 ;;		None
 20986 ;; Auto vars:     Size  Location     Type
 20987 ;;  printRTC       14   44[COMRAM] int [7]
 20988 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 20989 ;;  printRTC        2   64[COMRAM] int 
 20990 ;;  printRTC        2   58[COMRAM] int 
 20991 ;; Return value:  Size  Location     Type
 20992 ;;                  1    wreg      void 
 20993 ;; Registers used:
 20994 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20995 ;; Tracked objects:
 20996 ;;		On entry : 0/0
 20997 ;;		On exit  : 0/0
 20998 ;;		Unchanged: 0/0
 20999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21001 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21002 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21003 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21004 ;;Total ram usage:       25 bytes
 21005 ;; Hardware stack levels used:    1
 21006 ;; Hardware stack levels required when called:    3
 21007 ;; This function calls:
 21008 ;;		i2_getRTC
 21009 ;;		i2_lcdInst
 21010 ;;		i2_printf
 21011 ;;		i2_strcpy
 21012 ;; This function is called by:
 21013 ;;		i2_change_state_to_menu_start
 21014 ;; This function uses a non-reentrant model
 21015 ;;
 21016                           
 21017                           	psect	text69
 21018  00332E                     __ptext69:
 21019                           	opt stack 0
 21020  00332E                     i2_printRTC:
 21021                           	opt stack 19
 21022                           
 21023                           ;RTC.c: 64: getRTC();
 21024                           
 21025                           ;incstack = 0
 21026  00332E  ECC9  F027         	call	i2_getRTC	;wreg free
 21027                           
 21028                           ;RTC.c: 65: char month[] = "MMM";
 21029  003332  C14D  F03D         	movff	printRTC@F3237,i2printRTC@month
 21030  003336  C14E  F03E         	movff	printRTC@F3237+1,i2printRTC@month+1
 21031  00333A  C14F  F03F         	movff	printRTC@F3237+2,i2printRTC@month+2
 21032  00333E  C150  F040         	movff	printRTC@F3237+3,i2printRTC@month+3
 21033                           
 21034                           ;RTC.c: 66: int INT_time[7];
 21035                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 21036  003342  0E00               	movlw	0
 21037  003344  6E42               	movwf	i2printRTC@i+1,c
 21038  003346  0E00               	movlw	0
 21039  003348  6E41               	movwf	i2printRTC@i,c
 21040  00334A  BE42               	btfsc	i2printRTC@i+1,7,c
 21041  00334C  D006               	goto	i2l7539
 21042  00334E  5042               	movf	i2printRTC@i+1,w,c
 21043  003350  E135               	bnz	i2l627
 21044  003352  0E07               	movlw	7
 21045  003354  5C41               	subwf	i2printRTC@i,w,c
 21046  003356  B0D8               	btfsc	status,0,c
 21047  003358  D031               	goto	i2l627
 21048  00335A                     i2l7539:
 21049                           
 21050                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 21051  00335A  0E1C               	movlw	low _time
 21052  00335C  2441               	addwf	i2printRTC@i,w,c
 21053  00335E  6ED9               	movwf	fsr2l,c
 21054  003360  0E01               	movlw	high _time
 21055  003362  2042               	addwfc	i2printRTC@i+1,w,c
 21056  003364  6EDA               	movwf	fsr2h,c
 21057  003366  50DF               	movf	indf2,w,c
 21058  003368  6E2A               	movwf	??i2_printRTC& (0+255),c
 21059  00336A  3A2A               	swapf	??i2_printRTC,f,c
 21060  00336C  0E0F               	movlw	15
 21061  00336E  162A               	andwf	??i2_printRTC,f,c
 21062  003370  0E0F               	movlw	15
 21063  003372  162A               	andwf	??i2_printRTC,f,c
 21064  003374  502A               	movf	??i2_printRTC,w,c
 21065  003376  0D0A               	mullw	10
 21066  003378  0E1C               	movlw	low _time
 21067  00337A  2441               	addwf	i2printRTC@i,w,c
 21068  00337C  6ED9               	movwf	fsr2l,c
 21069  00337E  0E01               	movlw	high _time
 21070  003380  2042               	addwfc	i2printRTC@i+1,w,c
 21071  003382  6EDA               	movwf	fsr2h,c
 21072  003384  50DF               	movf	indf2,w,c
 21073  003386  0B0F               	andlw	15
 21074  003388  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 21075  00338A  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 21076  00338C  50F3               	movf	prodl,w,c
 21077  00338E  262B               	addwf	??i2_printRTC+1,f,c
 21078  003390  50F4               	movf	prodh,w,c
 21079  003392  222C               	addwfc	??i2_printRTC+2,f,c
 21080  003394  90D8               	bcf	status,0,c
 21081  003396  3441               	rlcf	i2printRTC@i,w,c
 21082  003398  6ED9               	movwf	fsr2l,c
 21083  00339A  3442               	rlcf	i2printRTC@i+1,w,c
 21084  00339C  6EDA               	movwf	fsr2h,c
 21085  00339E  0E2D               	movlw	low i2printRTC@INT_time
 21086  0033A0  26D9               	addwf	fsr2l,f,c
 21087  0033A2  0E00               	movlw	high i2printRTC@INT_time
 21088  0033A4  22DA               	addwfc	fsr2h,f,c
 21089  0033A6  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 21090  0033AA  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 21091  0033AE  4A41               	infsnz	i2printRTC@i,f,c
 21092  0033B0  2A42               	incf	i2printRTC@i+1,f,c
 21093  0033B2  BE42               	btfsc	i2printRTC@i+1,7,c
 21094  0033B4  D7D2               	goto	i2l7539
 21095  0033B6  5042               	movf	i2printRTC@i+1,w,c
 21096  0033B8  E101               	bnz	i2u619_40
 21097  0033BA  D7CB               	goto	L17
 21098  0033BC                     i2u619_40:
 21099  0033BC                     i2l627:
 21100                           
 21101                           ;RTC.c: 69: }
 21102                           ;RTC.c: 70: int RTC_month = INT_time[5];
 21103  0033BC  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 21104  0033C0  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 21105                           
 21106                           ;RTC.c: 72: switch(RTC_month){
 21107  0033C4  D084               	goto	i2l7571
 21108  0033C6                     i2l7545:
 21109                           
 21110                           ;RTC.c: 74: strcpy(month, "JAN");
 21111  0033C6  0E3D               	movlw	low i2printRTC@month
 21112  0033C8  6E01               	movwf	i2strcpy@to,c
 21113  0033CA  0E00               	movlw	high i2printRTC@month
 21114  0033CC  6E02               	movwf	i2strcpy@to+1,c
 21115  0033CE  0EDB               	movlw	low STR_8
 21116  0033D0  6E03               	movwf	i2strcpy@from,c
 21117  0033D2  0EFF               	movlw	high STR_8
 21118  0033D4  6E04               	movwf	i2strcpy@from+1,c
 21119  0033D6  EC54  F02B         	call	i2_strcpy	;wreg free
 21120                           
 21121                           ;RTC.c: 75: break;
 21122  0033DA  D0A6               	goto	i2l7573
 21123  0033DC                     i2l7547:
 21124                           
 21125                           ;RTC.c: 77: strcpy(month, "FEB");
 21126  0033DC  0E3D               	movlw	low i2printRTC@month
 21127  0033DE  6E01               	movwf	i2strcpy@to,c
 21128  0033E0  0E00               	movlw	high i2printRTC@month
 21129  0033E2  6E02               	movwf	i2strcpy@to+1,c
 21130  0033E4  0ECB               	movlw	low STR_9
 21131  0033E6  6E03               	movwf	i2strcpy@from,c
 21132  0033E8  0EFF               	movlw	high STR_9
 21133  0033EA  6E04               	movwf	i2strcpy@from+1,c
 21134  0033EC  EC54  F02B         	call	i2_strcpy	;wreg free
 21135                           
 21136                           ;RTC.c: 78: break;
 21137  0033F0  D09B               	goto	i2l7573
 21138  0033F2                     i2l7549:
 21139                           
 21140                           ;RTC.c: 80: strcpy(month, "MAR");
 21141  0033F2  0E3D               	movlw	low i2printRTC@month
 21142  0033F4  6E01               	movwf	i2strcpy@to,c
 21143  0033F6  0E00               	movlw	high i2printRTC@month
 21144  0033F8  6E02               	movwf	i2strcpy@to+1,c
 21145  0033FA  0EE7               	movlw	low STR_10
 21146  0033FC  6E03               	movwf	i2strcpy@from,c
 21147  0033FE  0EFF               	movlw	high STR_10
 21148  003400  6E04               	movwf	i2strcpy@from+1,c
 21149  003402  EC54  F02B         	call	i2_strcpy	;wreg free
 21150                           
 21151                           ;RTC.c: 81: break;
 21152  003406  D090               	goto	i2l7573
 21153  003408                     i2l7551:
 21154                           
 21155                           ;RTC.c: 83: strcpy(month, "APR");
 21156  003408  0E3D               	movlw	low i2printRTC@month
 21157  00340A  6E01               	movwf	i2strcpy@to,c
 21158  00340C  0E00               	movlw	high i2printRTC@month
 21159  00340E  6E02               	movwf	i2strcpy@to+1,c
 21160  003410  0EEB               	movlw	low STR_11
 21161  003412  6E03               	movwf	i2strcpy@from,c
 21162  003414  0EFF               	movlw	high STR_11
 21163  003416  6E04               	movwf	i2strcpy@from+1,c
 21164  003418  EC54  F02B         	call	i2_strcpy	;wreg free
 21165                           
 21166                           ;RTC.c: 84: break;
 21167  00341C  D085               	goto	i2l7573
 21168  00341E                     i2l7553:
 21169                           
 21170                           ;RTC.c: 86: strcpy(month, "MAY");
 21171  00341E  0E3D               	movlw	low i2printRTC@month
 21172  003420  6E01               	movwf	i2strcpy@to,c
 21173  003422  0E00               	movlw	high i2printRTC@month
 21174  003424  6E02               	movwf	i2strcpy@to+1,c
 21175  003426  0EFB               	movlw	low STR_12
 21176  003428  6E03               	movwf	i2strcpy@from,c
 21177  00342A  0EFF               	movlw	high STR_12
 21178  00342C  6E04               	movwf	i2strcpy@from+1,c
 21179  00342E  EC54  F02B         	call	i2_strcpy	;wreg free
 21180                           
 21181                           ;RTC.c: 87: break;
 21182  003432  D07A               	goto	i2l7573
 21183  003434                     i2l7555:
 21184                           
 21185                           ;RTC.c: 89: strcpy(month, "JUN");
 21186  003434  0E3D               	movlw	low i2printRTC@month
 21187  003436  6E01               	movwf	i2strcpy@to,c
 21188  003438  0E00               	movlw	high i2printRTC@month
 21189  00343A  6E02               	movwf	i2strcpy@to+1,c
 21190  00343C  0EDF               	movlw	low STR_13
 21191  00343E  6E03               	movwf	i2strcpy@from,c
 21192  003440  0EFF               	movlw	high STR_13
 21193  003442  6E04               	movwf	i2strcpy@from+1,c
 21194  003444  EC54  F02B         	call	i2_strcpy	;wreg free
 21195                           
 21196                           ;RTC.c: 90: break;
 21197  003448  D06F               	goto	i2l7573
 21198  00344A                     i2l7557:
 21199                           
 21200                           ;RTC.c: 92: strcpy(month, "JUL");
 21201  00344A  0E3D               	movlw	low i2printRTC@month
 21202  00344C  6E01               	movwf	i2strcpy@to,c
 21203  00344E  0E00               	movlw	high i2printRTC@month
 21204  003450  6E02               	movwf	i2strcpy@to+1,c
 21205  003452  0ED7               	movlw	low STR_14
 21206  003454  6E03               	movwf	i2strcpy@from,c
 21207  003456  0EFF               	movlw	high STR_14
 21208  003458  6E04               	movwf	i2strcpy@from+1,c
 21209  00345A  EC54  F02B         	call	i2_strcpy	;wreg free
 21210                           
 21211                           ;RTC.c: 93: break;
 21212  00345E  D064               	goto	i2l7573
 21213  003460                     i2l7559:
 21214                           
 21215                           ;RTC.c: 95: strcpy(month, "AUG");
 21216  003460  0E3D               	movlw	low i2printRTC@month
 21217  003462  6E01               	movwf	i2strcpy@to,c
 21218  003464  0E00               	movlw	high i2printRTC@month
 21219  003466  6E02               	movwf	i2strcpy@to+1,c
 21220  003468  0ED3               	movlw	low STR_15
 21221  00346A  6E03               	movwf	i2strcpy@from,c
 21222  00346C  0EFF               	movlw	high STR_15
 21223  00346E  6E04               	movwf	i2strcpy@from+1,c
 21224  003470  EC54  F02B         	call	i2_strcpy	;wreg free
 21225                           
 21226                           ;RTC.c: 96: break;
 21227  003474  D059               	goto	i2l7573
 21228  003476                     i2l7561:
 21229                           
 21230                           ;RTC.c: 98: strcpy(month, "SEP");
 21231  003476  0E3D               	movlw	low i2printRTC@month
 21232  003478  6E01               	movwf	i2strcpy@to,c
 21233  00347A  0E00               	movlw	high i2printRTC@month
 21234  00347C  6E02               	movwf	i2strcpy@to+1,c
 21235  00347E  0EE3               	movlw	low STR_16
 21236  003480  6E03               	movwf	i2strcpy@from,c
 21237  003482  0EFF               	movlw	high STR_16
 21238  003484  6E04               	movwf	i2strcpy@from+1,c
 21239  003486  EC54  F02B         	call	i2_strcpy	;wreg free
 21240                           
 21241                           ;RTC.c: 99: break;
 21242  00348A  D04E               	goto	i2l7573
 21243  00348C                     i2l7563:
 21244                           
 21245                           ;RTC.c: 101: strcpy(month, "OCT");
 21246  00348C  0E3D               	movlw	low i2printRTC@month
 21247  00348E  6E01               	movwf	i2strcpy@to,c
 21248  003490  0E00               	movlw	high i2printRTC@month
 21249  003492  6E02               	movwf	i2strcpy@to+1,c
 21250  003494  0EF3               	movlw	low STR_17
 21251  003496  6E03               	movwf	i2strcpy@from,c
 21252  003498  0EFF               	movlw	high STR_17
 21253  00349A  6E04               	movwf	i2strcpy@from+1,c
 21254  00349C  EC54  F02B         	call	i2_strcpy	;wreg free
 21255                           
 21256                           ;RTC.c: 102: break;
 21257  0034A0  D043               	goto	i2l7573
 21258  0034A2                     i2l7565:
 21259                           
 21260                           ;RTC.c: 104: strcpy(month, "NOV");
 21261  0034A2  0E3D               	movlw	low i2printRTC@month
 21262  0034A4  6E01               	movwf	i2strcpy@to,c
 21263  0034A6  0E00               	movlw	high i2printRTC@month
 21264  0034A8  6E02               	movwf	i2strcpy@to+1,c
 21265  0034AA  0EF7               	movlw	low STR_18
 21266  0034AC  6E03               	movwf	i2strcpy@from,c
 21267  0034AE  0EFF               	movlw	high STR_18
 21268  0034B0  6E04               	movwf	i2strcpy@from+1,c
 21269  0034B2  EC54  F02B         	call	i2_strcpy	;wreg free
 21270                           
 21271                           ;RTC.c: 105: break;
 21272  0034B6  D038               	goto	i2l7573
 21273  0034B8                     i2l7567:
 21274                           
 21275                           ;RTC.c: 107: strcpy(month, "DEC");
 21276  0034B8  0E3D               	movlw	low i2printRTC@month
 21277  0034BA  6E01               	movwf	i2strcpy@to,c
 21278  0034BC  0E00               	movlw	high i2printRTC@month
 21279  0034BE  6E02               	movwf	i2strcpy@to+1,c
 21280  0034C0  0ECF               	movlw	low STR_19
 21281  0034C2  6E03               	movwf	i2strcpy@from,c
 21282  0034C4  0EFF               	movlw	high STR_19
 21283  0034C6  6E04               	movwf	i2strcpy@from+1,c
 21284  0034C8  EC54  F02B         	call	i2_strcpy	;wreg free
 21285                           
 21286                           ;RTC.c: 109: }
 21287                           
 21288                           ;RTC.c: 108: break;
 21289  0034CC  D02D               	goto	i2l7573
 21290  0034CE                     i2l7571:
 21291  0034CE  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 21292  0034D2  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 21293                           
 21294                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21295                           ; Switch size 1, requested type "space"
 21296                           ; Number of cases is 1, Range of values is 0 to 0
 21297                           ; switch strategies available:
 21298                           ; Name         Instructions Cycles
 21299                           ; simple_byte            4     3 (average)
 21300                           ;	Chosen strategy is simple_byte
 21301  0034D6  502B               	movf	??i2_printRTC+1,w,c
 21302  0034D8  0A00               	xorlw	0	; case 0
 21303  0034DA  A4D8               	btfss	status,2,c
 21304  0034DC  D025               	goto	i2l7573
 21305                           
 21306                           ; Switch size 1, requested type "space"
 21307                           ; Number of cases is 12, Range of values is 1 to 12
 21308                           ; switch strategies available:
 21309                           ; Name         Instructions Cycles
 21310                           ; simple_byte           37    19 (average)
 21311                           ;	Chosen strategy is simple_byte
 21312  0034DE  502A               	movf	??i2_printRTC,w,c
 21313  0034E0  0A01               	xorlw	1	; case 1
 21314  0034E2  B4D8               	btfsc	status,2,c
 21315  0034E4  D770               	goto	i2l7545
 21316  0034E6  0A03               	xorlw	3	; case 2
 21317  0034E8  B4D8               	btfsc	status,2,c
 21318  0034EA  D778               	goto	i2l7547
 21319  0034EC  0A01               	xorlw	1	; case 3
 21320  0034EE  B4D8               	btfsc	status,2,c
 21321  0034F0  D780               	goto	i2l7549
 21322  0034F2  0A07               	xorlw	7	; case 4
 21323  0034F4  B4D8               	btfsc	status,2,c
 21324  0034F6  D788               	goto	i2l7551
 21325  0034F8  0A01               	xorlw	1	; case 5
 21326  0034FA  B4D8               	btfsc	status,2,c
 21327  0034FC  D790               	goto	i2l7553
 21328  0034FE  0A03               	xorlw	3	; case 6
 21329  003500  B4D8               	btfsc	status,2,c
 21330  003502  D798               	goto	i2l7555
 21331  003504  0A01               	xorlw	1	; case 7
 21332  003506  B4D8               	btfsc	status,2,c
 21333  003508  D7A0               	goto	i2l7557
 21334  00350A  0A0F               	xorlw	15	; case 8
 21335  00350C  B4D8               	btfsc	status,2,c
 21336  00350E  D7A8               	goto	i2l7559
 21337  003510  0A01               	xorlw	1	; case 9
 21338  003512  B4D8               	btfsc	status,2,c
 21339  003514  D7B0               	goto	i2l7561
 21340  003516  0A03               	xorlw	3	; case 10
 21341  003518  B4D8               	btfsc	status,2,c
 21342  00351A  D7B8               	goto	i2l7563
 21343  00351C  0A01               	xorlw	1	; case 11
 21344  00351E  B4D8               	btfsc	status,2,c
 21345  003520  D7C0               	goto	i2l7565
 21346  003522  0A07               	xorlw	7	; case 12
 21347  003524  B4D8               	btfsc	status,2,c
 21348  003526  D7C8               	goto	i2l7567
 21349  003528                     i2l7573:
 21350                           
 21351                           ;RTC.c: 110: lcdInst(0b10000000);;
 21352  003528  0E80               	movlw	128
 21353  00352A  ECB6  F02D         	call	i2_lcdInst
 21354                           
 21355                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 21356  00352E  0EBA               	movlw	low STR_21
 21357  003530  6E0D               	movwf	i2printf@f,c
 21358  003532  0EFA               	movlw	high STR_21
 21359  003534  6E0E               	movwf	i2printf@f+1,c
 21360  003536  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 21361  00353A  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 21362  00353E  0E3D               	movlw	low i2printRTC@month
 21363  003540  6E11               	movwf	?i2_printf+4,c
 21364  003542  0E00               	movlw	high i2printRTC@month
 21365  003544  6E12               	movwf	?i2_printf+5,c
 21366  003546  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 21367  00354A  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 21368  00354E  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 21369  003552  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 21370  003556  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 21371  00355A  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 21372  00355E  EC11  F012         	call	i2_printf	;wreg free
 21373  003562  0012               	return		;funcret
 21374  003564                     __end_ofi2_printRTC:
 21375                           	opt stack 0
 21376                           pclatu	equ	0xFFB
 21377                           pclath	equ	0xFFA
 21378                           tblptru	equ	0xFF8
 21379                           tblptrh	equ	0xFF7
 21380                           tblptrl	equ	0xFF6
 21381                           tablat	equ	0xFF5
 21382                           prodh	equ	0xFF4
 21383                           prodl	equ	0xFF3
 21384                           intcon	equ	0xFF2
 21385                           intcon2	equ	0xFF1
 21386                           intcon3	equ	0xFF0
 21387                           indf0	equ	0xFEF
 21388                           postinc0	equ	0xFEE
 21389                           fsr0h	equ	0xFEA
 21390                           fsr0l	equ	0xFE9
 21391                           wreg	equ	0xFE8
 21392                           postdec1	equ	0xFE5
 21393                           fsr1h	equ	0xFE2
 21394                           fsr1l	equ	0xFE1
 21395                           indf2	equ	0xFDF
 21396                           postinc2	equ	0xFDE
 21397                           postdec2	equ	0xFDD
 21398                           fsr2h	equ	0xFDA
 21399                           fsr2l	equ	0xFD9
 21400                           status	equ	0xFD8
 21401                           
 21402 ;; *************** function i2_strcpy *****************
 21403 ;; Defined at:
 21404 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 21405 ;; Parameters:    Size  Location     Type
 21406 ;;  to              2    0[COMRAM] PTR unsigned char 
 21407 ;;		 -> printRTC@month(4), UI@month(4), 
 21408 ;;  from            2    2[COMRAM] PTR const unsigned char 
 21409 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 21410 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 21411 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 21412 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 21413 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 21414 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 21415 ;;		 -> STR_8(4), 
 21416 ;; Auto vars:     Size  Location     Type
 21417 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 21418 ;;		 -> printRTC@month(4), UI@month(4), 
 21419 ;; Return value:  Size  Location     Type
 21420 ;;                  2    0[COMRAM] PTR unsigned char 
 21421 ;; Registers used:
 21422 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 21423 ;; Tracked objects:
 21424 ;;		On entry : 0/0
 21425 ;;		On exit  : 0/0
 21426 ;;		Unchanged: 0/0
 21427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21428 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21429 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21431 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21432 ;;Total ram usage:        6 bytes
 21433 ;; Hardware stack levels used:    1
 21434 ;; This function calls:
 21435 ;;		Nothing
 21436 ;; This function is called by:
 21437 ;;		i2_printRTC
 21438 ;; This function uses a non-reentrant model
 21439 ;;
 21440                           
 21441                           	psect	text70
 21442  0056A8                     __ptext70:
 21443                           	opt stack 0
 21444  0056A8                     i2_strcpy:
 21445                           	opt stack 21
 21446                           
 21447                           ;incstack = 0
 21448  0056A8  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 21449  0056AC  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 21450  0056B0  D004               	goto	i2l7097
 21451  0056B2                     i2l7095:
 21452  0056B2  4A05               	infsnz	i2strcpy@cp,f,c
 21453  0056B4  2A06               	incf	i2strcpy@cp+1,f,c
 21454  0056B6  4A03               	infsnz	i2strcpy@from,f,c
 21455  0056B8  2A04               	incf	i2strcpy@from+1,f,c
 21456  0056BA                     i2l7097:
 21457  0056BA  C003  FFF6         	movff	i2strcpy@from,tblptrl
 21458  0056BE  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 21459  0056C2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21460  0056C2  6AF8               	clrf	tblptru,c
 21461  0056C4                     	endif
 21462  0056C4                     	if	0	;tblptru may be non-zero
 21463  0056C4                     	endif
 21464  0056C4  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 21465  0056C8  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 21466  0056CC  0008               	tblrd		*
 21467  0056CE  CFF5 FFDF          	movff	tablat,indf2
 21468  0056D2  50DF               	movf	indf2,w,c
 21469  0056D4  B4D8               	btfsc	status,2,c
 21470  0056D6  0012               	return	
 21471  0056D8  D7EC               	goto	i2l7095
 21472  0056DA                     __end_ofi2_strcpy:
 21473                           	opt stack 0
 21474                           pclatu	equ	0xFFB
 21475                           pclath	equ	0xFFA
 21476                           tblptru	equ	0xFF8
 21477                           tblptrh	equ	0xFF7
 21478                           tblptrl	equ	0xFF6
 21479                           tablat	equ	0xFF5
 21480                           prodh	equ	0xFF4
 21481                           prodl	equ	0xFF3
 21482                           intcon	equ	0xFF2
 21483                           intcon2	equ	0xFF1
 21484                           intcon3	equ	0xFF0
 21485                           indf0	equ	0xFEF
 21486                           postinc0	equ	0xFEE
 21487                           fsr0h	equ	0xFEA
 21488                           fsr0l	equ	0xFE9
 21489                           wreg	equ	0xFE8
 21490                           postdec1	equ	0xFE5
 21491                           fsr1h	equ	0xFE2
 21492                           fsr1l	equ	0xFE1
 21493                           indf2	equ	0xFDF
 21494                           postinc2	equ	0xFDE
 21495                           postdec2	equ	0xFDD
 21496                           fsr2h	equ	0xFDA
 21497                           fsr2l	equ	0xFD9
 21498                           status	equ	0xFD8
 21499                           
 21500 ;; *************** function _inputHandler *****************
 21501 ;; Defined at:
 21502 ;;		line 375 in file "UI.c"
 21503 ;; Parameters:    Size  Location     Type
 21504 ;;		None
 21505 ;; Auto vars:     Size  Location     Type
 21506 ;;		None
 21507 ;; Return value:  Size  Location     Type
 21508 ;;                  2   41[COMRAM] int 
 21509 ;; Registers used:
 21510 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21511 ;; Tracked objects:
 21512 ;;		On entry : 0/0
 21513 ;;		On exit  : 0/0
 21514 ;;		Unchanged: 0/0
 21515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21516 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21518 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21519 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21520 ;;Total ram usage:        4 bytes
 21521 ;; Hardware stack levels used:    1
 21522 ;; Hardware stack levels required when called:    4
 21523 ;; This function calls:
 21524 ;;		_change_state_to_logs_11
 21525 ;;		_change_state_to_logs_12
 21526 ;;		_change_state_to_logs_22
 21527 ;;		_change_state_to_logs_23
 21528 ;;		_change_state_to_logs_33
 21529 ;;		_change_state_to_logs_34
 21530 ;;		_change_state_to_menu_11
 21531 ;;		_change_state_to_menu_23
 21532 ;;		i2_change_state_to_menu_12
 21533 ;;		i2_change_state_to_menu_22
 21534 ;; This function is called by:
 21535 ;;		_updateMenu
 21536 ;; This function uses a non-reentrant model
 21537 ;;
 21538                           
 21539                           	psect	text71
 21540  003780                     __ptext71:
 21541                           	opt stack 0
 21542  003780                     _inputHandler:
 21543                           	opt stack 18
 21544                           
 21545                           ;UI.c: 380: if(firstboot){
 21546                           
 21547                           ;incstack = 0
 21548  003780  0101               	movlb	1	; () banked
 21549  003782  513B               	movf	_firstboot& (0+255),w,b
 21550  003784  0101               	movlb	1	; () banked
 21551  003786  113C               	iorwf	(_firstboot+1)& (0+255),w,b
 21552  003788  B4D8               	btfsc	status,2,c
 21553  00378A  D00C               	goto	i2l7641
 21554                           
 21555                           ; BSR set to: 1
 21556                           ;UI.c: 381: change_state_to_menu_11();
 21557  00378C  ECCD  F02B         	call	_change_state_to_menu_11	;wreg free
 21558                           
 21559                           ;UI.c: 382: firstboot = 0;
 21560  003790  0E00               	movlw	0
 21561  003792  0101               	movlb	1	; () banked
 21562  003794  6F3C               	movwf	(_firstboot+1)& (0+255),b
 21563  003796  0E00               	movlw	0
 21564  003798  6F3B               	movwf	_firstboot& (0+255),b
 21565                           
 21566                           ; BSR set to: 1
 21567                           ;UI.c: 383: return 0;
 21568  00379A  0E00               	movlw	0
 21569  00379C  6E2B               	movwf	?_inputHandler+1,c
 21570  00379E  0E00               	movlw	0
 21571  0037A0  6E2A               	movwf	?_inputHandler,c
 21572                           
 21573                           ; BSR set to: 1
 21574  0037A2  0012               	return	
 21575  0037A4                     i2l7641:
 21576                           
 21577                           ; BSR set to: 1
 21578                           ;UI.c: 384: }
 21579                           ;UI.c: 385: if (logstate){
 21580  0037A4  0100               	movlb	0	; () banked
 21581  0037A6  51F8               	movf	_logstate& (0+255),w,b
 21582  0037A8  0100               	movlb	0	; () banked
 21583  0037AA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 21584  0037AC  B4D8               	btfsc	status,2,c
 21585  0037AE  D0C7               	goto	i2l7759
 21586                           
 21587                           ; BSR set to: 0
 21588                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 21589  0037B0  0E43               	movlw	67
 21590  0037B2  187D               	xorwf	_input,w,c	;volatile
 21591  0037B4  A4D8               	btfss	status,2,c
 21592  0037B6  D012               	goto	i2l7659
 21593                           
 21594                           ; BSR set to: 0
 21595  0037B8  B281               	btfsc	3969,1,c	;volatile
 21596  0037BA  D009               	goto	i2l7651
 21597  0037BC  D00F               	goto	i2l7659
 21598  0037BE                     i2l7649:
 21599                           
 21600                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 21601  0037BE  0E68               	movlw	104
 21602  0037C0  6E2C               	movwf	??_inputHandler& (0+255),c
 21603  0037C2  0EE4               	movlw	228
 21604  0037C4                     i2u1125_47:
 21605  0037C4  2EE8               	decfsz	wreg,f,c
 21606  0037C6  D7FE               	bra	i2u1125_47
 21607  0037C8  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 21608  0037CA  D7FC               	bra	i2u1125_47
 21609  0037CC  D000               	nop2	
 21610  0037CE                     i2l7651:
 21611  0037CE  B281               	btfsc	3969,1,c	;volatile
 21612  0037D0  D7F6               	goto	i2l7649
 21613  0037D2                     i2l7653:
 21614                           
 21615                           ;UI.c: 390: }
 21616                           ;UI.c: 391: return 0;
 21617  0037D2  0E00               	movlw	0
 21618  0037D4  6E2B               	movwf	?_inputHandler+1,c
 21619  0037D6  0E00               	movlw	0
 21620  0037D8  6E2A               	movwf	?_inputHandler,c
 21621  0037DA  0012               	return	
 21622  0037DC                     i2l7659:
 21623                           
 21624                           ;UI.c: 393: else if (input == 'D'){
 21625  0037DC  0E44               	movlw	68
 21626  0037DE  187D               	xorwf	_input,w,c	;volatile
 21627  0037E0  A4D8               	btfss	status,2,c
 21628  0037E2  D7F7               	goto	i2l7653
 21629                           
 21630                           ;UI.c: 395: logstate = 0;
 21631  0037E4  0E00               	movlw	0
 21632  0037E6  0100               	movlb	0	; () banked
 21633  0037E8  6FF9               	movwf	(_logstate+1)& (0+255),b
 21634  0037EA  0E00               	movlw	0
 21635  0037EC  6FF8               	movwf	_logstate& (0+255),b
 21636                           
 21637                           ;UI.c: 396: switch(cur_state){
 21638  0037EE  D012               	goto	i2l7677
 21639  0037F0                     i2l7663:
 21640                           
 21641                           ;UI.c: 398: change_state_to_logs_11();
 21642  0037F0  EC45  F02C         	call	_change_state_to_logs_11	;wreg free
 21643                           
 21644                           ;UI.c: 399: break;
 21645  0037F4  D7EE               	goto	i2l7653
 21646  0037F6                     i2l7665:
 21647                           
 21648                           ;UI.c: 401: change_state_to_logs_12();
 21649  0037F6  EC2D  F02C         	call	_change_state_to_logs_12	;wreg free
 21650                           
 21651                           ;UI.c: 402: break;
 21652  0037FA  D7EB               	goto	i2l7653
 21653  0037FC                     i2l7667:
 21654                           
 21655                           ;UI.c: 404: change_state_to_logs_22();
 21656  0037FC  EC15  F02C         	call	_change_state_to_logs_22	;wreg free
 21657                           
 21658                           ;UI.c: 405: break;
 21659  003800  D7E8               	goto	i2l7653
 21660  003802                     i2l7669:
 21661                           
 21662                           ;UI.c: 407: change_state_to_logs_23();
 21663  003802  EC74  F02C         	call	_change_state_to_logs_23	;wreg free
 21664                           
 21665                           ;UI.c: 408: break;
 21666  003806  D7E5               	goto	i2l7653
 21667  003808                     i2l7671:
 21668                           
 21669                           ;UI.c: 410: change_state_to_logs_33();
 21670  003808  ECFD  F02B         	call	_change_state_to_logs_33	;wreg free
 21671                           
 21672                           ;UI.c: 411: break;
 21673  00380C  D7E2               	goto	i2l7653
 21674  00380E                     i2l7673:
 21675                           
 21676                           ;UI.c: 413: change_state_to_logs_34();
 21677  00380E  ECE5  F02B         	call	_change_state_to_logs_34	;wreg free
 21678                           
 21679                           ;UI.c: 415: }
 21680                           
 21681                           ;UI.c: 414: break;
 21682  003812  D7DF               	goto	i2l7653
 21683  003814                     i2l7677:
 21684  003814  C0E6  F02C         	movff	_cur_state,??_inputHandler
 21685  003818  C0E7  F02D         	movff	_cur_state+1,??_inputHandler+1
 21686                           
 21687                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 21688                           ; Switch size 1, requested type "space"
 21689                           ; Number of cases is 2, Range of values is 3 to 4
 21690                           ; switch strategies available:
 21691                           ; Name         Instructions Cycles
 21692                           ; simple_byte            7     4 (average)
 21693                           ;	Chosen strategy is simple_byte
 21694  00381C  502D               	movf	??_inputHandler+1,w,c
 21695  00381E  0A03               	xorlw	3	; case 3
 21696  003820  B4D8               	btfsc	status,2,c
 21697  003822  D004               	goto	i2l10693
 21698  003824  0A07               	xorlw	7	; case 4
 21699  003826  B4D8               	btfsc	status,2,c
 21700  003828  D00F               	goto	i2l10695
 21701  00382A  D7D3               	goto	i2l7653
 21702  00382C                     i2l10693:
 21703                           
 21704                           ; Switch size 1, requested type "space"
 21705                           ; Number of cases is 4, Range of values is 243 to 255
 21706                           ; switch strategies available:
 21707                           ; Name         Instructions Cycles
 21708                           ; simple_byte           13     7 (average)
 21709                           ;	Chosen strategy is simple_byte
 21710  00382C  502C               	movf	??_inputHandler,w,c
 21711  00382E  0AF3               	xorlw	243	; case 243
 21712  003830  B4D8               	btfsc	status,2,c
 21713  003832  D7DE               	goto	i2l7663
 21714  003834  0A07               	xorlw	7	; case 244
 21715  003836  B4D8               	btfsc	status,2,c
 21716  003838  D7DE               	goto	i2l7665
 21717  00383A  0A0A               	xorlw	10	; case 254
 21718  00383C  B4D8               	btfsc	status,2,c
 21719  00383E  D7DE               	goto	i2l7667
 21720  003840  0A01               	xorlw	1	; case 255
 21721  003842  B4D8               	btfsc	status,2,c
 21722  003844  D7DE               	goto	i2l7669
 21723  003846  D7C5               	goto	i2l7653
 21724  003848                     i2l10695:
 21725                           
 21726                           ; Switch size 1, requested type "space"
 21727                           ; Number of cases is 2, Range of values is 9 to 10
 21728                           ; switch strategies available:
 21729                           ; Name         Instructions Cycles
 21730                           ; simple_byte            7     4 (average)
 21731                           ;	Chosen strategy is simple_byte
 21732  003848  502C               	movf	??_inputHandler,w,c
 21733  00384A  0A09               	xorlw	9	; case 9
 21734  00384C  B4D8               	btfsc	status,2,c
 21735  00384E  D7DC               	goto	i2l7671
 21736  003850  0A03               	xorlw	3	; case 10
 21737  003852  B4D8               	btfsc	status,2,c
 21738  003854  D7DC               	goto	i2l7673
 21739  003856  D7BD               	goto	i2l7653
 21740  003858                     i2l7689:
 21741                           
 21742                           ;UI.c: 425: if(cur_state == 11){
 21743  003858  0E0B               	movlw	11
 21744  00385A  0100               	movlb	0	; () banked
 21745  00385C  19E6               	xorwf	_cur_state& (0+255),w,b
 21746  00385E  0100               	movlb	0	; () banked
 21747  003860  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21748  003862  A4D8               	btfss	status,2,c
 21749  003864  D005               	goto	i2l7697
 21750                           
 21751                           ; BSR set to: 0
 21752                           ;UI.c: 426: return 0;
 21753  003866  0E00               	movlw	0
 21754  003868  6E2B               	movwf	?_inputHandler+1,c
 21755  00386A  0E00               	movlw	0
 21756  00386C  6E2A               	movwf	?_inputHandler,c
 21757                           
 21758                           ; BSR set to: 0
 21759  00386E  0012               	return	
 21760  003870                     i2l7697:
 21761                           
 21762                           ; BSR set to: 0
 21763                           ;UI.c: 428: else{
 21764                           ;UI.c: 429: change_state_to_menu_11();
 21765  003870  ECCD  F02B         	call	_change_state_to_menu_11	;wreg free
 21766                           
 21767                           ;UI.c: 430: }
 21768                           ;UI.c: 431: return 0;
 21769  003874  0E00               	movlw	0
 21770  003876  6E2B               	movwf	?_inputHandler+1,c
 21771  003878  0E00               	movlw	0
 21772  00387A  6E2A               	movwf	?_inputHandler,c
 21773  00387C  0012               	return	
 21774  00387E                     i2l7703:
 21775                           
 21776                           ;UI.c: 433: if(cur_state == 22 || cur_state == 12){
 21777  00387E  0E16               	movlw	22
 21778  003880  0100               	movlb	0	; () banked
 21779  003882  19E6               	xorwf	_cur_state& (0+255),w,b
 21780  003884  0100               	movlb	0	; () banked
 21781  003886  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21782  003888  B4D8               	btfsc	status,2,c
 21783  00388A  D007               	goto	i2l7707
 21784                           
 21785                           ; BSR set to: 0
 21786  00388C  0E0C               	movlw	12
 21787  00388E  0100               	movlb	0	; () banked
 21788  003890  19E6               	xorwf	_cur_state& (0+255),w,b
 21789  003892  0100               	movlb	0	; () banked
 21790  003894  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21791  003896  A4D8               	btfss	status,2,c
 21792  003898  D005               	goto	i2l7713
 21793  00389A                     i2l7707:
 21794                           
 21795                           ; BSR set to: 0
 21796                           ;UI.c: 434: return 0;
 21797  00389A  0E00               	movlw	0
 21798  00389C  6E2B               	movwf	?_inputHandler+1,c
 21799  00389E  0E00               	movlw	0
 21800  0038A0  6E2A               	movwf	?_inputHandler,c
 21801                           
 21802                           ; BSR set to: 0
 21803  0038A2  0012               	return	
 21804  0038A4                     i2l7713:
 21805                           
 21806                           ; BSR set to: 0
 21807                           ;UI.c: 436: else if(cur_state == 23){
 21808  0038A4  0E17               	movlw	23
 21809  0038A6  0100               	movlb	0	; () banked
 21810  0038A8  19E6               	xorwf	_cur_state& (0+255),w,b
 21811  0038AA  0100               	movlb	0	; () banked
 21812  0038AC  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21813  0038AE  A4D8               	btfss	status,2,c
 21814  0038B0  D003               	goto	i2l7717
 21815                           
 21816                           ; BSR set to: 0
 21817                           ;UI.c: 437: change_state_to_menu_22();
 21818  0038B2  EC85  F02B         	call	i2_change_state_to_menu_22	;wreg free
 21819                           
 21820                           ;UI.c: 438: }
 21821  0038B6  D002               	goto	i2l7719
 21822  0038B8                     i2l7717:
 21823                           
 21824                           ;UI.c: 439: else{
 21825                           ;UI.c: 440: change_state_to_menu_12();
 21826  0038B8  EC9D  F02B         	call	i2_change_state_to_menu_12	;wreg free
 21827  0038BC                     i2l7719:
 21828                           
 21829                           ;UI.c: 441: }
 21830                           ;UI.c: 442: return 0;
 21831  0038BC  0E00               	movlw	0
 21832  0038BE  6E2B               	movwf	?_inputHandler+1,c
 21833  0038C0  0E00               	movlw	0
 21834  0038C2  6E2A               	movwf	?_inputHandler,c
 21835  0038C4  0012               	return	
 21836  0038C6                     i2l7723:
 21837                           
 21838                           ;UI.c: 444: if(cur_state == 23){
 21839  0038C6  0E17               	movlw	23
 21840  0038C8  0100               	movlb	0	; () banked
 21841  0038CA  19E6               	xorwf	_cur_state& (0+255),w,b
 21842  0038CC  0100               	movlb	0	; () banked
 21843  0038CE  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21844  0038D0  A4D8               	btfss	status,2,c
 21845  0038D2  D005               	goto	i2l7731
 21846                           
 21847                           ; BSR set to: 0
 21848                           ;UI.c: 445: return 0;
 21849  0038D4  0E00               	movlw	0
 21850  0038D6  6E2B               	movwf	?_inputHandler+1,c
 21851  0038D8  0E00               	movlw	0
 21852  0038DA  6E2A               	movwf	?_inputHandler,c
 21853                           
 21854                           ; BSR set to: 0
 21855  0038DC  0012               	return	
 21856  0038DE                     i2l7731:
 21857                           
 21858                           ; BSR set to: 0
 21859                           ;UI.c: 447: else{
 21860                           ;UI.c: 448: change_state_to_menu_23();
 21861  0038DE  ECB5  F02B         	call	_change_state_to_menu_23	;wreg free
 21862                           
 21863                           ;UI.c: 449: }
 21864                           ;UI.c: 450: return 0;
 21865  0038E2  0E00               	movlw	0
 21866  0038E4  6E2B               	movwf	?_inputHandler+1,c
 21867  0038E6  0E00               	movlw	0
 21868  0038E8  6E2A               	movwf	?_inputHandler,c
 21869  0038EA  0012               	return	
 21870  0038EC                     i2l7737:
 21871                           
 21872                           ;UI.c: 453: up = 1;
 21873  0038EC  0E00               	movlw	0
 21874  0038EE  6E76               	movwf	_up+1,c
 21875  0038F0  0E01               	movlw	1
 21876  0038F2  6E75               	movwf	_up,c
 21877                           
 21878                           ;UI.c: 454: return 1;
 21879  0038F4  0E00               	movlw	0
 21880  0038F6  6E2B               	movwf	?_inputHandler+1,c
 21881  0038F8  0E01               	movlw	1
 21882  0038FA  6E2A               	movwf	?_inputHandler,c
 21883  0038FC  0012               	return	
 21884  0038FE                     i2l7741:
 21885                           
 21886                           ;UI.c: 456: down = 1;
 21887  0038FE  0E00               	movlw	0
 21888  003900  6E64               	movwf	_down+1,c
 21889  003902  0E01               	movlw	1
 21890  003904  6E63               	movwf	_down,c
 21891                           
 21892                           ;UI.c: 457: return 1;
 21893  003906  0E00               	movlw	0
 21894  003908  6E2B               	movwf	?_inputHandler+1,c
 21895  00390A  0E01               	movlw	1
 21896  00390C  6E2A               	movwf	?_inputHandler,c
 21897  00390E  0012               	return	
 21898  003910                     i2l7745:
 21899                           
 21900                           ;UI.c: 459: enter = 1;
 21901  003910  0E00               	movlw	0
 21902  003912  6E66               	movwf	_enter+1,c
 21903  003914  0E01               	movlw	1
 21904  003916  6E65               	movwf	_enter,c
 21905                           
 21906                           ;UI.c: 460: return 1;
 21907  003918  0E00               	movlw	0
 21908  00391A  6E2B               	movwf	?_inputHandler+1,c
 21909  00391C  0E01               	movlw	1
 21910  00391E  6E2A               	movwf	?_inputHandler,c
 21911  003920  0012               	return	
 21912  003922                     i2l7749:
 21913                           
 21914                           ;UI.c: 462: back = 1;
 21915  003922  0E00               	movlw	0
 21916  003924  6E62               	movwf	_back+1,c
 21917  003926  0E01               	movlw	1
 21918  003928  6E61               	movwf	_back,c
 21919                           
 21920                           ;UI.c: 463: return 1;
 21921  00392A  0E00               	movlw	0
 21922  00392C  6E2B               	movwf	?_inputHandler+1,c
 21923  00392E  0E01               	movlw	1
 21924  003930  6E2A               	movwf	?_inputHandler,c
 21925  003932  0012               	return	
 21926  003934                     i2l7753:
 21927                           
 21928                           ;UI.c: 466: return 1;
 21929  003934  0E00               	movlw	0
 21930  003936  6E2B               	movwf	?_inputHandler+1,c
 21931  003938  0E01               	movlw	1
 21932  00393A  6E2A               	movwf	?_inputHandler,c
 21933                           
 21934                           ;UI.c: 467: }
 21935  00393C  0012               	return	
 21936  00393E                     i2l7759:
 21937  00393E  507D               	movf	_input,w,c	;volatile
 21938                           
 21939                           ; Switch size 1, requested type "space"
 21940                           ; Number of cases is 7, Range of values is 49 to 68
 21941                           ; switch strategies available:
 21942                           ; Name         Instructions Cycles
 21943                           ; simple_byte           22    12 (average)
 21944                           ;	Chosen strategy is simple_byte
 21945  003940  0A31               	xorlw	49	; case 49
 21946  003942  B4D8               	btfsc	status,2,c
 21947  003944  D789               	goto	i2l7689
 21948  003946  0A03               	xorlw	3	; case 50
 21949  003948  B4D8               	btfsc	status,2,c
 21950  00394A  D799               	goto	i2l7703
 21951  00394C  0A01               	xorlw	1	; case 51
 21952  00394E  B4D8               	btfsc	status,2,c
 21953  003950  D7BA               	goto	i2l7723
 21954  003952  0A72               	xorlw	114	; case 65
 21955  003954  B4D8               	btfsc	status,2,c
 21956  003956  D7CA               	goto	i2l7737
 21957  003958  0A03               	xorlw	3	; case 66
 21958  00395A  B4D8               	btfsc	status,2,c
 21959  00395C  D7D0               	goto	i2l7741
 21960  00395E  0A01               	xorlw	1	; case 67
 21961  003960  B4D8               	btfsc	status,2,c
 21962  003962  D7D6               	goto	i2l7745
 21963  003964  0A07               	xorlw	7	; case 68
 21964  003966  B4D8               	btfsc	status,2,c
 21965  003968  D7DC               	goto	i2l7749
 21966  00396A  D7E4               	goto	i2l7753
 21967  00396C                     __end_of_inputHandler:
 21968                           	opt stack 0
 21969                           pclatu	equ	0xFFB
 21970                           pclath	equ	0xFFA
 21971                           tblptru	equ	0xFF8
 21972                           tblptrh	equ	0xFF7
 21973                           tblptrl	equ	0xFF6
 21974                           tablat	equ	0xFF5
 21975                           prodh	equ	0xFF4
 21976                           prodl	equ	0xFF3
 21977                           intcon	equ	0xFF2
 21978                           intcon2	equ	0xFF1
 21979                           intcon3	equ	0xFF0
 21980                           indf0	equ	0xFEF
 21981                           postinc0	equ	0xFEE
 21982                           fsr0h	equ	0xFEA
 21983                           fsr0l	equ	0xFE9
 21984                           wreg	equ	0xFE8
 21985                           postdec1	equ	0xFE5
 21986                           fsr1h	equ	0xFE2
 21987                           fsr1l	equ	0xFE1
 21988                           indf2	equ	0xFDF
 21989                           postinc2	equ	0xFDE
 21990                           postdec2	equ	0xFDD
 21991                           fsr2h	equ	0xFDA
 21992                           fsr2l	equ	0xFD9
 21993                           status	equ	0xFD8
 21994                           
 21995 ;; *************** function i2_change_state_to_menu_22 *****************
 21996 ;; Defined at:
 21997 ;;		line 501 in file "UI.c"
 21998 ;; Parameters:    Size  Location     Type
 21999 ;;		None
 22000 ;; Auto vars:     Size  Location     Type
 22001 ;;		None
 22002 ;; Return value:  Size  Location     Type
 22003 ;;                  1    wreg      void 
 22004 ;; Registers used:
 22005 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22006 ;; Tracked objects:
 22007 ;;		On entry : 0/0
 22008 ;;		On exit  : 0/0
 22009 ;;		Unchanged: 0/0
 22010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22015 ;;Total ram usage:        0 bytes
 22016 ;; Hardware stack levels used:    1
 22017 ;; Hardware stack levels required when called:    3
 22018 ;; This function calls:
 22019 ;;		i2_lcdInst
 22020 ;;		i2_printf
 22021 ;; This function is called by:
 22022 ;;		_updateMenu
 22023 ;;		_inputHandler
 22024 ;; This function uses a non-reentrant model
 22025 ;;
 22026                           
 22027                           	psect	text72
 22028  00570A                     __ptext72:
 22029                           	opt stack 0
 22030  00570A                     i2_change_state_to_menu_22:
 22031                           	opt stack 19
 22032                           
 22033                           ;UI.c: 502: cur_state = 22;
 22034                           
 22035                           ;incstack = 0
 22036  00570A  0E00               	movlw	0
 22037  00570C  0100               	movlb	0	; () banked
 22038  00570E  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22039  005710  0E16               	movlw	22
 22040  005712  6FE6               	movwf	_cur_state& (0+255),b
 22041                           
 22042                           ; BSR set to: 0
 22043                           ;UI.c: 504: lcdInst(0b10000000);;
 22044  005714  0E80               	movlw	128
 22045  005716  ECB6  F02D         	call	i2_lcdInst
 22046                           
 22047                           ;UI.c: 505: printf("2. SORT        <");
 22048  00571A  0EB8               	movlw	low STR_34
 22049  00571C  6E0D               	movwf	i2printf@f,c
 22050  00571E  0EFD               	movlw	high STR_34
 22051  005720  6E0E               	movwf	i2printf@f+1,c
 22052  005722  EC11  F012         	call	i2_printf	;wreg free
 22053                           
 22054                           ;UI.c: 506: lcdInst(0b11000000);;
 22055  005726  0EC0               	movlw	192
 22056  005728  ECB6  F02D         	call	i2_lcdInst
 22057                           
 22058                           ;UI.c: 507: printf("3. LOGS         ");
 22059  00572C  0EFD               	movlw	low STR_36
 22060  00572E  6E0D               	movwf	i2printf@f,c
 22061  005730  0EFC               	movlw	high STR_36
 22062  005732  6E0E               	movwf	i2printf@f+1,c
 22063  005734  EC11  F012         	call	i2_printf	;wreg free
 22064  005738  0012               	return		;funcret
 22065  00573A                     __end_ofi2_change_state_to_menu_22:
 22066                           	opt stack 0
 22067                           pclatu	equ	0xFFB
 22068                           pclath	equ	0xFFA
 22069                           tblptru	equ	0xFF8
 22070                           tblptrh	equ	0xFF7
 22071                           tblptrl	equ	0xFF6
 22072                           tablat	equ	0xFF5
 22073                           prodh	equ	0xFF4
 22074                           prodl	equ	0xFF3
 22075                           intcon	equ	0xFF2
 22076                           intcon2	equ	0xFF1
 22077                           intcon3	equ	0xFF0
 22078                           indf0	equ	0xFEF
 22079                           postinc0	equ	0xFEE
 22080                           fsr0h	equ	0xFEA
 22081                           fsr0l	equ	0xFE9
 22082                           wreg	equ	0xFE8
 22083                           postdec1	equ	0xFE5
 22084                           fsr1h	equ	0xFE2
 22085                           fsr1l	equ	0xFE1
 22086                           indf2	equ	0xFDF
 22087                           postinc2	equ	0xFDE
 22088                           postdec2	equ	0xFDD
 22089                           fsr2h	equ	0xFDA
 22090                           fsr2l	equ	0xFD9
 22091                           status	equ	0xFD8
 22092                           
 22093 ;; *************** function i2_change_state_to_menu_12 *****************
 22094 ;; Defined at:
 22095 ;;		line 493 in file "UI.c"
 22096 ;; Parameters:    Size  Location     Type
 22097 ;;		None
 22098 ;; Auto vars:     Size  Location     Type
 22099 ;;		None
 22100 ;; Return value:  Size  Location     Type
 22101 ;;                  1    wreg      void 
 22102 ;; Registers used:
 22103 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22104 ;; Tracked objects:
 22105 ;;		On entry : 0/0
 22106 ;;		On exit  : 0/0
 22107 ;;		Unchanged: 0/0
 22108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22113 ;;Total ram usage:        0 bytes
 22114 ;; Hardware stack levels used:    1
 22115 ;; Hardware stack levels required when called:    3
 22116 ;; This function calls:
 22117 ;;		i2_lcdInst
 22118 ;;		i2_printf
 22119 ;; This function is called by:
 22120 ;;		_updateMenu
 22121 ;;		_inputHandler
 22122 ;; This function uses a non-reentrant model
 22123 ;;
 22124                           
 22125                           	psect	text73
 22126  00573A                     __ptext73:
 22127                           	opt stack 0
 22128  00573A                     i2_change_state_to_menu_12:
 22129                           	opt stack 19
 22130                           
 22131                           ;UI.c: 494: cur_state = 12;
 22132                           
 22133                           ;incstack = 0
 22134  00573A  0E00               	movlw	0
 22135  00573C  0100               	movlb	0	; () banked
 22136  00573E  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22137  005740  0E0C               	movlw	12
 22138  005742  6FE6               	movwf	_cur_state& (0+255),b
 22139                           
 22140                           ; BSR set to: 0
 22141                           ;UI.c: 496: lcdInst(0b10000000);;
 22142  005744  0E80               	movlw	128
 22143  005746  ECB6  F02D         	call	i2_lcdInst
 22144                           
 22145                           ;UI.c: 497: printf("1. DATE/TIME    ");
 22146  00574A  0E1F               	movlw	low STR_33
 22147  00574C  6E0D               	movwf	i2printf@f,c
 22148  00574E  0EFD               	movlw	high STR_33
 22149  005750  6E0E               	movwf	i2printf@f+1,c
 22150  005752  EC11  F012         	call	i2_printf	;wreg free
 22151                           
 22152                           ;UI.c: 498: lcdInst(0b11000000);;
 22153  005756  0EC0               	movlw	192
 22154  005758  ECB6  F02D         	call	i2_lcdInst
 22155                           
 22156                           ;UI.c: 499: printf("2. SORT        <");
 22157  00575C  0EB8               	movlw	low STR_34
 22158  00575E  6E0D               	movwf	i2printf@f,c
 22159  005760  0EFD               	movlw	high STR_34
 22160  005762  6E0E               	movwf	i2printf@f+1,c
 22161  005764  EC11  F012         	call	i2_printf	;wreg free
 22162  005768  0012               	return		;funcret
 22163  00576A                     __end_ofi2_change_state_to_menu_12:
 22164                           	opt stack 0
 22165                           pclatu	equ	0xFFB
 22166                           pclath	equ	0xFFA
 22167                           tblptru	equ	0xFF8
 22168                           tblptrh	equ	0xFF7
 22169                           tblptrl	equ	0xFF6
 22170                           tablat	equ	0xFF5
 22171                           prodh	equ	0xFF4
 22172                           prodl	equ	0xFF3
 22173                           intcon	equ	0xFF2
 22174                           intcon2	equ	0xFF1
 22175                           intcon3	equ	0xFF0
 22176                           indf0	equ	0xFEF
 22177                           postinc0	equ	0xFEE
 22178                           fsr0h	equ	0xFEA
 22179                           fsr0l	equ	0xFE9
 22180                           wreg	equ	0xFE8
 22181                           postdec1	equ	0xFE5
 22182                           fsr1h	equ	0xFE2
 22183                           fsr1l	equ	0xFE1
 22184                           indf2	equ	0xFDF
 22185                           postinc2	equ	0xFDE
 22186                           postdec2	equ	0xFDD
 22187                           fsr2h	equ	0xFDA
 22188                           fsr2l	equ	0xFD9
 22189                           status	equ	0xFD8
 22190                           
 22191 ;; *************** function _change_state_to_menu_23 *****************
 22192 ;; Defined at:
 22193 ;;		line 509 in file "UI.c"
 22194 ;; Parameters:    Size  Location     Type
 22195 ;;		None
 22196 ;; Auto vars:     Size  Location     Type
 22197 ;;		None
 22198 ;; Return value:  Size  Location     Type
 22199 ;;                  1    wreg      void 
 22200 ;; Registers used:
 22201 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22202 ;; Tracked objects:
 22203 ;;		On entry : 0/0
 22204 ;;		On exit  : 0/0
 22205 ;;		Unchanged: 0/0
 22206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22211 ;;Total ram usage:        0 bytes
 22212 ;; Hardware stack levels used:    1
 22213 ;; Hardware stack levels required when called:    3
 22214 ;; This function calls:
 22215 ;;		i2_lcdInst
 22216 ;;		i2_printf
 22217 ;; This function is called by:
 22218 ;;		_updateMenu
 22219 ;;		_inputHandler
 22220 ;; This function uses a non-reentrant model
 22221 ;;
 22222                           
 22223                           	psect	text74
 22224  00576A                     __ptext74:
 22225                           	opt stack 0
 22226  00576A                     _change_state_to_menu_23:
 22227                           	opt stack 18
 22228                           
 22229                           ;UI.c: 510: cur_state = 23;
 22230                           
 22231                           ;incstack = 0
 22232  00576A  0E00               	movlw	0
 22233  00576C  0100               	movlb	0	; () banked
 22234  00576E  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22235  005770  0E17               	movlw	23
 22236  005772  6FE6               	movwf	_cur_state& (0+255),b
 22237                           
 22238                           ; BSR set to: 0
 22239                           ;UI.c: 512: lcdInst(0b10000000);;
 22240  005774  0E80               	movlw	128
 22241  005776  ECB6  F02D         	call	i2_lcdInst
 22242                           
 22243                           ;UI.c: 513: printf("2. SORT         ");
 22244  00577A  0E0E               	movlw	low STR_32
 22245  00577C  6E0D               	movwf	i2printf@f,c
 22246  00577E  0EFD               	movlw	high STR_32
 22247  005780  6E0E               	movwf	i2printf@f+1,c
 22248  005782  EC11  F012         	call	i2_printf	;wreg free
 22249                           
 22250                           ;UI.c: 514: lcdInst(0b11000000);;
 22251  005786  0EC0               	movlw	192
 22252  005788  ECB6  F02D         	call	i2_lcdInst
 22253                           
 22254                           ;UI.c: 515: printf("3. LOGS        <");
 22255  00578C  0EA7               	movlw	low STR_38
 22256  00578E  6E0D               	movwf	i2printf@f,c
 22257  005790  0EFD               	movlw	high STR_38
 22258  005792  6E0E               	movwf	i2printf@f+1,c
 22259  005794  EC11  F012         	call	i2_printf	;wreg free
 22260  005798  0012               	return		;funcret
 22261  00579A                     __end_of_change_state_to_menu_23:
 22262                           	opt stack 0
 22263                           pclatu	equ	0xFFB
 22264                           pclath	equ	0xFFA
 22265                           tblptru	equ	0xFF8
 22266                           tblptrh	equ	0xFF7
 22267                           tblptrl	equ	0xFF6
 22268                           tablat	equ	0xFF5
 22269                           prodh	equ	0xFF4
 22270                           prodl	equ	0xFF3
 22271                           intcon	equ	0xFF2
 22272                           intcon2	equ	0xFF1
 22273                           intcon3	equ	0xFF0
 22274                           indf0	equ	0xFEF
 22275                           postinc0	equ	0xFEE
 22276                           fsr0h	equ	0xFEA
 22277                           fsr0l	equ	0xFE9
 22278                           wreg	equ	0xFE8
 22279                           postdec1	equ	0xFE5
 22280                           fsr1h	equ	0xFE2
 22281                           fsr1l	equ	0xFE1
 22282                           indf2	equ	0xFDF
 22283                           postinc2	equ	0xFDE
 22284                           postdec2	equ	0xFDD
 22285                           fsr2h	equ	0xFDA
 22286                           fsr2l	equ	0xFD9
 22287                           status	equ	0xFD8
 22288                           
 22289 ;; *************** function _change_state_to_menu_11 *****************
 22290 ;; Defined at:
 22291 ;;		line 485 in file "UI.c"
 22292 ;; Parameters:    Size  Location     Type
 22293 ;;		None
 22294 ;; Auto vars:     Size  Location     Type
 22295 ;;		None
 22296 ;; Return value:  Size  Location     Type
 22297 ;;                  1    wreg      void 
 22298 ;; Registers used:
 22299 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22300 ;; Tracked objects:
 22301 ;;		On entry : 0/0
 22302 ;;		On exit  : 0/0
 22303 ;;		Unchanged: 0/0
 22304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22309 ;;Total ram usage:        0 bytes
 22310 ;; Hardware stack levels used:    1
 22311 ;; Hardware stack levels required when called:    3
 22312 ;; This function calls:
 22313 ;;		i2_lcdInst
 22314 ;;		i2_printf
 22315 ;; This function is called by:
 22316 ;;		_updateMenu
 22317 ;;		_inputHandler
 22318 ;; This function uses a non-reentrant model
 22319 ;;
 22320                           
 22321                           	psect	text75
 22322  00579A                     __ptext75:
 22323                           	opt stack 0
 22324  00579A                     _change_state_to_menu_11:
 22325                           	opt stack 18
 22326                           
 22327                           ;UI.c: 486: cur_state = 11;
 22328                           
 22329                           ;incstack = 0
 22330  00579A  0E00               	movlw	0
 22331  00579C  0100               	movlb	0	; () banked
 22332  00579E  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22333  0057A0  0E0B               	movlw	11
 22334  0057A2  6FE6               	movwf	_cur_state& (0+255),b
 22335                           
 22336                           ; BSR set to: 0
 22337                           ;UI.c: 488: lcdInst(0b10000000);;
 22338  0057A4  0E80               	movlw	128
 22339  0057A6  ECB6  F02D         	call	i2_lcdInst
 22340                           
 22341                           ;UI.c: 489: printf("1. DATE/TIME   <");
 22342  0057AA  0EC9               	movlw	low STR_31
 22343  0057AC  6E0D               	movwf	i2printf@f,c
 22344  0057AE  0EFD               	movlw	high STR_31
 22345  0057B0  6E0E               	movwf	i2printf@f+1,c
 22346  0057B2  EC11  F012         	call	i2_printf	;wreg free
 22347                           
 22348                           ;UI.c: 490: lcdInst(0b11000000);;
 22349  0057B6  0EC0               	movlw	192
 22350  0057B8  ECB6  F02D         	call	i2_lcdInst
 22351                           
 22352                           ;UI.c: 491: printf("2. SORT         ");
 22353  0057BC  0E0E               	movlw	low STR_32
 22354  0057BE  6E0D               	movwf	i2printf@f,c
 22355  0057C0  0EFD               	movlw	high STR_32
 22356  0057C2  6E0E               	movwf	i2printf@f+1,c
 22357  0057C4  EC11  F012         	call	i2_printf	;wreg free
 22358  0057C8  0012               	return		;funcret
 22359  0057CA                     __end_of_change_state_to_menu_11:
 22360                           	opt stack 0
 22361                           pclatu	equ	0xFFB
 22362                           pclath	equ	0xFFA
 22363                           tblptru	equ	0xFF8
 22364                           tblptrh	equ	0xFF7
 22365                           tblptrl	equ	0xFF6
 22366                           tablat	equ	0xFF5
 22367                           prodh	equ	0xFF4
 22368                           prodl	equ	0xFF3
 22369                           intcon	equ	0xFF2
 22370                           intcon2	equ	0xFF1
 22371                           intcon3	equ	0xFF0
 22372                           indf0	equ	0xFEF
 22373                           postinc0	equ	0xFEE
 22374                           fsr0h	equ	0xFEA
 22375                           fsr0l	equ	0xFE9
 22376                           wreg	equ	0xFE8
 22377                           postdec1	equ	0xFE5
 22378                           fsr1h	equ	0xFE2
 22379                           fsr1l	equ	0xFE1
 22380                           indf2	equ	0xFDF
 22381                           postinc2	equ	0xFDE
 22382                           postdec2	equ	0xFDD
 22383                           fsr2h	equ	0xFDA
 22384                           fsr2l	equ	0xFD9
 22385                           status	equ	0xFD8
 22386                           
 22387 ;; *************** function _change_state_to_logs_34 *****************
 22388 ;; Defined at:
 22389 ;;		line 552 in file "UI.c"
 22390 ;; Parameters:    Size  Location     Type
 22391 ;;		None
 22392 ;; Auto vars:     Size  Location     Type
 22393 ;;		None
 22394 ;; Return value:  Size  Location     Type
 22395 ;;                  1    wreg      void 
 22396 ;; Registers used:
 22397 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22398 ;; Tracked objects:
 22399 ;;		On entry : 0/0
 22400 ;;		On exit  : 0/0
 22401 ;;		Unchanged: 0/0
 22402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22407 ;;Total ram usage:        0 bytes
 22408 ;; Hardware stack levels used:    1
 22409 ;; Hardware stack levels required when called:    3
 22410 ;; This function calls:
 22411 ;;		i2_lcdInst
 22412 ;;		i2_printf
 22413 ;; This function is called by:
 22414 ;;		_updateMenu
 22415 ;;		_inputHandler
 22416 ;; This function uses a non-reentrant model
 22417 ;;
 22418                           
 22419                           	psect	text76
 22420  0057CA                     __ptext76:
 22421                           	opt stack 0
 22422  0057CA                     _change_state_to_logs_34:
 22423                           	opt stack 18
 22424                           
 22425                           ;UI.c: 553: cur_state = 1034;
 22426                           
 22427                           ;incstack = 0
 22428  0057CA  0E04               	movlw	4
 22429  0057CC  0100               	movlb	0	; () banked
 22430  0057CE  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22431  0057D0  0E0A               	movlw	10
 22432  0057D2  6FE6               	movwf	_cur_state& (0+255),b
 22433                           
 22434                           ; BSR set to: 0
 22435                           ;UI.c: 554: lcdInst(0b10000000);;
 22436  0057D4  0E80               	movlw	128
 22437  0057D6  ECB6  F02D         	call	i2_lcdInst
 22438                           
 22439                           ;UI.c: 555: printf("LOG 3           ");
 22440  0057DA  0EDB               	movlw	low STR_44
 22441  0057DC  6E0D               	movwf	i2printf@f,c
 22442  0057DE  0EFC               	movlw	high STR_44
 22443  0057E0  6E0E               	movwf	i2printf@f+1,c
 22444  0057E2  EC11  F012         	call	i2_printf	;wreg free
 22445                           
 22446                           ;UI.c: 556: lcdInst(0b11000000);;
 22447  0057E6  0EC0               	movlw	192
 22448  0057E8  ECB6  F02D         	call	i2_lcdInst
 22449                           
 22450                           ;UI.c: 557: printf("LOG 4          <");
 22451  0057EC  0E96               	movlw	low STR_50
 22452  0057EE  6E0D               	movwf	i2printf@f,c
 22453  0057F0  0EFD               	movlw	high STR_50
 22454  0057F2  6E0E               	movwf	i2printf@f+1,c
 22455  0057F4  EC11  F012         	call	i2_printf	;wreg free
 22456  0057F8  0012               	return		;funcret
 22457  0057FA                     __end_of_change_state_to_logs_34:
 22458                           	opt stack 0
 22459                           pclatu	equ	0xFFB
 22460                           pclath	equ	0xFFA
 22461                           tblptru	equ	0xFF8
 22462                           tblptrh	equ	0xFF7
 22463                           tblptrl	equ	0xFF6
 22464                           tablat	equ	0xFF5
 22465                           prodh	equ	0xFF4
 22466                           prodl	equ	0xFF3
 22467                           intcon	equ	0xFF2
 22468                           intcon2	equ	0xFF1
 22469                           intcon3	equ	0xFF0
 22470                           indf0	equ	0xFEF
 22471                           postinc0	equ	0xFEE
 22472                           fsr0h	equ	0xFEA
 22473                           fsr0l	equ	0xFE9
 22474                           wreg	equ	0xFE8
 22475                           postdec1	equ	0xFE5
 22476                           fsr1h	equ	0xFE2
 22477                           fsr1l	equ	0xFE1
 22478                           indf2	equ	0xFDF
 22479                           postinc2	equ	0xFDE
 22480                           postdec2	equ	0xFDD
 22481                           fsr2h	equ	0xFDA
 22482                           fsr2l	equ	0xFD9
 22483                           status	equ	0xFD8
 22484                           
 22485 ;; *************** function _change_state_to_logs_33 *****************
 22486 ;; Defined at:
 22487 ;;		line 545 in file "UI.c"
 22488 ;; Parameters:    Size  Location     Type
 22489 ;;		None
 22490 ;; Auto vars:     Size  Location     Type
 22491 ;;		None
 22492 ;; Return value:  Size  Location     Type
 22493 ;;                  1    wreg      void 
 22494 ;; Registers used:
 22495 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22496 ;; Tracked objects:
 22497 ;;		On entry : 0/0
 22498 ;;		On exit  : 0/0
 22499 ;;		Unchanged: 0/0
 22500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22505 ;;Total ram usage:        0 bytes
 22506 ;; Hardware stack levels used:    1
 22507 ;; Hardware stack levels required when called:    3
 22508 ;; This function calls:
 22509 ;;		i2_lcdInst
 22510 ;;		i2_printf
 22511 ;; This function is called by:
 22512 ;;		_updateMenu
 22513 ;;		_inputHandler
 22514 ;; This function uses a non-reentrant model
 22515 ;;
 22516                           
 22517                           	psect	text77
 22518  0057FA                     __ptext77:
 22519                           	opt stack 0
 22520  0057FA                     _change_state_to_logs_33:
 22521                           	opt stack 18
 22522                           
 22523                           ;UI.c: 546: cur_state = 1033;
 22524                           
 22525                           ;incstack = 0
 22526  0057FA  0E04               	movlw	4
 22527  0057FC  0100               	movlb	0	; () banked
 22528  0057FE  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22529  005800  0E09               	movlw	9
 22530  005802  6FE6               	movwf	_cur_state& (0+255),b
 22531                           
 22532                           ; BSR set to: 0
 22533                           ;UI.c: 547: lcdInst(0b10000000);;
 22534  005804  0E80               	movlw	128
 22535  005806  ECB6  F02D         	call	i2_lcdInst
 22536                           
 22537                           ;UI.c: 548: printf("LOG 3          <");
 22538  00580A  0E85               	movlw	low STR_46
 22539  00580C  6E0D               	movwf	i2printf@f,c
 22540  00580E  0EFD               	movlw	high STR_46
 22541  005810  6E0E               	movwf	i2printf@f+1,c
 22542  005812  EC11  F012         	call	i2_printf	;wreg free
 22543                           
 22544                           ;UI.c: 549: lcdInst(0b11000000);;
 22545  005816  0EC0               	movlw	192
 22546  005818  ECB6  F02D         	call	i2_lcdInst
 22547                           
 22548                           ;UI.c: 550: printf("LOG 4           ");
 22549  00581C  0EEC               	movlw	low STR_48
 22550  00581E  6E0D               	movwf	i2printf@f,c
 22551  005820  0EFC               	movlw	high STR_48
 22552  005822  6E0E               	movwf	i2printf@f+1,c
 22553  005824  EC11  F012         	call	i2_printf	;wreg free
 22554  005828  0012               	return		;funcret
 22555  00582A                     __end_of_change_state_to_logs_33:
 22556                           	opt stack 0
 22557                           pclatu	equ	0xFFB
 22558                           pclath	equ	0xFFA
 22559                           tblptru	equ	0xFF8
 22560                           tblptrh	equ	0xFF7
 22561                           tblptrl	equ	0xFF6
 22562                           tablat	equ	0xFF5
 22563                           prodh	equ	0xFF4
 22564                           prodl	equ	0xFF3
 22565                           intcon	equ	0xFF2
 22566                           intcon2	equ	0xFF1
 22567                           intcon3	equ	0xFF0
 22568                           indf0	equ	0xFEF
 22569                           postinc0	equ	0xFEE
 22570                           fsr0h	equ	0xFEA
 22571                           fsr0l	equ	0xFE9
 22572                           wreg	equ	0xFE8
 22573                           postdec1	equ	0xFE5
 22574                           fsr1h	equ	0xFE2
 22575                           fsr1l	equ	0xFE1
 22576                           indf2	equ	0xFDF
 22577                           postinc2	equ	0xFDE
 22578                           postdec2	equ	0xFDD
 22579                           fsr2h	equ	0xFDA
 22580                           fsr2l	equ	0xFD9
 22581                           status	equ	0xFD8
 22582                           
 22583 ;; *************** function _change_state_to_logs_23 *****************
 22584 ;; Defined at:
 22585 ;;		line 538 in file "UI.c"
 22586 ;; Parameters:    Size  Location     Type
 22587 ;;		None
 22588 ;; Auto vars:     Size  Location     Type
 22589 ;;		None
 22590 ;; Return value:  Size  Location     Type
 22591 ;;                  1    wreg      void 
 22592 ;; Registers used:
 22593 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22594 ;; Tracked objects:
 22595 ;;		On entry : 0/0
 22596 ;;		On exit  : 0/0
 22597 ;;		Unchanged: 0/0
 22598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22603 ;;Total ram usage:        0 bytes
 22604 ;; Hardware stack levels used:    1
 22605 ;; Hardware stack levels required when called:    3
 22606 ;; This function calls:
 22607 ;;		i2_lcdInst
 22608 ;;		i2_printf
 22609 ;; This function is called by:
 22610 ;;		_updateMenu
 22611 ;;		_inputHandler
 22612 ;; This function uses a non-reentrant model
 22613 ;;
 22614                           
 22615                           	psect	text78
 22616  0058E8                     __ptext78:
 22617                           	opt stack 0
 22618  0058E8                     _change_state_to_logs_23:
 22619                           	opt stack 18
 22620                           
 22621                           ;UI.c: 539: cur_state = 1023;
 22622                           
 22623                           ;incstack = 0
 22624  0058E8  0E03               	movlw	3
 22625  0058EA  0100               	movlb	0	; () banked
 22626  0058EC  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22627  0058EE  69E6               	setf	_cur_state& (0+255),b
 22628                           
 22629                           ; BSR set to: 0
 22630                           ;UI.c: 540: lcdInst(0b10000000);;
 22631  0058F0  0E80               	movlw	128
 22632  0058F2  ECB6  F02D         	call	i2_lcdInst
 22633                           
 22634                           ;UI.c: 541: printf("LOG 2           ");
 22635  0058F6  0ECA               	movlw	low STR_40
 22636  0058F8  6E0D               	movwf	i2printf@f,c
 22637  0058FA  0EFC               	movlw	high STR_40
 22638  0058FC  6E0E               	movwf	i2printf@f+1,c
 22639  0058FE  EC11  F012         	call	i2_printf	;wreg free
 22640                           
 22641                           ;UI.c: 542: lcdInst(0b11000000);;
 22642  005902  0EC0               	movlw	192
 22643  005904  ECB6  F02D         	call	i2_lcdInst
 22644                           
 22645                           ;UI.c: 543: printf("LOG 3          <");
 22646  005908  0E85               	movlw	low STR_46
 22647  00590A  6E0D               	movwf	i2printf@f,c
 22648  00590C  0EFD               	movlw	high STR_46
 22649  00590E  6E0E               	movwf	i2printf@f+1,c
 22650  005910  EC11  F012         	call	i2_printf	;wreg free
 22651  005914  0012               	return		;funcret
 22652  005916                     __end_of_change_state_to_logs_23:
 22653                           	opt stack 0
 22654                           pclatu	equ	0xFFB
 22655                           pclath	equ	0xFFA
 22656                           tblptru	equ	0xFF8
 22657                           tblptrh	equ	0xFF7
 22658                           tblptrl	equ	0xFF6
 22659                           tablat	equ	0xFF5
 22660                           prodh	equ	0xFF4
 22661                           prodl	equ	0xFF3
 22662                           intcon	equ	0xFF2
 22663                           intcon2	equ	0xFF1
 22664                           intcon3	equ	0xFF0
 22665                           indf0	equ	0xFEF
 22666                           postinc0	equ	0xFEE
 22667                           fsr0h	equ	0xFEA
 22668                           fsr0l	equ	0xFE9
 22669                           wreg	equ	0xFE8
 22670                           postdec1	equ	0xFE5
 22671                           fsr1h	equ	0xFE2
 22672                           fsr1l	equ	0xFE1
 22673                           indf2	equ	0xFDF
 22674                           postinc2	equ	0xFDE
 22675                           postdec2	equ	0xFDD
 22676                           fsr2h	equ	0xFDA
 22677                           fsr2l	equ	0xFD9
 22678                           status	equ	0xFD8
 22679                           
 22680 ;; *************** function _change_state_to_logs_22 *****************
 22681 ;; Defined at:
 22682 ;;		line 531 in file "UI.c"
 22683 ;; Parameters:    Size  Location     Type
 22684 ;;		None
 22685 ;; Auto vars:     Size  Location     Type
 22686 ;;		None
 22687 ;; Return value:  Size  Location     Type
 22688 ;;                  1    wreg      void 
 22689 ;; Registers used:
 22690 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22691 ;; Tracked objects:
 22692 ;;		On entry : 0/0
 22693 ;;		On exit  : 0/0
 22694 ;;		Unchanged: 0/0
 22695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22700 ;;Total ram usage:        0 bytes
 22701 ;; Hardware stack levels used:    1
 22702 ;; Hardware stack levels required when called:    3
 22703 ;; This function calls:
 22704 ;;		i2_lcdInst
 22705 ;;		i2_printf
 22706 ;; This function is called by:
 22707 ;;		_updateMenu
 22708 ;;		_inputHandler
 22709 ;; This function uses a non-reentrant model
 22710 ;;
 22711                           
 22712                           	psect	text79
 22713  00582A                     __ptext79:
 22714                           	opt stack 0
 22715  00582A                     _change_state_to_logs_22:
 22716                           	opt stack 18
 22717                           
 22718                           ;UI.c: 532: cur_state = 1022;
 22719                           
 22720                           ;incstack = 0
 22721  00582A  0E03               	movlw	3
 22722  00582C  0100               	movlb	0	; () banked
 22723  00582E  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22724  005830  0EFE               	movlw	254
 22725  005832  6FE6               	movwf	_cur_state& (0+255),b
 22726                           
 22727                           ; BSR set to: 0
 22728                           ;UI.c: 533: lcdInst(0b10000000);;
 22729  005834  0E80               	movlw	128
 22730  005836  ECB6  F02D         	call	i2_lcdInst
 22731                           
 22732                           ;UI.c: 534: printf("LOG 2          <");
 22733  00583A  0E74               	movlw	low STR_42
 22734  00583C  6E0D               	movwf	i2printf@f,c
 22735  00583E  0EFD               	movlw	high STR_42
 22736  005840  6E0E               	movwf	i2printf@f+1,c
 22737  005842  EC11  F012         	call	i2_printf	;wreg free
 22738                           
 22739                           ;UI.c: 535: lcdInst(0b11000000);;
 22740  005846  0EC0               	movlw	192
 22741  005848  ECB6  F02D         	call	i2_lcdInst
 22742                           
 22743                           ;UI.c: 536: printf("LOG 3           ");
 22744  00584C  0EDB               	movlw	low STR_44
 22745  00584E  6E0D               	movwf	i2printf@f,c
 22746  005850  0EFC               	movlw	high STR_44
 22747  005852  6E0E               	movwf	i2printf@f+1,c
 22748  005854  EC11  F012         	call	i2_printf	;wreg free
 22749  005858  0012               	return		;funcret
 22750  00585A                     __end_of_change_state_to_logs_22:
 22751                           	opt stack 0
 22752                           pclatu	equ	0xFFB
 22753                           pclath	equ	0xFFA
 22754                           tblptru	equ	0xFF8
 22755                           tblptrh	equ	0xFF7
 22756                           tblptrl	equ	0xFF6
 22757                           tablat	equ	0xFF5
 22758                           prodh	equ	0xFF4
 22759                           prodl	equ	0xFF3
 22760                           intcon	equ	0xFF2
 22761                           intcon2	equ	0xFF1
 22762                           intcon3	equ	0xFF0
 22763                           indf0	equ	0xFEF
 22764                           postinc0	equ	0xFEE
 22765                           fsr0h	equ	0xFEA
 22766                           fsr0l	equ	0xFE9
 22767                           wreg	equ	0xFE8
 22768                           postdec1	equ	0xFE5
 22769                           fsr1h	equ	0xFE2
 22770                           fsr1l	equ	0xFE1
 22771                           indf2	equ	0xFDF
 22772                           postinc2	equ	0xFDE
 22773                           postdec2	equ	0xFDD
 22774                           fsr2h	equ	0xFDA
 22775                           fsr2l	equ	0xFD9
 22776                           status	equ	0xFD8
 22777                           
 22778 ;; *************** function _change_state_to_logs_12 *****************
 22779 ;; Defined at:
 22780 ;;		line 524 in file "UI.c"
 22781 ;; Parameters:    Size  Location     Type
 22782 ;;		None
 22783 ;; Auto vars:     Size  Location     Type
 22784 ;;		None
 22785 ;; Return value:  Size  Location     Type
 22786 ;;                  1    wreg      void 
 22787 ;; Registers used:
 22788 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22789 ;; Tracked objects:
 22790 ;;		On entry : 0/0
 22791 ;;		On exit  : 0/0
 22792 ;;		Unchanged: 0/0
 22793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22798 ;;Total ram usage:        0 bytes
 22799 ;; Hardware stack levels used:    1
 22800 ;; Hardware stack levels required when called:    3
 22801 ;; This function calls:
 22802 ;;		i2_lcdInst
 22803 ;;		i2_printf
 22804 ;; This function is called by:
 22805 ;;		_updateMenu
 22806 ;;		_inputHandler
 22807 ;; This function uses a non-reentrant model
 22808 ;;
 22809                           
 22810                           	psect	text80
 22811  00585A                     __ptext80:
 22812                           	opt stack 0
 22813  00585A                     _change_state_to_logs_12:
 22814                           	opt stack 18
 22815                           
 22816                           ;UI.c: 525: cur_state = 1012;
 22817                           
 22818                           ;incstack = 0
 22819  00585A  0E03               	movlw	3
 22820  00585C  0100               	movlb	0	; () banked
 22821  00585E  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22822  005860  0EF4               	movlw	244
 22823  005862  6FE6               	movwf	_cur_state& (0+255),b
 22824                           
 22825                           ; BSR set to: 0
 22826                           ;UI.c: 526: lcdInst(0b10000000);;
 22827  005864  0E80               	movlw	128
 22828  005866  ECB6  F02D         	call	i2_lcdInst
 22829                           
 22830                           ;UI.c: 527: printf("LOG 1           ");
 22831  00586A  0EB9               	movlw	low STR_41
 22832  00586C  6E0D               	movwf	i2printf@f,c
 22833  00586E  0EFC               	movlw	high STR_41
 22834  005870  6E0E               	movwf	i2printf@f+1,c
 22835  005872  EC11  F012         	call	i2_printf	;wreg free
 22836                           
 22837                           ;UI.c: 528: lcdInst(0b11000000);;
 22838  005876  0EC0               	movlw	192
 22839  005878  ECB6  F02D         	call	i2_lcdInst
 22840                           
 22841                           ;UI.c: 529: printf("LOG 2          <");
 22842  00587C  0E74               	movlw	low STR_42
 22843  00587E  6E0D               	movwf	i2printf@f,c
 22844  005880  0EFD               	movlw	high STR_42
 22845  005882  6E0E               	movwf	i2printf@f+1,c
 22846  005884  EC11  F012         	call	i2_printf	;wreg free
 22847  005888  0012               	return		;funcret
 22848  00588A                     __end_of_change_state_to_logs_12:
 22849                           	opt stack 0
 22850                           pclatu	equ	0xFFB
 22851                           pclath	equ	0xFFA
 22852                           tblptru	equ	0xFF8
 22853                           tblptrh	equ	0xFF7
 22854                           tblptrl	equ	0xFF6
 22855                           tablat	equ	0xFF5
 22856                           prodh	equ	0xFF4
 22857                           prodl	equ	0xFF3
 22858                           intcon	equ	0xFF2
 22859                           intcon2	equ	0xFF1
 22860                           intcon3	equ	0xFF0
 22861                           indf0	equ	0xFEF
 22862                           postinc0	equ	0xFEE
 22863                           fsr0h	equ	0xFEA
 22864                           fsr0l	equ	0xFE9
 22865                           wreg	equ	0xFE8
 22866                           postdec1	equ	0xFE5
 22867                           fsr1h	equ	0xFE2
 22868                           fsr1l	equ	0xFE1
 22869                           indf2	equ	0xFDF
 22870                           postinc2	equ	0xFDE
 22871                           postdec2	equ	0xFDD
 22872                           fsr2h	equ	0xFDA
 22873                           fsr2l	equ	0xFD9
 22874                           status	equ	0xFD8
 22875                           
 22876 ;; *************** function _change_state_to_logs_11 *****************
 22877 ;; Defined at:
 22878 ;;		line 517 in file "UI.c"
 22879 ;; Parameters:    Size  Location     Type
 22880 ;;		None
 22881 ;; Auto vars:     Size  Location     Type
 22882 ;;		None
 22883 ;; Return value:  Size  Location     Type
 22884 ;;                  1    wreg      void 
 22885 ;; Registers used:
 22886 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22887 ;; Tracked objects:
 22888 ;;		On entry : 0/0
 22889 ;;		On exit  : 0/0
 22890 ;;		Unchanged: 0/0
 22891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22896 ;;Total ram usage:        0 bytes
 22897 ;; Hardware stack levels used:    1
 22898 ;; Hardware stack levels required when called:    3
 22899 ;; This function calls:
 22900 ;;		i2_lcdInst
 22901 ;;		i2_printf
 22902 ;; This function is called by:
 22903 ;;		_updateMenu
 22904 ;;		_inputHandler
 22905 ;; This function uses a non-reentrant model
 22906 ;;
 22907                           
 22908                           	psect	text81
 22909  00588A                     __ptext81:
 22910                           	opt stack 0
 22911  00588A                     _change_state_to_logs_11:
 22912                           	opt stack 18
 22913                           
 22914                           ;UI.c: 518: cur_state = 1011;
 22915                           
 22916                           ;incstack = 0
 22917  00588A  0E03               	movlw	3
 22918  00588C  0100               	movlb	0	; () banked
 22919  00588E  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22920  005890  0EF3               	movlw	243
 22921  005892  6FE6               	movwf	_cur_state& (0+255),b
 22922                           
 22923                           ; BSR set to: 0
 22924                           ;UI.c: 519: lcdInst(0b10000000);;
 22925  005894  0E80               	movlw	128
 22926  005896  ECB6  F02D         	call	i2_lcdInst
 22927                           
 22928                           ;UI.c: 520: printf("LOG 1          <");
 22929  00589A  0E63               	movlw	low STR_39
 22930  00589C  6E0D               	movwf	i2printf@f,c
 22931  00589E  0EFD               	movlw	high STR_39
 22932  0058A0  6E0E               	movwf	i2printf@f+1,c
 22933  0058A2  EC11  F012         	call	i2_printf	;wreg free
 22934                           
 22935                           ;UI.c: 521: lcdInst(0b11000000);;
 22936  0058A6  0EC0               	movlw	192
 22937  0058A8  ECB6  F02D         	call	i2_lcdInst
 22938                           
 22939                           ;UI.c: 522: printf("LOG 2           ");
 22940  0058AC  0ECA               	movlw	low STR_40
 22941  0058AE  6E0D               	movwf	i2printf@f,c
 22942  0058B0  0EFC               	movlw	high STR_40
 22943  0058B2  6E0E               	movwf	i2printf@f+1,c
 22944  0058B4  EC11  F012         	call	i2_printf	;wreg free
 22945  0058B8  0012               	return		;funcret
 22946  0058BA                     __end_of_change_state_to_logs_11:
 22947                           	opt stack 0
 22948                           pclatu	equ	0xFFB
 22949                           pclath	equ	0xFFA
 22950                           tblptru	equ	0xFF8
 22951                           tblptrh	equ	0xFF7
 22952                           tblptrl	equ	0xFF6
 22953                           tablat	equ	0xFF5
 22954                           prodh	equ	0xFF4
 22955                           prodl	equ	0xFF3
 22956                           intcon	equ	0xFF2
 22957                           intcon2	equ	0xFF1
 22958                           intcon3	equ	0xFF0
 22959                           indf0	equ	0xFEF
 22960                           postinc0	equ	0xFEE
 22961                           fsr0h	equ	0xFEA
 22962                           fsr0l	equ	0xFE9
 22963                           wreg	equ	0xFE8
 22964                           postdec1	equ	0xFE5
 22965                           fsr1h	equ	0xFE2
 22966                           fsr1l	equ	0xFE1
 22967                           indf2	equ	0xFDF
 22968                           postinc2	equ	0xFDE
 22969                           postdec2	equ	0xFDD
 22970                           fsr2h	equ	0xFDA
 22971                           fsr2l	equ	0xFD9
 22972                           status	equ	0xFD8
 22973                           
 22974 ;; *************** function _dispLogs *****************
 22975 ;; Defined at:
 22976 ;;		line 470 in file "UI.c"
 22977 ;; Parameters:    Size  Location     Type
 22978 ;;  myLog           2   17[COMRAM] int 
 22979 ;; Auto vars:     Size  Location     Type
 22980 ;;		None
 22981 ;; Return value:  Size  Location     Type
 22982 ;;                  1    wreg      void 
 22983 ;; Registers used:
 22984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22985 ;; Tracked objects:
 22986 ;;		On entry : 0/0
 22987 ;;		On exit  : 0/0
 22988 ;;		Unchanged: 0/0
 22989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22990 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22993 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22994 ;;Total ram usage:        2 bytes
 22995 ;; Hardware stack levels used:    1
 22996 ;; Hardware stack levels required when called:    2
 22997 ;; This function calls:
 22998 ;;		_retrieveLog
 22999 ;; This function is called by:
 23000 ;;		_updateMenu
 23001 ;; This function uses a non-reentrant model
 23002 ;;
 23003                           
 23004                           	psect	text82
 23005  005A34                     __ptext82:
 23006                           	opt stack 0
 23007  005A34                     _dispLogs:
 23008                           	opt stack 20
 23009                           
 23010                           ;UI.c: 471: logstate = 1;
 23011                           
 23012                           ;incstack = 0
 23013  005A34  0E00               	movlw	0
 23014  005A36  0100               	movlb	0	; () banked
 23015  005A38  6FF9               	movwf	(_logstate+1)& (0+255),b
 23016  005A3A  0E01               	movlw	1
 23017  005A3C  6FF8               	movwf	_logstate& (0+255),b
 23018                           
 23019                           ; BSR set to: 0
 23020                           ;UI.c: 472: log = myLog;
 23021  005A3E  C012  F0EE         	movff	dispLogs@myLog,_log
 23022  005A42  C013  F0EF         	movff	dispLogs@myLog+1,_log+1
 23023                           
 23024                           ; BSR set to: 0
 23025                           ;UI.c: 473: retrieveLog(myLog - 1);
 23026  005A46  0EFF               	movlw	255
 23027  005A48  2412               	addwf	dispLogs@myLog,w,c
 23028  005A4A  6E07               	movwf	retrieveLog@logNum,c
 23029  005A4C  0EFF               	movlw	255
 23030  005A4E  2013               	addwfc	dispLogs@myLog+1,w,c
 23031  005A50  6E08               	movwf	retrieveLog@logNum+1,c
 23032  005A52  EC14  F020         	call	_retrieveLog	;wreg free
 23033  005A56  0012               	return		;funcret
 23034  005A58                     __end_of_dispLogs:
 23035                           	opt stack 0
 23036                           pclatu	equ	0xFFB
 23037                           pclath	equ	0xFFA
 23038                           tblptru	equ	0xFF8
 23039                           tblptrh	equ	0xFF7
 23040                           tblptrl	equ	0xFF6
 23041                           tablat	equ	0xFF5
 23042                           prodh	equ	0xFF4
 23043                           prodl	equ	0xFF3
 23044                           intcon	equ	0xFF2
 23045                           intcon2	equ	0xFF1
 23046                           intcon3	equ	0xFF0
 23047                           indf0	equ	0xFEF
 23048                           postinc0	equ	0xFEE
 23049                           fsr0h	equ	0xFEA
 23050                           fsr0l	equ	0xFE9
 23051                           wreg	equ	0xFE8
 23052                           postdec1	equ	0xFE5
 23053                           fsr1h	equ	0xFE2
 23054                           fsr1l	equ	0xFE1
 23055                           indf2	equ	0xFDF
 23056                           postinc2	equ	0xFDE
 23057                           postdec2	equ	0xFDD
 23058                           fsr2h	equ	0xFDA
 23059                           fsr2l	equ	0xFD9
 23060                           status	equ	0xFD8
 23061                           
 23062 ;; *************** function _retrieveLog *****************
 23063 ;; Defined at:
 23064 ;;		line 138 in file "EEPROM.c"
 23065 ;; Parameters:    Size  Location     Type
 23066 ;;  logNum          2    6[COMRAM] int 
 23067 ;; Auto vars:     Size  Location     Type
 23068 ;;  i               2   13[COMRAM] int 
 23069 ;;  addr            2   15[COMRAM] unsigned short 
 23070 ;;  byte3           1   12[COMRAM] unsigned char 
 23071 ;;  byte2           1   11[COMRAM] unsigned char 
 23072 ;;  byte1           1   10[COMRAM] unsigned char 
 23073 ;; Return value:  Size  Location     Type
 23074 ;;                  1    wreg      void 
 23075 ;; Registers used:
 23076 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23077 ;; Tracked objects:
 23078 ;;		On entry : 0/0
 23079 ;;		On exit  : 0/0
 23080 ;;		Unchanged: 0/0
 23081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23082 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23083 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23084 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23085 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23086 ;;Total ram usage:       11 bytes
 23087 ;; Hardware stack levels used:    1
 23088 ;; Hardware stack levels required when called:    1
 23089 ;; This function calls:
 23090 ;;		i2_EEPROM_read
 23091 ;;		i2___wmul
 23092 ;; This function is called by:
 23093 ;;		_dispLogs
 23094 ;; This function uses a non-reentrant model
 23095 ;;
 23096                           
 23097                           	psect	text83
 23098  004028                     __ptext83:
 23099                           	opt stack 0
 23100  004028                     _retrieveLog:
 23101                           	opt stack 20
 23102                           
 23103                           ;EEPROM.c: 144: unsigned short addr = 1 + logNum * 11;
 23104                           
 23105                           ;incstack = 0
 23106  004028  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 23107  00402C  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 23108  004030  0E00               	movlw	0
 23109  004032  6E04               	movwf	i2___wmul@multiplicand+1,c
 23110  004034  0E0B               	movlw	11
 23111  004036  6E03               	movwf	i2___wmul@multiplicand,c
 23112  004038  ECF4  F02C         	call	i2___wmul	;wreg free
 23113  00403C  0E01               	movlw	1
 23114  00403E  2401               	addwf	?i2___wmul,w,c
 23115  004040  6E10               	movwf	retrieveLog@addr,c
 23116  004042  0E00               	movlw	0
 23117  004044  2002               	addwfc	?i2___wmul+1,w,c
 23118  004046  6E11               	movwf	retrieveLog@addr+1,c
 23119                           
 23120                           ;EEPROM.c: 147: unsigned char byte1 = EEPROM_read(addr);
 23121  004048  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23122  00404C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23123  004050  EC82  F02D         	call	i2_EEPROM_read	;wreg free
 23124  004054  6E0B               	movwf	retrieveLog@byte1,c
 23125                           
 23126                           ;EEPROM.c: 148: log_completion = (int)(byte1 & 0b10000000);
 23127  004056  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23128  00405A  0E80               	movlw	128
 23129  00405C  1609               	andwf	??_retrieveLog,f,c
 23130  00405E  5009               	movf	??_retrieveLog,w,c
 23131  004060  0100               	movlb	0	; () banked
 23132  004062  6FF0               	movwf	_log_completion& (0+255),b
 23133  004064  6BF1               	clrf	(_log_completion+1)& (0+255),b
 23134                           
 23135                           ; BSR set to: 0
 23136                           ;EEPROM.c: 149: log_count_total = (int)(byte1 & 0b00001111);
 23137  004066  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23138  00406A  0E0F               	movlw	15
 23139  00406C  1609               	andwf	??_retrieveLog,f,c
 23140  00406E  5009               	movf	??_retrieveLog,w,c
 23141  004070  0101               	movlb	1	; () banked
 23142  004072  6F41               	movwf	_log_count_total& (0+255),b
 23143  004074  6B42               	clrf	(_log_count_total+1)& (0+255),b
 23144                           
 23145                           ; BSR set to: 1
 23146                           ;EEPROM.c: 150: addr++;
 23147  004076  4A10               	infsnz	retrieveLog@addr,f,c
 23148  004078  2A11               	incf	retrieveLog@addr+1,f,c
 23149                           
 23150                           ; BSR set to: 1
 23151                           ;EEPROM.c: 153: unsigned char byte2 = EEPROM_read(addr);
 23152  00407A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23153  00407E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23154  004082  EC82  F02D         	call	i2_EEPROM_read	;wreg free
 23155  004086  6E0C               	movwf	retrieveLog@byte2,c
 23156                           
 23157                           ;EEPROM.c: 154: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 23158  004088  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23159  00408C  3A09               	swapf	??_retrieveLog,f,c
 23160  00408E  0E0F               	movlw	15
 23161  004090  1609               	andwf	??_retrieveLog,f,c
 23162  004092  0E0F               	movlw	15
 23163  004094  1609               	andwf	??_retrieveLog,f,c
 23164  004096  5009               	movf	??_retrieveLog,w,c
 23165  004098  0100               	movlb	0	; () banked
 23166  00409A  6FF2               	movwf	_log_count_pop_no_tab& (0+255),b
 23167  00409C  6BF3               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 23168                           
 23169                           ; BSR set to: 0
 23170                           ;EEPROM.c: 155: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 23171  00409E  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23172  0040A2  0E0F               	movlw	15
 23173  0040A4  1609               	andwf	??_retrieveLog,f,c
 23174  0040A6  5009               	movf	??_retrieveLog,w,c
 23175  0040A8  0100               	movlb	0	; () banked
 23176  0040AA  6FF4               	movwf	_log_count_pop_w_tab& (0+255),b
 23177  0040AC  6BF5               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 23178                           
 23179                           ; BSR set to: 0
 23180                           ;EEPROM.c: 156: addr++;
 23181  0040AE  4A10               	infsnz	retrieveLog@addr,f,c
 23182  0040B0  2A11               	incf	retrieveLog@addr+1,f,c
 23183                           
 23184                           ; BSR set to: 0
 23185                           ;EEPROM.c: 157: unsigned char byte3 = EEPROM_read(addr);
 23186  0040B2  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23187  0040B6  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23188  0040BA  EC82  F02D         	call	i2_EEPROM_read	;wreg free
 23189  0040BE  6E0D               	movwf	retrieveLog@byte3,c
 23190                           
 23191                           ;EEPROM.c: 158: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 23192  0040C0  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23193  0040C4  3A09               	swapf	??_retrieveLog,f,c
 23194  0040C6  0E0F               	movlw	15
 23195  0040C8  1609               	andwf	??_retrieveLog,f,c
 23196  0040CA  0E0F               	movlw	15
 23197  0040CC  1609               	andwf	??_retrieveLog,f,c
 23198  0040CE  5009               	movf	??_retrieveLog,w,c
 23199  0040D0  0101               	movlb	1	; () banked
 23200  0040D2  6F3F               	movwf	_log_count_can_w_lab& (0+255),b
 23201  0040D4  6B40               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 23202                           
 23203                           ; BSR set to: 1
 23204                           ;EEPROM.c: 159: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 23205  0040D6  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23206  0040DA  0E0F               	movlw	15
 23207  0040DC  1609               	andwf	??_retrieveLog,f,c
 23208  0040DE  5009               	movf	??_retrieveLog,w,c
 23209  0040E0  6E69               	movwf	_log_count_can_no_lab,c
 23210  0040E2  6A6A               	clrf	_log_count_can_no_lab+1,c
 23211                           
 23212                           ; BSR set to: 1
 23213                           ;EEPROM.c: 160: addr++;
 23214  0040E4  4A10               	infsnz	retrieveLog@addr,f,c
 23215  0040E6  2A11               	incf	retrieveLog@addr+1,f,c
 23216                           
 23217                           ; BSR set to: 1
 23218                           ;EEPROM.c: 163: for(int i = 0; i < 7; i++){
 23219  0040E8  0E00               	movlw	0
 23220  0040EA  6E0F               	movwf	retrieveLog@i+1,c
 23221  0040EC  0E00               	movlw	0
 23222  0040EE  6E0E               	movwf	retrieveLog@i,c
 23223  0040F0                     i2l7273:
 23224                           
 23225                           ; BSR set to: 1
 23226  0040F0  BE0F               	btfsc	retrieveLog@i+1,7,c
 23227  0040F2  D006               	goto	i2l7277
 23228  0040F4  500F               	movf	retrieveLog@i+1,w,c
 23229  0040F6  E11E               	bnz	i2l7285
 23230  0040F8  0E07               	movlw	7
 23231  0040FA  5C0E               	subwf	retrieveLog@i,w,c
 23232  0040FC  B0D8               	btfsc	status,0,c
 23233  0040FE  D01A               	goto	i2l7285
 23234  004100                     i2l7277:
 23235                           
 23236                           ;EEPROM.c: 164: log_startTime[i] = (int)EEPROM_read(addr);
 23237  004100  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23238  004104  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23239  004108  EC82  F02D         	call	i2_EEPROM_read	;wreg free
 23240  00410C  6E09               	movwf	??_retrieveLog& (0+255),c
 23241  00410E  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 23242  004110  90D8               	bcf	status,0,c
 23243  004112  340E               	rlcf	retrieveLog@i,w,c
 23244  004114  6ED9               	movwf	fsr2l,c
 23245  004116  340F               	rlcf	retrieveLog@i+1,w,c
 23246  004118  6EDA               	movwf	fsr2h,c
 23247  00411A  0E00               	movlw	low _log_startTime
 23248  00411C  26D9               	addwf	fsr2l,f,c
 23249  00411E  0E01               	movlw	high _log_startTime
 23250  004120  22DA               	addwfc	fsr2h,f,c
 23251  004122  C009  FFDE         	movff	??_retrieveLog,postinc2
 23252  004126  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 23253                           
 23254                           ;EEPROM.c: 165: addr++;
 23255  00412A  4A10               	infsnz	retrieveLog@addr,f,c
 23256  00412C  2A11               	incf	retrieveLog@addr+1,f,c
 23257  00412E  4A0E               	infsnz	retrieveLog@i,f,c
 23258  004130  2A0F               	incf	retrieveLog@i+1,f,c
 23259  004132  D7DE               	goto	i2l7273
 23260  004134                     i2l7285:
 23261                           
 23262                           ;EEPROM.c: 166: }
 23263                           ;EEPROM.c: 169: log_total_time = (int)EEPROM_read(addr);
 23264  004134  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23265  004138  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23266  00413C  EC82  F02D         	call	i2_EEPROM_read	;wreg free
 23267  004140  6E09               	movwf	??_retrieveLog& (0+255),c
 23268  004142  5009               	movf	??_retrieveLog,w,c
 23269  004144  0100               	movlb	0	; () banked
 23270  004146  6FF6               	movwf	_log_total_time& (0+255),b
 23271  004148  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 23272                           
 23273                           ; BSR set to: 0
 23274  00414A  0012               	return		;funcret
 23275  00414C                     __end_of_retrieveLog:
 23276                           	opt stack 0
 23277                           pclatu	equ	0xFFB
 23278                           pclath	equ	0xFFA
 23279                           tblptru	equ	0xFF8
 23280                           tblptrh	equ	0xFF7
 23281                           tblptrl	equ	0xFF6
 23282                           tablat	equ	0xFF5
 23283                           prodh	equ	0xFF4
 23284                           prodl	equ	0xFF3
 23285                           intcon	equ	0xFF2
 23286                           intcon2	equ	0xFF1
 23287                           intcon3	equ	0xFF0
 23288                           indf0	equ	0xFEF
 23289                           postinc0	equ	0xFEE
 23290                           fsr0h	equ	0xFEA
 23291                           fsr0l	equ	0xFE9
 23292                           wreg	equ	0xFE8
 23293                           postdec1	equ	0xFE5
 23294                           fsr1h	equ	0xFE2
 23295                           fsr1l	equ	0xFE1
 23296                           indf2	equ	0xFDF
 23297                           postinc2	equ	0xFDE
 23298                           postdec2	equ	0xFDD
 23299                           fsr2h	equ	0xFDA
 23300                           fsr2l	equ	0xFD9
 23301                           status	equ	0xFD8
 23302                           
 23303 ;; *************** function i2_EEPROM_read *****************
 23304 ;; Defined at:
 23305 ;;		line 72 in file "EEPROM.c"
 23306 ;; Parameters:    Size  Location     Type
 23307 ;;  address         2    0[COMRAM] unsigned short 
 23308 ;; Auto vars:     Size  Location     Type
 23309 ;;		None
 23310 ;; Return value:  Size  Location     Type
 23311 ;;                  1    wreg      unsigned char 
 23312 ;; Registers used:
 23313 ;;		wreg, status,2
 23314 ;; Tracked objects:
 23315 ;;		On entry : 0/0
 23316 ;;		On exit  : 0/0
 23317 ;;		Unchanged: 0/0
 23318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23319 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23322 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23323 ;;Total ram usage:        2 bytes
 23324 ;; Hardware stack levels used:    1
 23325 ;; This function calls:
 23326 ;;		Nothing
 23327 ;; This function is called by:
 23328 ;;		_retrieveLog
 23329 ;; This function uses a non-reentrant model
 23330 ;;
 23331                           
 23332                           	psect	text84
 23333  005B04                     __ptext84:
 23334                           	opt stack 0
 23335  005B04                     i2_EEPROM_read:
 23336                           	opt stack 20
 23337                           
 23338                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
 23339                           
 23340                           ; BSR set to: 0
 23341                           ;incstack = 0
 23342  005B04  5002               	movf	i2EEPROM_read@address+1,w,c
 23343  005B06  6EAA               	movwf	4010,c	;volatile
 23344                           
 23345                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
 23346  005B08  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 23347                           
 23348                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
 23349  005B0C  9EA6               	bcf	4006,7,c	;volatile
 23350                           
 23351                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
 23352  005B0E  9CA6               	bcf	4006,6,c	;volatile
 23353                           
 23354                           ;EEPROM.c: 79: EECON1bits.RD = 1;
 23355  005B10  80A6               	bsf	4006,0,c	;volatile
 23356  005B12                     i2l1141:
 23357  005B12  B0A6               	btfsc	4006,0,c	;volatile
 23358  005B14  D7FE               	goto	i2l1141
 23359                           
 23360                           ;EEPROM.c: 85: return EEDATA;
 23361  005B16  50A8               	movf	4008,w,c	;volatile
 23362  005B18  0012               	return	
 23363  005B1A                     __end_ofi2_EEPROM_read:
 23364                           	opt stack 0
 23365                           pclatu	equ	0xFFB
 23366                           pclath	equ	0xFFA
 23367                           tblptru	equ	0xFF8
 23368                           tblptrh	equ	0xFF7
 23369                           tblptrl	equ	0xFF6
 23370                           tablat	equ	0xFF5
 23371                           prodh	equ	0xFF4
 23372                           prodl	equ	0xFF3
 23373                           intcon	equ	0xFF2
 23374                           intcon2	equ	0xFF1
 23375                           intcon3	equ	0xFF0
 23376                           indf0	equ	0xFEF
 23377                           postinc0	equ	0xFEE
 23378                           fsr0h	equ	0xFEA
 23379                           fsr0l	equ	0xFE9
 23380                           wreg	equ	0xFE8
 23381                           postdec1	equ	0xFE5
 23382                           fsr1h	equ	0xFE2
 23383                           fsr1l	equ	0xFE1
 23384                           indf2	equ	0xFDF
 23385                           postinc2	equ	0xFDE
 23386                           postdec2	equ	0xFDD
 23387                           fsr2h	equ	0xFDA
 23388                           fsr2l	equ	0xFD9
 23389                           status	equ	0xFD8
 23390                           
 23391 ;; *************** function _updateArmState *****************
 23392 ;; Defined at:
 23393 ;;		line 664 in file "sort.c"
 23394 ;; Parameters:    Size  Location     Type
 23395 ;;		None
 23396 ;; Auto vars:     Size  Location     Type
 23397 ;;		None
 23398 ;; Return value:  Size  Location     Type
 23399 ;;                  1    wreg      void 
 23400 ;; Registers used:
 23401 ;;		wreg, status,2, status,0
 23402 ;; Tracked objects:
 23403 ;;		On entry : 0/0
 23404 ;;		On exit  : 0/0
 23405 ;;		Unchanged: 0/0
 23406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23409 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23410 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23411 ;;Total ram usage:        2 bytes
 23412 ;; Hardware stack levels used:    1
 23413 ;; This function calls:
 23414 ;;		Nothing
 23415 ;; This function is called by:
 23416 ;;		_handler
 23417 ;; This function uses a non-reentrant model
 23418 ;;
 23419                           
 23420                           	psect	text85
 23421  005560                     __ptext85:
 23422                           	opt stack 0
 23423  005560                     _updateArmState:
 23424                           	opt stack 23
 23425                           
 23426                           ;sort.c: 671: if(!was_low_2){
 23427                           
 23428                           ;incstack = 0
 23429  005560  5079               	movf	_was_low_2,w,c	;volatile
 23430  005562  107A               	iorwf	_was_low_2+1,w,c	;volatile
 23431  005564  B4D8               	btfsc	status,2,c
 23432  005566  D007               	goto	i2l10061
 23433  005568  D016               	goto	i2l957
 23434  00556A                     i2l10055:
 23435                           
 23436                           ;sort.c: 676: PR2 = 0x20;
 23437  00556A  0E20               	movlw	32
 23438  00556C  6ECB               	movwf	4043,c	;volatile
 23439                           
 23440                           ;sort.c: 677: break;
 23441  00556E  0012               	return	
 23442  005570                     i2l10057:
 23443                           
 23444                           ;sort.c: 680: PR2 = 0x40;
 23445  005570  0E40               	movlw	64
 23446  005572  6ECB               	movwf	4043,c	;volatile
 23447                           
 23448                           ;sort.c: 682: }
 23449                           
 23450                           ;sort.c: 681: break;
 23451  005574  0012               	return	
 23452  005576                     i2l10061:
 23453  005576  C0E8  F001         	movff	_f_arm_position,??_updateArmState	;volatile
 23454  00557A  C0E9  F002         	movff	_f_arm_position+1,??_updateArmState+1	;volatile
 23455                           
 23456                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 23457                           ; Switch size 1, requested type "space"
 23458                           ; Number of cases is 1, Range of values is 0 to 0
 23459                           ; switch strategies available:
 23460                           ; Name         Instructions Cycles
 23461                           ; simple_byte            4     3 (average)
 23462                           ;	Chosen strategy is simple_byte
 23463  00557E  5002               	movf	??_updateArmState+1,w,c
 23464  005580  0A00               	xorlw	0	; case 0
 23465  005582  A4D8               	btfss	status,2,c
 23466  005584  0012               	return	
 23467                           
 23468                           ; Switch size 1, requested type "space"
 23469                           ; Number of cases is 2, Range of values is 0 to 1
 23470                           ; switch strategies available:
 23471                           ; Name         Instructions Cycles
 23472                           ; simple_byte            7     4 (average)
 23473                           ;	Chosen strategy is simple_byte
 23474  005586  5001               	movf	??_updateArmState,w,c
 23475  005588  0A00               	xorlw	0	; case 0
 23476  00558A  B4D8               	btfsc	status,2,c
 23477  00558C  D7EE               	goto	i2l10055
 23478  00558E  0A01               	xorlw	1	; case 1
 23479  005590  A4D8               	btfss	status,2,c
 23480                           
 23481                           ;sort.c: 683: }
 23482  005592  0012               	return	
 23483  005594  D7ED               	goto	i2l10057
 23484  005596                     i2l957:
 23485                           
 23486                           ;sort.c: 684: else{
 23487                           ;sort.c: 686: PR2 = 0xFF;
 23488  005596  68CB               	setf	4043,c	;volatile
 23489  005598  0012               	return	
 23490  00559A                     __end_of_updateArmState:
 23491                           	opt stack 0
 23492                           pclatu	equ	0xFFB
 23493                           pclath	equ	0xFFA
 23494                           tblptru	equ	0xFF8
 23495                           tblptrh	equ	0xFF7
 23496                           tblptrl	equ	0xFF6
 23497                           tablat	equ	0xFF5
 23498                           prodh	equ	0xFF4
 23499                           prodl	equ	0xFF3
 23500                           intcon	equ	0xFF2
 23501                           intcon2	equ	0xFF1
 23502                           intcon3	equ	0xFF0
 23503                           indf0	equ	0xFEF
 23504                           postinc0	equ	0xFEE
 23505                           fsr0h	equ	0xFEA
 23506                           fsr0l	equ	0xFE9
 23507                           wreg	equ	0xFE8
 23508                           postdec1	equ	0xFE5
 23509                           fsr1h	equ	0xFE2
 23510                           fsr1l	equ	0xFE1
 23511                           indf2	equ	0xFDF
 23512                           postinc2	equ	0xFDE
 23513                           postdec2	equ	0xFDD
 23514                           fsr2h	equ	0xFDA
 23515                           fsr2l	equ	0xFD9
 23516                           status	equ	0xFD8
 23517                           
 23518 ;; *************** function _printSortTimer *****************
 23519 ;; Defined at:
 23520 ;;		line 506 in file "sort.c"
 23521 ;; Parameters:    Size  Location     Type
 23522 ;;		None
 23523 ;; Auto vars:     Size  Location     Type
 23524 ;;  i               2   70[COMRAM] int 
 23525 ;;  curTime        14   44[COMRAM] int [7]
 23526 ;;  timeDiff        2   68[COMRAM] unsigned int 
 23527 ;;  sec             2   64[COMRAM] int 
 23528 ;;  min             2   62[COMRAM] int 
 23529 ;;  cur_sec         2   60[COMRAM] unsigned int 
 23530 ;;  start_sec       2   58[COMRAM] unsigned int 
 23531 ;; Return value:  Size  Location     Type
 23532 ;;                  1    wreg      void 
 23533 ;; Registers used:
 23534 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23535 ;; Tracked objects:
 23536 ;;		On entry : 0/0
 23537 ;;		On exit  : 0/0
 23538 ;;		Unchanged: 0/0
 23539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23541 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23542 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23543 ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23544 ;;Total ram usage:       31 bytes
 23545 ;; Hardware stack levels used:    1
 23546 ;; Hardware stack levels required when called:    3
 23547 ;; This function calls:
 23548 ;;		i2___lwdiv
 23549 ;;		i2___lwmod
 23550 ;;		i2___wmul
 23551 ;;		i2_getRTC
 23552 ;;		i2_lcdInst
 23553 ;;		i2_printf
 23554 ;; This function is called by:
 23555 ;;		_handler
 23556 ;; This function uses a non-reentrant model
 23557 ;;
 23558                           
 23559                           	psect	text86
 23560  003564                     __ptext86:
 23561                           	opt stack 0
 23562  003564                     _printSortTimer:
 23563                           	opt stack 20
 23564                           
 23565                           ;sort.c: 507: getRTC();
 23566                           
 23567                           ;incstack = 0
 23568  003564  ECC9  F027         	call	i2_getRTC	;wreg free
 23569                           
 23570                           ;sort.c: 508: int curTime[7];
 23571                           ;sort.c: 509: for(int i = 0; i < 7; i++){
 23572  003568  0E00               	movlw	0
 23573  00356A  6E48               	movwf	printSortTimer@i+1,c
 23574  00356C  0E00               	movlw	0
 23575  00356E  6E47               	movwf	printSortTimer@i,c
 23576  003570                     i2l9917:
 23577  003570  BE48               	btfsc	printSortTimer@i+1,7,c
 23578  003572  D006               	goto	i2l9921
 23579  003574  5048               	movf	printSortTimer@i+1,w,c
 23580  003576  E131               	bnz	i2l9927
 23581  003578  0E07               	movlw	7
 23582  00357A  5C47               	subwf	printSortTimer@i,w,c
 23583  00357C  B0D8               	btfsc	status,0,c
 23584  00357E  D02D               	goto	i2l9927
 23585  003580                     i2l9921:
 23586                           
 23587                           ;sort.c: 510: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 23588  003580  0E1C               	movlw	low _time
 23589  003582  2447               	addwf	printSortTimer@i,w,c
 23590  003584  6ED9               	movwf	fsr2l,c
 23591  003586  0E01               	movlw	high _time
 23592  003588  2048               	addwfc	printSortTimer@i+1,w,c
 23593  00358A  6EDA               	movwf	fsr2h,c
 23594  00358C  50DF               	movf	indf2,w,c
 23595  00358E  6E2A               	movwf	??_printSortTimer& (0+255),c
 23596  003590  3A2A               	swapf	??_printSortTimer,f,c
 23597  003592  0E0F               	movlw	15
 23598  003594  162A               	andwf	??_printSortTimer,f,c
 23599  003596  0E0F               	movlw	15
 23600  003598  162A               	andwf	??_printSortTimer,f,c
 23601  00359A  502A               	movf	??_printSortTimer,w,c
 23602  00359C  0D0A               	mullw	10
 23603  00359E  0E1C               	movlw	low _time
 23604  0035A0  2447               	addwf	printSortTimer@i,w,c
 23605  0035A2  6ED9               	movwf	fsr2l,c
 23606  0035A4  0E01               	movlw	high _time
 23607  0035A6  2048               	addwfc	printSortTimer@i+1,w,c
 23608  0035A8  6EDA               	movwf	fsr2h,c
 23609  0035AA  50DF               	movf	indf2,w,c
 23610  0035AC  0B0F               	andlw	15
 23611  0035AE  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 23612  0035B0  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 23613  0035B2  50F3               	movf	prodl,w,c
 23614  0035B4  262B               	addwf	??_printSortTimer+1,f,c
 23615  0035B6  50F4               	movf	prodh,w,c
 23616  0035B8  222C               	addwfc	??_printSortTimer+2,f,c
 23617  0035BA  90D8               	bcf	status,0,c
 23618  0035BC  3447               	rlcf	printSortTimer@i,w,c
 23619  0035BE  6ED9               	movwf	fsr2l,c
 23620  0035C0  3448               	rlcf	printSortTimer@i+1,w,c
 23621  0035C2  6EDA               	movwf	fsr2h,c
 23622  0035C4  0E2D               	movlw	low printSortTimer@curTime
 23623  0035C6  26D9               	addwf	fsr2l,f,c
 23624  0035C8  0E00               	movlw	high printSortTimer@curTime
 23625  0035CA  22DA               	addwfc	fsr2h,f,c
 23626  0035CC  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 23627  0035D0  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 23628  0035D4  4A47               	infsnz	printSortTimer@i,f,c
 23629  0035D6  2A48               	incf	printSortTimer@i+1,f,c
 23630  0035D8  D7CB               	goto	i2l9917
 23631  0035DA                     i2l9927:
 23632                           
 23633                           ;sort.c: 511: }
 23634                           ;sort.c: 512: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 23635  0035DA  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 23636  0035DE  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 23637  0035E2  0E00               	movlw	0
 23638  0035E4  6E04               	movwf	i2___wmul@multiplicand+1,c
 23639  0035E6  0E3C               	movlw	60
 23640  0035E8  6E03               	movwf	i2___wmul@multiplicand,c
 23641  0035EA  ECF4  F02C         	call	i2___wmul	;wreg free
 23642  0035EE  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 23643  0035F2  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 23644  0035F6  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 23645  0035FA  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 23646  0035FE  0E0E               	movlw	14
 23647  003600  6E04               	movwf	i2___wmul@multiplicand+1,c
 23648  003602  0E10               	movlw	16
 23649  003604  6E03               	movwf	i2___wmul@multiplicand,c
 23650  003606  ECF4  F02C         	call	i2___wmul	;wreg free
 23651  00360A  5001               	movf	?i2___wmul,w,c
 23652  00360C  262A               	addwf	??_printSortTimer,f,c
 23653  00360E  5002               	movf	?i2___wmul+1,w,c
 23654  003610  222B               	addwfc	??_printSortTimer+1,f,c
 23655  003612  0101               	movlb	1	; () banked
 23656  003614  510E               	movf	_startTime& (0+255),w,b
 23657  003616  242A               	addwf	??_printSortTimer,w,c
 23658  003618  6E3B               	movwf	printSortTimer@start_sec,c
 23659  00361A  0101               	movlb	1	; () banked
 23660  00361C  510F               	movf	(_startTime+1)& (0+255),w,b
 23661  00361E  202B               	addwfc	??_printSortTimer+1,w,c
 23662  003620  6E3C               	movwf	printSortTimer@start_sec+1,c
 23663                           
 23664                           ;sort.c: 513: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 23665  003622  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 23666  003626  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 23667  00362A  0E00               	movlw	0
 23668  00362C  6E04               	movwf	i2___wmul@multiplicand+1,c
 23669  00362E  0E3C               	movlw	60
 23670  003630  6E03               	movwf	i2___wmul@multiplicand,c
 23671  003632  ECF4  F02C         	call	i2___wmul	;wreg free
 23672  003636  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 23673  00363A  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 23674  00363E  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 23675  003642  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 23676  003646  0E0E               	movlw	14
 23677  003648  6E04               	movwf	i2___wmul@multiplicand+1,c
 23678  00364A  0E10               	movlw	16
 23679  00364C  6E03               	movwf	i2___wmul@multiplicand,c
 23680  00364E  ECF4  F02C         	call	i2___wmul	;wreg free
 23681  003652  5001               	movf	?i2___wmul,w,c
 23682  003654  262A               	addwf	??_printSortTimer,f,c
 23683  003656  5002               	movf	?i2___wmul+1,w,c
 23684  003658  222B               	addwfc	??_printSortTimer+1,f,c
 23685  00365A  502D               	movf	printSortTimer@curTime,w,c
 23686  00365C  242A               	addwf	??_printSortTimer,w,c
 23687  00365E  6E3D               	movwf	printSortTimer@cur_sec,c
 23688  003660  502E               	movf	printSortTimer@curTime+1,w,c
 23689  003662  202B               	addwfc	??_printSortTimer+1,w,c
 23690  003664  6E3E               	movwf	printSortTimer@cur_sec+1,c
 23691                           
 23692                           ;sort.c: 514: unsigned int timeDiff = cur_sec - start_sec;
 23693  003666  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 23694  00366A  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 23695  00366E  1E2A               	comf	??_printSortTimer,f,c
 23696  003670  1E2B               	comf	??_printSortTimer+1,f,c
 23697  003672  4A2A               	infsnz	??_printSortTimer,f,c
 23698  003674  2A2B               	incf	??_printSortTimer+1,f,c
 23699  003676  503D               	movf	printSortTimer@cur_sec,w,c
 23700  003678  242A               	addwf	??_printSortTimer,w,c
 23701  00367A  6E45               	movwf	printSortTimer@timeDiff,c
 23702  00367C  503E               	movf	printSortTimer@cur_sec+1,w,c
 23703  00367E  202B               	addwfc	??_printSortTimer+1,w,c
 23704  003680  6E46               	movwf	printSortTimer@timeDiff+1,c
 23705                           
 23706                           ;sort.c: 516: total_time = timeDiff;
 23707  003682  C045  F0FA         	movff	printSortTimer@timeDiff,_total_time
 23708  003686  C046  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 23709                           
 23710                           ;sort.c: 518: if(f_most_recent_sort_time){
 23711  00368A  0101               	movlb	1	; () banked
 23712  00368C  5137               	movf	_f_most_recent_sort_time& (0+255),w,b
 23713  00368E  0101               	movlb	1	; () banked
 23714  003690  1138               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 23715  003692  B4D8               	btfsc	status,2,c
 23716  003694  D009               	goto	i2l9939
 23717                           
 23718                           ; BSR set to: 1
 23719                           ;sort.c: 519: most_recent_sort_time = total_time;
 23720  003696  C0FA  F143         	movff	_total_time,_most_recent_sort_time
 23721  00369A  C0FB  F144         	movff	_total_time+1,_most_recent_sort_time+1
 23722                           
 23723                           ; BSR set to: 1
 23724                           ;sort.c: 520: f_most_recent_sort_time = 0;
 23725  00369E  0E00               	movlw	0
 23726  0036A0  0101               	movlb	1	; () banked
 23727  0036A2  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 23728  0036A4  0E00               	movlw	0
 23729  0036A6  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
 23730  0036A8                     i2l9939:
 23731                           
 23732                           ; BSR set to: 1
 23733                           ;sort.c: 521: }
 23734                           ;sort.c: 541: if((total_time - most_recent_sort_time == 42) || (total_time == 179)){
 23735  0036A8  C143  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 23736  0036AC  C144  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 23737  0036B0  1E2A               	comf	??_printSortTimer,f,c
 23738  0036B2  1E2B               	comf	??_printSortTimer+1,f,c
 23739  0036B4  4A2A               	infsnz	??_printSortTimer,f,c
 23740  0036B6  2A2B               	incf	??_printSortTimer+1,f,c
 23741  0036B8  0100               	movlb	0	; () banked
 23742  0036BA  51FA               	movf	_total_time& (0+255),w,b
 23743  0036BC  262A               	addwf	??_printSortTimer,f,c
 23744  0036BE  0100               	movlb	0	; () banked
 23745  0036C0  51FB               	movf	(_total_time+1)& (0+255),w,b
 23746  0036C2  222B               	addwfc	??_printSortTimer+1,f,c
 23747  0036C4  0E2A               	movlw	42
 23748  0036C6  182A               	xorwf	??_printSortTimer,w,c
 23749  0036C8  102B               	iorwf	??_printSortTimer+1,w,c
 23750  0036CA  B4D8               	btfsc	status,2,c
 23751  0036CC  D007               	goto	i2l9943
 23752                           
 23753                           ; BSR set to: 0
 23754  0036CE  0EB3               	movlw	179
 23755  0036D0  0100               	movlb	0	; () banked
 23756  0036D2  19FA               	xorwf	_total_time& (0+255),w,b
 23757  0036D4  0100               	movlb	0	; () banked
 23758  0036D6  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 23759  0036D8  A4D8               	btfss	status,2,c
 23760  0036DA  D003               	goto	i2l9945
 23761  0036DC                     i2l9943:
 23762                           
 23763                           ; BSR set to: 0
 23764                           ;sort.c: 542: machine_state = DoneSorting_state;
 23765  0036DC  0E02               	movlw	2
 23766  0036DE  0100               	movlb	0	; () banked
 23767  0036E0  6FFC               	movwf	_machine_state& (0+255),b
 23768  0036E2                     i2l9945:
 23769                           
 23770                           ; BSR set to: 0
 23771                           ;sort.c: 544: }
 23772                           ;sort.c: 546: int min = (timeDiff % 3600) / 60;
 23773  0036E2  0E0E               	movlw	14
 23774  0036E4  6E04               	movwf	i2___lwmod@divisor+1,c
 23775  0036E6  0E10               	movlw	16
 23776  0036E8  6E03               	movwf	i2___lwmod@divisor,c
 23777  0036EA  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 23778  0036EE  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 23779  0036F2  EC8F  F02A         	call	i2___lwmod	;wreg free
 23780  0036F6  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 23781  0036FA  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 23782  0036FE  0E00               	movlw	0
 23783  003700  6E09               	movwf	i2___lwdiv@divisor+1,c
 23784  003702  0E3C               	movlw	60
 23785  003704  6E08               	movwf	i2___lwdiv@divisor,c
 23786  003706  EC88  F029         	call	i2___lwdiv	;wreg free
 23787  00370A  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 23788  00370E  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 23789                           
 23790                           ;sort.c: 547: int sec = (timeDiff % 3600) % 60;
 23791  003712  0E0E               	movlw	14
 23792  003714  6E04               	movwf	i2___lwmod@divisor+1,c
 23793  003716  0E10               	movlw	16
 23794  003718  6E03               	movwf	i2___lwmod@divisor,c
 23795  00371A  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 23796  00371E  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 23797  003722  EC8F  F02A         	call	i2___lwmod	;wreg free
 23798  003726  C001  F043         	movff	?i2___lwmod,_printSortTimer$2560
 23799  00372A  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2560+1
 23800                           
 23801                           ;sort.c: 547: int sec = (timeDiff % 3600) % 60;
 23802  00372E  C043  F001         	movff	_printSortTimer$2560,i2___lwmod@dividend
 23803  003732  C044  F002         	movff	_printSortTimer$2560+1,i2___lwmod@dividend+1
 23804  003736  0E00               	movlw	0
 23805  003738  6E04               	movwf	i2___lwmod@divisor+1,c
 23806  00373A  0E3C               	movlw	60
 23807  00373C  6E03               	movwf	i2___lwmod@divisor,c
 23808  00373E  EC8F  F02A         	call	i2___lwmod	;wreg free
 23809  003742  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 23810  003746  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 23811                           
 23812                           ;sort.c: 549: lcdInst(0b10000000);;
 23813  00374A  0E80               	movlw	128
 23814  00374C  ECB6  F02D         	call	i2_lcdInst
 23815                           
 23816                           ;sort.c: 550: printf("SORTING...     ");
 23817  003750  0E3E               	movlw	low STR_64
 23818  003752  6E0D               	movwf	i2printf@f,c
 23819  003754  0EFE               	movlw	high STR_64
 23820  003756  6E0E               	movwf	i2printf@f+1,c
 23821  003758  EC11  F012         	call	i2_printf	;wreg free
 23822                           
 23823                           ;sort.c: 551: lcdInst(0b11000000);;
 23824  00375C  0EC0               	movlw	192
 23825  00375E  ECB6  F02D         	call	i2_lcdInst
 23826                           
 23827                           ;sort.c: 552: printf("TIME %d:%02d   ", min, sec);
 23828  003762  0E4E               	movlw	low STR_65
 23829  003764  6E0D               	movwf	i2printf@f,c
 23830  003766  0EFE               	movlw	high STR_65
 23831  003768  6E0E               	movwf	i2printf@f+1,c
 23832  00376A  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 23833  00376E  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 23834  003772  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 23835  003776  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 23836  00377A  EC11  F012         	call	i2_printf	;wreg free
 23837  00377E  0012               	return		;funcret
 23838  003780                     __end_of_printSortTimer:
 23839                           	opt stack 0
 23840                           pclatu	equ	0xFFB
 23841                           pclath	equ	0xFFA
 23842                           tblptru	equ	0xFF8
 23843                           tblptrh	equ	0xFF7
 23844                           tblptrl	equ	0xFF6
 23845                           tablat	equ	0xFF5
 23846                           prodh	equ	0xFF4
 23847                           prodl	equ	0xFF3
 23848                           intcon	equ	0xFF2
 23849                           intcon2	equ	0xFF1
 23850                           intcon3	equ	0xFF0
 23851                           indf0	equ	0xFEF
 23852                           postinc0	equ	0xFEE
 23853                           fsr0h	equ	0xFEA
 23854                           fsr0l	equ	0xFE9
 23855                           wreg	equ	0xFE8
 23856                           postdec1	equ	0xFE5
 23857                           fsr1h	equ	0xFE2
 23858                           fsr1l	equ	0xFE1
 23859                           indf2	equ	0xFDF
 23860                           postinc2	equ	0xFDE
 23861                           postdec2	equ	0xFDD
 23862                           fsr2h	equ	0xFDA
 23863                           fsr2l	equ	0xFD9
 23864                           status	equ	0xFD8
 23865                           
 23866 ;; *************** function i2_printf *****************
 23867 ;; Defined at:
 23868 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 23869 ;; Parameters:    Size  Location     Type
 23870 ;;  f               2   12[COMRAM] PTR const unsigned char 
 23871 ;;		 -> STR_129(18), STR_128(18), STR_127(17), STR_126(17), 
 23872 ;;		 -> STR_125(15), STR_124(15), STR_123(18), STR_122(15), 
 23873 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 23874 ;;		 -> STR_117(17), STR_116(17), STR_115(17), STR_114(17), 
 23875 ;;		 -> STR_113(17), STR_112(17), STR_111(18), STR_110(17), 
 23876 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 23877 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 23878 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 23879 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 23880 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 23881 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 23882 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 23883 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 23884 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 23885 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 23886 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 23887 ;;		 -> STR_65(16), STR_64(16), STR_63(24), STR_50(17), 
 23888 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 23889 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 23890 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 23891 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 23892 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 23893 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 23894 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 23895 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 23896 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 23897 ;; Auto vars:     Size  Location     Type
 23898 ;;  printf          4    0        struct .
 23899 ;;  printf          2   39[COMRAM] int 
 23900 ;;  printf          2   35[COMRAM] unsigned int 
 23901 ;;  printf          2   33[COMRAM] unsigned int 
 23902 ;;  printf          2   31[COMRAM] PTR void [1]
 23903 ;;		 -> ?i2_printf(2), ?_printf(2), 
 23904 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 23905 ;;		 -> STR_130(7), count_total(2), printRTC@month(4), UI@month(4), 
 23906 ;;  printf          1   38[COMRAM] char 
 23907 ;;  printf          1   37[COMRAM] unsigned char 
 23908 ;;  printf          1   28[COMRAM] char 
 23909 ;; Return value:  Size  Location     Type
 23910 ;;                  2   12[COMRAM] int 
 23911 ;; Registers used:
 23912 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23913 ;; Tracked objects:
 23914 ;;		On entry : 0/0
 23915 ;;		On exit  : 0/0
 23916 ;;		Unchanged: 0/0
 23917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23918 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23919 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23920 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23921 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23922 ;;Total ram usage:       29 bytes
 23923 ;; Hardware stack levels used:    1
 23924 ;; Hardware stack levels required when called:    2
 23925 ;; This function calls:
 23926 ;;		i2___lwdiv
 23927 ;;		i2___lwmod
 23928 ;;		i2___wmul
 23929 ;;		i2_isdigit
 23930 ;;		i2_putch
 23931 ;; This function is called by:
 23932 ;;		_change_state_to_menu_11
 23933 ;;		_change_state_to_menu_23
 23934 ;;		_change_state_to_logs_11
 23935 ;;		_change_state_to_logs_12
 23936 ;;		_change_state_to_logs_22
 23937 ;;		_change_state_to_logs_23
 23938 ;;		_change_state_to_logs_33
 23939 ;;		_change_state_to_logs_34
 23940 ;;		_printSortTimer
 23941 ;;		i2_change_state_to_menu_start
 23942 ;;		i2_change_state_to_menu_12
 23943 ;;		i2_change_state_to_menu_22
 23944 ;;		i2_printRTC
 23945 ;; This function uses a non-reentrant model
 23946 ;;
 23947                           
 23948                           	psect	text87
 23949  002422                     __ptext87:
 23950                           	opt stack 0
 23951  002422                     i2_printf:
 23952                           	opt stack 20
 23953                           
 23954                           ;doprnt.c: 466: va_list ap;
 23955                           ;doprnt.c: 499: signed char c;
 23956                           ;doprnt.c: 501: int width;
 23957                           ;doprnt.c: 506: signed char prec;
 23958                           ;doprnt.c: 508: unsigned char flag;
 23959                           ;doprnt.c: 523: union {
 23960                           ;doprnt.c: 524: unsigned long vd;
 23961                           ;doprnt.c: 525: double integ;
 23962                           ;doprnt.c: 526: } tmpval;
 23963                           ;doprnt.c: 528: unsigned int val;
 23964                           ;doprnt.c: 529: unsigned len;
 23965                           ;doprnt.c: 530: const char * cp;
 23966                           ;doprnt.c: 533: *ap = __va_start();
 23967                           
 23968                           ;incstack = 0
 23969  002422  0E0F               	movlw	low (?i2_printf+2)
 23970  002424  6E20               	movwf	i2printf@ap,c
 23971  002426  0E00               	movlw	high (?i2_printf+2)
 23972  002428  6E21               	movwf	i2printf@ap+1,c
 23973                           
 23974                           ;doprnt.c: 536: while(c = *f++) {
 23975  00242A  D1A4               	goto	i2l7091
 23976  00242C                     i2l6961:
 23977                           
 23978                           ;doprnt.c: 538: if(c != '%')
 23979  00242C  0E25               	movlw	37
 23980  00242E  1827               	xorwf	i2printf@c,w,c
 23981  002430  B4D8               	btfsc	status,2,c
 23982  002432  D004               	goto	i2l6965
 23983                           
 23984                           ;doprnt.c: 540: {
 23985                           ;doprnt.c: 541: (putch(c) );
 23986  002434  5027               	movf	i2printf@c,w,c
 23987  002436  ECB0  F02D         	call	i2_putch
 23988                           
 23989                           ;doprnt.c: 542: continue;
 23990  00243A  D19C               	goto	i2l7091
 23991  00243C                     i2l6965:
 23992                           
 23993                           ;doprnt.c: 543: }
 23994                           ;doprnt.c: 546: width = 0;
 23995  00243C  0E00               	movlw	0
 23996  00243E  6E29               	movwf	i2printf@width+1,c
 23997  002440  0E00               	movlw	0
 23998  002442  6E28               	movwf	i2printf@width,c
 23999                           
 24000                           ;doprnt.c: 548: flag = 0;
 24001  002444  0E00               	movlw	0
 24002  002446  6E26               	movwf	i2printf@flag,c
 24003                           
 24004                           ;doprnt.c: 551: switch(*f) {
 24005                           
 24006                           ;doprnt.c: 550: for(;;) {
 24007  002448  D003               	goto	i2l6971
 24008  00244A                     i2l6967:
 24009                           
 24010                           ;doprnt.c: 580: flag |= 0x04;
 24011  00244A  8426               	bsf	i2printf@flag,2,c
 24012                           
 24013                           ;doprnt.c: 581: f++;
 24014  00244C  4A0D               	infsnz	i2printf@f,f,c
 24015  00244E  2A0E               	incf	i2printf@f+1,f,c
 24016  002450                     i2l6971:
 24017  002450  C00D  FFF6         	movff	i2printf@f,tblptrl
 24018  002454  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24019  002458                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24020  002458  6AF8               	clrf	tblptru,c
 24021  00245A                     	endif
 24022  00245A                     	if	0	;tblptru may be non-zero
 24023  00245A                     	endif
 24024  00245A  0008               	tblrd		*
 24025  00245C  50F5               	movf	tablat,w,c
 24026                           
 24027                           ; Switch size 1, requested type "space"
 24028                           ; Number of cases is 1, Range of values is 48 to 48
 24029                           ; switch strategies available:
 24030                           ; Name         Instructions Cycles
 24031                           ; simple_byte            4     3 (average)
 24032                           ;	Chosen strategy is simple_byte
 24033  00245E  0A30               	xorlw	48	; case 48
 24034  002460  B4D8               	btfsc	status,2,c
 24035  002462  D7F3               	goto	i2l6967
 24036                           
 24037                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 24038                           
 24039                           ;doprnt.c: 586: }
 24040                           
 24041                           ;doprnt.c: 585: break;
 24042  002464  C00D  FFF6         	movff	i2printf@f,tblptrl
 24043  002468  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24044  00246C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24045  00246C  6AF8               	clrf	tblptru,c
 24046  00246E                     	endif
 24047  00246E                     	if	0	;tblptru may be non-zero
 24048  00246E                     	endif
 24049  00246E  0008               	tblrd		*
 24050  002470  50F5               	movf	tablat,w,c
 24051  002472  EC4E  F02D         	call	i2_isdigit
 24052  002476  A0D8               	btfss	status,0,c
 24053  002478  D0A6               	goto	i2l7019
 24054                           
 24055                           ;doprnt.c: 598: width = 0;
 24056  00247A  0E00               	movlw	0
 24057  00247C  6E29               	movwf	i2printf@width+1,c
 24058  00247E  0E00               	movlw	0
 24059  002480  6E28               	movwf	i2printf@width,c
 24060  002482                     i2l6977:
 24061                           
 24062                           ;doprnt.c: 600: width *= 10;
 24063  002482  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 24064  002486  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 24065  00248A  0E00               	movlw	0
 24066  00248C  6E04               	movwf	i2___wmul@multiplicand+1,c
 24067  00248E  0E0A               	movlw	10
 24068  002490  6E03               	movwf	i2___wmul@multiplicand,c
 24069  002492  ECF4  F02C         	call	i2___wmul	;wreg free
 24070  002496  C001  F028         	movff	?i2___wmul,i2printf@width
 24071  00249A  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 24072                           
 24073                           ;doprnt.c: 601: width += *f++ - '0';
 24074  00249E  0ED0               	movlw	208
 24075  0024A0  6E19               	movwf	??i2_printf& (0+255),c
 24076  0024A2  0EFF               	movlw	255
 24077  0024A4  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24078  0024A6  C00D  FFF6         	movff	i2printf@f,tblptrl
 24079  0024AA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24080  0024AE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24081  0024AE  6AF8               	clrf	tblptru,c
 24082  0024B0                     	endif
 24083  0024B0                     	if	0	;tblptru may be non-zero
 24084  0024B0                     	endif
 24085  0024B0  0008               	tblrd		*
 24086  0024B2  50F5               	movf	tablat,w,c
 24087  0024B4  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 24088  0024B6  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 24089  0024B8  5019               	movf	??i2_printf,w,c
 24090  0024BA  261B               	addwf	??i2_printf+2,f,c
 24091  0024BC  501A               	movf	??i2_printf+1,w,c
 24092  0024BE  221C               	addwfc	??i2_printf+3,f,c
 24093  0024C0  501B               	movf	??i2_printf+2,w,c
 24094  0024C2  2628               	addwf	i2printf@width,f,c
 24095  0024C4  501C               	movf	??i2_printf+3,w,c
 24096  0024C6  2229               	addwfc	i2printf@width+1,f,c
 24097  0024C8  4A0D               	infsnz	i2printf@f,f,c
 24098  0024CA  2A0E               	incf	i2printf@f+1,f,c
 24099                           
 24100                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 24101  0024CC  C00D  FFF6         	movff	i2printf@f,tblptrl
 24102  0024D0  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24103  0024D4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24104  0024D4  6AF8               	clrf	tblptru,c
 24105  0024D6                     	endif
 24106  0024D6                     	if	0	;tblptru may be non-zero
 24107  0024D6                     	endif
 24108  0024D6  0008               	tblrd		*
 24109  0024D8  50F5               	movf	tablat,w,c
 24110  0024DA  EC4E  F02D         	call	i2_isdigit
 24111  0024DE  A0D8               	btfss	status,0,c
 24112  0024E0  D072               	goto	i2l7019
 24113  0024E2  D7CF               	goto	i2l6977
 24114  0024E4                     i2l6985:
 24115                           
 24116                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 24117  0024E4  C020  FFD9         	movff	i2printf@ap,fsr2l
 24118  0024E8  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24119  0024EC  CFDE F01E          	movff	postinc2,i2printf@cp
 24120  0024F0  CFDD F01F          	movff	postdec2,i2printf@cp+1
 24121  0024F4  0E02               	movlw	2
 24122  0024F6  2620               	addwf	i2printf@ap,f,c
 24123  0024F8  0E00               	movlw	0
 24124  0024FA  2221               	addwfc	i2printf@ap+1,f,c
 24125                           
 24126                           ;doprnt.c: 740: if(!cp)
 24127  0024FC  501E               	movf	i2printf@cp,w,c
 24128  0024FE  101F               	iorwf	i2printf@cp+1,w,c
 24129  002500  A4D8               	btfss	status,2,c
 24130  002502  D004               	goto	i2l6993
 24131                           
 24132                           ;doprnt.c: 741: cp = "(null)";
 24133  002504  0EB6               	movlw	low STR_130
 24134  002506  6E1E               	movwf	i2printf@cp,c
 24135  002508  0EFF               	movlw	high STR_130
 24136  00250A  6E1F               	movwf	i2printf@cp+1,c
 24137  00250C                     i2l6993:
 24138                           
 24139                           ;doprnt.c: 745: len = 0;
 24140  00250C  0E00               	movlw	0
 24141  00250E  6E23               	movwf	i2printf@len+1,c
 24142  002510  0E00               	movlw	0
 24143  002512  6E22               	movwf	i2printf@len,c
 24144                           
 24145                           ;doprnt.c: 746: while(cp[len])
 24146  002514  D002               	goto	i2l6997
 24147  002516                     i2l6995:
 24148                           
 24149                           ;doprnt.c: 747: len++;
 24150  002516  4A22               	infsnz	i2printf@len,f,c
 24151  002518  2A23               	incf	i2printf@len+1,f,c
 24152  00251A                     i2l6997:
 24153  00251A  5022               	movf	i2printf@len,w,c
 24154  00251C  241E               	addwf	i2printf@cp,w,c
 24155  00251E  6E19               	movwf	??i2_printf& (0+255),c
 24156  002520  5023               	movf	i2printf@len+1,w,c
 24157  002522  201F               	addwfc	i2printf@cp+1,w,c
 24158  002524  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24159  002526  C019  FFF6         	movff	??i2_printf,tblptrl
 24160  00252A  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 24161  00252E  0E00               	movlw	low (__mediumconst shr (0+16))
 24162  002530  6EF8               	movwf	tblptru,c
 24163  002532  0E0F               	movlw	(high __ramtop+-1)
 24164  002534  64F7               	cpfsgt	tblptrh,c
 24165  002536  D003               	bra	i2u562_47
 24166  002538  0008               	tblrd		*
 24167  00253A  50F5               	movf	tablat,w,c
 24168  00253C  D005               	bra	i2u562_40
 24169  00253E                     i2u562_47:
 24170  00253E  CFF6 FFE9          	movff	tblptrl,fsr0l
 24171  002542  CFF7 FFEA          	movff	tblptrh,fsr0h
 24172  002546  50EF               	movf	indf0,w,c
 24173  002548                     i2u562_40:
 24174  002548  0900               	iorlw	0
 24175  00254A  A4D8               	btfss	status,2,c
 24176  00254C  D7E4               	goto	i2l6995
 24177                           
 24178                           ;doprnt.c: 757: if(width > len)
 24179  00254E  5028               	movf	i2printf@width,w,c
 24180  002550  5C22               	subwf	i2printf@len,w,c
 24181  002552  5029               	movf	i2printf@width+1,w,c
 24182  002554  5823               	subwfb	i2printf@len+1,w,c
 24183  002556  B0D8               	btfsc	status,0,c
 24184  002558  D005               	goto	i2l7003
 24185                           
 24186                           ;doprnt.c: 758: width -= len;
 24187  00255A  5022               	movf	i2printf@len,w,c
 24188  00255C  5E28               	subwf	i2printf@width,f,c
 24189  00255E  5023               	movf	i2printf@len+1,w,c
 24190  002560  5A29               	subwfb	i2printf@width+1,f,c
 24191  002562  D008               	goto	i2l7007
 24192  002564                     i2l7003:
 24193                           
 24194                           ;doprnt.c: 759: else
 24195                           ;doprnt.c: 760: width = 0;
 24196  002564  0E00               	movlw	0
 24197  002566  6E29               	movwf	i2printf@width+1,c
 24198  002568  0E00               	movlw	0
 24199  00256A  6E28               	movwf	i2printf@width,c
 24200                           
 24201                           ;doprnt.c: 764: while(width--)
 24202  00256C  D003               	goto	i2l7007
 24203  00256E                     i2l7005:
 24204                           
 24205                           ;doprnt.c: 765: (putch(' ') );
 24206  00256E  0E20               	movlw	32
 24207  002570  ECB0  F02D         	call	i2_putch
 24208  002574                     i2l7007:
 24209  002574  0628               	decf	i2printf@width,f,c
 24210  002576  A0D8               	btfss	status,0,c
 24211  002578  0629               	decf	i2printf@width+1,f,c
 24212  00257A  2828               	incf	i2printf@width,w,c
 24213  00257C  E1F8               	bnz	i2l7005
 24214  00257E  2829               	incf	i2printf@width+1,w,c
 24215  002580  B4D8               	btfsc	status,2,c
 24216  002582  D016               	goto	i2l7013
 24217  002584  D7F4               	goto	i2l7005
 24218  002586                     i2l7009:
 24219                           
 24220                           ;doprnt.c: 768: (putch(*cp++) );
 24221  002586  C01E  FFF6         	movff	i2printf@cp,tblptrl
 24222  00258A  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 24223  00258E  0E00               	movlw	low (__mediumconst shr (0+16))
 24224  002590  6EF8               	movwf	tblptru,c
 24225  002592  0E0F               	movlw	(high __ramtop+-1)
 24226  002594  64F7               	cpfsgt	tblptrh,c
 24227  002596  D003               	bra	i2u566_47
 24228  002598  0008               	tblrd		*
 24229  00259A  50F5               	movf	tablat,w,c
 24230  00259C  D005               	bra	i2u566_40
 24231  00259E                     i2u566_47:
 24232  00259E  CFF6 FFE9          	movff	tblptrl,fsr0l
 24233  0025A2  CFF7 FFEA          	movff	tblptrh,fsr0h
 24234  0025A6  50EF               	movf	indf0,w,c
 24235  0025A8                     i2u566_40:
 24236  0025A8  ECB0  F02D         	call	i2_putch
 24237  0025AC  4A1E               	infsnz	i2printf@cp,f,c
 24238  0025AE  2A1F               	incf	i2printf@cp+1,f,c
 24239  0025B0                     i2l7013:
 24240  0025B0  0622               	decf	i2printf@len,f,c
 24241  0025B2  A0D8               	btfss	status,0,c
 24242  0025B4  0623               	decf	i2printf@len+1,f,c
 24243  0025B6  2822               	incf	i2printf@len,w,c
 24244  0025B8  E1E6               	bnz	i2l7009
 24245  0025BA  2823               	incf	i2printf@len+1,w,c
 24246  0025BC  B4D8               	btfsc	status,2,c
 24247  0025BE  D0DA               	goto	i2l7091
 24248  0025C0  D7E2               	goto	i2l7009
 24249  0025C2                     i2l7015:
 24250                           
 24251                           ;doprnt.c: 818: flag |= 0x40;
 24252  0025C2  8C26               	bsf	i2printf@flag,6,c
 24253                           
 24254                           ;doprnt.c: 822: }
 24255                           
 24256                           ;doprnt.c: 819: break;
 24257  0025C4  D01B               	goto	i2l1527
 24258  0025C6                     i2l7019:
 24259  0025C6  C00D  FFF6         	movff	i2printf@f,tblptrl
 24260  0025CA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24261  0025CE  4A0D               	infsnz	i2printf@f,f,c
 24262  0025D0  2A0E               	incf	i2printf@f+1,f,c
 24263  0025D2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24264  0025D2  6AF8               	clrf	tblptru,c
 24265  0025D4                     	endif
 24266  0025D4                     	if	0	;tblptru may be non-zero
 24267  0025D4                     	endif
 24268  0025D4  0008               	tblrd		*
 24269  0025D6  CFF5 F027          	movff	tablat,i2printf@c
 24270  0025DA  5027               	movf	i2printf@c,w,c
 24271                           
 24272                           ; Switch size 1, requested type "space"
 24273                           ; Number of cases is 5, Range of values is 0 to 117
 24274                           ; switch strategies available:
 24275                           ; Name         Instructions Cycles
 24276                           ; simple_byte           16     9 (average)
 24277                           ;	Chosen strategy is simple_byte
 24278  0025DC  0A00               	xorlw	0	; case 0
 24279  0025DE  B4D8               	btfsc	status,2,c
 24280  0025E0  0012               	return	
 24281  0025E2  0A64               	xorlw	100	; case 100
 24282  0025E4  B4D8               	btfsc	status,2,c
 24283  0025E6  D00A               	goto	i2l1527
 24284  0025E8  0A0D               	xorlw	13	; case 105
 24285  0025EA  B4D8               	btfsc	status,2,c
 24286  0025EC  D007               	goto	i2l1527
 24287  0025EE  0A1A               	xorlw	26	; case 115
 24288  0025F0  B4D8               	btfsc	status,2,c
 24289  0025F2  D778               	goto	i2l6985
 24290  0025F4  0A06               	xorlw	6	; case 117
 24291  0025F6  B4D8               	btfsc	status,2,c
 24292  0025F8  D7E4               	goto	i2l7015
 24293  0025FA  D0BC               	goto	i2l7091
 24294  0025FC                     i2l1527:
 24295                           
 24296                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 24297  0025FC  BC26               	btfsc	i2printf@flag,6,c
 24298  0025FE  D015               	goto	i2l7031
 24299                           
 24300                           ;doprnt.c: 1253: {
 24301                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 24302  002600  C020  FFD9         	movff	i2printf@ap,fsr2l
 24303  002604  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24304  002608  CFDE F024          	movff	postinc2,i2printf@val
 24305  00260C  CFDD F025          	movff	postdec2,i2printf@val+1
 24306  002610  0E02               	movlw	2
 24307  002612  2620               	addwf	i2printf@ap,f,c
 24308  002614  0E00               	movlw	0
 24309  002616  2221               	addwfc	i2printf@ap+1,f,c
 24310                           
 24311                           ;doprnt.c: 1261: if((int)val < 0) {
 24312  002618  AE25               	btfss	i2printf@val+1,7,c
 24313  00261A  D013               	goto	i2l7035
 24314                           
 24315                           ;doprnt.c: 1262: flag |= 0x03;
 24316  00261C  0E03               	movlw	3
 24317  00261E  1226               	iorwf	i2printf@flag,f,c
 24318                           
 24319                           ;doprnt.c: 1263: val = -val;
 24320  002620  6C24               	negf	i2printf@val,c
 24321  002622  1E25               	comf	i2printf@val+1,f,c
 24322  002624  B0D8               	btfsc	status,0,c
 24323  002626  2A25               	incf	i2printf@val+1,f,c
 24324                           
 24325                           ;doprnt.c: 1264: }
 24326                           ;doprnt.c: 1266: }
 24327  002628  D00C               	goto	i2l7035
 24328  00262A                     i2l7031:
 24329                           
 24330                           ;doprnt.c: 1268: else
 24331                           ;doprnt.c: 1273: {
 24332                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 24333  00262A  C020  FFD9         	movff	i2printf@ap,fsr2l
 24334  00262E  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24335  002632  CFDE F024          	movff	postinc2,i2printf@val
 24336  002636  CFDD F025          	movff	postdec2,i2printf@val+1
 24337  00263A  0E02               	movlw	2
 24338  00263C  2620               	addwf	i2printf@ap,f,c
 24339  00263E  0E00               	movlw	0
 24340  002640  2221               	addwfc	i2printf@ap+1,f,c
 24341  002642                     i2l7035:
 24342                           
 24343                           ;doprnt.c: 1287: }
 24344                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 24345  002642  0E01               	movlw	1
 24346  002644  6E27               	movwf	i2printf@c,c
 24347  002646                     i2l7037:
 24348  002646  0E05               	movlw	5
 24349  002648  1827               	xorwf	i2printf@c,w,c
 24350  00264A  B4D8               	btfsc	status,2,c
 24351  00264C  D015               	goto	i2l7049
 24352                           
 24353                           ;doprnt.c: 1306: if(val < dpowers[c])
 24354  00264E  5027               	movf	i2printf@c,w,c
 24355  002650  0D02               	mullw	2
 24356  002652  0EB0               	movlw	low _dpowers
 24357  002654  24F3               	addwf	prodl,w,c
 24358  002656  6EF6               	movwf	tblptrl,c
 24359  002658  0EFA               	movlw	high _dpowers
 24360  00265A  20F4               	addwfc	prodh,w,c
 24361  00265C  6EF7               	movwf	tblptrh,c
 24362  00265E                     	if	1	;There are 3 active tblptr bytes
 24363  00265E  6AF8               	clrf	tblptru,c
 24364  002660  0E00               	movlw	low (__mediumconst shr (0+16))
 24365  002662  22F8               	addwfc	tblptru,f,c
 24366  002664                     	endif
 24367  002664  0009               	tblrd		*+
 24368  002666  50F5               	movf	tablat,w,c
 24369  002668  5C24               	subwf	i2printf@val,w,c
 24370  00266A  0009               	tblrd		*+
 24371  00266C  50F5               	movf	tablat,w,c
 24372  00266E  5825               	subwfb	i2printf@val+1,w,c
 24373  002670  A0D8               	btfss	status,0,c
 24374  002672  D002               	goto	i2l7049
 24375                           
 24376                           ;doprnt.c: 1307: break;
 24377  002674  2A27               	incf	i2printf@c,f,c
 24378  002676  D7E7               	goto	i2l7037
 24379  002678                     i2l7049:
 24380                           
 24381                           ;doprnt.c: 1345: if(width && flag & 0x03)
 24382  002678  5028               	movf	i2printf@width,w,c
 24383  00267A  1029               	iorwf	i2printf@width+1,w,c
 24384  00267C  B4D8               	btfsc	status,2,c
 24385  00267E  D009               	goto	i2l7055
 24386  002680  C026  F019         	movff	i2printf@flag,??i2_printf
 24387  002684  0E03               	movlw	3
 24388  002686  1619               	andwf	??i2_printf,f,c
 24389  002688  B4D8               	btfsc	status,2,c
 24390  00268A  D003               	goto	i2l7055
 24391                           
 24392                           ;doprnt.c: 1346: width--;
 24393  00268C  0628               	decf	i2printf@width,f,c
 24394  00268E  A0D8               	btfss	status,0,c
 24395  002690  0629               	decf	i2printf@width+1,f,c
 24396  002692                     i2l7055:
 24397                           
 24398                           ;doprnt.c: 1381: if(width > c)
 24399  002692  0E80               	movlw	128
 24400  002694  BE27               	btfsc	i2printf@c,7,c
 24401  002696  0E7F               	movlw	127
 24402  002698  6E19               	movwf	??i2_printf& (0+255),c
 24403  00269A  5028               	movf	i2printf@width,w,c
 24404  00269C  5C27               	subwf	i2printf@c,w,c
 24405  00269E  5029               	movf	i2printf@width+1,w,c
 24406  0026A0  0A80               	xorlw	128
 24407  0026A2  5819               	subwfb	??i2_printf& (0+255),w,c
 24408  0026A4  B0D8               	btfsc	status,0,c
 24409  0026A6  D007               	goto	i2l7059
 24410                           
 24411                           ;doprnt.c: 1382: width -= c;
 24412  0026A8  5027               	movf	i2printf@c,w,c
 24413  0026AA  5E28               	subwf	i2printf@width,f,c
 24414  0026AC  0E00               	movlw	0
 24415  0026AE  BE27               	btfsc	i2printf@c,7,c
 24416  0026B0  0EFF               	movlw	255
 24417  0026B2  5A29               	subwfb	i2printf@width+1,f,c
 24418  0026B4  D004               	goto	i2l7061
 24419  0026B6                     i2l7059:
 24420                           
 24421                           ;doprnt.c: 1383: else
 24422                           ;doprnt.c: 1384: width = 0;
 24423  0026B6  0E00               	movlw	0
 24424  0026B8  6E29               	movwf	i2printf@width+1,c
 24425  0026BA  0E00               	movlw	0
 24426  0026BC  6E28               	movwf	i2printf@width,c
 24427  0026BE                     i2l7061:
 24428                           
 24429                           ;doprnt.c: 1387: if(flag & 0x04) {
 24430  0026BE  A426               	btfss	i2printf@flag,2,c
 24431  0026C0  D014               	goto	i2l7073
 24432                           
 24433                           ;doprnt.c: 1392: if(flag & 0x03)
 24434  0026C2  C026  F019         	movff	i2printf@flag,??i2_printf
 24435  0026C6  0E03               	movlw	3
 24436  0026C8  1619               	andwf	??i2_printf,f,c
 24437  0026CA  B4D8               	btfsc	status,2,c
 24438  0026CC  D003               	goto	i2l7067
 24439                           
 24440                           ;doprnt.c: 1393: (putch('-') );
 24441  0026CE  0E2D               	movlw	45
 24442  0026D0  ECB0  F02D         	call	i2_putch
 24443  0026D4                     i2l7067:
 24444                           
 24445                           ;doprnt.c: 1415: if(width)
 24446  0026D4  5028               	movf	i2printf@width,w,c
 24447  0026D6  1029               	iorwf	i2printf@width+1,w,c
 24448  0026D8  B4D8               	btfsc	status,2,c
 24449  0026DA  D01E               	goto	i2l7083
 24450                           
 24451                           ;doprnt.c: 1417: (putch('0') );
 24452                           
 24453                           ;doprnt.c: 1416: do
 24454  0026DC  0E30               	movlw	48
 24455  0026DE  ECB0  F02D         	call	i2_putch
 24456                           
 24457                           ;doprnt.c: 1418: while(--width);
 24458  0026E2  0628               	decf	i2printf@width,f,c
 24459  0026E4  A0D8               	btfss	status,0,c
 24460  0026E6  0629               	decf	i2printf@width+1,f,c
 24461  0026E8  D7F5               	goto	i2l7067
 24462  0026EA                     i2l7073:
 24463                           
 24464                           ;doprnt.c: 1422: {
 24465                           ;doprnt.c: 1424: if(width
 24466                           ;doprnt.c: 1428: )
 24467  0026EA  5028               	movf	i2printf@width,w,c
 24468  0026EC  1029               	iorwf	i2printf@width+1,w,c
 24469  0026EE  B4D8               	btfsc	status,2,c
 24470  0026F0  D00A               	goto	i2l7079
 24471  0026F2                     i2l7075:
 24472                           
 24473                           ;doprnt.c: 1430: (putch(' ') );
 24474  0026F2  0E20               	movlw	32
 24475  0026F4  ECB0  F02D         	call	i2_putch
 24476                           
 24477                           ;doprnt.c: 1431: while(--width);
 24478  0026F8  0628               	decf	i2printf@width,f,c
 24479  0026FA  A0D8               	btfss	status,0,c
 24480  0026FC  0629               	decf	i2printf@width+1,f,c
 24481  0026FE  5028               	movf	i2printf@width,w,c
 24482  002700  1029               	iorwf	i2printf@width+1,w,c
 24483  002702  A4D8               	btfss	status,2,c
 24484  002704  D7F6               	goto	i2l7075
 24485  002706                     i2l7079:
 24486                           
 24487                           ;doprnt.c: 1438: if(flag & 0x03)
 24488  002706  C026  F019         	movff	i2printf@flag,??i2_printf
 24489  00270A  0E03               	movlw	3
 24490  00270C  1619               	andwf	??i2_printf,f,c
 24491  00270E  B4D8               	btfsc	status,2,c
 24492  002710  D003               	goto	i2l7083
 24493                           
 24494                           ;doprnt.c: 1439: (putch('-') );
 24495  002712  0E2D               	movlw	45
 24496  002714  ECB0  F02D         	call	i2_putch
 24497  002718                     i2l7083:
 24498                           
 24499                           ;doprnt.c: 1469: }
 24500                           ;doprnt.c: 1472: prec = c;
 24501  002718  C027  F01D         	movff	i2printf@c,i2printf@prec
 24502                           
 24503                           ;doprnt.c: 1474: while(prec--) {
 24504  00271C  D027               	goto	i2l7089
 24505  00271E                     i2l7085:
 24506                           
 24507                           ;doprnt.c: 1478: {
 24508                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 24509  00271E  501D               	movf	i2printf@prec,w,c
 24510  002720  0D02               	mullw	2
 24511  002722  0EB0               	movlw	low _dpowers
 24512  002724  24F3               	addwf	prodl,w,c
 24513  002726  6EF6               	movwf	tblptrl,c
 24514  002728  0EFA               	movlw	high _dpowers
 24515  00272A  20F4               	addwfc	prodh,w,c
 24516  00272C  6EF7               	movwf	tblptrh,c
 24517  00272E                     	if	1	;There are 3 active tblptr bytes
 24518  00272E  6AF8               	clrf	tblptru,c
 24519  002730  0E00               	movlw	low (__mediumconst shr (0+16))
 24520  002732  22F8               	addwfc	tblptru,f,c
 24521  002734                     	endif
 24522  002734  0009               	tblrd		*+
 24523  002736  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 24524  00273A  000A               	tblrd		*-
 24525  00273C  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 24526  002740  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 24527  002744  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 24528  002748  EC88  F029         	call	i2___lwdiv	;wreg free
 24529  00274C  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 24530  002750  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 24531  002754  0E00               	movlw	0
 24532  002756  6E04               	movwf	i2___lwmod@divisor+1,c
 24533  002758  0E0A               	movlw	10
 24534  00275A  6E03               	movwf	i2___lwmod@divisor,c
 24535  00275C  EC8F  F02A         	call	i2___lwmod	;wreg free
 24536  002760  5001               	movf	?i2___lwmod,w,c
 24537  002762  0F30               	addlw	48
 24538  002764  6E27               	movwf	i2printf@c,c
 24539                           
 24540                           ;doprnt.c: 1523: }
 24541                           ;doprnt.c: 1524: (putch(c) );
 24542  002766  5027               	movf	i2printf@c,w,c
 24543  002768  ECB0  F02D         	call	i2_putch
 24544  00276C                     i2l7089:
 24545  00276C  061D               	decf	i2printf@prec,f,c
 24546  00276E  281D               	incf	i2printf@prec,w,c
 24547  002770  A4D8               	btfss	status,2,c
 24548  002772  D7D5               	goto	i2l7085
 24549  002774                     i2l7091:
 24550  002774  C00D  FFF6         	movff	i2printf@f,tblptrl
 24551  002778  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24552  00277C  4A0D               	infsnz	i2printf@f,f,c
 24553  00277E  2A0E               	incf	i2printf@f+1,f,c
 24554  002780                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24555  002780  6AF8               	clrf	tblptru,c
 24556  002782                     	endif
 24557  002782                     	if	0	;tblptru may be non-zero
 24558  002782                     	endif
 24559  002782  0008               	tblrd		*
 24560  002784  CFF5 F027          	movff	tablat,i2printf@c
 24561  002788  5027               	movf	i2printf@c,w,c
 24562  00278A  B4D8               	btfsc	status,2,c
 24563  00278C  0012               	return	
 24564  00278E  D64E               	goto	i2l6961
 24565  002790                     __end_ofi2_printf:
 24566                           	opt stack 0
 24567                           pclatu	equ	0xFFB
 24568                           pclath	equ	0xFFA
 24569                           tblptru	equ	0xFF8
 24570                           tblptrh	equ	0xFF7
 24571                           tblptrl	equ	0xFF6
 24572                           tablat	equ	0xFF5
 24573                           prodh	equ	0xFF4
 24574                           prodl	equ	0xFF3
 24575                           intcon	equ	0xFF2
 24576                           intcon2	equ	0xFF1
 24577                           intcon3	equ	0xFF0
 24578                           indf0	equ	0xFEF
 24579                           postinc0	equ	0xFEE
 24580                           fsr0h	equ	0xFEA
 24581                           fsr0l	equ	0xFE9
 24582                           wreg	equ	0xFE8
 24583                           postdec1	equ	0xFE5
 24584                           fsr1h	equ	0xFE2
 24585                           fsr1l	equ	0xFE1
 24586                           indf2	equ	0xFDF
 24587                           postinc2	equ	0xFDE
 24588                           postdec2	equ	0xFDD
 24589                           fsr2h	equ	0xFDA
 24590                           fsr2l	equ	0xFD9
 24591                           status	equ	0xFD8
 24592                           
 24593 ;; *************** function i2_putch *****************
 24594 ;; Defined at:
 24595 ;;		line 20 in file "lcd.c"
 24596 ;; Parameters:    Size  Location     Type
 24597 ;;  data            1    wreg     unsigned char 
 24598 ;; Auto vars:     Size  Location     Type
 24599 ;;  data            1    2[COMRAM] unsigned char 
 24600 ;; Return value:  Size  Location     Type
 24601 ;;                  1    wreg      void 
 24602 ;; Registers used:
 24603 ;;		wreg, status,2, status,0, cstack
 24604 ;; Tracked objects:
 24605 ;;		On entry : 0/0
 24606 ;;		On exit  : 0/0
 24607 ;;		Unchanged: 0/0
 24608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24610 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24612 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24613 ;;Total ram usage:        1 bytes
 24614 ;; Hardware stack levels used:    1
 24615 ;; Hardware stack levels required when called:    1
 24616 ;; This function calls:
 24617 ;;		i2_lcdNibble
 24618 ;; This function is called by:
 24619 ;;		i2_printf
 24620 ;; This function uses a non-reentrant model
 24621 ;;
 24622                           
 24623                           	psect	text88
 24624  005B60                     __ptext88:
 24625                           	opt stack 0
 24626  005B60                     i2_putch:
 24627                           	opt stack 20
 24628                           
 24629                           ;incstack = 0
 24630                           ;i2putch@data stored from wreg
 24631  005B60  6E03               	movwf	i2putch@data,c
 24632                           
 24633                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 24634  005B62  848C               	bsf	3980,2,c	;volatile
 24635                           
 24636                           ;lcd.c: 22: lcdNibble(data);
 24637  005B64  5003               	movf	i2putch@data,w,c
 24638  005B66  EC5B  F029         	call	i2_lcdNibble
 24639  005B6A  0012               	return		;funcret
 24640  005B6C                     __end_ofi2_putch:
 24641                           	opt stack 0
 24642                           pclatu	equ	0xFFB
 24643                           pclath	equ	0xFFA
 24644                           tblptru	equ	0xFF8
 24645                           tblptrh	equ	0xFF7
 24646                           tblptrl	equ	0xFF6
 24647                           tablat	equ	0xFF5
 24648                           prodh	equ	0xFF4
 24649                           prodl	equ	0xFF3
 24650                           intcon	equ	0xFF2
 24651                           intcon2	equ	0xFF1
 24652                           intcon3	equ	0xFF0
 24653                           indf0	equ	0xFEF
 24654                           postinc0	equ	0xFEE
 24655                           fsr0h	equ	0xFEA
 24656                           fsr0l	equ	0xFE9
 24657                           wreg	equ	0xFE8
 24658                           postdec1	equ	0xFE5
 24659                           fsr1h	equ	0xFE2
 24660                           fsr1l	equ	0xFE1
 24661                           indf2	equ	0xFDF
 24662                           postinc2	equ	0xFDE
 24663                           postdec2	equ	0xFDD
 24664                           fsr2h	equ	0xFDA
 24665                           fsr2l	equ	0xFD9
 24666                           status	equ	0xFD8
 24667                           
 24668 ;; *************** function i2_isdigit *****************
 24669 ;; Defined at:
 24670 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 24671 ;; Parameters:    Size  Location     Type
 24672 ;;  c               1    wreg     unsigned char 
 24673 ;; Auto vars:     Size  Location     Type
 24674 ;;  c               1    2[COMRAM] unsigned char 
 24675 ;; Return value:  Size  Location     Type
 24676 ;;		None               void
 24677 ;; Registers used:
 24678 ;;		wreg, status,2, status,0
 24679 ;; Tracked objects:
 24680 ;;		On entry : 0/0
 24681 ;;		On exit  : 0/0
 24682 ;;		Unchanged: 0/0
 24683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24685 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24686 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24687 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24688 ;;Total ram usage:        3 bytes
 24689 ;; Hardware stack levels used:    1
 24690 ;; This function calls:
 24691 ;;		Nothing
 24692 ;; This function is called by:
 24693 ;;		i2_printf
 24694 ;; This function uses a non-reentrant model
 24695 ;;
 24696                           
 24697                           	psect	text89
 24698  005A9C                     __ptext89:
 24699                           	opt stack 0
 24700  005A9C                     i2_isdigit:
 24701                           	opt stack 21
 24702                           
 24703                           ;incstack = 0
 24704                           ;i2isdigit@c stored from wreg
 24705  005A9C  6E03               	movwf	i2isdigit@c,c
 24706  005A9E  0E00               	movlw	0
 24707  005AA0  6E02               	movwf	i2_isdigit$2068,c
 24708  005AA2  0E3A               	movlw	58
 24709  005AA4  6003               	cpfslt	i2isdigit@c,c
 24710  005AA6  D005               	goto	i2l6625
 24711  005AA8  0E2F               	movlw	47
 24712  005AAA  6403               	cpfsgt	i2isdigit@c,c
 24713  005AAC  D002               	goto	i2l6625
 24714  005AAE  0E01               	movlw	1
 24715  005AB0  6E02               	movwf	i2_isdigit$2068,c
 24716  005AB2                     i2l6625:
 24717  005AB2  C002  F001         	movff	i2_isdigit$2068,??i2_isdigit
 24718  005AB6  3001               	rrcf	??i2_isdigit,w,c
 24719  005AB8  0012               	return	
 24720  005ABA                     __end_ofi2_isdigit:
 24721                           	opt stack 0
 24722                           pclatu	equ	0xFFB
 24723                           pclath	equ	0xFFA
 24724                           tblptru	equ	0xFF8
 24725                           tblptrh	equ	0xFF7
 24726                           tblptrl	equ	0xFF6
 24727                           tablat	equ	0xFF5
 24728                           prodh	equ	0xFF4
 24729                           prodl	equ	0xFF3
 24730                           intcon	equ	0xFF2
 24731                           intcon2	equ	0xFF1
 24732                           intcon3	equ	0xFF0
 24733                           indf0	equ	0xFEF
 24734                           postinc0	equ	0xFEE
 24735                           fsr0h	equ	0xFEA
 24736                           fsr0l	equ	0xFE9
 24737                           wreg	equ	0xFE8
 24738                           postdec1	equ	0xFE5
 24739                           fsr1h	equ	0xFE2
 24740                           fsr1l	equ	0xFE1
 24741                           indf2	equ	0xFDF
 24742                           postinc2	equ	0xFDE
 24743                           postdec2	equ	0xFDD
 24744                           fsr2h	equ	0xFDA
 24745                           fsr2l	equ	0xFD9
 24746                           status	equ	0xFD8
 24747                           
 24748 ;; *************** function i2___wmul *****************
 24749 ;; Defined at:
 24750 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 24751 ;; Parameters:    Size  Location     Type
 24752 ;;  multiplier      2    0[COMRAM] unsigned int 
 24753 ;;  multiplicand    2    2[COMRAM] unsigned int 
 24754 ;; Auto vars:     Size  Location     Type
 24755 ;;  __wmul          2    4[COMRAM] unsigned int 
 24756 ;; Return value:  Size  Location     Type
 24757 ;;                  2    0[COMRAM] unsigned int 
 24758 ;; Registers used:
 24759 ;;		wreg, status,2, status,0, prodl, prodh
 24760 ;; Tracked objects:
 24761 ;;		On entry : 0/0
 24762 ;;		On exit  : 0/0
 24763 ;;		Unchanged: 0/0
 24764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24765 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24766 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24768 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24769 ;;Total ram usage:        6 bytes
 24770 ;; Hardware stack levels used:    1
 24771 ;; This function calls:
 24772 ;;		Nothing
 24773 ;; This function is called by:
 24774 ;;		_printSortTimer
 24775 ;;		_retrieveLog
 24776 ;;		i2_printf
 24777 ;; This function uses a non-reentrant model
 24778 ;;
 24779                           
 24780                           	psect	text90
 24781  0059E8                     __ptext90:
 24782                           	opt stack 0
 24783  0059E8                     i2___wmul:
 24784                           	opt stack 21
 24785                           
 24786                           ;incstack = 0
 24787  0059E8  5001               	movf	i2___wmul@multiplier,w,c
 24788  0059EA  0203               	mulwf	i2___wmul@multiplicand,c
 24789  0059EC  CFF3 F005          	movff	prodl,i2___wmul@product
 24790  0059F0  CFF4 F006          	movff	prodh,i2___wmul@product+1
 24791  0059F4  5001               	movf	i2___wmul@multiplier,w,c
 24792  0059F6  0204               	mulwf	i2___wmul@multiplicand+1,c
 24793  0059F8  50F3               	movf	prodl,w,c
 24794  0059FA  2606               	addwf	i2___wmul@product+1,f,c
 24795  0059FC  5002               	movf	i2___wmul@multiplier+1,w,c
 24796  0059FE  0203               	mulwf	i2___wmul@multiplicand,c
 24797  005A00  50F3               	movf	prodl,w,c
 24798  005A02  2606               	addwf	i2___wmul@product+1,f,c
 24799  005A04  C005  F001         	movff	i2___wmul@product,?i2___wmul
 24800  005A08  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 24801  005A0C  0012               	return	
 24802  005A0E                     __end_ofi2___wmul:
 24803                           	opt stack 0
 24804                           pclatu	equ	0xFFB
 24805                           pclath	equ	0xFFA
 24806                           tblptru	equ	0xFF8
 24807                           tblptrh	equ	0xFF7
 24808                           tblptrl	equ	0xFF6
 24809                           tablat	equ	0xFF5
 24810                           prodh	equ	0xFF4
 24811                           prodl	equ	0xFF3
 24812                           intcon	equ	0xFF2
 24813                           intcon2	equ	0xFF1
 24814                           intcon3	equ	0xFF0
 24815                           indf0	equ	0xFEF
 24816                           postinc0	equ	0xFEE
 24817                           fsr0h	equ	0xFEA
 24818                           fsr0l	equ	0xFE9
 24819                           wreg	equ	0xFE8
 24820                           postdec1	equ	0xFE5
 24821                           fsr1h	equ	0xFE2
 24822                           fsr1l	equ	0xFE1
 24823                           indf2	equ	0xFDF
 24824                           postinc2	equ	0xFDE
 24825                           postdec2	equ	0xFDD
 24826                           fsr2h	equ	0xFDA
 24827                           fsr2l	equ	0xFD9
 24828                           status	equ	0xFD8
 24829                           
 24830 ;; *************** function i2___lwmod *****************
 24831 ;; Defined at:
 24832 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 24833 ;; Parameters:    Size  Location     Type
 24834 ;;  dividend        2    0[COMRAM] unsigned int 
 24835 ;;  divisor         2    2[COMRAM] unsigned int 
 24836 ;; Auto vars:     Size  Location     Type
 24837 ;;  __lwmod         1    4[COMRAM] unsigned char 
 24838 ;; Return value:  Size  Location     Type
 24839 ;;                  2    0[COMRAM] unsigned int 
 24840 ;; Registers used:
 24841 ;;		wreg, status,2, status,0
 24842 ;; Tracked objects:
 24843 ;;		On entry : 0/0
 24844 ;;		On exit  : 0/0
 24845 ;;		Unchanged: 0/0
 24846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24847 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24848 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24850 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24851 ;;Total ram usage:        5 bytes
 24852 ;; Hardware stack levels used:    1
 24853 ;; This function calls:
 24854 ;;		Nothing
 24855 ;; This function is called by:
 24856 ;;		_printSortTimer
 24857 ;;		i2_printf
 24858 ;; This function uses a non-reentrant model
 24859 ;;
 24860                           
 24861                           	psect	text91
 24862  00551E                     __ptext91:
 24863                           	opt stack 0
 24864  00551E                     i2___lwmod:
 24865                           	opt stack 21
 24866                           
 24867                           ;incstack = 0
 24868  00551E  5003               	movf	i2___lwmod@divisor,w,c
 24869  005520  1004               	iorwf	i2___lwmod@divisor+1,w,c
 24870  005522  B4D8               	btfsc	status,2,c
 24871  005524  D018               	goto	i2l1984
 24872  005526  0E01               	movlw	1
 24873  005528  6E05               	movwf	i2___lwmod@counter,c
 24874  00552A  D004               	goto	i2l6657
 24875  00552C                     i2l6655:
 24876  00552C  90D8               	bcf	status,0,c
 24877  00552E  3603               	rlcf	i2___lwmod@divisor,f,c
 24878  005530  3604               	rlcf	i2___lwmod@divisor+1,f,c
 24879  005532  2A05               	incf	i2___lwmod@counter,f,c
 24880  005534                     i2l6657:
 24881  005534  AE04               	btfss	i2___lwmod@divisor+1,7,c
 24882  005536  D7FA               	goto	i2l6655
 24883  005538                     i2l6659:
 24884  005538  5003               	movf	i2___lwmod@divisor,w,c
 24885  00553A  5C01               	subwf	i2___lwmod@dividend,w,c
 24886  00553C  5004               	movf	i2___lwmod@divisor+1,w,c
 24887  00553E  5802               	subwfb	i2___lwmod@dividend+1,w,c
 24888  005540  A0D8               	btfss	status,0,c
 24889  005542  D004               	goto	i2l6663
 24890  005544  5003               	movf	i2___lwmod@divisor,w,c
 24891  005546  5E01               	subwf	i2___lwmod@dividend,f,c
 24892  005548  5004               	movf	i2___lwmod@divisor+1,w,c
 24893  00554A  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 24894  00554C                     i2l6663:
 24895  00554C  90D8               	bcf	status,0,c
 24896  00554E  3204               	rrcf	i2___lwmod@divisor+1,f,c
 24897  005550  3203               	rrcf	i2___lwmod@divisor,f,c
 24898  005552  2E05               	decfsz	i2___lwmod@counter,f,c
 24899  005554  D7F1               	goto	i2l6659
 24900  005556                     i2l1984:
 24901  005556  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 24902  00555A  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 24903  00555E  0012               	return		;funcret
 24904  005560                     __end_ofi2___lwmod:
 24905                           	opt stack 0
 24906                           pclatu	equ	0xFFB
 24907                           pclath	equ	0xFFA
 24908                           tblptru	equ	0xFF8
 24909                           tblptrh	equ	0xFF7
 24910                           tblptrl	equ	0xFF6
 24911                           tablat	equ	0xFF5
 24912                           prodh	equ	0xFF4
 24913                           prodl	equ	0xFF3
 24914                           intcon	equ	0xFF2
 24915                           intcon2	equ	0xFF1
 24916                           intcon3	equ	0xFF0
 24917                           indf0	equ	0xFEF
 24918                           postinc0	equ	0xFEE
 24919                           fsr0h	equ	0xFEA
 24920                           fsr0l	equ	0xFE9
 24921                           wreg	equ	0xFE8
 24922                           postdec1	equ	0xFE5
 24923                           fsr1h	equ	0xFE2
 24924                           fsr1l	equ	0xFE1
 24925                           indf2	equ	0xFDF
 24926                           postinc2	equ	0xFDE
 24927                           postdec2	equ	0xFDD
 24928                           fsr2h	equ	0xFDA
 24929                           fsr2l	equ	0xFD9
 24930                           status	equ	0xFD8
 24931                           
 24932 ;; *************** function i2___lwdiv *****************
 24933 ;; Defined at:
 24934 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 24935 ;; Parameters:    Size  Location     Type
 24936 ;;  dividend        2    5[COMRAM] unsigned int 
 24937 ;;  divisor         2    7[COMRAM] unsigned int 
 24938 ;; Auto vars:     Size  Location     Type
 24939 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 24940 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 24941 ;; Return value:  Size  Location     Type
 24942 ;;                  2    5[COMRAM] unsigned int 
 24943 ;; Registers used:
 24944 ;;		wreg, status,2, status,0
 24945 ;; Tracked objects:
 24946 ;;		On entry : 0/0
 24947 ;;		On exit  : 0/0
 24948 ;;		Unchanged: 0/0
 24949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24950 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24951 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24953 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24954 ;;Total ram usage:        7 bytes
 24955 ;; Hardware stack levels used:    1
 24956 ;; This function calls:
 24957 ;;		Nothing
 24958 ;; This function is called by:
 24959 ;;		_printSortTimer
 24960 ;;		i2_printf
 24961 ;; This function uses a non-reentrant model
 24962 ;;
 24963                           
 24964                           	psect	text92
 24965  005310                     __ptext92:
 24966                           	opt stack 0
 24967  005310                     i2___lwdiv:
 24968                           	opt stack 21
 24969                           
 24970                           ;incstack = 0
 24971  005310  0E00               	movlw	0
 24972  005312  6E0B               	movwf	i2___lwdiv@quotient+1,c
 24973  005314  0E00               	movlw	0
 24974  005316  6E0A               	movwf	i2___lwdiv@quotient,c
 24975  005318  5008               	movf	i2___lwdiv@divisor,w,c
 24976  00531A  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 24977  00531C  B4D8               	btfsc	status,2,c
 24978  00531E  D01C               	goto	i2l1974
 24979  005320  0E01               	movlw	1
 24980  005322  6E0C               	movwf	i2___lwdiv@counter,c
 24981  005324  D004               	goto	i2l6637
 24982  005326                     i2l6635:
 24983  005326  90D8               	bcf	status,0,c
 24984  005328  3608               	rlcf	i2___lwdiv@divisor,f,c
 24985  00532A  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 24986  00532C  2A0C               	incf	i2___lwdiv@counter,f,c
 24987  00532E                     i2l6637:
 24988  00532E  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 24989  005330  D7FA               	goto	i2l6635
 24990  005332                     i2l6639:
 24991  005332  90D8               	bcf	status,0,c
 24992  005334  360A               	rlcf	i2___lwdiv@quotient,f,c
 24993  005336  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 24994  005338  5008               	movf	i2___lwdiv@divisor,w,c
 24995  00533A  5C06               	subwf	i2___lwdiv@dividend,w,c
 24996  00533C  5009               	movf	i2___lwdiv@divisor+1,w,c
 24997  00533E  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 24998  005340  A0D8               	btfss	status,0,c
 24999  005342  D005               	goto	i2l6647
 25000  005344  5008               	movf	i2___lwdiv@divisor,w,c
 25001  005346  5E06               	subwf	i2___lwdiv@dividend,f,c
 25002  005348  5009               	movf	i2___lwdiv@divisor+1,w,c
 25003  00534A  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 25004  00534C  800A               	bsf	i2___lwdiv@quotient,0,c
 25005  00534E                     i2l6647:
 25006  00534E  90D8               	bcf	status,0,c
 25007  005350  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 25008  005352  3208               	rrcf	i2___lwdiv@divisor,f,c
 25009  005354  2E0C               	decfsz	i2___lwdiv@counter,f,c
 25010  005356  D7ED               	goto	i2l6639
 25011  005358                     i2l1974:
 25012  005358  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 25013  00535C  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 25014  005360  0012               	return		;funcret
 25015  005362                     __end_ofi2___lwdiv:
 25016                           	opt stack 0
 25017                           pclatu	equ	0xFFB
 25018                           pclath	equ	0xFFA
 25019                           tblptru	equ	0xFF8
 25020                           tblptrh	equ	0xFF7
 25021                           tblptrl	equ	0xFF6
 25022                           tablat	equ	0xFF5
 25023                           prodh	equ	0xFF4
 25024                           prodl	equ	0xFF3
 25025                           intcon	equ	0xFF2
 25026                           intcon2	equ	0xFF1
 25027                           intcon3	equ	0xFF0
 25028                           indf0	equ	0xFEF
 25029                           postinc0	equ	0xFEE
 25030                           fsr0h	equ	0xFEA
 25031                           fsr0l	equ	0xFE9
 25032                           wreg	equ	0xFE8
 25033                           postdec1	equ	0xFE5
 25034                           fsr1h	equ	0xFE2
 25035                           fsr1l	equ	0xFE1
 25036                           indf2	equ	0xFDF
 25037                           postinc2	equ	0xFDE
 25038                           postdec2	equ	0xFDD
 25039                           fsr2h	equ	0xFDA
 25040                           fsr2l	equ	0xFD9
 25041                           status	equ	0xFD8
 25042                           
 25043 ;; *************** function i2_lcdInst *****************
 25044 ;; Defined at:
 25045 ;;		line 15 in file "lcd.c"
 25046 ;; Parameters:    Size  Location     Type
 25047 ;;  data            1    wreg     unsigned char 
 25048 ;; Auto vars:     Size  Location     Type
 25049 ;;  data            1    2[COMRAM] unsigned char 
 25050 ;; Return value:  Size  Location     Type
 25051 ;;                  1    wreg      void 
 25052 ;; Registers used:
 25053 ;;		wreg, status,2, status,0, cstack
 25054 ;; Tracked objects:
 25055 ;;		On entry : 0/0
 25056 ;;		On exit  : 0/0
 25057 ;;		Unchanged: 0/0
 25058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25060 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25062 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25063 ;;Total ram usage:        1 bytes
 25064 ;; Hardware stack levels used:    1
 25065 ;; Hardware stack levels required when called:    1
 25066 ;; This function calls:
 25067 ;;		i2_lcdNibble
 25068 ;; This function is called by:
 25069 ;;		_change_state_to_menu_11
 25070 ;;		_change_state_to_menu_23
 25071 ;;		_change_state_to_logs_11
 25072 ;;		_change_state_to_logs_12
 25073 ;;		_change_state_to_logs_22
 25074 ;;		_change_state_to_logs_23
 25075 ;;		_change_state_to_logs_33
 25076 ;;		_change_state_to_logs_34
 25077 ;;		_printSortTimer
 25078 ;;		i2_change_state_to_menu_start
 25079 ;;		i2_change_state_to_menu_12
 25080 ;;		i2_change_state_to_menu_22
 25081 ;;		i2_printRTC
 25082 ;; This function uses a non-reentrant model
 25083 ;;
 25084                           
 25085                           	psect	text93
 25086  005B6C                     __ptext93:
 25087                           	opt stack 0
 25088  005B6C                     i2_lcdInst:
 25089                           	opt stack 20
 25090                           
 25091                           ;incstack = 0
 25092                           ;i2lcdInst@data stored from wreg
 25093  005B6C  6E03               	movwf	i2lcdInst@data,c
 25094                           
 25095                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 25096  005B6E  948C               	bcf	3980,2,c	;volatile
 25097                           
 25098                           ;lcd.c: 17: lcdNibble(data);
 25099  005B70  5003               	movf	i2lcdInst@data,w,c
 25100  005B72  EC5B  F029         	call	i2_lcdNibble
 25101  005B76  0012               	return		;funcret
 25102  005B78                     __end_ofi2_lcdInst:
 25103                           	opt stack 0
 25104                           pclatu	equ	0xFFB
 25105                           pclath	equ	0xFFA
 25106                           tblptru	equ	0xFF8
 25107                           tblptrh	equ	0xFF7
 25108                           tblptrl	equ	0xFF6
 25109                           tablat	equ	0xFF5
 25110                           prodh	equ	0xFF4
 25111                           prodl	equ	0xFF3
 25112                           intcon	equ	0xFF2
 25113                           intcon2	equ	0xFF1
 25114                           intcon3	equ	0xFF0
 25115                           indf0	equ	0xFEF
 25116                           postinc0	equ	0xFEE
 25117                           fsr0h	equ	0xFEA
 25118                           fsr0l	equ	0xFE9
 25119                           wreg	equ	0xFE8
 25120                           postdec1	equ	0xFE5
 25121                           fsr1h	equ	0xFE2
 25122                           fsr1l	equ	0xFE1
 25123                           indf2	equ	0xFDF
 25124                           postinc2	equ	0xFDE
 25125                           postdec2	equ	0xFDD
 25126                           fsr2h	equ	0xFDA
 25127                           fsr2l	equ	0xFD9
 25128                           status	equ	0xFD8
 25129                           
 25130 ;; *************** function i2_lcdNibble *****************
 25131 ;; Defined at:
 25132 ;;		line 25 in file "lcd.c"
 25133 ;; Parameters:    Size  Location     Type
 25134 ;;  data            1    wreg     unsigned char 
 25135 ;; Auto vars:     Size  Location     Type
 25136 ;;  data            1    1[COMRAM] unsigned char 
 25137 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 25138 ;; Return value:  Size  Location     Type
 25139 ;;                  1    wreg      void 
 25140 ;; Registers used:
 25141 ;;		wreg, status,2, status,0
 25142 ;; Tracked objects:
 25143 ;;		On entry : 0/0
 25144 ;;		On exit  : 0/0
 25145 ;;		Unchanged: 0/0
 25146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25148 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25150 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25151 ;;Total ram usage:        2 bytes
 25152 ;; Hardware stack levels used:    1
 25153 ;; This function calls:
 25154 ;;		Nothing
 25155 ;; This function is called by:
 25156 ;;		i2_lcdInst
 25157 ;;		i2_putch
 25158 ;; This function uses a non-reentrant model
 25159 ;;
 25160                           
 25161                           	psect	text94
 25162  0052B6                     __ptext94:
 25163                           	opt stack 0
 25164  0052B6                     i2_lcdNibble:
 25165                           	opt stack 20
 25166                           
 25167                           ;incstack = 0
 25168                           ;i2lcdNibble@data stored from wreg
 25169  0052B6  6E02               	movwf	i2lcdNibble@data,c
 25170                           
 25171                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 25172  0052B8  9EF2               	bcf	intcon,7,c	;volatile
 25173                           
 25174                           ;lcd.c: 28: char temp = data & 0xF0;
 25175  0052BA  5002               	movf	i2lcdNibble@data,w,c
 25176  0052BC  0BF0               	andlw	240
 25177  0052BE  6E01               	movwf	i2lcdNibble@temp,c
 25178                           
 25179                           ;lcd.c: 29: LATD = LATD & 0x0F;
 25180  0052C0  508C               	movf	3980,w,c	;volatile
 25181  0052C2  0B0F               	andlw	15
 25182  0052C4  6E8C               	movwf	3980,c	;volatile
 25183                           
 25184                           ;lcd.c: 30: LATD = temp | LATD;
 25185  0052C6  5001               	movf	i2lcdNibble@temp,w,c
 25186  0052C8  108C               	iorwf	3980,w,c	;volatile
 25187  0052CA  6E8C               	movwf	3980,c	;volatile
 25188                           
 25189                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 25190  0052CC  868C               	bsf	3980,3,c	;volatile
 25191                           
 25192                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25193  0052CE  0E42               	movlw	66
 25194  0052D0                     i2u1126_47:
 25195  0052D0  2EE8               	decfsz	wreg,f,c
 25196  0052D2  D7FE               	bra	i2u1126_47
 25197  0052D4  D000               	nop2	
 25198                           
 25199                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 25200  0052D6  968C               	bcf	3980,3,c	;volatile
 25201                           
 25202                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25203  0052D8  0E42               	movlw	66
 25204  0052DA                     i2u1127_47:
 25205  0052DA  2EE8               	decfsz	wreg,f,c
 25206  0052DC  D7FE               	bra	i2u1127_47
 25207  0052DE  D000               	nop2	
 25208                           
 25209                           ;lcd.c: 37: data = data << 4;
 25210  0052E0  3802               	swapf	i2lcdNibble@data,w,c
 25211  0052E2  0BF0               	andlw	240
 25212  0052E4  6E02               	movwf	i2lcdNibble@data,c
 25213                           
 25214                           ;lcd.c: 39: temp = data & 0xF0;
 25215  0052E6  5002               	movf	i2lcdNibble@data,w,c
 25216  0052E8  0BF0               	andlw	240
 25217  0052EA  6E01               	movwf	i2lcdNibble@temp,c
 25218                           
 25219                           ;lcd.c: 40: LATD = LATD & 0x0F;
 25220  0052EC  508C               	movf	3980,w,c	;volatile
 25221  0052EE  0B0F               	andlw	15
 25222  0052F0  6E8C               	movwf	3980,c	;volatile
 25223                           
 25224                           ;lcd.c: 41: LATD = temp | LATD;
 25225  0052F2  5001               	movf	i2lcdNibble@temp,w,c
 25226  0052F4  108C               	iorwf	3980,w,c	;volatile
 25227  0052F6  6E8C               	movwf	3980,c	;volatile
 25228                           
 25229                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 25230  0052F8  868C               	bsf	3980,3,c	;volatile
 25231                           
 25232                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25233  0052FA  0E42               	movlw	66
 25234  0052FC                     i2u1128_47:
 25235  0052FC  2EE8               	decfsz	wreg,f,c
 25236  0052FE  D7FE               	bra	i2u1128_47
 25237  005300  D000               	nop2	
 25238                           
 25239                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 25240  005302  968C               	bcf	3980,3,c	;volatile
 25241                           
 25242                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25243  005304  0E42               	movlw	66
 25244  005306                     i2u1129_47:
 25245  005306  2EE8               	decfsz	wreg,f,c
 25246  005308  D7FE               	bra	i2u1129_47
 25247  00530A  D000               	nop2	
 25248                           
 25249                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 25250  00530C  8EF2               	bsf	intcon,7,c	;volatile
 25251  00530E  0012               	return		;funcret
 25252  005310                     __end_ofi2_lcdNibble:
 25253                           	opt stack 0
 25254                           pclatu	equ	0xFFB
 25255                           pclath	equ	0xFFA
 25256                           tblptru	equ	0xFF8
 25257                           tblptrh	equ	0xFF7
 25258                           tblptrl	equ	0xFF6
 25259                           tablat	equ	0xFF5
 25260                           prodh	equ	0xFF4
 25261                           prodl	equ	0xFF3
 25262                           intcon	equ	0xFF2
 25263                           intcon2	equ	0xFF1
 25264                           intcon3	equ	0xFF0
 25265                           indf0	equ	0xFEF
 25266                           postinc0	equ	0xFEE
 25267                           fsr0h	equ	0xFEA
 25268                           fsr0l	equ	0xFE9
 25269                           wreg	equ	0xFE8
 25270                           postdec1	equ	0xFE5
 25271                           fsr1h	equ	0xFE2
 25272                           fsr1l	equ	0xFE1
 25273                           indf2	equ	0xFDF
 25274                           postinc2	equ	0xFDE
 25275                           postdec2	equ	0xFDD
 25276                           fsr2h	equ	0xFDA
 25277                           fsr2l	equ	0xFD9
 25278                           status	equ	0xFD8
 25279                           
 25280 ;; *************** function i2_getRTC *****************
 25281 ;; Defined at:
 25282 ;;		line 44 in file "RTC.c"
 25283 ;; Parameters:    Size  Location     Type
 25284 ;;		None
 25285 ;; Auto vars:     Size  Location     Type
 25286 ;;  getRTC          2    3[COMRAM] int 
 25287 ;; Return value:  Size  Location     Type
 25288 ;;                  1    wreg      void 
 25289 ;; Registers used:
 25290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25291 ;; Tracked objects:
 25292 ;;		On entry : 0/0
 25293 ;;		On exit  : 0/0
 25294 ;;		Unchanged: 0/0
 25295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25297 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25299 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25300 ;;Total ram usage:        2 bytes
 25301 ;; Hardware stack levels used:    1
 25302 ;; Hardware stack levels required when called:    2
 25303 ;; This function calls:
 25304 ;;		i2_I2C_Master_Read
 25305 ;;		i2_I2C_Master_Start
 25306 ;;		i2_I2C_Master_Stop
 25307 ;;		i2_I2C_Master_Write
 25308 ;; This function is called by:
 25309 ;;		_printSortTimer
 25310 ;;		i2_printRTC
 25311 ;; This function uses a non-reentrant model
 25312 ;;
 25313                           
 25314                           	psect	text95
 25315  004F92                     __ptext95:
 25316                           	opt stack 0
 25317  004F92                     i2_getRTC:
 25318                           	opt stack 19
 25319                           
 25320                           ;RTC.c: 48: I2C_Master_Start();
 25321                           
 25322                           ;incstack = 0
 25323  004F92  ECD6  F02D         	call	i2_I2C_Master_Start	;wreg free
 25324                           
 25325                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 25326  004F96  0E00               	movlw	0
 25327  004F98  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25328  004F9A  0ED0               	movlw	208
 25329  004F9C  6E02               	movwf	i2I2C_Master_Write@d,c
 25330  004F9E  ECC1  F02D         	call	i2_I2C_Master_Write	;wreg free
 25331                           
 25332                           ;RTC.c: 50: I2C_Master_Write(0x00);
 25333  004FA2  0E00               	movlw	0
 25334  004FA4  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25335  004FA6  0E00               	movlw	0
 25336  004FA8  6E02               	movwf	i2I2C_Master_Write@d,c
 25337  004FAA  ECC1  F02D         	call	i2_I2C_Master_Write	;wreg free
 25338                           
 25339                           ;RTC.c: 51: I2C_Master_Stop();
 25340  004FAE  ECD2  F02D         	call	i2_I2C_Master_Stop	;wreg free
 25341                           
 25342                           ;RTC.c: 54: I2C_Master_Start();
 25343  004FB2  ECD6  F02D         	call	i2_I2C_Master_Start	;wreg free
 25344                           
 25345                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 25346  004FB6  0E00               	movlw	0
 25347  004FB8  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25348  004FBA  0ED1               	movlw	209
 25349  004FBC  6E02               	movwf	i2I2C_Master_Write@d,c
 25350  004FBE  ECC1  F02D         	call	i2_I2C_Master_Write	;wreg free
 25351                           
 25352                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 25353  004FC2  0E00               	movlw	0
 25354  004FC4  6E05               	movwf	i2getRTC@i+1,c
 25355  004FC6  0E00               	movlw	0
 25356  004FC8  6E04               	movwf	i2getRTC@i,c
 25357  004FCA                     i2l6933:
 25358  004FCA  BE05               	btfsc	i2getRTC@i+1,7,c
 25359  004FCC  D006               	goto	i2l6937
 25360  004FCE  5005               	movf	i2getRTC@i+1,w,c
 25361  004FD0  E111               	bnz	i2l6943
 25362  004FD2  0E06               	movlw	6
 25363  004FD4  5C04               	subwf	i2getRTC@i,w,c
 25364  004FD6  B0D8               	btfsc	status,0,c
 25365  004FD8  D00D               	goto	i2l6943
 25366  004FDA                     i2l6937:
 25367                           
 25368                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 25369  004FDA  0E1C               	movlw	low _time
 25370  004FDC  2404               	addwf	i2getRTC@i,w,c
 25371  004FDE  6ED9               	movwf	fsr2l,c
 25372  004FE0  0E01               	movlw	high _time
 25373  004FE2  2005               	addwfc	i2getRTC@i+1,w,c
 25374  004FE4  6EDA               	movwf	fsr2h,c
 25375  004FE6  0E01               	movlw	1
 25376  004FE8  EC07  F02D         	call	i2_I2C_Master_Read
 25377  004FEC  6EDF               	movwf	indf2,c
 25378  004FEE  4A04               	infsnz	i2getRTC@i,f,c
 25379  004FF0  2A05               	incf	i2getRTC@i+1,f,c
 25380  004FF2  D7EB               	goto	i2l6933
 25381  004FF4                     i2l6943:
 25382                           
 25383                           ;RTC.c: 58: }
 25384                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 25385  004FF4  0E00               	movlw	0
 25386  004FF6  EC07  F02D         	call	i2_I2C_Master_Read
 25387  004FFA  0101               	movlb	1	; () banked
 25388  004FFC  6F22               	movwf	(_time+6)& (0+255),b
 25389                           
 25390                           ;RTC.c: 60: I2C_Master_Stop();
 25391  004FFE  ECD2  F02D         	call	i2_I2C_Master_Stop	;wreg free
 25392  005002  0012               	return		;funcret
 25393  005004                     __end_ofi2_getRTC:
 25394                           	opt stack 0
 25395                           pclatu	equ	0xFFB
 25396                           pclath	equ	0xFFA
 25397                           tblptru	equ	0xFF8
 25398                           tblptrh	equ	0xFF7
 25399                           tblptrl	equ	0xFF6
 25400                           tablat	equ	0xFF5
 25401                           prodh	equ	0xFF4
 25402                           prodl	equ	0xFF3
 25403                           intcon	equ	0xFF2
 25404                           intcon2	equ	0xFF1
 25405                           intcon3	equ	0xFF0
 25406                           indf0	equ	0xFEF
 25407                           postinc0	equ	0xFEE
 25408                           fsr0h	equ	0xFEA
 25409                           fsr0l	equ	0xFE9
 25410                           wreg	equ	0xFE8
 25411                           postdec1	equ	0xFE5
 25412                           fsr1h	equ	0xFE2
 25413                           fsr1l	equ	0xFE1
 25414                           indf2	equ	0xFDF
 25415                           postinc2	equ	0xFDE
 25416                           postdec2	equ	0xFDD
 25417                           fsr2h	equ	0xFDA
 25418                           fsr2l	equ	0xFD9
 25419                           status	equ	0xFD8
 25420                           
 25421 ;; *************** function i2_I2C_Master_Write *****************
 25422 ;; Defined at:
 25423 ;;		line 49 in file "I2C.c"
 25424 ;; Parameters:    Size  Location     Type
 25425 ;;  d               2    1[COMRAM] unsigned int 
 25426 ;; Auto vars:     Size  Location     Type
 25427 ;;		None
 25428 ;; Return value:  Size  Location     Type
 25429 ;;                  1    wreg      void 
 25430 ;; Registers used:
 25431 ;;		wreg, status,2, status,0, cstack
 25432 ;; Tracked objects:
 25433 ;;		On entry : 0/0
 25434 ;;		On exit  : 0/0
 25435 ;;		Unchanged: 0/0
 25436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25437 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25440 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25441 ;;Total ram usage:        2 bytes
 25442 ;; Hardware stack levels used:    1
 25443 ;; Hardware stack levels required when called:    1
 25444 ;; This function calls:
 25445 ;;		i2_I2C_Master_Wait
 25446 ;; This function is called by:
 25447 ;;		i2_getRTC
 25448 ;; This function uses a non-reentrant model
 25449 ;;
 25450                           
 25451                           	psect	text96
 25452  005B82                     __ptext96:
 25453                           	opt stack 0
 25454  005B82                     i2_I2C_Master_Write:
 25455                           	opt stack 19
 25456                           
 25457                           ;I2C.c: 51: I2C_Master_Wait();
 25458                           
 25459                           ;incstack = 0
 25460  005B82  EC97  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25461                           
 25462                           ;I2C.c: 52: SSPBUF = d;
 25463  005B86  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 25464  005B8A  0012               	return		;funcret
 25465  005B8C                     __end_ofi2_I2C_Master_Write:
 25466                           	opt stack 0
 25467                           pclatu	equ	0xFFB
 25468                           pclath	equ	0xFFA
 25469                           tblptru	equ	0xFF8
 25470                           tblptrh	equ	0xFF7
 25471                           tblptrl	equ	0xFF6
 25472                           tablat	equ	0xFF5
 25473                           prodh	equ	0xFF4
 25474                           prodl	equ	0xFF3
 25475                           intcon	equ	0xFF2
 25476                           intcon2	equ	0xFF1
 25477                           intcon3	equ	0xFF0
 25478                           indf0	equ	0xFEF
 25479                           postinc0	equ	0xFEE
 25480                           fsr0h	equ	0xFEA
 25481                           fsr0l	equ	0xFE9
 25482                           wreg	equ	0xFE8
 25483                           postdec1	equ	0xFE5
 25484                           fsr1h	equ	0xFE2
 25485                           fsr1l	equ	0xFE1
 25486                           indf2	equ	0xFDF
 25487                           postinc2	equ	0xFDE
 25488                           postdec2	equ	0xFDD
 25489                           fsr2h	equ	0xFDA
 25490                           fsr2l	equ	0xFD9
 25491                           status	equ	0xFD8
 25492                           
 25493 ;; *************** function i2_I2C_Master_Stop *****************
 25494 ;; Defined at:
 25495 ;;		line 43 in file "I2C.c"
 25496 ;; Parameters:    Size  Location     Type
 25497 ;;		None
 25498 ;; Auto vars:     Size  Location     Type
 25499 ;;		None
 25500 ;; Return value:  Size  Location     Type
 25501 ;;                  1    wreg      void 
 25502 ;; Registers used:
 25503 ;;		wreg, status,2, status,0, cstack
 25504 ;; Tracked objects:
 25505 ;;		On entry : 0/0
 25506 ;;		On exit  : 0/0
 25507 ;;		Unchanged: 0/0
 25508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25513 ;;Total ram usage:        0 bytes
 25514 ;; Hardware stack levels used:    1
 25515 ;; Hardware stack levels required when called:    1
 25516 ;; This function calls:
 25517 ;;		i2_I2C_Master_Wait
 25518 ;; This function is called by:
 25519 ;;		i2_getRTC
 25520 ;; This function uses a non-reentrant model
 25521 ;;
 25522                           
 25523                           	psect	text97
 25524  005BA4                     __ptext97:
 25525                           	opt stack 0
 25526  005BA4                     i2_I2C_Master_Stop:
 25527                           	opt stack 19
 25528                           
 25529                           ;I2C.c: 45: I2C_Master_Wait();
 25530                           
 25531                           ;incstack = 0
 25532  005BA4  EC97  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25533                           
 25534                           ;I2C.c: 46: PEN = 1;
 25535  005BA8  84C5               	bsf	4037,2,c	;volatile
 25536  005BAA  0012               	return		;funcret
 25537  005BAC                     __end_ofi2_I2C_Master_Stop:
 25538                           	opt stack 0
 25539                           pclatu	equ	0xFFB
 25540                           pclath	equ	0xFFA
 25541                           tblptru	equ	0xFF8
 25542                           tblptrh	equ	0xFF7
 25543                           tblptrl	equ	0xFF6
 25544                           tablat	equ	0xFF5
 25545                           prodh	equ	0xFF4
 25546                           prodl	equ	0xFF3
 25547                           intcon	equ	0xFF2
 25548                           intcon2	equ	0xFF1
 25549                           intcon3	equ	0xFF0
 25550                           indf0	equ	0xFEF
 25551                           postinc0	equ	0xFEE
 25552                           fsr0h	equ	0xFEA
 25553                           fsr0l	equ	0xFE9
 25554                           wreg	equ	0xFE8
 25555                           postdec1	equ	0xFE5
 25556                           fsr1h	equ	0xFE2
 25557                           fsr1l	equ	0xFE1
 25558                           indf2	equ	0xFDF
 25559                           postinc2	equ	0xFDE
 25560                           postdec2	equ	0xFDD
 25561                           fsr2h	equ	0xFDA
 25562                           fsr2l	equ	0xFD9
 25563                           status	equ	0xFD8
 25564                           
 25565 ;; *************** function i2_I2C_Master_Start *****************
 25566 ;; Defined at:
 25567 ;;		line 31 in file "I2C.c"
 25568 ;; Parameters:    Size  Location     Type
 25569 ;;		None
 25570 ;; Auto vars:     Size  Location     Type
 25571 ;;		None
 25572 ;; Return value:  Size  Location     Type
 25573 ;;                  1    wreg      void 
 25574 ;; Registers used:
 25575 ;;		wreg, status,2, status,0, cstack
 25576 ;; Tracked objects:
 25577 ;;		On entry : 0/0
 25578 ;;		On exit  : 0/0
 25579 ;;		Unchanged: 0/0
 25580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25585 ;;Total ram usage:        0 bytes
 25586 ;; Hardware stack levels used:    1
 25587 ;; Hardware stack levels required when called:    1
 25588 ;; This function calls:
 25589 ;;		i2_I2C_Master_Wait
 25590 ;; This function is called by:
 25591 ;;		i2_getRTC
 25592 ;; This function uses a non-reentrant model
 25593 ;;
 25594                           
 25595                           	psect	text98
 25596  005BAC                     __ptext98:
 25597                           	opt stack 0
 25598  005BAC                     i2_I2C_Master_Start:
 25599                           	opt stack 19
 25600                           
 25601                           ;I2C.c: 33: I2C_Master_Wait();
 25602                           
 25603                           ;incstack = 0
 25604  005BAC  EC97  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25605                           
 25606                           ;I2C.c: 34: SEN = 1;
 25607  005BB0  80C5               	bsf	4037,0,c	;volatile
 25608  005BB2  0012               	return		;funcret
 25609  005BB4                     __end_ofi2_I2C_Master_Start:
 25610                           	opt stack 0
 25611                           pclatu	equ	0xFFB
 25612                           pclath	equ	0xFFA
 25613                           tblptru	equ	0xFF8
 25614                           tblptrh	equ	0xFF7
 25615                           tblptrl	equ	0xFF6
 25616                           tablat	equ	0xFF5
 25617                           prodh	equ	0xFF4
 25618                           prodl	equ	0xFF3
 25619                           intcon	equ	0xFF2
 25620                           intcon2	equ	0xFF1
 25621                           intcon3	equ	0xFF0
 25622                           indf0	equ	0xFEF
 25623                           postinc0	equ	0xFEE
 25624                           fsr0h	equ	0xFEA
 25625                           fsr0l	equ	0xFE9
 25626                           wreg	equ	0xFE8
 25627                           postdec1	equ	0xFE5
 25628                           fsr1h	equ	0xFE2
 25629                           fsr1l	equ	0xFE1
 25630                           indf2	equ	0xFDF
 25631                           postinc2	equ	0xFDE
 25632                           postdec2	equ	0xFDD
 25633                           fsr2h	equ	0xFDA
 25634                           fsr2l	equ	0xFD9
 25635                           status	equ	0xFD8
 25636                           
 25637 ;; *************** function i2_I2C_Master_Read *****************
 25638 ;; Defined at:
 25639 ;;		line 55 in file "I2C.c"
 25640 ;; Parameters:    Size  Location     Type
 25641 ;;  a               1    wreg     unsigned char 
 25642 ;; Auto vars:     Size  Location     Type
 25643 ;;  a               1    1[COMRAM] unsigned char 
 25644 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 25645 ;; Return value:  Size  Location     Type
 25646 ;;                  1    wreg      unsigned char 
 25647 ;; Registers used:
 25648 ;;		wreg, status,2, status,0, cstack
 25649 ;; Tracked objects:
 25650 ;;		On entry : 0/0
 25651 ;;		On exit  : 0/0
 25652 ;;		Unchanged: 0/0
 25653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25655 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25657 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25658 ;;Total ram usage:        2 bytes
 25659 ;; Hardware stack levels used:    1
 25660 ;; Hardware stack levels required when called:    1
 25661 ;; This function calls:
 25662 ;;		i2_I2C_Master_Wait
 25663 ;; This function is called by:
 25664 ;;		i2_getRTC
 25665 ;; This function uses a non-reentrant model
 25666 ;;
 25667                           
 25668                           	psect	text99
 25669  005A0E                     __ptext99:
 25670                           	opt stack 0
 25671  005A0E                     i2_I2C_Master_Read:
 25672                           	opt stack 19
 25673                           
 25674                           ;incstack = 0
 25675                           ;i2I2C_Master_Read@a stored from wreg
 25676  005A0E  6E02               	movwf	i2I2C_Master_Read@a,c
 25677                           
 25678                           ;I2C.c: 57: unsigned char temp;
 25679                           ;I2C.c: 58: I2C_Master_Wait();
 25680  005A10  EC97  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25681                           
 25682                           ;I2C.c: 59: RCEN = 1;
 25683  005A14  86C5               	bsf	4037,3,c	;volatile
 25684                           
 25685                           ;I2C.c: 60: I2C_Master_Wait();
 25686  005A16  EC97  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25687                           
 25688                           ;I2C.c: 61: temp = SSPBUF;
 25689  005A1A  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 25690                           
 25691                           ;I2C.c: 62: I2C_Master_Wait();
 25692  005A1E  EC97  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25693                           
 25694                           ;I2C.c: 63: ACKDT = (a)?0:1;
 25695  005A22  5002               	movf	i2I2C_Master_Read@a,w,c
 25696  005A24  A4D8               	btfss	status,2,c
 25697  005A26  D002               	goto	i2u499_40
 25698  005A28  8AC5               	bsf	4037,5,c	;volatile
 25699  005A2A  D001               	goto	i2l6601
 25700  005A2C                     i2u499_40:
 25701  005A2C  9AC5               	bcf	4037,5,c	;volatile
 25702  005A2E                     i2l6601:
 25703                           
 25704                           ;I2C.c: 64: ACKEN = 1;
 25705  005A2E  88C5               	bsf	4037,4,c	;volatile
 25706                           
 25707                           ;I2C.c: 65: return temp;
 25708  005A30  5003               	movf	i2I2C_Master_Read@temp,w,c
 25709  005A32  0012               	return	
 25710  005A34                     __end_ofi2_I2C_Master_Read:
 25711                           	opt stack 0
 25712                           pclatu	equ	0xFFB
 25713                           pclath	equ	0xFFA
 25714                           tblptru	equ	0xFF8
 25715                           tblptrh	equ	0xFF7
 25716                           tblptrl	equ	0xFF6
 25717                           tablat	equ	0xFF5
 25718                           prodh	equ	0xFF4
 25719                           prodl	equ	0xFF3
 25720                           intcon	equ	0xFF2
 25721                           intcon2	equ	0xFF1
 25722                           intcon3	equ	0xFF0
 25723                           indf0	equ	0xFEF
 25724                           postinc0	equ	0xFEE
 25725                           fsr0h	equ	0xFEA
 25726                           fsr0l	equ	0xFE9
 25727                           wreg	equ	0xFE8
 25728                           postdec1	equ	0xFE5
 25729                           fsr1h	equ	0xFE2
 25730                           fsr1l	equ	0xFE1
 25731                           indf2	equ	0xFDF
 25732                           postinc2	equ	0xFDE
 25733                           postdec2	equ	0xFDD
 25734                           fsr2h	equ	0xFDA
 25735                           fsr2l	equ	0xFD9
 25736                           status	equ	0xFD8
 25737                           
 25738 ;; *************** function i2_I2C_Master_Wait *****************
 25739 ;; Defined at:
 25740 ;;		line 26 in file "I2C.c"
 25741 ;; Parameters:    Size  Location     Type
 25742 ;;		None
 25743 ;; Auto vars:     Size  Location     Type
 25744 ;;		None
 25745 ;; Return value:  Size  Location     Type
 25746 ;;                  1    wreg      void 
 25747 ;; Registers used:
 25748 ;;		wreg, status,2, status,0
 25749 ;; Tracked objects:
 25750 ;;		On entry : 0/0
 25751 ;;		On exit  : 0/0
 25752 ;;		Unchanged: 0/0
 25753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25756 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25757 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25758 ;;Total ram usage:        1 bytes
 25759 ;; Hardware stack levels used:    1
 25760 ;; This function calls:
 25761 ;;		Nothing
 25762 ;; This function is called by:
 25763 ;;		i2_I2C_Master_Start
 25764 ;;		i2_I2C_Master_Stop
 25765 ;;		i2_I2C_Master_Write
 25766 ;;		i2_I2C_Master_Read
 25767 ;; This function uses a non-reentrant model
 25768 ;;
 25769                           
 25770                           	psect	text100
 25771  005B2E                     __ptext100:
 25772                           	opt stack 0
 25773  005B2E                     i2_I2C_Master_Wait:
 25774                           	opt stack 19
 25775  005B2E                     i2l71:
 25776  005B2E  B4C7               	btfsc	4039,2,c	;volatile
 25777  005B30  D7FE               	goto	i2l71
 25778  005B32  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 25779  005B36  0E1F               	movlw	31
 25780  005B38  1601               	andwf	??i2_I2C_Master_Wait,f,c
 25781  005B3A  B4D8               	btfsc	status,2,c
 25782  005B3C  0012               	return	
 25783  005B3E  D7F7               	goto	i2l71
 25784  005B40                     __end_ofi2_I2C_Master_Wait:
 25785                           	opt stack 0
 25786                           pclatu	equ	0xFFB
 25787                           pclath	equ	0xFFA
 25788                           tblptru	equ	0xFF8
 25789                           tblptrh	equ	0xFF7
 25790                           tblptrl	equ	0xFF6
 25791                           tablat	equ	0xFF5
 25792                           prodh	equ	0xFF4
 25793                           prodl	equ	0xFF3
 25794                           intcon	equ	0xFF2
 25795                           intcon2	equ	0xFF1
 25796                           intcon3	equ	0xFF0
 25797                           indf0	equ	0xFEF
 25798                           postinc0	equ	0xFEE
 25799                           fsr0h	equ	0xFEA
 25800                           fsr0l	equ	0xFE9
 25801                           wreg	equ	0xFE8
 25802                           postdec1	equ	0xFE5
 25803                           fsr1h	equ	0xFE2
 25804                           fsr1l	equ	0xFE1
 25805                           indf2	equ	0xFDF
 25806                           postinc2	equ	0xFDE
 25807                           postdec2	equ	0xFDD
 25808                           fsr2h	equ	0xFDA
 25809                           fsr2l	equ	0xFD9
 25810                           status	equ	0xFD8
 25811                           pclatu	equ	0xFFB
 25812                           pclath	equ	0xFFA
 25813                           tblptru	equ	0xFF8
 25814                           tblptrh	equ	0xFF7
 25815                           tblptrl	equ	0xFF6
 25816                           tablat	equ	0xFF5
 25817                           prodh	equ	0xFF4
 25818                           prodl	equ	0xFF3
 25819                           intcon	equ	0xFF2
 25820                           intcon2	equ	0xFF1
 25821                           intcon3	equ	0xFF0
 25822                           indf0	equ	0xFEF
 25823                           postinc0	equ	0xFEE
 25824                           fsr0h	equ	0xFEA
 25825                           fsr0l	equ	0xFE9
 25826                           wreg	equ	0xFE8
 25827                           postdec1	equ	0xFE5
 25828                           fsr1h	equ	0xFE2
 25829                           fsr1l	equ	0xFE1
 25830                           indf2	equ	0xFDF
 25831                           postinc2	equ	0xFDE
 25832                           postdec2	equ	0xFDD
 25833                           fsr2h	equ	0xFDA
 25834                           fsr2l	equ	0xFD9
 25835                           status	equ	0xFD8
 25836                           
 25837                           	psect	rparam
 25838  0000                     pclatu	equ	0xFFB
 25839                           pclath	equ	0xFFA
 25840                           tblptru	equ	0xFF8
 25841                           tblptrh	equ	0xFF7
 25842                           tblptrl	equ	0xFF6
 25843                           tablat	equ	0xFF5
 25844                           prodh	equ	0xFF4
 25845                           prodl	equ	0xFF3
 25846                           intcon	equ	0xFF2
 25847                           intcon2	equ	0xFF1
 25848                           intcon3	equ	0xFF0
 25849                           indf0	equ	0xFEF
 25850                           postinc0	equ	0xFEE
 25851                           fsr0h	equ	0xFEA
 25852                           fsr0l	equ	0xFE9
 25853                           wreg	equ	0xFE8
 25854                           postdec1	equ	0xFE5
 25855                           fsr1h	equ	0xFE2
 25856                           fsr1l	equ	0xFE1
 25857                           indf2	equ	0xFDF
 25858                           postinc2	equ	0xFDE
 25859                           postdec2	equ	0xFDD
 25860                           fsr2h	equ	0xFDA
 25861                           fsr2l	equ	0xFD9
 25862                           status	equ	0xFD8
 25863                           
 25864                           	psect	temp
 25865  00007E                     btemp:
 25866                           	opt stack 0
 25867  00007E                     	ds	1
 25868  0000                     int$flags	set	btemp
 25869                           pclatu	equ	0xFFB
 25870                           pclath	equ	0xFFA
 25871                           tblptru	equ	0xFF8
 25872                           tblptrh	equ	0xFF7
 25873                           tblptrl	equ	0xFF6
 25874                           tablat	equ	0xFF5
 25875                           prodh	equ	0xFF4
 25876                           prodl	equ	0xFF3
 25877                           intcon	equ	0xFF2
 25878                           intcon2	equ	0xFF1
 25879                           intcon3	equ	0xFF0
 25880                           indf0	equ	0xFEF
 25881                           postinc0	equ	0xFEE
 25882                           fsr0h	equ	0xFEA
 25883                           fsr0l	equ	0xFE9
 25884                           wreg	equ	0xFE8
 25885                           postdec1	equ	0xFE5
 25886                           fsr1h	equ	0xFE2
 25887                           fsr1l	equ	0xFE1
 25888                           indf2	equ	0xFDF
 25889                           postinc2	equ	0xFDE
 25890                           postdec2	equ	0xFDD
 25891                           fsr2h	equ	0xFDA
 25892                           fsr2l	equ	0xFD9
 25893                           status	equ	0xFD8


Data Sizes:
    Strings     1349
    Constant    27
    Data        8
    BSS         148
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     88     125
    BANK0           128     90     128
    BANK1           256      0      81
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_130(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_129(CODE[18]), STR_128(CODE[18]), STR_127(CODE[17]), STR_126(CODE[17]), 
		 -> STR_125(CODE[15]), STR_124(CODE[15]), STR_123(CODE[18]), STR_122(CODE[15]), 
		 -> STR_121(CODE[18]), STR_120(CODE[18]), STR_119(CODE[17]), STR_118(CODE[17]), 
		 -> STR_117(CODE[17]), STR_116(CODE[17]), STR_115(CODE[17]), STR_114(CODE[17]), 
		 -> STR_113(CODE[17]), STR_112(CODE[17]), STR_111(CODE[18]), STR_110(CODE[17]), 
		 -> STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[15]), STR_106(CODE[17]), 
		 -> STR_105(CODE[17]), STR_104(CODE[17]), STR_103(CODE[16]), STR_102(CODE[17]), 
		 -> STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), 
		 -> STR_97(CODE[17]), STR_96(CODE[15]), STR_95(CODE[11]), STR_94(CODE[17]), 
		 -> STR_93(CODE[11]), STR_92(CODE[17]), STR_91(CODE[14]), STR_90(CODE[15]), 
		 -> STR_89(CODE[14]), STR_88(CODE[10]), STR_87(CODE[9]), STR_86(CODE[9]), 
		 -> STR_85(CODE[10]), STR_84(CODE[10]), STR_83(CODE[16]), STR_82(CODE[15]), 
		 -> STR_81(CODE[3]), STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), 
		 -> STR_77(CODE[8]), STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), 
		 -> STR_73(CODE[14]), STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), 
		 -> STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), 
		 -> STR_65(CODE[16]), STR_64(CODE[16]), STR_63(CODE[24]), STR_50(CODE[17]), 
		 -> STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), 
		 -> STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), 
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), 
		 -> STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), 
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), 
		 -> STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), 
		 -> STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), 
		 -> STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), 
		 -> STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->___ftge
    _readCOND->_readADC
    ___ftge->___awtoft
    ___awtoft->___awdiv
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _initEEPROM->_EEPROM_write
    _EEPROM_write->_printf
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PortTestPusher->_printf
    _PortTestDC->_printf
    _PlatformTest->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  241425
                    _I2C_Master_Init
                               _Test
                                 _UI
                         _initEEPROM
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   28647
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   18234
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                  34    34      0    5020
                                             27 BANK0     34    34      0
                            ___awdiv
                           ___awtoft
                             ___ftge
                           _delay_ms
                           _readCOND
 ---------------------------------------------------------------------------------
 (3) _readCOND                                             4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     520
                                             18 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2236
                                             14 BANK0      4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1953
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5393
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11670
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23480
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22566
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initEEPROM                                           0     0      0   10923
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10923
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   47352
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13467
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    9099
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    9099
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1196
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  118240
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                       _PlatformTest
                         _PortTestDC
                     _PortTestPusher
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    9211
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9168
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    9099
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15735
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    9099
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestPusher                                       1     1      0    9099
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    9099
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PlatformTest                                        12    12      0    9372
                                             43 BANK0     12    12      0
                            _lcdInst
                             _printf
                            _readADC
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19885
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                        _stopSignals
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5393
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5393
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                         10    10      0    9374
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8964
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   83876
                                             72 COMRAM    16    16      0
                     _printSortTimer
                     _updateArmState
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _updateArmState                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      31    31      0    4788
                                             41 COMRAM    31    31      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
       _updateServoPosition
     _PlatformTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _stopSignals
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTestPusher
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initEEPROM
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       ___awdiv
         ___awmod (ARG)
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftge
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
       _delay_ms
       _readCOND
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateArmState
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      51       7       31.6%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     58      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14E      34        0.0%
DATA                 0      0     14E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Apr 11 15:36:43 2017

                                    _i 013D                     i2_I2C_Master_Start 5BAC  
                   i2_I2C_Master_Write 5B82                                     l71 5B1A  
                                   _ID 16CC                       _f_panning_to_bin 0067  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
               __end_of_updateArmState 559A                                    ID@i 00AA  
                                  ID@j 00B9                                    ID@n 00BB  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l193 0102  
                                  l185 00E2                                    l188 00E6  
                                  l508 4868                                    l627 2E5A  
                                  l811 140C                                    l803 1332  
                                  l821 153A                                    l805 1388  
                                  l814 1446                                    l806 136C  
                                  l840 15D4                                    l832 1672  
                                  l824 14CE                                    l841 15E8  
                                  l833 159E                                    l930 4DF2  
                                  l842 15FC                                    l826 14FA  
                                  l843 1610                                    l860 191C  
                                  l844 1626                                    l836 1670  
                                  l854 1794                                    l838 15C2  
                                  l863 197C                                    l856 1802  
                                  l848 16BE                                    l881 1BEE  
                                  l793 1268                                    l877 1B3C  
                                  l878 1B56                           __CFG_CPB$OFF 000000  
                                  _PR2 000FCB                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 3D1E                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _arm 435E  
                                  _log 00EE                                    _sel 00FD  
                                  _var 0147                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 3EE4                    _log_count_can_w_lab 013F  
      __end_of_change_state_to_menu_11 57CA        __end_of_change_state_to_menu_12 560A  
      __end_of_change_state_to_menu_22 55D2        __end_of_change_state_to_menu_23 579A  
         _f_can_coming_to_distribution 0133                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 58BA        __end_of_change_state_to_logs_12 588A  
      __end_of_change_state_to_logs_22 585A        __end_of_change_state_to_logs_23 5916  
      __end_of_change_state_to_logs_33 582A        __end_of_change_state_to_logs_34 57FA  
                                 ??_ID 009B                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1301 0944                                   l1141 5AE6  
                                 l1150 4012                                   l1311 0A54  
                                 l1312 0AA2                                   l1304 0948  
                                 l1128 447E                                   l1313 0B08  
                                 l1402 2A64                                   l1314 0B56  
                                 l1243 429E                                   l1404 2A92  
                                 l1308 09EE                                   l1350 104A  
                                 l1246 42BE                                   l1433 4D82  
                                 l1450 3E20                                   l1426 4D72  
                                 l1338 0EB0                                   l1266 4684  
                                 l1355 1120                                   l1275 2B04  
                                 l1269 4688                                   l1374 52AE  
                                 l1470 444E                                   l1278 2B08  
                                 l1527 1E42                                   l1455 3E6C  
                                 l1471 4410                                   l1456 3E86  
                                 l1368 529E                                   l1389 2A98  
                                 l1493 5252                                   ?_arm 0001  
                                 l1398 2A0C                                   l1487 5242  
                                 l1479 4448                                   l1921 4ABE  
                                 l1791 4224                                   l1974 4F16  
                                 l1984 5194                                   l8001 16B2  
                                 l7131 2E82                                   l7123 2DD8  
                                 l8003 16C0                                   l7141 2F18  
                                 l7133 2EA0                                   l7151 2FAE  
                                 l7143 2F36                                   l7135 2EBE  
                                 l8111 1A84                                   l8103 1A4E  
                                 l8031 1750                                   l7145 2F54  
                                 l7137 2EDC                                   l7129 2E64  
                                 l8113 1A8C                                   l7305 4ADE  
                                 l6515 58E0                                   l7147 2F72  
                                 l7139 2EFA                                   l7155 2FCC  
                                 l7315 4B6A                                   l6533 598E  
                                 l6701 1C6E                                   l9101 3DA8  
                                 l7149 2F90                                   l7157 302A  
                                 l8141 1B10                                   l8125 1AC8  
                                 l8117 1AA0                                   l7421 4F6E  
                                 l7405 4F2E                                   l7309 4AF4  
                                 l6551 4ED2                                   l8311 2CEE  
                                 l7351 44EA                                   l8071 18D0  
                                 _ADIE 007CEE                                   l6561 4F08  
                                 l6553 4ED8                                   l6721 1D2E  
                                 l7505 4952                                   l8145 1B26  
                                 l8137 1B00                                   l8129 1AD8  
                                 l8049 17BE                                   l8073 18DA  
                                 l7425 4F86                                   l7409 4F44  
                                 l6571 515C                                   l6803 1F96  
                                 l6731 1DA6                                   l6491 5956  
                                 l8331 2D66                                   l8323 2D54  
                                 l7443 4972                                   l7363 4522  
                                 l7355 44F4                                   l8083 1928  
                                 l6549 4EC6                                   l6573 5162  
                                 l6813 2008                                   l6733 1DBE  
                                 l6717 1D1C                                   l6709 1CEA  
                                 l6493 5968                                   l9133 3E4C  
                                 l9125 3E22                                   l9109 3DEE  
                                 l8501 0C88                                   l6821 5620  
                                 l9301 01FC                                   l7373 599E  
                                 l6807 1FAA                                   l6727 1D94  
                                 l6719 1D28                                   l6743 1E08  
                                 l6815 2014                                   l9135 3E56  
                                 l9127 3E32                                   l8335 2D9C  
                                 l8319 2D1E                                   l8263 2B58  
                                 l7455 49A6                                   l7471 49F6  
                                 l6831 4CFE                                   l7367 452C  
                                 l7359 450C                                   l6911 4A52  
                                 l8183 455C                                   l6577 5186  
                                 l6569 5150                                   l6809 1FB0  
                                 l6761 1E9A                                   l6737 1DEA  
                                 l6729 1DA0                                   l9145 3E88  
                                 l8601 0E8E                                   l8521 0CFC  
                                 l8513 0CDA                                   l8505 0CA0  
                                 l8281 2C10                                   l7457 49B2  
                                 l7449 4988                                   l9401 0556  
                                 l6921 4AAC                                   l6913 4A58  
                                 l8185 4576                                   l8193 45C4  
                                 l7377 59B4                                   l8169 1BAC  
                                 l8177 1BF0                                   l6755 1E7A  
                                 l6739 1E02                                   l6691 1C30  
                                 l9147 3E98                                   l9155 3EDE  
                                 l8531 0D24                                   l8523 0D02  
                                 l7475 4A0A                                   l7467 49E8  
                                 l7459 49B8                                   l6827 4CE8  
                                 l6819 5614                                   l9323 0270  
                                 l9315 024E                                   l8187 4590  
                                 l8195 45F2                                   l6773 1ED6  
                                 l6685 1C0A                                   l6861 4E0C  
                                 l8605 0E98                                   l8517 0CE4  
                                 l8461 0BD2                                   l8381 09C2  
                                 l8293 2C60                                   l9181 4BF0  
                                 l9173 4BBA                                   l9165 4B96  
                                 l6837 4D1E                                   l9405 0560  
                                 l9333 028C                                   l6909 4A42  
                                 l8189 45AA                                   l7901 1426  
                                 l7805 1226                                   l6791 1F54  
                                 l6783 1F30                                   l6759 1E94  
                                 l6695 1C3A                                   l6855 4DDA  
                                 l8623 0F02                                   l8543 0D68  
                                 l8527 0D0C                                   l8471 0BFA  
                                 l8375 09B2                                   l9175 4BC6  
                                 l9319 0258                                   l9271 016E  
                                 l9263 0144                                   l9255 0128  
                                 l7591 4C74                                   l6871 4166  
                                 l7487 54F6                                   l7495 48CE  
                                 l7903 1430                                   l7831 12AC  
                                 l7815 1270                                   l6785 1F3A  
                                 l6689 1C1E                                   l8713 10BC  
                                 l8705 109A                                   l8633 0F2A  
                                 l8553 0D90                                   l8465 0BDC  
                                 l8385 09DA                                   l8377 09B8  
                                 l8801 4416                                   l9177 4BCC  
                                 l9185 4BFE                                   l9169 4BA6  
                                 l9513 07C0                                   l9433 0648  
                                 l9409 0578                                   l9361 036E  
                                 l9353 02F6                                   l9337 02A4  
                                 l9329 0282                                   l9249 00FE  
                                 l7913 1462                                   l6779 1EF8  
                                 l8723 10E4                                   l8715 10C2  
                                 l8627 0F1A                                   l8619 0EF8  
                                 l8547 0D80                                   l8539 0D5E  
                                 l8491 0C60                                   l8475 0C04  
                                 l8803 4430                                   l8299 2CA2  
                                 l9531 080C                                   l9523 07EA  
                                 l9451 0694                                   l9443 0672  
                                 l9371 0404                                   l9363 038C  
                                 l9355 0314                                   l9291 01D6  
                                 l9267 015C                                   l9259 013A  
                                 l7587 4C5E                                   l6883 41D8  
                                 l6875 417A                                   l7499 490E  
                                 l7923 14A8                                   l6797 1F70  
                                 l8741 1140                                   l8709 10A4  
                                 l8653 0F9E                                   l8645 0F7C  
                                 l8637 0F42                                   l8629 0F20  
                                 l8573 0E04                                   l8565 0DE2  
                                 l8557 0DA8                                   l8549 0D86  
                                 l8469 0BF4                                   l8805 443A  
                                 l9189 4C12                                   l9517 07D8  
                                 l9509 07B6                                   l9437 0660  
                                 l9429 063E                                   l9373 0422  
                                 l9365 03AA                                   l9357 0332  
                                 l9381 047C                                   l9285 01C6  
                                 l7597 4CA0                                   l6893 422E  
                                 l6885 4208                                   l6877 4188  
                                 l7933 14EE                                   l7925 14B2  
                                 l7917 1488                                   l7853 131C  
                                 l6799 1F7C                                   l8911 28A6  
                                 l8751 1168                                   l8719 10CC  
                                 l8671 1000                                   l8663 0FC6  
                                 l8655 0FA4                                   l8591 0E66  
                                 l8583 0E2C                                   l8575 0E0A  
                                 l8495 0C78                                   l8487 0C56  
                                 l8479 0C1C                                   l9527 07F4  
                                 l9447 067C                                   l9391 052C  
                                 l9375 0440                                   l9367 03C8  
                                 l9359 0350                                   l9383 04E0  
                                 l9295 01EE                                   l9287 01CC  
                                 l6887 4216                                   l6879 41B8  
                                 l7863 134C                                   l8745 114A  
                                 l8729 110A                                   l8681 1028  
                                 l8649 0F86                                   l8569 0DEC  
                                 l8497 0C7E                                   l9553 0874  
                                 l9473 0704                                   l9377 045E  
                                 l9369 03E6                                   l7953 15AA  
                                 l7929 14D2                                   l7865 1356  
                                 l8755 1172                                   l8739 113A  
                                 l8675 100A                                   l8659 0FAE  
                                 l8595 0E70                                   l8579 0E14  
                                 l9571 08C0                                   l9563 089E  
                                 l9491 0750                                   l9483 072E  
                                 l9395 0544                                   l9387 0522  
                                 l6899 424A                                   l7891 13F6  
                                 l8941 2998                                   l8909 28A0  
                                 l8749 1162                                   l8685 1032  
                                 l9901 42FA                                   l9557 088C  
                                 l9549 086A                                   l9477 071C  
                                 l9469 06FA                                   l7981 1632  
                                 l8855 4DAA                                   l8759 118A  
                                 l8679 1022                                   l8599 0E88  
                                 l9567 08A8                                   l9487 0738  
                                 l9575 08CC                                   l7983 1668  
                                 l8953 29E2                                   l8929 2956  
                                 l8793 43F8                                   l9905 4300  
                                 l8971 2A4E                                   l8947 29B8  
                                 l8891 27F0                                   l8795 4402  
                                 l9907 4352                                   l9827 3F30  
                                 l8957 29F6                                   l8949 29CE  
                                 l8789 43D2                                   l9853 3FCC  
                                 l9829 3F44                                   l7989 167A  
                                 l8967 2A3A                                   STR_1 FB53  
                                 STR_2 FF4A                                   STR_3 FB41  
                                 STR_4 FE5E                                   l9891 42DC  
                                 l9883 42C4                                   l9867 425A  
                                 STR_5 FB41                                   STR_6 FDDA  
                                 l9893 42E2                                   l9885 42CA  
                                 STR_7 FFC4                                   STR_8 FFDB  
                                 l9895 42E8                                   l9887 42D0  
                                 STR_9 FFCB                                   l9897 42EE  
                                 l9889 42D6                                   l9899 42F4  
              ??i2_updateServoPosition 0005                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u5100 53F4                                   u5110 548A  
                                 u5111 5486                                   u5120 548C  
                                 u5210 1DE0                                   u5217 1DD6  
                                 u5170 1D68                                   u5090 53F2  
                                 _PEIE 007F96                                   u7110 2B9A  
                                 u7030 1BB8                                   u8000 28EA  
                                 u7120 2B9C                                   u5177 1D5E  
                                 u7050 1BEE                                   u8100 29DE  
                                 _RCEN 007E2B                                   u8101 29DA  
                                 u7150 2D42                                   u6350 1232  
                                 u8040 2980                                   u7048 1BBC  
                                 u7250 09EE                                   u6610 150C  
                                 u6370 1268                                   u7180 2D8A  
                                 u5900 2E5A                                   u7270 0AA2  
                                 u7158 2D46                                   u6630 1532  
                                 i2l71 5B2E                                   u8231 3E16  
                                 u8240 3E18                                   u6800 1852  
                                 u6640 1534                                   u6368 1236  
                                 u8090 29C6                                   u8058 2984  
                                 u7290 0B56                                   u4890 58DE  
                                 u6810 18A4                                   u7188 2D8E  
                                 u5860 543E                                   u6820 18A6  
                                 u6628 1510                                   u5870 5440  
                                 u8281 3E42                                   u8290 3E44  
                                 u6850 191A                                   u7820 4426  
                                 u9340 4012                                   u5885 51CE  
                                 u7830 4428                                   u6790 1850  
                                 u6880 19FC                                   u7770 43EE  
                                 u6890 19FE                                   u7780 43F0  
                                 u7960 2832                                   u7970 2834  
                                 u9707 133E                                   u9717 1370  
                                 u7990 28E8                                   u9807 1554  
                                 u9727 137A                                   u9817 158C  
                                 u9737 1398                                   u9907 1614  
                                 u9827 15C6                                   u9747 13C2  
                                 u9917 161E                                   u9837 15CE  
                                 u9757 1410                                   u9677 11B6  
                                 u9927 162A                                   u9847 15D8  
                                 u9767 1418                                   u9687 12DA  
                                 u9937 1694                                   u9857 15E2  
                                 u9777 144A                                   u9697 1336  
                                 u9947 5694                                   u9867 15EC  
                                 u9787 1454                                   u9957 4F4C  
                                 u9877 15F6                                   u9797 1470  
                                 u9967 16E6                                   u9887 1600  
                                 u9977 17A4                                   u9897 1608  
                                 u9987 198C                                   _RSEN 007E29  
                                 u9997 1B40                            _stopSignals 5ABA  
                                 _Test 4258                                   _back 0061  
                                 _main 47C6                                   _down 0063  
                         ___ftpack@arg 0080                                   _keys FA9F  
                         ___ftpack@exp 0083                                   _time 011C  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 5A58  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 0069  
                      __end_ofi2_putch 5B6C                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 332E  
                          i2_lcdNibble 52B6                        __end_of_Loading 16CC  
                 __end_of_actuatorTest 1192                                  ??_arm 00AB  
                                ID@res 009D             i2updateServoPosition@timer 0003  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                                  l10101 4864  
                                l10105 486A                                  l10081 4826  
                                l10091 4846                                  l10087 483A  
                                l10079 4810                                  l10089 4840  
                                l10099 485E                   __end_of_EEPROM_write 4544  
                          ID@time_1146 00A7                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 4A14                        ?_updateArmState 0001  
                                _EEADR 000FA9                                  STR_10 FFE7  
                                STR_11 FFEB                                  STR_12 FFFB  
                                STR_20 FFEF                                  STR_13 FFDF  
                                STR_21 FABA                                  STR_14 FFD7  
                                STR_22 FF9B                                  STR_30 FDEB  
                                STR_15 FFD3                                  STR_23 FF3C  
                                STR_31 FDC9                                  STR_16 FFE3  
                                STR_24 FD30                                  STR_32 FD0E  
                                STR_40 FCCA                                  STR_17 FFF3  
                                STR_25 FE0D                                  STR_33 FD1F  
                                STR_41 FCB9                                  STR_18 FFF7  
                                STR_34 FDB8                                  STR_50 FD96  
                                STR_42 FD74                                  STR_26 FD41  
                                STR_43 FD74                                  STR_35 FDB8  
                                STR_51 FFDB                                  STR_19 FFCF  
                                STR_27 FDFC                                  STR_52 FFCB  
                                STR_60 FFF3                                  STR_28 FD52  
                                STR_36 FCFD                                  STR_44 FCDB  
                      __end_of___awmod 4C1C                                  STR_45 FCCA  
                                STR_37 FD0E                                  STR_53 FFE7  
                                STR_61 FFF7                                  STR_29 FE0A  
                                STR_62 FFCF                                  STR_54 FFEB  
                                STR_70 FEF5                                  STR_38 FDA7  
                                STR_46 FD85                                  STR_47 FD85  
                                STR_55 FFFB                                  STR_63 FABA  
                                STR_71 FF2E                                  STR_39 FD63  
                                STR_56 FFDF                                  STR_80 FE7D  
                                STR_64 FE3E                                  STR_48 FCEC  
                                STR_72 FC42                                  STR_49 FCDB  
                                STR_57 FFD7                                  STR_81 FE0A  
                                STR_73 FF12                                  STR_65 FE4E  
                                STR_58 FFD3                                  STR_74 FF65  
                                STR_90 FEE6                                  STR_82 FEAA  
                                STR_66 FAD2                                  STR_59 FFE3  
                                STR_67 FFBD                                  STR_91 FF04  
                                STR_75 FED7                                  STR_83 FE1E  
                                STR_84 FF87                                  STR_76 FF20  
                                STR_68 FC75                                  STR_92 FC53  
                                STR_85 FF87                                  STR_77 FFAE  
                                STR_93 FF71                                  STR_69 FC86  
                                STR_78 FF2E                                  STR_86 FFA5  
                                STR_94 FC64                                  STR_87 FFA5  
                                STR_95 FF7C                                  STR_79 FF58  
                                STR_88 FF91                                  STR_96 FEC8  
                                STR_89 FF2E                                  STR_97 FBBA  
                                STR_98 FBA9                                  STR_99 FB87  
         i2updateServoPosition@my_time 0007                                  ?_sort 0001  
                      __end_of___lldiv 4AD0           i2updateServoPosition@time_us 0001  
                                u10007 1B4A                                  u10017 1B70  
                                u10107 014C                                  u10027 59AA  
                                u10117 0188                                  u10037 549C  
                                u11007 20DA                                  u10207 0650  
                                u10127 01DE                                  u10047 54D0  
                                u11017 210E                                  u10217 0684  
                                u10137 020A                                  u10057 44A0  
                                u11107 2324                                  u11027 2140  
                                u10307 08B0                                  u10227 06AE  
                                u10147 0260                                  u10067 44FC  
                                u11117 2356                                  u11037 218C  
                                u10317 4268                                  u10237 070C  
                                u10157 0294                                  u10077 4534  
                                u11207 595E                                  u11127 23A2  
                                u11047 21C0                                  u10407 2C96  
                                u10327 2AB4                                  u10247 0740  
                                u10167 02BE                                  u10087 002A  
                                _T0CON 000FD5                                  u11217 5026  
                                u11137 23D6                                  u11057 21F2  
                                u10417 2CB4                                  u10337 2AF8  
                                u10257 076A                                  u10177 0534  
                                u10097 0114                                  u11227 5030  
                                u11147 2408                                  u11067 223E  
                                u10507 095A                                  u10427 2CE2  
                                u10347 2B1A                                  u10267 07C8  
                                u10187 0568                        ___awdiv@divisor 0088  
                                u11237 505C                                  u11157 4E72  
                                u11077 2272                                  u10517 09CA  
                                u10437 2CFC                                  u10357 2B48  
                                u10277 07FC                                  u10197 0592  
                                u11247 5066                                  u11167 4E8E  
                                u11087 22A4                                  u10607 0C0C  
                                u10527 09FE                                  u10447 436C  
                                u10367 2BB0                                  u10287 0826  
                                _T1CON 000FCD                                  u11177 3D54  
                                u11097 22F0                                  u10617 0C68  
                                u10537 0A64                                  u10457 4634  
                                u10377 2C04                                  u10297 087C  
                                u11187 3E70                                  u10707 0EA0  
                                u10627 0C90                                  u10547 0A82  
                                u10467 4678                                  u10387 2C24  
                                u11197 3E7A                                  u10717 0F0A  
                                u10637 0CEC                                  u10557 0AB2  
                                u10477 469A                                  u10397 2C52  
                                u10807 1124                                  u10727 0F32  
                                u10647 0D14                                  u10567 0B18  
                                u10487 08F4                                  _T2CON 000FCA  
                                u10817 112E                                  u10737 0F8E  
                                u10657 0D70                                  u10577 0B36  
                                u10497 0938                                  u10907 2848  
                                u10827 1152                                  u10747 0FB6  
                                u10667 0D98                                  u10587 0B66  
                                u10917 2894                                  u10837 117A  
                                u10757 1012                                  u10677 0DF4  
                                u10597 0BE4                                  u10927 28FE  
                                u10847 4D3C                                  u10767 103A  
                                u10687 0E1C                                  _T3CON 000FB1  
                                u10937 294A                                  u10857 4D8C  
                                u10777 105C                                  u10697 0E78  
                                u10947 2A16                                  u10867 4DA0  
                                u10787 10AC                                  u10957 2A28  
                                u10877 520C                                  u10797 10D4  
                                u10967 2A6E                                  u10887 5268  
                                u10977 2A80                                  u10897 27CE  
                                u10987 2042                                  u10997 208E  
                      __end_of___lwdiv 4F20                        __end_of___lwmod 519E  
                                i2l268 332A                                  i2l627 33BC  
                                i2l930 50A2                        ___awdiv@counter 008A  
                                i2l957 5596                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 2034  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 5B60  
                      __end_of_handler 3B56                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 596E                        __end_of_initLCD 54DA  
                       __CFG_EBTRB$OFF 000000                                  _debug 012D  
                           i2isdigit@c 0003                          ___awtoft@sign 0091  
                                _getIR 4F20                        __end_of_loadRTC 4CA8  
                      __end_of_readMAG 5494                        __end_of_dpowers FABA  
                                _first 0139                                  _enter 0065  
                                arm@on 00AC                        __end_of_isdigit 5998  
                                _input 007D                          ___ftpack@sign 0084  
                                _putch 5B40                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 5A0E  
                     __end_ofi2_getRTC 5004                    _log_count_pop_w_tab 00F4  
                                status 000FD8                            readCOND@res 0084  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 2790                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 56DA  
                          Loading@addr 00B3                       _count_can_no_lab 0123  
                 __size_of_EEPROM_read 0018                        __initialization 5362  
                         __end_of_Test 435E                     __size_ofi2_lcdInst 000C  
                         __end_of_main 488E                           __end_of_keys FAB0  
                         __end_of_sort 5A7A                             i2printf@ap 0020  
                           i2printf@cp 001E                     __size_ofi2_isdigit 001E  
                          _BlockerTest 3D1E                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00C4  
                        __activetblptr 000003                                 ID@res1 00B3  
                               ID@res2 00B5             __size_of_updateServoStates 01C8  
                               ID@time 00B2             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FC0F  
                               STR_101 FC20                                 STR_110 FCA8  
                               STR_102 FB65                                 STR_103 FE2E  
                               STR_111 FAE7                                 STR_112 FBCB  
                               STR_104 FB98                                 STR_120 FB0B  
                               STR_113 FBFE                                 STR_105 FB76  
                               STR_121 FAF9                                 STR_106 FB98  
                               STR_114 FBFE                                 STR_130 FFB6  
                               STR_122 FE6E                                 _ADRESH 000FC4  
                               STR_107 FEB9                                 STR_115 FBED  
                               STR_123 FB1D                                 STR_116 FBFE  
                               STR_124 FE6E                                 STR_108 FE9B  
                               _EEADRH 000FAA                                 STR_117 FBED  
                               STR_125 FE6E                                 STR_109 FE8C  
                               STR_126 FBDC                                 STR_118 FBDC  
                               _ADRESL 000FC3                                 STR_127 FC97  
                               STR_119 FC31                                 STR_128 FAE7  
                               STR_129 FB2F                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                       __end_of___awtoft 551E  
                               ?_putch 0001                       __end_of___ftpack 4258  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 573A              i2_change_state_to_menu_22 570A  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1060 3B1A  
                               i2l1141 5B12                                 i2l1049 3A5A  
                               i2l1058 3AFE                                 i2l1527 25FC  
                               i2l7003 2564                                 i2l7013 25B0  
                               i2l7005 256E                                 i2l1974 5358  
                               i2l7031 262A                                 i2l7015 25C2  
                               i2l7007 2574                                 i2l1984 5556  
                               i2l7009 2586                                 i2l7035 2642  
                               i2l7019 25C6                                 i2l7061 26BE  
                               i2l7037 2646                                 i2l7055 2692  
                               i2l6601 5A2E                                 i2l7073 26EA  
                               i2l7049 2678                                 i2l7075 26F2  
                               i2l7083 2718                                 i2l7067 26D4  
                               i2l7059 26B6                                 i2l7091 2774  
                               i2l7085 271E                                 i2l7079 2706  
                               i2l7095 56B2                                 i2l6625 5AB2  
                               i2l7089 276C                                 i2l7273 40F0  
                               i2l7097 56BA                                 i2l6635 5326  
                               i2l9211 50B8                                 i2l6637 532E  
                               i2l7285 4134                                 i2l7277 4100  
                               i2l9205 508E                                 i2l6647 534E  
                               i2l6639 5332                                 i2l6663 554C  
                               i2l6655 552C                                 i2l7703 387E  
                               i2l7551 3408                                 i2l6657 5534  
                               i2l7713 38A4                                 i2l7641 37A4  
                               i2l7561 3476                                 i2l7553 341E  
                               i2l7545 33C6                                 i2l6659 5538  
                               i2l7731 38DE                                 i2l7723 38C6  
                               i2l7707 389A                                 i2l7651 37CE  
                               i2l7563 348C                                 i2l7555 3434  
                               i2l7547 33DC                                 i2l7571 34CE  
                               i2l7539 335A                                 i2l6933 4FCA  
                               i2l7741 38FE                                 i2l7717 38B8  
                               i2l7653 37D2                                 i2l7565 34A2  
                               i2l7557 344A                                 i2l7549 33F2  
                               i2l7573 3528                                 i2l6943 4FF4  
                               i2l7719 38BC                                 i2l7671 3808  
                               i2l7663 37F0                                 i2l7567 34B8  
                               i2l7559 3460                                 i2l6937 4FDA  
                               i2l6961 242C                                 i2l7753 3934  
                               i2l7745 3910                                 i2l7737 38EC  
                               i2l7673 380E                                 i2l7665 37F6  
                               i2l7649 37BE                                 i2l6971 2450  
                               i2l7667 37FC                                 i2l7659 37DC  
                               i2l9603 30CE                                 i2l6965 243C  
                               i2l7749 3922                                 i2l7669 3802  
                               i2l7677 3814                                 i2l6967 244A  
                               i2l7759 393E                                 i2l9711 325C  
                               i2l9703 3240                                 i2l9631 3124  
                               i2l9623 3106                                 i2l9615 30EA  
                               i2l9607 30DC                                 i2l6993 250C  
                               i2l6985 24E4                                 i2l6977 2482  
                               i2l7697 3870                                 i2l7689 3858  
                               i2l6995 2516                                 i2l9731 32B2  
                               i2l9723 328E                                 i2l9715 3272  
                               i2l9707 324E                                 i2l9651 3172  
                               i2l9643 314E                                 i2l9635 3132  
                               i2l9627 3116                                 i2l9619 30F8  
                               i2l6997 251A                                 i2l9727 329C  
                               i2l9719 3280                                 i2l9671 31C0  
                               i2l9663 319C                                 i2l9655 3180  
                               i2l9647 315C                                 i2l9639 3140  
                               i2l9591 30A4                                 i2l9921 3580  
                               i2l9737 32C0                                 i2l9691 320E  
                               i2l9683 31F2                                 i2l9675 31CE  
                               i2l9667 31B2                                 i2l9659 318E  
                               i2l9595 30B2                                 i2l9917 3570  
                               i2l9589 309E                                 i2l9943 36DC  
                               i2l9927 35DA                                 i2l9695 321C  
                               i2l9687 3200                                 i2l9679 31DC  
                               i2l9599 30C0                                 i2l9945 36E2  
                               i2l9939 36A8                                 i2l9699 3232  
                               i2l9971 3B94                                 i2l9965 3B74  
                               i2l9983 3BC0                                 i2l9991 3BDE  
                               i2l9985 3BD4                                 i2l9977 3BAA  
                               i2l9993 3C28                                 i2l9969 3B8A  
                               i2l9995 3C32                _f_most_recent_sort_time 0137  
                               i2l9999 3C4A                          PlatformTest@i 00B1  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR2IF 007CF1  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR2ON 007E52                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 59C0  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 5A58                                 ___ftge 488E  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 4626                                 ___wmul 5640  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                               _getMAG 5676                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                       __end_of_readCOND 5448  
                               _getRTC 4CA8                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 5A9C  
                               _initUI 56DA                                 _readIR 53B0  
                               _logRun 3EE4                                 getIR@i 0087  
                               clear_0 5388                                 clear_1 5394  
                               clear_2 53A0                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestDC 525A  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1BFC                              ??_handler 0049  
              __size_of_initGlobalVars 00CA                           ?_retrieveLog 0007  
                               _strcpy 560A                     __size_of_SpeedTest 0084  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 59E8  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 59C0                            ?_BothServos 0001  
                            ??_isdigit 0080                      __end_ofi2___lwdiv 5362  
                     __end_of_printRTC 306E                           __mediumconst FA9E  
                    __end_ofi2___lwmod 5560                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00F2                  __end_of_algorithmTest 46FC  
                    __end_ofi2_lcdInst 5B78                      __end_ofi2_isdigit 5ABA  
                           __accesstop 0080                __end_of__initialization 53A6  
                        ?_inputHandler 002A                             ___ftge@ff1 0092  
                           ___ftge@ff2 0095                  _most_recent_sort_time 0143  
                        ___rparam_used 000001                          ?_PlatformTest 0001  
              printSortTimer@start_sec 003B                  __size_of_actuatorTest 08B8  
                           ___awtoft@c 008E                          i2_EEPROM_read 5B04  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E8  
                         __pidataBANK1 5B8C                    BlockerTest@cam_flag 00B1  
                        __end_of_getIR 4F92                            i2printRTC@i 0041  
                        _initSortTimer 4AD0            __end_of_updateServoPosition 4E30  
                        __end_of_putch 5B50                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 1BFC  
                           __end_of_UI 08DA                              ?i2___wmul 0001  
                   __size_of_lcdNibble 006C                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 5942          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 5916                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0127  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 08DA                __size_of_PortTestPusher 005C  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
       __size_ofi2_updateServoPosition 0068          __end_ofi2_updateServoPosition 50D8  
                         _EEPROM_write 445C                         ??_PlatformTest 00AB  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                              UI@F3247 0149                      __end_of_SpeedTest 4DB2  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 03EE  
                    printRTC@RTC_month 00BC                                ?___ftge 0092  
                              _ID$1150 00A9                                _ID$1145 00A8  
                         ?i2_lcdNibble 0001                                UI@i_412 00C9  
                              UI@i_415 00CA                                UI@i_416 00CB  
                              UI@i_450 00D4                                UI@i_442 00D0  
                              UI@i_434 00CC                                UI@i_451 00D5  
                              UI@i_443 00D1                                UI@i_435 00CD  
                              UI@i_446 00D2                                UI@i_438 00CE  
                              UI@i_447 00D3                                UI@i_439 00CF  
                     ??_updateArmState 0001                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                            ?___awtoft 008E                              ?___ftpack 0080  
                          ?_PortTestDC 0001                                ?_printf 008E  
                              _UI$2433 00C6                                ?_strcpy 0080  
                      _pan_servo_state 006B                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                                i2l10011 3C96  
                              i2l10005 3C70                                i2l10025 3CEC  
                              i2l10201 3AD2                                i2l10123 39E8  
                              i2l10061 5576                                i2l10117 39D8  
                              i2l10133 3A12                                i2l10055 556A  
                              i2l10223 3B18                                i2l10119 39DC  
                              i2l10127 39F0                                i2l10057 5570  
                              i2l10129 3A08                                i2l10147 3A2E  
                              i2l10191 3AB2                                i2l10175 3A82  
                              i2l10169 3A74                                i2l10197 3ACC  
                              i2l10671 3C02                                i2l10681 3D14  
                              i2l10673 3C0C                                i2l10675 3C16  
                              i2l10693 382C                                i2l10685 32DE  
                              i2l10677 3C20                                i2l10695 3848  
                              i2l10687 3300                                i2l10679 3D04  
                              i2l10689 331C                              ?_delay_ms 0001  
                       PlatformTest@on 00B5                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                _RTCflag 00E4  
                            ?_readCOND 0001                             _initEEPROM 5AEE  
                              i2_putch 5B60                              ?_initTime 0080  
                      _f_loadingNewCan 00EC                        i2printRTC@month 003D  
                __size_of_Distribution 00E2            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 5070                                _Loading 1192  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                        __size_of___ftge 00C8  
                              ___awdiv 4956                                ___awmod 4B7A  
                           _initServos 4E30                                ___lldiv 4A14  
                      __size_of___wmul 0036                        __size_of_getMAG 0032  
                              ___lwdiv 4EA8                                ___lwmod 513C  
                      __size_of_getRTC 0086                        printSortTimer@i 0047  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                           ?_BlockerTest 0001  
                      __size_of_initUI 0030                        __size_of_readIR 004C  
                              __pcinit 5362                             ??___awtoft 0091  
                 i2EEPROM_read@address 0001                        __size_of_logRun 0144  
                           ??___ftpack 0085                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 46FC  
                              _lcdInst 5B50                                _handler 0008  
                              __ptext0 47C6                                __ptext1 5A58  
                              __ptext2 1192                                __ptext3 4AD0  
                              __ptext4 46FC                                __ptext5 5676  
                              __ptext6 4F20                                __ptext7 53B0  
                              __ptext8 16CC                                __ptext9 53FC  
                      __size_of_printf 0438                                _readADC 5942  
                      __size_of_strcpy 0036                                _initLCD 5494  
                              _cur_can 012B                                _loadRTC 4C1C  
                              _readMAG 5448                                _dpowers FAB0  
                   actuatorTest@i_1750 00B1                     actuatorTest@i_1752 00B2  
                   actuatorTest@i_1761 00B8                     actuatorTest@i_1753 00B3  
                   actuatorTest@i_1762 00B9                     actuatorTest@i_1746 00AE  
                   actuatorTest@i_1771 00BE                     actuatorTest@i_1755 00B4  
                   actuatorTest@i_1747 00AF                     actuatorTest@i_1739 00AD  
                         __size_of_arm 00FE                     actuatorTest@i_1772 00BF  
                   actuatorTest@i_1756 00B5                     actuatorTest@i_1765 00BA  
                   actuatorTest@i_1749 00B0                     actuatorTest@i_1766 00BB  
                   actuatorTest@i_1758 00B6                     actuatorTest@i_1775 00C0  
                   actuatorTest@i_1759 00B7                     actuatorTest@i_1776 00C1  
                   actuatorTest@i_1768 00BC                     actuatorTest@i_1769 00BD  
                   actuatorTest@i_1778 00C2                     actuatorTest@i_1779 00C3  
                              _isdigit 596E                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 0124  
                   _motor_toggle_count 0145                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 4544                         __pintcode_body 396C  
                 PlatformTest@res_1791 00AF                   end_of_initialization 53A6  
                           ??_readCOND 0082                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 396C                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestDC 005C  
                            i2u1125_47 37C4                              i2u1126_47 52D0  
                            i2u1127_47 52DA                              i2u1128_47 52FC  
                            i2u1129_47 5306              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
               __end_of_initGlobalVars 47C6                             _sensorTest 2AA6  
                           _servoTimes 0059                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 396C  
                         ??_BothServos 00AB                  __end_of_machineConfig 513C  
                 __end_of_PlatformTest 2AA6                             _updateMenu 306E  
                    i2_I2C_Master_Read 5A0E                              _IR_signal 00E0  
                    i2_I2C_Master_Wait 5B2E                      i2_I2C_Master_Stop 5BA4  
                    i2___lwdiv@divisor 0008                        _log_count_total 0141  
                       _PortTestPusher 51FE                              i2___lwdiv 5310  
                            i2___lwmod 551E                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 3564                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                          ?_initEEPROM 0001                              i2_lcdInst 5B6C  
                        Loading@i_1122 00B6                          Loading@i_1131 00B8  
                        Loading@i_1133 00BA                          Loading@i_1134 00BC  
                        Loading@i_1136 00BE                             _total_time 00FA  
                          printf@width 00A9                   __size_of_stopSignals 001C  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 5A9C  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 2422  
                  __end_of_EEPROM_read 5AEE                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___ftge 4956  
                       __end_of___wmul 5676                         __end_of_getMAG 56A8  
                       __end_of_getRTC 4D2E                   __size_ofi2_lcdNibble 005A  
                       _timer2_counter 0073                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 570A  
                       __end_of_readIR 53FC                         __end_of_logRun 4028  
                     i2___wmul@product 0005                         __end_of_printf 2034  
                         i2printf@flag 0026                         __end_of_strcpy 5640  
            __end_ofi2_I2C_Master_Read 5A34              __end_ofi2_I2C_Master_Wait 5B40  
                         i2printf@prec 001D                    start_initialization 5362  
            __end_ofi2_I2C_Master_Stop 5BAC                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 0125  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
               __end_of_PortTestPusher 525A                            __end_of_arm 445C  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1407 00B0                  i2I2C_Master_Read@temp 0003  
                 BlockerTest@cond_flag 00B3                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                               ??___ftge 0098  
                            _SpeedTest 4D2E                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                            ?_sensorTest 0001  
                          __pdataBANK1 0149                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                               ID@i_1151 00B0  
                             ID@i_1152 00B7                               ID@i_1144 00AC  
                             ID@i_1149 00AE                           ??_PortTestDC 00AB  
               printSortTimer@timeDiff 0045       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    __size_of_initEEPROM 0016  
                  _printSortTimer$2560 0043                   __size_of_BlockerTest 01C6  
                    __size_of___awtoft 0044                      __size_of___ftpack 010C  
                          __pbssCOMRAM 0059           __size_of_updateServoPosition 007E  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
                      ?_PortTestPusher 0001                __size_of_printSortTimer 021C  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$2068 0081                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 003F  
                    printSortTimer@sec 0041                    __size_of_initServos 0078  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                     _tilt_servo_state 0071                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 0129  
                    __size_of_readCOND 004C                            _EEPROM_read 5AD6  
                     _I2C_Master_Start 5B9C                     __end_of_PortTestDC 52B6  
                            _f_lastCan 00EA                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 5B78  
                    __size_of_initTime 0022                  i2_updateServoPosition 5070  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FA9E                              _lcdNibble 5004  
                __size_of_inputHandler 01EC                               ?___awdiv 0086  
                            __ptext100 5B2E                               ?___awmod 0080  
                             ?___lldiv 0080                         _sensor_outputs 00DA  
                             ?___lwdiv 0080                               ?___lwmod 0087  
                __size_of_PlatformTest 0316                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 013B                              _cur_state 00E6  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0072  
                        _algorithmTest 4626                            ??i2___lwdiv 000A  
                          _COND_signal 00DE                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0530  
                          __size_of_UI 08C8                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 5BB4             __end_ofi2_I2C_Master_Write 5B8C  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATBbits 000F8A  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                         _inputHandler 3780                            ??i2_isdigit 0001  
                         _PlatformTest 2790                           BlockerTest@i 00AD  
                             _PIR2bits 000FA1                        PlatformTest@res 00AD  
                             i2u562_40 2548                               i2u562_47 253E  
                             i2u619_40 33BC                               i2u566_40 25A8  
                             i2u566_47 259E                               i2u499_40 5A2C  
                  __size_of_updateMenu 02C0                         _log_completion 00F0  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0077                              _was_low_2 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 59E8  
                        lcdNibble@data 0081                               i2_getRTC 4F92  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                __size_of_updateArmState 003A  
                             Loading@i 00C0                               Loading@j 00C2  
                             i2_printf 2422                               i2_strcpy 56A8  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 5376                           ??_initEEPROM 00B1  
                            readIR@res 0084                 ?i2_updateServoPosition 0001  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 5B1A                            _count_total 00FE  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 053A                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                          ??_SpeedTest 00AB                  __end_of_initSortTimer 4B7A  
                         ??_initServos 0088                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 579A  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 55D2  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 559A  
              _change_state_to_menu_23 576A                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 588A                _change_state_to_logs_12 585A  
              _change_state_to_logs_22 582A                _change_state_to_logs_23 58E8  
              _change_state_to_logs_33 57FA                _change_state_to_logs_34 57CA  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                             ___awtoft 54DA                               ___ftpack 414C  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 3B4E                     __end_of_initEEPROM 5B04  
                      _I2C_Master_Init 519E                       __size_of_readADC 002C  
                      _I2C_Master_Read 58BA                       __size_of_initLCD 0046  
                         _f_ID_receive 012F                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 5B1A  
                      _I2C_Master_Stop 5B94                       __size_of_isdigit 002A  
                             _delay_ms 5998                         _printSortTimer 3564  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 414C                               __ptext10 5998  
                             __ptext11 488E                               __ptext20 4A14  
                             __ptext12 54DA                               __ptext21 5916  
                             __ptext13 414C                               __ptext30 4CA8  
                             __ptext22 5A7A                               __ptext14 4544  
                             __ptext31 5B78                               __ptext23 5494  
                             __ptext15 50D8                               __ptext40 4258  
                             __ptext32 5B94                               __ptext24 5AEE  
                             __ptext16 3EE4                               __ptext41 2AA6  
                             __ptext33 5B9C                               __ptext25 445C  
                             __ptext17 56DA                               __ptext50 2034  
                             __ptext42 5448                               __ptext34 58BA  
                             __ptext26 5AD6                               __ptext18 4C1C  
                             __ptext51 5ABA                               __ptext43 435E  
                             __ptext35 5B1A                               __ptext27 0012  
                             __ptext19 519E                               __ptext60 513C  
                             __ptext52 4E30                               __ptext44 4626  
                             __ptext36 559A                               __ptext28 2DA4  
                             __ptext61 4EA8                               __ptext53 4DB2  
                             __ptext45 08DA                               __ptext37 55D2  
                             __ptext29 560A                               __ptext70 56A8  
                             __ptext62 5B50                               __ptext54 3D1E  
                             __ptext46 4D2E                               __ptext38 4B7A  
                             __ptext71 3780                               __ptext63 5004  
                             __ptext55 5942                               __ptext47 51FE  
                             __ptext39 4956                               __ptext80 585A  
                             __ptext72 570A                               __ptext56 1BFC  
                             __ptext48 525A                               __ptext81 588A  
                             __ptext73 573A                               __ptext65 3B56  
                             __ptext57 5B40                               __ptext49 2790  
                             __ptext90 59E8                               __ptext82 5A34  
                             __ptext74 576A                               __ptext66 5070  
                             __ptext58 596E                               __ptext91 551E  
                             __ptext83 4028                               __ptext75 579A  
                             __ptext67 306E                               __ptext59 5640  
                             __ptext92 5310                               __ptext84 5B04  
                             __ptext76 57CA                               __ptext68 59C0  
                             __ptext93 5B6C                               __ptext85 5560  
                             __ptext77 57FA                               __ptext69 332E  
                             __ptext94 52B6                               __ptext86 3564  
                             __ptext78 58E8                               __ptext95 4F92  
                             __ptext87 2422                               __ptext79 582A  
                             __ptext96 5B82                               __ptext88 5B60  
                             __ptext97 5BA4                               __ptext89 5A9C  
                             __ptext98 5BAC                               __ptext99 5A0E  
                             _dispLogs 5A34                          ?_actuatorTest 0001  
                   PlatformTest@i_1795 00B3                               _readCOND 53FC  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$2068 0002                     __end_of_initServos 4EA8  
                        __size_of_Test 0106                          ?_EEPROM_write 00AB  
                             _initTime 5A7A                          __size_of_main 00C8  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F8                    _updateServoPosition 4DB2  
               __size_of_machineConfig 0064                          ??i2_lcdNibble 0001  
                             _printRTC 2DA4                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F6  
                   _f_can_coming_to_ID 0131                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 576A  
    __end_ofi2_change_state_to_menu_22 573A                       ??_PortTestPusher 00AB  
                             loadRTC@i 0096                 __end_of_printSortTimer 3780  
                            putch@data 0082               __end_of_I2C_Master_Start 5BA4  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 5B82  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00E2                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                  _servo_timer_counter 006D                               intlevel2 0000  
                       ??_EEPROM_write 00AE                         BlockerTest@res 00AF  
                   __end_of_sensorTest 2DA4                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 5AD6              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 332E  
              __end_of_I2C_Master_Init 51FE                __end_of_I2C_Master_Read 58E8  
              __end_of_I2C_Master_Wait 5B2E                          ??_BlockerTest 00AB  
              __end_of_I2C_Master_Stop 5B9C                            lcdInst@data 0082  
                        printRTC@F3237 014D                           retrieveLog@i 000E  
                          _retrieveLog 4028                    __end_ofi2_lcdNibble 5310  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                   _servo_timer_target 006F                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                        ___lwmod@divisor 0089  
                       _updateArmState 5560                      _f_can_distributed 0135  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 50D8                        ___lwmod@counter 008B  
                    _updateServoStates 3B56                          printRTC@month 00BE  
                        ?_Distribution 0001                     ?_updateServoStates 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                       _f_arm_position 00E8                    ??_updateServoStates 0009  
                   i2printRTC@INT_time 002D  
