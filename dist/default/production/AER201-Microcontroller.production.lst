

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Apr 07 15:17:24 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   112                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   113                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   114  0000                     
   115                           ; Version 1.40
   116                           ; Generated 01/12/2016 GMT
   117                           ; 
   118                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   119                           ; All rights reserved.
   120                           ; 
   121                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   122                           ; 
   123                           ; Redistribution and use in source and binary forms, with or without modification, are
   124                           ; permitted provided that the following conditions are met:
   125                           ; 
   126                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   127                           ;        conditions and the following disclaimer.
   128                           ; 
   129                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   130                           ;        of conditions and the following disclaimer in the documentation and/or other
   131                           ;        materials provided with the distribution.
   132                           ; 
   133                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   134                           ;        software without specific prior written permission.
   135                           ; 
   136                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   137                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   138                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   139                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   140                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   141                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   142                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   143                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   144                           ; 
   145                           ; 
   146                           ; Code-generator required, PIC18F4620 Definitions
   147                           ; 
   148                           ; SFR Addresses
   149  0000                     
   150                           	psect	idataBANK1
   151  0053C6                     __pidataBANK1:
   152                           	opt stack 0
   153                           
   154                           ;initializer for UI@F3236
   155  0053C6  4D                 	db	77
   156  0053C7  4D                 	db	77
   157  0053C8  4D                 	db	77
   158  0053C9  00                 	db	0
   159                           
   160                           ;initializer for printRTC@F3226
   161  0053CA  4D                 	db	77
   162  0053CB  4D                 	db	77
   163  0053CC  4D                 	db	77
   164  0053CD  00                 	db	0
   165                           
   166                           	psect	mediumconst
   167  00FACC                     __pmediumconst:
   168                           	opt stack 0
   169  00FACC  00                 	db	0
   170  00FACD                     _keys:
   171                           	opt stack 0
   172  00FACD  31                 	db	49
   173  00FACE  32                 	db	50
   174  00FACF  33                 	db	51
   175  00FAD0  41                 	db	65
   176  00FAD1  34                 	db	52
   177  00FAD2  35                 	db	53
   178  00FAD3  36                 	db	54
   179  00FAD4  42                 	db	66
   180  00FAD5  37                 	db	55
   181  00FAD6  38                 	db	56
   182  00FAD7  39                 	db	57
   183  00FAD8  43                 	db	67
   184  00FAD9  2A                 	db	42
   185  00FADA  30                 	db	48
   186  00FADB  23                 	db	35
   187  00FADC  44                 	db	68
   188  00FADD  00                 	db	0
   189  00FADE                     __end_of_keys:
   190                           	opt stack 0
   191  00FADE                     _dpowers:
   192                           	opt stack 0
   193  00FADE  0001               	dw	1
   194  00FAE0  000A               	dw	10
   195  00FAE2  0064               	dw	100
   196  00FAE4  03E8               	dw	1000
   197  00FAE6  2710               	dw	10000
   198  00FAE8                     __end_of_dpowers:
   199                           	opt stack 0
   200  0000                     _ADCON0	set	4034
   201  0000                     _ADCON0bits	set	4034
   202  0000                     _ADCON1	set	4033
   203  0000                     _ADCON2	set	4032
   204  0000                     _ADRESH	set	4036
   205  0000                     _ADRESL	set	4035
   206  0000                     _CMCONbits	set	4020
   207  0000                     _CVRCON	set	4021
   208  0000                     _EEADR	set	4009
   209  0000                     _EEADRH	set	4010
   210  0000                     _EECON1bits	set	4006
   211  0000                     _EECON2	set	4007
   212  0000                     _EEDATA	set	4008
   213  0000                     _INTCONbits	set	4082
   214  0000                     _LATA	set	3977
   215  0000                     _LATAbits	set	3977
   216  0000                     _LATB	set	3978
   217  0000                     _LATBbits	set	3978
   218  0000                     _LATC	set	3979
   219  0000                     _LATCbits	set	3979
   220  0000                     _LATD	set	3980
   221  0000                     _LATDbits	set	3980
   222  0000                     _LATE	set	3981
   223  0000                     _OSCCON	set	4051
   224  0000                     _OSCTUNEbits	set	3995
   225  0000                     _PIR2bits	set	4001
   226  0000                     _PORTAbits	set	3968
   227  0000                     _PORTB	set	3969
   228  0000                     _PORTBbits	set	3969
   229  0000                     _SSPADD	set	4040
   230  0000                     _SSPBUF	set	4041
   231  0000                     _SSPCON1	set	4038
   232  0000                     _SSPCON2	set	4037
   233  0000                     _SSPSTAT	set	4039
   234  0000                     _T0CON	set	4053
   235  0000                     _T1CON	set	4045
   236  0000                     _T2CON	set	4042
   237  0000                     _T3CON	set	4017
   238  0000                     _TMR0H	set	4055
   239  0000                     _TMR0L	set	4054
   240  0000                     _TMR1H	set	4047
   241  0000                     _TMR1L	set	4046
   242  0000                     _TMR3H	set	4019
   243  0000                     _TMR3L	set	4018
   244  0000                     _TRISA	set	3986
   245  0000                     _TRISB	set	3987
   246  0000                     _TRISC	set	3988
   247  0000                     _TRISD	set	3989
   248  0000                     _TRISE	set	3990
   249  0000                     _ACKDT	set	32301
   250  0000                     _ACKEN	set	32300
   251  0000                     _ADIE	set	31982
   252  0000                     _INT1IE	set	32643
   253  0000                     _INT1IF	set	32640
   254  0000                     _PEIE	set	32662
   255  0000                     _PEN	set	32298
   256  0000                     _RCEN	set	32299
   257  0000                     _RSEN	set	32297
   258  0000                     _SEN	set	32296
   259  0000                     _TMR0IE	set	32661
   260  0000                     _TMR0IF	set	32658
   261  0000                     _TMR0ON	set	32431
   262  0000                     _TMR1IE	set	31976
   263  0000                     _TMR1IF	set	31984
   264  0000                     _TMR1ON	set	32360
   265  0000                     _TMR2IE	set	31977
   266  0000                     _TMR3IE	set	32001
   267  0000                     _TMR3IF	set	32009
   268  0000                     _TMR3ON	set	32136
   269  0000                     _TRISC3	set	31907
   270  0000                     _TRISC4	set	31908
   271  0000                     _nRBPU	set	32655
   272  00FAE8                     STR_21:
   273  00FAE8  25                 	db	37
   274  00FAE9  30                 	db	48	;'0'
   275  00FAEA  32                 	db	50	;'2'
   276  00FAEB  64                 	db	100	;'d'
   277  00FAEC  25                 	db	37
   278  00FAED  73                 	db	115	;'s'
   279  00FAEE  20                 	db	32
   280  00FAEF  7C                 	db	124
   281  00FAF0  20                 	db	32
   282  00FAF1  25                 	db	37
   283  00FAF2  30                 	db	48	;'0'
   284  00FAF3  32                 	db	50	;'2'
   285  00FAF4  64                 	db	100	;'d'
   286  00FAF5  3A                 	db	58	;':'
   287  00FAF6  25                 	db	37
   288  00FAF7  30                 	db	48	;'0'
   289  00FAF8  32                 	db	50	;'2'
   290  00FAF9  64                 	db	100	;'d'
   291  00FAFA  3A                 	db	58	;':'
   292  00FAFB  25                 	db	37
   293  00FAFC  30                 	db	48	;'0'
   294  00FAFD  32                 	db	50	;'2'
   295  00FAFE  64                 	db	100	;'d'
   296  00FAFF  00                 	db	0
   297  00FB00                     STR_66:
   298  00FB00  28                 	db	40
   299  00FB01  64                 	db	100	;'d'
   300  00FB02  61                 	db	97	;'a'
   301  00FB03  74                 	db	116	;'t'
   302  00FB04  61                 	db	97	;'a'
   303  00FB05  3A                 	db	58	;':'
   304  00FB06  20                 	db	32
   305  00FB07  25                 	db	37
   306  00FB08  75                 	db	117	;'u'
   307  00FB09  2C                 	db	44
   308  00FB0A  20                 	db	32
   309  00FB0B  61                 	db	97	;'a'
   310  00FB0C  64                 	db	100	;'d'
   311  00FB0D  64                 	db	100	;'d'
   312  00FB0E  72                 	db	114	;'r'
   313  00FB0F  3A                 	db	58	;':'
   314  00FB10  20                 	db	32
   315  00FB11  25                 	db	37
   316  00FB12  75                 	db	117	;'u'
   317  00FB13  29                 	db	41
   318  00FB14  00                 	db	0
   319  00FB15                     STR_111:
   320  00FB15  44                 	db	68	;'D'
   321  00FB16  20                 	db	32
   322  00FB17  57                 	db	87	;'W'
   323  00FB18  49                 	db	73	;'I'
   324  00FB19  4C                 	db	76	;'L'
   325  00FB1A  4C                 	db	76	;'L'
   326  00FB1B  20                 	db	32
   327  00FB1C  52                 	db	82	;'R'
   328  00FB1D  45                 	db	69	;'E'
   329  00FB1E  54                 	db	84	;'T'
   330  00FB1F  55                 	db	85	;'U'
   331  00FB20  52                 	db	82	;'R'
   332  00FB21  4E                 	db	78	;'N'
   333  00FB22  20                 	db	32
   334  00FB23  20                 	db	32
   335  00FB24  20                 	db	32
   336  00FB25  20                 	db	32
   337  00FB26  00                 	db	0
   338  00FB27                     STR_121:
   339  00FB27  4F                 	db	79	;'O'
   340  00FB28  54                 	db	84	;'T'
   341  00FB29  48                 	db	72	;'H'
   342  00FB2A  45                 	db	69	;'E'
   343  00FB2B  52                 	db	82	;'R'
   344  00FB2C  20                 	db	32
   345  00FB2D  53                 	db	83	;'S'
   346  00FB2E  45                 	db	69	;'E'
   347  00FB2F  54                 	db	84	;'T'
   348  00FB30  53                 	db	83	;'S'
   349  00FB31  20                 	db	32
   350  00FB32  52                 	db	82	;'R'
   351  00FB33  41                 	db	65	;'A'
   352  00FB34  35                 	db	53	;'5'
   353  00FB35  20                 	db	32
   354  00FB36  20                 	db	32
   355  00FB37  20                 	db	32
   356  00FB38  00                 	db	0
   357  00FB39                     STR_120:
   358  00FB39  53                 	db	83	;'S'
   359  00FB3A  3A                 	db	58	;':'
   360  00FB3B  20                 	db	32
   361  00FB3C  44                 	db	68	;'D'
   362  00FB3D  20                 	db	32
   363  00FB3E  57                 	db	87	;'W'
   364  00FB3F  49                 	db	73	;'I'
   365  00FB40  4C                 	db	76	;'L'
   366  00FB41  4C                 	db	76	;'L'
   367  00FB42  20                 	db	32
   368  00FB43  52                 	db	82	;'R'
   369  00FB44  45                 	db	69	;'E'
   370  00FB45  54                 	db	84	;'T'
   371  00FB46  55                 	db	85	;'U'
   372  00FB47  52                 	db	82	;'R'
   373  00FB48  4E                 	db	78	;'N'
   374  00FB49  20                 	db	32
   375  00FB4A  00                 	db	0
   376  00FB4B                     STR_123:
   377  00FB4B  4F                 	db	79	;'O'
   378  00FB4C  54                 	db	84	;'T'
   379  00FB4D  48                 	db	72	;'H'
   380  00FB4E  45                 	db	69	;'E'
   381  00FB4F  52                 	db	82	;'R'
   382  00FB50  3A                 	db	58	;':'
   383  00FB51  20                 	db	32
   384  00FB52  43                 	db	67	;'C'
   385  00FB53  41                 	db	65	;'A'
   386  00FB54  4D                 	db	77	;'M'
   387  00FB55  20                 	db	32
   388  00FB56  54                 	db	84	;'T'
   389  00FB57  4F                 	db	79	;'O'
   390  00FB58  47                 	db	71	;'G'
   391  00FB59  47                 	db	71	;'G'
   392  00FB5A  4C                 	db	76	;'L'
   393  00FB5B  45                 	db	69	;'E'
   394  00FB5C  00                 	db	0
   395  00FB5D                     STR_122:
   396  00FB5D  44                 	db	68	;'D'
   397  00FB5E  3A                 	db	58	;':'
   398  00FB5F  20                 	db	32
   399  00FB60  52                 	db	82	;'R'
   400  00FB61  45                 	db	69	;'E'
   401  00FB62  54                 	db	84	;'T'
   402  00FB63  7C                 	db	124
   403  00FB64  32                 	db	50	;'2'
   404  00FB65  3A                 	db	58	;':'
   405  00FB66  20                 	db	32
   406  00FB67  43                 	db	67	;'C'
   407  00FB68  4F                 	db	79	;'O'
   408  00FB69  4E                 	db	78	;'N'
   409  00FB6A  44                 	db	68	;'D'
   410  00FB6B  20                 	db	32
   411  00FB6C  25                 	db	37
   412  00FB6D  64                 	db	100	;'d'
   413  00FB6E  00                 	db	0
   414  00FB6F                     STR_3:
   415  00FB6F  2D                 	db	45
   416  00FB70  2D                 	db	45
   417  00FB71  20                 	db	32
   418  00FB72  4C                 	db	76	;'L'
   419  00FB73  4F                 	db	79	;'O'
   420  00FB74  47                 	db	71	;'G'
   421  00FB75  20                 	db	32
   422  00FB76  25                 	db	37
   423  00FB77  32                 	db	50	;'2'
   424  00FB78  64                 	db	100	;'d'
   425  00FB79  20                 	db	32
   426  00FB7A  48                 	db	72	;'H'
   427  00FB7B  45                 	db	69	;'E'
   428  00FB7C  52                 	db	82	;'R'
   429  00FB7D  45                 	db	69	;'E'
   430  00FB7E  2D                 	db	45
   431  00FB7F  2D                 	db	45
   432  00FB80  00                 	db	0
   433  00FB81                     STR_1:
   434  00FB81  52                 	db	82	;'R'
   435  00FB82  45                 	db	69	;'E'
   436  00FB83  53                 	db	83	;'S'
   437  00FB84  55                 	db	85	;'U'
   438  00FB85  4C                 	db	76	;'L'
   439  00FB86  54                 	db	84	;'T'
   440  00FB87  53                 	db	83	;'S'
   441  00FB88  20                 	db	32
   442  00FB89  49                 	db	73	;'I'
   443  00FB8A  4E                 	db	78	;'N'
   444  00FB8B  20                 	db	32
   445  00FB8C  4C                 	db	76	;'L'
   446  00FB8D  4F                 	db	79	;'O'
   447  00FB8E  47                 	db	71	;'G'
   448  00FB8F  20                 	db	32
   449  00FB90  25                 	db	37
   450  00FB91  64                 	db	100	;'d'
   451  00FB92  00                 	db	0
   452  00FB93                     STR_102:
   453  00FB93  4D                 	db	77	;'M'
   454  00FB94  49                 	db	73	;'I'
   455  00FB95  44                 	db	68	;'D'
   456  00FB96  20                 	db	32
   457  00FB97  2D                 	db	45
   458  00FB98  2D                 	db	45
   459  00FB99  20                 	db	32
   460  00FB9A  32                 	db	50	;'2'
   461  00FB9B  73                 	db	115	;'s'
   462  00FB9C  20                 	db	32
   463  00FB9D  20                 	db	32
   464  00FB9E  20                 	db	32
   465  00FB9F  20                 	db	32
   466  00FBA0  20                 	db	32
   467  00FBA1  20                 	db	32
   468  00FBA2  20                 	db	32
   469  00FBA3  00                 	db	0
   470  00FBA4                     STR_105:
   471  00FBA4  44                 	db	68	;'D'
   472  00FBA5  52                 	db	82	;'R'
   473  00FBA6  4F                 	db	79	;'O'
   474  00FBA7  50                 	db	80	;'P'
   475  00FBA8  20                 	db	32
   476  00FBA9  2D                 	db	45
   477  00FBAA  2D                 	db	45
   478  00FBAB  20                 	db	32
   479  00FBAC  32                 	db	50	;'2'
   480  00FBAD  73                 	db	115	;'s'
   481  00FBAE  20                 	db	32
   482  00FBAF  20                 	db	32
   483  00FBB0  20                 	db	32
   484  00FBB1  20                 	db	32
   485  00FBB2  20                 	db	32
   486  00FBB3  20                 	db	32
   487  00FBB4  00                 	db	0
   488  00FBB5                     STR_99:
   489  00FBB5  4C                 	db	76	;'L'
   490  00FBB6  45                 	db	69	;'E'
   491  00FBB7  46                 	db	70	;'F'
   492  00FBB8  54                 	db	84	;'T'
   493  00FBB9  20                 	db	32
   494  00FBBA  2D                 	db	45
   495  00FBBB  2D                 	db	45
   496  00FBBC  20                 	db	32
   497  00FBBD  32                 	db	50	;'2'
   498  00FBBE  73                 	db	115	;'s'
   499  00FBBF  20                 	db	32
   500  00FBC0  20                 	db	32
   501  00FBC1  20                 	db	32
   502  00FBC2  20                 	db	32
   503  00FBC3  20                 	db	32
   504  00FBC4  20                 	db	32
   505  00FBC5  00                 	db	0
   506  00FBC6                     STR_104:
   507  00FBC6  4C                 	db	76	;'L'
   508  00FBC7  45                 	db	69	;'E'
   509  00FBC8  56                 	db	86	;'V'
   510  00FBC9  45                 	db	69	;'E'
   511  00FBCA  4C                 	db	76	;'L'
   512  00FBCB  20                 	db	32
   513  00FBCC  2D                 	db	45
   514  00FBCD  2D                 	db	45
   515  00FBCE  20                 	db	32
   516  00FBCF  32                 	db	50	;'2'
   517  00FBD0  73                 	db	115	;'s'
   518  00FBD1  20                 	db	32
   519  00FBD2  20                 	db	32
   520  00FBD3  20                 	db	32
   521  00FBD4  20                 	db	32
   522  00FBD5  20                 	db	32
   523  00FBD6  00                 	db	0
   524  00FBD7                     STR_98:
   525  00FBD7  52                 	db	82	;'R'
   526  00FBD8  49                 	db	73	;'I'
   527  00FBD9  47                 	db	71	;'G'
   528  00FBDA  48                 	db	72	;'H'
   529  00FBDB  54                 	db	84	;'T'
   530  00FBDC  20                 	db	32
   531  00FBDD  2D                 	db	45
   532  00FBDE  2D                 	db	45
   533  00FBDF  20                 	db	32
   534  00FBE0  32                 	db	50	;'2'
   535  00FBE1  73                 	db	115	;'s'
   536  00FBE2  20                 	db	32
   537  00FBE3  20                 	db	32
   538  00FBE4  20                 	db	32
   539  00FBE5  20                 	db	32
   540  00FBE6  20                 	db	32
   541  00FBE7  00                 	db	0
   542  00FBE8                     STR_97:
   543  00FBE8  4D                 	db	77	;'M'
   544  00FBE9  49                 	db	73	;'I'
   545  00FBEA  44                 	db	68	;'D'
   546  00FBEB  44                 	db	68	;'D'
   547  00FBEC  4C                 	db	76	;'L'
   548  00FBED  45                 	db	69	;'E'
   549  00FBEE  20                 	db	32
   550  00FBEF  2D                 	db	45
   551  00FBF0  2D                 	db	45
   552  00FBF1  20                 	db	32
   553  00FBF2  32                 	db	50	;'2'
   554  00FBF3  73                 	db	115	;'s'
   555  00FBF4  20                 	db	32
   556  00FBF5  20                 	db	32
   557  00FBF6  20                 	db	32
   558  00FBF7  20                 	db	32
   559  00FBF8  00                 	db	0
   560  00FBF9                     STR_112:
   561  00FBF9  4F                 	db	79	;'O'
   562  00FBFA  54                 	db	84	;'T'
   563  00FBFB  48                 	db	72	;'H'
   564  00FBFC  45                 	db	69	;'E'
   565  00FBFD  52                 	db	82	;'R'
   566  00FBFE  20                 	db	32
   567  00FBFF  53                 	db	83	;'S'
   568  00FC00  45                 	db	69	;'E'
   569  00FC01  54                 	db	84	;'T'
   570  00FC02  53                 	db	83	;'S'
   571  00FC03  20                 	db	32
   572  00FC04  44                 	db	68	;'D'
   573  00FC05  43                 	db	67	;'C'
   574  00FC06  20                 	db	32
   575  00FC07  20                 	db	32
   576  00FC08  20                 	db	32
   577  00FC09  00                 	db	0
   578  00FC0A                     STR_118:
   579  00FC0A  44                 	db	68	;'D'
   580  00FC0B  20                 	db	32
   581  00FC0C  57                 	db	87	;'W'
   582  00FC0D  49                 	db	73	;'I'
   583  00FC0E  4C                 	db	76	;'L'
   584  00FC0F  4C                 	db	76	;'L'
   585  00FC10  20                 	db	32
   586  00FC11  52                 	db	82	;'R'
   587  00FC12  45                 	db	69	;'E'
   588  00FC13  54                 	db	84	;'T'
   589  00FC14  55                 	db	85	;'U'
   590  00FC15  52                 	db	82	;'R'
   591  00FC16  4E                 	db	78	;'N'
   592  00FC17  20                 	db	32
   593  00FC18  20                 	db	32
   594  00FC19  20                 	db	32
   595  00FC1A  00                 	db	0
   596  00FC1B                     STR_100:
   597  00FC1B  4D                 	db	77	;'M'
   598  00FC1C  49                 	db	73	;'I'
   599  00FC1D  44                 	db	68	;'D'
   600  00FC1E  2D                 	db	45
   601  00FC1F  4C                 	db	76	;'L'
   602  00FC20  45                 	db	69	;'E'
   603  00FC21  46                 	db	70	;'F'
   604  00FC22  54                 	db	84	;'T'
   605  00FC23  20                 	db	32
   606  00FC24  2D                 	db	45
   607  00FC25  2D                 	db	45
   608  00FC26  20                 	db	32
   609  00FC27  32                 	db	50	;'2'
   610  00FC28  73                 	db	115	;'s'
   611  00FC29  20                 	db	32
   612  00FC2A  20                 	db	32
   613  00FC2B  00                 	db	0
   614  00FC2C                     STR_101:
   615  00FC2C  4D                 	db	77	;'M'
   616  00FC2D  49                 	db	73	;'I'
   617  00FC2E  44                 	db	68	;'D'
   618  00FC2F  2D                 	db	45
   619  00FC30  52                 	db	82	;'R'
   620  00FC31  49                 	db	73	;'I'
   621  00FC32  47                 	db	71	;'G'
   622  00FC33  48                 	db	72	;'H'
   623  00FC34  54                 	db	84	;'T'
   624  00FC35  20                 	db	32
   625  00FC36  2D                 	db	45
   626  00FC37  2D                 	db	45
   627  00FC38  20                 	db	32
   628  00FC39  32                 	db	50	;'2'
   629  00FC3A  73                 	db	115	;'s'
   630  00FC3B  20                 	db	32
   631  00FC3C  00                 	db	0
   632  00FC3D  45                 	db	69	;'E'
   633  00FC3E  4C                 	db	76	;'L'
   634  00FC3F  53                 	db	83	;'S'
   635  00FC40  45                 	db	69	;'E'
   636  00FC41  20                 	db	32
   637  00FC42  54                 	db	84	;'T'
   638  00FC43  4F                 	db	79	;'O'
   639  00FC44  47                 	db	71	;'G'
   640  00FC45  47                 	db	71	;'G'
   641  00FC46  4C                 	db	76	;'L'
   642  00FC47  45                 	db	69	;'E'
   643  00FC48  53                 	db	83	;'S'
   644  00FC49  20                 	db	32
   645  00FC4A  52                 	db	82	;'R'
   646  00FC4B  41                 	db	65	;'A'
   647  00FC4C  35                 	db	53	;'5'
   648  00FC4D  00                 	db	0
   649  00FC4E                     STR_72:
   650  00FC4E  41                 	db	65	;'A'
   651  00FC4F  4C                 	db	76	;'L'
   652  00FC50  47                 	db	71	;'G'
   653  00FC51  31                 	db	49	;'1'
   654  00FC52  3A                 	db	58	;':'
   655  00FC53  20                 	db	32
   656  00FC54  39                 	db	57	;'9'
   657  00FC55  20                 	db	32
   658  00FC56  50                 	db	80	;'P'
   659  00FC57  4F                 	db	79	;'O'
   660  00FC58  50                 	db	80	;'P'
   661  00FC59  4E                 	db	78	;'N'
   662  00FC5A  4F                 	db	79	;'O'
   663  00FC5B  54                 	db	84	;'T'
   664  00FC5C  41                 	db	65	;'A'
   665  00FC5D  42                 	db	66	;'B'
   666  00FC5E  00                 	db	0
   667  00FC5F                     STR_92:
   668  00FC5F  54                 	db	84	;'T'
   669  00FC60  53                 	db	83	;'S'
   670  00FC61  54                 	db	84	;'T'
   671  00FC62  3A                 	db	58	;':'
   672  00FC63  20                 	db	32
   673  00FC64  43                 	db	67	;'C'
   674  00FC65  4F                 	db	79	;'O'
   675  00FC66  4E                 	db	78	;'N'
   676  00FC67  44                 	db	68	;'D'
   677  00FC68  20                 	db	32
   678  00FC69  53                 	db	83	;'S'
   679  00FC6A  4F                 	db	79	;'O'
   680  00FC6B  4C                 	db	76	;'L'
   681  00FC6C  4E                 	db	78	;'N'
   682  00FC6D  27                 	db	39
   683  00FC6E  44                 	db	68	;'D'
   684  00FC6F  00                 	db	0
   685  00FC70                     STR_94:
   686  00FC70  54                 	db	84	;'T'
   687  00FC71  53                 	db	83	;'S'
   688  00FC72  54                 	db	84	;'T'
   689  00FC73  3A                 	db	58	;':'
   690  00FC74  20                 	db	32
   691  00FC75  50                 	db	80	;'P'
   692  00FC76  55                 	db	85	;'U'
   693  00FC77  53                 	db	83	;'S'
   694  00FC78  48                 	db	72	;'H'
   695  00FC79  20                 	db	32
   696  00FC7A  53                 	db	83	;'S'
   697  00FC7B  4F                 	db	79	;'O'
   698  00FC7C  4C                 	db	76	;'L'
   699  00FC7D  4E                 	db	78	;'N'
   700  00FC7E  27                 	db	39
   701  00FC7F  44                 	db	68	;'D'
   702  00FC80  00                 	db	0
   703  00FC81                     STR_68:
   704  00FC81  32                 	db	50	;'2'
   705  00FC82  2E                 	db	46
   706  00FC83  53                 	db	83	;'S'
   707  00FC84  4E                 	db	78	;'N'
   708  00FC85  52                 	db	82	;'R'
   709  00FC86  7C                 	db	124
   710  00FC87  34                 	db	52	;'4'
   711  00FC88  2E                 	db	46
   712  00FC89  48                 	db	72	;'H'
   713  00FC8A  49                 	db	73	;'I'
   714  00FC8B  7C                 	db	124
   715  00FC8C  35                 	db	53	;'5'
   716  00FC8D  2E                 	db	46
   717  00FC8E  4D                 	db	77	;'M'
   718  00FC8F  45                 	db	69	;'E'
   719  00FC90  44                 	db	68	;'D'
   720  00FC91  00                 	db	0
   721  00FC92                     STR_69:
   722  00FC92  42                 	db	66	;'B'
   723  00FC93  2E                 	db	46
   724  00FC94  50                 	db	80	;'P'
   725  00FC95  53                 	db	83	;'S'
   726  00FC96  48                 	db	72	;'H'
   727  00FC97  7C                 	db	124
   728  00FC98  38                 	db	56	;'8'
   729  00FC99  2E                 	db	46
   730  00FC9A  53                 	db	83	;'S'
   731  00FC9B  56                 	db	86	;'V'
   732  00FC9C  7C                 	db	124
   733  00FC9D  39                 	db	57	;'9'
   734  00FC9E  2E                 	db	46
   735  00FC9F  42                 	db	66	;'B'
   736  00FCA0  4C                 	db	76	;'L'
   737  00FCA1  4B                 	db	75	;'K'
   738  00FCA2  00                 	db	0
   739  00FCA3                     STR_127:
   740  00FCA3  45                 	db	69	;'E'
   741  00FCA4  4C                 	db	76	;'L'
   742  00FCA5  53                 	db	83	;'S'
   743  00FCA6  45                 	db	69	;'E'
   744  00FCA7  20                 	db	32
   745  00FCA8  54                 	db	84	;'T'
   746  00FCA9  4F                 	db	79	;'O'
   747  00FCAA  47                 	db	71	;'G'
   748  00FCAB  47                 	db	71	;'G'
   749  00FCAC  4C                 	db	76	;'L'
   750  00FCAD  45                 	db	69	;'E'
   751  00FCAE  53                 	db	83	;'S'
   752  00FCAF  20                 	db	32
   753  00FCB0  41                 	db	65	;'A'
   754  00FCB1  52                 	db	82	;'R'
   755  00FCB2  4D                 	db	77	;'M'
   756  00FCB3  00                 	db	0
   757  00FCB4                     STR_110:
   758  00FCB4  54                 	db	84	;'T'
   759  00FCB5  53                 	db	83	;'S'
   760  00FCB6  54                 	db	84	;'T'
   761  00FCB7  3A                 	db	58	;':'
   762  00FCB8  20                 	db	32
   763  00FCB9  42                 	db	66	;'B'
   764  00FCBA  4F                 	db	79	;'O'
   765  00FCBB  54                 	db	84	;'T'
   766  00FCBC  48                 	db	72	;'H'
   767  00FCBD  20                 	db	32
   768  00FCBE  53                 	db	83	;'S'
   769  00FCBF  45                 	db	69	;'E'
   770  00FCC0  52                 	db	82	;'R'
   771  00FCC1  56                 	db	86	;'V'
   772  00FCC2  4F                 	db	79	;'O'
   773  00FCC3  53                 	db	83	;'S'
   774  00FCC4  00                 	db	0
   775  00FCC5                     STR_41:
   776  00FCC5  4C                 	db	76	;'L'
   777  00FCC6  4F                 	db	79	;'O'
   778  00FCC7  47                 	db	71	;'G'
   779  00FCC8  20                 	db	32
   780  00FCC9  31                 	db	49	;'1'
   781  00FCCA  20                 	db	32
   782  00FCCB  20                 	db	32
   783  00FCCC  20                 	db	32
   784  00FCCD  20                 	db	32
   785  00FCCE  20                 	db	32
   786  00FCCF  20                 	db	32
   787  00FCD0  20                 	db	32
   788  00FCD1  20                 	db	32
   789  00FCD2  20                 	db	32
   790  00FCD3  20                 	db	32
   791  00FCD4  20                 	db	32
   792  00FCD5  00                 	db	0
   793  00FCD6                     STR_40:
   794  00FCD6  4C                 	db	76	;'L'
   795  00FCD7  4F                 	db	79	;'O'
   796  00FCD8  47                 	db	71	;'G'
   797  00FCD9  20                 	db	32
   798  00FCDA  32                 	db	50	;'2'
   799  00FCDB  20                 	db	32
   800  00FCDC  20                 	db	32
   801  00FCDD  20                 	db	32
   802  00FCDE  20                 	db	32
   803  00FCDF  20                 	db	32
   804  00FCE0  20                 	db	32
   805  00FCE1  20                 	db	32
   806  00FCE2  20                 	db	32
   807  00FCE3  20                 	db	32
   808  00FCE4  20                 	db	32
   809  00FCE5  20                 	db	32
   810  00FCE6  00                 	db	0
   811  00FCE7                     STR_44:
   812  00FCE7  4C                 	db	76	;'L'
   813  00FCE8  4F                 	db	79	;'O'
   814  00FCE9  47                 	db	71	;'G'
   815  00FCEA  20                 	db	32
   816  00FCEB  33                 	db	51	;'3'
   817  00FCEC  20                 	db	32
   818  00FCED  20                 	db	32
   819  00FCEE  20                 	db	32
   820  00FCEF  20                 	db	32
   821  00FCF0  20                 	db	32
   822  00FCF1  20                 	db	32
   823  00FCF2  20                 	db	32
   824  00FCF3  20                 	db	32
   825  00FCF4  20                 	db	32
   826  00FCF5  20                 	db	32
   827  00FCF6  20                 	db	32
   828  00FCF7  00                 	db	0
   829  00FCF8                     STR_48:
   830  00FCF8  4C                 	db	76	;'L'
   831  00FCF9  4F                 	db	79	;'O'
   832  00FCFA  47                 	db	71	;'G'
   833  00FCFB  20                 	db	32
   834  00FCFC  34                 	db	52	;'4'
   835  00FCFD  20                 	db	32
   836  00FCFE  20                 	db	32
   837  00FCFF  20                 	db	32
   838  00FD00  20                 	db	32
   839  00FD01  20                 	db	32
   840  00FD02  20                 	db	32
   841  00FD03  20                 	db	32
   842  00FD04  20                 	db	32
   843  00FD05  20                 	db	32
   844  00FD06  20                 	db	32
   845  00FD07  20                 	db	32
   846  00FD08  00                 	db	0
   847  00FD09                     STR_36:
   848  00FD09  33                 	db	51	;'3'
   849  00FD0A  2E                 	db	46
   850  00FD0B  20                 	db	32
   851  00FD0C  4C                 	db	76	;'L'
   852  00FD0D  4F                 	db	79	;'O'
   853  00FD0E  47                 	db	71	;'G'
   854  00FD0F  53                 	db	83	;'S'
   855  00FD10  20                 	db	32
   856  00FD11  20                 	db	32
   857  00FD12  20                 	db	32
   858  00FD13  20                 	db	32
   859  00FD14  20                 	db	32
   860  00FD15  20                 	db	32
   861  00FD16  20                 	db	32
   862  00FD17  20                 	db	32
   863  00FD18  20                 	db	32
   864  00FD19  00                 	db	0
   865  00FD1A                     STR_32:
   866  00FD1A  32                 	db	50	;'2'
   867  00FD1B  2E                 	db	46
   868  00FD1C  20                 	db	32
   869  00FD1D  53                 	db	83	;'S'
   870  00FD1E  4F                 	db	79	;'O'
   871  00FD1F  52                 	db	82	;'R'
   872  00FD20  54                 	db	84	;'T'
   873  00FD21  20                 	db	32
   874  00FD22  20                 	db	32
   875  00FD23  20                 	db	32
   876  00FD24  20                 	db	32
   877  00FD25  20                 	db	32
   878  00FD26  20                 	db	32
   879  00FD27  20                 	db	32
   880  00FD28  20                 	db	32
   881  00FD29  20                 	db	32
   882  00FD2A  00                 	db	0
   883  00FD2B                     STR_33:
   884  00FD2B  31                 	db	49	;'1'
   885  00FD2C  2E                 	db	46
   886  00FD2D  20                 	db	32
   887  00FD2E  44                 	db	68	;'D'
   888  00FD2F  41                 	db	65	;'A'
   889  00FD30  54                 	db	84	;'T'
   890  00FD31  45                 	db	69	;'E'
   891  00FD32  2F                 	db	47
   892  00FD33  54                 	db	84	;'T'
   893  00FD34  49                 	db	73	;'I'
   894  00FD35  4D                 	db	77	;'M'
   895  00FD36  45                 	db	69	;'E'
   896  00FD37  20                 	db	32
   897  00FD38  20                 	db	32
   898  00FD39  20                 	db	32
   899  00FD3A  20                 	db	32
   900  00FD3B  00                 	db	0
   901  00FD3C                     STR_24:
   902  00FD3C  20                 	db	32
   903  00FD3D  2D                 	db	45
   904  00FD3E  2D                 	db	45
   905  00FD3F  20                 	db	32
   906  00FD40  50                 	db	80	;'P'
   907  00FD41  4F                 	db	79	;'O'
   908  00FD42  50                 	db	80	;'P'
   909  00FD43  20                 	db	32
   910  00FD44  20                 	db	32
   911  00FD45  43                 	db	67	;'C'
   912  00FD46  41                 	db	65	;'A'
   913  00FD47  4E                 	db	78	;'N'
   914  00FD48  20                 	db	32
   915  00FD49  2D                 	db	45
   916  00FD4A  2D                 	db	45
   917  00FD4B  20                 	db	32
   918  00FD4C  00                 	db	0
   919  00FD4D                     STR_26:
   920  00FD4D  20                 	db	32
   921  00FD4E  2D                 	db	45
   922  00FD4F  2D                 	db	45
   923  00FD50  20                 	db	32
   924  00FD51  53                 	db	83	;'S'
   925  00FD52  4F                 	db	79	;'O'
   926  00FD53  55                 	db	85	;'U'
   927  00FD54  50                 	db	80	;'P'
   928  00FD55  20                 	db	32
   929  00FD56  43                 	db	67	;'C'
   930  00FD57  41                 	db	65	;'A'
   931  00FD58  4E                 	db	78	;'N'
   932  00FD59  20                 	db	32
   933  00FD5A  2D                 	db	45
   934  00FD5B  2D                 	db	45
   935  00FD5C  20                 	db	32
   936  00FD5D  00                 	db	0
   937  00FD5E                     STR_28:
   938  00FD5E  2D                 	db	45
   939  00FD5F  2D                 	db	45
   940  00FD60  20                 	db	32
   941  00FD61  54                 	db	84	;'T'
   942  00FD62  4F                 	db	79	;'O'
   943  00FD63  54                 	db	84	;'T'
   944  00FD64  41                 	db	65	;'A'
   945  00FD65  4C                 	db	76	;'L'
   946  00FD66  20                 	db	32
   947  00FD67  43                 	db	67	;'C'
   948  00FD68  41                 	db	65	;'A'
   949  00FD69  4E                 	db	78	;'N'
   950  00FD6A  53                 	db	83	;'S'
   951  00FD6B  20                 	db	32
   952  00FD6C  2D                 	db	45
   953  00FD6D  2D                 	db	45
   954  00FD6E  00                 	db	0
   955  00FD6F                     STR_39:
   956  00FD6F  4C                 	db	76	;'L'
   957  00FD70  4F                 	db	79	;'O'
   958  00FD71  47                 	db	71	;'G'
   959  00FD72  20                 	db	32
   960  00FD73  31                 	db	49	;'1'
   961  00FD74  20                 	db	32
   962  00FD75  20                 	db	32
   963  00FD76  20                 	db	32
   964  00FD77  20                 	db	32
   965  00FD78  20                 	db	32
   966  00FD79  20                 	db	32
   967  00FD7A  20                 	db	32
   968  00FD7B  20                 	db	32
   969  00FD7C  20                 	db	32
   970  00FD7D  20                 	db	32
   971  00FD7E  3C                 	db	60	;'<'
   972  00FD7F  00                 	db	0
   973  00FD80                     STR_42:
   974  00FD80  4C                 	db	76	;'L'
   975  00FD81  4F                 	db	79	;'O'
   976  00FD82  47                 	db	71	;'G'
   977  00FD83  20                 	db	32
   978  00FD84  32                 	db	50	;'2'
   979  00FD85  20                 	db	32
   980  00FD86  20                 	db	32
   981  00FD87  20                 	db	32
   982  00FD88  20                 	db	32
   983  00FD89  20                 	db	32
   984  00FD8A  20                 	db	32
   985  00FD8B  20                 	db	32
   986  00FD8C  20                 	db	32
   987  00FD8D  20                 	db	32
   988  00FD8E  20                 	db	32
   989  00FD8F  3C                 	db	60	;'<'
   990  00FD90  00                 	db	0
   991  00FD91                     STR_46:
   992  00FD91  4C                 	db	76	;'L'
   993  00FD92  4F                 	db	79	;'O'
   994  00FD93  47                 	db	71	;'G'
   995  00FD94  20                 	db	32
   996  00FD95  33                 	db	51	;'3'
   997  00FD96  20                 	db	32
   998  00FD97  20                 	db	32
   999  00FD98  20                 	db	32
  1000  00FD99  20                 	db	32
  1001  00FD9A  20                 	db	32
  1002  00FD9B  20                 	db	32
  1003  00FD9C  20                 	db	32
  1004  00FD9D  20                 	db	32
  1005  00FD9E  20                 	db	32
  1006  00FD9F  20                 	db	32
  1007  00FDA0  3C                 	db	60	;'<'
  1008  00FDA1  00                 	db	0
  1009  00FDA2                     STR_50:
  1010  00FDA2  4C                 	db	76	;'L'
  1011  00FDA3  4F                 	db	79	;'O'
  1012  00FDA4  47                 	db	71	;'G'
  1013  00FDA5  20                 	db	32
  1014  00FDA6  34                 	db	52	;'4'
  1015  00FDA7  20                 	db	32
  1016  00FDA8  20                 	db	32
  1017  00FDA9  20                 	db	32
  1018  00FDAA  20                 	db	32
  1019  00FDAB  20                 	db	32
  1020  00FDAC  20                 	db	32
  1021  00FDAD  20                 	db	32
  1022  00FDAE  20                 	db	32
  1023  00FDAF  20                 	db	32
  1024  00FDB0  20                 	db	32
  1025  00FDB1  3C                 	db	60	;'<'
  1026  00FDB2  00                 	db	0
  1027  00FDB3                     STR_38:
  1028  00FDB3  33                 	db	51	;'3'
  1029  00FDB4  2E                 	db	46
  1030  00FDB5  20                 	db	32
  1031  00FDB6  4C                 	db	76	;'L'
  1032  00FDB7  4F                 	db	79	;'O'
  1033  00FDB8  47                 	db	71	;'G'
  1034  00FDB9  53                 	db	83	;'S'
  1035  00FDBA  20                 	db	32
  1036  00FDBB  20                 	db	32
  1037  00FDBC  20                 	db	32
  1038  00FDBD  20                 	db	32
  1039  00FDBE  20                 	db	32
  1040  00FDBF  20                 	db	32
  1041  00FDC0  20                 	db	32
  1042  00FDC1  20                 	db	32
  1043  00FDC2  3C                 	db	60	;'<'
  1044  00FDC3  00                 	db	0
  1045  00FDC4                     STR_34:
  1046  00FDC4  32                 	db	50	;'2'
  1047  00FDC5  2E                 	db	46
  1048  00FDC6  20                 	db	32
  1049  00FDC7  53                 	db	83	;'S'
  1050  00FDC8  4F                 	db	79	;'O'
  1051  00FDC9  52                 	db	82	;'R'
  1052  00FDCA  54                 	db	84	;'T'
  1053  00FDCB  20                 	db	32
  1054  00FDCC  20                 	db	32
  1055  00FDCD  20                 	db	32
  1056  00FDCE  20                 	db	32
  1057  00FDCF  20                 	db	32
  1058  00FDD0  20                 	db	32
  1059  00FDD1  20                 	db	32
  1060  00FDD2  20                 	db	32
  1061  00FDD3  3C                 	db	60	;'<'
  1062  00FDD4  00                 	db	0
  1063  00FDD5                     STR_31:
  1064  00FDD5  31                 	db	49	;'1'
  1065  00FDD6  2E                 	db	46
  1066  00FDD7  20                 	db	32
  1067  00FDD8  44                 	db	68	;'D'
  1068  00FDD9  41                 	db	65	;'A'
  1069  00FDDA  54                 	db	84	;'T'
  1070  00FDDB  45                 	db	69	;'E'
  1071  00FDDC  2F                 	db	47
  1072  00FDDD  54                 	db	84	;'T'
  1073  00FDDE  49                 	db	73	;'I'
  1074  00FDDF  4D                 	db	77	;'M'
  1075  00FDE0  45                 	db	69	;'E'
  1076  00FDE1  20                 	db	32
  1077  00FDE2  20                 	db	32
  1078  00FDE3  20                 	db	32
  1079  00FDE4  3C                 	db	60	;'<'
  1080  00FDE5  00                 	db	0
  1081  00FDE6                     STR_6:
  1082  00FDE6  50                 	db	80	;'P'
  1083  00FDE7  41                 	db	65	;'A'
  1084  00FDE8  55                 	db	85	;'U'
  1085  00FDE9  53                 	db	83	;'S'
  1086  00FDEA  45                 	db	69	;'E'
  1087  00FDEB  20                 	db	32
  1088  00FDEC  3C                 	db	60	;'<'
  1089  00FDED  20                 	db	32
  1090  00FDEE  7C                 	db	124
  1091  00FDEF  20                 	db	32
  1092  00FDF0  42                 	db	66	;'B'
  1093  00FDF1  41                 	db	65	;'A'
  1094  00FDF2  43                 	db	67	;'C'
  1095  00FDF3  4B                 	db	75	;'K'
  1096  00FDF4  20                 	db	32
  1097  00FDF5  3E                 	db	62	;'>'
  1098  00FDF6  00                 	db	0
  1099  00FDF7                     STR_30:
  1100  00FDF7  50                 	db	80	;'P'
  1101  00FDF8  55                 	db	85	;'U'
  1102  00FDF9  53                 	db	83	;'S'
  1103  00FDFA  48                 	db	72	;'H'
  1104  00FDFB  20                 	db	32
  1105  00FDFC  54                 	db	84	;'T'
  1106  00FDFD  4F                 	db	79	;'O'
  1107  00FDFE  20                 	db	32
  1108  00FDFF  43                 	db	67	;'C'
  1109  00FE00  4F                 	db	79	;'O'
  1110  00FE01  4E                 	db	78	;'N'
  1111  00FE02  54                 	db	84	;'T'
  1112  00FE03  49                 	db	73	;'I'
  1113  00FE04  4E                 	db	78	;'N'
  1114  00FE05  55                 	db	85	;'U'
  1115  00FE06  45                 	db	69	;'E'
  1116  00FE07  00                 	db	0
  1117  00FE08                     STR_27:
  1118  00FE08  4E                 	db	78	;'N'
  1119  00FE09  4C                 	db	76	;'L'
  1120  00FE0A  41                 	db	65	;'A'
  1121  00FE0B  42                 	db	66	;'B'
  1122  00FE0C  3A                 	db	58	;':'
  1123  00FE0D  20                 	db	32
  1124  00FE0E  25                 	db	37
  1125  00FE0F  64                 	db	100	;'d'
  1126  00FE10  7C                 	db	124
  1127  00FE11  4C                 	db	76	;'L'
  1128  00FE12  41                 	db	65	;'A'
  1129  00FE13  42                 	db	66	;'B'
  1130  00FE14  3A                 	db	58	;':'
  1131  00FE15  20                 	db	32
  1132  00FE16  25                 	db	37
  1133  00FE17  64                 	db	100	;'d'
  1134  00FE18  00                 	db	0
  1135  00FE19                     STR_25:
  1136  00FE19  4E                 	db	78	;'N'
  1137  00FE1A  54                 	db	84	;'T'
  1138  00FE1B  41                 	db	65	;'A'
  1139  00FE1C  42                 	db	66	;'B'
  1140  00FE1D  3A                 	db	58	;':'
  1141  00FE1E  20                 	db	32
  1142  00FE1F  25                 	db	37
  1143  00FE20  64                 	db	100	;'d'
  1144  00FE21  7C                 	db	124
  1145  00FE22  54                 	db	84	;'T'
  1146  00FE23  41                 	db	65	;'A'
  1147  00FE24  42                 	db	66	;'B'
  1148  00FE25  3A                 	db	58	;':'
  1149  00FE26  20                 	db	32
  1150  00FE27  25                 	db	37
  1151  00FE28  64                 	db	100	;'d'
  1152  00FE29  00                 	db	0
  1153  00FE2A                     STR_83:
  1154  00FE2A  4D                 	db	77	;'M'
  1155  00FE2B  41                 	db	65	;'A'
  1156  00FE2C  47                 	db	71	;'G'
  1157  00FE2D  5F                 	db	95	;'_'
  1158  00FE2E  73                 	db	115	;'s'
  1159  00FE2F  69                 	db	105	;'i'
  1160  00FE30  67                 	db	103	;'g'
  1161  00FE31  6E                 	db	110	;'n'
  1162  00FE32  61                 	db	97	;'a'
  1163  00FE33  6C                 	db	108	;'l'
  1164  00FE34  3A                 	db	58	;':'
  1165  00FE35  20                 	db	32
  1166  00FE36  25                 	db	37
  1167  00FE37  64                 	db	100	;'d'
  1168  00FE38  20                 	db	32
  1169  00FE39  00                 	db	0
  1170  00FE3A                     STR_103:
  1171  00FE3A  54                 	db	84	;'T'
  1172  00FE3B  53                 	db	83	;'S'
  1173  00FE3C  54                 	db	84	;'T'
  1174  00FE3D  3A                 	db	58	;':'
  1175  00FE3E  20                 	db	32
  1176  00FE3F  54                 	db	84	;'T'
  1177  00FE40  49                 	db	73	;'I'
  1178  00FE41  4C                 	db	76	;'L'
  1179  00FE42  54                 	db	84	;'T'
  1180  00FE43  20                 	db	32
  1181  00FE44  53                 	db	83	;'S'
  1182  00FE45  45                 	db	69	;'E'
  1183  00FE46  52                 	db	82	;'R'
  1184  00FE47  56                 	db	86	;'V'
  1185  00FE48  4F                 	db	79	;'O'
  1186  00FE49  00                 	db	0
  1187  00FE4A                     STR_4:
  1188  00FE4A  44                 	db	68	;'D'
  1189  00FE4B  49                 	db	73	;'I'
  1190  00FE4C  44                 	db	68	;'D'
  1191  00FE4D  4E                 	db	78	;'N'
  1192  00FE4E  27                 	db	39
  1193  00FE4F  54                 	db	84	;'T'
  1194  00FE50  20                 	db	32
  1195  00FE51  43                 	db	67	;'C'
  1196  00FE52  4F                 	db	79	;'O'
  1197  00FE53  4D                 	db	77	;'M'
  1198  00FE54  50                 	db	80	;'P'
  1199  00FE55  4C                 	db	76	;'L'
  1200  00FE56  45                 	db	69	;'E'
  1201  00FE57  54                 	db	84	;'T'
  1202  00FE58  45                 	db	69	;'E'
  1203  00FE59  00                 	db	0
  1204  00FE5A                     STR_80:
  1205  00FE5A  49                 	db	73	;'I'
  1206  00FE5B  52                 	db	82	;'R'
  1207  00FE5C  5F                 	db	95	;'_'
  1208  00FE5D  73                 	db	115	;'s'
  1209  00FE5E  69                 	db	105	;'i'
  1210  00FE5F  67                 	db	103	;'g'
  1211  00FE60  6E                 	db	110	;'n'
  1212  00FE61  61                 	db	97	;'a'
  1213  00FE62  6C                 	db	108	;'l'
  1214  00FE63  3A                 	db	58	;':'
  1215  00FE64  20                 	db	32
  1216  00FE65  25                 	db	37
  1217  00FE66  64                 	db	100	;'d'
  1218  00FE67  20                 	db	32
  1219  00FE68  00                 	db	0
  1220  00FE69                     STR_109:
  1221  00FE69  43                 	db	67	;'C'
  1222  00FE6A  41                 	db	65	;'A'
  1223  00FE6B  4D                 	db	77	;'M'
  1224  00FE6C  20                 	db	32
  1225  00FE6D  44                 	db	68	;'D'
  1226  00FE6E  57                 	db	87	;'W'
  1227  00FE6F  4E                 	db	78	;'N'
  1228  00FE70  20                 	db	32
  1229  00FE71  7C                 	db	124
  1230  00FE72  52                 	db	82	;'R'
  1231  00FE73  43                 	db	67	;'C'
  1232  00FE74  30                 	db	48	;'0'
  1233  00FE75  3D                 	db	61	;'='
  1234  00FE76  30                 	db	48	;'0'
  1235  00FE77  00                 	db	0
  1236  00FE78                     STR_108:
  1237  00FE78  43                 	db	67	;'C'
  1238  00FE79  41                 	db	65	;'A'
  1239  00FE7A  4D                 	db	77	;'M'
  1240  00FE7B  20                 	db	32
  1241  00FE7C  55                 	db	85	;'U'
  1242  00FE7D  50                 	db	80	;'P'
  1243  00FE7E  20                 	db	32
  1244  00FE7F  20                 	db	32
  1245  00FE80  7C                 	db	124
  1246  00FE81  52                 	db	82	;'R'
  1247  00FE82  43                 	db	67	;'C'
  1248  00FE83  30                 	db	48	;'0'
  1249  00FE84  3D                 	db	61	;'='
  1250  00FE85  31                 	db	49	;'1'
  1251  00FE86  00                 	db	0
  1252  00FE87                     STR_82:
  1253  00FE87  54                 	db	84	;'T'
  1254  00FE88  53                 	db	83	;'S'
  1255  00FE89  54                 	db	84	;'T'
  1256  00FE8A  3A                 	db	58	;':'
  1257  00FE8B  20                 	db	32
  1258  00FE8C  4D                 	db	77	;'M'
  1259  00FE8D  41                 	db	65	;'A'
  1260  00FE8E  47                 	db	71	;'G'
  1261  00FE8F  4E                 	db	78	;'N'
  1262  00FE90  45                 	db	69	;'E'
  1263  00FE91  54                 	db	84	;'T'
  1264  00FE92  49                 	db	73	;'I'
  1265  00FE93  53                 	db	83	;'S'
  1266  00FE94  4D                 	db	77	;'M'
  1267  00FE95  00                 	db	0
  1268  00FE96                     STR_107:
  1269  00FE96  54                 	db	84	;'T'
  1270  00FE97  53                 	db	83	;'S'
  1271  00FE98  54                 	db	84	;'T'
  1272  00FE99  3A                 	db	58	;':'
  1273  00FE9A  20                 	db	32
  1274  00FE9B  43                 	db	67	;'C'
  1275  00FE9C  41                 	db	65	;'A'
  1276  00FE9D  4D                 	db	77	;'M'
  1277  00FE9E  20                 	db	32
  1278  00FE9F  53                 	db	83	;'S'
  1279  00FEA0  45                 	db	69	;'E'
  1280  00FEA1  52                 	db	82	;'R'
  1281  00FEA2  56                 	db	86	;'V'
  1282  00FEA3  4F                 	db	79	;'O'
  1283  00FEA4  00                 	db	0
  1284  00FEA5                     STR_96:
  1285  00FEA5  54                 	db	84	;'T'
  1286  00FEA6  53                 	db	83	;'S'
  1287  00FEA7  54                 	db	84	;'T'
  1288  00FEA8  3A                 	db	58	;':'
  1289  00FEA9  20                 	db	32
  1290  00FEAA  50                 	db	80	;'P'
  1291  00FEAB  41                 	db	65	;'A'
  1292  00FEAC  4E                 	db	78	;'N'
  1293  00FEAD  20                 	db	32
  1294  00FEAE  53                 	db	83	;'S'
  1295  00FEAF  45                 	db	69	;'E'
  1296  00FEB0  52                 	db	82	;'R'
  1297  00FEB1  56                 	db	86	;'V'
  1298  00FEB2  4F                 	db	79	;'O'
  1299  00FEB3  00                 	db	0
  1300  00FEB4                     STR_75:
  1301  00FEB4  41                 	db	65	;'A'
  1302  00FEB5  4C                 	db	76	;'L'
  1303  00FEB6  47                 	db	71	;'G'
  1304  00FEB7  34                 	db	52	;'4'
  1305  00FEB8  3A                 	db	58	;':'
  1306  00FEB9  20                 	db	32
  1307  00FEBA  41                 	db	65	;'A'
  1308  00FEBB  4C                 	db	76	;'L'
  1309  00FEBC  4C                 	db	76	;'L'
  1310  00FEBD  20                 	db	32
  1311  00FEBE  43                 	db	67	;'C'
  1312  00FEBF  41                 	db	65	;'A'
  1313  00FEC0  4E                 	db	78	;'N'
  1314  00FEC1  53                 	db	83	;'S'
  1315  00FEC2  00                 	db	0
  1316  00FEC3                     STR_90:
  1317  00FEC3  54                 	db	84	;'T'
  1318  00FEC4  53                 	db	83	;'S'
  1319  00FEC5  54                 	db	84	;'T'
  1320  00FEC6  3A                 	db	58	;':'
  1321  00FEC7  20                 	db	32
  1322  00FEC8  44                 	db	68	;'D'
  1323  00FEC9  43                 	db	67	;'C'
  1324  00FECA  20                 	db	32
  1325  00FECB  4D                 	db	77	;'M'
  1326  00FECC  4F                 	db	79	;'O'
  1327  00FECD  54                 	db	84	;'T'
  1328  00FECE  4F                 	db	79	;'O'
  1329  00FECF  52                 	db	82	;'R'
  1330  00FED0  53                 	db	83	;'S'
  1331  00FED1  00                 	db	0
  1332  00FED2                     STR_70:
  1333  00FED2  41                 	db	65	;'A'
  1334  00FED3  4C                 	db	76	;'L'
  1335  00FED4  47                 	db	71	;'G'
  1336  00FED5  4F                 	db	79	;'O'
  1337  00FED6  52                 	db	82	;'R'
  1338  00FED7  49                 	db	73	;'I'
  1339  00FED8  54                 	db	84	;'T'
  1340  00FED9  48                 	db	72	;'H'
  1341  00FEDA  4D                 	db	77	;'M'
  1342  00FEDB  20                 	db	32
  1343  00FEDC  54                 	db	84	;'T'
  1344  00FEDD  45                 	db	69	;'E'
  1345  00FEDE  53                 	db	83	;'S'
  1346  00FEDF  54                 	db	84	;'T'
  1347  00FEE0  00                 	db	0
  1348  00FEE1                     STR_91:
  1349  00FEE1  50                 	db	80	;'P'
  1350  00FEE2  49                 	db	73	;'I'
  1351  00FEE3  4E                 	db	78	;'N'
  1352  00FEE4  20                 	db	32
  1353  00FEE5  52                 	db	82	;'R'
  1354  00FEE6  41                 	db	65	;'A'
  1355  00FEE7  35                 	db	53	;'5'
  1356  00FEE8  20                 	db	32
  1357  00FEE9  48                 	db	72	;'H'
  1358  00FEEA  49                 	db	73	;'I'
  1359  00FEEB  47                 	db	71	;'G'
  1360  00FEEC  48                 	db	72	;'H'
  1361  00FEED  2E                 	db	46
  1362  00FEEE  00                 	db	0
  1363  00FEEF                     STR_73:
  1364  00FEEF  41                 	db	65	;'A'
  1365  00FEF0  4C                 	db	76	;'L'
  1366  00FEF1  47                 	db	71	;'G'
  1367  00FEF2  32                 	db	50	;'2'
  1368  00FEF3  3A                 	db	58	;':'
  1369  00FEF4  20                 	db	32
  1370  00FEF5  31                 	db	49	;'1'
  1371  00FEF6  32                 	db	50	;'2'
  1372  00FEF7  20                 	db	32
  1373  00FEF8  43                 	db	67	;'C'
  1374  00FEF9  41                 	db	65	;'A'
  1375  00FEFA  4E                 	db	78	;'N'
  1376  00FEFB  53                 	db	83	;'S'
  1377  00FEFC  00                 	db	0
  1378  00FEFD                     STR_76:
  1379  00FEFD  41                 	db	65	;'A'
  1380  00FEFE  4C                 	db	76	;'L'
  1381  00FEFF  47                 	db	71	;'G'
  1382  00FF00  35                 	db	53	;'5'
  1383  00FF01  3A                 	db	58	;':'
  1384  00FF02  20                 	db	32
  1385  00FF03  4E                 	db	78	;'N'
  1386  00FF04  4F                 	db	79	;'O'
  1387  00FF05  20                 	db	32
  1388  00FF06  43                 	db	67	;'C'
  1389  00FF07  41                 	db	65	;'A'
  1390  00FF08  4E                 	db	78	;'N'
  1391  00FF09  53                 	db	83	;'S'
  1392  00FF0A  00                 	db	0
  1393  00FF0B                     STR_71:
  1394  00FF0B  50                 	db	80	;'P'
  1395  00FF0C  55                 	db	85	;'U'
  1396  00FF0D  53                 	db	83	;'S'
  1397  00FF0E  48                 	db	72	;'H'
  1398  00FF0F  20                 	db	32
  1399  00FF10  54                 	db	84	;'T'
  1400  00FF11  4F                 	db	79	;'O'
  1401  00FF12  20                 	db	32
  1402  00FF13  53                 	db	83	;'S'
  1403  00FF14  54                 	db	84	;'T'
  1404  00FF15  41                 	db	65	;'A'
  1405  00FF16  52                 	db	82	;'R'
  1406  00FF17  54                 	db	84	;'T'
  1407  00FF18  00                 	db	0
  1408  00FF19                     STR_23:
  1409  00FF19  25                 	db	37
  1410  00FF1A  64                 	db	100	;'d'
  1411  00FF1B  20                 	db	32
  1412  00FF1C  4D                 	db	77	;'M'
  1413  00FF1D  49                 	db	73	;'I'
  1414  00FF1E  4E                 	db	78	;'N'
  1415  00FF1F  20                 	db	32
  1416  00FF20  25                 	db	37
  1417  00FF21  64                 	db	100	;'d'
  1418  00FF22  20                 	db	32
  1419  00FF23  53                 	db	83	;'S'
  1420  00FF24  45                 	db	69	;'E'
  1421  00FF25  43                 	db	67	;'C'
  1422  00FF26  00                 	db	0
  1423  00FF27                     STR_2:
  1424  00FF27  54                 	db	84	;'T'
  1425  00FF28  49                 	db	73	;'I'
  1426  00FF29  4D                 	db	77	;'M'
  1427  00FF2A  45                 	db	69	;'E'
  1428  00FF2B  3A                 	db	58	;':'
  1429  00FF2C  20                 	db	32
  1430  00FF2D  25                 	db	37
  1431  00FF2E  64                 	db	100	;'d'
  1432  00FF2F  3A                 	db	58	;':'
  1433  00FF30  25                 	db	37
  1434  00FF31  30                 	db	48	;'0'
  1435  00FF32  32                 	db	50	;'2'
  1436  00FF33  64                 	db	100	;'d'
  1437  00FF34  00                 	db	0
  1438  00FF35                     STR_79:
  1439  00FF35  54                 	db	84	;'T'
  1440  00FF36  53                 	db	83	;'S'
  1441  00FF37  54                 	db	84	;'T'
  1442  00FF38  3A                 	db	58	;':'
  1443  00FF39  20                 	db	32
  1444  00FF3A  49                 	db	73	;'I'
  1445  00FF3B  52                 	db	82	;'R'
  1446  00FF3C  20                 	db	32
  1447  00FF3D  53                 	db	83	;'S'
  1448  00FF3E  4E                 	db	78	;'N'
  1449  00FF3F  53                 	db	83	;'S'
  1450  00FF40  52                 	db	82	;'R'
  1451  00FF41  00                 	db	0
  1452  00FF42                     STR_65:
  1453  00FF42  54                 	db	84	;'T'
  1454  00FF43  49                 	db	73	;'I'
  1455  00FF44  4D                 	db	77	;'M'
  1456  00FF45  45                 	db	69	;'E'
  1457  00FF46  20                 	db	32
  1458  00FF47  25                 	db	37
  1459  00FF48  64                 	db	100	;'d'
  1460  00FF49  3A                 	db	58	;':'
  1461  00FF4A  25                 	db	37
  1462  00FF4B  30                 	db	48	;'0'
  1463  00FF4C  32                 	db	50	;'2'
  1464  00FF4D  64                 	db	100	;'d'
  1465  00FF4E  00                 	db	0
  1466  00FF4F                     STR_74:
  1467  00FF4F  41                 	db	65	;'A'
  1468  00FF50  4C                 	db	76	;'L'
  1469  00FF51  47                 	db	71	;'G'
  1470  00FF52  33                 	db	51	;'3'
  1471  00FF53  3A                 	db	58	;':'
  1472  00FF54  20                 	db	32
  1473  00FF55  31                 	db	49	;'1'
  1474  00FF56  20                 	db	32
  1475  00FF57  43                 	db	67	;'C'
  1476  00FF58  41                 	db	65	;'A'
  1477  00FF59  4E                 	db	78	;'N'
  1478  00FF5A  00                 	db	0
  1479  00FF5B                     STR_93:
  1480  00FF5B  50                 	db	80	;'P'
  1481  00FF5C  49                 	db	73	;'I'
  1482  00FF5D  4E                 	db	78	;'N'
  1483  00FF5E  20                 	db	32
  1484  00FF5F  52                 	db	82	;'R'
  1485  00FF60  41                 	db	65	;'A'
  1486  00FF61  33                 	db	51	;'3'
  1487  00FF62  2E                 	db	46
  1488  00FF63  2E                 	db	46
  1489  00FF64  2E                 	db	46
  1490  00FF65  00                 	db	0
  1491  00FF66                     STR_95:
  1492  00FF66  50                 	db	80	;'P'
  1493  00FF67  49                 	db	73	;'I'
  1494  00FF68  4E                 	db	78	;'N'
  1495  00FF69  20                 	db	32
  1496  00FF6A  52                 	db	82	;'R'
  1497  00FF6B  41                 	db	65	;'A'
  1498  00FF6C  34                 	db	52	;'4'
  1499  00FF6D  2E                 	db	46
  1500  00FF6E  2E                 	db	46
  1501  00FF6F  2E                 	db	46
  1502  00FF70  00                 	db	0
  1503  00FF71                     STR_113:
  1504  00FF71  50                 	db	80	;'P'
  1505  00FF72  55                 	db	85	;'U'
  1506  00FF73  53                 	db	83	;'S'
  1507  00FF74  48                 	db	72	;'H'
  1508  00FF75  45                 	db	69	;'E'
  1509  00FF76  52                 	db	82	;'R'
  1510  00FF77  20                 	db	32
  1511  00FF78  54                 	db	84	;'T'
  1512  00FF79  53                 	db	83	;'S'
  1513  00FF7A  54                 	db	84	;'T'
  1514  00FF7B  00                 	db	0
  1515  00FF7C                     STR_64:
  1516  00FF7C  53                 	db	83	;'S'
  1517  00FF7D  4F                 	db	79	;'O'
  1518  00FF7E  52                 	db	82	;'R'
  1519  00FF7F  54                 	db	84	;'T'
  1520  00FF80  49                 	db	73	;'I'
  1521  00FF81  4E                 	db	78	;'N'
  1522  00FF82  47                 	db	71	;'G'
  1523  00FF83  2E                 	db	46
  1524  00FF84  2E                 	db	46
  1525  00FF85  2E                 	db	46
  1526  00FF86  00                 	db	0
  1527  00FF87                     STR_84:
  1528  00FF87  54                 	db	84	;'T'
  1529  00FF88  53                 	db	83	;'S'
  1530  00FF89  54                 	db	84	;'T'
  1531  00FF8A  3A                 	db	58	;':'
  1532  00FF8B  20                 	db	32
  1533  00FF8C  43                 	db	67	;'C'
  1534  00FF8D  4F                 	db	79	;'O'
  1535  00FF8E  4E                 	db	78	;'N'
  1536  00FF8F  44                 	db	68	;'D'
  1537  00FF90  00                 	db	0
  1538  00FF91                     STR_88:
  1539  00FF91  41                 	db	65	;'A'
  1540  00FF92  43                 	db	67	;'C'
  1541  00FF93  54                 	db	84	;'T'
  1542  00FF94  55                 	db	85	;'U'
  1543  00FF95  41                 	db	65	;'A'
  1544  00FF96  54                 	db	84	;'T'
  1545  00FF97  4F                 	db	79	;'O'
  1546  00FF98  52                 	db	82	;'R'
  1547  00FF99  53                 	db	83	;'S'
  1548  00FF9A  00                 	db	0
  1549  00FF9B                     STR_22:
  1550  00FF9B  44                 	db	68	;'D'
  1551  00FF9C  55                 	db	85	;'U'
  1552  00FF9D  52                 	db	82	;'R'
  1553  00FF9E  41                 	db	65	;'A'
  1554  00FF9F  54                 	db	84	;'T'
  1555  00FFA0  49                 	db	73	;'I'
  1556  00FFA1  4F                 	db	79	;'O'
  1557  00FFA2  4E                 	db	78	;'N'
  1558  00FFA3  3A                 	db	58	;':'
  1559  00FFA4  00                 	db	0
  1560  00FFA5                     STR_86:
  1561  00FFA5  43                 	db	67	;'C'
  1562  00FFA6  4F                 	db	79	;'O'
  1563  00FFA7  4E                 	db	78	;'N'
  1564  00FFA8  44                 	db	68	;'D'
  1565  00FFA9  3A                 	db	58	;':'
  1566  00FFAA  20                 	db	32
  1567  00FFAB  25                 	db	37
  1568  00FFAC  64                 	db	100	;'d'
  1569  00FFAD  00                 	db	0
  1570  00FFAE                     STR_77:
  1571  00FFAE  53                 	db	83	;'S'
  1572  00FFAF  45                 	db	69	;'E'
  1573  00FFB0  4E                 	db	78	;'N'
  1574  00FFB1  53                 	db	83	;'S'
  1575  00FFB2  4F                 	db	79	;'O'
  1576  00FFB3  52                 	db	82	;'R'
  1577  00FFB4  53                 	db	83	;'S'
  1578  00FFB5  00                 	db	0
  1579  00FFB6                     STR_128:
  1580  00FFB6  28                 	db	40
  1581  00FFB7  6E                 	db	110	;'n'
  1582  00FFB8  75                 	db	117	;'u'
  1583  00FFB9  6C                 	db	108	;'l'
  1584  00FFBA  6C                 	db	108	;'l'
  1585  00FFBB  29                 	db	41
  1586  00FFBC  00                 	db	0
  1587  00FFBD                     STR_67:
  1588  00FFBD  46                 	db	70	;'F'
  1589  00FFBE  41                 	db	65	;'A'
  1590  00FFBF  49                 	db	73	;'I'
  1591  00FFC0  4C                 	db	76	;'L'
  1592  00FFC1  45                 	db	69	;'E'
  1593  00FFC2  44                 	db	68	;'D'
  1594  00FFC3  00                 	db	0
  1595  00FFC4                     STR_7:
  1596  00FFC4  53                 	db	83	;'S'
  1597  00FFC5  54                 	db	84	;'T'
  1598  00FFC6  41                 	db	65	;'A'
  1599  00FFC7  52                 	db	82	;'R'
  1600  00FFC8  54                 	db	84	;'T'
  1601  00FFC9  3A                 	db	58	;':'
  1602  00FFCA  00                 	db	0
  1603  00FFCB                     STR_9:
  1604  00FFCB  46                 	db	70	;'F'
  1605  00FFCC  45                 	db	69	;'E'
  1606  00FFCD  42                 	db	66	;'B'
  1607  00FFCE  00                 	db	0
  1608  00FFCF                     STR_19:
  1609  00FFCF  44                 	db	68	;'D'
  1610  00FFD0  45                 	db	69	;'E'
  1611  00FFD1  43                 	db	67	;'C'
  1612  00FFD2  00                 	db	0
  1613  00FFD3                     STR_15:
  1614  00FFD3  41                 	db	65	;'A'
  1615  00FFD4  55                 	db	85	;'U'
  1616  00FFD5  47                 	db	71	;'G'
  1617  00FFD6  00                 	db	0
  1618  00FFD7                     STR_14:
  1619  00FFD7  4A                 	db	74	;'J'
  1620  00FFD8  55                 	db	85	;'U'
  1621  00FFD9  4C                 	db	76	;'L'
  1622  00FFDA  00                 	db	0
  1623  00FFDB                     STR_8:
  1624  00FFDB  4A                 	db	74	;'J'
  1625  00FFDC  41                 	db	65	;'A'
  1626  00FFDD  4E                 	db	78	;'N'
  1627  00FFDE  00                 	db	0
  1628  00FFDF                     STR_13:
  1629  00FFDF  4A                 	db	74	;'J'
  1630  00FFE0  55                 	db	85	;'U'
  1631  00FFE1  4E                 	db	78	;'N'
  1632  00FFE2  00                 	db	0
  1633  00FFE3                     STR_16:
  1634  00FFE3  53                 	db	83	;'S'
  1635  00FFE4  45                 	db	69	;'E'
  1636  00FFE5  50                 	db	80	;'P'
  1637  00FFE6  00                 	db	0
  1638  00FFE7                     STR_10:
  1639  00FFE7  4D                 	db	77	;'M'
  1640  00FFE8  41                 	db	65	;'A'
  1641  00FFE9  52                 	db	82	;'R'
  1642  00FFEA  00                 	db	0
  1643  00FFEB                     STR_11:
  1644  00FFEB  41                 	db	65	;'A'
  1645  00FFEC  50                 	db	80	;'P'
  1646  00FFED  52                 	db	82	;'R'
  1647  00FFEE  00                 	db	0
  1648  00FFEF                     STR_20:
  1649  00FFEF  45                 	db	69	;'E'
  1650  00FFF0  52                 	db	82	;'R'
  1651  00FFF1  52                 	db	82	;'R'
  1652  00FFF2  00                 	db	0
  1653  00FFF3                     STR_17:
  1654  00FFF3  4F                 	db	79	;'O'
  1655  00FFF4  43                 	db	67	;'C'
  1656  00FFF5  54                 	db	84	;'T'
  1657  00FFF6  00                 	db	0
  1658  00FFF7                     STR_18:
  1659  00FFF7  4E                 	db	78	;'N'
  1660  00FFF8  4F                 	db	79	;'O'
  1661  00FFF9  56                 	db	86	;'V'
  1662  00FFFA  00                 	db	0
  1663  00FFFB                     STR_12:
  1664  00FFFB  4D                 	db	77	;'M'
  1665  00FFFC  41                 	db	65	;'A'
  1666  00FFFD  59                 	db	89	;'Y'
  1667  00FFFE  00                 	db	0
  1668  0000                     
  1669                           ; #config settings
  1670  00FFFF  00                 	db	0	; dummy byte at the end
  1671  0000                     
  1672                           	psect	cinit
  1673  004C62                     __pcinit:
  1674                           	opt stack 0
  1675  004C62                     start_initialization:
  1676                           	opt stack 0
  1677  004C62                     __initialization:
  1678                           	opt stack 0
  1679                           
  1680                           ; Initialize objects allocated to BANK1 (8 bytes)
  1681                           ; load TBLPTR registers with __pidataBANK1
  1682  004C62  0EC6               	movlw	low __pidataBANK1
  1683  004C64  6EF6               	movwf	tblptrl,c
  1684  004C66  0E53               	movlw	high __pidataBANK1
  1685  004C68  6EF7               	movwf	tblptrh,c
  1686  004C6A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1687  004C6C  6EF8               	movwf	tblptru,c
  1688  004C6E  EE01  F041         	lfsr	0,__pdataBANK1
  1689  004C72  EE10 F008          	lfsr	1,8
  1690  004C76                     copy_data0:
  1691  004C76  0009               	tblrd		*+
  1692  004C78  CFF5 FFEE          	movff	tablat,postinc0
  1693  004C7C  50E5               	movf	postdec1,w,c
  1694  004C7E  50E1               	movf	fsr1l,w,c
  1695  004C80  E1FA               	bnz	copy_data0
  1696                           
  1697                           ; Clear objects allocated to BANK1 (65 bytes)
  1698  004C82  EE01  F000         	lfsr	0,__pbssBANK1
  1699  004C86  0E41               	movlw	65
  1700  004C88                     clear_0:
  1701  004C88  6AEE               	clrf	postinc0,c
  1702  004C8A  06E8               	decf	wreg,f,c
  1703  004C8C  E1FD               	bnz	clear_0
  1704                           
  1705                           ; Clear objects allocated to BANK0 (38 bytes)
  1706  004C8E  EE00  F0DA         	lfsr	0,__pbssBANK0
  1707  004C92  0E26               	movlw	38
  1708  004C94                     clear_1:
  1709  004C94  6AEE               	clrf	postinc0,c
  1710  004C96  06E8               	decf	wreg,f,c
  1711  004C98  E1FD               	bnz	clear_1
  1712                           
  1713                           ; Clear objects allocated to COMRAM (35 bytes)
  1714  004C9A  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1715  004C9E  0E23               	movlw	35
  1716  004CA0                     clear_2:
  1717  004CA0  6AEE               	clrf	postinc0,c
  1718  004CA2  06E8               	decf	wreg,f,c
  1719  004CA4  E1FD               	bnz	clear_2
  1720  004CA6                     end_of_initialization:
  1721                           	opt stack 0
  1722  004CA6                     __end_of__initialization:
  1723                           	opt stack 0
  1724  004CA6  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1725  004CA8  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1726  004CAA  0100               	movlb	0
  1727  004CAC  EFAE  F020         	goto	_main	;jump to C main() function
  1728                           tblptru	equ	0xFF8
  1729                           tblptrh	equ	0xFF7
  1730                           tblptrl	equ	0xFF6
  1731                           tablat	equ	0xFF5
  1732                           postinc0	equ	0xFEE
  1733                           wreg	equ	0xFE8
  1734                           postdec1	equ	0xFE5
  1735                           fsr1l	equ	0xFE1
  1736                           
  1737                           	psect	bssCOMRAM
  1738  00005B                     __pbssCOMRAM:
  1739                           	opt stack 0
  1740  00005B                     _back:
  1741                           	opt stack 0
  1742  00005B                     	ds	2
  1743  00005D                     _down:
  1744                           	opt stack 0
  1745  00005D                     	ds	2
  1746  00005F                     _enter:
  1747                           	opt stack 0
  1748  00005F                     	ds	2
  1749  000061                     _f_panning_to_bin:
  1750                           	opt stack 0
  1751  000061                     	ds	2
  1752  000063                     _log_count_can_no_lab:
  1753                           	opt stack 0
  1754  000063                     	ds	2
  1755  000065                     _log_count_can_w_lab:
  1756                           	opt stack 0
  1757  000065                     	ds	2
  1758  000067                     _log_count_pop_no_tab:
  1759                           	opt stack 0
  1760  000067                     	ds	2
  1761  000069                     _log_count_pop_w_tab:
  1762                           	opt stack 0
  1763  000069                     	ds	2
  1764  00006B                     _log_count_total:
  1765                           	opt stack 0
  1766  00006B                     	ds	2
  1767  00006D                     _most_recent_sort_time:
  1768                           	opt stack 0
  1769  00006D                     	ds	2
  1770  00006F                     _pan_servo_state:
  1771                           	opt stack 0
  1772  00006F                     	ds	2
  1773  000071                     _servo_timer_counter:
  1774                           	opt stack 0
  1775  000071                     	ds	2
  1776  000073                     _servo_timer_target:
  1777                           	opt stack 0
  1778  000073                     	ds	2
  1779  000075                     _tilt_servo_state:
  1780                           	opt stack 0
  1781  000075                     	ds	2
  1782  000077                     _up:
  1783                           	opt stack 0
  1784  000077                     	ds	2
  1785  000079                     _was_low_1:
  1786                           	opt stack 0
  1787  000079                     	ds	2
  1788  00007B                     _was_low_3:
  1789                           	opt stack 0
  1790  00007B                     	ds	2
  1791  00007D                     _input:
  1792                           	opt stack 0
  1793  00007D                     	ds	1
  1794                           tblptru	equ	0xFF8
  1795                           tblptrh	equ	0xFF7
  1796                           tblptrl	equ	0xFF6
  1797                           tablat	equ	0xFF5
  1798                           postinc0	equ	0xFEE
  1799                           wreg	equ	0xFE8
  1800                           postdec1	equ	0xFE5
  1801                           fsr1l	equ	0xFE1
  1802                           
  1803                           	psect	bssBANK0
  1804  0000DA                     __pbssBANK0:
  1805                           	opt stack 0
  1806  0000DA                     _servoTimes:
  1807                           	opt stack 0
  1808  0000DA                     	ds	8
  1809  0000E2                     _sensor_outputs:
  1810                           	opt stack 0
  1811  0000E2                     	ds	4
  1812  0000E6                     _IR_signal:
  1813                           	opt stack 0
  1814  0000E6                     	ds	2
  1815  0000E8                     _MAG_signal:
  1816                           	opt stack 0
  1817  0000E8                     	ds	2
  1818  0000EA                     _RTCflag:
  1819                           	opt stack 0
  1820  0000EA                     	ds	2
  1821  0000EC                     _cur_state:
  1822                           	opt stack 0
  1823  0000EC                     	ds	2
  1824  0000EE                     _f_lastCan:
  1825                           	opt stack 0
  1826  0000EE                     	ds	2
  1827  0000F0                     _f_loadingNewCan:
  1828                           	opt stack 0
  1829  0000F0                     	ds	2
  1830  0000F2                     _log:
  1831                           	opt stack 0
  1832  0000F2                     	ds	2
  1833  0000F4                     _log_completion:
  1834                           	opt stack 0
  1835  0000F4                     	ds	2
  1836  0000F6                     _log_total_time:
  1837                           	opt stack 0
  1838  0000F6                     	ds	2
  1839  0000F8                     _logstate:
  1840                           	opt stack 0
  1841  0000F8                     	ds	2
  1842  0000FA                     _total_time:
  1843                           	opt stack 0
  1844  0000FA                     	ds	2
  1845  0000FC                     _machine_state:
  1846                           	opt stack 0
  1847  0000FC                     	ds	1
  1848  0000FD                     _sel:
  1849                           	opt stack 0
  1850  0000FD                     	ds	1
  1851  0000FE                     _count_total:
  1852                           	opt stack 0
  1853  0000FE                     	ds	2
  1854                           tblptru	equ	0xFF8
  1855                           tblptrh	equ	0xFF7
  1856                           tblptrl	equ	0xFF6
  1857                           tablat	equ	0xFF5
  1858                           postinc0	equ	0xFEE
  1859                           wreg	equ	0xFE8
  1860                           postdec1	equ	0xFE5
  1861                           fsr1l	equ	0xFE1
  1862                           
  1863                           	psect	bssBANK1
  1864  000100                     __pbssBANK1:
  1865                           	opt stack 0
  1866  000100                     _log_startTime:
  1867                           	opt stack 0
  1868  000100                     	ds	14
  1869  00010E                     _startTime:
  1870                           	opt stack 0
  1871  00010E                     	ds	14
  1872  00011C                     _time:
  1873                           	opt stack 0
  1874  00011C                     	ds	7
  1875  000123                     _count_can_no_lab:
  1876                           	opt stack 0
  1877  000123                     	ds	2
  1878  000125                     _count_can_w_lab:
  1879                           	opt stack 0
  1880  000125                     	ds	2
  1881  000127                     _count_pop_no_tab:
  1882                           	opt stack 0
  1883  000127                     	ds	2
  1884  000129                     _count_pop_w_tab:
  1885                           	opt stack 0
  1886  000129                     	ds	2
  1887  00012B                     _cur_can:
  1888                           	opt stack 0
  1889  00012B                     	ds	2
  1890  00012D                     _debug:
  1891                           	opt stack 0
  1892  00012D                     	ds	2
  1893  00012F                     _f_ID_receive:
  1894                           	opt stack 0
  1895  00012F                     	ds	2
  1896  000131                     _f_can_coming_to_ID:
  1897                           	opt stack 0
  1898  000131                     	ds	2
  1899  000133                     _f_can_coming_to_distribution:
  1900                           	opt stack 0
  1901  000133                     	ds	2
  1902  000135                     _f_can_distributed:
  1903                           	opt stack 0
  1904  000135                     	ds	2
  1905  000137                     _f_most_recent_sort_time:
  1906                           	opt stack 0
  1907  000137                     	ds	2
  1908  000139                     _first:
  1909                           	opt stack 0
  1910  000139                     	ds	2
  1911  00013B                     _firstboot:
  1912                           	opt stack 0
  1913  00013B                     	ds	2
  1914  00013D                     _i:
  1915                           	opt stack 0
  1916  00013D                     	ds	2
  1917  00013F                     _var:
  1918                           	opt stack 0
  1919  00013F                     	ds	2
  1920                           tblptru	equ	0xFF8
  1921                           tblptrh	equ	0xFF7
  1922                           tblptrl	equ	0xFF6
  1923                           tablat	equ	0xFF5
  1924                           postinc0	equ	0xFEE
  1925                           wreg	equ	0xFE8
  1926                           postdec1	equ	0xFE5
  1927                           fsr1l	equ	0xFE1
  1928                           
  1929                           	psect	dataBANK1
  1930  000141                     __pdataBANK1:
  1931                           	opt stack 0
  1932  000141                     UI@F3236:
  1933                           	opt stack 0
  1934  000141                     	ds	4
  1935  000145                     printRTC@F3226:
  1936                           	opt stack 0
  1937  000145                     	ds	4
  1938                           tblptru	equ	0xFF8
  1939                           tblptrh	equ	0xFF7
  1940                           tblptrl	equ	0xFF6
  1941                           tablat	equ	0xFF5
  1942                           postinc0	equ	0xFEE
  1943                           wreg	equ	0xFE8
  1944                           postdec1	equ	0xFE5
  1945                           fsr1l	equ	0xFE1
  1946                           
  1947                           	psect	cstackBANK0
  1948  000080                     __pcstackBANK0:
  1949                           	opt stack 0
  1950  000080                     ??_delay_ms:
  1951  000080                     ??_isdigit:
  1952  000080                     ??_readADC:
  1953  000080                     ??_I2C_Master_Wait:
  1954  000080                     ?___wmul:
  1955                           	opt stack 0
  1956  000080                     ?___awmod:
  1957                           	opt stack 0
  1958  000080                     ?___lwdiv:
  1959                           	opt stack 0
  1960  000080                     ?___lldiv:
  1961                           	opt stack 0
  1962  000080                     lcdNibble@temp:
  1963                           	opt stack 0
  1964  000080                     initTime@m:
  1965                           	opt stack 0
  1966  000080                     updateServoPosition@time_us:
  1967                           	opt stack 0
  1968  000080                     EEPROM_read@address:
  1969                           	opt stack 0
  1970  000080                     ___wmul@multiplier:
  1971                           	opt stack 0
  1972  000080                     ___awmod@dividend:
  1973                           	opt stack 0
  1974  000080                     ___lwdiv@dividend:
  1975                           	opt stack 0
  1976  000080                     strcpy@to:
  1977                           	opt stack 0
  1978  000080                     ___lldiv@dividend:
  1979                           	opt stack 0
  1980                           
  1981                           ; 4 bytes @ 0x0
  1982  000080                     	ds	1
  1983  000081                     readADC@channel:
  1984                           	opt stack 0
  1985  000081                     I2C_Master_Read@a:
  1986                           	opt stack 0
  1987  000081                     lcdNibble@data:
  1988                           	opt stack 0
  1989  000081                     initTime@h:
  1990                           	opt stack 0
  1991  000081                     delay_ms@milliseconds:
  1992                           	opt stack 0
  1993  000081                     _isdigit$2011:
  1994                           	opt stack 0
  1995  000081                     I2C_Master_Write@d:
  1996                           	opt stack 0
  1997                           
  1998                           ; 2 bytes @ 0x1
  1999  000081                     	ds	1
  2000  000082                     ??_ID:
  2001  000082                     ??_readIR:
  2002  000082                     ??_readMAG:
  2003  000082                     I2C_Master_Read@temp:
  2004                           	opt stack 0
  2005  000082                     lcdInst@data:
  2006                           	opt stack 0
  2007  000082                     putch@data:
  2008                           	opt stack 0
  2009  000082                     initTime@w:
  2010                           	opt stack 0
  2011  000082                     isdigit@c:
  2012                           	opt stack 0
  2013  000082                     updateServoPosition@timer:
  2014                           	opt stack 0
  2015  000082                     ___wmul@multiplicand:
  2016                           	opt stack 0
  2017  000082                     ___awmod@divisor:
  2018                           	opt stack 0
  2019  000082                     ___lwdiv@divisor:
  2020                           	opt stack 0
  2021  000082                     strcpy@from:
  2022                           	opt stack 0
  2023                           
  2024                           ; 2 bytes @ 0x2
  2025  000082                     	ds	1
  2026  000083                     ??_initLCD:
  2027  000083                     initTime@DD:
  2028                           	opt stack 0
  2029  000083                     getRTC@i:
  2030                           	opt stack 0
  2031                           
  2032                           ; 2 bytes @ 0x3
  2033  000083                     	ds	1
  2034  000084                     ??_updateServoPosition:
  2035  000084                     initTime@MM:
  2036                           	opt stack 0
  2037  000084                     ___awmod@counter:
  2038                           	opt stack 0
  2039  000084                     readIR@res:
  2040                           	opt stack 0
  2041  000084                     readMAG@res:
  2042                           	opt stack 0
  2043  000084                     ID@i:
  2044                           	opt stack 0
  2045  000084                     ___wmul@product:
  2046                           	opt stack 0
  2047  000084                     ___lwdiv@quotient:
  2048                           	opt stack 0
  2049  000084                     strcpy@cp:
  2050                           	opt stack 0
  2051  000084                     ___lldiv@divisor:
  2052                           	opt stack 0
  2053                           
  2054                           ; 4 bytes @ 0x4
  2055  000084                     	ds	1
  2056  000085                     ??_initSortTimer:
  2057  000085                     initTime@YY:
  2058                           	opt stack 0
  2059  000085                     ___awmod@sign:
  2060                           	opt stack 0
  2061                           
  2062                           ; 1 bytes @ 0x5
  2063  000085                     	ds	1
  2064  000086                     ??_getIR:
  2065  000086                     ??_getMAG:
  2066  000086                     ?___awdiv:
  2067                           	opt stack 0
  2068  000086                     initTime@s:
  2069                           	opt stack 0
  2070  000086                     ___lwdiv@counter:
  2071                           	opt stack 0
  2072  000086                     ID@i_1174:
  2073                           	opt stack 0
  2074  000086                     updateServoPosition@my_time:
  2075                           	opt stack 0
  2076  000086                     ___awdiv@dividend:
  2077                           	opt stack 0
  2078                           
  2079                           ; 2 bytes @ 0x6
  2080  000086                     	ds	1
  2081  000087                     ?___lwmod:
  2082                           	opt stack 0
  2083  000087                     getIR@i:
  2084                           	opt stack 0
  2085  000087                     ___lwmod@dividend:
  2086                           	opt stack 0
  2087                           
  2088                           ; 2 bytes @ 0x7
  2089  000087                     	ds	1
  2090  000088                     ??_Distribution:
  2091  000088                     ??_initServos:
  2092  000088                     ID@i_1175:
  2093                           	opt stack 0
  2094  000088                     initSortTimer@i:
  2095                           	opt stack 0
  2096  000088                     ___awdiv@divisor:
  2097                           	opt stack 0
  2098  000088                     ___lldiv@quotient:
  2099                           	opt stack 0
  2100                           
  2101                           ; 4 bytes @ 0x8
  2102  000088                     	ds	1
  2103  000089                     ___lwmod@divisor:
  2104                           	opt stack 0
  2105                           
  2106                           ; 2 bytes @ 0x9
  2107  000089                     	ds	1
  2108  00008A                     ___awdiv@counter:
  2109                           	opt stack 0
  2110                           
  2111                           ; 1 bytes @ 0xA
  2112  00008A                     	ds	1
  2113  00008B                     ___awdiv@sign:
  2114                           	opt stack 0
  2115  00008B                     ___lwmod@counter:
  2116                           	opt stack 0
  2117                           
  2118                           ; 1 bytes @ 0xB
  2119  00008B                     	ds	1
  2120  00008C                     ___lldiv@counter:
  2121                           	opt stack 0
  2122  00008C                     ___awdiv@quotient:
  2123                           	opt stack 0
  2124                           
  2125                           ; 2 bytes @ 0xC
  2126  00008C                     	ds	1
  2127  00008D                     I2C_Master_Init@c:
  2128                           	opt stack 0
  2129                           
  2130                           ; 4 bytes @ 0xD
  2131  00008D                     	ds	1
  2132  00008E                     ?_printf:
  2133                           	opt stack 0
  2134  00008E                     printf@f:
  2135                           	opt stack 0
  2136                           
  2137                           ; 2 bytes @ 0xE
  2138  00008E                     	ds	3
  2139  000091                     ??_I2C_Master_Init:
  2140                           
  2141                           ; 1 bytes @ 0x11
  2142  000091                     	ds	4
  2143  000095                     ??_loadRTC:
  2144                           
  2145                           ; 1 bytes @ 0x15
  2146  000095                     	ds	1
  2147  000096                     loadRTC@i:
  2148                           	opt stack 0
  2149                           
  2150                           ; 2 bytes @ 0x16
  2151  000096                     	ds	4
  2152  00009A                     ??_printf:
  2153                           
  2154                           ; 1 bytes @ 0x1A
  2155  00009A                     	ds	4
  2156  00009E                     printf@prec:
  2157                           	opt stack 0
  2158                           
  2159                           ; 1 bytes @ 0x1E
  2160  00009E                     	ds	1
  2161  00009F                     printf@cp:
  2162                           	opt stack 0
  2163                           
  2164                           ; 2 bytes @ 0x1F
  2165  00009F                     	ds	2
  2166  0000A1                     printf@ap:
  2167                           	opt stack 0
  2168                           
  2169                           ; 2 bytes @ 0x21
  2170  0000A1                     	ds	2
  2171  0000A3                     printf@len:
  2172                           	opt stack 0
  2173                           
  2174                           ; 2 bytes @ 0x23
  2175  0000A3                     	ds	2
  2176  0000A5                     printf@val:
  2177                           	opt stack 0
  2178                           
  2179                           ; 2 bytes @ 0x25
  2180  0000A5                     	ds	2
  2181  0000A7                     printf@flag:
  2182                           	opt stack 0
  2183                           
  2184                           ; 1 bytes @ 0x27
  2185  0000A7                     	ds	1
  2186  0000A8                     printf@c:
  2187                           	opt stack 0
  2188                           
  2189                           ; 1 bytes @ 0x28
  2190  0000A8                     	ds	1
  2191  0000A9                     printf@width:
  2192                           	opt stack 0
  2193                           
  2194                           ; 2 bytes @ 0x29
  2195  0000A9                     	ds	2
  2196  0000AB                     ??_printRTC:
  2197  0000AB                     ??_algorithmTest:
  2198  0000AB                     ??_sensorTest:
  2199  0000AB                     ??_actuatorTest:
  2200  0000AB                     ??_arm:
  2201  0000AB                     ??_PortTestDC:
  2202  0000AB                     ??_SpeedTest:
  2203  0000AB                     ??_PusherTest:
  2204  0000AB                     ??_BothServos:
  2205  0000AB                     ??_BlockerTest:
  2206  0000AB                     EEPROM_write@address:
  2207                           	opt stack 0
  2208                           
  2209                           ; 2 bytes @ 0x2B
  2210  0000AB                     	ds	1
  2211  0000AC                     BlockerTest@i:
  2212                           	opt stack 0
  2213  0000AC                     arm@on:
  2214                           	opt stack 0
  2215                           
  2216                           ; 2 bytes @ 0x2C
  2217  0000AC                     	ds	1
  2218  0000AD                     EEPROM_write@data:
  2219                           	opt stack 0
  2220  0000AD                     actuatorTest@i_1687:
  2221                           	opt stack 0
  2222  0000AD                     sensorTest@res:
  2223                           	opt stack 0
  2224  0000AD                     PusherTest@res:
  2225                           	opt stack 0
  2226                           
  2227                           ; 2 bytes @ 0x2D
  2228  0000AD                     	ds	1
  2229  0000AE                     ??_EEPROM_write:
  2230  0000AE                     actuatorTest@i_1694:
  2231                           	opt stack 0
  2232  0000AE                     BlockerTest@cam_flag:
  2233                           	opt stack 0
  2234  0000AE                     printRTC@INT_time:
  2235                           	opt stack 0
  2236                           
  2237                           ; 14 bytes @ 0x2E
  2238  0000AE                     	ds	1
  2239  0000AF                     EEPROM_write@i:
  2240                           	opt stack 0
  2241  0000AF                     actuatorTest@i_1695:
  2242                           	opt stack 0
  2243  0000AF                     PusherTest@res_1738:
  2244                           	opt stack 0
  2245                           
  2246                           ; 2 bytes @ 0x2F
  2247  0000AF                     	ds	1
  2248  0000B0                     EEPROM_write@i_1400:
  2249                           	opt stack 0
  2250  0000B0                     actuatorTest@i_1697:
  2251                           	opt stack 0
  2252  0000B0                     BlockerTest@cond_flag:
  2253                           	opt stack 0
  2254                           
  2255                           ; 2 bytes @ 0x30
  2256  0000B0                     	ds	1
  2257  0000B1                     ??_Loading:
  2258  0000B1                     logRun@num:
  2259                           	opt stack 0
  2260  0000B1                     actuatorTest@i_1698:
  2261                           	opt stack 0
  2262  0000B1                     PusherTest@i:
  2263                           	opt stack 0
  2264                           
  2265                           ; 2 bytes @ 0x31
  2266  0000B1                     	ds	1
  2267  0000B2                     logRun@byte1:
  2268                           	opt stack 0
  2269  0000B2                     actuatorTest@i_1700:
  2270                           	opt stack 0
  2271                           
  2272                           ; 1 bytes @ 0x32
  2273  0000B2                     	ds	1
  2274  0000B3                     logRun@byte2:
  2275                           	opt stack 0
  2276  0000B3                     actuatorTest@i_1701:
  2277                           	opt stack 0
  2278  0000B3                     Loading@addr:
  2279                           	opt stack 0
  2280  0000B3                     PusherTest@i_1742:
  2281                           	opt stack 0
  2282                           
  2283                           ; 2 bytes @ 0x33
  2284  0000B3                     	ds	1
  2285  0000B4                     logRun@byte3:
  2286                           	opt stack 0
  2287  0000B4                     actuatorTest@i_1703:
  2288                           	opt stack 0
  2289                           
  2290                           ; 1 bytes @ 0x34
  2291  0000B4                     	ds	1
  2292  0000B5                     Loading@byte1:
  2293                           	opt stack 0
  2294  0000B5                     logRun@byte_i:
  2295                           	opt stack 0
  2296  0000B5                     actuatorTest@i_1704:
  2297                           	opt stack 0
  2298                           
  2299                           ; 1 bytes @ 0x35
  2300  0000B5                     	ds	1
  2301  0000B6                     logRun@byte11:
  2302                           	opt stack 0
  2303  0000B6                     actuatorTest@i_1706:
  2304                           	opt stack 0
  2305  0000B6                     Loading@i_1149:
  2306                           	opt stack 0
  2307                           
  2308                           ; 2 bytes @ 0x36
  2309  0000B6                     	ds	1
  2310  0000B7                     actuatorTest@i_1707:
  2311                           	opt stack 0
  2312  0000B7                     logRun@i:
  2313                           	opt stack 0
  2314                           
  2315                           ; 2 bytes @ 0x37
  2316  0000B7                     	ds	1
  2317  0000B8                     actuatorTest@i_1709:
  2318                           	opt stack 0
  2319  0000B8                     Loading@i_1158:
  2320                           	opt stack 0
  2321                           
  2322                           ; 2 bytes @ 0x38
  2323  0000B8                     	ds	1
  2324  0000B9                     actuatorTest@i_1710:
  2325                           	opt stack 0
  2326  0000B9                     logRun@addr:
  2327                           	opt stack 0
  2328                           
  2329                           ; 2 bytes @ 0x39
  2330  0000B9                     	ds	1
  2331  0000BA                     actuatorTest@i_1713:
  2332                           	opt stack 0
  2333  0000BA                     Loading@i_1160:
  2334                           	opt stack 0
  2335                           
  2336                           ; 2 bytes @ 0x3A
  2337  0000BA                     	ds	1
  2338  0000BB                     actuatorTest@i_1714:
  2339                           	opt stack 0
  2340                           
  2341                           ; 1 bytes @ 0x3B
  2342  0000BB                     	ds	1
  2343  0000BC                     actuatorTest@i_1716:
  2344                           	opt stack 0
  2345  0000BC                     printRTC@RTC_month:
  2346                           	opt stack 0
  2347  0000BC                     Loading@i_1161:
  2348                           	opt stack 0
  2349                           
  2350                           ; 2 bytes @ 0x3C
  2351  0000BC                     	ds	1
  2352  0000BD                     actuatorTest@i_1717:
  2353                           	opt stack 0
  2354                           
  2355                           ; 1 bytes @ 0x3D
  2356  0000BD                     	ds	1
  2357  0000BE                     actuatorTest@i_1719:
  2358                           	opt stack 0
  2359  0000BE                     Loading@i_1163:
  2360                           	opt stack 0
  2361  0000BE                     printRTC@month:
  2362                           	opt stack 0
  2363                           
  2364                           ; 4 bytes @ 0x3E
  2365  0000BE                     	ds	1
  2366  0000BF                     actuatorTest@i_1720:
  2367                           	opt stack 0
  2368                           
  2369                           ; 1 bytes @ 0x3F
  2370  0000BF                     	ds	1
  2371  0000C0                     actuatorTest@i_1723:
  2372                           	opt stack 0
  2373  0000C0                     Loading@j:
  2374                           	opt stack 0
  2375                           
  2376                           ; 2 bytes @ 0x40
  2377  0000C0                     	ds	1
  2378  0000C1                     actuatorTest@i_1724:
  2379                           	opt stack 0
  2380                           
  2381                           ; 1 bytes @ 0x41
  2382  0000C1                     	ds	1
  2383  0000C2                     actuatorTest@i_1726:
  2384                           	opt stack 0
  2385  0000C2                     printRTC@i:
  2386                           	opt stack 0
  2387  0000C2                     Loading@i:
  2388                           	opt stack 0
  2389                           
  2390                           ; 2 bytes @ 0x42
  2391  0000C2                     	ds	1
  2392  0000C3                     actuatorTest@i_1727:
  2393                           	opt stack 0
  2394                           
  2395                           ; 1 bytes @ 0x43
  2396  0000C3                     	ds	1
  2397  0000C4                     ??_UI:
  2398  0000C4                     actuatorTest@i:
  2399                           	opt stack 0
  2400                           
  2401                           ; 2 bytes @ 0x44
  2402  0000C4                     	ds	2
  2403  0000C6                     ??_Test:
  2404  0000C6                     _UI$2369:
  2405                           	opt stack 0
  2406                           
  2407                           ; 2 bytes @ 0x46
  2408  0000C6                     	ds	2
  2409  0000C8                     UI@i:
  2410                           	opt stack 0
  2411                           
  2412                           ; 1 bytes @ 0x48
  2413  0000C8                     	ds	1
  2414  0000C9                     UI@i_409:
  2415                           	opt stack 0
  2416                           
  2417                           ; 1 bytes @ 0x49
  2418  0000C9                     	ds	1
  2419  0000CA                     UI@i_412:
  2420                           	opt stack 0
  2421                           
  2422                           ; 1 bytes @ 0x4A
  2423  0000CA                     	ds	1
  2424  0000CB                     UI@i_413:
  2425                           	opt stack 0
  2426                           
  2427                           ; 1 bytes @ 0x4B
  2428  0000CB                     	ds	1
  2429  0000CC                     UI@i_431:
  2430                           	opt stack 0
  2431                           
  2432                           ; 1 bytes @ 0x4C
  2433  0000CC                     	ds	1
  2434  0000CD                     UI@i_432:
  2435                           	opt stack 0
  2436                           
  2437                           ; 1 bytes @ 0x4D
  2438  0000CD                     	ds	1
  2439  0000CE                     UI@i_435:
  2440                           	opt stack 0
  2441                           
  2442                           ; 1 bytes @ 0x4E
  2443  0000CE                     	ds	1
  2444  0000CF                     UI@i_436:
  2445                           	opt stack 0
  2446                           
  2447                           ; 1 bytes @ 0x4F
  2448  0000CF                     	ds	1
  2449  0000D0                     UI@i_439:
  2450                           	opt stack 0
  2451                           
  2452                           ; 1 bytes @ 0x50
  2453  0000D0                     	ds	1
  2454  0000D1                     UI@i_440:
  2455                           	opt stack 0
  2456                           
  2457                           ; 1 bytes @ 0x51
  2458  0000D1                     	ds	1
  2459  0000D2                     UI@i_443:
  2460                           	opt stack 0
  2461                           
  2462                           ; 1 bytes @ 0x52
  2463  0000D2                     	ds	1
  2464  0000D3                     UI@i_444:
  2465                           	opt stack 0
  2466                           
  2467                           ; 1 bytes @ 0x53
  2468  0000D3                     	ds	1
  2469  0000D4                     UI@i_447:
  2470                           	opt stack 0
  2471                           
  2472                           ; 1 bytes @ 0x54
  2473  0000D4                     	ds	1
  2474  0000D5                     UI@i_448:
  2475                           	opt stack 0
  2476                           
  2477                           ; 1 bytes @ 0x55
  2478  0000D5                     	ds	1
  2479  0000D6                     UI@month:
  2480                           	opt stack 0
  2481                           
  2482                           ; 4 bytes @ 0x56
  2483  0000D6                     	ds	4
  2484  0000DA                     tblptru	equ	0xFF8
  2485                           tblptrh	equ	0xFF7
  2486                           tblptrl	equ	0xFF6
  2487                           tablat	equ	0xFF5
  2488                           postinc0	equ	0xFEE
  2489                           wreg	equ	0xFE8
  2490                           postdec1	equ	0xFE5
  2491                           fsr1l	equ	0xFE1
  2492                           
  2493                           ; 1 bytes @ 0x5A
  2494                           
  2495                           	psect	cstackCOMRAM
  2496  000001                     __pcstackCOMRAM:
  2497                           	opt stack 0
  2498  000001                     ??i2_I2C_Master_Wait:
  2499  000001                     ??i2_delay_ms:
  2500  000001                     ??i2_isdigit:
  2501  000001                     ?i2___wmul:
  2502                           	opt stack 0
  2503  000001                     ?i2___lwmod:
  2504                           	opt stack 0
  2505  000001                     i2lcdNibble@temp:
  2506                           	opt stack 0
  2507  000001                     i2updateServoPosition@time_us:
  2508                           	opt stack 0
  2509  000001                     i2EEPROM_read@address:
  2510                           	opt stack 0
  2511  000001                     i2___wmul@multiplier:
  2512                           	opt stack 0
  2513  000001                     i2___lwmod@dividend:
  2514                           	opt stack 0
  2515  000001                     i2strcpy@to:
  2516                           	opt stack 0
  2517                           
  2518                           ; 2 bytes @ 0x0
  2519  000001                     	ds	1
  2520  000002                     i2I2C_Master_Read@a:
  2521                           	opt stack 0
  2522  000002                     i2lcdNibble@data:
  2523                           	opt stack 0
  2524  000002                     i2delay_ms@milliseconds:
  2525                           	opt stack 0
  2526  000002                     i2_isdigit$2011:
  2527                           	opt stack 0
  2528  000002                     i2I2C_Master_Write@d:
  2529                           	opt stack 0
  2530                           
  2531                           ; 2 bytes @ 0x1
  2532  000002                     	ds	1
  2533  000003                     i2I2C_Master_Read@temp:
  2534                           	opt stack 0
  2535  000003                     i2lcdInst@data:
  2536                           	opt stack 0
  2537  000003                     i2putch@data:
  2538                           	opt stack 0
  2539  000003                     i2isdigit@c:
  2540                           	opt stack 0
  2541  000003                     i2updateServoPosition@timer:
  2542                           	opt stack 0
  2543  000003                     i2___wmul@multiplicand:
  2544                           	opt stack 0
  2545  000003                     i2___lwmod@divisor:
  2546                           	opt stack 0
  2547  000003                     i2strcpy@from:
  2548                           	opt stack 0
  2549                           
  2550                           ; 2 bytes @ 0x2
  2551  000003                     	ds	1
  2552  000004                     i2getRTC@i:
  2553                           	opt stack 0
  2554                           
  2555                           ; 2 bytes @ 0x3
  2556  000004                     	ds	1
  2557  000005                     ??i2_updateServoPosition:
  2558  000005                     i2___lwmod@counter:
  2559                           	opt stack 0
  2560  000005                     i2___wmul@product:
  2561                           	opt stack 0
  2562  000005                     i2strcpy@cp:
  2563                           	opt stack 0
  2564                           
  2565                           ; 2 bytes @ 0x4
  2566  000005                     	ds	1
  2567  000006                     ?i2___lwdiv:
  2568                           	opt stack 0
  2569  000006                     i2___lwdiv@dividend:
  2570                           	opt stack 0
  2571                           
  2572                           ; 2 bytes @ 0x5
  2573  000006                     	ds	1
  2574  000007                     retrieveLog@logNum:
  2575                           	opt stack 0
  2576  000007                     i2updateServoPosition@my_time:
  2577                           	opt stack 0
  2578                           
  2579                           ; 2 bytes @ 0x6
  2580  000007                     	ds	1
  2581  000008                     i2___lwdiv@divisor:
  2582                           	opt stack 0
  2583                           
  2584                           ; 2 bytes @ 0x7
  2585  000008                     	ds	1
  2586  000009                     ??_retrieveLog:
  2587  000009                     ??_updateServoStates:
  2588                           
  2589                           ; 1 bytes @ 0x8
  2590  000009                     	ds	1
  2591  00000A                     i2___lwdiv@quotient:
  2592                           	opt stack 0
  2593                           
  2594                           ; 2 bytes @ 0x9
  2595  00000A                     	ds	1
  2596  00000B                     retrieveLog@byte1:
  2597                           	opt stack 0
  2598                           
  2599                           ; 1 bytes @ 0xA
  2600  00000B                     	ds	1
  2601  00000C                     retrieveLog@byte2:
  2602                           	opt stack 0
  2603  00000C                     i2___lwdiv@counter:
  2604                           	opt stack 0
  2605                           
  2606                           ; 1 bytes @ 0xB
  2607  00000C                     	ds	1
  2608  00000D                     ?i2_printf:
  2609                           	opt stack 0
  2610  00000D                     retrieveLog@byte3:
  2611                           	opt stack 0
  2612  00000D                     i2printf@f:
  2613                           	opt stack 0
  2614                           
  2615                           ; 2 bytes @ 0xC
  2616  00000D                     	ds	1
  2617  00000E                     retrieveLog@i:
  2618                           	opt stack 0
  2619                           
  2620                           ; 2 bytes @ 0xD
  2621  00000E                     	ds	2
  2622  000010                     retrieveLog@addr:
  2623                           	opt stack 0
  2624                           
  2625                           ; 2 bytes @ 0xF
  2626  000010                     	ds	2
  2627  000012                     dispLogs@myLog:
  2628                           	opt stack 0
  2629                           
  2630                           ; 2 bytes @ 0x11
  2631  000012                     	ds	2
  2632  000014                     
  2633                           ; 1 bytes @ 0x13
  2634  000014                     	ds	5
  2635  000019                     ??i2_printf:
  2636                           
  2637                           ; 1 bytes @ 0x18
  2638  000019                     	ds	4
  2639  00001D                     i2printf@prec:
  2640                           	opt stack 0
  2641                           
  2642                           ; 1 bytes @ 0x1C
  2643  00001D                     	ds	1
  2644  00001E                     i2printf@cp:
  2645                           	opt stack 0
  2646                           
  2647                           ; 2 bytes @ 0x1D
  2648  00001E                     	ds	2
  2649  000020                     i2printf@ap:
  2650                           	opt stack 0
  2651                           
  2652                           ; 2 bytes @ 0x1F
  2653  000020                     	ds	2
  2654  000022                     i2printf@len:
  2655                           	opt stack 0
  2656                           
  2657                           ; 2 bytes @ 0x21
  2658  000022                     	ds	2
  2659  000024                     i2printf@val:
  2660                           	opt stack 0
  2661                           
  2662                           ; 2 bytes @ 0x23
  2663  000024                     	ds	2
  2664  000026                     i2printf@flag:
  2665                           	opt stack 0
  2666                           
  2667                           ; 1 bytes @ 0x25
  2668  000026                     	ds	1
  2669  000027                     i2printf@c:
  2670                           	opt stack 0
  2671                           
  2672                           ; 1 bytes @ 0x26
  2673  000027                     	ds	1
  2674  000028                     i2printf@width:
  2675                           	opt stack 0
  2676                           
  2677                           ; 2 bytes @ 0x27
  2678  000028                     	ds	2
  2679  00002A                     ??_printSortTimer:
  2680  00002A                     ??i2_printRTC:
  2681  00002A                     ?_inputHandler:
  2682                           	opt stack 0
  2683                           
  2684                           ; 2 bytes @ 0x29
  2685  00002A                     	ds	2
  2686  00002C                     ??_inputHandler:
  2687                           
  2688                           ; 1 bytes @ 0x2B
  2689  00002C                     	ds	1
  2690  00002D                     printSortTimer@curTime:
  2691                           	opt stack 0
  2692  00002D                     i2printRTC@INT_time:
  2693                           	opt stack 0
  2694                           
  2695                           ; 14 bytes @ 0x2C
  2696  00002D                     	ds	14
  2697  00003B                     printSortTimer@start_sec:
  2698                           	opt stack 0
  2699  00003B                     i2printRTC@RTC_month:
  2700                           	opt stack 0
  2701                           
  2702                           ; 2 bytes @ 0x3A
  2703  00003B                     	ds	2
  2704  00003D                     printSortTimer@cur_sec:
  2705                           	opt stack 0
  2706  00003D                     i2printRTC@month:
  2707                           	opt stack 0
  2708                           
  2709                           ; 4 bytes @ 0x3C
  2710  00003D                     	ds	2
  2711  00003F                     printSortTimer@min:
  2712                           	opt stack 0
  2713                           
  2714                           ; 2 bytes @ 0x3E
  2715  00003F                     	ds	2
  2716  000041                     printSortTimer@sec:
  2717                           	opt stack 0
  2718  000041                     i2printRTC@i:
  2719                           	opt stack 0
  2720                           
  2721                           ; 2 bytes @ 0x40
  2722  000041                     	ds	2
  2723  000043                     ??_updateMenu:
  2724  000043                     _printSortTimer$2501:
  2725                           	opt stack 0
  2726                           
  2727                           ; 2 bytes @ 0x42
  2728  000043                     	ds	2
  2729  000045                     printSortTimer@timeDiff:
  2730                           	opt stack 0
  2731                           
  2732                           ; 2 bytes @ 0x44
  2733  000045                     	ds	2
  2734  000047                     printSortTimer@i_1187:
  2735                           	opt stack 0
  2736                           
  2737                           ; 2 bytes @ 0x46
  2738  000047                     	ds	2
  2739  000049                     printSortTimer@i:
  2740                           	opt stack 0
  2741                           
  2742                           ; 2 bytes @ 0x48
  2743  000049                     	ds	2
  2744  00004B                     ??_handler:
  2745                           
  2746                           ; 1 bytes @ 0x4A
  2747  00004B                     	ds	16
  2748                           tblptru	equ	0xFF8
  2749                           tblptrh	equ	0xFF7
  2750                           tblptrl	equ	0xFF6
  2751                           tablat	equ	0xFF5
  2752                           postinc0	equ	0xFEE
  2753                           wreg	equ	0xFE8
  2754                           postdec1	equ	0xFE5
  2755                           fsr1l	equ	0xFE1
  2756                           
  2757 ;;
  2758 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2759 ;;
  2760 ;; *************** function _main *****************
  2761 ;; Defined at:
  2762 ;;		line 19 in file "main.c"
  2763 ;; Parameters:    Size  Location     Type
  2764 ;;		None
  2765 ;; Auto vars:     Size  Location     Type
  2766 ;;		None
  2767 ;; Return value:  Size  Location     Type
  2768 ;;                  1    wreg      void 
  2769 ;; Registers used:
  2770 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2771 ;; Tracked objects:
  2772 ;;		On entry : 0/0
  2773 ;;		On exit  : 0/0
  2774 ;;		Unchanged: 0/0
  2775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2780 ;;Total ram usage:        0 bytes
  2781 ;; Hardware stack levels required when called:   13
  2782 ;; This function calls:
  2783 ;;		_I2C_Master_Init
  2784 ;;		_Test
  2785 ;;		_UI
  2786 ;;		_initLCD
  2787 ;;		_initTime
  2788 ;;		_initUI
  2789 ;;		_logRun
  2790 ;;		_machineConfig
  2791 ;;		_sort
  2792 ;;		_stopSignals
  2793 ;; This function is called by:
  2794 ;;		Startup code after reset
  2795 ;; This function uses a non-reentrant model
  2796 ;;
  2797                           
  2798                           	psect	text0
  2799  00415C                     __ptext0:
  2800                           	opt stack 0
  2801  00415C                     _main:
  2802                           	opt stack 18
  2803                           
  2804                           ;main.c: 20: machineConfig();
  2805                           
  2806                           ;incstack = 0
  2807  00415C  EC22  F025         	call	_machineConfig	;wreg free
  2808                           
  2809                           ;main.c: 21: initLCD();
  2810  004160  ECA4  F026         	call	_initLCD	;wreg free
  2811                           
  2812                           ;main.c: 24: RTCflag = 0;
  2813  004164  0E00               	movlw	0
  2814  004166  0100               	movlb	0	; () banked
  2815  004168  6FEB               	movwf	(_RTCflag+1)& (0+255),b
  2816  00416A  0E00               	movlw	0
  2817  00416C  6FEA               	movwf	_RTCflag& (0+255),b
  2818                           
  2819                           ;main.c: 25: if(RTCflag){
  2820  00416E  0100               	movlb	0	; () banked
  2821  004170  51EA               	movf	_RTCflag& (0+255),w,b
  2822  004172  0100               	movlb	0	; () banked
  2823  004174  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  2824  004176  B4D8               	btfsc	status,2,c
  2825  004178  D016               	goto	l9412
  2826                           
  2827                           ; BSR set to: 0
  2828                           ;main.c: 26: initTime(0x42, 0x36, 0x13, 0x06, 0x07, 0x04, 0x17);
  2829  00417A  0E36               	movlw	54
  2830  00417C  0100               	movlb	0	; () banked
  2831  00417E  6F80               	movwf	initTime@m& (0+255),b
  2832  004180  0E13               	movlw	19
  2833  004182  0100               	movlb	0	; () banked
  2834  004184  6F81               	movwf	initTime@h& (0+255),b
  2835  004186  0E06               	movlw	6
  2836  004188  0100               	movlb	0	; () banked
  2837  00418A  6F82               	movwf	initTime@w& (0+255),b
  2838  00418C  0E07               	movlw	7
  2839  00418E  0100               	movlb	0	; () banked
  2840  004190  6F83               	movwf	initTime@DD& (0+255),b
  2841  004192  0E04               	movlw	4
  2842  004194  0100               	movlb	0	; () banked
  2843  004196  6F84               	movwf	initTime@MM& (0+255),b
  2844  004198  0E17               	movlw	23
  2845  00419A  0100               	movlb	0	; () banked
  2846  00419C  6F85               	movwf	initTime@YY& (0+255),b
  2847  00419E  0E42               	movlw	66
  2848  0041A0  EC58  F029         	call	_initTime
  2849                           
  2850                           ;main.c: 27: }
  2851  0041A4  D00B               	goto	l9414
  2852  0041A6                     l9412:
  2853                           
  2854                           ;main.c: 28: else{
  2855                           ;main.c: 29: I2C_Master_Init(10000);
  2856  0041A6  0E10               	movlw	16
  2857  0041A8  0100               	movlb	0	; () banked
  2858  0041AA  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2859  0041AC  0E27               	movlw	39
  2860  0041AE  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2861  0041B0  0E00               	movlw	0
  2862  0041B2  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2863  0041B4  0E00               	movlw	0
  2864  0041B6  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2865  0041B8  EC52  F025         	call	_I2C_Master_Init	;wreg free
  2866  0041BC                     l9414:
  2867                           
  2868                           ;main.c: 30: }
  2869                           ;main.c: 32: initUI();
  2870  0041BC  EC88  F027         	call	_initUI	;wreg free
  2871                           
  2872                           ;main.c: 33: first = 1;
  2873  0041C0  0E00               	movlw	0
  2874  0041C2  0101               	movlb	1	; () banked
  2875  0041C4  6F3A               	movwf	(_first+1)& (0+255),b
  2876  0041C6  0E01               	movlw	1
  2877  0041C8  6F39               	movwf	_first& (0+255),b
  2878                           
  2879                           ; BSR set to: 1
  2880                           ;main.c: 44: switch(machine_state){
  2881                           
  2882                           ;main.c: 43: while(1){
  2883  0041CA  D018               	goto	l9436
  2884  0041CC                     l9418:
  2885                           
  2886                           ;main.c: 46: UI();
  2887  0041CC  EC09  F000         	call	_UI	;wreg free
  2888                           
  2889                           ;main.c: 47: break;
  2890  0041D0  D015               	goto	l9436
  2891  0041D2                     l9420:
  2892                           
  2893                           ;main.c: 49: sort();
  2894  0041D2  EC47  F029         	call	_sort	;wreg free
  2895                           
  2896                           ;main.c: 50: break;
  2897  0041D6  D012               	goto	l9436
  2898  0041D8                     l9422:
  2899                           
  2900                           ;main.c: 52: stopSignals();
  2901  0041D8  EC86  F029         	call	_stopSignals	;wreg free
  2902                           
  2903                           ;main.c: 53: logRun();
  2904  0041DC  EC28  F01D         	call	_logRun	;wreg free
  2905                           
  2906                           ;main.c: 54: first = 1;
  2907  0041E0  0E00               	movlw	0
  2908  0041E2  0101               	movlb	1	; () banked
  2909  0041E4  6F3A               	movwf	(_first+1)& (0+255),b
  2910  0041E6  0E01               	movlw	1
  2911  0041E8  6F39               	movwf	_first& (0+255),b
  2912                           
  2913                           ; BSR set to: 1
  2914                           ;main.c: 55: UI();
  2915  0041EA  EC09  F000         	call	_UI	;wreg free
  2916                           
  2917                           ;main.c: 56: break;
  2918  0041EE  D006               	goto	l9436
  2919  0041F0                     l9430:
  2920                           
  2921                           ;main.c: 58: Test();
  2922  0041F0  EC58  F01E         	call	_Test	;wreg free
  2923                           
  2924                           ;main.c: 59: break;
  2925  0041F4  D003               	goto	l9436
  2926  0041F6                     l9432:
  2927                           
  2928                           ;main.c: 61: stopSignals();
  2929  0041F6  EC86  F029         	call	_stopSignals	;wreg free
  2930  0041FA                     l497:
  2931  0041FA  D7FF               	goto	l497
  2932  0041FC                     l9436:
  2933  0041FC  0100               	movlb	0	; () banked
  2934  0041FE  51FC               	movf	_machine_state& (0+255),w,b
  2935                           
  2936                           ; Switch size 1, requested type "space"
  2937                           ; Number of cases is 5, Range of values is 0 to 4
  2938                           ; switch strategies available:
  2939                           ; Name         Instructions Cycles
  2940                           ; simple_byte           16     9 (average)
  2941                           ;	Chosen strategy is simple_byte
  2942  004200  0A00               	xorlw	0	; case 0
  2943  004202  B4D8               	btfsc	status,2,c
  2944  004204  D7E3               	goto	l9418
  2945  004206  0A01               	xorlw	1	; case 1
  2946  004208  B4D8               	btfsc	status,2,c
  2947  00420A  D7E3               	goto	l9420
  2948  00420C  0A03               	xorlw	3	; case 2
  2949  00420E  B4D8               	btfsc	status,2,c
  2950  004210  D7E3               	goto	l9422
  2951  004212  0A01               	xorlw	1	; case 3
  2952  004214  B4D8               	btfsc	status,2,c
  2953  004216  D7EC               	goto	l9430
  2954  004218  0A07               	xorlw	7	; case 4
  2955  00421A  B4D8               	btfsc	status,2,c
  2956  00421C  D7EC               	goto	l9432
  2957                           
  2958                           ; BSR set to: 0
  2959                           
  2960                           ; BSR set to: 0
  2961  00421E  D7EE               	goto	l9436
  2962  004220                     __end_of_main:
  2963                           	opt stack 0
  2964                           tblptru	equ	0xFF8
  2965                           tblptrh	equ	0xFF7
  2966                           tblptrl	equ	0xFF6
  2967                           tablat	equ	0xFF5
  2968                           postinc0	equ	0xFEE
  2969                           wreg	equ	0xFE8
  2970                           postdec1	equ	0xFE5
  2971                           fsr1l	equ	0xFE1
  2972                           status	equ	0xFD8
  2973                           
  2974 ;; *************** function _stopSignals *****************
  2975 ;; Defined at:
  2976 ;;		line 70 in file "main.c"
  2977 ;; Parameters:    Size  Location     Type
  2978 ;;		None
  2979 ;; Auto vars:     Size  Location     Type
  2980 ;;		None
  2981 ;; Return value:  Size  Location     Type
  2982 ;;                  1    wreg      void 
  2983 ;; Registers used:
  2984 ;;		wreg, status,2
  2985 ;; Tracked objects:
  2986 ;;		On entry : 0/0
  2987 ;;		On exit  : 0/0
  2988 ;;		Unchanged: 0/0
  2989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2994 ;;Total ram usage:        0 bytes
  2995 ;; Hardware stack levels used:    1
  2996 ;; Hardware stack levels required when called:    7
  2997 ;; This function calls:
  2998 ;;		Nothing
  2999 ;; This function is called by:
  3000 ;;		_main
  3001 ;; This function uses a non-reentrant model
  3002 ;;
  3003                           
  3004                           	psect	text1
  3005  00530C                     __ptext1:
  3006                           	opt stack 0
  3007  00530C                     _stopSignals:
  3008                           	opt stack 23
  3009                           
  3010                           ;main.c: 71: LATA = 0x00;
  3011                           
  3012                           ; BSR set to: 0
  3013                           ;incstack = 0
  3014  00530C  0E00               	movlw	0
  3015  00530E  6E89               	movwf	3977,c	;volatile
  3016                           
  3017                           ;main.c: 72: LATB = 0x00;
  3018  005310  0E00               	movlw	0
  3019  005312  6E8A               	movwf	3978,c	;volatile
  3020                           
  3021                           ;main.c: 73: LATC = 0x00;
  3022  005314  0E00               	movlw	0
  3023  005316  6E8B               	movwf	3979,c	;volatile
  3024                           
  3025                           ;main.c: 74: LATD = 0x00;
  3026  005318  0E00               	movlw	0
  3027  00531A  6E8C               	movwf	3980,c	;volatile
  3028                           
  3029                           ;main.c: 75: LATE = 0x00;
  3030  00531C  0E00               	movlw	0
  3031  00531E  6E8D               	movwf	3981,c	;volatile
  3032                           
  3033                           ;main.c: 76: TMR1ON = 0;
  3034  005320  90CD               	bcf	4045,0,c	;volatile
  3035                           
  3036                           ;main.c: 77: TMR3ON = 0;
  3037  005322  90B1               	bcf	4017,0,c	;volatile
  3038  005324  0012               	return		;funcret
  3039  005326                     __end_of_stopSignals:
  3040                           	opt stack 0
  3041                           tblptru	equ	0xFF8
  3042                           tblptrh	equ	0xFF7
  3043                           tblptrl	equ	0xFF6
  3044                           tablat	equ	0xFF5
  3045                           postinc0	equ	0xFEE
  3046                           wreg	equ	0xFE8
  3047                           postdec1	equ	0xFE5
  3048                           fsr1l	equ	0xFE1
  3049                           status	equ	0xFD8
  3050                           
  3051 ;; *************** function _sort *****************
  3052 ;; Defined at:
  3053 ;;		line 63 in file "sort.c"
  3054 ;; Parameters:    Size  Location     Type
  3055 ;;		None
  3056 ;; Auto vars:     Size  Location     Type
  3057 ;;		None
  3058 ;; Return value:  Size  Location     Type
  3059 ;;                  1    wreg      void 
  3060 ;; Registers used:
  3061 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3062 ;; Tracked objects:
  3063 ;;		On entry : 0/0
  3064 ;;		On exit  : 0/0
  3065 ;;		Unchanged: 0/0
  3066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3071 ;;Total ram usage:        0 bytes
  3072 ;; Hardware stack levels used:    1
  3073 ;; Hardware stack levels required when called:   12
  3074 ;; This function calls:
  3075 ;;		_Distribution
  3076 ;;		_ID
  3077 ;;		_Loading
  3078 ;; This function is called by:
  3079 ;;		_main
  3080 ;; This function uses a non-reentrant model
  3081 ;;
  3082                           
  3083                           	psect	text2
  3084  00528E                     __ptext2:
  3085                           	opt stack 0
  3086  00528E                     _sort:
  3087                           	opt stack 18
  3088                           
  3089                           ;sort.c: 64: if(machine_state == Sorting_state){
  3090                           
  3091                           ;incstack = 0
  3092  00528E  0100               	movlb	0	; () banked
  3093  005290  05FC               	decf	_machine_state& (0+255),w,b
  3094  005292  B4D8               	btfsc	status,2,c
  3095                           
  3096                           ; BSR set to: 0
  3097                           ;sort.c: 65: Loading();
  3098  005294  ECC9  F008         	call	_Loading	;wreg free
  3099                           
  3100                           ;sort.c: 66: }
  3101                           ;sort.c: 67: if(machine_state == Sorting_state){
  3102  005298  0100               	movlb	0	; () banked
  3103  00529A  05FC               	decf	_machine_state& (0+255),w,b
  3104  00529C  B4D8               	btfsc	status,2,c
  3105                           
  3106                           ; BSR set to: 0
  3107                           ;sort.c: 68: ID();
  3108  00529E  EC48  F016         	call	_ID	;wreg free
  3109                           
  3110                           ;sort.c: 69: }
  3111                           ;sort.c: 70: if(machine_state == Sorting_state){
  3112  0052A2  0100               	movlb	0	; () banked
  3113  0052A4  05FC               	decf	_machine_state& (0+255),w,b
  3114  0052A6  A4D8               	btfss	status,2,c
  3115  0052A8  0012               	return	
  3116                           
  3117                           ; BSR set to: 0
  3118                           ;sort.c: 71: Distribution();
  3119  0052AA  ECD2  F01F         	call	_Distribution	;wreg free
  3120  0052AE  0012               	return	
  3121  0052B0                     __end_of_sort:
  3122                           	opt stack 0
  3123                           tblptru	equ	0xFF8
  3124                           tblptrh	equ	0xFF7
  3125                           tblptrl	equ	0xFF6
  3126                           tablat	equ	0xFF5
  3127                           postinc0	equ	0xFEE
  3128                           wreg	equ	0xFE8
  3129                           postdec1	equ	0xFE5
  3130                           fsr1l	equ	0xFE1
  3131                           status	equ	0xFD8
  3132                           
  3133 ;; *************** function _Loading *****************
  3134 ;; Defined at:
  3135 ;;		line 75 in file "sort.c"
  3136 ;; Parameters:    Size  Location     Type
  3137 ;;		None
  3138 ;; Auto vars:     Size  Location     Type
  3139 ;;  i               2   62[BANK0 ] int 
  3140 ;;  i               2   60[BANK0 ] int 
  3141 ;;  i               2   58[BANK0 ] int 
  3142 ;;  i               2   56[BANK0 ] int 
  3143 ;;  i               2   54[BANK0 ] int 
  3144 ;;  j               2   64[BANK0 ] int 
  3145 ;;  i               2   66[BANK0 ] int 
  3146 ;;  addr            2   51[BANK0 ] unsigned short 
  3147 ;;  byte1           1   53[BANK0 ] unsigned char 
  3148 ;; Return value:  Size  Location     Type
  3149 ;;                  1    wreg      void 
  3150 ;; Registers used:
  3151 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3152 ;; Tracked objects:
  3153 ;;		On entry : 0/0
  3154 ;;		On exit  : 0/0
  3155 ;;		Unchanged: 0/0
  3156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3158 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3159 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3160 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3161 ;;Total ram usage:       19 bytes
  3162 ;; Hardware stack levels used:    1
  3163 ;; Hardware stack levels required when called:   11
  3164 ;; This function calls:
  3165 ;;		_EEPROM_read
  3166 ;;		_EEPROM_write
  3167 ;;		_delay_ms
  3168 ;;		_getIR
  3169 ;;		_getMAG
  3170 ;;		_initGlobalVars
  3171 ;;		_initServos
  3172 ;;		_initSortTimer
  3173 ;;		_lcdInst
  3174 ;;		_readIR
  3175 ;; This function is called by:
  3176 ;;		_sort
  3177 ;; This function uses a non-reentrant model
  3178 ;;
  3179                           
  3180                           	psect	text3
  3181  001192                     __ptext3:
  3182                           	opt stack 0
  3183  001192                     _Loading:
  3184                           	opt stack 18
  3185                           
  3186                           ;sort.c: 76: if(first){
  3187                           
  3188                           ;incstack = 0
  3189  001192  0101               	movlb	1	; () banked
  3190  001194  5139               	movf	_first& (0+255),w,b
  3191  001196  0101               	movlb	1	; () banked
  3192  001198  113A               	iorwf	(_first+1)& (0+255),w,b
  3193  00119A  B4D8               	btfsc	status,2,c
  3194  00119C  D066               	goto	l7250
  3195                           
  3196                           ; BSR set to: 1
  3197                           ;sort.c: 77: initGlobalVars();
  3198  00119E  ECCD  F021         	call	_initGlobalVars	;wreg free
  3199                           
  3200                           ;sort.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3201  0011A2  0E01               	movlw	1
  3202  0011A4  ECC5  F029         	call	_lcdInst
  3203  0011A8  0E68               	movlw	104
  3204  0011AA  0100               	movlb	0	; () banked
  3205  0011AC  6FB1               	movwf	??_Loading& (0+255),b
  3206  0011AE  0EE4               	movlw	228
  3207  0011B0                     u8757:
  3208  0011B0  2EE8               	decfsz	wreg,f,c
  3209  0011B2  D7FE               	bra	u8757
  3210  0011B4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3211  0011B6  D7FC               	bra	u8757
  3212  0011B8  F000               	nop	
  3213                           
  3214                           ;sort.c: 79: initSortTimer();
  3215  0011BA  EC23  F022         	call	_initSortTimer	;wreg free
  3216                           
  3217                           ;sort.c: 80: LATCbits.LATC5 = 1;
  3218  0011BE  8A8B               	bsf	3979,5,c	;volatile
  3219                           
  3220                           ;sort.c: 85: sel = EEPROM_read(0);
  3221  0011C0  0E00               	movlw	0
  3222  0011C2  0100               	movlb	0	; () banked
  3223  0011C4  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3224  0011C6  0E00               	movlw	0
  3225  0011C8  6F80               	movwf	EEPROM_read@address& (0+255),b
  3226  0011CA  EC93  F029         	call	_EEPROM_read	;wreg free
  3227  0011CE  0100               	movlb	0	; () banked
  3228  0011D0  6FFD               	movwf	_sel& (0+255),b
  3229                           
  3230                           ; BSR set to: 0
  3231                           ;sort.c: 86: unsigned short addr = 1 + 11 * sel;
  3232  0011D2  0100               	movlb	0	; () banked
  3233  0011D4  51FD               	movf	_sel& (0+255),w,b
  3234  0011D6  0D0B               	mullw	11
  3235  0011D8  0E01               	movlw	1
  3236  0011DA  24F3               	addwf	prodl,w,c
  3237  0011DC  0100               	movlb	0	; () banked
  3238  0011DE  6FB3               	movwf	Loading@addr& (0+255),b
  3239  0011E0  0E00               	movlw	0
  3240  0011E2  20F4               	addwfc	prodh,w,c
  3241  0011E4  0100               	movlb	0	; () banked
  3242  0011E6  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;sort.c: 87: unsigned char byte1 = 0b01111111;
  3246  0011E8  0E7F               	movlw	127
  3247  0011EA  0100               	movlb	0	; () banked
  3248  0011EC  6FB5               	movwf	Loading@byte1& (0+255),b
  3249                           
  3250                           ; BSR set to: 0
  3251                           ;sort.c: 88: EEPROM_write(addr, byte1);
  3252  0011EE  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3253  0011F2  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3254  0011F6  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3255  0011FA  EC5E  F01F         	call	_EEPROM_write	;wreg free
  3256                           
  3257                           ;sort.c: 91: LATBbits.LATB2 = 0;
  3258  0011FE  948A               	bcf	3978,2,c	;volatile
  3259                           
  3260                           ;sort.c: 93: for(int i=0; i<46; i++){
  3261  001200  0E00               	movlw	0
  3262  001202  0100               	movlb	0	; () banked
  3263  001204  6FC3               	movwf	(Loading@i+1)& (0+255),b
  3264  001206  0E00               	movlw	0
  3265  001208  6FC2               	movwf	Loading@i& (0+255),b
  3266                           
  3267                           ; BSR set to: 0
  3268  00120A  0100               	movlb	0	; () banked
  3269  00120C  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3270  00120E  D008               	goto	l7240
  3271  001210  0100               	movlb	0	; () banked
  3272  001212  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3273  001214  E126               	bnz	l760
  3274  001216  0E2E               	movlw	46
  3275  001218  0100               	movlb	0	; () banked
  3276  00121A  5DC2               	subwf	Loading@i& (0+255),w,b
  3277  00121C  B0D8               	btfsc	status,0,c
  3278  00121E  D021               	goto	l760
  3279  001220                     l7240:
  3280                           
  3281                           ; BSR set to: 0
  3282                           ;sort.c: 94: LATBbits.LATB2 = !LATBbits.LATB2;
  3283  001220  B48A               	btfsc	3978,2,c	;volatile
  3284  001222  D004               	goto	u5690
  3285  001224  0100               	movlb	0	; () banked
  3286  001226  6BB1               	clrf	??_Loading& (0+255),b
  3287  001228  2BB1               	incf	??_Loading& (0+255),f,b
  3288  00122A  D002               	goto	u5708
  3289  00122C                     u5690:
  3290  00122C  0100               	movlb	0	; () banked
  3291  00122E  6BB1               	clrf	??_Loading& (0+255),b
  3292  001230                     u5708:
  3293  001230  0100               	movlb	0	; () banked
  3294  001232  47B1               	rlncf	??_Loading& (0+255),f,b
  3295  001234  47B1               	rlncf	??_Loading& (0+255),f,b
  3296  001236  508A               	movf	3978,w,c	;volatile
  3297  001238  0100               	movlb	0	; () banked
  3298  00123A  19B1               	xorwf	??_Loading& (0+255),w,b
  3299  00123C  0BFB               	andlw	-5
  3300  00123E  19B1               	xorwf	??_Loading& (0+255),w,b
  3301  001240  6E8A               	movwf	3978,c	;volatile
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;sort.c: 95: delay_ms(45-i);
  3305  001242  0100               	movlb	0	; () banked
  3306  001244  51C2               	movf	Loading@i& (0+255),w,b
  3307  001246  0800               	sublw	0
  3308  001248  0F2D               	addlw	45
  3309  00124A  ECE7  F028         	call	_delay_ms
  3310  00124E  0100               	movlb	0	; () banked
  3311  001250  4BC2               	infsnz	Loading@i& (0+255),f,b
  3312  001252  2BC3               	incf	(Loading@i+1)& (0+255),f,b
  3313                           
  3314                           ; BSR set to: 0
  3315  001254  0100               	movlb	0	; () banked
  3316  001256  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3317  001258  D7E3               	goto	l7240
  3318  00125A  0100               	movlb	0	; () banked
  3319  00125C  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3320  00125E  E101               	bnz	u5710
  3321  001260  D7DA               	goto	L1
  3322  001262                     u5710:
  3323  001262                     l760:
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;sort.c: 96: }
  3327                           ;sort.c: 97: LATBbits.LATB2 = 1;
  3328  001262  848A               	bsf	3978,2,c	;volatile
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;sort.c: 100: initServos();
  3332  001264  ECB0  F025         	call	_initServos	;wreg free
  3333                           
  3334                           ;sort.c: 101: }
  3335  001268  0012               	return	
  3336  00126A                     l7250:
  3337                           
  3338                           ;sort.c: 102: else{
  3339                           ;sort.c: 105: if(!f_loadingNewCan){
  3340  00126A  0100               	movlb	0	; () banked
  3341  00126C  51F0               	movf	_f_loadingNewCan& (0+255),w,b
  3342  00126E  0100               	movlb	0	; () banked
  3343  001270  11F1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3344  001272  A4D8               	btfss	status,2,c
  3345  001274  D018               	goto	l7266
  3346                           
  3347                           ; BSR set to: 0
  3348                           ;sort.c: 107: getIR();
  3349  001276  EC13  F024         	call	_getIR	;wreg free
  3350                           
  3351                           ;sort.c: 109: if(!f_loadingNewCan){
  3352  00127A  0100               	movlb	0	; () banked
  3353  00127C  51F0               	movf	_f_loadingNewCan& (0+255),w,b
  3354  00127E  0100               	movlb	0	; () banked
  3355  001280  11F1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3356  001282  B4D8               	btfsc	status,2,c
  3357  001284  0012               	return	
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;sort.c: 113: else{
  3361                           ;sort.c: 114: count_total++;
  3362                           
  3363                           ; BSR set to: 0
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;sort.c: 111: }
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;sort.c: 110: return;
  3370  001286  0100               	movlb	0	; () banked
  3371  001288  4BFE               	infsnz	_count_total& (0+255),f,b
  3372  00128A  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3373                           
  3374                           ; BSR set to: 0
  3375                           ;sort.c: 115: if(count_total == 12){
  3376  00128C  0E0C               	movlw	12
  3377  00128E  0100               	movlb	0	; () banked
  3378  001290  19FE               	xorwf	_count_total& (0+255),w,b
  3379  001292  0100               	movlb	0	; () banked
  3380  001294  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3381  001296  A4D8               	btfss	status,2,c
  3382  001298  0012               	return	
  3383                           
  3384                           ; BSR set to: 0
  3385                           ;sort.c: 116: f_lastCan = 1;
  3386  00129A  0E00               	movlw	0
  3387  00129C  0100               	movlb	0	; () banked
  3388  00129E  6FEF               	movwf	(_f_lastCan+1)& (0+255),b
  3389  0012A0  0E01               	movlw	1
  3390  0012A2  6FEE               	movwf	_f_lastCan& (0+255),b
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;sort.c: 117: }
  3394                           ;sort.c: 118: }
  3395                           ;sort.c: 119: }
  3396                           
  3397                           ; BSR set to: 0
  3398  0012A4  0012               	return	
  3399  0012A6                     l7266:
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;sort.c: 122: else if(f_ID_receive){
  3403  0012A6  0101               	movlb	1	; () banked
  3404  0012A8  512F               	movf	_f_ID_receive& (0+255),w,b
  3405  0012AA  0101               	movlb	1	; () banked
  3406  0012AC  1130               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3407  0012AE  B4D8               	btfsc	status,2,c
  3408  0012B0  0012               	return	
  3409                           
  3410                           ; BSR set to: 1
  3411                           ;sort.c: 123: f_most_recent_sort_time = 1;
  3412  0012B2  0E00               	movlw	0
  3413  0012B4  0101               	movlb	1	; () banked
  3414  0012B6  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3415  0012B8  0E01               	movlw	1
  3416  0012BA  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  3417                           
  3418                           ;sort.c: 124: f_loadingNewCan = 0;
  3419  0012BC  0E00               	movlw	0
  3420  0012BE  0100               	movlb	0	; () banked
  3421  0012C0  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3422  0012C2  0E00               	movlw	0
  3423  0012C4  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  3424                           
  3425                           ; BSR set to: 0
  3426                           ;sort.c: 125: _delay((unsigned long)((750)*(32000000/4000.0)));
  3427  0012C6  0E1F               	movlw	31
  3428  0012C8  0100               	movlb	0	; () banked
  3429  0012CA  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3430  0012CC  0E71               	movlw	113
  3431  0012CE  0100               	movlb	0	; () banked
  3432  0012D0  6FB1               	movwf	??_Loading& (0+255),b
  3433  0012D2  0E1E               	movlw	30
  3434  0012D4                     u8767:
  3435  0012D4  2EE8               	decfsz	wreg,f,c
  3436  0012D6  D7FE               	bra	u8767
  3437  0012D8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3438  0012DA  D7FC               	bra	u8767
  3439  0012DC  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3440  0012DE  D7FA               	bra	u8767
  3441  0012E0  F000               	nop	
  3442                           
  3443                           ;sort.c: 126: LATBbits.LATB2 = 0;
  3444  0012E2  948A               	bcf	3978,2,c	;volatile
  3445                           
  3446                           ;sort.c: 130: getMAG();
  3447  0012E4  EC56  F027         	call	_getMAG	;wreg free
  3448                           
  3449                           ;sort.c: 131: sensor_outputs[0] = MAG_signal;
  3450  0012E8  C0E8  F0E2         	movff	_MAG_signal,_sensor_outputs
  3451  0012EC  C0E9  F0E3         	movff	_MAG_signal+1,_sensor_outputs+1
  3452                           
  3453                           ;sort.c: 133: if(sensor_outputs[0]){
  3454  0012F0  0100               	movlb	0	; () banked
  3455  0012F2  51E2               	movf	_sensor_outputs& (0+255),w,b
  3456  0012F4  0100               	movlb	0	; () banked
  3457  0012F6  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3458  0012F8  B4D8               	btfsc	status,2,c
  3459  0012FA  D01D               	goto	l7292
  3460                           
  3461                           ; BSR set to: 0
  3462                           ;sort.c: 134: for(int i = 0; i<2500; i++){
  3463  0012FC  0E00               	movlw	0
  3464  0012FE  0100               	movlb	0	; () banked
  3465  001300  6FB7               	movwf	(Loading@i_1149+1)& (0+255),b
  3466  001302  0E00               	movlw	0
  3467  001304  6FB6               	movwf	Loading@i_1149& (0+255),b
  3468  001306                     l7282:
  3469                           
  3470                           ; BSR set to: 0
  3471  001306  0100               	movlb	0	; () banked
  3472  001308  BFB7               	btfsc	(Loading@i_1149+1)& (0+255),7,b
  3473  00130A  D008               	goto	l770
  3474  00130C  0EC4               	movlw	196
  3475  00130E  0100               	movlb	0	; () banked
  3476  001310  5DB6               	subwf	Loading@i_1149& (0+255),w,b
  3477  001312  0E09               	movlw	9
  3478  001314  0100               	movlb	0	; () banked
  3479  001316  59B7               	subwfb	(Loading@i_1149+1)& (0+255),w,b
  3480  001318  B0D8               	btfsc	status,0,c
  3481  00131A  D02A               	goto	l7304
  3482  00131C                     l770:
  3483                           
  3484                           ; BSR set to: 0
  3485                           ;sort.c: 135: LATAbits.LATA4 = 1;
  3486  00131C  8889               	bsf	3977,4,c	;volatile
  3487                           
  3488                           ; BSR set to: 0
  3489                           ;sort.c: 136: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3490  00131E  0EC8               	movlw	200
  3491  001320                     u8777:
  3492  001320  2EE8               	decfsz	wreg,f,c
  3493  001322  D7FE               	bra	u8777
  3494                           
  3495                           ;sort.c: 137: LATAbits.LATA4 = 0;
  3496  001324  9889               	bcf	3977,4,c	;volatile
  3497                           
  3498                           ;sort.c: 138: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3499  001326  0E42               	movlw	66
  3500  001328                     u8787:
  3501  001328  2EE8               	decfsz	wreg,f,c
  3502  00132A  D7FE               	bra	u8787
  3503  00132C  D000               	nop2	
  3504  00132E  0100               	movlb	0	; () banked
  3505  001330  4BB6               	infsnz	Loading@i_1149& (0+255),f,b
  3506  001332  2BB7               	incf	(Loading@i_1149+1)& (0+255),f,b
  3507  001334  D7E8               	goto	l7282
  3508  001336                     l7292:
  3509                           
  3510                           ; BSR set to: 0
  3511                           ;sort.c: 141: else{
  3512                           ;sort.c: 142: for(int i = 0; i<2500; i++){
  3513  001336  0E00               	movlw	0
  3514  001338  0100               	movlb	0	; () banked
  3515  00133A  6FB9               	movwf	(Loading@i_1158+1)& (0+255),b
  3516  00133C  0E00               	movlw	0
  3517  00133E  6FB8               	movwf	Loading@i_1158& (0+255),b
  3518  001340                     l7294:
  3519                           
  3520                           ; BSR set to: 0
  3521  001340  0100               	movlb	0	; () banked
  3522  001342  BFB9               	btfsc	(Loading@i_1158+1)& (0+255),7,b
  3523  001344  D008               	goto	l773
  3524  001346  0EC4               	movlw	196
  3525  001348  0100               	movlb	0	; () banked
  3526  00134A  5DB8               	subwf	Loading@i_1158& (0+255),w,b
  3527  00134C  0E09               	movlw	9
  3528  00134E  0100               	movlb	0	; () banked
  3529  001350  59B9               	subwfb	(Loading@i_1158+1)& (0+255),w,b
  3530  001352  B0D8               	btfsc	status,0,c
  3531  001354  D00D               	goto	l7304
  3532  001356                     l773:
  3533                           
  3534                           ; BSR set to: 0
  3535                           ;sort.c: 143: LATAbits.LATA4 = 1;
  3536  001356  8889               	bsf	3977,4,c	;volatile
  3537                           
  3538                           ; BSR set to: 0
  3539                           ;sort.c: 144: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3540  001358  0E9A               	movlw	154
  3541  00135A                     u8797:
  3542  00135A  2EE8               	decfsz	wreg,f,c
  3543  00135C  D7FE               	bra	u8797
  3544  00135E  D000               	nop2	
  3545                           
  3546                           ;sort.c: 145: LATAbits.LATA4 = 0;
  3547  001360  9889               	bcf	3977,4,c	;volatile
  3548                           
  3549                           ;sort.c: 146: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3550  001362  0E70               	movlw	112
  3551  001364                     u8807:
  3552  001364  2EE8               	decfsz	wreg,f,c
  3553  001366  D7FE               	bra	u8807
  3554  001368  0100               	movlb	0	; () banked
  3555  00136A  4BB8               	infsnz	Loading@i_1158& (0+255),f,b
  3556  00136C  2BB9               	incf	(Loading@i_1158+1)& (0+255),f,b
  3557  00136E  D7E8               	goto	l7294
  3558  001370                     l7304:
  3559                           
  3560                           ; BSR set to: 0
  3561                           ;sort.c: 147: }
  3562                           ;sort.c: 148: }
  3563                           ;sort.c: 150: _delay((unsigned long)((350)*(32000000/4000.0)));
  3564  001370  0E0F               	movlw	15
  3565  001372  0100               	movlb	0	; () banked
  3566  001374  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3567  001376  0E35               	movlw	53
  3568  001378  0100               	movlb	0	; () banked
  3569  00137A  6FB1               	movwf	??_Loading& (0+255),b
  3570  00137C  0E51               	movlw	81
  3571  00137E                     u8817:
  3572  00137E  2EE8               	decfsz	wreg,f,c
  3573  001380  D7FE               	bra	u8817
  3574  001382  2FB1               	decfsz	??_Loading& (0+255),f,b
  3575  001384  D7FC               	bra	u8817
  3576  001386  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3577  001388  D7FA               	bra	u8817
  3578                           
  3579                           ;sort.c: 152: readIR();
  3580  00138A  EC58  F026         	call	_readIR	;wreg free
  3581                           
  3582                           ;sort.c: 153: if(IR_signal==1){
  3583  00138E  0100               	movlb	0	; () banked
  3584  001390  05E6               	decf	_IR_signal& (0+255),w,b
  3585  001392  0100               	movlb	0	; () banked
  3586  001394  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3587  001396  A4D8               	btfss	status,2,c
  3588  001398  D148               	goto	l7422
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;sort.c: 154: _delay((unsigned long)((100)*(32000000/4000.0)));
  3592  00139A  0E05               	movlw	5
  3593  00139C  0100               	movlb	0	; () banked
  3594  00139E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3595  0013A0  0E0F               	movlw	15
  3596  0013A2  0100               	movlb	0	; () banked
  3597  0013A4  6FB1               	movwf	??_Loading& (0+255),b
  3598  0013A6  0EF1               	movlw	241
  3599  0013A8                     u8827:
  3600  0013A8  2EE8               	decfsz	wreg,f,c
  3601  0013AA  D7FE               	bra	u8827
  3602  0013AC  2FB1               	decfsz	??_Loading& (0+255),f,b
  3603  0013AE  D7FC               	bra	u8827
  3604  0013B0  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3605  0013B2  D7FA               	bra	u8827
  3606                           
  3607                           ;sort.c: 155: readIR();
  3608  0013B4  EC58  F026         	call	_readIR	;wreg free
  3609                           
  3610                           ;sort.c: 156: if(IR_signal==1){
  3611  0013B8  0100               	movlb	0	; () banked
  3612  0013BA  05E6               	decf	_IR_signal& (0+255),w,b
  3613  0013BC  0100               	movlb	0	; () banked
  3614  0013BE  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3615  0013C0  A4D8               	btfss	status,2,c
  3616  0013C2  D040               	goto	l7342
  3617                           
  3618                           ; BSR set to: 0
  3619                           ;sort.c: 157: if(sensor_outputs[0]){
  3620  0013C4  0100               	movlb	0	; () banked
  3621  0013C6  51E2               	movf	_sensor_outputs& (0+255),w,b
  3622  0013C8  0100               	movlb	0	; () banked
  3623  0013CA  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3624  0013CC  B4D8               	btfsc	status,2,c
  3625  0013CE  D01D               	goto	l7330
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;sort.c: 158: for(int i = 0; i<2500; i++){
  3629  0013D0  0E00               	movlw	0
  3630  0013D2  0100               	movlb	0	; () banked
  3631  0013D4  6FBB               	movwf	(Loading@i_1160+1)& (0+255),b
  3632  0013D6  0E00               	movlw	0
  3633  0013D8  6FBA               	movwf	Loading@i_1160& (0+255),b
  3634  0013DA                     l7320:
  3635                           
  3636                           ; BSR set to: 0
  3637  0013DA  0100               	movlb	0	; () banked
  3638  0013DC  BFBB               	btfsc	(Loading@i_1160+1)& (0+255),7,b
  3639  0013DE  D008               	goto	l778
  3640  0013E0  0EC4               	movlw	196
  3641  0013E2  0100               	movlb	0	; () banked
  3642  0013E4  5DBA               	subwf	Loading@i_1160& (0+255),w,b
  3643  0013E6  0E09               	movlw	9
  3644  0013E8  0100               	movlb	0	; () banked
  3645  0013EA  59BB               	subwfb	(Loading@i_1160+1)& (0+255),w,b
  3646  0013EC  B0D8               	btfsc	status,0,c
  3647  0013EE  D02A               	goto	l7342
  3648  0013F0                     l778:
  3649                           
  3650                           ; BSR set to: 0
  3651                           ;sort.c: 159: LATAbits.LATA4 = 1;
  3652  0013F0  8889               	bsf	3977,4,c	;volatile
  3653                           
  3654                           ; BSR set to: 0
  3655                           ;sort.c: 160: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3656  0013F2  0EC8               	movlw	200
  3657  0013F4                     u8837:
  3658  0013F4  2EE8               	decfsz	wreg,f,c
  3659  0013F6  D7FE               	bra	u8837
  3660                           
  3661                           ;sort.c: 161: LATAbits.LATA4 = 0;
  3662  0013F8  9889               	bcf	3977,4,c	;volatile
  3663                           
  3664                           ;sort.c: 162: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3665  0013FA  0E42               	movlw	66
  3666  0013FC                     u8847:
  3667  0013FC  2EE8               	decfsz	wreg,f,c
  3668  0013FE  D7FE               	bra	u8847
  3669  001400  D000               	nop2	
  3670  001402  0100               	movlb	0	; () banked
  3671  001404  4BBA               	infsnz	Loading@i_1160& (0+255),f,b
  3672  001406  2BBB               	incf	(Loading@i_1160+1)& (0+255),f,b
  3673  001408  D7E8               	goto	l7320
  3674  00140A                     l7330:
  3675                           
  3676                           ; BSR set to: 0
  3677                           ;sort.c: 165: else{
  3678                           ;sort.c: 166: for(int i = 0; i<2500; i++){
  3679  00140A  0E00               	movlw	0
  3680  00140C  0100               	movlb	0	; () banked
  3681  00140E  6FBD               	movwf	(Loading@i_1161+1)& (0+255),b
  3682  001410  0E00               	movlw	0
  3683  001412  6FBC               	movwf	Loading@i_1161& (0+255),b
  3684  001414                     l7332:
  3685                           
  3686                           ; BSR set to: 0
  3687  001414  0100               	movlb	0	; () banked
  3688  001416  BFBD               	btfsc	(Loading@i_1161+1)& (0+255),7,b
  3689  001418  D008               	goto	l781
  3690  00141A  0EC4               	movlw	196
  3691  00141C  0100               	movlb	0	; () banked
  3692  00141E  5DBC               	subwf	Loading@i_1161& (0+255),w,b
  3693  001420  0E09               	movlw	9
  3694  001422  0100               	movlb	0	; () banked
  3695  001424  59BD               	subwfb	(Loading@i_1161+1)& (0+255),w,b
  3696  001426  B0D8               	btfsc	status,0,c
  3697  001428  D00D               	goto	l7342
  3698  00142A                     l781:
  3699                           
  3700                           ; BSR set to: 0
  3701                           ;sort.c: 167: LATAbits.LATA4 = 1;
  3702  00142A  8889               	bsf	3977,4,c	;volatile
  3703                           
  3704                           ; BSR set to: 0
  3705                           ;sort.c: 168: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3706  00142C  0E9A               	movlw	154
  3707  00142E                     u8857:
  3708  00142E  2EE8               	decfsz	wreg,f,c
  3709  001430  D7FE               	bra	u8857
  3710  001432  D000               	nop2	
  3711                           
  3712                           ;sort.c: 169: LATAbits.LATA4 = 0;
  3713  001434  9889               	bcf	3977,4,c	;volatile
  3714                           
  3715                           ;sort.c: 170: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3716  001436  0E70               	movlw	112
  3717  001438                     u8867:
  3718  001438  2EE8               	decfsz	wreg,f,c
  3719  00143A  D7FE               	bra	u8867
  3720  00143C  0100               	movlb	0	; () banked
  3721  00143E  4BBC               	infsnz	Loading@i_1161& (0+255),f,b
  3722  001440  2BBD               	incf	(Loading@i_1161+1)& (0+255),f,b
  3723  001442  D7E8               	goto	l7332
  3724  001444                     l7342:
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;sort.c: 171: }
  3728                           ;sort.c: 172: }
  3729                           ;sort.c: 173: }
  3730                           ;sort.c: 175: _delay((unsigned long)((350)*(32000000/4000.0)));
  3731  001444  0E0F               	movlw	15
  3732  001446  0100               	movlb	0	; () banked
  3733  001448  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3734  00144A  0E35               	movlw	53
  3735  00144C  0100               	movlb	0	; () banked
  3736  00144E  6FB1               	movwf	??_Loading& (0+255),b
  3737  001450  0E51               	movlw	81
  3738  001452                     u8877:
  3739  001452  2EE8               	decfsz	wreg,f,c
  3740  001454  D7FE               	bra	u8877
  3741  001456  2FB1               	decfsz	??_Loading& (0+255),f,b
  3742  001458  D7FC               	bra	u8877
  3743  00145A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3744  00145C  D7FA               	bra	u8877
  3745                           
  3746                           ;sort.c: 177: int j = 1;
  3747  00145E  0E00               	movlw	0
  3748  001460  0100               	movlb	0	; () banked
  3749  001462  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3750  001464  0E01               	movlw	1
  3751  001466  6FC0               	movwf	Loading@j& (0+255),b
  3752                           
  3753                           ;sort.c: 178: while(IR_signal == 1){
  3754  001468  D0D9               	goto	l7420
  3755  00146A                     l7346:
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;sort.c: 179: readIR();
  3759  00146A  EC58  F026         	call	_readIR	;wreg free
  3760                           
  3761                           ;sort.c: 180: if(j == 10){
  3762  00146E  0E0A               	movlw	10
  3763  001470  0100               	movlb	0	; () banked
  3764  001472  19C0               	xorwf	Loading@j& (0+255),w,b
  3765  001474  0100               	movlb	0	; () banked
  3766  001476  11C1               	iorwf	(Loading@j+1)& (0+255),w,b
  3767  001478  A4D8               	btfss	status,2,c
  3768  00147A  D016               	goto	l7354
  3769                           
  3770                           ; BSR set to: 0
  3771                           ;sort.c: 181: LATBbits.LATB2 = !LATBbits.LATB2;
  3772  00147C  B48A               	btfsc	3978,2,c	;volatile
  3773  00147E  D004               	goto	u5890
  3774  001480  0100               	movlb	0	; () banked
  3775  001482  6BB1               	clrf	??_Loading& (0+255),b
  3776  001484  2BB1               	incf	??_Loading& (0+255),f,b
  3777  001486  D002               	goto	u5908
  3778  001488                     u5890:
  3779  001488  0100               	movlb	0	; () banked
  3780  00148A  6BB1               	clrf	??_Loading& (0+255),b
  3781  00148C                     u5908:
  3782  00148C  0100               	movlb	0	; () banked
  3783  00148E  47B1               	rlncf	??_Loading& (0+255),f,b
  3784  001490  47B1               	rlncf	??_Loading& (0+255),f,b
  3785  001492  508A               	movf	3978,w,c	;volatile
  3786  001494  0100               	movlb	0	; () banked
  3787  001496  19B1               	xorwf	??_Loading& (0+255),w,b
  3788  001498  0BFB               	andlw	-5
  3789  00149A  19B1               	xorwf	??_Loading& (0+255),w,b
  3790  00149C  6E8A               	movwf	3978,c	;volatile
  3791                           
  3792                           ; BSR set to: 0
  3793                           ;sort.c: 182: j = 0;
  3794  00149E  0E00               	movlw	0
  3795  0014A0  0100               	movlb	0	; () banked
  3796  0014A2  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3797  0014A4  0E00               	movlw	0
  3798  0014A6  6FC0               	movwf	Loading@j& (0+255),b
  3799  0014A8                     l7354:
  3800                           
  3801                           ; BSR set to: 0
  3802                           ;sort.c: 183: }
  3803                           ;sort.c: 184: if(IR_signal==1){
  3804  0014A8  0100               	movlb	0	; () banked
  3805  0014AA  05E6               	decf	_IR_signal& (0+255),w,b
  3806  0014AC  0100               	movlb	0	; () banked
  3807  0014AE  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3808  0014B0  A4D8               	btfss	status,2,c
  3809  0014B2  D098               	goto	l7408
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;sort.c: 185: _delay((unsigned long)((350)*(32000000/4000.0)));
  3813  0014B4  0E0F               	movlw	15
  3814  0014B6  0100               	movlb	0	; () banked
  3815  0014B8  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3816  0014BA  0E35               	movlw	53
  3817  0014BC  0100               	movlb	0	; () banked
  3818  0014BE  6FB1               	movwf	??_Loading& (0+255),b
  3819  0014C0  0E51               	movlw	81
  3820  0014C2                     u8887:
  3821  0014C2  2EE8               	decfsz	wreg,f,c
  3822  0014C4  D7FE               	bra	u8887
  3823  0014C6  2FB1               	decfsz	??_Loading& (0+255),f,b
  3824  0014C8  D7FC               	bra	u8887
  3825  0014CA  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3826  0014CC  D7FA               	bra	u8887
  3827                           
  3828                           ;sort.c: 186: readIR();
  3829  0014CE  EC58  F026         	call	_readIR	;wreg free
  3830                           
  3831                           ;sort.c: 187: if(IR_signal==1){
  3832  0014D2  0100               	movlb	0	; () banked
  3833  0014D4  05E6               	decf	_IR_signal& (0+255),w,b
  3834  0014D6  0100               	movlb	0	; () banked
  3835  0014D8  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3836  0014DA  A4D8               	btfss	status,2,c
  3837  0014DC  D07F               	goto	l787
  3838                           
  3839                           ; BSR set to: 0
  3840                           ;sort.c: 188: if(sensor_outputs[0]){
  3841  0014DE  0100               	movlb	0	; () banked
  3842  0014E0  51E2               	movf	_sensor_outputs& (0+255),w,b
  3843  0014E2  0100               	movlb	0	; () banked
  3844  0014E4  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3845  0014E6  B4D8               	btfsc	status,2,c
  3846  0014E8  D011               	goto	l7370
  3847                           
  3848                           ; BSR set to: 0
  3849                           ;sort.c: 189: LATAbits.LATA4 = 1;
  3850  0014EA  8889               	bsf	3977,4,c	;volatile
  3851                           
  3852                           ; BSR set to: 0
  3853                           ;sort.c: 190: _delay((unsigned long)((250)*(32000000/4000.0)));
  3854  0014EC  0E0B               	movlw	11
  3855  0014EE  0100               	movlb	0	; () banked
  3856  0014F0  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3857  0014F2  0E26               	movlw	38
  3858  0014F4  0100               	movlb	0	; () banked
  3859  0014F6  6FB1               	movwf	??_Loading& (0+255),b
  3860  0014F8  0E5D               	movlw	93
  3861  0014FA                     u8897:
  3862  0014FA  2EE8               	decfsz	wreg,f,c
  3863  0014FC  D7FE               	bra	u8897
  3864  0014FE  2FB1               	decfsz	??_Loading& (0+255),f,b
  3865  001500  D7FC               	bra	u8897
  3866  001502  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3867  001504  D7FA               	bra	u8897
  3868  001506  D000               	nop2	
  3869                           
  3870                           ;sort.c: 191: LATAbits.LATA4 = 0;
  3871  001508  9889               	bcf	3977,4,c	;volatile
  3872                           
  3873                           ;sort.c: 192: }
  3874  00150A  D068               	goto	l787
  3875  00150C                     l7370:
  3876                           
  3877                           ;sort.c: 193: else{
  3878                           ;sort.c: 194: for(int i = 0; i<2500; i++){
  3879  00150C  0E00               	movlw	0
  3880  00150E  0100               	movlb	0	; () banked
  3881  001510  6FBF               	movwf	(Loading@i_1163+1)& (0+255),b
  3882  001512  0E00               	movlw	0
  3883  001514  6FBE               	movwf	Loading@i_1163& (0+255),b
  3884  001516                     l7372:
  3885                           
  3886                           ; BSR set to: 0
  3887  001516  0100               	movlb	0	; () banked
  3888  001518  BFBF               	btfsc	(Loading@i_1163+1)& (0+255),7,b
  3889  00151A  D041               	goto	l7400
  3890  00151C  0EC4               	movlw	196
  3891  00151E  0100               	movlb	0	; () banked
  3892  001520  5DBE               	subwf	Loading@i_1163& (0+255),w,b
  3893  001522  0E09               	movlw	9
  3894  001524  0100               	movlb	0	; () banked
  3895  001526  59BF               	subwfb	(Loading@i_1163+1)& (0+255),w,b
  3896  001528  B0D8               	btfsc	status,0,c
  3897  00152A  D058               	goto	l787
  3898  00152C  D038               	goto	l7400
  3899  00152E                     l793:
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;sort.c: 197: LATAbits.LATA4 = 1;
  3903  00152E  8889               	bsf	3977,4,c	;volatile
  3904                           
  3905                           ; BSR set to: 0
  3906                           ;sort.c: 198: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3907  001530  0EC8               	movlw	200
  3908  001532                     u8907:
  3909  001532  2EE8               	decfsz	wreg,f,c
  3910  001534  D7FE               	bra	u8907
  3911                           
  3912                           ;sort.c: 199: LATAbits.LATA4 = 0;
  3913  001536  9889               	bcf	3977,4,c	;volatile
  3914                           
  3915                           ;sort.c: 200: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3916  001538  0E42               	movlw	66
  3917  00153A                     u8917:
  3918  00153A  2EE8               	decfsz	wreg,f,c
  3919  00153C  D7FE               	bra	u8917
  3920  00153E  D01C               	goto	L2
  3921  001540                     l795:
  3922                           
  3923                           ; BSR set to: 0
  3924                           ;sort.c: 203: LATAbits.LATA4 = 1;
  3925  001540  8889               	bsf	3977,4,c	;volatile
  3926                           
  3927                           ; BSR set to: 0
  3928                           ;sort.c: 204: _delay((unsigned long)((80)*(32000000/4000000.0)));
  3929  001542  0ED5               	movlw	213
  3930  001544                     u8927:
  3931  001544  2EE8               	decfsz	wreg,f,c
  3932  001546  D7FE               	bra	u8927
  3933  001548  F000               	nop	
  3934                           
  3935                           ;sort.c: 205: LATAbits.LATA4 = 0;
  3936  00154A  9889               	bcf	3977,4,c	;volatile
  3937                           
  3938                           ;sort.c: 206: _delay((unsigned long)((20)*(32000000/4000000.0)));
  3939  00154C  0E35               	movlw	53
  3940  00154E                     u8937:
  3941  00154E  2EE8               	decfsz	wreg,f,c
  3942  001550  D7FE               	bra	u8937
  3943  001552  D01D               	goto	L3
  3944  001554                     l796:
  3945                           
  3946                           ; BSR set to: 0
  3947                           ;sort.c: 209: LATAbits.LATA4 = 1;
  3948  001554  8889               	bsf	3977,4,c	;volatile
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;sort.c: 210: _delay((unsigned long)((85)*(32000000/4000000.0)));
  3952  001556  0EE2               	movlw	226
  3953  001558                     u8947:
  3954  001558  2EE8               	decfsz	wreg,f,c
  3955  00155A  D7FE               	bra	u8947
  3956  00155C  D000               	nop2	
  3957                           
  3958                           ;sort.c: 211: LATAbits.LATA4 = 0;
  3959  00155E  9889               	bcf	3977,4,c	;volatile
  3960                           
  3961                           ;sort.c: 212: _delay((unsigned long)((15)*(32000000/4000000.0)));
  3962  001560  0E28               	movlw	40
  3963  001562                     u8957:
  3964  001562  2EE8               	decfsz	wreg,f,c
  3965  001564  D7FE               	bra	u8957
  3966                           
  3967                           ;sort.c: 213: break;
  3968  001566  D036               	goto	l7402
  3969  001568                     l797:
  3970                           
  3971                           ; BSR set to: 0
  3972                           ;sort.c: 215: LATAbits.LATA4 = 1;
  3973  001568  8889               	bsf	3977,4,c	;volatile
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;sort.c: 216: _delay((unsigned long)((90)*(32000000/4000000.0)));
  3977  00156A  0EF0               	movlw	240
  3978  00156C                     u8967:
  3979  00156C  2EE8               	decfsz	wreg,f,c
  3980  00156E  D7FE               	bra	u8967
  3981                           
  3982                           ;sort.c: 217: LATAbits.LATA4 = 0;
  3983  001570  9889               	bcf	3977,4,c	;volatile
  3984                           
  3985                           ;sort.c: 218: _delay((unsigned long)((10)*(32000000/4000000.0)));
  3986  001572  0E1A               	movlw	26
  3987  001574                     u8977:
  3988  001574  2EE8               	decfsz	wreg,f,c
  3989  001576  D7FE               	bra	u8977
  3990  001578                     L2:
  3991  001578  D000               	nop2	
  3992                           
  3993                           ;sort.c: 219: break;
  3994  00157A  D02C               	goto	l7402
  3995  00157C                     l798:
  3996                           
  3997                           ; BSR set to: 0
  3998                           ;sort.c: 221: LATAbits.LATA4 = 1;
  3999  00157C  8889               	bsf	3977,4,c	;volatile
  4000                           
  4001                           ; BSR set to: 0
  4002                           ;sort.c: 222: _delay((unsigned long)((95)*(32000000/4000000.0)));
  4003  00157E  0EFD               	movlw	253
  4004  001580                     u8987:
  4005  001580  2EE8               	decfsz	wreg,f,c
  4006  001582  D7FE               	bra	u8987
  4007  001584  F000               	nop	
  4008                           
  4009                           ;sort.c: 223: LATAbits.LATA4 = 0;
  4010  001586  9889               	bcf	3977,4,c	;volatile
  4011                           
  4012                           ;sort.c: 224: _delay((unsigned long)((5)*(32000000/4000000.0)));
  4013  001588  0E0D               	movlw	13
  4014  00158A                     u8997:
  4015  00158A  2EE8               	decfsz	wreg,f,c
  4016  00158C  D7FE               	bra	u8997
  4017  00158E                     L3:
  4018  00158E  F000               	nop	
  4019                           
  4020                           ;sort.c: 225: break;
  4021  001590  D021               	goto	l7402
  4022  001592                     l799:
  4023                           
  4024                           ; BSR set to: 0
  4025                           ;sort.c: 227: LATAbits.LATA4 = 1;
  4026  001592  8889               	bsf	3977,4,c	;volatile
  4027                           
  4028                           ; BSR set to: 0
  4029                           ;sort.c: 228: _delay((unsigned long)((100)*(32000000/4000000.0)));
  4030  001594  0EA0               	movlw	160
  4031  001596                     u9007:
  4032  001596  D000               	nop2	
  4033  001598  2EE8               	decfsz	wreg,f,c
  4034  00159A  D7FD               	bra	u9007
  4035                           
  4036                           ;sort.c: 230: }
  4037                           
  4038                           ;sort.c: 229: break;
  4039  00159C  D01B               	goto	l7402
  4040  00159E                     l7400:
  4041  00159E  C0C0  F0B1         	movff	Loading@j,??_Loading
  4042  0015A2  C0C1  F0B2         	movff	Loading@j+1,??_Loading+1
  4043                           
  4044                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4045                           ; Switch size 1, requested type "space"
  4046                           ; Number of cases is 1, Range of values is 0 to 0
  4047                           ; switch strategies available:
  4048                           ; Name         Instructions Cycles
  4049                           ; simple_byte            4     3 (average)
  4050                           ;	Chosen strategy is simple_byte
  4051  0015A6  0100               	movlb	0	; () banked
  4052  0015A8  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4053  0015AA  0A00               	xorlw	0	; case 0
  4054  0015AC  A4D8               	btfss	status,2,c
  4055  0015AE  D7F1               	goto	l799
  4056                           
  4057                           ; BSR set to: 0
  4058                           ; Switch size 1, requested type "space"
  4059                           ; Number of cases is 5, Range of values is 1 to 5
  4060                           ; switch strategies available:
  4061                           ; Name         Instructions Cycles
  4062                           ; simple_byte           16     9 (average)
  4063                           ;	Chosen strategy is simple_byte
  4064  0015B0  0100               	movlb	0	; () banked
  4065  0015B2  51B1               	movf	??_Loading& (0+255),w,b
  4066  0015B4  0A01               	xorlw	1	; case 1
  4067  0015B6  B4D8               	btfsc	status,2,c
  4068  0015B8  D7BA               	goto	l793
  4069  0015BA  0A03               	xorlw	3	; case 2
  4070  0015BC  B4D8               	btfsc	status,2,c
  4071  0015BE  D7C0               	goto	l795
  4072  0015C0  0A01               	xorlw	1	; case 3
  4073  0015C2  B4D8               	btfsc	status,2,c
  4074  0015C4  D7C7               	goto	l796
  4075  0015C6  0A07               	xorlw	7	; case 4
  4076  0015C8  B4D8               	btfsc	status,2,c
  4077  0015CA  D7CE               	goto	l797
  4078  0015CC  0A01               	xorlw	1	; case 5
  4079  0015CE  B4D8               	btfsc	status,2,c
  4080  0015D0  D7D5               	goto	l798
  4081  0015D2  D7DF               	goto	l799
  4082  0015D4                     l7402:
  4083  0015D4  0100               	movlb	0	; () banked
  4084  0015D6  4BBE               	infsnz	Loading@i_1163& (0+255),f,b
  4085  0015D8  2BBF               	incf	(Loading@i_1163+1)& (0+255),f,b
  4086  0015DA  D79D               	goto	l7372
  4087  0015DC                     l787:
  4088                           
  4089                           ;sort.c: 231: }
  4090                           ;sort.c: 232: }
  4091                           ;sort.c: 233: }
  4092                           ;sort.c: 234: LATAbits.LATA4 = 0;
  4093  0015DC  9889               	bcf	3977,4,c	;volatile
  4094                           
  4095                           ;sort.c: 235: j++;
  4096  0015DE  0100               	movlb	0	; () banked
  4097  0015E0  4BC0               	infsnz	Loading@j& (0+255),f,b
  4098  0015E2  2BC1               	incf	(Loading@j+1)& (0+255),f,b
  4099  0015E4                     l7408:
  4100                           
  4101                           ; BSR set to: 0
  4102                           ;sort.c: 236: }
  4103                           ;sort.c: 238: if(!IR_signal){
  4104  0015E4  0100               	movlb	0	; () banked
  4105  0015E6  51E6               	movf	_IR_signal& (0+255),w,b
  4106  0015E8  0100               	movlb	0	; () banked
  4107  0015EA  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4108  0015EC  A4D8               	btfss	status,2,c
  4109  0015EE  D016               	goto	l7420
  4110                           
  4111                           ; BSR set to: 0
  4112                           ;sort.c: 239: _delay((unsigned long)((500)*(32000000/4000.0)));
  4113  0015F0  0E15               	movlw	21
  4114  0015F2  0100               	movlb	0	; () banked
  4115  0015F4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4116  0015F6  0E4B               	movlw	75
  4117  0015F8  0100               	movlb	0	; () banked
  4118  0015FA  6FB1               	movwf	??_Loading& (0+255),b
  4119  0015FC  0EBE               	movlw	190
  4120  0015FE                     u9017:
  4121  0015FE  2EE8               	decfsz	wreg,f,c
  4122  001600  D7FE               	bra	u9017
  4123  001602  2FB1               	decfsz	??_Loading& (0+255),f,b
  4124  001604  D7FC               	bra	u9017
  4125  001606  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4126  001608  D7FA               	bra	u9017
  4127  00160A  F000               	nop	
  4128                           
  4129                           ;sort.c: 240: readIR();
  4130  00160C  EC58  F026         	call	_readIR	;wreg free
  4131                           
  4132                           ;sort.c: 241: if(IR_signal==1){
  4133  001610  0100               	movlb	0	; () banked
  4134  001612  05E6               	decf	_IR_signal& (0+255),w,b
  4135  001614  0100               	movlb	0	; () banked
  4136  001616  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4137  001618  A4D8               	btfss	status,2,c
  4138  00161A  D006               	goto	l803
  4139  00161C                     l7420:
  4140                           
  4141                           ; BSR set to: 0
  4142  00161C  0100               	movlb	0	; () banked
  4143  00161E  05E6               	decf	_IR_signal& (0+255),w,b
  4144  001620  0100               	movlb	0	; () banked
  4145  001622  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4146  001624  B4D8               	btfsc	status,2,c
  4147  001626  D721               	goto	l7346
  4148  001628                     l803:
  4149                           
  4150                           ; BSR set to: 0
  4151                           ;sort.c: 246: }
  4152                           ;sort.c: 247: }
  4153                           ;sort.c: 248: }
  4154                           ;sort.c: 249: LATBbits.LATB2 = 0;
  4155  001628  948A               	bcf	3978,2,c	;volatile
  4156  00162A                     l7422:
  4157                           
  4158                           ; BSR set to: 0
  4159                           ;sort.c: 250: }
  4160                           ;sort.c: 251: f_can_coming_to_ID = 1;
  4161  00162A  0E00               	movlw	0
  4162  00162C  0101               	movlb	1	; () banked
  4163  00162E  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4164  001630  0E01               	movlw	1
  4165  001632  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4166                           
  4167                           ; BSR set to: 1
  4168                           
  4169                           ; BSR set to: 1
  4170  001634  0012               	return	
  4171  001636                     __end_of_Loading:
  4172                           	opt stack 0
  4173                           tblptru	equ	0xFF8
  4174                           tblptrh	equ	0xFF7
  4175                           tblptrl	equ	0xFF6
  4176                           tablat	equ	0xFF5
  4177                           prodh	equ	0xFF4
  4178                           prodl	equ	0xFF3
  4179                           postinc0	equ	0xFEE
  4180                           wreg	equ	0xFE8
  4181                           postdec1	equ	0xFE5
  4182                           fsr1l	equ	0xFE1
  4183                           status	equ	0xFD8
  4184                           
  4185 ;; *************** function _initSortTimer *****************
  4186 ;; Defined at:
  4187 ;;		line 408 in file "sort.c"
  4188 ;; Parameters:    Size  Location     Type
  4189 ;;		None
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;  i               2    8[BANK0 ] int 
  4192 ;; Return value:  Size  Location     Type
  4193 ;;                  1    wreg      void 
  4194 ;; Registers used:
  4195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4196 ;; Tracked objects:
  4197 ;;		On entry : 0/0
  4198 ;;		On exit  : 0/0
  4199 ;;		Unchanged: 0/0
  4200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4202 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4203 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4204 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4205 ;;Total ram usage:        5 bytes
  4206 ;; Hardware stack levels used:    1
  4207 ;; Hardware stack levels required when called:   10
  4208 ;; This function calls:
  4209 ;;		_getRTC
  4210 ;; This function is called by:
  4211 ;;		_Loading
  4212 ;; This function uses a non-reentrant model
  4213 ;;
  4214                           
  4215                           	psect	text4
  4216  004446                     __ptext4:
  4217                           	opt stack 0
  4218  004446                     _initSortTimer:
  4219                           	opt stack 18
  4220                           
  4221                           ;sort.c: 410: getRTC();
  4222                           
  4223                           ;incstack = 0
  4224  004446  EC0F  F023         	call	_getRTC	;wreg free
  4225                           
  4226                           ;sort.c: 411: for(int i = 0; i < 7; i++){
  4227  00444A  0E00               	movlw	0
  4228  00444C  0100               	movlb	0	; () banked
  4229  00444E  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4230  004450  0E00               	movlw	0
  4231  004452  6F88               	movwf	initSortTimer@i& (0+255),b
  4232  004454                     l6824:
  4233                           
  4234                           ; BSR set to: 0
  4235  004454  0100               	movlb	0	; () banked
  4236  004456  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4237  004458  D008               	goto	l6828
  4238  00445A  0100               	movlb	0	; () banked
  4239  00445C  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4240  00445E  E140               	bnz	l6834
  4241  004460  0E07               	movlw	7
  4242  004462  0100               	movlb	0	; () banked
  4243  004464  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4244  004466  B0D8               	btfsc	status,0,c
  4245  004468  D03B               	goto	l6834
  4246  00446A                     l6828:
  4247                           
  4248                           ; BSR set to: 0
  4249                           ;sort.c: 412: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4250  00446A  0E1C               	movlw	low _time
  4251  00446C  0100               	movlb	0	; () banked
  4252  00446E  2588               	addwf	initSortTimer@i& (0+255),w,b
  4253  004470  6ED9               	movwf	fsr2l,c
  4254  004472  0E01               	movlw	high _time
  4255  004474  0100               	movlb	0	; () banked
  4256  004476  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4257  004478  6EDA               	movwf	fsr2h,c
  4258  00447A  50DF               	movf	indf2,w,c
  4259  00447C  0100               	movlb	0	; () banked
  4260  00447E  6F85               	movwf	??_initSortTimer& (0+255),b
  4261  004480  0100               	movlb	0	; () banked
  4262  004482  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4263  004484  0E0F               	movlw	15
  4264  004486  1785               	andwf	??_initSortTimer& (0+255),f,b
  4265  004488  0E0F               	movlw	15
  4266  00448A  0100               	movlb	0	; () banked
  4267  00448C  1785               	andwf	??_initSortTimer& (0+255),f,b
  4268  00448E  0100               	movlb	0	; () banked
  4269  004490  5185               	movf	??_initSortTimer& (0+255),w,b
  4270  004492  0D0A               	mullw	10
  4271  004494  0E1C               	movlw	low _time
  4272  004496  0100               	movlb	0	; () banked
  4273  004498  2588               	addwf	initSortTimer@i& (0+255),w,b
  4274  00449A  6ED9               	movwf	fsr2l,c
  4275  00449C  0E01               	movlw	high _time
  4276  00449E  0100               	movlb	0	; () banked
  4277  0044A0  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4278  0044A2  6EDA               	movwf	fsr2h,c
  4279  0044A4  50DF               	movf	indf2,w,c
  4280  0044A6  0B0F               	andlw	15
  4281  0044A8  0100               	movlb	0	; () banked
  4282  0044AA  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4283  0044AC  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4284  0044AE  50F3               	movf	prodl,w,c
  4285  0044B0  0100               	movlb	0	; () banked
  4286  0044B2  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4287  0044B4  50F4               	movf	prodh,w,c
  4288  0044B6  0100               	movlb	0	; () banked
  4289  0044B8  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4290  0044BA  90D8               	bcf	status,0,c
  4291  0044BC  0100               	movlb	0	; () banked
  4292  0044BE  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4293  0044C0  6ED9               	movwf	fsr2l,c
  4294  0044C2  0100               	movlb	0	; () banked
  4295  0044C4  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4296  0044C6  6EDA               	movwf	fsr2h,c
  4297  0044C8  0E0E               	movlw	low _startTime
  4298  0044CA  26D9               	addwf	fsr2l,f,c
  4299  0044CC  0E01               	movlw	high _startTime
  4300  0044CE  22DA               	addwfc	fsr2h,f,c
  4301  0044D0  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4302  0044D4  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4303                           
  4304                           ; BSR set to: 0
  4305  0044D8  0100               	movlb	0	; () banked
  4306  0044DA  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4307  0044DC  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4308  0044DE  D7BA               	goto	l6824
  4309  0044E0                     l6834:
  4310                           
  4311                           ; BSR set to: 0
  4312                           ;sort.c: 413: }
  4313                           ;sort.c: 415: T0CON = 0b00010111;
  4314  0044E0  0E17               	movlw	23
  4315  0044E2  6ED5               	movwf	4053,c	;volatile
  4316                           
  4317                           ;sort.c: 424: TMR0H = 0b10000101;
  4318  0044E4  0E85               	movlw	133
  4319  0044E6  6ED7               	movwf	4055,c	;volatile
  4320                           
  4321                           ;sort.c: 425: TMR0L = 0b11101110;
  4322  0044E8  0EEE               	movlw	238
  4323  0044EA  6ED6               	movwf	4054,c	;volatile
  4324                           
  4325                           ; BSR set to: 0
  4326                           ;sort.c: 426: TMR0ON = 1;
  4327  0044EC  8ED5               	bsf	4053,7,c	;volatile
  4328                           
  4329                           ; BSR set to: 0
  4330  0044EE  0012               	return		;funcret
  4331  0044F0                     __end_of_initSortTimer:
  4332                           	opt stack 0
  4333                           tblptru	equ	0xFF8
  4334                           tblptrh	equ	0xFF7
  4335                           tblptrl	equ	0xFF6
  4336                           tablat	equ	0xFF5
  4337                           prodh	equ	0xFF4
  4338                           prodl	equ	0xFF3
  4339                           postinc0	equ	0xFEE
  4340                           wreg	equ	0xFE8
  4341                           postdec1	equ	0xFE5
  4342                           fsr1l	equ	0xFE1
  4343                           indf2	equ	0xFDF
  4344                           postinc2	equ	0xFDE
  4345                           postdec2	equ	0xFDD
  4346                           fsr2h	equ	0xFDA
  4347                           fsr2l	equ	0xFD9
  4348                           status	equ	0xFD8
  4349                           
  4350 ;; *************** function _initGlobalVars *****************
  4351 ;; Defined at:
  4352 ;;		line 378 in file "sort.c"
  4353 ;; Parameters:    Size  Location     Type
  4354 ;;		None
  4355 ;; Auto vars:     Size  Location     Type
  4356 ;;		None
  4357 ;; Return value:  Size  Location     Type
  4358 ;;                  1    wreg      void 
  4359 ;; Registers used:
  4360 ;;		wreg, status,2
  4361 ;; Tracked objects:
  4362 ;;		On entry : 0/0
  4363 ;;		On exit  : 0/0
  4364 ;;		Unchanged: 0/0
  4365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4370 ;;Total ram usage:        0 bytes
  4371 ;; Hardware stack levels used:    1
  4372 ;; Hardware stack levels required when called:    7
  4373 ;; This function calls:
  4374 ;;		Nothing
  4375 ;; This function is called by:
  4376 ;;		_Loading
  4377 ;; This function uses a non-reentrant model
  4378 ;;
  4379                           
  4380                           	psect	text5
  4381  00439A                     __ptext5:
  4382                           	opt stack 0
  4383  00439A                     _initGlobalVars:
  4384                           	opt stack 21
  4385                           
  4386                           ;sort.c: 380: first = 0;
  4387                           
  4388                           ; BSR set to: 0
  4389                           ;incstack = 0
  4390  00439A  0E00               	movlw	0
  4391  00439C  0101               	movlb	1	; () banked
  4392  00439E  6F3A               	movwf	(_first+1)& (0+255),b
  4393  0043A0  0E00               	movlw	0
  4394  0043A2  6F39               	movwf	_first& (0+255),b
  4395                           
  4396                           ;sort.c: 383: f_loadingNewCan = 0;
  4397  0043A4  0E00               	movlw	0
  4398  0043A6  0100               	movlb	0	; () banked
  4399  0043A8  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4400  0043AA  0E00               	movlw	0
  4401  0043AC  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  4402                           
  4403                           ;sort.c: 384: f_lastCan = 0;
  4404  0043AE  0E00               	movlw	0
  4405  0043B0  0100               	movlb	0	; () banked
  4406  0043B2  6FEF               	movwf	(_f_lastCan+1)& (0+255),b
  4407  0043B4  0E00               	movlw	0
  4408  0043B6  6FEE               	movwf	_f_lastCan& (0+255),b
  4409                           
  4410                           ;sort.c: 385: f_ID_receive = 1;
  4411  0043B8  0E00               	movlw	0
  4412  0043BA  0101               	movlb	1	; () banked
  4413  0043BC  6F30               	movwf	(_f_ID_receive+1)& (0+255),b
  4414  0043BE  0E01               	movlw	1
  4415  0043C0  6F2F               	movwf	_f_ID_receive& (0+255),b
  4416                           
  4417                           ;sort.c: 386: f_can_coming_to_ID = 0;
  4418  0043C2  0E00               	movlw	0
  4419  0043C4  0101               	movlb	1	; () banked
  4420  0043C6  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4421  0043C8  0E00               	movlw	0
  4422  0043CA  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4423                           
  4424                           ;sort.c: 387: f_can_coming_to_distribution = 0;
  4425  0043CC  0E00               	movlw	0
  4426  0043CE  0101               	movlb	1	; () banked
  4427  0043D0  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4428  0043D2  0E00               	movlw	0
  4429  0043D4  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  4430                           
  4431                           ;sort.c: 388: f_can_distributed = 1;
  4432  0043D6  0E00               	movlw	0
  4433  0043D8  0101               	movlb	1	; () banked
  4434  0043DA  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  4435  0043DC  0E01               	movlw	1
  4436  0043DE  6F35               	movwf	_f_can_distributed& (0+255),b
  4437                           
  4438                           ;sort.c: 389: f_most_recent_sort_time = 0;
  4439  0043E0  0E00               	movlw	0
  4440  0043E2  0101               	movlb	1	; () banked
  4441  0043E4  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4442  0043E6  0E00               	movlw	0
  4443  0043E8  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  4444                           
  4445                           ;sort.c: 392: count_total = 0;
  4446  0043EA  0E00               	movlw	0
  4447  0043EC  0100               	movlb	0	; () banked
  4448  0043EE  6FFF               	movwf	(_count_total+1)& (0+255),b
  4449  0043F0  0E00               	movlw	0
  4450  0043F2  6FFE               	movwf	_count_total& (0+255),b
  4451                           
  4452                           ;sort.c: 393: count_pop_no_tab = 0;
  4453  0043F4  0E00               	movlw	0
  4454  0043F6  0101               	movlb	1	; () banked
  4455  0043F8  6F28               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4456  0043FA  0E00               	movlw	0
  4457  0043FC  6F27               	movwf	_count_pop_no_tab& (0+255),b
  4458                           
  4459                           ;sort.c: 394: count_pop_w_tab = 0;
  4460  0043FE  0E00               	movlw	0
  4461  004400  0101               	movlb	1	; () banked
  4462  004402  6F2A               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4463  004404  0E00               	movlw	0
  4464  004406  6F29               	movwf	_count_pop_w_tab& (0+255),b
  4465                           
  4466                           ;sort.c: 395: count_can_w_lab = 0;
  4467  004408  0E00               	movlw	0
  4468  00440A  0101               	movlb	1	; () banked
  4469  00440C  6F26               	movwf	(_count_can_w_lab+1)& (0+255),b
  4470  00440E  0E00               	movlw	0
  4471  004410  6F25               	movwf	_count_can_w_lab& (0+255),b
  4472                           
  4473                           ;sort.c: 396: count_can_no_lab = 0;
  4474  004412  0E00               	movlw	0
  4475  004414  0101               	movlb	1	; () banked
  4476  004416  6F24               	movwf	(_count_can_no_lab+1)& (0+255),b
  4477  004418  0E00               	movlw	0
  4478  00441A  6F23               	movwf	_count_can_no_lab& (0+255),b
  4479                           
  4480                           ;sort.c: 399: most_recent_sort_time = 999;
  4481  00441C  0E03               	movlw	3
  4482  00441E  6E6E               	movwf	_most_recent_sort_time+1,c
  4483  004420  0EE7               	movlw	231
  4484  004422  6E6D               	movwf	_most_recent_sort_time,c
  4485                           
  4486                           ;sort.c: 402: servo_timer_counter = 0;
  4487  004424  0E00               	movlw	0
  4488  004426  6E72               	movwf	_servo_timer_counter+1,c	;volatile
  4489  004428  0E00               	movlw	0
  4490  00442A  6E71               	movwf	_servo_timer_counter,c	;volatile
  4491                           
  4492                           ;sort.c: 403: servo_timer_target = 9999;
  4493  00442C  0E27               	movlw	39
  4494  00442E  6E74               	movwf	_servo_timer_target+1,c	;volatile
  4495  004430  0E0F               	movlw	15
  4496  004432  6E73               	movwf	_servo_timer_target,c	;volatile
  4497                           
  4498                           ; BSR set to: 1
  4499                           ;sort.c: 404: pan_servo_state = -1;
  4500  004434  686F               	setf	_pan_servo_state,c	;volatile
  4501  004436  6870               	setf	_pan_servo_state+1,c	;volatile
  4502                           
  4503                           ; BSR set to: 1
  4504                           ;sort.c: 405: tilt_servo_state = -1;
  4505  004438  6875               	setf	_tilt_servo_state,c	;volatile
  4506  00443A  6876               	setf	_tilt_servo_state+1,c	;volatile
  4507                           
  4508                           ;sort.c: 406: f_panning_to_bin = 0;
  4509  00443C  0E00               	movlw	0
  4510  00443E  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  4511  004440  0E00               	movlw	0
  4512  004442  6E61               	movwf	_f_panning_to_bin,c	;volatile
  4513                           
  4514                           ; BSR set to: 1
  4515  004444  0012               	return		;funcret
  4516  004446                     __end_of_initGlobalVars:
  4517                           	opt stack 0
  4518                           tblptru	equ	0xFF8
  4519                           tblptrh	equ	0xFF7
  4520                           tblptrl	equ	0xFF6
  4521                           tablat	equ	0xFF5
  4522                           prodh	equ	0xFF4
  4523                           prodl	equ	0xFF3
  4524                           postinc0	equ	0xFEE
  4525                           wreg	equ	0xFE8
  4526                           postdec1	equ	0xFE5
  4527                           fsr1l	equ	0xFE1
  4528                           indf2	equ	0xFDF
  4529                           postinc2	equ	0xFDE
  4530                           postdec2	equ	0xFDD
  4531                           fsr2h	equ	0xFDA
  4532                           fsr2l	equ	0xFD9
  4533                           status	equ	0xFD8
  4534                           
  4535 ;; *************** function _getMAG *****************
  4536 ;; Defined at:
  4537 ;;		line 496 in file "sort.c"
  4538 ;; Parameters:    Size  Location     Type
  4539 ;;		None
  4540 ;; Auto vars:     Size  Location     Type
  4541 ;;		None
  4542 ;; Return value:  Size  Location     Type
  4543 ;;                  1    wreg      void 
  4544 ;; Registers used:
  4545 ;;		wreg, status,2, status,0, cstack
  4546 ;; Tracked objects:
  4547 ;;		On entry : 0/0
  4548 ;;		On exit  : 0/0
  4549 ;;		Unchanged: 0/0
  4550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4553 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4554 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4555 ;;Total ram usage:        2 bytes
  4556 ;; Hardware stack levels used:    1
  4557 ;; Hardware stack levels required when called:    9
  4558 ;; This function calls:
  4559 ;;		_readMAG
  4560 ;; This function is called by:
  4561 ;;		_Loading
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565                           	psect	text6
  4566  004EAC                     __ptext6:
  4567                           	opt stack 0
  4568  004EAC                     _getMAG:
  4569                           	opt stack 19
  4570                           
  4571                           ;sort.c: 497: readMAG();
  4572                           
  4573                           ; BSR set to: 1
  4574                           ;incstack = 0
  4575  004EAC  EC7E  F026         	call	_readMAG	;wreg free
  4576                           
  4577                           ;sort.c: 499: if(MAG_signal==1){
  4578  004EB0  0100               	movlb	0	; () banked
  4579  004EB2  05E8               	decf	_MAG_signal& (0+255),w,b
  4580  004EB4  0100               	movlb	0	; () banked
  4581  004EB6  11E9               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4582  004EB8  A4D8               	btfss	status,2,c
  4583  004EBA  0012               	return	
  4584                           
  4585                           ; BSR set to: 0
  4586                           ;sort.c: 500: _delay((unsigned long)((500)*(32000000/4000.0)));
  4587  004EBC  0E15               	movlw	21
  4588  004EBE  0100               	movlb	0	; () banked
  4589  004EC0  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4590  004EC2  0E4B               	movlw	75
  4591  004EC4  0100               	movlb	0	; () banked
  4592  004EC6  6F86               	movwf	??_getMAG& (0+255),b
  4593  004EC8  0EBE               	movlw	190
  4594  004ECA                     u9027:
  4595  004ECA  2EE8               	decfsz	wreg,f,c
  4596  004ECC  D7FE               	bra	u9027
  4597  004ECE  2F86               	decfsz	??_getMAG& (0+255),f,b
  4598  004ED0  D7FC               	bra	u9027
  4599  004ED2  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4600  004ED4  D7FA               	bra	u9027
  4601  004ED6  F000               	nop	
  4602                           
  4603                           ;sort.c: 501: readMAG();
  4604  004ED8  EC7E  F026         	call	_readMAG	;wreg free
  4605  004EDC  0012               	return	
  4606  004EDE                     __end_of_getMAG:
  4607                           	opt stack 0
  4608                           tblptru	equ	0xFF8
  4609                           tblptrh	equ	0xFF7
  4610                           tblptrl	equ	0xFF6
  4611                           tablat	equ	0xFF5
  4612                           prodh	equ	0xFF4
  4613                           prodl	equ	0xFF3
  4614                           postinc0	equ	0xFEE
  4615                           wreg	equ	0xFE8
  4616                           postdec1	equ	0xFE5
  4617                           fsr1l	equ	0xFE1
  4618                           indf2	equ	0xFDF
  4619                           postinc2	equ	0xFDE
  4620                           postdec2	equ	0xFDD
  4621                           fsr2h	equ	0xFDA
  4622                           fsr2l	equ	0xFD9
  4623                           status	equ	0xFD8
  4624                           
  4625 ;; *************** function _getIR *****************
  4626 ;; Defined at:
  4627 ;;		line 480 in file "sort.c"
  4628 ;; Parameters:    Size  Location     Type
  4629 ;;		None
  4630 ;; Auto vars:     Size  Location     Type
  4631 ;;  i               2    7[BANK0 ] int 
  4632 ;; Return value:  Size  Location     Type
  4633 ;;                  1    wreg      void 
  4634 ;; Registers used:
  4635 ;;		wreg, status,2, status,0, cstack
  4636 ;; Tracked objects:
  4637 ;;		On entry : 0/0
  4638 ;;		On exit  : 0/0
  4639 ;;		Unchanged: 0/0
  4640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4642 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4643 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4644 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4645 ;;Total ram usage:        3 bytes
  4646 ;; Hardware stack levels used:    1
  4647 ;; Hardware stack levels required when called:    9
  4648 ;; This function calls:
  4649 ;;		_readIR
  4650 ;; This function is called by:
  4651 ;;		_Loading
  4652 ;; This function uses a non-reentrant model
  4653 ;;
  4654                           
  4655                           	psect	text7
  4656  004826                     __ptext7:
  4657                           	opt stack 0
  4658  004826                     _getIR:
  4659                           	opt stack 19
  4660                           
  4661                           ;sort.c: 481: readIR();
  4662                           
  4663                           ;incstack = 0
  4664  004826  EC58  F026         	call	_readIR	;wreg free
  4665                           
  4666                           ;sort.c: 482: for(int i = 0; i < 150; i++){
  4667  00482A  0E00               	movlw	0
  4668  00482C  0100               	movlb	0	; () banked
  4669  00482E  6F88               	movwf	(getIR@i+1)& (0+255),b
  4670  004830  0E00               	movlw	0
  4671  004832  6F87               	movwf	getIR@i& (0+255),b
  4672  004834                     l6916:
  4673                           
  4674                           ; BSR set to: 0
  4675  004834  0100               	movlb	0	; () banked
  4676  004836  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4677  004838  D008               	goto	l6920
  4678  00483A  0100               	movlb	0	; () banked
  4679  00483C  5188               	movf	(getIR@i+1)& (0+255),w,b
  4680  00483E  E11A               	bnz	l6932
  4681  004840  0E96               	movlw	150
  4682  004842  0100               	movlb	0	; () banked
  4683  004844  5D87               	subwf	getIR@i& (0+255),w,b
  4684  004846  B0D8               	btfsc	status,0,c
  4685  004848  D015               	goto	l6932
  4686  00484A                     l6920:
  4687                           
  4688                           ; BSR set to: 0
  4689                           ;sort.c: 483: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4690  00484A  0E06               	movlw	6
  4691  00484C  0100               	movlb	0	; () banked
  4692  00484E  6F86               	movwf	??_getIR& (0+255),b
  4693  004850  0E30               	movlw	48
  4694  004852                     u9037:
  4695  004852  2EE8               	decfsz	wreg,f,c
  4696  004854  D7FE               	bra	u9037
  4697  004856  2F86               	decfsz	??_getIR& (0+255),f,b
  4698  004858  D7FC               	bra	u9037
  4699  00485A  F000               	nop	
  4700                           
  4701                           ;sort.c: 484: readIR();
  4702  00485C  EC58  F026         	call	_readIR	;wreg free
  4703                           
  4704                           ;sort.c: 485: if(!IR_signal){
  4705  004860  0100               	movlb	0	; () banked
  4706  004862  51E6               	movf	_IR_signal& (0+255),w,b
  4707  004864  0100               	movlb	0	; () banked
  4708  004866  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4709  004868  B4D8               	btfsc	status,2,c
  4710  00486A  D004               	goto	l6932
  4711                           
  4712                           ; BSR set to: 0
  4713                           
  4714                           ; BSR set to: 0
  4715                           
  4716                           ; BSR set to: 0
  4717                           ;sort.c: 486: break;
  4718  00486C  0100               	movlb	0	; () banked
  4719  00486E  4B87               	infsnz	getIR@i& (0+255),f,b
  4720  004870  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4721  004872  D7E0               	goto	l6916
  4722  004874                     l6932:
  4723                           
  4724                           ; BSR set to: 0
  4725                           ;sort.c: 487: }
  4726                           ;sort.c: 488: }
  4727                           ;sort.c: 489: if(IR_signal==1){
  4728  004874  0100               	movlb	0	; () banked
  4729  004876  05E6               	decf	_IR_signal& (0+255),w,b
  4730  004878  0100               	movlb	0	; () banked
  4731  00487A  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4732  00487C  A4D8               	btfss	status,2,c
  4733  00487E  D006               	goto	l6936
  4734                           
  4735                           ; BSR set to: 0
  4736                           ;sort.c: 490: f_loadingNewCan = 1;
  4737  004880  0E00               	movlw	0
  4738  004882  0100               	movlb	0	; () banked
  4739  004884  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4740  004886  0E01               	movlw	1
  4741  004888  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  4742                           
  4743                           ;sort.c: 491: }
  4744  00488A  0012               	return	
  4745  00488C                     l6936:
  4746                           
  4747                           ; BSR set to: 0
  4748                           ;sort.c: 492: else{
  4749                           ;sort.c: 493: f_loadingNewCan = 0;
  4750  00488C  0E00               	movlw	0
  4751  00488E  0100               	movlb	0	; () banked
  4752  004890  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4753  004892  0E00               	movlw	0
  4754  004894  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  4755  004896  0012               	return	
  4756  004898                     __end_of_getIR:
  4757                           	opt stack 0
  4758                           tblptru	equ	0xFF8
  4759                           tblptrh	equ	0xFF7
  4760                           tblptrl	equ	0xFF6
  4761                           tablat	equ	0xFF5
  4762                           prodh	equ	0xFF4
  4763                           prodl	equ	0xFF3
  4764                           postinc0	equ	0xFEE
  4765                           wreg	equ	0xFE8
  4766                           postdec1	equ	0xFE5
  4767                           fsr1l	equ	0xFE1
  4768                           indf2	equ	0xFDF
  4769                           postinc2	equ	0xFDE
  4770                           postdec2	equ	0xFDD
  4771                           fsr2h	equ	0xFDA
  4772                           fsr2l	equ	0xFD9
  4773                           status	equ	0xFD8
  4774                           
  4775 ;; *************** function _readIR *****************
  4776 ;; Defined at:
  4777 ;;		line 23 in file "ADCFunctionality.c"
  4778 ;; Parameters:    Size  Location     Type
  4779 ;;		None
  4780 ;; Auto vars:     Size  Location     Type
  4781 ;;  res             2    4[BANK0 ] int 
  4782 ;; Return value:  Size  Location     Type
  4783 ;;                  1    wreg      void 
  4784 ;; Registers used:
  4785 ;;		wreg, status,2, status,0, cstack
  4786 ;; Tracked objects:
  4787 ;;		On entry : 0/0
  4788 ;;		On exit  : 0/0
  4789 ;;		Unchanged: 0/0
  4790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4792 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4793 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4794 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4795 ;;Total ram usage:        4 bytes
  4796 ;; Hardware stack levels used:    1
  4797 ;; Hardware stack levels required when called:    8
  4798 ;; This function calls:
  4799 ;;		_readADC
  4800 ;; This function is called by:
  4801 ;;		_Loading
  4802 ;;		_getIR
  4803 ;; This function uses a non-reentrant model
  4804 ;;
  4805                           
  4806                           	psect	text8
  4807  004CB0                     __ptext8:
  4808                           	opt stack 0
  4809  004CB0                     _readIR:
  4810                           	opt stack 20
  4811                           
  4812                           ;ADCFunctionality.c: 24: readADC(0);
  4813                           
  4814                           ; BSR set to: 0
  4815                           ;incstack = 0
  4816  004CB0  0E00               	movlw	0
  4817  004CB2  ECBC  F028         	call	_readADC
  4818                           
  4819                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  4820  004CB6  50C3               	movf	4035,w,c	;volatile
  4821  004CB8  CFC4 F082          	movff	4036,??_readIR	;volatile
  4822  004CBC  0100               	movlb	0	; () banked
  4823  004CBE  6B83               	clrf	(??_readIR+1)& (0+255),b
  4824  004CC0  C082  F083         	movff	??_readIR,??_readIR+1
  4825  004CC4  0100               	movlb	0	; () banked
  4826  004CC6  6B82               	clrf	??_readIR& (0+255),b
  4827  004CC8  0100               	movlb	0	; () banked
  4828  004CCA  1182               	iorwf	??_readIR& (0+255),w,b
  4829  004CCC  0100               	movlb	0	; () banked
  4830  004CCE  6F84               	movwf	readIR@res& (0+255),b
  4831  004CD0  0100               	movlb	0	; () banked
  4832  004CD2  5183               	movf	(??_readIR+1)& (0+255),w,b
  4833  004CD4  0100               	movlb	0	; () banked
  4834  004CD6  6F85               	movwf	(readIR@res+1)& (0+255),b
  4835                           
  4836                           ; BSR set to: 0
  4837                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  4838  004CD8  0100               	movlb	0	; () banked
  4839  004CDA  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  4840  004CDC  D00A               	goto	u4630
  4841  004CDE  0E21               	movlw	33
  4842  004CE0  0100               	movlb	0	; () banked
  4843  004CE2  5D84               	subwf	readIR@res& (0+255),w,b
  4844  004CE4  0E03               	movlw	3
  4845  004CE6  0100               	movlb	0	; () banked
  4846  004CE8  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  4847  004CEA  A0D8               	btfss	status,0,c
  4848  004CEC  D002               	goto	u4630
  4849  004CEE  0E01               	movlw	1
  4850  004CF0  D001               	goto	u4640
  4851  004CF2                     u4630:
  4852  004CF2  0E00               	movlw	0
  4853  004CF4                     u4640:
  4854  004CF4  0100               	movlb	0	; () banked
  4855  004CF6  6FE6               	movwf	_IR_signal& (0+255),b
  4856  004CF8  6BE7               	clrf	(_IR_signal+1)& (0+255),b
  4857                           
  4858                           ; BSR set to: 0
  4859  004CFA  0012               	return		;funcret
  4860  004CFC                     __end_of_readIR:
  4861                           	opt stack 0
  4862                           tblptru	equ	0xFF8
  4863                           tblptrh	equ	0xFF7
  4864                           tblptrl	equ	0xFF6
  4865                           tablat	equ	0xFF5
  4866                           prodh	equ	0xFF4
  4867                           prodl	equ	0xFF3
  4868                           postinc0	equ	0xFEE
  4869                           wreg	equ	0xFE8
  4870                           postdec1	equ	0xFE5
  4871                           fsr1l	equ	0xFE1
  4872                           indf2	equ	0xFDF
  4873                           postinc2	equ	0xFDE
  4874                           postdec2	equ	0xFDD
  4875                           fsr2h	equ	0xFDA
  4876                           fsr2l	equ	0xFD9
  4877                           status	equ	0xFD8
  4878                           
  4879 ;; *************** function _ID *****************
  4880 ;; Defined at:
  4881 ;;		line 255 in file "sort.c"
  4882 ;; Parameters:    Size  Location     Type
  4883 ;;		None
  4884 ;; Auto vars:     Size  Location     Type
  4885 ;;  i               2    8[BANK0 ] int 
  4886 ;;  i               2    6[BANK0 ] int 
  4887 ;;  i               2    4[BANK0 ] int 
  4888 ;; Return value:  Size  Location     Type
  4889 ;;                  1    wreg      void 
  4890 ;; Registers used:
  4891 ;;		wreg, status,2, status,0, cstack
  4892 ;; Tracked objects:
  4893 ;;		On entry : 0/0
  4894 ;;		On exit  : 0/0
  4895 ;;		Unchanged: 0/0
  4896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4898 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4899 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4900 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4901 ;;Total ram usage:        8 bytes
  4902 ;; Hardware stack levels used:    1
  4903 ;; Hardware stack levels required when called:    8
  4904 ;; This function calls:
  4905 ;;		_delay_ms
  4906 ;; This function is called by:
  4907 ;;		_sort
  4908 ;; This function uses a non-reentrant model
  4909 ;;
  4910                           
  4911                           	psect	text9
  4912  002C90                     __ptext9:
  4913                           	opt stack 0
  4914  002C90                     _ID:
  4915                           	opt stack 21
  4916                           
  4917                           ;sort.c: 256: if(f_can_coming_to_ID){
  4918                           
  4919                           ; BSR set to: 0
  4920                           ;incstack = 0
  4921  002C90  0101               	movlb	1	; () banked
  4922  002C92  5131               	movf	_f_can_coming_to_ID& (0+255),w,b
  4923  002C94  0101               	movlb	1	; () banked
  4924  002C96  1132               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  4925  002C98  B4D8               	btfsc	status,2,c
  4926  002C9A  0012               	return	
  4927                           
  4928                           ; BSR set to: 1
  4929                           ;sort.c: 258: _delay((unsigned long)((1000)*(32000000/4000.0)));
  4930  002C9C  0E29               	movlw	41
  4931  002C9E  0100               	movlb	0	; () banked
  4932  002CA0  6F83               	movwf	(??_ID+1)& (0+255),b
  4933  002CA2  0E96               	movlw	150
  4934  002CA4  0100               	movlb	0	; () banked
  4935  002CA6  6F82               	movwf	??_ID& (0+255),b
  4936  002CA8  0E7F               	movlw	127
  4937  002CAA                     u9047:
  4938  002CAA  2EE8               	decfsz	wreg,f,c
  4939  002CAC  D7FE               	bra	u9047
  4940  002CAE  2F82               	decfsz	??_ID& (0+255),f,b
  4941  002CB0  D7FC               	bra	u9047
  4942  002CB2  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4943  002CB4  D7FA               	bra	u9047
  4944                           
  4945                           ;sort.c: 260: LATAbits.LATA3 = 1;
  4946  002CB6  8689               	bsf	3977,3,c	;volatile
  4947                           
  4948                           ;sort.c: 261: _delay((unsigned long)((600)*(32000000/4000.0)));
  4949  002CB8  0E19               	movlw	25
  4950  002CBA  0100               	movlb	0	; () banked
  4951  002CBC  6F83               	movwf	(??_ID+1)& (0+255),b
  4952  002CBE  0E5A               	movlw	90
  4953  002CC0  0100               	movlb	0	; () banked
  4954  002CC2  6F82               	movwf	??_ID& (0+255),b
  4955  002CC4  0EB1               	movlw	177
  4956  002CC6                     u9057:
  4957  002CC6  2EE8               	decfsz	wreg,f,c
  4958  002CC8  D7FE               	bra	u9057
  4959  002CCA  2F82               	decfsz	??_ID& (0+255),f,b
  4960  002CCC  D7FC               	bra	u9057
  4961  002CCE  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4962  002CD0  D7FA               	bra	u9057
  4963  002CD2  D000               	nop2	
  4964                           
  4965                           ;sort.c: 262: sensor_outputs[1] = PORTAbits.RA2;
  4966  002CD4  A480               	btfss	3968,2,c	;volatile
  4967  002CD6  D004               	goto	u6000
  4968  002CD8  0100               	movlb	0	; () banked
  4969  002CDA  6B82               	clrf	??_ID& (0+255),b
  4970  002CDC  2B82               	incf	??_ID& (0+255),f,b
  4971  002CDE  D002               	goto	u6008
  4972  002CE0                     u6000:
  4973  002CE0  0100               	movlb	0	; () banked
  4974  002CE2  6B82               	clrf	??_ID& (0+255),b
  4975  002CE4                     u6008:
  4976  002CE4  0100               	movlb	0	; () banked
  4977  002CE6  5182               	movf	??_ID& (0+255),w,b
  4978  002CE8  0100               	movlb	0	; () banked
  4979  002CEA  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  4980  002CEC  6BE5               	clrf	(_sensor_outputs+3)& (0+255),b
  4981                           
  4982                           ; BSR set to: 0
  4983                           ;sort.c: 263: LATAbits.LATA3 = 0;
  4984  002CEE  9689               	bcf	3977,3,c	;volatile
  4985                           
  4986                           ; BSR set to: 0
  4987                           ;sort.c: 265: _delay((unsigned long)((200)*(32000000/4000.0)));
  4988  002CF0  0E09               	movlw	9
  4989  002CF2  0100               	movlb	0	; () banked
  4990  002CF4  6F83               	movwf	(??_ID+1)& (0+255),b
  4991  002CF6  0E1E               	movlw	30
  4992  002CF8  0100               	movlb	0	; () banked
  4993  002CFA  6F82               	movwf	??_ID& (0+255),b
  4994  002CFC  0EE4               	movlw	228
  4995  002CFE                     u9067:
  4996  002CFE  2EE8               	decfsz	wreg,f,c
  4997  002D00  D7FE               	bra	u9067
  4998  002D02  2F82               	decfsz	??_ID& (0+255),f,b
  4999  002D04  D7FC               	bra	u9067
  5000  002D06  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5001  002D08  D7FA               	bra	u9067
  5002  002D0A  F000               	nop	
  5003                           
  5004                           ;sort.c: 266: LATAbits.LATA3 = 1;
  5005  002D0C  8689               	bsf	3977,3,c	;volatile
  5006                           
  5007                           ;sort.c: 267: _delay((unsigned long)((600)*(32000000/4000.0)));
  5008  002D0E  0E19               	movlw	25
  5009  002D10  0100               	movlb	0	; () banked
  5010  002D12  6F83               	movwf	(??_ID+1)& (0+255),b
  5011  002D14  0E5A               	movlw	90
  5012  002D16  0100               	movlb	0	; () banked
  5013  002D18  6F82               	movwf	??_ID& (0+255),b
  5014  002D1A  0EB1               	movlw	177
  5015  002D1C                     u9077:
  5016  002D1C  2EE8               	decfsz	wreg,f,c
  5017  002D1E  D7FE               	bra	u9077
  5018  002D20  2F82               	decfsz	??_ID& (0+255),f,b
  5019  002D22  D7FC               	bra	u9077
  5020  002D24  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5021  002D26  D7FA               	bra	u9077
  5022  002D28  D000               	nop2	
  5023                           
  5024                           ;sort.c: 268: sensor_outputs[1] = (sensor_outputs[1] | PORTAbits.RA2);
  5025  002D2A  A480               	btfss	3968,2,c	;volatile
  5026  002D2C  D004               	goto	u6010
  5027  002D2E  0100               	movlb	0	; () banked
  5028  002D30  6B82               	clrf	??_ID& (0+255),b
  5029  002D32  2B82               	incf	??_ID& (0+255),f,b
  5030  002D34  D002               	goto	u6018
  5031  002D36                     u6010:
  5032  002D36  0100               	movlb	0	; () banked
  5033  002D38  6B82               	clrf	??_ID& (0+255),b
  5034  002D3A                     u6018:
  5035  002D3A  0100               	movlb	0	; () banked
  5036  002D3C  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5037  002D3E  0100               	movlb	0	; () banked
  5038  002D40  1182               	iorwf	??_ID& (0+255),w,b
  5039  002D42  0100               	movlb	0	; () banked
  5040  002D44  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  5041  002D46  0100               	movlb	0	; () banked
  5042  002D48  51E5               	movf	(_sensor_outputs+3)& (0+255),w,b
  5043  002D4A  0100               	movlb	0	; () banked
  5044  002D4C  6FE5               	movwf	(_sensor_outputs+3)& (0+255),b
  5045                           
  5046                           ; BSR set to: 0
  5047                           ;sort.c: 276: if(!sensor_outputs[0]){
  5048  002D4E  0100               	movlb	0	; () banked
  5049  002D50  51E2               	movf	_sensor_outputs& (0+255),w,b
  5050  002D52  0100               	movlb	0	; () banked
  5051  002D54  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5052  002D56  A4D8               	btfss	status,2,c
  5053  002D58  D016               	goto	l7460
  5054                           
  5055                           ; BSR set to: 0
  5056                           ;sort.c: 277: if(!sensor_outputs[1]){
  5057  002D5A  0100               	movlb	0	; () banked
  5058  002D5C  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5059  002D5E  0100               	movlb	0	; () banked
  5060  002D60  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5061  002D62  A4D8               	btfss	status,2,c
  5062  002D64  D008               	goto	l7456
  5063                           
  5064                           ; BSR set to: 0
  5065                           ;sort.c: 278: count_pop_no_tab++;
  5066  002D66  0101               	movlb	1	; () banked
  5067  002D68  4B27               	infsnz	_count_pop_no_tab& (0+255),f,b
  5068  002D6A  2B28               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5069                           
  5070                           ; BSR set to: 1
  5071                           ;sort.c: 279: cur_can = 0;
  5072  002D6C  0E00               	movlw	0
  5073  002D6E  0101               	movlb	1	; () banked
  5074  002D70  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5075  002D72  0E00               	movlw	0
  5076  002D74  D007               	goto	L4
  5077  002D76                     l7456:
  5078                           
  5079                           ;sort.c: 281: else{
  5080                           ;sort.c: 282: count_pop_w_tab++;
  5081  002D76  0101               	movlb	1	; () banked
  5082  002D78  4B29               	infsnz	_count_pop_w_tab& (0+255),f,b
  5083  002D7A  2B2A               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5084                           
  5085                           ; BSR set to: 1
  5086                           ;sort.c: 283: cur_can = 1;
  5087  002D7C  0E00               	movlw	0
  5088  002D7E  0101               	movlb	1	; () banked
  5089  002D80  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5090  002D82  0E01               	movlw	1
  5091  002D84                     L4:
  5092  002D84  6F2B               	movwf	_cur_can& (0+255),b
  5093  002D86                     l7460:
  5094                           
  5095                           ;sort.c: 284: }
  5096                           ;sort.c: 285: }
  5097                           ;sort.c: 286: if(sensor_outputs[0]){
  5098  002D86  0100               	movlb	0	; () banked
  5099  002D88  51E2               	movf	_sensor_outputs& (0+255),w,b
  5100  002D8A  0100               	movlb	0	; () banked
  5101  002D8C  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5102  002D8E  B4D8               	btfsc	status,2,c
  5103  002D90  D016               	goto	l7472
  5104                           
  5105                           ; BSR set to: 0
  5106                           ;sort.c: 287: if(!sensor_outputs[1]){
  5107  002D92  0100               	movlb	0	; () banked
  5108  002D94  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5109  002D96  0100               	movlb	0	; () banked
  5110  002D98  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5111  002D9A  A4D8               	btfss	status,2,c
  5112  002D9C  D008               	goto	l7468
  5113                           
  5114                           ; BSR set to: 0
  5115                           ;sort.c: 288: count_can_w_lab++;
  5116  002D9E  0101               	movlb	1	; () banked
  5117  002DA0  4B25               	infsnz	_count_can_w_lab& (0+255),f,b
  5118  002DA2  2B26               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5119                           
  5120                           ; BSR set to: 1
  5121                           ;sort.c: 289: cur_can = 2;
  5122  002DA4  0E00               	movlw	0
  5123  002DA6  0101               	movlb	1	; () banked
  5124  002DA8  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5125  002DAA  0E02               	movlw	2
  5126  002DAC  D007               	goto	L5
  5127  002DAE                     l7468:
  5128                           
  5129                           ;sort.c: 291: else{
  5130                           ;sort.c: 292: count_can_no_lab++;
  5131  002DAE  0101               	movlb	1	; () banked
  5132  002DB0  4B23               	infsnz	_count_can_no_lab& (0+255),f,b
  5133  002DB2  2B24               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5134                           
  5135                           ; BSR set to: 1
  5136                           ;sort.c: 293: cur_can = 3;
  5137  002DB4  0E00               	movlw	0
  5138  002DB6  0101               	movlb	1	; () banked
  5139  002DB8  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5140  002DBA  0E03               	movlw	3
  5141  002DBC                     L5:
  5142  002DBC  6F2B               	movwf	_cur_can& (0+255),b
  5143  002DBE                     l7472:
  5144                           
  5145                           ;sort.c: 294: }
  5146                           ;sort.c: 295: }
  5147                           ;sort.c: 296: LATAbits.LATA3 = 0;
  5148  002DBE  9689               	bcf	3977,3,c	;volatile
  5149  002DC0                     l7474:
  5150  002DC0  0101               	movlb	1	; () banked
  5151  002DC2  5135               	movf	_f_can_distributed& (0+255),w,b
  5152  002DC4  0101               	movlb	1	; () banked
  5153  002DC6  1136               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5154  002DC8  B4D8               	btfsc	status,2,c
  5155  002DCA  D7FA               	goto	l7474
  5156                           
  5157                           ; BSR set to: 1
  5158                           ;sort.c: 300: if(sensor_outputs[0]){
  5159                           
  5160                           ; BSR set to: 1
  5161  002DCC  0100               	movlb	0	; () banked
  5162  002DCE  51E2               	movf	_sensor_outputs& (0+255),w,b
  5163  002DD0  0100               	movlb	0	; () banked
  5164  002DD2  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5165  002DD4  B4D8               	btfsc	status,2,c
  5166  002DD6  D020               	goto	l7492
  5167                           
  5168                           ; BSR set to: 0
  5169                           ;sort.c: 302: LATAbits.LATA3 = 1;
  5170  002DD8  8689               	bsf	3977,3,c	;volatile
  5171                           
  5172                           ; BSR set to: 0
  5173                           ;sort.c: 305: for(int i=0;i<10000;i++)
  5174  002DDA  0E00               	movlw	0
  5175  002DDC  0100               	movlb	0	; () banked
  5176  002DDE  6F85               	movwf	(ID@i+1)& (0+255),b
  5177  002DE0  0E00               	movlw	0
  5178  002DE2  6F84               	movwf	ID@i& (0+255),b
  5179  002DE4                     l7482:
  5180                           
  5181                           ; BSR set to: 0
  5182  002DE4  0100               	movlb	0	; () banked
  5183  002DE6  BF85               	btfsc	(ID@i+1)& (0+255),7,b
  5184  002DE8  D008               	goto	l817
  5185  002DEA  0E10               	movlw	16
  5186  002DEC  0100               	movlb	0	; () banked
  5187  002DEE  5D84               	subwf	ID@i& (0+255),w,b
  5188  002DF0  0E27               	movlw	39
  5189  002DF2  0100               	movlb	0	; () banked
  5190  002DF4  5985               	subwfb	(ID@i+1)& (0+255),w,b
  5191  002DF6  B0D8               	btfsc	status,0,c
  5192  002DF8  D00D               	goto	l818
  5193  002DFA                     l817:
  5194                           
  5195                           ; BSR set to: 0
  5196                           ;sort.c: 306: {
  5197                           ;sort.c: 307: LATCbits.LATC0 = 1;
  5198  002DFA  808B               	bsf	3979,0,c	;volatile
  5199                           
  5200                           ; BSR set to: 0
  5201                           ;sort.c: 308: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5202  002DFC  0E1A               	movlw	26
  5203  002DFE                     u9087:
  5204  002DFE  2EE8               	decfsz	wreg,f,c
  5205  002E00  D7FE               	bra	u9087
  5206  002E02  D000               	nop2	
  5207                           
  5208                           ;sort.c: 309: LATCbits.LATC0 = 0;
  5209  002E04  908B               	bcf	3979,0,c	;volatile
  5210                           
  5211                           ;sort.c: 310: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5212  002E06  0EF0               	movlw	240
  5213  002E08                     u9097:
  5214  002E08  2EE8               	decfsz	wreg,f,c
  5215  002E0A  D7FE               	bra	u9097
  5216  002E0C  0100               	movlb	0	; () banked
  5217  002E0E  4B84               	infsnz	ID@i& (0+255),f,b
  5218  002E10  2B85               	incf	(ID@i+1)& (0+255),f,b
  5219  002E12  D7E8               	goto	l7482
  5220  002E14                     l818:
  5221                           
  5222                           ; BSR set to: 0
  5223                           ;sort.c: 311: }
  5224                           ;sort.c: 313: LATAbits.LATA3 = 0;
  5225  002E14  9689               	bcf	3977,3,c	;volatile
  5226                           
  5227                           ;sort.c: 316: }
  5228  002E16  D01D               	goto	l819
  5229  002E18                     l7492:
  5230                           
  5231                           ; BSR set to: 0
  5232                           ;sort.c: 317: else{
  5233                           ;sort.c: 319: for(int i=0;i<10000;i++)
  5234  002E18  0E00               	movlw	0
  5235  002E1A  0100               	movlb	0	; () banked
  5236  002E1C  6F87               	movwf	(ID@i_1174+1)& (0+255),b
  5237  002E1E  0E00               	movlw	0
  5238  002E20  6F86               	movwf	ID@i_1174& (0+255),b
  5239  002E22                     l7494:
  5240                           
  5241                           ; BSR set to: 0
  5242  002E22  0100               	movlb	0	; () banked
  5243  002E24  BF87               	btfsc	(ID@i_1174+1)& (0+255),7,b
  5244  002E26  D008               	goto	l820
  5245  002E28  0E10               	movlw	16
  5246  002E2A  0100               	movlb	0	; () banked
  5247  002E2C  5D86               	subwf	ID@i_1174& (0+255),w,b
  5248  002E2E  0E27               	movlw	39
  5249  002E30  0100               	movlb	0	; () banked
  5250  002E32  5987               	subwfb	(ID@i_1174+1)& (0+255),w,b
  5251  002E34  B0D8               	btfsc	status,0,c
  5252  002E36  D00D               	goto	l819
  5253  002E38                     l820:
  5254                           
  5255                           ; BSR set to: 0
  5256                           ;sort.c: 320: {
  5257                           ;sort.c: 321: LATCbits.LATC0 = 1;
  5258  002E38  808B               	bsf	3979,0,c	;volatile
  5259                           
  5260                           ; BSR set to: 0
  5261                           ;sort.c: 322: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5262  002E3A  0E1A               	movlw	26
  5263  002E3C                     u9107:
  5264  002E3C  2EE8               	decfsz	wreg,f,c
  5265  002E3E  D7FE               	bra	u9107
  5266  002E40  D000               	nop2	
  5267                           
  5268                           ;sort.c: 323: LATCbits.LATC0 = 0;
  5269  002E42  908B               	bcf	3979,0,c	;volatile
  5270                           
  5271                           ;sort.c: 324: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5272  002E44  0EF0               	movlw	240
  5273  002E46                     u9117:
  5274  002E46  2EE8               	decfsz	wreg,f,c
  5275  002E48  D7FE               	bra	u9117
  5276  002E4A  0100               	movlb	0	; () banked
  5277  002E4C  4B86               	infsnz	ID@i_1174& (0+255),f,b
  5278  002E4E  2B87               	incf	(ID@i_1174+1)& (0+255),f,b
  5279  002E50  D7E8               	goto	l7494
  5280  002E52                     l819:
  5281                           
  5282                           ; BSR set to: 0
  5283                           ;sort.c: 325: }
  5284                           ;sort.c: 326: }
  5285                           ;sort.c: 328: LATCbits.LATC0 = 0;
  5286  002E52  908B               	bcf	3979,0,c	;volatile
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;sort.c: 330: f_can_coming_to_distribution = 1;
  5290  002E54  0E00               	movlw	0
  5291  002E56  0101               	movlb	1	; () banked
  5292  002E58  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5293  002E5A  0E01               	movlw	1
  5294  002E5C  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5295                           
  5296                           ; BSR set to: 1
  5297                           ;sort.c: 331: _delay((unsigned long)((750)*(32000000/4000.0)));
  5298  002E5E  0E1F               	movlw	31
  5299  002E60  0100               	movlb	0	; () banked
  5300  002E62  6F83               	movwf	(??_ID+1)& (0+255),b
  5301  002E64  0E71               	movlw	113
  5302  002E66  0100               	movlb	0	; () banked
  5303  002E68  6F82               	movwf	??_ID& (0+255),b
  5304  002E6A  0E1E               	movlw	30
  5305  002E6C                     u9127:
  5306  002E6C  2EE8               	decfsz	wreg,f,c
  5307  002E6E  D7FE               	bra	u9127
  5308  002E70  2F82               	decfsz	??_ID& (0+255),f,b
  5309  002E72  D7FC               	bra	u9127
  5310  002E74  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5311  002E76  D7FA               	bra	u9127
  5312  002E78  F000               	nop	
  5313                           
  5314                           ;sort.c: 332: LATCbits.LATC0 = 1;
  5315  002E7A  808B               	bsf	3979,0,c	;volatile
  5316                           
  5317                           ;sort.c: 335: if(!f_lastCan){
  5318  002E7C  0100               	movlb	0	; () banked
  5319  002E7E  51EE               	movf	_f_lastCan& (0+255),w,b
  5320  002E80  0100               	movlb	0	; () banked
  5321  002E82  11EF               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5322  002E84  A4D8               	btfss	status,2,c
  5323  002E86  D032               	goto	l7526
  5324                           
  5325                           ; BSR set to: 0
  5326                           ;sort.c: 336: for(int i=0; i<46; i++){
  5327  002E88  0E00               	movlw	0
  5328  002E8A  0100               	movlb	0	; () banked
  5329  002E8C  6F89               	movwf	(ID@i_1175+1)& (0+255),b
  5330  002E8E  0E00               	movlw	0
  5331  002E90  6F88               	movwf	ID@i_1175& (0+255),b
  5332                           
  5333                           ; BSR set to: 0
  5334  002E92  0100               	movlb	0	; () banked
  5335  002E94  BF89               	btfsc	(ID@i_1175+1)& (0+255),7,b
  5336  002E96  D008               	goto	l7518
  5337  002E98  0100               	movlb	0	; () banked
  5338  002E9A  5189               	movf	(ID@i_1175+1)& (0+255),w,b
  5339  002E9C  E126               	bnz	l824
  5340  002E9E  0E2E               	movlw	46
  5341  002EA0  0100               	movlb	0	; () banked
  5342  002EA2  5D88               	subwf	ID@i_1175& (0+255),w,b
  5343  002EA4  B0D8               	btfsc	status,0,c
  5344  002EA6  D021               	goto	l824
  5345  002EA8                     l7518:
  5346                           
  5347                           ; BSR set to: 0
  5348                           ;sort.c: 337: LATBbits.LATB2 = !LATBbits.LATB2;
  5349  002EA8  B48A               	btfsc	3978,2,c	;volatile
  5350  002EAA  D004               	goto	u6140
  5351  002EAC  0100               	movlb	0	; () banked
  5352  002EAE  6B82               	clrf	??_ID& (0+255),b
  5353  002EB0  2B82               	incf	??_ID& (0+255),f,b
  5354  002EB2  D002               	goto	u6158
  5355  002EB4                     u6140:
  5356  002EB4  0100               	movlb	0	; () banked
  5357  002EB6  6B82               	clrf	??_ID& (0+255),b
  5358  002EB8                     u6158:
  5359  002EB8  0100               	movlb	0	; () banked
  5360  002EBA  4782               	rlncf	??_ID& (0+255),f,b
  5361  002EBC  4782               	rlncf	??_ID& (0+255),f,b
  5362  002EBE  508A               	movf	3978,w,c	;volatile
  5363  002EC0  0100               	movlb	0	; () banked
  5364  002EC2  1982               	xorwf	??_ID& (0+255),w,b
  5365  002EC4  0BFB               	andlw	-5
  5366  002EC6  1982               	xorwf	??_ID& (0+255),w,b
  5367  002EC8  6E8A               	movwf	3978,c	;volatile
  5368                           
  5369                           ; BSR set to: 0
  5370                           ;sort.c: 338: delay_ms(45-i);
  5371  002ECA  0100               	movlb	0	; () banked
  5372  002ECC  5188               	movf	ID@i_1175& (0+255),w,b
  5373  002ECE  0800               	sublw	0
  5374  002ED0  0F2D               	addlw	45
  5375  002ED2  ECE7  F028         	call	_delay_ms
  5376  002ED6  0100               	movlb	0	; () banked
  5377  002ED8  4B88               	infsnz	ID@i_1175& (0+255),f,b
  5378  002EDA  2B89               	incf	(ID@i_1175+1)& (0+255),f,b
  5379                           
  5380                           ; BSR set to: 0
  5381  002EDC  0100               	movlb	0	; () banked
  5382  002EDE  BF89               	btfsc	(ID@i_1175+1)& (0+255),7,b
  5383  002EE0  D7E3               	goto	l7518
  5384  002EE2  0100               	movlb	0	; () banked
  5385  002EE4  5189               	movf	(ID@i_1175+1)& (0+255),w,b
  5386  002EE6  E101               	bnz	u6160
  5387  002EE8  D7DA               	goto	L6
  5388  002EEA                     u6160:
  5389  002EEA                     l824:
  5390                           
  5391                           ; BSR set to: 0
  5392                           ;sort.c: 339: }
  5393                           ;sort.c: 340: LATBbits.LATB2 = 1;
  5394  002EEA  848A               	bsf	3978,2,c	;volatile
  5395  002EEC                     l7526:
  5396                           
  5397                           ; BSR set to: 0
  5398                           ;sort.c: 341: }
  5399                           ;sort.c: 343: f_can_coming_to_ID = 0;
  5400  002EEC  0E00               	movlw	0
  5401  002EEE  0101               	movlb	1	; () banked
  5402  002EF0  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  5403  002EF2  0E00               	movlw	0
  5404  002EF4  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  5405  002EF6  0012               	return	
  5406  002EF8                     __end_of_ID:
  5407                           	opt stack 0
  5408                           tblptru	equ	0xFF8
  5409                           tblptrh	equ	0xFF7
  5410                           tblptrl	equ	0xFF6
  5411                           tablat	equ	0xFF5
  5412                           prodh	equ	0xFF4
  5413                           prodl	equ	0xFF3
  5414                           postinc0	equ	0xFEE
  5415                           wreg	equ	0xFE8
  5416                           postdec1	equ	0xFE5
  5417                           fsr1l	equ	0xFE1
  5418                           indf2	equ	0xFDF
  5419                           postinc2	equ	0xFDE
  5420                           postdec2	equ	0xFDD
  5421                           fsr2h	equ	0xFDA
  5422                           fsr2l	equ	0xFD9
  5423                           status	equ	0xFD8
  5424                           
  5425 ;; *************** function _delay_ms *****************
  5426 ;; Defined at:
  5427 ;;		line 590 in file "sort.c"
  5428 ;; Parameters:    Size  Location     Type
  5429 ;;  milliseconds    1    wreg     unsigned char 
  5430 ;; Auto vars:     Size  Location     Type
  5431 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  5432 ;; Return value:  Size  Location     Type
  5433 ;;                  1    wreg      void 
  5434 ;; Registers used:
  5435 ;;		wreg, status,2, status,0, cstack
  5436 ;; Tracked objects:
  5437 ;;		On entry : 0/0
  5438 ;;		On exit  : 0/0
  5439 ;;		Unchanged: 0/0
  5440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5442 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5443 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5444 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5445 ;;Total ram usage:        2 bytes
  5446 ;; Hardware stack levels used:    1
  5447 ;; Hardware stack levels required when called:    7
  5448 ;; This function calls:
  5449 ;;		Nothing
  5450 ;; This function is called by:
  5451 ;;		_Loading
  5452 ;;		_ID
  5453 ;; This function uses a non-reentrant model
  5454 ;;
  5455                           
  5456                           	psect	text10
  5457  0051CE                     __ptext10:
  5458                           	opt stack 0
  5459  0051CE                     _delay_ms:
  5460                           	opt stack 21
  5461                           
  5462                           ; BSR set to: 1
  5463                           ;incstack = 0
  5464                           ;delay_ms@milliseconds stored from wreg
  5465  0051CE  0100               	movlb	0	; () banked
  5466  0051D0  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  5467                           
  5468                           ;sort.c: 591: while(milliseconds > 0)
  5469  0051D2  D00B               	goto	l6896
  5470  0051D4                     l6892:
  5471                           
  5472                           ;sort.c: 592: {
  5473                           ;sort.c: 593: milliseconds--;
  5474  0051D4  0100               	movlb	0	; () banked
  5475  0051D6  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  5476                           
  5477                           ; BSR set to: 0
  5478                           ;sort.c: 594: _delay((unsigned long)((990)*(32000000/4000000.0)));
  5479  0051D8  0E0B               	movlw	11
  5480  0051DA  0100               	movlb	0	; () banked
  5481  0051DC  6F80               	movwf	??_delay_ms& (0+255),b
  5482  0051DE  0E47               	movlw	71
  5483  0051E0                     u9137:
  5484  0051E0  2EE8               	decfsz	wreg,f,c
  5485  0051E2  D7FE               	bra	u9137
  5486  0051E4  2F80               	decfsz	??_delay_ms& (0+255),f,b
  5487  0051E6  D7FC               	bra	u9137
  5488  0051E8  D000               	nop2	
  5489  0051EA                     l6896:
  5490  0051EA  0100               	movlb	0	; () banked
  5491  0051EC  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  5492  0051EE  0100               	movlb	0	; () banked
  5493  0051F0  B4D8               	btfsc	status,2,c
  5494  0051F2  0012               	return	
  5495  0051F4  D7EF               	goto	l6892
  5496  0051F6                     __end_of_delay_ms:
  5497                           	opt stack 0
  5498                           tblptru	equ	0xFF8
  5499                           tblptrh	equ	0xFF7
  5500                           tblptrl	equ	0xFF6
  5501                           tablat	equ	0xFF5
  5502                           prodh	equ	0xFF4
  5503                           prodl	equ	0xFF3
  5504                           postinc0	equ	0xFEE
  5505                           wreg	equ	0xFE8
  5506                           postdec1	equ	0xFE5
  5507                           fsr1l	equ	0xFE1
  5508                           indf2	equ	0xFDF
  5509                           postinc2	equ	0xFDE
  5510                           postdec2	equ	0xFDD
  5511                           fsr2h	equ	0xFDA
  5512                           fsr2l	equ	0xFD9
  5513                           status	equ	0xFD8
  5514                           
  5515 ;; *************** function _Distribution *****************
  5516 ;; Defined at:
  5517 ;;		line 346 in file "sort.c"
  5518 ;; Parameters:    Size  Location     Type
  5519 ;;		None
  5520 ;; Auto vars:     Size  Location     Type
  5521 ;;		None
  5522 ;; Return value:  Size  Location     Type
  5523 ;;                  1    wreg      void 
  5524 ;; Registers used:
  5525 ;;		wreg, status,2, status,0, cstack
  5526 ;; Tracked objects:
  5527 ;;		On entry : 0/0
  5528 ;;		On exit  : 0/0
  5529 ;;		Unchanged: 0/0
  5530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5533 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5534 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5535 ;;Total ram usage:        2 bytes
  5536 ;; Hardware stack levels used:    1
  5537 ;; Hardware stack levels required when called:    8
  5538 ;; This function calls:
  5539 ;;		_updateServoPosition
  5540 ;; This function is called by:
  5541 ;;		_sort
  5542 ;; This function uses a non-reentrant model
  5543 ;;
  5544                           
  5545                           	psect	text11
  5546  003FA4                     __ptext11:
  5547                           	opt stack 0
  5548  003FA4                     _Distribution:
  5549                           	opt stack 21
  5550                           
  5551                           ;sort.c: 347: if(f_can_coming_to_distribution){
  5552                           
  5553                           ; BSR set to: 0
  5554                           ;incstack = 0
  5555  003FA4  0101               	movlb	1	; () banked
  5556  003FA6  5133               	movf	_f_can_coming_to_distribution& (0+255),w,b
  5557  003FA8  0101               	movlb	1	; () banked
  5558  003FAA  1134               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  5559  003FAC  B4D8               	btfsc	status,2,c
  5560  003FAE  0012               	return	
  5561                           
  5562                           ; BSR set to: 1
  5563                           ;sort.c: 348: f_can_distributed = 0;
  5564  003FB0  0E00               	movlw	0
  5565  003FB2  0101               	movlb	1	; () banked
  5566  003FB4  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  5567  003FB6  0E00               	movlw	0
  5568  003FB8  6F35               	movwf	_f_can_distributed& (0+255),b
  5569                           
  5570                           ;sort.c: 355: switch(cur_can){
  5571  003FBA  D034               	goto	l7542
  5572  003FBC                     l7532:
  5573                           
  5574                           ;sort.c: 357: updateServoPosition(500, 1);
  5575  003FBC  0E01               	movlw	1
  5576  003FBE  0100               	movlb	0	; () banked
  5577  003FC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5578  003FC2  0EF4               	movlw	244
  5579  003FC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5580  003FC6  0E00               	movlw	0
  5581  003FC8  0100               	movlb	0	; () banked
  5582  003FCA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5583  003FCC  0E01               	movlw	1
  5584  003FCE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5585  003FD0  EC52  F023         	call	_updateServoPosition	;wreg free
  5586                           
  5587                           ;sort.c: 358: break;
  5588  003FD4  D03E               	goto	l7544
  5589  003FD6                     l7534:
  5590                           
  5591                           ;sort.c: 360: updateServoPosition(850, 1);
  5592  003FD6  0E03               	movlw	3
  5593  003FD8  0100               	movlb	0	; () banked
  5594  003FDA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5595  003FDC  0E52               	movlw	82
  5596  003FDE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5597  003FE0  0E00               	movlw	0
  5598  003FE2  0100               	movlb	0	; () banked
  5599  003FE4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5600  003FE6  0E01               	movlw	1
  5601  003FE8  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5602  003FEA  EC52  F023         	call	_updateServoPosition	;wreg free
  5603                           
  5604                           ;sort.c: 361: break;
  5605  003FEE  D031               	goto	l7544
  5606  003FF0                     l7536:
  5607                           
  5608                           ;sort.c: 363: updateServoPosition(1670, 1);
  5609  003FF0  0E06               	movlw	6
  5610  003FF2  0100               	movlb	0	; () banked
  5611  003FF4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5612  003FF6  0E86               	movlw	134
  5613  003FF8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5614  003FFA  0E00               	movlw	0
  5615  003FFC  0100               	movlb	0	; () banked
  5616  003FFE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5617  004000  0E01               	movlw	1
  5618  004002  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5619  004004  EC52  F023         	call	_updateServoPosition	;wreg free
  5620                           
  5621                           ;sort.c: 364: break;
  5622  004008  D024               	goto	l7544
  5623  00400A                     l7538:
  5624                           
  5625                           ;sort.c: 366: updateServoPosition(2400, 1);
  5626  00400A  0E09               	movlw	9
  5627  00400C  0100               	movlb	0	; () banked
  5628  00400E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5629  004010  0E60               	movlw	96
  5630  004012  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5631  004014  0E00               	movlw	0
  5632  004016  0100               	movlb	0	; () banked
  5633  004018  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5634  00401A  0E01               	movlw	1
  5635  00401C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5636  00401E  EC52  F023         	call	_updateServoPosition	;wreg free
  5637                           
  5638                           ;sort.c: 370: }
  5639                           
  5640                           ;sort.c: 369: break;
  5641                           
  5642                           ;sort.c: 368: default:
  5643                           
  5644                           ;sort.c: 367: break;
  5645  004022  D017               	goto	l7544
  5646  004024                     l7542:
  5647  004024  C12B  F088         	movff	_cur_can,??_Distribution
  5648  004028  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  5649                           
  5650                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5651                           ; Switch size 1, requested type "space"
  5652                           ; Number of cases is 1, Range of values is 0 to 0
  5653                           ; switch strategies available:
  5654                           ; Name         Instructions Cycles
  5655                           ; simple_byte            4     3 (average)
  5656                           ;	Chosen strategy is simple_byte
  5657  00402C  0100               	movlb	0	; () banked
  5658  00402E  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5659  004030  0A00               	xorlw	0	; case 0
  5660  004032  A4D8               	btfss	status,2,c
  5661  004034  D00E               	goto	l7544
  5662                           
  5663                           ; BSR set to: 0
  5664                           ; Switch size 1, requested type "space"
  5665                           ; Number of cases is 4, Range of values is 0 to 3
  5666                           ; switch strategies available:
  5667                           ; Name         Instructions Cycles
  5668                           ; simple_byte           13     7 (average)
  5669                           ;	Chosen strategy is simple_byte
  5670  004036  0100               	movlb	0	; () banked
  5671  004038  5188               	movf	??_Distribution& (0+255),w,b
  5672  00403A  0A00               	xorlw	0	; case 0
  5673  00403C  B4D8               	btfsc	status,2,c
  5674  00403E  D7BE               	goto	l7532
  5675  004040  0A01               	xorlw	1	; case 1
  5676  004042  B4D8               	btfsc	status,2,c
  5677  004044  D7C8               	goto	l7534
  5678  004046  0A03               	xorlw	3	; case 2
  5679  004048  B4D8               	btfsc	status,2,c
  5680  00404A  D7D2               	goto	l7536
  5681  00404C  0A01               	xorlw	1	; case 3
  5682  00404E  B4D8               	btfsc	status,2,c
  5683  004050  D7DC               	goto	l7538
  5684  004052                     l7544:
  5685                           
  5686                           ;sort.c: 371: updateServoPosition(1050, 3);
  5687  004052  0E04               	movlw	4
  5688  004054  0100               	movlb	0	; () banked
  5689  004056  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5690  004058  0E1A               	movlw	26
  5691  00405A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5692  00405C  0E00               	movlw	0
  5693  00405E  0100               	movlb	0	; () banked
  5694  004060  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5695  004062  0E03               	movlw	3
  5696  004064  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5697  004066  EC52  F023         	call	_updateServoPosition	;wreg free
  5698                           
  5699                           ;sort.c: 372: servo_timer_target = 750;
  5700  00406A  0E02               	movlw	2
  5701  00406C  6E74               	movwf	_servo_timer_target+1,c	;volatile
  5702  00406E  0EEE               	movlw	238
  5703  004070  6E73               	movwf	_servo_timer_target,c	;volatile
  5704                           
  5705                           ;sort.c: 373: f_panning_to_bin = 1;
  5706  004072  0E00               	movlw	0
  5707  004074  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  5708  004076  0E01               	movlw	1
  5709  004078  6E61               	movwf	_f_panning_to_bin,c	;volatile
  5710                           
  5711                           ;sort.c: 374: f_can_coming_to_distribution = 0;
  5712  00407A  0E00               	movlw	0
  5713  00407C  0101               	movlb	1	; () banked
  5714  00407E  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5715  004080  0E00               	movlw	0
  5716  004082  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5717  004084  0012               	return	
  5718  004086                     __end_of_Distribution:
  5719                           	opt stack 0
  5720                           tblptru	equ	0xFF8
  5721                           tblptrh	equ	0xFF7
  5722                           tblptrl	equ	0xFF6
  5723                           tablat	equ	0xFF5
  5724                           prodh	equ	0xFF4
  5725                           prodl	equ	0xFF3
  5726                           postinc0	equ	0xFEE
  5727                           wreg	equ	0xFE8
  5728                           postdec1	equ	0xFE5
  5729                           fsr1l	equ	0xFE1
  5730                           indf2	equ	0xFDF
  5731                           postinc2	equ	0xFDE
  5732                           postdec2	equ	0xFDD
  5733                           fsr2h	equ	0xFDA
  5734                           fsr2l	equ	0xFD9
  5735                           status	equ	0xFD8
  5736                           
  5737 ;; *************** function _machineConfig *****************
  5738 ;; Defined at:
  5739 ;;		line 15 in file "MachineConfig.c"
  5740 ;; Parameters:    Size  Location     Type
  5741 ;;		None
  5742 ;; Auto vars:     Size  Location     Type
  5743 ;;		None
  5744 ;; Return value:  Size  Location     Type
  5745 ;;                  1    wreg      void 
  5746 ;; Registers used:
  5747 ;;		wreg, status,2
  5748 ;; Tracked objects:
  5749 ;;		On entry : 0/0
  5750 ;;		On exit  : 0/0
  5751 ;;		Unchanged: 0/0
  5752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5757 ;;Total ram usage:        0 bytes
  5758 ;; Hardware stack levels used:    1
  5759 ;; Hardware stack levels required when called:    7
  5760 ;; This function calls:
  5761 ;;		Nothing
  5762 ;; This function is called by:
  5763 ;;		_main
  5764 ;; This function uses a non-reentrant model
  5765 ;;
  5766                           
  5767                           	psect	text12
  5768  004A44                     __ptext12:
  5769                           	opt stack 0
  5770  004A44                     _machineConfig:
  5771                           	opt stack 23
  5772                           
  5773                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  5774                           
  5775                           ; BSR set to: 1
  5776                           ;incstack = 0
  5777  004A44  0EF0               	movlw	240
  5778  004A46  6ED3               	movwf	4051,c	;volatile
  5779                           
  5780                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  5781  004A48  8C9B               	bsf	3995,6,c	;volatile
  5782                           
  5783                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  5784  004A4A  0E07               	movlw	7
  5785  004A4C  6E92               	movwf	3986,c	;volatile
  5786                           
  5787                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  5788  004A4E  0EF2               	movlw	242
  5789  004A50  6E93               	movwf	3987,c	;volatile
  5790                           
  5791                           ;MachineConfig.c: 27: TRISC = 0x00;
  5792  004A52  0E00               	movlw	0
  5793  004A54  6E94               	movwf	3988,c	;volatile
  5794                           
  5795                           ;MachineConfig.c: 31: TRISD = 0x00;
  5796  004A56  0E00               	movlw	0
  5797  004A58  6E95               	movwf	3989,c	;volatile
  5798                           
  5799                           ;MachineConfig.c: 34: TRISE = 0x00;
  5800  004A5A  0E00               	movlw	0
  5801  004A5C  6E96               	movwf	3990,c	;volatile
  5802                           
  5803                           ;MachineConfig.c: 37: LATA = 0x00;
  5804  004A5E  0E00               	movlw	0
  5805  004A60  6E89               	movwf	3977,c	;volatile
  5806                           
  5807                           ;MachineConfig.c: 38: LATB = 0x00;
  5808  004A62  0E00               	movlw	0
  5809  004A64  6E8A               	movwf	3978,c	;volatile
  5810                           
  5811                           ;MachineConfig.c: 39: LATC = 0x00;
  5812  004A66  0E00               	movlw	0
  5813  004A68  6E8B               	movwf	3979,c	;volatile
  5814                           
  5815                           ;MachineConfig.c: 40: LATD = 0x00;
  5816  004A6A  0E00               	movlw	0
  5817  004A6C  6E8C               	movwf	3980,c	;volatile
  5818                           
  5819                           ;MachineConfig.c: 41: LATE = 0x00;
  5820  004A6E  0E00               	movlw	0
  5821  004A70  6E8D               	movwf	3981,c	;volatile
  5822                           
  5823                           ;MachineConfig.c: 43: nRBPU = 0;
  5824  004A72  9EF1               	bcf	intcon2,7,c	;volatile
  5825                           
  5826                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  5827  004A74  0E00               	movlw	0
  5828  004A76  6EC2               	movwf	4034,c	;volatile
  5829                           
  5830                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  5831  004A78  0E0D               	movlw	13
  5832  004A7A  6EC1               	movwf	4033,c	;volatile
  5833                           
  5834                           ;MachineConfig.c: 50: CVRCON = 0x00;
  5835  004A7C  0E00               	movlw	0
  5836  004A7E  6EB5               	movwf	4021,c	;volatile
  5837                           
  5838                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  5839  004A80  96B4               	bcf	4020,3,c	;volatile
  5840                           
  5841                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  5842  004A82  0EB1               	movlw	177
  5843  004A84  6EC0               	movwf	4032,c	;volatile
  5844                           
  5845                           ;MachineConfig.c: 55: INT1IE = 1;
  5846  004A86  86F0               	bsf	intcon3,3,c	;volatile
  5847                           
  5848                           ;MachineConfig.c: 57: TMR0IE = 1;
  5849  004A88  8AF2               	bsf	intcon,5,c	;volatile
  5850                           
  5851                           ;MachineConfig.c: 58: TMR1IE = 1;
  5852  004A8A  809D               	bsf	3997,0,c	;volatile
  5853                           
  5854                           ;MachineConfig.c: 59: TMR2IE = 1;
  5855  004A8C  829D               	bsf	3997,1,c	;volatile
  5856                           
  5857                           ;MachineConfig.c: 60: TMR3IE = 1;
  5858  004A8E  82A0               	bsf	4000,1,c	;volatile
  5859                           
  5860                           ;MachineConfig.c: 62: T1CON = 0b10110000;
  5861  004A90  0EB0               	movlw	176
  5862  004A92  6ECD               	movwf	4045,c	;volatile
  5863                           
  5864                           ;MachineConfig.c: 63: T2CON = 0b01111011;
  5865  004A94  0E7B               	movlw	123
  5866  004A96  6ECA               	movwf	4042,c	;volatile
  5867                           
  5868                           ;MachineConfig.c: 64: T3CON = 0b10110000;
  5869  004A98  0EB0               	movlw	176
  5870  004A9A  6EB1               	movwf	4017,c	;volatile
  5871                           
  5872                           ;MachineConfig.c: 65: PEIE = 1;
  5873  004A9C  8CF2               	bsf	intcon,6,c	;volatile
  5874                           
  5875                           ;MachineConfig.c: 66: ADIE = 0;
  5876  004A9E  9C9D               	bcf	3997,6,c	;volatile
  5877                           
  5878                           ;MachineConfig.c: 67: (INTCONbits.GIE = 0);
  5879  004AA0  9EF2               	bcf	intcon,7,c	;volatile
  5880  004AA2  0012               	return		;funcret
  5881  004AA4                     __end_of_machineConfig:
  5882                           	opt stack 0
  5883                           tblptru	equ	0xFF8
  5884                           tblptrh	equ	0xFF7
  5885                           tblptrl	equ	0xFF6
  5886                           tablat	equ	0xFF5
  5887                           prodh	equ	0xFF4
  5888                           prodl	equ	0xFF3
  5889                           intcon	equ	0xFF2
  5890                           intcon2	equ	0xFF1
  5891                           intcon3	equ	0xFF0
  5892                           postinc0	equ	0xFEE
  5893                           wreg	equ	0xFE8
  5894                           postdec1	equ	0xFE5
  5895                           fsr1l	equ	0xFE1
  5896                           indf2	equ	0xFDF
  5897                           postinc2	equ	0xFDE
  5898                           postdec2	equ	0xFDD
  5899                           fsr2h	equ	0xFDA
  5900                           fsr2l	equ	0xFD9
  5901                           status	equ	0xFD8
  5902                           
  5903 ;; *************** function _logRun *****************
  5904 ;; Defined at:
  5905 ;;		line 84 in file "EEPROM.c"
  5906 ;; Parameters:    Size  Location     Type
  5907 ;;		None
  5908 ;; Auto vars:     Size  Location     Type
  5909 ;;  byte_i          1   53[BANK0 ] unsigned char 
  5910 ;;  i               2   55[BANK0 ] int 
  5911 ;;  num             1   49[BANK0 ] unsigned char 
  5912 ;;  addr            2   57[BANK0 ] unsigned short 
  5913 ;;  byte11          1   54[BANK0 ] unsigned char 
  5914 ;;  byte3           1   52[BANK0 ] unsigned char 
  5915 ;;  byte2           1   51[BANK0 ] unsigned char 
  5916 ;;  byte1           1   50[BANK0 ] unsigned char 
  5917 ;; Return value:  Size  Location     Type
  5918 ;;                  1    wreg      void 
  5919 ;; Registers used:
  5920 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5921 ;; Tracked objects:
  5922 ;;		On entry : 0/0
  5923 ;;		On exit  : 0/0
  5924 ;;		Unchanged: 0/0
  5925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5927 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5929 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5930 ;;Total ram usage:       10 bytes
  5931 ;; Hardware stack levels used:    1
  5932 ;; Hardware stack levels required when called:   11
  5933 ;; This function calls:
  5934 ;;		_EEPROM_read
  5935 ;;		_EEPROM_write
  5936 ;; This function is called by:
  5937 ;;		_main
  5938 ;; This function uses a non-reentrant model
  5939 ;;
  5940                           
  5941                           	psect	text13
  5942  003A50                     __ptext13:
  5943                           	opt stack 0
  5944  003A50                     _logRun:
  5945                           	opt stack 19
  5946                           
  5947                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  5948                           
  5949                           ;incstack = 0
  5950  003A50  0E00               	movlw	0
  5951  003A52  0100               	movlb	0	; () banked
  5952  003A54  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  5953  003A56  0E00               	movlw	0
  5954  003A58  6F80               	movwf	EEPROM_read@address& (0+255),b
  5955  003A5A  EC93  F029         	call	_EEPROM_read	;wreg free
  5956  003A5E  0100               	movlb	0	; () banked
  5957  003A60  6FFD               	movwf	_sel& (0+255),b
  5958                           
  5959                           ; BSR set to: 0
  5960                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  5961  003A62  0100               	movlb	0	; () banked
  5962  003A64  51FD               	movf	_sel& (0+255),w,b
  5963  003A66  0D0B               	mullw	11
  5964  003A68  0E01               	movlw	1
  5965  003A6A  24F3               	addwf	prodl,w,c
  5966  003A6C  0100               	movlb	0	; () banked
  5967  003A6E  6FB9               	movwf	logRun@addr& (0+255),b
  5968  003A70  0E00               	movlw	0
  5969  003A72  20F4               	addwfc	prodh,w,c
  5970  003A74  0100               	movlb	0	; () banked
  5971  003A76  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  5972                           
  5973                           ; BSR set to: 0
  5974                           ;EEPROM.c: 101: if (sel < 3){
  5975  003A78  0E03               	movlw	3
  5976  003A7A  0100               	movlb	0	; () banked
  5977  003A7C  61FD               	cpfslt	_sel& (0+255),b
  5978  003A7E  D00E               	goto	l9156
  5979                           
  5980                           ; BSR set to: 0
  5981                           ;EEPROM.c: 102: unsigned char num = sel+1;
  5982  003A80  0100               	movlb	0	; () banked
  5983  003A82  29FD               	incf	_sel& (0+255),w,b
  5984  003A84  0100               	movlb	0	; () banked
  5985  003A86  6FB1               	movwf	logRun@num& (0+255),b
  5986                           
  5987                           ; BSR set to: 0
  5988                           ;EEPROM.c: 103: EEPROM_write(0, num);
  5989  003A88  0E00               	movlw	0
  5990  003A8A  0100               	movlb	0	; () banked
  5991  003A8C  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5992  003A8E  0E00               	movlw	0
  5993  003A90  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5994  003A92  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  5995  003A96  EC5E  F01F         	call	_EEPROM_write	;wreg free
  5996                           
  5997                           ;EEPROM.c: 104: }
  5998  003A9A  D00A               	goto	l9158
  5999  003A9C                     l9156:
  6000                           
  6001                           ;EEPROM.c: 105: else{
  6002                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  6003  003A9C  0E00               	movlw	0
  6004  003A9E  0100               	movlb	0	; () banked
  6005  003AA0  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  6006  003AA2  0E00               	movlw	0
  6007  003AA4  6FAB               	movwf	EEPROM_write@address& (0+255),b
  6008  003AA6  0E00               	movlw	0
  6009  003AA8  0100               	movlb	0	; () banked
  6010  003AAA  6FAD               	movwf	EEPROM_write@data& (0+255),b
  6011  003AAC  EC5E  F01F         	call	_EEPROM_write	;wreg free
  6012  003AB0                     l9158:
  6013                           
  6014                           ;EEPROM.c: 107: }
  6015                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  6016  003AB0  0100               	movlb	0	; () banked
  6017  003AB2  51FE               	movf	_count_total& (0+255),w,b
  6018  003AB4  0980               	iorlw	128
  6019  003AB6  0100               	movlb	0	; () banked
  6020  003AB8  6FB2               	movwf	logRun@byte1& (0+255),b
  6021                           
  6022                           ; BSR set to: 0
  6023                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  6024  003ABA  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6025  003ABE  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6026  003AC2  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  6027  003AC6  EC5E  F01F         	call	_EEPROM_write	;wreg free
  6028                           
  6029                           ;EEPROM.c: 112: addr++;
  6030  003ACA  0100               	movlb	0	; () banked
  6031  003ACC  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6032  003ACE  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6033                           
  6034                           ; BSR set to: 0
  6035                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  6036  003AD0  0101               	movlb	1	; () banked
  6037  003AD2  3927               	swapf	_count_pop_no_tab& (0+255),w,b
  6038  003AD4  0BF0               	andlw	240
  6039  003AD6  0101               	movlb	1	; () banked
  6040  003AD8  1129               	iorwf	_count_pop_w_tab& (0+255),w,b
  6041  003ADA  0100               	movlb	0	; () banked
  6042  003ADC  6FB3               	movwf	logRun@byte2& (0+255),b
  6043                           
  6044                           ; BSR set to: 0
  6045                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  6046  003ADE  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6047  003AE2  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6048  003AE6  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  6049  003AEA  EC5E  F01F         	call	_EEPROM_write	;wreg free
  6050                           
  6051                           ;EEPROM.c: 117: addr++;
  6052  003AEE  0100               	movlb	0	; () banked
  6053  003AF0  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6054  003AF2  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6055                           
  6056                           ; BSR set to: 0
  6057                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  6058  003AF4  0101               	movlb	1	; () banked
  6059  003AF6  3925               	swapf	_count_can_w_lab& (0+255),w,b
  6060  003AF8  0BF0               	andlw	240
  6061  003AFA  0101               	movlb	1	; () banked
  6062  003AFC  1123               	iorwf	_count_can_no_lab& (0+255),w,b
  6063  003AFE  0100               	movlb	0	; () banked
  6064  003B00  6FB4               	movwf	logRun@byte3& (0+255),b
  6065                           
  6066                           ; BSR set to: 0
  6067                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  6068  003B02  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6069  003B06  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6070  003B0A  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  6071  003B0E  EC5E  F01F         	call	_EEPROM_write	;wreg free
  6072                           
  6073                           ;EEPROM.c: 120: addr++;
  6074  003B12  0100               	movlb	0	; () banked
  6075  003B14  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6076  003B16  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6077                           
  6078                           ; BSR set to: 0
  6079                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  6080  003B18  0E00               	movlw	0
  6081  003B1A  0100               	movlb	0	; () banked
  6082  003B1C  6FB8               	movwf	(logRun@i+1)& (0+255),b
  6083  003B1E  0E00               	movlw	0
  6084  003B20  6FB7               	movwf	logRun@i& (0+255),b
  6085                           
  6086                           ; BSR set to: 0
  6087  003B22  0100               	movlb	0	; () banked
  6088  003B24  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6089  003B26  D008               	goto	l9182
  6090  003B28  0100               	movlb	0	; () banked
  6091  003B2A  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6092  003B2C  E128               	bnz	l1065
  6093  003B2E  0E07               	movlw	7
  6094  003B30  0100               	movlb	0	; () banked
  6095  003B32  5DB7               	subwf	logRun@i& (0+255),w,b
  6096  003B34  B0D8               	btfsc	status,0,c
  6097  003B36  D023               	goto	l1065
  6098  003B38                     l9182:
  6099                           
  6100                           ; BSR set to: 0
  6101                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  6102  003B38  90D8               	bcf	status,0,c
  6103  003B3A  0100               	movlb	0	; () banked
  6104  003B3C  35B7               	rlcf	logRun@i& (0+255),w,b
  6105  003B3E  6ED9               	movwf	fsr2l,c
  6106  003B40  0100               	movlb	0	; () banked
  6107  003B42  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  6108  003B44  6EDA               	movwf	fsr2h,c
  6109  003B46  0E0E               	movlw	low _startTime
  6110  003B48  26D9               	addwf	fsr2l,f,c
  6111  003B4A  0E01               	movlw	high _startTime
  6112  003B4C  22DA               	addwfc	fsr2h,f,c
  6113  003B4E  50DF               	movf	indf2,w,c
  6114  003B50  0100               	movlb	0	; () banked
  6115  003B52  6FB5               	movwf	logRun@byte_i& (0+255),b
  6116                           
  6117                           ; BSR set to: 0
  6118                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  6119  003B54  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6120  003B58  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6121  003B5C  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  6122  003B60  EC5E  F01F         	call	_EEPROM_write	;wreg free
  6123                           
  6124                           ;EEPROM.c: 126: addr++;
  6125  003B64  0100               	movlb	0	; () banked
  6126  003B66  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6127  003B68  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6128                           
  6129                           ; BSR set to: 0
  6130  003B6A  0100               	movlb	0	; () banked
  6131  003B6C  4BB7               	infsnz	logRun@i& (0+255),f,b
  6132  003B6E  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  6133                           
  6134                           ; BSR set to: 0
  6135  003B70  0100               	movlb	0	; () banked
  6136  003B72  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6137  003B74  D7E1               	goto	l9182
  6138  003B76  0100               	movlb	0	; () banked
  6139  003B78  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6140  003B7A  E101               	bnz	u8430
  6141  003B7C  D7D8               	goto	L7
  6142  003B7E                     u8430:
  6143  003B7E                     l1065:
  6144                           
  6145                           ; BSR set to: 0
  6146                           ;EEPROM.c: 127: }
  6147                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  6148  003B7E  C0FA  F0B6         	movff	_total_time,logRun@byte11
  6149                           
  6150                           ; BSR set to: 0
  6151                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  6152  003B82  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6153  003B86  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6154  003B8A  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  6155  003B8E  EC5E  F01F         	call	_EEPROM_write	;wreg free
  6156  003B92  0012               	return		;funcret
  6157  003B94                     __end_of_logRun:
  6158                           	opt stack 0
  6159                           tblptru	equ	0xFF8
  6160                           tblptrh	equ	0xFF7
  6161                           tblptrl	equ	0xFF6
  6162                           tablat	equ	0xFF5
  6163                           prodh	equ	0xFF4
  6164                           prodl	equ	0xFF3
  6165                           intcon	equ	0xFF2
  6166                           intcon2	equ	0xFF1
  6167                           intcon3	equ	0xFF0
  6168                           postinc0	equ	0xFEE
  6169                           wreg	equ	0xFE8
  6170                           postdec1	equ	0xFE5
  6171                           fsr1l	equ	0xFE1
  6172                           indf2	equ	0xFDF
  6173                           postinc2	equ	0xFDE
  6174                           postdec2	equ	0xFDD
  6175                           fsr2h	equ	0xFDA
  6176                           fsr2l	equ	0xFD9
  6177                           status	equ	0xFD8
  6178                           
  6179 ;; *************** function _EEPROM_write *****************
  6180 ;; Defined at:
  6181 ;;		line 32 in file "EEPROM.c"
  6182 ;; Parameters:    Size  Location     Type
  6183 ;;  address         2   43[BANK0 ] unsigned short 
  6184 ;;  data            1   45[BANK0 ] unsigned char 
  6185 ;; Auto vars:     Size  Location     Type
  6186 ;;  i               1   48[BANK0 ] unsigned char 
  6187 ;;  i               1   47[BANK0 ] unsigned char 
  6188 ;; Return value:  Size  Location     Type
  6189 ;;                  1    wreg      void 
  6190 ;; Registers used:
  6191 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6192 ;; Tracked objects:
  6193 ;;		On entry : 0/0
  6194 ;;		On exit  : 0/0
  6195 ;;		Unchanged: 0/0
  6196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6197 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6198 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6199 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6200 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6201 ;;Total ram usage:        6 bytes
  6202 ;; Hardware stack levels used:    1
  6203 ;; Hardware stack levels required when called:   10
  6204 ;; This function calls:
  6205 ;;		_EEPROM_read
  6206 ;;		_lcdInst
  6207 ;;		_printf
  6208 ;; This function is called by:
  6209 ;;		_Loading
  6210 ;;		_logRun
  6211 ;; This function uses a non-reentrant model
  6212 ;;
  6213                           
  6214                           	psect	text14
  6215  003EBC                     __ptext14:
  6216                           	opt stack 0
  6217  003EBC                     _EEPROM_write:
  6218                           	opt stack 18
  6219                           
  6220                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  6221                           
  6222                           ;incstack = 0
  6223  003EBC  84A6               	bsf	4006,2,c	;volatile
  6224                           
  6225                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  6226  003EBE  0100               	movlb	0	; () banked
  6227  003EC0  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  6228  003EC2  6EAA               	movwf	4010,c	;volatile
  6229                           
  6230                           ; BSR set to: 0
  6231                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  6232  003EC4  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  6233                           
  6234                           ; BSR set to: 0
  6235                           ;EEPROM.c: 39: EEDATA = data;
  6236  003EC8  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  6240  003ECC  9EA6               	bcf	4006,7,c	;volatile
  6241                           
  6242                           ; BSR set to: 0
  6243                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  6244  003ECE  9CA6               	bcf	4006,6,c	;volatile
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  6248  003ED0  9EF2               	bcf	intcon,7,c	;volatile
  6249                           
  6250                           ;EEPROM.c: 45: EECON2 = 0x55;
  6251  003ED2  0E55               	movlw	85
  6252  003ED4  6EA7               	movwf	4007,c	;volatile
  6253                           
  6254                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  6255  003ED6  0EAA               	movlw	170
  6256  003ED8  6EA7               	movwf	4007,c	;volatile
  6257                           
  6258                           ; BSR set to: 0
  6259                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  6260  003EDA  82A6               	bsf	4006,1,c	;volatile
  6261                           
  6262                           ; BSR set to: 0
  6263                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  6264  003EDC  8EF2               	bsf	intcon,7,c	;volatile
  6265  003EDE                     l1043:
  6266  003EDE  A8A1               	btfss	4001,4,c	;volatile
  6267  003EE0  D7FE               	goto	l1043
  6268                           
  6269                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  6270  003EE2  98A1               	bcf	4001,4,c	;volatile
  6271                           
  6272                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  6273  003EE4  94A6               	bcf	4006,2,c	;volatile
  6274                           
  6275                           ;EEPROM.c: 57: if(debug){
  6276  003EE6  0101               	movlb	1	; () banked
  6277  003EE8  512D               	movf	_debug& (0+255),w,b
  6278  003EEA  0101               	movlb	1	; () banked
  6279  003EEC  112E               	iorwf	(_debug+1)& (0+255),w,b
  6280  003EEE  B4D8               	btfsc	status,2,c
  6281  003EF0  0012               	return	
  6282                           
  6283                           ; BSR set to: 1
  6284                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6285  003EF2  0E01               	movlw	1
  6286  003EF4  ECC5  F029         	call	_lcdInst
  6287  003EF8  0E68               	movlw	104
  6288  003EFA  0100               	movlb	0	; () banked
  6289  003EFC  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6290  003EFE  0EE4               	movlw	228
  6291  003F00                     u9147:
  6292  003F00  2EE8               	decfsz	wreg,f,c
  6293  003F02  D7FE               	bra	u9147
  6294  003F04  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6295  003F06  D7FC               	bra	u9147
  6296  003F08  F000               	nop	
  6297                           
  6298                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  6299  003F0A  0E80               	movlw	128
  6300  003F0C  ECC5  F029         	call	_lcdInst
  6301                           
  6302                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  6303  003F10  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  6304  003F14  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  6305  003F18  EC93  F029         	call	_EEPROM_read	;wreg free
  6306  003F1C  0100               	movlb	0	; () banked
  6307  003F1E  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  6308  003F20  A4D8               	btfss	status,2,c
  6309  003F22  D024               	goto	l6878
  6310                           
  6311                           ; BSR set to: 0
  6312                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  6313  003F24  0E00               	movlw	low STR_66
  6314  003F26  0100               	movlb	0	; () banked
  6315  003F28  6F8E               	movwf	printf@f& (0+255),b
  6316  003F2A  0EFB               	movlw	high STR_66
  6317  003F2C  0100               	movlb	0	; () banked
  6318  003F2E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6319  003F30  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  6320  003F34  0100               	movlb	0	; () banked
  6321  003F36  6B91               	clrf	(?_printf+3)& (0+255),b
  6322  003F38  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  6323  003F3C  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  6324  003F40  EC1B  F00B         	call	_printf	;wreg free
  6325                           
  6326                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  6327  003F44  0E00               	movlw	0
  6328  003F46  0100               	movlb	0	; () banked
  6329  003F48  6FAF               	movwf	EEPROM_write@i& (0+255),b
  6330  003F4A                     l6870:
  6331                           
  6332                           ; BSR set to: 0
  6333  003F4A  0E63               	movlw	99
  6334  003F4C  0100               	movlb	0	; () banked
  6335  003F4E  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  6336  003F50  D001               	goto	l6874
  6337  003F52  0012               	return	
  6338  003F54                     l6874:
  6339                           
  6340                           ; BSR set to: 0
  6341  003F54  0E68               	movlw	104
  6342  003F56  0100               	movlb	0	; () banked
  6343  003F58  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6344  003F5A  0EE4               	movlw	228
  6345  003F5C                     u9157:
  6346  003F5C  2EE8               	decfsz	wreg,f,c
  6347  003F5E  D7FE               	bra	u9157
  6348  003F60  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6349  003F62  D7FC               	bra	u9157
  6350  003F64  F000               	nop	
  6351  003F66  0100               	movlb	0	; () banked
  6352  003F68  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  6353  003F6A  D7EF               	goto	l6870
  6354  003F6C                     l6878:
  6355                           
  6356                           ; BSR set to: 0
  6357                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  6358  003F6C  0EBD               	movlw	low STR_67
  6359  003F6E  0100               	movlb	0	; () banked
  6360  003F70  6F8E               	movwf	printf@f& (0+255),b
  6361  003F72  0EFF               	movlw	high STR_67
  6362  003F74  0100               	movlb	0	; () banked
  6363  003F76  6F8F               	movwf	(printf@f+1)& (0+255),b
  6364  003F78  EC1B  F00B         	call	_printf	;wreg free
  6365  003F7C  0E00               	movlw	0
  6366  003F7E  0100               	movlb	0	; () banked
  6367  003F80  6FB0               	movwf	EEPROM_write@i_1400& (0+255),b
  6368  003F82                     l6882:
  6369                           
  6370                           ; BSR set to: 0
  6371  003F82  0E63               	movlw	99
  6372  003F84  0100               	movlb	0	; () banked
  6373  003F86  65B0               	cpfsgt	EEPROM_write@i_1400& (0+255),b
  6374  003F88  D001               	goto	l6886
  6375  003F8A  0012               	return	
  6376  003F8C                     l6886:
  6377                           
  6378                           ; BSR set to: 0
  6379  003F8C  0E68               	movlw	104
  6380  003F8E  0100               	movlb	0	; () banked
  6381  003F90  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6382  003F92  0EE4               	movlw	228
  6383  003F94                     u9167:
  6384  003F94  2EE8               	decfsz	wreg,f,c
  6385  003F96  D7FE               	bra	u9167
  6386  003F98  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6387  003F9A  D7FC               	bra	u9167
  6388  003F9C  F000               	nop	
  6389  003F9E  0100               	movlb	0	; () banked
  6390  003FA0  2BB0               	incf	EEPROM_write@i_1400& (0+255),f,b
  6391  003FA2  D7EF               	goto	l6882
  6392  003FA4                     __end_of_EEPROM_write:
  6393                           	opt stack 0
  6394                           tblptru	equ	0xFF8
  6395                           tblptrh	equ	0xFF7
  6396                           tblptrl	equ	0xFF6
  6397                           tablat	equ	0xFF5
  6398                           prodh	equ	0xFF4
  6399                           prodl	equ	0xFF3
  6400                           intcon	equ	0xFF2
  6401                           intcon2	equ	0xFF1
  6402                           intcon3	equ	0xFF0
  6403                           postinc0	equ	0xFEE
  6404                           wreg	equ	0xFE8
  6405                           postdec1	equ	0xFE5
  6406                           fsr1l	equ	0xFE1
  6407                           indf2	equ	0xFDF
  6408                           postinc2	equ	0xFDE
  6409                           postdec2	equ	0xFDD
  6410                           fsr2h	equ	0xFDA
  6411                           fsr2l	equ	0xFD9
  6412                           status	equ	0xFD8
  6413                           
  6414 ;; *************** function _EEPROM_read *****************
  6415 ;; Defined at:
  6416 ;;		line 68 in file "EEPROM.c"
  6417 ;; Parameters:    Size  Location     Type
  6418 ;;  address         2    0[BANK0 ] unsigned short 
  6419 ;; Auto vars:     Size  Location     Type
  6420 ;;		None
  6421 ;; Return value:  Size  Location     Type
  6422 ;;                  1    wreg      unsigned char 
  6423 ;; Registers used:
  6424 ;;		wreg, status,2
  6425 ;; Tracked objects:
  6426 ;;		On entry : 0/0
  6427 ;;		On exit  : 0/0
  6428 ;;		Unchanged: 0/0
  6429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6430 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6433 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6434 ;;Total ram usage:        2 bytes
  6435 ;; Hardware stack levels used:    1
  6436 ;; Hardware stack levels required when called:    7
  6437 ;; This function calls:
  6438 ;;		Nothing
  6439 ;; This function is called by:
  6440 ;;		_Loading
  6441 ;;		_EEPROM_write
  6442 ;;		_logRun
  6443 ;; This function uses a non-reentrant model
  6444 ;;
  6445                           
  6446                           	psect	text15
  6447  005326                     __ptext15:
  6448                           	opt stack 0
  6449  005326                     _EEPROM_read:
  6450                           	opt stack 20
  6451                           
  6452                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  6453                           
  6454                           ;incstack = 0
  6455  005326  0100               	movlb	0	; () banked
  6456  005328  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  6457  00532A  6EAA               	movwf	4010,c	;volatile
  6458                           
  6459                           ; BSR set to: 0
  6460                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  6461  00532C  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  6462                           
  6463                           ; BSR set to: 0
  6464                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  6465  005330  9EA6               	bcf	4006,7,c	;volatile
  6466                           
  6467                           ; BSR set to: 0
  6468                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  6469  005332  9CA6               	bcf	4006,6,c	;volatile
  6470                           
  6471                           ; BSR set to: 0
  6472                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  6473  005334  80A6               	bsf	4006,0,c	;volatile
  6474  005336                     l1056:
  6475  005336  B0A6               	btfsc	4006,0,c	;volatile
  6476  005338  D7FE               	goto	l1056
  6477                           
  6478                           ;EEPROM.c: 81: return EEDATA;
  6479  00533A  50A8               	movf	4008,w,c	;volatile
  6480  00533C  0012               	return	
  6481  00533E                     __end_of_EEPROM_read:
  6482                           	opt stack 0
  6483                           tblptru	equ	0xFF8
  6484                           tblptrh	equ	0xFF7
  6485                           tblptrl	equ	0xFF6
  6486                           tablat	equ	0xFF5
  6487                           prodh	equ	0xFF4
  6488                           prodl	equ	0xFF3
  6489                           intcon	equ	0xFF2
  6490                           intcon2	equ	0xFF1
  6491                           intcon3	equ	0xFF0
  6492                           postinc0	equ	0xFEE
  6493                           wreg	equ	0xFE8
  6494                           postdec1	equ	0xFE5
  6495                           fsr1l	equ	0xFE1
  6496                           indf2	equ	0xFDF
  6497                           postinc2	equ	0xFDE
  6498                           postdec2	equ	0xFDD
  6499                           fsr2h	equ	0xFDA
  6500                           fsr2l	equ	0xFD9
  6501                           status	equ	0xFD8
  6502                           
  6503 ;; *************** function _initUI *****************
  6504 ;; Defined at:
  6505 ;;		line 62 in file "UI.c"
  6506 ;; Parameters:    Size  Location     Type
  6507 ;;		None
  6508 ;; Auto vars:     Size  Location     Type
  6509 ;;		None
  6510 ;; Return value:  Size  Location     Type
  6511 ;;                  1    wreg      void 
  6512 ;; Registers used:
  6513 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6514 ;; Tracked objects:
  6515 ;;		On entry : 0/0
  6516 ;;		On exit  : 0/0
  6517 ;;		Unchanged: 0/0
  6518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6523 ;;Total ram usage:        0 bytes
  6524 ;; Hardware stack levels used:    1
  6525 ;; Hardware stack levels required when called:   12
  6526 ;; This function calls:
  6527 ;;		_change_state_to_menu_start
  6528 ;;		_loadRTC
  6529 ;; This function is called by:
  6530 ;;		_main
  6531 ;; This function uses a non-reentrant model
  6532 ;;
  6533                           
  6534                           	psect	text16
  6535  004F10                     __ptext16:
  6536                           	opt stack 0
  6537  004F10                     _initUI:
  6538                           	opt stack 18
  6539                           
  6540                           ;UI.c: 63: (INTCONbits.GIE = 1);
  6541                           
  6542                           ;incstack = 0
  6543  004F10  8EF2               	bsf	intcon,7,c	;volatile
  6544                           
  6545                           ;UI.c: 64: machine_state = UI_state;
  6546  004F12  0E00               	movlw	0
  6547  004F14  0100               	movlb	0	; () banked
  6548  004F16  6FFC               	movwf	_machine_state& (0+255),b
  6549                           
  6550                           ;UI.c: 65: logstate = 0;
  6551  004F18  0E00               	movlw	0
  6552  004F1A  0100               	movlb	0	; () banked
  6553  004F1C  6FF9               	movwf	(_logstate+1)& (0+255),b
  6554  004F1E  0E00               	movlw	0
  6555  004F20  6FF8               	movwf	_logstate& (0+255),b
  6556                           
  6557                           ; BSR set to: 0
  6558                           ;UI.c: 67: if(RTCflag){
  6559  004F22  0100               	movlb	0	; () banked
  6560  004F24  51EA               	movf	_RTCflag& (0+255),w,b
  6561  004F26  0100               	movlb	0	; () banked
  6562  004F28  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  6563  004F2A  A4D8               	btfss	status,2,c
  6564                           
  6565                           ; BSR set to: 0
  6566                           ;UI.c: 68: loadRTC();
  6567  004F2C  ECC9  F022         	call	_loadRTC	;wreg free
  6568                           
  6569                           ;UI.c: 69: }
  6570                           ;UI.c: 71: change_state_to_menu_start();
  6571  004F30  ECA6  F028         	call	_change_state_to_menu_start	;wreg free
  6572                           
  6573                           ;UI.c: 72: firstboot = 1;
  6574  004F34  0E00               	movlw	0
  6575  004F36  0101               	movlb	1	; () banked
  6576  004F38  6F3C               	movwf	(_firstboot+1)& (0+255),b
  6577  004F3A  0E01               	movlw	1
  6578  004F3C  6F3B               	movwf	_firstboot& (0+255),b
  6579                           
  6580                           ; BSR set to: 1
  6581  004F3E  0012               	return		;funcret
  6582  004F40                     __end_of_initUI:
  6583                           	opt stack 0
  6584                           tblptru	equ	0xFF8
  6585                           tblptrh	equ	0xFF7
  6586                           tblptrl	equ	0xFF6
  6587                           tablat	equ	0xFF5
  6588                           prodh	equ	0xFF4
  6589                           prodl	equ	0xFF3
  6590                           intcon	equ	0xFF2
  6591                           intcon2	equ	0xFF1
  6592                           intcon3	equ	0xFF0
  6593                           postinc0	equ	0xFEE
  6594                           wreg	equ	0xFE8
  6595                           postdec1	equ	0xFE5
  6596                           fsr1l	equ	0xFE1
  6597                           indf2	equ	0xFDF
  6598                           postinc2	equ	0xFDE
  6599                           postdec2	equ	0xFDD
  6600                           fsr2h	equ	0xFDA
  6601                           fsr2l	equ	0xFD9
  6602                           status	equ	0xFD8
  6603                           
  6604 ;; *************** function _loadRTC *****************
  6605 ;; Defined at:
  6606 ;;		line 28 in file "RTC.c"
  6607 ;; Parameters:    Size  Location     Type
  6608 ;;		None
  6609 ;; Auto vars:     Size  Location     Type
  6610 ;;  i               2   22[BANK0 ] int 
  6611 ;; Return value:  Size  Location     Type
  6612 ;;                  1    wreg      void 
  6613 ;; Registers used:
  6614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6615 ;; Tracked objects:
  6616 ;;		On entry : 0/0
  6617 ;;		On exit  : 0/0
  6618 ;;		Unchanged: 0/0
  6619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6621 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6622 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6623 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6624 ;;Total ram usage:        3 bytes
  6625 ;; Hardware stack levels used:    1
  6626 ;; Hardware stack levels required when called:    9
  6627 ;; This function calls:
  6628 ;;		_I2C_Master_Init
  6629 ;;		_I2C_Master_Start
  6630 ;;		_I2C_Master_Stop
  6631 ;;		_I2C_Master_Write
  6632 ;; This function is called by:
  6633 ;;		_initUI
  6634 ;; This function uses a non-reentrant model
  6635 ;;
  6636                           
  6637                           	psect	text17
  6638  004592                     __ptext17:
  6639                           	opt stack 0
  6640  004592                     _loadRTC:
  6641                           	opt stack 20
  6642                           
  6643                           ;RTC.c: 30: I2C_Master_Init(10000);
  6644                           
  6645                           ; BSR set to: 1
  6646                           ;incstack = 0
  6647  004592  0E10               	movlw	16
  6648  004594  0100               	movlb	0	; () banked
  6649  004596  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  6650  004598  0E27               	movlw	39
  6651  00459A  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  6652  00459C  0E00               	movlw	0
  6653  00459E  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  6654  0045A0  0E00               	movlw	0
  6655  0045A2  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  6656  0045A4  EC52  F025         	call	_I2C_Master_Init	;wreg free
  6657                           
  6658                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  6659  0045A8  9EF2               	bcf	intcon,7,c	;volatile
  6660                           
  6661                           ;RTC.c: 34: I2C_Master_Start();
  6662  0045AA  ECEB  F029         	call	_I2C_Master_Start	;wreg free
  6663                           
  6664                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  6665  0045AE  0E00               	movlw	0
  6666  0045B0  0100               	movlb	0	; () banked
  6667  0045B2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6668  0045B4  0ED0               	movlw	208
  6669  0045B6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6670  0045B8  ECD9  F029         	call	_I2C_Master_Write	;wreg free
  6671                           
  6672                           ;RTC.c: 36: I2C_Master_Write(0x00);
  6673  0045BC  0E00               	movlw	0
  6674  0045BE  0100               	movlb	0	; () banked
  6675  0045C0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6676  0045C2  0E00               	movlw	0
  6677  0045C4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6678  0045C6  ECD9  F029         	call	_I2C_Master_Write	;wreg free
  6679                           
  6680                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  6681  0045CA  0E00               	movlw	0
  6682  0045CC  0100               	movlb	0	; () banked
  6683  0045CE  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  6684  0045D0  0E00               	movlw	0
  6685  0045D2  6F96               	movwf	loadRTC@i& (0+255),b
  6686  0045D4                     l7024:
  6687                           
  6688                           ; BSR set to: 0
  6689  0045D4  0100               	movlb	0	; () banked
  6690  0045D6  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  6691  0045D8  D008               	goto	l7028
  6692  0045DA  0100               	movlb	0	; () banked
  6693  0045DC  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  6694  0045DE  E11B               	bnz	l7034
  6695  0045E0  0E07               	movlw	7
  6696  0045E2  0100               	movlb	0	; () banked
  6697  0045E4  5D96               	subwf	loadRTC@i& (0+255),w,b
  6698  0045E6  B0D8               	btfsc	status,0,c
  6699  0045E8  D016               	goto	l7034
  6700  0045EA                     l7028:
  6701                           
  6702                           ; BSR set to: 0
  6703                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  6704  0045EA  0E1C               	movlw	low _time
  6705  0045EC  0100               	movlb	0	; () banked
  6706  0045EE  2596               	addwf	loadRTC@i& (0+255),w,b
  6707  0045F0  6ED9               	movwf	fsr2l,c
  6708  0045F2  0E01               	movlw	high _time
  6709  0045F4  0100               	movlb	0	; () banked
  6710  0045F6  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  6711  0045F8  6EDA               	movwf	fsr2h,c
  6712  0045FA  50DF               	movf	indf2,w,c
  6713  0045FC  0100               	movlb	0	; () banked
  6714  0045FE  6F95               	movwf	??_loadRTC& (0+255),b
  6715  004600  0100               	movlb	0	; () banked
  6716  004602  5195               	movf	??_loadRTC& (0+255),w,b
  6717  004604  0100               	movlb	0	; () banked
  6718  004606  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6719  004608  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  6720  00460A  ECD9  F029         	call	_I2C_Master_Write	;wreg free
  6721  00460E  0100               	movlb	0	; () banked
  6722  004610  4B96               	infsnz	loadRTC@i& (0+255),f,b
  6723  004612  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  6724  004614  D7DF               	goto	l7024
  6725  004616                     l7034:
  6726                           
  6727                           ; BSR set to: 0
  6728                           ;RTC.c: 39: }
  6729                           ;RTC.c: 40: I2C_Master_Stop();
  6730  004616  ECE7  F029         	call	_I2C_Master_Stop	;wreg free
  6731                           
  6732                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  6733  00461A  8EF2               	bsf	intcon,7,c	;volatile
  6734  00461C  0012               	return		;funcret
  6735  00461E                     __end_of_loadRTC:
  6736                           	opt stack 0
  6737                           tblptru	equ	0xFF8
  6738                           tblptrh	equ	0xFF7
  6739                           tblptrl	equ	0xFF6
  6740                           tablat	equ	0xFF5
  6741                           prodh	equ	0xFF4
  6742                           prodl	equ	0xFF3
  6743                           intcon	equ	0xFF2
  6744                           intcon2	equ	0xFF1
  6745                           intcon3	equ	0xFF0
  6746                           postinc0	equ	0xFEE
  6747                           wreg	equ	0xFE8
  6748                           postdec1	equ	0xFE5
  6749                           fsr1l	equ	0xFE1
  6750                           indf2	equ	0xFDF
  6751                           postinc2	equ	0xFDE
  6752                           postdec2	equ	0xFDD
  6753                           fsr2h	equ	0xFDA
  6754                           fsr2l	equ	0xFD9
  6755                           status	equ	0xFD8
  6756                           
  6757 ;; *************** function _I2C_Master_Init *****************
  6758 ;; Defined at:
  6759 ;;		line 15 in file "I2C.c"
  6760 ;; Parameters:    Size  Location     Type
  6761 ;;  c               4   13[BANK0 ] const unsigned long 
  6762 ;; Auto vars:     Size  Location     Type
  6763 ;;		None
  6764 ;; Return value:  Size  Location     Type
  6765 ;;                  1    wreg      void 
  6766 ;; Registers used:
  6767 ;;		wreg, status,2, status,0, cstack
  6768 ;; Tracked objects:
  6769 ;;		On entry : 0/0
  6770 ;;		On exit  : 0/0
  6771 ;;		Unchanged: 0/0
  6772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6773 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6775 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6776 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6777 ;;Total ram usage:        8 bytes
  6778 ;; Hardware stack levels used:    1
  6779 ;; Hardware stack levels required when called:    8
  6780 ;; This function calls:
  6781 ;;		___lldiv
  6782 ;; This function is called by:
  6783 ;;		_main
  6784 ;;		_loadRTC
  6785 ;; This function uses a non-reentrant model
  6786 ;;
  6787                           
  6788                           	psect	text18
  6789  004AA4                     __ptext18:
  6790                           	opt stack 0
  6791  004AA4                     _I2C_Master_Init:
  6792                           	opt stack 20
  6793                           
  6794                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  6795                           
  6796                           ;incstack = 0
  6797  004AA4  0E00               	movlw	0
  6798  004AA6  6EC7               	movwf	4039,c	;volatile
  6799                           
  6800                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  6801  004AA8  0E28               	movlw	40
  6802  004AAA  6EC6               	movwf	4038,c	;volatile
  6803                           
  6804                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  6805  004AAC  0E00               	movlw	0
  6806  004AAE  6EC5               	movwf	4037,c	;volatile
  6807                           
  6808                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  6809  004AB0  0E00               	movlw	0
  6810  004AB2  0100               	movlb	0	; () banked
  6811  004AB4  6F80               	movwf	___lldiv@dividend& (0+255),b
  6812  004AB6  0E48               	movlw	72
  6813  004AB8  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  6814  004ABA  0EE8               	movlw	232
  6815  004ABC  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  6816  004ABE  0E01               	movlw	1
  6817  004AC0  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  6818  004AC2  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6819  004AC6  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6820  004ACA  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6821  004ACE  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6822  004AD2  0E02               	movlw	2
  6823  004AD4                     u5325:
  6824  004AD4  90D8               	bcf	status,0,c
  6825  004AD6  0100               	movlb	0	; () banked
  6826  004AD8  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6827  004ADA  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6828  004ADC  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6829  004ADE  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6830  004AE0  2EE8               	decfsz	wreg,f,c
  6831  004AE2  D7F8               	goto	u5325
  6832  004AE4  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  6833  004AE8  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6834  004AEC  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6835  004AF0  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6836  004AF4  EC6F  F021         	call	___lldiv	;wreg free
  6837  004AF8  0100               	movlb	0	; () banked
  6838  004AFA  0580               	decf	?___lldiv& (0+255),w,b
  6839  004AFC  6EC8               	movwf	4040,c	;volatile
  6840                           
  6841                           ; BSR set to: 0
  6842                           ;I2C.c: 22: TRISC3 = 1;
  6843  004AFE  8694               	bsf	3988,3,c	;volatile
  6844                           
  6845                           ; BSR set to: 0
  6846                           ;I2C.c: 23: TRISC4 = 1;
  6847  004B00  8894               	bsf	3988,4,c	;volatile
  6848                           
  6849                           ; BSR set to: 0
  6850  004B02  0012               	return		;funcret
  6851  004B04                     __end_of_I2C_Master_Init:
  6852                           	opt stack 0
  6853                           tblptru	equ	0xFF8
  6854                           tblptrh	equ	0xFF7
  6855                           tblptrl	equ	0xFF6
  6856                           tablat	equ	0xFF5
  6857                           prodh	equ	0xFF4
  6858                           prodl	equ	0xFF3
  6859                           intcon	equ	0xFF2
  6860                           intcon2	equ	0xFF1
  6861                           intcon3	equ	0xFF0
  6862                           postinc0	equ	0xFEE
  6863                           wreg	equ	0xFE8
  6864                           postdec1	equ	0xFE5
  6865                           fsr1l	equ	0xFE1
  6866                           indf2	equ	0xFDF
  6867                           postinc2	equ	0xFDE
  6868                           postdec2	equ	0xFDD
  6869                           fsr2h	equ	0xFDA
  6870                           fsr2l	equ	0xFD9
  6871                           status	equ	0xFD8
  6872                           
  6873 ;; *************** function ___lldiv *****************
  6874 ;; Defined at:
  6875 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6876 ;; Parameters:    Size  Location     Type
  6877 ;;  dividend        4    0[BANK0 ] unsigned long 
  6878 ;;  divisor         4    4[BANK0 ] unsigned long 
  6879 ;; Auto vars:     Size  Location     Type
  6880 ;;  quotient        4    8[BANK0 ] unsigned long 
  6881 ;;  counter         1   12[BANK0 ] unsigned char 
  6882 ;; Return value:  Size  Location     Type
  6883 ;;                  4    0[BANK0 ] unsigned long 
  6884 ;; Registers used:
  6885 ;;		wreg, status,2, status,0
  6886 ;; Tracked objects:
  6887 ;;		On entry : 0/0
  6888 ;;		On exit  : 0/0
  6889 ;;		Unchanged: 0/0
  6890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6891 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6892 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6894 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6895 ;;Total ram usage:       13 bytes
  6896 ;; Hardware stack levels used:    1
  6897 ;; Hardware stack levels required when called:    7
  6898 ;; This function calls:
  6899 ;;		Nothing
  6900 ;; This function is called by:
  6901 ;;		_I2C_Master_Init
  6902 ;; This function uses a non-reentrant model
  6903 ;;
  6904                           
  6905                           	psect	text19
  6906  0042DE                     __ptext19:
  6907                           	opt stack 0
  6908  0042DE                     ___lldiv:
  6909                           	opt stack 20
  6910                           
  6911                           ; BSR set to: 0
  6912                           ;incstack = 0
  6913  0042DE  0E00               	movlw	0
  6914  0042E0  0100               	movlb	0	; () banked
  6915  0042E2  6F88               	movwf	___lldiv@quotient& (0+255),b
  6916  0042E4  0E00               	movlw	0
  6917  0042E6  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  6918  0042E8  0E00               	movlw	0
  6919  0042EA  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6920  0042EC  0E00               	movlw	0
  6921  0042EE  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6922                           
  6923                           ; BSR set to: 0
  6924  0042F0  0100               	movlb	0	; () banked
  6925  0042F2  5184               	movf	___lldiv@divisor& (0+255),w,b
  6926  0042F4  0100               	movlb	0	; () banked
  6927  0042F6  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6928  0042F8  0100               	movlb	0	; () banked
  6929  0042FA  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6930  0042FC  0100               	movlb	0	; () banked
  6931  0042FE  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6932  004300  B4D8               	btfsc	status,2,c
  6933  004302  D042               	goto	l1806
  6934                           
  6935                           ; BSR set to: 0
  6936  004304  0E01               	movlw	1
  6937  004306  0100               	movlb	0	; () banked
  6938  004308  6F8C               	movwf	___lldiv@counter& (0+255),b
  6939  00430A  D008               	goto	l6444
  6940  00430C                     l6442:
  6941                           
  6942                           ; BSR set to: 0
  6943  00430C  0100               	movlb	0	; () banked
  6944  00430E  90D8               	bcf	status,0,c
  6945  004310  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  6946  004312  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6947  004314  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6948  004316  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6949  004318  0100               	movlb	0	; () banked
  6950  00431A  2B8C               	incf	___lldiv@counter& (0+255),f,b
  6951  00431C                     l6444:
  6952                           
  6953                           ; BSR set to: 0
  6954  00431C  0100               	movlb	0	; () banked
  6955  00431E  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6956  004320  D7F5               	goto	l6442
  6957  004322                     l6446:
  6958                           
  6959                           ; BSR set to: 0
  6960  004322  0100               	movlb	0	; () banked
  6961  004324  90D8               	bcf	status,0,c
  6962  004326  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  6963  004328  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6964  00432A  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6965  00432C  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6966                           
  6967                           ; BSR set to: 0
  6968  00432E  0100               	movlb	0	; () banked
  6969  004330  5184               	movf	___lldiv@divisor& (0+255),w,b
  6970  004332  0100               	movlb	0	; () banked
  6971  004334  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  6972  004336  0100               	movlb	0	; () banked
  6973  004338  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6974  00433A  0100               	movlb	0	; () banked
  6975  00433C  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6976  00433E  0100               	movlb	0	; () banked
  6977  004340  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6978  004342  0100               	movlb	0	; () banked
  6979  004344  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6980  004346  0100               	movlb	0	; () banked
  6981  004348  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6982  00434A  0100               	movlb	0	; () banked
  6983  00434C  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6984  00434E  A0D8               	btfss	status,0,c
  6985  004350  D012               	goto	l6454
  6986                           
  6987                           ; BSR set to: 0
  6988  004352  0100               	movlb	0	; () banked
  6989  004354  5184               	movf	___lldiv@divisor& (0+255),w,b
  6990  004356  0100               	movlb	0	; () banked
  6991  004358  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  6992  00435A  0100               	movlb	0	; () banked
  6993  00435C  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6994  00435E  0100               	movlb	0	; () banked
  6995  004360  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6996  004362  0100               	movlb	0	; () banked
  6997  004364  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6998  004366  0100               	movlb	0	; () banked
  6999  004368  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7000  00436A  0100               	movlb	0	; () banked
  7001  00436C  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7002  00436E  0100               	movlb	0	; () banked
  7003  004370  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7004                           
  7005                           ; BSR set to: 0
  7006  004372  0100               	movlb	0	; () banked
  7007  004374  8188               	bsf	___lldiv@quotient& (0+255),0,b
  7008  004376                     l6454:
  7009                           
  7010                           ; BSR set to: 0
  7011  004376  0100               	movlb	0	; () banked
  7012  004378  90D8               	bcf	status,0,c
  7013  00437A  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7014  00437C  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7015  00437E  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7016  004380  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  7017                           
  7018                           ; BSR set to: 0
  7019  004382  0100               	movlb	0	; () banked
  7020  004384  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  7021  004386  D7CD               	goto	l6446
  7022  004388                     l1806:
  7023                           
  7024                           ; BSR set to: 0
  7025  004388  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7026  00438C  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7027  004390  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7028  004394  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7029                           
  7030                           ; BSR set to: 0
  7031  004398  0012               	return		;funcret
  7032  00439A                     __end_of___lldiv:
  7033                           	opt stack 0
  7034                           tblptru	equ	0xFF8
  7035                           tblptrh	equ	0xFF7
  7036                           tblptrl	equ	0xFF6
  7037                           tablat	equ	0xFF5
  7038                           prodh	equ	0xFF4
  7039                           prodl	equ	0xFF3
  7040                           intcon	equ	0xFF2
  7041                           intcon2	equ	0xFF1
  7042                           intcon3	equ	0xFF0
  7043                           postinc0	equ	0xFEE
  7044                           wreg	equ	0xFE8
  7045                           postdec1	equ	0xFE5
  7046                           fsr1l	equ	0xFE1
  7047                           indf2	equ	0xFDF
  7048                           postinc2	equ	0xFDE
  7049                           postdec2	equ	0xFDD
  7050                           fsr2h	equ	0xFDA
  7051                           fsr2l	equ	0xFD9
  7052                           status	equ	0xFD8
  7053                           
  7054 ;; *************** function _change_state_to_menu_start *****************
  7055 ;; Defined at:
  7056 ;;		line 477 in file "UI.c"
  7057 ;; Parameters:    Size  Location     Type
  7058 ;;		None
  7059 ;; Auto vars:     Size  Location     Type
  7060 ;;		None
  7061 ;; Return value:  Size  Location     Type
  7062 ;;                  1    wreg      void 
  7063 ;; Registers used:
  7064 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7065 ;; Tracked objects:
  7066 ;;		On entry : 0/0
  7067 ;;		On exit  : 0/0
  7068 ;;		Unchanged: 0/0
  7069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7073 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7074 ;;Total ram usage:        0 bytes
  7075 ;; Hardware stack levels used:    1
  7076 ;; Hardware stack levels required when called:   11
  7077 ;; This function calls:
  7078 ;;		_lcdInst
  7079 ;;		_printRTC
  7080 ;;		_printf
  7081 ;; This function is called by:
  7082 ;;		_initUI
  7083 ;; This function uses a non-reentrant model
  7084 ;;
  7085                           
  7086                           	psect	text20
  7087  00514C                     __ptext20:
  7088                           	opt stack 0
  7089  00514C                     _change_state_to_menu_start:
  7090                           	opt stack 18
  7091                           
  7092                           ;UI.c: 478: cur_state = 0;
  7093                           
  7094                           ; BSR set to: 0
  7095                           ;incstack = 0
  7096  00514C  0E00               	movlw	0
  7097  00514E  0100               	movlb	0	; () banked
  7098  005150  6FED               	movwf	(_cur_state+1)& (0+255),b
  7099  005152  0E00               	movlw	0
  7100  005154  6FEC               	movwf	_cur_state& (0+255),b
  7101                           
  7102                           ; BSR set to: 0
  7103                           ;UI.c: 480: lcdInst(0b10000000);;
  7104  005156  0E80               	movlw	128
  7105  005158  ECC5  F029         	call	_lcdInst
  7106                           
  7107                           ;UI.c: 481: printRTC();
  7108  00515C  EC2F  F012         	call	_printRTC	;wreg free
  7109                           
  7110                           ;UI.c: 482: lcdInst(0b11000000);;
  7111  005160  0EC0               	movlw	192
  7112  005162  ECC5  F029         	call	_lcdInst
  7113                           
  7114                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  7115  005166  0EF7               	movlw	low STR_30
  7116  005168  0100               	movlb	0	; () banked
  7117  00516A  6F8E               	movwf	printf@f& (0+255),b
  7118  00516C  0EFD               	movlw	high STR_30
  7119  00516E  0100               	movlb	0	; () banked
  7120  005170  6F8F               	movwf	(printf@f+1)& (0+255),b
  7121  005172  EC1B  F00B         	call	_printf	;wreg free
  7122  005176  0012               	return		;funcret
  7123  005178                     __end_of_change_state_to_menu_start:
  7124                           	opt stack 0
  7125                           tblptru	equ	0xFF8
  7126                           tblptrh	equ	0xFF7
  7127                           tblptrl	equ	0xFF6
  7128                           tablat	equ	0xFF5
  7129                           prodh	equ	0xFF4
  7130                           prodl	equ	0xFF3
  7131                           intcon	equ	0xFF2
  7132                           intcon2	equ	0xFF1
  7133                           intcon3	equ	0xFF0
  7134                           postinc0	equ	0xFEE
  7135                           wreg	equ	0xFE8
  7136                           postdec1	equ	0xFE5
  7137                           fsr1l	equ	0xFE1
  7138                           indf2	equ	0xFDF
  7139                           postinc2	equ	0xFDE
  7140                           postdec2	equ	0xFDD
  7141                           fsr2h	equ	0xFDA
  7142                           fsr2l	equ	0xFD9
  7143                           status	equ	0xFD8
  7144                           
  7145 ;; *************** function _initTime *****************
  7146 ;; Defined at:
  7147 ;;		line 17 in file "RTC.c"
  7148 ;; Parameters:    Size  Location     Type
  7149 ;;  s               1    wreg     unsigned char 
  7150 ;;  m               1    0[BANK0 ] unsigned char 
  7151 ;;  h               1    1[BANK0 ] unsigned char 
  7152 ;;  w               1    2[BANK0 ] unsigned char 
  7153 ;;  DD              1    3[BANK0 ] unsigned char 
  7154 ;;  MM              1    4[BANK0 ] unsigned char 
  7155 ;;  YY              1    5[BANK0 ] unsigned char 
  7156 ;; Auto vars:     Size  Location     Type
  7157 ;;  s               1    6[BANK0 ] unsigned char 
  7158 ;; Return value:  Size  Location     Type
  7159 ;;                  1    wreg      void 
  7160 ;; Registers used:
  7161 ;;		wreg
  7162 ;; Tracked objects:
  7163 ;;		On entry : 0/0
  7164 ;;		On exit  : 0/0
  7165 ;;		Unchanged: 0/0
  7166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7167 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7168 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7170 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7171 ;;Total ram usage:        7 bytes
  7172 ;; Hardware stack levels used:    1
  7173 ;; Hardware stack levels required when called:    7
  7174 ;; This function calls:
  7175 ;;		Nothing
  7176 ;; This function is called by:
  7177 ;;		_main
  7178 ;; This function uses a non-reentrant model
  7179 ;;
  7180                           
  7181                           	psect	text21
  7182  0052B0                     __ptext21:
  7183                           	opt stack 0
  7184  0052B0                     _initTime:
  7185                           	opt stack 23
  7186                           
  7187                           ;incstack = 0
  7188                           ;initTime@s stored from wreg
  7189  0052B0  0100               	movlb	0	; () banked
  7190  0052B2  6F86               	movwf	initTime@s& (0+255),b
  7191                           
  7192                           ;RTC.c: 19: time[0] = s;
  7193  0052B4  C086  F11C         	movff	initTime@s,_time
  7194                           
  7195                           ;RTC.c: 20: time[1] = m;
  7196  0052B8  C080  F11D         	movff	initTime@m,_time+1
  7197                           
  7198                           ;RTC.c: 21: time[2] = h;
  7199  0052BC  C081  F11E         	movff	initTime@h,_time+2
  7200                           
  7201                           ;RTC.c: 22: time[3] = w;
  7202  0052C0  C082  F11F         	movff	initTime@w,_time+3
  7203                           
  7204                           ;RTC.c: 23: time[4] = DD;
  7205  0052C4  C083  F120         	movff	initTime@DD,_time+4
  7206                           
  7207                           ;RTC.c: 24: time[5] = MM;
  7208  0052C8  C084  F121         	movff	initTime@MM,_time+5
  7209                           
  7210                           ;RTC.c: 25: time[6] = YY;
  7211  0052CC  C085  F122         	movff	initTime@YY,_time+6
  7212  0052D0  0012               	return		;funcret
  7213  0052D2                     __end_of_initTime:
  7214                           	opt stack 0
  7215                           tblptru	equ	0xFF8
  7216                           tblptrh	equ	0xFF7
  7217                           tblptrl	equ	0xFF6
  7218                           tablat	equ	0xFF5
  7219                           prodh	equ	0xFF4
  7220                           prodl	equ	0xFF3
  7221                           intcon	equ	0xFF2
  7222                           intcon2	equ	0xFF1
  7223                           intcon3	equ	0xFF0
  7224                           postinc0	equ	0xFEE
  7225                           wreg	equ	0xFE8
  7226                           postdec1	equ	0xFE5
  7227                           fsr1l	equ	0xFE1
  7228                           indf2	equ	0xFDF
  7229                           postinc2	equ	0xFDE
  7230                           postdec2	equ	0xFDD
  7231                           fsr2h	equ	0xFDA
  7232                           fsr2l	equ	0xFD9
  7233                           status	equ	0xFD8
  7234                           
  7235 ;; *************** function _initLCD *****************
  7236 ;; Defined at:
  7237 ;;		line 48 in file "lcd.c"
  7238 ;; Parameters:    Size  Location     Type
  7239 ;;		None
  7240 ;; Auto vars:     Size  Location     Type
  7241 ;;		None
  7242 ;; Return value:  Size  Location     Type
  7243 ;;                  1    wreg      void 
  7244 ;; Registers used:
  7245 ;;		wreg, status,2, status,0, cstack
  7246 ;; Tracked objects:
  7247 ;;		On entry : 0/0
  7248 ;;		On exit  : 0/0
  7249 ;;		Unchanged: 0/0
  7250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7253 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7254 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7255 ;;Total ram usage:        1 bytes
  7256 ;; Hardware stack levels used:    1
  7257 ;; Hardware stack levels required when called:    9
  7258 ;; This function calls:
  7259 ;;		_lcdInst
  7260 ;; This function is called by:
  7261 ;;		_main
  7262 ;; This function uses a non-reentrant model
  7263 ;;
  7264                           
  7265                           	psect	text22
  7266  004D48                     __ptext22:
  7267                           	opt stack 0
  7268  004D48                     _initLCD:
  7269                           	opt stack 21
  7270                           
  7271                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  7272                           
  7273                           ;incstack = 0
  7274  004D48  0E9C               	movlw	156
  7275  004D4A  0100               	movlb	0	; () banked
  7276  004D4C  6F83               	movwf	??_initLCD& (0+255),b
  7277  004D4E  0ED7               	movlw	215
  7278  004D50                     u9177:
  7279  004D50  2EE8               	decfsz	wreg,f,c
  7280  004D52  D7FE               	bra	u9177
  7281  004D54  2F83               	decfsz	??_initLCD& (0+255),f,b
  7282  004D56  D7FC               	bra	u9177
  7283                           
  7284                           ;lcd.c: 50: lcdInst(0b00110011);
  7285  004D58  0E33               	movlw	51
  7286  004D5A  ECC5  F029         	call	_lcdInst
  7287                           
  7288                           ;lcd.c: 51: lcdInst(0b00110010);
  7289  004D5E  0E32               	movlw	50
  7290  004D60  ECC5  F029         	call	_lcdInst
  7291                           
  7292                           ;lcd.c: 53: lcdInst(0b00101000);
  7293  004D64  0E28               	movlw	40
  7294  004D66  ECC5  F029         	call	_lcdInst
  7295                           
  7296                           ;lcd.c: 54: lcdInst(0b00001100);
  7297  004D6A  0E0C               	movlw	12
  7298  004D6C  ECC5  F029         	call	_lcdInst
  7299                           
  7300                           ;lcd.c: 55: lcdInst(0b00000110);
  7301  004D70  0E06               	movlw	6
  7302  004D72  ECC5  F029         	call	_lcdInst
  7303                           
  7304                           ;lcd.c: 56: lcdInst(0b00000001);
  7305  004D76  0E01               	movlw	1
  7306  004D78  ECC5  F029         	call	_lcdInst
  7307                           
  7308                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  7309  004D7C  0E9C               	movlw	156
  7310  004D7E  0100               	movlb	0	; () banked
  7311  004D80  6F83               	movwf	??_initLCD& (0+255),b
  7312  004D82  0ED7               	movlw	215
  7313  004D84                     u9187:
  7314  004D84  2EE8               	decfsz	wreg,f,c
  7315  004D86  D7FE               	bra	u9187
  7316  004D88  2F83               	decfsz	??_initLCD& (0+255),f,b
  7317  004D8A  D7FC               	bra	u9187
  7318  004D8C  0012               	return		;funcret
  7319  004D8E                     __end_of_initLCD:
  7320                           	opt stack 0
  7321                           tblptru	equ	0xFF8
  7322                           tblptrh	equ	0xFF7
  7323                           tblptrl	equ	0xFF6
  7324                           tablat	equ	0xFF5
  7325                           prodh	equ	0xFF4
  7326                           prodl	equ	0xFF3
  7327                           intcon	equ	0xFF2
  7328                           intcon2	equ	0xFF1
  7329                           intcon3	equ	0xFF0
  7330                           postinc0	equ	0xFEE
  7331                           wreg	equ	0xFE8
  7332                           postdec1	equ	0xFE5
  7333                           fsr1l	equ	0xFE1
  7334                           indf2	equ	0xFDF
  7335                           postinc2	equ	0xFDE
  7336                           postdec2	equ	0xFDD
  7337                           fsr2h	equ	0xFDA
  7338                           fsr2l	equ	0xFD9
  7339                           status	equ	0xFD8
  7340                           
  7341 ;; *************** function _UI *****************
  7342 ;; Defined at:
  7343 ;;		line 76 in file "UI.c"
  7344 ;; Parameters:    Size  Location     Type
  7345 ;;		None
  7346 ;; Auto vars:     Size  Location     Type
  7347 ;;  i               1   73[BANK0 ] unsigned char 
  7348 ;;  i               1   85[BANK0 ] unsigned char 
  7349 ;;  i               1   84[BANK0 ] unsigned char 
  7350 ;;  i               1   83[BANK0 ] unsigned char 
  7351 ;;  i               1   82[BANK0 ] unsigned char 
  7352 ;;  i               1   81[BANK0 ] unsigned char 
  7353 ;;  i               1   80[BANK0 ] unsigned char 
  7354 ;;  i               1   79[BANK0 ] unsigned char 
  7355 ;;  i               1   78[BANK0 ] unsigned char 
  7356 ;;  i               1   77[BANK0 ] unsigned char 
  7357 ;;  i               1   76[BANK0 ] unsigned char 
  7358 ;;  i               1   75[BANK0 ] unsigned char 
  7359 ;;  i               1   74[BANK0 ] unsigned char 
  7360 ;;  month           4   86[BANK0 ] unsigned char [4]
  7361 ;;  i               1   72[BANK0 ] unsigned char 
  7362 ;; Return value:  Size  Location     Type
  7363 ;;                  1    wreg      void 
  7364 ;; Registers used:
  7365 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7366 ;; Tracked objects:
  7367 ;;		On entry : 0/0
  7368 ;;		On exit  : 0/0
  7369 ;;		Unchanged: 0/0
  7370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7372 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7373 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7374 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7375 ;;Total ram usage:       22 bytes
  7376 ;; Hardware stack levels used:    1
  7377 ;; Hardware stack levels required when called:   11
  7378 ;; This function calls:
  7379 ;;		___awdiv
  7380 ;;		___awmod
  7381 ;;		_change_state_to_menu_12
  7382 ;;		_change_state_to_menu_22
  7383 ;;		_lcdInst
  7384 ;;		_printRTC
  7385 ;;		_printf
  7386 ;;		_strcpy
  7387 ;; This function is called by:
  7388 ;;		_main
  7389 ;; This function uses a non-reentrant model
  7390 ;;
  7391                           
  7392                           	psect	text23
  7393  000012                     __ptext23:
  7394                           	opt stack 0
  7395  000012                     _UI:
  7396                           	opt stack 19
  7397                           
  7398                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  7399                           
  7400                           ;incstack = 0
  7401  000012  0E02               	movlw	2
  7402  000014  0100               	movlb	0	; () banked
  7403  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  7404  000018  A4D8               	btfss	status,2,c
  7405  00001A  D086               	goto	l8580
  7406                           
  7407                           ; BSR set to: 0
  7408                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7409  00001C  0E01               	movlw	1
  7410  00001E  ECC5  F029         	call	_lcdInst
  7411  000022  0E68               	movlw	104
  7412  000024  0100               	movlb	0	; () banked
  7413  000026  6FC4               	movwf	??_UI& (0+255),b
  7414  000028  0EE4               	movlw	228
  7415  00002A                     u9197:
  7416  00002A  2EE8               	decfsz	wreg,f,c
  7417  00002C  D7FE               	bra	u9197
  7418  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  7419  000030  D7FC               	bra	u9197
  7420  000032  F000               	nop	
  7421                           
  7422                           ;UI.c: 79: lcdInst(0b10000000);;
  7423  000034  0E80               	movlw	128
  7424  000036  ECC5  F029         	call	_lcdInst
  7425                           
  7426                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  7427  00003A  0E81               	movlw	low STR_1
  7428  00003C  0100               	movlb	0	; () banked
  7429  00003E  6F8E               	movwf	printf@f& (0+255),b
  7430  000040  0EFB               	movlw	high STR_1
  7431  000042  0100               	movlb	0	; () banked
  7432  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  7433  000046  0E01               	movlw	1
  7434  000048  0100               	movlb	0	; () banked
  7435  00004A  25FD               	addwf	_sel& (0+255),w,b
  7436  00004C  0100               	movlb	0	; () banked
  7437  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  7438  000050  0100               	movlb	0	; () banked
  7439  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  7440  000054  0E00               	movlw	0
  7441  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  7442  000058  EC1B  F00B         	call	_printf	;wreg free
  7443                           
  7444                           ;UI.c: 81: lcdInst(0b11000000);;
  7445  00005C  0EC0               	movlw	192
  7446  00005E  ECC5  F029         	call	_lcdInst
  7447                           
  7448                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7449  000062  0E0E               	movlw	14
  7450  000064  0100               	movlb	0	; () banked
  7451  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7452  000068  0E10               	movlw	16
  7453  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  7454  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  7455  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  7456  000074  EC78  F022         	call	___awmod	;wreg free
  7457  000078  C080  F0C6         	movff	?___awmod,_UI$2369
  7458  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2369+1
  7459                           
  7460                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7461  000080  0E27               	movlw	low STR_2
  7462  000082  0100               	movlb	0	; () banked
  7463  000084  6F8E               	movwf	printf@f& (0+255),b
  7464  000086  0EFF               	movlw	high STR_2
  7465  000088  0100               	movlb	0	; () banked
  7466  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7467  00008C  0E0E               	movlw	14
  7468  00008E  0100               	movlb	0	; () banked
  7469  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7470  000092  0E10               	movlw	16
  7471  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  7472  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  7473  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  7474  00009E  EC78  F022         	call	___awmod	;wreg free
  7475  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  7476  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7477  0000AA  0E00               	movlw	0
  7478  0000AC  0100               	movlb	0	; () banked
  7479  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7480  0000B0  0E3C               	movlw	60
  7481  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  7482  0000B4  EC10  F021         	call	___awdiv	;wreg free
  7483  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  7484  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  7485  0000C0  C0C6  F080         	movff	_UI$2369,___awmod@dividend
  7486  0000C4  C0C7  F081         	movff	_UI$2369+1,___awmod@dividend+1
  7487  0000C8  0E00               	movlw	0
  7488  0000CA  0100               	movlb	0	; () banked
  7489  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7490  0000CE  0E3C               	movlw	60
  7491  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  7492  0000D2  EC78  F022         	call	___awmod	;wreg free
  7493  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  7494  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  7495  0000DE  EC1B  F00B         	call	_printf	;wreg free
  7496  0000E2                     l180:
  7497  0000E2  B281               	btfsc	3969,1,c	;volatile
  7498  0000E4  D7FE               	goto	l180
  7499  0000E6                     l183:
  7500  0000E6  A281               	btfss	3969,1,c	;volatile
  7501  0000E8  D7FE               	goto	l183
  7502                           
  7503                           ;UI.c: 86: }
  7504                           ;UI.c: 87: if(cur_state == 12){
  7505  0000EA  0E0C               	movlw	12
  7506  0000EC  0100               	movlb	0	; () banked
  7507  0000EE  19EC               	xorwf	_cur_state& (0+255),w,b
  7508  0000F0  0100               	movlb	0	; () banked
  7509  0000F2  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7510  0000F4  A4D8               	btfss	status,2,c
  7511  0000F6  D003               	goto	l8574
  7512                           
  7513                           ; BSR set to: 0
  7514                           ;UI.c: 88: change_state_to_menu_12();
  7515  0000F8  EC04  F027         	call	_change_state_to_menu_12	;wreg free
  7516                           
  7517                           ;UI.c: 89: }
  7518  0000FC  D002               	goto	l188
  7519  0000FE                     l8574:
  7520                           
  7521                           ;UI.c: 90: else{
  7522                           ;UI.c: 91: change_state_to_menu_22();
  7523  0000FE  ECE8  F026         	call	_change_state_to_menu_22	;wreg free
  7524  000102                     l188:
  7525  000102  B281               	btfsc	3969,1,c	;volatile
  7526  000104  D7FE               	goto	l188
  7527                           
  7528                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  7529  000106  0E05               	movlw	5
  7530  000108  0100               	movlb	0	; () banked
  7531  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  7532  00010C  0E0F               	movlw	15
  7533  00010E  0100               	movlb	0	; () banked
  7534  000110  6FC4               	movwf	??_UI& (0+255),b
  7535  000112  0EF1               	movlw	241
  7536  000114                     u9207:
  7537  000114  2EE8               	decfsz	wreg,f,c
  7538  000116  D7FE               	bra	u9207
  7539  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  7540  00011A  D7FC               	bra	u9207
  7541  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  7542  00011E  D7FA               	bra	u9207
  7543                           
  7544                           ;UI.c: 95: machine_state = UI_state;
  7545  000120  0E00               	movlw	0
  7546  000122  0100               	movlb	0	; () banked
  7547  000124  6FFC               	movwf	_machine_state& (0+255),b
  7548                           
  7549                           ;UI.c: 96: }
  7550  000126  D3D2               	goto	l8900
  7551  000128                     l8580:
  7552                           
  7553                           ; BSR set to: 0
  7554                           ;UI.c: 97: else if(cur_state == 0){
  7555  000128  0100               	movlb	0	; () banked
  7556  00012A  51EC               	movf	_cur_state& (0+255),w,b
  7557  00012C  0100               	movlb	0	; () banked
  7558  00012E  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7559  000130  A4D8               	btfss	status,2,c
  7560  000132  D3CC               	goto	l8900
  7561                           
  7562                           ; BSR set to: 0
  7563                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  7564  000134  0E00               	movlw	0
  7565  000136  0100               	movlb	0	; () banked
  7566  000138  6FC8               	movwf	UI@i& (0+255),b
  7567  00013A                     l8584:
  7568                           
  7569                           ; BSR set to: 0
  7570  00013A  0E63               	movlw	99
  7571  00013C  0100               	movlb	0	; () banked
  7572  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  7573  000140  D001               	goto	l8588
  7574  000142  D00C               	goto	l8592
  7575  000144                     l8588:
  7576                           
  7577                           ; BSR set to: 0
  7578  000144  0E68               	movlw	104
  7579  000146  0100               	movlb	0	; () banked
  7580  000148  6FC4               	movwf	??_UI& (0+255),b
  7581  00014A  0EE4               	movlw	228
  7582  00014C                     u9217:
  7583  00014C  2EE8               	decfsz	wreg,f,c
  7584  00014E  D7FE               	bra	u9217
  7585  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  7586  000152  D7FC               	bra	u9217
  7587  000154  F000               	nop	
  7588  000156  0100               	movlb	0	; () banked
  7589  000158  2BC8               	incf	UI@i& (0+255),f,b
  7590  00015A  D7EF               	goto	l8584
  7591  00015C                     l8592:
  7592                           
  7593                           ; BSR set to: 0
  7594                           ;UI.c: 99: if(cur_state == 0){
  7595  00015C  0100               	movlb	0	; () banked
  7596  00015E  51EC               	movf	_cur_state& (0+255),w,b
  7597  000160  0100               	movlb	0	; () banked
  7598  000162  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7599  000164  A4D8               	btfss	status,2,c
  7600  000166  D3B2               	goto	l8900
  7601                           
  7602                           ; BSR set to: 0
  7603                           ;UI.c: 100: printRTC();
  7604  000168  EC2F  F012         	call	_printRTC	;wreg free
  7605                           
  7606                           ;UI.c: 101: }
  7607                           ;UI.c: 102: }
  7608                           ;UI.c: 103: while(logstate){
  7609  00016C  D3AF               	goto	l8900
  7610  00016E                     l8596:
  7611                           
  7612                           ;UI.c: 105: if(!log_completion){
  7613  00016E  0100               	movlb	0	; () banked
  7614  000170  51F4               	movf	_log_completion& (0+255),w,b
  7615  000172  0100               	movlb	0	; () banked
  7616  000174  11F5               	iorwf	(_log_completion+1)& (0+255),w,b
  7617  000176  A4D8               	btfss	status,2,c
  7618  000178  D041               	goto	l8626
  7619                           
  7620                           ; BSR set to: 0
  7621                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7622  00017A  0E01               	movlw	1
  7623  00017C  ECC5  F029         	call	_lcdInst
  7624  000180  0E68               	movlw	104
  7625  000182  0100               	movlb	0	; () banked
  7626  000184  6FC4               	movwf	??_UI& (0+255),b
  7627  000186  0EE4               	movlw	228
  7628  000188                     u9227:
  7629  000188  2EE8               	decfsz	wreg,f,c
  7630  00018A  D7FE               	bra	u9227
  7631  00018C  2FC4               	decfsz	??_UI& (0+255),f,b
  7632  00018E  D7FC               	bra	u9227
  7633  000190  F000               	nop	
  7634                           
  7635                           ;UI.c: 107: lcdInst(0b10000000);;
  7636  000192  0E80               	movlw	128
  7637  000194  ECC5  F029         	call	_lcdInst
  7638                           
  7639                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  7640  000198  0E6F               	movlw	low STR_3
  7641  00019A  0100               	movlb	0	; () banked
  7642  00019C  6F8E               	movwf	printf@f& (0+255),b
  7643  00019E  0EFB               	movlw	high STR_3
  7644  0001A0  0100               	movlb	0	; () banked
  7645  0001A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  7646  0001A4  C0F2  F090         	movff	_log,?_printf+2
  7647  0001A8  C0F3  F091         	movff	_log+1,?_printf+3
  7648  0001AC  EC1B  F00B         	call	_printf	;wreg free
  7649                           
  7650                           ;UI.c: 109: lcdInst(0b11000000);;
  7651  0001B0  0EC0               	movlw	192
  7652  0001B2  ECC5  F029         	call	_lcdInst
  7653                           
  7654                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  7655  0001B6  0E4A               	movlw	low STR_4
  7656  0001B8  0100               	movlb	0	; () banked
  7657  0001BA  6F8E               	movwf	printf@f& (0+255),b
  7658  0001BC  0EFE               	movlw	high STR_4
  7659  0001BE  0100               	movlb	0	; () banked
  7660  0001C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  7661  0001C2  EC1B  F00B         	call	_printf	;wreg free
  7662  0001C6                     l8610:
  7663  0001C6  0E00               	movlw	0
  7664  0001C8  0100               	movlb	0	; () banked
  7665  0001CA  6FC9               	movwf	UI@i_409& (0+255),b
  7666  0001CC                     l8612:
  7667                           
  7668                           ; BSR set to: 0
  7669  0001CC  0E63               	movlw	99
  7670  0001CE  0100               	movlb	0	; () banked
  7671  0001D0  65C9               	cpfsgt	UI@i_409& (0+255),b
  7672  0001D2  D001               	goto	l8616
  7673  0001D4  D00C               	goto	l8620
  7674  0001D6                     l8616:
  7675                           
  7676                           ; BSR set to: 0
  7677  0001D6  0E68               	movlw	104
  7678  0001D8  0100               	movlb	0	; () banked
  7679  0001DA  6FC4               	movwf	??_UI& (0+255),b
  7680  0001DC  0EE4               	movlw	228
  7681  0001DE                     u9237:
  7682  0001DE  2EE8               	decfsz	wreg,f,c
  7683  0001E0  D7FE               	bra	u9237
  7684  0001E2  2FC4               	decfsz	??_UI& (0+255),f,b
  7685  0001E4  D7FC               	bra	u9237
  7686  0001E6  F000               	nop	
  7687  0001E8  0100               	movlb	0	; () banked
  7688  0001EA  2BC9               	incf	UI@i_409& (0+255),f,b
  7689  0001EC  D7EF               	goto	l8612
  7690  0001EE                     l8620:
  7691                           
  7692                           ; BSR set to: 0
  7693  0001EE  0100               	movlb	0	; () banked
  7694  0001F0  51F8               	movf	_logstate& (0+255),w,b
  7695  0001F2  0100               	movlb	0	; () banked
  7696  0001F4  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7697  0001F6  B4D8               	btfsc	status,2,c
  7698  0001F8  0012               	return	
  7699  0001FA  D7E5               	goto	l8610
  7700  0001FC                     l8626:
  7701                           
  7702                           ; BSR set to: 0
  7703                           ;UI.c: 114: else{
  7704                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7705  0001FC  0E01               	movlw	1
  7706  0001FE  ECC5  F029         	call	_lcdInst
  7707  000202  0E68               	movlw	104
  7708  000204  0100               	movlb	0	; () banked
  7709  000206  6FC4               	movwf	??_UI& (0+255),b
  7710  000208  0EE4               	movlw	228
  7711  00020A                     u9247:
  7712  00020A  2EE8               	decfsz	wreg,f,c
  7713  00020C  D7FE               	bra	u9247
  7714  00020E  2FC4               	decfsz	??_UI& (0+255),f,b
  7715  000210  D7FC               	bra	u9247
  7716  000212  F000               	nop	
  7717                           
  7718                           ;UI.c: 116: lcdInst(0b10000000);;
  7719  000214  0E80               	movlw	128
  7720  000216  ECC5  F029         	call	_lcdInst
  7721                           
  7722                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  7723  00021A  0E6F               	movlw	low STR_3
  7724  00021C  0100               	movlb	0	; () banked
  7725  00021E  6F8E               	movwf	printf@f& (0+255),b
  7726  000220  0EFB               	movlw	high STR_3
  7727  000222  0100               	movlb	0	; () banked
  7728  000224  6F8F               	movwf	(printf@f+1)& (0+255),b
  7729  000226  C0F2  F090         	movff	_log,?_printf+2
  7730  00022A  C0F3  F091         	movff	_log+1,?_printf+3
  7731  00022E  EC1B  F00B         	call	_printf	;wreg free
  7732                           
  7733                           ;UI.c: 118: lcdInst(0b11000000);;
  7734  000232  0EC0               	movlw	192
  7735  000234  ECC5  F029         	call	_lcdInst
  7736                           
  7737                           ;UI.c: 119: printf("PAUSE < | BACK >");
  7738  000238  0EE6               	movlw	low STR_6
  7739  00023A  0100               	movlb	0	; () banked
  7740  00023C  6F8E               	movwf	printf@f& (0+255),b
  7741  00023E  0EFD               	movlw	high STR_6
  7742  000240  0100               	movlb	0	; () banked
  7743  000242  6F8F               	movwf	(printf@f+1)& (0+255),b
  7744  000244  EC1B  F00B         	call	_printf	;wreg free
  7745                           
  7746                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7747  000248  0E00               	movlw	0
  7748  00024A  0100               	movlb	0	; () banked
  7749  00024C  6FCA               	movwf	UI@i_412& (0+255),b
  7750  00024E                     l8640:
  7751                           
  7752                           ; BSR set to: 0
  7753  00024E  0E63               	movlw	99
  7754  000250  0100               	movlb	0	; () banked
  7755  000252  65CA               	cpfsgt	UI@i_412& (0+255),b
  7756  000254  D001               	goto	l8644
  7757  000256  D00C               	goto	l8648
  7758  000258                     l8644:
  7759                           
  7760                           ; BSR set to: 0
  7761  000258  0E68               	movlw	104
  7762  00025A  0100               	movlb	0	; () banked
  7763  00025C  6FC4               	movwf	??_UI& (0+255),b
  7764  00025E  0EE4               	movlw	228
  7765  000260                     u9257:
  7766  000260  2EE8               	decfsz	wreg,f,c
  7767  000262  D7FE               	bra	u9257
  7768  000264  2FC4               	decfsz	??_UI& (0+255),f,b
  7769  000266  D7FC               	bra	u9257
  7770  000268  F000               	nop	
  7771  00026A  0100               	movlb	0	; () banked
  7772  00026C  2BCA               	incf	UI@i_412& (0+255),f,b
  7773  00026E  D7EF               	goto	l8640
  7774  000270                     l8648:
  7775                           
  7776                           ; BSR set to: 0
  7777  000270  0100               	movlb	0	; () banked
  7778  000272  51F8               	movf	_logstate& (0+255),w,b
  7779  000274  0100               	movlb	0	; () banked
  7780  000276  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7781  000278  B4D8               	btfsc	status,2,c
  7782  00027A  0012               	return	
  7783                           
  7784                           ; BSR set to: 0
  7785                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7786                           
  7787                           ; BSR set to: 0
  7788                           
  7789                           ; BSR set to: 0
  7790  00027C  0E00               	movlw	0
  7791  00027E  0100               	movlb	0	; () banked
  7792  000280  6FCB               	movwf	UI@i_413& (0+255),b
  7793  000282                     l8654:
  7794                           
  7795                           ; BSR set to: 0
  7796  000282  0E63               	movlw	99
  7797  000284  0100               	movlb	0	; () banked
  7798  000286  65CB               	cpfsgt	UI@i_413& (0+255),b
  7799  000288  D001               	goto	l8658
  7800  00028A  D00C               	goto	l8662
  7801  00028C                     l8658:
  7802                           
  7803                           ; BSR set to: 0
  7804  00028C  0E68               	movlw	104
  7805  00028E  0100               	movlb	0	; () banked
  7806  000290  6FC4               	movwf	??_UI& (0+255),b
  7807  000292  0EE4               	movlw	228
  7808  000294                     u9267:
  7809  000294  2EE8               	decfsz	wreg,f,c
  7810  000296  D7FE               	bra	u9267
  7811  000298  2FC4               	decfsz	??_UI& (0+255),f,b
  7812  00029A  D7FC               	bra	u9267
  7813  00029C  F000               	nop	
  7814  00029E  0100               	movlb	0	; () banked
  7815  0002A0  2BCB               	incf	UI@i_413& (0+255),f,b
  7816  0002A2  D7EF               	goto	l8654
  7817  0002A4                     l8662:
  7818                           
  7819                           ; BSR set to: 0
  7820  0002A4  0100               	movlb	0	; () banked
  7821  0002A6  51F8               	movf	_logstate& (0+255),w,b
  7822  0002A8  0100               	movlb	0	; () banked
  7823  0002AA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7824  0002AC  B4D8               	btfsc	status,2,c
  7825  0002AE  0012               	return	
  7826                           
  7827                           ; BSR set to: 0
  7828                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7829                           
  7830                           ; BSR set to: 0
  7831                           
  7832                           ; BSR set to: 0
  7833  0002B0  0E01               	movlw	1
  7834  0002B2  ECC5  F029         	call	_lcdInst
  7835  0002B6  0E68               	movlw	104
  7836  0002B8  0100               	movlb	0	; () banked
  7837  0002BA  6FC4               	movwf	??_UI& (0+255),b
  7838  0002BC  0EE4               	movlw	228
  7839  0002BE                     u9277:
  7840  0002BE  2EE8               	decfsz	wreg,f,c
  7841  0002C0  D7FE               	bra	u9277
  7842  0002C2  2FC4               	decfsz	??_UI& (0+255),f,b
  7843  0002C4  D7FC               	bra	u9277
  7844  0002C6  F000               	nop	
  7845                           
  7846                           ;UI.c: 125: lcdInst(0b10000000);;
  7847  0002C8  0E80               	movlw	128
  7848  0002CA  ECC5  F029         	call	_lcdInst
  7849                           
  7850                           ;UI.c: 126: printf("START:");
  7851  0002CE  0EC4               	movlw	low STR_7
  7852  0002D0  0100               	movlb	0	; () banked
  7853  0002D2  6F8E               	movwf	printf@f& (0+255),b
  7854  0002D4  0EFF               	movlw	high STR_7
  7855  0002D6  0100               	movlb	0	; () banked
  7856  0002D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  7857  0002DA  EC1B  F00B         	call	_printf	;wreg free
  7858                           
  7859                           ;UI.c: 127: lcdInst(0b11000000);;
  7860  0002DE  0EC0               	movlw	192
  7861  0002E0  ECC5  F029         	call	_lcdInst
  7862                           
  7863                           ;UI.c: 128: char month[] = "MMM";
  7864  0002E4  C141  F0D6         	movff	UI@F3236,UI@month
  7865  0002E8  C142  F0D7         	movff	UI@F3236+1,UI@month+1
  7866  0002EC  C143  F0D8         	movff	UI@F3236+2,UI@month+2
  7867  0002F0  C144  F0D9         	movff	UI@F3236+3,UI@month+3
  7868                           
  7869                           ;UI.c: 129: switch(log_startTime[5]){
  7870  0002F4  D0C3               	goto	l8706
  7871  0002F6                     l8678:
  7872                           
  7873                           ;UI.c: 131: strcpy(month, "JAN");
  7874  0002F6  0ED6               	movlw	low UI@month
  7875  0002F8  0100               	movlb	0	; () banked
  7876  0002FA  6F80               	movwf	strcpy@to& (0+255),b
  7877  0002FC  0E00               	movlw	high UI@month
  7878  0002FE  0100               	movlb	0	; () banked
  7879  000300  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7880  000302  0EDB               	movlw	low STR_8
  7881  000304  0100               	movlb	0	; () banked
  7882  000306  6F82               	movwf	strcpy@from& (0+255),b
  7883  000308  0EFF               	movlw	high STR_8
  7884  00030A  0100               	movlb	0	; () banked
  7885  00030C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7886  00030E  EC20  F027         	call	_strcpy	;wreg free
  7887                           
  7888                           ;UI.c: 132: break;
  7889  000312  D0E6               	goto	l8708
  7890  000314                     l8680:
  7891                           
  7892                           ;UI.c: 134: strcpy(month, "FEB");
  7893  000314  0ED6               	movlw	low UI@month
  7894  000316  0100               	movlb	0	; () banked
  7895  000318  6F80               	movwf	strcpy@to& (0+255),b
  7896  00031A  0E00               	movlw	high UI@month
  7897  00031C  0100               	movlb	0	; () banked
  7898  00031E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7899  000320  0ECB               	movlw	low STR_9
  7900  000322  0100               	movlb	0	; () banked
  7901  000324  6F82               	movwf	strcpy@from& (0+255),b
  7902  000326  0EFF               	movlw	high STR_9
  7903  000328  0100               	movlb	0	; () banked
  7904  00032A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7905  00032C  EC20  F027         	call	_strcpy	;wreg free
  7906                           
  7907                           ;UI.c: 135: break;
  7908  000330  D0D7               	goto	l8708
  7909  000332                     l8682:
  7910                           
  7911                           ;UI.c: 137: strcpy(month, "MAR");
  7912  000332  0ED6               	movlw	low UI@month
  7913  000334  0100               	movlb	0	; () banked
  7914  000336  6F80               	movwf	strcpy@to& (0+255),b
  7915  000338  0E00               	movlw	high UI@month
  7916  00033A  0100               	movlb	0	; () banked
  7917  00033C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7918  00033E  0EE7               	movlw	low STR_10
  7919  000340  0100               	movlb	0	; () banked
  7920  000342  6F82               	movwf	strcpy@from& (0+255),b
  7921  000344  0EFF               	movlw	high STR_10
  7922  000346  0100               	movlb	0	; () banked
  7923  000348  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7924  00034A  EC20  F027         	call	_strcpy	;wreg free
  7925                           
  7926                           ;UI.c: 138: break;
  7927  00034E  D0C8               	goto	l8708
  7928  000350                     l8684:
  7929                           
  7930                           ;UI.c: 140: strcpy(month, "APR");
  7931  000350  0ED6               	movlw	low UI@month
  7932  000352  0100               	movlb	0	; () banked
  7933  000354  6F80               	movwf	strcpy@to& (0+255),b
  7934  000356  0E00               	movlw	high UI@month
  7935  000358  0100               	movlb	0	; () banked
  7936  00035A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7937  00035C  0EEB               	movlw	low STR_11
  7938  00035E  0100               	movlb	0	; () banked
  7939  000360  6F82               	movwf	strcpy@from& (0+255),b
  7940  000362  0EFF               	movlw	high STR_11
  7941  000364  0100               	movlb	0	; () banked
  7942  000366  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7943  000368  EC20  F027         	call	_strcpy	;wreg free
  7944                           
  7945                           ;UI.c: 141: break;
  7946  00036C  D0B9               	goto	l8708
  7947  00036E                     l8686:
  7948                           
  7949                           ;UI.c: 143: strcpy(month, "MAY");
  7950  00036E  0ED6               	movlw	low UI@month
  7951  000370  0100               	movlb	0	; () banked
  7952  000372  6F80               	movwf	strcpy@to& (0+255),b
  7953  000374  0E00               	movlw	high UI@month
  7954  000376  0100               	movlb	0	; () banked
  7955  000378  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7956  00037A  0EFB               	movlw	low STR_12
  7957  00037C  0100               	movlb	0	; () banked
  7958  00037E  6F82               	movwf	strcpy@from& (0+255),b
  7959  000380  0EFF               	movlw	high STR_12
  7960  000382  0100               	movlb	0	; () banked
  7961  000384  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7962  000386  EC20  F027         	call	_strcpy	;wreg free
  7963                           
  7964                           ;UI.c: 144: break;
  7965  00038A  D0AA               	goto	l8708
  7966  00038C                     l8688:
  7967                           
  7968                           ;UI.c: 146: strcpy(month, "JUN");
  7969  00038C  0ED6               	movlw	low UI@month
  7970  00038E  0100               	movlb	0	; () banked
  7971  000390  6F80               	movwf	strcpy@to& (0+255),b
  7972  000392  0E00               	movlw	high UI@month
  7973  000394  0100               	movlb	0	; () banked
  7974  000396  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7975  000398  0EDF               	movlw	low STR_13
  7976  00039A  0100               	movlb	0	; () banked
  7977  00039C  6F82               	movwf	strcpy@from& (0+255),b
  7978  00039E  0EFF               	movlw	high STR_13
  7979  0003A0  0100               	movlb	0	; () banked
  7980  0003A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7981  0003A4  EC20  F027         	call	_strcpy	;wreg free
  7982                           
  7983                           ;UI.c: 147: break;
  7984  0003A8  D09B               	goto	l8708
  7985  0003AA                     l8690:
  7986                           
  7987                           ;UI.c: 149: strcpy(month, "JUL");
  7988  0003AA  0ED6               	movlw	low UI@month
  7989  0003AC  0100               	movlb	0	; () banked
  7990  0003AE  6F80               	movwf	strcpy@to& (0+255),b
  7991  0003B0  0E00               	movlw	high UI@month
  7992  0003B2  0100               	movlb	0	; () banked
  7993  0003B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7994  0003B6  0ED7               	movlw	low STR_14
  7995  0003B8  0100               	movlb	0	; () banked
  7996  0003BA  6F82               	movwf	strcpy@from& (0+255),b
  7997  0003BC  0EFF               	movlw	high STR_14
  7998  0003BE  0100               	movlb	0	; () banked
  7999  0003C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8000  0003C2  EC20  F027         	call	_strcpy	;wreg free
  8001                           
  8002                           ;UI.c: 150: break;
  8003  0003C6  D08C               	goto	l8708
  8004  0003C8                     l8692:
  8005                           
  8006                           ;UI.c: 152: strcpy(month, "AUG");
  8007  0003C8  0ED6               	movlw	low UI@month
  8008  0003CA  0100               	movlb	0	; () banked
  8009  0003CC  6F80               	movwf	strcpy@to& (0+255),b
  8010  0003CE  0E00               	movlw	high UI@month
  8011  0003D0  0100               	movlb	0	; () banked
  8012  0003D2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8013  0003D4  0ED3               	movlw	low STR_15
  8014  0003D6  0100               	movlb	0	; () banked
  8015  0003D8  6F82               	movwf	strcpy@from& (0+255),b
  8016  0003DA  0EFF               	movlw	high STR_15
  8017  0003DC  0100               	movlb	0	; () banked
  8018  0003DE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8019  0003E0  EC20  F027         	call	_strcpy	;wreg free
  8020                           
  8021                           ;UI.c: 153: break;
  8022  0003E4  D07D               	goto	l8708
  8023  0003E6                     l8694:
  8024                           
  8025                           ;UI.c: 155: strcpy(month, "SEP");
  8026  0003E6  0ED6               	movlw	low UI@month
  8027  0003E8  0100               	movlb	0	; () banked
  8028  0003EA  6F80               	movwf	strcpy@to& (0+255),b
  8029  0003EC  0E00               	movlw	high UI@month
  8030  0003EE  0100               	movlb	0	; () banked
  8031  0003F0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8032  0003F2  0EE3               	movlw	low STR_16
  8033  0003F4  0100               	movlb	0	; () banked
  8034  0003F6  6F82               	movwf	strcpy@from& (0+255),b
  8035  0003F8  0EFF               	movlw	high STR_16
  8036  0003FA  0100               	movlb	0	; () banked
  8037  0003FC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8038  0003FE  EC20  F027         	call	_strcpy	;wreg free
  8039                           
  8040                           ;UI.c: 156: break;
  8041  000402  D06E               	goto	l8708
  8042  000404                     l8696:
  8043                           
  8044                           ;UI.c: 158: strcpy(month, "OCT");
  8045  000404  0ED6               	movlw	low UI@month
  8046  000406  0100               	movlb	0	; () banked
  8047  000408  6F80               	movwf	strcpy@to& (0+255),b
  8048  00040A  0E00               	movlw	high UI@month
  8049  00040C  0100               	movlb	0	; () banked
  8050  00040E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8051  000410  0EF3               	movlw	low STR_17
  8052  000412  0100               	movlb	0	; () banked
  8053  000414  6F82               	movwf	strcpy@from& (0+255),b
  8054  000416  0EFF               	movlw	high STR_17
  8055  000418  0100               	movlb	0	; () banked
  8056  00041A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8057  00041C  EC20  F027         	call	_strcpy	;wreg free
  8058                           
  8059                           ;UI.c: 159: break;
  8060  000420  D05F               	goto	l8708
  8061  000422                     l8698:
  8062                           
  8063                           ;UI.c: 161: strcpy(month, "NOV");
  8064  000422  0ED6               	movlw	low UI@month
  8065  000424  0100               	movlb	0	; () banked
  8066  000426  6F80               	movwf	strcpy@to& (0+255),b
  8067  000428  0E00               	movlw	high UI@month
  8068  00042A  0100               	movlb	0	; () banked
  8069  00042C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8070  00042E  0EF7               	movlw	low STR_18
  8071  000430  0100               	movlb	0	; () banked
  8072  000432  6F82               	movwf	strcpy@from& (0+255),b
  8073  000434  0EFF               	movlw	high STR_18
  8074  000436  0100               	movlb	0	; () banked
  8075  000438  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8076  00043A  EC20  F027         	call	_strcpy	;wreg free
  8077                           
  8078                           ;UI.c: 162: break;
  8079  00043E  D050               	goto	l8708
  8080  000440                     l8700:
  8081                           
  8082                           ;UI.c: 164: strcpy(month, "DEC");
  8083  000440  0ED6               	movlw	low UI@month
  8084  000442  0100               	movlb	0	; () banked
  8085  000444  6F80               	movwf	strcpy@to& (0+255),b
  8086  000446  0E00               	movlw	high UI@month
  8087  000448  0100               	movlb	0	; () banked
  8088  00044A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8089  00044C  0ECF               	movlw	low STR_19
  8090  00044E  0100               	movlb	0	; () banked
  8091  000450  6F82               	movwf	strcpy@from& (0+255),b
  8092  000452  0EFF               	movlw	high STR_19
  8093  000454  0100               	movlb	0	; () banked
  8094  000456  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8095  000458  EC20  F027         	call	_strcpy	;wreg free
  8096                           
  8097                           ;UI.c: 165: break;
  8098  00045C  D041               	goto	l8708
  8099  00045E                     l8702:
  8100                           
  8101                           ;UI.c: 167: strcpy(month, "ERR");
  8102  00045E  0ED6               	movlw	low UI@month
  8103  000460  0100               	movlb	0	; () banked
  8104  000462  6F80               	movwf	strcpy@to& (0+255),b
  8105  000464  0E00               	movlw	high UI@month
  8106  000466  0100               	movlb	0	; () banked
  8107  000468  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8108  00046A  0EEF               	movlw	low STR_20
  8109  00046C  0100               	movlb	0	; () banked
  8110  00046E  6F82               	movwf	strcpy@from& (0+255),b
  8111  000470  0EFF               	movlw	high STR_20
  8112  000472  0100               	movlb	0	; () banked
  8113  000474  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8114  000476  EC20  F027         	call	_strcpy	;wreg free
  8115                           
  8116                           ;UI.c: 169: }
  8117                           
  8118                           ;UI.c: 168: break;
  8119  00047A  D032               	goto	l8708
  8120  00047C                     l8706:
  8121  00047C  EE21  F00A         	lfsr	2,_log_startTime+10
  8122  000480  CFDE F0C4          	movff	postinc2,??_UI
  8123  000484  CFDD F0C5          	movff	postdec2,??_UI+1
  8124                           
  8125                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8126                           ; Switch size 1, requested type "space"
  8127                           ; Number of cases is 1, Range of values is 0 to 0
  8128                           ; switch strategies available:
  8129                           ; Name         Instructions Cycles
  8130                           ; simple_byte            4     3 (average)
  8131                           ;	Chosen strategy is simple_byte
  8132  000488  0100               	movlb	0	; () banked
  8133  00048A  51C5               	movf	(??_UI+1)& (0+255),w,b
  8134  00048C  0A00               	xorlw	0	; case 0
  8135  00048E  A4D8               	btfss	status,2,c
  8136  000490  D7E6               	goto	l8702
  8137                           
  8138                           ; BSR set to: 0
  8139                           ; Switch size 1, requested type "space"
  8140                           ; Number of cases is 12, Range of values is 1 to 12
  8141                           ; switch strategies available:
  8142                           ; Name         Instructions Cycles
  8143                           ; simple_byte           37    19 (average)
  8144                           ;	Chosen strategy is simple_byte
  8145  000492  0100               	movlb	0	; () banked
  8146  000494  51C4               	movf	??_UI& (0+255),w,b
  8147  000496  0A01               	xorlw	1	; case 1
  8148  000498  B4D8               	btfsc	status,2,c
  8149  00049A  D72D               	goto	l8678
  8150  00049C  0A03               	xorlw	3	; case 2
  8151  00049E  B4D8               	btfsc	status,2,c
  8152  0004A0  D739               	goto	l8680
  8153  0004A2  0A01               	xorlw	1	; case 3
  8154  0004A4  B4D8               	btfsc	status,2,c
  8155  0004A6  D745               	goto	l8682
  8156  0004A8  0A07               	xorlw	7	; case 4
  8157  0004AA  B4D8               	btfsc	status,2,c
  8158  0004AC  D751               	goto	l8684
  8159  0004AE  0A01               	xorlw	1	; case 5
  8160  0004B0  B4D8               	btfsc	status,2,c
  8161  0004B2  D75D               	goto	l8686
  8162  0004B4  0A03               	xorlw	3	; case 6
  8163  0004B6  B4D8               	btfsc	status,2,c
  8164  0004B8  D769               	goto	l8688
  8165  0004BA  0A01               	xorlw	1	; case 7
  8166  0004BC  B4D8               	btfsc	status,2,c
  8167  0004BE  D775               	goto	l8690
  8168  0004C0  0A0F               	xorlw	15	; case 8
  8169  0004C2  B4D8               	btfsc	status,2,c
  8170  0004C4  D781               	goto	l8692
  8171  0004C6  0A01               	xorlw	1	; case 9
  8172  0004C8  B4D8               	btfsc	status,2,c
  8173  0004CA  D78D               	goto	l8694
  8174  0004CC  0A03               	xorlw	3	; case 10
  8175  0004CE  B4D8               	btfsc	status,2,c
  8176  0004D0  D799               	goto	l8696
  8177  0004D2  0A01               	xorlw	1	; case 11
  8178  0004D4  B4D8               	btfsc	status,2,c
  8179  0004D6  D7A5               	goto	l8698
  8180  0004D8  0A07               	xorlw	7	; case 12
  8181  0004DA  B4D8               	btfsc	status,2,c
  8182  0004DC  D7B1               	goto	l8700
  8183  0004DE  D7BF               	goto	l8702
  8184  0004E0                     l8708:
  8185                           
  8186                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  8187  0004E0  0EE8               	movlw	low STR_21
  8188  0004E2  0100               	movlb	0	; () banked
  8189  0004E4  6F8E               	movwf	printf@f& (0+255),b
  8190  0004E6  0EFA               	movlw	high STR_21
  8191  0004E8  0100               	movlb	0	; () banked
  8192  0004EA  6F8F               	movwf	(printf@f+1)& (0+255),b
  8193  0004EC  C108  F090         	movff	_log_startTime+8,?_printf+2
  8194  0004F0  C109  F091         	movff	_log_startTime+9,?_printf+3
  8195  0004F4  0ED6               	movlw	low UI@month
  8196  0004F6  0100               	movlb	0	; () banked
  8197  0004F8  6F92               	movwf	(?_printf+4)& (0+255),b
  8198  0004FA  0E00               	movlw	high UI@month
  8199  0004FC  0100               	movlb	0	; () banked
  8200  0004FE  6F93               	movwf	(?_printf+5)& (0+255),b
  8201  000500  C104  F094         	movff	_log_startTime+4,?_printf+6
  8202  000504  C105  F095         	movff	_log_startTime+5,?_printf+7
  8203  000508  C102  F096         	movff	_log_startTime+2,?_printf+8
  8204  00050C  C103  F097         	movff	_log_startTime+3,?_printf+9
  8205  000510  C100  F098         	movff	_log_startTime,?_printf+10
  8206  000514  C101  F099         	movff	_log_startTime+1,?_printf+11
  8207  000518  EC1B  F00B         	call	_printf	;wreg free
  8208                           
  8209                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8210  00051C  0E00               	movlw	0
  8211  00051E  0100               	movlb	0	; () banked
  8212  000520  6FCC               	movwf	UI@i_431& (0+255),b
  8213  000522                     l8712:
  8214                           
  8215                           ; BSR set to: 0
  8216  000522  0E63               	movlw	99
  8217  000524  0100               	movlb	0	; () banked
  8218  000526  65CC               	cpfsgt	UI@i_431& (0+255),b
  8219  000528  D001               	goto	l8716
  8220  00052A  D00C               	goto	l8720
  8221  00052C                     l8716:
  8222                           
  8223                           ; BSR set to: 0
  8224  00052C  0E68               	movlw	104
  8225  00052E  0100               	movlb	0	; () banked
  8226  000530  6FC4               	movwf	??_UI& (0+255),b
  8227  000532  0EE4               	movlw	228
  8228  000534                     u9287:
  8229  000534  2EE8               	decfsz	wreg,f,c
  8230  000536  D7FE               	bra	u9287
  8231  000538  2FC4               	decfsz	??_UI& (0+255),f,b
  8232  00053A  D7FC               	bra	u9287
  8233  00053C  F000               	nop	
  8234  00053E  0100               	movlb	0	; () banked
  8235  000540  2BCC               	incf	UI@i_431& (0+255),f,b
  8236  000542  D7EF               	goto	l8712
  8237  000544                     l8720:
  8238                           
  8239                           ; BSR set to: 0
  8240  000544  0100               	movlb	0	; () banked
  8241  000546  51F8               	movf	_logstate& (0+255),w,b
  8242  000548  0100               	movlb	0	; () banked
  8243  00054A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8244  00054C  B4D8               	btfsc	status,2,c
  8245  00054E  0012               	return	
  8246                           
  8247                           ; BSR set to: 0
  8248                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8249                           
  8250                           ; BSR set to: 0
  8251                           
  8252                           ; BSR set to: 0
  8253  000550  0E00               	movlw	0
  8254  000552  0100               	movlb	0	; () banked
  8255  000554  6FCD               	movwf	UI@i_432& (0+255),b
  8256  000556                     l8726:
  8257                           
  8258                           ; BSR set to: 0
  8259  000556  0E63               	movlw	99
  8260  000558  0100               	movlb	0	; () banked
  8261  00055A  65CD               	cpfsgt	UI@i_432& (0+255),b
  8262  00055C  D001               	goto	l8730
  8263  00055E  D00C               	goto	l8734
  8264  000560                     l8730:
  8265                           
  8266                           ; BSR set to: 0
  8267  000560  0E68               	movlw	104
  8268  000562  0100               	movlb	0	; () banked
  8269  000564  6FC4               	movwf	??_UI& (0+255),b
  8270  000566  0EE4               	movlw	228
  8271  000568                     u9297:
  8272  000568  2EE8               	decfsz	wreg,f,c
  8273  00056A  D7FE               	bra	u9297
  8274  00056C  2FC4               	decfsz	??_UI& (0+255),f,b
  8275  00056E  D7FC               	bra	u9297
  8276  000570  F000               	nop	
  8277  000572  0100               	movlb	0	; () banked
  8278  000574  2BCD               	incf	UI@i_432& (0+255),f,b
  8279  000576  D7EF               	goto	l8726
  8280  000578                     l8734:
  8281                           
  8282                           ; BSR set to: 0
  8283  000578  0100               	movlb	0	; () banked
  8284  00057A  51F8               	movf	_logstate& (0+255),w,b
  8285  00057C  0100               	movlb	0	; () banked
  8286  00057E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8287  000580  B4D8               	btfsc	status,2,c
  8288  000582  0012               	return	
  8289                           
  8290                           ; BSR set to: 0
  8291                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8292                           
  8293                           ; BSR set to: 0
  8294                           
  8295                           ; BSR set to: 0
  8296  000584  0E01               	movlw	1
  8297  000586  ECC5  F029         	call	_lcdInst
  8298  00058A  0E68               	movlw	104
  8299  00058C  0100               	movlb	0	; () banked
  8300  00058E  6FC4               	movwf	??_UI& (0+255),b
  8301  000590  0EE4               	movlw	228
  8302  000592                     u9307:
  8303  000592  2EE8               	decfsz	wreg,f,c
  8304  000594  D7FE               	bra	u9307
  8305  000596  2FC4               	decfsz	??_UI& (0+255),f,b
  8306  000598  D7FC               	bra	u9307
  8307  00059A  F000               	nop	
  8308                           
  8309                           ;UI.c: 176: lcdInst(0b10000000);;
  8310  00059C  0E80               	movlw	128
  8311  00059E  ECC5  F029         	call	_lcdInst
  8312                           
  8313                           ;UI.c: 177: printf("DURATION:");
  8314  0005A2  0E9B               	movlw	low STR_22
  8315  0005A4  0100               	movlb	0	; () banked
  8316  0005A6  6F8E               	movwf	printf@f& (0+255),b
  8317  0005A8  0EFF               	movlw	high STR_22
  8318  0005AA  0100               	movlb	0	; () banked
  8319  0005AC  6F8F               	movwf	(printf@f+1)& (0+255),b
  8320  0005AE  EC1B  F00B         	call	_printf	;wreg free
  8321                           
  8322                           ;UI.c: 178: lcdInst(0b11000000);;
  8323  0005B2  0EC0               	movlw	192
  8324  0005B4  ECC5  F029         	call	_lcdInst
  8325                           
  8326                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8327  0005B8  0E0E               	movlw	14
  8328  0005BA  0100               	movlb	0	; () banked
  8329  0005BC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8330  0005BE  0E10               	movlw	16
  8331  0005C0  6F82               	movwf	___awmod@divisor& (0+255),b
  8332  0005C2  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  8333  0005C6  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8334  0005CA  EC78  F022         	call	___awmod	;wreg free
  8335  0005CE  C080  F0C6         	movff	?___awmod,_UI$2369
  8336  0005D2  C081  F0C7         	movff	?___awmod+1,_UI$2369+1
  8337                           
  8338                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8339  0005D6  0E19               	movlw	low STR_23
  8340  0005D8  0100               	movlb	0	; () banked
  8341  0005DA  6F8E               	movwf	printf@f& (0+255),b
  8342  0005DC  0EFF               	movlw	high STR_23
  8343  0005DE  0100               	movlb	0	; () banked
  8344  0005E0  6F8F               	movwf	(printf@f+1)& (0+255),b
  8345  0005E2  0E0E               	movlw	14
  8346  0005E4  0100               	movlb	0	; () banked
  8347  0005E6  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8348  0005E8  0E10               	movlw	16
  8349  0005EA  6F82               	movwf	___awmod@divisor& (0+255),b
  8350  0005EC  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  8351  0005F0  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8352  0005F4  EC78  F022         	call	___awmod	;wreg free
  8353  0005F8  C080  F086         	movff	?___awmod,___awdiv@dividend
  8354  0005FC  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8355  000600  0E00               	movlw	0
  8356  000602  0100               	movlb	0	; () banked
  8357  000604  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8358  000606  0E3C               	movlw	60
  8359  000608  6F88               	movwf	___awdiv@divisor& (0+255),b
  8360  00060A  EC10  F021         	call	___awdiv	;wreg free
  8361  00060E  C086  F090         	movff	?___awdiv,?_printf+2
  8362  000612  C087  F091         	movff	?___awdiv+1,?_printf+3
  8363  000616  C0C6  F080         	movff	_UI$2369,___awmod@dividend
  8364  00061A  C0C7  F081         	movff	_UI$2369+1,___awmod@dividend+1
  8365  00061E  0E00               	movlw	0
  8366  000620  0100               	movlb	0	; () banked
  8367  000622  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8368  000624  0E3C               	movlw	60
  8369  000626  6F82               	movwf	___awmod@divisor& (0+255),b
  8370  000628  EC78  F022         	call	___awmod	;wreg free
  8371  00062C  C080  F092         	movff	?___awmod,?_printf+4
  8372  000630  C081  F093         	movff	?___awmod+1,?_printf+5
  8373  000634  EC1B  F00B         	call	_printf	;wreg free
  8374                           
  8375                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8376  000638  0E00               	movlw	0
  8377  00063A  0100               	movlb	0	; () banked
  8378  00063C  6FCE               	movwf	UI@i_435& (0+255),b
  8379  00063E                     l8754:
  8380                           
  8381                           ; BSR set to: 0
  8382  00063E  0E63               	movlw	99
  8383  000640  0100               	movlb	0	; () banked
  8384  000642  65CE               	cpfsgt	UI@i_435& (0+255),b
  8385  000644  D001               	goto	l8758
  8386  000646  D00C               	goto	l8762
  8387  000648                     l8758:
  8388                           
  8389                           ; BSR set to: 0
  8390  000648  0E68               	movlw	104
  8391  00064A  0100               	movlb	0	; () banked
  8392  00064C  6FC4               	movwf	??_UI& (0+255),b
  8393  00064E  0EE4               	movlw	228
  8394  000650                     u9317:
  8395  000650  2EE8               	decfsz	wreg,f,c
  8396  000652  D7FE               	bra	u9317
  8397  000654  2FC4               	decfsz	??_UI& (0+255),f,b
  8398  000656  D7FC               	bra	u9317
  8399  000658  F000               	nop	
  8400  00065A  0100               	movlb	0	; () banked
  8401  00065C  2BCE               	incf	UI@i_435& (0+255),f,b
  8402  00065E  D7EF               	goto	l8754
  8403  000660                     l8762:
  8404                           
  8405                           ; BSR set to: 0
  8406  000660  0100               	movlb	0	; () banked
  8407  000662  51F8               	movf	_logstate& (0+255),w,b
  8408  000664  0100               	movlb	0	; () banked
  8409  000666  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8410  000668  B4D8               	btfsc	status,2,c
  8411  00066A  0012               	return	
  8412                           
  8413                           ; BSR set to: 0
  8414                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8415                           
  8416                           ; BSR set to: 0
  8417                           
  8418                           ; BSR set to: 0
  8419  00066C  0E00               	movlw	0
  8420  00066E  0100               	movlb	0	; () banked
  8421  000670  6FCF               	movwf	UI@i_436& (0+255),b
  8422  000672                     l8768:
  8423                           
  8424                           ; BSR set to: 0
  8425  000672  0E63               	movlw	99
  8426  000674  0100               	movlb	0	; () banked
  8427  000676  65CF               	cpfsgt	UI@i_436& (0+255),b
  8428  000678  D001               	goto	l8772
  8429  00067A  D00C               	goto	l8776
  8430  00067C                     l8772:
  8431                           
  8432                           ; BSR set to: 0
  8433  00067C  0E68               	movlw	104
  8434  00067E  0100               	movlb	0	; () banked
  8435  000680  6FC4               	movwf	??_UI& (0+255),b
  8436  000682  0EE4               	movlw	228
  8437  000684                     u9327:
  8438  000684  2EE8               	decfsz	wreg,f,c
  8439  000686  D7FE               	bra	u9327
  8440  000688  2FC4               	decfsz	??_UI& (0+255),f,b
  8441  00068A  D7FC               	bra	u9327
  8442  00068C  F000               	nop	
  8443  00068E  0100               	movlb	0	; () banked
  8444  000690  2BCF               	incf	UI@i_436& (0+255),f,b
  8445  000692  D7EF               	goto	l8768
  8446  000694                     l8776:
  8447                           
  8448                           ; BSR set to: 0
  8449  000694  0100               	movlb	0	; () banked
  8450  000696  51F8               	movf	_logstate& (0+255),w,b
  8451  000698  0100               	movlb	0	; () banked
  8452  00069A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8453  00069C  B4D8               	btfsc	status,2,c
  8454  00069E  0012               	return	
  8455                           
  8456                           ; BSR set to: 0
  8457                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8458                           
  8459                           ; BSR set to: 0
  8460                           
  8461                           ; BSR set to: 0
  8462  0006A0  0E01               	movlw	1
  8463  0006A2  ECC5  F029         	call	_lcdInst
  8464  0006A6  0E68               	movlw	104
  8465  0006A8  0100               	movlb	0	; () banked
  8466  0006AA  6FC4               	movwf	??_UI& (0+255),b
  8467  0006AC  0EE4               	movlw	228
  8468  0006AE                     u9337:
  8469  0006AE  2EE8               	decfsz	wreg,f,c
  8470  0006B0  D7FE               	bra	u9337
  8471  0006B2  2FC4               	decfsz	??_UI& (0+255),f,b
  8472  0006B4  D7FC               	bra	u9337
  8473  0006B6  F000               	nop	
  8474                           
  8475                           ;UI.c: 185: lcdInst(0b10000000);;
  8476  0006B8  0E80               	movlw	128
  8477  0006BA  ECC5  F029         	call	_lcdInst
  8478                           
  8479                           ;UI.c: 186: printf(" -- POP  CAN -- ");
  8480  0006BE  0E3C               	movlw	low STR_24
  8481  0006C0  0100               	movlb	0	; () banked
  8482  0006C2  6F8E               	movwf	printf@f& (0+255),b
  8483  0006C4  0EFD               	movlw	high STR_24
  8484  0006C6  0100               	movlb	0	; () banked
  8485  0006C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  8486  0006CA  EC1B  F00B         	call	_printf	;wreg free
  8487                           
  8488                           ;UI.c: 187: lcdInst(0b11000000);;
  8489  0006CE  0EC0               	movlw	192
  8490  0006D0  ECC5  F029         	call	_lcdInst
  8491                           
  8492                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  8493  0006D4  0E19               	movlw	low STR_25
  8494  0006D6  0100               	movlb	0	; () banked
  8495  0006D8  6F8E               	movwf	printf@f& (0+255),b
  8496  0006DA  0EFE               	movlw	high STR_25
  8497  0006DC  0100               	movlb	0	; () banked
  8498  0006DE  6F8F               	movwf	(printf@f+1)& (0+255),b
  8499  0006E0  C067  F090         	movff	_log_count_pop_no_tab,?_printf+2
  8500  0006E4  C068  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  8501  0006E8  C069  F092         	movff	_log_count_pop_w_tab,?_printf+4
  8502  0006EC  C06A  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  8503  0006F0  EC1B  F00B         	call	_printf	;wreg free
  8504                           
  8505                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8506  0006F4  0E00               	movlw	0
  8507  0006F6  0100               	movlb	0	; () banked
  8508  0006F8  6FD0               	movwf	UI@i_439& (0+255),b
  8509  0006FA                     l8794:
  8510                           
  8511                           ; BSR set to: 0
  8512  0006FA  0E63               	movlw	99
  8513  0006FC  0100               	movlb	0	; () banked
  8514  0006FE  65D0               	cpfsgt	UI@i_439& (0+255),b
  8515  000700  D001               	goto	l8798
  8516  000702  D00C               	goto	l8802
  8517  000704                     l8798:
  8518                           
  8519                           ; BSR set to: 0
  8520  000704  0E68               	movlw	104
  8521  000706  0100               	movlb	0	; () banked
  8522  000708  6FC4               	movwf	??_UI& (0+255),b
  8523  00070A  0EE4               	movlw	228
  8524  00070C                     u9347:
  8525  00070C  2EE8               	decfsz	wreg,f,c
  8526  00070E  D7FE               	bra	u9347
  8527  000710  2FC4               	decfsz	??_UI& (0+255),f,b
  8528  000712  D7FC               	bra	u9347
  8529  000714  F000               	nop	
  8530  000716  0100               	movlb	0	; () banked
  8531  000718  2BD0               	incf	UI@i_439& (0+255),f,b
  8532  00071A  D7EF               	goto	l8794
  8533  00071C                     l8802:
  8534                           
  8535                           ; BSR set to: 0
  8536  00071C  0100               	movlb	0	; () banked
  8537  00071E  51F8               	movf	_logstate& (0+255),w,b
  8538  000720  0100               	movlb	0	; () banked
  8539  000722  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8540  000724  B4D8               	btfsc	status,2,c
  8541  000726  0012               	return	
  8542                           
  8543                           ; BSR set to: 0
  8544                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8545                           
  8546                           ; BSR set to: 0
  8547                           
  8548                           ; BSR set to: 0
  8549  000728  0E00               	movlw	0
  8550  00072A  0100               	movlb	0	; () banked
  8551  00072C  6FD1               	movwf	UI@i_440& (0+255),b
  8552  00072E                     l8808:
  8553                           
  8554                           ; BSR set to: 0
  8555  00072E  0E63               	movlw	99
  8556  000730  0100               	movlb	0	; () banked
  8557  000732  65D1               	cpfsgt	UI@i_440& (0+255),b
  8558  000734  D001               	goto	l8812
  8559  000736  D00C               	goto	l8816
  8560  000738                     l8812:
  8561                           
  8562                           ; BSR set to: 0
  8563  000738  0E68               	movlw	104
  8564  00073A  0100               	movlb	0	; () banked
  8565  00073C  6FC4               	movwf	??_UI& (0+255),b
  8566  00073E  0EE4               	movlw	228
  8567  000740                     u9357:
  8568  000740  2EE8               	decfsz	wreg,f,c
  8569  000742  D7FE               	bra	u9357
  8570  000744  2FC4               	decfsz	??_UI& (0+255),f,b
  8571  000746  D7FC               	bra	u9357
  8572  000748  F000               	nop	
  8573  00074A  0100               	movlb	0	; () banked
  8574  00074C  2BD1               	incf	UI@i_440& (0+255),f,b
  8575  00074E  D7EF               	goto	l8808
  8576  000750                     l8816:
  8577                           
  8578                           ; BSR set to: 0
  8579  000750  0100               	movlb	0	; () banked
  8580  000752  51F8               	movf	_logstate& (0+255),w,b
  8581  000754  0100               	movlb	0	; () banked
  8582  000756  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8583  000758  B4D8               	btfsc	status,2,c
  8584  00075A  0012               	return	
  8585                           
  8586                           ; BSR set to: 0
  8587                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8588                           
  8589                           ; BSR set to: 0
  8590                           
  8591                           ; BSR set to: 0
  8592  00075C  0E01               	movlw	1
  8593  00075E  ECC5  F029         	call	_lcdInst
  8594  000762  0E68               	movlw	104
  8595  000764  0100               	movlb	0	; () banked
  8596  000766  6FC4               	movwf	??_UI& (0+255),b
  8597  000768  0EE4               	movlw	228
  8598  00076A                     u9367:
  8599  00076A  2EE8               	decfsz	wreg,f,c
  8600  00076C  D7FE               	bra	u9367
  8601  00076E  2FC4               	decfsz	??_UI& (0+255),f,b
  8602  000770  D7FC               	bra	u9367
  8603  000772  F000               	nop	
  8604                           
  8605                           ;UI.c: 194: lcdInst(0b10000000);;
  8606  000774  0E80               	movlw	128
  8607  000776  ECC5  F029         	call	_lcdInst
  8608                           
  8609                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
  8610  00077A  0E4D               	movlw	low STR_26
  8611  00077C  0100               	movlb	0	; () banked
  8612  00077E  6F8E               	movwf	printf@f& (0+255),b
  8613  000780  0EFD               	movlw	high STR_26
  8614  000782  0100               	movlb	0	; () banked
  8615  000784  6F8F               	movwf	(printf@f+1)& (0+255),b
  8616  000786  EC1B  F00B         	call	_printf	;wreg free
  8617                           
  8618                           ;UI.c: 196: lcdInst(0b11000000);;
  8619  00078A  0EC0               	movlw	192
  8620  00078C  ECC5  F029         	call	_lcdInst
  8621                           
  8622                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  8623  000790  0E08               	movlw	low STR_27
  8624  000792  0100               	movlb	0	; () banked
  8625  000794  6F8E               	movwf	printf@f& (0+255),b
  8626  000796  0EFE               	movlw	high STR_27
  8627  000798  0100               	movlb	0	; () banked
  8628  00079A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8629  00079C  C063  F090         	movff	_log_count_can_no_lab,?_printf+2
  8630  0007A0  C064  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  8631  0007A4  C065  F092         	movff	_log_count_can_w_lab,?_printf+4
  8632  0007A8  C066  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  8633  0007AC  EC1B  F00B         	call	_printf	;wreg free
  8634                           
  8635                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8636  0007B0  0E00               	movlw	0
  8637  0007B2  0100               	movlb	0	; () banked
  8638  0007B4  6FD2               	movwf	UI@i_443& (0+255),b
  8639  0007B6                     l8834:
  8640                           
  8641                           ; BSR set to: 0
  8642  0007B6  0E63               	movlw	99
  8643  0007B8  0100               	movlb	0	; () banked
  8644  0007BA  65D2               	cpfsgt	UI@i_443& (0+255),b
  8645  0007BC  D001               	goto	l8838
  8646  0007BE  D00C               	goto	l8842
  8647  0007C0                     l8838:
  8648                           
  8649                           ; BSR set to: 0
  8650  0007C0  0E68               	movlw	104
  8651  0007C2  0100               	movlb	0	; () banked
  8652  0007C4  6FC4               	movwf	??_UI& (0+255),b
  8653  0007C6  0EE4               	movlw	228
  8654  0007C8                     u9377:
  8655  0007C8  2EE8               	decfsz	wreg,f,c
  8656  0007CA  D7FE               	bra	u9377
  8657  0007CC  2FC4               	decfsz	??_UI& (0+255),f,b
  8658  0007CE  D7FC               	bra	u9377
  8659  0007D0  F000               	nop	
  8660  0007D2  0100               	movlb	0	; () banked
  8661  0007D4  2BD2               	incf	UI@i_443& (0+255),f,b
  8662  0007D6  D7EF               	goto	l8834
  8663  0007D8                     l8842:
  8664                           
  8665                           ; BSR set to: 0
  8666  0007D8  0100               	movlb	0	; () banked
  8667  0007DA  51F8               	movf	_logstate& (0+255),w,b
  8668  0007DC  0100               	movlb	0	; () banked
  8669  0007DE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8670  0007E0  B4D8               	btfsc	status,2,c
  8671  0007E2  0012               	return	
  8672                           
  8673                           ; BSR set to: 0
  8674                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8675                           
  8676                           ; BSR set to: 0
  8677                           
  8678                           ; BSR set to: 0
  8679  0007E4  0E00               	movlw	0
  8680  0007E6  0100               	movlb	0	; () banked
  8681  0007E8  6FD3               	movwf	UI@i_444& (0+255),b
  8682  0007EA                     l8848:
  8683                           
  8684                           ; BSR set to: 0
  8685  0007EA  0E63               	movlw	99
  8686  0007EC  0100               	movlb	0	; () banked
  8687  0007EE  65D3               	cpfsgt	UI@i_444& (0+255),b
  8688  0007F0  D001               	goto	l8852
  8689  0007F2  D00C               	goto	l8856
  8690  0007F4                     l8852:
  8691                           
  8692                           ; BSR set to: 0
  8693  0007F4  0E68               	movlw	104
  8694  0007F6  0100               	movlb	0	; () banked
  8695  0007F8  6FC4               	movwf	??_UI& (0+255),b
  8696  0007FA  0EE4               	movlw	228
  8697  0007FC                     u9387:
  8698  0007FC  2EE8               	decfsz	wreg,f,c
  8699  0007FE  D7FE               	bra	u9387
  8700  000800  2FC4               	decfsz	??_UI& (0+255),f,b
  8701  000802  D7FC               	bra	u9387
  8702  000804  F000               	nop	
  8703  000806  0100               	movlb	0	; () banked
  8704  000808  2BD3               	incf	UI@i_444& (0+255),f,b
  8705  00080A  D7EF               	goto	l8848
  8706  00080C                     l8856:
  8707                           
  8708                           ; BSR set to: 0
  8709  00080C  0100               	movlb	0	; () banked
  8710  00080E  51F8               	movf	_logstate& (0+255),w,b
  8711  000810  0100               	movlb	0	; () banked
  8712  000812  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8713  000814  B4D8               	btfsc	status,2,c
  8714  000816  0012               	return	
  8715                           
  8716                           ; BSR set to: 0
  8717                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8718                           
  8719                           ; BSR set to: 0
  8720                           
  8721                           ; BSR set to: 0
  8722  000818  0E01               	movlw	1
  8723  00081A  ECC5  F029         	call	_lcdInst
  8724  00081E  0E68               	movlw	104
  8725  000820  0100               	movlb	0	; () banked
  8726  000822  6FC4               	movwf	??_UI& (0+255),b
  8727  000824  0EE4               	movlw	228
  8728  000826                     u9397:
  8729  000826  2EE8               	decfsz	wreg,f,c
  8730  000828  D7FE               	bra	u9397
  8731  00082A  2FC4               	decfsz	??_UI& (0+255),f,b
  8732  00082C  D7FC               	bra	u9397
  8733  00082E  F000               	nop	
  8734                           
  8735                           ;UI.c: 203: lcdInst(0b10000000);;
  8736  000830  0E80               	movlw	128
  8737  000832  ECC5  F029         	call	_lcdInst
  8738                           
  8739                           ;UI.c: 204: printf("-- TOTAL CANS --");
  8740  000836  0E5E               	movlw	low STR_28
  8741  000838  0100               	movlb	0	; () banked
  8742  00083A  6F8E               	movwf	printf@f& (0+255),b
  8743  00083C  0EFD               	movlw	high STR_28
  8744  00083E  0100               	movlb	0	; () banked
  8745  000840  6F8F               	movwf	(printf@f+1)& (0+255),b
  8746  000842  EC1B  F00B         	call	_printf	;wreg free
  8747                           
  8748                           ;UI.c: 205: lcdInst(0b11000000);;
  8749  000846  0EC0               	movlw	192
  8750  000848  ECC5  F029         	call	_lcdInst
  8751                           
  8752                           ;UI.c: 206: printf("%d", log_count_total);
  8753  00084C  0E16               	movlw	low (STR_27+14)
  8754  00084E  0100               	movlb	0	; () banked
  8755  000850  6F8E               	movwf	printf@f& (0+255),b
  8756  000852  0EFE               	movlw	high (STR_27+14)
  8757  000854  0100               	movlb	0	; () banked
  8758  000856  6F8F               	movwf	(printf@f+1)& (0+255),b
  8759  000858  C06B  F090         	movff	_log_count_total,?_printf+2
  8760  00085C  C06C  F091         	movff	_log_count_total+1,?_printf+3
  8761  000860  EC1B  F00B         	call	_printf	;wreg free
  8762                           
  8763                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8764  000864  0E00               	movlw	0
  8765  000866  0100               	movlb	0	; () banked
  8766  000868  6FD4               	movwf	UI@i_447& (0+255),b
  8767  00086A                     l8874:
  8768                           
  8769                           ; BSR set to: 0
  8770  00086A  0E63               	movlw	99
  8771  00086C  0100               	movlb	0	; () banked
  8772  00086E  65D4               	cpfsgt	UI@i_447& (0+255),b
  8773  000870  D001               	goto	l8878
  8774  000872  D00C               	goto	l8882
  8775  000874                     l8878:
  8776                           
  8777                           ; BSR set to: 0
  8778  000874  0E68               	movlw	104
  8779  000876  0100               	movlb	0	; () banked
  8780  000878  6FC4               	movwf	??_UI& (0+255),b
  8781  00087A  0EE4               	movlw	228
  8782  00087C                     u9407:
  8783  00087C  2EE8               	decfsz	wreg,f,c
  8784  00087E  D7FE               	bra	u9407
  8785  000880  2FC4               	decfsz	??_UI& (0+255),f,b
  8786  000882  D7FC               	bra	u9407
  8787  000884  F000               	nop	
  8788  000886  0100               	movlb	0	; () banked
  8789  000888  2BD4               	incf	UI@i_447& (0+255),f,b
  8790  00088A  D7EF               	goto	l8874
  8791  00088C                     l8882:
  8792                           
  8793                           ; BSR set to: 0
  8794  00088C  0100               	movlb	0	; () banked
  8795  00088E  51F8               	movf	_logstate& (0+255),w,b
  8796  000890  0100               	movlb	0	; () banked
  8797  000892  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8798  000894  B4D8               	btfsc	status,2,c
  8799  000896  0012               	return	
  8800                           
  8801                           ; BSR set to: 0
  8802                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8803                           
  8804                           ; BSR set to: 0
  8805                           
  8806                           ; BSR set to: 0
  8807  000898  0E00               	movlw	0
  8808  00089A  0100               	movlb	0	; () banked
  8809  00089C  6FD5               	movwf	UI@i_448& (0+255),b
  8810  00089E                     l8888:
  8811                           
  8812                           ; BSR set to: 0
  8813  00089E  0E63               	movlw	99
  8814  0008A0  0100               	movlb	0	; () banked
  8815  0008A2  65D5               	cpfsgt	UI@i_448& (0+255),b
  8816  0008A4  D001               	goto	l8892
  8817  0008A6  D00C               	goto	l8896
  8818  0008A8                     l8892:
  8819                           
  8820                           ; BSR set to: 0
  8821  0008A8  0E68               	movlw	104
  8822  0008AA  0100               	movlb	0	; () banked
  8823  0008AC  6FC4               	movwf	??_UI& (0+255),b
  8824  0008AE  0EE4               	movlw	228
  8825  0008B0                     u9417:
  8826  0008B0  2EE8               	decfsz	wreg,f,c
  8827  0008B2  D7FE               	bra	u9417
  8828  0008B4  2FC4               	decfsz	??_UI& (0+255),f,b
  8829  0008B6  D7FC               	bra	u9417
  8830  0008B8  F000               	nop	
  8831  0008BA  0100               	movlb	0	; () banked
  8832  0008BC  2BD5               	incf	UI@i_448& (0+255),f,b
  8833  0008BE  D7EF               	goto	l8888
  8834  0008C0                     l8896:
  8835                           
  8836                           ; BSR set to: 0
  8837  0008C0  0100               	movlb	0	; () banked
  8838  0008C2  51F8               	movf	_logstate& (0+255),w,b
  8839  0008C4  0100               	movlb	0	; () banked
  8840  0008C6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8841  0008C8  B4D8               	btfsc	status,2,c
  8842  0008CA  0012               	return	
  8843  0008CC                     l8900:
  8844  0008CC  0100               	movlb	0	; () banked
  8845  0008CE  51F8               	movf	_logstate& (0+255),w,b
  8846  0008D0  0100               	movlb	0	; () banked
  8847  0008D2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8848  0008D4  B4D8               	btfsc	status,2,c
  8849  0008D6  0012               	return	
  8850  0008D8  D44A               	goto	l8596
  8851  0008DA                     __end_of_UI:
  8852                           	opt stack 0
  8853                           tblptru	equ	0xFF8
  8854                           tblptrh	equ	0xFF7
  8855                           tblptrl	equ	0xFF6
  8856                           tablat	equ	0xFF5
  8857                           prodh	equ	0xFF4
  8858                           prodl	equ	0xFF3
  8859                           intcon	equ	0xFF2
  8860                           intcon2	equ	0xFF1
  8861                           intcon3	equ	0xFF0
  8862                           postinc0	equ	0xFEE
  8863                           wreg	equ	0xFE8
  8864                           postdec1	equ	0xFE5
  8865                           fsr1l	equ	0xFE1
  8866                           indf2	equ	0xFDF
  8867                           postinc2	equ	0xFDE
  8868                           postdec2	equ	0xFDD
  8869                           fsr2h	equ	0xFDA
  8870                           fsr2l	equ	0xFD9
  8871                           status	equ	0xFD8
  8872                           
  8873 ;; *************** function _printRTC *****************
  8874 ;; Defined at:
  8875 ;;		line 63 in file "RTC.c"
  8876 ;; Parameters:    Size  Location     Type
  8877 ;;		None
  8878 ;; Auto vars:     Size  Location     Type
  8879 ;;  i               2   66[BANK0 ] int 
  8880 ;;  INT_time       14   46[BANK0 ] int [7]
  8881 ;;  month           4   62[BANK0 ] unsigned char [4]
  8882 ;;  RTC_month       2   60[BANK0 ] int 
  8883 ;; Return value:  Size  Location     Type
  8884 ;;                  1    wreg      void 
  8885 ;; Registers used:
  8886 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8887 ;; Tracked objects:
  8888 ;;		On entry : 0/0
  8889 ;;		On exit  : 0/0
  8890 ;;		Unchanged: 0/0
  8891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8893 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8894 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8895 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8896 ;;Total ram usage:       25 bytes
  8897 ;; Hardware stack levels used:    1
  8898 ;; Hardware stack levels required when called:   10
  8899 ;; This function calls:
  8900 ;;		_getRTC
  8901 ;;		_lcdInst
  8902 ;;		_printf
  8903 ;;		_strcpy
  8904 ;; This function is called by:
  8905 ;;		_UI
  8906 ;;		_change_state_to_menu_start
  8907 ;; This function uses a non-reentrant model
  8908 ;;
  8909                           
  8910                           	psect	text24
  8911  00245E                     __ptext24:
  8912                           	opt stack 0
  8913  00245E                     _printRTC:
  8914                           	opt stack 18
  8915                           
  8916                           ;RTC.c: 64: getRTC();
  8917                           
  8918                           ; BSR set to: 0
  8919                           ;incstack = 0
  8920  00245E  EC0F  F023         	call	_getRTC	;wreg free
  8921                           
  8922                           ;RTC.c: 65: char month[] = "MMM";
  8923  002462  C145  F0BE         	movff	printRTC@F3226,printRTC@month
  8924  002466  C146  F0BF         	movff	printRTC@F3226+1,printRTC@month+1
  8925  00246A  C147  F0C0         	movff	printRTC@F3226+2,printRTC@month+2
  8926  00246E  C148  F0C1         	movff	printRTC@F3226+3,printRTC@month+3
  8927                           
  8928                           ;RTC.c: 66: int INT_time[7];
  8929                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  8930  002472  0E00               	movlw	0
  8931  002474  0100               	movlb	0	; () banked
  8932  002476  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  8933  002478  0E00               	movlw	0
  8934  00247A  6FC2               	movwf	printRTC@i& (0+255),b
  8935                           
  8936                           ; BSR set to: 0
  8937  00247C  0100               	movlb	0	; () banked
  8938  00247E  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8939  002480  D008               	goto	l6650
  8940  002482  0100               	movlb	0	; () banked
  8941  002484  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8942  002486  E146               	bnz	l614
  8943  002488  0E07               	movlw	7
  8944  00248A  0100               	movlb	0	; () banked
  8945  00248C  5DC2               	subwf	printRTC@i& (0+255),w,b
  8946  00248E  B0D8               	btfsc	status,0,c
  8947  002490  D041               	goto	l614
  8948  002492                     l6650:
  8949                           
  8950                           ; BSR set to: 0
  8951                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  8952  002492  0E1C               	movlw	low _time
  8953  002494  0100               	movlb	0	; () banked
  8954  002496  25C2               	addwf	printRTC@i& (0+255),w,b
  8955  002498  6ED9               	movwf	fsr2l,c
  8956  00249A  0E01               	movlw	high _time
  8957  00249C  0100               	movlb	0	; () banked
  8958  00249E  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8959  0024A0  6EDA               	movwf	fsr2h,c
  8960  0024A2  50DF               	movf	indf2,w,c
  8961  0024A4  0100               	movlb	0	; () banked
  8962  0024A6  6FAB               	movwf	??_printRTC& (0+255),b
  8963  0024A8  0100               	movlb	0	; () banked
  8964  0024AA  3BAB               	swapf	??_printRTC& (0+255),f,b
  8965  0024AC  0E0F               	movlw	15
  8966  0024AE  17AB               	andwf	??_printRTC& (0+255),f,b
  8967  0024B0  0E0F               	movlw	15
  8968  0024B2  0100               	movlb	0	; () banked
  8969  0024B4  17AB               	andwf	??_printRTC& (0+255),f,b
  8970  0024B6  0100               	movlb	0	; () banked
  8971  0024B8  51AB               	movf	??_printRTC& (0+255),w,b
  8972  0024BA  0D0A               	mullw	10
  8973  0024BC  0E1C               	movlw	low _time
  8974  0024BE  0100               	movlb	0	; () banked
  8975  0024C0  25C2               	addwf	printRTC@i& (0+255),w,b
  8976  0024C2  6ED9               	movwf	fsr2l,c
  8977  0024C4  0E01               	movlw	high _time
  8978  0024C6  0100               	movlb	0	; () banked
  8979  0024C8  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8980  0024CA  6EDA               	movwf	fsr2h,c
  8981  0024CC  50DF               	movf	indf2,w,c
  8982  0024CE  0B0F               	andlw	15
  8983  0024D0  0100               	movlb	0	; () banked
  8984  0024D2  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  8985  0024D4  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  8986  0024D6  50F3               	movf	prodl,w,c
  8987  0024D8  0100               	movlb	0	; () banked
  8988  0024DA  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  8989  0024DC  50F4               	movf	prodh,w,c
  8990  0024DE  0100               	movlb	0	; () banked
  8991  0024E0  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  8992  0024E2  90D8               	bcf	status,0,c
  8993  0024E4  0100               	movlb	0	; () banked
  8994  0024E6  35C2               	rlcf	printRTC@i& (0+255),w,b
  8995  0024E8  6ED9               	movwf	fsr2l,c
  8996  0024EA  0100               	movlb	0	; () banked
  8997  0024EC  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  8998  0024EE  6EDA               	movwf	fsr2h,c
  8999  0024F0  0EAE               	movlw	low printRTC@INT_time
  9000  0024F2  26D9               	addwf	fsr2l,f,c
  9001  0024F4  0E00               	movlw	high printRTC@INT_time
  9002  0024F6  22DA               	addwfc	fsr2h,f,c
  9003  0024F8  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  9004  0024FC  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  9005                           
  9006                           ; BSR set to: 0
  9007  002500  0100               	movlb	0	; () banked
  9008  002502  4BC2               	infsnz	printRTC@i& (0+255),f,b
  9009  002504  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  9010                           
  9011                           ; BSR set to: 0
  9012  002506  0100               	movlb	0	; () banked
  9013  002508  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  9014  00250A  D7C3               	goto	l6650
  9015  00250C  0100               	movlb	0	; () banked
  9016  00250E  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  9017  002510  E101               	bnz	u5340
  9018  002512  D7BA               	goto	L8
  9019  002514                     u5340:
  9020  002514                     l614:
  9021                           
  9022                           ; BSR set to: 0
  9023                           ;RTC.c: 69: }
  9024                           ;RTC.c: 70: int RTC_month = INT_time[5];
  9025  002514  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  9026  002518  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  9027                           
  9028                           ;RTC.c: 72: switch(RTC_month){
  9029  00251C  D0B4               	goto	l6682
  9030  00251E                     l6656:
  9031                           
  9032                           ; BSR set to: 0
  9033                           ;RTC.c: 74: strcpy(month, "JAN");
  9034  00251E  0EBE               	movlw	low printRTC@month
  9035  002520  0100               	movlb	0	; () banked
  9036  002522  6F80               	movwf	strcpy@to& (0+255),b
  9037  002524  0E00               	movlw	high printRTC@month
  9038  002526  0100               	movlb	0	; () banked
  9039  002528  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9040  00252A  0EDB               	movlw	low STR_8
  9041  00252C  0100               	movlb	0	; () banked
  9042  00252E  6F82               	movwf	strcpy@from& (0+255),b
  9043  002530  0EFF               	movlw	high STR_8
  9044  002532  0100               	movlb	0	; () banked
  9045  002534  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9046  002536  EC20  F027         	call	_strcpy	;wreg free
  9047                           
  9048                           ;RTC.c: 75: break;
  9049  00253A  D0D4               	goto	l6684
  9050  00253C                     l6658:
  9051                           
  9052                           ;RTC.c: 77: strcpy(month, "FEB");
  9053  00253C  0EBE               	movlw	low printRTC@month
  9054  00253E  0100               	movlb	0	; () banked
  9055  002540  6F80               	movwf	strcpy@to& (0+255),b
  9056  002542  0E00               	movlw	high printRTC@month
  9057  002544  0100               	movlb	0	; () banked
  9058  002546  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9059  002548  0ECB               	movlw	low STR_9
  9060  00254A  0100               	movlb	0	; () banked
  9061  00254C  6F82               	movwf	strcpy@from& (0+255),b
  9062  00254E  0EFF               	movlw	high STR_9
  9063  002550  0100               	movlb	0	; () banked
  9064  002552  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9065  002554  EC20  F027         	call	_strcpy	;wreg free
  9066                           
  9067                           ;RTC.c: 78: break;
  9068  002558  D0C5               	goto	l6684
  9069  00255A                     l6660:
  9070                           
  9071                           ;RTC.c: 80: strcpy(month, "MAR");
  9072  00255A  0EBE               	movlw	low printRTC@month
  9073  00255C  0100               	movlb	0	; () banked
  9074  00255E  6F80               	movwf	strcpy@to& (0+255),b
  9075  002560  0E00               	movlw	high printRTC@month
  9076  002562  0100               	movlb	0	; () banked
  9077  002564  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9078  002566  0EE7               	movlw	low STR_10
  9079  002568  0100               	movlb	0	; () banked
  9080  00256A  6F82               	movwf	strcpy@from& (0+255),b
  9081  00256C  0EFF               	movlw	high STR_10
  9082  00256E  0100               	movlb	0	; () banked
  9083  002570  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9084  002572  EC20  F027         	call	_strcpy	;wreg free
  9085                           
  9086                           ;RTC.c: 81: break;
  9087  002576  D0B6               	goto	l6684
  9088  002578                     l6662:
  9089                           
  9090                           ;RTC.c: 83: strcpy(month, "APR");
  9091  002578  0EBE               	movlw	low printRTC@month
  9092  00257A  0100               	movlb	0	; () banked
  9093  00257C  6F80               	movwf	strcpy@to& (0+255),b
  9094  00257E  0E00               	movlw	high printRTC@month
  9095  002580  0100               	movlb	0	; () banked
  9096  002582  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9097  002584  0EEB               	movlw	low STR_11
  9098  002586  0100               	movlb	0	; () banked
  9099  002588  6F82               	movwf	strcpy@from& (0+255),b
  9100  00258A  0EFF               	movlw	high STR_11
  9101  00258C  0100               	movlb	0	; () banked
  9102  00258E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9103  002590  EC20  F027         	call	_strcpy	;wreg free
  9104                           
  9105                           ;RTC.c: 84: break;
  9106  002594  D0A7               	goto	l6684
  9107  002596                     l6664:
  9108                           
  9109                           ;RTC.c: 86: strcpy(month, "MAY");
  9110  002596  0EBE               	movlw	low printRTC@month
  9111  002598  0100               	movlb	0	; () banked
  9112  00259A  6F80               	movwf	strcpy@to& (0+255),b
  9113  00259C  0E00               	movlw	high printRTC@month
  9114  00259E  0100               	movlb	0	; () banked
  9115  0025A0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9116  0025A2  0EFB               	movlw	low STR_12
  9117  0025A4  0100               	movlb	0	; () banked
  9118  0025A6  6F82               	movwf	strcpy@from& (0+255),b
  9119  0025A8  0EFF               	movlw	high STR_12
  9120  0025AA  0100               	movlb	0	; () banked
  9121  0025AC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9122  0025AE  EC20  F027         	call	_strcpy	;wreg free
  9123                           
  9124                           ;RTC.c: 87: break;
  9125  0025B2  D098               	goto	l6684
  9126  0025B4                     l6666:
  9127                           
  9128                           ;RTC.c: 89: strcpy(month, "JUN");
  9129  0025B4  0EBE               	movlw	low printRTC@month
  9130  0025B6  0100               	movlb	0	; () banked
  9131  0025B8  6F80               	movwf	strcpy@to& (0+255),b
  9132  0025BA  0E00               	movlw	high printRTC@month
  9133  0025BC  0100               	movlb	0	; () banked
  9134  0025BE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9135  0025C0  0EDF               	movlw	low STR_13
  9136  0025C2  0100               	movlb	0	; () banked
  9137  0025C4  6F82               	movwf	strcpy@from& (0+255),b
  9138  0025C6  0EFF               	movlw	high STR_13
  9139  0025C8  0100               	movlb	0	; () banked
  9140  0025CA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9141  0025CC  EC20  F027         	call	_strcpy	;wreg free
  9142                           
  9143                           ;RTC.c: 90: break;
  9144  0025D0  D089               	goto	l6684
  9145  0025D2                     l6668:
  9146                           
  9147                           ;RTC.c: 92: strcpy(month, "JUL");
  9148  0025D2  0EBE               	movlw	low printRTC@month
  9149  0025D4  0100               	movlb	0	; () banked
  9150  0025D6  6F80               	movwf	strcpy@to& (0+255),b
  9151  0025D8  0E00               	movlw	high printRTC@month
  9152  0025DA  0100               	movlb	0	; () banked
  9153  0025DC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9154  0025DE  0ED7               	movlw	low STR_14
  9155  0025E0  0100               	movlb	0	; () banked
  9156  0025E2  6F82               	movwf	strcpy@from& (0+255),b
  9157  0025E4  0EFF               	movlw	high STR_14
  9158  0025E6  0100               	movlb	0	; () banked
  9159  0025E8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9160  0025EA  EC20  F027         	call	_strcpy	;wreg free
  9161                           
  9162                           ;RTC.c: 93: break;
  9163  0025EE  D07A               	goto	l6684
  9164  0025F0                     l6670:
  9165                           
  9166                           ;RTC.c: 95: strcpy(month, "AUG");
  9167  0025F0  0EBE               	movlw	low printRTC@month
  9168  0025F2  0100               	movlb	0	; () banked
  9169  0025F4  6F80               	movwf	strcpy@to& (0+255),b
  9170  0025F6  0E00               	movlw	high printRTC@month
  9171  0025F8  0100               	movlb	0	; () banked
  9172  0025FA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9173  0025FC  0ED3               	movlw	low STR_15
  9174  0025FE  0100               	movlb	0	; () banked
  9175  002600  6F82               	movwf	strcpy@from& (0+255),b
  9176  002602  0EFF               	movlw	high STR_15
  9177  002604  0100               	movlb	0	; () banked
  9178  002606  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9179  002608  EC20  F027         	call	_strcpy	;wreg free
  9180                           
  9181                           ;RTC.c: 96: break;
  9182  00260C  D06B               	goto	l6684
  9183  00260E                     l6672:
  9184                           
  9185                           ;RTC.c: 98: strcpy(month, "SEP");
  9186  00260E  0EBE               	movlw	low printRTC@month
  9187  002610  0100               	movlb	0	; () banked
  9188  002612  6F80               	movwf	strcpy@to& (0+255),b
  9189  002614  0E00               	movlw	high printRTC@month
  9190  002616  0100               	movlb	0	; () banked
  9191  002618  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9192  00261A  0EE3               	movlw	low STR_16
  9193  00261C  0100               	movlb	0	; () banked
  9194  00261E  6F82               	movwf	strcpy@from& (0+255),b
  9195  002620  0EFF               	movlw	high STR_16
  9196  002622  0100               	movlb	0	; () banked
  9197  002624  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9198  002626  EC20  F027         	call	_strcpy	;wreg free
  9199                           
  9200                           ;RTC.c: 99: break;
  9201  00262A  D05C               	goto	l6684
  9202  00262C                     l6674:
  9203                           
  9204                           ;RTC.c: 101: strcpy(month, "OCT");
  9205  00262C  0EBE               	movlw	low printRTC@month
  9206  00262E  0100               	movlb	0	; () banked
  9207  002630  6F80               	movwf	strcpy@to& (0+255),b
  9208  002632  0E00               	movlw	high printRTC@month
  9209  002634  0100               	movlb	0	; () banked
  9210  002636  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9211  002638  0EF3               	movlw	low STR_17
  9212  00263A  0100               	movlb	0	; () banked
  9213  00263C  6F82               	movwf	strcpy@from& (0+255),b
  9214  00263E  0EFF               	movlw	high STR_17
  9215  002640  0100               	movlb	0	; () banked
  9216  002642  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9217  002644  EC20  F027         	call	_strcpy	;wreg free
  9218                           
  9219                           ;RTC.c: 102: break;
  9220  002648  D04D               	goto	l6684
  9221  00264A                     l6676:
  9222                           
  9223                           ;RTC.c: 104: strcpy(month, "NOV");
  9224  00264A  0EBE               	movlw	low printRTC@month
  9225  00264C  0100               	movlb	0	; () banked
  9226  00264E  6F80               	movwf	strcpy@to& (0+255),b
  9227  002650  0E00               	movlw	high printRTC@month
  9228  002652  0100               	movlb	0	; () banked
  9229  002654  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9230  002656  0EF7               	movlw	low STR_18
  9231  002658  0100               	movlb	0	; () banked
  9232  00265A  6F82               	movwf	strcpy@from& (0+255),b
  9233  00265C  0EFF               	movlw	high STR_18
  9234  00265E  0100               	movlb	0	; () banked
  9235  002660  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9236  002662  EC20  F027         	call	_strcpy	;wreg free
  9237                           
  9238                           ;RTC.c: 105: break;
  9239  002666  D03E               	goto	l6684
  9240  002668                     l6678:
  9241                           
  9242                           ;RTC.c: 107: strcpy(month, "DEC");
  9243  002668  0EBE               	movlw	low printRTC@month
  9244  00266A  0100               	movlb	0	; () banked
  9245  00266C  6F80               	movwf	strcpy@to& (0+255),b
  9246  00266E  0E00               	movlw	high printRTC@month
  9247  002670  0100               	movlb	0	; () banked
  9248  002672  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9249  002674  0ECF               	movlw	low STR_19
  9250  002676  0100               	movlb	0	; () banked
  9251  002678  6F82               	movwf	strcpy@from& (0+255),b
  9252  00267A  0EFF               	movlw	high STR_19
  9253  00267C  0100               	movlb	0	; () banked
  9254  00267E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9255  002680  EC20  F027         	call	_strcpy	;wreg free
  9256                           
  9257                           ;RTC.c: 109: }
  9258                           
  9259                           ;RTC.c: 108: break;
  9260  002684  D02F               	goto	l6684
  9261  002686                     l6682:
  9262  002686  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  9263  00268A  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  9264                           
  9265                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9266                           ; Switch size 1, requested type "space"
  9267                           ; Number of cases is 1, Range of values is 0 to 0
  9268                           ; switch strategies available:
  9269                           ; Name         Instructions Cycles
  9270                           ; simple_byte            4     3 (average)
  9271                           ;	Chosen strategy is simple_byte
  9272  00268E  0100               	movlb	0	; () banked
  9273  002690  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  9274  002692  0A00               	xorlw	0	; case 0
  9275  002694  A4D8               	btfss	status,2,c
  9276  002696  D026               	goto	l6684
  9277                           
  9278                           ; BSR set to: 0
  9279                           ; Switch size 1, requested type "space"
  9280                           ; Number of cases is 12, Range of values is 1 to 12
  9281                           ; switch strategies available:
  9282                           ; Name         Instructions Cycles
  9283                           ; simple_byte           37    19 (average)
  9284                           ;	Chosen strategy is simple_byte
  9285  002698  0100               	movlb	0	; () banked
  9286  00269A  51AB               	movf	??_printRTC& (0+255),w,b
  9287  00269C  0A01               	xorlw	1	; case 1
  9288  00269E  B4D8               	btfsc	status,2,c
  9289  0026A0  D73E               	goto	l6656
  9290  0026A2  0A03               	xorlw	3	; case 2
  9291  0026A4  B4D8               	btfsc	status,2,c
  9292  0026A6  D74A               	goto	l6658
  9293  0026A8  0A01               	xorlw	1	; case 3
  9294  0026AA  B4D8               	btfsc	status,2,c
  9295  0026AC  D756               	goto	l6660
  9296  0026AE  0A07               	xorlw	7	; case 4
  9297  0026B0  B4D8               	btfsc	status,2,c
  9298  0026B2  D762               	goto	l6662
  9299  0026B4  0A01               	xorlw	1	; case 5
  9300  0026B6  B4D8               	btfsc	status,2,c
  9301  0026B8  D76E               	goto	l6664
  9302  0026BA  0A03               	xorlw	3	; case 6
  9303  0026BC  B4D8               	btfsc	status,2,c
  9304  0026BE  D77A               	goto	l6666
  9305  0026C0  0A01               	xorlw	1	; case 7
  9306  0026C2  B4D8               	btfsc	status,2,c
  9307  0026C4  D786               	goto	l6668
  9308  0026C6  0A0F               	xorlw	15	; case 8
  9309  0026C8  B4D8               	btfsc	status,2,c
  9310  0026CA  D792               	goto	l6670
  9311  0026CC  0A01               	xorlw	1	; case 9
  9312  0026CE  B4D8               	btfsc	status,2,c
  9313  0026D0  D79E               	goto	l6672
  9314  0026D2  0A03               	xorlw	3	; case 10
  9315  0026D4  B4D8               	btfsc	status,2,c
  9316  0026D6  D7AA               	goto	l6674
  9317  0026D8  0A01               	xorlw	1	; case 11
  9318  0026DA  B4D8               	btfsc	status,2,c
  9319  0026DC  D7B6               	goto	l6676
  9320  0026DE  0A07               	xorlw	7	; case 12
  9321  0026E0  B4D8               	btfsc	status,2,c
  9322  0026E2  D7C2               	goto	l6678
  9323  0026E4                     l6684:
  9324                           
  9325                           ;RTC.c: 110: lcdInst(0b10000000);;
  9326  0026E4  0E80               	movlw	128
  9327  0026E6  ECC5  F029         	call	_lcdInst
  9328                           
  9329                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  9330  0026EA  0EE8               	movlw	low STR_21
  9331  0026EC  0100               	movlb	0	; () banked
  9332  0026EE  6F8E               	movwf	printf@f& (0+255),b
  9333  0026F0  0EFA               	movlw	high STR_21
  9334  0026F2  0100               	movlb	0	; () banked
  9335  0026F4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9336  0026F6  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  9337  0026FA  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  9338  0026FE  0EBE               	movlw	low printRTC@month
  9339  002700  0100               	movlb	0	; () banked
  9340  002702  6F92               	movwf	(?_printf+4)& (0+255),b
  9341  002704  0E00               	movlw	high printRTC@month
  9342  002706  0100               	movlb	0	; () banked
  9343  002708  6F93               	movwf	(?_printf+5)& (0+255),b
  9344  00270A  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  9345  00270E  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  9346  002712  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  9347  002716  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  9348  00271A  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  9349  00271E  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  9350  002722  EC1B  F00B         	call	_printf	;wreg free
  9351  002726  0012               	return		;funcret
  9352  002728                     __end_of_printRTC:
  9353                           	opt stack 0
  9354                           tblptru	equ	0xFF8
  9355                           tblptrh	equ	0xFF7
  9356                           tblptrl	equ	0xFF6
  9357                           tablat	equ	0xFF5
  9358                           prodh	equ	0xFF4
  9359                           prodl	equ	0xFF3
  9360                           intcon	equ	0xFF2
  9361                           intcon2	equ	0xFF1
  9362                           intcon3	equ	0xFF0
  9363                           postinc0	equ	0xFEE
  9364                           wreg	equ	0xFE8
  9365                           postdec1	equ	0xFE5
  9366                           fsr1l	equ	0xFE1
  9367                           indf2	equ	0xFDF
  9368                           postinc2	equ	0xFDE
  9369                           postdec2	equ	0xFDD
  9370                           fsr2h	equ	0xFDA
  9371                           fsr2l	equ	0xFD9
  9372                           status	equ	0xFD8
  9373                           
  9374 ;; *************** function _strcpy *****************
  9375 ;; Defined at:
  9376 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9377 ;; Parameters:    Size  Location     Type
  9378 ;;  to              2    0[BANK0 ] PTR unsigned char 
  9379 ;;		 -> printRTC@month(4), UI@month(4), 
  9380 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  9381 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  9382 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  9383 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  9384 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  9385 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  9386 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  9387 ;;		 -> STR_8(4), 
  9388 ;; Auto vars:     Size  Location     Type
  9389 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  9390 ;;		 -> printRTC@month(4), UI@month(4), 
  9391 ;; Return value:  Size  Location     Type
  9392 ;;                  2    0[BANK0 ] PTR unsigned char 
  9393 ;; Registers used:
  9394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9395 ;; Tracked objects:
  9396 ;;		On entry : 0/0
  9397 ;;		On exit  : 0/0
  9398 ;;		Unchanged: 0/0
  9399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9400 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9401 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9403 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9404 ;;Total ram usage:        6 bytes
  9405 ;; Hardware stack levels used:    1
  9406 ;; Hardware stack levels required when called:    7
  9407 ;; This function calls:
  9408 ;;		Nothing
  9409 ;; This function is called by:
  9410 ;;		_UI
  9411 ;;		_printRTC
  9412 ;; This function uses a non-reentrant model
  9413 ;;
  9414                           
  9415                           	psect	text25
  9416  004E40                     __ptext25:
  9417                           	opt stack 0
  9418  004E40                     _strcpy:
  9419                           	opt stack 20
  9420                           
  9421                           ;incstack = 0
  9422  004E40  C080  F084         	movff	strcpy@to,strcpy@cp
  9423  004E44  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  9424  004E48  D006               	goto	l6390
  9425  004E4A                     l6388:
  9426  004E4A  0100               	movlb	0	; () banked
  9427  004E4C  4B84               	infsnz	strcpy@cp& (0+255),f,b
  9428  004E4E  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  9429  004E50  0100               	movlb	0	; () banked
  9430  004E52  4B82               	infsnz	strcpy@from& (0+255),f,b
  9431  004E54  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  9432  004E56                     l6390:
  9433  004E56  C082  FFF6         	movff	strcpy@from,tblptrl
  9434  004E5A  C083  FFF7         	movff	strcpy@from+1,tblptrh
  9435  004E5E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9436  004E5E  6AF8               	clrf	tblptru,c
  9437  004E60                     	endif
  9438  004E60                     	if	0	;tblptru may be non-zero
  9439  004E60                     	endif
  9440  004E60  C084  FFD9         	movff	strcpy@cp,fsr2l
  9441  004E64  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  9442  004E68  0008               	tblrd		*
  9443  004E6A  CFF5 FFDF          	movff	tablat,indf2
  9444  004E6E  50DF               	movf	indf2,w,c
  9445  004E70  B4D8               	btfsc	status,2,c
  9446  004E72  0012               	return	
  9447  004E74  D7EA               	goto	l6388
  9448  004E76                     __end_of_strcpy:
  9449                           	opt stack 0
  9450                           tblptru	equ	0xFF8
  9451                           tblptrh	equ	0xFF7
  9452                           tblptrl	equ	0xFF6
  9453                           tablat	equ	0xFF5
  9454                           prodh	equ	0xFF4
  9455                           prodl	equ	0xFF3
  9456                           intcon	equ	0xFF2
  9457                           intcon2	equ	0xFF1
  9458                           intcon3	equ	0xFF0
  9459                           postinc0	equ	0xFEE
  9460                           wreg	equ	0xFE8
  9461                           postdec1	equ	0xFE5
  9462                           fsr1l	equ	0xFE1
  9463                           indf2	equ	0xFDF
  9464                           postinc2	equ	0xFDE
  9465                           postdec2	equ	0xFDD
  9466                           fsr2h	equ	0xFDA
  9467                           fsr2l	equ	0xFD9
  9468                           status	equ	0xFD8
  9469                           
  9470 ;; *************** function _getRTC *****************
  9471 ;; Defined at:
  9472 ;;		line 44 in file "RTC.c"
  9473 ;; Parameters:    Size  Location     Type
  9474 ;;		None
  9475 ;; Auto vars:     Size  Location     Type
  9476 ;;  i               2    3[BANK0 ] int 
  9477 ;; Return value:  Size  Location     Type
  9478 ;;                  1    wreg      void 
  9479 ;; Registers used:
  9480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9481 ;; Tracked objects:
  9482 ;;		On entry : 0/0
  9483 ;;		On exit  : 0/0
  9484 ;;		Unchanged: 0/0
  9485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9487 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9489 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9490 ;;Total ram usage:        2 bytes
  9491 ;; Hardware stack levels used:    1
  9492 ;; Hardware stack levels required when called:    9
  9493 ;; This function calls:
  9494 ;;		_I2C_Master_Read
  9495 ;;		_I2C_Master_Start
  9496 ;;		_I2C_Master_Stop
  9497 ;;		_I2C_Master_Write
  9498 ;; This function is called by:
  9499 ;;		_printRTC
  9500 ;;		_initSortTimer
  9501 ;; This function uses a non-reentrant model
  9502 ;;
  9503                           
  9504                           	psect	text26
  9505  00461E                     __ptext26:
  9506                           	opt stack 0
  9507  00461E                     _getRTC:
  9508                           	opt stack 18
  9509                           
  9510                           ;RTC.c: 48: I2C_Master_Start();
  9511                           
  9512                           ;incstack = 0
  9513  00461E  ECEB  F029         	call	_I2C_Master_Start	;wreg free
  9514                           
  9515                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  9516  004622  0E00               	movlw	0
  9517  004624  0100               	movlb	0	; () banked
  9518  004626  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9519  004628  0ED0               	movlw	208
  9520  00462A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9521  00462C  ECD9  F029         	call	_I2C_Master_Write	;wreg free
  9522                           
  9523                           ;RTC.c: 50: I2C_Master_Write(0x00);
  9524  004630  0E00               	movlw	0
  9525  004632  0100               	movlb	0	; () banked
  9526  004634  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9527  004636  0E00               	movlw	0
  9528  004638  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9529  00463A  ECD9  F029         	call	_I2C_Master_Write	;wreg free
  9530                           
  9531                           ;RTC.c: 51: I2C_Master_Stop();
  9532  00463E  ECE7  F029         	call	_I2C_Master_Stop	;wreg free
  9533                           
  9534                           ;RTC.c: 54: I2C_Master_Start();
  9535  004642  ECEB  F029         	call	_I2C_Master_Start	;wreg free
  9536                           
  9537                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  9538  004646  0E00               	movlw	0
  9539  004648  0100               	movlb	0	; () banked
  9540  00464A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9541  00464C  0ED1               	movlw	209
  9542  00464E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9543  004650  ECD9  F029         	call	_I2C_Master_Write	;wreg free
  9544                           
  9545                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  9546  004654  0E00               	movlw	0
  9547  004656  0100               	movlb	0	; () banked
  9548  004658  6F84               	movwf	(getRTC@i+1)& (0+255),b
  9549  00465A  0E00               	movlw	0
  9550  00465C  6F83               	movwf	getRTC@i& (0+255),b
  9551  00465E                     l6396:
  9552                           
  9553                           ; BSR set to: 0
  9554  00465E  0100               	movlb	0	; () banked
  9555  004660  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  9556  004662  D008               	goto	l6400
  9557  004664  0100               	movlb	0	; () banked
  9558  004666  5184               	movf	(getRTC@i+1)& (0+255),w,b
  9559  004668  E115               	bnz	l6406
  9560  00466A  0E06               	movlw	6
  9561  00466C  0100               	movlb	0	; () banked
  9562  00466E  5D83               	subwf	getRTC@i& (0+255),w,b
  9563  004670  B0D8               	btfsc	status,0,c
  9564  004672  D010               	goto	l6406
  9565  004674                     l6400:
  9566                           
  9567                           ; BSR set to: 0
  9568                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  9569  004674  0E1C               	movlw	low _time
  9570  004676  0100               	movlb	0	; () banked
  9571  004678  2583               	addwf	getRTC@i& (0+255),w,b
  9572  00467A  6ED9               	movwf	fsr2l,c
  9573  00467C  0E01               	movlw	high _time
  9574  00467E  0100               	movlb	0	; () banked
  9575  004680  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  9576  004682  6EDA               	movwf	fsr2h,c
  9577  004684  0E01               	movlw	1
  9578  004686  EC78  F028         	call	_I2C_Master_Read
  9579  00468A  6EDF               	movwf	indf2,c
  9580  00468C  0100               	movlb	0	; () banked
  9581  00468E  4B83               	infsnz	getRTC@i& (0+255),f,b
  9582  004690  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  9583  004692  D7E5               	goto	l6396
  9584  004694                     l6406:
  9585                           
  9586                           ; BSR set to: 0
  9587                           ;RTC.c: 58: }
  9588                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  9589  004694  0E00               	movlw	0
  9590  004696  EC78  F028         	call	_I2C_Master_Read
  9591  00469A  0101               	movlb	1	; () banked
  9592  00469C  6F22               	movwf	(_time+6)& (0+255),b
  9593                           
  9594                           ;RTC.c: 60: I2C_Master_Stop();
  9595  00469E  ECE7  F029         	call	_I2C_Master_Stop	;wreg free
  9596  0046A2  0012               	return		;funcret
  9597  0046A4                     __end_of_getRTC:
  9598                           	opt stack 0
  9599                           tblptru	equ	0xFF8
  9600                           tblptrh	equ	0xFF7
  9601                           tblptrl	equ	0xFF6
  9602                           tablat	equ	0xFF5
  9603                           prodh	equ	0xFF4
  9604                           prodl	equ	0xFF3
  9605                           intcon	equ	0xFF2
  9606                           intcon2	equ	0xFF1
  9607                           intcon3	equ	0xFF0
  9608                           postinc0	equ	0xFEE
  9609                           wreg	equ	0xFE8
  9610                           postdec1	equ	0xFE5
  9611                           fsr1l	equ	0xFE1
  9612                           indf2	equ	0xFDF
  9613                           postinc2	equ	0xFDE
  9614                           postdec2	equ	0xFDD
  9615                           fsr2h	equ	0xFDA
  9616                           fsr2l	equ	0xFD9
  9617                           status	equ	0xFD8
  9618                           
  9619 ;; *************** function _I2C_Master_Write *****************
  9620 ;; Defined at:
  9621 ;;		line 49 in file "I2C.c"
  9622 ;; Parameters:    Size  Location     Type
  9623 ;;  d               2    1[BANK0 ] unsigned int 
  9624 ;; Auto vars:     Size  Location     Type
  9625 ;;		None
  9626 ;; Return value:  Size  Location     Type
  9627 ;;                  1    wreg      void 
  9628 ;; Registers used:
  9629 ;;		wreg, status,2, status,0, cstack
  9630 ;; Tracked objects:
  9631 ;;		On entry : 0/0
  9632 ;;		On exit  : 0/0
  9633 ;;		Unchanged: 0/0
  9634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9635 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9638 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9639 ;;Total ram usage:        2 bytes
  9640 ;; Hardware stack levels used:    1
  9641 ;; Hardware stack levels required when called:    8
  9642 ;; This function calls:
  9643 ;;		_I2C_Master_Wait
  9644 ;; This function is called by:
  9645 ;;		_loadRTC
  9646 ;;		_getRTC
  9647 ;; This function uses a non-reentrant model
  9648 ;;
  9649                           
  9650                           	psect	text27
  9651  0053B2                     __ptext27:
  9652                           	opt stack 0
  9653  0053B2                     _I2C_Master_Write:
  9654                           	opt stack 18
  9655                           
  9656                           ;I2C.c: 51: I2C_Master_Wait();
  9657                           
  9658                           ;incstack = 0
  9659  0053B2  ECAA  F029         	call	_I2C_Master_Wait	;wreg free
  9660                           
  9661                           ;I2C.c: 52: SSPBUF = d;
  9662  0053B6  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9663  0053BA  0012               	return		;funcret
  9664  0053BC                     __end_of_I2C_Master_Write:
  9665                           	opt stack 0
  9666                           tblptru	equ	0xFF8
  9667                           tblptrh	equ	0xFF7
  9668                           tblptrl	equ	0xFF6
  9669                           tablat	equ	0xFF5
  9670                           prodh	equ	0xFF4
  9671                           prodl	equ	0xFF3
  9672                           intcon	equ	0xFF2
  9673                           intcon2	equ	0xFF1
  9674                           intcon3	equ	0xFF0
  9675                           postinc0	equ	0xFEE
  9676                           wreg	equ	0xFE8
  9677                           postdec1	equ	0xFE5
  9678                           fsr1l	equ	0xFE1
  9679                           indf2	equ	0xFDF
  9680                           postinc2	equ	0xFDE
  9681                           postdec2	equ	0xFDD
  9682                           fsr2h	equ	0xFDA
  9683                           fsr2l	equ	0xFD9
  9684                           status	equ	0xFD8
  9685                           
  9686 ;; *************** function _I2C_Master_Stop *****************
  9687 ;; Defined at:
  9688 ;;		line 43 in file "I2C.c"
  9689 ;; Parameters:    Size  Location     Type
  9690 ;;		None
  9691 ;; Auto vars:     Size  Location     Type
  9692 ;;		None
  9693 ;; Return value:  Size  Location     Type
  9694 ;;                  1    wreg      void 
  9695 ;; Registers used:
  9696 ;;		wreg, status,2, status,0, cstack
  9697 ;; Tracked objects:
  9698 ;;		On entry : 0/0
  9699 ;;		On exit  : 0/0
  9700 ;;		Unchanged: 0/0
  9701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9706 ;;Total ram usage:        0 bytes
  9707 ;; Hardware stack levels used:    1
  9708 ;; Hardware stack levels required when called:    8
  9709 ;; This function calls:
  9710 ;;		_I2C_Master_Wait
  9711 ;; This function is called by:
  9712 ;;		_loadRTC
  9713 ;;		_getRTC
  9714 ;; This function uses a non-reentrant model
  9715 ;;
  9716                           
  9717                           	psect	text28
  9718  0053CE                     __ptext28:
  9719                           	opt stack 0
  9720  0053CE                     _I2C_Master_Stop:
  9721                           	opt stack 18
  9722                           
  9723                           ;I2C.c: 45: I2C_Master_Wait();
  9724                           
  9725                           ;incstack = 0
  9726  0053CE  ECAA  F029         	call	_I2C_Master_Wait	;wreg free
  9727                           
  9728                           ;I2C.c: 46: PEN = 1;
  9729  0053D2  84C5               	bsf	4037,2,c	;volatile
  9730  0053D4  0012               	return		;funcret
  9731  0053D6                     __end_of_I2C_Master_Stop:
  9732                           	opt stack 0
  9733                           tblptru	equ	0xFF8
  9734                           tblptrh	equ	0xFF7
  9735                           tblptrl	equ	0xFF6
  9736                           tablat	equ	0xFF5
  9737                           prodh	equ	0xFF4
  9738                           prodl	equ	0xFF3
  9739                           intcon	equ	0xFF2
  9740                           intcon2	equ	0xFF1
  9741                           intcon3	equ	0xFF0
  9742                           postinc0	equ	0xFEE
  9743                           wreg	equ	0xFE8
  9744                           postdec1	equ	0xFE5
  9745                           fsr1l	equ	0xFE1
  9746                           indf2	equ	0xFDF
  9747                           postinc2	equ	0xFDE
  9748                           postdec2	equ	0xFDD
  9749                           fsr2h	equ	0xFDA
  9750                           fsr2l	equ	0xFD9
  9751                           status	equ	0xFD8
  9752                           
  9753 ;; *************** function _I2C_Master_Start *****************
  9754 ;; Defined at:
  9755 ;;		line 31 in file "I2C.c"
  9756 ;; Parameters:    Size  Location     Type
  9757 ;;		None
  9758 ;; Auto vars:     Size  Location     Type
  9759 ;;		None
  9760 ;; Return value:  Size  Location     Type
  9761 ;;                  1    wreg      void 
  9762 ;; Registers used:
  9763 ;;		wreg, status,2, status,0, cstack
  9764 ;; Tracked objects:
  9765 ;;		On entry : 0/0
  9766 ;;		On exit  : 0/0
  9767 ;;		Unchanged: 0/0
  9768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9773 ;;Total ram usage:        0 bytes
  9774 ;; Hardware stack levels used:    1
  9775 ;; Hardware stack levels required when called:    8
  9776 ;; This function calls:
  9777 ;;		_I2C_Master_Wait
  9778 ;; This function is called by:
  9779 ;;		_loadRTC
  9780 ;;		_getRTC
  9781 ;; This function uses a non-reentrant model
  9782 ;;
  9783                           
  9784                           	psect	text29
  9785  0053D6                     __ptext29:
  9786                           	opt stack 0
  9787  0053D6                     _I2C_Master_Start:
  9788                           	opt stack 18
  9789                           
  9790                           ;I2C.c: 33: I2C_Master_Wait();
  9791                           
  9792                           ;incstack = 0
  9793  0053D6  ECAA  F029         	call	_I2C_Master_Wait	;wreg free
  9794                           
  9795                           ;I2C.c: 34: SEN = 1;
  9796  0053DA  80C5               	bsf	4037,0,c	;volatile
  9797  0053DC  0012               	return		;funcret
  9798  0053DE                     __end_of_I2C_Master_Start:
  9799                           	opt stack 0
  9800                           tblptru	equ	0xFF8
  9801                           tblptrh	equ	0xFF7
  9802                           tblptrl	equ	0xFF6
  9803                           tablat	equ	0xFF5
  9804                           prodh	equ	0xFF4
  9805                           prodl	equ	0xFF3
  9806                           intcon	equ	0xFF2
  9807                           intcon2	equ	0xFF1
  9808                           intcon3	equ	0xFF0
  9809                           postinc0	equ	0xFEE
  9810                           wreg	equ	0xFE8
  9811                           postdec1	equ	0xFE5
  9812                           fsr1l	equ	0xFE1
  9813                           indf2	equ	0xFDF
  9814                           postinc2	equ	0xFDE
  9815                           postdec2	equ	0xFDD
  9816                           fsr2h	equ	0xFDA
  9817                           fsr2l	equ	0xFD9
  9818                           status	equ	0xFD8
  9819                           
  9820 ;; *************** function _I2C_Master_Read *****************
  9821 ;; Defined at:
  9822 ;;		line 55 in file "I2C.c"
  9823 ;; Parameters:    Size  Location     Type
  9824 ;;  a               1    wreg     unsigned char 
  9825 ;; Auto vars:     Size  Location     Type
  9826 ;;  a               1    1[BANK0 ] unsigned char 
  9827 ;;  temp            1    2[BANK0 ] unsigned char 
  9828 ;; Return value:  Size  Location     Type
  9829 ;;                  1    wreg      unsigned char 
  9830 ;; Registers used:
  9831 ;;		wreg, status,2, status,0, cstack
  9832 ;; Tracked objects:
  9833 ;;		On entry : 0/0
  9834 ;;		On exit  : 0/0
  9835 ;;		Unchanged: 0/0
  9836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9838 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9840 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9841 ;;Total ram usage:        2 bytes
  9842 ;; Hardware stack levels used:    1
  9843 ;; Hardware stack levels required when called:    8
  9844 ;; This function calls:
  9845 ;;		_I2C_Master_Wait
  9846 ;; This function is called by:
  9847 ;;		_getRTC
  9848 ;; This function uses a non-reentrant model
  9849 ;;
  9850                           
  9851                           	psect	text30
  9852  0050F0                     __ptext30:
  9853                           	opt stack 0
  9854  0050F0                     _I2C_Master_Read:
  9855                           	opt stack 18
  9856                           
  9857                           ;incstack = 0
  9858                           ;I2C_Master_Read@a stored from wreg
  9859  0050F0  0100               	movlb	0	; () banked
  9860  0050F2  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  9861                           
  9862                           ;I2C.c: 57: unsigned char temp;
  9863                           ;I2C.c: 58: I2C_Master_Wait();
  9864  0050F4  ECAA  F029         	call	_I2C_Master_Wait	;wreg free
  9865                           
  9866                           ;I2C.c: 59: RCEN = 1;
  9867  0050F8  86C5               	bsf	4037,3,c	;volatile
  9868                           
  9869                           ;I2C.c: 60: I2C_Master_Wait();
  9870  0050FA  ECAA  F029         	call	_I2C_Master_Wait	;wreg free
  9871                           
  9872                           ;I2C.c: 61: temp = SSPBUF;
  9873  0050FE  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  9874                           
  9875                           ;I2C.c: 62: I2C_Master_Wait();
  9876  005102  ECAA  F029         	call	_I2C_Master_Wait	;wreg free
  9877                           
  9878                           ;I2C.c: 63: ACKDT = (a)?0:1;
  9879  005106  0100               	movlb	0	; () banked
  9880  005108  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  9881  00510A  0100               	movlb	0	; () banked
  9882  00510C  A4D8               	btfss	status,2,c
  9883  00510E  D002               	goto	u4430
  9884  005110  8AC5               	bsf	4037,5,c	;volatile
  9885  005112  D001               	goto	l6084
  9886  005114                     u4430:
  9887  005114  9AC5               	bcf	4037,5,c	;volatile
  9888  005116                     l6084:
  9889                           
  9890                           ;I2C.c: 64: ACKEN = 1;
  9891  005116  88C5               	bsf	4037,4,c	;volatile
  9892                           
  9893                           ;I2C.c: 65: return temp;
  9894  005118  0100               	movlb	0	; () banked
  9895  00511A  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  9896  00511C  0012               	return	
  9897  00511E                     __end_of_I2C_Master_Read:
  9898                           	opt stack 0
  9899                           tblptru	equ	0xFF8
  9900                           tblptrh	equ	0xFF7
  9901                           tblptrl	equ	0xFF6
  9902                           tablat	equ	0xFF5
  9903                           prodh	equ	0xFF4
  9904                           prodl	equ	0xFF3
  9905                           intcon	equ	0xFF2
  9906                           intcon2	equ	0xFF1
  9907                           intcon3	equ	0xFF0
  9908                           postinc0	equ	0xFEE
  9909                           wreg	equ	0xFE8
  9910                           postdec1	equ	0xFE5
  9911                           fsr1l	equ	0xFE1
  9912                           indf2	equ	0xFDF
  9913                           postinc2	equ	0xFDE
  9914                           postdec2	equ	0xFDD
  9915                           fsr2h	equ	0xFDA
  9916                           fsr2l	equ	0xFD9
  9917                           status	equ	0xFD8
  9918                           
  9919 ;; *************** function _I2C_Master_Wait *****************
  9920 ;; Defined at:
  9921 ;;		line 26 in file "I2C.c"
  9922 ;; Parameters:    Size  Location     Type
  9923 ;;		None
  9924 ;; Auto vars:     Size  Location     Type
  9925 ;;		None
  9926 ;; Return value:  Size  Location     Type
  9927 ;;                  1    wreg      void 
  9928 ;; Registers used:
  9929 ;;		wreg, status,2, status,0
  9930 ;; Tracked objects:
  9931 ;;		On entry : 0/0
  9932 ;;		On exit  : 0/0
  9933 ;;		Unchanged: 0/0
  9934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9937 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9938 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9939 ;;Total ram usage:        1 bytes
  9940 ;; Hardware stack levels used:    1
  9941 ;; Hardware stack levels required when called:    7
  9942 ;; This function calls:
  9943 ;;		Nothing
  9944 ;; This function is called by:
  9945 ;;		_I2C_Master_Start
  9946 ;;		_I2C_Master_Stop
  9947 ;;		_I2C_Master_Write
  9948 ;;		_I2C_Master_Read
  9949 ;;		_I2C_Master_RepeatedStart
  9950 ;; This function uses a non-reentrant model
  9951 ;;
  9952                           
  9953                           	psect	text31
  9954  005354                     __ptext31:
  9955                           	opt stack 0
  9956  005354                     _I2C_Master_Wait:
  9957                           	opt stack 18
  9958  005354                     l66:
  9959  005354  B4C7               	btfsc	4039,2,c	;volatile
  9960  005356  D7FE               	goto	l66
  9961  005358  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  9962  00535C  0E1F               	movlw	31
  9963  00535E  0100               	movlb	0	; () banked
  9964  005360  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  9965  005362  B4D8               	btfsc	status,2,c
  9966  005364  0012               	return	
  9967  005366  D7F6               	goto	l66
  9968  005368                     __end_of_I2C_Master_Wait:
  9969                           	opt stack 0
  9970                           tblptru	equ	0xFF8
  9971                           tblptrh	equ	0xFF7
  9972                           tblptrl	equ	0xFF6
  9973                           tablat	equ	0xFF5
  9974                           prodh	equ	0xFF4
  9975                           prodl	equ	0xFF3
  9976                           intcon	equ	0xFF2
  9977                           intcon2	equ	0xFF1
  9978                           intcon3	equ	0xFF0
  9979                           postinc0	equ	0xFEE
  9980                           wreg	equ	0xFE8
  9981                           postdec1	equ	0xFE5
  9982                           fsr1l	equ	0xFE1
  9983                           indf2	equ	0xFDF
  9984                           postinc2	equ	0xFDE
  9985                           postdec2	equ	0xFDD
  9986                           fsr2h	equ	0xFDA
  9987                           fsr2l	equ	0xFD9
  9988                           status	equ	0xFD8
  9989                           
  9990 ;; *************** function _change_state_to_menu_22 *****************
  9991 ;; Defined at:
  9992 ;;		line 501 in file "UI.c"
  9993 ;; Parameters:    Size  Location     Type
  9994 ;;		None
  9995 ;; Auto vars:     Size  Location     Type
  9996 ;;		None
  9997 ;; Return value:  Size  Location     Type
  9998 ;;                  1    wreg      void 
  9999 ;; Registers used:
 10000 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10001 ;; Tracked objects:
 10002 ;;		On entry : 0/0
 10003 ;;		On exit  : 0/0
 10004 ;;		Unchanged: 0/0
 10005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10009 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10010 ;;Total ram usage:        0 bytes
 10011 ;; Hardware stack levels used:    1
 10012 ;; Hardware stack levels required when called:   10
 10013 ;; This function calls:
 10014 ;;		_lcdInst
 10015 ;;		_printf
 10016 ;; This function is called by:
 10017 ;;		_UI
 10018 ;; This function uses a non-reentrant model
 10019 ;;
 10020                           
 10021                           	psect	text32
 10022  004DD0                     __ptext32:
 10023                           	opt stack 0
 10024  004DD0                     _change_state_to_menu_22:
 10025                           	opt stack 19
 10026                           
 10027                           ;UI.c: 502: cur_state = 22;
 10028                           
 10029                           ; BSR set to: 0
 10030                           ;incstack = 0
 10031  004DD0  0E00               	movlw	0
 10032  004DD2  0100               	movlb	0	; () banked
 10033  004DD4  6FED               	movwf	(_cur_state+1)& (0+255),b
 10034  004DD6  0E16               	movlw	22
 10035  004DD8  6FEC               	movwf	_cur_state& (0+255),b
 10036                           
 10037                           ; BSR set to: 0
 10038                           ;UI.c: 504: lcdInst(0b10000000);;
 10039  004DDA  0E80               	movlw	128
 10040  004DDC  ECC5  F029         	call	_lcdInst
 10041                           
 10042                           ;UI.c: 505: printf("2. SORT        <");
 10043  004DE0  0EC4               	movlw	low STR_34
 10044  004DE2  0100               	movlb	0	; () banked
 10045  004DE4  6F8E               	movwf	printf@f& (0+255),b
 10046  004DE6  0EFD               	movlw	high STR_34
 10047  004DE8  0100               	movlb	0	; () banked
 10048  004DEA  6F8F               	movwf	(printf@f+1)& (0+255),b
 10049  004DEC  EC1B  F00B         	call	_printf	;wreg free
 10050                           
 10051                           ;UI.c: 506: lcdInst(0b11000000);;
 10052  004DF0  0EC0               	movlw	192
 10053  004DF2  ECC5  F029         	call	_lcdInst
 10054                           
 10055                           ;UI.c: 507: printf("3. LOGS         ");
 10056  004DF6  0E09               	movlw	low STR_36
 10057  004DF8  0100               	movlb	0	; () banked
 10058  004DFA  6F8E               	movwf	printf@f& (0+255),b
 10059  004DFC  0EFD               	movlw	high STR_36
 10060  004DFE  0100               	movlb	0	; () banked
 10061  004E00  6F8F               	movwf	(printf@f+1)& (0+255),b
 10062  004E02  EC1B  F00B         	call	_printf	;wreg free
 10063  004E06  0012               	return		;funcret
 10064  004E08                     __end_of_change_state_to_menu_22:
 10065                           	opt stack 0
 10066                           tblptru	equ	0xFF8
 10067                           tblptrh	equ	0xFF7
 10068                           tblptrl	equ	0xFF6
 10069                           tablat	equ	0xFF5
 10070                           prodh	equ	0xFF4
 10071                           prodl	equ	0xFF3
 10072                           intcon	equ	0xFF2
 10073                           intcon2	equ	0xFF1
 10074                           intcon3	equ	0xFF0
 10075                           postinc0	equ	0xFEE
 10076                           wreg	equ	0xFE8
 10077                           postdec1	equ	0xFE5
 10078                           fsr1l	equ	0xFE1
 10079                           indf2	equ	0xFDF
 10080                           postinc2	equ	0xFDE
 10081                           postdec2	equ	0xFDD
 10082                           fsr2h	equ	0xFDA
 10083                           fsr2l	equ	0xFD9
 10084                           status	equ	0xFD8
 10085                           
 10086 ;; *************** function _change_state_to_menu_12 *****************
 10087 ;; Defined at:
 10088 ;;		line 493 in file "UI.c"
 10089 ;; Parameters:    Size  Location     Type
 10090 ;;		None
 10091 ;; Auto vars:     Size  Location     Type
 10092 ;;		None
 10093 ;; Return value:  Size  Location     Type
 10094 ;;                  1    wreg      void 
 10095 ;; Registers used:
 10096 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10097 ;; Tracked objects:
 10098 ;;		On entry : 0/0
 10099 ;;		On exit  : 0/0
 10100 ;;		Unchanged: 0/0
 10101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10106 ;;Total ram usage:        0 bytes
 10107 ;; Hardware stack levels used:    1
 10108 ;; Hardware stack levels required when called:   10
 10109 ;; This function calls:
 10110 ;;		_lcdInst
 10111 ;;		_printf
 10112 ;; This function is called by:
 10113 ;;		_UI
 10114 ;; This function uses a non-reentrant model
 10115 ;;
 10116                           
 10117                           	psect	text33
 10118  004E08                     __ptext33:
 10119                           	opt stack 0
 10120  004E08                     _change_state_to_menu_12:
 10121                           	opt stack 19
 10122                           
 10123                           ;UI.c: 494: cur_state = 12;
 10124                           
 10125                           ;incstack = 0
 10126  004E08  0E00               	movlw	0
 10127  004E0A  0100               	movlb	0	; () banked
 10128  004E0C  6FED               	movwf	(_cur_state+1)& (0+255),b
 10129  004E0E  0E0C               	movlw	12
 10130  004E10  6FEC               	movwf	_cur_state& (0+255),b
 10131                           
 10132                           ; BSR set to: 0
 10133                           ;UI.c: 496: lcdInst(0b10000000);;
 10134  004E12  0E80               	movlw	128
 10135  004E14  ECC5  F029         	call	_lcdInst
 10136                           
 10137                           ;UI.c: 497: printf("1. DATE/TIME    ");
 10138  004E18  0E2B               	movlw	low STR_33
 10139  004E1A  0100               	movlb	0	; () banked
 10140  004E1C  6F8E               	movwf	printf@f& (0+255),b
 10141  004E1E  0EFD               	movlw	high STR_33
 10142  004E20  0100               	movlb	0	; () banked
 10143  004E22  6F8F               	movwf	(printf@f+1)& (0+255),b
 10144  004E24  EC1B  F00B         	call	_printf	;wreg free
 10145                           
 10146                           ;UI.c: 498: lcdInst(0b11000000);;
 10147  004E28  0EC0               	movlw	192
 10148  004E2A  ECC5  F029         	call	_lcdInst
 10149                           
 10150                           ;UI.c: 499: printf("2. SORT        <");
 10151  004E2E  0EC4               	movlw	low STR_34
 10152  004E30  0100               	movlb	0	; () banked
 10153  004E32  6F8E               	movwf	printf@f& (0+255),b
 10154  004E34  0EFD               	movlw	high STR_34
 10155  004E36  0100               	movlb	0	; () banked
 10156  004E38  6F8F               	movwf	(printf@f+1)& (0+255),b
 10157  004E3A  EC1B  F00B         	call	_printf	;wreg free
 10158  004E3E  0012               	return		;funcret
 10159  004E40                     __end_of_change_state_to_menu_12:
 10160                           	opt stack 0
 10161                           tblptru	equ	0xFF8
 10162                           tblptrh	equ	0xFF7
 10163                           tblptrl	equ	0xFF6
 10164                           tablat	equ	0xFF5
 10165                           prodh	equ	0xFF4
 10166                           prodl	equ	0xFF3
 10167                           intcon	equ	0xFF2
 10168                           intcon2	equ	0xFF1
 10169                           intcon3	equ	0xFF0
 10170                           postinc0	equ	0xFEE
 10171                           wreg	equ	0xFE8
 10172                           postdec1	equ	0xFE5
 10173                           fsr1l	equ	0xFE1
 10174                           indf2	equ	0xFDF
 10175                           postinc2	equ	0xFDE
 10176                           postdec2	equ	0xFDD
 10177                           fsr2h	equ	0xFDA
 10178                           fsr2l	equ	0xFD9
 10179                           status	equ	0xFD8
 10180                           
 10181 ;; *************** function ___awmod *****************
 10182 ;; Defined at:
 10183 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 10184 ;; Parameters:    Size  Location     Type
 10185 ;;  dividend        2    0[BANK0 ] int 
 10186 ;;  divisor         2    2[BANK0 ] int 
 10187 ;; Auto vars:     Size  Location     Type
 10188 ;;  sign            1    5[BANK0 ] unsigned char 
 10189 ;;  counter         1    4[BANK0 ] unsigned char 
 10190 ;; Return value:  Size  Location     Type
 10191 ;;                  2    0[BANK0 ] int 
 10192 ;; Registers used:
 10193 ;;		wreg, status,2, status,0
 10194 ;; Tracked objects:
 10195 ;;		On entry : 0/0
 10196 ;;		On exit  : 0/0
 10197 ;;		Unchanged: 0/0
 10198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10199 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10200 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10202 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10203 ;;Total ram usage:        6 bytes
 10204 ;; Hardware stack levels used:    1
 10205 ;; Hardware stack levels required when called:    7
 10206 ;; This function calls:
 10207 ;;		Nothing
 10208 ;; This function is called by:
 10209 ;;		_UI
 10210 ;; This function uses a non-reentrant model
 10211 ;;
 10212                           
 10213                           	psect	text34
 10214  0044F0                     __ptext34:
 10215                           	opt stack 0
 10216  0044F0                     ___awmod:
 10217                           	opt stack 22
 10218                           
 10219                           ;incstack = 0
 10220  0044F0  0E00               	movlw	0
 10221  0044F2  0100               	movlb	0	; () banked
 10222  0044F4  6F85               	movwf	___awmod@sign& (0+255),b
 10223                           
 10224                           ; BSR set to: 0
 10225  0044F6  0100               	movlb	0	; () banked
 10226  0044F8  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 10227  0044FA  D008               	goto	l8482
 10228                           
 10229                           ; BSR set to: 0
 10230  0044FC  0100               	movlb	0	; () banked
 10231  0044FE  6D80               	negf	___awmod@dividend& (0+255),b
 10232  004500  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10233  004502  B0D8               	btfsc	status,0,c
 10234  004504  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10235                           
 10236                           ; BSR set to: 0
 10237  004506  0E01               	movlw	1
 10238  004508  0100               	movlb	0	; () banked
 10239  00450A  6F85               	movwf	___awmod@sign& (0+255),b
 10240  00450C                     l8482:
 10241                           
 10242                           ; BSR set to: 0
 10243  00450C  0100               	movlb	0	; () banked
 10244  00450E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10245  004510  D005               	goto	l8486
 10246                           
 10247                           ; BSR set to: 0
 10248  004512  0100               	movlb	0	; () banked
 10249  004514  6D82               	negf	___awmod@divisor& (0+255),b
 10250  004516  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 10251  004518  B0D8               	btfsc	status,0,c
 10252  00451A  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 10253  00451C                     l8486:
 10254                           
 10255                           ; BSR set to: 0
 10256  00451C  0100               	movlb	0	; () banked
 10257  00451E  5182               	movf	___awmod@divisor& (0+255),w,b
 10258  004520  0100               	movlb	0	; () banked
 10259  004522  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 10260  004524  B4D8               	btfsc	status,2,c
 10261  004526  D026               	goto	l8502
 10262                           
 10263                           ; BSR set to: 0
 10264  004528  0E01               	movlw	1
 10265  00452A  0100               	movlb	0	; () banked
 10266  00452C  6F84               	movwf	___awmod@counter& (0+255),b
 10267  00452E  D006               	goto	l8492
 10268  004530                     l8490:
 10269                           
 10270                           ; BSR set to: 0
 10271  004530  0100               	movlb	0	; () banked
 10272  004532  90D8               	bcf	status,0,c
 10273  004534  3782               	rlcf	___awmod@divisor& (0+255),f,b
 10274  004536  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 10275  004538  0100               	movlb	0	; () banked
 10276  00453A  2B84               	incf	___awmod@counter& (0+255),f,b
 10277  00453C                     l8492:
 10278                           
 10279                           ; BSR set to: 0
 10280  00453C  0100               	movlb	0	; () banked
 10281  00453E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10282  004540  D7F7               	goto	l8490
 10283  004542                     l8494:
 10284                           
 10285                           ; BSR set to: 0
 10286  004542  0100               	movlb	0	; () banked
 10287  004544  5182               	movf	___awmod@divisor& (0+255),w,b
 10288  004546  0100               	movlb	0	; () banked
 10289  004548  5D80               	subwf	___awmod@dividend& (0+255),w,b
 10290  00454A  0100               	movlb	0	; () banked
 10291  00454C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10292  00454E  0100               	movlb	0	; () banked
 10293  004550  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 10294  004552  A0D8               	btfss	status,0,c
 10295  004554  D008               	goto	l8498
 10296                           
 10297                           ; BSR set to: 0
 10298  004556  0100               	movlb	0	; () banked
 10299  004558  5182               	movf	___awmod@divisor& (0+255),w,b
 10300  00455A  0100               	movlb	0	; () banked
 10301  00455C  5F80               	subwf	___awmod@dividend& (0+255),f,b
 10302  00455E  0100               	movlb	0	; () banked
 10303  004560  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10304  004562  0100               	movlb	0	; () banked
 10305  004564  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 10306  004566                     l8498:
 10307                           
 10308                           ; BSR set to: 0
 10309  004566  0100               	movlb	0	; () banked
 10310  004568  90D8               	bcf	status,0,c
 10311  00456A  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 10312  00456C  3382               	rrcf	___awmod@divisor& (0+255),f,b
 10313                           
 10314                           ; BSR set to: 0
 10315  00456E  0100               	movlb	0	; () banked
 10316  004570  2F84               	decfsz	___awmod@counter& (0+255),f,b
 10317  004572  D7E7               	goto	l8494
 10318  004574                     l8502:
 10319                           
 10320                           ; BSR set to: 0
 10321  004574  0100               	movlb	0	; () banked
 10322  004576  5185               	movf	___awmod@sign& (0+255),w,b
 10323  004578  0100               	movlb	0	; () banked
 10324  00457A  B4D8               	btfsc	status,2,c
 10325  00457C  D005               	goto	l8506
 10326                           
 10327                           ; BSR set to: 0
 10328  00457E  0100               	movlb	0	; () banked
 10329  004580  6D80               	negf	___awmod@dividend& (0+255),b
 10330  004582  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10331  004584  B0D8               	btfsc	status,0,c
 10332  004586  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10333  004588                     l8506:
 10334                           
 10335                           ; BSR set to: 0
 10336  004588  C080  F080         	movff	___awmod@dividend,?___awmod
 10337  00458C  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 10338  004590  0012               	return	
 10339  004592                     __end_of___awmod:
 10340                           	opt stack 0
 10341                           tblptru	equ	0xFF8
 10342                           tblptrh	equ	0xFF7
 10343                           tblptrl	equ	0xFF6
 10344                           tablat	equ	0xFF5
 10345                           prodh	equ	0xFF4
 10346                           prodl	equ	0xFF3
 10347                           intcon	equ	0xFF2
 10348                           intcon2	equ	0xFF1
 10349                           intcon3	equ	0xFF0
 10350                           postinc0	equ	0xFEE
 10351                           wreg	equ	0xFE8
 10352                           postdec1	equ	0xFE5
 10353                           fsr1l	equ	0xFE1
 10354                           indf2	equ	0xFDF
 10355                           postinc2	equ	0xFDE
 10356                           postdec2	equ	0xFDD
 10357                           fsr2h	equ	0xFDA
 10358                           fsr2l	equ	0xFD9
 10359                           status	equ	0xFD8
 10360                           
 10361 ;; *************** function ___awdiv *****************
 10362 ;; Defined at:
 10363 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10364 ;; Parameters:    Size  Location     Type
 10365 ;;  dividend        2    6[BANK0 ] int 
 10366 ;;  divisor         2    8[BANK0 ] int 
 10367 ;; Auto vars:     Size  Location     Type
 10368 ;;  quotient        2   12[BANK0 ] int 
 10369 ;;  sign            1   11[BANK0 ] unsigned char 
 10370 ;;  counter         1   10[BANK0 ] unsigned char 
 10371 ;; Return value:  Size  Location     Type
 10372 ;;                  2    6[BANK0 ] int 
 10373 ;; Registers used:
 10374 ;;		wreg, status,2, status,0
 10375 ;; Tracked objects:
 10376 ;;		On entry : 0/0
 10377 ;;		On exit  : 0/0
 10378 ;;		Unchanged: 0/0
 10379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10380 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10381 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10383 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10384 ;;Total ram usage:        8 bytes
 10385 ;; Hardware stack levels used:    1
 10386 ;; Hardware stack levels required when called:    7
 10387 ;; This function calls:
 10388 ;;		Nothing
 10389 ;; This function is called by:
 10390 ;;		_UI
 10391 ;; This function uses a non-reentrant model
 10392 ;;
 10393                           
 10394                           	psect	text35
 10395  004220                     __ptext35:
 10396                           	opt stack 0
 10397  004220                     ___awdiv:
 10398                           	opt stack 22
 10399                           
 10400                           ; BSR set to: 0
 10401                           ;incstack = 0
 10402  004220  0E00               	movlw	0
 10403  004222  0100               	movlb	0	; () banked
 10404  004224  6F8B               	movwf	___awdiv@sign& (0+255),b
 10405                           
 10406                           ; BSR set to: 0
 10407  004226  0100               	movlb	0	; () banked
 10408  004228  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10409  00422A  D008               	goto	l8438
 10410                           
 10411                           ; BSR set to: 0
 10412  00422C  0100               	movlb	0	; () banked
 10413  00422E  6D88               	negf	___awdiv@divisor& (0+255),b
 10414  004230  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 10415  004232  B0D8               	btfsc	status,0,c
 10416  004234  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 10417                           
 10418                           ; BSR set to: 0
 10419  004236  0E01               	movlw	1
 10420  004238  0100               	movlb	0	; () banked
 10421  00423A  6F8B               	movwf	___awdiv@sign& (0+255),b
 10422  00423C                     l8438:
 10423                           
 10424                           ; BSR set to: 0
 10425  00423C  0100               	movlb	0	; () banked
 10426  00423E  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 10427  004240  D008               	goto	l8444
 10428                           
 10429                           ; BSR set to: 0
 10430  004242  0100               	movlb	0	; () banked
 10431  004244  6D86               	negf	___awdiv@dividend& (0+255),b
 10432  004246  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 10433  004248  B0D8               	btfsc	status,0,c
 10434  00424A  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 10435                           
 10436                           ; BSR set to: 0
 10437  00424C  0E01               	movlw	1
 10438  00424E  0100               	movlb	0	; () banked
 10439  004250  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 10440  004252                     l8444:
 10441                           
 10442                           ; BSR set to: 0
 10443  004252  0E00               	movlw	0
 10444  004254  0100               	movlb	0	; () banked
 10445  004256  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10446  004258  0E00               	movlw	0
 10447  00425A  6F8C               	movwf	___awdiv@quotient& (0+255),b
 10448                           
 10449                           ; BSR set to: 0
 10450  00425C  0100               	movlb	0	; () banked
 10451  00425E  5188               	movf	___awdiv@divisor& (0+255),w,b
 10452  004260  0100               	movlb	0	; () banked
 10453  004262  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10454  004264  B4D8               	btfsc	status,2,c
 10455  004266  D02C               	goto	l8466
 10456                           
 10457                           ; BSR set to: 0
 10458  004268  0E01               	movlw	1
 10459  00426A  0100               	movlb	0	; () banked
 10460  00426C  6F8A               	movwf	___awdiv@counter& (0+255),b
 10461  00426E  D006               	goto	l8452
 10462  004270                     l8450:
 10463                           
 10464                           ; BSR set to: 0
 10465  004270  0100               	movlb	0	; () banked
 10466  004272  90D8               	bcf	status,0,c
 10467  004274  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 10468  004276  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10469  004278  0100               	movlb	0	; () banked
 10470  00427A  2B8A               	incf	___awdiv@counter& (0+255),f,b
 10471  00427C                     l8452:
 10472                           
 10473                           ; BSR set to: 0
 10474  00427C  0100               	movlb	0	; () banked
 10475  00427E  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10476  004280  D7F7               	goto	l8450
 10477  004282                     l8454:
 10478                           
 10479                           ; BSR set to: 0
 10480  004282  0100               	movlb	0	; () banked
 10481  004284  90D8               	bcf	status,0,c
 10482  004286  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 10483  004288  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10484                           
 10485                           ; BSR set to: 0
 10486  00428A  0100               	movlb	0	; () banked
 10487  00428C  5188               	movf	___awdiv@divisor& (0+255),w,b
 10488  00428E  0100               	movlb	0	; () banked
 10489  004290  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 10490  004292  0100               	movlb	0	; () banked
 10491  004294  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10492  004296  0100               	movlb	0	; () banked
 10493  004298  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10494  00429A  A0D8               	btfss	status,0,c
 10495  00429C  D00A               	goto	l8462
 10496                           
 10497                           ; BSR set to: 0
 10498  00429E  0100               	movlb	0	; () banked
 10499  0042A0  5188               	movf	___awdiv@divisor& (0+255),w,b
 10500  0042A2  0100               	movlb	0	; () banked
 10501  0042A4  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 10502  0042A6  0100               	movlb	0	; () banked
 10503  0042A8  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10504  0042AA  0100               	movlb	0	; () banked
 10505  0042AC  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10506                           
 10507                           ; BSR set to: 0
 10508  0042AE  0100               	movlb	0	; () banked
 10509  0042B0  818C               	bsf	___awdiv@quotient& (0+255),0,b
 10510  0042B2                     l8462:
 10511                           
 10512                           ; BSR set to: 0
 10513  0042B2  0100               	movlb	0	; () banked
 10514  0042B4  90D8               	bcf	status,0,c
 10515  0042B6  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10516  0042B8  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 10517                           
 10518                           ; BSR set to: 0
 10519  0042BA  0100               	movlb	0	; () banked
 10520  0042BC  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 10521  0042BE  D7E1               	goto	l8454
 10522  0042C0                     l8466:
 10523                           
 10524                           ; BSR set to: 0
 10525  0042C0  0100               	movlb	0	; () banked
 10526  0042C2  518B               	movf	___awdiv@sign& (0+255),w,b
 10527  0042C4  0100               	movlb	0	; () banked
 10528  0042C6  B4D8               	btfsc	status,2,c
 10529  0042C8  D005               	goto	l8470
 10530                           
 10531                           ; BSR set to: 0
 10532  0042CA  0100               	movlb	0	; () banked
 10533  0042CC  6D8C               	negf	___awdiv@quotient& (0+255),b
 10534  0042CE  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10535  0042D0  B0D8               	btfsc	status,0,c
 10536  0042D2  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10537  0042D4                     l8470:
 10538                           
 10539                           ; BSR set to: 0
 10540  0042D4  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 10541  0042D8  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 10542  0042DC  0012               	return	
 10543  0042DE                     __end_of___awdiv:
 10544                           	opt stack 0
 10545                           tblptru	equ	0xFF8
 10546                           tblptrh	equ	0xFF7
 10547                           tblptrl	equ	0xFF6
 10548                           tablat	equ	0xFF5
 10549                           prodh	equ	0xFF4
 10550                           prodl	equ	0xFF3
 10551                           intcon	equ	0xFF2
 10552                           intcon2	equ	0xFF1
 10553                           intcon3	equ	0xFF0
 10554                           postinc0	equ	0xFEE
 10555                           wreg	equ	0xFE8
 10556                           postdec1	equ	0xFE5
 10557                           fsr1l	equ	0xFE1
 10558                           indf2	equ	0xFDF
 10559                           postinc2	equ	0xFDE
 10560                           postdec2	equ	0xFDD
 10561                           fsr2h	equ	0xFDA
 10562                           fsr2l	equ	0xFD9
 10563                           status	equ	0xFD8
 10564                           
 10565 ;; *************** function _Test *****************
 10566 ;; Defined at:
 10567 ;;		line 30 in file "Test.c"
 10568 ;; Parameters:    Size  Location     Type
 10569 ;;		None
 10570 ;; Auto vars:     Size  Location     Type
 10571 ;;		None
 10572 ;; Return value:  Size  Location     Type
 10573 ;;                  1    wreg      void 
 10574 ;; Registers used:
 10575 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10576 ;; Tracked objects:
 10577 ;;		On entry : 0/0
 10578 ;;		On exit  : 0/0
 10579 ;;		Unchanged: 0/0
 10580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10583 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10584 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10585 ;;Total ram usage:        2 bytes
 10586 ;; Hardware stack levels used:    1
 10587 ;; Hardware stack levels required when called:   11
 10588 ;; This function calls:
 10589 ;;		_BlockerTest
 10590 ;;		_BothServos
 10591 ;;		_EEPROMTest
 10592 ;;		_PortTestDC
 10593 ;;		_PusherTest
 10594 ;;		_SpeedTest
 10595 ;;		_actuatorTest
 10596 ;;		_algorithmTest
 10597 ;;		_arm
 10598 ;;		_lcdInst
 10599 ;;		_printf
 10600 ;;		_sensorTest
 10601 ;; This function is called by:
 10602 ;;		_main
 10603 ;; This function uses a non-reentrant model
 10604 ;;
 10605                           
 10606                           	psect	text36
 10607  003CB0                     __ptext36:
 10608                           	opt stack 0
 10609  003CB0                     _Test:
 10610                           	opt stack 19
 10611                           
 10612                           ;Test.c: 32: while(machine_state == Testing_state){
 10613                           
 10614                           ; BSR set to: 0
 10615                           ;incstack = 0
 10616  003CB0  D07C               	goto	l9236
 10617  003CB2                     l9196:
 10618                           
 10619                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10620  003CB2  0E01               	movlw	1
 10621  003CB4  ECC5  F029         	call	_lcdInst
 10622  003CB8  0E68               	movlw	104
 10623  003CBA  0100               	movlb	0	; () banked
 10624  003CBC  6FC6               	movwf	??_Test& (0+255),b
 10625  003CBE  0EE4               	movlw	228
 10626  003CC0                     u9427:
 10627  003CC0  2EE8               	decfsz	wreg,f,c
 10628  003CC2  D7FE               	bra	u9427
 10629  003CC4  2FC6               	decfsz	??_Test& (0+255),f,b
 10630  003CC6  D7FC               	bra	u9427
 10631  003CC8  F000               	nop	
 10632  003CCA  0E80               	movlw	128
 10633  003CCC  ECC5  F029         	call	_lcdInst
 10634                           
 10635                           ;Test.c: 34: printf("2.SNR|4.HI|5.MED");
 10636  003CD0  0E81               	movlw	low STR_68
 10637  003CD2  0100               	movlb	0	; () banked
 10638  003CD4  6F8E               	movwf	printf@f& (0+255),b
 10639  003CD6  0EFC               	movlw	high STR_68
 10640  003CD8  0100               	movlb	0	; () banked
 10641  003CDA  6F8F               	movwf	(printf@f+1)& (0+255),b
 10642  003CDC  EC1B  F00B         	call	_printf	;wreg free
 10643                           
 10644                           ;Test.c: 35: lcdInst(0b11000000);;
 10645  003CE0  0EC0               	movlw	192
 10646  003CE2  ECC5  F029         	call	_lcdInst
 10647                           
 10648                           ;Test.c: 36: printf("B.PSH|8.SV|9.BLK");
 10649  003CE6  0E92               	movlw	low STR_69
 10650  003CE8  0100               	movlb	0	; () banked
 10651  003CEA  6F8E               	movwf	printf@f& (0+255),b
 10652  003CEC  0EFC               	movlw	high STR_69
 10653  003CEE  0100               	movlb	0	; () banked
 10654  003CF0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10655  003CF2  EC1B  F00B         	call	_printf	;wreg free
 10656  003CF6                     l1148:
 10657  003CF6  A281               	btfss	3969,1,c	;volatile
 10658  003CF8  D7FE               	goto	l1148
 10659                           
 10660                           ;Test.c: 38: var = PORTB >> 4;
 10661  003CFA  CF81 F0C6          	movff	3969,??_Test	;volatile
 10662  003CFE  0100               	movlb	0	; () banked
 10663  003D00  3BC6               	swapf	??_Test& (0+255),f,b
 10664  003D02  0E0F               	movlw	15
 10665  003D04  17C6               	andwf	??_Test& (0+255),f,b
 10666  003D06  0100               	movlb	0	; () banked
 10667  003D08  51C6               	movf	??_Test& (0+255),w,b
 10668  003D0A  0101               	movlb	1	; () banked
 10669  003D0C  6F3F               	movwf	_var& (0+255),b
 10670  003D0E  6B40               	clrf	(_var+1)& (0+255),b
 10671                           
 10672                           ; BSR set to: 1
 10673                           ;Test.c: 39: var++;
 10674  003D10  0101               	movlb	1	; () banked
 10675  003D12  4B3F               	infsnz	_var& (0+255),f,b
 10676  003D14  2B40               	incf	(_var+1)& (0+255),f,b
 10677  003D16                     l1151:
 10678  003D16  A281               	btfss	3969,1,c	;volatile
 10679  003D18  D01F               	goto	l9234
 10680  003D1A  D7FD               	goto	l1151
 10681  003D1C                     l9212:
 10682                           
 10683                           ;Test.c: 43: algorithmTest();
 10684  003D1C  EC43  F020         	call	_algorithmTest	;wreg free
 10685                           
 10686                           ;Test.c: 44: break;
 10687  003D20  D044               	goto	l9236
 10688  003D22                     l9214:
 10689                           
 10690                           ;Test.c: 46: sensorTest();
 10691  003D22  ECB0  F010         	call	_sensorTest	;wreg free
 10692                           
 10693                           ;Test.c: 47: break;
 10694  003D26  D041               	goto	l9236
 10695  003D28                     l9216:
 10696                           
 10697                           ;Test.c: 49: actuatorTest();
 10698  003D28  EC6D  F004         	call	_actuatorTest	;wreg free
 10699                           
 10700                           ;Test.c: 50: break;
 10701  003D2C  D03E               	goto	l9236
 10702  003D2E                     l9218:
 10703                           
 10704                           ;Test.c: 52: arm();
 10705  003D2E  ECDB  F01E         	call	_arm	;wreg free
 10706                           
 10707                           ;Test.c: 53: break;
 10708  003D32  D03B               	goto	l9236
 10709  003D34                     l9220:
 10710                           
 10711                           ;Test.c: 55: PortTestDC();
 10712  003D34  EC82  F025         	call	_PortTestDC	;wreg free
 10713                           
 10714                           ;Test.c: 56: break;
 10715  003D38  D038               	goto	l9236
 10716  003D3A                     l9222:
 10717                           
 10718                           ;Test.c: 59: SpeedTest();
 10719  003D3A  EC95  F023         	call	_SpeedTest	;wreg free
 10720                           
 10721                           ;Test.c: 60: break;
 10722  003D3E  D035               	goto	l9236
 10723  003D40                     l9224:
 10724                           
 10725                           ;Test.c: 62: EEPROMTest();
 10726  003D40  ECF7  F029         	call	_EEPROMTest	;wreg free
 10727                           
 10728                           ;Test.c: 63: break;
 10729  003D44  D032               	goto	l9236
 10730  003D46                     l9226:
 10731                           
 10732                           ;Test.c: 65: PusherTest();
 10733  003D46  EC7C  F017         	call	_PusherTest	;wreg free
 10734                           
 10735                           ;Test.c: 66: break;
 10736  003D4A  D02F               	goto	l9236
 10737  003D4C                     l9228:
 10738                           
 10739                           ;Test.c: 68: BothServos();
 10740  003D4C  EC37  F00D         	call	_BothServos	;wreg free
 10741                           
 10742                           ;Test.c: 69: break;
 10743  003D50  D02C               	goto	l9236
 10744  003D52                     l9230:
 10745                           
 10746                           ;Test.c: 71: BlockerTest();
 10747  003D52  EC66  F01C         	call	_BlockerTest	;wreg free
 10748                           
 10749                           ;Test.c: 75: }
 10750                           
 10751                           ;Test.c: 74: break;
 10752                           
 10753                           ;Test.c: 73: default:
 10754                           
 10755                           ;Test.c: 72: break;
 10756  003D56  D029               	goto	l9236
 10757  003D58                     l9234:
 10758  003D58  C13F  F0C6         	movff	_var,??_Test
 10759  003D5C  C140  F0C7         	movff	_var+1,??_Test+1
 10760                           
 10761                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10762                           ; Switch size 1, requested type "space"
 10763                           ; Number of cases is 1, Range of values is 0 to 0
 10764                           ; switch strategies available:
 10765                           ; Name         Instructions Cycles
 10766                           ; simple_byte            4     3 (average)
 10767                           ;	Chosen strategy is simple_byte
 10768  003D60  0100               	movlb	0	; () banked
 10769  003D62  51C7               	movf	(??_Test+1)& (0+255),w,b
 10770  003D64  0A00               	xorlw	0	; case 0
 10771  003D66  A4D8               	btfss	status,2,c
 10772  003D68  D020               	goto	l9236
 10773                           
 10774                           ; BSR set to: 0
 10775                           ; Switch size 1, requested type "space"
 10776                           ; Number of cases is 10, Range of values is 1 to 11
 10777                           ; switch strategies available:
 10778                           ; Name         Instructions Cycles
 10779                           ; simple_byte           31    16 (average)
 10780                           ;	Chosen strategy is simple_byte
 10781  003D6A  0100               	movlb	0	; () banked
 10782  003D6C  51C6               	movf	??_Test& (0+255),w,b
 10783  003D6E  0A01               	xorlw	1	; case 1
 10784  003D70  B4D8               	btfsc	status,2,c
 10785  003D72  D7D4               	goto	l9212
 10786  003D74  0A03               	xorlw	3	; case 2
 10787  003D76  B4D8               	btfsc	status,2,c
 10788  003D78  D7D4               	goto	l9214
 10789  003D7A  0A01               	xorlw	1	; case 3
 10790  003D7C  B4D8               	btfsc	status,2,c
 10791  003D7E  D7D4               	goto	l9216
 10792  003D80  0A07               	xorlw	7	; case 4
 10793  003D82  B4D8               	btfsc	status,2,c
 10794  003D84  D7D4               	goto	l9218
 10795  003D86  0A01               	xorlw	1	; case 5
 10796  003D88  B4D8               	btfsc	status,2,c
 10797  003D8A  D7D4               	goto	l9220
 10798  003D8C  0A03               	xorlw	3	; case 6
 10799  003D8E  B4D8               	btfsc	status,2,c
 10800  003D90  D7D4               	goto	l9222
 10801  003D92  0A01               	xorlw	1	; case 7
 10802  003D94  B4D8               	btfsc	status,2,c
 10803  003D96  D7D4               	goto	l9224
 10804  003D98  0A0F               	xorlw	15	; case 8
 10805  003D9A  B4D8               	btfsc	status,2,c
 10806  003D9C  D7D4               	goto	l9226
 10807  003D9E  0A02               	xorlw	2	; case 10
 10808  003DA0  B4D8               	btfsc	status,2,c
 10809  003DA2  D7D4               	goto	l9228
 10810  003DA4  0A01               	xorlw	1	; case 11
 10811  003DA6  B4D8               	btfsc	status,2,c
 10812  003DA8  D7D4               	goto	l9230
 10813  003DAA                     l9236:
 10814  003DAA  0E03               	movlw	3
 10815  003DAC  0100               	movlb	0	; () banked
 10816  003DAE  19FC               	xorwf	_machine_state& (0+255),w,b
 10817  003DB0  A4D8               	btfss	status,2,c
 10818  003DB2  0012               	return	
 10819  003DB4  D77E               	goto	l9196
 10820  003DB6                     __end_of_Test:
 10821                           	opt stack 0
 10822                           tblptru	equ	0xFF8
 10823                           tblptrh	equ	0xFF7
 10824                           tblptrl	equ	0xFF6
 10825                           tablat	equ	0xFF5
 10826                           prodh	equ	0xFF4
 10827                           prodl	equ	0xFF3
 10828                           intcon	equ	0xFF2
 10829                           intcon2	equ	0xFF1
 10830                           intcon3	equ	0xFF0
 10831                           postinc0	equ	0xFEE
 10832                           wreg	equ	0xFE8
 10833                           postdec1	equ	0xFE5
 10834                           fsr1l	equ	0xFE1
 10835                           indf2	equ	0xFDF
 10836                           postinc2	equ	0xFDE
 10837                           postdec2	equ	0xFDD
 10838                           fsr2h	equ	0xFDA
 10839                           fsr2l	equ	0xFD9
 10840                           status	equ	0xFD8
 10841                           
 10842 ;; *************** function _sensorTest *****************
 10843 ;; Defined at:
 10844 ;;		line 123 in file "Test.c"
 10845 ;; Parameters:    Size  Location     Type
 10846 ;;		None
 10847 ;; Auto vars:     Size  Location     Type
 10848 ;;  res             2   45[BANK0 ] int 
 10849 ;; Return value:  Size  Location     Type
 10850 ;;                  1    wreg      void 
 10851 ;; Registers used:
 10852 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10853 ;; Tracked objects:
 10854 ;;		On entry : 0/0
 10855 ;;		On exit  : 0/0
 10856 ;;		Unchanged: 0/0
 10857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10859 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10860 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10861 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10862 ;;Total ram usage:        4 bytes
 10863 ;; Hardware stack levels used:    1
 10864 ;; Hardware stack levels required when called:   10
 10865 ;; This function calls:
 10866 ;;		_lcdInst
 10867 ;;		_printf
 10868 ;;		_readADC
 10869 ;;		_readMAG
 10870 ;; This function is called by:
 10871 ;;		_Test
 10872 ;; This function uses a non-reentrant model
 10873 ;;
 10874                           
 10875                           	psect	text37
 10876  002160                     __ptext37:
 10877                           	opt stack 0
 10878  002160                     _sensorTest:
 10879                           	opt stack 19
 10880                           
 10881                           ;Test.c: 125: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10882                           
 10883                           ; BSR set to: 0
 10884                           ;incstack = 0
 10885  002160  0E01               	movlw	1
 10886  002162  ECC5  F029         	call	_lcdInst
 10887  002166  0E68               	movlw	104
 10888  002168  0100               	movlb	0	; () banked
 10889  00216A  6FAB               	movwf	??_sensorTest& (0+255),b
 10890  00216C  0EE4               	movlw	228
 10891  00216E                     u9437:
 10892  00216E  2EE8               	decfsz	wreg,f,c
 10893  002170  D7FE               	bra	u9437
 10894  002172  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10895  002174  D7FC               	bra	u9437
 10896  002176  F000               	nop	
 10897  002178  0E80               	movlw	128
 10898  00217A  ECC5  F029         	call	_lcdInst
 10899                           
 10900                           ;Test.c: 126: printf("SENSORS");
 10901  00217E  0EAE               	movlw	low STR_77
 10902  002180  0100               	movlb	0	; () banked
 10903  002182  6F8E               	movwf	printf@f& (0+255),b
 10904  002184  0EFF               	movlw	high STR_77
 10905  002186  0100               	movlb	0	; () banked
 10906  002188  6F8F               	movwf	(printf@f+1)& (0+255),b
 10907  00218A  EC1B  F00B         	call	_printf	;wreg free
 10908                           
 10909                           ;Test.c: 127: lcdInst(0b11000000);;
 10910  00218E  0EC0               	movlw	192
 10911  002190  ECC5  F029         	call	_lcdInst
 10912                           
 10913                           ;Test.c: 128: printf("PUSH TO START");
 10914  002194  0E0B               	movlw	low STR_71
 10915  002196  0100               	movlb	0	; () banked
 10916  002198  6F8E               	movwf	printf@f& (0+255),b
 10917  00219A  0EFF               	movlw	high STR_71
 10918  00219C  0100               	movlb	0	; () banked
 10919  00219E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10920  0021A0  EC1B  F00B         	call	_printf	;wreg free
 10921                           
 10922                           ;Test.c: 129: _delay((unsigned long)((100)*(32000000/4000.0)));
 10923  0021A4  0E05               	movlw	5
 10924  0021A6  0100               	movlb	0	; () banked
 10925  0021A8  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10926  0021AA  0E0F               	movlw	15
 10927  0021AC  0100               	movlb	0	; () banked
 10928  0021AE  6FAB               	movwf	??_sensorTest& (0+255),b
 10929  0021B0  0EF1               	movlw	241
 10930  0021B2                     u9447:
 10931  0021B2  2EE8               	decfsz	wreg,f,c
 10932  0021B4  D7FE               	bra	u9447
 10933  0021B6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10934  0021B8  D7FC               	bra	u9447
 10935  0021BA  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10936  0021BC  D7FA               	bra	u9447
 10937  0021BE                     l1180:
 10938  0021BE  A281               	btfss	3969,1,c	;volatile
 10939  0021C0  D7FE               	goto	l1180
 10940  0021C2                     l1183:
 10941  0021C2  B281               	btfsc	3969,1,c	;volatile
 10942  0021C4  D7FE               	goto	l1183
 10943                           
 10944                           ;Test.c: 132: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10945  0021C6  0E01               	movlw	1
 10946  0021C8  ECC5  F029         	call	_lcdInst
 10947  0021CC  0E68               	movlw	104
 10948  0021CE  0100               	movlb	0	; () banked
 10949  0021D0  6FAB               	movwf	??_sensorTest& (0+255),b
 10950  0021D2  0EE4               	movlw	228
 10951  0021D4                     u9457:
 10952  0021D4  2EE8               	decfsz	wreg,f,c
 10953  0021D6  D7FE               	bra	u9457
 10954  0021D8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10955  0021DA  D7FC               	bra	u9457
 10956  0021DC  F000               	nop	
 10957  0021DE  0E80               	movlw	128
 10958  0021E0  ECC5  F029         	call	_lcdInst
 10959                           
 10960                           ;Test.c: 137: printf("TST: IR SNSR");
 10961  0021E4  0E35               	movlw	low STR_79
 10962  0021E6  0100               	movlb	0	; () banked
 10963  0021E8  6F8E               	movwf	printf@f& (0+255),b
 10964  0021EA  0EFF               	movlw	high STR_79
 10965  0021EC  0100               	movlb	0	; () banked
 10966  0021EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10967  0021F0  EC1B  F00B         	call	_printf	;wreg free
 10968                           
 10969                           ;Test.c: 138: _delay((unsigned long)((100)*(32000000/4000.0)));
 10970  0021F4  0E05               	movlw	5
 10971  0021F6  0100               	movlb	0	; () banked
 10972  0021F8  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10973  0021FA  0E0F               	movlw	15
 10974  0021FC  0100               	movlb	0	; () banked
 10975  0021FE  6FAB               	movwf	??_sensorTest& (0+255),b
 10976  002200  0EF1               	movlw	241
 10977  002202                     u9467:
 10978  002202  2EE8               	decfsz	wreg,f,c
 10979  002204  D7FE               	bra	u9467
 10980  002206  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10981  002208  D7FC               	bra	u9467
 10982  00220A  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10983  00220C  D7FA               	bra	u9467
 10984                           
 10985                           ;Test.c: 139: LATCbits.LATC5 = 1;
 10986  00220E  8A8B               	bsf	3979,5,c	;volatile
 10987                           
 10988                           ;Test.c: 141: while(PORTBbits.RB1 == 0){
 10989  002210  D05C               	goto	l7630
 10990  002212                     l7612:
 10991                           
 10992                           ;Test.c: 142: readADC(0);
 10993  002212  0E00               	movlw	0
 10994  002214  ECBC  F028         	call	_readADC
 10995                           
 10996                           ;Test.c: 143: int res = ADRESH<<8 | ADRESL;
 10997  002218  50C3               	movf	4035,w,c	;volatile
 10998  00221A  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 10999  00221E  0100               	movlb	0	; () banked
 11000  002220  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 11001  002222  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 11002  002226  0100               	movlb	0	; () banked
 11003  002228  6BAB               	clrf	??_sensorTest& (0+255),b
 11004  00222A  0100               	movlb	0	; () banked
 11005  00222C  11AB               	iorwf	??_sensorTest& (0+255),w,b
 11006  00222E  0100               	movlb	0	; () banked
 11007  002230  6FAD               	movwf	sensorTest@res& (0+255),b
 11008  002232  0100               	movlb	0	; () banked
 11009  002234  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 11010  002236  0100               	movlb	0	; () banked
 11011  002238  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 11012                           
 11013                           ; BSR set to: 0
 11014                           ;Test.c: 144: IR_signal = (res > 800) ? 1 : 0;
 11015  00223A  0100               	movlb	0	; () banked
 11016  00223C  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 11017  00223E  D00A               	goto	u6220
 11018  002240  0E21               	movlw	33
 11019  002242  0100               	movlb	0	; () banked
 11020  002244  5DAD               	subwf	sensorTest@res& (0+255),w,b
 11021  002246  0E03               	movlw	3
 11022  002248  0100               	movlb	0	; () banked
 11023  00224A  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 11024  00224C  A0D8               	btfss	status,0,c
 11025  00224E  D002               	goto	u6220
 11026  002250  0E01               	movlw	1
 11027  002252  D001               	goto	u6230
 11028  002254                     u6220:
 11029  002254  0E00               	movlw	0
 11030  002256                     u6230:
 11031  002256  0100               	movlb	0	; () banked
 11032  002258  6FE6               	movwf	_IR_signal& (0+255),b
 11033  00225A  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 11034                           
 11035                           ;Test.c: 146: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11036  00225C  0E01               	movlw	1
 11037  00225E  ECC5  F029         	call	_lcdInst
 11038  002262  0E68               	movlw	104
 11039  002264  0100               	movlb	0	; () banked
 11040  002266  6FAB               	movwf	??_sensorTest& (0+255),b
 11041  002268  0EE4               	movlw	228
 11042  00226A                     u9477:
 11043  00226A  2EE8               	decfsz	wreg,f,c
 11044  00226C  D7FE               	bra	u9477
 11045  00226E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11046  002270  D7FC               	bra	u9477
 11047  002272  F000               	nop	
 11048  002274  0E80               	movlw	128
 11049  002276  ECC5  F029         	call	_lcdInst
 11050                           
 11051                           ;Test.c: 147: printf("IR_signal: %d ", IR_signal);
 11052  00227A  0E5A               	movlw	low STR_80
 11053  00227C  0100               	movlb	0	; () banked
 11054  00227E  6F8E               	movwf	printf@f& (0+255),b
 11055  002280  0EFE               	movlw	high STR_80
 11056  002282  0100               	movlb	0	; () banked
 11057  002284  6F8F               	movwf	(printf@f+1)& (0+255),b
 11058  002286  C0E6  F090         	movff	_IR_signal,?_printf+2
 11059  00228A  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 11060  00228E  EC1B  F00B         	call	_printf	;wreg free
 11061                           
 11062                           ;Test.c: 148: lcdInst(0b11000000);;
 11063  002292  0EC0               	movlw	192
 11064  002294  ECC5  F029         	call	_lcdInst
 11065                           
 11066                           ;Test.c: 149: printf("%d", res);
 11067  002298  0E16               	movlw	low (STR_27+14)
 11068  00229A  0100               	movlb	0	; () banked
 11069  00229C  6F8E               	movwf	printf@f& (0+255),b
 11070  00229E  0EFE               	movlw	high (STR_27+14)
 11071  0022A0  0100               	movlb	0	; () banked
 11072  0022A2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11073  0022A4  C0AD  F090         	movff	sensorTest@res,?_printf+2
 11074  0022A8  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 11075  0022AC  EC1B  F00B         	call	_printf	;wreg free
 11076                           
 11077                           ;Test.c: 150: _delay((unsigned long)((100)*(32000000/4000.0)));
 11078  0022B0  0E05               	movlw	5
 11079  0022B2  0100               	movlb	0	; () banked
 11080  0022B4  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11081  0022B6  0E0F               	movlw	15
 11082  0022B8  0100               	movlb	0	; () banked
 11083  0022BA  6FAB               	movwf	??_sensorTest& (0+255),b
 11084  0022BC  0EF1               	movlw	241
 11085  0022BE                     u9487:
 11086  0022BE  2EE8               	decfsz	wreg,f,c
 11087  0022C0  D7FE               	bra	u9487
 11088  0022C2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11089  0022C4  D7FC               	bra	u9487
 11090  0022C6  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11091  0022C8  D7FA               	bra	u9487
 11092  0022CA                     l7630:
 11093  0022CA  A281               	btfss	3969,1,c	;volatile
 11094  0022CC  D7A2               	goto	l7612
 11095                           
 11096                           ;Test.c: 151: }
 11097                           ;Test.c: 152: LATCbits.LATC5 = 0;
 11098  0022CE  9A8B               	bcf	3979,5,c	;volatile
 11099                           
 11100                           ;Test.c: 160: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11101  0022D0  0E01               	movlw	1
 11102  0022D2  ECC5  F029         	call	_lcdInst
 11103  0022D6  0E68               	movlw	104
 11104  0022D8  0100               	movlb	0	; () banked
 11105  0022DA  6FAB               	movwf	??_sensorTest& (0+255),b
 11106  0022DC  0EE4               	movlw	228
 11107  0022DE                     u9497:
 11108  0022DE  2EE8               	decfsz	wreg,f,c
 11109  0022E0  D7FE               	bra	u9497
 11110  0022E2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11111  0022E4  D7FC               	bra	u9497
 11112  0022E6  F000               	nop	
 11113  0022E8  0E80               	movlw	128
 11114  0022EA  ECC5  F029         	call	_lcdInst
 11115                           
 11116                           ;Test.c: 161: printf("TST: MAGNETISM");
 11117  0022EE  0E87               	movlw	low STR_82
 11118  0022F0  0100               	movlb	0	; () banked
 11119  0022F2  6F8E               	movwf	printf@f& (0+255),b
 11120  0022F4  0EFE               	movlw	high STR_82
 11121  0022F6  0100               	movlb	0	; () banked
 11122  0022F8  6F8F               	movwf	(printf@f+1)& (0+255),b
 11123  0022FA  EC1B  F00B         	call	_printf	;wreg free
 11124                           
 11125                           ;Test.c: 162: _delay((unsigned long)((100)*(32000000/4000.0)));
 11126  0022FE  0E05               	movlw	5
 11127  002300  0100               	movlb	0	; () banked
 11128  002302  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11129  002304  0E0F               	movlw	15
 11130  002306  0100               	movlb	0	; () banked
 11131  002308  6FAB               	movwf	??_sensorTest& (0+255),b
 11132  00230A  0EF1               	movlw	241
 11133  00230C                     u9507:
 11134  00230C  2EE8               	decfsz	wreg,f,c
 11135  00230E  D7FE               	bra	u9507
 11136  002310  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11137  002312  D7FC               	bra	u9507
 11138  002314  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11139  002316  D7FA               	bra	u9507
 11140                           
 11141                           ;Test.c: 163: while(PORTBbits.RB1 == 0){
 11142  002318  D021               	goto	l7648
 11143  00231A                     l7642:
 11144                           
 11145                           ;Test.c: 164: readMAG();
 11146  00231A  EC7E  F026         	call	_readMAG	;wreg free
 11147                           
 11148                           ;Test.c: 165: lcdInst(0b10000000);;
 11149  00231E  0E80               	movlw	128
 11150  002320  ECC5  F029         	call	_lcdInst
 11151                           
 11152                           ;Test.c: 166: lcdInst(0b11000000);;
 11153  002324  0EC0               	movlw	192
 11154  002326  ECC5  F029         	call	_lcdInst
 11155                           
 11156                           ;Test.c: 167: printf("MAG_signal: %d ", MAG_signal);
 11157  00232A  0E2A               	movlw	low STR_83
 11158  00232C  0100               	movlb	0	; () banked
 11159  00232E  6F8E               	movwf	printf@f& (0+255),b
 11160  002330  0EFE               	movlw	high STR_83
 11161  002332  0100               	movlb	0	; () banked
 11162  002334  6F8F               	movwf	(printf@f+1)& (0+255),b
 11163  002336  C0E8  F090         	movff	_MAG_signal,?_printf+2
 11164  00233A  C0E9  F091         	movff	_MAG_signal+1,?_printf+3
 11165  00233E  EC1B  F00B         	call	_printf	;wreg free
 11166                           
 11167                           ;Test.c: 168: _delay((unsigned long)((100)*(32000000/4000.0)));
 11168  002342  0E05               	movlw	5
 11169  002344  0100               	movlb	0	; () banked
 11170  002346  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11171  002348  0E0F               	movlw	15
 11172  00234A  0100               	movlb	0	; () banked
 11173  00234C  6FAB               	movwf	??_sensorTest& (0+255),b
 11174  00234E  0EF1               	movlw	241
 11175  002350                     u9517:
 11176  002350  2EE8               	decfsz	wreg,f,c
 11177  002352  D7FE               	bra	u9517
 11178  002354  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11179  002356  D7FC               	bra	u9517
 11180  002358  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11181  00235A  D7FA               	bra	u9517
 11182  00235C                     l7648:
 11183  00235C  A281               	btfss	3969,1,c	;volatile
 11184  00235E  D7DD               	goto	l7642
 11185                           
 11186                           ;Test.c: 169: }
 11187                           ;Test.c: 174: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11188  002360  0E01               	movlw	1
 11189  002362  ECC5  F029         	call	_lcdInst
 11190  002366  0E68               	movlw	104
 11191  002368  0100               	movlb	0	; () banked
 11192  00236A  6FAB               	movwf	??_sensorTest& (0+255),b
 11193  00236C  0EE4               	movlw	228
 11194  00236E                     u9527:
 11195  00236E  2EE8               	decfsz	wreg,f,c
 11196  002370  D7FE               	bra	u9527
 11197  002372  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11198  002374  D7FC               	bra	u9527
 11199  002376  F000               	nop	
 11200  002378  0E80               	movlw	128
 11201  00237A  ECC5  F029         	call	_lcdInst
 11202                           
 11203                           ;Test.c: 175: printf("TST: COND");
 11204  00237E  0E87               	movlw	low STR_84
 11205  002380  0100               	movlb	0	; () banked
 11206  002382  6F8E               	movwf	printf@f& (0+255),b
 11207  002384  0EFF               	movlw	high STR_84
 11208  002386  0100               	movlb	0	; () banked
 11209  002388  6F8F               	movwf	(printf@f+1)& (0+255),b
 11210  00238A  EC1B  F00B         	call	_printf	;wreg free
 11211                           
 11212                           ;Test.c: 176: _delay((unsigned long)((100)*(32000000/4000.0)));
 11213  00238E  0E05               	movlw	5
 11214  002390  0100               	movlb	0	; () banked
 11215  002392  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11216  002394  0E0F               	movlw	15
 11217  002396  0100               	movlb	0	; () banked
 11218  002398  6FAB               	movwf	??_sensorTest& (0+255),b
 11219  00239A  0EF1               	movlw	241
 11220  00239C                     u9537:
 11221  00239C  2EE8               	decfsz	wreg,f,c
 11222  00239E  D7FE               	bra	u9537
 11223  0023A0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11224  0023A2  D7FC               	bra	u9537
 11225  0023A4  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11226  0023A6  D7FA               	bra	u9537
 11227  0023A8                     l7660:
 11228                           
 11229                           ;Test.c: 178: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11230  0023A8  0E01               	movlw	1
 11231  0023AA  ECC5  F029         	call	_lcdInst
 11232  0023AE  0E68               	movlw	104
 11233  0023B0  0100               	movlb	0	; () banked
 11234  0023B2  6FAB               	movwf	??_sensorTest& (0+255),b
 11235  0023B4  0EE4               	movlw	228
 11236  0023B6                     u9547:
 11237  0023B6  2EE8               	decfsz	wreg,f,c
 11238  0023B8  D7FE               	bra	u9547
 11239  0023BA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11240  0023BC  D7FC               	bra	u9547
 11241  0023BE  F000               	nop	
 11242  0023C0  0E80               	movlw	128
 11243  0023C2  ECC5  F029         	call	_lcdInst
 11244                           
 11245                           ;Test.c: 179: printf("TST: COND");
 11246  0023C6  0E87               	movlw	low STR_84
 11247  0023C8  0100               	movlb	0	; () banked
 11248  0023CA  6F8E               	movwf	printf@f& (0+255),b
 11249  0023CC  0EFF               	movlw	high STR_84
 11250  0023CE  0100               	movlb	0	; () banked
 11251  0023D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11252  0023D2  EC1B  F00B         	call	_printf	;wreg free
 11253                           
 11254                           ;Test.c: 180: while(PORTBbits.RB1 == 0){
 11255  0023D6  D01B               	goto	l7672
 11256  0023D8                     l7668:
 11257                           
 11258                           ;Test.c: 184: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11259  0023D8  0E80               	movlw	128
 11260  0023DA  ECC5  F029         	call	_lcdInst
 11261  0023DE  0EC0               	movlw	192
 11262  0023E0  ECC5  F029         	call	_lcdInst
 11263                           
 11264                           ;Test.c: 185: printf("COND: %d", PORTAbits.RA2);
 11265  0023E4  0EA5               	movlw	low STR_86
 11266  0023E6  0100               	movlb	0	; () banked
 11267  0023E8  6F8E               	movwf	printf@f& (0+255),b
 11268  0023EA  0EFF               	movlw	high STR_86
 11269  0023EC  0100               	movlb	0	; () banked
 11270  0023EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11271  0023F0  A480               	btfss	3968,2,c	;volatile
 11272  0023F2  D004               	goto	u6260
 11273  0023F4  0100               	movlb	0	; () banked
 11274  0023F6  6BAB               	clrf	??_sensorTest& (0+255),b
 11275  0023F8  2BAB               	incf	??_sensorTest& (0+255),f,b
 11276  0023FA  D002               	goto	u6268
 11277  0023FC                     u6260:
 11278  0023FC  0100               	movlb	0	; () banked
 11279  0023FE  6BAB               	clrf	??_sensorTest& (0+255),b
 11280  002400                     u6268:
 11281  002400  0100               	movlb	0	; () banked
 11282  002402  51AB               	movf	??_sensorTest& (0+255),w,b
 11283  002404  0100               	movlb	0	; () banked
 11284  002406  6F90               	movwf	(?_printf+2)& (0+255),b
 11285  002408  6B91               	clrf	(?_printf+3)& (0+255),b
 11286  00240A  EC1B  F00B         	call	_printf	;wreg free
 11287  00240E                     l7672:
 11288  00240E  A281               	btfss	3969,1,c	;volatile
 11289  002410  D7E3               	goto	l7668
 11290                           
 11291                           ;Test.c: 186: }
 11292                           ;Test.c: 187: if(PORTB >> 4 == 0b1111){
 11293  002412  3881               	swapf	3969,w,c	;volatile
 11294  002414  0B0F               	andlw	15
 11295  002416  0A0F               	xorlw	15
 11296  002418  B4D8               	btfsc	status,2,c
 11297  00241A  0012               	return	
 11298                           
 11299                           ;Test.c: 190: else{
 11300                           ;Test.c: 191: LATAbits.LATA3 = 1;
 11301                           
 11302                           ;Test.c: 189: }
 11303                           
 11304                           ;Test.c: 188: break;
 11305  00241C  8689               	bsf	3977,3,c	;volatile
 11306                           
 11307                           ;Test.c: 192: while(PORTBbits.RB1 == 1){
 11308  00241E  D01B               	goto	l7684
 11309  002420                     l7680:
 11310                           
 11311                           ;Test.c: 194: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11312  002420  0E80               	movlw	128
 11313  002422  ECC5  F029         	call	_lcdInst
 11314  002426  0EC0               	movlw	192
 11315  002428  ECC5  F029         	call	_lcdInst
 11316                           
 11317                           ;Test.c: 195: printf("COND: %d", PORTAbits.RA2);
 11318  00242C  0EA5               	movlw	low STR_86
 11319  00242E  0100               	movlb	0	; () banked
 11320  002430  6F8E               	movwf	printf@f& (0+255),b
 11321  002432  0EFF               	movlw	high STR_86
 11322  002434  0100               	movlb	0	; () banked
 11323  002436  6F8F               	movwf	(printf@f+1)& (0+255),b
 11324  002438  A480               	btfss	3968,2,c	;volatile
 11325  00243A  D004               	goto	u6290
 11326  00243C  0100               	movlb	0	; () banked
 11327  00243E  6BAB               	clrf	??_sensorTest& (0+255),b
 11328  002440  2BAB               	incf	??_sensorTest& (0+255),f,b
 11329  002442  D002               	goto	u6298
 11330  002444                     u6290:
 11331  002444  0100               	movlb	0	; () banked
 11332  002446  6BAB               	clrf	??_sensorTest& (0+255),b
 11333  002448                     u6298:
 11334  002448  0100               	movlb	0	; () banked
 11335  00244A  51AB               	movf	??_sensorTest& (0+255),w,b
 11336  00244C  0100               	movlb	0	; () banked
 11337  00244E  6F90               	movwf	(?_printf+2)& (0+255),b
 11338  002450  6B91               	clrf	(?_printf+3)& (0+255),b
 11339  002452  EC1B  F00B         	call	_printf	;wreg free
 11340  002456                     l7684:
 11341  002456  B281               	btfsc	3969,1,c	;volatile
 11342  002458  D7E3               	goto	l7680
 11343                           
 11344                           ;Test.c: 196: }
 11345                           ;Test.c: 197: LATAbits.LATA3 = !1;
 11346  00245A  9689               	bcf	3977,3,c	;volatile
 11347  00245C  D7A5               	goto	l7660
 11348  00245E                     __end_of_sensorTest:
 11349                           	opt stack 0
 11350                           tblptru	equ	0xFF8
 11351                           tblptrh	equ	0xFF7
 11352                           tblptrl	equ	0xFF6
 11353                           tablat	equ	0xFF5
 11354                           prodh	equ	0xFF4
 11355                           prodl	equ	0xFF3
 11356                           intcon	equ	0xFF2
 11357                           intcon2	equ	0xFF1
 11358                           intcon3	equ	0xFF0
 11359                           postinc0	equ	0xFEE
 11360                           wreg	equ	0xFE8
 11361                           postdec1	equ	0xFE5
 11362                           fsr1l	equ	0xFE1
 11363                           indf2	equ	0xFDF
 11364                           postinc2	equ	0xFDE
 11365                           postdec2	equ	0xFDD
 11366                           fsr2h	equ	0xFDA
 11367                           fsr2l	equ	0xFD9
 11368                           status	equ	0xFD8
 11369                           
 11370 ;; *************** function _readMAG *****************
 11371 ;; Defined at:
 11372 ;;		line 29 in file "ADCFunctionality.c"
 11373 ;; Parameters:    Size  Location     Type
 11374 ;;		None
 11375 ;; Auto vars:     Size  Location     Type
 11376 ;;  res             2    4[BANK0 ] int 
 11377 ;; Return value:  Size  Location     Type
 11378 ;;                  1    wreg      void 
 11379 ;; Registers used:
 11380 ;;		wreg, status,2, status,0, cstack
 11381 ;; Tracked objects:
 11382 ;;		On entry : 0/0
 11383 ;;		On exit  : 0/0
 11384 ;;		Unchanged: 0/0
 11385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11387 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11388 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11389 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11390 ;;Total ram usage:        4 bytes
 11391 ;; Hardware stack levels used:    1
 11392 ;; Hardware stack levels required when called:    8
 11393 ;; This function calls:
 11394 ;;		_readADC
 11395 ;; This function is called by:
 11396 ;;		_getMAG
 11397 ;;		_sensorTest
 11398 ;; This function uses a non-reentrant model
 11399 ;;
 11400                           
 11401                           	psect	text38
 11402  004CFC                     __ptext38:
 11403                           	opt stack 0
 11404  004CFC                     _readMAG:
 11405                           	opt stack 19
 11406                           
 11407                           ;ADCFunctionality.c: 30: readADC(1);
 11408                           
 11409                           ;incstack = 0
 11410  004CFC  0E01               	movlw	1
 11411  004CFE  ECBC  F028         	call	_readADC
 11412                           
 11413                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 11414  004D02  50C3               	movf	4035,w,c	;volatile
 11415  004D04  CFC4 F082          	movff	4036,??_readMAG	;volatile
 11416  004D08  0100               	movlb	0	; () banked
 11417  004D0A  6B83               	clrf	(??_readMAG+1)& (0+255),b
 11418  004D0C  C082  F083         	movff	??_readMAG,??_readMAG+1
 11419  004D10  0100               	movlb	0	; () banked
 11420  004D12  6B82               	clrf	??_readMAG& (0+255),b
 11421  004D14  0100               	movlb	0	; () banked
 11422  004D16  1182               	iorwf	??_readMAG& (0+255),w,b
 11423  004D18  0100               	movlb	0	; () banked
 11424  004D1A  6F84               	movwf	readMAG@res& (0+255),b
 11425  004D1C  0100               	movlb	0	; () banked
 11426  004D1E  5183               	movf	(??_readMAG+1)& (0+255),w,b
 11427  004D20  0100               	movlb	0	; () banked
 11428  004D22  6F85               	movwf	(readMAG@res+1)& (0+255),b
 11429                           
 11430                           ; BSR set to: 0
 11431                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 11432  004D24  0100               	movlb	0	; () banked
 11433  004D26  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 11434  004D28  D008               	goto	u4651
 11435  004D2A  0100               	movlb	0	; () banked
 11436  004D2C  5185               	movf	(readMAG@res+1)& (0+255),w,b
 11437  004D2E  E107               	bnz	u4650
 11438  004D30  0E96               	movlw	150
 11439  004D32  0100               	movlb	0	; () banked
 11440  004D34  5D84               	subwf	readMAG@res& (0+255),w,b
 11441  004D36  B0D8               	btfsc	status,0,c
 11442  004D38  D002               	goto	u4650
 11443  004D3A                     u4651:
 11444  004D3A  0E01               	movlw	1
 11445  004D3C  D001               	goto	u4660
 11446  004D3E                     u4650:
 11447  004D3E  0E00               	movlw	0
 11448  004D40                     u4660:
 11449  004D40  0100               	movlb	0	; () banked
 11450  004D42  6FE8               	movwf	_MAG_signal& (0+255),b
 11451  004D44  6BE9               	clrf	(_MAG_signal+1)& (0+255),b
 11452                           
 11453                           ; BSR set to: 0
 11454  004D46  0012               	return		;funcret
 11455  004D48                     __end_of_readMAG:
 11456                           	opt stack 0
 11457                           tblptru	equ	0xFF8
 11458                           tblptrh	equ	0xFF7
 11459                           tblptrl	equ	0xFF6
 11460                           tablat	equ	0xFF5
 11461                           prodh	equ	0xFF4
 11462                           prodl	equ	0xFF3
 11463                           intcon	equ	0xFF2
 11464                           intcon2	equ	0xFF1
 11465                           intcon3	equ	0xFF0
 11466                           postinc0	equ	0xFEE
 11467                           wreg	equ	0xFE8
 11468                           postdec1	equ	0xFE5
 11469                           fsr1l	equ	0xFE1
 11470                           indf2	equ	0xFDF
 11471                           postinc2	equ	0xFDE
 11472                           postdec2	equ	0xFDD
 11473                           fsr2h	equ	0xFDA
 11474                           fsr2l	equ	0xFD9
 11475                           status	equ	0xFD8
 11476                           
 11477 ;; *************** function _arm *****************
 11478 ;; Defined at:
 11479 ;;		line 603 in file "Test.c"
 11480 ;; Parameters:    Size  Location     Type
 11481 ;;		None
 11482 ;; Auto vars:     Size  Location     Type
 11483 ;;  on              2   44[BANK0 ] int 
 11484 ;; Return value:  Size  Location     Type
 11485 ;;                  1    wreg      void 
 11486 ;; Registers used:
 11487 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11488 ;; Tracked objects:
 11489 ;;		On entry : 0/0
 11490 ;;		On exit  : 0/0
 11491 ;;		Unchanged: 0/0
 11492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11494 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11495 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11496 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11497 ;;Total ram usage:        3 bytes
 11498 ;; Hardware stack levels used:    1
 11499 ;; Hardware stack levels required when called:   10
 11500 ;; This function calls:
 11501 ;;		_lcdInst
 11502 ;;		_printf
 11503 ;; This function is called by:
 11504 ;;		_Test
 11505 ;; This function uses a non-reentrant model
 11506 ;;
 11507                           
 11508                           	psect	text39
 11509  003DB6                     __ptext39:
 11510                           	opt stack 0
 11511  003DB6                     _arm:
 11512                           	opt stack 19
 11513                           
 11514                           ;Test.c: 604: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11515                           
 11516                           ; BSR set to: 0
 11517                           ;incstack = 0
 11518  003DB6  0E01               	movlw	1
 11519  003DB8  ECC5  F029         	call	_lcdInst
 11520  003DBC  0E68               	movlw	104
 11521  003DBE  0100               	movlb	0	; () banked
 11522  003DC0  6FAB               	movwf	??_arm& (0+255),b
 11523  003DC2  0EE4               	movlw	228
 11524  003DC4                     u9557:
 11525  003DC4  2EE8               	decfsz	wreg,f,c
 11526  003DC6  D7FE               	bra	u9557
 11527  003DC8  2FAB               	decfsz	??_arm& (0+255),f,b
 11528  003DCA  D7FC               	bra	u9557
 11529  003DCC  F000               	nop	
 11530  003DCE  0E80               	movlw	128
 11531  003DD0  ECC5  F029         	call	_lcdInst
 11532                           
 11533                           ;Test.c: 605: printf("D WILL RETURN   ");
 11534  003DD4  0E0A               	movlw	low STR_118
 11535  003DD6  0100               	movlb	0	; () banked
 11536  003DD8  6F8E               	movwf	printf@f& (0+255),b
 11537  003DDA  0EFC               	movlw	high STR_118
 11538  003DDC  0100               	movlb	0	; () banked
 11539  003DDE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11540  003DE0  EC1B  F00B         	call	_printf	;wreg free
 11541                           
 11542                           ;Test.c: 606: lcdInst(0b11000000);;
 11543  003DE4  0EC0               	movlw	192
 11544  003DE6  ECC5  F029         	call	_lcdInst
 11545                           
 11546                           ;Test.c: 607: printf("ELSE TOGGLES ARM");
 11547  003DEA  0EA3               	movlw	low STR_127
 11548  003DEC  0100               	movlb	0	; () banked
 11549  003DEE  6F8E               	movwf	printf@f& (0+255),b
 11550  003DF0  0EFC               	movlw	high STR_127
 11551  003DF2  0100               	movlb	0	; () banked
 11552  003DF4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11553  003DF6  EC1B  F00B         	call	_printf	;wreg free
 11554                           
 11555                           ;Test.c: 608: int on = 0;
 11556  003DFA  0E00               	movlw	0
 11557  003DFC  0100               	movlb	0	; () banked
 11558  003DFE  6FAD               	movwf	(arm@on+1)& (0+255),b
 11559  003E00  0E00               	movlw	0
 11560  003E02  6FAC               	movwf	arm@on& (0+255),b
 11561  003E04                     l8124:
 11562                           
 11563                           ;Test.c: 610: if(on){
 11564  003E04  0100               	movlb	0	; () banked
 11565  003E06  51AC               	movf	arm@on& (0+255),w,b
 11566  003E08  0100               	movlb	0	; () banked
 11567  003E0A  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11568  003E0C  B4D8               	btfsc	status,2,c
 11569  003E0E  D02B               	goto	l8138
 11570                           
 11571                           ; BSR set to: 0
 11572                           ;Test.c: 611: on = !on;
 11573  003E10  0100               	movlb	0	; () banked
 11574  003E12  51AC               	movf	arm@on& (0+255),w,b
 11575  003E14  0100               	movlb	0	; () banked
 11576  003E16  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11577  003E18  A4D8               	btfss	status,2,c
 11578  003E1A  D002               	goto	u6880
 11579  003E1C  0E01               	movlw	1
 11580  003E1E  D001               	goto	u6890
 11581  003E20                     u6880:
 11582  003E20  0E00               	movlw	0
 11583  003E22                     u6890:
 11584  003E22  0100               	movlb	0	; () banked
 11585  003E24  6FAC               	movwf	arm@on& (0+255),b
 11586  003E26  6BAD               	clrf	(arm@on+1)& (0+255),b
 11587                           
 11588                           ;Test.c: 612: while(PORTBbits.RB1 == 0){
 11589  003E28  D014               	goto	l8132
 11590  003E2A                     l1366:
 11591                           
 11592                           ;Test.c: 613: LATBbits.LATB3 = 1;
 11593  003E2A  868A               	bsf	3978,3,c	;volatile
 11594                           
 11595                           ;Test.c: 614: _delay((unsigned long)((1200)*(32000000/4000000.0)));
 11596  003E2C  0E0D               	movlw	13
 11597  003E2E  0100               	movlb	0	; () banked
 11598  003E30  6FAB               	movwf	??_arm& (0+255),b
 11599  003E32  0E76               	movlw	118
 11600  003E34                     u9567:
 11601  003E34  2EE8               	decfsz	wreg,f,c
 11602  003E36  D7FE               	bra	u9567
 11603  003E38  2FAB               	decfsz	??_arm& (0+255),f,b
 11604  003E3A  D7FC               	bra	u9567
 11605  003E3C  F000               	nop	
 11606                           
 11607                           ;Test.c: 615: LATBbits.LATB3 = 0;
 11608  003E3E  968A               	bcf	3978,3,c	;volatile
 11609                           
 11610                           ;Test.c: 616: _delay((unsigned long)((19)*(32000000/4000.0)));
 11611  003E40  0EC6               	movlw	198
 11612  003E42  0100               	movlb	0	; () banked
 11613  003E44  6FAB               	movwf	??_arm& (0+255),b
 11614  003E46  0E65               	movlw	101
 11615  003E48                     u9577:
 11616  003E48  2EE8               	decfsz	wreg,f,c
 11617  003E4A  D7FE               	bra	u9577
 11618  003E4C  2FAB               	decfsz	??_arm& (0+255),f,b
 11619  003E4E  D7FC               	bra	u9577
 11620  003E50  D000               	nop2	
 11621  003E52                     l8132:
 11622  003E52  A281               	btfss	3969,1,c	;volatile
 11623  003E54  D7EA               	goto	l1366
 11624                           
 11625                           ;Test.c: 617: }
 11626                           ;Test.c: 618: if(PORTB >> 4 == 0b1111){
 11627  003E56  3881               	swapf	3969,w,c	;volatile
 11628  003E58  0B0F               	andlw	15
 11629  003E5A  0A0F               	xorlw	15
 11630  003E5C  B4D8               	btfsc	status,2,c
 11631  003E5E  0012               	return	
 11632  003E60                     l1370:
 11633  003E60  A281               	btfss	3969,1,c	;volatile
 11634  003E62  D7D0               	goto	l8124
 11635  003E64  D7FD               	goto	l1370
 11636  003E66                     l8138:
 11637                           
 11638                           ;Test.c: 623: else{
 11639                           ;Test.c: 624: on = !on;
 11640  003E66  0100               	movlb	0	; () banked
 11641  003E68  51AC               	movf	arm@on& (0+255),w,b
 11642  003E6A  0100               	movlb	0	; () banked
 11643  003E6C  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11644  003E6E  A4D8               	btfss	status,2,c
 11645  003E70  D002               	goto	u6930
 11646  003E72  0E01               	movlw	1
 11647  003E74  D001               	goto	u6940
 11648  003E76                     u6930:
 11649  003E76  0E00               	movlw	0
 11650  003E78                     u6940:
 11651  003E78  0100               	movlb	0	; () banked
 11652  003E7A  6FAC               	movwf	arm@on& (0+255),b
 11653  003E7C  6BAD               	clrf	(arm@on+1)& (0+255),b
 11654                           
 11655                           ;Test.c: 625: while(PORTBbits.RB1 == 0){
 11656  003E7E  D014               	goto	l8144
 11657  003E80                     l1375:
 11658                           
 11659                           ;Test.c: 626: LATBbits.LATB3 = 1;
 11660  003E80  868A               	bsf	3978,3,c	;volatile
 11661                           
 11662                           ;Test.c: 627: _delay((unsigned long)((2400)*(32000000/4000000.0)));
 11663  003E82  0E19               	movlw	25
 11664  003E84  0100               	movlb	0	; () banked
 11665  003E86  6FAB               	movwf	??_arm& (0+255),b
 11666  003E88  0EEE               	movlw	238
 11667  003E8A                     u9587:
 11668  003E8A  2EE8               	decfsz	wreg,f,c
 11669  003E8C  D7FE               	bra	u9587
 11670  003E8E  2FAB               	decfsz	??_arm& (0+255),f,b
 11671  003E90  D7FC               	bra	u9587
 11672  003E92  F000               	nop	
 11673                           
 11674                           ;Test.c: 628: LATBbits.LATB3 = 0;
 11675  003E94  968A               	bcf	3978,3,c	;volatile
 11676                           
 11677                           ;Test.c: 629: _delay((unsigned long)((17)*(32000000/4000.0)));
 11678  003E96  0EB1               	movlw	177
 11679  003E98  0100               	movlb	0	; () banked
 11680  003E9A  6FAB               	movwf	??_arm& (0+255),b
 11681  003E9C  0E9E               	movlw	158
 11682  003E9E                     u9597:
 11683  003E9E  2EE8               	decfsz	wreg,f,c
 11684  003EA0  D7FE               	bra	u9597
 11685  003EA2  2FAB               	decfsz	??_arm& (0+255),f,b
 11686  003EA4  D7FC               	bra	u9597
 11687  003EA6  F000               	nop	
 11688  003EA8                     l8144:
 11689  003EA8  A281               	btfss	3969,1,c	;volatile
 11690  003EAA  D7EA               	goto	l1375
 11691                           
 11692                           ;Test.c: 630: }
 11693                           ;Test.c: 631: if(PORTB >> 4 == 0b1111){
 11694  003EAC  3881               	swapf	3969,w,c	;volatile
 11695  003EAE  0B0F               	andlw	15
 11696  003EB0  0A0F               	xorlw	15
 11697  003EB2  B4D8               	btfsc	status,2,c
 11698  003EB4  0012               	return	
 11699  003EB6                     l1378:
 11700  003EB6  A281               	btfss	3969,1,c	;volatile
 11701  003EB8  D7A5               	goto	l8124
 11702  003EBA  D7FD               	goto	l1378
 11703  003EBC                     __end_of_arm:
 11704                           	opt stack 0
 11705                           tblptru	equ	0xFF8
 11706                           tblptrh	equ	0xFF7
 11707                           tblptrl	equ	0xFF6
 11708                           tablat	equ	0xFF5
 11709                           prodh	equ	0xFF4
 11710                           prodl	equ	0xFF3
 11711                           intcon	equ	0xFF2
 11712                           intcon2	equ	0xFF1
 11713                           intcon3	equ	0xFF0
 11714                           postinc0	equ	0xFEE
 11715                           wreg	equ	0xFE8
 11716                           postdec1	equ	0xFE5
 11717                           fsr1l	equ	0xFE1
 11718                           indf2	equ	0xFDF
 11719                           postinc2	equ	0xFDE
 11720                           postdec2	equ	0xFDD
 11721                           fsr2h	equ	0xFDA
 11722                           fsr2l	equ	0xFD9
 11723                           status	equ	0xFD8
 11724                           
 11725 ;; *************** function _algorithmTest *****************
 11726 ;; Defined at:
 11727 ;;		line 79 in file "Test.c"
 11728 ;; Parameters:    Size  Location     Type
 11729 ;;		None
 11730 ;; Auto vars:     Size  Location     Type
 11731 ;;		None
 11732 ;; Return value:  Size  Location     Type
 11733 ;;                  1    wreg      void 
 11734 ;; Registers used:
 11735 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11736 ;; Tracked objects:
 11737 ;;		On entry : 0/0
 11738 ;;		On exit  : 0/0
 11739 ;;		Unchanged: 0/0
 11740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11743 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11744 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11745 ;;Total ram usage:        2 bytes
 11746 ;; Hardware stack levels used:    1
 11747 ;; Hardware stack levels required when called:   10
 11748 ;; This function calls:
 11749 ;;		_lcdInst
 11750 ;;		_printf
 11751 ;; This function is called by:
 11752 ;;		_Test
 11753 ;; This function uses a non-reentrant model
 11754 ;;
 11755                           
 11756                           	psect	text40
 11757  004086                     __ptext40:
 11758                           	opt stack 0
 11759  004086                     _algorithmTest:
 11760                           	opt stack 19
 11761                           
 11762                           ;Test.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11763                           
 11764                           ;incstack = 0
 11765  004086  0E01               	movlw	1
 11766  004088  ECC5  F029         	call	_lcdInst
 11767  00408C  0E68               	movlw	104
 11768  00408E  0100               	movlb	0	; () banked
 11769  004090  6FAB               	movwf	??_algorithmTest& (0+255),b
 11770  004092  0EE4               	movlw	228
 11771  004094                     u9607:
 11772  004094  2EE8               	decfsz	wreg,f,c
 11773  004096  D7FE               	bra	u9607
 11774  004098  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11775  00409A  D7FC               	bra	u9607
 11776  00409C  F000               	nop	
 11777  00409E  0E80               	movlw	128
 11778  0040A0  ECC5  F029         	call	_lcdInst
 11779                           
 11780                           ;Test.c: 82: printf("ALGORITHM TEST");
 11781  0040A4  0ED2               	movlw	low STR_70
 11782  0040A6  0100               	movlb	0	; () banked
 11783  0040A8  6F8E               	movwf	printf@f& (0+255),b
 11784  0040AA  0EFE               	movlw	high STR_70
 11785  0040AC  0100               	movlb	0	; () banked
 11786  0040AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11787  0040B0  EC1B  F00B         	call	_printf	;wreg free
 11788                           
 11789                           ;Test.c: 83: lcdInst(0b11000000);;
 11790  0040B4  0EC0               	movlw	192
 11791  0040B6  ECC5  F029         	call	_lcdInst
 11792                           
 11793                           ;Test.c: 84: printf("PUSH TO START");
 11794  0040BA  0E0B               	movlw	low STR_71
 11795  0040BC  0100               	movlb	0	; () banked
 11796  0040BE  6F8E               	movwf	printf@f& (0+255),b
 11797  0040C0  0EFF               	movlw	high STR_71
 11798  0040C2  0100               	movlb	0	; () banked
 11799  0040C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11800  0040C6  EC1B  F00B         	call	_printf	;wreg free
 11801                           
 11802                           ;Test.c: 85: _delay((unsigned long)((100)*(32000000/4000.0)));
 11803  0040CA  0E05               	movlw	5
 11804  0040CC  0100               	movlb	0	; () banked
 11805  0040CE  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 11806  0040D0  0E0F               	movlw	15
 11807  0040D2  0100               	movlb	0	; () banked
 11808  0040D4  6FAB               	movwf	??_algorithmTest& (0+255),b
 11809  0040D6  0EF1               	movlw	241
 11810  0040D8                     u9617:
 11811  0040D8  2EE8               	decfsz	wreg,f,c
 11812  0040DA  D7FE               	bra	u9617
 11813  0040DC  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11814  0040DE  D7FC               	bra	u9617
 11815  0040E0  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 11816  0040E2  D7FA               	bra	u9617
 11817  0040E4                     l1171:
 11818  0040E4  A281               	btfss	3969,1,c	;volatile
 11819  0040E6  D7FE               	goto	l1171
 11820  0040E8                     l1174:
 11821  0040E8  B281               	btfsc	3969,1,c	;volatile
 11822  0040EA  D7FE               	goto	l1174
 11823                           
 11824                           ;Test.c: 88: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11825  0040EC  0E01               	movlw	1
 11826  0040EE  ECC5  F029         	call	_lcdInst
 11827  0040F2  0E68               	movlw	104
 11828  0040F4  0100               	movlb	0	; () banked
 11829  0040F6  6FAB               	movwf	??_algorithmTest& (0+255),b
 11830  0040F8  0EE4               	movlw	228
 11831  0040FA                     u9627:
 11832  0040FA  2EE8               	decfsz	wreg,f,c
 11833  0040FC  D7FE               	bra	u9627
 11834  0040FE  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11835  004100  D7FC               	bra	u9627
 11836  004102  F000               	nop	
 11837  004104  0E80               	movlw	128
 11838  004106  ECC5  F029         	call	_lcdInst
 11839                           
 11840                           ;Test.c: 93: printf("ALG1: 9 POPNOTAB");
 11841  00410A  0E4E               	movlw	low STR_72
 11842  00410C  0100               	movlb	0	; () banked
 11843  00410E  6F8E               	movwf	printf@f& (0+255),b
 11844  004110  0EFC               	movlw	high STR_72
 11845  004112  0100               	movlb	0	; () banked
 11846  004114  6F8F               	movwf	(printf@f+1)& (0+255),b
 11847  004116  EC1B  F00B         	call	_printf	;wreg free
 11848                           
 11849                           ;Test.c: 100: printf("ALG2: 12 CANS");
 11850  00411A  0EEF               	movlw	low STR_73
 11851  00411C  0100               	movlb	0	; () banked
 11852  00411E  6F8E               	movwf	printf@f& (0+255),b
 11853  004120  0EFE               	movlw	high STR_73
 11854  004122  0100               	movlb	0	; () banked
 11855  004124  6F8F               	movwf	(printf@f+1)& (0+255),b
 11856  004126  EC1B  F00B         	call	_printf	;wreg free
 11857                           
 11858                           ;Test.c: 109: printf("ALG3: 1 CAN");
 11859  00412A  0E4F               	movlw	low STR_74
 11860  00412C  0100               	movlb	0	; () banked
 11861  00412E  6F8E               	movwf	printf@f& (0+255),b
 11862  004130  0EFF               	movlw	high STR_74
 11863  004132  0100               	movlb	0	; () banked
 11864  004134  6F8F               	movwf	(printf@f+1)& (0+255),b
 11865  004136  EC1B  F00B         	call	_printf	;wreg free
 11866                           
 11867                           ;Test.c: 115: printf("ALG4: ALL CANS");
 11868  00413A  0EB4               	movlw	low STR_75
 11869  00413C  0100               	movlb	0	; () banked
 11870  00413E  6F8E               	movwf	printf@f& (0+255),b
 11871  004140  0EFE               	movlw	high STR_75
 11872  004142  0100               	movlb	0	; () banked
 11873  004144  6F8F               	movwf	(printf@f+1)& (0+255),b
 11874  004146  EC1B  F00B         	call	_printf	;wreg free
 11875                           
 11876                           ;Test.c: 120: printf("ALG5: NO CANS");
 11877  00414A  0EFD               	movlw	low STR_76
 11878  00414C  0100               	movlb	0	; () banked
 11879  00414E  6F8E               	movwf	printf@f& (0+255),b
 11880  004150  0EFE               	movlw	high STR_76
 11881  004152  0100               	movlb	0	; () banked
 11882  004154  6F8F               	movwf	(printf@f+1)& (0+255),b
 11883  004156  EC1B  F00B         	call	_printf	;wreg free
 11884  00415A  0012               	return		;funcret
 11885  00415C                     __end_of_algorithmTest:
 11886                           	opt stack 0
 11887                           tblptru	equ	0xFF8
 11888                           tblptrh	equ	0xFF7
 11889                           tblptrl	equ	0xFF6
 11890                           tablat	equ	0xFF5
 11891                           prodh	equ	0xFF4
 11892                           prodl	equ	0xFF3
 11893                           intcon	equ	0xFF2
 11894                           intcon2	equ	0xFF1
 11895                           intcon3	equ	0xFF0
 11896                           postinc0	equ	0xFEE
 11897                           wreg	equ	0xFE8
 11898                           postdec1	equ	0xFE5
 11899                           fsr1l	equ	0xFE1
 11900                           indf2	equ	0xFDF
 11901                           postinc2	equ	0xFDE
 11902                           postdec2	equ	0xFDD
 11903                           fsr2h	equ	0xFDA
 11904                           fsr2l	equ	0xFD9
 11905                           status	equ	0xFD8
 11906                           
 11907 ;; *************** function _actuatorTest *****************
 11908 ;; Defined at:
 11909 ;;		line 202 in file "Test.c"
 11910 ;; Parameters:    Size  Location     Type
 11911 ;;		None
 11912 ;; Auto vars:     Size  Location     Type
 11913 ;;  i               1   45[BANK0 ] unsigned char 
 11914 ;;  i               1   67[BANK0 ] unsigned char 
 11915 ;;  i               1   66[BANK0 ] unsigned char 
 11916 ;;  i               1   65[BANK0 ] unsigned char 
 11917 ;;  i               1   64[BANK0 ] unsigned char 
 11918 ;;  i               1   63[BANK0 ] unsigned char 
 11919 ;;  i               1   62[BANK0 ] unsigned char 
 11920 ;;  i               1   61[BANK0 ] unsigned char 
 11921 ;;  i               1   60[BANK0 ] unsigned char 
 11922 ;;  i               1   59[BANK0 ] unsigned char 
 11923 ;;  i               1   58[BANK0 ] unsigned char 
 11924 ;;  i               1   57[BANK0 ] unsigned char 
 11925 ;;  i               1   56[BANK0 ] unsigned char 
 11926 ;;  i               1   55[BANK0 ] unsigned char 
 11927 ;;  i               1   54[BANK0 ] unsigned char 
 11928 ;;  i               1   53[BANK0 ] unsigned char 
 11929 ;;  i               1   52[BANK0 ] unsigned char 
 11930 ;;  i               1   51[BANK0 ] unsigned char 
 11931 ;;  i               1   50[BANK0 ] unsigned char 
 11932 ;;  i               1   49[BANK0 ] unsigned char 
 11933 ;;  i               1   48[BANK0 ] unsigned char 
 11934 ;;  i               1   47[BANK0 ] unsigned char 
 11935 ;;  i               1   46[BANK0 ] unsigned char 
 11936 ;;  i               2   68[BANK0 ] int 
 11937 ;; Return value:  Size  Location     Type
 11938 ;;                  1    wreg      void 
 11939 ;; Registers used:
 11940 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11941 ;; Tracked objects:
 11942 ;;		On entry : 0/0
 11943 ;;		On exit  : 0/0
 11944 ;;		Unchanged: 0/0
 11945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11947 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11948 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11949 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11950 ;;Total ram usage:       27 bytes
 11951 ;; Hardware stack levels used:    1
 11952 ;; Hardware stack levels required when called:   10
 11953 ;; This function calls:
 11954 ;;		_lcdInst
 11955 ;;		_printf
 11956 ;;		_updateServoPosition
 11957 ;; This function is called by:
 11958 ;;		_Test
 11959 ;; This function uses a non-reentrant model
 11960 ;;
 11961                           
 11962                           	psect	text41
 11963  0008DA                     __ptext41:
 11964                           	opt stack 0
 11965  0008DA                     _actuatorTest:
 11966                           	opt stack 19
 11967                           
 11968                           ;Test.c: 204: int i = 0;
 11969                           
 11970                           ;incstack = 0
 11971  0008DA  0E00               	movlw	0
 11972  0008DC  0100               	movlb	0	; () banked
 11973  0008DE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11974  0008E0  0E00               	movlw	0
 11975  0008E2  6FC4               	movwf	actuatorTest@i& (0+255),b
 11976                           
 11977                           ; BSR set to: 0
 11978                           ;Test.c: 206: (INTCONbits.GIE = 1);
 11979  0008E4  8EF2               	bsf	intcon,7,c	;volatile
 11980                           
 11981                           ; BSR set to: 0
 11982                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11983  0008E6  0E01               	movlw	1
 11984  0008E8  ECC5  F029         	call	_lcdInst
 11985  0008EC  0E68               	movlw	104
 11986  0008EE  0100               	movlb	0	; () banked
 11987  0008F0  6FAB               	movwf	??_actuatorTest& (0+255),b
 11988  0008F2  0EE4               	movlw	228
 11989  0008F4                     u9637:
 11990  0008F4  2EE8               	decfsz	wreg,f,c
 11991  0008F6  D7FE               	bra	u9637
 11992  0008F8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11993  0008FA  D7FC               	bra	u9637
 11994  0008FC  F000               	nop	
 11995  0008FE  0E80               	movlw	128
 11996  000900  ECC5  F029         	call	_lcdInst
 11997                           
 11998                           ;Test.c: 208: printf("ACTUATORS");
 11999  000904  0E91               	movlw	low STR_88
 12000  000906  0100               	movlb	0	; () banked
 12001  000908  6F8E               	movwf	printf@f& (0+255),b
 12002  00090A  0EFF               	movlw	high STR_88
 12003  00090C  0100               	movlb	0	; () banked
 12004  00090E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12005  000910  EC1B  F00B         	call	_printf	;wreg free
 12006                           
 12007                           ;Test.c: 209: lcdInst(0b11000000);;
 12008  000914  0EC0               	movlw	192
 12009  000916  ECC5  F029         	call	_lcdInst
 12010                           
 12011                           ;Test.c: 210: printf("PUSH TO START");
 12012  00091A  0E0B               	movlw	low STR_71
 12013  00091C  0100               	movlb	0	; () banked
 12014  00091E  6F8E               	movwf	printf@f& (0+255),b
 12015  000920  0EFF               	movlw	high STR_71
 12016  000922  0100               	movlb	0	; () banked
 12017  000924  6F8F               	movwf	(printf@f+1)& (0+255),b
 12018  000926  EC1B  F00B         	call	_printf	;wreg free
 12019                           
 12020                           ;Test.c: 211: _delay((unsigned long)((100)*(32000000/4000.0)));
 12021  00092A  0E05               	movlw	5
 12022  00092C  0100               	movlb	0	; () banked
 12023  00092E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12024  000930  0E0F               	movlw	15
 12025  000932  0100               	movlb	0	; () banked
 12026  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 12027  000936  0EF1               	movlw	241
 12028  000938                     u9647:
 12029  000938  2EE8               	decfsz	wreg,f,c
 12030  00093A  D7FE               	bra	u9647
 12031  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12032  00093E  D7FC               	bra	u9647
 12033  000940  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12034  000942  D7FA               	bra	u9647
 12035  000944                     l1206:
 12036  000944  A281               	btfss	3969,1,c	;volatile
 12037  000946  D7FE               	goto	l1206
 12038  000948                     l1209:
 12039  000948  B281               	btfsc	3969,1,c	;volatile
 12040  00094A  D7FE               	goto	l1209
 12041                           
 12042                           ;Test.c: 214: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12043  00094C  0E01               	movlw	1
 12044  00094E  ECC5  F029         	call	_lcdInst
 12045  000952  0E68               	movlw	104
 12046  000954  0100               	movlb	0	; () banked
 12047  000956  6FAB               	movwf	??_actuatorTest& (0+255),b
 12048  000958  0EE4               	movlw	228
 12049  00095A                     u9657:
 12050  00095A  2EE8               	decfsz	wreg,f,c
 12051  00095C  D7FE               	bra	u9657
 12052  00095E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12053  000960  D7FC               	bra	u9657
 12054  000962  F000               	nop	
 12055  000964  0E80               	movlw	128
 12056  000966  ECC5  F029         	call	_lcdInst
 12057                           
 12058                           ;Test.c: 219: printf("TST: DC MOTORS");
 12059  00096A  0EC3               	movlw	low STR_90
 12060  00096C  0100               	movlb	0	; () banked
 12061  00096E  6F8E               	movwf	printf@f& (0+255),b
 12062  000970  0EFE               	movlw	high STR_90
 12063  000972  0100               	movlb	0	; () banked
 12064  000974  6F8F               	movwf	(printf@f+1)& (0+255),b
 12065  000976  EC1B  F00B         	call	_printf	;wreg free
 12066                           
 12067                           ;Test.c: 220: lcdInst(0b11000000);;
 12068  00097A  0EC0               	movlw	192
 12069  00097C  ECC5  F029         	call	_lcdInst
 12070                           
 12071                           ;Test.c: 221: printf("PIN RA5 HIGH.");
 12072  000980  0EE1               	movlw	low STR_91
 12073  000982  0100               	movlb	0	; () banked
 12074  000984  6F8E               	movwf	printf@f& (0+255),b
 12075  000986  0EFE               	movlw	high STR_91
 12076  000988  0100               	movlb	0	; () banked
 12077  00098A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12078  00098C  EC1B  F00B         	call	_printf	;wreg free
 12079                           
 12080                           ;Test.c: 222: LATBbits.LATB2 = 1;
 12081  000990  848A               	bsf	3978,2,c	;volatile
 12082                           
 12083                           ;Test.c: 223: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 12084  000992  0E00               	movlw	0
 12085  000994  0100               	movlb	0	; () banked
 12086  000996  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12087  000998  0E00               	movlw	0
 12088  00099A  6FC4               	movwf	actuatorTest@i& (0+255),b
 12089                           
 12090                           ; BSR set to: 0
 12091  00099C  0100               	movlb	0	; () banked
 12092  00099E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12093  0009A0  D008               	goto	l7724
 12094  0009A2  0100               	movlb	0	; () banked
 12095  0009A4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12096  0009A6  E123               	bnz	l1213
 12097  0009A8  0E05               	movlw	5
 12098  0009AA  0100               	movlb	0	; () banked
 12099  0009AC  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12100  0009AE  B0D8               	btfsc	status,0,c
 12101  0009B0  D01E               	goto	l1213
 12102  0009B2                     l7724:
 12103                           
 12104                           ; BSR set to: 0
 12105  0009B2  0E00               	movlw	0
 12106  0009B4  0100               	movlb	0	; () banked
 12107  0009B6  6FAD               	movwf	actuatorTest@i_1687& (0+255),b
 12108  0009B8                     l7726:
 12109                           
 12110                           ; BSR set to: 0
 12111  0009B8  0E63               	movlw	99
 12112  0009BA  0100               	movlb	0	; () banked
 12113  0009BC  65AD               	cpfsgt	actuatorTest@i_1687& (0+255),b
 12114  0009BE  D001               	goto	l7730
 12115  0009C0  D00C               	goto	l7734
 12116  0009C2                     l7730:
 12117                           
 12118                           ; BSR set to: 0
 12119  0009C2  0E68               	movlw	104
 12120  0009C4  0100               	movlb	0	; () banked
 12121  0009C6  6FAB               	movwf	??_actuatorTest& (0+255),b
 12122  0009C8  0EE4               	movlw	228
 12123  0009CA                     u9667:
 12124  0009CA  2EE8               	decfsz	wreg,f,c
 12125  0009CC  D7FE               	bra	u9667
 12126  0009CE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12127  0009D0  D7FC               	bra	u9667
 12128  0009D2  F000               	nop	
 12129  0009D4  0100               	movlb	0	; () banked
 12130  0009D6  2BAD               	incf	actuatorTest@i_1687& (0+255),f,b
 12131  0009D8  D7EF               	goto	l7726
 12132  0009DA                     l7734:
 12133                           
 12134                           ; BSR set to: 0
 12135  0009DA  0100               	movlb	0	; () banked
 12136  0009DC  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12137  0009DE  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12138                           
 12139                           ; BSR set to: 0
 12140  0009E0  0100               	movlb	0	; () banked
 12141  0009E2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12142  0009E4  D7E6               	goto	l7724
 12143  0009E6  0100               	movlb	0	; () banked
 12144  0009E8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12145  0009EA  E101               	bnz	u6360
 12146  0009EC  D7DD               	goto	L9
 12147  0009EE                     u6360:
 12148  0009EE                     l1213:
 12149                           
 12150                           ; BSR set to: 0
 12151                           ;Test.c: 224: LATBbits.LATB2 = 0;
 12152  0009EE  948A               	bcf	3978,2,c	;volatile
 12153                           
 12154                           ; BSR set to: 0
 12155                           ;Test.c: 225: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12156  0009F0  0E01               	movlw	1
 12157  0009F2  ECC5  F029         	call	_lcdInst
 12158  0009F6  0E68               	movlw	104
 12159  0009F8  0100               	movlb	0	; () banked
 12160  0009FA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12161  0009FC  0EE4               	movlw	228
 12162  0009FE                     u9677:
 12163  0009FE  2EE8               	decfsz	wreg,f,c
 12164  000A00  D7FE               	bra	u9677
 12165  000A02  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12166  000A04  D7FC               	bra	u9677
 12167  000A06  F000               	nop	
 12168  000A08  0E80               	movlw	128
 12169  000A0A  ECC5  F029         	call	_lcdInst
 12170                           
 12171                           ;Test.c: 231: printf("TST: COND SOLN'D");
 12172  000A0E  0E5F               	movlw	low STR_92
 12173  000A10  0100               	movlb	0	; () banked
 12174  000A12  6F8E               	movwf	printf@f& (0+255),b
 12175  000A14  0EFC               	movlw	high STR_92
 12176  000A16  0100               	movlb	0	; () banked
 12177  000A18  6F8F               	movwf	(printf@f+1)& (0+255),b
 12178  000A1A  EC1B  F00B         	call	_printf	;wreg free
 12179                           
 12180                           ;Test.c: 232: lcdInst(0b11000000);;
 12181  000A1E  0EC0               	movlw	192
 12182  000A20  ECC5  F029         	call	_lcdInst
 12183                           
 12184                           ;Test.c: 233: printf("PIN RA3...");
 12185  000A24  0E5B               	movlw	low STR_93
 12186  000A26  0100               	movlb	0	; () banked
 12187  000A28  6F8E               	movwf	printf@f& (0+255),b
 12188  000A2A  0EFF               	movlw	high STR_93
 12189  000A2C  0100               	movlb	0	; () banked
 12190  000A2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12191  000A30  EC1B  F00B         	call	_printf	;wreg free
 12192                           
 12193                           ;Test.c: 234: for(i=0;i<5;i++){
 12194  000A34  0E00               	movlw	0
 12195  000A36  0100               	movlb	0	; () banked
 12196  000A38  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12197  000A3A  0E00               	movlw	0
 12198  000A3C  6FC4               	movwf	actuatorTest@i& (0+255),b
 12199                           
 12200                           ; BSR set to: 0
 12201  000A3E  0100               	movlb	0	; () banked
 12202  000A40  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12203  000A42  D008               	goto	l1216
 12204  000A44  0100               	movlb	0	; () banked
 12205  000A46  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12206  000A48  E12C               	bnz	l1217
 12207  000A4A  0E05               	movlw	5
 12208  000A4C  0100               	movlb	0	; () banked
 12209  000A4E  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12210  000A50  B0D8               	btfsc	status,0,c
 12211  000A52  D027               	goto	l1217
 12212  000A54                     l1216:
 12213                           
 12214                           ; BSR set to: 0
 12215                           ;Test.c: 235: LATAbits.LATA3 = 1;
 12216  000A54  8689               	bsf	3977,3,c	;volatile
 12217                           
 12218                           ; BSR set to: 0
 12219                           ;Test.c: 236: _delay((unsigned long)((300)*(32000000/4000.0)));
 12220  000A56  0E0D               	movlw	13
 12221  000A58  0100               	movlb	0	; () banked
 12222  000A5A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12223  000A5C  0E2D               	movlw	45
 12224  000A5E  0100               	movlb	0	; () banked
 12225  000A60  6FAB               	movwf	??_actuatorTest& (0+255),b
 12226  000A62  0ED7               	movlw	215
 12227  000A64                     u9687:
 12228  000A64  2EE8               	decfsz	wreg,f,c
 12229  000A66  D7FE               	bra	u9687
 12230  000A68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12231  000A6A  D7FC               	bra	u9687
 12232  000A6C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12233  000A6E  D7FA               	bra	u9687
 12234  000A70  D000               	nop2	
 12235                           
 12236                           ;Test.c: 237: LATAbits.LATA3 = !1;
 12237  000A72  9689               	bcf	3977,3,c	;volatile
 12238                           
 12239                           ;Test.c: 238: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 12240  000A74  0E1D               	movlw	29
 12241  000A76  0100               	movlb	0	; () banked
 12242  000A78  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12243  000A7A  0E69               	movlw	105
 12244  000A7C  0100               	movlb	0	; () banked
 12245  000A7E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12246  000A80  0EA5               	movlw	165
 12247  000A82                     u9697:
 12248  000A82  2EE8               	decfsz	wreg,f,c
 12249  000A84  D7FE               	bra	u9697
 12250  000A86  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12251  000A88  D7FC               	bra	u9697
 12252  000A8A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12253  000A8C  D7FA               	bra	u9697
 12254  000A8E  0100               	movlb	0	; () banked
 12255  000A90  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12256  000A92  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12257  000A94  0100               	movlb	0	; () banked
 12258  000A96  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12259  000A98  D7DD               	goto	l1216
 12260  000A9A  0100               	movlb	0	; () banked
 12261  000A9C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12262  000A9E  E101               	bnz	u6380
 12263  000AA0  D7D4               	goto	L10
 12264  000AA2                     u6380:
 12265  000AA2                     l1217:
 12266                           
 12267                           ; BSR set to: 0
 12268                           ;Test.c: 239: }
 12269                           ;Test.c: 240: LATAbits.LATA3 = !1;
 12270  000AA2  9689               	bcf	3977,3,c	;volatile
 12271                           
 12272                           ; BSR set to: 0
 12273                           ;Test.c: 241: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12274  000AA4  0E01               	movlw	1
 12275  000AA6  ECC5  F029         	call	_lcdInst
 12276  000AAA  0E68               	movlw	104
 12277  000AAC  0100               	movlb	0	; () banked
 12278  000AAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 12279  000AB0  0EE4               	movlw	228
 12280  000AB2                     u9707:
 12281  000AB2  2EE8               	decfsz	wreg,f,c
 12282  000AB4  D7FE               	bra	u9707
 12283  000AB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12284  000AB8  D7FC               	bra	u9707
 12285  000ABA  F000               	nop	
 12286  000ABC  0E80               	movlw	128
 12287  000ABE  ECC5  F029         	call	_lcdInst
 12288                           
 12289                           ;Test.c: 247: printf("TST: PUSH SOLN'D");
 12290  000AC2  0E70               	movlw	low STR_94
 12291  000AC4  0100               	movlb	0	; () banked
 12292  000AC6  6F8E               	movwf	printf@f& (0+255),b
 12293  000AC8  0EFC               	movlw	high STR_94
 12294  000ACA  0100               	movlb	0	; () banked
 12295  000ACC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12296  000ACE  EC1B  F00B         	call	_printf	;wreg free
 12297                           
 12298                           ;Test.c: 248: lcdInst(0b11000000);;
 12299  000AD2  0EC0               	movlw	192
 12300  000AD4  ECC5  F029         	call	_lcdInst
 12301                           
 12302                           ;Test.c: 249: printf("PIN RA4...");
 12303  000AD8  0E66               	movlw	low STR_95
 12304  000ADA  0100               	movlb	0	; () banked
 12305  000ADC  6F8E               	movwf	printf@f& (0+255),b
 12306  000ADE  0EFF               	movlw	high STR_95
 12307  000AE0  0100               	movlb	0	; () banked
 12308  000AE2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12309  000AE4  EC1B  F00B         	call	_printf	;wreg free
 12310                           
 12311                           ;Test.c: 250: for(i=0;i<5;i++){
 12312  000AE8  0E00               	movlw	0
 12313  000AEA  0100               	movlb	0	; () banked
 12314  000AEC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12315  000AEE  0E00               	movlw	0
 12316  000AF0  6FC4               	movwf	actuatorTest@i& (0+255),b
 12317                           
 12318                           ; BSR set to: 0
 12319  000AF2  0100               	movlb	0	; () banked
 12320  000AF4  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12321  000AF6  D008               	goto	l1218
 12322  000AF8  0100               	movlb	0	; () banked
 12323  000AFA  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12324  000AFC  E12C               	bnz	l1219
 12325  000AFE  0E05               	movlw	5
 12326  000B00  0100               	movlb	0	; () banked
 12327  000B02  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12328  000B04  B0D8               	btfsc	status,0,c
 12329  000B06  D027               	goto	l1219
 12330  000B08                     l1218:
 12331                           
 12332                           ; BSR set to: 0
 12333                           ;Test.c: 251: LATAbits.LATA4 = 1;
 12334  000B08  8889               	bsf	3977,4,c	;volatile
 12335                           
 12336                           ; BSR set to: 0
 12337                           ;Test.c: 252: _delay((unsigned long)((300)*(32000000/4000.0)));
 12338  000B0A  0E0D               	movlw	13
 12339  000B0C  0100               	movlb	0	; () banked
 12340  000B0E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12341  000B10  0E2D               	movlw	45
 12342  000B12  0100               	movlb	0	; () banked
 12343  000B14  6FAB               	movwf	??_actuatorTest& (0+255),b
 12344  000B16  0ED7               	movlw	215
 12345  000B18                     u9717:
 12346  000B18  2EE8               	decfsz	wreg,f,c
 12347  000B1A  D7FE               	bra	u9717
 12348  000B1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12349  000B1E  D7FC               	bra	u9717
 12350  000B20  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12351  000B22  D7FA               	bra	u9717
 12352  000B24  D000               	nop2	
 12353                           
 12354                           ;Test.c: 253: LATAbits.LATA4 = !1;
 12355  000B26  9889               	bcf	3977,4,c	;volatile
 12356                           
 12357                           ;Test.c: 254: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 12358  000B28  0E1D               	movlw	29
 12359  000B2A  0100               	movlb	0	; () banked
 12360  000B2C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12361  000B2E  0E69               	movlw	105
 12362  000B30  0100               	movlb	0	; () banked
 12363  000B32  6FAB               	movwf	??_actuatorTest& (0+255),b
 12364  000B34  0EA5               	movlw	165
 12365  000B36                     u9727:
 12366  000B36  2EE8               	decfsz	wreg,f,c
 12367  000B38  D7FE               	bra	u9727
 12368  000B3A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12369  000B3C  D7FC               	bra	u9727
 12370  000B3E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12371  000B40  D7FA               	bra	u9727
 12372  000B42  0100               	movlb	0	; () banked
 12373  000B44  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12374  000B46  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12375  000B48  0100               	movlb	0	; () banked
 12376  000B4A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12377  000B4C  D7DD               	goto	l1218
 12378  000B4E  0100               	movlb	0	; () banked
 12379  000B50  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12380  000B52  E101               	bnz	u6400
 12381  000B54  D7D4               	goto	L11
 12382  000B56                     u6400:
 12383  000B56                     l1219:
 12384                           
 12385                           ; BSR set to: 0
 12386                           ;Test.c: 255: }
 12387                           ;Test.c: 256: LATAbits.LATA4 = !1;
 12388  000B56  9889               	bcf	3977,4,c	;volatile
 12389                           
 12390                           ; BSR set to: 0
 12391                           ;Test.c: 257: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12392  000B58  0E01               	movlw	1
 12393  000B5A  ECC5  F029         	call	_lcdInst
 12394  000B5E  0E68               	movlw	104
 12395  000B60  0100               	movlb	0	; () banked
 12396  000B62  6FAB               	movwf	??_actuatorTest& (0+255),b
 12397  000B64  0EE4               	movlw	228
 12398  000B66                     u9737:
 12399  000B66  2EE8               	decfsz	wreg,f,c
 12400  000B68  D7FE               	bra	u9737
 12401  000B6A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12402  000B6C  D7FC               	bra	u9737
 12403  000B6E  F000               	nop	
 12404  000B70  0E80               	movlw	128
 12405  000B72  ECC5  F029         	call	_lcdInst
 12406                           
 12407                           ;Test.c: 260: machine_state = Sorting_state;
 12408  000B76  0E01               	movlw	1
 12409  000B78  0100               	movlb	0	; () banked
 12410  000B7A  6FFC               	movwf	_machine_state& (0+255),b
 12411                           
 12412                           ; BSR set to: 0
 12413                           ;Test.c: 261: was_low_1 = 0;
 12414  000B7C  0E00               	movlw	0
 12415  000B7E  6E7A               	movwf	_was_low_1+1,c	;volatile
 12416  000B80  0E00               	movlw	0
 12417  000B82  6E79               	movwf	_was_low_1,c	;volatile
 12418                           
 12419                           ; BSR set to: 0
 12420                           ;Test.c: 262: was_low_1 = 0;
 12421  000B84  0E00               	movlw	0
 12422  000B86  6E7A               	movwf	_was_low_1+1,c	;volatile
 12423  000B88  0E00               	movlw	0
 12424  000B8A  6E79               	movwf	_was_low_1,c	;volatile
 12425                           
 12426                           ; BSR set to: 0
 12427                           ;Test.c: 269: printf("TST: PAN SERVO");
 12428  000B8C  0EA5               	movlw	low STR_96
 12429  000B8E  0100               	movlb	0	; () banked
 12430  000B90  6F8E               	movwf	printf@f& (0+255),b
 12431  000B92  0EFE               	movlw	high STR_96
 12432  000B94  0100               	movlb	0	; () banked
 12433  000B96  6F8F               	movwf	(printf@f+1)& (0+255),b
 12434  000B98  EC1B  F00B         	call	_printf	;wreg free
 12435                           
 12436                           ;Test.c: 270: lcdInst(0b11000000);;
 12437  000B9C  0EC0               	movlw	192
 12438  000B9E  ECC5  F029         	call	_lcdInst
 12439                           
 12440                           ;Test.c: 271: printf("MIDDLE -- 2s    ");
 12441  000BA2  0EE8               	movlw	low STR_97
 12442  000BA4  0100               	movlb	0	; () banked
 12443  000BA6  6F8E               	movwf	printf@f& (0+255),b
 12444  000BA8  0EFB               	movlw	high STR_97
 12445  000BAA  0100               	movlb	0	; () banked
 12446  000BAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12447  000BAE  EC1B  F00B         	call	_printf	;wreg free
 12448                           
 12449                           ;Test.c: 272: updateServoPosition(1200, 1);
 12450  000BB2  0E04               	movlw	4
 12451  000BB4  0100               	movlb	0	; () banked
 12452  000BB6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12453  000BB8  0EB0               	movlw	176
 12454  000BBA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12455  000BBC  0E00               	movlw	0
 12456  000BBE  0100               	movlb	0	; () banked
 12457  000BC0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12458  000BC2  0E01               	movlw	1
 12459  000BC4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12460  000BC6  EC52  F023         	call	_updateServoPosition	;wreg free
 12461                           
 12462                           ;Test.c: 273: TMR1ON = 1;
 12463  000BCA  80CD               	bsf	4045,0,c	;volatile
 12464                           
 12465                           ;Test.c: 274: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12466  000BCC  0E00               	movlw	0
 12467  000BCE  0100               	movlb	0	; () banked
 12468  000BD0  6FAE               	movwf	actuatorTest@i_1694& (0+255),b
 12469  000BD2                     l7810:
 12470                           
 12471                           ; BSR set to: 0
 12472  000BD2  0E63               	movlw	99
 12473  000BD4  0100               	movlb	0	; () banked
 12474  000BD6  65AE               	cpfsgt	actuatorTest@i_1694& (0+255),b
 12475  000BD8  D001               	goto	l7814
 12476  000BDA  D00C               	goto	l7818
 12477  000BDC                     l7814:
 12478                           
 12479                           ; BSR set to: 0
 12480  000BDC  0E68               	movlw	104
 12481  000BDE  0100               	movlb	0	; () banked
 12482  000BE0  6FAB               	movwf	??_actuatorTest& (0+255),b
 12483  000BE2  0EE4               	movlw	228
 12484  000BE4                     u9747:
 12485  000BE4  2EE8               	decfsz	wreg,f,c
 12486  000BE6  D7FE               	bra	u9747
 12487  000BE8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12488  000BEA  D7FC               	bra	u9747
 12489  000BEC  F000               	nop	
 12490  000BEE  0100               	movlb	0	; () banked
 12491  000BF0  2BAE               	incf	actuatorTest@i_1694& (0+255),f,b
 12492  000BF2  D7EF               	goto	l7810
 12493  000BF4                     l7818:
 12494                           
 12495                           ; BSR set to: 0
 12496  000BF4  0E00               	movlw	0
 12497  000BF6  0100               	movlb	0	; () banked
 12498  000BF8  6FAF               	movwf	actuatorTest@i_1695& (0+255),b
 12499  000BFA                     l7820:
 12500                           
 12501                           ; BSR set to: 0
 12502  000BFA  0E63               	movlw	99
 12503  000BFC  0100               	movlb	0	; () banked
 12504  000BFE  65AF               	cpfsgt	actuatorTest@i_1695& (0+255),b
 12505  000C00  D001               	goto	l7824
 12506  000C02  D00C               	goto	l7828
 12507  000C04                     l7824:
 12508                           
 12509                           ; BSR set to: 0
 12510  000C04  0E68               	movlw	104
 12511  000C06  0100               	movlb	0	; () banked
 12512  000C08  6FAB               	movwf	??_actuatorTest& (0+255),b
 12513  000C0A  0EE4               	movlw	228
 12514  000C0C                     u9757:
 12515  000C0C  2EE8               	decfsz	wreg,f,c
 12516  000C0E  D7FE               	bra	u9757
 12517  000C10  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12518  000C12  D7FC               	bra	u9757
 12519  000C14  F000               	nop	
 12520  000C16  0100               	movlb	0	; () banked
 12521  000C18  2BAF               	incf	actuatorTest@i_1695& (0+255),f,b
 12522  000C1A  D7EF               	goto	l7820
 12523  000C1C                     l7828:
 12524                           
 12525                           ; BSR set to: 0
 12526                           ;Test.c: 276: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12527  000C1C  0E80               	movlw	128
 12528  000C1E  ECC5  F029         	call	_lcdInst
 12529  000C22  0EC0               	movlw	192
 12530  000C24  ECC5  F029         	call	_lcdInst
 12531                           
 12532                           ;Test.c: 277: printf("RIGHT -- 2s     ");
 12533  000C28  0ED7               	movlw	low STR_98
 12534  000C2A  0100               	movlb	0	; () banked
 12535  000C2C  6F8E               	movwf	printf@f& (0+255),b
 12536  000C2E  0EFB               	movlw	high STR_98
 12537  000C30  0100               	movlb	0	; () banked
 12538  000C32  6F8F               	movwf	(printf@f+1)& (0+255),b
 12539  000C34  EC1B  F00B         	call	_printf	;wreg free
 12540                           
 12541                           ;Test.c: 278: updateServoPosition(500, 1);
 12542  000C38  0E01               	movlw	1
 12543  000C3A  0100               	movlb	0	; () banked
 12544  000C3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12545  000C3E  0EF4               	movlw	244
 12546  000C40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12547  000C42  0E00               	movlw	0
 12548  000C44  0100               	movlb	0	; () banked
 12549  000C46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12550  000C48  0E01               	movlw	1
 12551  000C4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12552  000C4C  EC52  F023         	call	_updateServoPosition	;wreg free
 12553                           
 12554                           ;Test.c: 279: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12555  000C50  0E00               	movlw	0
 12556  000C52  0100               	movlb	0	; () banked
 12557  000C54  6FB0               	movwf	actuatorTest@i_1697& (0+255),b
 12558  000C56                     l7836:
 12559                           
 12560                           ; BSR set to: 0
 12561  000C56  0E63               	movlw	99
 12562  000C58  0100               	movlb	0	; () banked
 12563  000C5A  65B0               	cpfsgt	actuatorTest@i_1697& (0+255),b
 12564  000C5C  D001               	goto	l7840
 12565  000C5E  D00C               	goto	l7844
 12566  000C60                     l7840:
 12567                           
 12568                           ; BSR set to: 0
 12569  000C60  0E68               	movlw	104
 12570  000C62  0100               	movlb	0	; () banked
 12571  000C64  6FAB               	movwf	??_actuatorTest& (0+255),b
 12572  000C66  0EE4               	movlw	228
 12573  000C68                     u9767:
 12574  000C68  2EE8               	decfsz	wreg,f,c
 12575  000C6A  D7FE               	bra	u9767
 12576  000C6C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12577  000C6E  D7FC               	bra	u9767
 12578  000C70  F000               	nop	
 12579  000C72  0100               	movlb	0	; () banked
 12580  000C74  2BB0               	incf	actuatorTest@i_1697& (0+255),f,b
 12581  000C76  D7EF               	goto	l7836
 12582  000C78                     l7844:
 12583                           
 12584                           ; BSR set to: 0
 12585  000C78  0E00               	movlw	0
 12586  000C7A  0100               	movlb	0	; () banked
 12587  000C7C  6FB1               	movwf	actuatorTest@i_1698& (0+255),b
 12588  000C7E                     l7846:
 12589                           
 12590                           ; BSR set to: 0
 12591  000C7E  0E63               	movlw	99
 12592  000C80  0100               	movlb	0	; () banked
 12593  000C82  65B1               	cpfsgt	actuatorTest@i_1698& (0+255),b
 12594  000C84  D001               	goto	l7850
 12595  000C86  D00C               	goto	l7854
 12596  000C88                     l7850:
 12597                           
 12598                           ; BSR set to: 0
 12599  000C88  0E68               	movlw	104
 12600  000C8A  0100               	movlb	0	; () banked
 12601  000C8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12602  000C8E  0EE4               	movlw	228
 12603  000C90                     u9777:
 12604  000C90  2EE8               	decfsz	wreg,f,c
 12605  000C92  D7FE               	bra	u9777
 12606  000C94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12607  000C96  D7FC               	bra	u9777
 12608  000C98  F000               	nop	
 12609  000C9A  0100               	movlb	0	; () banked
 12610  000C9C  2BB1               	incf	actuatorTest@i_1698& (0+255),f,b
 12611  000C9E  D7EF               	goto	l7846
 12612  000CA0                     l7854:
 12613                           
 12614                           ; BSR set to: 0
 12615                           ;Test.c: 281: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12616  000CA0  0E80               	movlw	128
 12617  000CA2  ECC5  F029         	call	_lcdInst
 12618  000CA6  0EC0               	movlw	192
 12619  000CA8  ECC5  F029         	call	_lcdInst
 12620                           
 12621                           ;Test.c: 282: printf("LEFT -- 2s      ");
 12622  000CAC  0EB5               	movlw	low STR_99
 12623  000CAE  0100               	movlb	0	; () banked
 12624  000CB0  6F8E               	movwf	printf@f& (0+255),b
 12625  000CB2  0EFB               	movlw	high STR_99
 12626  000CB4  0100               	movlb	0	; () banked
 12627  000CB6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12628  000CB8  EC1B  F00B         	call	_printf	;wreg free
 12629                           
 12630                           ;Test.c: 283: updateServoPosition(2400, 1);
 12631  000CBC  0E09               	movlw	9
 12632  000CBE  0100               	movlb	0	; () banked
 12633  000CC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12634  000CC2  0E60               	movlw	96
 12635  000CC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12636  000CC6  0E00               	movlw	0
 12637  000CC8  0100               	movlb	0	; () banked
 12638  000CCA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12639  000CCC  0E01               	movlw	1
 12640  000CCE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12641  000CD0  EC52  F023         	call	_updateServoPosition	;wreg free
 12642                           
 12643                           ;Test.c: 284: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12644  000CD4  0E00               	movlw	0
 12645  000CD6  0100               	movlb	0	; () banked
 12646  000CD8  6FB2               	movwf	actuatorTest@i_1700& (0+255),b
 12647  000CDA                     l7862:
 12648                           
 12649                           ; BSR set to: 0
 12650  000CDA  0E63               	movlw	99
 12651  000CDC  0100               	movlb	0	; () banked
 12652  000CDE  65B2               	cpfsgt	actuatorTest@i_1700& (0+255),b
 12653  000CE0  D001               	goto	l7866
 12654  000CE2  D00C               	goto	l7870
 12655  000CE4                     l7866:
 12656                           
 12657                           ; BSR set to: 0
 12658  000CE4  0E68               	movlw	104
 12659  000CE6  0100               	movlb	0	; () banked
 12660  000CE8  6FAB               	movwf	??_actuatorTest& (0+255),b
 12661  000CEA  0EE4               	movlw	228
 12662  000CEC                     u9787:
 12663  000CEC  2EE8               	decfsz	wreg,f,c
 12664  000CEE  D7FE               	bra	u9787
 12665  000CF0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12666  000CF2  D7FC               	bra	u9787
 12667  000CF4  F000               	nop	
 12668  000CF6  0100               	movlb	0	; () banked
 12669  000CF8  2BB2               	incf	actuatorTest@i_1700& (0+255),f,b
 12670  000CFA  D7EF               	goto	l7862
 12671  000CFC                     l7870:
 12672                           
 12673                           ; BSR set to: 0
 12674  000CFC  0E00               	movlw	0
 12675  000CFE  0100               	movlb	0	; () banked
 12676  000D00  6FB3               	movwf	actuatorTest@i_1701& (0+255),b
 12677  000D02                     l7872:
 12678                           
 12679                           ; BSR set to: 0
 12680  000D02  0E63               	movlw	99
 12681  000D04  0100               	movlb	0	; () banked
 12682  000D06  65B3               	cpfsgt	actuatorTest@i_1701& (0+255),b
 12683  000D08  D001               	goto	l7876
 12684  000D0A  D00C               	goto	l7880
 12685  000D0C                     l7876:
 12686                           
 12687                           ; BSR set to: 0
 12688  000D0C  0E68               	movlw	104
 12689  000D0E  0100               	movlb	0	; () banked
 12690  000D10  6FAB               	movwf	??_actuatorTest& (0+255),b
 12691  000D12  0EE4               	movlw	228
 12692  000D14                     u9797:
 12693  000D14  2EE8               	decfsz	wreg,f,c
 12694  000D16  D7FE               	bra	u9797
 12695  000D18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12696  000D1A  D7FC               	bra	u9797
 12697  000D1C  F000               	nop	
 12698  000D1E  0100               	movlb	0	; () banked
 12699  000D20  2BB3               	incf	actuatorTest@i_1701& (0+255),f,b
 12700  000D22  D7EF               	goto	l7872
 12701  000D24                     l7880:
 12702                           
 12703                           ; BSR set to: 0
 12704                           ;Test.c: 286: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12705  000D24  0E80               	movlw	128
 12706  000D26  ECC5  F029         	call	_lcdInst
 12707  000D2A  0EC0               	movlw	192
 12708  000D2C  ECC5  F029         	call	_lcdInst
 12709                           
 12710                           ;Test.c: 287: printf("MID-LEFT -- 2s  ");
 12711  000D30  0E1B               	movlw	low STR_100
 12712  000D32  0100               	movlb	0	; () banked
 12713  000D34  6F8E               	movwf	printf@f& (0+255),b
 12714  000D36  0EFC               	movlw	high STR_100
 12715  000D38  0100               	movlb	0	; () banked
 12716  000D3A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12717  000D3C  EC1B  F00B         	call	_printf	;wreg free
 12718                           
 12719                           ;Test.c: 288: updateServoPosition(1670, 1);
 12720  000D40  0E06               	movlw	6
 12721  000D42  0100               	movlb	0	; () banked
 12722  000D44  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12723  000D46  0E86               	movlw	134
 12724  000D48  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12725  000D4A  0E00               	movlw	0
 12726  000D4C  0100               	movlb	0	; () banked
 12727  000D4E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12728  000D50  0E01               	movlw	1
 12729  000D52  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12730  000D54  EC52  F023         	call	_updateServoPosition	;wreg free
 12731                           
 12732                           ;Test.c: 289: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12733  000D58  0E00               	movlw	0
 12734  000D5A  0100               	movlb	0	; () banked
 12735  000D5C  6FB4               	movwf	actuatorTest@i_1703& (0+255),b
 12736  000D5E                     l7888:
 12737                           
 12738                           ; BSR set to: 0
 12739  000D5E  0E63               	movlw	99
 12740  000D60  0100               	movlb	0	; () banked
 12741  000D62  65B4               	cpfsgt	actuatorTest@i_1703& (0+255),b
 12742  000D64  D001               	goto	l7892
 12743  000D66  D00C               	goto	l7896
 12744  000D68                     l7892:
 12745                           
 12746                           ; BSR set to: 0
 12747  000D68  0E68               	movlw	104
 12748  000D6A  0100               	movlb	0	; () banked
 12749  000D6C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12750  000D6E  0EE4               	movlw	228
 12751  000D70                     u9807:
 12752  000D70  2EE8               	decfsz	wreg,f,c
 12753  000D72  D7FE               	bra	u9807
 12754  000D74  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12755  000D76  D7FC               	bra	u9807
 12756  000D78  F000               	nop	
 12757  000D7A  0100               	movlb	0	; () banked
 12758  000D7C  2BB4               	incf	actuatorTest@i_1703& (0+255),f,b
 12759  000D7E  D7EF               	goto	l7888
 12760  000D80                     l7896:
 12761                           
 12762                           ; BSR set to: 0
 12763  000D80  0E00               	movlw	0
 12764  000D82  0100               	movlb	0	; () banked
 12765  000D84  6FB5               	movwf	actuatorTest@i_1704& (0+255),b
 12766  000D86                     l7898:
 12767                           
 12768                           ; BSR set to: 0
 12769  000D86  0E63               	movlw	99
 12770  000D88  0100               	movlb	0	; () banked
 12771  000D8A  65B5               	cpfsgt	actuatorTest@i_1704& (0+255),b
 12772  000D8C  D001               	goto	l7902
 12773  000D8E  D00C               	goto	l7906
 12774  000D90                     l7902:
 12775                           
 12776                           ; BSR set to: 0
 12777  000D90  0E68               	movlw	104
 12778  000D92  0100               	movlb	0	; () banked
 12779  000D94  6FAB               	movwf	??_actuatorTest& (0+255),b
 12780  000D96  0EE4               	movlw	228
 12781  000D98                     u9817:
 12782  000D98  2EE8               	decfsz	wreg,f,c
 12783  000D9A  D7FE               	bra	u9817
 12784  000D9C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12785  000D9E  D7FC               	bra	u9817
 12786  000DA0  F000               	nop	
 12787  000DA2  0100               	movlb	0	; () banked
 12788  000DA4  2BB5               	incf	actuatorTest@i_1704& (0+255),f,b
 12789  000DA6  D7EF               	goto	l7898
 12790  000DA8                     l7906:
 12791                           
 12792                           ; BSR set to: 0
 12793                           ;Test.c: 291: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12794  000DA8  0E80               	movlw	128
 12795  000DAA  ECC5  F029         	call	_lcdInst
 12796  000DAE  0EC0               	movlw	192
 12797  000DB0  ECC5  F029         	call	_lcdInst
 12798                           
 12799                           ;Test.c: 292: printf("MID-RIGHT -- 2s ");
 12800  000DB4  0E2C               	movlw	low STR_101
 12801  000DB6  0100               	movlb	0	; () banked
 12802  000DB8  6F8E               	movwf	printf@f& (0+255),b
 12803  000DBA  0EFC               	movlw	high STR_101
 12804  000DBC  0100               	movlb	0	; () banked
 12805  000DBE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12806  000DC0  EC1B  F00B         	call	_printf	;wreg free
 12807                           
 12808                           ;Test.c: 293: updateServoPosition(850, 1);
 12809  000DC4  0E03               	movlw	3
 12810  000DC6  0100               	movlb	0	; () banked
 12811  000DC8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12812  000DCA  0E52               	movlw	82
 12813  000DCC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12814  000DCE  0E00               	movlw	0
 12815  000DD0  0100               	movlb	0	; () banked
 12816  000DD2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12817  000DD4  0E01               	movlw	1
 12818  000DD6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12819  000DD8  EC52  F023         	call	_updateServoPosition	;wreg free
 12820                           
 12821                           ;Test.c: 294: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12822  000DDC  0E00               	movlw	0
 12823  000DDE  0100               	movlb	0	; () banked
 12824  000DE0  6FB6               	movwf	actuatorTest@i_1706& (0+255),b
 12825  000DE2                     l7914:
 12826                           
 12827                           ; BSR set to: 0
 12828  000DE2  0E63               	movlw	99
 12829  000DE4  0100               	movlb	0	; () banked
 12830  000DE6  65B6               	cpfsgt	actuatorTest@i_1706& (0+255),b
 12831  000DE8  D001               	goto	l7918
 12832  000DEA  D00C               	goto	l7922
 12833  000DEC                     l7918:
 12834                           
 12835                           ; BSR set to: 0
 12836  000DEC  0E68               	movlw	104
 12837  000DEE  0100               	movlb	0	; () banked
 12838  000DF0  6FAB               	movwf	??_actuatorTest& (0+255),b
 12839  000DF2  0EE4               	movlw	228
 12840  000DF4                     u9827:
 12841  000DF4  2EE8               	decfsz	wreg,f,c
 12842  000DF6  D7FE               	bra	u9827
 12843  000DF8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12844  000DFA  D7FC               	bra	u9827
 12845  000DFC  F000               	nop	
 12846  000DFE  0100               	movlb	0	; () banked
 12847  000E00  2BB6               	incf	actuatorTest@i_1706& (0+255),f,b
 12848  000E02  D7EF               	goto	l7914
 12849  000E04                     l7922:
 12850                           
 12851                           ; BSR set to: 0
 12852  000E04  0E00               	movlw	0
 12853  000E06  0100               	movlb	0	; () banked
 12854  000E08  6FB7               	movwf	actuatorTest@i_1707& (0+255),b
 12855  000E0A                     l7924:
 12856                           
 12857                           ; BSR set to: 0
 12858  000E0A  0E63               	movlw	99
 12859  000E0C  0100               	movlb	0	; () banked
 12860  000E0E  65B7               	cpfsgt	actuatorTest@i_1707& (0+255),b
 12861  000E10  D001               	goto	l7928
 12862  000E12  D00C               	goto	l7932
 12863  000E14                     l7928:
 12864                           
 12865                           ; BSR set to: 0
 12866  000E14  0E68               	movlw	104
 12867  000E16  0100               	movlb	0	; () banked
 12868  000E18  6FAB               	movwf	??_actuatorTest& (0+255),b
 12869  000E1A  0EE4               	movlw	228
 12870  000E1C                     u9837:
 12871  000E1C  2EE8               	decfsz	wreg,f,c
 12872  000E1E  D7FE               	bra	u9837
 12873  000E20  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12874  000E22  D7FC               	bra	u9837
 12875  000E24  F000               	nop	
 12876  000E26  0100               	movlb	0	; () banked
 12877  000E28  2BB7               	incf	actuatorTest@i_1707& (0+255),f,b
 12878  000E2A  D7EF               	goto	l7924
 12879  000E2C                     l7932:
 12880                           
 12881                           ; BSR set to: 0
 12882                           ;Test.c: 296: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12883  000E2C  0E80               	movlw	128
 12884  000E2E  ECC5  F029         	call	_lcdInst
 12885  000E32  0EC0               	movlw	192
 12886  000E34  ECC5  F029         	call	_lcdInst
 12887                           
 12888                           ;Test.c: 297: printf("MID -- 2s       ");
 12889  000E38  0E93               	movlw	low STR_102
 12890  000E3A  0100               	movlb	0	; () banked
 12891  000E3C  6F8E               	movwf	printf@f& (0+255),b
 12892  000E3E  0EFB               	movlw	high STR_102
 12893  000E40  0100               	movlb	0	; () banked
 12894  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
 12895  000E44  EC1B  F00B         	call	_printf	;wreg free
 12896                           
 12897                           ;Test.c: 298: updateServoPosition(1200, 1);
 12898  000E48  0E04               	movlw	4
 12899  000E4A  0100               	movlb	0	; () banked
 12900  000E4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12901  000E4E  0EB0               	movlw	176
 12902  000E50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12903  000E52  0E00               	movlw	0
 12904  000E54  0100               	movlb	0	; () banked
 12905  000E56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12906  000E58  0E01               	movlw	1
 12907  000E5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12908  000E5C  EC52  F023         	call	_updateServoPosition	;wreg free
 12909                           
 12910                           ;Test.c: 299: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12911  000E60  0E00               	movlw	0
 12912  000E62  0100               	movlb	0	; () banked
 12913  000E64  6FB8               	movwf	actuatorTest@i_1709& (0+255),b
 12914  000E66                     l7940:
 12915                           
 12916                           ; BSR set to: 0
 12917  000E66  0E63               	movlw	99
 12918  000E68  0100               	movlb	0	; () banked
 12919  000E6A  65B8               	cpfsgt	actuatorTest@i_1709& (0+255),b
 12920  000E6C  D001               	goto	l7944
 12921  000E6E  D00C               	goto	l7948
 12922  000E70                     l7944:
 12923                           
 12924                           ; BSR set to: 0
 12925  000E70  0E68               	movlw	104
 12926  000E72  0100               	movlb	0	; () banked
 12927  000E74  6FAB               	movwf	??_actuatorTest& (0+255),b
 12928  000E76  0EE4               	movlw	228
 12929  000E78                     u9847:
 12930  000E78  2EE8               	decfsz	wreg,f,c
 12931  000E7A  D7FE               	bra	u9847
 12932  000E7C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12933  000E7E  D7FC               	bra	u9847
 12934  000E80  F000               	nop	
 12935  000E82  0100               	movlb	0	; () banked
 12936  000E84  2BB8               	incf	actuatorTest@i_1709& (0+255),f,b
 12937  000E86  D7EF               	goto	l7940
 12938  000E88                     l7948:
 12939                           
 12940                           ; BSR set to: 0
 12941  000E88  0E00               	movlw	0
 12942  000E8A  0100               	movlb	0	; () banked
 12943  000E8C  6FB9               	movwf	actuatorTest@i_1710& (0+255),b
 12944  000E8E                     l7950:
 12945                           
 12946                           ; BSR set to: 0
 12947  000E8E  0E63               	movlw	99
 12948  000E90  0100               	movlb	0	; () banked
 12949  000E92  65B9               	cpfsgt	actuatorTest@i_1710& (0+255),b
 12950  000E94  D001               	goto	l7954
 12951  000E96  D00C               	goto	l1243
 12952  000E98                     l7954:
 12953                           
 12954                           ; BSR set to: 0
 12955  000E98  0E68               	movlw	104
 12956  000E9A  0100               	movlb	0	; () banked
 12957  000E9C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12958  000E9E  0EE4               	movlw	228
 12959  000EA0                     u9857:
 12960  000EA0  2EE8               	decfsz	wreg,f,c
 12961  000EA2  D7FE               	bra	u9857
 12962  000EA4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12963  000EA6  D7FC               	bra	u9857
 12964  000EA8  F000               	nop	
 12965  000EAA  0100               	movlb	0	; () banked
 12966  000EAC  2BB9               	incf	actuatorTest@i_1710& (0+255),f,b
 12967  000EAE  D7EF               	goto	l7950
 12968  000EB0                     l1243:
 12969                           
 12970                           ; BSR set to: 0
 12971                           ;Test.c: 300: TMR1ON = 0;
 12972  000EB0  90CD               	bcf	4045,0,c	;volatile
 12973                           
 12974                           ; BSR set to: 0
 12975                           ;Test.c: 307: printf("TST: TILT SERVO");
 12976  000EB2  0E3A               	movlw	low STR_103
 12977  000EB4  0100               	movlb	0	; () banked
 12978  000EB6  6F8E               	movwf	printf@f& (0+255),b
 12979  000EB8  0EFE               	movlw	high STR_103
 12980  000EBA  0100               	movlb	0	; () banked
 12981  000EBC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12982  000EBE  EC1B  F00B         	call	_printf	;wreg free
 12983                           
 12984                           ;Test.c: 308: lcdInst(0b11000000);;
 12985  000EC2  0EC0               	movlw	192
 12986  000EC4  ECC5  F029         	call	_lcdInst
 12987                           
 12988                           ;Test.c: 309: printf("LEVEL -- 2s     ");
 12989  000EC8  0EC6               	movlw	low STR_104
 12990  000ECA  0100               	movlb	0	; () banked
 12991  000ECC  6F8E               	movwf	printf@f& (0+255),b
 12992  000ECE  0EFB               	movlw	high STR_104
 12993  000ED0  0100               	movlb	0	; () banked
 12994  000ED2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12995  000ED4  EC1B  F00B         	call	_printf	;wreg free
 12996                           
 12997                           ;Test.c: 310: updateServoPosition(1050, 3);
 12998  000ED8  0E04               	movlw	4
 12999  000EDA  0100               	movlb	0	; () banked
 13000  000EDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13001  000EDE  0E1A               	movlw	26
 13002  000EE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13003  000EE2  0E00               	movlw	0
 13004  000EE4  0100               	movlb	0	; () banked
 13005  000EE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13006  000EE8  0E03               	movlw	3
 13007  000EEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13008  000EEC  EC52  F023         	call	_updateServoPosition	;wreg free
 13009                           
 13010                           ;Test.c: 311: TMR3ON = 1;
 13011  000EF0  80B1               	bsf	4017,0,c	;volatile
 13012                           
 13013                           ;Test.c: 312: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13014  000EF2  0E00               	movlw	0
 13015  000EF4  0100               	movlb	0	; () banked
 13016  000EF6  6FBA               	movwf	actuatorTest@i_1713& (0+255),b
 13017  000EF8                     l7968:
 13018                           
 13019                           ; BSR set to: 0
 13020  000EF8  0E63               	movlw	99
 13021  000EFA  0100               	movlb	0	; () banked
 13022  000EFC  65BA               	cpfsgt	actuatorTest@i_1713& (0+255),b
 13023  000EFE  D001               	goto	l7972
 13024  000F00  D00C               	goto	l7976
 13025  000F02                     l7972:
 13026                           
 13027                           ; BSR set to: 0
 13028  000F02  0E68               	movlw	104
 13029  000F04  0100               	movlb	0	; () banked
 13030  000F06  6FAB               	movwf	??_actuatorTest& (0+255),b
 13031  000F08  0EE4               	movlw	228
 13032  000F0A                     u9867:
 13033  000F0A  2EE8               	decfsz	wreg,f,c
 13034  000F0C  D7FE               	bra	u9867
 13035  000F0E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13036  000F10  D7FC               	bra	u9867
 13037  000F12  F000               	nop	
 13038  000F14  0100               	movlb	0	; () banked
 13039  000F16  2BBA               	incf	actuatorTest@i_1713& (0+255),f,b
 13040  000F18  D7EF               	goto	l7968
 13041  000F1A                     l7976:
 13042                           
 13043                           ; BSR set to: 0
 13044  000F1A  0E00               	movlw	0
 13045  000F1C  0100               	movlb	0	; () banked
 13046  000F1E  6FBB               	movwf	actuatorTest@i_1714& (0+255),b
 13047  000F20                     l7978:
 13048                           
 13049                           ; BSR set to: 0
 13050  000F20  0E63               	movlw	99
 13051  000F22  0100               	movlb	0	; () banked
 13052  000F24  65BB               	cpfsgt	actuatorTest@i_1714& (0+255),b
 13053  000F26  D001               	goto	l7982
 13054  000F28  D00C               	goto	l7986
 13055  000F2A                     l7982:
 13056                           
 13057                           ; BSR set to: 0
 13058  000F2A  0E68               	movlw	104
 13059  000F2C  0100               	movlb	0	; () banked
 13060  000F2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 13061  000F30  0EE4               	movlw	228
 13062  000F32                     u9877:
 13063  000F32  2EE8               	decfsz	wreg,f,c
 13064  000F34  D7FE               	bra	u9877
 13065  000F36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13066  000F38  D7FC               	bra	u9877
 13067  000F3A  F000               	nop	
 13068  000F3C  0100               	movlb	0	; () banked
 13069  000F3E  2BBB               	incf	actuatorTest@i_1714& (0+255),f,b
 13070  000F40  D7EF               	goto	l7978
 13071  000F42                     l7986:
 13072                           
 13073                           ; BSR set to: 0
 13074                           ;Test.c: 314: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13075  000F42  0E80               	movlw	128
 13076  000F44  ECC5  F029         	call	_lcdInst
 13077  000F48  0EC0               	movlw	192
 13078  000F4A  ECC5  F029         	call	_lcdInst
 13079                           
 13080                           ;Test.c: 315: printf("DROP -- 2s      ");
 13081  000F4E  0EA4               	movlw	low STR_105
 13082  000F50  0100               	movlb	0	; () banked
 13083  000F52  6F8E               	movwf	printf@f& (0+255),b
 13084  000F54  0EFB               	movlw	high STR_105
 13085  000F56  0100               	movlb	0	; () banked
 13086  000F58  6F8F               	movwf	(printf@f+1)& (0+255),b
 13087  000F5A  EC1B  F00B         	call	_printf	;wreg free
 13088                           
 13089                           ;Test.c: 316: updateServoPosition(1260, 3);
 13090  000F5E  0E04               	movlw	4
 13091  000F60  0100               	movlb	0	; () banked
 13092  000F62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13093  000F64  0EEC               	movlw	236
 13094  000F66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13095  000F68  0E00               	movlw	0
 13096  000F6A  0100               	movlb	0	; () banked
 13097  000F6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13098  000F6E  0E03               	movlw	3
 13099  000F70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13100  000F72  EC52  F023         	call	_updateServoPosition	;wreg free
 13101                           
 13102                           ;Test.c: 317: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13103  000F76  0E00               	movlw	0
 13104  000F78  0100               	movlb	0	; () banked
 13105  000F7A  6FBC               	movwf	actuatorTest@i_1716& (0+255),b
 13106  000F7C                     l7994:
 13107                           
 13108                           ; BSR set to: 0
 13109  000F7C  0E63               	movlw	99
 13110  000F7E  0100               	movlb	0	; () banked
 13111  000F80  65BC               	cpfsgt	actuatorTest@i_1716& (0+255),b
 13112  000F82  D001               	goto	l7998
 13113  000F84  D00C               	goto	l8002
 13114  000F86                     l7998:
 13115                           
 13116                           ; BSR set to: 0
 13117  000F86  0E68               	movlw	104
 13118  000F88  0100               	movlb	0	; () banked
 13119  000F8A  6FAB               	movwf	??_actuatorTest& (0+255),b
 13120  000F8C  0EE4               	movlw	228
 13121  000F8E                     u9887:
 13122  000F8E  2EE8               	decfsz	wreg,f,c
 13123  000F90  D7FE               	bra	u9887
 13124  000F92  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13125  000F94  D7FC               	bra	u9887
 13126  000F96  F000               	nop	
 13127  000F98  0100               	movlb	0	; () banked
 13128  000F9A  2BBC               	incf	actuatorTest@i_1716& (0+255),f,b
 13129  000F9C  D7EF               	goto	l7994
 13130  000F9E                     l8002:
 13131                           
 13132                           ; BSR set to: 0
 13133  000F9E  0E00               	movlw	0
 13134  000FA0  0100               	movlb	0	; () banked
 13135  000FA2  6FBD               	movwf	actuatorTest@i_1717& (0+255),b
 13136  000FA4                     l8004:
 13137                           
 13138                           ; BSR set to: 0
 13139  000FA4  0E63               	movlw	99
 13140  000FA6  0100               	movlb	0	; () banked
 13141  000FA8  65BD               	cpfsgt	actuatorTest@i_1717& (0+255),b
 13142  000FAA  D001               	goto	l8008
 13143  000FAC  D00C               	goto	l8012
 13144  000FAE                     l8008:
 13145                           
 13146                           ; BSR set to: 0
 13147  000FAE  0E68               	movlw	104
 13148  000FB0  0100               	movlb	0	; () banked
 13149  000FB2  6FAB               	movwf	??_actuatorTest& (0+255),b
 13150  000FB4  0EE4               	movlw	228
 13151  000FB6                     u9897:
 13152  000FB6  2EE8               	decfsz	wreg,f,c
 13153  000FB8  D7FE               	bra	u9897
 13154  000FBA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13155  000FBC  D7FC               	bra	u9897
 13156  000FBE  F000               	nop	
 13157  000FC0  0100               	movlb	0	; () banked
 13158  000FC2  2BBD               	incf	actuatorTest@i_1717& (0+255),f,b
 13159  000FC4  D7EF               	goto	l8004
 13160  000FC6                     l8012:
 13161                           
 13162                           ; BSR set to: 0
 13163                           ;Test.c: 319: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13164  000FC6  0E80               	movlw	128
 13165  000FC8  ECC5  F029         	call	_lcdInst
 13166  000FCC  0EC0               	movlw	192
 13167  000FCE  ECC5  F029         	call	_lcdInst
 13168                           
 13169                           ;Test.c: 320: printf("LEVEL -- 2s     ");
 13170  000FD2  0EC6               	movlw	low STR_104
 13171  000FD4  0100               	movlb	0	; () banked
 13172  000FD6  6F8E               	movwf	printf@f& (0+255),b
 13173  000FD8  0EFB               	movlw	high STR_104
 13174  000FDA  0100               	movlb	0	; () banked
 13175  000FDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13176  000FDE  EC1B  F00B         	call	_printf	;wreg free
 13177                           
 13178                           ;Test.c: 321: updateServoPosition(1050, 3);
 13179  000FE2  0E04               	movlw	4
 13180  000FE4  0100               	movlb	0	; () banked
 13181  000FE6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13182  000FE8  0E1A               	movlw	26
 13183  000FEA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13184  000FEC  0E00               	movlw	0
 13185  000FEE  0100               	movlb	0	; () banked
 13186  000FF0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13187  000FF2  0E03               	movlw	3
 13188  000FF4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13189  000FF6  EC52  F023         	call	_updateServoPosition	;wreg free
 13190                           
 13191                           ;Test.c: 322: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13192  000FFA  0E00               	movlw	0
 13193  000FFC  0100               	movlb	0	; () banked
 13194  000FFE  6FBE               	movwf	actuatorTest@i_1719& (0+255),b
 13195  001000                     l8020:
 13196                           
 13197                           ; BSR set to: 0
 13198  001000  0E63               	movlw	99
 13199  001002  0100               	movlb	0	; () banked
 13200  001004  65BE               	cpfsgt	actuatorTest@i_1719& (0+255),b
 13201  001006  D001               	goto	l8024
 13202  001008  D00C               	goto	l8028
 13203  00100A                     l8024:
 13204                           
 13205                           ; BSR set to: 0
 13206  00100A  0E68               	movlw	104
 13207  00100C  0100               	movlb	0	; () banked
 13208  00100E  6FAB               	movwf	??_actuatorTest& (0+255),b
 13209  001010  0EE4               	movlw	228
 13210  001012                     u9907:
 13211  001012  2EE8               	decfsz	wreg,f,c
 13212  001014  D7FE               	bra	u9907
 13213  001016  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13214  001018  D7FC               	bra	u9907
 13215  00101A  F000               	nop	
 13216  00101C  0100               	movlb	0	; () banked
 13217  00101E  2BBE               	incf	actuatorTest@i_1719& (0+255),f,b
 13218  001020  D7EF               	goto	l8020
 13219  001022                     l8028:
 13220                           
 13221                           ; BSR set to: 0
 13222  001022  0E00               	movlw	0
 13223  001024  0100               	movlb	0	; () banked
 13224  001026  6FBF               	movwf	actuatorTest@i_1720& (0+255),b
 13225  001028                     l8030:
 13226                           
 13227                           ; BSR set to: 0
 13228  001028  0E63               	movlw	99
 13229  00102A  0100               	movlb	0	; () banked
 13230  00102C  65BF               	cpfsgt	actuatorTest@i_1720& (0+255),b
 13231  00102E  D001               	goto	l8034
 13232  001030  D00C               	goto	l1255
 13233  001032                     l8034:
 13234                           
 13235                           ; BSR set to: 0
 13236  001032  0E68               	movlw	104
 13237  001034  0100               	movlb	0	; () banked
 13238  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 13239  001038  0EE4               	movlw	228
 13240  00103A                     u9917:
 13241  00103A  2EE8               	decfsz	wreg,f,c
 13242  00103C  D7FE               	bra	u9917
 13243  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13244  001040  D7FC               	bra	u9917
 13245  001042  F000               	nop	
 13246  001044  0100               	movlb	0	; () banked
 13247  001046  2BBF               	incf	actuatorTest@i_1720& (0+255),f,b
 13248  001048  D7EF               	goto	l8030
 13249  00104A                     l1255:
 13250                           
 13251                           ; BSR set to: 0
 13252                           ;Test.c: 323: TMR3ON = 0;
 13253  00104A  90B1               	bcf	4017,0,c	;volatile
 13254                           
 13255                           ;Test.c: 324: (INTCONbits.GIE = 0);
 13256  00104C  9EF2               	bcf	intcon,7,c	;volatile
 13257                           
 13258                           ; BSR set to: 0
 13259                           ;Test.c: 329: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13260  00104E  0E01               	movlw	1
 13261  001050  ECC5  F029         	call	_lcdInst
 13262  001054  0E68               	movlw	104
 13263  001056  0100               	movlb	0	; () banked
 13264  001058  6FAB               	movwf	??_actuatorTest& (0+255),b
 13265  00105A  0EE4               	movlw	228
 13266  00105C                     u9927:
 13267  00105C  2EE8               	decfsz	wreg,f,c
 13268  00105E  D7FE               	bra	u9927
 13269  001060  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13270  001062  D7FC               	bra	u9927
 13271  001064  F000               	nop	
 13272  001066  0E80               	movlw	128
 13273  001068  ECC5  F029         	call	_lcdInst
 13274                           
 13275                           ;Test.c: 330: printf("TST: CAM SERVO");
 13276  00106C  0E96               	movlw	low STR_107
 13277  00106E  0100               	movlb	0	; () banked
 13278  001070  6F8E               	movwf	printf@f& (0+255),b
 13279  001072  0EFE               	movlw	high STR_107
 13280  001074  0100               	movlb	0	; () banked
 13281  001076  6F8F               	movwf	(printf@f+1)& (0+255),b
 13282  001078  EC1B  F00B         	call	_printf	;wreg free
 13283                           
 13284                           ;Test.c: 331: lcdInst(0b11000000);;
 13285  00107C  0EC0               	movlw	192
 13286  00107E  ECC5  F029         	call	_lcdInst
 13287                           
 13288                           ;Test.c: 332: printf("CAM UP  |RC0=1");
 13289  001082  0E78               	movlw	low STR_108
 13290  001084  0100               	movlb	0	; () banked
 13291  001086  6F8E               	movwf	printf@f& (0+255),b
 13292  001088  0EFE               	movlw	high STR_108
 13293  00108A  0100               	movlb	0	; () banked
 13294  00108C  6F8F               	movwf	(printf@f+1)& (0+255),b
 13295  00108E  EC1B  F00B         	call	_printf	;wreg free
 13296                           
 13297                           ;Test.c: 333: LATCbits.LATC0 = 1;
 13298  001092  808B               	bsf	3979,0,c	;volatile
 13299                           
 13300                           ;Test.c: 334: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13301  001094  0E00               	movlw	0
 13302  001096  0100               	movlb	0	; () banked
 13303  001098  6FC0               	movwf	actuatorTest@i_1723& (0+255),b
 13304  00109A                     l8054:
 13305                           
 13306                           ; BSR set to: 0
 13307  00109A  0E63               	movlw	99
 13308  00109C  0100               	movlb	0	; () banked
 13309  00109E  65C0               	cpfsgt	actuatorTest@i_1723& (0+255),b
 13310  0010A0  D001               	goto	l8058
 13311  0010A2  D00C               	goto	l8062
 13312  0010A4                     l8058:
 13313                           
 13314                           ; BSR set to: 0
 13315  0010A4  0E68               	movlw	104
 13316  0010A6  0100               	movlb	0	; () banked
 13317  0010A8  6FAB               	movwf	??_actuatorTest& (0+255),b
 13318  0010AA  0EE4               	movlw	228
 13319  0010AC                     u9937:
 13320  0010AC  2EE8               	decfsz	wreg,f,c
 13321  0010AE  D7FE               	bra	u9937
 13322  0010B0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13323  0010B2  D7FC               	bra	u9937
 13324  0010B4  F000               	nop	
 13325  0010B6  0100               	movlb	0	; () banked
 13326  0010B8  2BC0               	incf	actuatorTest@i_1723& (0+255),f,b
 13327  0010BA  D7EF               	goto	l8054
 13328  0010BC                     l8062:
 13329                           
 13330                           ; BSR set to: 0
 13331  0010BC  0E00               	movlw	0
 13332  0010BE  0100               	movlb	0	; () banked
 13333  0010C0  6FC1               	movwf	actuatorTest@i_1724& (0+255),b
 13334  0010C2                     l8064:
 13335                           
 13336                           ; BSR set to: 0
 13337  0010C2  0E63               	movlw	99
 13338  0010C4  0100               	movlb	0	; () banked
 13339  0010C6  65C1               	cpfsgt	actuatorTest@i_1724& (0+255),b
 13340  0010C8  D001               	goto	l8068
 13341  0010CA  D00C               	goto	l8072
 13342  0010CC                     l8068:
 13343                           
 13344                           ; BSR set to: 0
 13345  0010CC  0E68               	movlw	104
 13346  0010CE  0100               	movlb	0	; () banked
 13347  0010D0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13348  0010D2  0EE4               	movlw	228
 13349  0010D4                     u9947:
 13350  0010D4  2EE8               	decfsz	wreg,f,c
 13351  0010D6  D7FE               	bra	u9947
 13352  0010D8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13353  0010DA  D7FC               	bra	u9947
 13354  0010DC  F000               	nop	
 13355  0010DE  0100               	movlb	0	; () banked
 13356  0010E0  2BC1               	incf	actuatorTest@i_1724& (0+255),f,b
 13357  0010E2  D7EF               	goto	l8064
 13358  0010E4                     l8072:
 13359                           
 13360                           ; BSR set to: 0
 13361                           ;Test.c: 335: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13362  0010E4  0E80               	movlw	128
 13363  0010E6  ECC5  F029         	call	_lcdInst
 13364  0010EA  0EC0               	movlw	192
 13365  0010EC  ECC5  F029         	call	_lcdInst
 13366                           
 13367                           ;Test.c: 336: printf("CAM DWN |RC0=0");
 13368  0010F0  0E69               	movlw	low STR_109
 13369  0010F2  0100               	movlb	0	; () banked
 13370  0010F4  6F8E               	movwf	printf@f& (0+255),b
 13371  0010F6  0EFE               	movlw	high STR_109
 13372  0010F8  0100               	movlb	0	; () banked
 13373  0010FA  6F8F               	movwf	(printf@f+1)& (0+255),b
 13374  0010FC  EC1B  F00B         	call	_printf	;wreg free
 13375                           
 13376                           ;Test.c: 339: for(i=0;i<10000;i++)
 13377  001100  0E00               	movlw	0
 13378  001102  0100               	movlb	0	; () banked
 13379  001104  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13380  001106  0E00               	movlw	0
 13381  001108  6FC4               	movwf	actuatorTest@i& (0+255),b
 13382  00110A                     l8078:
 13383                           
 13384                           ; BSR set to: 0
 13385  00110A  0100               	movlb	0	; () banked
 13386  00110C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13387  00110E  D008               	goto	l1260
 13388  001110  0E10               	movlw	16
 13389  001112  0100               	movlb	0	; () banked
 13390  001114  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13391  001116  0E27               	movlw	39
 13392  001118  0100               	movlb	0	; () banked
 13393  00111A  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 13394  00111C  B0D8               	btfsc	status,0,c
 13395  00111E  D00D               	goto	l8088
 13396  001120                     l1260:
 13397                           
 13398                           ; BSR set to: 0
 13399                           ;Test.c: 340: {
 13400                           ;Test.c: 341: LATCbits.LATC0 = 1;
 13401  001120  808B               	bsf	3979,0,c	;volatile
 13402                           
 13403                           ; BSR set to: 0
 13404                           ;Test.c: 342: _delay((unsigned long)((10)*(32000000/4000000.0)));
 13405  001122  0E1A               	movlw	26
 13406  001124                     u9957:
 13407  001124  2EE8               	decfsz	wreg,f,c
 13408  001126  D7FE               	bra	u9957
 13409  001128  D000               	nop2	
 13410                           
 13411                           ;Test.c: 343: LATCbits.LATC0 = 0;
 13412  00112A  908B               	bcf	3979,0,c	;volatile
 13413                           
 13414                           ;Test.c: 344: _delay((unsigned long)((90)*(32000000/4000000.0)));
 13415  00112C  0EF0               	movlw	240
 13416  00112E                     u9967:
 13417  00112E  2EE8               	decfsz	wreg,f,c
 13418  001130  D7FE               	bra	u9967
 13419  001132  0100               	movlb	0	; () banked
 13420  001134  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13421  001136  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13422  001138  D7E8               	goto	l8078
 13423  00113A                     l8088:
 13424                           
 13425                           ; BSR set to: 0
 13426                           ;Test.c: 345: }
 13427                           ;Test.c: 347: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13428  00113A  0E00               	movlw	0
 13429  00113C  0100               	movlb	0	; () banked
 13430  00113E  6FC2               	movwf	actuatorTest@i_1726& (0+255),b
 13431  001140                     l8090:
 13432                           
 13433                           ; BSR set to: 0
 13434  001140  0E63               	movlw	99
 13435  001142  0100               	movlb	0	; () banked
 13436  001144  65C2               	cpfsgt	actuatorTest@i_1726& (0+255),b
 13437  001146  D001               	goto	l8094
 13438  001148  D00C               	goto	l8098
 13439  00114A                     l8094:
 13440                           
 13441                           ; BSR set to: 0
 13442  00114A  0E68               	movlw	104
 13443  00114C  0100               	movlb	0	; () banked
 13444  00114E  6FAB               	movwf	??_actuatorTest& (0+255),b
 13445  001150  0EE4               	movlw	228
 13446  001152                     u9977:
 13447  001152  2EE8               	decfsz	wreg,f,c
 13448  001154  D7FE               	bra	u9977
 13449  001156  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13450  001158  D7FC               	bra	u9977
 13451  00115A  F000               	nop	
 13452  00115C  0100               	movlb	0	; () banked
 13453  00115E  2BC2               	incf	actuatorTest@i_1726& (0+255),f,b
 13454  001160  D7EF               	goto	l8090
 13455  001162                     l8098:
 13456                           
 13457                           ; BSR set to: 0
 13458  001162  0E00               	movlw	0
 13459  001164  0100               	movlb	0	; () banked
 13460  001166  6FC3               	movwf	actuatorTest@i_1727& (0+255),b
 13461  001168                     l8100:
 13462                           
 13463                           ; BSR set to: 0
 13464  001168  0E63               	movlw	99
 13465  00116A  0100               	movlb	0	; () banked
 13466  00116C  65C3               	cpfsgt	actuatorTest@i_1727& (0+255),b
 13467  00116E  D001               	goto	l8104
 13468  001170  D00C               	goto	l8108
 13469  001172                     l8104:
 13470                           
 13471                           ; BSR set to: 0
 13472  001172  0E68               	movlw	104
 13473  001174  0100               	movlb	0	; () banked
 13474  001176  6FAB               	movwf	??_actuatorTest& (0+255),b
 13475  001178  0EE4               	movlw	228
 13476  00117A                     u9987:
 13477  00117A  2EE8               	decfsz	wreg,f,c
 13478  00117C  D7FE               	bra	u9987
 13479  00117E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13480  001180  D7FC               	bra	u9987
 13481  001182  F000               	nop	
 13482  001184  0100               	movlb	0	; () banked
 13483  001186  2BC3               	incf	actuatorTest@i_1727& (0+255),f,b
 13484  001188  D7EF               	goto	l8100
 13485  00118A                     l8108:
 13486                           
 13487                           ; BSR set to: 0
 13488                           ;Test.c: 348: machine_state = Testing_state;
 13489  00118A  0E03               	movlw	3
 13490  00118C  0100               	movlb	0	; () banked
 13491  00118E  6FFC               	movwf	_machine_state& (0+255),b
 13492                           
 13493                           ; BSR set to: 0
 13494  001190  0012               	return		;funcret
 13495  001192                     __end_of_actuatorTest:
 13496                           	opt stack 0
 13497                           tblptru	equ	0xFF8
 13498                           tblptrh	equ	0xFF7
 13499                           tblptrl	equ	0xFF6
 13500                           tablat	equ	0xFF5
 13501                           prodh	equ	0xFF4
 13502                           prodl	equ	0xFF3
 13503                           intcon	equ	0xFF2
 13504                           intcon2	equ	0xFF1
 13505                           intcon3	equ	0xFF0
 13506                           postinc0	equ	0xFEE
 13507                           wreg	equ	0xFE8
 13508                           postdec1	equ	0xFE5
 13509                           fsr1l	equ	0xFE1
 13510                           indf2	equ	0xFDF
 13511                           postinc2	equ	0xFDE
 13512                           postdec2	equ	0xFDD
 13513                           fsr2h	equ	0xFDA
 13514                           fsr2l	equ	0xFD9
 13515                           status	equ	0xFD8
 13516                           
 13517 ;; *************** function _SpeedTest *****************
 13518 ;; Defined at:
 13519 ;;		line 513 in file "Test.c"
 13520 ;; Parameters:    Size  Location     Type
 13521 ;;		None
 13522 ;; Auto vars:     Size  Location     Type
 13523 ;;		None
 13524 ;; Return value:  Size  Location     Type
 13525 ;;                  1    wreg      void 
 13526 ;; Registers used:
 13527 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13528 ;; Tracked objects:
 13529 ;;		On entry : 0/0
 13530 ;;		On exit  : 0/0
 13531 ;;		Unchanged: 0/0
 13532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13535 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13536 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13537 ;;Total ram usage:        1 bytes
 13538 ;; Hardware stack levels used:    1
 13539 ;; Hardware stack levels required when called:   10
 13540 ;; This function calls:
 13541 ;;		_lcdInst
 13542 ;;		_printf
 13543 ;; This function is called by:
 13544 ;;		_Test
 13545 ;; This function uses a non-reentrant model
 13546 ;;
 13547                           
 13548                           	psect	text42
 13549  00472A                     __ptext42:
 13550                           	opt stack 0
 13551  00472A                     _SpeedTest:
 13552                           	opt stack 19
 13553                           
 13554                           ;Test.c: 515: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13555                           
 13556                           ; BSR set to: 0
 13557                           ;incstack = 0
 13558  00472A  0E01               	movlw	1
 13559  00472C  ECC5  F029         	call	_lcdInst
 13560  004730  0E68               	movlw	104
 13561  004732  0100               	movlb	0	; () banked
 13562  004734  6FAB               	movwf	??_SpeedTest& (0+255),b
 13563  004736  0EE4               	movlw	228
 13564  004738                     u9997:
 13565  004738  2EE8               	decfsz	wreg,f,c
 13566  00473A  D7FE               	bra	u9997
 13567  00473C  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13568  00473E  D7FC               	bra	u9997
 13569  004740  F000               	nop	
 13570  004742  0E80               	movlw	128
 13571  004744  ECC5  F029         	call	_lcdInst
 13572                           
 13573                           ;Test.c: 516: printf("S: D WILL RETURN ");
 13574  004748  0E39               	movlw	low STR_120
 13575  00474A  0100               	movlb	0	; () banked
 13576  00474C  6F8E               	movwf	printf@f& (0+255),b
 13577  00474E  0EFB               	movlw	high STR_120
 13578  004750  0100               	movlb	0	; () banked
 13579  004752  6F8F               	movwf	(printf@f+1)& (0+255),b
 13580  004754  EC1B  F00B         	call	_printf	;wreg free
 13581                           
 13582                           ;Test.c: 517: lcdInst(0b11000000);;
 13583  004758  0EC0               	movlw	192
 13584  00475A  ECC5  F029         	call	_lcdInst
 13585                           
 13586                           ;Test.c: 518: printf("OTHER SETS RA5   ");
 13587  00475E  0E27               	movlw	low STR_121
 13588  004760  0100               	movlb	0	; () banked
 13589  004762  6F8E               	movwf	printf@f& (0+255),b
 13590  004764  0EFB               	movlw	high STR_121
 13591  004766  0100               	movlb	0	; () banked
 13592  004768  6F8F               	movwf	(printf@f+1)& (0+255),b
 13593  00476A  EC1B  F00B         	call	_printf	;wreg free
 13594  00476E                     l1325:
 13595  00476E  A281               	btfss	3969,1,c	;volatile
 13596  004770  D7FE               	goto	l1325
 13597                           
 13598                           ;Test.c: 523: }
 13599                           ;Test.c: 524: if(PORTB >> 4 == 0b1111){
 13600  004772  3881               	swapf	3969,w,c	;volatile
 13601  004774  0B0F               	andlw	15
 13602  004776  0A0F               	xorlw	15
 13603  004778  B4D8               	btfsc	status,2,c
 13604  00477A  0012               	return	
 13605  00477C  D014               	goto	l8190
 13606  00477E                     l1332:
 13607                           
 13608                           ;Test.c: 529: LATBbits.LATB2 = 1;
 13609  00477E  848A               	bsf	3978,2,c	;volatile
 13610                           
 13611                           ;Test.c: 530: _delay((unsigned long)((5)*(32000000/4000.0)));
 13612  004780  0E34               	movlw	52
 13613  004782  0100               	movlb	0	; () banked
 13614  004784  6FAB               	movwf	??_SpeedTest& (0+255),b
 13615  004786  0EF1               	movlw	241
 13616  004788                     u10007:
 13617  004788  2EE8               	decfsz	wreg,f,c
 13618  00478A  D7FE               	bra	u10007
 13619  00478C  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13620  00478E  D7FC               	bra	u10007
 13621  004790  D000               	nop2	
 13622                           
 13623                           ;Test.c: 531: LATBbits.LATB2 = 0;
 13624  004792  948A               	bcf	3978,2,c	;volatile
 13625                           
 13626                           ;Test.c: 532: _delay((unsigned long)((5)*(32000000/4000.0)));
 13627  004794  0E34               	movlw	52
 13628  004796  0100               	movlb	0	; () banked
 13629  004798  6FAB               	movwf	??_SpeedTest& (0+255),b
 13630  00479A  0EF1               	movlw	241
 13631  00479C                     u10017:
 13632  00479C  2EE8               	decfsz	wreg,f,c
 13633  00479E  D7FE               	bra	u10017
 13634  0047A0  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13635  0047A2  D7FC               	bra	u10017
 13636  0047A4  D000               	nop2	
 13637  0047A6                     l8190:
 13638  0047A6  B281               	btfsc	3969,1,c	;volatile
 13639  0047A8  D7EA               	goto	l1332
 13640                           
 13641                           ;Test.c: 535: }
 13642                           ;Test.c: 536: LATBbits.LATB2 = 0;
 13643  0047AA  948A               	bcf	3978,2,c	;volatile
 13644  0047AC  D7E0               	goto	l1325
 13645  0047AE                     __end_of_SpeedTest:
 13646                           	opt stack 0
 13647                           tblptru	equ	0xFF8
 13648                           tblptrh	equ	0xFF7
 13649                           tblptrl	equ	0xFF6
 13650                           tablat	equ	0xFF5
 13651                           prodh	equ	0xFF4
 13652                           prodl	equ	0xFF3
 13653                           intcon	equ	0xFF2
 13654                           intcon2	equ	0xFF1
 13655                           intcon3	equ	0xFF0
 13656                           postinc0	equ	0xFEE
 13657                           wreg	equ	0xFE8
 13658                           postdec1	equ	0xFE5
 13659                           fsr1l	equ	0xFE1
 13660                           indf2	equ	0xFDF
 13661                           postinc2	equ	0xFDE
 13662                           postdec2	equ	0xFDD
 13663                           fsr2h	equ	0xFDA
 13664                           fsr2l	equ	0xFD9
 13665                           status	equ	0xFD8
 13666                           
 13667 ;; *************** function _PusherTest *****************
 13668 ;; Defined at:
 13669 ;;		line 431 in file "Test.c"
 13670 ;; Parameters:    Size  Location     Type
 13671 ;;		None
 13672 ;; Auto vars:     Size  Location     Type
 13673 ;;  i               2   51[BANK0 ] int 
 13674 ;;  i               2   49[BANK0 ] int 
 13675 ;;  res             2   47[BANK0 ] int 
 13676 ;;  res             2   45[BANK0 ] int 
 13677 ;; Return value:  Size  Location     Type
 13678 ;;                  1    wreg      void 
 13679 ;; Registers used:
 13680 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13681 ;; Tracked objects:
 13682 ;;		On entry : 0/0
 13683 ;;		On exit  : 0/0
 13684 ;;		Unchanged: 0/0
 13685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13687 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13688 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13689 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13690 ;;Total ram usage:       10 bytes
 13691 ;; Hardware stack levels used:    1
 13692 ;; Hardware stack levels required when called:   10
 13693 ;; This function calls:
 13694 ;;		_lcdInst
 13695 ;;		_printf
 13696 ;;		_readADC
 13697 ;; This function is called by:
 13698 ;;		_Test
 13699 ;; This function uses a non-reentrant model
 13700 ;;
 13701                           
 13702                           	psect	text43
 13703  002EF8                     __ptext43:
 13704                           	opt stack 0
 13705  002EF8                     _PusherTest:
 13706                           	opt stack 19
 13707                           
 13708                           ;Test.c: 432: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13709                           
 13710                           ;incstack = 0
 13711  002EF8  0E01               	movlw	1
 13712  002EFA  ECC5  F029         	call	_lcdInst
 13713  002EFE  0E68               	movlw	104
 13714  002F00  0100               	movlb	0	; () banked
 13715  002F02  6FAB               	movwf	??_PusherTest& (0+255),b
 13716  002F04  0EE4               	movlw	228
 13717  002F06                     u10027:
 13718  002F06  2EE8               	decfsz	wreg,f,c
 13719  002F08  D7FE               	bra	u10027
 13720  002F0A  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13721  002F0C  D7FC               	bra	u10027
 13722  002F0E  F000               	nop	
 13723  002F10  0E80               	movlw	128
 13724  002F12  ECC5  F029         	call	_lcdInst
 13725                           
 13726                           ;Test.c: 433: printf("PUSHER TST");
 13727  002F16  0E71               	movlw	low STR_113
 13728  002F18  0100               	movlb	0	; () banked
 13729  002F1A  6F8E               	movwf	printf@f& (0+255),b
 13730  002F1C  0EFF               	movlw	high STR_113
 13731  002F1E  0100               	movlb	0	; () banked
 13732  002F20  6F8F               	movwf	(printf@f+1)& (0+255),b
 13733  002F22  EC1B  F00B         	call	_printf	;wreg free
 13734                           
 13735                           ;Test.c: 434: LATCbits.LATC5 = 1;
 13736  002F26  8A8B               	bsf	3979,5,c	;volatile
 13737                           
 13738                           ;Test.c: 436: while(PORTBbits.RB1 == 0){
 13739  002F28  D05C               	goto	l8220
 13740  002F2A                     l8202:
 13741                           
 13742                           ;Test.c: 437: readADC(0);
 13743  002F2A  0E00               	movlw	0
 13744  002F2C  ECBC  F028         	call	_readADC
 13745                           
 13746                           ;Test.c: 438: int res = ADRESH<<8 | ADRESL;
 13747  002F30  50C3               	movf	4035,w,c	;volatile
 13748  002F32  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13749  002F36  0100               	movlb	0	; () banked
 13750  002F38  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13751  002F3A  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13752  002F3E  0100               	movlb	0	; () banked
 13753  002F40  6BAB               	clrf	??_PusherTest& (0+255),b
 13754  002F42  0100               	movlb	0	; () banked
 13755  002F44  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13756  002F46  0100               	movlb	0	; () banked
 13757  002F48  6FAD               	movwf	PusherTest@res& (0+255),b
 13758  002F4A  0100               	movlb	0	; () banked
 13759  002F4C  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13760  002F4E  0100               	movlb	0	; () banked
 13761  002F50  6FAE               	movwf	(PusherTest@res+1)& (0+255),b
 13762                           
 13763                           ; BSR set to: 0
 13764                           ;Test.c: 439: IR_signal = (res > 800) ? 1 : 0;
 13765  002F52  0100               	movlb	0	; () banked
 13766  002F54  BFAE               	btfsc	(PusherTest@res+1)& (0+255),7,b
 13767  002F56  D00A               	goto	u7040
 13768  002F58  0E21               	movlw	33
 13769  002F5A  0100               	movlb	0	; () banked
 13770  002F5C  5DAD               	subwf	PusherTest@res& (0+255),w,b
 13771  002F5E  0E03               	movlw	3
 13772  002F60  0100               	movlb	0	; () banked
 13773  002F62  59AE               	subwfb	(PusherTest@res+1)& (0+255),w,b
 13774  002F64  A0D8               	btfss	status,0,c
 13775  002F66  D002               	goto	u7040
 13776  002F68  0E01               	movlw	1
 13777  002F6A  D001               	goto	u7050
 13778  002F6C                     u7040:
 13779  002F6C  0E00               	movlw	0
 13780  002F6E                     u7050:
 13781  002F6E  0100               	movlb	0	; () banked
 13782  002F70  6FE6               	movwf	_IR_signal& (0+255),b
 13783  002F72  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 13784                           
 13785                           ;Test.c: 441: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13786  002F74  0E01               	movlw	1
 13787  002F76  ECC5  F029         	call	_lcdInst
 13788  002F7A  0E68               	movlw	104
 13789  002F7C  0100               	movlb	0	; () banked
 13790  002F7E  6FAB               	movwf	??_PusherTest& (0+255),b
 13791  002F80  0EE4               	movlw	228
 13792  002F82                     u10037:
 13793  002F82  2EE8               	decfsz	wreg,f,c
 13794  002F84  D7FE               	bra	u10037
 13795  002F86  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13796  002F88  D7FC               	bra	u10037
 13797  002F8A  F000               	nop	
 13798  002F8C  0E80               	movlw	128
 13799  002F8E  ECC5  F029         	call	_lcdInst
 13800                           
 13801                           ;Test.c: 442: printf("IR_signal: %d ", IR_signal);
 13802  002F92  0E5A               	movlw	low STR_80
 13803  002F94  0100               	movlb	0	; () banked
 13804  002F96  6F8E               	movwf	printf@f& (0+255),b
 13805  002F98  0EFE               	movlw	high STR_80
 13806  002F9A  0100               	movlb	0	; () banked
 13807  002F9C  6F8F               	movwf	(printf@f+1)& (0+255),b
 13808  002F9E  C0E6  F090         	movff	_IR_signal,?_printf+2
 13809  002FA2  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 13810  002FA6  EC1B  F00B         	call	_printf	;wreg free
 13811                           
 13812                           ;Test.c: 443: lcdInst(0b11000000);;
 13813  002FAA  0EC0               	movlw	192
 13814  002FAC  ECC5  F029         	call	_lcdInst
 13815                           
 13816                           ;Test.c: 444: printf("%d", res);
 13817  002FB0  0E16               	movlw	low (STR_27+14)
 13818  002FB2  0100               	movlb	0	; () banked
 13819  002FB4  6F8E               	movwf	printf@f& (0+255),b
 13820  002FB6  0EFE               	movlw	high (STR_27+14)
 13821  002FB8  0100               	movlb	0	; () banked
 13822  002FBA  6F8F               	movwf	(printf@f+1)& (0+255),b
 13823  002FBC  C0AD  F090         	movff	PusherTest@res,?_printf+2
 13824  002FC0  C0AE  F091         	movff	PusherTest@res+1,?_printf+3
 13825  002FC4  EC1B  F00B         	call	_printf	;wreg free
 13826                           
 13827                           ;Test.c: 445: _delay((unsigned long)((100)*(32000000/4000.0)));
 13828  002FC8  0E05               	movlw	5
 13829  002FCA  0100               	movlb	0	; () banked
 13830  002FCC  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13831  002FCE  0E0F               	movlw	15
 13832  002FD0  0100               	movlb	0	; () banked
 13833  002FD2  6FAB               	movwf	??_PusherTest& (0+255),b
 13834  002FD4  0EF1               	movlw	241
 13835  002FD6                     u10047:
 13836  002FD6  2EE8               	decfsz	wreg,f,c
 13837  002FD8  D7FE               	bra	u10047
 13838  002FDA  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13839  002FDC  D7FC               	bra	u10047
 13840  002FDE  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13841  002FE0  D7FA               	bra	u10047
 13842  002FE2                     l8220:
 13843  002FE2  B281               	btfsc	3969,1,c	;volatile
 13844  002FE4  D05D               	goto	l8240
 13845  002FE6  D7A1               	goto	l8202
 13846  002FE8                     l8222:
 13847                           
 13848                           ;Test.c: 451: readADC(0);
 13849  002FE8  0E00               	movlw	0
 13850  002FEA  ECBC  F028         	call	_readADC
 13851                           
 13852                           ;Test.c: 452: int res = ADRESH<<8 | ADRESL;
 13853  002FEE  50C3               	movf	4035,w,c	;volatile
 13854  002FF0  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13855  002FF4  0100               	movlb	0	; () banked
 13856  002FF6  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13857  002FF8  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13858  002FFC  0100               	movlb	0	; () banked
 13859  002FFE  6BAB               	clrf	??_PusherTest& (0+255),b
 13860  003000  0100               	movlb	0	; () banked
 13861  003002  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13862  003004  0100               	movlb	0	; () banked
 13863  003006  6FAF               	movwf	PusherTest@res_1738& (0+255),b
 13864  003008  0100               	movlb	0	; () banked
 13865  00300A  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13866  00300C  0100               	movlb	0	; () banked
 13867  00300E  6FB0               	movwf	(PusherTest@res_1738+1)& (0+255),b
 13868                           
 13869                           ; BSR set to: 0
 13870                           ;Test.c: 453: IR_signal = (res > 800) ? 1 : 0;
 13871  003010  0100               	movlb	0	; () banked
 13872  003012  BFB0               	btfsc	(PusherTest@res_1738+1)& (0+255),7,b
 13873  003014  D00A               	goto	u7070
 13874  003016  0E21               	movlw	33
 13875  003018  0100               	movlb	0	; () banked
 13876  00301A  5DAF               	subwf	PusherTest@res_1738& (0+255),w,b
 13877  00301C  0E03               	movlw	3
 13878  00301E  0100               	movlb	0	; () banked
 13879  003020  59B0               	subwfb	(PusherTest@res_1738+1)& (0+255),w,b
 13880  003022  A0D8               	btfss	status,0,c
 13881  003024  D002               	goto	u7070
 13882  003026  0E01               	movlw	1
 13883  003028  D001               	goto	u7080
 13884  00302A                     u7070:
 13885  00302A  0E00               	movlw	0
 13886  00302C                     u7080:
 13887  00302C  0100               	movlb	0	; () banked
 13888  00302E  6FE6               	movwf	_IR_signal& (0+255),b
 13889  003030  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 13890                           
 13891                           ;Test.c: 454: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13892  003032  0E01               	movlw	1
 13893  003034  ECC5  F029         	call	_lcdInst
 13894  003038  0E68               	movlw	104
 13895  00303A  0100               	movlb	0	; () banked
 13896  00303C  6FAB               	movwf	??_PusherTest& (0+255),b
 13897  00303E  0EE4               	movlw	228
 13898  003040                     u10057:
 13899  003040  2EE8               	decfsz	wreg,f,c
 13900  003042  D7FE               	bra	u10057
 13901  003044  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13902  003046  D7FC               	bra	u10057
 13903  003048  F000               	nop	
 13904  00304A  0E80               	movlw	128
 13905  00304C  ECC5  F029         	call	_lcdInst
 13906                           
 13907                           ;Test.c: 455: printf("IR_signal: %d ", IR_signal);
 13908  003050  0E5A               	movlw	low STR_80
 13909  003052  0100               	movlb	0	; () banked
 13910  003054  6F8E               	movwf	printf@f& (0+255),b
 13911  003056  0EFE               	movlw	high STR_80
 13912  003058  0100               	movlb	0	; () banked
 13913  00305A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13914  00305C  C0E6  F090         	movff	_IR_signal,?_printf+2
 13915  003060  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 13916  003064  EC1B  F00B         	call	_printf	;wreg free
 13917                           
 13918                           ;Test.c: 456: lcdInst(0b11000000);;
 13919  003068  0EC0               	movlw	192
 13920  00306A  ECC5  F029         	call	_lcdInst
 13921                           
 13922                           ;Test.c: 457: printf("%d", res);
 13923  00306E  0E16               	movlw	low (STR_27+14)
 13924  003070  0100               	movlb	0	; () banked
 13925  003072  6F8E               	movwf	printf@f& (0+255),b
 13926  003074  0EFE               	movlw	high (STR_27+14)
 13927  003076  0100               	movlb	0	; () banked
 13928  003078  6F8F               	movwf	(printf@f+1)& (0+255),b
 13929  00307A  C0AF  F090         	movff	PusherTest@res_1738,?_printf+2
 13930  00307E  C0B0  F091         	movff	PusherTest@res_1738+1,?_printf+3
 13931  003082  EC1B  F00B         	call	_printf	;wreg free
 13932                           
 13933                           ;Test.c: 458: _delay((unsigned long)((100)*(32000000/4000.0)));
 13934  003086  0E05               	movlw	5
 13935  003088  0100               	movlb	0	; () banked
 13936  00308A  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13937  00308C  0E0F               	movlw	15
 13938  00308E  0100               	movlb	0	; () banked
 13939  003090  6FAB               	movwf	??_PusherTest& (0+255),b
 13940  003092  0EF1               	movlw	241
 13941  003094                     u10067:
 13942  003094  2EE8               	decfsz	wreg,f,c
 13943  003096  D7FE               	bra	u10067
 13944  003098  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13945  00309A  D7FC               	bra	u10067
 13946  00309C  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13947  00309E  D7FA               	bra	u10067
 13948  0030A0                     l8240:
 13949  0030A0  A281               	btfss	3969,1,c	;volatile
 13950  0030A2  D7A2               	goto	l8222
 13951                           
 13952                           ;Test.c: 459: }
 13953                           ;Test.c: 460: if(PORTB >> 4 == 0b1111){
 13954  0030A4  3881               	swapf	3969,w,c	;volatile
 13955  0030A6  0B0F               	andlw	15
 13956  0030A8  0A0F               	xorlw	15
 13957  0030AA  B4D8               	btfsc	status,2,c
 13958  0030AC  D047               	goto	l1294
 13959                           
 13960                           ;Test.c: 465: else if(PORTB >> 4 == 0b0101){
 13961                           
 13962                           ;Test.c: 462: }
 13963                           
 13964                           ;Test.c: 461: break;
 13965  0030AE  3881               	swapf	3969,w,c	;volatile
 13966  0030B0  0B0F               	andlw	15
 13967  0030B2  0A05               	xorlw	5
 13968  0030B4  A4D8               	btfss	status,2,c
 13969  0030B6  D01D               	goto	l8262
 13970                           
 13971                           ;Test.c: 466: for(int i = 0; i<3000; i++){
 13972  0030B8  0E00               	movlw	0
 13973  0030BA  0100               	movlb	0	; () banked
 13974  0030BC  6FB2               	movwf	(PusherTest@i+1)& (0+255),b
 13975  0030BE  0E00               	movlw	0
 13976  0030C0  6FB1               	movwf	PusherTest@i& (0+255),b
 13977  0030C2                     l8252:
 13978                           
 13979                           ; BSR set to: 0
 13980  0030C2  0100               	movlb	0	; () banked
 13981  0030C4  BFB2               	btfsc	(PusherTest@i+1)& (0+255),7,b
 13982  0030C6  D008               	goto	l1297
 13983  0030C8  0EB8               	movlw	184
 13984  0030CA  0100               	movlb	0	; () banked
 13985  0030CC  5DB1               	subwf	PusherTest@i& (0+255),w,b
 13986  0030CE  0E0B               	movlw	11
 13987  0030D0  0100               	movlb	0	; () banked
 13988  0030D2  59B2               	subwfb	(PusherTest@i+1)& (0+255),w,b
 13989  0030D4  B0D8               	btfsc	status,0,c
 13990  0030D6  D02F               	goto	l1303
 13991  0030D8                     l1297:
 13992                           
 13993                           ; BSR set to: 0
 13994                           ;Test.c: 467: LATAbits.LATA4 = 1;
 13995  0030D8  8889               	bsf	3977,4,c	;volatile
 13996                           
 13997                           ; BSR set to: 0
 13998                           ;Test.c: 468: _delay((unsigned long)((75)*(32000000/4000000.0)));
 13999  0030DA  0EC8               	movlw	200
 14000  0030DC                     u10077:
 14001  0030DC  2EE8               	decfsz	wreg,f,c
 14002  0030DE  D7FE               	bra	u10077
 14003                           
 14004                           ;Test.c: 469: LATAbits.LATA4 = 0;
 14005  0030E0  9889               	bcf	3977,4,c	;volatile
 14006                           
 14007                           ;Test.c: 470: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14008  0030E2  0E42               	movlw	66
 14009  0030E4                     u10087:
 14010  0030E4  2EE8               	decfsz	wreg,f,c
 14011  0030E6  D7FE               	bra	u10087
 14012  0030E8  D000               	nop2	
 14013  0030EA  0100               	movlb	0	; () banked
 14014  0030EC  4BB1               	infsnz	PusherTest@i& (0+255),f,b
 14015  0030EE  2BB2               	incf	(PusherTest@i+1)& (0+255),f,b
 14016  0030F0  D7E8               	goto	l8252
 14017  0030F2                     l8262:
 14018                           
 14019                           ;Test.c: 473: else if (PORTB >> 4 == 0b110){
 14020  0030F2  3881               	swapf	3969,w,c	;volatile
 14021  0030F4  0B0F               	andlw	15
 14022  0030F6  0A06               	xorlw	6
 14023  0030F8  A4D8               	btfss	status,2,c
 14024  0030FA  D01D               	goto	l1303
 14025                           
 14026                           ;Test.c: 474: for(int i = 0; i<3000; i++){
 14027  0030FC  0E00               	movlw	0
 14028  0030FE  0100               	movlb	0	; () banked
 14029  003100  6FB4               	movwf	(PusherTest@i_1742+1)& (0+255),b
 14030  003102  0E00               	movlw	0
 14031  003104  6FB3               	movwf	PusherTest@i_1742& (0+255),b
 14032  003106                     l8266:
 14033                           
 14034                           ; BSR set to: 0
 14035  003106  0100               	movlb	0	; () banked
 14036  003108  BFB4               	btfsc	(PusherTest@i_1742+1)& (0+255),7,b
 14037  00310A  D008               	goto	l1301
 14038  00310C  0EB8               	movlw	184
 14039  00310E  0100               	movlb	0	; () banked
 14040  003110  5DB3               	subwf	PusherTest@i_1742& (0+255),w,b
 14041  003112  0E0B               	movlw	11
 14042  003114  0100               	movlb	0	; () banked
 14043  003116  59B4               	subwfb	(PusherTest@i_1742+1)& (0+255),w,b
 14044  003118  B0D8               	btfsc	status,0,c
 14045  00311A  D00D               	goto	l1303
 14046  00311C                     l1301:
 14047                           
 14048                           ; BSR set to: 0
 14049                           ;Test.c: 475: LATAbits.LATA4 = 1;
 14050  00311C  8889               	bsf	3977,4,c	;volatile
 14051                           
 14052                           ; BSR set to: 0
 14053                           ;Test.c: 476: _delay((unsigned long)((58)*(32000000/4000000.0)));
 14054  00311E  0E9A               	movlw	154
 14055  003120                     u10097:
 14056  003120  2EE8               	decfsz	wreg,f,c
 14057  003122  D7FE               	bra	u10097
 14058  003124  D000               	nop2	
 14059                           
 14060                           ;Test.c: 477: LATAbits.LATA4 = 0;
 14061  003126  9889               	bcf	3977,4,c	;volatile
 14062                           
 14063                           ;Test.c: 478: _delay((unsigned long)((42)*(32000000/4000000.0)));
 14064  003128  0E70               	movlw	112
 14065  00312A                     u10107:
 14066  00312A  2EE8               	decfsz	wreg,f,c
 14067  00312C  D7FE               	bra	u10107
 14068  00312E  0100               	movlb	0	; () banked
 14069  003130  4BB3               	infsnz	PusherTest@i_1742& (0+255),f,b
 14070  003132  2BB4               	incf	(PusherTest@i_1742+1)& (0+255),f,b
 14071  003134  D7E8               	goto	l8266
 14072  003136                     l1303:
 14073  003136  A281               	btfss	3969,1,c	;volatile
 14074  003138  D7B3               	goto	l8240
 14075  00313A  D7FD               	goto	l1303
 14076  00313C                     l1294:
 14077                           
 14078                           ;Test.c: 483: }
 14079                           ;Test.c: 484: LATCbits.LATC5 = 0;
 14080  00313C  9A8B               	bcf	3979,5,c	;volatile
 14081  00313E  0012               	return		;funcret
 14082  003140                     __end_of_PusherTest:
 14083                           	opt stack 0
 14084                           tblptru	equ	0xFF8
 14085                           tblptrh	equ	0xFF7
 14086                           tblptrl	equ	0xFF6
 14087                           tablat	equ	0xFF5
 14088                           prodh	equ	0xFF4
 14089                           prodl	equ	0xFF3
 14090                           intcon	equ	0xFF2
 14091                           intcon2	equ	0xFF1
 14092                           intcon3	equ	0xFF0
 14093                           postinc0	equ	0xFEE
 14094                           wreg	equ	0xFE8
 14095                           postdec1	equ	0xFE5
 14096                           fsr1l	equ	0xFE1
 14097                           indf2	equ	0xFDF
 14098                           postinc2	equ	0xFDE
 14099                           postdec2	equ	0xFDD
 14100                           fsr2h	equ	0xFDA
 14101                           fsr2l	equ	0xFD9
 14102                           status	equ	0xFD8
 14103                           
 14104 ;; *************** function _readADC *****************
 14105 ;; Defined at:
 14106 ;;		line 15 in file "ADCFunctionality.c"
 14107 ;; Parameters:    Size  Location     Type
 14108 ;;  channel         1    wreg     unsigned char 
 14109 ;; Auto vars:     Size  Location     Type
 14110 ;;  channel         1    1[BANK0 ] unsigned char 
 14111 ;; Return value:  Size  Location     Type
 14112 ;;                  1    wreg      void 
 14113 ;; Registers used:
 14114 ;;		wreg, status,2, status,0, cstack
 14115 ;; Tracked objects:
 14116 ;;		On entry : 0/0
 14117 ;;		On exit  : 0/0
 14118 ;;		Unchanged: 0/0
 14119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14121 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14122 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14123 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14124 ;;Total ram usage:        2 bytes
 14125 ;; Hardware stack levels used:    1
 14126 ;; Hardware stack levels required when called:    7
 14127 ;; This function calls:
 14128 ;;		Nothing
 14129 ;; This function is called by:
 14130 ;;		_readIR
 14131 ;;		_readMAG
 14132 ;;		_sensorTest
 14133 ;;		_PusherTest
 14134 ;; This function uses a non-reentrant model
 14135 ;;
 14136                           
 14137                           	psect	text44
 14138  005178                     __ptext44:
 14139                           	opt stack 0
 14140  005178                     _readADC:
 14141                           	opt stack 20
 14142                           
 14143                           ;incstack = 0
 14144                           ;readADC@channel stored from wreg
 14145  005178  0100               	movlb	0	; () banked
 14146  00517A  6F81               	movwf	readADC@channel& (0+255),b
 14147                           
 14148                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 14149  00517C  0100               	movlb	0	; () banked
 14150  00517E  4581               	rlncf	readADC@channel& (0+255),w,b
 14151  005180  46E8               	rlncf	wreg,f,c
 14152  005182  0BFC               	andlw	252
 14153  005184  6EC2               	movwf	4034,c	;volatile
 14154                           
 14155                           ; BSR set to: 0
 14156                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 14157  005186  80C2               	bsf	4034,0,c	;volatile
 14158                           
 14159                           ; BSR set to: 0
 14160                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 14161  005188  82C2               	bsf	4034,1,c	;volatile
 14162                           
 14163                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 14164  00518A  D009               	goto	l6062
 14165  00518C                     l6060:
 14166  00518C  0E34               	movlw	52
 14167  00518E  0100               	movlb	0	; () banked
 14168  005190  6F80               	movwf	??_readADC& (0+255),b
 14169  005192  0EF1               	movlw	241
 14170  005194                     u10117:
 14171  005194  2EE8               	decfsz	wreg,f,c
 14172  005196  D7FE               	bra	u10117
 14173  005198  2F80               	decfsz	??_readADC& (0+255),f,b
 14174  00519A  D7FC               	bra	u10117
 14175  00519C  D000               	nop2	
 14176  00519E                     l6062:
 14177  00519E  A2C2               	btfss	4034,1,c	;volatile
 14178  0051A0  0012               	return	
 14179  0051A2  D7F4               	goto	l6060
 14180  0051A4                     __end_of_readADC:
 14181                           	opt stack 0
 14182                           tblptru	equ	0xFF8
 14183                           tblptrh	equ	0xFF7
 14184                           tblptrl	equ	0xFF6
 14185                           tablat	equ	0xFF5
 14186                           prodh	equ	0xFF4
 14187                           prodl	equ	0xFF3
 14188                           intcon	equ	0xFF2
 14189                           intcon2	equ	0xFF1
 14190                           intcon3	equ	0xFF0
 14191                           postinc0	equ	0xFEE
 14192                           wreg	equ	0xFE8
 14193                           postdec1	equ	0xFE5
 14194                           fsr1l	equ	0xFE1
 14195                           indf2	equ	0xFDF
 14196                           postinc2	equ	0xFDE
 14197                           postdec2	equ	0xFDD
 14198                           fsr2h	equ	0xFDA
 14199                           fsr2l	equ	0xFD9
 14200                           status	equ	0xFD8
 14201                           
 14202 ;; *************** function _PortTestDC *****************
 14203 ;; Defined at:
 14204 ;;		line 408 in file "Test.c"
 14205 ;; Parameters:    Size  Location     Type
 14206 ;;		None
 14207 ;; Auto vars:     Size  Location     Type
 14208 ;;		None
 14209 ;; Return value:  Size  Location     Type
 14210 ;;                  1    wreg      void 
 14211 ;; Registers used:
 14212 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14213 ;; Tracked objects:
 14214 ;;		On entry : 0/0
 14215 ;;		On exit  : 0/0
 14216 ;;		Unchanged: 0/0
 14217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14220 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14221 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14222 ;;Total ram usage:        1 bytes
 14223 ;; Hardware stack levels used:    1
 14224 ;; Hardware stack levels required when called:   10
 14225 ;; This function calls:
 14226 ;;		_lcdInst
 14227 ;;		_printf
 14228 ;; This function is called by:
 14229 ;;		_Test
 14230 ;; This function uses a non-reentrant model
 14231 ;;
 14232                           
 14233                           	psect	text45
 14234  004B04                     __ptext45:
 14235                           	opt stack 0
 14236  004B04                     _PortTestDC:
 14237                           	opt stack 19
 14238                           
 14239                           ;Test.c: 409: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14240                           
 14241                           ;incstack = 0
 14242  004B04  0E01               	movlw	1
 14243  004B06  ECC5  F029         	call	_lcdInst
 14244  004B0A  0E68               	movlw	104
 14245  004B0C  0100               	movlb	0	; () banked
 14246  004B0E  6FAB               	movwf	??_PortTestDC& (0+255),b
 14247  004B10  0EE4               	movlw	228
 14248  004B12                     u10127:
 14249  004B12  2EE8               	decfsz	wreg,f,c
 14250  004B14  D7FE               	bra	u10127
 14251  004B16  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 14252  004B18  D7FC               	bra	u10127
 14253  004B1A  F000               	nop	
 14254  004B1C  0E80               	movlw	128
 14255  004B1E  ECC5  F029         	call	_lcdInst
 14256                           
 14257                           ;Test.c: 410: printf("D WILL RETURN    ");
 14258  004B22  0E15               	movlw	low STR_111
 14259  004B24  0100               	movlb	0	; () banked
 14260  004B26  6F8E               	movwf	printf@f& (0+255),b
 14261  004B28  0EFB               	movlw	high STR_111
 14262  004B2A  0100               	movlb	0	; () banked
 14263  004B2C  6F8F               	movwf	(printf@f+1)& (0+255),b
 14264  004B2E  EC1B  F00B         	call	_printf	;wreg free
 14265                           
 14266                           ;Test.c: 411: lcdInst(0b11000000);;
 14267  004B32  0EC0               	movlw	192
 14268  004B34  ECC5  F029         	call	_lcdInst
 14269                           
 14270                           ;Test.c: 412: printf("OTHER SETS DC   ");
 14271  004B38  0EF9               	movlw	low STR_112
 14272  004B3A  0100               	movlb	0	; () banked
 14273  004B3C  6F8E               	movwf	printf@f& (0+255),b
 14274  004B3E  0EFB               	movlw	high STR_112
 14275  004B40  0100               	movlb	0	; () banked
 14276  004B42  6F8F               	movwf	(printf@f+1)& (0+255),b
 14277  004B44  EC1B  F00B         	call	_printf	;wreg free
 14278  004B48                     l1273:
 14279  004B48  A281               	btfss	3969,1,c	;volatile
 14280  004B4A  D7FE               	goto	l1273
 14281                           
 14282                           ;Test.c: 417: }
 14283                           ;Test.c: 418: if(PORTB >> 4 == 0b1111){
 14284  004B4C  3881               	swapf	3969,w,c	;volatile
 14285  004B4E  0B0F               	andlw	15
 14286  004B50  0A0F               	xorlw	15
 14287  004B52  B4D8               	btfsc	status,2,c
 14288  004B54  0012               	return	
 14289                           
 14290                           ;Test.c: 421: else{
 14291                           ;Test.c: 422: LATBbits.LATB2 = 1;
 14292                           
 14293                           ;Test.c: 420: }
 14294                           
 14295                           ;Test.c: 419: break;
 14296  004B56  848A               	bsf	3978,2,c	;volatile
 14297  004B58                     l1279:
 14298  004B58  B281               	btfsc	3969,1,c	;volatile
 14299  004B5A  D7FE               	goto	l1279
 14300                           
 14301                           ;Test.c: 425: }
 14302                           ;Test.c: 426: LATBbits.LATB2 = 0;
 14303  004B5C  948A               	bcf	3978,2,c	;volatile
 14304  004B5E  D7F4               	goto	l1273
 14305  004B60                     __end_of_PortTestDC:
 14306                           	opt stack 0
 14307                           tblptru	equ	0xFF8
 14308                           tblptrh	equ	0xFF7
 14309                           tblptrl	equ	0xFF6
 14310                           tablat	equ	0xFF5
 14311                           prodh	equ	0xFF4
 14312                           prodl	equ	0xFF3
 14313                           intcon	equ	0xFF2
 14314                           intcon2	equ	0xFF1
 14315                           intcon3	equ	0xFF0
 14316                           postinc0	equ	0xFEE
 14317                           wreg	equ	0xFE8
 14318                           postdec1	equ	0xFE5
 14319                           fsr1l	equ	0xFE1
 14320                           indf2	equ	0xFDF
 14321                           postinc2	equ	0xFDE
 14322                           postdec2	equ	0xFDD
 14323                           fsr2h	equ	0xFDA
 14324                           fsr2l	equ	0xFD9
 14325                           status	equ	0xFD8
 14326                           
 14327 ;; *************** function _EEPROMTest *****************
 14328 ;; Defined at:
 14329 ;;		line 541 in file "Test.c"
 14330 ;; Parameters:    Size  Location     Type
 14331 ;;		None
 14332 ;; Auto vars:     Size  Location     Type
 14333 ;;		None
 14334 ;; Return value:  Size  Location     Type
 14335 ;;                  1    wreg      void 
 14336 ;; Registers used:
 14337 ;;		None
 14338 ;; Tracked objects:
 14339 ;;		On entry : 0/0
 14340 ;;		On exit  : 0/0
 14341 ;;		Unchanged: 0/0
 14342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14346 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14347 ;;Total ram usage:        0 bytes
 14348 ;; Hardware stack levels used:    1
 14349 ;; Hardware stack levels required when called:    7
 14350 ;; This function calls:
 14351 ;;		Nothing
 14352 ;; This function is called by:
 14353 ;;		_Test
 14354 ;; This function uses a non-reentrant model
 14355 ;;
 14356                           
 14357                           	psect	text46
 14358  0053EE                     __ptext46:
 14359                           	opt stack 0
 14360  0053EE                     _EEPROMTest:
 14361                           	opt stack 22
 14362                           
 14363                           ;incstack = 0
 14364  0053EE  0012               	return		;funcret
 14365  0053F0                     __end_of_EEPROMTest:
 14366                           	opt stack 0
 14367                           tblptru	equ	0xFF8
 14368                           tblptrh	equ	0xFF7
 14369                           tblptrl	equ	0xFF6
 14370                           tablat	equ	0xFF5
 14371                           prodh	equ	0xFF4
 14372                           prodl	equ	0xFF3
 14373                           intcon	equ	0xFF2
 14374                           intcon2	equ	0xFF1
 14375                           intcon3	equ	0xFF0
 14376                           postinc0	equ	0xFEE
 14377                           wreg	equ	0xFE8
 14378                           postdec1	equ	0xFE5
 14379                           fsr1l	equ	0xFE1
 14380                           indf2	equ	0xFDF
 14381                           postinc2	equ	0xFDE
 14382                           postdec2	equ	0xFDD
 14383                           fsr2h	equ	0xFDA
 14384                           fsr2l	equ	0xFD9
 14385                           status	equ	0xFD8
 14386                           
 14387 ;; *************** function _BothServos *****************
 14388 ;; Defined at:
 14389 ;;		line 351 in file "Test.c"
 14390 ;; Parameters:    Size  Location     Type
 14391 ;;		None
 14392 ;; Auto vars:     Size  Location     Type
 14393 ;;		None
 14394 ;; Return value:  Size  Location     Type
 14395 ;;                  1    wreg      void 
 14396 ;; Registers used:
 14397 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14398 ;; Tracked objects:
 14399 ;;		On entry : 0/0
 14400 ;;		On exit  : 0/0
 14401 ;;		Unchanged: 0/0
 14402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14405 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14406 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14407 ;;Total ram usage:        2 bytes
 14408 ;; Hardware stack levels used:    1
 14409 ;; Hardware stack levels required when called:   10
 14410 ;; This function calls:
 14411 ;;		_initServos
 14412 ;;		_lcdInst
 14413 ;;		_printf
 14414 ;;		_updateServoPosition
 14415 ;; This function is called by:
 14416 ;;		_Test
 14417 ;; This function uses a non-reentrant model
 14418 ;;
 14419                           
 14420                           	psect	text47
 14421  001A6E                     __ptext47:
 14422                           	opt stack 0
 14423  001A6E                     _BothServos:
 14424                           	opt stack 19
 14425                           
 14426                           ;Test.c: 352: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14427                           
 14428                           ;incstack = 0
 14429  001A6E  0E01               	movlw	1
 14430  001A70  ECC5  F029         	call	_lcdInst
 14431  001A74  0E68               	movlw	104
 14432  001A76  0100               	movlb	0	; () banked
 14433  001A78  6FAB               	movwf	??_BothServos& (0+255),b
 14434  001A7A  0EE4               	movlw	228
 14435  001A7C                     u10137:
 14436  001A7C  2EE8               	decfsz	wreg,f,c
 14437  001A7E  D7FE               	bra	u10137
 14438  001A80  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14439  001A82  D7FC               	bra	u10137
 14440  001A84  F000               	nop	
 14441  001A86  0E80               	movlw	128
 14442  001A88  ECC5  F029         	call	_lcdInst
 14443                           
 14444                           ;Test.c: 353: printf("TST: BOTH SERVOS");
 14445  001A8C  0EB4               	movlw	low STR_110
 14446  001A8E  0100               	movlb	0	; () banked
 14447  001A90  6F8E               	movwf	printf@f& (0+255),b
 14448  001A92  0EFC               	movlw	high STR_110
 14449  001A94  0100               	movlb	0	; () banked
 14450  001A96  6F8F               	movwf	(printf@f+1)& (0+255),b
 14451  001A98  EC1B  F00B         	call	_printf	;wreg free
 14452                           
 14453                           ;Test.c: 354: TMR1ON = 1;
 14454  001A9C  80CD               	bsf	4045,0,c	;volatile
 14455                           
 14456                           ;Test.c: 355: TMR3ON = 1;
 14457  001A9E  80B1               	bsf	4017,0,c	;volatile
 14458                           
 14459                           ;Test.c: 356: machine_state = Sorting_state;
 14460  001AA0  0E01               	movlw	1
 14461  001AA2  0100               	movlb	0	; () banked
 14462  001AA4  6FFC               	movwf	_machine_state& (0+255),b
 14463                           
 14464                           ; BSR set to: 0
 14465                           ;Test.c: 357: was_low_1 = 0;
 14466  001AA6  0E00               	movlw	0
 14467  001AA8  6E7A               	movwf	_was_low_1+1,c	;volatile
 14468  001AAA  0E00               	movlw	0
 14469  001AAC  6E79               	movwf	_was_low_1,c	;volatile
 14470                           
 14471                           ; BSR set to: 0
 14472                           ;Test.c: 358: was_low_3 = 0;
 14473  001AAE  0E00               	movlw	0
 14474  001AB0  6E7C               	movwf	_was_low_3+1,c	;volatile
 14475  001AB2  0E00               	movlw	0
 14476  001AB4  6E7B               	movwf	_was_low_3,c	;volatile
 14477                           
 14478                           ; BSR set to: 0
 14479                           ;Test.c: 364: initServos();
 14480  001AB6  ECB0  F025         	call	_initServos	;wreg free
 14481                           
 14482                           ;Test.c: 365: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14483  001ABA  0E3D               	movlw	61
 14484  001ABC  0100               	movlb	0	; () banked
 14485  001ABE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14486  001AC0  0EE1               	movlw	225
 14487  001AC2  0100               	movlb	0	; () banked
 14488  001AC4  6FAB               	movwf	??_BothServos& (0+255),b
 14489  001AC6  0E3F               	movlw	63
 14490  001AC8                     u10147:
 14491  001AC8  2EE8               	decfsz	wreg,f,c
 14492  001ACA  D7FE               	bra	u10147
 14493  001ACC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14494  001ACE  D7FC               	bra	u10147
 14495  001AD0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14496  001AD2  D7FA               	bra	u10147
 14497  001AD4  D000               	nop2	
 14498                           
 14499                           ;Test.c: 367: updateServoPosition(500, 1);
 14500  001AD6  0E01               	movlw	1
 14501  001AD8  0100               	movlb	0	; () banked
 14502  001ADA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14503  001ADC  0EF4               	movlw	244
 14504  001ADE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14505  001AE0  0E00               	movlw	0
 14506  001AE2  0100               	movlb	0	; () banked
 14507  001AE4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14508  001AE6  0E01               	movlw	1
 14509  001AE8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14510  001AEA  EC52  F023         	call	_updateServoPosition	;wreg free
 14511                           
 14512                           ;Test.c: 368: updateServoPosition(1050, 3);
 14513  001AEE  0E04               	movlw	4
 14514  001AF0  0100               	movlb	0	; () banked
 14515  001AF2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14516  001AF4  0E1A               	movlw	26
 14517  001AF6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14518  001AF8  0E00               	movlw	0
 14519  001AFA  0100               	movlb	0	; () banked
 14520  001AFC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14521  001AFE  0E03               	movlw	3
 14522  001B00  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14523  001B02  EC52  F023         	call	_updateServoPosition	;wreg free
 14524                           
 14525                           ;Test.c: 369: _delay((unsigned long)((750)*(32000000/4000.0)));
 14526  001B06  0E1F               	movlw	31
 14527  001B08  0100               	movlb	0	; () banked
 14528  001B0A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14529  001B0C  0E71               	movlw	113
 14530  001B0E  0100               	movlb	0	; () banked
 14531  001B10  6FAB               	movwf	??_BothServos& (0+255),b
 14532  001B12  0E1E               	movlw	30
 14533  001B14                     u10157:
 14534  001B14  2EE8               	decfsz	wreg,f,c
 14535  001B16  D7FE               	bra	u10157
 14536  001B18  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14537  001B1A  D7FC               	bra	u10157
 14538  001B1C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14539  001B1E  D7FA               	bra	u10157
 14540  001B20  F000               	nop	
 14541                           
 14542                           ;Test.c: 370: updateServoPosition(1260, 3);
 14543  001B22  0E04               	movlw	4
 14544  001B24  0100               	movlb	0	; () banked
 14545  001B26  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14546  001B28  0EEC               	movlw	236
 14547  001B2A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14548  001B2C  0E00               	movlw	0
 14549  001B2E  0100               	movlb	0	; () banked
 14550  001B30  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14551  001B32  0E03               	movlw	3
 14552  001B34  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14553  001B36  EC52  F023         	call	_updateServoPosition	;wreg free
 14554                           
 14555                           ;Test.c: 371: _delay((unsigned long)((700)*(32000000/4000.0)));
 14556  001B3A  0E1D               	movlw	29
 14557  001B3C  0100               	movlb	0	; () banked
 14558  001B3E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14559  001B40  0E69               	movlw	105
 14560  001B42  0100               	movlb	0	; () banked
 14561  001B44  6FAB               	movwf	??_BothServos& (0+255),b
 14562  001B46  0EA5               	movlw	165
 14563  001B48                     u10167:
 14564  001B48  2EE8               	decfsz	wreg,f,c
 14565  001B4A  D7FE               	bra	u10167
 14566  001B4C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14567  001B4E  D7FC               	bra	u10167
 14568  001B50  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14569  001B52  D7FA               	bra	u10167
 14570                           
 14571                           ;Test.c: 372: updateServoPosition(1050, 3);
 14572  001B54  0E04               	movlw	4
 14573  001B56  0100               	movlb	0	; () banked
 14574  001B58  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14575  001B5A  0E1A               	movlw	26
 14576  001B5C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14577  001B5E  0E00               	movlw	0
 14578  001B60  0100               	movlb	0	; () banked
 14579  001B62  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14580  001B64  0E03               	movlw	3
 14581  001B66  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14582  001B68  EC52  F023         	call	_updateServoPosition	;wreg free
 14583                           
 14584                           ;Test.c: 373: _delay((unsigned long)((750)*(32000000/4000.0)));
 14585  001B6C  0E1F               	movlw	31
 14586  001B6E  0100               	movlb	0	; () banked
 14587  001B70  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14588  001B72  0E71               	movlw	113
 14589  001B74  0100               	movlb	0	; () banked
 14590  001B76  6FAB               	movwf	??_BothServos& (0+255),b
 14591  001B78  0E1E               	movlw	30
 14592  001B7A                     u10177:
 14593  001B7A  2EE8               	decfsz	wreg,f,c
 14594  001B7C  D7FE               	bra	u10177
 14595  001B7E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14596  001B80  D7FC               	bra	u10177
 14597  001B82  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14598  001B84  D7FA               	bra	u10177
 14599  001B86  F000               	nop	
 14600                           
 14601                           ;Test.c: 375: updateServoPosition(850, 1);
 14602  001B88  0E03               	movlw	3
 14603  001B8A  0100               	movlb	0	; () banked
 14604  001B8C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14605  001B8E  0E52               	movlw	82
 14606  001B90  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14607  001B92  0E00               	movlw	0
 14608  001B94  0100               	movlb	0	; () banked
 14609  001B96  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14610  001B98  0E01               	movlw	1
 14611  001B9A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14612  001B9C  EC52  F023         	call	_updateServoPosition	;wreg free
 14613                           
 14614                           ;Test.c: 376: updateServoPosition(1050, 3);
 14615  001BA0  0E04               	movlw	4
 14616  001BA2  0100               	movlb	0	; () banked
 14617  001BA4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14618  001BA6  0E1A               	movlw	26
 14619  001BA8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14620  001BAA  0E00               	movlw	0
 14621  001BAC  0100               	movlb	0	; () banked
 14622  001BAE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14623  001BB0  0E03               	movlw	3
 14624  001BB2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14625  001BB4  EC52  F023         	call	_updateServoPosition	;wreg free
 14626                           
 14627                           ;Test.c: 377: _delay((unsigned long)((750)*(32000000/4000.0)));
 14628  001BB8  0E1F               	movlw	31
 14629  001BBA  0100               	movlb	0	; () banked
 14630  001BBC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14631  001BBE  0E71               	movlw	113
 14632  001BC0  0100               	movlb	0	; () banked
 14633  001BC2  6FAB               	movwf	??_BothServos& (0+255),b
 14634  001BC4  0E1E               	movlw	30
 14635  001BC6                     u10187:
 14636  001BC6  2EE8               	decfsz	wreg,f,c
 14637  001BC8  D7FE               	bra	u10187
 14638  001BCA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14639  001BCC  D7FC               	bra	u10187
 14640  001BCE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14641  001BD0  D7FA               	bra	u10187
 14642  001BD2  F000               	nop	
 14643                           
 14644                           ;Test.c: 378: updateServoPosition(1260, 3);
 14645  001BD4  0E04               	movlw	4
 14646  001BD6  0100               	movlb	0	; () banked
 14647  001BD8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14648  001BDA  0EEC               	movlw	236
 14649  001BDC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14650  001BDE  0E00               	movlw	0
 14651  001BE0  0100               	movlb	0	; () banked
 14652  001BE2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14653  001BE4  0E03               	movlw	3
 14654  001BE6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14655  001BE8  EC52  F023         	call	_updateServoPosition	;wreg free
 14656                           
 14657                           ;Test.c: 379: _delay((unsigned long)((700)*(32000000/4000.0)));
 14658  001BEC  0E1D               	movlw	29
 14659  001BEE  0100               	movlb	0	; () banked
 14660  001BF0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14661  001BF2  0E69               	movlw	105
 14662  001BF4  0100               	movlb	0	; () banked
 14663  001BF6  6FAB               	movwf	??_BothServos& (0+255),b
 14664  001BF8  0EA5               	movlw	165
 14665  001BFA                     u10197:
 14666  001BFA  2EE8               	decfsz	wreg,f,c
 14667  001BFC  D7FE               	bra	u10197
 14668  001BFE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14669  001C00  D7FC               	bra	u10197
 14670  001C02  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14671  001C04  D7FA               	bra	u10197
 14672                           
 14673                           ;Test.c: 380: updateServoPosition(1050, 3);
 14674  001C06  0E04               	movlw	4
 14675  001C08  0100               	movlb	0	; () banked
 14676  001C0A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14677  001C0C  0E1A               	movlw	26
 14678  001C0E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14679  001C10  0E00               	movlw	0
 14680  001C12  0100               	movlb	0	; () banked
 14681  001C14  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14682  001C16  0E03               	movlw	3
 14683  001C18  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14684  001C1A  EC52  F023         	call	_updateServoPosition	;wreg free
 14685                           
 14686                           ;Test.c: 381: _delay((unsigned long)((750)*(32000000/4000.0)));
 14687  001C1E  0E1F               	movlw	31
 14688  001C20  0100               	movlb	0	; () banked
 14689  001C22  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14690  001C24  0E71               	movlw	113
 14691  001C26  0100               	movlb	0	; () banked
 14692  001C28  6FAB               	movwf	??_BothServos& (0+255),b
 14693  001C2A  0E1E               	movlw	30
 14694  001C2C                     u10207:
 14695  001C2C  2EE8               	decfsz	wreg,f,c
 14696  001C2E  D7FE               	bra	u10207
 14697  001C30  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14698  001C32  D7FC               	bra	u10207
 14699  001C34  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14700  001C36  D7FA               	bra	u10207
 14701  001C38  F000               	nop	
 14702                           
 14703                           ;Test.c: 383: updateServoPosition(1200, 1);
 14704  001C3A  0E04               	movlw	4
 14705  001C3C  0100               	movlb	0	; () banked
 14706  001C3E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14707  001C40  0EB0               	movlw	176
 14708  001C42  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14709  001C44  0E00               	movlw	0
 14710  001C46  0100               	movlb	0	; () banked
 14711  001C48  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14712  001C4A  0E01               	movlw	1
 14713  001C4C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14714  001C4E  EC52  F023         	call	_updateServoPosition	;wreg free
 14715                           
 14716                           ;Test.c: 384: updateServoPosition(1050, 3);
 14717  001C52  0E04               	movlw	4
 14718  001C54  0100               	movlb	0	; () banked
 14719  001C56  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14720  001C58  0E1A               	movlw	26
 14721  001C5A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14722  001C5C  0E00               	movlw	0
 14723  001C5E  0100               	movlb	0	; () banked
 14724  001C60  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14725  001C62  0E03               	movlw	3
 14726  001C64  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14727  001C66  EC52  F023         	call	_updateServoPosition	;wreg free
 14728                           
 14729                           ;Test.c: 385: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14730  001C6A  0E3D               	movlw	61
 14731  001C6C  0100               	movlb	0	; () banked
 14732  001C6E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14733  001C70  0EE1               	movlw	225
 14734  001C72  0100               	movlb	0	; () banked
 14735  001C74  6FAB               	movwf	??_BothServos& (0+255),b
 14736  001C76  0E3F               	movlw	63
 14737  001C78                     u10217:
 14738  001C78  2EE8               	decfsz	wreg,f,c
 14739  001C7A  D7FE               	bra	u10217
 14740  001C7C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14741  001C7E  D7FC               	bra	u10217
 14742  001C80  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14743  001C82  D7FA               	bra	u10217
 14744  001C84  D000               	nop2	
 14745                           
 14746                           ;Test.c: 387: updateServoPosition(1670, 1);
 14747  001C86  0E06               	movlw	6
 14748  001C88  0100               	movlb	0	; () banked
 14749  001C8A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14750  001C8C  0E86               	movlw	134
 14751  001C8E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14752  001C90  0E00               	movlw	0
 14753  001C92  0100               	movlb	0	; () banked
 14754  001C94  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14755  001C96  0E01               	movlw	1
 14756  001C98  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14757  001C9A  EC52  F023         	call	_updateServoPosition	;wreg free
 14758                           
 14759                           ;Test.c: 388: updateServoPosition(1050, 3);
 14760  001C9E  0E04               	movlw	4
 14761  001CA0  0100               	movlb	0	; () banked
 14762  001CA2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14763  001CA4  0E1A               	movlw	26
 14764  001CA6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14765  001CA8  0E00               	movlw	0
 14766  001CAA  0100               	movlb	0	; () banked
 14767  001CAC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14768  001CAE  0E03               	movlw	3
 14769  001CB0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14770  001CB2  EC52  F023         	call	_updateServoPosition	;wreg free
 14771                           
 14772                           ;Test.c: 389: _delay((unsigned long)((750)*(32000000/4000.0)));
 14773  001CB6  0E1F               	movlw	31
 14774  001CB8  0100               	movlb	0	; () banked
 14775  001CBA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14776  001CBC  0E71               	movlw	113
 14777  001CBE  0100               	movlb	0	; () banked
 14778  001CC0  6FAB               	movwf	??_BothServos& (0+255),b
 14779  001CC2  0E1E               	movlw	30
 14780  001CC4                     u10227:
 14781  001CC4  2EE8               	decfsz	wreg,f,c
 14782  001CC6  D7FE               	bra	u10227
 14783  001CC8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14784  001CCA  D7FC               	bra	u10227
 14785  001CCC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14786  001CCE  D7FA               	bra	u10227
 14787  001CD0  F000               	nop	
 14788                           
 14789                           ;Test.c: 390: updateServoPosition(1390, 3);
 14790  001CD2  0E05               	movlw	5
 14791  001CD4  0100               	movlb	0	; () banked
 14792  001CD6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14793  001CD8  0E6E               	movlw	110
 14794  001CDA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14795  001CDC  0E00               	movlw	0
 14796  001CDE  0100               	movlb	0	; () banked
 14797  001CE0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14798  001CE2  0E03               	movlw	3
 14799  001CE4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14800  001CE6  EC52  F023         	call	_updateServoPosition	;wreg free
 14801                           
 14802                           ;Test.c: 391: _delay((unsigned long)((700)*(32000000/4000.0)));
 14803  001CEA  0E1D               	movlw	29
 14804  001CEC  0100               	movlb	0	; () banked
 14805  001CEE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14806  001CF0  0E69               	movlw	105
 14807  001CF2  0100               	movlb	0	; () banked
 14808  001CF4  6FAB               	movwf	??_BothServos& (0+255),b
 14809  001CF6  0EA5               	movlw	165
 14810  001CF8                     u10237:
 14811  001CF8  2EE8               	decfsz	wreg,f,c
 14812  001CFA  D7FE               	bra	u10237
 14813  001CFC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14814  001CFE  D7FC               	bra	u10237
 14815  001D00  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14816  001D02  D7FA               	bra	u10237
 14817                           
 14818                           ;Test.c: 392: updateServoPosition(1050, 3);
 14819  001D04  0E04               	movlw	4
 14820  001D06  0100               	movlb	0	; () banked
 14821  001D08  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14822  001D0A  0E1A               	movlw	26
 14823  001D0C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14824  001D0E  0E00               	movlw	0
 14825  001D10  0100               	movlb	0	; () banked
 14826  001D12  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14827  001D14  0E03               	movlw	3
 14828  001D16  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14829  001D18  EC52  F023         	call	_updateServoPosition	;wreg free
 14830                           
 14831                           ;Test.c: 393: _delay((unsigned long)((750)*(32000000/4000.0)));
 14832  001D1C  0E1F               	movlw	31
 14833  001D1E  0100               	movlb	0	; () banked
 14834  001D20  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14835  001D22  0E71               	movlw	113
 14836  001D24  0100               	movlb	0	; () banked
 14837  001D26  6FAB               	movwf	??_BothServos& (0+255),b
 14838  001D28  0E1E               	movlw	30
 14839  001D2A                     u10247:
 14840  001D2A  2EE8               	decfsz	wreg,f,c
 14841  001D2C  D7FE               	bra	u10247
 14842  001D2E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14843  001D30  D7FC               	bra	u10247
 14844  001D32  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14845  001D34  D7FA               	bra	u10247
 14846  001D36  F000               	nop	
 14847                           
 14848                           ;Test.c: 395: updateServoPosition(2400, 1);
 14849  001D38  0E09               	movlw	9
 14850  001D3A  0100               	movlb	0	; () banked
 14851  001D3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14852  001D3E  0E60               	movlw	96
 14853  001D40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14854  001D42  0E00               	movlw	0
 14855  001D44  0100               	movlb	0	; () banked
 14856  001D46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14857  001D48  0E01               	movlw	1
 14858  001D4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14859  001D4C  EC52  F023         	call	_updateServoPosition	;wreg free
 14860                           
 14861                           ;Test.c: 396: updateServoPosition(1050, 3);
 14862  001D50  0E04               	movlw	4
 14863  001D52  0100               	movlb	0	; () banked
 14864  001D54  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14865  001D56  0E1A               	movlw	26
 14866  001D58  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14867  001D5A  0E00               	movlw	0
 14868  001D5C  0100               	movlb	0	; () banked
 14869  001D5E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14870  001D60  0E03               	movlw	3
 14871  001D62  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14872  001D64  EC52  F023         	call	_updateServoPosition	;wreg free
 14873                           
 14874                           ;Test.c: 397: _delay((unsigned long)((750)*(32000000/4000.0)));
 14875  001D68  0E1F               	movlw	31
 14876  001D6A  0100               	movlb	0	; () banked
 14877  001D6C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14878  001D6E  0E71               	movlw	113
 14879  001D70  0100               	movlb	0	; () banked
 14880  001D72  6FAB               	movwf	??_BothServos& (0+255),b
 14881  001D74  0E1E               	movlw	30
 14882  001D76                     u10257:
 14883  001D76  2EE8               	decfsz	wreg,f,c
 14884  001D78  D7FE               	bra	u10257
 14885  001D7A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14886  001D7C  D7FC               	bra	u10257
 14887  001D7E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14888  001D80  D7FA               	bra	u10257
 14889  001D82  F000               	nop	
 14890                           
 14891                           ;Test.c: 398: updateServoPosition(1390, 3);
 14892  001D84  0E05               	movlw	5
 14893  001D86  0100               	movlb	0	; () banked
 14894  001D88  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14895  001D8A  0E6E               	movlw	110
 14896  001D8C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14897  001D8E  0E00               	movlw	0
 14898  001D90  0100               	movlb	0	; () banked
 14899  001D92  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14900  001D94  0E03               	movlw	3
 14901  001D96  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14902  001D98  EC52  F023         	call	_updateServoPosition	;wreg free
 14903                           
 14904                           ;Test.c: 399: _delay((unsigned long)((700)*(32000000/4000.0)));
 14905  001D9C  0E1D               	movlw	29
 14906  001D9E  0100               	movlb	0	; () banked
 14907  001DA0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14908  001DA2  0E69               	movlw	105
 14909  001DA4  0100               	movlb	0	; () banked
 14910  001DA6  6FAB               	movwf	??_BothServos& (0+255),b
 14911  001DA8  0EA5               	movlw	165
 14912  001DAA                     u10267:
 14913  001DAA  2EE8               	decfsz	wreg,f,c
 14914  001DAC  D7FE               	bra	u10267
 14915  001DAE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14916  001DB0  D7FC               	bra	u10267
 14917  001DB2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14918  001DB4  D7FA               	bra	u10267
 14919                           
 14920                           ;Test.c: 400: updateServoPosition(1050, 3);
 14921  001DB6  0E04               	movlw	4
 14922  001DB8  0100               	movlb	0	; () banked
 14923  001DBA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14924  001DBC  0E1A               	movlw	26
 14925  001DBE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14926  001DC0  0E00               	movlw	0
 14927  001DC2  0100               	movlb	0	; () banked
 14928  001DC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14929  001DC6  0E03               	movlw	3
 14930  001DC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14931  001DCA  EC52  F023         	call	_updateServoPosition	;wreg free
 14932                           
 14933                           ;Test.c: 401: _delay((unsigned long)((750)*(32000000/4000.0)));
 14934  001DCE  0E1F               	movlw	31
 14935  001DD0  0100               	movlb	0	; () banked
 14936  001DD2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14937  001DD4  0E71               	movlw	113
 14938  001DD6  0100               	movlb	0	; () banked
 14939  001DD8  6FAB               	movwf	??_BothServos& (0+255),b
 14940  001DDA  0E1E               	movlw	30
 14941  001DDC                     u10277:
 14942  001DDC  2EE8               	decfsz	wreg,f,c
 14943  001DDE  D7FE               	bra	u10277
 14944  001DE0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14945  001DE2  D7FC               	bra	u10277
 14946  001DE4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14947  001DE6  D7FA               	bra	u10277
 14948  001DE8  F000               	nop	
 14949                           
 14950                           ;Test.c: 403: TMR1ON = 0;
 14951  001DEA  90CD               	bcf	4045,0,c	;volatile
 14952                           
 14953                           ;Test.c: 404: TMR3ON = 0;
 14954  001DEC  90B1               	bcf	4017,0,c	;volatile
 14955                           
 14956                           ;Test.c: 405: (INTCONbits.GIE = 0);
 14957  001DEE  9EF2               	bcf	intcon,7,c	;volatile
 14958  001DF0  0012               	return		;funcret
 14959  001DF2                     __end_of_BothServos:
 14960                           	opt stack 0
 14961                           tblptru	equ	0xFF8
 14962                           tblptrh	equ	0xFF7
 14963                           tblptrl	equ	0xFF6
 14964                           tablat	equ	0xFF5
 14965                           prodh	equ	0xFF4
 14966                           prodl	equ	0xFF3
 14967                           intcon	equ	0xFF2
 14968                           intcon2	equ	0xFF1
 14969                           intcon3	equ	0xFF0
 14970                           postinc0	equ	0xFEE
 14971                           wreg	equ	0xFE8
 14972                           postdec1	equ	0xFE5
 14973                           fsr1l	equ	0xFE1
 14974                           indf2	equ	0xFDF
 14975                           postinc2	equ	0xFDE
 14976                           postdec2	equ	0xFDD
 14977                           fsr2h	equ	0xFDA
 14978                           fsr2l	equ	0xFD9
 14979                           status	equ	0xFD8
 14980                           
 14981 ;; *************** function _initServos *****************
 14982 ;; Defined at:
 14983 ;;		line 428 in file "sort.c"
 14984 ;; Parameters:    Size  Location     Type
 14985 ;;		None
 14986 ;; Auto vars:     Size  Location     Type
 14987 ;;		None
 14988 ;; Return value:  Size  Location     Type
 14989 ;;                  1    wreg      void 
 14990 ;; Registers used:
 14991 ;;		wreg, status,2, status,0, cstack
 14992 ;; Tracked objects:
 14993 ;;		On entry : 0/0
 14994 ;;		On exit  : 0/0
 14995 ;;		Unchanged: 0/0
 14996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14999 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15000 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15001 ;;Total ram usage:        1 bytes
 15002 ;; Hardware stack levels used:    1
 15003 ;; Hardware stack levels required when called:    8
 15004 ;; This function calls:
 15005 ;;		_updateServoPosition
 15006 ;; This function is called by:
 15007 ;;		_Loading
 15008 ;;		_BothServos
 15009 ;; This function uses a non-reentrant model
 15010 ;;
 15011                           
 15012                           	psect	text48
 15013  004B60                     __ptext48:
 15014                           	opt stack 0
 15015  004B60                     _initServos:
 15016                           	opt stack 20
 15017                           
 15018                           ;sort.c: 429: updateServoPosition(1200, 1);
 15019                           
 15020                           ;incstack = 0
 15021  004B60  0E04               	movlw	4
 15022  004B62  0100               	movlb	0	; () banked
 15023  004B64  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15024  004B66  0EB0               	movlw	176
 15025  004B68  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15026  004B6A  0E00               	movlw	0
 15027  004B6C  0100               	movlb	0	; () banked
 15028  004B6E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15029  004B70  0E01               	movlw	1
 15030  004B72  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15031  004B74  EC52  F023         	call	_updateServoPosition	;wreg free
 15032                           
 15033                           ;sort.c: 430: updateServoPosition(1050, 3);
 15034  004B78  0E04               	movlw	4
 15035  004B7A  0100               	movlb	0	; () banked
 15036  004B7C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15037  004B7E  0E1A               	movlw	26
 15038  004B80  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15039  004B82  0E00               	movlw	0
 15040  004B84  0100               	movlb	0	; () banked
 15041  004B86  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15042  004B88  0E03               	movlw	3
 15043  004B8A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15044  004B8C  EC52  F023         	call	_updateServoPosition	;wreg free
 15045                           
 15046                           ;sort.c: 431: TMR1ON = 1;
 15047  004B90  80CD               	bsf	4045,0,c	;volatile
 15048                           
 15049                           ;sort.c: 432: was_low_1 = 0;
 15050  004B92  0E00               	movlw	0
 15051  004B94  6E7A               	movwf	_was_low_1+1,c	;volatile
 15052  004B96  0E00               	movlw	0
 15053  004B98  6E79               	movwf	_was_low_1,c	;volatile
 15054                           
 15055                           ;sort.c: 433: _delay((unsigned long)((5)*(32000000/4000.0)));
 15056  004B9A  0E34               	movlw	52
 15057  004B9C  0100               	movlb	0	; () banked
 15058  004B9E  6F88               	movwf	??_initServos& (0+255),b
 15059  004BA0  0EF1               	movlw	241
 15060  004BA2                     u10287:
 15061  004BA2  2EE8               	decfsz	wreg,f,c
 15062  004BA4  D7FE               	bra	u10287
 15063  004BA6  2F88               	decfsz	??_initServos& (0+255),f,b
 15064  004BA8  D7FC               	bra	u10287
 15065  004BAA  D000               	nop2	
 15066                           
 15067                           ;sort.c: 434: TMR3ON = 1;
 15068  004BAC  80B1               	bsf	4017,0,c	;volatile
 15069                           
 15070                           ;sort.c: 435: was_low_3 = 0;
 15071  004BAE  0E00               	movlw	0
 15072  004BB0  6E7C               	movwf	_was_low_3+1,c	;volatile
 15073  004BB2  0E00               	movlw	0
 15074  004BB4  6E7B               	movwf	_was_low_3,c	;volatile
 15075                           
 15076                           ;sort.c: 437: LATCbits.LATC0 = 1;
 15077  004BB6  808B               	bsf	3979,0,c	;volatile
 15078  004BB8  0012               	return		;funcret
 15079  004BBA                     __end_of_initServos:
 15080                           	opt stack 0
 15081                           tblptru	equ	0xFF8
 15082                           tblptrh	equ	0xFF7
 15083                           tblptrl	equ	0xFF6
 15084                           tablat	equ	0xFF5
 15085                           prodh	equ	0xFF4
 15086                           prodl	equ	0xFF3
 15087                           intcon	equ	0xFF2
 15088                           intcon2	equ	0xFF1
 15089                           intcon3	equ	0xFF0
 15090                           postinc0	equ	0xFEE
 15091                           wreg	equ	0xFE8
 15092                           postdec1	equ	0xFE5
 15093                           fsr1l	equ	0xFE1
 15094                           indf2	equ	0xFDF
 15095                           postinc2	equ	0xFDE
 15096                           postdec2	equ	0xFDD
 15097                           fsr2h	equ	0xFDA
 15098                           fsr2l	equ	0xFD9
 15099                           status	equ	0xFD8
 15100                           
 15101 ;; *************** function _updateServoPosition *****************
 15102 ;; Defined at:
 15103 ;;		line 505 in file "sort.c"
 15104 ;; Parameters:    Size  Location     Type
 15105 ;;  time_us         2    0[BANK0 ] int 
 15106 ;;  timer           2    2[BANK0 ] int 
 15107 ;; Auto vars:     Size  Location     Type
 15108 ;;  my_time         2    6[BANK0 ] unsigned int 
 15109 ;; Return value:  Size  Location     Type
 15110 ;;                  1    wreg      void 
 15111 ;; Registers used:
 15112 ;;		wreg, status,2, status,0
 15113 ;; Tracked objects:
 15114 ;;		On entry : 0/0
 15115 ;;		On exit  : 0/0
 15116 ;;		Unchanged: 0/0
 15117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15118 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15119 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15120 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15121 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15122 ;;Total ram usage:        8 bytes
 15123 ;; Hardware stack levels used:    1
 15124 ;; Hardware stack levels required when called:    7
 15125 ;; This function calls:
 15126 ;;		Nothing
 15127 ;; This function is called by:
 15128 ;;		_Distribution
 15129 ;;		_initServos
 15130 ;;		_actuatorTest
 15131 ;;		_BothServos
 15132 ;; This function uses a non-reentrant model
 15133 ;;
 15134                           
 15135                           	psect	text49
 15136  0046A4                     __ptext49:
 15137                           	opt stack 0
 15138  0046A4                     _updateServoPosition:
 15139                           	opt stack 20
 15140                           
 15141                           ;sort.c: 506: unsigned int my_time = 65535 - time_us;
 15142                           
 15143                           ;incstack = 0
 15144  0046A4  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 15145  0046A8  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 15146  0046AC  0100               	movlb	0	; () banked
 15147  0046AE  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15148  0046B0  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15149  0046B2  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15150  0046B4  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15151  0046B6  0EFF               	movlw	255
 15152  0046B8  0100               	movlb	0	; () banked
 15153  0046BA  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15154  0046BC  0100               	movlb	0	; () banked
 15155  0046BE  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15156  0046C0  0EFF               	movlw	255
 15157  0046C2  0100               	movlb	0	; () banked
 15158  0046C4  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15159  0046C6  0100               	movlb	0	; () banked
 15160  0046C8  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15161                           
 15162                           ;sort.c: 507: switch(timer){
 15163  0046CA  D01D               	goto	l6430
 15164  0046CC                     l6424:
 15165                           
 15166                           ; BSR set to: 0
 15167                           ;sort.c: 509: servoTimes[0] = my_time >> 8;
 15168  0046CC  0100               	movlb	0	; () banked
 15169  0046CE  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15170  0046D0  0100               	movlb	0	; () banked
 15171  0046D2  6FDA               	movwf	_servoTimes& (0+255),b
 15172  0046D4  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 15173                           
 15174                           ;sort.c: 510: servoTimes[1] = my_time & 0xFF;
 15175  0046D6  0100               	movlb	0	; () banked
 15176  0046D8  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15177  0046DA  0100               	movlb	0	; () banked
 15178  0046DC  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 15179  0046DE  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 15180                           
 15181                           ; BSR set to: 0
 15182                           ;sort.c: 512: pan_servo_state = time_us;
 15183  0046E0  C080  F06F         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 15184  0046E4  C081  F070         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 15185  0046E8                     l876:
 15186                           
 15187                           ; BSR set to: 0
 15188                           ;sort.c: 514: servoTimes[2] = my_time >> 8;
 15189  0046E8  0100               	movlb	0	; () banked
 15190  0046EA  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15191  0046EC  0100               	movlb	0	; () banked
 15192  0046EE  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 15193  0046F0  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 15194                           
 15195                           ;sort.c: 515: servoTimes[3] = my_time & 0xFF;
 15196  0046F2  0100               	movlb	0	; () banked
 15197  0046F4  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15198  0046F6  0100               	movlb	0	; () banked
 15199  0046F8  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 15200  0046FA  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 15201                           
 15202                           ; BSR set to: 0
 15203                           ;sort.c: 517: tilt_servo_state = time_us;
 15204  0046FC  C080  F075         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 15205  004700  C081  F076         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 15206                           
 15207                           ;sort.c: 518: }
 15208  004704  0012               	return	
 15209  004706                     l6430:
 15210                           
 15211                           ; BSR set to: 0
 15212  004706  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15213  00470A  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15214                           
 15215                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15216                           ; Switch size 1, requested type "space"
 15217                           ; Number of cases is 1, Range of values is 0 to 0
 15218                           ; switch strategies available:
 15219                           ; Name         Instructions Cycles
 15220                           ; simple_byte            4     3 (average)
 15221                           ;	Chosen strategy is simple_byte
 15222  00470E  0100               	movlb	0	; () banked
 15223  004710  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15224  004712  0A00               	xorlw	0	; case 0
 15225  004714  A4D8               	btfss	status,2,c
 15226  004716  0012               	return	
 15227                           
 15228                           ; BSR set to: 0
 15229                           ; Switch size 1, requested type "space"
 15230                           ; Number of cases is 2, Range of values is 1 to 3
 15231                           ; switch strategies available:
 15232                           ; Name         Instructions Cycles
 15233                           ; simple_byte            7     4 (average)
 15234                           ;	Chosen strategy is simple_byte
 15235  004718  0100               	movlb	0	; () banked
 15236  00471A  5184               	movf	??_updateServoPosition& (0+255),w,b
 15237  00471C  0A01               	xorlw	1	; case 1
 15238  00471E  B4D8               	btfsc	status,2,c
 15239  004720  D7D5               	goto	l6424
 15240  004722  0A02               	xorlw	2	; case 3
 15241  004724  A4D8               	btfss	status,2,c
 15242  004726  0012               	return	
 15243  004728  D7DF               	goto	l876
 15244  00472A                     __end_of_updateServoPosition:
 15245                           	opt stack 0
 15246                           tblptru	equ	0xFF8
 15247                           tblptrh	equ	0xFF7
 15248                           tblptrl	equ	0xFF6
 15249                           tablat	equ	0xFF5
 15250                           prodh	equ	0xFF4
 15251                           prodl	equ	0xFF3
 15252                           intcon	equ	0xFF2
 15253                           intcon2	equ	0xFF1
 15254                           intcon3	equ	0xFF0
 15255                           postinc0	equ	0xFEE
 15256                           wreg	equ	0xFE8
 15257                           postdec1	equ	0xFE5
 15258                           fsr1l	equ	0xFE1
 15259                           indf2	equ	0xFDF
 15260                           postinc2	equ	0xFDE
 15261                           postdec2	equ	0xFDD
 15262                           fsr2h	equ	0xFDA
 15263                           fsr2l	equ	0xFD9
 15264                           status	equ	0xFD8
 15265                           
 15266 ;; *************** function _BlockerTest *****************
 15267 ;; Defined at:
 15268 ;;		line 553 in file "Test.c"
 15269 ;; Parameters:    Size  Location     Type
 15270 ;;		None
 15271 ;; Auto vars:     Size  Location     Type
 15272 ;;  i               2   44[BANK0 ] int 
 15273 ;;  cond_flag       2   48[BANK0 ] int 
 15274 ;;  cam_flag        2   46[BANK0 ] int 
 15275 ;; Return value:  Size  Location     Type
 15276 ;;                  1    wreg      void 
 15277 ;; Registers used:
 15278 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15279 ;; Tracked objects:
 15280 ;;		On entry : 0/0
 15281 ;;		On exit  : 0/0
 15282 ;;		Unchanged: 0/0
 15283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15285 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15286 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15287 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15288 ;;Total ram usage:        7 bytes
 15289 ;; Hardware stack levels used:    1
 15290 ;; Hardware stack levels required when called:   10
 15291 ;; This function calls:
 15292 ;;		_lcdInst
 15293 ;;		_printf
 15294 ;; This function is called by:
 15295 ;;		_Test
 15296 ;; This function uses a non-reentrant model
 15297 ;;
 15298                           
 15299                           	psect	text50
 15300  0038CC                     __ptext50:
 15301                           	opt stack 0
 15302  0038CC                     _BlockerTest:
 15303                           	opt stack 19
 15304                           
 15305                           ;Test.c: 554: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15306                           
 15307                           ; BSR set to: 0
 15308                           ;incstack = 0
 15309  0038CC  0E01               	movlw	1
 15310  0038CE  ECC5  F029         	call	_lcdInst
 15311  0038D2  0E68               	movlw	104
 15312  0038D4  0100               	movlb	0	; () banked
 15313  0038D6  6FAB               	movwf	??_BlockerTest& (0+255),b
 15314  0038D8  0EE4               	movlw	228
 15315  0038DA                     u10297:
 15316  0038DA  2EE8               	decfsz	wreg,f,c
 15317  0038DC  D7FE               	bra	u10297
 15318  0038DE  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 15319  0038E0  D7FC               	bra	u10297
 15320  0038E2  F000               	nop	
 15321  0038E4  0E80               	movlw	128
 15322  0038E6  ECC5  F029         	call	_lcdInst
 15323                           
 15324                           ;Test.c: 555: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15325  0038EA  0E5D               	movlw	low STR_122
 15326  0038EC  0100               	movlb	0	; () banked
 15327  0038EE  6F8E               	movwf	printf@f& (0+255),b
 15328  0038F0  0EFB               	movlw	high STR_122
 15329  0038F2  0100               	movlb	0	; () banked
 15330  0038F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 15331  0038F6  A480               	btfss	3968,2,c	;volatile
 15332  0038F8  D004               	goto	u7180
 15333  0038FA  0100               	movlb	0	; () banked
 15334  0038FC  6BAB               	clrf	??_BlockerTest& (0+255),b
 15335  0038FE  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15336  003900  D002               	goto	u7188
 15337  003902                     u7180:
 15338  003902  0100               	movlb	0	; () banked
 15339  003904  6BAB               	clrf	??_BlockerTest& (0+255),b
 15340  003906                     u7188:
 15341  003906  0100               	movlb	0	; () banked
 15342  003908  51AB               	movf	??_BlockerTest& (0+255),w,b
 15343  00390A  0100               	movlb	0	; () banked
 15344  00390C  6F90               	movwf	(?_printf+2)& (0+255),b
 15345  00390E  6B91               	clrf	(?_printf+3)& (0+255),b
 15346  003910  EC1B  F00B         	call	_printf	;wreg free
 15347                           
 15348                           ;Test.c: 556: lcdInst(0b11000000);;
 15349  003914  0EC0               	movlw	192
 15350  003916  ECC5  F029         	call	_lcdInst
 15351                           
 15352                           ;Test.c: 557: printf("OTHER: CAM TOGGLE");
 15353  00391A  0E4B               	movlw	low STR_123
 15354  00391C  0100               	movlb	0	; () banked
 15355  00391E  6F8E               	movwf	printf@f& (0+255),b
 15356  003920  0EFB               	movlw	high STR_123
 15357  003922  0100               	movlb	0	; () banked
 15358  003924  6F8F               	movwf	(printf@f+1)& (0+255),b
 15359  003926  EC1B  F00B         	call	_printf	;wreg free
 15360                           
 15361                           ;Test.c: 558: int cam_flag = 1;
 15362  00392A  0E00               	movlw	0
 15363  00392C  0100               	movlb	0	; () banked
 15364  00392E  6FAF               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 15365  003930  0E01               	movlw	1
 15366  003932  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15367                           
 15368                           ; BSR set to: 0
 15369                           ;Test.c: 559: int cond_flag = 0;
 15370  003934  0E00               	movlw	0
 15371  003936  0100               	movlb	0	; () banked
 15372  003938  6FB1               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 15373  00393A  0E00               	movlw	0
 15374  00393C  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15375                           
 15376                           ; BSR set to: 0
 15377                           ;Test.c: 561: while(PORTBbits.RB1 == 0){
 15378                           
 15379                           ;Test.c: 560: while(1){
 15380  00393E  D018               	goto	l8386
 15381  003940                     l8382:
 15382                           
 15383                           ;Test.c: 562: lcdInst(0b10000000);;
 15384  003940  0E80               	movlw	128
 15385  003942  ECC5  F029         	call	_lcdInst
 15386                           
 15387                           ;Test.c: 563: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15388  003946  0E5D               	movlw	low STR_122
 15389  003948  0100               	movlb	0	; () banked
 15390  00394A  6F8E               	movwf	printf@f& (0+255),b
 15391  00394C  0EFB               	movlw	high STR_122
 15392  00394E  0100               	movlb	0	; () banked
 15393  003950  6F8F               	movwf	(printf@f+1)& (0+255),b
 15394  003952  A480               	btfss	3968,2,c	;volatile
 15395  003954  D004               	goto	u7190
 15396  003956  0100               	movlb	0	; () banked
 15397  003958  6BAB               	clrf	??_BlockerTest& (0+255),b
 15398  00395A  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15399  00395C  D002               	goto	u7198
 15400  00395E                     u7190:
 15401  00395E  0100               	movlb	0	; () banked
 15402  003960  6BAB               	clrf	??_BlockerTest& (0+255),b
 15403  003962                     u7198:
 15404  003962  0100               	movlb	0	; () banked
 15405  003964  51AB               	movf	??_BlockerTest& (0+255),w,b
 15406  003966  0100               	movlb	0	; () banked
 15407  003968  6F90               	movwf	(?_printf+2)& (0+255),b
 15408  00396A  6B91               	clrf	(?_printf+3)& (0+255),b
 15409  00396C  EC1B  F00B         	call	_printf	;wreg free
 15410  003970                     l8386:
 15411  003970  A281               	btfss	3969,1,c	;volatile
 15412  003972  D7E6               	goto	l8382
 15413                           
 15414                           ;Test.c: 564: }
 15415                           ;Test.c: 565: if(PORTB >> 4 == 0b1111){
 15416  003974  3881               	swapf	3969,w,c	;volatile
 15417  003976  0B0F               	andlw	15
 15418  003978  0A0F               	xorlw	15
 15419  00397A  B4D8               	btfsc	status,2,c
 15420  00397C  0012               	return	
 15421                           
 15422                           ;Test.c: 568: else if(PORTB >> 4 == 0b0001){
 15423                           
 15424                           ;Test.c: 567: }
 15425                           
 15426                           ;Test.c: 566: break;
 15427  00397E  3881               	swapf	3969,w,c	;volatile
 15428  003980  0B0F               	andlw	15
 15429  003982  06E8               	decf	wreg,f,c
 15430  003984  A4D8               	btfss	status,2,c
 15431  003986  D016               	goto	l8404
 15432                           
 15433                           ;Test.c: 569: if(cond_flag){
 15434  003988  0100               	movlb	0	; () banked
 15435  00398A  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15436  00398C  0100               	movlb	0	; () banked
 15437  00398E  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15438  003990  B4D8               	btfsc	status,2,c
 15439  003992  D007               	goto	l1349
 15440                           
 15441                           ; BSR set to: 0
 15442                           ;Test.c: 570: LATAbits.LATA3 = 1;
 15443  003994  8689               	bsf	3977,3,c	;volatile
 15444  003996  D006               	goto	l8402
 15445  003998                     u7241:
 15446  003998  0E01               	movlw	1
 15447  00399A                     u7250:
 15448  00399A  0100               	movlb	0	; () banked
 15449  00399C  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15450  00399E  6BB1               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 15451                           
 15452                           ;Test.c: 572: }
 15453  0039A0  D054               	goto	l8428
 15454  0039A2                     l1349:
 15455                           
 15456                           ; BSR set to: 0
 15457                           ;Test.c: 573: else{
 15458                           ;Test.c: 574: LATAbits.LATA3 = 0;
 15459  0039A2  9689               	bcf	3977,3,c	;volatile
 15460  0039A4                     l8402:
 15461                           
 15462                           ; BSR set to: 0
 15463                           ;Test.c: 575: cond_flag = !cond_flag;
 15464  0039A4  0100               	movlb	0	; () banked
 15465  0039A6  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15466  0039A8  0100               	movlb	0	; () banked
 15467  0039AA  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15468  0039AC  B4D8               	btfsc	status,2,c
 15469  0039AE  D7F4               	goto	u7241
 15470  0039B0  0E00               	movlw	0
 15471  0039B2  D7F3               	goto	u7250
 15472  0039B4                     l8404:
 15473                           
 15474                           ;Test.c: 578: else{
 15475                           ;Test.c: 579: if(cam_flag){
 15476  0039B4  0100               	movlb	0	; () banked
 15477  0039B6  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15478  0039B8  0100               	movlb	0	; () banked
 15479  0039BA  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15480  0039BC  B4D8               	btfsc	status,2,c
 15481  0039BE  D007               	goto	l8410
 15482                           
 15483                           ; BSR set to: 0
 15484                           ;Test.c: 580: LATCbits.LATC0 = 1;
 15485  0039C0  808B               	bsf	3979,0,c	;volatile
 15486  0039C2  D023               	goto	l8422
 15487  0039C4                     u7291:
 15488  0039C4  0E01               	movlw	1
 15489  0039C6                     u7300:
 15490  0039C6  0100               	movlb	0	; () banked
 15491  0039C8  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15492  0039CA  6BAF               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 15493                           
 15494                           ;Test.c: 582: }
 15495  0039CC  D03E               	goto	l8428
 15496  0039CE                     l8410:
 15497                           
 15498                           ; BSR set to: 0
 15499                           ;Test.c: 583: else{
 15500                           ;Test.c: 584: for(int i=0;i<5000;i++)
 15501  0039CE  0E00               	movlw	0
 15502  0039D0  0100               	movlb	0	; () banked
 15503  0039D2  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 15504  0039D4  0E00               	movlw	0
 15505  0039D6  6FAC               	movwf	BlockerTest@i& (0+255),b
 15506  0039D8                     l8412:
 15507                           
 15508                           ; BSR set to: 0
 15509  0039D8  0100               	movlb	0	; () banked
 15510  0039DA  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 15511  0039DC  D008               	goto	l1354
 15512  0039DE  0E88               	movlw	136
 15513  0039E0  0100               	movlb	0	; () banked
 15514  0039E2  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 15515  0039E4  0E13               	movlw	19
 15516  0039E6  0100               	movlb	0	; () banked
 15517  0039E8  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 15518  0039EA  B0D8               	btfsc	status,0,c
 15519  0039EC  D00D               	goto	l1355
 15520  0039EE                     l1354:
 15521                           
 15522                           ; BSR set to: 0
 15523                           ;Test.c: 585: {
 15524                           ;Test.c: 586: LATCbits.LATC0 = 1;
 15525  0039EE  808B               	bsf	3979,0,c	;volatile
 15526                           
 15527                           ; BSR set to: 0
 15528                           ;Test.c: 587: _delay((unsigned long)((10)*(32000000/4000000.0)));
 15529  0039F0  0E1A               	movlw	26
 15530  0039F2                     u10307:
 15531  0039F2  2EE8               	decfsz	wreg,f,c
 15532  0039F4  D7FE               	bra	u10307
 15533  0039F6  D000               	nop2	
 15534                           
 15535                           ;Test.c: 588: LATCbits.LATC0 = 0;
 15536  0039F8  908B               	bcf	3979,0,c	;volatile
 15537                           
 15538                           ;Test.c: 589: _delay((unsigned long)((90)*(32000000/4000000.0)));
 15539  0039FA  0EF0               	movlw	240
 15540  0039FC                     u10317:
 15541  0039FC  2EE8               	decfsz	wreg,f,c
 15542  0039FE  D7FE               	bra	u10317
 15543  003A00  0100               	movlb	0	; () banked
 15544  003A02  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 15545  003A04  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 15546  003A06  D7E8               	goto	l8412
 15547  003A08                     l1355:
 15548                           
 15549                           ; BSR set to: 0
 15550                           ;Test.c: 590: }
 15551                           ;Test.c: 591: LATCbits.LATC0 = 0;
 15552  003A08  908B               	bcf	3979,0,c	;volatile
 15553  003A0A                     l8422:
 15554                           
 15555                           ; BSR set to: 0
 15556                           ;Test.c: 592: cam_flag = !cam_flag;
 15557  003A0A  0100               	movlb	0	; () banked
 15558  003A0C  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15559  003A0E  0100               	movlb	0	; () banked
 15560  003A10  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15561  003A12  B4D8               	btfsc	status,2,c
 15562  003A14  D7D7               	goto	u7291
 15563  003A16  0E00               	movlw	0
 15564  003A18  D7D6               	goto	u7300
 15565  003A1A                     l8424:
 15566                           
 15567                           ;Test.c: 597: lcdInst(0b10000000);;
 15568  003A1A  0E80               	movlw	128
 15569  003A1C  ECC5  F029         	call	_lcdInst
 15570                           
 15571                           ;Test.c: 598: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15572  003A20  0E5D               	movlw	low STR_122
 15573  003A22  0100               	movlb	0	; () banked
 15574  003A24  6F8E               	movwf	printf@f& (0+255),b
 15575  003A26  0EFB               	movlw	high STR_122
 15576  003A28  0100               	movlb	0	; () banked
 15577  003A2A  6F8F               	movwf	(printf@f+1)& (0+255),b
 15578  003A2C  A480               	btfss	3968,2,c	;volatile
 15579  003A2E  D004               	goto	u7350
 15580  003A30  0100               	movlb	0	; () banked
 15581  003A32  6BAB               	clrf	??_BlockerTest& (0+255),b
 15582  003A34  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15583  003A36  D002               	goto	u7358
 15584  003A38                     u7350:
 15585  003A38  0100               	movlb	0	; () banked
 15586  003A3A  6BAB               	clrf	??_BlockerTest& (0+255),b
 15587  003A3C                     u7358:
 15588  003A3C  0100               	movlb	0	; () banked
 15589  003A3E  51AB               	movf	??_BlockerTest& (0+255),w,b
 15590  003A40  0100               	movlb	0	; () banked
 15591  003A42  6F90               	movwf	(?_printf+2)& (0+255),b
 15592  003A44  6B91               	clrf	(?_printf+3)& (0+255),b
 15593  003A46  EC1B  F00B         	call	_printf	;wreg free
 15594  003A4A                     l8428:
 15595  003A4A  A281               	btfss	3969,1,c	;volatile
 15596  003A4C  D791               	goto	l8386
 15597  003A4E  D7E5               	goto	l8424
 15598  003A50                     __end_of_BlockerTest:
 15599                           	opt stack 0
 15600                           tblptru	equ	0xFF8
 15601                           tblptrh	equ	0xFF7
 15602                           tblptrl	equ	0xFF6
 15603                           tablat	equ	0xFF5
 15604                           prodh	equ	0xFF4
 15605                           prodl	equ	0xFF3
 15606                           intcon	equ	0xFF2
 15607                           intcon2	equ	0xFF1
 15608                           intcon3	equ	0xFF0
 15609                           postinc0	equ	0xFEE
 15610                           wreg	equ	0xFE8
 15611                           postdec1	equ	0xFE5
 15612                           fsr1l	equ	0xFE1
 15613                           indf2	equ	0xFDF
 15614                           postinc2	equ	0xFDE
 15615                           postdec2	equ	0xFDD
 15616                           fsr2h	equ	0xFDA
 15617                           fsr2l	equ	0xFD9
 15618                           status	equ	0xFD8
 15619                           
 15620 ;; *************** function _printf *****************
 15621 ;; Defined at:
 15622 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 15623 ;; Parameters:    Size  Location     Type
 15624 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 15625 ;;		 -> STR_127(17), STR_126(17), STR_125(18), STR_124(18), 
 15626 ;;		 -> STR_123(18), STR_122(18), STR_121(18), STR_120(18), 
 15627 ;;		 -> STR_119(17), STR_118(17), STR_117(3), STR_116(15), 
 15628 ;;		 -> STR_115(3), STR_114(15), STR_113(11), STR_112(17), 
 15629 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 15630 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 15631 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 15632 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 15633 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 15634 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 15635 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 15636 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 15637 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 15638 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 15639 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 15640 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 15641 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 15642 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 15643 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 15644 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 15645 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 15646 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 15647 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 15648 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 15649 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 15650 ;;		 -> STR_2(14), STR_1(18), 
 15651 ;; Auto vars:     Size  Location     Type
 15652 ;;  tmpval          4    0        struct .
 15653 ;;  width           2   41[BANK0 ] int 
 15654 ;;  val             2   37[BANK0 ] unsigned int 
 15655 ;;  len             2   35[BANK0 ] unsigned int 
 15656 ;;  ap              2   33[BANK0 ] PTR void [1]
 15657 ;;		 -> ?i2_printf(2), ?_printf(2), 
 15658 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 15659 ;;		 -> STR_128(7), count_total(2), printRTC@month(4), UI@month(4), 
 15660 ;;  c               1   40[BANK0 ] char 
 15661 ;;  flag            1   39[BANK0 ] unsigned char 
 15662 ;;  prec            1   30[BANK0 ] char 
 15663 ;; Return value:  Size  Location     Type
 15664 ;;                  2   14[BANK0 ] int 
 15665 ;; Registers used:
 15666 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15667 ;; Tracked objects:
 15668 ;;		On entry : 0/0
 15669 ;;		On exit  : 0/0
 15670 ;;		Unchanged: 0/0
 15671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15672 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15673 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15674 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15675 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15676 ;;Total ram usage:       29 bytes
 15677 ;; Hardware stack levels used:    1
 15678 ;; Hardware stack levels required when called:    9
 15679 ;; This function calls:
 15680 ;;		___lwdiv
 15681 ;;		___lwmod
 15682 ;;		___wmul
 15683 ;;		_isdigit
 15684 ;;		_putch
 15685 ;; This function is called by:
 15686 ;;		_UI
 15687 ;;		_change_state_to_menu_start
 15688 ;;		_change_state_to_menu_12
 15689 ;;		_change_state_to_menu_22
 15690 ;;		_printRTC
 15691 ;;		_EEPROM_write
 15692 ;;		_Test
 15693 ;;		_algorithmTest
 15694 ;;		_sensorTest
 15695 ;;		_actuatorTest
 15696 ;;		_BothServos
 15697 ;;		_PortTestDC
 15698 ;;		_PusherTest
 15699 ;;		_SpeedTest
 15700 ;;		_BlockerTest
 15701 ;;		_arm
 15702 ;;		_ToggleTestA5
 15703 ;; This function uses a non-reentrant model
 15704 ;;
 15705                           
 15706                           	psect	text51
 15707  001636                     __ptext51:
 15708                           	opt stack 0
 15709  001636                     _printf:
 15710                           	opt stack 18
 15711                           
 15712                           ;doprnt.c: 466: va_list ap;
 15713                           ;doprnt.c: 499: signed char c;
 15714                           ;doprnt.c: 501: int width;
 15715                           ;doprnt.c: 506: signed char prec;
 15716                           ;doprnt.c: 508: unsigned char flag;
 15717                           ;doprnt.c: 523: union {
 15718                           ;doprnt.c: 524: unsigned long vd;
 15719                           ;doprnt.c: 525: double integ;
 15720                           ;doprnt.c: 526: } tmpval;
 15721                           ;doprnt.c: 528: unsigned int val;
 15722                           ;doprnt.c: 529: unsigned len;
 15723                           ;doprnt.c: 530: const char * cp;
 15724                           ;doprnt.c: 533: *ap = __va_start();
 15725                           
 15726                           ;incstack = 0
 15727  001636  0E90               	movlw	low (?_printf+2)
 15728  001638  0100               	movlb	0	; () banked
 15729  00163A  6FA1               	movwf	printf@ap& (0+255),b
 15730  00163C  0E00               	movlw	high (?_printf+2)
 15731  00163E  0100               	movlb	0	; () banked
 15732  001640  6FA2               	movwf	(printf@ap+1)& (0+255),b
 15733                           
 15734                           ;doprnt.c: 536: while(c = *f++) {
 15735  001642  D205               	goto	l6384
 15736  001644                     l6254:
 15737                           
 15738                           ; BSR set to: 0
 15739                           ;doprnt.c: 538: if(c != '%')
 15740  001644  0E25               	movlw	37
 15741  001646  0100               	movlb	0	; () banked
 15742  001648  19A8               	xorwf	printf@c& (0+255),w,b
 15743  00164A  B4D8               	btfsc	status,2,c
 15744  00164C  D005               	goto	l6258
 15745                           
 15746                           ; BSR set to: 0
 15747                           ;doprnt.c: 540: {
 15748                           ;doprnt.c: 541: (putch(c) );
 15749  00164E  0100               	movlb	0	; () banked
 15750  001650  51A8               	movf	printf@c& (0+255),w,b
 15751  001652  ECBD  F029         	call	_putch
 15752                           
 15753                           ;doprnt.c: 542: continue;
 15754  001656  D1FB               	goto	l6384
 15755  001658                     l6258:
 15756                           
 15757                           ;doprnt.c: 543: }
 15758                           ;doprnt.c: 546: width = 0;
 15759  001658  0E00               	movlw	0
 15760  00165A  0100               	movlb	0	; () banked
 15761  00165C  6FAA               	movwf	(printf@width+1)& (0+255),b
 15762  00165E  0E00               	movlw	0
 15763  001660  6FA9               	movwf	printf@width& (0+255),b
 15764                           
 15765                           ;doprnt.c: 548: flag = 0;
 15766  001662  0E00               	movlw	0
 15767  001664  0100               	movlb	0	; () banked
 15768  001666  6FA7               	movwf	printf@flag& (0+255),b
 15769                           
 15770                           ; BSR set to: 0
 15771                           ;doprnt.c: 551: switch(*f) {
 15772                           
 15773                           ;doprnt.c: 550: for(;;) {
 15774  001668  D005               	goto	l6264
 15775  00166A                     l6260:
 15776                           
 15777                           ;doprnt.c: 580: flag |= 0x04;
 15778  00166A  0100               	movlb	0	; () banked
 15779  00166C  85A7               	bsf	printf@flag& (0+255),2,b
 15780                           
 15781                           ;doprnt.c: 581: f++;
 15782  00166E  0100               	movlb	0	; () banked
 15783  001670  4B8E               	infsnz	printf@f& (0+255),f,b
 15784  001672  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15785  001674                     l6264:
 15786  001674  C08E  FFF6         	movff	printf@f,tblptrl
 15787  001678  C08F  FFF7         	movff	printf@f+1,tblptrh
 15788  00167C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15789  00167C  6AF8               	clrf	tblptru,c
 15790  00167E                     	endif
 15791  00167E                     	if	0	;tblptru may be non-zero
 15792  00167E                     	endif
 15793  00167E  0008               	tblrd		*
 15794  001680  50F5               	movf	tablat,w,c
 15795                           
 15796                           ; Switch size 1, requested type "space"
 15797                           ; Number of cases is 1, Range of values is 48 to 48
 15798                           ; switch strategies available:
 15799                           ; Name         Instructions Cycles
 15800                           ; simple_byte            4     3 (average)
 15801                           ;	Chosen strategy is simple_byte
 15802  001682  0A30               	xorlw	48	; case 48
 15803  001684  B4D8               	btfsc	status,2,c
 15804  001686  D7F1               	goto	l6260
 15805                           
 15806                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15807                           
 15808                           ;doprnt.c: 586: }
 15809                           
 15810                           ;doprnt.c: 585: break;
 15811  001688  C08E  FFF6         	movff	printf@f,tblptrl
 15812  00168C  C08F  FFF7         	movff	printf@f+1,tblptrh
 15813  001690                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15814  001690  6AF8               	clrf	tblptru,c
 15815  001692                     	endif
 15816  001692                     	if	0	;tblptru may be non-zero
 15817  001692                     	endif
 15818  001692  0008               	tblrd		*
 15819  001694  50F5               	movf	tablat,w,c
 15820  001696  ECD2  F028         	call	_isdigit
 15821  00169A  A0D8               	btfss	status,0,c
 15822  00169C  D0D2               	goto	l6312
 15823                           
 15824                           ;doprnt.c: 598: width = 0;
 15825  00169E  0E00               	movlw	0
 15826  0016A0  0100               	movlb	0	; () banked
 15827  0016A2  6FAA               	movwf	(printf@width+1)& (0+255),b
 15828  0016A4  0E00               	movlw	0
 15829  0016A6  6FA9               	movwf	printf@width& (0+255),b
 15830  0016A8                     l6270:
 15831                           
 15832                           ;doprnt.c: 600: width *= 10;
 15833  0016A8  C0A9  F080         	movff	printf@width,___wmul@multiplier
 15834  0016AC  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 15835  0016B0  0E00               	movlw	0
 15836  0016B2  0100               	movlb	0	; () banked
 15837  0016B4  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15838  0016B6  0E0A               	movlw	10
 15839  0016B8  6F82               	movwf	___wmul@multiplicand& (0+255),b
 15840  0016BA  EC3B  F027         	call	___wmul	;wreg free
 15841  0016BE  C080  F0A9         	movff	?___wmul,printf@width
 15842  0016C2  C081  F0AA         	movff	?___wmul+1,printf@width+1
 15843                           
 15844                           ;doprnt.c: 601: width += *f++ - '0';
 15845  0016C6  0ED0               	movlw	208
 15846  0016C8  0100               	movlb	0	; () banked
 15847  0016CA  6F9A               	movwf	??_printf& (0+255),b
 15848  0016CC  0EFF               	movlw	255
 15849  0016CE  0100               	movlb	0	; () banked
 15850  0016D0  6F9B               	movwf	(??_printf+1)& (0+255),b
 15851  0016D2  C08E  FFF6         	movff	printf@f,tblptrl
 15852  0016D6  C08F  FFF7         	movff	printf@f+1,tblptrh
 15853  0016DA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15854  0016DA  6AF8               	clrf	tblptru,c
 15855  0016DC                     	endif
 15856  0016DC                     	if	0	;tblptru may be non-zero
 15857  0016DC                     	endif
 15858  0016DC  0008               	tblrd		*
 15859  0016DE  50F5               	movf	tablat,w,c
 15860  0016E0  0100               	movlb	0	; () banked
 15861  0016E2  6F9C               	movwf	(??_printf+2)& (0+255),b
 15862  0016E4  6B9D               	clrf	(??_printf+3)& (0+255),b
 15863  0016E6  0100               	movlb	0	; () banked
 15864  0016E8  519A               	movf	??_printf& (0+255),w,b
 15865  0016EA  0100               	movlb	0	; () banked
 15866  0016EC  279C               	addwf	(??_printf+2)& (0+255),f,b
 15867  0016EE  0100               	movlb	0	; () banked
 15868  0016F0  519B               	movf	(??_printf+1)& (0+255),w,b
 15869  0016F2  0100               	movlb	0	; () banked
 15870  0016F4  239D               	addwfc	(??_printf+3)& (0+255),f,b
 15871  0016F6  0100               	movlb	0	; () banked
 15872  0016F8  519C               	movf	(??_printf+2)& (0+255),w,b
 15873  0016FA  0100               	movlb	0	; () banked
 15874  0016FC  27A9               	addwf	printf@width& (0+255),f,b
 15875  0016FE  0100               	movlb	0	; () banked
 15876  001700  519D               	movf	(??_printf+3)& (0+255),w,b
 15877  001702  0100               	movlb	0	; () banked
 15878  001704  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 15879                           
 15880                           ; BSR set to: 0
 15881  001706  0100               	movlb	0	; () banked
 15882  001708  4B8E               	infsnz	printf@f& (0+255),f,b
 15883  00170A  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15884                           
 15885                           ; BSR set to: 0
 15886                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15887  00170C  C08E  FFF6         	movff	printf@f,tblptrl
 15888  001710  C08F  FFF7         	movff	printf@f+1,tblptrh
 15889  001714                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15890  001714  6AF8               	clrf	tblptru,c
 15891  001716                     	endif
 15892  001716                     	if	0	;tblptru may be non-zero
 15893  001716                     	endif
 15894  001716  0008               	tblrd		*
 15895  001718  50F5               	movf	tablat,w,c
 15896  00171A  ECD2  F028         	call	_isdigit
 15897  00171E  A0D8               	btfss	status,0,c
 15898  001720  D090               	goto	l6312
 15899  001722  D7C2               	goto	l6270
 15900  001724                     l6278:
 15901                           
 15902                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 15903  001724  C0A1  FFD9         	movff	printf@ap,fsr2l
 15904  001728  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15905  00172C  CFDE F09F          	movff	postinc2,printf@cp
 15906  001730  CFDD F0A0          	movff	postdec2,printf@cp+1
 15907  001734  0E02               	movlw	2
 15908  001736  0100               	movlb	0	; () banked
 15909  001738  27A1               	addwf	printf@ap& (0+255),f,b
 15910  00173A  0E00               	movlw	0
 15911  00173C  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15912                           
 15913                           ; BSR set to: 0
 15914                           ;doprnt.c: 740: if(!cp)
 15915  00173E  0100               	movlb	0	; () banked
 15916  001740  519F               	movf	printf@cp& (0+255),w,b
 15917  001742  0100               	movlb	0	; () banked
 15918  001744  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 15919  001746  A4D8               	btfss	status,2,c
 15920  001748  D006               	goto	l6286
 15921                           
 15922                           ; BSR set to: 0
 15923                           ;doprnt.c: 741: cp = "(null)";
 15924  00174A  0EB6               	movlw	low STR_128
 15925  00174C  0100               	movlb	0	; () banked
 15926  00174E  6F9F               	movwf	printf@cp& (0+255),b
 15927  001750  0EFF               	movlw	high STR_128
 15928  001752  0100               	movlb	0	; () banked
 15929  001754  6FA0               	movwf	(printf@cp+1)& (0+255),b
 15930  001756                     l6286:
 15931                           
 15932                           ; BSR set to: 0
 15933                           ;doprnt.c: 745: len = 0;
 15934  001756  0E00               	movlw	0
 15935  001758  0100               	movlb	0	; () banked
 15936  00175A  6FA4               	movwf	(printf@len+1)& (0+255),b
 15937  00175C  0E00               	movlw	0
 15938  00175E  6FA3               	movwf	printf@len& (0+255),b
 15939                           
 15940                           ;doprnt.c: 746: while(cp[len])
 15941  001760  D003               	goto	l6290
 15942  001762                     l6288:
 15943                           
 15944                           ;doprnt.c: 747: len++;
 15945  001762  0100               	movlb	0	; () banked
 15946  001764  4BA3               	infsnz	printf@len& (0+255),f,b
 15947  001766  2BA4               	incf	(printf@len+1)& (0+255),f,b
 15948  001768                     l6290:
 15949                           
 15950                           ; BSR set to: 0
 15951  001768  0100               	movlb	0	; () banked
 15952  00176A  51A3               	movf	printf@len& (0+255),w,b
 15953  00176C  0100               	movlb	0	; () banked
 15954  00176E  259F               	addwf	printf@cp& (0+255),w,b
 15955  001770  0100               	movlb	0	; () banked
 15956  001772  6F9A               	movwf	??_printf& (0+255),b
 15957  001774  0100               	movlb	0	; () banked
 15958  001776  51A4               	movf	(printf@len+1)& (0+255),w,b
 15959  001778  0100               	movlb	0	; () banked
 15960  00177A  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 15961  00177C  0100               	movlb	0	; () banked
 15962  00177E  6F9B               	movwf	(??_printf+1)& (0+255),b
 15963  001780  C09A  FFF6         	movff	??_printf,tblptrl
 15964  001784  C09B  FFF7         	movff	??_printf+1,tblptrh
 15965  001788  0E00               	movlw	low (__mediumconst shr (0+16))
 15966  00178A  6EF8               	movwf	tblptru,c
 15967  00178C  0E0F               	movlw	(high __ramtop+-1)
 15968  00178E  64F7               	cpfsgt	tblptrh,c
 15969  001790  D003               	bra	u4717
 15970  001792  0008               	tblrd		*
 15971  001794  50F5               	movf	tablat,w,c
 15972  001796  D005               	bra	u4710
 15973  001798                     u4717:
 15974  001798  CFF6 FFE9          	movff	tblptrl,fsr0l
 15975  00179C  CFF7 FFEA          	movff	tblptrh,fsr0h
 15976  0017A0  50EF               	movf	indf0,w,c
 15977  0017A2                     u4710:
 15978  0017A2  0900               	iorlw	0
 15979  0017A4  A4D8               	btfss	status,2,c
 15980  0017A6  D7DD               	goto	l6288
 15981                           
 15982                           ;doprnt.c: 757: if(width > len)
 15983  0017A8  0100               	movlb	0	; () banked
 15984  0017AA  51A9               	movf	printf@width& (0+255),w,b
 15985  0017AC  0100               	movlb	0	; () banked
 15986  0017AE  5DA3               	subwf	printf@len& (0+255),w,b
 15987  0017B0  0100               	movlb	0	; () banked
 15988  0017B2  51AA               	movf	(printf@width+1)& (0+255),w,b
 15989  0017B4  0100               	movlb	0	; () banked
 15990  0017B6  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 15991  0017B8  B0D8               	btfsc	status,0,c
 15992  0017BA  D009               	goto	l6296
 15993                           
 15994                           ; BSR set to: 0
 15995                           ;doprnt.c: 758: width -= len;
 15996  0017BC  0100               	movlb	0	; () banked
 15997  0017BE  51A3               	movf	printf@len& (0+255),w,b
 15998  0017C0  0100               	movlb	0	; () banked
 15999  0017C2  5FA9               	subwf	printf@width& (0+255),f,b
 16000  0017C4  0100               	movlb	0	; () banked
 16001  0017C6  51A4               	movf	(printf@len+1)& (0+255),w,b
 16002  0017C8  0100               	movlb	0	; () banked
 16003  0017CA  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16004  0017CC  D009               	goto	l6300
 16005  0017CE                     l6296:
 16006                           
 16007                           ; BSR set to: 0
 16008                           ;doprnt.c: 759: else
 16009                           ;doprnt.c: 760: width = 0;
 16010  0017CE  0E00               	movlw	0
 16011  0017D0  0100               	movlb	0	; () banked
 16012  0017D2  6FAA               	movwf	(printf@width+1)& (0+255),b
 16013  0017D4  0E00               	movlw	0
 16014  0017D6  6FA9               	movwf	printf@width& (0+255),b
 16015                           
 16016                           ; BSR set to: 0
 16017                           ;doprnt.c: 764: while(width--)
 16018  0017D8  D003               	goto	l6300
 16019  0017DA                     l6298:
 16020                           
 16021                           ; BSR set to: 0
 16022                           ;doprnt.c: 765: (putch(' ') );
 16023  0017DA  0E20               	movlw	32
 16024  0017DC  ECBD  F029         	call	_putch
 16025  0017E0                     l6300:
 16026  0017E0  0100               	movlb	0	; () banked
 16027  0017E2  07A9               	decf	printf@width& (0+255),f,b
 16028  0017E4  A0D8               	btfss	status,0,c
 16029  0017E6  07AA               	decf	(printf@width+1)& (0+255),f,b
 16030  0017E8  0100               	movlb	0	; () banked
 16031  0017EA  29A9               	incf	printf@width& (0+255),w,b
 16032  0017EC  E1F6               	bnz	l6298
 16033  0017EE  0100               	movlb	0	; () banked
 16034  0017F0  29AA               	incf	(printf@width+1)& (0+255),w,b
 16035  0017F2  B4D8               	btfsc	status,2,c
 16036  0017F4  D017               	goto	l6306
 16037  0017F6  D7F1               	goto	l6298
 16038  0017F8                     l6302:
 16039                           
 16040                           ; BSR set to: 0
 16041                           ;doprnt.c: 768: (putch(*cp++) );
 16042  0017F8  C09F  FFF6         	movff	printf@cp,tblptrl
 16043  0017FC  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 16044  001800  0E00               	movlw	low (__mediumconst shr (0+16))
 16045  001802  6EF8               	movwf	tblptru,c
 16046  001804  0E0F               	movlw	(high __ramtop+-1)
 16047  001806  64F7               	cpfsgt	tblptrh,c
 16048  001808  D003               	bra	u4757
 16049  00180A  0008               	tblrd		*
 16050  00180C  50F5               	movf	tablat,w,c
 16051  00180E  D005               	bra	u4750
 16052  001810                     u4757:
 16053  001810  CFF6 FFE9          	movff	tblptrl,fsr0l
 16054  001814  CFF7 FFEA          	movff	tblptrh,fsr0h
 16055  001818  50EF               	movf	indf0,w,c
 16056  00181A                     u4750:
 16057  00181A  ECBD  F029         	call	_putch
 16058  00181E  0100               	movlb	0	; () banked
 16059  001820  4B9F               	infsnz	printf@cp& (0+255),f,b
 16060  001822  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 16061  001824                     l6306:
 16062                           
 16063                           ; BSR set to: 0
 16064  001824  0100               	movlb	0	; () banked
 16065  001826  07A3               	decf	printf@len& (0+255),f,b
 16066  001828  A0D8               	btfss	status,0,c
 16067  00182A  07A4               	decf	(printf@len+1)& (0+255),f,b
 16068  00182C  0100               	movlb	0	; () banked
 16069  00182E  29A3               	incf	printf@len& (0+255),w,b
 16070  001830  E1E3               	bnz	l6302
 16071  001832  0100               	movlb	0	; () banked
 16072  001834  29A4               	incf	(printf@len+1)& (0+255),w,b
 16073  001836  B4D8               	btfsc	status,2,c
 16074  001838  D10A               	goto	l6384
 16075  00183A  D7DE               	goto	l6302
 16076  00183C                     l6308:
 16077                           
 16078                           ; BSR set to: 0
 16079                           ;doprnt.c: 818: flag |= 0x40;
 16080  00183C  0100               	movlb	0	; () banked
 16081  00183E  8DA7               	bsf	printf@flag& (0+255),6,b
 16082                           
 16083                           ; BSR set to: 0
 16084                           ;doprnt.c: 822: }
 16085                           
 16086                           ;doprnt.c: 819: break;
 16087  001840  D01D               	goto	l1412
 16088  001842                     l6312:
 16089  001842  C08E  FFF6         	movff	printf@f,tblptrl
 16090  001846  C08F  FFF7         	movff	printf@f+1,tblptrh
 16091  00184A  0100               	movlb	0	; () banked
 16092  00184C  4B8E               	infsnz	printf@f& (0+255),f,b
 16093  00184E  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16094  001850                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16095  001850  6AF8               	clrf	tblptru,c
 16096  001852                     	endif
 16097  001852                     	if	0	;tblptru may be non-zero
 16098  001852                     	endif
 16099  001852  0008               	tblrd		*
 16100  001854  CFF5 F0A8          	movff	tablat,printf@c
 16101  001858  0100               	movlb	0	; () banked
 16102  00185A  51A8               	movf	printf@c& (0+255),w,b
 16103                           
 16104                           ; Switch size 1, requested type "space"
 16105                           ; Number of cases is 5, Range of values is 0 to 117
 16106                           ; switch strategies available:
 16107                           ; Name         Instructions Cycles
 16108                           ; simple_byte           16     9 (average)
 16109                           ;	Chosen strategy is simple_byte
 16110  00185C  0A00               	xorlw	0	; case 0
 16111  00185E  B4D8               	btfsc	status,2,c
 16112  001860  0012               	return	
 16113  001862  0A64               	xorlw	100	; case 100
 16114  001864  B4D8               	btfsc	status,2,c
 16115  001866  D00A               	goto	l1412
 16116  001868  0A0D               	xorlw	13	; case 105
 16117  00186A  B4D8               	btfsc	status,2,c
 16118  00186C  D007               	goto	l1412
 16119  00186E  0A1A               	xorlw	26	; case 115
 16120  001870  B4D8               	btfsc	status,2,c
 16121  001872  D758               	goto	l6278
 16122  001874  0A06               	xorlw	6	; case 117
 16123  001876  B4D8               	btfsc	status,2,c
 16124  001878  D7E1               	goto	l6308
 16125  00187A  D0E9               	goto	l6384
 16126  00187C                     l1412:
 16127                           
 16128                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 16129  00187C  0100               	movlb	0	; () banked
 16130  00187E  BDA7               	btfsc	printf@flag& (0+255),6,b
 16131  001880  D019               	goto	l6324
 16132                           
 16133                           ; BSR set to: 0
 16134                           ;doprnt.c: 1253: {
 16135                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 16136  001882  C0A1  FFD9         	movff	printf@ap,fsr2l
 16137  001886  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16138  00188A  CFDE F0A5          	movff	postinc2,printf@val
 16139  00188E  CFDD F0A6          	movff	postdec2,printf@val+1
 16140                           
 16141                           ; BSR set to: 0
 16142  001892  0E02               	movlw	2
 16143  001894  0100               	movlb	0	; () banked
 16144  001896  27A1               	addwf	printf@ap& (0+255),f,b
 16145  001898  0E00               	movlw	0
 16146  00189A  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16147                           
 16148                           ; BSR set to: 0
 16149                           ;doprnt.c: 1261: if((int)val < 0) {
 16150  00189C  0100               	movlb	0	; () banked
 16151  00189E  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 16152  0018A0  D016               	goto	l6328
 16153                           
 16154                           ; BSR set to: 0
 16155                           ;doprnt.c: 1262: flag |= 0x03;
 16156  0018A2  0E03               	movlw	3
 16157  0018A4  0100               	movlb	0	; () banked
 16158  0018A6  13A7               	iorwf	printf@flag& (0+255),f,b
 16159                           
 16160                           ; BSR set to: 0
 16161                           ;doprnt.c: 1263: val = -val;
 16162  0018A8  0100               	movlb	0	; () banked
 16163  0018AA  6DA5               	negf	printf@val& (0+255),b
 16164  0018AC  1FA6               	comf	(printf@val+1)& (0+255),f,b
 16165  0018AE  B0D8               	btfsc	status,0,c
 16166  0018B0  2BA6               	incf	(printf@val+1)& (0+255),f,b
 16167                           
 16168                           ; BSR set to: 0
 16169                           ;doprnt.c: 1264: }
 16170                           ;doprnt.c: 1266: }
 16171  0018B2  D00D               	goto	l6328
 16172  0018B4                     l6324:
 16173                           
 16174                           ; BSR set to: 0
 16175                           ;doprnt.c: 1268: else
 16176                           ;doprnt.c: 1273: {
 16177                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 16178  0018B4  C0A1  FFD9         	movff	printf@ap,fsr2l
 16179  0018B8  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16180  0018BC  CFDE F0A5          	movff	postinc2,printf@val
 16181  0018C0  CFDD F0A6          	movff	postdec2,printf@val+1
 16182                           
 16183                           ; BSR set to: 0
 16184  0018C4  0E02               	movlw	2
 16185  0018C6  0100               	movlb	0	; () banked
 16186  0018C8  27A1               	addwf	printf@ap& (0+255),f,b
 16187  0018CA  0E00               	movlw	0
 16188  0018CC  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16189  0018CE                     l6328:
 16190                           
 16191                           ; BSR set to: 0
 16192                           ;doprnt.c: 1287: }
 16193                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16194  0018CE  0E01               	movlw	1
 16195  0018D0  0100               	movlb	0	; () banked
 16196  0018D2  6FA8               	movwf	printf@c& (0+255),b
 16197  0018D4                     l6330:
 16198                           
 16199                           ; BSR set to: 0
 16200  0018D4  0E05               	movlw	5
 16201  0018D6  0100               	movlb	0	; () banked
 16202  0018D8  19A8               	xorwf	printf@c& (0+255),w,b
 16203  0018DA  B4D8               	btfsc	status,2,c
 16204  0018DC  D019               	goto	l6342
 16205                           
 16206                           ; BSR set to: 0
 16207                           ;doprnt.c: 1306: if(val < dpowers[c])
 16208                           
 16209                           ; BSR set to: 0
 16210                           
 16211                           ; BSR set to: 0
 16212  0018DE  0100               	movlb	0	; () banked
 16213  0018E0  51A8               	movf	printf@c& (0+255),w,b
 16214  0018E2  0D02               	mullw	2
 16215  0018E4  0EDE               	movlw	low _dpowers
 16216  0018E6  24F3               	addwf	prodl,w,c
 16217  0018E8  6EF6               	movwf	tblptrl,c
 16218  0018EA  0EFA               	movlw	high _dpowers
 16219  0018EC  20F4               	addwfc	prodh,w,c
 16220  0018EE  6EF7               	movwf	tblptrh,c
 16221  0018F0                     	if	1	;There are 3 active tblptr bytes
 16222  0018F0  6AF8               	clrf	tblptru,c
 16223  0018F2  0E00               	movlw	low (__mediumconst shr (0+16))
 16224  0018F4  22F8               	addwfc	tblptru,f,c
 16225  0018F6                     	endif
 16226  0018F6  0009               	tblrd		*+
 16227  0018F8  50F5               	movf	tablat,w,c
 16228  0018FA  0100               	movlb	0	; () banked
 16229  0018FC  5DA5               	subwf	printf@val& (0+255),w,b
 16230  0018FE  0009               	tblrd		*+
 16231  001900  50F5               	movf	tablat,w,c
 16232  001902  0100               	movlb	0	; () banked
 16233  001904  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 16234  001906  A0D8               	btfss	status,0,c
 16235  001908  D003               	goto	l6342
 16236                           
 16237                           ; BSR set to: 0
 16238                           
 16239                           ; BSR set to: 0
 16240                           
 16241                           ; BSR set to: 0
 16242                           ;doprnt.c: 1307: break;
 16243  00190A  0100               	movlb	0	; () banked
 16244  00190C  2BA8               	incf	printf@c& (0+255),f,b
 16245  00190E  D7E2               	goto	l6330
 16246  001910                     l6342:
 16247                           
 16248                           ; BSR set to: 0
 16249                           ;doprnt.c: 1345: if(width && flag & 0x03)
 16250  001910  0100               	movlb	0	; () banked
 16251  001912  51A9               	movf	printf@width& (0+255),w,b
 16252  001914  0100               	movlb	0	; () banked
 16253  001916  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16254  001918  B4D8               	btfsc	status,2,c
 16255  00191A  D00B               	goto	l6348
 16256                           
 16257                           ; BSR set to: 0
 16258  00191C  C0A7  F09A         	movff	printf@flag,??_printf
 16259  001920  0E03               	movlw	3
 16260  001922  0100               	movlb	0	; () banked
 16261  001924  179A               	andwf	??_printf& (0+255),f,b
 16262  001926  B4D8               	btfsc	status,2,c
 16263  001928  D004               	goto	l6348
 16264                           
 16265                           ; BSR set to: 0
 16266                           ;doprnt.c: 1346: width--;
 16267  00192A  0100               	movlb	0	; () banked
 16268  00192C  07A9               	decf	printf@width& (0+255),f,b
 16269  00192E  A0D8               	btfss	status,0,c
 16270  001930  07AA               	decf	(printf@width+1)& (0+255),f,b
 16271  001932                     l6348:
 16272                           
 16273                           ; BSR set to: 0
 16274                           ;doprnt.c: 1381: if(width > c)
 16275  001932  0E80               	movlw	128
 16276  001934  0100               	movlb	0	; () banked
 16277  001936  BFA8               	btfsc	printf@c& (0+255),7,b
 16278  001938  0E7F               	movlw	127
 16279  00193A  0100               	movlb	0	; () banked
 16280  00193C  6F9A               	movwf	??_printf& (0+255),b
 16281  00193E  0100               	movlb	0	; () banked
 16282  001940  51A9               	movf	printf@width& (0+255),w,b
 16283  001942  0100               	movlb	0	; () banked
 16284  001944  5DA8               	subwf	printf@c& (0+255),w,b
 16285  001946  0100               	movlb	0	; () banked
 16286  001948  51AA               	movf	(printf@width+1)& (0+255),w,b
 16287  00194A  0A80               	xorlw	128
 16288  00194C  0100               	movlb	0	; () banked
 16289  00194E  599A               	subwfb	??_printf& (0+255),w,b
 16290  001950  B0D8               	btfsc	status,0,c
 16291  001952  D00B               	goto	l6352
 16292                           
 16293                           ; BSR set to: 0
 16294                           ;doprnt.c: 1382: width -= c;
 16295  001954  0100               	movlb	0	; () banked
 16296  001956  51A8               	movf	printf@c& (0+255),w,b
 16297  001958  0100               	movlb	0	; () banked
 16298  00195A  5FA9               	subwf	printf@width& (0+255),f,b
 16299  00195C  0E00               	movlw	0
 16300  00195E  0100               	movlb	0	; () banked
 16301  001960  BFA8               	btfsc	printf@c& (0+255),7,b
 16302  001962  0EFF               	movlw	255
 16303  001964  0100               	movlb	0	; () banked
 16304  001966  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16305  001968  D005               	goto	l6354
 16306  00196A                     l6352:
 16307                           
 16308                           ; BSR set to: 0
 16309                           ;doprnt.c: 1383: else
 16310                           ;doprnt.c: 1384: width = 0;
 16311  00196A  0E00               	movlw	0
 16312  00196C  0100               	movlb	0	; () banked
 16313  00196E  6FAA               	movwf	(printf@width+1)& (0+255),b
 16314  001970  0E00               	movlw	0
 16315  001972  6FA9               	movwf	printf@width& (0+255),b
 16316  001974                     l6354:
 16317                           
 16318                           ; BSR set to: 0
 16319                           ;doprnt.c: 1387: if(flag & 0x04) {
 16320  001974  0100               	movlb	0	; () banked
 16321  001976  A5A7               	btfss	printf@flag& (0+255),2,b
 16322  001978  D018               	goto	l6366
 16323                           
 16324                           ; BSR set to: 0
 16325                           ;doprnt.c: 1392: if(flag & 0x03)
 16326  00197A  C0A7  F09A         	movff	printf@flag,??_printf
 16327  00197E  0E03               	movlw	3
 16328  001980  0100               	movlb	0	; () banked
 16329  001982  179A               	andwf	??_printf& (0+255),f,b
 16330  001984  B4D8               	btfsc	status,2,c
 16331  001986  D003               	goto	l6360
 16332                           
 16333                           ; BSR set to: 0
 16334                           ;doprnt.c: 1393: (putch('-') );
 16335  001988  0E2D               	movlw	45
 16336  00198A  ECBD  F029         	call	_putch
 16337  00198E                     l6360:
 16338                           
 16339                           ;doprnt.c: 1415: if(width)
 16340  00198E  0100               	movlb	0	; () banked
 16341  001990  51A9               	movf	printf@width& (0+255),w,b
 16342  001992  0100               	movlb	0	; () banked
 16343  001994  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16344  001996  B4D8               	btfsc	status,2,c
 16345  001998  D025               	goto	l6376
 16346                           
 16347                           ; BSR set to: 0
 16348                           ;doprnt.c: 1417: (putch('0') );
 16349                           
 16350                           ; BSR set to: 0
 16351                           
 16352                           ;doprnt.c: 1416: do
 16353  00199A  0E30               	movlw	48
 16354  00199C  ECBD  F029         	call	_putch
 16355                           
 16356                           ;doprnt.c: 1418: while(--width);
 16357  0019A0  0100               	movlb	0	; () banked
 16358  0019A2  07A9               	decf	printf@width& (0+255),f,b
 16359  0019A4  A0D8               	btfss	status,0,c
 16360  0019A6  07AA               	decf	(printf@width+1)& (0+255),f,b
 16361  0019A8  D7F2               	goto	l6360
 16362  0019AA                     l6366:
 16363                           
 16364                           ; BSR set to: 0
 16365                           ;doprnt.c: 1422: {
 16366                           ;doprnt.c: 1424: if(width
 16367                           ;doprnt.c: 1428: )
 16368  0019AA  0100               	movlb	0	; () banked
 16369  0019AC  51A9               	movf	printf@width& (0+255),w,b
 16370  0019AE  0100               	movlb	0	; () banked
 16371  0019B0  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16372  0019B2  B4D8               	btfsc	status,2,c
 16373  0019B4  D00D               	goto	l6372
 16374  0019B6                     l6368:
 16375                           
 16376                           ; BSR set to: 0
 16377                           ;doprnt.c: 1430: (putch(' ') );
 16378  0019B6  0E20               	movlw	32
 16379  0019B8  ECBD  F029         	call	_putch
 16380                           
 16381                           ;doprnt.c: 1431: while(--width);
 16382  0019BC  0100               	movlb	0	; () banked
 16383  0019BE  07A9               	decf	printf@width& (0+255),f,b
 16384  0019C0  A0D8               	btfss	status,0,c
 16385  0019C2  07AA               	decf	(printf@width+1)& (0+255),f,b
 16386  0019C4  0100               	movlb	0	; () banked
 16387  0019C6  51A9               	movf	printf@width& (0+255),w,b
 16388  0019C8  0100               	movlb	0	; () banked
 16389  0019CA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16390  0019CC  A4D8               	btfss	status,2,c
 16391  0019CE  D7F3               	goto	l6368
 16392  0019D0                     l6372:
 16393                           
 16394                           ; BSR set to: 0
 16395                           ;doprnt.c: 1438: if(flag & 0x03)
 16396  0019D0  C0A7  F09A         	movff	printf@flag,??_printf
 16397  0019D4  0E03               	movlw	3
 16398  0019D6  0100               	movlb	0	; () banked
 16399  0019D8  179A               	andwf	??_printf& (0+255),f,b
 16400  0019DA  B4D8               	btfsc	status,2,c
 16401  0019DC  D003               	goto	l6376
 16402                           
 16403                           ; BSR set to: 0
 16404                           ;doprnt.c: 1439: (putch('-') );
 16405  0019DE  0E2D               	movlw	45
 16406  0019E0  ECBD  F029         	call	_putch
 16407  0019E4                     l6376:
 16408                           
 16409                           ;doprnt.c: 1469: }
 16410                           ;doprnt.c: 1472: prec = c;
 16411  0019E4  C0A8  F09E         	movff	printf@c,printf@prec
 16412                           
 16413                           ;doprnt.c: 1474: while(prec--) {
 16414  0019E8  D02C               	goto	l6382
 16415  0019EA                     l6378:
 16416                           
 16417                           ;doprnt.c: 1478: {
 16418                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16419  0019EA  0100               	movlb	0	; () banked
 16420  0019EC  519E               	movf	printf@prec& (0+255),w,b
 16421  0019EE  0D02               	mullw	2
 16422  0019F0  0EDE               	movlw	low _dpowers
 16423  0019F2  24F3               	addwf	prodl,w,c
 16424  0019F4  6EF6               	movwf	tblptrl,c
 16425  0019F6  0EFA               	movlw	high _dpowers
 16426  0019F8  20F4               	addwfc	prodh,w,c
 16427  0019FA  6EF7               	movwf	tblptrh,c
 16428  0019FC                     	if	1	;There are 3 active tblptr bytes
 16429  0019FC  6AF8               	clrf	tblptru,c
 16430  0019FE  0E00               	movlw	low (__mediumconst shr (0+16))
 16431  001A00  22F8               	addwfc	tblptru,f,c
 16432  001A02                     	endif
 16433  001A02  0009               	tblrd		*+
 16434  001A04  CFF5 F082          	movff	tablat,___lwdiv@divisor
 16435  001A08  000A               	tblrd		*-
 16436  001A0A  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 16437  001A0E  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 16438  001A12  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 16439  001A16  ECD7  F023         	call	___lwdiv	;wreg free
 16440  001A1A  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 16441  001A1E  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 16442  001A22  0E00               	movlw	0
 16443  001A24  0100               	movlb	0	; () banked
 16444  001A26  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 16445  001A28  0E0A               	movlw	10
 16446  001A2A  6F89               	movwf	___lwmod@divisor& (0+255),b
 16447  001A2C  ECF1  F024         	call	___lwmod	;wreg free
 16448  001A30  0100               	movlb	0	; () banked
 16449  001A32  5187               	movf	?___lwmod& (0+255),w,b
 16450  001A34  0F30               	addlw	48
 16451  001A36  0100               	movlb	0	; () banked
 16452  001A38  6FA8               	movwf	printf@c& (0+255),b
 16453                           
 16454                           ; BSR set to: 0
 16455                           ;doprnt.c: 1523: }
 16456                           ;doprnt.c: 1524: (putch(c) );
 16457  001A3A  0100               	movlb	0	; () banked
 16458  001A3C  51A8               	movf	printf@c& (0+255),w,b
 16459  001A3E  ECBD  F029         	call	_putch
 16460  001A42                     l6382:
 16461  001A42  0100               	movlb	0	; () banked
 16462  001A44  079E               	decf	printf@prec& (0+255),f,b
 16463  001A46  0100               	movlb	0	; () banked
 16464  001A48  299E               	incf	printf@prec& (0+255),w,b
 16465  001A4A  A4D8               	btfss	status,2,c
 16466  001A4C  D7CE               	goto	l6378
 16467  001A4E                     l6384:
 16468  001A4E  C08E  FFF6         	movff	printf@f,tblptrl
 16469  001A52  C08F  FFF7         	movff	printf@f+1,tblptrh
 16470  001A56  0100               	movlb	0	; () banked
 16471  001A58  4B8E               	infsnz	printf@f& (0+255),f,b
 16472  001A5A  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16473  001A5C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16474  001A5C  6AF8               	clrf	tblptru,c
 16475  001A5E                     	endif
 16476  001A5E                     	if	0	;tblptru may be non-zero
 16477  001A5E                     	endif
 16478  001A5E  0008               	tblrd		*
 16479  001A60  CFF5 F0A8          	movff	tablat,printf@c
 16480  001A64  0100               	movlb	0	; () banked
 16481  001A66  51A8               	movf	printf@c& (0+255),w,b
 16482  001A68  B4D8               	btfsc	status,2,c
 16483  001A6A  0012               	return	
 16484  001A6C  D5EB               	goto	l6254
 16485  001A6E                     __end_of_printf:
 16486                           	opt stack 0
 16487                           tblptru	equ	0xFF8
 16488                           tblptrh	equ	0xFF7
 16489                           tblptrl	equ	0xFF6
 16490                           tablat	equ	0xFF5
 16491                           prodh	equ	0xFF4
 16492                           prodl	equ	0xFF3
 16493                           intcon	equ	0xFF2
 16494                           intcon2	equ	0xFF1
 16495                           intcon3	equ	0xFF0
 16496                           indf0	equ	0xFEF
 16497                           postinc0	equ	0xFEE
 16498                           fsr0h	equ	0xFEA
 16499                           fsr0l	equ	0xFE9
 16500                           wreg	equ	0xFE8
 16501                           postdec1	equ	0xFE5
 16502                           fsr1l	equ	0xFE1
 16503                           indf2	equ	0xFDF
 16504                           postinc2	equ	0xFDE
 16505                           postdec2	equ	0xFDD
 16506                           fsr2h	equ	0xFDA
 16507                           fsr2l	equ	0xFD9
 16508                           status	equ	0xFD8
 16509                           
 16510 ;; *************** function _putch *****************
 16511 ;; Defined at:
 16512 ;;		line 20 in file "lcd.c"
 16513 ;; Parameters:    Size  Location     Type
 16514 ;;  data            1    wreg     unsigned char 
 16515 ;; Auto vars:     Size  Location     Type
 16516 ;;  data            1    2[BANK0 ] unsigned char 
 16517 ;; Return value:  Size  Location     Type
 16518 ;;                  1    wreg      void 
 16519 ;; Registers used:
 16520 ;;		wreg, status,2, status,0, cstack
 16521 ;; Tracked objects:
 16522 ;;		On entry : 0/0
 16523 ;;		On exit  : 0/0
 16524 ;;		Unchanged: 0/0
 16525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16527 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16529 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16530 ;;Total ram usage:        1 bytes
 16531 ;; Hardware stack levels used:    1
 16532 ;; Hardware stack levels required when called:    8
 16533 ;; This function calls:
 16534 ;;		_lcdNibble
 16535 ;; This function is called by:
 16536 ;;		_printf
 16537 ;; This function uses a non-reentrant model
 16538 ;;
 16539                           
 16540                           	psect	text52
 16541  00537A                     __ptext52:
 16542                           	opt stack 0
 16543  00537A                     _putch:
 16544                           	opt stack 18
 16545                           
 16546                           ;incstack = 0
 16547                           ;putch@data stored from wreg
 16548  00537A  0100               	movlb	0	; () banked
 16549  00537C  6F82               	movwf	putch@data& (0+255),b
 16550                           
 16551                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 16552  00537E  848C               	bsf	3980,2,c	;volatile
 16553                           
 16554                           ;lcd.c: 22: lcdNibble(data);
 16555  005380  0100               	movlb	0	; () banked
 16556  005382  5182               	movf	putch@data& (0+255),w,b
 16557  005384  ECBD  F024         	call	_lcdNibble
 16558  005388  0012               	return		;funcret
 16559  00538A                     __end_of_putch:
 16560                           	opt stack 0
 16561                           tblptru	equ	0xFF8
 16562                           tblptrh	equ	0xFF7
 16563                           tblptrl	equ	0xFF6
 16564                           tablat	equ	0xFF5
 16565                           prodh	equ	0xFF4
 16566                           prodl	equ	0xFF3
 16567                           intcon	equ	0xFF2
 16568                           intcon2	equ	0xFF1
 16569                           intcon3	equ	0xFF0
 16570                           indf0	equ	0xFEF
 16571                           postinc0	equ	0xFEE
 16572                           fsr0h	equ	0xFEA
 16573                           fsr0l	equ	0xFE9
 16574                           wreg	equ	0xFE8
 16575                           postdec1	equ	0xFE5
 16576                           fsr1l	equ	0xFE1
 16577                           indf2	equ	0xFDF
 16578                           postinc2	equ	0xFDE
 16579                           postdec2	equ	0xFDD
 16580                           fsr2h	equ	0xFDA
 16581                           fsr2l	equ	0xFD9
 16582                           status	equ	0xFD8
 16583                           
 16584 ;; *************** function _isdigit *****************
 16585 ;; Defined at:
 16586 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 16587 ;; Parameters:    Size  Location     Type
 16588 ;;  c               1    wreg     unsigned char 
 16589 ;; Auto vars:     Size  Location     Type
 16590 ;;  c               1    2[BANK0 ] unsigned char 
 16591 ;; Return value:  Size  Location     Type
 16592 ;;		None               void
 16593 ;; Registers used:
 16594 ;;		wreg, status,2, status,0
 16595 ;; Tracked objects:
 16596 ;;		On entry : 0/0
 16597 ;;		On exit  : 0/0
 16598 ;;		Unchanged: 0/0
 16599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16601 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16602 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16603 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16604 ;;Total ram usage:        3 bytes
 16605 ;; Hardware stack levels used:    1
 16606 ;; Hardware stack levels required when called:    7
 16607 ;; This function calls:
 16608 ;;		Nothing
 16609 ;; This function is called by:
 16610 ;;		_printf
 16611 ;; This function uses a non-reentrant model
 16612 ;;
 16613                           
 16614                           	psect	text53
 16615  0051A4                     __ptext53:
 16616                           	opt stack 0
 16617  0051A4                     _isdigit:
 16618                           	opt stack 19
 16619                           
 16620                           ;incstack = 0
 16621                           ;isdigit@c stored from wreg
 16622  0051A4  0100               	movlb	0	; () banked
 16623  0051A6  6F82               	movwf	isdigit@c& (0+255),b
 16624  0051A8  0E00               	movlw	0
 16625  0051AA  0100               	movlb	0	; () banked
 16626  0051AC  6F81               	movwf	_isdigit$2011& (0+255),b
 16627                           
 16628                           ; BSR set to: 0
 16629  0051AE  0E3A               	movlw	58
 16630  0051B0  0100               	movlb	0	; () banked
 16631  0051B2  6182               	cpfslt	isdigit@c& (0+255),b
 16632  0051B4  D007               	goto	l6102
 16633                           
 16634                           ; BSR set to: 0
 16635  0051B6  0E2F               	movlw	47
 16636  0051B8  0100               	movlb	0	; () banked
 16637  0051BA  6582               	cpfsgt	isdigit@c& (0+255),b
 16638  0051BC  D003               	goto	l6102
 16639                           
 16640                           ; BSR set to: 0
 16641  0051BE  0E01               	movlw	1
 16642  0051C0  0100               	movlb	0	; () banked
 16643  0051C2  6F81               	movwf	_isdigit$2011& (0+255),b
 16644  0051C4                     l6102:
 16645                           
 16646                           ; BSR set to: 0
 16647  0051C4  C081  F080         	movff	_isdigit$2011,??_isdigit
 16648  0051C8  0100               	movlb	0	; () banked
 16649  0051CA  3180               	rrcf	??_isdigit& (0+255),w,b
 16650  0051CC  0012               	return	
 16651  0051CE                     __end_of_isdigit:
 16652                           	opt stack 0
 16653                           tblptru	equ	0xFF8
 16654                           tblptrh	equ	0xFF7
 16655                           tblptrl	equ	0xFF6
 16656                           tablat	equ	0xFF5
 16657                           prodh	equ	0xFF4
 16658                           prodl	equ	0xFF3
 16659                           intcon	equ	0xFF2
 16660                           intcon2	equ	0xFF1
 16661                           intcon3	equ	0xFF0
 16662                           indf0	equ	0xFEF
 16663                           postinc0	equ	0xFEE
 16664                           fsr0h	equ	0xFEA
 16665                           fsr0l	equ	0xFE9
 16666                           wreg	equ	0xFE8
 16667                           postdec1	equ	0xFE5
 16668                           fsr1l	equ	0xFE1
 16669                           indf2	equ	0xFDF
 16670                           postinc2	equ	0xFDE
 16671                           postdec2	equ	0xFDD
 16672                           fsr2h	equ	0xFDA
 16673                           fsr2l	equ	0xFD9
 16674                           status	equ	0xFD8
 16675                           
 16676 ;; *************** function ___wmul *****************
 16677 ;; Defined at:
 16678 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 16679 ;; Parameters:    Size  Location     Type
 16680 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16681 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16682 ;; Auto vars:     Size  Location     Type
 16683 ;;  product         2    4[BANK0 ] unsigned int 
 16684 ;; Return value:  Size  Location     Type
 16685 ;;                  2    0[BANK0 ] unsigned int 
 16686 ;; Registers used:
 16687 ;;		wreg, status,2, status,0, prodl, prodh
 16688 ;; Tracked objects:
 16689 ;;		On entry : 0/0
 16690 ;;		On exit  : 0/0
 16691 ;;		Unchanged: 0/0
 16692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16693 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16694 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16696 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16697 ;;Total ram usage:        6 bytes
 16698 ;; Hardware stack levels used:    1
 16699 ;; Hardware stack levels required when called:    7
 16700 ;; This function calls:
 16701 ;;		Nothing
 16702 ;; This function is called by:
 16703 ;;		_printf
 16704 ;; This function uses a non-reentrant model
 16705 ;;
 16706                           
 16707                           	psect	text54
 16708  004E76                     __ptext54:
 16709                           	opt stack 0
 16710  004E76                     ___wmul:
 16711                           	opt stack 19
 16712                           
 16713                           ; BSR set to: 0
 16714                           ;incstack = 0
 16715  004E76  0100               	movlb	0	; () banked
 16716  004E78  5180               	movf	___wmul@multiplier& (0+255),w,b
 16717  004E7A  0100               	movlb	0	; () banked
 16718  004E7C  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16719  004E7E  CFF3 F084          	movff	prodl,___wmul@product
 16720  004E82  CFF4 F085          	movff	prodh,___wmul@product+1
 16721  004E86  0100               	movlb	0	; () banked
 16722  004E88  5180               	movf	___wmul@multiplier& (0+255),w,b
 16723  004E8A  0100               	movlb	0	; () banked
 16724  004E8C  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16725  004E8E  50F3               	movf	prodl,w,c
 16726  004E90  0100               	movlb	0	; () banked
 16727  004E92  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16728  004E94  0100               	movlb	0	; () banked
 16729  004E96  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16730  004E98  0100               	movlb	0	; () banked
 16731  004E9A  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16732  004E9C  50F3               	movf	prodl,w,c
 16733  004E9E  0100               	movlb	0	; () banked
 16734  004EA0  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16735                           
 16736                           ; BSR set to: 0
 16737  004EA2  C084  F080         	movff	___wmul@product,?___wmul
 16738  004EA6  C085  F081         	movff	___wmul@product+1,?___wmul+1
 16739  004EAA  0012               	return	
 16740  004EAC                     __end_of___wmul:
 16741                           	opt stack 0
 16742                           tblptru	equ	0xFF8
 16743                           tblptrh	equ	0xFF7
 16744                           tblptrl	equ	0xFF6
 16745                           tablat	equ	0xFF5
 16746                           prodh	equ	0xFF4
 16747                           prodl	equ	0xFF3
 16748                           intcon	equ	0xFF2
 16749                           intcon2	equ	0xFF1
 16750                           intcon3	equ	0xFF0
 16751                           indf0	equ	0xFEF
 16752                           postinc0	equ	0xFEE
 16753                           fsr0h	equ	0xFEA
 16754                           fsr0l	equ	0xFE9
 16755                           wreg	equ	0xFE8
 16756                           postdec1	equ	0xFE5
 16757                           fsr1l	equ	0xFE1
 16758                           indf2	equ	0xFDF
 16759                           postinc2	equ	0xFDE
 16760                           postdec2	equ	0xFDD
 16761                           fsr2h	equ	0xFDA
 16762                           fsr2l	equ	0xFD9
 16763                           status	equ	0xFD8
 16764                           
 16765 ;; *************** function ___lwmod *****************
 16766 ;; Defined at:
 16767 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 16768 ;; Parameters:    Size  Location     Type
 16769 ;;  dividend        2    7[BANK0 ] unsigned int 
 16770 ;;  divisor         2    9[BANK0 ] unsigned int 
 16771 ;; Auto vars:     Size  Location     Type
 16772 ;;  counter         1   11[BANK0 ] unsigned char 
 16773 ;; Return value:  Size  Location     Type
 16774 ;;                  2    7[BANK0 ] unsigned int 
 16775 ;; Registers used:
 16776 ;;		wreg, status,2, status,0
 16777 ;; Tracked objects:
 16778 ;;		On entry : 0/0
 16779 ;;		On exit  : 0/0
 16780 ;;		Unchanged: 0/0
 16781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16782 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16783 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16785 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16786 ;;Total ram usage:        5 bytes
 16787 ;; Hardware stack levels used:    1
 16788 ;; Hardware stack levels required when called:    7
 16789 ;; This function calls:
 16790 ;;		Nothing
 16791 ;; This function is called by:
 16792 ;;		_printf
 16793 ;; This function uses a non-reentrant model
 16794 ;;
 16795                           
 16796                           	psect	text55
 16797  0049E2                     __ptext55:
 16798                           	opt stack 0
 16799  0049E2                     ___lwmod:
 16800                           	opt stack 19
 16801                           
 16802                           ; BSR set to: 0
 16803                           ;incstack = 0
 16804  0049E2  0100               	movlb	0	; () banked
 16805  0049E4  5189               	movf	___lwmod@divisor& (0+255),w,b
 16806  0049E6  0100               	movlb	0	; () banked
 16807  0049E8  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 16808  0049EA  B4D8               	btfsc	status,2,c
 16809  0049EC  D026               	goto	l1869
 16810                           
 16811                           ; BSR set to: 0
 16812  0049EE  0E01               	movlw	1
 16813  0049F0  0100               	movlb	0	; () banked
 16814  0049F2  6F8B               	movwf	___lwmod@counter& (0+255),b
 16815  0049F4  D006               	goto	l6140
 16816  0049F6                     l6138:
 16817                           
 16818                           ; BSR set to: 0
 16819  0049F6  0100               	movlb	0	; () banked
 16820  0049F8  90D8               	bcf	status,0,c
 16821  0049FA  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 16822  0049FC  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 16823  0049FE  0100               	movlb	0	; () banked
 16824  004A00  2B8B               	incf	___lwmod@counter& (0+255),f,b
 16825  004A02                     l6140:
 16826                           
 16827                           ; BSR set to: 0
 16828  004A02  0100               	movlb	0	; () banked
 16829  004A04  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 16830  004A06  D7F7               	goto	l6138
 16831  004A08                     l6142:
 16832                           
 16833                           ; BSR set to: 0
 16834  004A08  0100               	movlb	0	; () banked
 16835  004A0A  5189               	movf	___lwmod@divisor& (0+255),w,b
 16836  004A0C  0100               	movlb	0	; () banked
 16837  004A0E  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 16838  004A10  0100               	movlb	0	; () banked
 16839  004A12  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16840  004A14  0100               	movlb	0	; () banked
 16841  004A16  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 16842  004A18  A0D8               	btfss	status,0,c
 16843  004A1A  D008               	goto	l6146
 16844                           
 16845                           ; BSR set to: 0
 16846  004A1C  0100               	movlb	0	; () banked
 16847  004A1E  5189               	movf	___lwmod@divisor& (0+255),w,b
 16848  004A20  0100               	movlb	0	; () banked
 16849  004A22  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 16850  004A24  0100               	movlb	0	; () banked
 16851  004A26  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16852  004A28  0100               	movlb	0	; () banked
 16853  004A2A  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 16854  004A2C                     l6146:
 16855                           
 16856                           ; BSR set to: 0
 16857  004A2C  0100               	movlb	0	; () banked
 16858  004A2E  90D8               	bcf	status,0,c
 16859  004A30  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 16860  004A32  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 16861                           
 16862                           ; BSR set to: 0
 16863  004A34  0100               	movlb	0	; () banked
 16864  004A36  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 16865  004A38  D7E7               	goto	l6142
 16866  004A3A                     l1869:
 16867                           
 16868                           ; BSR set to: 0
 16869  004A3A  C087  F087         	movff	___lwmod@dividend,?___lwmod
 16870  004A3E  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 16871                           
 16872                           ; BSR set to: 0
 16873  004A42  0012               	return		;funcret
 16874  004A44                     __end_of___lwmod:
 16875                           	opt stack 0
 16876                           tblptru	equ	0xFF8
 16877                           tblptrh	equ	0xFF7
 16878                           tblptrl	equ	0xFF6
 16879                           tablat	equ	0xFF5
 16880                           prodh	equ	0xFF4
 16881                           prodl	equ	0xFF3
 16882                           intcon	equ	0xFF2
 16883                           intcon2	equ	0xFF1
 16884                           intcon3	equ	0xFF0
 16885                           indf0	equ	0xFEF
 16886                           postinc0	equ	0xFEE
 16887                           fsr0h	equ	0xFEA
 16888                           fsr0l	equ	0xFE9
 16889                           wreg	equ	0xFE8
 16890                           postdec1	equ	0xFE5
 16891                           fsr1l	equ	0xFE1
 16892                           indf2	equ	0xFDF
 16893                           postinc2	equ	0xFDE
 16894                           postdec2	equ	0xFDD
 16895                           fsr2h	equ	0xFDA
 16896                           fsr2l	equ	0xFD9
 16897                           status	equ	0xFD8
 16898                           
 16899 ;; *************** function ___lwdiv *****************
 16900 ;; Defined at:
 16901 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 16902 ;; Parameters:    Size  Location     Type
 16903 ;;  dividend        2    0[BANK0 ] unsigned int 
 16904 ;;  divisor         2    2[BANK0 ] unsigned int 
 16905 ;; Auto vars:     Size  Location     Type
 16906 ;;  quotient        2    4[BANK0 ] unsigned int 
 16907 ;;  counter         1    6[BANK0 ] unsigned char 
 16908 ;; Return value:  Size  Location     Type
 16909 ;;                  2    0[BANK0 ] unsigned int 
 16910 ;; Registers used:
 16911 ;;		wreg, status,2, status,0
 16912 ;; Tracked objects:
 16913 ;;		On entry : 0/0
 16914 ;;		On exit  : 0/0
 16915 ;;		Unchanged: 0/0
 16916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16917 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16918 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16920 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16921 ;;Total ram usage:        7 bytes
 16922 ;; Hardware stack levels used:    1
 16923 ;; Hardware stack levels required when called:    7
 16924 ;; This function calls:
 16925 ;;		Nothing
 16926 ;; This function is called by:
 16927 ;;		_printf
 16928 ;; This function uses a non-reentrant model
 16929 ;;
 16930                           
 16931                           	psect	text56
 16932  0047AE                     __ptext56:
 16933                           	opt stack 0
 16934  0047AE                     ___lwdiv:
 16935                           	opt stack 19
 16936                           
 16937                           ; BSR set to: 0
 16938                           ;incstack = 0
 16939  0047AE  0E00               	movlw	0
 16940  0047B0  0100               	movlb	0	; () banked
 16941  0047B2  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16942  0047B4  0E00               	movlw	0
 16943  0047B6  6F84               	movwf	___lwdiv@quotient& (0+255),b
 16944                           
 16945                           ; BSR set to: 0
 16946  0047B8  0100               	movlb	0	; () banked
 16947  0047BA  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16948  0047BC  0100               	movlb	0	; () banked
 16949  0047BE  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16950  0047C0  B4D8               	btfsc	status,2,c
 16951  0047C2  D02C               	goto	l1859
 16952                           
 16953                           ; BSR set to: 0
 16954  0047C4  0E01               	movlw	1
 16955  0047C6  0100               	movlb	0	; () banked
 16956  0047C8  6F86               	movwf	___lwdiv@counter& (0+255),b
 16957  0047CA  D006               	goto	l6120
 16958  0047CC                     l6118:
 16959                           
 16960                           ; BSR set to: 0
 16961  0047CC  0100               	movlb	0	; () banked
 16962  0047CE  90D8               	bcf	status,0,c
 16963  0047D0  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 16964  0047D2  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 16965  0047D4  0100               	movlb	0	; () banked
 16966  0047D6  2B86               	incf	___lwdiv@counter& (0+255),f,b
 16967  0047D8                     l6120:
 16968                           
 16969                           ; BSR set to: 0
 16970  0047D8  0100               	movlb	0	; () banked
 16971  0047DA  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 16972  0047DC  D7F7               	goto	l6118
 16973  0047DE                     l6122:
 16974                           
 16975                           ; BSR set to: 0
 16976  0047DE  0100               	movlb	0	; () banked
 16977  0047E0  90D8               	bcf	status,0,c
 16978  0047E2  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 16979  0047E4  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 16980                           
 16981                           ; BSR set to: 0
 16982  0047E6  0100               	movlb	0	; () banked
 16983  0047E8  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16984  0047EA  0100               	movlb	0	; () banked
 16985  0047EC  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 16986  0047EE  0100               	movlb	0	; () banked
 16987  0047F0  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16988  0047F2  0100               	movlb	0	; () banked
 16989  0047F4  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 16990  0047F6  A0D8               	btfss	status,0,c
 16991  0047F8  D00A               	goto	l6130
 16992                           
 16993                           ; BSR set to: 0
 16994  0047FA  0100               	movlb	0	; () banked
 16995  0047FC  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16996  0047FE  0100               	movlb	0	; () banked
 16997  004800  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 16998  004802  0100               	movlb	0	; () banked
 16999  004804  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17000  004806  0100               	movlb	0	; () banked
 17001  004808  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 17002                           
 17003                           ; BSR set to: 0
 17004  00480A  0100               	movlb	0	; () banked
 17005  00480C  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 17006  00480E                     l6130:
 17007                           
 17008                           ; BSR set to: 0
 17009  00480E  0100               	movlb	0	; () banked
 17010  004810  90D8               	bcf	status,0,c
 17011  004812  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 17012  004814  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 17013                           
 17014                           ; BSR set to: 0
 17015  004816  0100               	movlb	0	; () banked
 17016  004818  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 17017  00481A  D7E1               	goto	l6122
 17018  00481C                     l1859:
 17019                           
 17020                           ; BSR set to: 0
 17021  00481C  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 17022  004820  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 17023                           
 17024                           ; BSR set to: 0
 17025  004824  0012               	return		;funcret
 17026  004826                     __end_of___lwdiv:
 17027                           	opt stack 0
 17028                           tblptru	equ	0xFF8
 17029                           tblptrh	equ	0xFF7
 17030                           tblptrl	equ	0xFF6
 17031                           tablat	equ	0xFF5
 17032                           prodh	equ	0xFF4
 17033                           prodl	equ	0xFF3
 17034                           intcon	equ	0xFF2
 17035                           intcon2	equ	0xFF1
 17036                           intcon3	equ	0xFF0
 17037                           indf0	equ	0xFEF
 17038                           postinc0	equ	0xFEE
 17039                           fsr0h	equ	0xFEA
 17040                           fsr0l	equ	0xFE9
 17041                           wreg	equ	0xFE8
 17042                           postdec1	equ	0xFE5
 17043                           fsr1l	equ	0xFE1
 17044                           indf2	equ	0xFDF
 17045                           postinc2	equ	0xFDE
 17046                           postdec2	equ	0xFDD
 17047                           fsr2h	equ	0xFDA
 17048                           fsr2l	equ	0xFD9
 17049                           status	equ	0xFD8
 17050                           
 17051 ;; *************** function _lcdInst *****************
 17052 ;; Defined at:
 17053 ;;		line 15 in file "lcd.c"
 17054 ;; Parameters:    Size  Location     Type
 17055 ;;  data            1    wreg     unsigned char 
 17056 ;; Auto vars:     Size  Location     Type
 17057 ;;  data            1    2[BANK0 ] unsigned char 
 17058 ;; Return value:  Size  Location     Type
 17059 ;;                  1    wreg      void 
 17060 ;; Registers used:
 17061 ;;		wreg, status,2, status,0, cstack
 17062 ;; Tracked objects:
 17063 ;;		On entry : 0/0
 17064 ;;		On exit  : 0/0
 17065 ;;		Unchanged: 0/0
 17066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17068 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17070 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17071 ;;Total ram usage:        1 bytes
 17072 ;; Hardware stack levels used:    1
 17073 ;; Hardware stack levels required when called:    8
 17074 ;; This function calls:
 17075 ;;		_lcdNibble
 17076 ;; This function is called by:
 17077 ;;		_UI
 17078 ;;		_change_state_to_menu_start
 17079 ;;		_change_state_to_menu_12
 17080 ;;		_change_state_to_menu_22
 17081 ;;		_initLCD
 17082 ;;		_printRTC
 17083 ;;		_Loading
 17084 ;;		_EEPROM_write
 17085 ;;		_Test
 17086 ;;		_algorithmTest
 17087 ;;		_sensorTest
 17088 ;;		_actuatorTest
 17089 ;;		_BothServos
 17090 ;;		_PortTestDC
 17091 ;;		_PusherTest
 17092 ;;		_SpeedTest
 17093 ;;		_BlockerTest
 17094 ;;		_arm
 17095 ;;		_ToggleTestA5
 17096 ;; This function uses a non-reentrant model
 17097 ;;
 17098                           
 17099                           	psect	text57
 17100  00538A                     __ptext57:
 17101                           	opt stack 0
 17102  00538A                     _lcdInst:
 17103                           	opt stack 20
 17104                           
 17105                           ; BSR set to: 0
 17106                           ;incstack = 0
 17107                           ;lcdInst@data stored from wreg
 17108  00538A  0100               	movlb	0	; () banked
 17109  00538C  6F82               	movwf	lcdInst@data& (0+255),b
 17110                           
 17111                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 17112  00538E  948C               	bcf	3980,2,c	;volatile
 17113                           
 17114                           ;lcd.c: 17: lcdNibble(data);
 17115  005390  0100               	movlb	0	; () banked
 17116  005392  5182               	movf	lcdInst@data& (0+255),w,b
 17117  005394  ECBD  F024         	call	_lcdNibble
 17118  005398  0012               	return		;funcret
 17119  00539A                     __end_of_lcdInst:
 17120                           	opt stack 0
 17121                           tblptru	equ	0xFF8
 17122                           tblptrh	equ	0xFF7
 17123                           tblptrl	equ	0xFF6
 17124                           tablat	equ	0xFF5
 17125                           prodh	equ	0xFF4
 17126                           prodl	equ	0xFF3
 17127                           intcon	equ	0xFF2
 17128                           intcon2	equ	0xFF1
 17129                           intcon3	equ	0xFF0
 17130                           indf0	equ	0xFEF
 17131                           postinc0	equ	0xFEE
 17132                           fsr0h	equ	0xFEA
 17133                           fsr0l	equ	0xFE9
 17134                           wreg	equ	0xFE8
 17135                           postdec1	equ	0xFE5
 17136                           fsr1l	equ	0xFE1
 17137                           indf2	equ	0xFDF
 17138                           postinc2	equ	0xFDE
 17139                           postdec2	equ	0xFDD
 17140                           fsr2h	equ	0xFDA
 17141                           fsr2l	equ	0xFD9
 17142                           status	equ	0xFD8
 17143                           
 17144 ;; *************** function _lcdNibble *****************
 17145 ;; Defined at:
 17146 ;;		line 25 in file "lcd.c"
 17147 ;; Parameters:    Size  Location     Type
 17148 ;;  data            1    wreg     unsigned char 
 17149 ;; Auto vars:     Size  Location     Type
 17150 ;;  data            1    1[BANK0 ] unsigned char 
 17151 ;;  temp            1    0[BANK0 ] unsigned char 
 17152 ;; Return value:  Size  Location     Type
 17153 ;;                  1    wreg      void 
 17154 ;; Registers used:
 17155 ;;		wreg, status,2, status,0
 17156 ;; Tracked objects:
 17157 ;;		On entry : 0/0
 17158 ;;		On exit  : 0/0
 17159 ;;		Unchanged: 0/0
 17160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17162 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17164 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17165 ;;Total ram usage:        2 bytes
 17166 ;; Hardware stack levels used:    1
 17167 ;; Hardware stack levels required when called:    7
 17168 ;; This function calls:
 17169 ;;		Nothing
 17170 ;; This function is called by:
 17171 ;;		_lcdInst
 17172 ;;		_putch
 17173 ;; This function uses a non-reentrant model
 17174 ;;
 17175                           
 17176                           	psect	text58
 17177  00497A                     __ptext58:
 17178                           	opt stack 0
 17179  00497A                     _lcdNibble:
 17180                           	opt stack 20
 17181                           
 17182                           ;incstack = 0
 17183                           ;lcdNibble@data stored from wreg
 17184  00497A  0100               	movlb	0	; () banked
 17185  00497C  6F81               	movwf	lcdNibble@data& (0+255),b
 17186                           
 17187                           ;lcd.c: 27: char temp = data & 0xF0;
 17188  00497E  0100               	movlb	0	; () banked
 17189  004980  5181               	movf	lcdNibble@data& (0+255),w,b
 17190  004982  0BF0               	andlw	240
 17191  004984  0100               	movlb	0	; () banked
 17192  004986  6F80               	movwf	lcdNibble@temp& (0+255),b
 17193                           
 17194                           ;lcd.c: 28: LATD = LATD & 0x0F;
 17195  004988  508C               	movf	3980,w,c	;volatile
 17196  00498A  0B0F               	andlw	15
 17197  00498C  6E8C               	movwf	3980,c	;volatile
 17198                           
 17199                           ;lcd.c: 29: LATD = temp | LATD;
 17200  00498E  0100               	movlb	0	; () banked
 17201  004990  5180               	movf	lcdNibble@temp& (0+255),w,b
 17202  004992  108C               	iorwf	3980,w,c	;volatile
 17203  004994  6E8C               	movwf	3980,c	;volatile
 17204                           
 17205                           ; BSR set to: 0
 17206                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 17207  004996  868C               	bsf	3980,3,c	;volatile
 17208                           
 17209                           ; BSR set to: 0
 17210                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17211  004998  0E42               	movlw	66
 17212  00499A                     u10327:
 17213  00499A  2EE8               	decfsz	wreg,f,c
 17214  00499C  D7FE               	bra	u10327
 17215  00499E  D000               	nop2	
 17216                           
 17217                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 17218  0049A0  968C               	bcf	3980,3,c	;volatile
 17219                           
 17220                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17221  0049A2  0E42               	movlw	66
 17222  0049A4                     u10337:
 17223  0049A4  2EE8               	decfsz	wreg,f,c
 17224  0049A6  D7FE               	bra	u10337
 17225  0049A8  D000               	nop2	
 17226                           
 17227                           ;lcd.c: 36: data = data << 4;
 17228  0049AA  0100               	movlb	0	; () banked
 17229  0049AC  3981               	swapf	lcdNibble@data& (0+255),w,b
 17230  0049AE  0BF0               	andlw	240
 17231  0049B0  0100               	movlb	0	; () banked
 17232  0049B2  6F81               	movwf	lcdNibble@data& (0+255),b
 17233                           
 17234                           ;lcd.c: 38: temp = data & 0xF0;
 17235  0049B4  0100               	movlb	0	; () banked
 17236  0049B6  5181               	movf	lcdNibble@data& (0+255),w,b
 17237  0049B8  0BF0               	andlw	240
 17238  0049BA  0100               	movlb	0	; () banked
 17239  0049BC  6F80               	movwf	lcdNibble@temp& (0+255),b
 17240                           
 17241                           ;lcd.c: 39: LATD = LATD & 0x0F;
 17242  0049BE  508C               	movf	3980,w,c	;volatile
 17243  0049C0  0B0F               	andlw	15
 17244  0049C2  6E8C               	movwf	3980,c	;volatile
 17245                           
 17246                           ;lcd.c: 40: LATD = temp | LATD;
 17247  0049C4  0100               	movlb	0	; () banked
 17248  0049C6  5180               	movf	lcdNibble@temp& (0+255),w,b
 17249  0049C8  108C               	iorwf	3980,w,c	;volatile
 17250  0049CA  6E8C               	movwf	3980,c	;volatile
 17251                           
 17252                           ; BSR set to: 0
 17253                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 17254  0049CC  868C               	bsf	3980,3,c	;volatile
 17255                           
 17256                           ; BSR set to: 0
 17257                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17258  0049CE  0E42               	movlw	66
 17259  0049D0                     u10347:
 17260  0049D0  2EE8               	decfsz	wreg,f,c
 17261  0049D2  D7FE               	bra	u10347
 17262  0049D4  D000               	nop2	
 17263                           
 17264                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 17265  0049D6  968C               	bcf	3980,3,c	;volatile
 17266                           
 17267                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17268  0049D8  0E42               	movlw	66
 17269  0049DA                     u10357:
 17270  0049DA  2EE8               	decfsz	wreg,f,c
 17271  0049DC  D7FE               	bra	u10357
 17272  0049DE  D000               	nop2	
 17273  0049E0  0012               	return		;funcret
 17274  0049E2                     __end_of_lcdNibble:
 17275                           	opt stack 0
 17276                           tblptru	equ	0xFF8
 17277                           tblptrh	equ	0xFF7
 17278                           tblptrl	equ	0xFF6
 17279                           tablat	equ	0xFF5
 17280                           prodh	equ	0xFF4
 17281                           prodl	equ	0xFF3
 17282                           intcon	equ	0xFF2
 17283                           intcon2	equ	0xFF1
 17284                           intcon3	equ	0xFF0
 17285                           indf0	equ	0xFEF
 17286                           postinc0	equ	0xFEE
 17287                           fsr0h	equ	0xFEA
 17288                           fsr0l	equ	0xFE9
 17289                           wreg	equ	0xFE8
 17290                           postdec1	equ	0xFE5
 17291                           fsr1l	equ	0xFE1
 17292                           indf2	equ	0xFDF
 17293                           postinc2	equ	0xFDE
 17294                           postdec2	equ	0xFDD
 17295                           fsr2h	equ	0xFDA
 17296                           fsr2l	equ	0xFD9
 17297                           status	equ	0xFD8
 17298                           
 17299 ;; *************** function _handler *****************
 17300 ;; Defined at:
 17301 ;;		line 16 in file "interruptHandler.c"
 17302 ;; Parameters:    Size  Location     Type
 17303 ;;		None
 17304 ;; Auto vars:     Size  Location     Type
 17305 ;;		None
 17306 ;; Return value:  Size  Location     Type
 17307 ;;                  1    wreg      void 
 17308 ;; Registers used:
 17309 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17310 ;; Tracked objects:
 17311 ;;		On entry : 0/0
 17312 ;;		On exit  : 0/0
 17313 ;;		Unchanged: 0/0
 17314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17317 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17318 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17319 ;;Total ram usage:       16 bytes
 17320 ;; Hardware stack levels used:    1
 17321 ;; Hardware stack levels required when called:    6
 17322 ;; This function calls:
 17323 ;;		_printSortTimer
 17324 ;;		_updateMenu
 17325 ;;		_updateServoStates
 17326 ;;		i2_change_state_to_menu_start
 17327 ;; This function is called by:
 17328 ;;		Interrupt level 2
 17329 ;; This function uses a non-reentrant model
 17330 ;;
 17331                           
 17332                           	psect	intcode
 17333  000008                     __pintcode:
 17334                           	opt stack 0
 17335  000008                     _handler:
 17336                           	opt stack 18
 17337                           
 17338                           ;incstack = 0
 17339  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 17340  00000A  ED95  F01B         	call	int_func,f	;refresh shadow registers
 17341                           tblptru	equ	0xFF8
 17342                           tblptrh	equ	0xFF7
 17343                           tblptrl	equ	0xFF6
 17344                           tablat	equ	0xFF5
 17345                           prodh	equ	0xFF4
 17346                           prodl	equ	0xFF3
 17347                           intcon	equ	0xFF2
 17348                           intcon2	equ	0xFF1
 17349                           intcon3	equ	0xFF0
 17350                           indf0	equ	0xFEF
 17351                           postinc0	equ	0xFEE
 17352                           fsr0h	equ	0xFEA
 17353                           fsr0l	equ	0xFE9
 17354                           wreg	equ	0xFE8
 17355                           postdec1	equ	0xFE5
 17356                           fsr1l	equ	0xFE1
 17357                           indf2	equ	0xFDF
 17358                           postinc2	equ	0xFDE
 17359                           postdec2	equ	0xFDD
 17360                           fsr2h	equ	0xFDA
 17361                           fsr2l	equ	0xFD9
 17362                           status	equ	0xFD8
 17363                           
 17364                           	psect	intcode_body
 17365  00372A                     __pintcode_body:
 17366                           	opt stack 18
 17367  00372A                     int_func:
 17368                           	opt stack 18
 17369  00372A  0006               	pop		; remove dummy address from shadow register refresh
 17370  00372C  CFFA F04D          	movff	pclath,??_handler+2
 17371  003730  CFFB F04E          	movff	pclatu,??_handler+3
 17372  003734  CFE9 F04F          	movff	fsr0l,??_handler+4
 17373  003738  CFEA F050          	movff	fsr0h,??_handler+5
 17374  00373C  CFE1 F051          	movff	fsr1l,??_handler+6
 17375  003740  CFE2 F052          	movff	fsr1h,??_handler+7
 17376  003744  CFD9 F053          	movff	fsr2l,??_handler+8
 17377  003748  CFDA F054          	movff	fsr2h,??_handler+9
 17378  00374C  CFF3 F055          	movff	prodl,??_handler+10
 17379  003750  CFF4 F056          	movff	prodh,??_handler+11
 17380  003754  CFF6 F057          	movff	tblptrl,??_handler+12
 17381  003758  CFF7 F058          	movff	tblptrh,??_handler+13
 17382  00375C  CFF8 F059          	movff	tblptru,??_handler+14
 17383  003760  CFF5 F05A          	movff	tablat,??_handler+15
 17384                           
 17385                           ;interruptHandler.c: 18: if(INT1IF){
 17386  003764  A0F0               	btfss	intcon3,0,c	;volatile
 17387  003766  D034               	goto	i2l9464
 17388                           
 17389                           ;interruptHandler.c: 19: INT1IF = 0;
 17390  003768  90F0               	bcf	intcon3,0,c	;volatile
 17391                           
 17392                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 17393  00376A  3881               	swapf	3969,w,c	;volatile
 17394  00376C  0B0F               	andlw	15
 17395  00376E  0B0F               	andlw	15
 17396  003770  6E4B               	movwf	??_handler& (0+255),c
 17397  003772  6A4C               	clrf	(??_handler+1)& (0+255),c
 17398  003774  0ECD               	movlw	low _keys
 17399  003776  244B               	addwf	??_handler,w,c
 17400  003778  6EF6               	movwf	tblptrl,c
 17401  00377A  0EFA               	movlw	high _keys
 17402  00377C  204C               	addwfc	??_handler+1,w,c
 17403  00377E  6EF7               	movwf	tblptrh,c
 17404  003780                     	if	1	;There are 3 active tblptr bytes
 17405  003780  6AF8               	clrf	tblptru,c
 17406  003782  0E00               	movlw	low (__mediumconst shr (0+16))
 17407  003784  22F8               	addwfc	tblptru,f,c
 17408  003786                     	endif
 17409  003786  0008               	tblrd		*
 17410  003788  CFF5 F07D          	movff	tablat,_input	;volatile
 17411                           
 17412                           ;interruptHandler.c: 21: if(input == '*'){
 17413  00378C  0E2A               	movlw	42
 17414  00378E  187D               	xorwf	_input,w,c	;volatile
 17415  003790  B4D8               	btfsc	status,2,c
 17416  003792  D00D               	goto	i2l9458
 17417  003794  D018               	goto	i2l9460
 17418  003796                     i2l9448:
 17419                           
 17420                           ;interruptHandler.c: 24: machine_state = Testing_state;
 17421  003796  0E03               	movlw	3
 17422  003798  D007               	goto	L12
 17423  00379A                     i2l9450:
 17424                           
 17425                           ; BSR set to: 0
 17426                           ;interruptHandler.c: 27: machine_state = UI_state;
 17427  00379A  0E00               	movlw	0
 17428  00379C  0100               	movlb	0	; () banked
 17429  00379E  6FFC               	movwf	_machine_state& (0+255),b
 17430                           
 17431                           ; BSR set to: 0
 17432                           ;interruptHandler.c: 28: change_state_to_menu_start();
 17433  0037A0  ECFB  F028         	call	i2_change_state_to_menu_start	;wreg free
 17434                           
 17435                           ;interruptHandler.c: 29: break;
 17436  0037A4  D015               	goto	i2l9464
 17437  0037A6                     i2l9454:
 17438                           
 17439                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 17440  0037A6  0E02               	movlw	2
 17441  0037A8                     L12:
 17442  0037A8  0100               	movlb	0	; () banked
 17443  0037AA  6FFC               	movwf	_machine_state& (0+255),b
 17444                           
 17445                           ; BSR set to: 0
 17446                           ;interruptHandler.c: 33: }
 17447                           
 17448                           ;interruptHandler.c: 32: break;
 17449  0037AC  D011               	goto	i2l9464
 17450  0037AE                     i2l9458:
 17451  0037AE  0100               	movlb	0	; () banked
 17452  0037B0  51FC               	movf	_machine_state& (0+255),w,b
 17453                           
 17454                           ; Switch size 1, requested type "space"
 17455                           ; Number of cases is 3, Range of values is 0 to 3
 17456                           ; switch strategies available:
 17457                           ; Name         Instructions Cycles
 17458                           ; simple_byte           10     6 (average)
 17459                           ;	Chosen strategy is simple_byte
 17460  0037B2  0A00               	xorlw	0	; case 0
 17461  0037B4  B4D8               	btfsc	status,2,c
 17462  0037B6  D7EF               	goto	i2l9448
 17463  0037B8  0A01               	xorlw	1	; case 1
 17464  0037BA  B4D8               	btfsc	status,2,c
 17465  0037BC  D7F4               	goto	i2l9454
 17466  0037BE  0A02               	xorlw	2	; case 3
 17467  0037C0  B4D8               	btfsc	status,2,c
 17468  0037C2  D7EB               	goto	i2l9450
 17469                           
 17470                           ; BSR set to: 0
 17471                           ;interruptHandler.c: 34: }
 17472  0037C4  D005               	goto	i2l9464
 17473  0037C6                     i2l9460:
 17474                           
 17475                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 17476  0037C6  0100               	movlb	0	; () banked
 17477  0037C8  51FC               	movf	_machine_state& (0+255),w,b
 17478  0037CA  B4D8               	btfsc	status,2,c
 17479                           
 17480                           ; BSR set to: 0
 17481                           ;interruptHandler.c: 36: updateMenu();
 17482  0037CC  EC94  F013         	call	_updateMenu	;wreg free
 17483  0037D0                     i2l9464:
 17484                           
 17485                           ;interruptHandler.c: 37: }
 17486                           ;interruptHandler.c: 38: }
 17487                           ;interruptHandler.c: 41: if(TMR0IF){
 17488  0037D0  A4F2               	btfss	intcon,2,c	;volatile
 17489  0037D2  D00C               	goto	i2l9478
 17490                           
 17491                           ;interruptHandler.c: 42: TMR0IF = 0;
 17492  0037D4  94F2               	bcf	intcon,2,c	;volatile
 17493                           
 17494                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 17495  0037D6  0100               	movlb	0	; () banked
 17496  0037D8  05FC               	decf	_machine_state& (0+255),w,b
 17497  0037DA  A4D8               	btfss	status,2,c
 17498  0037DC  D007               	goto	i2l9478
 17499                           
 17500                           ; BSR set to: 0
 17501                           ;interruptHandler.c: 44: printSortTimer();
 17502  0037DE  ECF4  F014         	call	_printSortTimer	;wreg free
 17503                           
 17504                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 17505  0037E2  0E85               	movlw	133
 17506  0037E4  6ED7               	movwf	4055,c	;volatile
 17507                           
 17508                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 17509  0037E6  0EEE               	movlw	238
 17510  0037E8  6ED6               	movwf	4054,c	;volatile
 17511                           
 17512                           ;interruptHandler.c: 48: TMR0ON = 1;
 17513  0037EA  8ED5               	bsf	4053,7,c	;volatile
 17514  0037EC                     i2l9478:
 17515                           
 17516                           ;interruptHandler.c: 49: }
 17517                           ;interruptHandler.c: 50: }
 17518                           ;interruptHandler.c: 53: if(TMR1IF){
 17519  0037EC  A09E               	btfss	3998,0,c	;volatile
 17520  0037EE  D02A               	goto	i2l9506
 17521                           
 17522                           ;interruptHandler.c: 54: TMR1IF = 0;
 17523  0037F0  909E               	bcf	3998,0,c	;volatile
 17524                           
 17525                           ;interruptHandler.c: 55: TMR1ON = 0;
 17526  0037F2  90CD               	bcf	4045,0,c	;volatile
 17527                           
 17528                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 17529  0037F4  0100               	movlb	0	; () banked
 17530  0037F6  05FC               	decf	_machine_state& (0+255),w,b
 17531  0037F8  A4D8               	btfss	status,2,c
 17532  0037FA  D024               	goto	i2l9506
 17533                           
 17534                           ; BSR set to: 0
 17535                           ;interruptHandler.c: 57: if(was_low_1){
 17536  0037FC  5079               	movf	_was_low_1,w,c	;volatile
 17537  0037FE  107A               	iorwf	_was_low_1+1,w,c	;volatile
 17538  003800  B4D8               	btfsc	status,2,c
 17539  003802  D00A               	goto	i2l974
 17540                           
 17541                           ; BSR set to: 0
 17542                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 17543  003804  828B               	bsf	3979,1,c	;volatile
 17544                           
 17545                           ; BSR set to: 0
 17546                           ;interruptHandler.c: 59: was_low_1 = 0;
 17547  003806  0E00               	movlw	0
 17548  003808  6E7A               	movwf	_was_low_1+1,c	;volatile
 17549  00380A  0E00               	movlw	0
 17550  00380C  6E79               	movwf	_was_low_1,c	;volatile
 17551                           
 17552                           ; BSR set to: 0
 17553                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 17554  00380E  C0DA  FFCF         	movff	_servoTimes,4047	;volatile
 17555                           
 17556                           ; BSR set to: 0
 17557                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 17558  003812  C0DC  FFCE         	movff	_servoTimes+2,4046	;volatile
 17559                           
 17560                           ;interruptHandler.c: 62: }
 17561  003816  D00F               	goto	i2l9500
 17562  003818                     i2l974:
 17563                           
 17564                           ; BSR set to: 0
 17565                           ;interruptHandler.c: 63: else{
 17566                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 17567  003818  928B               	bcf	3979,1,c	;volatile
 17568                           
 17569                           ; BSR set to: 0
 17570                           ;interruptHandler.c: 65: was_low_1 = 1;
 17571  00381A  0E00               	movlw	0
 17572  00381C  6E7A               	movwf	_was_low_1+1,c	;volatile
 17573  00381E  0E01               	movlw	1
 17574  003820  6E79               	movwf	_was_low_1,c	;volatile
 17575                           
 17576                           ; BSR set to: 0
 17577                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 17578  003822  0100               	movlb	0	; () banked
 17579  003824  51DA               	movf	_servoTimes& (0+255),w,b
 17580  003826  0800               	sublw	0
 17581  003828  0F20               	addlw	32
 17582  00382A  6ECF               	movwf	4047,c	;volatile
 17583                           
 17584                           ; BSR set to: 0
 17585                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 17586  00382C  0100               	movlb	0	; () banked
 17587  00382E  51DC               	movf	(_servoTimes+2)& (0+255),w,b
 17588  003830  0800               	sublw	0
 17589  003832  0F20               	addlw	32
 17590  003834  6ECE               	movwf	4046,c	;volatile
 17591  003836                     i2l9500:
 17592                           
 17593                           ; BSR set to: 0
 17594                           ;interruptHandler.c: 68: }
 17595                           ;interruptHandler.c: 69: TMR1ON = 1;
 17596  003836  80CD               	bsf	4045,0,c	;volatile
 17597                           
 17598                           ; BSR set to: 0
 17599                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 17600  003838  0E0A               	movlw	10
 17601  00383A  2671               	addwf	_servo_timer_counter,f,c	;volatile
 17602  00383C  0E00               	movlw	0
 17603  00383E  2272               	addwfc	_servo_timer_counter+1,f,c	;volatile
 17604                           
 17605                           ; BSR set to: 0
 17606                           ;interruptHandler.c: 72: updateServoStates();
 17607  003840  ECB1  F01A         	call	_updateServoStates	;wreg free
 17608  003844                     i2l9506:
 17609                           
 17610                           ;interruptHandler.c: 73: }
 17611                           ;interruptHandler.c: 74: }
 17612                           ;interruptHandler.c: 76: if(TMR3IF){
 17613  003844  A2A1               	btfss	4001,1,c	;volatile
 17614  003846  D024               	goto	i2l980
 17615                           
 17616                           ;interruptHandler.c: 77: TMR3IF = 0;
 17617  003848  92A1               	bcf	4001,1,c	;volatile
 17618                           
 17619                           ;interruptHandler.c: 78: TMR3ON = 0;
 17620  00384A  90B1               	bcf	4017,0,c	;volatile
 17621                           
 17622                           ;interruptHandler.c: 79: if(machine_state == Sorting_state){
 17623  00384C  0100               	movlb	0	; () banked
 17624  00384E  05FC               	decf	_machine_state& (0+255),w,b
 17625  003850  A4D8               	btfss	status,2,c
 17626  003852  D01E               	goto	i2l980
 17627                           
 17628                           ; BSR set to: 0
 17629                           ;interruptHandler.c: 80: if(was_low_3){
 17630  003854  507B               	movf	_was_low_3,w,c	;volatile
 17631  003856  107C               	iorwf	_was_low_3+1,w,c	;volatile
 17632  003858  B4D8               	btfsc	status,2,c
 17633  00385A  D00A               	goto	i2l978
 17634                           
 17635                           ; BSR set to: 0
 17636                           ;interruptHandler.c: 81: LATCbits.LATC2 = 1;
 17637  00385C  848B               	bsf	3979,2,c	;volatile
 17638                           
 17639                           ; BSR set to: 0
 17640                           ;interruptHandler.c: 82: was_low_3 = 0;
 17641  00385E  0E00               	movlw	0
 17642  003860  6E7C               	movwf	_was_low_3+1,c	;volatile
 17643  003862  0E00               	movlw	0
 17644  003864  6E7B               	movwf	_was_low_3,c	;volatile
 17645                           
 17646                           ; BSR set to: 0
 17647                           ;interruptHandler.c: 83: TMR3H = servoTimes[2];
 17648  003866  C0DE  FFB3         	movff	_servoTimes+4,4019	;volatile
 17649                           
 17650                           ; BSR set to: 0
 17651                           ;interruptHandler.c: 84: TMR3L = servoTimes[3];
 17652  00386A  C0E0  FFB2         	movff	_servoTimes+6,4018	;volatile
 17653                           
 17654                           ;interruptHandler.c: 85: }
 17655  00386E  D00F               	goto	i2l9528
 17656  003870                     i2l978:
 17657                           
 17658                           ; BSR set to: 0
 17659                           ;interruptHandler.c: 86: else{
 17660                           ;interruptHandler.c: 87: LATCbits.LATC2 = 0;
 17661  003870  948B               	bcf	3979,2,c	;volatile
 17662                           
 17663                           ; BSR set to: 0
 17664                           ;interruptHandler.c: 88: was_low_3 = 1;
 17665  003872  0E00               	movlw	0
 17666  003874  6E7C               	movwf	_was_low_3+1,c	;volatile
 17667  003876  0E01               	movlw	1
 17668  003878  6E7B               	movwf	_was_low_3,c	;volatile
 17669                           
 17670                           ; BSR set to: 0
 17671                           ;interruptHandler.c: 89: TMR3H = 20000 - servoTimes[2];
 17672  00387A  0100               	movlb	0	; () banked
 17673  00387C  51DE               	movf	(_servoTimes+4)& (0+255),w,b
 17674  00387E  0800               	sublw	0
 17675  003880  0F20               	addlw	32
 17676  003882  6EB3               	movwf	4019,c	;volatile
 17677                           
 17678                           ; BSR set to: 0
 17679                           ;interruptHandler.c: 90: TMR3L = 20000 - servoTimes[3];
 17680  003884  0100               	movlb	0	; () banked
 17681  003886  51E0               	movf	(_servoTimes+6)& (0+255),w,b
 17682  003888  0800               	sublw	0
 17683  00388A  0F20               	addlw	32
 17684  00388C  6EB2               	movwf	4018,c	;volatile
 17685  00388E                     i2l9528:
 17686                           
 17687                           ; BSR set to: 0
 17688                           ;interruptHandler.c: 91: }
 17689                           ;interruptHandler.c: 92: TMR3ON = 1;
 17690  00388E  80B1               	bsf	4017,0,c	;volatile
 17691  003890                     i2l980:
 17692  003890  C05A  FFF5         	movff	??_handler+15,tablat
 17693  003894  C059  FFF8         	movff	??_handler+14,tblptru
 17694  003898  C058  FFF7         	movff	??_handler+13,tblptrh
 17695  00389C  C057  FFF6         	movff	??_handler+12,tblptrl
 17696  0038A0  C056  FFF4         	movff	??_handler+11,prodh
 17697  0038A4  C055  FFF3         	movff	??_handler+10,prodl
 17698  0038A8  C054  FFDA         	movff	??_handler+9,fsr2h
 17699  0038AC  C053  FFD9         	movff	??_handler+8,fsr2l
 17700  0038B0  C052  FFE2         	movff	??_handler+7,fsr1h
 17701  0038B4  C051  FFE1         	movff	??_handler+6,fsr1l
 17702  0038B8  C050  FFEA         	movff	??_handler+5,fsr0h
 17703  0038BC  C04F  FFE9         	movff	??_handler+4,fsr0l
 17704  0038C0  C04E  FFFB         	movff	??_handler+3,pclatu
 17705  0038C4  C04D  FFFA         	movff	??_handler+2,pclath
 17706  0038C8  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17707  0038CA  0011               	retfie		f
 17708  0038CC                     __end_of_handler:
 17709                           	opt stack 0
 17710                           pclatu	equ	0xFFB
 17711                           pclath	equ	0xFFA
 17712                           tblptru	equ	0xFF8
 17713                           tblptrh	equ	0xFF7
 17714                           tblptrl	equ	0xFF6
 17715                           tablat	equ	0xFF5
 17716                           prodh	equ	0xFF4
 17717                           prodl	equ	0xFF3
 17718                           intcon	equ	0xFF2
 17719                           intcon2	equ	0xFF1
 17720                           intcon3	equ	0xFF0
 17721                           indf0	equ	0xFEF
 17722                           postinc0	equ	0xFEE
 17723                           fsr0h	equ	0xFEA
 17724                           fsr0l	equ	0xFE9
 17725                           wreg	equ	0xFE8
 17726                           postdec1	equ	0xFE5
 17727                           fsr1h	equ	0xFE2
 17728                           fsr1l	equ	0xFE1
 17729                           indf2	equ	0xFDF
 17730                           postinc2	equ	0xFDE
 17731                           postdec2	equ	0xFDD
 17732                           fsr2h	equ	0xFDA
 17733                           fsr2l	equ	0xFD9
 17734                           status	equ	0xFD8
 17735                           
 17736 ;; *************** function _updateServoStates *****************
 17737 ;; Defined at:
 17738 ;;		line 520 in file "sort.c"
 17739 ;; Parameters:    Size  Location     Type
 17740 ;;		None
 17741 ;; Auto vars:     Size  Location     Type
 17742 ;;		None
 17743 ;; Return value:  Size  Location     Type
 17744 ;;                  1    wreg      void 
 17745 ;; Registers used:
 17746 ;;		wreg, status,2, status,0, cstack
 17747 ;; Tracked objects:
 17748 ;;		On entry : 0/0
 17749 ;;		On exit  : 0/0
 17750 ;;		Unchanged: 0/0
 17751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17754 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17755 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17756 ;;Total ram usage:        2 bytes
 17757 ;; Hardware stack levels used:    1
 17758 ;; Hardware stack levels required when called:    1
 17759 ;; This function calls:
 17760 ;;		i2_updateServoPosition
 17761 ;; This function is called by:
 17762 ;;		_handler
 17763 ;; This function uses a non-reentrant model
 17764 ;;
 17765                           
 17766                           	psect	text60
 17767  003562                     __ptext60:
 17768                           	opt stack 0
 17769  003562                     _updateServoStates:
 17770                           	opt stack 22
 17771                           
 17772                           ;sort.c: 522: if(servo_timer_counter >= servo_timer_target){
 17773                           
 17774                           ;incstack = 0
 17775  003562  5073               	movf	_servo_timer_target,w,c	;volatile
 17776  003564  5C71               	subwf	_servo_timer_counter,w,c	;volatile
 17777  003566  5072               	movf	_servo_timer_counter+1,w,c	;volatile
 17778  003568  0A80               	xorlw	128
 17779  00356A  6E09               	movwf	??_updateServoStates& (0+255),c
 17780  00356C  5074               	movf	_servo_timer_target+1,w,c	;volatile
 17781  00356E  0A80               	xorlw	128
 17782  003570  5809               	subwfb	??_updateServoStates& (0+255),w,c
 17783  003572  A0D8               	btfss	status,0,c
 17784  003574  0012               	return	
 17785                           
 17786                           ;sort.c: 524: if(f_panning_to_bin){
 17787  003576  5061               	movf	_f_panning_to_bin,w,c	;volatile
 17788  003578  1062               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 17789  00357A  A4D8               	btfss	status,2,c
 17790  00357C  D036               	goto	i2l9340
 17791  00357E  D05F               	goto	i2l9344
 17792  003580                     i2l9314:
 17793                           
 17794                           ;sort.c: 528: updateServoPosition(1260, 3);
 17795  003580  0E04               	movlw	4
 17796  003582  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17797  003584  0EEC               	movlw	236
 17798  003586  6E01               	movwf	i2updateServoPosition@time_us,c
 17799  003588  0E00               	movlw	0
 17800  00358A  6E04               	movwf	i2updateServoPosition@timer+1,c
 17801  00358C  0E03               	movlw	3
 17802  00358E  6E03               	movwf	i2updateServoPosition@timer,c
 17803  003590  EC85  F024         	call	i2_updateServoPosition	;wreg free
 17804  003594  D025               	goto	i2l9334
 17805  003596                     i2l9318:
 17806                           
 17807                           ;sort.c: 530: servo_timer_target = 700;
 17808  003596  0E02               	movlw	2
 17809  003598  6E74               	movwf	_servo_timer_target+1,c	;volatile
 17810  00359A  0EBC               	movlw	188
 17811  00359C  6E73               	movwf	_servo_timer_target,c	;volatile
 17812                           
 17813                           ;sort.c: 531: break;
 17814  00359E  D04A               	goto	i2l9342
 17815  0035A0                     i2l9320:
 17816                           
 17817                           ;sort.c: 533: updateServoPosition(1260, 3);
 17818  0035A0  0E04               	movlw	4
 17819  0035A2  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17820  0035A4  0EEC               	movlw	236
 17821  0035A6  6E01               	movwf	i2updateServoPosition@time_us,c
 17822  0035A8  0E00               	movlw	0
 17823  0035AA  6E04               	movwf	i2updateServoPosition@timer+1,c
 17824  0035AC  0E03               	movlw	3
 17825  0035AE  6E03               	movwf	i2updateServoPosition@timer,c
 17826  0035B0  EC85  F024         	call	i2_updateServoPosition	;wreg free
 17827  0035B4  D015               	goto	i2l9334
 17828  0035B6                     i2l9326:
 17829                           
 17830                           ;sort.c: 539: updateServoPosition(1390, 3);
 17831  0035B6  0E05               	movlw	5
 17832  0035B8  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17833  0035BA  0E6E               	movlw	110
 17834  0035BC  6E01               	movwf	i2updateServoPosition@time_us,c
 17835  0035BE  0E00               	movlw	0
 17836  0035C0  6E04               	movwf	i2updateServoPosition@timer+1,c
 17837  0035C2  0E03               	movlw	3
 17838  0035C4  6E03               	movwf	i2updateServoPosition@timer,c
 17839  0035C6  EC85  F024         	call	i2_updateServoPosition	;wreg free
 17840  0035CA  D00A               	goto	i2l9334
 17841  0035CC                     i2l9332:
 17842                           
 17843                           ;sort.c: 544: updateServoPosition(1390, 3);
 17844  0035CC  0E05               	movlw	5
 17845  0035CE  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17846  0035D0  0E6E               	movlw	110
 17847  0035D2  6E01               	movwf	i2updateServoPosition@time_us,c
 17848  0035D4  0E00               	movlw	0
 17849  0035D6  6E04               	movwf	i2updateServoPosition@timer+1,c
 17850  0035D8  0E03               	movlw	3
 17851  0035DA  6E03               	movwf	i2updateServoPosition@timer,c
 17852  0035DC  EC85  F024         	call	i2_updateServoPosition	;wreg free
 17853  0035E0                     i2l9334:
 17854                           
 17855                           ;sort.c: 545: servo_timer_counter = 0;
 17856  0035E0  0E00               	movlw	0
 17857  0035E2  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17858  0035E4  0E00               	movlw	0
 17859  0035E6  6E71               	movwf	_servo_timer_counter,c	;volatile
 17860  0035E8  D7D6               	goto	i2l9318
 17861  0035EA                     i2l9340:
 17862  0035EA  C06F  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 17863  0035EE  C070  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 17864                           
 17865                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 17866                           ; Switch size 1, requested type "space"
 17867                           ; Number of cases is 4, Range of values is 1 to 9
 17868                           ; switch strategies available:
 17869                           ; Name         Instructions Cycles
 17870                           ; simple_byte           13     7 (average)
 17871                           ;	Chosen strategy is simple_byte
 17872  0035F2  500A               	movf	??_updateServoStates+1,w,c
 17873  0035F4  0A01               	xorlw	1	; case 1
 17874  0035F6  B4D8               	btfsc	status,2,c
 17875  0035F8  D00A               	goto	i2l9956
 17876  0035FA  0A02               	xorlw	2	; case 3
 17877  0035FC  B4D8               	btfsc	status,2,c
 17878  0035FE  D00C               	goto	i2l9958
 17879  003600  0A05               	xorlw	5	; case 6
 17880  003602  B4D8               	btfsc	status,2,c
 17881  003604  D00E               	goto	i2l9960
 17882  003606  0A0F               	xorlw	15	; case 9
 17883  003608  B4D8               	btfsc	status,2,c
 17884  00360A  D010               	goto	i2l9962
 17885  00360C  D013               	goto	i2l9342
 17886  00360E                     i2l9956:
 17887                           
 17888                           ; Switch size 1, requested type "space"
 17889                           ; Number of cases is 1, Range of values is 244 to 244
 17890                           ; switch strategies available:
 17891                           ; Name         Instructions Cycles
 17892                           ; simple_byte            4     3 (average)
 17893                           ;	Chosen strategy is simple_byte
 17894  00360E  5009               	movf	??_updateServoStates,w,c
 17895  003610  0AF4               	xorlw	244	; case 244
 17896  003612  B4D8               	btfsc	status,2,c
 17897  003614  D7B5               	goto	i2l9314
 17898  003616  D00E               	goto	i2l9342
 17899  003618                     i2l9958:
 17900                           
 17901                           ; Switch size 1, requested type "space"
 17902                           ; Number of cases is 1, Range of values is 82 to 82
 17903                           ; switch strategies available:
 17904                           ; Name         Instructions Cycles
 17905                           ; simple_byte            4     3 (average)
 17906                           ;	Chosen strategy is simple_byte
 17907  003618  5009               	movf	??_updateServoStates,w,c
 17908  00361A  0A52               	xorlw	82	; case 82
 17909  00361C  B4D8               	btfsc	status,2,c
 17910  00361E  D7C0               	goto	i2l9320
 17911  003620  D009               	goto	i2l9342
 17912  003622                     i2l9960:
 17913                           
 17914                           ; Switch size 1, requested type "space"
 17915                           ; Number of cases is 1, Range of values is 134 to 134
 17916                           ; switch strategies available:
 17917                           ; Name         Instructions Cycles
 17918                           ; simple_byte            4     3 (average)
 17919                           ;	Chosen strategy is simple_byte
 17920  003622  5009               	movf	??_updateServoStates,w,c
 17921  003624  0A86               	xorlw	134	; case 134
 17922  003626  B4D8               	btfsc	status,2,c
 17923  003628  D7C6               	goto	i2l9326
 17924  00362A  D004               	goto	i2l9342
 17925  00362C                     i2l9962:
 17926                           
 17927                           ; Switch size 1, requested type "space"
 17928                           ; Number of cases is 1, Range of values is 96 to 96
 17929                           ; switch strategies available:
 17930                           ; Name         Instructions Cycles
 17931                           ; simple_byte            4     3 (average)
 17932                           ;	Chosen strategy is simple_byte
 17933  00362C  5009               	movf	??_updateServoStates,w,c
 17934  00362E  0A60               	xorlw	96	; case 96
 17935  003630  B4D8               	btfsc	status,2,c
 17936  003632  D7CC               	goto	i2l9332
 17937  003634                     i2l9342:
 17938                           
 17939                           ;sort.c: 551: f_panning_to_bin = 0;
 17940  003634  0E00               	movlw	0
 17941  003636  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
 17942  003638  0E00               	movlw	0
 17943  00363A  6E61               	movwf	_f_panning_to_bin,c	;volatile
 17944                           
 17945                           ;sort.c: 552: }
 17946  00363C  0012               	return	
 17947  00363E                     i2l9344:
 17948                           
 17949                           ;sort.c: 553: else if(pan_servo_state == 1200){
 17950  00363E  0EB0               	movlw	176
 17951  003640  186F               	xorwf	_pan_servo_state,w,c	;volatile
 17952  003642  E15A               	bnz	i2l9374
 17953  003644  0E04               	movlw	4
 17954  003646  1870               	xorwf	_pan_servo_state+1,w,c	;volatile
 17955  003648  A4D8               	btfss	status,2,c
 17956  00364A  D056               	goto	i2l9374
 17957                           
 17958                           ;sort.c: 555: servo_timer_counter = 0;
 17959  00364C  0E00               	movlw	0
 17960  00364E  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17961  003650  0E00               	movlw	0
 17962  003652  6E71               	movwf	_servo_timer_counter,c	;volatile
 17963                           
 17964                           ;sort.c: 556: }
 17965  003654  0012               	return	
 17966  003656                     i2l9348:
 17967                           
 17968                           ;sort.c: 561: updateServoPosition(1050, 3);
 17969  003656  0E04               	movlw	4
 17970  003658  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17971  00365A  0E1A               	movlw	26
 17972  00365C  6E01               	movwf	i2updateServoPosition@time_us,c
 17973  00365E  0E00               	movlw	0
 17974  003660  6E04               	movwf	i2updateServoPosition@timer+1,c
 17975  003662  0E03               	movlw	3
 17976  003664  6E03               	movwf	i2updateServoPosition@timer,c
 17977  003666  EC85  F024         	call	i2_updateServoPosition	;wreg free
 17978                           
 17979                           ;sort.c: 562: servo_timer_counter = 0;
 17980  00366A  0E00               	movlw	0
 17981  00366C  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17982  00366E  0E00               	movlw	0
 17983  003670  6E71               	movwf	_servo_timer_counter,c	;volatile
 17984                           
 17985                           ;sort.c: 563: servo_timer_target = 750;
 17986  003672  0E02               	movlw	2
 17987  003674  6E74               	movwf	_servo_timer_target+1,c	;volatile
 17988  003676  0EEE               	movlw	238
 17989  003678  6E73               	movwf	_servo_timer_target,c	;volatile
 17990                           
 17991                           ;sort.c: 564: break;
 17992  00367A  0012               	return	
 17993  00367C                     i2l9354:
 17994                           
 17995                           ;sort.c: 566: updateServoPosition(1050, 3);
 17996  00367C  0E04               	movlw	4
 17997  00367E  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17998  003680  0E1A               	movlw	26
 17999  003682  6E01               	movwf	i2updateServoPosition@time_us,c
 18000  003684  0E00               	movlw	0
 18001  003686  6E04               	movwf	i2updateServoPosition@timer+1,c
 18002  003688  0E03               	movlw	3
 18003  00368A  6E03               	movwf	i2updateServoPosition@timer,c
 18004  00368C  EC85  F024         	call	i2_updateServoPosition	;wreg free
 18005                           
 18006                           ;sort.c: 567: servo_timer_counter = 0;
 18007  003690  0E00               	movlw	0
 18008  003692  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 18009  003694  0E00               	movlw	0
 18010  003696  6E71               	movwf	_servo_timer_counter,c	;volatile
 18011                           
 18012                           ;sort.c: 568: servo_timer_target = 750;
 18013  003698  0E02               	movlw	2
 18014  00369A  6E74               	movwf	_servo_timer_target+1,c	;volatile
 18015  00369C  0EEE               	movlw	238
 18016  00369E  6E73               	movwf	_servo_timer_target,c	;volatile
 18017                           
 18018                           ;sort.c: 569: break;
 18019  0036A0  0012               	return	
 18020  0036A2                     i2l9360:
 18021                           
 18022                           ;sort.c: 572: updateServoPosition(1200, 1);
 18023  0036A2  0E04               	movlw	4
 18024  0036A4  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18025  0036A6  0EB0               	movlw	176
 18026  0036A8  6E01               	movwf	i2updateServoPosition@time_us,c
 18027  0036AA  0E00               	movlw	0
 18028  0036AC  6E04               	movwf	i2updateServoPosition@timer+1,c
 18029  0036AE  0E01               	movlw	1
 18030  0036B0  6E03               	movwf	i2updateServoPosition@timer,c
 18031  0036B2  EC85  F024         	call	i2_updateServoPosition	;wreg free
 18032                           
 18033                           ;sort.c: 573: updateServoPosition(1050, 3);
 18034  0036B6  0E04               	movlw	4
 18035  0036B8  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18036  0036BA  0E1A               	movlw	26
 18037  0036BC  6E01               	movwf	i2updateServoPosition@time_us,c
 18038  0036BE  0E00               	movlw	0
 18039  0036C0  6E04               	movwf	i2updateServoPosition@timer+1,c
 18040  0036C2  0E03               	movlw	3
 18041  0036C4  6E03               	movwf	i2updateServoPosition@timer,c
 18042  0036C6  EC85  F024         	call	i2_updateServoPosition	;wreg free
 18043                           
 18044                           ;sort.c: 574: servo_timer_counter = 0;
 18045  0036CA  0E00               	movlw	0
 18046  0036CC  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 18047  0036CE  0E00               	movlw	0
 18048  0036D0  6E71               	movwf	_servo_timer_counter,c	;volatile
 18049                           
 18050                           ;sort.c: 575: servo_timer_target = 9999;
 18051  0036D2  0E27               	movlw	39
 18052  0036D4  6E74               	movwf	_servo_timer_target+1,c	;volatile
 18053  0036D6  0E0F               	movlw	15
 18054  0036D8  6E73               	movwf	_servo_timer_target,c	;volatile
 18055                           
 18056                           ;sort.c: 577: f_can_distributed = 1;
 18057  0036DA  0E00               	movlw	0
 18058  0036DC  0101               	movlb	1	; () banked
 18059  0036DE  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
 18060  0036E0  0E01               	movlw	1
 18061  0036E2  6F35               	movwf	_f_can_distributed& (0+255),b
 18062                           
 18063                           ; BSR set to: 1
 18064                           ;sort.c: 578: if(f_lastCan == 1){
 18065  0036E4  0100               	movlb	0	; () banked
 18066  0036E6  05EE               	decf	_f_lastCan& (0+255),w,b
 18067  0036E8  0100               	movlb	0	; () banked
 18068  0036EA  11EF               	iorwf	(_f_lastCan+1)& (0+255),w,b
 18069  0036EC  A4D8               	btfss	status,2,c
 18070  0036EE  0012               	return	
 18071                           
 18072                           ; BSR set to: 0
 18073                           ;sort.c: 579: machine_state = DoneSorting_state;
 18074  0036F0  0E02               	movlw	2
 18075  0036F2  0100               	movlb	0	; () banked
 18076  0036F4  6FFC               	movwf	_machine_state& (0+255),b
 18077                           
 18078                           ; BSR set to: 0
 18079                           ;sort.c: 585: }
 18080                           
 18081                           ; BSR set to: 0
 18082                           ;sort.c: 584: break;
 18083                           
 18084                           ;sort.c: 583: default:
 18085                           
 18086                           ; BSR set to: 0
 18087                           ;sort.c: 580: }
 18088                           ;sort.c: 581: break;
 18089  0036F6  0012               	return	
 18090  0036F8                     i2l9374:
 18091  0036F8  C075  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 18092  0036FC  C076  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 18093                           
 18094                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 18095                           ; Switch size 1, requested type "space"
 18096                           ; Number of cases is 2, Range of values is 4 to 5
 18097                           ; switch strategies available:
 18098                           ; Name         Instructions Cycles
 18099                           ; simple_byte            7     4 (average)
 18100                           ;	Chosen strategy is simple_byte
 18101  003700  500A               	movf	??_updateServoStates+1,w,c
 18102  003702  0A04               	xorlw	4	; case 4
 18103  003704  B4D8               	btfsc	status,2,c
 18104  003706  D004               	goto	i2l9964
 18105  003708  0A01               	xorlw	1	; case 5
 18106  00370A  A4D8               	btfss	status,2,c
 18107  00370C  0012               	return	
 18108  00370E  D008               	goto	i2l9966
 18109  003710                     i2l9964:
 18110                           
 18111                           ; Switch size 1, requested type "space"
 18112                           ; Number of cases is 2, Range of values is 26 to 236
 18113                           ; switch strategies available:
 18114                           ; Name         Instructions Cycles
 18115                           ; simple_byte            7     4 (average)
 18116                           ;	Chosen strategy is simple_byte
 18117  003710  5009               	movf	??_updateServoStates,w,c
 18118  003712  0A1A               	xorlw	26	; case 26
 18119  003714  B4D8               	btfsc	status,2,c
 18120  003716  D7C5               	goto	i2l9360
 18121  003718  0AF6               	xorlw	246	; case 236
 18122  00371A  A4D8               	btfss	status,2,c
 18123  00371C  0012               	return	
 18124  00371E  D79B               	goto	i2l9348
 18125  003720                     i2l9966:
 18126                           
 18127                           ; Switch size 1, requested type "space"
 18128                           ; Number of cases is 1, Range of values is 110 to 110
 18129                           ; switch strategies available:
 18130                           ; Name         Instructions Cycles
 18131                           ; simple_byte            4     3 (average)
 18132                           ;	Chosen strategy is simple_byte
 18133  003720  5009               	movf	??_updateServoStates,w,c
 18134  003722  0A6E               	xorlw	110	; case 110
 18135  003724  A4D8               	btfss	status,2,c
 18136  003726  0012               	return	
 18137  003728  D7A9               	goto	i2l9354
 18138  00372A                     __end_of_updateServoStates:
 18139                           	opt stack 0
 18140                           pclatu	equ	0xFFB
 18141                           pclath	equ	0xFFA
 18142                           tblptru	equ	0xFF8
 18143                           tblptrh	equ	0xFF7
 18144                           tblptrl	equ	0xFF6
 18145                           tablat	equ	0xFF5
 18146                           prodh	equ	0xFF4
 18147                           prodl	equ	0xFF3
 18148                           intcon	equ	0xFF2
 18149                           intcon2	equ	0xFF1
 18150                           intcon3	equ	0xFF0
 18151                           indf0	equ	0xFEF
 18152                           postinc0	equ	0xFEE
 18153                           fsr0h	equ	0xFEA
 18154                           fsr0l	equ	0xFE9
 18155                           wreg	equ	0xFE8
 18156                           postdec1	equ	0xFE5
 18157                           fsr1h	equ	0xFE2
 18158                           fsr1l	equ	0xFE1
 18159                           indf2	equ	0xFDF
 18160                           postinc2	equ	0xFDE
 18161                           postdec2	equ	0xFDD
 18162                           fsr2h	equ	0xFDA
 18163                           fsr2l	equ	0xFD9
 18164                           status	equ	0xFD8
 18165                           
 18166 ;; *************** function i2_updateServoPosition *****************
 18167 ;; Defined at:
 18168 ;;		line 505 in file "sort.c"
 18169 ;; Parameters:    Size  Location     Type
 18170 ;;  time_us         2    0[COMRAM] int 
 18171 ;;  timer           2    2[COMRAM] int 
 18172 ;; Auto vars:     Size  Location     Type
 18173 ;;  updateServoP    2    6[COMRAM] unsigned int 
 18174 ;; Return value:  Size  Location     Type
 18175 ;;                  1    wreg      void 
 18176 ;; Registers used:
 18177 ;;		wreg, status,2, status,0
 18178 ;; Tracked objects:
 18179 ;;		On entry : 0/0
 18180 ;;		On exit  : 0/0
 18181 ;;		Unchanged: 0/0
 18182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18183 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18184 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18185 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18186 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18187 ;;Total ram usage:        8 bytes
 18188 ;; Hardware stack levels used:    1
 18189 ;; This function calls:
 18190 ;;		Nothing
 18191 ;; This function is called by:
 18192 ;;		_updateServoStates
 18193 ;; This function uses a non-reentrant model
 18194 ;;
 18195                           
 18196                           	psect	text61
 18197  00490A                     __ptext61:
 18198                           	opt stack 0
 18199  00490A                     i2_updateServoPosition:
 18200                           	opt stack 22
 18201                           
 18202                           ;sort.c: 506: unsigned int my_time = 65535 - time_us;
 18203                           
 18204                           ;incstack = 0
 18205  00490A  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 18206  00490E  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 18207  004912  1E05               	comf	??i2_updateServoPosition,f,c
 18208  004914  1E06               	comf	??i2_updateServoPosition+1,f,c
 18209  004916  4A05               	infsnz	??i2_updateServoPosition,f,c
 18210  004918  2A06               	incf	??i2_updateServoPosition+1,f,c
 18211  00491A  0EFF               	movlw	255
 18212  00491C  2405               	addwf	??i2_updateServoPosition,w,c
 18213  00491E  6E07               	movwf	i2updateServoPosition@my_time,c
 18214  004920  0EFF               	movlw	255
 18215  004922  2006               	addwfc	??i2_updateServoPosition+1,w,c
 18216  004924  6E08               	movwf	i2updateServoPosition@my_time+1,c
 18217                           
 18218                           ;sort.c: 507: switch(timer){
 18219  004926  D019               	goto	i2l8528
 18220  004928                     i2l8522:
 18221                           
 18222                           ;sort.c: 509: servoTimes[0] = my_time >> 8;
 18223  004928  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18224  00492A  0100               	movlb	0	; () banked
 18225  00492C  6FDA               	movwf	_servoTimes& (0+255),b
 18226  00492E  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 18227                           
 18228                           ;sort.c: 510: servoTimes[1] = my_time & 0xFF;
 18229  004930  5007               	movf	i2updateServoPosition@my_time,w,c
 18230  004932  0100               	movlb	0	; () banked
 18231  004934  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 18232  004936  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 18233                           
 18234                           ; BSR set to: 0
 18235                           ;sort.c: 512: pan_servo_state = time_us;
 18236  004938  C001  F06F         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 18237  00493C  C002  F070         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 18238  004940                     i2l876:
 18239                           
 18240                           ;sort.c: 514: servoTimes[2] = my_time >> 8;
 18241  004940  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18242  004942  0100               	movlb	0	; () banked
 18243  004944  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 18244  004946  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 18245                           
 18246                           ;sort.c: 515: servoTimes[3] = my_time & 0xFF;
 18247  004948  5007               	movf	i2updateServoPosition@my_time,w,c
 18248  00494A  0100               	movlb	0	; () banked
 18249  00494C  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 18250  00494E  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 18251                           
 18252                           ; BSR set to: 0
 18253                           ;sort.c: 517: tilt_servo_state = time_us;
 18254  004950  C001  F075         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 18255  004954  C002  F076         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 18256                           
 18257                           ;sort.c: 518: }
 18258  004958  0012               	return	
 18259  00495A                     i2l8528:
 18260  00495A  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 18261  00495E  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 18262                           
 18263                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18264                           ; Switch size 1, requested type "space"
 18265                           ; Number of cases is 1, Range of values is 0 to 0
 18266                           ; switch strategies available:
 18267                           ; Name         Instructions Cycles
 18268                           ; simple_byte            4     3 (average)
 18269                           ;	Chosen strategy is simple_byte
 18270  004962  5006               	movf	??i2_updateServoPosition+1,w,c
 18271  004964  0A00               	xorlw	0	; case 0
 18272  004966  A4D8               	btfss	status,2,c
 18273  004968  0012               	return	
 18274                           
 18275                           ; Switch size 1, requested type "space"
 18276                           ; Number of cases is 2, Range of values is 1 to 3
 18277                           ; switch strategies available:
 18278                           ; Name         Instructions Cycles
 18279                           ; simple_byte            7     4 (average)
 18280                           ;	Chosen strategy is simple_byte
 18281  00496A  5005               	movf	??i2_updateServoPosition,w,c
 18282  00496C  0A01               	xorlw	1	; case 1
 18283  00496E  B4D8               	btfsc	status,2,c
 18284  004970  D7DB               	goto	i2l8522
 18285  004972  0A02               	xorlw	2	; case 3
 18286  004974  A4D8               	btfss	status,2,c
 18287  004976  0012               	return	
 18288  004978  D7E3               	goto	i2l876
 18289  00497A                     __end_ofi2_updateServoPosition:
 18290                           	opt stack 0
 18291                           pclatu	equ	0xFFB
 18292                           pclath	equ	0xFFA
 18293                           tblptru	equ	0xFF8
 18294                           tblptrh	equ	0xFF7
 18295                           tblptrl	equ	0xFF6
 18296                           tablat	equ	0xFF5
 18297                           prodh	equ	0xFF4
 18298                           prodl	equ	0xFF3
 18299                           intcon	equ	0xFF2
 18300                           intcon2	equ	0xFF1
 18301                           intcon3	equ	0xFF0
 18302                           indf0	equ	0xFEF
 18303                           postinc0	equ	0xFEE
 18304                           fsr0h	equ	0xFEA
 18305                           fsr0l	equ	0xFE9
 18306                           wreg	equ	0xFE8
 18307                           postdec1	equ	0xFE5
 18308                           fsr1h	equ	0xFE2
 18309                           fsr1l	equ	0xFE1
 18310                           indf2	equ	0xFDF
 18311                           postinc2	equ	0xFDE
 18312                           postdec2	equ	0xFDD
 18313                           fsr2h	equ	0xFDA
 18314                           fsr2l	equ	0xFD9
 18315                           status	equ	0xFD8
 18316                           
 18317 ;; *************** function _updateMenu *****************
 18318 ;; Defined at:
 18319 ;;		line 216 in file "UI.c"
 18320 ;; Parameters:    Size  Location     Type
 18321 ;;		None
 18322 ;; Auto vars:     Size  Location     Type
 18323 ;;		None
 18324 ;; Return value:  Size  Location     Type
 18325 ;;                  1    wreg      void 
 18326 ;; Registers used:
 18327 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18328 ;; Tracked objects:
 18329 ;;		On entry : 0/0
 18330 ;;		On exit  : 0/0
 18331 ;;		Unchanged: 0/0
 18332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18335 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18336 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18337 ;;Total ram usage:        2 bytes
 18338 ;; Hardware stack levels used:    1
 18339 ;; Hardware stack levels required when called:    5
 18340 ;; This function calls:
 18341 ;;		_change_state_to_logs_11
 18342 ;;		_change_state_to_logs_12
 18343 ;;		_change_state_to_logs_22
 18344 ;;		_change_state_to_logs_23
 18345 ;;		_change_state_to_logs_33
 18346 ;;		_change_state_to_logs_34
 18347 ;;		_change_state_to_menu_11
 18348 ;;		_change_state_to_menu_23
 18349 ;;		_dispLogs
 18350 ;;		_inputHandler
 18351 ;;		i2_change_state_to_menu_12
 18352 ;;		i2_change_state_to_menu_22
 18353 ;;		i2_change_state_to_menu_start
 18354 ;; This function is called by:
 18355 ;;		_handler
 18356 ;; This function uses a non-reentrant model
 18357 ;;
 18358                           
 18359                           	psect	text62
 18360  002728                     __ptext62:
 18361                           	opt stack 0
 18362  002728                     _updateMenu:
 18363                           	opt stack 18
 18364                           
 18365                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 18366                           
 18367                           ;incstack = 0
 18368  002728  0E00               	movlw	0
 18369  00272A  6E78               	movwf	_up+1,c
 18370  00272C  0E00               	movlw	0
 18371  00272E  6E77               	movwf	_up,c
 18372  002730  0E00               	movlw	0
 18373  002732  6E5E               	movwf	_down+1,c
 18374  002734  0E00               	movlw	0
 18375  002736  6E5D               	movwf	_down,c
 18376  002738  0E00               	movlw	0
 18377  00273A  6E60               	movwf	_enter+1,c
 18378  00273C  0E00               	movlw	0
 18379  00273E  6E5F               	movwf	_enter,c
 18380  002740  0E00               	movlw	0
 18381  002742  6E5C               	movwf	_back+1,c
 18382  002744  0E00               	movlw	0
 18383  002746  6E5B               	movwf	_back,c
 18384                           
 18385                           ;UI.c: 218: (INTCONbits.GIE = 0);
 18386  002748  9EF2               	bcf	intcon,7,c	;volatile
 18387                           
 18388                           ;UI.c: 220: if (inputHandler()
 18389                           ;UI.c: 223: ){
 18390  00274A  ECBB  F019         	call	_inputHandler	;wreg free
 18391  00274E  502A               	movf	?_inputHandler,w,c
 18392  002750  102B               	iorwf	?_inputHandler+1,w,c
 18393  002752  A4D8               	btfss	status,2,c
 18394  002754  D112               	goto	i2l9062
 18395  002756  D146               	goto	i2l263
 18396  002758                     i2l8914:
 18397                           
 18398                           ;UI.c: 227: change_state_to_menu_11();
 18399  002758  ECE8  F027         	call	_change_state_to_menu_11	;wreg free
 18400                           
 18401                           ;UI.c: 228: break;
 18402  00275C  D143               	goto	i2l263
 18403  00275E                     i2l8916:
 18404                           
 18405                           ;UI.c: 231: if(up){
 18406  00275E  5077               	movf	_up,w,c
 18407  002760  1078               	iorwf	_up+1,w,c
 18408  002762  B4D8               	btfsc	status,2,c
 18409  002764  D003               	goto	i2l8920
 18410                           
 18411                           ;UI.c: 232: change_state_to_menu_23();
 18412  002766  ECD0  F027         	call	_change_state_to_menu_23	;wreg free
 18413                           
 18414                           ;UI.c: 233: }
 18415  00276A  D13C               	goto	i2l263
 18416  00276C                     i2l8920:
 18417                           
 18418                           ;UI.c: 234: else if(down){
 18419  00276C  505D               	movf	_down,w,c
 18420  00276E  105E               	iorwf	_down+1,w,c
 18421  002770  B4D8               	btfsc	status,2,c
 18422  002772  D003               	goto	i2l8924
 18423                           
 18424                           ;UI.c: 235: change_state_to_menu_12();
 18425  002774  ECB8  F027         	call	i2_change_state_to_menu_12	;wreg free
 18426                           
 18427                           ;UI.c: 236: }
 18428  002778  D135               	goto	i2l263
 18429  00277A                     i2l8924:
 18430                           
 18431                           ;UI.c: 237: else if(enter){
 18432  00277A  505F               	movf	_enter,w,c
 18433  00277C  1060               	iorwf	_enter+1,w,c
 18434  00277E  B4D8               	btfsc	status,2,c
 18435  002780  D131               	goto	i2l263
 18436                           
 18437                           ;UI.c: 238: change_state_to_menu_start();
 18438  002782  ECFB  F028         	call	i2_change_state_to_menu_start	;wreg free
 18439                           
 18440                           ;UI.c: 239: }
 18441                           ;UI.c: 240: break;
 18442  002786  D12E               	goto	i2l263
 18443  002788                     i2l8928:
 18444                           
 18445                           ;UI.c: 243: if(up){
 18446  002788  5077               	movf	_up,w,c
 18447  00278A  1078               	iorwf	_up+1,w,c
 18448  00278C  B4D8               	btfsc	status,2,c
 18449  00278E  D003               	goto	i2l8932
 18450                           
 18451                           ;UI.c: 244: change_state_to_menu_11();
 18452  002790  ECE8  F027         	call	_change_state_to_menu_11	;wreg free
 18453                           
 18454                           ;UI.c: 245: }
 18455  002794  D127               	goto	i2l263
 18456  002796                     i2l8932:
 18457                           
 18458                           ;UI.c: 246: else if(down){
 18459  002796  505D               	movf	_down,w,c
 18460  002798  105E               	iorwf	_down+1,w,c
 18461  00279A  B4D8               	btfsc	status,2,c
 18462  00279C  D011               	goto	i2l8948
 18463                           
 18464                           ;UI.c: 247: change_state_to_menu_23();
 18465  00279E  ECD0  F027         	call	_change_state_to_menu_23	;wreg free
 18466                           
 18467                           ;UI.c: 248: }
 18468  0027A2  D120               	goto	i2l263
 18469  0027A4                     i2l8940:
 18470                           
 18471                           ;UI.c: 255: if(up){
 18472  0027A4  5077               	movf	_up,w,c
 18473  0027A6  1078               	iorwf	_up+1,w,c
 18474  0027A8  B4D8               	btfsc	status,2,c
 18475  0027AA  D003               	goto	i2l8944
 18476                           
 18477                           ;UI.c: 256: change_state_to_menu_11();
 18478  0027AC  ECE8  F027         	call	_change_state_to_menu_11	;wreg free
 18479                           
 18480                           ;UI.c: 257: }
 18481  0027B0  D119               	goto	i2l263
 18482  0027B2                     i2l8944:
 18483                           
 18484                           ;UI.c: 258: else if(down){
 18485  0027B2  505D               	movf	_down,w,c
 18486  0027B4  105E               	iorwf	_down+1,w,c
 18487  0027B6  B4D8               	btfsc	status,2,c
 18488  0027B8  D003               	goto	i2l8948
 18489                           
 18490                           ;UI.c: 259: change_state_to_menu_23();
 18491  0027BA  ECD0  F027         	call	_change_state_to_menu_23	;wreg free
 18492                           
 18493                           ;UI.c: 260: }
 18494  0027BE  D112               	goto	i2l263
 18495  0027C0                     i2l8948:
 18496                           
 18497                           ;UI.c: 261: else if(enter){
 18498  0027C0  505F               	movf	_enter,w,c
 18499  0027C2  1060               	iorwf	_enter+1,w,c
 18500  0027C4  B4D8               	btfsc	status,2,c
 18501  0027C6  D10E               	goto	i2l263
 18502                           
 18503                           ;UI.c: 262: machine_state = Sorting_state;
 18504  0027C8  0E01               	movlw	1
 18505  0027CA  0100               	movlb	0	; () banked
 18506  0027CC  6FFC               	movwf	_machine_state& (0+255),b
 18507                           
 18508                           ; BSR set to: 0
 18509                           ;UI.c: 263: }
 18510                           ;UI.c: 264: break;
 18511                           
 18512                           ; BSR set to: 0
 18513                           
 18514                           ; BSR set to: 0
 18515  0027CE  D10A               	goto	i2l263
 18516  0027D0                     i2l8952:
 18517                           
 18518                           ;UI.c: 267: if(up){
 18519  0027D0  5077               	movf	_up,w,c
 18520  0027D2  1078               	iorwf	_up+1,w,c
 18521  0027D4  B4D8               	btfsc	status,2,c
 18522  0027D6  D003               	goto	i2l8956
 18523                           
 18524                           ;UI.c: 268: change_state_to_menu_22();
 18525  0027D8  ECA0  F027         	call	i2_change_state_to_menu_22	;wreg free
 18526                           
 18527                           ;UI.c: 269: }
 18528  0027DC  D103               	goto	i2l263
 18529  0027DE                     i2l8956:
 18530                           
 18531                           ;UI.c: 270: else if(down){
 18532  0027DE  505D               	movf	_down,w,c
 18533  0027E0  105E               	iorwf	_down+1,w,c
 18534  0027E2  B4D8               	btfsc	status,2,c
 18535  0027E4  D003               	goto	i2l8960
 18536                           
 18537                           ;UI.c: 271: change_state_to_menu_11();
 18538  0027E6  ECE8  F027         	call	_change_state_to_menu_11	;wreg free
 18539                           
 18540                           ;UI.c: 272: }
 18541  0027EA  D0FC               	goto	i2l263
 18542  0027EC                     i2l8960:
 18543                           
 18544                           ;UI.c: 273: else if(enter){
 18545  0027EC  505F               	movf	_enter,w,c
 18546  0027EE  1060               	iorwf	_enter+1,w,c
 18547  0027F0  B4D8               	btfsc	status,2,c
 18548  0027F2  D0F8               	goto	i2l263
 18549                           
 18550                           ;UI.c: 274: change_state_to_logs_11();
 18551  0027F4  EC60  F028         	call	_change_state_to_logs_11	;wreg free
 18552                           
 18553                           ;UI.c: 275: }
 18554                           ;UI.c: 276: break;
 18555  0027F8  D0F5               	goto	i2l263
 18556  0027FA                     i2l8964:
 18557                           
 18558                           ;UI.c: 279: if(up){
 18559  0027FA  5077               	movf	_up,w,c
 18560  0027FC  1078               	iorwf	_up+1,w,c
 18561  0027FE  B4D8               	btfsc	status,2,c
 18562  002800  D003               	goto	i2l8968
 18563                           
 18564                           ;UI.c: 280: change_state_to_logs_34();
 18565  002802  EC00  F028         	call	_change_state_to_logs_34	;wreg free
 18566                           
 18567                           ;UI.c: 281: }
 18568  002806  D0EE               	goto	i2l263
 18569  002808                     i2l8968:
 18570                           
 18571                           ;UI.c: 282: else if(down){
 18572  002808  505D               	movf	_down,w,c
 18573  00280A  105E               	iorwf	_down+1,w,c
 18574  00280C  B4D8               	btfsc	status,2,c
 18575  00280E  D003               	goto	i2l8972
 18576                           
 18577                           ;UI.c: 283: change_state_to_logs_12();
 18578  002810  EC48  F028         	call	_change_state_to_logs_12	;wreg free
 18579                           
 18580                           ;UI.c: 284: }
 18581  002814  D0E7               	goto	i2l263
 18582  002816                     i2l8972:
 18583                           
 18584                           ;UI.c: 285: else if(enter){
 18585  002816  505F               	movf	_enter,w,c
 18586  002818  1060               	iorwf	_enter+1,w,c
 18587  00281A  B4D8               	btfsc	status,2,c
 18588  00281C  D007               	goto	i2l8976
 18589                           
 18590                           ;UI.c: 286: dispLogs(1);
 18591  00281E  0E00               	movlw	0
 18592  002820  6E13               	movwf	dispLogs@myLog+1,c
 18593  002822  0E01               	movlw	1
 18594  002824  6E12               	movwf	dispLogs@myLog,c
 18595  002826  EC35  F029         	call	_dispLogs	;wreg free
 18596                           
 18597                           ;UI.c: 287: }
 18598  00282A  D0DC               	goto	i2l263
 18599  00282C                     i2l8976:
 18600                           
 18601                           ;UI.c: 288: else if(back){
 18602  00282C  505B               	movf	_back,w,c
 18603  00282E  105C               	iorwf	_back+1,w,c
 18604  002830  B4D8               	btfsc	status,2,c
 18605  002832  D0D8               	goto	i2l263
 18606                           
 18607                           ;UI.c: 289: change_state_to_menu_23();
 18608  002834  ECD0  F027         	call	_change_state_to_menu_23	;wreg free
 18609                           
 18610                           ;UI.c: 290: }
 18611                           ;UI.c: 291: break;
 18612  002838  D0D5               	goto	i2l263
 18613  00283A                     i2l8980:
 18614                           
 18615                           ;UI.c: 294: if(up){
 18616  00283A  5077               	movf	_up,w,c
 18617  00283C  1078               	iorwf	_up+1,w,c
 18618  00283E  B4D8               	btfsc	status,2,c
 18619  002840  D003               	goto	i2l8984
 18620                           
 18621                           ;UI.c: 295: change_state_to_logs_11();
 18622  002842  EC60  F028         	call	_change_state_to_logs_11	;wreg free
 18623                           
 18624                           ;UI.c: 296: }
 18625  002846  D0CE               	goto	i2l263
 18626  002848                     i2l8984:
 18627                           
 18628                           ;UI.c: 297: else if(down){
 18629  002848  505D               	movf	_down,w,c
 18630  00284A  105E               	iorwf	_down+1,w,c
 18631  00284C  B4D8               	btfsc	status,2,c
 18632  00284E  D003               	goto	i2l8988
 18633                           
 18634                           ;UI.c: 298: change_state_to_logs_23();
 18635  002850  EC8F  F028         	call	_change_state_to_logs_23	;wreg free
 18636                           
 18637                           ;UI.c: 299: }
 18638  002854  D0C7               	goto	i2l263
 18639  002856                     i2l8988:
 18640                           
 18641                           ;UI.c: 300: else if(enter){
 18642  002856  505F               	movf	_enter,w,c
 18643  002858  1060               	iorwf	_enter+1,w,c
 18644  00285A  B4D8               	btfsc	status,2,c
 18645  00285C  D007               	goto	i2l8992
 18646                           
 18647                           ;UI.c: 301: dispLogs(2);
 18648  00285E  0E00               	movlw	0
 18649  002860  6E13               	movwf	dispLogs@myLog+1,c
 18650  002862  0E02               	movlw	2
 18651  002864  6E12               	movwf	dispLogs@myLog,c
 18652  002866  EC35  F029         	call	_dispLogs	;wreg free
 18653                           
 18654                           ;UI.c: 302: }
 18655  00286A  D0BC               	goto	i2l263
 18656  00286C                     i2l8992:
 18657                           
 18658                           ;UI.c: 303: else if(back){
 18659  00286C  505B               	movf	_back,w,c
 18660  00286E  105C               	iorwf	_back+1,w,c
 18661  002870  B4D8               	btfsc	status,2,c
 18662  002872  D0B8               	goto	i2l263
 18663                           
 18664                           ;UI.c: 304: change_state_to_menu_23();
 18665  002874  ECD0  F027         	call	_change_state_to_menu_23	;wreg free
 18666                           
 18667                           ;UI.c: 305: }
 18668                           ;UI.c: 306: break;
 18669  002878  D0B5               	goto	i2l263
 18670  00287A                     i2l8996:
 18671                           
 18672                           ;UI.c: 309: if(up){
 18673  00287A  5077               	movf	_up,w,c
 18674  00287C  1078               	iorwf	_up+1,w,c
 18675  00287E  B4D8               	btfsc	status,2,c
 18676  002880  D003               	goto	i2l9000
 18677                           
 18678                           ;UI.c: 310: change_state_to_logs_11();
 18679  002882  EC60  F028         	call	_change_state_to_logs_11	;wreg free
 18680                           
 18681                           ;UI.c: 311: }
 18682  002886  D0AE               	goto	i2l263
 18683  002888                     i2l9000:
 18684                           
 18685                           ;UI.c: 312: else if(down){
 18686  002888  505D               	movf	_down,w,c
 18687  00288A  105E               	iorwf	_down+1,w,c
 18688  00288C  B4D8               	btfsc	status,2,c
 18689  00288E  D003               	goto	i2l9004
 18690                           
 18691                           ;UI.c: 313: change_state_to_logs_23();
 18692  002890  EC8F  F028         	call	_change_state_to_logs_23	;wreg free
 18693                           
 18694                           ;UI.c: 314: }
 18695  002894  D0A7               	goto	i2l263
 18696  002896                     i2l9004:
 18697                           
 18698                           ;UI.c: 315: else if(enter){
 18699  002896  505F               	movf	_enter,w,c
 18700  002898  1060               	iorwf	_enter+1,w,c
 18701  00289A  B4D8               	btfsc	status,2,c
 18702  00289C  D007               	goto	i2l9008
 18703                           
 18704                           ;UI.c: 316: dispLogs(2);
 18705  00289E  0E00               	movlw	0
 18706  0028A0  6E13               	movwf	dispLogs@myLog+1,c
 18707  0028A2  0E02               	movlw	2
 18708  0028A4  6E12               	movwf	dispLogs@myLog,c
 18709  0028A6  EC35  F029         	call	_dispLogs	;wreg free
 18710                           
 18711                           ;UI.c: 317: }
 18712  0028AA  D09C               	goto	i2l263
 18713  0028AC                     i2l9008:
 18714                           
 18715                           ;UI.c: 318: else if(back){
 18716  0028AC  505B               	movf	_back,w,c
 18717  0028AE  105C               	iorwf	_back+1,w,c
 18718  0028B0  B4D8               	btfsc	status,2,c
 18719  0028B2  D098               	goto	i2l263
 18720                           
 18721                           ;UI.c: 319: change_state_to_menu_23();
 18722  0028B4  ECD0  F027         	call	_change_state_to_menu_23	;wreg free
 18723                           
 18724                           ;UI.c: 320: }
 18725                           ;UI.c: 321: break;
 18726  0028B8  D095               	goto	i2l263
 18727  0028BA                     i2l9012:
 18728                           
 18729                           ;UI.c: 324: if(up){
 18730  0028BA  5077               	movf	_up,w,c
 18731  0028BC  1078               	iorwf	_up+1,w,c
 18732  0028BE  B4D8               	btfsc	status,2,c
 18733  0028C0  D003               	goto	i2l9016
 18734                           
 18735                           ;UI.c: 325: change_state_to_logs_22();
 18736  0028C2  EC30  F028         	call	_change_state_to_logs_22	;wreg free
 18737                           
 18738                           ;UI.c: 326: }
 18739  0028C6  D08E               	goto	i2l263
 18740  0028C8                     i2l9016:
 18741                           
 18742                           ;UI.c: 327: else if(down){
 18743  0028C8  505D               	movf	_down,w,c
 18744  0028CA  105E               	iorwf	_down+1,w,c
 18745  0028CC  B4D8               	btfsc	status,2,c
 18746  0028CE  D003               	goto	i2l9020
 18747                           
 18748                           ;UI.c: 328: change_state_to_logs_34();
 18749  0028D0  EC00  F028         	call	_change_state_to_logs_34	;wreg free
 18750                           
 18751                           ;UI.c: 329: }
 18752  0028D4  D087               	goto	i2l263
 18753  0028D6                     i2l9020:
 18754                           
 18755                           ;UI.c: 330: else if(enter){
 18756  0028D6  505F               	movf	_enter,w,c
 18757  0028D8  1060               	iorwf	_enter+1,w,c
 18758  0028DA  B4D8               	btfsc	status,2,c
 18759  0028DC  D007               	goto	i2l9024
 18760                           
 18761                           ;UI.c: 331: dispLogs(3);
 18762  0028DE  0E00               	movlw	0
 18763  0028E0  6E13               	movwf	dispLogs@myLog+1,c
 18764  0028E2  0E03               	movlw	3
 18765  0028E4  6E12               	movwf	dispLogs@myLog,c
 18766  0028E6  EC35  F029         	call	_dispLogs	;wreg free
 18767                           
 18768                           ;UI.c: 332: }
 18769  0028EA  D07C               	goto	i2l263
 18770  0028EC                     i2l9024:
 18771                           
 18772                           ;UI.c: 333: else if(back){
 18773  0028EC  505B               	movf	_back,w,c
 18774  0028EE  105C               	iorwf	_back+1,w,c
 18775  0028F0  B4D8               	btfsc	status,2,c
 18776  0028F2  D078               	goto	i2l263
 18777                           
 18778                           ;UI.c: 334: change_state_to_menu_23();
 18779  0028F4  ECD0  F027         	call	_change_state_to_menu_23	;wreg free
 18780                           
 18781                           ;UI.c: 335: }
 18782                           ;UI.c: 336: break;
 18783  0028F8  D075               	goto	i2l263
 18784  0028FA                     i2l9028:
 18785                           
 18786                           ;UI.c: 339: if(up){
 18787  0028FA  5077               	movf	_up,w,c
 18788  0028FC  1078               	iorwf	_up+1,w,c
 18789  0028FE  B4D8               	btfsc	status,2,c
 18790  002900  D003               	goto	i2l9032
 18791                           
 18792                           ;UI.c: 340: change_state_to_logs_22();
 18793  002902  EC30  F028         	call	_change_state_to_logs_22	;wreg free
 18794                           
 18795                           ;UI.c: 341: }
 18796  002906  D06E               	goto	i2l263
 18797  002908                     i2l9032:
 18798                           
 18799                           ;UI.c: 342: else if(down){
 18800  002908  505D               	movf	_down,w,c
 18801  00290A  105E               	iorwf	_down+1,w,c
 18802  00290C  B4D8               	btfsc	status,2,c
 18803  00290E  D003               	goto	i2l9036
 18804                           
 18805                           ;UI.c: 343: change_state_to_logs_34();
 18806  002910  EC00  F028         	call	_change_state_to_logs_34	;wreg free
 18807                           
 18808                           ;UI.c: 344: }
 18809  002914  D067               	goto	i2l263
 18810  002916                     i2l9036:
 18811                           
 18812                           ;UI.c: 345: else if(enter){
 18813  002916  505F               	movf	_enter,w,c
 18814  002918  1060               	iorwf	_enter+1,w,c
 18815  00291A  B4D8               	btfsc	status,2,c
 18816  00291C  D007               	goto	i2l9040
 18817                           
 18818                           ;UI.c: 346: dispLogs(3);
 18819  00291E  0E00               	movlw	0
 18820  002920  6E13               	movwf	dispLogs@myLog+1,c
 18821  002922  0E03               	movlw	3
 18822  002924  6E12               	movwf	dispLogs@myLog,c
 18823  002926  EC35  F029         	call	_dispLogs	;wreg free
 18824                           
 18825                           ;UI.c: 347: }
 18826  00292A  D05C               	goto	i2l263
 18827  00292C                     i2l9040:
 18828                           
 18829                           ;UI.c: 348: else if(back){
 18830  00292C  505B               	movf	_back,w,c
 18831  00292E  105C               	iorwf	_back+1,w,c
 18832  002930  B4D8               	btfsc	status,2,c
 18833  002932  D058               	goto	i2l263
 18834                           
 18835                           ;UI.c: 349: change_state_to_menu_23();
 18836  002934  ECD0  F027         	call	_change_state_to_menu_23	;wreg free
 18837                           
 18838                           ;UI.c: 350: }
 18839                           ;UI.c: 351: break;
 18840  002938  D055               	goto	i2l263
 18841  00293A                     i2l9044:
 18842                           
 18843                           ;UI.c: 354: if(up){
 18844  00293A  5077               	movf	_up,w,c
 18845  00293C  1078               	iorwf	_up+1,w,c
 18846  00293E  B4D8               	btfsc	status,2,c
 18847  002940  D003               	goto	i2l9048
 18848                           
 18849                           ;UI.c: 355: change_state_to_logs_33();
 18850  002942  EC18  F028         	call	_change_state_to_logs_33	;wreg free
 18851                           
 18852                           ;UI.c: 356: }
 18853  002946  D04E               	goto	i2l263
 18854  002948                     i2l9048:
 18855                           
 18856                           ;UI.c: 357: else if(down){
 18857  002948  505D               	movf	_down,w,c
 18858  00294A  105E               	iorwf	_down+1,w,c
 18859  00294C  B4D8               	btfsc	status,2,c
 18860  00294E  D003               	goto	i2l9052
 18861                           
 18862                           ;UI.c: 358: change_state_to_logs_11();
 18863  002950  EC60  F028         	call	_change_state_to_logs_11	;wreg free
 18864                           
 18865                           ;UI.c: 359: }
 18866  002954  D047               	goto	i2l263
 18867  002956                     i2l9052:
 18868                           
 18869                           ;UI.c: 360: else if(enter){
 18870  002956  505F               	movf	_enter,w,c
 18871  002958  1060               	iorwf	_enter+1,w,c
 18872  00295A  B4D8               	btfsc	status,2,c
 18873  00295C  D007               	goto	i2l9056
 18874                           
 18875                           ;UI.c: 361: dispLogs(4);
 18876  00295E  0E00               	movlw	0
 18877  002960  6E13               	movwf	dispLogs@myLog+1,c
 18878  002962  0E04               	movlw	4
 18879  002964  6E12               	movwf	dispLogs@myLog,c
 18880  002966  EC35  F029         	call	_dispLogs	;wreg free
 18881                           
 18882                           ;UI.c: 362: }
 18883  00296A  D03C               	goto	i2l263
 18884  00296C                     i2l9056:
 18885                           
 18886                           ;UI.c: 363: else if(back){
 18887  00296C  505B               	movf	_back,w,c
 18888  00296E  105C               	iorwf	_back+1,w,c
 18889  002970  B4D8               	btfsc	status,2,c
 18890  002972  D038               	goto	i2l263
 18891                           
 18892                           ;UI.c: 364: change_state_to_menu_23();
 18893  002974  ECD0  F027         	call	_change_state_to_menu_23	;wreg free
 18894                           
 18895                           ;UI.c: 370: }
 18896                           
 18897                           ;UI.c: 369: break;
 18898                           
 18899                           ;UI.c: 368: default:
 18900                           
 18901                           ;UI.c: 365: }
 18902                           ;UI.c: 366: break;
 18903  002978  D035               	goto	i2l263
 18904  00297A                     i2l9062:
 18905  00297A  C0EC  F043         	movff	_cur_state,??_updateMenu
 18906  00297E  C0ED  F044         	movff	_cur_state+1,??_updateMenu+1
 18907                           
 18908                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 18909                           ; Switch size 1, requested type "space"
 18910                           ; Number of cases is 3, Range of values is 0 to 4
 18911                           ; switch strategies available:
 18912                           ; Name         Instructions Cycles
 18913                           ; simple_byte           10     6 (average)
 18914                           ;	Chosen strategy is simple_byte
 18915  002982  5044               	movf	??_updateMenu+1,w,c
 18916  002984  0A00               	xorlw	0	; case 0
 18917  002986  B4D8               	btfsc	status,2,c
 18918  002988  D007               	goto	i2l9970
 18919  00298A  0A03               	xorlw	3	; case 3
 18920  00298C  B4D8               	btfsc	status,2,c
 18921  00298E  D015               	goto	i2l9972
 18922  002990  0A07               	xorlw	7	; case 4
 18923  002992  B4D8               	btfsc	status,2,c
 18924  002994  D020               	goto	i2l9974
 18925  002996  D026               	goto	i2l263
 18926  002998                     i2l9970:
 18927                           
 18928                           ; Switch size 1, requested type "space"
 18929                           ; Number of cases is 5, Range of values is 0 to 23
 18930                           ; switch strategies available:
 18931                           ; Name         Instructions Cycles
 18932                           ; simple_byte           16     9 (average)
 18933                           ;	Chosen strategy is simple_byte
 18934  002998  5043               	movf	??_updateMenu,w,c
 18935  00299A  0A00               	xorlw	0	; case 0
 18936  00299C  B4D8               	btfsc	status,2,c
 18937  00299E  D6DC               	goto	i2l8914
 18938  0029A0  0A0B               	xorlw	11	; case 11
 18939  0029A2  B4D8               	btfsc	status,2,c
 18940  0029A4  D6DC               	goto	i2l8916
 18941  0029A6  0A07               	xorlw	7	; case 12
 18942  0029A8  B4D8               	btfsc	status,2,c
 18943  0029AA  D6EE               	goto	i2l8928
 18944  0029AC  0A1A               	xorlw	26	; case 22
 18945  0029AE  B4D8               	btfsc	status,2,c
 18946  0029B0  D6F9               	goto	i2l8940
 18947  0029B2  0A01               	xorlw	1	; case 23
 18948  0029B4  B4D8               	btfsc	status,2,c
 18949  0029B6  D70C               	goto	i2l8952
 18950  0029B8  D015               	goto	i2l263
 18951  0029BA                     i2l9972:
 18952                           
 18953                           ; Switch size 1, requested type "space"
 18954                           ; Number of cases is 4, Range of values is 243 to 255
 18955                           ; switch strategies available:
 18956                           ; Name         Instructions Cycles
 18957                           ; simple_byte           13     7 (average)
 18958                           ;	Chosen strategy is simple_byte
 18959  0029BA  5043               	movf	??_updateMenu,w,c
 18960  0029BC  0AF3               	xorlw	243	; case 243
 18961  0029BE  B4D8               	btfsc	status,2,c
 18962  0029C0  D71C               	goto	i2l8964
 18963  0029C2  0A07               	xorlw	7	; case 244
 18964  0029C4  B4D8               	btfsc	status,2,c
 18965  0029C6  D739               	goto	i2l8980
 18966  0029C8  0A0A               	xorlw	10	; case 254
 18967  0029CA  B4D8               	btfsc	status,2,c
 18968  0029CC  D756               	goto	i2l8996
 18969  0029CE  0A01               	xorlw	1	; case 255
 18970  0029D0  B4D8               	btfsc	status,2,c
 18971  0029D2  D773               	goto	i2l9012
 18972  0029D4  D007               	goto	i2l263
 18973  0029D6                     i2l9974:
 18974                           
 18975                           ; Switch size 1, requested type "space"
 18976                           ; Number of cases is 2, Range of values is 9 to 10
 18977                           ; switch strategies available:
 18978                           ; Name         Instructions Cycles
 18979                           ; simple_byte            7     4 (average)
 18980                           ;	Chosen strategy is simple_byte
 18981  0029D6  5043               	movf	??_updateMenu,w,c
 18982  0029D8  0A09               	xorlw	9	; case 9
 18983  0029DA  B4D8               	btfsc	status,2,c
 18984  0029DC  D78E               	goto	i2l9028
 18985  0029DE  0A03               	xorlw	3	; case 10
 18986  0029E0  B4D8               	btfsc	status,2,c
 18987  0029E2  D7AB               	goto	i2l9044
 18988  0029E4                     i2l263:
 18989                           
 18990                           ;UI.c: 371: }
 18991                           ;UI.c: 372: (INTCONbits.GIE = 1);
 18992  0029E4  8EF2               	bsf	intcon,7,c	;volatile
 18993  0029E6  0012               	return		;funcret
 18994  0029E8                     __end_of_updateMenu:
 18995                           	opt stack 0
 18996                           pclatu	equ	0xFFB
 18997                           pclath	equ	0xFFA
 18998                           tblptru	equ	0xFF8
 18999                           tblptrh	equ	0xFF7
 19000                           tblptrl	equ	0xFF6
 19001                           tablat	equ	0xFF5
 19002                           prodh	equ	0xFF4
 19003                           prodl	equ	0xFF3
 19004                           intcon	equ	0xFF2
 19005                           intcon2	equ	0xFF1
 19006                           intcon3	equ	0xFF0
 19007                           indf0	equ	0xFEF
 19008                           postinc0	equ	0xFEE
 19009                           fsr0h	equ	0xFEA
 19010                           fsr0l	equ	0xFE9
 19011                           wreg	equ	0xFE8
 19012                           postdec1	equ	0xFE5
 19013                           fsr1h	equ	0xFE2
 19014                           fsr1l	equ	0xFE1
 19015                           indf2	equ	0xFDF
 19016                           postinc2	equ	0xFDE
 19017                           postdec2	equ	0xFDD
 19018                           fsr2h	equ	0xFDA
 19019                           fsr2l	equ	0xFD9
 19020                           status	equ	0xFD8
 19021                           
 19022 ;; *************** function i2_change_state_to_menu_start *****************
 19023 ;; Defined at:
 19024 ;;		line 477 in file "UI.c"
 19025 ;; Parameters:    Size  Location     Type
 19026 ;;		None
 19027 ;; Auto vars:     Size  Location     Type
 19028 ;;		None
 19029 ;; Return value:  Size  Location     Type
 19030 ;;                  1    wreg      void 
 19031 ;; Registers used:
 19032 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19033 ;; Tracked objects:
 19034 ;;		On entry : 0/0
 19035 ;;		On exit  : 0/0
 19036 ;;		Unchanged: 0/0
 19037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19042 ;;Total ram usage:        0 bytes
 19043 ;; Hardware stack levels used:    1
 19044 ;; Hardware stack levels required when called:    4
 19045 ;; This function calls:
 19046 ;;		i2_lcdInst
 19047 ;;		i2_printRTC
 19048 ;;		i2_printf
 19049 ;; This function is called by:
 19050 ;;		_updateMenu
 19051 ;;		_handler
 19052 ;; This function uses a non-reentrant model
 19053 ;;
 19054                           
 19055                           	psect	text63
 19056  0051F6                     __ptext63:
 19057                           	opt stack 0
 19058  0051F6                     i2_change_state_to_menu_start:
 19059                           	opt stack 19
 19060                           
 19061                           ;UI.c: 478: cur_state = 0;
 19062                           
 19063                           ;incstack = 0
 19064  0051F6  0E00               	movlw	0
 19065  0051F8  0100               	movlb	0	; () banked
 19066  0051FA  6FED               	movwf	(_cur_state+1)& (0+255),b
 19067  0051FC  0E00               	movlw	0
 19068  0051FE  6FEC               	movwf	_cur_state& (0+255),b
 19069                           
 19070                           ; BSR set to: 0
 19071                           ;UI.c: 480: lcdInst(0b10000000);;
 19072  005200  0E80               	movlw	128
 19073  005202  ECD3  F029         	call	i2_lcdInst
 19074                           
 19075                           ;UI.c: 481: printRTC();
 19076  005206  ECA0  F018         	call	i2_printRTC	;wreg free
 19077                           
 19078                           ;UI.c: 482: lcdInst(0b11000000);;
 19079  00520A  0EC0               	movlw	192
 19080  00520C  ECD3  F029         	call	i2_lcdInst
 19081                           
 19082                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 19083  005210  0EF7               	movlw	low STR_30
 19084  005212  6E0D               	movwf	i2printf@f,c
 19085  005214  0EFD               	movlw	high STR_30
 19086  005216  6E0E               	movwf	i2printf@f+1,c
 19087  005218  ECF9  F00E         	call	i2_printf	;wreg free
 19088  00521C  0012               	return		;funcret
 19089  00521E                     __end_ofi2_change_state_to_menu_start:
 19090                           	opt stack 0
 19091                           pclatu	equ	0xFFB
 19092                           pclath	equ	0xFFA
 19093                           tblptru	equ	0xFF8
 19094                           tblptrh	equ	0xFF7
 19095                           tblptrl	equ	0xFF6
 19096                           tablat	equ	0xFF5
 19097                           prodh	equ	0xFF4
 19098                           prodl	equ	0xFF3
 19099                           intcon	equ	0xFF2
 19100                           intcon2	equ	0xFF1
 19101                           intcon3	equ	0xFF0
 19102                           indf0	equ	0xFEF
 19103                           postinc0	equ	0xFEE
 19104                           fsr0h	equ	0xFEA
 19105                           fsr0l	equ	0xFE9
 19106                           wreg	equ	0xFE8
 19107                           postdec1	equ	0xFE5
 19108                           fsr1h	equ	0xFE2
 19109                           fsr1l	equ	0xFE1
 19110                           indf2	equ	0xFDF
 19111                           postinc2	equ	0xFDE
 19112                           postdec2	equ	0xFDD
 19113                           fsr2h	equ	0xFDA
 19114                           fsr2l	equ	0xFD9
 19115                           status	equ	0xFD8
 19116                           
 19117 ;; *************** function i2_printRTC *****************
 19118 ;; Defined at:
 19119 ;;		line 63 in file "RTC.c"
 19120 ;; Parameters:    Size  Location     Type
 19121 ;;		None
 19122 ;; Auto vars:     Size  Location     Type
 19123 ;;  printRTC       14   44[COMRAM] int [7]
 19124 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 19125 ;;  printRTC        2   64[COMRAM] int 
 19126 ;;  printRTC        2   58[COMRAM] int 
 19127 ;; Return value:  Size  Location     Type
 19128 ;;                  1    wreg      void 
 19129 ;; Registers used:
 19130 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19131 ;; Tracked objects:
 19132 ;;		On entry : 0/0
 19133 ;;		On exit  : 0/0
 19134 ;;		Unchanged: 0/0
 19135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19137 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19138 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19139 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19140 ;;Total ram usage:       25 bytes
 19141 ;; Hardware stack levels used:    1
 19142 ;; Hardware stack levels required when called:    3
 19143 ;; This function calls:
 19144 ;;		i2_getRTC
 19145 ;;		i2_lcdInst
 19146 ;;		i2_printf
 19147 ;;		i2_strcpy
 19148 ;; This function is called by:
 19149 ;;		i2_change_state_to_menu_start
 19150 ;; This function uses a non-reentrant model
 19151 ;;
 19152                           
 19153                           	psect	text64
 19154  003140                     __ptext64:
 19155                           	opt stack 0
 19156  003140                     i2_printRTC:
 19157                           	opt stack 19
 19158                           
 19159                           ;RTC.c: 64: getRTC();
 19160                           
 19161                           ;incstack = 0
 19162  003140  EC4C  F024         	call	i2_getRTC	;wreg free
 19163                           
 19164                           ;RTC.c: 65: char month[] = "MMM";
 19165  003144  C145  F03D         	movff	printRTC@F3226,i2printRTC@month
 19166  003148  C146  F03E         	movff	printRTC@F3226+1,i2printRTC@month+1
 19167  00314C  C147  F03F         	movff	printRTC@F3226+2,i2printRTC@month+2
 19168  003150  C148  F040         	movff	printRTC@F3226+3,i2printRTC@month+3
 19169                           
 19170                           ;RTC.c: 66: int INT_time[7];
 19171                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 19172  003154  0E00               	movlw	0
 19173  003156  6E42               	movwf	i2printRTC@i+1,c
 19174  003158  0E00               	movlw	0
 19175  00315A  6E41               	movwf	i2printRTC@i,c
 19176  00315C  BE42               	btfsc	i2printRTC@i+1,7,c
 19177  00315E  D006               	goto	i2l6976
 19178  003160  5042               	movf	i2printRTC@i+1,w,c
 19179  003162  E135               	bnz	i2l614
 19180  003164  0E07               	movlw	7
 19181  003166  5C41               	subwf	i2printRTC@i,w,c
 19182  003168  B0D8               	btfsc	status,0,c
 19183  00316A  D031               	goto	i2l614
 19184  00316C                     i2l6976:
 19185                           
 19186                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 19187  00316C  0E1C               	movlw	low _time
 19188  00316E  2441               	addwf	i2printRTC@i,w,c
 19189  003170  6ED9               	movwf	fsr2l,c
 19190  003172  0E01               	movlw	high _time
 19191  003174  2042               	addwfc	i2printRTC@i+1,w,c
 19192  003176  6EDA               	movwf	fsr2h,c
 19193  003178  50DF               	movf	indf2,w,c
 19194  00317A  6E2A               	movwf	??i2_printRTC& (0+255),c
 19195  00317C  3A2A               	swapf	??i2_printRTC,f,c
 19196  00317E  0E0F               	movlw	15
 19197  003180  162A               	andwf	??i2_printRTC,f,c
 19198  003182  0E0F               	movlw	15
 19199  003184  162A               	andwf	??i2_printRTC,f,c
 19200  003186  502A               	movf	??i2_printRTC,w,c
 19201  003188  0D0A               	mullw	10
 19202  00318A  0E1C               	movlw	low _time
 19203  00318C  2441               	addwf	i2printRTC@i,w,c
 19204  00318E  6ED9               	movwf	fsr2l,c
 19205  003190  0E01               	movlw	high _time
 19206  003192  2042               	addwfc	i2printRTC@i+1,w,c
 19207  003194  6EDA               	movwf	fsr2h,c
 19208  003196  50DF               	movf	indf2,w,c
 19209  003198  0B0F               	andlw	15
 19210  00319A  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 19211  00319C  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 19212  00319E  50F3               	movf	prodl,w,c
 19213  0031A0  262B               	addwf	??i2_printRTC+1,f,c
 19214  0031A2  50F4               	movf	prodh,w,c
 19215  0031A4  222C               	addwfc	??i2_printRTC+2,f,c
 19216  0031A6  90D8               	bcf	status,0,c
 19217  0031A8  3441               	rlcf	i2printRTC@i,w,c
 19218  0031AA  6ED9               	movwf	fsr2l,c
 19219  0031AC  3442               	rlcf	i2printRTC@i+1,w,c
 19220  0031AE  6EDA               	movwf	fsr2h,c
 19221  0031B0  0E2D               	movlw	low i2printRTC@INT_time
 19222  0031B2  26D9               	addwf	fsr2l,f,c
 19223  0031B4  0E00               	movlw	high i2printRTC@INT_time
 19224  0031B6  22DA               	addwfc	fsr2h,f,c
 19225  0031B8  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 19226  0031BC  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 19227  0031C0  4A41               	infsnz	i2printRTC@i,f,c
 19228  0031C2  2A42               	incf	i2printRTC@i+1,f,c
 19229  0031C4  BE42               	btfsc	i2printRTC@i+1,7,c
 19230  0031C6  D7D2               	goto	i2l6976
 19231  0031C8  5042               	movf	i2printRTC@i+1,w,c
 19232  0031CA  E101               	bnz	i2u553_40
 19233  0031CC  D7CB               	goto	L13
 19234  0031CE                     i2u553_40:
 19235  0031CE                     i2l614:
 19236                           
 19237                           ;RTC.c: 69: }
 19238                           ;RTC.c: 70: int RTC_month = INT_time[5];
 19239  0031CE  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 19240  0031D2  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 19241                           
 19242                           ;RTC.c: 72: switch(RTC_month){
 19243  0031D6  D084               	goto	i2l7008
 19244  0031D8                     i2l6982:
 19245                           
 19246                           ;RTC.c: 74: strcpy(month, "JAN");
 19247  0031D8  0E3D               	movlw	low i2printRTC@month
 19248  0031DA  6E01               	movwf	i2strcpy@to,c
 19249  0031DC  0E00               	movlw	high i2printRTC@month
 19250  0031DE  6E02               	movwf	i2strcpy@to+1,c
 19251  0031E0  0EDB               	movlw	low STR_8
 19252  0031E2  6E03               	movwf	i2strcpy@from,c
 19253  0031E4  0EFF               	movlw	high STR_8
 19254  0031E6  6E04               	movwf	i2strcpy@from+1,c
 19255  0031E8  EC6F  F027         	call	i2_strcpy	;wreg free
 19256                           
 19257                           ;RTC.c: 75: break;
 19258  0031EC  D0A6               	goto	i2l7010
 19259  0031EE                     i2l6984:
 19260                           
 19261                           ;RTC.c: 77: strcpy(month, "FEB");
 19262  0031EE  0E3D               	movlw	low i2printRTC@month
 19263  0031F0  6E01               	movwf	i2strcpy@to,c
 19264  0031F2  0E00               	movlw	high i2printRTC@month
 19265  0031F4  6E02               	movwf	i2strcpy@to+1,c
 19266  0031F6  0ECB               	movlw	low STR_9
 19267  0031F8  6E03               	movwf	i2strcpy@from,c
 19268  0031FA  0EFF               	movlw	high STR_9
 19269  0031FC  6E04               	movwf	i2strcpy@from+1,c
 19270  0031FE  EC6F  F027         	call	i2_strcpy	;wreg free
 19271                           
 19272                           ;RTC.c: 78: break;
 19273  003202  D09B               	goto	i2l7010
 19274  003204                     i2l6986:
 19275                           
 19276                           ;RTC.c: 80: strcpy(month, "MAR");
 19277  003204  0E3D               	movlw	low i2printRTC@month
 19278  003206  6E01               	movwf	i2strcpy@to,c
 19279  003208  0E00               	movlw	high i2printRTC@month
 19280  00320A  6E02               	movwf	i2strcpy@to+1,c
 19281  00320C  0EE7               	movlw	low STR_10
 19282  00320E  6E03               	movwf	i2strcpy@from,c
 19283  003210  0EFF               	movlw	high STR_10
 19284  003212  6E04               	movwf	i2strcpy@from+1,c
 19285  003214  EC6F  F027         	call	i2_strcpy	;wreg free
 19286                           
 19287                           ;RTC.c: 81: break;
 19288  003218  D090               	goto	i2l7010
 19289  00321A                     i2l6988:
 19290                           
 19291                           ;RTC.c: 83: strcpy(month, "APR");
 19292  00321A  0E3D               	movlw	low i2printRTC@month
 19293  00321C  6E01               	movwf	i2strcpy@to,c
 19294  00321E  0E00               	movlw	high i2printRTC@month
 19295  003220  6E02               	movwf	i2strcpy@to+1,c
 19296  003222  0EEB               	movlw	low STR_11
 19297  003224  6E03               	movwf	i2strcpy@from,c
 19298  003226  0EFF               	movlw	high STR_11
 19299  003228  6E04               	movwf	i2strcpy@from+1,c
 19300  00322A  EC6F  F027         	call	i2_strcpy	;wreg free
 19301                           
 19302                           ;RTC.c: 84: break;
 19303  00322E  D085               	goto	i2l7010
 19304  003230                     i2l6990:
 19305                           
 19306                           ;RTC.c: 86: strcpy(month, "MAY");
 19307  003230  0E3D               	movlw	low i2printRTC@month
 19308  003232  6E01               	movwf	i2strcpy@to,c
 19309  003234  0E00               	movlw	high i2printRTC@month
 19310  003236  6E02               	movwf	i2strcpy@to+1,c
 19311  003238  0EFB               	movlw	low STR_12
 19312  00323A  6E03               	movwf	i2strcpy@from,c
 19313  00323C  0EFF               	movlw	high STR_12
 19314  00323E  6E04               	movwf	i2strcpy@from+1,c
 19315  003240  EC6F  F027         	call	i2_strcpy	;wreg free
 19316                           
 19317                           ;RTC.c: 87: break;
 19318  003244  D07A               	goto	i2l7010
 19319  003246                     i2l6992:
 19320                           
 19321                           ;RTC.c: 89: strcpy(month, "JUN");
 19322  003246  0E3D               	movlw	low i2printRTC@month
 19323  003248  6E01               	movwf	i2strcpy@to,c
 19324  00324A  0E00               	movlw	high i2printRTC@month
 19325  00324C  6E02               	movwf	i2strcpy@to+1,c
 19326  00324E  0EDF               	movlw	low STR_13
 19327  003250  6E03               	movwf	i2strcpy@from,c
 19328  003252  0EFF               	movlw	high STR_13
 19329  003254  6E04               	movwf	i2strcpy@from+1,c
 19330  003256  EC6F  F027         	call	i2_strcpy	;wreg free
 19331                           
 19332                           ;RTC.c: 90: break;
 19333  00325A  D06F               	goto	i2l7010
 19334  00325C                     i2l6994:
 19335                           
 19336                           ;RTC.c: 92: strcpy(month, "JUL");
 19337  00325C  0E3D               	movlw	low i2printRTC@month
 19338  00325E  6E01               	movwf	i2strcpy@to,c
 19339  003260  0E00               	movlw	high i2printRTC@month
 19340  003262  6E02               	movwf	i2strcpy@to+1,c
 19341  003264  0ED7               	movlw	low STR_14
 19342  003266  6E03               	movwf	i2strcpy@from,c
 19343  003268  0EFF               	movlw	high STR_14
 19344  00326A  6E04               	movwf	i2strcpy@from+1,c
 19345  00326C  EC6F  F027         	call	i2_strcpy	;wreg free
 19346                           
 19347                           ;RTC.c: 93: break;
 19348  003270  D064               	goto	i2l7010
 19349  003272                     i2l6996:
 19350                           
 19351                           ;RTC.c: 95: strcpy(month, "AUG");
 19352  003272  0E3D               	movlw	low i2printRTC@month
 19353  003274  6E01               	movwf	i2strcpy@to,c
 19354  003276  0E00               	movlw	high i2printRTC@month
 19355  003278  6E02               	movwf	i2strcpy@to+1,c
 19356  00327A  0ED3               	movlw	low STR_15
 19357  00327C  6E03               	movwf	i2strcpy@from,c
 19358  00327E  0EFF               	movlw	high STR_15
 19359  003280  6E04               	movwf	i2strcpy@from+1,c
 19360  003282  EC6F  F027         	call	i2_strcpy	;wreg free
 19361                           
 19362                           ;RTC.c: 96: break;
 19363  003286  D059               	goto	i2l7010
 19364  003288                     i2l6998:
 19365                           
 19366                           ;RTC.c: 98: strcpy(month, "SEP");
 19367  003288  0E3D               	movlw	low i2printRTC@month
 19368  00328A  6E01               	movwf	i2strcpy@to,c
 19369  00328C  0E00               	movlw	high i2printRTC@month
 19370  00328E  6E02               	movwf	i2strcpy@to+1,c
 19371  003290  0EE3               	movlw	low STR_16
 19372  003292  6E03               	movwf	i2strcpy@from,c
 19373  003294  0EFF               	movlw	high STR_16
 19374  003296  6E04               	movwf	i2strcpy@from+1,c
 19375  003298  EC6F  F027         	call	i2_strcpy	;wreg free
 19376                           
 19377                           ;RTC.c: 99: break;
 19378  00329C  D04E               	goto	i2l7010
 19379  00329E                     i2l7000:
 19380                           
 19381                           ;RTC.c: 101: strcpy(month, "OCT");
 19382  00329E  0E3D               	movlw	low i2printRTC@month
 19383  0032A0  6E01               	movwf	i2strcpy@to,c
 19384  0032A2  0E00               	movlw	high i2printRTC@month
 19385  0032A4  6E02               	movwf	i2strcpy@to+1,c
 19386  0032A6  0EF3               	movlw	low STR_17
 19387  0032A8  6E03               	movwf	i2strcpy@from,c
 19388  0032AA  0EFF               	movlw	high STR_17
 19389  0032AC  6E04               	movwf	i2strcpy@from+1,c
 19390  0032AE  EC6F  F027         	call	i2_strcpy	;wreg free
 19391                           
 19392                           ;RTC.c: 102: break;
 19393  0032B2  D043               	goto	i2l7010
 19394  0032B4                     i2l7002:
 19395                           
 19396                           ;RTC.c: 104: strcpy(month, "NOV");
 19397  0032B4  0E3D               	movlw	low i2printRTC@month
 19398  0032B6  6E01               	movwf	i2strcpy@to,c
 19399  0032B8  0E00               	movlw	high i2printRTC@month
 19400  0032BA  6E02               	movwf	i2strcpy@to+1,c
 19401  0032BC  0EF7               	movlw	low STR_18
 19402  0032BE  6E03               	movwf	i2strcpy@from,c
 19403  0032C0  0EFF               	movlw	high STR_18
 19404  0032C2  6E04               	movwf	i2strcpy@from+1,c
 19405  0032C4  EC6F  F027         	call	i2_strcpy	;wreg free
 19406                           
 19407                           ;RTC.c: 105: break;
 19408  0032C8  D038               	goto	i2l7010
 19409  0032CA                     i2l7004:
 19410                           
 19411                           ;RTC.c: 107: strcpy(month, "DEC");
 19412  0032CA  0E3D               	movlw	low i2printRTC@month
 19413  0032CC  6E01               	movwf	i2strcpy@to,c
 19414  0032CE  0E00               	movlw	high i2printRTC@month
 19415  0032D0  6E02               	movwf	i2strcpy@to+1,c
 19416  0032D2  0ECF               	movlw	low STR_19
 19417  0032D4  6E03               	movwf	i2strcpy@from,c
 19418  0032D6  0EFF               	movlw	high STR_19
 19419  0032D8  6E04               	movwf	i2strcpy@from+1,c
 19420  0032DA  EC6F  F027         	call	i2_strcpy	;wreg free
 19421                           
 19422                           ;RTC.c: 109: }
 19423                           
 19424                           ;RTC.c: 108: break;
 19425  0032DE  D02D               	goto	i2l7010
 19426  0032E0                     i2l7008:
 19427  0032E0  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 19428  0032E4  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 19429                           
 19430                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19431                           ; Switch size 1, requested type "space"
 19432                           ; Number of cases is 1, Range of values is 0 to 0
 19433                           ; switch strategies available:
 19434                           ; Name         Instructions Cycles
 19435                           ; simple_byte            4     3 (average)
 19436                           ;	Chosen strategy is simple_byte
 19437  0032E8  502B               	movf	??i2_printRTC+1,w,c
 19438  0032EA  0A00               	xorlw	0	; case 0
 19439  0032EC  A4D8               	btfss	status,2,c
 19440  0032EE  D025               	goto	i2l7010
 19441                           
 19442                           ; Switch size 1, requested type "space"
 19443                           ; Number of cases is 12, Range of values is 1 to 12
 19444                           ; switch strategies available:
 19445                           ; Name         Instructions Cycles
 19446                           ; simple_byte           37    19 (average)
 19447                           ;	Chosen strategy is simple_byte
 19448  0032F0  502A               	movf	??i2_printRTC,w,c
 19449  0032F2  0A01               	xorlw	1	; case 1
 19450  0032F4  B4D8               	btfsc	status,2,c
 19451  0032F6  D770               	goto	i2l6982
 19452  0032F8  0A03               	xorlw	3	; case 2
 19453  0032FA  B4D8               	btfsc	status,2,c
 19454  0032FC  D778               	goto	i2l6984
 19455  0032FE  0A01               	xorlw	1	; case 3
 19456  003300  B4D8               	btfsc	status,2,c
 19457  003302  D780               	goto	i2l6986
 19458  003304  0A07               	xorlw	7	; case 4
 19459  003306  B4D8               	btfsc	status,2,c
 19460  003308  D788               	goto	i2l6988
 19461  00330A  0A01               	xorlw	1	; case 5
 19462  00330C  B4D8               	btfsc	status,2,c
 19463  00330E  D790               	goto	i2l6990
 19464  003310  0A03               	xorlw	3	; case 6
 19465  003312  B4D8               	btfsc	status,2,c
 19466  003314  D798               	goto	i2l6992
 19467  003316  0A01               	xorlw	1	; case 7
 19468  003318  B4D8               	btfsc	status,2,c
 19469  00331A  D7A0               	goto	i2l6994
 19470  00331C  0A0F               	xorlw	15	; case 8
 19471  00331E  B4D8               	btfsc	status,2,c
 19472  003320  D7A8               	goto	i2l6996
 19473  003322  0A01               	xorlw	1	; case 9
 19474  003324  B4D8               	btfsc	status,2,c
 19475  003326  D7B0               	goto	i2l6998
 19476  003328  0A03               	xorlw	3	; case 10
 19477  00332A  B4D8               	btfsc	status,2,c
 19478  00332C  D7B8               	goto	i2l7000
 19479  00332E  0A01               	xorlw	1	; case 11
 19480  003330  B4D8               	btfsc	status,2,c
 19481  003332  D7C0               	goto	i2l7002
 19482  003334  0A07               	xorlw	7	; case 12
 19483  003336  B4D8               	btfsc	status,2,c
 19484  003338  D7C8               	goto	i2l7004
 19485  00333A                     i2l7010:
 19486                           
 19487                           ;RTC.c: 110: lcdInst(0b10000000);;
 19488  00333A  0E80               	movlw	128
 19489  00333C  ECD3  F029         	call	i2_lcdInst
 19490                           
 19491                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 19492  003340  0EE8               	movlw	low STR_21
 19493  003342  6E0D               	movwf	i2printf@f,c
 19494  003344  0EFA               	movlw	high STR_21
 19495  003346  6E0E               	movwf	i2printf@f+1,c
 19496  003348  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 19497  00334C  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 19498  003350  0E3D               	movlw	low i2printRTC@month
 19499  003352  6E11               	movwf	?i2_printf+4,c
 19500  003354  0E00               	movlw	high i2printRTC@month
 19501  003356  6E12               	movwf	?i2_printf+5,c
 19502  003358  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 19503  00335C  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 19504  003360  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 19505  003364  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 19506  003368  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 19507  00336C  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 19508  003370  ECF9  F00E         	call	i2_printf	;wreg free
 19509  003374  0012               	return		;funcret
 19510  003376                     __end_ofi2_printRTC:
 19511                           	opt stack 0
 19512                           pclatu	equ	0xFFB
 19513                           pclath	equ	0xFFA
 19514                           tblptru	equ	0xFF8
 19515                           tblptrh	equ	0xFF7
 19516                           tblptrl	equ	0xFF6
 19517                           tablat	equ	0xFF5
 19518                           prodh	equ	0xFF4
 19519                           prodl	equ	0xFF3
 19520                           intcon	equ	0xFF2
 19521                           intcon2	equ	0xFF1
 19522                           intcon3	equ	0xFF0
 19523                           indf0	equ	0xFEF
 19524                           postinc0	equ	0xFEE
 19525                           fsr0h	equ	0xFEA
 19526                           fsr0l	equ	0xFE9
 19527                           wreg	equ	0xFE8
 19528                           postdec1	equ	0xFE5
 19529                           fsr1h	equ	0xFE2
 19530                           fsr1l	equ	0xFE1
 19531                           indf2	equ	0xFDF
 19532                           postinc2	equ	0xFDE
 19533                           postdec2	equ	0xFDD
 19534                           fsr2h	equ	0xFDA
 19535                           fsr2l	equ	0xFD9
 19536                           status	equ	0xFD8
 19537                           
 19538 ;; *************** function i2_strcpy *****************
 19539 ;; Defined at:
 19540 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 19541 ;; Parameters:    Size  Location     Type
 19542 ;;  to              2    0[COMRAM] PTR unsigned char 
 19543 ;;		 -> printRTC@month(4), UI@month(4), 
 19544 ;;  from            2    2[COMRAM] PTR const unsigned char 
 19545 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 19546 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 19547 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 19548 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 19549 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 19550 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 19551 ;;		 -> STR_8(4), 
 19552 ;; Auto vars:     Size  Location     Type
 19553 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 19554 ;;		 -> printRTC@month(4), UI@month(4), 
 19555 ;; Return value:  Size  Location     Type
 19556 ;;                  2    0[COMRAM] PTR unsigned char 
 19557 ;; Registers used:
 19558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 19559 ;; Tracked objects:
 19560 ;;		On entry : 0/0
 19561 ;;		On exit  : 0/0
 19562 ;;		Unchanged: 0/0
 19563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19564 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19565 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19567 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19568 ;;Total ram usage:        6 bytes
 19569 ;; Hardware stack levels used:    1
 19570 ;; This function calls:
 19571 ;;		Nothing
 19572 ;; This function is called by:
 19573 ;;		i2_printRTC
 19574 ;; This function uses a non-reentrant model
 19575 ;;
 19576                           
 19577                           	psect	text65
 19578  004EDE                     __ptext65:
 19579                           	opt stack 0
 19580  004EDE                     i2_strcpy:
 19581                           	opt stack 21
 19582                           
 19583                           ;incstack = 0
 19584  004EDE  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 19585  004EE2  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 19586  004EE6  D004               	goto	i2l6630
 19587  004EE8                     i2l6628:
 19588  004EE8  4A05               	infsnz	i2strcpy@cp,f,c
 19589  004EEA  2A06               	incf	i2strcpy@cp+1,f,c
 19590  004EEC  4A03               	infsnz	i2strcpy@from,f,c
 19591  004EEE  2A04               	incf	i2strcpy@from+1,f,c
 19592  004EF0                     i2l6630:
 19593  004EF0  C003  FFF6         	movff	i2strcpy@from,tblptrl
 19594  004EF4  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 19595  004EF8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19596  004EF8  6AF8               	clrf	tblptru,c
 19597  004EFA                     	endif
 19598  004EFA                     	if	0	;tblptru may be non-zero
 19599  004EFA                     	endif
 19600  004EFA  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 19601  004EFE  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 19602  004F02  0008               	tblrd		*
 19603  004F04  CFF5 FFDF          	movff	tablat,indf2
 19604  004F08  50DF               	movf	indf2,w,c
 19605  004F0A  B4D8               	btfsc	status,2,c
 19606  004F0C  0012               	return	
 19607  004F0E  D7EC               	goto	i2l6628
 19608  004F10                     __end_ofi2_strcpy:
 19609                           	opt stack 0
 19610                           pclatu	equ	0xFFB
 19611                           pclath	equ	0xFFA
 19612                           tblptru	equ	0xFF8
 19613                           tblptrh	equ	0xFF7
 19614                           tblptrl	equ	0xFF6
 19615                           tablat	equ	0xFF5
 19616                           prodh	equ	0xFF4
 19617                           prodl	equ	0xFF3
 19618                           intcon	equ	0xFF2
 19619                           intcon2	equ	0xFF1
 19620                           intcon3	equ	0xFF0
 19621                           indf0	equ	0xFEF
 19622                           postinc0	equ	0xFEE
 19623                           fsr0h	equ	0xFEA
 19624                           fsr0l	equ	0xFE9
 19625                           wreg	equ	0xFE8
 19626                           postdec1	equ	0xFE5
 19627                           fsr1h	equ	0xFE2
 19628                           fsr1l	equ	0xFE1
 19629                           indf2	equ	0xFDF
 19630                           postinc2	equ	0xFDE
 19631                           postdec2	equ	0xFDD
 19632                           fsr2h	equ	0xFDA
 19633                           fsr2l	equ	0xFD9
 19634                           status	equ	0xFD8
 19635                           
 19636 ;; *************** function _inputHandler *****************
 19637 ;; Defined at:
 19638 ;;		line 375 in file "UI.c"
 19639 ;; Parameters:    Size  Location     Type
 19640 ;;		None
 19641 ;; Auto vars:     Size  Location     Type
 19642 ;;		None
 19643 ;; Return value:  Size  Location     Type
 19644 ;;                  2   41[COMRAM] int 
 19645 ;; Registers used:
 19646 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19647 ;; Tracked objects:
 19648 ;;		On entry : 0/0
 19649 ;;		On exit  : 0/0
 19650 ;;		Unchanged: 0/0
 19651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19652 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19654 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19655 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19656 ;;Total ram usage:        4 bytes
 19657 ;; Hardware stack levels used:    1
 19658 ;; Hardware stack levels required when called:    4
 19659 ;; This function calls:
 19660 ;;		_change_state_to_logs_11
 19661 ;;		_change_state_to_logs_12
 19662 ;;		_change_state_to_logs_22
 19663 ;;		_change_state_to_logs_23
 19664 ;;		_change_state_to_logs_33
 19665 ;;		_change_state_to_logs_34
 19666 ;;		_change_state_to_menu_11
 19667 ;;		_change_state_to_menu_23
 19668 ;;		i2_change_state_to_menu_12
 19669 ;;		i2_change_state_to_menu_22
 19670 ;; This function is called by:
 19671 ;;		_updateMenu
 19672 ;; This function uses a non-reentrant model
 19673 ;;
 19674                           
 19675                           	psect	text66
 19676  003376                     __ptext66:
 19677                           	opt stack 0
 19678  003376                     _inputHandler:
 19679                           	opt stack 18
 19680                           
 19681                           ;UI.c: 380: if(firstboot){
 19682                           
 19683                           ;incstack = 0
 19684  003376  0101               	movlb	1	; () banked
 19685  003378  513B               	movf	_firstboot& (0+255),w,b
 19686  00337A  0101               	movlb	1	; () banked
 19687  00337C  113C               	iorwf	(_firstboot+1)& (0+255),w,b
 19688  00337E  B4D8               	btfsc	status,2,c
 19689  003380  D00C               	goto	i2l7078
 19690                           
 19691                           ; BSR set to: 1
 19692                           ;UI.c: 381: change_state_to_menu_11();
 19693  003382  ECE8  F027         	call	_change_state_to_menu_11	;wreg free
 19694                           
 19695                           ;UI.c: 382: firstboot = 0;
 19696  003386  0E00               	movlw	0
 19697  003388  0101               	movlb	1	; () banked
 19698  00338A  6F3C               	movwf	(_firstboot+1)& (0+255),b
 19699  00338C  0E00               	movlw	0
 19700  00338E  6F3B               	movwf	_firstboot& (0+255),b
 19701                           
 19702                           ; BSR set to: 1
 19703                           ;UI.c: 383: return 0;
 19704  003390  0E00               	movlw	0
 19705  003392  6E2B               	movwf	?_inputHandler+1,c
 19706  003394  0E00               	movlw	0
 19707  003396  6E2A               	movwf	?_inputHandler,c
 19708                           
 19709                           ; BSR set to: 1
 19710  003398  0012               	return	
 19711  00339A                     i2l7078:
 19712                           
 19713                           ; BSR set to: 1
 19714                           ;UI.c: 384: }
 19715                           ;UI.c: 385: if (logstate){
 19716  00339A  0100               	movlb	0	; () banked
 19717  00339C  51F8               	movf	_logstate& (0+255),w,b
 19718  00339E  0100               	movlb	0	; () banked
 19719  0033A0  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 19720  0033A2  B4D8               	btfsc	status,2,c
 19721  0033A4  D0C7               	goto	i2l7196
 19722                           
 19723                           ; BSR set to: 0
 19724                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 19725  0033A6  0E43               	movlw	67
 19726  0033A8  187D               	xorwf	_input,w,c	;volatile
 19727  0033AA  A4D8               	btfss	status,2,c
 19728  0033AC  D012               	goto	i2l7096
 19729                           
 19730                           ; BSR set to: 0
 19731  0033AE  B281               	btfsc	3969,1,c	;volatile
 19732  0033B0  D009               	goto	i2l7088
 19733  0033B2  D00F               	goto	i2l7096
 19734  0033B4                     i2l7086:
 19735                           
 19736                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 19737  0033B4  0E68               	movlw	104
 19738  0033B6  6E2C               	movwf	??_inputHandler& (0+255),c
 19739  0033B8  0EE4               	movlw	228
 19740  0033BA                     i2u1036_47:
 19741  0033BA  2EE8               	decfsz	wreg,f,c
 19742  0033BC  D7FE               	bra	i2u1036_47
 19743  0033BE  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 19744  0033C0  D7FC               	bra	i2u1036_47
 19745  0033C2  D000               	nop2	
 19746  0033C4                     i2l7088:
 19747  0033C4  B281               	btfsc	3969,1,c	;volatile
 19748  0033C6  D7F6               	goto	i2l7086
 19749  0033C8                     i2l7090:
 19750                           
 19751                           ;UI.c: 390: }
 19752                           ;UI.c: 391: return 0;
 19753  0033C8  0E00               	movlw	0
 19754  0033CA  6E2B               	movwf	?_inputHandler+1,c
 19755  0033CC  0E00               	movlw	0
 19756  0033CE  6E2A               	movwf	?_inputHandler,c
 19757  0033D0  0012               	return	
 19758  0033D2                     i2l7096:
 19759                           
 19760                           ;UI.c: 393: else if (input == 'D'){
 19761  0033D2  0E44               	movlw	68
 19762  0033D4  187D               	xorwf	_input,w,c	;volatile
 19763  0033D6  A4D8               	btfss	status,2,c
 19764  0033D8  D7F7               	goto	i2l7090
 19765                           
 19766                           ;UI.c: 395: logstate = 0;
 19767  0033DA  0E00               	movlw	0
 19768  0033DC  0100               	movlb	0	; () banked
 19769  0033DE  6FF9               	movwf	(_logstate+1)& (0+255),b
 19770  0033E0  0E00               	movlw	0
 19771  0033E2  6FF8               	movwf	_logstate& (0+255),b
 19772                           
 19773                           ;UI.c: 396: switch(cur_state){
 19774  0033E4  D012               	goto	i2l7114
 19775  0033E6                     i2l7100:
 19776                           
 19777                           ;UI.c: 398: change_state_to_logs_11();
 19778  0033E6  EC60  F028         	call	_change_state_to_logs_11	;wreg free
 19779                           
 19780                           ;UI.c: 399: break;
 19781  0033EA  D7EE               	goto	i2l7090
 19782  0033EC                     i2l7102:
 19783                           
 19784                           ;UI.c: 401: change_state_to_logs_12();
 19785  0033EC  EC48  F028         	call	_change_state_to_logs_12	;wreg free
 19786                           
 19787                           ;UI.c: 402: break;
 19788  0033F0  D7EB               	goto	i2l7090
 19789  0033F2                     i2l7104:
 19790                           
 19791                           ;UI.c: 404: change_state_to_logs_22();
 19792  0033F2  EC30  F028         	call	_change_state_to_logs_22	;wreg free
 19793                           
 19794                           ;UI.c: 405: break;
 19795  0033F6  D7E8               	goto	i2l7090
 19796  0033F8                     i2l7106:
 19797                           
 19798                           ;UI.c: 407: change_state_to_logs_23();
 19799  0033F8  EC8F  F028         	call	_change_state_to_logs_23	;wreg free
 19800                           
 19801                           ;UI.c: 408: break;
 19802  0033FC  D7E5               	goto	i2l7090
 19803  0033FE                     i2l7108:
 19804                           
 19805                           ;UI.c: 410: change_state_to_logs_33();
 19806  0033FE  EC18  F028         	call	_change_state_to_logs_33	;wreg free
 19807                           
 19808                           ;UI.c: 411: break;
 19809  003402  D7E2               	goto	i2l7090
 19810  003404                     i2l7110:
 19811                           
 19812                           ;UI.c: 413: change_state_to_logs_34();
 19813  003404  EC00  F028         	call	_change_state_to_logs_34	;wreg free
 19814                           
 19815                           ;UI.c: 415: }
 19816                           
 19817                           ;UI.c: 414: break;
 19818  003408  D7DF               	goto	i2l7090
 19819  00340A                     i2l7114:
 19820  00340A  C0EC  F02C         	movff	_cur_state,??_inputHandler
 19821  00340E  C0ED  F02D         	movff	_cur_state+1,??_inputHandler+1
 19822                           
 19823                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 19824                           ; Switch size 1, requested type "space"
 19825                           ; Number of cases is 2, Range of values is 3 to 4
 19826                           ; switch strategies available:
 19827                           ; Name         Instructions Cycles
 19828                           ; simple_byte            7     4 (average)
 19829                           ;	Chosen strategy is simple_byte
 19830  003412  502D               	movf	??_inputHandler+1,w,c
 19831  003414  0A03               	xorlw	3	; case 3
 19832  003416  B4D8               	btfsc	status,2,c
 19833  003418  D004               	goto	i2l9978
 19834  00341A  0A07               	xorlw	7	; case 4
 19835  00341C  B4D8               	btfsc	status,2,c
 19836  00341E  D00F               	goto	i2l9980
 19837  003420  D7D3               	goto	i2l7090
 19838  003422                     i2l9978:
 19839                           
 19840                           ; Switch size 1, requested type "space"
 19841                           ; Number of cases is 4, Range of values is 243 to 255
 19842                           ; switch strategies available:
 19843                           ; Name         Instructions Cycles
 19844                           ; simple_byte           13     7 (average)
 19845                           ;	Chosen strategy is simple_byte
 19846  003422  502C               	movf	??_inputHandler,w,c
 19847  003424  0AF3               	xorlw	243	; case 243
 19848  003426  B4D8               	btfsc	status,2,c
 19849  003428  D7DE               	goto	i2l7100
 19850  00342A  0A07               	xorlw	7	; case 244
 19851  00342C  B4D8               	btfsc	status,2,c
 19852  00342E  D7DE               	goto	i2l7102
 19853  003430  0A0A               	xorlw	10	; case 254
 19854  003432  B4D8               	btfsc	status,2,c
 19855  003434  D7DE               	goto	i2l7104
 19856  003436  0A01               	xorlw	1	; case 255
 19857  003438  B4D8               	btfsc	status,2,c
 19858  00343A  D7DE               	goto	i2l7106
 19859  00343C  D7C5               	goto	i2l7090
 19860  00343E                     i2l9980:
 19861                           
 19862                           ; Switch size 1, requested type "space"
 19863                           ; Number of cases is 2, Range of values is 9 to 10
 19864                           ; switch strategies available:
 19865                           ; Name         Instructions Cycles
 19866                           ; simple_byte            7     4 (average)
 19867                           ;	Chosen strategy is simple_byte
 19868  00343E  502C               	movf	??_inputHandler,w,c
 19869  003440  0A09               	xorlw	9	; case 9
 19870  003442  B4D8               	btfsc	status,2,c
 19871  003444  D7DC               	goto	i2l7108
 19872  003446  0A03               	xorlw	3	; case 10
 19873  003448  B4D8               	btfsc	status,2,c
 19874  00344A  D7DC               	goto	i2l7110
 19875  00344C  D7BD               	goto	i2l7090
 19876  00344E                     i2l7126:
 19877                           
 19878                           ;UI.c: 425: if(cur_state == 11){
 19879  00344E  0E0B               	movlw	11
 19880  003450  0100               	movlb	0	; () banked
 19881  003452  19EC               	xorwf	_cur_state& (0+255),w,b
 19882  003454  0100               	movlb	0	; () banked
 19883  003456  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19884  003458  A4D8               	btfss	status,2,c
 19885  00345A  D005               	goto	i2l7134
 19886                           
 19887                           ; BSR set to: 0
 19888                           ;UI.c: 426: return 0;
 19889  00345C  0E00               	movlw	0
 19890  00345E  6E2B               	movwf	?_inputHandler+1,c
 19891  003460  0E00               	movlw	0
 19892  003462  6E2A               	movwf	?_inputHandler,c
 19893                           
 19894                           ; BSR set to: 0
 19895  003464  0012               	return	
 19896  003466                     i2l7134:
 19897                           
 19898                           ; BSR set to: 0
 19899                           ;UI.c: 428: else{
 19900                           ;UI.c: 429: change_state_to_menu_11();
 19901  003466  ECE8  F027         	call	_change_state_to_menu_11	;wreg free
 19902                           
 19903                           ;UI.c: 430: }
 19904                           ;UI.c: 431: return 0;
 19905  00346A  0E00               	movlw	0
 19906  00346C  6E2B               	movwf	?_inputHandler+1,c
 19907  00346E  0E00               	movlw	0
 19908  003470  6E2A               	movwf	?_inputHandler,c
 19909  003472  0012               	return	
 19910  003474                     i2l7140:
 19911                           
 19912                           ;UI.c: 433: if(cur_state == 22 | cur_state == 12){
 19913  003474  0E16               	movlw	22
 19914  003476  0100               	movlb	0	; () banked
 19915  003478  19EC               	xorwf	_cur_state& (0+255),w,b
 19916  00347A  0100               	movlb	0	; () banked
 19917  00347C  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19918  00347E  B4D8               	btfsc	status,2,c
 19919  003480  D007               	goto	i2l7144
 19920                           
 19921                           ; BSR set to: 0
 19922  003482  0E0C               	movlw	12
 19923  003484  0100               	movlb	0	; () banked
 19924  003486  19EC               	xorwf	_cur_state& (0+255),w,b
 19925  003488  0100               	movlb	0	; () banked
 19926  00348A  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19927  00348C  A4D8               	btfss	status,2,c
 19928  00348E  D005               	goto	i2l7150
 19929  003490                     i2l7144:
 19930                           
 19931                           ; BSR set to: 0
 19932                           ;UI.c: 434: return 0;
 19933  003490  0E00               	movlw	0
 19934  003492  6E2B               	movwf	?_inputHandler+1,c
 19935  003494  0E00               	movlw	0
 19936  003496  6E2A               	movwf	?_inputHandler,c
 19937                           
 19938                           ; BSR set to: 0
 19939  003498  0012               	return	
 19940  00349A                     i2l7150:
 19941                           
 19942                           ; BSR set to: 0
 19943                           ;UI.c: 436: else if(cur_state == 23){
 19944  00349A  0E17               	movlw	23
 19945  00349C  0100               	movlb	0	; () banked
 19946  00349E  19EC               	xorwf	_cur_state& (0+255),w,b
 19947  0034A0  0100               	movlb	0	; () banked
 19948  0034A2  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19949  0034A4  A4D8               	btfss	status,2,c
 19950  0034A6  D003               	goto	i2l7154
 19951                           
 19952                           ; BSR set to: 0
 19953                           ;UI.c: 437: change_state_to_menu_22();
 19954  0034A8  ECA0  F027         	call	i2_change_state_to_menu_22	;wreg free
 19955                           
 19956                           ;UI.c: 438: }
 19957  0034AC  D002               	goto	i2l7156
 19958  0034AE                     i2l7154:
 19959                           
 19960                           ;UI.c: 439: else{
 19961                           ;UI.c: 440: change_state_to_menu_12();
 19962  0034AE  ECB8  F027         	call	i2_change_state_to_menu_12	;wreg free
 19963  0034B2                     i2l7156:
 19964                           
 19965                           ;UI.c: 441: }
 19966                           ;UI.c: 442: return 0;
 19967  0034B2  0E00               	movlw	0
 19968  0034B4  6E2B               	movwf	?_inputHandler+1,c
 19969  0034B6  0E00               	movlw	0
 19970  0034B8  6E2A               	movwf	?_inputHandler,c
 19971  0034BA  0012               	return	
 19972  0034BC                     i2l7160:
 19973                           
 19974                           ;UI.c: 444: if(cur_state == 23){
 19975  0034BC  0E17               	movlw	23
 19976  0034BE  0100               	movlb	0	; () banked
 19977  0034C0  19EC               	xorwf	_cur_state& (0+255),w,b
 19978  0034C2  0100               	movlb	0	; () banked
 19979  0034C4  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19980  0034C6  A4D8               	btfss	status,2,c
 19981  0034C8  D005               	goto	i2l7168
 19982                           
 19983                           ; BSR set to: 0
 19984                           ;UI.c: 445: return 0;
 19985  0034CA  0E00               	movlw	0
 19986  0034CC  6E2B               	movwf	?_inputHandler+1,c
 19987  0034CE  0E00               	movlw	0
 19988  0034D0  6E2A               	movwf	?_inputHandler,c
 19989                           
 19990                           ; BSR set to: 0
 19991  0034D2  0012               	return	
 19992  0034D4                     i2l7168:
 19993                           
 19994                           ; BSR set to: 0
 19995                           ;UI.c: 447: else{
 19996                           ;UI.c: 448: change_state_to_menu_23();
 19997  0034D4  ECD0  F027         	call	_change_state_to_menu_23	;wreg free
 19998                           
 19999                           ;UI.c: 449: }
 20000                           ;UI.c: 450: return 0;
 20001  0034D8  0E00               	movlw	0
 20002  0034DA  6E2B               	movwf	?_inputHandler+1,c
 20003  0034DC  0E00               	movlw	0
 20004  0034DE  6E2A               	movwf	?_inputHandler,c
 20005  0034E0  0012               	return	
 20006  0034E2                     i2l7174:
 20007                           
 20008                           ;UI.c: 453: up = 1;
 20009  0034E2  0E00               	movlw	0
 20010  0034E4  6E78               	movwf	_up+1,c
 20011  0034E6  0E01               	movlw	1
 20012  0034E8  6E77               	movwf	_up,c
 20013                           
 20014                           ;UI.c: 454: return 1;
 20015  0034EA  0E00               	movlw	0
 20016  0034EC  6E2B               	movwf	?_inputHandler+1,c
 20017  0034EE  0E01               	movlw	1
 20018  0034F0  6E2A               	movwf	?_inputHandler,c
 20019  0034F2  0012               	return	
 20020  0034F4                     i2l7178:
 20021                           
 20022                           ;UI.c: 456: down = 1;
 20023  0034F4  0E00               	movlw	0
 20024  0034F6  6E5E               	movwf	_down+1,c
 20025  0034F8  0E01               	movlw	1
 20026  0034FA  6E5D               	movwf	_down,c
 20027                           
 20028                           ;UI.c: 457: return 1;
 20029  0034FC  0E00               	movlw	0
 20030  0034FE  6E2B               	movwf	?_inputHandler+1,c
 20031  003500  0E01               	movlw	1
 20032  003502  6E2A               	movwf	?_inputHandler,c
 20033  003504  0012               	return	
 20034  003506                     i2l7182:
 20035                           
 20036                           ;UI.c: 459: enter = 1;
 20037  003506  0E00               	movlw	0
 20038  003508  6E60               	movwf	_enter+1,c
 20039  00350A  0E01               	movlw	1
 20040  00350C  6E5F               	movwf	_enter,c
 20041                           
 20042                           ;UI.c: 460: return 1;
 20043  00350E  0E00               	movlw	0
 20044  003510  6E2B               	movwf	?_inputHandler+1,c
 20045  003512  0E01               	movlw	1
 20046  003514  6E2A               	movwf	?_inputHandler,c
 20047  003516  0012               	return	
 20048  003518                     i2l7186:
 20049                           
 20050                           ;UI.c: 462: back = 1;
 20051  003518  0E00               	movlw	0
 20052  00351A  6E5C               	movwf	_back+1,c
 20053  00351C  0E01               	movlw	1
 20054  00351E  6E5B               	movwf	_back,c
 20055                           
 20056                           ;UI.c: 463: return 1;
 20057  003520  0E00               	movlw	0
 20058  003522  6E2B               	movwf	?_inputHandler+1,c
 20059  003524  0E01               	movlw	1
 20060  003526  6E2A               	movwf	?_inputHandler,c
 20061  003528  0012               	return	
 20062  00352A                     i2l7190:
 20063                           
 20064                           ;UI.c: 466: return 1;
 20065  00352A  0E00               	movlw	0
 20066  00352C  6E2B               	movwf	?_inputHandler+1,c
 20067  00352E  0E01               	movlw	1
 20068  003530  6E2A               	movwf	?_inputHandler,c
 20069                           
 20070                           ;UI.c: 467: }
 20071  003532  0012               	return	
 20072  003534                     i2l7196:
 20073  003534  507D               	movf	_input,w,c	;volatile
 20074                           
 20075                           ; Switch size 1, requested type "space"
 20076                           ; Number of cases is 7, Range of values is 49 to 68
 20077                           ; switch strategies available:
 20078                           ; Name         Instructions Cycles
 20079                           ; simple_byte           22    12 (average)
 20080                           ;	Chosen strategy is simple_byte
 20081  003536  0A31               	xorlw	49	; case 49
 20082  003538  B4D8               	btfsc	status,2,c
 20083  00353A  D789               	goto	i2l7126
 20084  00353C  0A03               	xorlw	3	; case 50
 20085  00353E  B4D8               	btfsc	status,2,c
 20086  003540  D799               	goto	i2l7140
 20087  003542  0A01               	xorlw	1	; case 51
 20088  003544  B4D8               	btfsc	status,2,c
 20089  003546  D7BA               	goto	i2l7160
 20090  003548  0A72               	xorlw	114	; case 65
 20091  00354A  B4D8               	btfsc	status,2,c
 20092  00354C  D7CA               	goto	i2l7174
 20093  00354E  0A03               	xorlw	3	; case 66
 20094  003550  B4D8               	btfsc	status,2,c
 20095  003552  D7D0               	goto	i2l7178
 20096  003554  0A01               	xorlw	1	; case 67
 20097  003556  B4D8               	btfsc	status,2,c
 20098  003558  D7D6               	goto	i2l7182
 20099  00355A  0A07               	xorlw	7	; case 68
 20100  00355C  B4D8               	btfsc	status,2,c
 20101  00355E  D7DC               	goto	i2l7186
 20102  003560  D7E4               	goto	i2l7190
 20103  003562                     __end_of_inputHandler:
 20104                           	opt stack 0
 20105                           pclatu	equ	0xFFB
 20106                           pclath	equ	0xFFA
 20107                           tblptru	equ	0xFF8
 20108                           tblptrh	equ	0xFF7
 20109                           tblptrl	equ	0xFF6
 20110                           tablat	equ	0xFF5
 20111                           prodh	equ	0xFF4
 20112                           prodl	equ	0xFF3
 20113                           intcon	equ	0xFF2
 20114                           intcon2	equ	0xFF1
 20115                           intcon3	equ	0xFF0
 20116                           indf0	equ	0xFEF
 20117                           postinc0	equ	0xFEE
 20118                           fsr0h	equ	0xFEA
 20119                           fsr0l	equ	0xFE9
 20120                           wreg	equ	0xFE8
 20121                           postdec1	equ	0xFE5
 20122                           fsr1h	equ	0xFE2
 20123                           fsr1l	equ	0xFE1
 20124                           indf2	equ	0xFDF
 20125                           postinc2	equ	0xFDE
 20126                           postdec2	equ	0xFDD
 20127                           fsr2h	equ	0xFDA
 20128                           fsr2l	equ	0xFD9
 20129                           status	equ	0xFD8
 20130                           
 20131 ;; *************** function i2_change_state_to_menu_22 *****************
 20132 ;; Defined at:
 20133 ;;		line 501 in file "UI.c"
 20134 ;; Parameters:    Size  Location     Type
 20135 ;;		None
 20136 ;; Auto vars:     Size  Location     Type
 20137 ;;		None
 20138 ;; Return value:  Size  Location     Type
 20139 ;;                  1    wreg      void 
 20140 ;; Registers used:
 20141 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20142 ;; Tracked objects:
 20143 ;;		On entry : 0/0
 20144 ;;		On exit  : 0/0
 20145 ;;		Unchanged: 0/0
 20146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20151 ;;Total ram usage:        0 bytes
 20152 ;; Hardware stack levels used:    1
 20153 ;; Hardware stack levels required when called:    3
 20154 ;; This function calls:
 20155 ;;		i2_lcdInst
 20156 ;;		i2_printf
 20157 ;; This function is called by:
 20158 ;;		_updateMenu
 20159 ;;		_inputHandler
 20160 ;; This function uses a non-reentrant model
 20161 ;;
 20162                           
 20163                           	psect	text67
 20164  004F40                     __ptext67:
 20165                           	opt stack 0
 20166  004F40                     i2_change_state_to_menu_22:
 20167                           	opt stack 19
 20168                           
 20169                           ;UI.c: 502: cur_state = 22;
 20170                           
 20171                           ;incstack = 0
 20172  004F40  0E00               	movlw	0
 20173  004F42  0100               	movlb	0	; () banked
 20174  004F44  6FED               	movwf	(_cur_state+1)& (0+255),b
 20175  004F46  0E16               	movlw	22
 20176  004F48  6FEC               	movwf	_cur_state& (0+255),b
 20177                           
 20178                           ; BSR set to: 0
 20179                           ;UI.c: 504: lcdInst(0b10000000);;
 20180  004F4A  0E80               	movlw	128
 20181  004F4C  ECD3  F029         	call	i2_lcdInst
 20182                           
 20183                           ;UI.c: 505: printf("2. SORT        <");
 20184  004F50  0EC4               	movlw	low STR_34
 20185  004F52  6E0D               	movwf	i2printf@f,c
 20186  004F54  0EFD               	movlw	high STR_34
 20187  004F56  6E0E               	movwf	i2printf@f+1,c
 20188  004F58  ECF9  F00E         	call	i2_printf	;wreg free
 20189                           
 20190                           ;UI.c: 506: lcdInst(0b11000000);;
 20191  004F5C  0EC0               	movlw	192
 20192  004F5E  ECD3  F029         	call	i2_lcdInst
 20193                           
 20194                           ;UI.c: 507: printf("3. LOGS         ");
 20195  004F62  0E09               	movlw	low STR_36
 20196  004F64  6E0D               	movwf	i2printf@f,c
 20197  004F66  0EFD               	movlw	high STR_36
 20198  004F68  6E0E               	movwf	i2printf@f+1,c
 20199  004F6A  ECF9  F00E         	call	i2_printf	;wreg free
 20200  004F6E  0012               	return		;funcret
 20201  004F70                     __end_ofi2_change_state_to_menu_22:
 20202                           	opt stack 0
 20203                           pclatu	equ	0xFFB
 20204                           pclath	equ	0xFFA
 20205                           tblptru	equ	0xFF8
 20206                           tblptrh	equ	0xFF7
 20207                           tblptrl	equ	0xFF6
 20208                           tablat	equ	0xFF5
 20209                           prodh	equ	0xFF4
 20210                           prodl	equ	0xFF3
 20211                           intcon	equ	0xFF2
 20212                           intcon2	equ	0xFF1
 20213                           intcon3	equ	0xFF0
 20214                           indf0	equ	0xFEF
 20215                           postinc0	equ	0xFEE
 20216                           fsr0h	equ	0xFEA
 20217                           fsr0l	equ	0xFE9
 20218                           wreg	equ	0xFE8
 20219                           postdec1	equ	0xFE5
 20220                           fsr1h	equ	0xFE2
 20221                           fsr1l	equ	0xFE1
 20222                           indf2	equ	0xFDF
 20223                           postinc2	equ	0xFDE
 20224                           postdec2	equ	0xFDD
 20225                           fsr2h	equ	0xFDA
 20226                           fsr2l	equ	0xFD9
 20227                           status	equ	0xFD8
 20228                           
 20229 ;; *************** function i2_change_state_to_menu_12 *****************
 20230 ;; Defined at:
 20231 ;;		line 493 in file "UI.c"
 20232 ;; Parameters:    Size  Location     Type
 20233 ;;		None
 20234 ;; Auto vars:     Size  Location     Type
 20235 ;;		None
 20236 ;; Return value:  Size  Location     Type
 20237 ;;                  1    wreg      void 
 20238 ;; Registers used:
 20239 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20240 ;; Tracked objects:
 20241 ;;		On entry : 0/0
 20242 ;;		On exit  : 0/0
 20243 ;;		Unchanged: 0/0
 20244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20249 ;;Total ram usage:        0 bytes
 20250 ;; Hardware stack levels used:    1
 20251 ;; Hardware stack levels required when called:    3
 20252 ;; This function calls:
 20253 ;;		i2_lcdInst
 20254 ;;		i2_printf
 20255 ;; This function is called by:
 20256 ;;		_updateMenu
 20257 ;;		_inputHandler
 20258 ;; This function uses a non-reentrant model
 20259 ;;
 20260                           
 20261                           	psect	text68
 20262  004F70                     __ptext68:
 20263                           	opt stack 0
 20264  004F70                     i2_change_state_to_menu_12:
 20265                           	opt stack 19
 20266                           
 20267                           ;UI.c: 494: cur_state = 12;
 20268                           
 20269                           ;incstack = 0
 20270  004F70  0E00               	movlw	0
 20271  004F72  0100               	movlb	0	; () banked
 20272  004F74  6FED               	movwf	(_cur_state+1)& (0+255),b
 20273  004F76  0E0C               	movlw	12
 20274  004F78  6FEC               	movwf	_cur_state& (0+255),b
 20275                           
 20276                           ; BSR set to: 0
 20277                           ;UI.c: 496: lcdInst(0b10000000);;
 20278  004F7A  0E80               	movlw	128
 20279  004F7C  ECD3  F029         	call	i2_lcdInst
 20280                           
 20281                           ;UI.c: 497: printf("1. DATE/TIME    ");
 20282  004F80  0E2B               	movlw	low STR_33
 20283  004F82  6E0D               	movwf	i2printf@f,c
 20284  004F84  0EFD               	movlw	high STR_33
 20285  004F86  6E0E               	movwf	i2printf@f+1,c
 20286  004F88  ECF9  F00E         	call	i2_printf	;wreg free
 20287                           
 20288                           ;UI.c: 498: lcdInst(0b11000000);;
 20289  004F8C  0EC0               	movlw	192
 20290  004F8E  ECD3  F029         	call	i2_lcdInst
 20291                           
 20292                           ;UI.c: 499: printf("2. SORT        <");
 20293  004F92  0EC4               	movlw	low STR_34
 20294  004F94  6E0D               	movwf	i2printf@f,c
 20295  004F96  0EFD               	movlw	high STR_34
 20296  004F98  6E0E               	movwf	i2printf@f+1,c
 20297  004F9A  ECF9  F00E         	call	i2_printf	;wreg free
 20298  004F9E  0012               	return		;funcret
 20299  004FA0                     __end_ofi2_change_state_to_menu_12:
 20300                           	opt stack 0
 20301                           pclatu	equ	0xFFB
 20302                           pclath	equ	0xFFA
 20303                           tblptru	equ	0xFF8
 20304                           tblptrh	equ	0xFF7
 20305                           tblptrl	equ	0xFF6
 20306                           tablat	equ	0xFF5
 20307                           prodh	equ	0xFF4
 20308                           prodl	equ	0xFF3
 20309                           intcon	equ	0xFF2
 20310                           intcon2	equ	0xFF1
 20311                           intcon3	equ	0xFF0
 20312                           indf0	equ	0xFEF
 20313                           postinc0	equ	0xFEE
 20314                           fsr0h	equ	0xFEA
 20315                           fsr0l	equ	0xFE9
 20316                           wreg	equ	0xFE8
 20317                           postdec1	equ	0xFE5
 20318                           fsr1h	equ	0xFE2
 20319                           fsr1l	equ	0xFE1
 20320                           indf2	equ	0xFDF
 20321                           postinc2	equ	0xFDE
 20322                           postdec2	equ	0xFDD
 20323                           fsr2h	equ	0xFDA
 20324                           fsr2l	equ	0xFD9
 20325                           status	equ	0xFD8
 20326                           
 20327 ;; *************** function _change_state_to_menu_23 *****************
 20328 ;; Defined at:
 20329 ;;		line 509 in file "UI.c"
 20330 ;; Parameters:    Size  Location     Type
 20331 ;;		None
 20332 ;; Auto vars:     Size  Location     Type
 20333 ;;		None
 20334 ;; Return value:  Size  Location     Type
 20335 ;;                  1    wreg      void 
 20336 ;; Registers used:
 20337 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20338 ;; Tracked objects:
 20339 ;;		On entry : 0/0
 20340 ;;		On exit  : 0/0
 20341 ;;		Unchanged: 0/0
 20342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20346 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20347 ;;Total ram usage:        0 bytes
 20348 ;; Hardware stack levels used:    1
 20349 ;; Hardware stack levels required when called:    3
 20350 ;; This function calls:
 20351 ;;		i2_lcdInst
 20352 ;;		i2_printf
 20353 ;; This function is called by:
 20354 ;;		_updateMenu
 20355 ;;		_inputHandler
 20356 ;; This function uses a non-reentrant model
 20357 ;;
 20358                           
 20359                           	psect	text69
 20360  004FA0                     __ptext69:
 20361                           	opt stack 0
 20362  004FA0                     _change_state_to_menu_23:
 20363                           	opt stack 18
 20364                           
 20365                           ;UI.c: 510: cur_state = 23;
 20366                           
 20367                           ;incstack = 0
 20368  004FA0  0E00               	movlw	0
 20369  004FA2  0100               	movlb	0	; () banked
 20370  004FA4  6FED               	movwf	(_cur_state+1)& (0+255),b
 20371  004FA6  0E17               	movlw	23
 20372  004FA8  6FEC               	movwf	_cur_state& (0+255),b
 20373                           
 20374                           ; BSR set to: 0
 20375                           ;UI.c: 512: lcdInst(0b10000000);;
 20376  004FAA  0E80               	movlw	128
 20377  004FAC  ECD3  F029         	call	i2_lcdInst
 20378                           
 20379                           ;UI.c: 513: printf("2. SORT         ");
 20380  004FB0  0E1A               	movlw	low STR_32
 20381  004FB2  6E0D               	movwf	i2printf@f,c
 20382  004FB4  0EFD               	movlw	high STR_32
 20383  004FB6  6E0E               	movwf	i2printf@f+1,c
 20384  004FB8  ECF9  F00E         	call	i2_printf	;wreg free
 20385                           
 20386                           ;UI.c: 514: lcdInst(0b11000000);;
 20387  004FBC  0EC0               	movlw	192
 20388  004FBE  ECD3  F029         	call	i2_lcdInst
 20389                           
 20390                           ;UI.c: 515: printf("3. LOGS        <");
 20391  004FC2  0EB3               	movlw	low STR_38
 20392  004FC4  6E0D               	movwf	i2printf@f,c
 20393  004FC6  0EFD               	movlw	high STR_38
 20394  004FC8  6E0E               	movwf	i2printf@f+1,c
 20395  004FCA  ECF9  F00E         	call	i2_printf	;wreg free
 20396  004FCE  0012               	return		;funcret
 20397  004FD0                     __end_of_change_state_to_menu_23:
 20398                           	opt stack 0
 20399                           pclatu	equ	0xFFB
 20400                           pclath	equ	0xFFA
 20401                           tblptru	equ	0xFF8
 20402                           tblptrh	equ	0xFF7
 20403                           tblptrl	equ	0xFF6
 20404                           tablat	equ	0xFF5
 20405                           prodh	equ	0xFF4
 20406                           prodl	equ	0xFF3
 20407                           intcon	equ	0xFF2
 20408                           intcon2	equ	0xFF1
 20409                           intcon3	equ	0xFF0
 20410                           indf0	equ	0xFEF
 20411                           postinc0	equ	0xFEE
 20412                           fsr0h	equ	0xFEA
 20413                           fsr0l	equ	0xFE9
 20414                           wreg	equ	0xFE8
 20415                           postdec1	equ	0xFE5
 20416                           fsr1h	equ	0xFE2
 20417                           fsr1l	equ	0xFE1
 20418                           indf2	equ	0xFDF
 20419                           postinc2	equ	0xFDE
 20420                           postdec2	equ	0xFDD
 20421                           fsr2h	equ	0xFDA
 20422                           fsr2l	equ	0xFD9
 20423                           status	equ	0xFD8
 20424                           
 20425 ;; *************** function _change_state_to_menu_11 *****************
 20426 ;; Defined at:
 20427 ;;		line 485 in file "UI.c"
 20428 ;; Parameters:    Size  Location     Type
 20429 ;;		None
 20430 ;; Auto vars:     Size  Location     Type
 20431 ;;		None
 20432 ;; Return value:  Size  Location     Type
 20433 ;;                  1    wreg      void 
 20434 ;; Registers used:
 20435 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20436 ;; Tracked objects:
 20437 ;;		On entry : 0/0
 20438 ;;		On exit  : 0/0
 20439 ;;		Unchanged: 0/0
 20440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20445 ;;Total ram usage:        0 bytes
 20446 ;; Hardware stack levels used:    1
 20447 ;; Hardware stack levels required when called:    3
 20448 ;; This function calls:
 20449 ;;		i2_lcdInst
 20450 ;;		i2_printf
 20451 ;; This function is called by:
 20452 ;;		_updateMenu
 20453 ;;		_inputHandler
 20454 ;; This function uses a non-reentrant model
 20455 ;;
 20456                           
 20457                           	psect	text70
 20458  004FD0                     __ptext70:
 20459                           	opt stack 0
 20460  004FD0                     _change_state_to_menu_11:
 20461                           	opt stack 18
 20462                           
 20463                           ;UI.c: 486: cur_state = 11;
 20464                           
 20465                           ;incstack = 0
 20466  004FD0  0E00               	movlw	0
 20467  004FD2  0100               	movlb	0	; () banked
 20468  004FD4  6FED               	movwf	(_cur_state+1)& (0+255),b
 20469  004FD6  0E0B               	movlw	11
 20470  004FD8  6FEC               	movwf	_cur_state& (0+255),b
 20471                           
 20472                           ; BSR set to: 0
 20473                           ;UI.c: 488: lcdInst(0b10000000);;
 20474  004FDA  0E80               	movlw	128
 20475  004FDC  ECD3  F029         	call	i2_lcdInst
 20476                           
 20477                           ;UI.c: 489: printf("1. DATE/TIME   <");
 20478  004FE0  0ED5               	movlw	low STR_31
 20479  004FE2  6E0D               	movwf	i2printf@f,c
 20480  004FE4  0EFD               	movlw	high STR_31
 20481  004FE6  6E0E               	movwf	i2printf@f+1,c
 20482  004FE8  ECF9  F00E         	call	i2_printf	;wreg free
 20483                           
 20484                           ;UI.c: 490: lcdInst(0b11000000);;
 20485  004FEC  0EC0               	movlw	192
 20486  004FEE  ECD3  F029         	call	i2_lcdInst
 20487                           
 20488                           ;UI.c: 491: printf("2. SORT         ");
 20489  004FF2  0E1A               	movlw	low STR_32
 20490  004FF4  6E0D               	movwf	i2printf@f,c
 20491  004FF6  0EFD               	movlw	high STR_32
 20492  004FF8  6E0E               	movwf	i2printf@f+1,c
 20493  004FFA  ECF9  F00E         	call	i2_printf	;wreg free
 20494  004FFE  0012               	return		;funcret
 20495  005000                     __end_of_change_state_to_menu_11:
 20496                           	opt stack 0
 20497                           pclatu	equ	0xFFB
 20498                           pclath	equ	0xFFA
 20499                           tblptru	equ	0xFF8
 20500                           tblptrh	equ	0xFF7
 20501                           tblptrl	equ	0xFF6
 20502                           tablat	equ	0xFF5
 20503                           prodh	equ	0xFF4
 20504                           prodl	equ	0xFF3
 20505                           intcon	equ	0xFF2
 20506                           intcon2	equ	0xFF1
 20507                           intcon3	equ	0xFF0
 20508                           indf0	equ	0xFEF
 20509                           postinc0	equ	0xFEE
 20510                           fsr0h	equ	0xFEA
 20511                           fsr0l	equ	0xFE9
 20512                           wreg	equ	0xFE8
 20513                           postdec1	equ	0xFE5
 20514                           fsr1h	equ	0xFE2
 20515                           fsr1l	equ	0xFE1
 20516                           indf2	equ	0xFDF
 20517                           postinc2	equ	0xFDE
 20518                           postdec2	equ	0xFDD
 20519                           fsr2h	equ	0xFDA
 20520                           fsr2l	equ	0xFD9
 20521                           status	equ	0xFD8
 20522                           
 20523 ;; *************** function _change_state_to_logs_34 *****************
 20524 ;; Defined at:
 20525 ;;		line 552 in file "UI.c"
 20526 ;; Parameters:    Size  Location     Type
 20527 ;;		None
 20528 ;; Auto vars:     Size  Location     Type
 20529 ;;		None
 20530 ;; Return value:  Size  Location     Type
 20531 ;;                  1    wreg      void 
 20532 ;; Registers used:
 20533 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20534 ;; Tracked objects:
 20535 ;;		On entry : 0/0
 20536 ;;		On exit  : 0/0
 20537 ;;		Unchanged: 0/0
 20538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20543 ;;Total ram usage:        0 bytes
 20544 ;; Hardware stack levels used:    1
 20545 ;; Hardware stack levels required when called:    3
 20546 ;; This function calls:
 20547 ;;		i2_lcdInst
 20548 ;;		i2_printf
 20549 ;; This function is called by:
 20550 ;;		_updateMenu
 20551 ;;		_inputHandler
 20552 ;; This function uses a non-reentrant model
 20553 ;;
 20554                           
 20555                           	psect	text71
 20556  005000                     __ptext71:
 20557                           	opt stack 0
 20558  005000                     _change_state_to_logs_34:
 20559                           	opt stack 18
 20560                           
 20561                           ;UI.c: 553: cur_state = 1034;
 20562                           
 20563                           ;incstack = 0
 20564  005000  0E04               	movlw	4
 20565  005002  0100               	movlb	0	; () banked
 20566  005004  6FED               	movwf	(_cur_state+1)& (0+255),b
 20567  005006  0E0A               	movlw	10
 20568  005008  6FEC               	movwf	_cur_state& (0+255),b
 20569                           
 20570                           ; BSR set to: 0
 20571                           ;UI.c: 554: lcdInst(0b10000000);;
 20572  00500A  0E80               	movlw	128
 20573  00500C  ECD3  F029         	call	i2_lcdInst
 20574                           
 20575                           ;UI.c: 555: printf("LOG 3           ");
 20576  005010  0EE7               	movlw	low STR_44
 20577  005012  6E0D               	movwf	i2printf@f,c
 20578  005014  0EFC               	movlw	high STR_44
 20579  005016  6E0E               	movwf	i2printf@f+1,c
 20580  005018  ECF9  F00E         	call	i2_printf	;wreg free
 20581                           
 20582                           ;UI.c: 556: lcdInst(0b11000000);;
 20583  00501C  0EC0               	movlw	192
 20584  00501E  ECD3  F029         	call	i2_lcdInst
 20585                           
 20586                           ;UI.c: 557: printf("LOG 4          <");
 20587  005022  0EA2               	movlw	low STR_50
 20588  005024  6E0D               	movwf	i2printf@f,c
 20589  005026  0EFD               	movlw	high STR_50
 20590  005028  6E0E               	movwf	i2printf@f+1,c
 20591  00502A  ECF9  F00E         	call	i2_printf	;wreg free
 20592  00502E  0012               	return		;funcret
 20593  005030                     __end_of_change_state_to_logs_34:
 20594                           	opt stack 0
 20595                           pclatu	equ	0xFFB
 20596                           pclath	equ	0xFFA
 20597                           tblptru	equ	0xFF8
 20598                           tblptrh	equ	0xFF7
 20599                           tblptrl	equ	0xFF6
 20600                           tablat	equ	0xFF5
 20601                           prodh	equ	0xFF4
 20602                           prodl	equ	0xFF3
 20603                           intcon	equ	0xFF2
 20604                           intcon2	equ	0xFF1
 20605                           intcon3	equ	0xFF0
 20606                           indf0	equ	0xFEF
 20607                           postinc0	equ	0xFEE
 20608                           fsr0h	equ	0xFEA
 20609                           fsr0l	equ	0xFE9
 20610                           wreg	equ	0xFE8
 20611                           postdec1	equ	0xFE5
 20612                           fsr1h	equ	0xFE2
 20613                           fsr1l	equ	0xFE1
 20614                           indf2	equ	0xFDF
 20615                           postinc2	equ	0xFDE
 20616                           postdec2	equ	0xFDD
 20617                           fsr2h	equ	0xFDA
 20618                           fsr2l	equ	0xFD9
 20619                           status	equ	0xFD8
 20620                           
 20621 ;; *************** function _change_state_to_logs_33 *****************
 20622 ;; Defined at:
 20623 ;;		line 545 in file "UI.c"
 20624 ;; Parameters:    Size  Location     Type
 20625 ;;		None
 20626 ;; Auto vars:     Size  Location     Type
 20627 ;;		None
 20628 ;; Return value:  Size  Location     Type
 20629 ;;                  1    wreg      void 
 20630 ;; Registers used:
 20631 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20632 ;; Tracked objects:
 20633 ;;		On entry : 0/0
 20634 ;;		On exit  : 0/0
 20635 ;;		Unchanged: 0/0
 20636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20641 ;;Total ram usage:        0 bytes
 20642 ;; Hardware stack levels used:    1
 20643 ;; Hardware stack levels required when called:    3
 20644 ;; This function calls:
 20645 ;;		i2_lcdInst
 20646 ;;		i2_printf
 20647 ;; This function is called by:
 20648 ;;		_updateMenu
 20649 ;;		_inputHandler
 20650 ;; This function uses a non-reentrant model
 20651 ;;
 20652                           
 20653                           	psect	text72
 20654  005030                     __ptext72:
 20655                           	opt stack 0
 20656  005030                     _change_state_to_logs_33:
 20657                           	opt stack 18
 20658                           
 20659                           ;UI.c: 546: cur_state = 1033;
 20660                           
 20661                           ;incstack = 0
 20662  005030  0E04               	movlw	4
 20663  005032  0100               	movlb	0	; () banked
 20664  005034  6FED               	movwf	(_cur_state+1)& (0+255),b
 20665  005036  0E09               	movlw	9
 20666  005038  6FEC               	movwf	_cur_state& (0+255),b
 20667                           
 20668                           ; BSR set to: 0
 20669                           ;UI.c: 547: lcdInst(0b10000000);;
 20670  00503A  0E80               	movlw	128
 20671  00503C  ECD3  F029         	call	i2_lcdInst
 20672                           
 20673                           ;UI.c: 548: printf("LOG 3          <");
 20674  005040  0E91               	movlw	low STR_46
 20675  005042  6E0D               	movwf	i2printf@f,c
 20676  005044  0EFD               	movlw	high STR_46
 20677  005046  6E0E               	movwf	i2printf@f+1,c
 20678  005048  ECF9  F00E         	call	i2_printf	;wreg free
 20679                           
 20680                           ;UI.c: 549: lcdInst(0b11000000);;
 20681  00504C  0EC0               	movlw	192
 20682  00504E  ECD3  F029         	call	i2_lcdInst
 20683                           
 20684                           ;UI.c: 550: printf("LOG 4           ");
 20685  005052  0EF8               	movlw	low STR_48
 20686  005054  6E0D               	movwf	i2printf@f,c
 20687  005056  0EFC               	movlw	high STR_48
 20688  005058  6E0E               	movwf	i2printf@f+1,c
 20689  00505A  ECF9  F00E         	call	i2_printf	;wreg free
 20690  00505E  0012               	return		;funcret
 20691  005060                     __end_of_change_state_to_logs_33:
 20692                           	opt stack 0
 20693                           pclatu	equ	0xFFB
 20694                           pclath	equ	0xFFA
 20695                           tblptru	equ	0xFF8
 20696                           tblptrh	equ	0xFF7
 20697                           tblptrl	equ	0xFF6
 20698                           tablat	equ	0xFF5
 20699                           prodh	equ	0xFF4
 20700                           prodl	equ	0xFF3
 20701                           intcon	equ	0xFF2
 20702                           intcon2	equ	0xFF1
 20703                           intcon3	equ	0xFF0
 20704                           indf0	equ	0xFEF
 20705                           postinc0	equ	0xFEE
 20706                           fsr0h	equ	0xFEA
 20707                           fsr0l	equ	0xFE9
 20708                           wreg	equ	0xFE8
 20709                           postdec1	equ	0xFE5
 20710                           fsr1h	equ	0xFE2
 20711                           fsr1l	equ	0xFE1
 20712                           indf2	equ	0xFDF
 20713                           postinc2	equ	0xFDE
 20714                           postdec2	equ	0xFDD
 20715                           fsr2h	equ	0xFDA
 20716                           fsr2l	equ	0xFD9
 20717                           status	equ	0xFD8
 20718                           
 20719 ;; *************** function _change_state_to_logs_23 *****************
 20720 ;; Defined at:
 20721 ;;		line 538 in file "UI.c"
 20722 ;; Parameters:    Size  Location     Type
 20723 ;;		None
 20724 ;; Auto vars:     Size  Location     Type
 20725 ;;		None
 20726 ;; Return value:  Size  Location     Type
 20727 ;;                  1    wreg      void 
 20728 ;; Registers used:
 20729 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20730 ;; Tracked objects:
 20731 ;;		On entry : 0/0
 20732 ;;		On exit  : 0/0
 20733 ;;		Unchanged: 0/0
 20734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20738 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20739 ;;Total ram usage:        0 bytes
 20740 ;; Hardware stack levels used:    1
 20741 ;; Hardware stack levels required when called:    3
 20742 ;; This function calls:
 20743 ;;		i2_lcdInst
 20744 ;;		i2_printf
 20745 ;; This function is called by:
 20746 ;;		_updateMenu
 20747 ;;		_inputHandler
 20748 ;; This function uses a non-reentrant model
 20749 ;;
 20750                           
 20751                           	psect	text73
 20752  00511E                     __ptext73:
 20753                           	opt stack 0
 20754  00511E                     _change_state_to_logs_23:
 20755                           	opt stack 18
 20756                           
 20757                           ;UI.c: 539: cur_state = 1023;
 20758                           
 20759                           ;incstack = 0
 20760  00511E  0E03               	movlw	3
 20761  005120  0100               	movlb	0	; () banked
 20762  005122  6FED               	movwf	(_cur_state+1)& (0+255),b
 20763  005124  69EC               	setf	_cur_state& (0+255),b
 20764                           
 20765                           ; BSR set to: 0
 20766                           ;UI.c: 540: lcdInst(0b10000000);;
 20767  005126  0E80               	movlw	128
 20768  005128  ECD3  F029         	call	i2_lcdInst
 20769                           
 20770                           ;UI.c: 541: printf("LOG 2           ");
 20771  00512C  0ED6               	movlw	low STR_40
 20772  00512E  6E0D               	movwf	i2printf@f,c
 20773  005130  0EFC               	movlw	high STR_40
 20774  005132  6E0E               	movwf	i2printf@f+1,c
 20775  005134  ECF9  F00E         	call	i2_printf	;wreg free
 20776                           
 20777                           ;UI.c: 542: lcdInst(0b11000000);;
 20778  005138  0EC0               	movlw	192
 20779  00513A  ECD3  F029         	call	i2_lcdInst
 20780                           
 20781                           ;UI.c: 543: printf("LOG 3          <");
 20782  00513E  0E91               	movlw	low STR_46
 20783  005140  6E0D               	movwf	i2printf@f,c
 20784  005142  0EFD               	movlw	high STR_46
 20785  005144  6E0E               	movwf	i2printf@f+1,c
 20786  005146  ECF9  F00E         	call	i2_printf	;wreg free
 20787  00514A  0012               	return		;funcret
 20788  00514C                     __end_of_change_state_to_logs_23:
 20789                           	opt stack 0
 20790                           pclatu	equ	0xFFB
 20791                           pclath	equ	0xFFA
 20792                           tblptru	equ	0xFF8
 20793                           tblptrh	equ	0xFF7
 20794                           tblptrl	equ	0xFF6
 20795                           tablat	equ	0xFF5
 20796                           prodh	equ	0xFF4
 20797                           prodl	equ	0xFF3
 20798                           intcon	equ	0xFF2
 20799                           intcon2	equ	0xFF1
 20800                           intcon3	equ	0xFF0
 20801                           indf0	equ	0xFEF
 20802                           postinc0	equ	0xFEE
 20803                           fsr0h	equ	0xFEA
 20804                           fsr0l	equ	0xFE9
 20805                           wreg	equ	0xFE8
 20806                           postdec1	equ	0xFE5
 20807                           fsr1h	equ	0xFE2
 20808                           fsr1l	equ	0xFE1
 20809                           indf2	equ	0xFDF
 20810                           postinc2	equ	0xFDE
 20811                           postdec2	equ	0xFDD
 20812                           fsr2h	equ	0xFDA
 20813                           fsr2l	equ	0xFD9
 20814                           status	equ	0xFD8
 20815                           
 20816 ;; *************** function _change_state_to_logs_22 *****************
 20817 ;; Defined at:
 20818 ;;		line 531 in file "UI.c"
 20819 ;; Parameters:    Size  Location     Type
 20820 ;;		None
 20821 ;; Auto vars:     Size  Location     Type
 20822 ;;		None
 20823 ;; Return value:  Size  Location     Type
 20824 ;;                  1    wreg      void 
 20825 ;; Registers used:
 20826 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20827 ;; Tracked objects:
 20828 ;;		On entry : 0/0
 20829 ;;		On exit  : 0/0
 20830 ;;		Unchanged: 0/0
 20831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20836 ;;Total ram usage:        0 bytes
 20837 ;; Hardware stack levels used:    1
 20838 ;; Hardware stack levels required when called:    3
 20839 ;; This function calls:
 20840 ;;		i2_lcdInst
 20841 ;;		i2_printf
 20842 ;; This function is called by:
 20843 ;;		_updateMenu
 20844 ;;		_inputHandler
 20845 ;; This function uses a non-reentrant model
 20846 ;;
 20847                           
 20848                           	psect	text74
 20849  005060                     __ptext74:
 20850                           	opt stack 0
 20851  005060                     _change_state_to_logs_22:
 20852                           	opt stack 18
 20853                           
 20854                           ;UI.c: 532: cur_state = 1022;
 20855                           
 20856                           ;incstack = 0
 20857  005060  0E03               	movlw	3
 20858  005062  0100               	movlb	0	; () banked
 20859  005064  6FED               	movwf	(_cur_state+1)& (0+255),b
 20860  005066  0EFE               	movlw	254
 20861  005068  6FEC               	movwf	_cur_state& (0+255),b
 20862                           
 20863                           ; BSR set to: 0
 20864                           ;UI.c: 533: lcdInst(0b10000000);;
 20865  00506A  0E80               	movlw	128
 20866  00506C  ECD3  F029         	call	i2_lcdInst
 20867                           
 20868                           ;UI.c: 534: printf("LOG 2          <");
 20869  005070  0E80               	movlw	low STR_42
 20870  005072  6E0D               	movwf	i2printf@f,c
 20871  005074  0EFD               	movlw	high STR_42
 20872  005076  6E0E               	movwf	i2printf@f+1,c
 20873  005078  ECF9  F00E         	call	i2_printf	;wreg free
 20874                           
 20875                           ;UI.c: 535: lcdInst(0b11000000);;
 20876  00507C  0EC0               	movlw	192
 20877  00507E  ECD3  F029         	call	i2_lcdInst
 20878                           
 20879                           ;UI.c: 536: printf("LOG 3           ");
 20880  005082  0EE7               	movlw	low STR_44
 20881  005084  6E0D               	movwf	i2printf@f,c
 20882  005086  0EFC               	movlw	high STR_44
 20883  005088  6E0E               	movwf	i2printf@f+1,c
 20884  00508A  ECF9  F00E         	call	i2_printf	;wreg free
 20885  00508E  0012               	return		;funcret
 20886  005090                     __end_of_change_state_to_logs_22:
 20887                           	opt stack 0
 20888                           pclatu	equ	0xFFB
 20889                           pclath	equ	0xFFA
 20890                           tblptru	equ	0xFF8
 20891                           tblptrh	equ	0xFF7
 20892                           tblptrl	equ	0xFF6
 20893                           tablat	equ	0xFF5
 20894                           prodh	equ	0xFF4
 20895                           prodl	equ	0xFF3
 20896                           intcon	equ	0xFF2
 20897                           intcon2	equ	0xFF1
 20898                           intcon3	equ	0xFF0
 20899                           indf0	equ	0xFEF
 20900                           postinc0	equ	0xFEE
 20901                           fsr0h	equ	0xFEA
 20902                           fsr0l	equ	0xFE9
 20903                           wreg	equ	0xFE8
 20904                           postdec1	equ	0xFE5
 20905                           fsr1h	equ	0xFE2
 20906                           fsr1l	equ	0xFE1
 20907                           indf2	equ	0xFDF
 20908                           postinc2	equ	0xFDE
 20909                           postdec2	equ	0xFDD
 20910                           fsr2h	equ	0xFDA
 20911                           fsr2l	equ	0xFD9
 20912                           status	equ	0xFD8
 20913                           
 20914 ;; *************** function _change_state_to_logs_12 *****************
 20915 ;; Defined at:
 20916 ;;		line 524 in file "UI.c"
 20917 ;; Parameters:    Size  Location     Type
 20918 ;;		None
 20919 ;; Auto vars:     Size  Location     Type
 20920 ;;		None
 20921 ;; Return value:  Size  Location     Type
 20922 ;;                  1    wreg      void 
 20923 ;; Registers used:
 20924 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20925 ;; Tracked objects:
 20926 ;;		On entry : 0/0
 20927 ;;		On exit  : 0/0
 20928 ;;		Unchanged: 0/0
 20929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20934 ;;Total ram usage:        0 bytes
 20935 ;; Hardware stack levels used:    1
 20936 ;; Hardware stack levels required when called:    3
 20937 ;; This function calls:
 20938 ;;		i2_lcdInst
 20939 ;;		i2_printf
 20940 ;; This function is called by:
 20941 ;;		_updateMenu
 20942 ;;		_inputHandler
 20943 ;; This function uses a non-reentrant model
 20944 ;;
 20945                           
 20946                           	psect	text75
 20947  005090                     __ptext75:
 20948                           	opt stack 0
 20949  005090                     _change_state_to_logs_12:
 20950                           	opt stack 18
 20951                           
 20952                           ;UI.c: 525: cur_state = 1012;
 20953                           
 20954                           ;incstack = 0
 20955  005090  0E03               	movlw	3
 20956  005092  0100               	movlb	0	; () banked
 20957  005094  6FED               	movwf	(_cur_state+1)& (0+255),b
 20958  005096  0EF4               	movlw	244
 20959  005098  6FEC               	movwf	_cur_state& (0+255),b
 20960                           
 20961                           ; BSR set to: 0
 20962                           ;UI.c: 526: lcdInst(0b10000000);;
 20963  00509A  0E80               	movlw	128
 20964  00509C  ECD3  F029         	call	i2_lcdInst
 20965                           
 20966                           ;UI.c: 527: printf("LOG 1           ");
 20967  0050A0  0EC5               	movlw	low STR_41
 20968  0050A2  6E0D               	movwf	i2printf@f,c
 20969  0050A4  0EFC               	movlw	high STR_41
 20970  0050A6  6E0E               	movwf	i2printf@f+1,c
 20971  0050A8  ECF9  F00E         	call	i2_printf	;wreg free
 20972                           
 20973                           ;UI.c: 528: lcdInst(0b11000000);;
 20974  0050AC  0EC0               	movlw	192
 20975  0050AE  ECD3  F029         	call	i2_lcdInst
 20976                           
 20977                           ;UI.c: 529: printf("LOG 2          <");
 20978  0050B2  0E80               	movlw	low STR_42
 20979  0050B4  6E0D               	movwf	i2printf@f,c
 20980  0050B6  0EFD               	movlw	high STR_42
 20981  0050B8  6E0E               	movwf	i2printf@f+1,c
 20982  0050BA  ECF9  F00E         	call	i2_printf	;wreg free
 20983  0050BE  0012               	return		;funcret
 20984  0050C0                     __end_of_change_state_to_logs_12:
 20985                           	opt stack 0
 20986                           pclatu	equ	0xFFB
 20987                           pclath	equ	0xFFA
 20988                           tblptru	equ	0xFF8
 20989                           tblptrh	equ	0xFF7
 20990                           tblptrl	equ	0xFF6
 20991                           tablat	equ	0xFF5
 20992                           prodh	equ	0xFF4
 20993                           prodl	equ	0xFF3
 20994                           intcon	equ	0xFF2
 20995                           intcon2	equ	0xFF1
 20996                           intcon3	equ	0xFF0
 20997                           indf0	equ	0xFEF
 20998                           postinc0	equ	0xFEE
 20999                           fsr0h	equ	0xFEA
 21000                           fsr0l	equ	0xFE9
 21001                           wreg	equ	0xFE8
 21002                           postdec1	equ	0xFE5
 21003                           fsr1h	equ	0xFE2
 21004                           fsr1l	equ	0xFE1
 21005                           indf2	equ	0xFDF
 21006                           postinc2	equ	0xFDE
 21007                           postdec2	equ	0xFDD
 21008                           fsr2h	equ	0xFDA
 21009                           fsr2l	equ	0xFD9
 21010                           status	equ	0xFD8
 21011                           
 21012 ;; *************** function _change_state_to_logs_11 *****************
 21013 ;; Defined at:
 21014 ;;		line 517 in file "UI.c"
 21015 ;; Parameters:    Size  Location     Type
 21016 ;;		None
 21017 ;; Auto vars:     Size  Location     Type
 21018 ;;		None
 21019 ;; Return value:  Size  Location     Type
 21020 ;;                  1    wreg      void 
 21021 ;; Registers used:
 21022 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21023 ;; Tracked objects:
 21024 ;;		On entry : 0/0
 21025 ;;		On exit  : 0/0
 21026 ;;		Unchanged: 0/0
 21027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21031 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21032 ;;Total ram usage:        0 bytes
 21033 ;; Hardware stack levels used:    1
 21034 ;; Hardware stack levels required when called:    3
 21035 ;; This function calls:
 21036 ;;		i2_lcdInst
 21037 ;;		i2_printf
 21038 ;; This function is called by:
 21039 ;;		_updateMenu
 21040 ;;		_inputHandler
 21041 ;; This function uses a non-reentrant model
 21042 ;;
 21043                           
 21044                           	psect	text76
 21045  0050C0                     __ptext76:
 21046                           	opt stack 0
 21047  0050C0                     _change_state_to_logs_11:
 21048                           	opt stack 18
 21049                           
 21050                           ;UI.c: 518: cur_state = 1011;
 21051                           
 21052                           ;incstack = 0
 21053  0050C0  0E03               	movlw	3
 21054  0050C2  0100               	movlb	0	; () banked
 21055  0050C4  6FED               	movwf	(_cur_state+1)& (0+255),b
 21056  0050C6  0EF3               	movlw	243
 21057  0050C8  6FEC               	movwf	_cur_state& (0+255),b
 21058                           
 21059                           ; BSR set to: 0
 21060                           ;UI.c: 519: lcdInst(0b10000000);;
 21061  0050CA  0E80               	movlw	128
 21062  0050CC  ECD3  F029         	call	i2_lcdInst
 21063                           
 21064                           ;UI.c: 520: printf("LOG 1          <");
 21065  0050D0  0E6F               	movlw	low STR_39
 21066  0050D2  6E0D               	movwf	i2printf@f,c
 21067  0050D4  0EFD               	movlw	high STR_39
 21068  0050D6  6E0E               	movwf	i2printf@f+1,c
 21069  0050D8  ECF9  F00E         	call	i2_printf	;wreg free
 21070                           
 21071                           ;UI.c: 521: lcdInst(0b11000000);;
 21072  0050DC  0EC0               	movlw	192
 21073  0050DE  ECD3  F029         	call	i2_lcdInst
 21074                           
 21075                           ;UI.c: 522: printf("LOG 2           ");
 21076  0050E2  0ED6               	movlw	low STR_40
 21077  0050E4  6E0D               	movwf	i2printf@f,c
 21078  0050E6  0EFC               	movlw	high STR_40
 21079  0050E8  6E0E               	movwf	i2printf@f+1,c
 21080  0050EA  ECF9  F00E         	call	i2_printf	;wreg free
 21081  0050EE  0012               	return		;funcret
 21082  0050F0                     __end_of_change_state_to_logs_11:
 21083                           	opt stack 0
 21084                           pclatu	equ	0xFFB
 21085                           pclath	equ	0xFFA
 21086                           tblptru	equ	0xFF8
 21087                           tblptrh	equ	0xFF7
 21088                           tblptrl	equ	0xFF6
 21089                           tablat	equ	0xFF5
 21090                           prodh	equ	0xFF4
 21091                           prodl	equ	0xFF3
 21092                           intcon	equ	0xFF2
 21093                           intcon2	equ	0xFF1
 21094                           intcon3	equ	0xFF0
 21095                           indf0	equ	0xFEF
 21096                           postinc0	equ	0xFEE
 21097                           fsr0h	equ	0xFEA
 21098                           fsr0l	equ	0xFE9
 21099                           wreg	equ	0xFE8
 21100                           postdec1	equ	0xFE5
 21101                           fsr1h	equ	0xFE2
 21102                           fsr1l	equ	0xFE1
 21103                           indf2	equ	0xFDF
 21104                           postinc2	equ	0xFDE
 21105                           postdec2	equ	0xFDD
 21106                           fsr2h	equ	0xFDA
 21107                           fsr2l	equ	0xFD9
 21108                           status	equ	0xFD8
 21109                           
 21110 ;; *************** function _dispLogs *****************
 21111 ;; Defined at:
 21112 ;;		line 470 in file "UI.c"
 21113 ;; Parameters:    Size  Location     Type
 21114 ;;  myLog           2   17[COMRAM] int 
 21115 ;; Auto vars:     Size  Location     Type
 21116 ;;		None
 21117 ;; Return value:  Size  Location     Type
 21118 ;;                  1    wreg      void 
 21119 ;; Registers used:
 21120 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21121 ;; Tracked objects:
 21122 ;;		On entry : 0/0
 21123 ;;		On exit  : 0/0
 21124 ;;		Unchanged: 0/0
 21125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21126 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21129 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21130 ;;Total ram usage:        2 bytes
 21131 ;; Hardware stack levels used:    1
 21132 ;; Hardware stack levels required when called:    2
 21133 ;; This function calls:
 21134 ;;		_retrieveLog
 21135 ;; This function is called by:
 21136 ;;		_updateMenu
 21137 ;; This function uses a non-reentrant model
 21138 ;;
 21139                           
 21140                           	psect	text77
 21141  00526A                     __ptext77:
 21142                           	opt stack 0
 21143  00526A                     _dispLogs:
 21144                           	opt stack 20
 21145                           
 21146                           ;UI.c: 471: logstate = 1;
 21147                           
 21148                           ;incstack = 0
 21149  00526A  0E00               	movlw	0
 21150  00526C  0100               	movlb	0	; () banked
 21151  00526E  6FF9               	movwf	(_logstate+1)& (0+255),b
 21152  005270  0E01               	movlw	1
 21153  005272  6FF8               	movwf	_logstate& (0+255),b
 21154                           
 21155                           ; BSR set to: 0
 21156                           ;UI.c: 472: log = myLog;
 21157  005274  C012  F0F2         	movff	dispLogs@myLog,_log
 21158  005278  C013  F0F3         	movff	dispLogs@myLog+1,_log+1
 21159                           
 21160                           ; BSR set to: 0
 21161                           ;UI.c: 473: retrieveLog(myLog - 1);
 21162  00527C  0EFF               	movlw	255
 21163  00527E  2412               	addwf	dispLogs@myLog,w,c
 21164  005280  6E07               	movwf	retrieveLog@logNum,c
 21165  005282  0EFF               	movlw	255
 21166  005284  2013               	addwfc	dispLogs@myLog+1,w,c
 21167  005286  6E08               	movwf	retrieveLog@logNum+1,c
 21168  005288  ECCA  F01D         	call	_retrieveLog	;wreg free
 21169  00528C  0012               	return		;funcret
 21170  00528E                     __end_of_dispLogs:
 21171                           	opt stack 0
 21172                           pclatu	equ	0xFFB
 21173                           pclath	equ	0xFFA
 21174                           tblptru	equ	0xFF8
 21175                           tblptrh	equ	0xFF7
 21176                           tblptrl	equ	0xFF6
 21177                           tablat	equ	0xFF5
 21178                           prodh	equ	0xFF4
 21179                           prodl	equ	0xFF3
 21180                           intcon	equ	0xFF2
 21181                           intcon2	equ	0xFF1
 21182                           intcon3	equ	0xFF0
 21183                           indf0	equ	0xFEF
 21184                           postinc0	equ	0xFEE
 21185                           fsr0h	equ	0xFEA
 21186                           fsr0l	equ	0xFE9
 21187                           wreg	equ	0xFE8
 21188                           postdec1	equ	0xFE5
 21189                           fsr1h	equ	0xFE2
 21190                           fsr1l	equ	0xFE1
 21191                           indf2	equ	0xFDF
 21192                           postinc2	equ	0xFDE
 21193                           postdec2	equ	0xFDD
 21194                           fsr2h	equ	0xFDA
 21195                           fsr2l	equ	0xFD9
 21196                           status	equ	0xFD8
 21197                           
 21198 ;; *************** function _retrieveLog *****************
 21199 ;; Defined at:
 21200 ;;		line 134 in file "EEPROM.c"
 21201 ;; Parameters:    Size  Location     Type
 21202 ;;  logNum          2    6[COMRAM] int 
 21203 ;; Auto vars:     Size  Location     Type
 21204 ;;  i               2   13[COMRAM] int 
 21205 ;;  addr            2   15[COMRAM] unsigned short 
 21206 ;;  byte3           1   12[COMRAM] unsigned char 
 21207 ;;  byte2           1   11[COMRAM] unsigned char 
 21208 ;;  byte1           1   10[COMRAM] unsigned char 
 21209 ;; Return value:  Size  Location     Type
 21210 ;;                  1    wreg      void 
 21211 ;; Registers used:
 21212 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21213 ;; Tracked objects:
 21214 ;;		On entry : 0/0
 21215 ;;		On exit  : 0/0
 21216 ;;		Unchanged: 0/0
 21217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21218 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21219 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21220 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21221 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21222 ;;Total ram usage:       11 bytes
 21223 ;; Hardware stack levels used:    1
 21224 ;; Hardware stack levels required when called:    1
 21225 ;; This function calls:
 21226 ;;		i2_EEPROM_read
 21227 ;;		i2___wmul
 21228 ;; This function is called by:
 21229 ;;		_dispLogs
 21230 ;; This function uses a non-reentrant model
 21231 ;;
 21232                           
 21233                           	psect	text78
 21234  003B94                     __ptext78:
 21235                           	opt stack 0
 21236  003B94                     _retrieveLog:
 21237                           	opt stack 20
 21238                           
 21239                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 21240                           
 21241                           ;incstack = 0
 21242  003B94  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 21243  003B98  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 21244  003B9C  0E00               	movlw	0
 21245  003B9E  6E04               	movwf	i2___wmul@multiplicand+1,c
 21246  003BA0  0E0B               	movlw	11
 21247  003BA2  6E03               	movwf	i2___wmul@multiplicand,c
 21248  003BA4  EC0F  F029         	call	i2___wmul	;wreg free
 21249  003BA8  0E01               	movlw	1
 21250  003BAA  2401               	addwf	?i2___wmul,w,c
 21251  003BAC  6E10               	movwf	retrieveLog@addr,c
 21252  003BAE  0E00               	movlw	0
 21253  003BB0  2002               	addwfc	?i2___wmul+1,w,c
 21254  003BB2  6E11               	movwf	retrieveLog@addr+1,c
 21255                           
 21256                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 21257  003BB4  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21258  003BB8  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21259  003BBC  EC9F  F029         	call	i2_EEPROM_read	;wreg free
 21260  003BC0  6E0B               	movwf	retrieveLog@byte1,c
 21261                           
 21262                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 21263  003BC2  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 21264  003BC6  0E80               	movlw	128
 21265  003BC8  1609               	andwf	??_retrieveLog,f,c
 21266  003BCA  5009               	movf	??_retrieveLog,w,c
 21267  003BCC  0100               	movlb	0	; () banked
 21268  003BCE  6FF4               	movwf	_log_completion& (0+255),b
 21269  003BD0  6BF5               	clrf	(_log_completion+1)& (0+255),b
 21270                           
 21271                           ; BSR set to: 0
 21272                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 21273  003BD2  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 21274  003BD6  0E0F               	movlw	15
 21275  003BD8  1609               	andwf	??_retrieveLog,f,c
 21276  003BDA  5009               	movf	??_retrieveLog,w,c
 21277  003BDC  6E6B               	movwf	_log_count_total,c
 21278  003BDE  6A6C               	clrf	_log_count_total+1,c
 21279                           
 21280                           ; BSR set to: 0
 21281                           ;EEPROM.c: 146: addr++;
 21282  003BE0  4A10               	infsnz	retrieveLog@addr,f,c
 21283  003BE2  2A11               	incf	retrieveLog@addr+1,f,c
 21284                           
 21285                           ; BSR set to: 0
 21286                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 21287  003BE4  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21288  003BE8  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21289  003BEC  EC9F  F029         	call	i2_EEPROM_read	;wreg free
 21290  003BF0  6E0C               	movwf	retrieveLog@byte2,c
 21291                           
 21292                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 21293  003BF2  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 21294  003BF6  3A09               	swapf	??_retrieveLog,f,c
 21295  003BF8  0E0F               	movlw	15
 21296  003BFA  1609               	andwf	??_retrieveLog,f,c
 21297  003BFC  0E0F               	movlw	15
 21298  003BFE  1609               	andwf	??_retrieveLog,f,c
 21299  003C00  5009               	movf	??_retrieveLog,w,c
 21300  003C02  6E67               	movwf	_log_count_pop_no_tab,c
 21301  003C04  6A68               	clrf	_log_count_pop_no_tab+1,c
 21302                           
 21303                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 21304  003C06  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 21305  003C0A  0E0F               	movlw	15
 21306  003C0C  1609               	andwf	??_retrieveLog,f,c
 21307  003C0E  5009               	movf	??_retrieveLog,w,c
 21308  003C10  6E69               	movwf	_log_count_pop_w_tab,c
 21309  003C12  6A6A               	clrf	_log_count_pop_w_tab+1,c
 21310                           
 21311                           ;EEPROM.c: 152: addr++;
 21312  003C14  4A10               	infsnz	retrieveLog@addr,f,c
 21313  003C16  2A11               	incf	retrieveLog@addr+1,f,c
 21314                           
 21315                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 21316  003C18  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21317  003C1C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21318  003C20  EC9F  F029         	call	i2_EEPROM_read	;wreg free
 21319  003C24  6E0D               	movwf	retrieveLog@byte3,c
 21320                           
 21321                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 21322  003C26  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 21323  003C2A  3A09               	swapf	??_retrieveLog,f,c
 21324  003C2C  0E0F               	movlw	15
 21325  003C2E  1609               	andwf	??_retrieveLog,f,c
 21326  003C30  0E0F               	movlw	15
 21327  003C32  1609               	andwf	??_retrieveLog,f,c
 21328  003C34  5009               	movf	??_retrieveLog,w,c
 21329  003C36  6E65               	movwf	_log_count_can_w_lab,c
 21330  003C38  6A66               	clrf	_log_count_can_w_lab+1,c
 21331                           
 21332                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 21333  003C3A  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 21334  003C3E  0E0F               	movlw	15
 21335  003C40  1609               	andwf	??_retrieveLog,f,c
 21336  003C42  5009               	movf	??_retrieveLog,w,c
 21337  003C44  6E63               	movwf	_log_count_can_no_lab,c
 21338  003C46  6A64               	clrf	_log_count_can_no_lab+1,c
 21339                           
 21340                           ;EEPROM.c: 156: addr++;
 21341  003C48  4A10               	infsnz	retrieveLog@addr,f,c
 21342  003C4A  2A11               	incf	retrieveLog@addr+1,f,c
 21343                           
 21344                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 21345  003C4C  0E00               	movlw	0
 21346  003C4E  6E0F               	movwf	retrieveLog@i+1,c
 21347  003C50  0E00               	movlw	0
 21348  003C52  6E0E               	movwf	retrieveLog@i,c
 21349  003C54                     i2l6800:
 21350  003C54  BE0F               	btfsc	retrieveLog@i+1,7,c
 21351  003C56  D006               	goto	i2l6804
 21352  003C58  500F               	movf	retrieveLog@i+1,w,c
 21353  003C5A  E11E               	bnz	i2l6812
 21354  003C5C  0E07               	movlw	7
 21355  003C5E  5C0E               	subwf	retrieveLog@i,w,c
 21356  003C60  B0D8               	btfsc	status,0,c
 21357  003C62  D01A               	goto	i2l6812
 21358  003C64                     i2l6804:
 21359                           
 21360                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 21361  003C64  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21362  003C68  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21363  003C6C  EC9F  F029         	call	i2_EEPROM_read	;wreg free
 21364  003C70  6E09               	movwf	??_retrieveLog& (0+255),c
 21365  003C72  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 21366  003C74  90D8               	bcf	status,0,c
 21367  003C76  340E               	rlcf	retrieveLog@i,w,c
 21368  003C78  6ED9               	movwf	fsr2l,c
 21369  003C7A  340F               	rlcf	retrieveLog@i+1,w,c
 21370  003C7C  6EDA               	movwf	fsr2h,c
 21371  003C7E  0E00               	movlw	low _log_startTime
 21372  003C80  26D9               	addwf	fsr2l,f,c
 21373  003C82  0E01               	movlw	high _log_startTime
 21374  003C84  22DA               	addwfc	fsr2h,f,c
 21375  003C86  C009  FFDE         	movff	??_retrieveLog,postinc2
 21376  003C8A  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 21377                           
 21378                           ;EEPROM.c: 161: addr++;
 21379  003C8E  4A10               	infsnz	retrieveLog@addr,f,c
 21380  003C90  2A11               	incf	retrieveLog@addr+1,f,c
 21381  003C92  4A0E               	infsnz	retrieveLog@i,f,c
 21382  003C94  2A0F               	incf	retrieveLog@i+1,f,c
 21383  003C96  D7DE               	goto	i2l6800
 21384  003C98                     i2l6812:
 21385                           
 21386                           ;EEPROM.c: 162: }
 21387                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 21388  003C98  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21389  003C9C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21390  003CA0  EC9F  F029         	call	i2_EEPROM_read	;wreg free
 21391  003CA4  6E09               	movwf	??_retrieveLog& (0+255),c
 21392  003CA6  5009               	movf	??_retrieveLog,w,c
 21393  003CA8  0100               	movlb	0	; () banked
 21394  003CAA  6FF6               	movwf	_log_total_time& (0+255),b
 21395  003CAC  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 21396                           
 21397                           ; BSR set to: 0
 21398  003CAE  0012               	return		;funcret
 21399  003CB0                     __end_of_retrieveLog:
 21400                           	opt stack 0
 21401                           pclatu	equ	0xFFB
 21402                           pclath	equ	0xFFA
 21403                           tblptru	equ	0xFF8
 21404                           tblptrh	equ	0xFF7
 21405                           tblptrl	equ	0xFF6
 21406                           tablat	equ	0xFF5
 21407                           prodh	equ	0xFF4
 21408                           prodl	equ	0xFF3
 21409                           intcon	equ	0xFF2
 21410                           intcon2	equ	0xFF1
 21411                           intcon3	equ	0xFF0
 21412                           indf0	equ	0xFEF
 21413                           postinc0	equ	0xFEE
 21414                           fsr0h	equ	0xFEA
 21415                           fsr0l	equ	0xFE9
 21416                           wreg	equ	0xFE8
 21417                           postdec1	equ	0xFE5
 21418                           fsr1h	equ	0xFE2
 21419                           fsr1l	equ	0xFE1
 21420                           indf2	equ	0xFDF
 21421                           postinc2	equ	0xFDE
 21422                           postdec2	equ	0xFDD
 21423                           fsr2h	equ	0xFDA
 21424                           fsr2l	equ	0xFD9
 21425                           status	equ	0xFD8
 21426                           
 21427 ;; *************** function i2_EEPROM_read *****************
 21428 ;; Defined at:
 21429 ;;		line 68 in file "EEPROM.c"
 21430 ;; Parameters:    Size  Location     Type
 21431 ;;  address         2    0[COMRAM] unsigned short 
 21432 ;; Auto vars:     Size  Location     Type
 21433 ;;		None
 21434 ;; Return value:  Size  Location     Type
 21435 ;;                  1    wreg      unsigned char 
 21436 ;; Registers used:
 21437 ;;		wreg, status,2
 21438 ;; Tracked objects:
 21439 ;;		On entry : 0/0
 21440 ;;		On exit  : 0/0
 21441 ;;		Unchanged: 0/0
 21442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21443 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21446 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21447 ;;Total ram usage:        2 bytes
 21448 ;; Hardware stack levels used:    1
 21449 ;; This function calls:
 21450 ;;		Nothing
 21451 ;; This function is called by:
 21452 ;;		_retrieveLog
 21453 ;; This function uses a non-reentrant model
 21454 ;;
 21455                           
 21456                           	psect	text79
 21457  00533E                     __ptext79:
 21458                           	opt stack 0
 21459  00533E                     i2_EEPROM_read:
 21460                           	opt stack 20
 21461                           
 21462                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 21463                           
 21464                           ; BSR set to: 0
 21465                           ;incstack = 0
 21466  00533E  5002               	movf	i2EEPROM_read@address+1,w,c
 21467  005340  6EAA               	movwf	4010,c	;volatile
 21468                           
 21469                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 21470  005342  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 21471                           
 21472                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 21473  005346  9EA6               	bcf	4006,7,c	;volatile
 21474                           
 21475                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 21476  005348  9CA6               	bcf	4006,6,c	;volatile
 21477                           
 21478                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 21479  00534A  80A6               	bsf	4006,0,c	;volatile
 21480  00534C                     i2l1056:
 21481  00534C  B0A6               	btfsc	4006,0,c	;volatile
 21482  00534E  D7FE               	goto	i2l1056
 21483                           
 21484                           ;EEPROM.c: 81: return EEDATA;
 21485  005350  50A8               	movf	4008,w,c	;volatile
 21486  005352  0012               	return	
 21487  005354                     __end_ofi2_EEPROM_read:
 21488                           	opt stack 0
 21489                           pclatu	equ	0xFFB
 21490                           pclath	equ	0xFFA
 21491                           tblptru	equ	0xFF8
 21492                           tblptrh	equ	0xFF7
 21493                           tblptrl	equ	0xFF6
 21494                           tablat	equ	0xFF5
 21495                           prodh	equ	0xFF4
 21496                           prodl	equ	0xFF3
 21497                           intcon	equ	0xFF2
 21498                           intcon2	equ	0xFF1
 21499                           intcon3	equ	0xFF0
 21500                           indf0	equ	0xFEF
 21501                           postinc0	equ	0xFEE
 21502                           fsr0h	equ	0xFEA
 21503                           fsr0l	equ	0xFE9
 21504                           wreg	equ	0xFE8
 21505                           postdec1	equ	0xFE5
 21506                           fsr1h	equ	0xFE2
 21507                           fsr1l	equ	0xFE1
 21508                           indf2	equ	0xFDF
 21509                           postinc2	equ	0xFDE
 21510                           postdec2	equ	0xFDD
 21511                           fsr2h	equ	0xFDA
 21512                           fsr2l	equ	0xFD9
 21513                           status	equ	0xFD8
 21514                           
 21515 ;; *************** function _printSortTimer *****************
 21516 ;; Defined at:
 21517 ;;		line 439 in file "sort.c"
 21518 ;; Parameters:    Size  Location     Type
 21519 ;;		None
 21520 ;; Auto vars:     Size  Location     Type
 21521 ;;  i               2   70[COMRAM] int 
 21522 ;;  i               2   72[COMRAM] int 
 21523 ;;  curTime        14   44[COMRAM] int [7]
 21524 ;;  timeDiff        2   68[COMRAM] unsigned int 
 21525 ;;  sec             2   64[COMRAM] int 
 21526 ;;  min             2   62[COMRAM] int 
 21527 ;;  cur_sec         2   60[COMRAM] unsigned int 
 21528 ;;  start_sec       2   58[COMRAM] unsigned int 
 21529 ;; Return value:  Size  Location     Type
 21530 ;;                  1    wreg      void 
 21531 ;; Registers used:
 21532 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21533 ;; Tracked objects:
 21534 ;;		On entry : 0/0
 21535 ;;		On exit  : 0/0
 21536 ;;		Unchanged: 0/0
 21537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21539 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21540 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21541 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21542 ;;Total ram usage:       33 bytes
 21543 ;; Hardware stack levels used:    1
 21544 ;; Hardware stack levels required when called:    3
 21545 ;; This function calls:
 21546 ;;		i2___lwdiv
 21547 ;;		i2___lwmod
 21548 ;;		i2___wmul
 21549 ;;		i2_delay_ms
 21550 ;;		i2_getRTC
 21551 ;;		i2_lcdInst
 21552 ;;		i2_printf
 21553 ;; This function is called by:
 21554 ;;		_handler
 21555 ;; This function uses a non-reentrant model
 21556 ;;
 21557                           
 21558                           	psect	text80
 21559  0029E8                     __ptext80:
 21560                           	opt stack 0
 21561  0029E8                     _printSortTimer:
 21562                           	opt stack 20
 21563                           
 21564                           ;sort.c: 440: getRTC();
 21565                           
 21566                           ;incstack = 0
 21567  0029E8  EC4C  F024         	call	i2_getRTC	;wreg free
 21568                           
 21569                           ;sort.c: 441: int curTime[7];
 21570                           ;sort.c: 442: for(int i = 0; i < 7; i++){
 21571  0029EC  0E00               	movlw	0
 21572  0029EE  6E4A               	movwf	printSortTimer@i+1,c
 21573  0029F0  0E00               	movlw	0
 21574  0029F2  6E49               	movwf	printSortTimer@i,c
 21575  0029F4                     i2l9246:
 21576  0029F4  BE4A               	btfsc	printSortTimer@i+1,7,c
 21577  0029F6  D006               	goto	i2l9250
 21578  0029F8  504A               	movf	printSortTimer@i+1,w,c
 21579  0029FA  E131               	bnz	i2l9256
 21580  0029FC  0E07               	movlw	7
 21581  0029FE  5C49               	subwf	printSortTimer@i,w,c
 21582  002A00  B0D8               	btfsc	status,0,c
 21583  002A02  D02D               	goto	i2l9256
 21584  002A04                     i2l9250:
 21585                           
 21586                           ;sort.c: 443: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 21587  002A04  0E1C               	movlw	low _time
 21588  002A06  2449               	addwf	printSortTimer@i,w,c
 21589  002A08  6ED9               	movwf	fsr2l,c
 21590  002A0A  0E01               	movlw	high _time
 21591  002A0C  204A               	addwfc	printSortTimer@i+1,w,c
 21592  002A0E  6EDA               	movwf	fsr2h,c
 21593  002A10  50DF               	movf	indf2,w,c
 21594  002A12  6E2A               	movwf	??_printSortTimer& (0+255),c
 21595  002A14  3A2A               	swapf	??_printSortTimer,f,c
 21596  002A16  0E0F               	movlw	15
 21597  002A18  162A               	andwf	??_printSortTimer,f,c
 21598  002A1A  0E0F               	movlw	15
 21599  002A1C  162A               	andwf	??_printSortTimer,f,c
 21600  002A1E  502A               	movf	??_printSortTimer,w,c
 21601  002A20  0D0A               	mullw	10
 21602  002A22  0E1C               	movlw	low _time
 21603  002A24  2449               	addwf	printSortTimer@i,w,c
 21604  002A26  6ED9               	movwf	fsr2l,c
 21605  002A28  0E01               	movlw	high _time
 21606  002A2A  204A               	addwfc	printSortTimer@i+1,w,c
 21607  002A2C  6EDA               	movwf	fsr2h,c
 21608  002A2E  50DF               	movf	indf2,w,c
 21609  002A30  0B0F               	andlw	15
 21610  002A32  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 21611  002A34  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 21612  002A36  50F3               	movf	prodl,w,c
 21613  002A38  262B               	addwf	??_printSortTimer+1,f,c
 21614  002A3A  50F4               	movf	prodh,w,c
 21615  002A3C  222C               	addwfc	??_printSortTimer+2,f,c
 21616  002A3E  90D8               	bcf	status,0,c
 21617  002A40  3449               	rlcf	printSortTimer@i,w,c
 21618  002A42  6ED9               	movwf	fsr2l,c
 21619  002A44  344A               	rlcf	printSortTimer@i+1,w,c
 21620  002A46  6EDA               	movwf	fsr2h,c
 21621  002A48  0E2D               	movlw	low printSortTimer@curTime
 21622  002A4A  26D9               	addwf	fsr2l,f,c
 21623  002A4C  0E00               	movlw	high printSortTimer@curTime
 21624  002A4E  22DA               	addwfc	fsr2h,f,c
 21625  002A50  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 21626  002A54  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 21627  002A58  4A49               	infsnz	printSortTimer@i,f,c
 21628  002A5A  2A4A               	incf	printSortTimer@i+1,f,c
 21629  002A5C  D7CB               	goto	i2l9246
 21630  002A5E                     i2l9256:
 21631                           
 21632                           ;sort.c: 444: }
 21633                           ;sort.c: 445: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 21634  002A5E  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 21635  002A62  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 21636  002A66  0E00               	movlw	0
 21637  002A68  6E04               	movwf	i2___wmul@multiplicand+1,c
 21638  002A6A  0E3C               	movlw	60
 21639  002A6C  6E03               	movwf	i2___wmul@multiplicand,c
 21640  002A6E  EC0F  F029         	call	i2___wmul	;wreg free
 21641  002A72  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 21642  002A76  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 21643  002A7A  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 21644  002A7E  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 21645  002A82  0E0E               	movlw	14
 21646  002A84  6E04               	movwf	i2___wmul@multiplicand+1,c
 21647  002A86  0E10               	movlw	16
 21648  002A88  6E03               	movwf	i2___wmul@multiplicand,c
 21649  002A8A  EC0F  F029         	call	i2___wmul	;wreg free
 21650  002A8E  5001               	movf	?i2___wmul,w,c
 21651  002A90  262A               	addwf	??_printSortTimer,f,c
 21652  002A92  5002               	movf	?i2___wmul+1,w,c
 21653  002A94  222B               	addwfc	??_printSortTimer+1,f,c
 21654  002A96  0101               	movlb	1	; () banked
 21655  002A98  510E               	movf	_startTime& (0+255),w,b
 21656  002A9A  242A               	addwf	??_printSortTimer,w,c
 21657  002A9C  6E3B               	movwf	printSortTimer@start_sec,c
 21658  002A9E  0101               	movlb	1	; () banked
 21659  002AA0  510F               	movf	(_startTime+1)& (0+255),w,b
 21660  002AA2  202B               	addwfc	??_printSortTimer+1,w,c
 21661  002AA4  6E3C               	movwf	printSortTimer@start_sec+1,c
 21662                           
 21663                           ;sort.c: 446: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 21664  002AA6  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 21665  002AAA  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 21666  002AAE  0E00               	movlw	0
 21667  002AB0  6E04               	movwf	i2___wmul@multiplicand+1,c
 21668  002AB2  0E3C               	movlw	60
 21669  002AB4  6E03               	movwf	i2___wmul@multiplicand,c
 21670  002AB6  EC0F  F029         	call	i2___wmul	;wreg free
 21671  002ABA  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 21672  002ABE  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 21673  002AC2  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 21674  002AC6  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 21675  002ACA  0E0E               	movlw	14
 21676  002ACC  6E04               	movwf	i2___wmul@multiplicand+1,c
 21677  002ACE  0E10               	movlw	16
 21678  002AD0  6E03               	movwf	i2___wmul@multiplicand,c
 21679  002AD2  EC0F  F029         	call	i2___wmul	;wreg free
 21680  002AD6  5001               	movf	?i2___wmul,w,c
 21681  002AD8  262A               	addwf	??_printSortTimer,f,c
 21682  002ADA  5002               	movf	?i2___wmul+1,w,c
 21683  002ADC  222B               	addwfc	??_printSortTimer+1,f,c
 21684  002ADE  502D               	movf	printSortTimer@curTime,w,c
 21685  002AE0  242A               	addwf	??_printSortTimer,w,c
 21686  002AE2  6E3D               	movwf	printSortTimer@cur_sec,c
 21687  002AE4  502E               	movf	printSortTimer@curTime+1,w,c
 21688  002AE6  202B               	addwfc	??_printSortTimer+1,w,c
 21689  002AE8  6E3E               	movwf	printSortTimer@cur_sec+1,c
 21690                           
 21691                           ;sort.c: 447: unsigned int timeDiff = cur_sec - start_sec;
 21692  002AEA  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 21693  002AEE  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 21694  002AF2  1E2A               	comf	??_printSortTimer,f,c
 21695  002AF4  1E2B               	comf	??_printSortTimer+1,f,c
 21696  002AF6  4A2A               	infsnz	??_printSortTimer,f,c
 21697  002AF8  2A2B               	incf	??_printSortTimer+1,f,c
 21698  002AFA  503D               	movf	printSortTimer@cur_sec,w,c
 21699  002AFC  242A               	addwf	??_printSortTimer,w,c
 21700  002AFE  6E45               	movwf	printSortTimer@timeDiff,c
 21701  002B00  503E               	movf	printSortTimer@cur_sec+1,w,c
 21702  002B02  202B               	addwfc	??_printSortTimer+1,w,c
 21703  002B04  6E46               	movwf	printSortTimer@timeDiff+1,c
 21704                           
 21705                           ;sort.c: 449: total_time = timeDiff;
 21706  002B06  C045  F0FA         	movff	printSortTimer@timeDiff,_total_time
 21707  002B0A  C046  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 21708                           
 21709                           ;sort.c: 451: if(f_most_recent_sort_time){
 21710  002B0E  0101               	movlb	1	; () banked
 21711  002B10  5137               	movf	_f_most_recent_sort_time& (0+255),w,b
 21712  002B12  0101               	movlb	1	; () banked
 21713  002B14  1138               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 21714  002B16  B4D8               	btfsc	status,2,c
 21715  002B18  D009               	goto	i2l9268
 21716                           
 21717                           ; BSR set to: 1
 21718                           ;sort.c: 452: most_recent_sort_time = total_time;
 21719  002B1A  C0FA  F06D         	movff	_total_time,_most_recent_sort_time
 21720  002B1E  C0FB  F06E         	movff	_total_time+1,_most_recent_sort_time+1
 21721                           
 21722                           ; BSR set to: 1
 21723                           ;sort.c: 453: f_most_recent_sort_time = 0;
 21724  002B22  0E00               	movlw	0
 21725  002B24  0101               	movlb	1	; () banked
 21726  002B26  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 21727  002B28  0E00               	movlw	0
 21728  002B2A  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
 21729  002B2C                     i2l9268:
 21730                           
 21731                           ; BSR set to: 1
 21732                           ;sort.c: 454: }
 21733                           ;sort.c: 456: if(total_time - most_recent_sort_time == 20){
 21734  002B2C  C06D  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 21735  002B30  C06E  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 21736  002B34  1E2A               	comf	??_printSortTimer,f,c
 21737  002B36  1E2B               	comf	??_printSortTimer+1,f,c
 21738  002B38  4A2A               	infsnz	??_printSortTimer,f,c
 21739  002B3A  2A2B               	incf	??_printSortTimer+1,f,c
 21740  002B3C  0100               	movlb	0	; () banked
 21741  002B3E  51FA               	movf	_total_time& (0+255),w,b
 21742  002B40  262A               	addwf	??_printSortTimer,f,c
 21743  002B42  0100               	movlb	0	; () banked
 21744  002B44  51FB               	movf	(_total_time+1)& (0+255),w,b
 21745  002B46  222B               	addwfc	??_printSortTimer+1,f,c
 21746  002B48  0E14               	movlw	20
 21747  002B4A  182A               	xorwf	??_printSortTimer,w,c
 21748  002B4C  102B               	iorwf	??_printSortTimer+1,w,c
 21749  002B4E  A4D8               	btfss	status,2,c
 21750  002B50  D033               	goto	i2l9288
 21751                           
 21752                           ; BSR set to: 0
 21753                           ;sort.c: 457: LATBbits.LATB2 = 0;
 21754  002B52  948A               	bcf	3978,2,c	;volatile
 21755                           
 21756                           ; BSR set to: 0
 21757                           ;sort.c: 458: _delay((unsigned long)((2000)*(32000000/4000.0)));
 21758  002B54  0E52               	movlw	82
 21759  002B56  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 21760  002B58  0E2B               	movlw	43
 21761  002B5A  6E2A               	movwf	??_printSortTimer& (0+255),c
 21762  002B5C  0E00               	movlw	0
 21763  002B5E                     i2u1037_47:
 21764  002B5E  2EE8               	decfsz	wreg,f,c
 21765  002B60  D7FE               	bra	i2u1037_47
 21766  002B62  2E2A               	decfsz	??_printSortTimer& (0+255),f,c
 21767  002B64  D7FC               	bra	i2u1037_47
 21768  002B66  2E2B               	decfsz	(??_printSortTimer+1)& (0+255),f,c
 21769  002B68  D7FA               	bra	i2u1037_47
 21770  002B6A  D000               	nop2	
 21771                           
 21772                           ;sort.c: 459: for(int i=0; i<46; i++){
 21773  002B6C  0E00               	movlw	0
 21774  002B6E  6E48               	movwf	printSortTimer@i_1187+1,c
 21775  002B70  0E00               	movlw	0
 21776  002B72  6E47               	movwf	printSortTimer@i_1187,c
 21777  002B74  BE48               	btfsc	printSortTimer@i_1187+1,7,c
 21778  002B76  D006               	goto	i2l9280
 21779  002B78  5048               	movf	printSortTimer@i_1187+1,w,c
 21780  002B7A  E11D               	bnz	i2l855
 21781  002B7C  0E2E               	movlw	46
 21782  002B7E  5C47               	subwf	printSortTimer@i_1187,w,c
 21783  002B80  B0D8               	btfsc	status,0,c
 21784  002B82  D019               	goto	i2l855
 21785  002B84                     i2l9280:
 21786                           
 21787                           ;sort.c: 460: LATBbits.LATB2 = !LATBbits.LATB2;
 21788  002B84  B48A               	btfsc	3978,2,c	;volatile
 21789  002B86  D003               	goto	i2u852_40
 21790  002B88  6A2A               	clrf	??_printSortTimer& (0+255),c
 21791  002B8A  2A2A               	incf	??_printSortTimer& (0+255),f,c
 21792  002B8C  D001               	goto	i2u853_48
 21793  002B8E                     i2u852_40:
 21794  002B8E  6A2A               	clrf	??_printSortTimer& (0+255),c
 21795  002B90                     i2u853_48:
 21796  002B90  462A               	rlncf	??_printSortTimer,f,c
 21797  002B92  462A               	rlncf	??_printSortTimer,f,c
 21798  002B94  508A               	movf	3978,w,c	;volatile
 21799  002B96  182A               	xorwf	??_printSortTimer,w,c
 21800  002B98  0BFB               	andlw	-5
 21801  002B9A  182A               	xorwf	??_printSortTimer,w,c
 21802  002B9C  6E8A               	movwf	3978,c	;volatile
 21803                           
 21804                           ;sort.c: 461: delay_ms(45-i);
 21805  002B9E  5047               	movf	printSortTimer@i_1187,w,c
 21806  002BA0  0800               	sublw	0
 21807  002BA2  0F2D               	addlw	45
 21808  002BA4  EC78  F029         	call	i2_delay_ms
 21809  002BA8  4A47               	infsnz	printSortTimer@i_1187,f,c
 21810  002BAA  2A48               	incf	printSortTimer@i_1187+1,f,c
 21811  002BAC  BE48               	btfsc	printSortTimer@i_1187+1,7,c
 21812  002BAE  D7EA               	goto	i2l9280
 21813  002BB0  5048               	movf	printSortTimer@i_1187+1,w,c
 21814  002BB2  E101               	bnz	i2u854_40
 21815  002BB4  D7E3               	goto	L14
 21816  002BB6                     i2u854_40:
 21817  002BB6                     i2l855:
 21818                           
 21819                           ;sort.c: 462: }
 21820                           ;sort.c: 463: LATBbits.LATB2 = 1;
 21821  002BB6  848A               	bsf	3978,2,c	;volatile
 21822  002BB8                     i2l9288:
 21823                           
 21824                           ;sort.c: 464: }
 21825                           ;sort.c: 466: if((total_time - most_recent_sort_time == 42) | (total_time == 179)){
 21826  002BB8  C06D  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 21827  002BBC  C06E  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 21828  002BC0  1E2A               	comf	??_printSortTimer,f,c
 21829  002BC2  1E2B               	comf	??_printSortTimer+1,f,c
 21830  002BC4  4A2A               	infsnz	??_printSortTimer,f,c
 21831  002BC6  2A2B               	incf	??_printSortTimer+1,f,c
 21832  002BC8  0100               	movlb	0	; () banked
 21833  002BCA  51FA               	movf	_total_time& (0+255),w,b
 21834  002BCC  262A               	addwf	??_printSortTimer,f,c
 21835  002BCE  0100               	movlb	0	; () banked
 21836  002BD0  51FB               	movf	(_total_time+1)& (0+255),w,b
 21837  002BD2  222B               	addwfc	??_printSortTimer+1,f,c
 21838  002BD4  0E2A               	movlw	42
 21839  002BD6  182A               	xorwf	??_printSortTimer,w,c
 21840  002BD8  102B               	iorwf	??_printSortTimer+1,w,c
 21841  002BDA  B4D8               	btfsc	status,2,c
 21842  002BDC  D007               	goto	i2l9292
 21843                           
 21844                           ; BSR set to: 0
 21845  002BDE  0EB3               	movlw	179
 21846  002BE0  0100               	movlb	0	; () banked
 21847  002BE2  19FA               	xorwf	_total_time& (0+255),w,b
 21848  002BE4  0100               	movlb	0	; () banked
 21849  002BE6  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 21850  002BE8  A4D8               	btfss	status,2,c
 21851  002BEA  D003               	goto	i2l9294
 21852  002BEC                     i2l9292:
 21853                           
 21854                           ; BSR set to: 0
 21855                           ;sort.c: 467: machine_state = DoneSorting_state;
 21856  002BEC  0E02               	movlw	2
 21857  002BEE  0100               	movlb	0	; () banked
 21858  002BF0  6FFC               	movwf	_machine_state& (0+255),b
 21859  002BF2                     i2l9294:
 21860                           
 21861                           ; BSR set to: 0
 21862                           ;sort.c: 469: }
 21863                           ;sort.c: 471: int min = (timeDiff % 3600) / 60;
 21864  002BF2  0E0E               	movlw	14
 21865  002BF4  6E04               	movwf	i2___lwmod@divisor+1,c
 21866  002BF6  0E10               	movlw	16
 21867  002BF8  6E03               	movwf	i2___lwmod@divisor,c
 21868  002BFA  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 21869  002BFE  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 21870  002C02  ECC7  F026         	call	i2___lwmod	;wreg free
 21871  002C06  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 21872  002C0A  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 21873  002C0E  0E00               	movlw	0
 21874  002C10  6E09               	movwf	i2___lwdiv@divisor+1,c
 21875  002C12  0E3C               	movlw	60
 21876  002C14  6E08               	movwf	i2___lwdiv@divisor,c
 21877  002C16  EC08  F026         	call	i2___lwdiv	;wreg free
 21878  002C1A  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 21879  002C1E  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 21880                           
 21881                           ;sort.c: 472: int sec = (timeDiff % 3600) % 60;
 21882  002C22  0E0E               	movlw	14
 21883  002C24  6E04               	movwf	i2___lwmod@divisor+1,c
 21884  002C26  0E10               	movlw	16
 21885  002C28  6E03               	movwf	i2___lwmod@divisor,c
 21886  002C2A  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 21887  002C2E  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 21888  002C32  ECC7  F026         	call	i2___lwmod	;wreg free
 21889  002C36  C001  F043         	movff	?i2___lwmod,_printSortTimer$2501
 21890  002C3A  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2501+1
 21891                           
 21892                           ;sort.c: 472: int sec = (timeDiff % 3600) % 60;
 21893  002C3E  C043  F001         	movff	_printSortTimer$2501,i2___lwmod@dividend
 21894  002C42  C044  F002         	movff	_printSortTimer$2501+1,i2___lwmod@dividend+1
 21895  002C46  0E00               	movlw	0
 21896  002C48  6E04               	movwf	i2___lwmod@divisor+1,c
 21897  002C4A  0E3C               	movlw	60
 21898  002C4C  6E03               	movwf	i2___lwmod@divisor,c
 21899  002C4E  ECC7  F026         	call	i2___lwmod	;wreg free
 21900  002C52  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 21901  002C56  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 21902                           
 21903                           ;sort.c: 474: lcdInst(0b10000000);;
 21904  002C5A  0E80               	movlw	128
 21905  002C5C  ECD3  F029         	call	i2_lcdInst
 21906                           
 21907                           ;sort.c: 475: printf("SORTING...");
 21908  002C60  0E7C               	movlw	low STR_64
 21909  002C62  6E0D               	movwf	i2printf@f,c
 21910  002C64  0EFF               	movlw	high STR_64
 21911  002C66  6E0E               	movwf	i2printf@f+1,c
 21912  002C68  ECF9  F00E         	call	i2_printf	;wreg free
 21913                           
 21914                           ;sort.c: 476: lcdInst(0b11000000);;
 21915  002C6C  0EC0               	movlw	192
 21916  002C6E  ECD3  F029         	call	i2_lcdInst
 21917                           
 21918                           ;sort.c: 477: printf("TIME %d:%02d", min, sec);
 21919  002C72  0E42               	movlw	low STR_65
 21920  002C74  6E0D               	movwf	i2printf@f,c
 21921  002C76  0EFF               	movlw	high STR_65
 21922  002C78  6E0E               	movwf	i2printf@f+1,c
 21923  002C7A  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 21924  002C7E  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 21925  002C82  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 21926  002C86  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 21927  002C8A  ECF9  F00E         	call	i2_printf	;wreg free
 21928  002C8E  0012               	return		;funcret
 21929  002C90                     __end_of_printSortTimer:
 21930                           	opt stack 0
 21931                           pclatu	equ	0xFFB
 21932                           pclath	equ	0xFFA
 21933                           tblptru	equ	0xFF8
 21934                           tblptrh	equ	0xFF7
 21935                           tblptrl	equ	0xFF6
 21936                           tablat	equ	0xFF5
 21937                           prodh	equ	0xFF4
 21938                           prodl	equ	0xFF3
 21939                           intcon	equ	0xFF2
 21940                           intcon2	equ	0xFF1
 21941                           intcon3	equ	0xFF0
 21942                           indf0	equ	0xFEF
 21943                           postinc0	equ	0xFEE
 21944                           fsr0h	equ	0xFEA
 21945                           fsr0l	equ	0xFE9
 21946                           wreg	equ	0xFE8
 21947                           postdec1	equ	0xFE5
 21948                           fsr1h	equ	0xFE2
 21949                           fsr1l	equ	0xFE1
 21950                           indf2	equ	0xFDF
 21951                           postinc2	equ	0xFDE
 21952                           postdec2	equ	0xFDD
 21953                           fsr2h	equ	0xFDA
 21954                           fsr2l	equ	0xFD9
 21955                           status	equ	0xFD8
 21956                           
 21957 ;; *************** function i2_printf *****************
 21958 ;; Defined at:
 21959 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 21960 ;; Parameters:    Size  Location     Type
 21961 ;;  f               2   12[COMRAM] PTR const unsigned char 
 21962 ;;		 -> STR_127(17), STR_126(17), STR_125(18), STR_124(18), 
 21963 ;;		 -> STR_123(18), STR_122(18), STR_121(18), STR_120(18), 
 21964 ;;		 -> STR_119(17), STR_118(17), STR_117(3), STR_116(15), 
 21965 ;;		 -> STR_115(3), STR_114(15), STR_113(11), STR_112(17), 
 21966 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 21967 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 21968 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 21969 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 21970 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 21971 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 21972 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 21973 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 21974 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 21975 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 21976 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 21977 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 21978 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 21979 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 21980 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 21981 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 21982 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 21983 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 21984 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 21985 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 21986 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 21987 ;;		 -> STR_2(14), STR_1(18), 
 21988 ;; Auto vars:     Size  Location     Type
 21989 ;;  printf          4    0        struct .
 21990 ;;  printf          2   39[COMRAM] int 
 21991 ;;  printf          2   35[COMRAM] unsigned int 
 21992 ;;  printf          2   33[COMRAM] unsigned int 
 21993 ;;  printf          2   31[COMRAM] PTR void [1]
 21994 ;;		 -> ?i2_printf(2), ?_printf(2), 
 21995 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 21996 ;;		 -> STR_128(7), count_total(2), printRTC@month(4), UI@month(4), 
 21997 ;;  printf          1   38[COMRAM] char 
 21998 ;;  printf          1   37[COMRAM] unsigned char 
 21999 ;;  printf          1   28[COMRAM] char 
 22000 ;; Return value:  Size  Location     Type
 22001 ;;                  2   12[COMRAM] int 
 22002 ;; Registers used:
 22003 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22004 ;; Tracked objects:
 22005 ;;		On entry : 0/0
 22006 ;;		On exit  : 0/0
 22007 ;;		Unchanged: 0/0
 22008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22009 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22010 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22011 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22012 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22013 ;;Total ram usage:       29 bytes
 22014 ;; Hardware stack levels used:    1
 22015 ;; Hardware stack levels required when called:    2
 22016 ;; This function calls:
 22017 ;;		i2___lwdiv
 22018 ;;		i2___lwmod
 22019 ;;		i2___wmul
 22020 ;;		i2_isdigit
 22021 ;;		i2_putch
 22022 ;; This function is called by:
 22023 ;;		_change_state_to_menu_11
 22024 ;;		_change_state_to_menu_23
 22025 ;;		_change_state_to_logs_11
 22026 ;;		_change_state_to_logs_12
 22027 ;;		_change_state_to_logs_22
 22028 ;;		_change_state_to_logs_23
 22029 ;;		_change_state_to_logs_33
 22030 ;;		_change_state_to_logs_34
 22031 ;;		_printSortTimer
 22032 ;;		i2_change_state_to_menu_start
 22033 ;;		i2_change_state_to_menu_12
 22034 ;;		i2_change_state_to_menu_22
 22035 ;;		i2_printRTC
 22036 ;; This function uses a non-reentrant model
 22037 ;;
 22038                           
 22039                           	psect	text81
 22040  001DF2                     __ptext81:
 22041                           	opt stack 0
 22042  001DF2                     i2_printf:
 22043                           	opt stack 20
 22044                           
 22045                           ;doprnt.c: 466: va_list ap;
 22046                           ;doprnt.c: 499: signed char c;
 22047                           ;doprnt.c: 501: int width;
 22048                           ;doprnt.c: 506: signed char prec;
 22049                           ;doprnt.c: 508: unsigned char flag;
 22050                           ;doprnt.c: 523: union {
 22051                           ;doprnt.c: 524: unsigned long vd;
 22052                           ;doprnt.c: 525: double integ;
 22053                           ;doprnt.c: 526: } tmpval;
 22054                           ;doprnt.c: 528: unsigned int val;
 22055                           ;doprnt.c: 529: unsigned len;
 22056                           ;doprnt.c: 530: const char * cp;
 22057                           ;doprnt.c: 533: *ap = __va_start();
 22058                           
 22059                           ;incstack = 0
 22060  001DF2  0E0F               	movlw	low (?i2_printf+2)
 22061  001DF4  6E20               	movwf	i2printf@ap,c
 22062  001DF6  0E00               	movlw	high (?i2_printf+2)
 22063  001DF8  6E21               	movwf	i2printf@ap+1,c
 22064                           
 22065                           ;doprnt.c: 536: while(c = *f++) {
 22066  001DFA  D1A4               	goto	i2l6624
 22067  001DFC                     i2l6494:
 22068                           
 22069                           ;doprnt.c: 538: if(c != '%')
 22070  001DFC  0E25               	movlw	37
 22071  001DFE  1827               	xorwf	i2printf@c,w,c
 22072  001E00  B4D8               	btfsc	status,2,c
 22073  001E02  D004               	goto	i2l6498
 22074                           
 22075                           ;doprnt.c: 540: {
 22076                           ;doprnt.c: 541: (putch(c) );
 22077  001E04  5027               	movf	i2printf@c,w,c
 22078  001E06  ECCD  F029         	call	i2_putch
 22079                           
 22080                           ;doprnt.c: 542: continue;
 22081  001E0A  D19C               	goto	i2l6624
 22082  001E0C                     i2l6498:
 22083                           
 22084                           ;doprnt.c: 543: }
 22085                           ;doprnt.c: 546: width = 0;
 22086  001E0C  0E00               	movlw	0
 22087  001E0E  6E29               	movwf	i2printf@width+1,c
 22088  001E10  0E00               	movlw	0
 22089  001E12  6E28               	movwf	i2printf@width,c
 22090                           
 22091                           ;doprnt.c: 548: flag = 0;
 22092  001E14  0E00               	movlw	0
 22093  001E16  6E26               	movwf	i2printf@flag,c
 22094                           
 22095                           ;doprnt.c: 551: switch(*f) {
 22096                           
 22097                           ;doprnt.c: 550: for(;;) {
 22098  001E18  D003               	goto	i2l6504
 22099  001E1A                     i2l6500:
 22100                           
 22101                           ;doprnt.c: 580: flag |= 0x04;
 22102  001E1A  8426               	bsf	i2printf@flag,2,c
 22103                           
 22104                           ;doprnt.c: 581: f++;
 22105  001E1C  4A0D               	infsnz	i2printf@f,f,c
 22106  001E1E  2A0E               	incf	i2printf@f+1,f,c
 22107  001E20                     i2l6504:
 22108  001E20  C00D  FFF6         	movff	i2printf@f,tblptrl
 22109  001E24  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22110  001E28                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22111  001E28  6AF8               	clrf	tblptru,c
 22112  001E2A                     	endif
 22113  001E2A                     	if	0	;tblptru may be non-zero
 22114  001E2A                     	endif
 22115  001E2A  0008               	tblrd		*
 22116  001E2C  50F5               	movf	tablat,w,c
 22117                           
 22118                           ; Switch size 1, requested type "space"
 22119                           ; Number of cases is 1, Range of values is 48 to 48
 22120                           ; switch strategies available:
 22121                           ; Name         Instructions Cycles
 22122                           ; simple_byte            4     3 (average)
 22123                           ;	Chosen strategy is simple_byte
 22124  001E2E  0A30               	xorlw	48	; case 48
 22125  001E30  B4D8               	btfsc	status,2,c
 22126  001E32  D7F3               	goto	i2l6500
 22127                           
 22128                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 22129                           
 22130                           ;doprnt.c: 586: }
 22131                           
 22132                           ;doprnt.c: 585: break;
 22133  001E34  C00D  FFF6         	movff	i2printf@f,tblptrl
 22134  001E38  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22135  001E3C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22136  001E3C  6AF8               	clrf	tblptru,c
 22137  001E3E                     	endif
 22138  001E3E                     	if	0	;tblptru may be non-zero
 22139  001E3E                     	endif
 22140  001E3E  0008               	tblrd		*
 22141  001E40  50F5               	movf	tablat,w,c
 22142  001E42  EC69  F029         	call	i2_isdigit
 22143  001E46  A0D8               	btfss	status,0,c
 22144  001E48  D0A6               	goto	i2l6552
 22145                           
 22146                           ;doprnt.c: 598: width = 0;
 22147  001E4A  0E00               	movlw	0
 22148  001E4C  6E29               	movwf	i2printf@width+1,c
 22149  001E4E  0E00               	movlw	0
 22150  001E50  6E28               	movwf	i2printf@width,c
 22151  001E52                     i2l6510:
 22152                           
 22153                           ;doprnt.c: 600: width *= 10;
 22154  001E52  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 22155  001E56  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 22156  001E5A  0E00               	movlw	0
 22157  001E5C  6E04               	movwf	i2___wmul@multiplicand+1,c
 22158  001E5E  0E0A               	movlw	10
 22159  001E60  6E03               	movwf	i2___wmul@multiplicand,c
 22160  001E62  EC0F  F029         	call	i2___wmul	;wreg free
 22161  001E66  C001  F028         	movff	?i2___wmul,i2printf@width
 22162  001E6A  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 22163                           
 22164                           ;doprnt.c: 601: width += *f++ - '0';
 22165  001E6E  0ED0               	movlw	208
 22166  001E70  6E19               	movwf	??i2_printf& (0+255),c
 22167  001E72  0EFF               	movlw	255
 22168  001E74  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 22169  001E76  C00D  FFF6         	movff	i2printf@f,tblptrl
 22170  001E7A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22171  001E7E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22172  001E7E  6AF8               	clrf	tblptru,c
 22173  001E80                     	endif
 22174  001E80                     	if	0	;tblptru may be non-zero
 22175  001E80                     	endif
 22176  001E80  0008               	tblrd		*
 22177  001E82  50F5               	movf	tablat,w,c
 22178  001E84  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 22179  001E86  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 22180  001E88  5019               	movf	??i2_printf,w,c
 22181  001E8A  261B               	addwf	??i2_printf+2,f,c
 22182  001E8C  501A               	movf	??i2_printf+1,w,c
 22183  001E8E  221C               	addwfc	??i2_printf+3,f,c
 22184  001E90  501B               	movf	??i2_printf+2,w,c
 22185  001E92  2628               	addwf	i2printf@width,f,c
 22186  001E94  501C               	movf	??i2_printf+3,w,c
 22187  001E96  2229               	addwfc	i2printf@width+1,f,c
 22188  001E98  4A0D               	infsnz	i2printf@f,f,c
 22189  001E9A  2A0E               	incf	i2printf@f+1,f,c
 22190                           
 22191                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 22192  001E9C  C00D  FFF6         	movff	i2printf@f,tblptrl
 22193  001EA0  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22194  001EA4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22195  001EA4  6AF8               	clrf	tblptru,c
 22196  001EA6                     	endif
 22197  001EA6                     	if	0	;tblptru may be non-zero
 22198  001EA6                     	endif
 22199  001EA6  0008               	tblrd		*
 22200  001EA8  50F5               	movf	tablat,w,c
 22201  001EAA  EC69  F029         	call	i2_isdigit
 22202  001EAE  A0D8               	btfss	status,0,c
 22203  001EB0  D072               	goto	i2l6552
 22204  001EB2  D7CF               	goto	i2l6510
 22205  001EB4                     i2l6518:
 22206                           
 22207                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 22208  001EB4  C020  FFD9         	movff	i2printf@ap,fsr2l
 22209  001EB8  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22210  001EBC  CFDE F01E          	movff	postinc2,i2printf@cp
 22211  001EC0  CFDD F01F          	movff	postdec2,i2printf@cp+1
 22212  001EC4  0E02               	movlw	2
 22213  001EC6  2620               	addwf	i2printf@ap,f,c
 22214  001EC8  0E00               	movlw	0
 22215  001ECA  2221               	addwfc	i2printf@ap+1,f,c
 22216                           
 22217                           ;doprnt.c: 740: if(!cp)
 22218  001ECC  501E               	movf	i2printf@cp,w,c
 22219  001ECE  101F               	iorwf	i2printf@cp+1,w,c
 22220  001ED0  A4D8               	btfss	status,2,c
 22221  001ED2  D004               	goto	i2l6526
 22222                           
 22223                           ;doprnt.c: 741: cp = "(null)";
 22224  001ED4  0EB6               	movlw	low STR_128
 22225  001ED6  6E1E               	movwf	i2printf@cp,c
 22226  001ED8  0EFF               	movlw	high STR_128
 22227  001EDA  6E1F               	movwf	i2printf@cp+1,c
 22228  001EDC                     i2l6526:
 22229                           
 22230                           ;doprnt.c: 745: len = 0;
 22231  001EDC  0E00               	movlw	0
 22232  001EDE  6E23               	movwf	i2printf@len+1,c
 22233  001EE0  0E00               	movlw	0
 22234  001EE2  6E22               	movwf	i2printf@len,c
 22235                           
 22236                           ;doprnt.c: 746: while(cp[len])
 22237  001EE4  D002               	goto	i2l6530
 22238  001EE6                     i2l6528:
 22239                           
 22240                           ;doprnt.c: 747: len++;
 22241  001EE6  4A22               	infsnz	i2printf@len,f,c
 22242  001EE8  2A23               	incf	i2printf@len+1,f,c
 22243  001EEA                     i2l6530:
 22244  001EEA  5022               	movf	i2printf@len,w,c
 22245  001EEC  241E               	addwf	i2printf@cp,w,c
 22246  001EEE  6E19               	movwf	??i2_printf& (0+255),c
 22247  001EF0  5023               	movf	i2printf@len+1,w,c
 22248  001EF2  201F               	addwfc	i2printf@cp+1,w,c
 22249  001EF4  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 22250  001EF6  C019  FFF6         	movff	??i2_printf,tblptrl
 22251  001EFA  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 22252  001EFE  0E00               	movlw	low (__mediumconst shr (0+16))
 22253  001F00  6EF8               	movwf	tblptru,c
 22254  001F02  0E0F               	movlw	(high __ramtop+-1)
 22255  001F04  64F7               	cpfsgt	tblptrh,c
 22256  001F06  D003               	bra	i2u508_47
 22257  001F08  0008               	tblrd		*
 22258  001F0A  50F5               	movf	tablat,w,c
 22259  001F0C  D005               	bra	i2u508_40
 22260  001F0E                     i2u508_47:
 22261  001F0E  CFF6 FFE9          	movff	tblptrl,fsr0l
 22262  001F12  CFF7 FFEA          	movff	tblptrh,fsr0h
 22263  001F16  50EF               	movf	indf0,w,c
 22264  001F18                     i2u508_40:
 22265  001F18  0900               	iorlw	0
 22266  001F1A  A4D8               	btfss	status,2,c
 22267  001F1C  D7E4               	goto	i2l6528
 22268                           
 22269                           ;doprnt.c: 757: if(width > len)
 22270  001F1E  5028               	movf	i2printf@width,w,c
 22271  001F20  5C22               	subwf	i2printf@len,w,c
 22272  001F22  5029               	movf	i2printf@width+1,w,c
 22273  001F24  5823               	subwfb	i2printf@len+1,w,c
 22274  001F26  B0D8               	btfsc	status,0,c
 22275  001F28  D005               	goto	i2l6536
 22276                           
 22277                           ;doprnt.c: 758: width -= len;
 22278  001F2A  5022               	movf	i2printf@len,w,c
 22279  001F2C  5E28               	subwf	i2printf@width,f,c
 22280  001F2E  5023               	movf	i2printf@len+1,w,c
 22281  001F30  5A29               	subwfb	i2printf@width+1,f,c
 22282  001F32  D008               	goto	i2l6540
 22283  001F34                     i2l6536:
 22284                           
 22285                           ;doprnt.c: 759: else
 22286                           ;doprnt.c: 760: width = 0;
 22287  001F34  0E00               	movlw	0
 22288  001F36  6E29               	movwf	i2printf@width+1,c
 22289  001F38  0E00               	movlw	0
 22290  001F3A  6E28               	movwf	i2printf@width,c
 22291                           
 22292                           ;doprnt.c: 764: while(width--)
 22293  001F3C  D003               	goto	i2l6540
 22294  001F3E                     i2l6538:
 22295                           
 22296                           ;doprnt.c: 765: (putch(' ') );
 22297  001F3E  0E20               	movlw	32
 22298  001F40  ECCD  F029         	call	i2_putch
 22299  001F44                     i2l6540:
 22300  001F44  0628               	decf	i2printf@width,f,c
 22301  001F46  A0D8               	btfss	status,0,c
 22302  001F48  0629               	decf	i2printf@width+1,f,c
 22303  001F4A  2828               	incf	i2printf@width,w,c
 22304  001F4C  E1F8               	bnz	i2l6538
 22305  001F4E  2829               	incf	i2printf@width+1,w,c
 22306  001F50  B4D8               	btfsc	status,2,c
 22307  001F52  D016               	goto	i2l6546
 22308  001F54  D7F4               	goto	i2l6538
 22309  001F56                     i2l6542:
 22310                           
 22311                           ;doprnt.c: 768: (putch(*cp++) );
 22312  001F56  C01E  FFF6         	movff	i2printf@cp,tblptrl
 22313  001F5A  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 22314  001F5E  0E00               	movlw	low (__mediumconst shr (0+16))
 22315  001F60  6EF8               	movwf	tblptru,c
 22316  001F62  0E0F               	movlw	(high __ramtop+-1)
 22317  001F64  64F7               	cpfsgt	tblptrh,c
 22318  001F66  D003               	bra	i2u512_47
 22319  001F68  0008               	tblrd		*
 22320  001F6A  50F5               	movf	tablat,w,c
 22321  001F6C  D005               	bra	i2u512_40
 22322  001F6E                     i2u512_47:
 22323  001F6E  CFF6 FFE9          	movff	tblptrl,fsr0l
 22324  001F72  CFF7 FFEA          	movff	tblptrh,fsr0h
 22325  001F76  50EF               	movf	indf0,w,c
 22326  001F78                     i2u512_40:
 22327  001F78  ECCD  F029         	call	i2_putch
 22328  001F7C  4A1E               	infsnz	i2printf@cp,f,c
 22329  001F7E  2A1F               	incf	i2printf@cp+1,f,c
 22330  001F80                     i2l6546:
 22331  001F80  0622               	decf	i2printf@len,f,c
 22332  001F82  A0D8               	btfss	status,0,c
 22333  001F84  0623               	decf	i2printf@len+1,f,c
 22334  001F86  2822               	incf	i2printf@len,w,c
 22335  001F88  E1E6               	bnz	i2l6542
 22336  001F8A  2823               	incf	i2printf@len+1,w,c
 22337  001F8C  B4D8               	btfsc	status,2,c
 22338  001F8E  D0DA               	goto	i2l6624
 22339  001F90  D7E2               	goto	i2l6542
 22340  001F92                     i2l6548:
 22341                           
 22342                           ;doprnt.c: 818: flag |= 0x40;
 22343  001F92  8C26               	bsf	i2printf@flag,6,c
 22344                           
 22345                           ;doprnt.c: 822: }
 22346                           
 22347                           ;doprnt.c: 819: break;
 22348  001F94  D01B               	goto	i2l1412
 22349  001F96                     i2l6552:
 22350  001F96  C00D  FFF6         	movff	i2printf@f,tblptrl
 22351  001F9A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22352  001F9E  4A0D               	infsnz	i2printf@f,f,c
 22353  001FA0  2A0E               	incf	i2printf@f+1,f,c
 22354  001FA2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22355  001FA2  6AF8               	clrf	tblptru,c
 22356  001FA4                     	endif
 22357  001FA4                     	if	0	;tblptru may be non-zero
 22358  001FA4                     	endif
 22359  001FA4  0008               	tblrd		*
 22360  001FA6  CFF5 F027          	movff	tablat,i2printf@c
 22361  001FAA  5027               	movf	i2printf@c,w,c
 22362                           
 22363                           ; Switch size 1, requested type "space"
 22364                           ; Number of cases is 5, Range of values is 0 to 117
 22365                           ; switch strategies available:
 22366                           ; Name         Instructions Cycles
 22367                           ; simple_byte           16     9 (average)
 22368                           ;	Chosen strategy is simple_byte
 22369  001FAC  0A00               	xorlw	0	; case 0
 22370  001FAE  B4D8               	btfsc	status,2,c
 22371  001FB0  0012               	return	
 22372  001FB2  0A64               	xorlw	100	; case 100
 22373  001FB4  B4D8               	btfsc	status,2,c
 22374  001FB6  D00A               	goto	i2l1412
 22375  001FB8  0A0D               	xorlw	13	; case 105
 22376  001FBA  B4D8               	btfsc	status,2,c
 22377  001FBC  D007               	goto	i2l1412
 22378  001FBE  0A1A               	xorlw	26	; case 115
 22379  001FC0  B4D8               	btfsc	status,2,c
 22380  001FC2  D778               	goto	i2l6518
 22381  001FC4  0A06               	xorlw	6	; case 117
 22382  001FC6  B4D8               	btfsc	status,2,c
 22383  001FC8  D7E4               	goto	i2l6548
 22384  001FCA  D0BC               	goto	i2l6624
 22385  001FCC                     i2l1412:
 22386                           
 22387                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 22388  001FCC  BC26               	btfsc	i2printf@flag,6,c
 22389  001FCE  D015               	goto	i2l6564
 22390                           
 22391                           ;doprnt.c: 1253: {
 22392                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 22393  001FD0  C020  FFD9         	movff	i2printf@ap,fsr2l
 22394  001FD4  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22395  001FD8  CFDE F024          	movff	postinc2,i2printf@val
 22396  001FDC  CFDD F025          	movff	postdec2,i2printf@val+1
 22397  001FE0  0E02               	movlw	2
 22398  001FE2  2620               	addwf	i2printf@ap,f,c
 22399  001FE4  0E00               	movlw	0
 22400  001FE6  2221               	addwfc	i2printf@ap+1,f,c
 22401                           
 22402                           ;doprnt.c: 1261: if((int)val < 0) {
 22403  001FE8  AE25               	btfss	i2printf@val+1,7,c
 22404  001FEA  D013               	goto	i2l6568
 22405                           
 22406                           ;doprnt.c: 1262: flag |= 0x03;
 22407  001FEC  0E03               	movlw	3
 22408  001FEE  1226               	iorwf	i2printf@flag,f,c
 22409                           
 22410                           ;doprnt.c: 1263: val = -val;
 22411  001FF0  6C24               	negf	i2printf@val,c
 22412  001FF2  1E25               	comf	i2printf@val+1,f,c
 22413  001FF4  B0D8               	btfsc	status,0,c
 22414  001FF6  2A25               	incf	i2printf@val+1,f,c
 22415                           
 22416                           ;doprnt.c: 1264: }
 22417                           ;doprnt.c: 1266: }
 22418  001FF8  D00C               	goto	i2l6568
 22419  001FFA                     i2l6564:
 22420                           
 22421                           ;doprnt.c: 1268: else
 22422                           ;doprnt.c: 1273: {
 22423                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 22424  001FFA  C020  FFD9         	movff	i2printf@ap,fsr2l
 22425  001FFE  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22426  002002  CFDE F024          	movff	postinc2,i2printf@val
 22427  002006  CFDD F025          	movff	postdec2,i2printf@val+1
 22428  00200A  0E02               	movlw	2
 22429  00200C  2620               	addwf	i2printf@ap,f,c
 22430  00200E  0E00               	movlw	0
 22431  002010  2221               	addwfc	i2printf@ap+1,f,c
 22432  002012                     i2l6568:
 22433                           
 22434                           ;doprnt.c: 1287: }
 22435                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22436  002012  0E01               	movlw	1
 22437  002014  6E27               	movwf	i2printf@c,c
 22438  002016                     i2l6570:
 22439  002016  0E05               	movlw	5
 22440  002018  1827               	xorwf	i2printf@c,w,c
 22441  00201A  B4D8               	btfsc	status,2,c
 22442  00201C  D015               	goto	i2l6582
 22443                           
 22444                           ;doprnt.c: 1306: if(val < dpowers[c])
 22445  00201E  5027               	movf	i2printf@c,w,c
 22446  002020  0D02               	mullw	2
 22447  002022  0EDE               	movlw	low _dpowers
 22448  002024  24F3               	addwf	prodl,w,c
 22449  002026  6EF6               	movwf	tblptrl,c
 22450  002028  0EFA               	movlw	high _dpowers
 22451  00202A  20F4               	addwfc	prodh,w,c
 22452  00202C  6EF7               	movwf	tblptrh,c
 22453  00202E                     	if	1	;There are 3 active tblptr bytes
 22454  00202E  6AF8               	clrf	tblptru,c
 22455  002030  0E00               	movlw	low (__mediumconst shr (0+16))
 22456  002032  22F8               	addwfc	tblptru,f,c
 22457  002034                     	endif
 22458  002034  0009               	tblrd		*+
 22459  002036  50F5               	movf	tablat,w,c
 22460  002038  5C24               	subwf	i2printf@val,w,c
 22461  00203A  0009               	tblrd		*+
 22462  00203C  50F5               	movf	tablat,w,c
 22463  00203E  5825               	subwfb	i2printf@val+1,w,c
 22464  002040  A0D8               	btfss	status,0,c
 22465  002042  D002               	goto	i2l6582
 22466                           
 22467                           ;doprnt.c: 1307: break;
 22468  002044  2A27               	incf	i2printf@c,f,c
 22469  002046  D7E7               	goto	i2l6570
 22470  002048                     i2l6582:
 22471                           
 22472                           ;doprnt.c: 1345: if(width && flag & 0x03)
 22473  002048  5028               	movf	i2printf@width,w,c
 22474  00204A  1029               	iorwf	i2printf@width+1,w,c
 22475  00204C  B4D8               	btfsc	status,2,c
 22476  00204E  D009               	goto	i2l6588
 22477  002050  C026  F019         	movff	i2printf@flag,??i2_printf
 22478  002054  0E03               	movlw	3
 22479  002056  1619               	andwf	??i2_printf,f,c
 22480  002058  B4D8               	btfsc	status,2,c
 22481  00205A  D003               	goto	i2l6588
 22482                           
 22483                           ;doprnt.c: 1346: width--;
 22484  00205C  0628               	decf	i2printf@width,f,c
 22485  00205E  A0D8               	btfss	status,0,c
 22486  002060  0629               	decf	i2printf@width+1,f,c
 22487  002062                     i2l6588:
 22488                           
 22489                           ;doprnt.c: 1381: if(width > c)
 22490  002062  0E80               	movlw	128
 22491  002064  BE27               	btfsc	i2printf@c,7,c
 22492  002066  0E7F               	movlw	127
 22493  002068  6E19               	movwf	??i2_printf& (0+255),c
 22494  00206A  5028               	movf	i2printf@width,w,c
 22495  00206C  5C27               	subwf	i2printf@c,w,c
 22496  00206E  5029               	movf	i2printf@width+1,w,c
 22497  002070  0A80               	xorlw	128
 22498  002072  5819               	subwfb	??i2_printf& (0+255),w,c
 22499  002074  B0D8               	btfsc	status,0,c
 22500  002076  D007               	goto	i2l6592
 22501                           
 22502                           ;doprnt.c: 1382: width -= c;
 22503  002078  5027               	movf	i2printf@c,w,c
 22504  00207A  5E28               	subwf	i2printf@width,f,c
 22505  00207C  0E00               	movlw	0
 22506  00207E  BE27               	btfsc	i2printf@c,7,c
 22507  002080  0EFF               	movlw	255
 22508  002082  5A29               	subwfb	i2printf@width+1,f,c
 22509  002084  D004               	goto	i2l6594
 22510  002086                     i2l6592:
 22511                           
 22512                           ;doprnt.c: 1383: else
 22513                           ;doprnt.c: 1384: width = 0;
 22514  002086  0E00               	movlw	0
 22515  002088  6E29               	movwf	i2printf@width+1,c
 22516  00208A  0E00               	movlw	0
 22517  00208C  6E28               	movwf	i2printf@width,c
 22518  00208E                     i2l6594:
 22519                           
 22520                           ;doprnt.c: 1387: if(flag & 0x04) {
 22521  00208E  A426               	btfss	i2printf@flag,2,c
 22522  002090  D014               	goto	i2l6606
 22523                           
 22524                           ;doprnt.c: 1392: if(flag & 0x03)
 22525  002092  C026  F019         	movff	i2printf@flag,??i2_printf
 22526  002096  0E03               	movlw	3
 22527  002098  1619               	andwf	??i2_printf,f,c
 22528  00209A  B4D8               	btfsc	status,2,c
 22529  00209C  D003               	goto	i2l6600
 22530                           
 22531                           ;doprnt.c: 1393: (putch('-') );
 22532  00209E  0E2D               	movlw	45
 22533  0020A0  ECCD  F029         	call	i2_putch
 22534  0020A4                     i2l6600:
 22535                           
 22536                           ;doprnt.c: 1415: if(width)
 22537  0020A4  5028               	movf	i2printf@width,w,c
 22538  0020A6  1029               	iorwf	i2printf@width+1,w,c
 22539  0020A8  B4D8               	btfsc	status,2,c
 22540  0020AA  D01E               	goto	i2l6616
 22541                           
 22542                           ;doprnt.c: 1417: (putch('0') );
 22543                           
 22544                           ;doprnt.c: 1416: do
 22545  0020AC  0E30               	movlw	48
 22546  0020AE  ECCD  F029         	call	i2_putch
 22547                           
 22548                           ;doprnt.c: 1418: while(--width);
 22549  0020B2  0628               	decf	i2printf@width,f,c
 22550  0020B4  A0D8               	btfss	status,0,c
 22551  0020B6  0629               	decf	i2printf@width+1,f,c
 22552  0020B8  D7F5               	goto	i2l6600
 22553  0020BA                     i2l6606:
 22554                           
 22555                           ;doprnt.c: 1422: {
 22556                           ;doprnt.c: 1424: if(width
 22557                           ;doprnt.c: 1428: )
 22558  0020BA  5028               	movf	i2printf@width,w,c
 22559  0020BC  1029               	iorwf	i2printf@width+1,w,c
 22560  0020BE  B4D8               	btfsc	status,2,c
 22561  0020C0  D00A               	goto	i2l6612
 22562  0020C2                     i2l6608:
 22563                           
 22564                           ;doprnt.c: 1430: (putch(' ') );
 22565  0020C2  0E20               	movlw	32
 22566  0020C4  ECCD  F029         	call	i2_putch
 22567                           
 22568                           ;doprnt.c: 1431: while(--width);
 22569  0020C8  0628               	decf	i2printf@width,f,c
 22570  0020CA  A0D8               	btfss	status,0,c
 22571  0020CC  0629               	decf	i2printf@width+1,f,c
 22572  0020CE  5028               	movf	i2printf@width,w,c
 22573  0020D0  1029               	iorwf	i2printf@width+1,w,c
 22574  0020D2  A4D8               	btfss	status,2,c
 22575  0020D4  D7F6               	goto	i2l6608
 22576  0020D6                     i2l6612:
 22577                           
 22578                           ;doprnt.c: 1438: if(flag & 0x03)
 22579  0020D6  C026  F019         	movff	i2printf@flag,??i2_printf
 22580  0020DA  0E03               	movlw	3
 22581  0020DC  1619               	andwf	??i2_printf,f,c
 22582  0020DE  B4D8               	btfsc	status,2,c
 22583  0020E0  D003               	goto	i2l6616
 22584                           
 22585                           ;doprnt.c: 1439: (putch('-') );
 22586  0020E2  0E2D               	movlw	45
 22587  0020E4  ECCD  F029         	call	i2_putch
 22588  0020E8                     i2l6616:
 22589                           
 22590                           ;doprnt.c: 1469: }
 22591                           ;doprnt.c: 1472: prec = c;
 22592  0020E8  C027  F01D         	movff	i2printf@c,i2printf@prec
 22593                           
 22594                           ;doprnt.c: 1474: while(prec--) {
 22595  0020EC  D027               	goto	i2l6622
 22596  0020EE                     i2l6618:
 22597                           
 22598                           ;doprnt.c: 1478: {
 22599                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 22600  0020EE  501D               	movf	i2printf@prec,w,c
 22601  0020F0  0D02               	mullw	2
 22602  0020F2  0EDE               	movlw	low _dpowers
 22603  0020F4  24F3               	addwf	prodl,w,c
 22604  0020F6  6EF6               	movwf	tblptrl,c
 22605  0020F8  0EFA               	movlw	high _dpowers
 22606  0020FA  20F4               	addwfc	prodh,w,c
 22607  0020FC  6EF7               	movwf	tblptrh,c
 22608  0020FE                     	if	1	;There are 3 active tblptr bytes
 22609  0020FE  6AF8               	clrf	tblptru,c
 22610  002100  0E00               	movlw	low (__mediumconst shr (0+16))
 22611  002102  22F8               	addwfc	tblptru,f,c
 22612  002104                     	endif
 22613  002104  0009               	tblrd		*+
 22614  002106  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 22615  00210A  000A               	tblrd		*-
 22616  00210C  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 22617  002110  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 22618  002114  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 22619  002118  EC08  F026         	call	i2___lwdiv	;wreg free
 22620  00211C  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 22621  002120  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 22622  002124  0E00               	movlw	0
 22623  002126  6E04               	movwf	i2___lwmod@divisor+1,c
 22624  002128  0E0A               	movlw	10
 22625  00212A  6E03               	movwf	i2___lwmod@divisor,c
 22626  00212C  ECC7  F026         	call	i2___lwmod	;wreg free
 22627  002130  5001               	movf	?i2___lwmod,w,c
 22628  002132  0F30               	addlw	48
 22629  002134  6E27               	movwf	i2printf@c,c
 22630                           
 22631                           ;doprnt.c: 1523: }
 22632                           ;doprnt.c: 1524: (putch(c) );
 22633  002136  5027               	movf	i2printf@c,w,c
 22634  002138  ECCD  F029         	call	i2_putch
 22635  00213C                     i2l6622:
 22636  00213C  061D               	decf	i2printf@prec,f,c
 22637  00213E  281D               	incf	i2printf@prec,w,c
 22638  002140  A4D8               	btfss	status,2,c
 22639  002142  D7D5               	goto	i2l6618
 22640  002144                     i2l6624:
 22641  002144  C00D  FFF6         	movff	i2printf@f,tblptrl
 22642  002148  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22643  00214C  4A0D               	infsnz	i2printf@f,f,c
 22644  00214E  2A0E               	incf	i2printf@f+1,f,c
 22645  002150                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22646  002150  6AF8               	clrf	tblptru,c
 22647  002152                     	endif
 22648  002152                     	if	0	;tblptru may be non-zero
 22649  002152                     	endif
 22650  002152  0008               	tblrd		*
 22651  002154  CFF5 F027          	movff	tablat,i2printf@c
 22652  002158  5027               	movf	i2printf@c,w,c
 22653  00215A  B4D8               	btfsc	status,2,c
 22654  00215C  0012               	return	
 22655  00215E  D64E               	goto	i2l6494
 22656  002160                     __end_ofi2_printf:
 22657                           	opt stack 0
 22658                           pclatu	equ	0xFFB
 22659                           pclath	equ	0xFFA
 22660                           tblptru	equ	0xFF8
 22661                           tblptrh	equ	0xFF7
 22662                           tblptrl	equ	0xFF6
 22663                           tablat	equ	0xFF5
 22664                           prodh	equ	0xFF4
 22665                           prodl	equ	0xFF3
 22666                           intcon	equ	0xFF2
 22667                           intcon2	equ	0xFF1
 22668                           intcon3	equ	0xFF0
 22669                           indf0	equ	0xFEF
 22670                           postinc0	equ	0xFEE
 22671                           fsr0h	equ	0xFEA
 22672                           fsr0l	equ	0xFE9
 22673                           wreg	equ	0xFE8
 22674                           postdec1	equ	0xFE5
 22675                           fsr1h	equ	0xFE2
 22676                           fsr1l	equ	0xFE1
 22677                           indf2	equ	0xFDF
 22678                           postinc2	equ	0xFDE
 22679                           postdec2	equ	0xFDD
 22680                           fsr2h	equ	0xFDA
 22681                           fsr2l	equ	0xFD9
 22682                           status	equ	0xFD8
 22683                           
 22684 ;; *************** function i2_putch *****************
 22685 ;; Defined at:
 22686 ;;		line 20 in file "lcd.c"
 22687 ;; Parameters:    Size  Location     Type
 22688 ;;  data            1    wreg     unsigned char 
 22689 ;; Auto vars:     Size  Location     Type
 22690 ;;  data            1    2[COMRAM] unsigned char 
 22691 ;; Return value:  Size  Location     Type
 22692 ;;                  1    wreg      void 
 22693 ;; Registers used:
 22694 ;;		wreg, status,2, status,0, cstack
 22695 ;; Tracked objects:
 22696 ;;		On entry : 0/0
 22697 ;;		On exit  : 0/0
 22698 ;;		Unchanged: 0/0
 22699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22701 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22703 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22704 ;;Total ram usage:        1 bytes
 22705 ;; Hardware stack levels used:    1
 22706 ;; Hardware stack levels required when called:    1
 22707 ;; This function calls:
 22708 ;;		i2_lcdNibble
 22709 ;; This function is called by:
 22710 ;;		i2_printf
 22711 ;; This function uses a non-reentrant model
 22712 ;;
 22713                           
 22714                           	psect	text82
 22715  00539A                     __ptext82:
 22716                           	opt stack 0
 22717  00539A                     i2_putch:
 22718                           	opt stack 20
 22719                           
 22720                           ;incstack = 0
 22721                           ;i2putch@data stored from wreg
 22722  00539A  6E03               	movwf	i2putch@data,c
 22723                           
 22724                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 22725  00539C  848C               	bsf	3980,2,c	;volatile
 22726                           
 22727                           ;lcd.c: 22: lcdNibble(data);
 22728  00539E  5003               	movf	i2putch@data,w,c
 22729  0053A0  ECDD  F025         	call	i2_lcdNibble
 22730  0053A4  0012               	return		;funcret
 22731  0053A6                     __end_ofi2_putch:
 22732                           	opt stack 0
 22733                           pclatu	equ	0xFFB
 22734                           pclath	equ	0xFFA
 22735                           tblptru	equ	0xFF8
 22736                           tblptrh	equ	0xFF7
 22737                           tblptrl	equ	0xFF6
 22738                           tablat	equ	0xFF5
 22739                           prodh	equ	0xFF4
 22740                           prodl	equ	0xFF3
 22741                           intcon	equ	0xFF2
 22742                           intcon2	equ	0xFF1
 22743                           intcon3	equ	0xFF0
 22744                           indf0	equ	0xFEF
 22745                           postinc0	equ	0xFEE
 22746                           fsr0h	equ	0xFEA
 22747                           fsr0l	equ	0xFE9
 22748                           wreg	equ	0xFE8
 22749                           postdec1	equ	0xFE5
 22750                           fsr1h	equ	0xFE2
 22751                           fsr1l	equ	0xFE1
 22752                           indf2	equ	0xFDF
 22753                           postinc2	equ	0xFDE
 22754                           postdec2	equ	0xFDD
 22755                           fsr2h	equ	0xFDA
 22756                           fsr2l	equ	0xFD9
 22757                           status	equ	0xFD8
 22758                           
 22759 ;; *************** function i2_isdigit *****************
 22760 ;; Defined at:
 22761 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 22762 ;; Parameters:    Size  Location     Type
 22763 ;;  c               1    wreg     unsigned char 
 22764 ;; Auto vars:     Size  Location     Type
 22765 ;;  c               1    2[COMRAM] unsigned char 
 22766 ;; Return value:  Size  Location     Type
 22767 ;;		None               void
 22768 ;; Registers used:
 22769 ;;		wreg, status,2, status,0
 22770 ;; Tracked objects:
 22771 ;;		On entry : 0/0
 22772 ;;		On exit  : 0/0
 22773 ;;		Unchanged: 0/0
 22774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22776 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22777 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22778 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22779 ;;Total ram usage:        3 bytes
 22780 ;; Hardware stack levels used:    1
 22781 ;; This function calls:
 22782 ;;		Nothing
 22783 ;; This function is called by:
 22784 ;;		i2_printf
 22785 ;; This function uses a non-reentrant model
 22786 ;;
 22787                           
 22788                           	psect	text83
 22789  0052D2                     __ptext83:
 22790                           	opt stack 0
 22791  0052D2                     i2_isdigit:
 22792                           	opt stack 21
 22793                           
 22794                           ;incstack = 0
 22795                           ;i2isdigit@c stored from wreg
 22796  0052D2  6E03               	movwf	i2isdigit@c,c
 22797  0052D4  0E00               	movlw	0
 22798  0052D6  6E02               	movwf	i2_isdigit$2011,c
 22799  0052D8  0E3A               	movlw	58
 22800  0052DA  6003               	cpfslt	i2isdigit@c,c
 22801  0052DC  D005               	goto	i2l6194
 22802  0052DE  0E2F               	movlw	47
 22803  0052E0  6403               	cpfsgt	i2isdigit@c,c
 22804  0052E2  D002               	goto	i2l6194
 22805  0052E4  0E01               	movlw	1
 22806  0052E6  6E02               	movwf	i2_isdigit$2011,c
 22807  0052E8                     i2l6194:
 22808  0052E8  C002  F001         	movff	i2_isdigit$2011,??i2_isdigit
 22809  0052EC  3001               	rrcf	??i2_isdigit,w,c
 22810  0052EE  0012               	return	
 22811  0052F0                     __end_ofi2_isdigit:
 22812                           	opt stack 0
 22813                           pclatu	equ	0xFFB
 22814                           pclath	equ	0xFFA
 22815                           tblptru	equ	0xFF8
 22816                           tblptrh	equ	0xFF7
 22817                           tblptrl	equ	0xFF6
 22818                           tablat	equ	0xFF5
 22819                           prodh	equ	0xFF4
 22820                           prodl	equ	0xFF3
 22821                           intcon	equ	0xFF2
 22822                           intcon2	equ	0xFF1
 22823                           intcon3	equ	0xFF0
 22824                           indf0	equ	0xFEF
 22825                           postinc0	equ	0xFEE
 22826                           fsr0h	equ	0xFEA
 22827                           fsr0l	equ	0xFE9
 22828                           wreg	equ	0xFE8
 22829                           postdec1	equ	0xFE5
 22830                           fsr1h	equ	0xFE2
 22831                           fsr1l	equ	0xFE1
 22832                           indf2	equ	0xFDF
 22833                           postinc2	equ	0xFDE
 22834                           postdec2	equ	0xFDD
 22835                           fsr2h	equ	0xFDA
 22836                           fsr2l	equ	0xFD9
 22837                           status	equ	0xFD8
 22838                           
 22839 ;; *************** function i2___wmul *****************
 22840 ;; Defined at:
 22841 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 22842 ;; Parameters:    Size  Location     Type
 22843 ;;  multiplier      2    0[COMRAM] unsigned int 
 22844 ;;  multiplicand    2    2[COMRAM] unsigned int 
 22845 ;; Auto vars:     Size  Location     Type
 22846 ;;  __wmul          2    4[COMRAM] unsigned int 
 22847 ;; Return value:  Size  Location     Type
 22848 ;;                  2    0[COMRAM] unsigned int 
 22849 ;; Registers used:
 22850 ;;		wreg, status,2, status,0, prodl, prodh
 22851 ;; Tracked objects:
 22852 ;;		On entry : 0/0
 22853 ;;		On exit  : 0/0
 22854 ;;		Unchanged: 0/0
 22855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22856 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22857 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22859 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22860 ;;Total ram usage:        6 bytes
 22861 ;; Hardware stack levels used:    1
 22862 ;; This function calls:
 22863 ;;		Nothing
 22864 ;; This function is called by:
 22865 ;;		_printSortTimer
 22866 ;;		_retrieveLog
 22867 ;;		i2_printf
 22868 ;; This function uses a non-reentrant model
 22869 ;;
 22870                           
 22871                           	psect	text84
 22872  00521E                     __ptext84:
 22873                           	opt stack 0
 22874  00521E                     i2___wmul:
 22875                           	opt stack 21
 22876                           
 22877                           ;incstack = 0
 22878  00521E  5001               	movf	i2___wmul@multiplier,w,c
 22879  005220  0203               	mulwf	i2___wmul@multiplicand,c
 22880  005222  CFF3 F005          	movff	prodl,i2___wmul@product
 22881  005226  CFF4 F006          	movff	prodh,i2___wmul@product+1
 22882  00522A  5001               	movf	i2___wmul@multiplier,w,c
 22883  00522C  0204               	mulwf	i2___wmul@multiplicand+1,c
 22884  00522E  50F3               	movf	prodl,w,c
 22885  005230  2606               	addwf	i2___wmul@product+1,f,c
 22886  005232  5002               	movf	i2___wmul@multiplier+1,w,c
 22887  005234  0203               	mulwf	i2___wmul@multiplicand,c
 22888  005236  50F3               	movf	prodl,w,c
 22889  005238  2606               	addwf	i2___wmul@product+1,f,c
 22890  00523A  C005  F001         	movff	i2___wmul@product,?i2___wmul
 22891  00523E  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 22892  005242  0012               	return	
 22893  005244                     __end_ofi2___wmul:
 22894                           	opt stack 0
 22895                           pclatu	equ	0xFFB
 22896                           pclath	equ	0xFFA
 22897                           tblptru	equ	0xFF8
 22898                           tblptrh	equ	0xFF7
 22899                           tblptrl	equ	0xFF6
 22900                           tablat	equ	0xFF5
 22901                           prodh	equ	0xFF4
 22902                           prodl	equ	0xFF3
 22903                           intcon	equ	0xFF2
 22904                           intcon2	equ	0xFF1
 22905                           intcon3	equ	0xFF0
 22906                           indf0	equ	0xFEF
 22907                           postinc0	equ	0xFEE
 22908                           fsr0h	equ	0xFEA
 22909                           fsr0l	equ	0xFE9
 22910                           wreg	equ	0xFE8
 22911                           postdec1	equ	0xFE5
 22912                           fsr1h	equ	0xFE2
 22913                           fsr1l	equ	0xFE1
 22914                           indf2	equ	0xFDF
 22915                           postinc2	equ	0xFDE
 22916                           postdec2	equ	0xFDD
 22917                           fsr2h	equ	0xFDA
 22918                           fsr2l	equ	0xFD9
 22919                           status	equ	0xFD8
 22920                           
 22921 ;; *************** function i2___lwmod *****************
 22922 ;; Defined at:
 22923 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 22924 ;; Parameters:    Size  Location     Type
 22925 ;;  dividend        2    0[COMRAM] unsigned int 
 22926 ;;  divisor         2    2[COMRAM] unsigned int 
 22927 ;; Auto vars:     Size  Location     Type
 22928 ;;  __lwmod         1    4[COMRAM] unsigned char 
 22929 ;; Return value:  Size  Location     Type
 22930 ;;                  2    0[COMRAM] unsigned int 
 22931 ;; Registers used:
 22932 ;;		wreg, status,2, status,0
 22933 ;; Tracked objects:
 22934 ;;		On entry : 0/0
 22935 ;;		On exit  : 0/0
 22936 ;;		Unchanged: 0/0
 22937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22938 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22939 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22941 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22942 ;;Total ram usage:        5 bytes
 22943 ;; Hardware stack levels used:    1
 22944 ;; This function calls:
 22945 ;;		Nothing
 22946 ;; This function is called by:
 22947 ;;		_printSortTimer
 22948 ;;		i2_printf
 22949 ;; This function uses a non-reentrant model
 22950 ;;
 22951                           
 22952                           	psect	text85
 22953  004D8E                     __ptext85:
 22954                           	opt stack 0
 22955  004D8E                     i2___lwmod:
 22956                           	opt stack 21
 22957                           
 22958                           ;incstack = 0
 22959  004D8E  5003               	movf	i2___lwmod@divisor,w,c
 22960  004D90  1004               	iorwf	i2___lwmod@divisor+1,w,c
 22961  004D92  B4D8               	btfsc	status,2,c
 22962  004D94  D018               	goto	i2l1869
 22963  004D96  0E01               	movlw	1
 22964  004D98  6E05               	movwf	i2___lwmod@counter,c
 22965  004D9A  D004               	goto	i2l6226
 22966  004D9C                     i2l6224:
 22967  004D9C  90D8               	bcf	status,0,c
 22968  004D9E  3603               	rlcf	i2___lwmod@divisor,f,c
 22969  004DA0  3604               	rlcf	i2___lwmod@divisor+1,f,c
 22970  004DA2  2A05               	incf	i2___lwmod@counter,f,c
 22971  004DA4                     i2l6226:
 22972  004DA4  AE04               	btfss	i2___lwmod@divisor+1,7,c
 22973  004DA6  D7FA               	goto	i2l6224
 22974  004DA8                     i2l6228:
 22975  004DA8  5003               	movf	i2___lwmod@divisor,w,c
 22976  004DAA  5C01               	subwf	i2___lwmod@dividend,w,c
 22977  004DAC  5004               	movf	i2___lwmod@divisor+1,w,c
 22978  004DAE  5802               	subwfb	i2___lwmod@dividend+1,w,c
 22979  004DB0  A0D8               	btfss	status,0,c
 22980  004DB2  D004               	goto	i2l6232
 22981  004DB4  5003               	movf	i2___lwmod@divisor,w,c
 22982  004DB6  5E01               	subwf	i2___lwmod@dividend,f,c
 22983  004DB8  5004               	movf	i2___lwmod@divisor+1,w,c
 22984  004DBA  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 22985  004DBC                     i2l6232:
 22986  004DBC  90D8               	bcf	status,0,c
 22987  004DBE  3204               	rrcf	i2___lwmod@divisor+1,f,c
 22988  004DC0  3203               	rrcf	i2___lwmod@divisor,f,c
 22989  004DC2  2E05               	decfsz	i2___lwmod@counter,f,c
 22990  004DC4  D7F1               	goto	i2l6228
 22991  004DC6                     i2l1869:
 22992  004DC6  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 22993  004DCA  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 22994  004DCE  0012               	return		;funcret
 22995  004DD0                     __end_ofi2___lwmod:
 22996                           	opt stack 0
 22997                           pclatu	equ	0xFFB
 22998                           pclath	equ	0xFFA
 22999                           tblptru	equ	0xFF8
 23000                           tblptrh	equ	0xFF7
 23001                           tblptrl	equ	0xFF6
 23002                           tablat	equ	0xFF5
 23003                           prodh	equ	0xFF4
 23004                           prodl	equ	0xFF3
 23005                           intcon	equ	0xFF2
 23006                           intcon2	equ	0xFF1
 23007                           intcon3	equ	0xFF0
 23008                           indf0	equ	0xFEF
 23009                           postinc0	equ	0xFEE
 23010                           fsr0h	equ	0xFEA
 23011                           fsr0l	equ	0xFE9
 23012                           wreg	equ	0xFE8
 23013                           postdec1	equ	0xFE5
 23014                           fsr1h	equ	0xFE2
 23015                           fsr1l	equ	0xFE1
 23016                           indf2	equ	0xFDF
 23017                           postinc2	equ	0xFDE
 23018                           postdec2	equ	0xFDD
 23019                           fsr2h	equ	0xFDA
 23020                           fsr2l	equ	0xFD9
 23021                           status	equ	0xFD8
 23022                           
 23023 ;; *************** function i2___lwdiv *****************
 23024 ;; Defined at:
 23025 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 23026 ;; Parameters:    Size  Location     Type
 23027 ;;  dividend        2    5[COMRAM] unsigned int 
 23028 ;;  divisor         2    7[COMRAM] unsigned int 
 23029 ;; Auto vars:     Size  Location     Type
 23030 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 23031 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 23032 ;; Return value:  Size  Location     Type
 23033 ;;                  2    5[COMRAM] unsigned int 
 23034 ;; Registers used:
 23035 ;;		wreg, status,2, status,0
 23036 ;; Tracked objects:
 23037 ;;		On entry : 0/0
 23038 ;;		On exit  : 0/0
 23039 ;;		Unchanged: 0/0
 23040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23041 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23042 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23044 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23045 ;;Total ram usage:        7 bytes
 23046 ;; Hardware stack levels used:    1
 23047 ;; This function calls:
 23048 ;;		Nothing
 23049 ;; This function is called by:
 23050 ;;		_printSortTimer
 23051 ;;		i2_printf
 23052 ;; This function uses a non-reentrant model
 23053 ;;
 23054                           
 23055                           	psect	text86
 23056  004C10                     __ptext86:
 23057                           	opt stack 0
 23058  004C10                     i2___lwdiv:
 23059                           	opt stack 21
 23060                           
 23061                           ;incstack = 0
 23062  004C10  0E00               	movlw	0
 23063  004C12  6E0B               	movwf	i2___lwdiv@quotient+1,c
 23064  004C14  0E00               	movlw	0
 23065  004C16  6E0A               	movwf	i2___lwdiv@quotient,c
 23066  004C18  5008               	movf	i2___lwdiv@divisor,w,c
 23067  004C1A  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 23068  004C1C  B4D8               	btfsc	status,2,c
 23069  004C1E  D01C               	goto	i2l1859
 23070  004C20  0E01               	movlw	1
 23071  004C22  6E0C               	movwf	i2___lwdiv@counter,c
 23072  004C24  D004               	goto	i2l6206
 23073  004C26                     i2l6204:
 23074  004C26  90D8               	bcf	status,0,c
 23075  004C28  3608               	rlcf	i2___lwdiv@divisor,f,c
 23076  004C2A  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 23077  004C2C  2A0C               	incf	i2___lwdiv@counter,f,c
 23078  004C2E                     i2l6206:
 23079  004C2E  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 23080  004C30  D7FA               	goto	i2l6204
 23081  004C32                     i2l6208:
 23082  004C32  90D8               	bcf	status,0,c
 23083  004C34  360A               	rlcf	i2___lwdiv@quotient,f,c
 23084  004C36  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 23085  004C38  5008               	movf	i2___lwdiv@divisor,w,c
 23086  004C3A  5C06               	subwf	i2___lwdiv@dividend,w,c
 23087  004C3C  5009               	movf	i2___lwdiv@divisor+1,w,c
 23088  004C3E  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 23089  004C40  A0D8               	btfss	status,0,c
 23090  004C42  D005               	goto	i2l6216
 23091  004C44  5008               	movf	i2___lwdiv@divisor,w,c
 23092  004C46  5E06               	subwf	i2___lwdiv@dividend,f,c
 23093  004C48  5009               	movf	i2___lwdiv@divisor+1,w,c
 23094  004C4A  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 23095  004C4C  800A               	bsf	i2___lwdiv@quotient,0,c
 23096  004C4E                     i2l6216:
 23097  004C4E  90D8               	bcf	status,0,c
 23098  004C50  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 23099  004C52  3208               	rrcf	i2___lwdiv@divisor,f,c
 23100  004C54  2E0C               	decfsz	i2___lwdiv@counter,f,c
 23101  004C56  D7ED               	goto	i2l6208
 23102  004C58                     i2l1859:
 23103  004C58  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 23104  004C5C  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 23105  004C60  0012               	return		;funcret
 23106  004C62                     __end_ofi2___lwdiv:
 23107                           	opt stack 0
 23108                           pclatu	equ	0xFFB
 23109                           pclath	equ	0xFFA
 23110                           tblptru	equ	0xFF8
 23111                           tblptrh	equ	0xFF7
 23112                           tblptrl	equ	0xFF6
 23113                           tablat	equ	0xFF5
 23114                           prodh	equ	0xFF4
 23115                           prodl	equ	0xFF3
 23116                           intcon	equ	0xFF2
 23117                           intcon2	equ	0xFF1
 23118                           intcon3	equ	0xFF0
 23119                           indf0	equ	0xFEF
 23120                           postinc0	equ	0xFEE
 23121                           fsr0h	equ	0xFEA
 23122                           fsr0l	equ	0xFE9
 23123                           wreg	equ	0xFE8
 23124                           postdec1	equ	0xFE5
 23125                           fsr1h	equ	0xFE2
 23126                           fsr1l	equ	0xFE1
 23127                           indf2	equ	0xFDF
 23128                           postinc2	equ	0xFDE
 23129                           postdec2	equ	0xFDD
 23130                           fsr2h	equ	0xFDA
 23131                           fsr2l	equ	0xFD9
 23132                           status	equ	0xFD8
 23133                           
 23134 ;; *************** function i2_lcdInst *****************
 23135 ;; Defined at:
 23136 ;;		line 15 in file "lcd.c"
 23137 ;; Parameters:    Size  Location     Type
 23138 ;;  data            1    wreg     unsigned char 
 23139 ;; Auto vars:     Size  Location     Type
 23140 ;;  data            1    2[COMRAM] unsigned char 
 23141 ;; Return value:  Size  Location     Type
 23142 ;;                  1    wreg      void 
 23143 ;; Registers used:
 23144 ;;		wreg, status,2, status,0, cstack
 23145 ;; Tracked objects:
 23146 ;;		On entry : 0/0
 23147 ;;		On exit  : 0/0
 23148 ;;		Unchanged: 0/0
 23149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23151 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23153 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23154 ;;Total ram usage:        1 bytes
 23155 ;; Hardware stack levels used:    1
 23156 ;; Hardware stack levels required when called:    1
 23157 ;; This function calls:
 23158 ;;		i2_lcdNibble
 23159 ;; This function is called by:
 23160 ;;		_change_state_to_menu_11
 23161 ;;		_change_state_to_menu_23
 23162 ;;		_change_state_to_logs_11
 23163 ;;		_change_state_to_logs_12
 23164 ;;		_change_state_to_logs_22
 23165 ;;		_change_state_to_logs_23
 23166 ;;		_change_state_to_logs_33
 23167 ;;		_change_state_to_logs_34
 23168 ;;		_printSortTimer
 23169 ;;		i2_change_state_to_menu_start
 23170 ;;		i2_change_state_to_menu_12
 23171 ;;		i2_change_state_to_menu_22
 23172 ;;		i2_printRTC
 23173 ;; This function uses a non-reentrant model
 23174 ;;
 23175                           
 23176                           	psect	text87
 23177  0053A6                     __ptext87:
 23178                           	opt stack 0
 23179  0053A6                     i2_lcdInst:
 23180                           	opt stack 20
 23181                           
 23182                           ;incstack = 0
 23183                           ;i2lcdInst@data stored from wreg
 23184  0053A6  6E03               	movwf	i2lcdInst@data,c
 23185                           
 23186                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 23187  0053A8  948C               	bcf	3980,2,c	;volatile
 23188                           
 23189                           ;lcd.c: 17: lcdNibble(data);
 23190  0053AA  5003               	movf	i2lcdInst@data,w,c
 23191  0053AC  ECDD  F025         	call	i2_lcdNibble
 23192  0053B0  0012               	return		;funcret
 23193  0053B2                     __end_ofi2_lcdInst:
 23194                           	opt stack 0
 23195                           pclatu	equ	0xFFB
 23196                           pclath	equ	0xFFA
 23197                           tblptru	equ	0xFF8
 23198                           tblptrh	equ	0xFF7
 23199                           tblptrl	equ	0xFF6
 23200                           tablat	equ	0xFF5
 23201                           prodh	equ	0xFF4
 23202                           prodl	equ	0xFF3
 23203                           intcon	equ	0xFF2
 23204                           intcon2	equ	0xFF1
 23205                           intcon3	equ	0xFF0
 23206                           indf0	equ	0xFEF
 23207                           postinc0	equ	0xFEE
 23208                           fsr0h	equ	0xFEA
 23209                           fsr0l	equ	0xFE9
 23210                           wreg	equ	0xFE8
 23211                           postdec1	equ	0xFE5
 23212                           fsr1h	equ	0xFE2
 23213                           fsr1l	equ	0xFE1
 23214                           indf2	equ	0xFDF
 23215                           postinc2	equ	0xFDE
 23216                           postdec2	equ	0xFDD
 23217                           fsr2h	equ	0xFDA
 23218                           fsr2l	equ	0xFD9
 23219                           status	equ	0xFD8
 23220                           
 23221 ;; *************** function i2_lcdNibble *****************
 23222 ;; Defined at:
 23223 ;;		line 25 in file "lcd.c"
 23224 ;; Parameters:    Size  Location     Type
 23225 ;;  data            1    wreg     unsigned char 
 23226 ;; Auto vars:     Size  Location     Type
 23227 ;;  data            1    1[COMRAM] unsigned char 
 23228 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 23229 ;; Return value:  Size  Location     Type
 23230 ;;                  1    wreg      void 
 23231 ;; Registers used:
 23232 ;;		wreg, status,2, status,0
 23233 ;; Tracked objects:
 23234 ;;		On entry : 0/0
 23235 ;;		On exit  : 0/0
 23236 ;;		Unchanged: 0/0
 23237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23239 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23241 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23242 ;;Total ram usage:        2 bytes
 23243 ;; Hardware stack levels used:    1
 23244 ;; This function calls:
 23245 ;;		Nothing
 23246 ;; This function is called by:
 23247 ;;		i2_lcdInst
 23248 ;;		i2_putch
 23249 ;; This function uses a non-reentrant model
 23250 ;;
 23251                           
 23252                           	psect	text88
 23253  004BBA                     __ptext88:
 23254                           	opt stack 0
 23255  004BBA                     i2_lcdNibble:
 23256                           	opt stack 20
 23257                           
 23258                           ;incstack = 0
 23259                           ;i2lcdNibble@data stored from wreg
 23260  004BBA  6E02               	movwf	i2lcdNibble@data,c
 23261                           
 23262                           ;lcd.c: 27: char temp = data & 0xF0;
 23263  004BBC  5002               	movf	i2lcdNibble@data,w,c
 23264  004BBE  0BF0               	andlw	240
 23265  004BC0  6E01               	movwf	i2lcdNibble@temp,c
 23266                           
 23267                           ;lcd.c: 28: LATD = LATD & 0x0F;
 23268  004BC2  508C               	movf	3980,w,c	;volatile
 23269  004BC4  0B0F               	andlw	15
 23270  004BC6  6E8C               	movwf	3980,c	;volatile
 23271                           
 23272                           ;lcd.c: 29: LATD = temp | LATD;
 23273  004BC8  5001               	movf	i2lcdNibble@temp,w,c
 23274  004BCA  108C               	iorwf	3980,w,c	;volatile
 23275  004BCC  6E8C               	movwf	3980,c	;volatile
 23276                           
 23277                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 23278  004BCE  868C               	bsf	3980,3,c	;volatile
 23279                           
 23280                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23281  004BD0  0E42               	movlw	66
 23282  004BD2                     i2u1038_47:
 23283  004BD2  2EE8               	decfsz	wreg,f,c
 23284  004BD4  D7FE               	bra	i2u1038_47
 23285  004BD6  D000               	nop2	
 23286                           
 23287                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 23288  004BD8  968C               	bcf	3980,3,c	;volatile
 23289                           
 23290                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23291  004BDA  0E42               	movlw	66
 23292  004BDC                     i2u1039_47:
 23293  004BDC  2EE8               	decfsz	wreg,f,c
 23294  004BDE  D7FE               	bra	i2u1039_47
 23295  004BE0  D000               	nop2	
 23296                           
 23297                           ;lcd.c: 36: data = data << 4;
 23298  004BE2  3802               	swapf	i2lcdNibble@data,w,c
 23299  004BE4  0BF0               	andlw	240
 23300  004BE6  6E02               	movwf	i2lcdNibble@data,c
 23301                           
 23302                           ;lcd.c: 38: temp = data & 0xF0;
 23303  004BE8  5002               	movf	i2lcdNibble@data,w,c
 23304  004BEA  0BF0               	andlw	240
 23305  004BEC  6E01               	movwf	i2lcdNibble@temp,c
 23306                           
 23307                           ;lcd.c: 39: LATD = LATD & 0x0F;
 23308  004BEE  508C               	movf	3980,w,c	;volatile
 23309  004BF0  0B0F               	andlw	15
 23310  004BF2  6E8C               	movwf	3980,c	;volatile
 23311                           
 23312                           ;lcd.c: 40: LATD = temp | LATD;
 23313  004BF4  5001               	movf	i2lcdNibble@temp,w,c
 23314  004BF6  108C               	iorwf	3980,w,c	;volatile
 23315  004BF8  6E8C               	movwf	3980,c	;volatile
 23316                           
 23317                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 23318  004BFA  868C               	bsf	3980,3,c	;volatile
 23319                           
 23320                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23321  004BFC  0E42               	movlw	66
 23322  004BFE                     i2u1040_47:
 23323  004BFE  2EE8               	decfsz	wreg,f,c
 23324  004C00  D7FE               	bra	i2u1040_47
 23325  004C02  D000               	nop2	
 23326                           
 23327                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 23328  004C04  968C               	bcf	3980,3,c	;volatile
 23329                           
 23330                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23331  004C06  0E42               	movlw	66
 23332  004C08                     i2u1041_47:
 23333  004C08  2EE8               	decfsz	wreg,f,c
 23334  004C0A  D7FE               	bra	i2u1041_47
 23335  004C0C  D000               	nop2	
 23336  004C0E  0012               	return		;funcret
 23337  004C10                     __end_ofi2_lcdNibble:
 23338                           	opt stack 0
 23339                           pclatu	equ	0xFFB
 23340                           pclath	equ	0xFFA
 23341                           tblptru	equ	0xFF8
 23342                           tblptrh	equ	0xFF7
 23343                           tblptrl	equ	0xFF6
 23344                           tablat	equ	0xFF5
 23345                           prodh	equ	0xFF4
 23346                           prodl	equ	0xFF3
 23347                           intcon	equ	0xFF2
 23348                           intcon2	equ	0xFF1
 23349                           intcon3	equ	0xFF0
 23350                           indf0	equ	0xFEF
 23351                           postinc0	equ	0xFEE
 23352                           fsr0h	equ	0xFEA
 23353                           fsr0l	equ	0xFE9
 23354                           wreg	equ	0xFE8
 23355                           postdec1	equ	0xFE5
 23356                           fsr1h	equ	0xFE2
 23357                           fsr1l	equ	0xFE1
 23358                           indf2	equ	0xFDF
 23359                           postinc2	equ	0xFDE
 23360                           postdec2	equ	0xFDD
 23361                           fsr2h	equ	0xFDA
 23362                           fsr2l	equ	0xFD9
 23363                           status	equ	0xFD8
 23364                           
 23365 ;; *************** function i2_getRTC *****************
 23366 ;; Defined at:
 23367 ;;		line 44 in file "RTC.c"
 23368 ;; Parameters:    Size  Location     Type
 23369 ;;		None
 23370 ;; Auto vars:     Size  Location     Type
 23371 ;;  getRTC          2    3[COMRAM] int 
 23372 ;; Return value:  Size  Location     Type
 23373 ;;                  1    wreg      void 
 23374 ;; Registers used:
 23375 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23376 ;; Tracked objects:
 23377 ;;		On entry : 0/0
 23378 ;;		On exit  : 0/0
 23379 ;;		Unchanged: 0/0
 23380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23382 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23384 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23385 ;;Total ram usage:        2 bytes
 23386 ;; Hardware stack levels used:    1
 23387 ;; Hardware stack levels required when called:    2
 23388 ;; This function calls:
 23389 ;;		i2_I2C_Master_Read
 23390 ;;		i2_I2C_Master_Start
 23391 ;;		i2_I2C_Master_Stop
 23392 ;;		i2_I2C_Master_Write
 23393 ;; This function is called by:
 23394 ;;		_printSortTimer
 23395 ;;		i2_printRTC
 23396 ;; This function uses a non-reentrant model
 23397 ;;
 23398                           
 23399                           	psect	text89
 23400  004898                     __ptext89:
 23401                           	opt stack 0
 23402  004898                     i2_getRTC:
 23403                           	opt stack 19
 23404                           
 23405                           ;RTC.c: 48: I2C_Master_Start();
 23406                           
 23407                           ;incstack = 0
 23408  004898  ECF3  F029         	call	i2_I2C_Master_Start	;wreg free
 23409                           
 23410                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 23411  00489C  0E00               	movlw	0
 23412  00489E  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23413  0048A0  0ED0               	movlw	208
 23414  0048A2  6E02               	movwf	i2I2C_Master_Write@d,c
 23415  0048A4  ECDE  F029         	call	i2_I2C_Master_Write	;wreg free
 23416                           
 23417                           ;RTC.c: 50: I2C_Master_Write(0x00);
 23418  0048A8  0E00               	movlw	0
 23419  0048AA  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23420  0048AC  0E00               	movlw	0
 23421  0048AE  6E02               	movwf	i2I2C_Master_Write@d,c
 23422  0048B0  ECDE  F029         	call	i2_I2C_Master_Write	;wreg free
 23423                           
 23424                           ;RTC.c: 51: I2C_Master_Stop();
 23425  0048B4  ECEF  F029         	call	i2_I2C_Master_Stop	;wreg free
 23426                           
 23427                           ;RTC.c: 54: I2C_Master_Start();
 23428  0048B8  ECF3  F029         	call	i2_I2C_Master_Start	;wreg free
 23429                           
 23430                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 23431  0048BC  0E00               	movlw	0
 23432  0048BE  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23433  0048C0  0ED1               	movlw	209
 23434  0048C2  6E02               	movwf	i2I2C_Master_Write@d,c
 23435  0048C4  ECDE  F029         	call	i2_I2C_Master_Write	;wreg free
 23436                           
 23437                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 23438  0048C8  0E00               	movlw	0
 23439  0048CA  6E05               	movwf	i2getRTC@i+1,c
 23440  0048CC  0E00               	movlw	0
 23441  0048CE  6E04               	movwf	i2getRTC@i,c
 23442  0048D0                     i2l6466:
 23443  0048D0  BE05               	btfsc	i2getRTC@i+1,7,c
 23444  0048D2  D006               	goto	i2l6470
 23445  0048D4  5005               	movf	i2getRTC@i+1,w,c
 23446  0048D6  E111               	bnz	i2l6476
 23447  0048D8  0E06               	movlw	6
 23448  0048DA  5C04               	subwf	i2getRTC@i,w,c
 23449  0048DC  B0D8               	btfsc	status,0,c
 23450  0048DE  D00D               	goto	i2l6476
 23451  0048E0                     i2l6470:
 23452                           
 23453                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 23454  0048E0  0E1C               	movlw	low _time
 23455  0048E2  2404               	addwf	i2getRTC@i,w,c
 23456  0048E4  6ED9               	movwf	fsr2l,c
 23457  0048E6  0E01               	movlw	high _time
 23458  0048E8  2005               	addwfc	i2getRTC@i+1,w,c
 23459  0048EA  6EDA               	movwf	fsr2h,c
 23460  0048EC  0E01               	movlw	1
 23461  0048EE  EC22  F029         	call	i2_I2C_Master_Read
 23462  0048F2  6EDF               	movwf	indf2,c
 23463  0048F4  4A04               	infsnz	i2getRTC@i,f,c
 23464  0048F6  2A05               	incf	i2getRTC@i+1,f,c
 23465  0048F8  D7EB               	goto	i2l6466
 23466  0048FA                     i2l6476:
 23467                           
 23468                           ;RTC.c: 58: }
 23469                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 23470  0048FA  0E00               	movlw	0
 23471  0048FC  EC22  F029         	call	i2_I2C_Master_Read
 23472  004900  0101               	movlb	1	; () banked
 23473  004902  6F22               	movwf	(_time+6)& (0+255),b
 23474                           
 23475                           ;RTC.c: 60: I2C_Master_Stop();
 23476  004904  ECEF  F029         	call	i2_I2C_Master_Stop	;wreg free
 23477  004908  0012               	return		;funcret
 23478  00490A                     __end_ofi2_getRTC:
 23479                           	opt stack 0
 23480                           pclatu	equ	0xFFB
 23481                           pclath	equ	0xFFA
 23482                           tblptru	equ	0xFF8
 23483                           tblptrh	equ	0xFF7
 23484                           tblptrl	equ	0xFF6
 23485                           tablat	equ	0xFF5
 23486                           prodh	equ	0xFF4
 23487                           prodl	equ	0xFF3
 23488                           intcon	equ	0xFF2
 23489                           intcon2	equ	0xFF1
 23490                           intcon3	equ	0xFF0
 23491                           indf0	equ	0xFEF
 23492                           postinc0	equ	0xFEE
 23493                           fsr0h	equ	0xFEA
 23494                           fsr0l	equ	0xFE9
 23495                           wreg	equ	0xFE8
 23496                           postdec1	equ	0xFE5
 23497                           fsr1h	equ	0xFE2
 23498                           fsr1l	equ	0xFE1
 23499                           indf2	equ	0xFDF
 23500                           postinc2	equ	0xFDE
 23501                           postdec2	equ	0xFDD
 23502                           fsr2h	equ	0xFDA
 23503                           fsr2l	equ	0xFD9
 23504                           status	equ	0xFD8
 23505                           
 23506 ;; *************** function i2_I2C_Master_Write *****************
 23507 ;; Defined at:
 23508 ;;		line 49 in file "I2C.c"
 23509 ;; Parameters:    Size  Location     Type
 23510 ;;  d               2    1[COMRAM] unsigned int 
 23511 ;; Auto vars:     Size  Location     Type
 23512 ;;		None
 23513 ;; Return value:  Size  Location     Type
 23514 ;;                  1    wreg      void 
 23515 ;; Registers used:
 23516 ;;		wreg, status,2, status,0, cstack
 23517 ;; Tracked objects:
 23518 ;;		On entry : 0/0
 23519 ;;		On exit  : 0/0
 23520 ;;		Unchanged: 0/0
 23521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23522 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23525 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23526 ;;Total ram usage:        2 bytes
 23527 ;; Hardware stack levels used:    1
 23528 ;; Hardware stack levels required when called:    1
 23529 ;; This function calls:
 23530 ;;		i2_I2C_Master_Wait
 23531 ;; This function is called by:
 23532 ;;		i2_getRTC
 23533 ;; This function uses a non-reentrant model
 23534 ;;
 23535                           
 23536                           	psect	text90
 23537  0053BC                     __ptext90:
 23538                           	opt stack 0
 23539  0053BC                     i2_I2C_Master_Write:
 23540                           	opt stack 19
 23541                           
 23542                           ;I2C.c: 51: I2C_Master_Wait();
 23543                           
 23544                           ;incstack = 0
 23545  0053BC  ECB4  F029         	call	i2_I2C_Master_Wait	;wreg free
 23546                           
 23547                           ;I2C.c: 52: SSPBUF = d;
 23548  0053C0  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 23549  0053C4  0012               	return		;funcret
 23550  0053C6                     __end_ofi2_I2C_Master_Write:
 23551                           	opt stack 0
 23552                           pclatu	equ	0xFFB
 23553                           pclath	equ	0xFFA
 23554                           tblptru	equ	0xFF8
 23555                           tblptrh	equ	0xFF7
 23556                           tblptrl	equ	0xFF6
 23557                           tablat	equ	0xFF5
 23558                           prodh	equ	0xFF4
 23559                           prodl	equ	0xFF3
 23560                           intcon	equ	0xFF2
 23561                           intcon2	equ	0xFF1
 23562                           intcon3	equ	0xFF0
 23563                           indf0	equ	0xFEF
 23564                           postinc0	equ	0xFEE
 23565                           fsr0h	equ	0xFEA
 23566                           fsr0l	equ	0xFE9
 23567                           wreg	equ	0xFE8
 23568                           postdec1	equ	0xFE5
 23569                           fsr1h	equ	0xFE2
 23570                           fsr1l	equ	0xFE1
 23571                           indf2	equ	0xFDF
 23572                           postinc2	equ	0xFDE
 23573                           postdec2	equ	0xFDD
 23574                           fsr2h	equ	0xFDA
 23575                           fsr2l	equ	0xFD9
 23576                           status	equ	0xFD8
 23577                           
 23578 ;; *************** function i2_I2C_Master_Stop *****************
 23579 ;; Defined at:
 23580 ;;		line 43 in file "I2C.c"
 23581 ;; Parameters:    Size  Location     Type
 23582 ;;		None
 23583 ;; Auto vars:     Size  Location     Type
 23584 ;;		None
 23585 ;; Return value:  Size  Location     Type
 23586 ;;                  1    wreg      void 
 23587 ;; Registers used:
 23588 ;;		wreg, status,2, status,0, cstack
 23589 ;; Tracked objects:
 23590 ;;		On entry : 0/0
 23591 ;;		On exit  : 0/0
 23592 ;;		Unchanged: 0/0
 23593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23598 ;;Total ram usage:        0 bytes
 23599 ;; Hardware stack levels used:    1
 23600 ;; Hardware stack levels required when called:    1
 23601 ;; This function calls:
 23602 ;;		i2_I2C_Master_Wait
 23603 ;; This function is called by:
 23604 ;;		i2_getRTC
 23605 ;; This function uses a non-reentrant model
 23606 ;;
 23607                           
 23608                           	psect	text91
 23609  0053DE                     __ptext91:
 23610                           	opt stack 0
 23611  0053DE                     i2_I2C_Master_Stop:
 23612                           	opt stack 19
 23613                           
 23614                           ;I2C.c: 45: I2C_Master_Wait();
 23615                           
 23616                           ;incstack = 0
 23617  0053DE  ECB4  F029         	call	i2_I2C_Master_Wait	;wreg free
 23618                           
 23619                           ;I2C.c: 46: PEN = 1;
 23620  0053E2  84C5               	bsf	4037,2,c	;volatile
 23621  0053E4  0012               	return		;funcret
 23622  0053E6                     __end_ofi2_I2C_Master_Stop:
 23623                           	opt stack 0
 23624                           pclatu	equ	0xFFB
 23625                           pclath	equ	0xFFA
 23626                           tblptru	equ	0xFF8
 23627                           tblptrh	equ	0xFF7
 23628                           tblptrl	equ	0xFF6
 23629                           tablat	equ	0xFF5
 23630                           prodh	equ	0xFF4
 23631                           prodl	equ	0xFF3
 23632                           intcon	equ	0xFF2
 23633                           intcon2	equ	0xFF1
 23634                           intcon3	equ	0xFF0
 23635                           indf0	equ	0xFEF
 23636                           postinc0	equ	0xFEE
 23637                           fsr0h	equ	0xFEA
 23638                           fsr0l	equ	0xFE9
 23639                           wreg	equ	0xFE8
 23640                           postdec1	equ	0xFE5
 23641                           fsr1h	equ	0xFE2
 23642                           fsr1l	equ	0xFE1
 23643                           indf2	equ	0xFDF
 23644                           postinc2	equ	0xFDE
 23645                           postdec2	equ	0xFDD
 23646                           fsr2h	equ	0xFDA
 23647                           fsr2l	equ	0xFD9
 23648                           status	equ	0xFD8
 23649                           
 23650 ;; *************** function i2_I2C_Master_Start *****************
 23651 ;; Defined at:
 23652 ;;		line 31 in file "I2C.c"
 23653 ;; Parameters:    Size  Location     Type
 23654 ;;		None
 23655 ;; Auto vars:     Size  Location     Type
 23656 ;;		None
 23657 ;; Return value:  Size  Location     Type
 23658 ;;                  1    wreg      void 
 23659 ;; Registers used:
 23660 ;;		wreg, status,2, status,0, cstack
 23661 ;; Tracked objects:
 23662 ;;		On entry : 0/0
 23663 ;;		On exit  : 0/0
 23664 ;;		Unchanged: 0/0
 23665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23670 ;;Total ram usage:        0 bytes
 23671 ;; Hardware stack levels used:    1
 23672 ;; Hardware stack levels required when called:    1
 23673 ;; This function calls:
 23674 ;;		i2_I2C_Master_Wait
 23675 ;; This function is called by:
 23676 ;;		i2_getRTC
 23677 ;; This function uses a non-reentrant model
 23678 ;;
 23679                           
 23680                           	psect	text92
 23681  0053E6                     __ptext92:
 23682                           	opt stack 0
 23683  0053E6                     i2_I2C_Master_Start:
 23684                           	opt stack 19
 23685                           
 23686                           ;I2C.c: 33: I2C_Master_Wait();
 23687                           
 23688                           ;incstack = 0
 23689  0053E6  ECB4  F029         	call	i2_I2C_Master_Wait	;wreg free
 23690                           
 23691                           ;I2C.c: 34: SEN = 1;
 23692  0053EA  80C5               	bsf	4037,0,c	;volatile
 23693  0053EC  0012               	return		;funcret
 23694  0053EE                     __end_ofi2_I2C_Master_Start:
 23695                           	opt stack 0
 23696                           pclatu	equ	0xFFB
 23697                           pclath	equ	0xFFA
 23698                           tblptru	equ	0xFF8
 23699                           tblptrh	equ	0xFF7
 23700                           tblptrl	equ	0xFF6
 23701                           tablat	equ	0xFF5
 23702                           prodh	equ	0xFF4
 23703                           prodl	equ	0xFF3
 23704                           intcon	equ	0xFF2
 23705                           intcon2	equ	0xFF1
 23706                           intcon3	equ	0xFF0
 23707                           indf0	equ	0xFEF
 23708                           postinc0	equ	0xFEE
 23709                           fsr0h	equ	0xFEA
 23710                           fsr0l	equ	0xFE9
 23711                           wreg	equ	0xFE8
 23712                           postdec1	equ	0xFE5
 23713                           fsr1h	equ	0xFE2
 23714                           fsr1l	equ	0xFE1
 23715                           indf2	equ	0xFDF
 23716                           postinc2	equ	0xFDE
 23717                           postdec2	equ	0xFDD
 23718                           fsr2h	equ	0xFDA
 23719                           fsr2l	equ	0xFD9
 23720                           status	equ	0xFD8
 23721                           
 23722 ;; *************** function i2_I2C_Master_Read *****************
 23723 ;; Defined at:
 23724 ;;		line 55 in file "I2C.c"
 23725 ;; Parameters:    Size  Location     Type
 23726 ;;  a               1    wreg     unsigned char 
 23727 ;; Auto vars:     Size  Location     Type
 23728 ;;  a               1    1[COMRAM] unsigned char 
 23729 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 23730 ;; Return value:  Size  Location     Type
 23731 ;;                  1    wreg      unsigned char 
 23732 ;; Registers used:
 23733 ;;		wreg, status,2, status,0, cstack
 23734 ;; Tracked objects:
 23735 ;;		On entry : 0/0
 23736 ;;		On exit  : 0/0
 23737 ;;		Unchanged: 0/0
 23738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23740 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23742 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23743 ;;Total ram usage:        2 bytes
 23744 ;; Hardware stack levels used:    1
 23745 ;; Hardware stack levels required when called:    1
 23746 ;; This function calls:
 23747 ;;		i2_I2C_Master_Wait
 23748 ;; This function is called by:
 23749 ;;		i2_getRTC
 23750 ;; This function uses a non-reentrant model
 23751 ;;
 23752                           
 23753                           	psect	text93
 23754  005244                     __ptext93:
 23755                           	opt stack 0
 23756  005244                     i2_I2C_Master_Read:
 23757                           	opt stack 19
 23758                           
 23759                           ;incstack = 0
 23760                           ;i2I2C_Master_Read@a stored from wreg
 23761  005244  6E02               	movwf	i2I2C_Master_Read@a,c
 23762                           
 23763                           ;I2C.c: 57: unsigned char temp;
 23764                           ;I2C.c: 58: I2C_Master_Wait();
 23765  005246  ECB4  F029         	call	i2_I2C_Master_Wait	;wreg free
 23766                           
 23767                           ;I2C.c: 59: RCEN = 1;
 23768  00524A  86C5               	bsf	4037,3,c	;volatile
 23769                           
 23770                           ;I2C.c: 60: I2C_Master_Wait();
 23771  00524C  ECB4  F029         	call	i2_I2C_Master_Wait	;wreg free
 23772                           
 23773                           ;I2C.c: 61: temp = SSPBUF;
 23774  005250  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 23775                           
 23776                           ;I2C.c: 62: I2C_Master_Wait();
 23777  005254  ECB4  F029         	call	i2_I2C_Master_Wait	;wreg free
 23778                           
 23779                           ;I2C.c: 63: ACKDT = (a)?0:1;
 23780  005258  5002               	movf	i2I2C_Master_Read@a,w,c
 23781  00525A  A4D8               	btfss	status,2,c
 23782  00525C  D002               	goto	i2u453_40
 23783  00525E  8AC5               	bsf	4037,5,c	;volatile
 23784  005260  D001               	goto	i2l6170
 23785  005262                     i2u453_40:
 23786  005262  9AC5               	bcf	4037,5,c	;volatile
 23787  005264                     i2l6170:
 23788                           
 23789                           ;I2C.c: 64: ACKEN = 1;
 23790  005264  88C5               	bsf	4037,4,c	;volatile
 23791                           
 23792                           ;I2C.c: 65: return temp;
 23793  005266  5003               	movf	i2I2C_Master_Read@temp,w,c
 23794  005268  0012               	return	
 23795  00526A                     __end_ofi2_I2C_Master_Read:
 23796                           	opt stack 0
 23797                           pclatu	equ	0xFFB
 23798                           pclath	equ	0xFFA
 23799                           tblptru	equ	0xFF8
 23800                           tblptrh	equ	0xFF7
 23801                           tblptrl	equ	0xFF6
 23802                           tablat	equ	0xFF5
 23803                           prodh	equ	0xFF4
 23804                           prodl	equ	0xFF3
 23805                           intcon	equ	0xFF2
 23806                           intcon2	equ	0xFF1
 23807                           intcon3	equ	0xFF0
 23808                           indf0	equ	0xFEF
 23809                           postinc0	equ	0xFEE
 23810                           fsr0h	equ	0xFEA
 23811                           fsr0l	equ	0xFE9
 23812                           wreg	equ	0xFE8
 23813                           postdec1	equ	0xFE5
 23814                           fsr1h	equ	0xFE2
 23815                           fsr1l	equ	0xFE1
 23816                           indf2	equ	0xFDF
 23817                           postinc2	equ	0xFDE
 23818                           postdec2	equ	0xFDD
 23819                           fsr2h	equ	0xFDA
 23820                           fsr2l	equ	0xFD9
 23821                           status	equ	0xFD8
 23822                           
 23823 ;; *************** function i2_I2C_Master_Wait *****************
 23824 ;; Defined at:
 23825 ;;		line 26 in file "I2C.c"
 23826 ;; Parameters:    Size  Location     Type
 23827 ;;		None
 23828 ;; Auto vars:     Size  Location     Type
 23829 ;;		None
 23830 ;; Return value:  Size  Location     Type
 23831 ;;                  1    wreg      void 
 23832 ;; Registers used:
 23833 ;;		wreg, status,2, status,0
 23834 ;; Tracked objects:
 23835 ;;		On entry : 0/0
 23836 ;;		On exit  : 0/0
 23837 ;;		Unchanged: 0/0
 23838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23841 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23842 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23843 ;;Total ram usage:        1 bytes
 23844 ;; Hardware stack levels used:    1
 23845 ;; This function calls:
 23846 ;;		Nothing
 23847 ;; This function is called by:
 23848 ;;		i2_I2C_Master_Start
 23849 ;;		i2_I2C_Master_Stop
 23850 ;;		i2_I2C_Master_Write
 23851 ;;		i2_I2C_Master_Read
 23852 ;; This function uses a non-reentrant model
 23853 ;;
 23854                           
 23855                           	psect	text94
 23856  005368                     __ptext94:
 23857                           	opt stack 0
 23858  005368                     i2_I2C_Master_Wait:
 23859                           	opt stack 19
 23860  005368                     i2l66:
 23861  005368  B4C7               	btfsc	4039,2,c	;volatile
 23862  00536A  D7FE               	goto	i2l66
 23863  00536C  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 23864  005370  0E1F               	movlw	31
 23865  005372  1601               	andwf	??i2_I2C_Master_Wait,f,c
 23866  005374  B4D8               	btfsc	status,2,c
 23867  005376  0012               	return	
 23868  005378  D7F7               	goto	i2l66
 23869  00537A                     __end_ofi2_I2C_Master_Wait:
 23870                           	opt stack 0
 23871                           pclatu	equ	0xFFB
 23872                           pclath	equ	0xFFA
 23873                           tblptru	equ	0xFF8
 23874                           tblptrh	equ	0xFF7
 23875                           tblptrl	equ	0xFF6
 23876                           tablat	equ	0xFF5
 23877                           prodh	equ	0xFF4
 23878                           prodl	equ	0xFF3
 23879                           intcon	equ	0xFF2
 23880                           intcon2	equ	0xFF1
 23881                           intcon3	equ	0xFF0
 23882                           indf0	equ	0xFEF
 23883                           postinc0	equ	0xFEE
 23884                           fsr0h	equ	0xFEA
 23885                           fsr0l	equ	0xFE9
 23886                           wreg	equ	0xFE8
 23887                           postdec1	equ	0xFE5
 23888                           fsr1h	equ	0xFE2
 23889                           fsr1l	equ	0xFE1
 23890                           indf2	equ	0xFDF
 23891                           postinc2	equ	0xFDE
 23892                           postdec2	equ	0xFDD
 23893                           fsr2h	equ	0xFDA
 23894                           fsr2l	equ	0xFD9
 23895                           status	equ	0xFD8
 23896                           
 23897 ;; *************** function i2_delay_ms *****************
 23898 ;; Defined at:
 23899 ;;		line 590 in file "sort.c"
 23900 ;; Parameters:    Size  Location     Type
 23901 ;;  milliseconds    1    wreg     unsigned char 
 23902 ;; Auto vars:     Size  Location     Type
 23903 ;;  milliseconds    1    1[COMRAM] unsigned char 
 23904 ;; Return value:  Size  Location     Type
 23905 ;;                  1    wreg      void 
 23906 ;; Registers used:
 23907 ;;		wreg, status,2, status,0, cstack
 23908 ;; Tracked objects:
 23909 ;;		On entry : 0/0
 23910 ;;		On exit  : 0/0
 23911 ;;		Unchanged: 0/0
 23912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23914 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23915 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23916 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23917 ;;Total ram usage:        2 bytes
 23918 ;; Hardware stack levels used:    1
 23919 ;; This function calls:
 23920 ;;		Nothing
 23921 ;; This function is called by:
 23922 ;;		_printSortTimer
 23923 ;; This function uses a non-reentrant model
 23924 ;;
 23925                           
 23926                           	psect	text95
 23927  0052F0                     __ptext95:
 23928                           	opt stack 0
 23929  0052F0                     i2_delay_ms:
 23930                           	opt stack 22
 23931                           
 23932                           ;incstack = 0
 23933                           ;i2delay_ms@milliseconds stored from wreg
 23934  0052F0  6E02               	movwf	i2delay_ms@milliseconds,c
 23935                           
 23936                           ;sort.c: 591: while(milliseconds > 0)
 23937  0052F2  D008               	goto	i2l8540
 23938  0052F4                     i2l8536:
 23939                           
 23940                           ;sort.c: 592: {
 23941                           ;sort.c: 593: milliseconds--;
 23942  0052F4  0602               	decf	i2delay_ms@milliseconds,f,c
 23943                           
 23944                           ;sort.c: 594: _delay((unsigned long)((990)*(32000000/4000000.0)));
 23945  0052F6  0E0B               	movlw	11
 23946  0052F8  6E01               	movwf	??i2_delay_ms& (0+255),c
 23947  0052FA  0E48               	movlw	72
 23948  0052FC                     i2u1042_47:
 23949  0052FC  2EE8               	decfsz	wreg,f,c
 23950  0052FE  D7FE               	bra	i2u1042_47
 23951  005300  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 23952  005302  D7FC               	bra	i2u1042_47
 23953  005304                     i2l8540:
 23954  005304  5002               	movf	i2delay_ms@milliseconds,w,c
 23955  005306  B4D8               	btfsc	status,2,c
 23956  005308  0012               	return	
 23957  00530A  D7F4               	goto	i2l8536
 23958  00530C                     __end_ofi2_delay_ms:
 23959                           	opt stack 0
 23960                           pclatu	equ	0xFFB
 23961                           pclath	equ	0xFFA
 23962                           tblptru	equ	0xFF8
 23963                           tblptrh	equ	0xFF7
 23964                           tblptrl	equ	0xFF6
 23965                           tablat	equ	0xFF5
 23966                           prodh	equ	0xFF4
 23967                           prodl	equ	0xFF3
 23968                           intcon	equ	0xFF2
 23969                           intcon2	equ	0xFF1
 23970                           intcon3	equ	0xFF0
 23971                           indf0	equ	0xFEF
 23972                           postinc0	equ	0xFEE
 23973                           fsr0h	equ	0xFEA
 23974                           fsr0l	equ	0xFE9
 23975                           wreg	equ	0xFE8
 23976                           postdec1	equ	0xFE5
 23977                           fsr1h	equ	0xFE2
 23978                           fsr1l	equ	0xFE1
 23979                           indf2	equ	0xFDF
 23980                           postinc2	equ	0xFDE
 23981                           postdec2	equ	0xFDD
 23982                           fsr2h	equ	0xFDA
 23983                           fsr2l	equ	0xFD9
 23984                           status	equ	0xFD8
 23985                           pclatu	equ	0xFFB
 23986                           pclath	equ	0xFFA
 23987                           tblptru	equ	0xFF8
 23988                           tblptrh	equ	0xFF7
 23989                           tblptrl	equ	0xFF6
 23990                           tablat	equ	0xFF5
 23991                           prodh	equ	0xFF4
 23992                           prodl	equ	0xFF3
 23993                           intcon	equ	0xFF2
 23994                           intcon2	equ	0xFF1
 23995                           intcon3	equ	0xFF0
 23996                           indf0	equ	0xFEF
 23997                           postinc0	equ	0xFEE
 23998                           fsr0h	equ	0xFEA
 23999                           fsr0l	equ	0xFE9
 24000                           wreg	equ	0xFE8
 24001                           postdec1	equ	0xFE5
 24002                           fsr1h	equ	0xFE2
 24003                           fsr1l	equ	0xFE1
 24004                           indf2	equ	0xFDF
 24005                           postinc2	equ	0xFDE
 24006                           postdec2	equ	0xFDD
 24007                           fsr2h	equ	0xFDA
 24008                           fsr2l	equ	0xFD9
 24009                           status	equ	0xFD8
 24010                           
 24011                           	psect	rparam
 24012  0000                     pclatu	equ	0xFFB
 24013                           pclath	equ	0xFFA
 24014                           tblptru	equ	0xFF8
 24015                           tblptrh	equ	0xFF7
 24016                           tblptrl	equ	0xFF6
 24017                           tablat	equ	0xFF5
 24018                           prodh	equ	0xFF4
 24019                           prodl	equ	0xFF3
 24020                           intcon	equ	0xFF2
 24021                           intcon2	equ	0xFF1
 24022                           intcon3	equ	0xFF0
 24023                           indf0	equ	0xFEF
 24024                           postinc0	equ	0xFEE
 24025                           fsr0h	equ	0xFEA
 24026                           fsr0l	equ	0xFE9
 24027                           wreg	equ	0xFE8
 24028                           postdec1	equ	0xFE5
 24029                           fsr1h	equ	0xFE2
 24030                           fsr1l	equ	0xFE1
 24031                           indf2	equ	0xFDF
 24032                           postinc2	equ	0xFDE
 24033                           postdec2	equ	0xFDD
 24034                           fsr2h	equ	0xFDA
 24035                           fsr2l	equ	0xFD9
 24036                           status	equ	0xFD8
 24037                           
 24038                           	psect	temp
 24039  00007E                     btemp:
 24040                           	opt stack 0
 24041  00007E                     	ds	1
 24042  0000                     int$flags	set	btemp
 24043                           pclatu	equ	0xFFB
 24044                           pclath	equ	0xFFA
 24045                           tblptru	equ	0xFF8
 24046                           tblptrh	equ	0xFF7
 24047                           tblptrl	equ	0xFF6
 24048                           tablat	equ	0xFF5
 24049                           prodh	equ	0xFF4
 24050                           prodl	equ	0xFF3
 24051                           intcon	equ	0xFF2
 24052                           intcon2	equ	0xFF1
 24053                           intcon3	equ	0xFF0
 24054                           indf0	equ	0xFEF
 24055                           postinc0	equ	0xFEE
 24056                           fsr0h	equ	0xFEA
 24057                           fsr0l	equ	0xFE9
 24058                           wreg	equ	0xFE8
 24059                           postdec1	equ	0xFE5
 24060                           fsr1h	equ	0xFE2
 24061                           fsr1l	equ	0xFE1
 24062                           indf2	equ	0xFDF
 24063                           postinc2	equ	0xFDE
 24064                           postdec2	equ	0xFDD
 24065                           fsr2h	equ	0xFDA
 24066                           fsr2l	equ	0xFD9
 24067                           status	equ	0xFD8


Data Sizes:
    Strings     1303
    Constant    27
    Data        8
    BSS         138
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      73
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_128(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_127(CODE[17]), STR_126(CODE[17]), STR_125(CODE[18]), STR_124(CODE[18]), 
		 -> STR_123(CODE[18]), STR_122(CODE[18]), STR_121(CODE[18]), STR_120(CODE[18]), 
		 -> STR_119(CODE[17]), STR_118(CODE[17]), STR_117(CODE[3]), STR_116(CODE[15]), 
		 -> STR_115(CODE[3]), STR_114(CODE[15]), STR_113(CODE[11]), STR_112(CODE[17]), 
		 -> STR_111(CODE[18]), STR_110(CODE[17]), STR_109(CODE[15]), STR_108(CODE[15]), 
		 -> STR_107(CODE[15]), STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[17]), 
		 -> STR_103(CODE[16]), STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), 
		 -> STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[17]), STR_96(CODE[15]), 
		 -> STR_95(CODE[11]), STR_94(CODE[17]), STR_93(CODE[11]), STR_92(CODE[17]), 
		 -> STR_91(CODE[14]), STR_90(CODE[15]), STR_89(CODE[14]), STR_88(CODE[10]), 
		 -> STR_87(CODE[9]), STR_86(CODE[9]), STR_85(CODE[10]), STR_84(CODE[10]), 
		 -> STR_83(CODE[16]), STR_82(CODE[15]), STR_81(CODE[3]), STR_80(CODE[15]), 
		 -> STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), 
		 -> STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), 
		 -> STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), 
		 -> STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), 
		 -> STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), 
		 -> STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), 
		 -> STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), 
		 -> STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), 
		 -> STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), 
		 -> STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), 
		 -> STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_delay_ms
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PusherTest->_printf
    _PortTestDC->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  211795
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   22911
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   17591
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     183
                                              2 BANK0      8     8      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5137
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11414
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10667
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23224
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22310
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   46200
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13339
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8971
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8971
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  106933
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                         _EEPROMTest
                         _PortTestDC
                         _PusherTest
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    9083
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9040
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8971
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15351
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8971
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTest                                          10    10      0    9175
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    8971
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19245
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5137
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5137
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          7     7      0    9155
                                             43 BANK0      7     7      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8836
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   83967
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4879
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PusherTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _delay_ms
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      49       7       28.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     146      34        0.0%
DATA                 0      0     146       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Apr 07 15:17:24 2017

                                    _i 013D                     i2_I2C_Master_Start 53E6  
                   i2_I2C_Master_Write 53BC                                     l66 5354  
                                   _ID 2C90                       _f_panning_to_bin 0061  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0077  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                                  ID@i 0084                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C8  
                                  l180 00E2                                    l183 00E6  
                                  l188 0102                                    l614 2514  
                                  l803 1628                                    l820 2E38  
                                  l824 2EEA                                    l760 1262  
                                  l817 2DFA                                    l497 41FA  
                                  l818 2E14                                    l770 131C  
                                  l819 2E52                                    l781 142A  
                                  l773 1356                                    l793 152E  
                                  l778 13F0                                    l795 1540  
                                  l787 15DC                                    l876 46E8  
                                  l796 1554                                    l797 1568  
                                  l798 157C                                    l799 1592  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 372A                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _arm 3DB6  
                                  _log 00F2                                    _sel 00FD  
                                  _var 013F                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 3A50                    _log_count_can_w_lab 0065  
                           i2_delay_ms 52F0        __end_of_change_state_to_menu_11 5000  
      __end_of_change_state_to_menu_12 4E40        __end_of_change_state_to_menu_22 4E08  
      __end_of_change_state_to_menu_23 4FD0           _f_can_coming_to_distribution 0133  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 50F0  
      __end_of_change_state_to_logs_12 50C0        __end_of_change_state_to_logs_22 5090  
      __end_of_change_state_to_logs_23 514C        __end_of_change_state_to_logs_33 5060  
      __end_of_change_state_to_logs_34 5030                                   ??_ID 0082  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1043 3EDE  
                                 l1301 311C                                   l1213 09EE  
                                 l1206 0944                                   l1303 3136  
                                 l1151 3D16                                   l1216 0A54  
                                 l1056 5336                                   l1217 0AA2  
                                 l1209 0948                                   l1065 3B7E  
                                 l1218 0B08                                   l1243 0EB0  
                                 l1219 0B56                                   l1171 40E4  
                                 l1412 187C                                   l1332 477E  
                                 l1260 1120                                   l1180 21BE  
                                 l1148 3CF6                                   l1325 476E  
                                 l1174 40E8                                   l1255 104A  
                                 l1183 21C2                                   l1273 4B48  
                                 l1354 39EE                                   l1370 3E60  
                                 l1355 3A08                                   l1349 39A2  
                                 l1294 313C                                   l1366 3E2A  
                                 l1279 4B58                                   l1375 3E80  
                                 l1297 30D8                                   l1378 3EB6  
                                 ?_arm 0001                                   l1806 4388  
                                 l6102 51C4                                   l6120 47D8  
                                 l6130 480E                                   l6122 47DE  
                                 l1859 481C                                   l6140 4A02  
                                 l6300 17E0                                   l6060 518C  
                                 l1869 4A3A                                   l6118 47CC  
                                 l6142 4A08                                   l6302 17F8  
                                 l6062 519E                                   l6312 1842  
                                 l6400 4674                                   l7024 45D4  
                                 l6146 4A2C                                   l6138 49F6  
                                 l6330 18D4                                   l6306 1824  
                                 l8002 0F9E                                   l7034 4616  
                                 l6324 18B4                                   l6308 183C  
                                 l6260 166A                                   l8100 1168  
                                 l8020 1000                                   l8012 0FC6  
                                 l8004 0FA4                                   l6084 5116  
                                 l7028 45EA                                   l6342 1910  
                                 l6270 16A8                                   l6254 1644  
                                 l6430 4706                                   l8030 1028  
                                 l6406 4694                                   l6360 198E  
                                 l6352 196A                                   l6328 18CE  
                                 l6264 1674                                   l6424 46CC  
                                 l8104 1172                                   l8024 100A  
                                 l8008 0FAE                                   l7400 159E  
                                 l7320 13DA                                   l7304 1370  
                                 l7240 1220                                   l6354 1974  
                                 l6290 1768                                   l6258 1658  
                                 l8202 2F2A                                   l8034 1032  
                                 l6442 430C                                   l7402 15D4  
                                 l7330 140A                                   l7250 126A  
                                 l6372 19D0                                   l6348 1932  
                                 l8220 2FE2                                   l8108 118A  
                                 l8028 1022                                   l8132 3E52  
                                 l8124 3E04                                   l6444 431C  
                                 l7420 161C                                   l7332 1414  
                                 l6382 1A42                                   l6366 19AA  
                                 l6286 1756                                   l6278 1724  
                                 l8222 2FE8                                   l8062 10BC  
                                 l8054 109A                                   l6390 4E56  
                                 l6454 4376                                   l6446 4322  
                                 l7342 1444                                   l7422 162A  
                                 _ADIE 007CEE                                   l6368 19B6  
                                 l6376 19E4                                   l6296 17CE  
                                 l6288 1762                                   l6384 1A4E  
                                 l8240 30A0                                   l8072 10E4  
                                 l8064 10C2                                   l8144 3EA8  
                                 l7408 15E4                                   l6378 19EA  
                                 l6298 17DA                                   l8410 39CE  
                                 l8402 39A4                                   l8090 1140  
                                 l8058 10A4                                   l8138 3E66  
                                 l6650 2492                                   l7370 150C  
                                 l7354 14A8                                   l7346 146A  
                                 l7282 1306                                   l7266 12A6  
                                 l8412 39D8                                   l8404 39B4  
                                 l8252 30C2                                   l8068 10CC  
                                 l7612 2212                                   l9220 3D34  
                                 l9212 3D1C                                   l6396 465E  
                                 l6388 4E4A                                   l6660 255A  
                                 l7532 3FBC                                   l7460 2D86  
                                 l7372 1516                                   l7292 1336  
                                 l8422 3A0A                                   l8262 30F2  
                                 l8190 47A6                                   l8094 114A  
                                 l8078 110A                                   l7630 22CA  
                                 l9230 3D52                                   l9222 3D3A  
                                 l9214 3D22                                   l8502 4574  
                                 l6670 25F0                                   l6662 2578  
                                 l7534 3FD6                                   l7542 4024  
                                 l7518 2EA8                                   l7526 2EEC  
                                 l7294 1340                                   l8424 3A1A  
                                 l8088 113A                                   l9224 3D40  
                                 l9216 3D28                                   l6672 260E  
                                 l6664 2596                                   l6656 251E  
                                 l7536 3FF0                                   l7544 4052  
                                 l7472 2DBE                                   l7456 2D76  
                                 l6920 484A                                   l6824 4454  
                                 l8266 3106                                   l8098 1162  
                                 l7810 0BD2                                   l7730 09C2  
                                 l7642 231A                                   l9226 3D46  
                                 l9218 3D2E                                   l9234 3D58  
                                 l8450 4270                                   l8506 4588  
                                 l6674 262C                                   l6666 25B4  
                                 l6658 253C                                   l6682 2686  
                                 l8610 01C6                                   l7538 400A  
                                 l7482 2DE4                                   l7474 2DC0  
                                 l6834 44E0                                   l8428 3A4A  
                                 l7820 0BFA                                   l7724 09B2  
                                 l7660 23A8                                   l9228 3D4C  
                                 l9236 3DAA                                   l8452 427C  
                                 l8444 4252                                   l6676 264A  
                                 l6668 25D2                                   l6684 26E4  
                                 l8700 0440                                   l8620 01EE  
                                 l8612 01CC                                   l9156 3A9C  
                                 l7492 2E18                                   l7468 2DAE  
                                 l6932 4874                                   l6916 4834  
                                 l6828 446A                                   l9420 41D2  
                                 l9412 41A6                                   l8382 3940  
                                 l7902 0D90                                   l7814 0BDC  
                                 l7734 09DA                                   l7726 09B8  
                                 l8470 42D4                                   l8462 42B2  
                                 l8454 4282                                   l8438 423C  
                                 l6678 2668                                   l8702 045E  
                                 l6870 3F4A                                   l9182 3B38  
                                 l9158 3AB0                                   l7494 2E22  
                                 l9430 41F0                                   l9422 41D8  
                                 l9414 41BC                                   l7840 0C60  
                                 l7824 0C04                                   l7680 2420  
                                 l7672 240E                                   l7648 235C  
                                 l8720 0544                                   l8712 0522  
                                 l8640 024E                                   l8616 01D6  
                                 l6936 488C                                   l9432 41F6  
                                 l8386 3970                                   l7922 0E04  
                                 l7914 0DE2                                   l7906 0DA8  
                                 l7850 0C88                                   l7818 0BF4  
                                 l8466 42C0                                   l8490 4530  
                                 l8482 450C                                   l8802 071C  
                                 l8730 0560                                   l8706 047C  
                                 l8626 01FC                                   l6882 3F82  
                                 l6874 3F54                                   l9418 41CC  
                                 l7940 0E66                                   l7932 0E2C  
                                 l7924 0E0A                                   l7844 0C78  
                                 l7836 0C56                                   l7828 0C1C  
                                 l7684 2456                                   l7668 23D8  
                                 l9196 3CB2                                   l8492 453C  
                                 l8812 0738                                   l8716 052C  
                                 l8708 04E0                                   l8644 0258  
                                 l8900 08CC                                   l8580 0128  
                                 l6892 51D4                                   l9436 41FC  
                                 l7950 0E8E                                   l7918 0DEC  
                                 l7870 0CFC                                   l7862 0CDA  
                                 l7854 0CA0                                   l7846 0C7E  
                                 l8494 4542                                   l8486 451C  
                                 l8734 0578                                   l8726 0556  
                                 l8662 02A4                                   l8654 0282  
                                 l8574 00FE                                   l6886 3F8C  
                                 l6878 3F6C                                   l7944 0E70  
                                 l7928 0E14                                   l7880 0D24  
                                 l7872 0D02                                   l8816 0750  
                                 l8808 072E                                   l8680 0314  
                                 l8648 0270                                   l8592 015C  
                                 l8584 013A                                   l6896 51EA  
                                 l7954 0E98                                   l7866 0CE4  
                                 l8498 4566                                   l8842 07D8  
                                 l8834 07B6                                   l8762 0660  
                                 l8754 063E                                   l8690 03AA  
                                 l8682 0332                                   l8658 028C  
                                 l7972 0F02                                   l7948 0E88  
                                 l7892 0D68                                   l7876 0D0C  
                                 l8852 07F4                                   l8772 067C  
                                 l8692 03C8                                   l8684 0350  
                                 l8596 016E                                   l8588 0144  
                                 l7982 0F2A                                   l8838 07C0  
                                 l8758 0648                                   l8694 03E6  
                                 l8686 036E                                   l8678 02F6  
                                 l7976 0F1A                                   l7968 0EF8  
                                 l7896 0D80                                   l7888 0D5E  
                                 l8856 080C                                   l8848 07EA  
                                 l8776 0694                                   l8768 0672  
                                 l8696 0404                                   l8688 038C  
                                 l7994 0F7C                                   l7986 0F42  
                                 l7978 0F20                                   l7898 0D86  
                                 l8882 088C                                   l8874 086A  
                                 l8794 06FA                                   l8698 0422  
                                 l8892 08A8                                   l7998 0F86  
                                 l8878 0874                                   l8798 0704  
                                 STR_1 FB81                                   l8896 08C0  
                                 l8888 089E                                   STR_2 FF27  
                                 STR_3 FB6F                                   STR_4 FE4A  
                                 STR_5 FB6F                                   STR_6 FDE6  
                                 STR_7 FFC4                                   STR_8 FFDB  
                                 STR_9 FFCB                ??i2_updateServoPosition 0005  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u6000 2CE0  
                                 u6010 2D36                                   u4430 5114  
                                 u6008 2CE4                                   u6018 2D3A  
                                 _PEIE 007F96                                   u6220 2254  
                                 u5340 2514                                   u6140 2EB4  
                                 u5325 4AD4                                   u4710 17A2  
                                 u6230 2256                                   u4630 4CF2  
                                 u7040 2F6C                                   u6400 0B56  
                                 u6160 2EEA                                   u4640 4CF4  
                                 u7050 2F6E                                   u4650 4D3E  
                                 u4651 4D3A                                   u7300 39C6  
                                 u4660 4D40                                   u6260 23FC  
                                 _RCEN 007E2B                                   u4717 1798  
                                 u4750 181A                                   u7070 302A  
                                 u6158 2EB8                                   u5710 1262  
                                 u7080 302C                                   u6360 09EE  
                                 u7241 3998                                   u7250 399A  
                                 u6290 2444                                   u7180 3902  
                                 u6380 0AA2                                   u6268 2400  
                                 u5708 1230                                   u4757 1810  
                                 u7350 3A38                                   u7190 395E  
                                 u9007 1596                                   u9017 15FE  
                                 i2l66 5368                                   u6298 2448  
                                 u5690 122C                                   u7291 39C4  
                                 u9107 2E3C                                   u9027 4ECA  
                                 u7188 3906                                   u5908 148C  
                                 u9117 2E46                                   u9037 4852  
                                 u7358 3A3C                                   u7198 3962  
                                 u8430 3B7E                                   u9207 0114  
                                 u9127 2E6C                                   u9047 2CAA  
                                 u9217 014C                                   u9137 51E0  
                                 u9057 2CC6                                   u6930 3E76  
                                 u5890 1488                                   u9307 0592  
                                 u9227 0188                                   u9147 3F00  
                                 u9067 2CFE                                   u6940 3E78  
                                 u9317 0650                                   u9237 01DE  
                                 u9157 3F5C                                   u9077 2D1C  
                                 u9407 087C                                   u9327 0684  
                                 u9247 020A                                   u9167 3F94  
                                 u9087 2DFE                                   u6880 3E20  
                                 u9417 08B0                                   u9337 06AE  
                                 u9257 0260                                   u9177 4D50  
                                 u9097 2E08                                   u6890 3E22  
                                 u9507 230C                                   u9427 3CC0  
                                 u9347 070C                                   u9267 0294  
                                 u9187 4D84                                   u9517 2350  
                                 u9437 216E                                   u9357 0740  
                                 u9277 02BE                                   u9197 002A  
                                 u9607 4094                                   u9527 236E  
                                 u9447 21B2                                   u9367 076A  
                                 u9287 0534                                   u8807 1364  
                                 u9617 40D8                                   u9537 239C  
                                 u9457 21D4                                   u9377 07C8  
                                 u9297 0568                                   u8817 137E  
                                 u9707 0AB2                                   u9627 40FA  
                                 u9547 23B6                                   u9467 2202  
                                 u9387 07FC                                   u8907 1532  
                                 u8827 13A8                                   u9717 0B18  
                                 u9637 08F4                                   u9557 3DC4  
                                 u9477 226A                                   u9397 0826  
                                 u8917 153A                                   u8837 13F4  
                                 u8757 11B0                                   u9807 0D70  
                                 u9727 0B36                                   u9647 0938  
                                 u9567 3E34                                   u9487 22BE  
                                 u8927 1544                                   u8847 13FC  
                                 u8767 12D4                                   u9817 0D98  
                                 u9737 0B66                                   u9657 095A  
                                 u9577 3E48                                   u9497 22DE  
                                 u8937 154E                                   u8857 142E  
                                 u8777 1320                                   u9907 1012  
                                 u9827 0DF4                                   u9747 0BE4  
                                 u9667 09CA                                   u9587 3E8A  
                                 u8947 1558                                   u8867 1438  
                                 u8787 1328                                   u9917 103A  
                                 u9837 0E1C                                   u9757 0C0C  
                                 u9677 09FE                                   u9597 3E9E  
                                 u8957 1562                                   u8877 1452  
                                 u8797 135A                                   u9927 105C  
                                 u9847 0E78                                   u9767 0C68  
                                 u9687 0A64                                   u8967 156C  
                                 u8887 14C2                                   u9937 10AC  
                                 u9857 0EA0                                   u9777 0C90  
                                 u9697 0A82                                   u8977 1574  
                                 u8897 14FA                                   u9947 10D4  
                                 u9867 0F0A                                   u9787 0CEC  
                                 u8987 1580                                   u9957 1124  
                                 u9877 0F32                                   u9797 0D14  
                                 u8997 158A                                   u9967 112E  
                                 u9887 0F8E                                   u9977 1152  
                                 u9897 0FB6                                   u9987 117A  
                                 _RSEN 007E29                                   u9997 4738  
                          _stopSignals 530C                                   _Test 3CB0  
                                 _back 005B                                   _main 415C  
                                 _down 005D                                   _keys FACD  
                                 _time 011C                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 528E                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 0063                        __end_ofi2_putch 53A6  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 3140  
                          i2_lcdNibble 4BBA                        __end_of_Loading 1636  
                 __end_of_actuatorTest 1192                                  ??_arm 00AB  
           i2updateServoPosition@timer 0003                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                 __end_of_EEPROM_write 3FA4                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 42DE                                  _EEADR 000FA9  
                                STR_10 FFE7                                  STR_11 FFEB  
                                STR_12 FFFB                                  STR_20 FFEF  
                                STR_13 FFDF                                  STR_21 FAE8  
                                STR_14 FFD7                                  STR_22 FF9B  
                                STR_30 FDF7                                  STR_15 FFD3  
                                STR_23 FF19                                  STR_31 FDD5  
                                STR_16 FFE3                                  STR_24 FD3C  
                                STR_32 FD1A                                  STR_40 FCD6  
                                STR_17 FFF3                                  STR_25 FE19  
                                STR_33 FD2B                                  STR_41 FCC5  
                                STR_18 FFF7                                  STR_34 FDC4  
                                STR_50 FDA2                                  STR_42 FD80  
                                STR_26 FD4D                                  STR_43 FD80  
                                STR_35 FDC4                                  STR_51 FFDB  
                                STR_19 FFCF                                  STR_27 FE08  
                                STR_52 FFCB                                  STR_60 FFF3  
                                STR_28 FD5E                                  STR_36 FD09  
                                STR_44 FCE7                        __end_of___awmod 4592  
                                STR_45 FCD6                                  STR_37 FD1A  
                                STR_53 FFE7                                  STR_61 FFF7  
                                STR_29 FE16                                  STR_62 FFCF  
                                STR_54 FFEB                                  STR_70 FED2  
                                STR_38 FDB3                                  STR_46 FD91  
                                STR_47 FD91                                  STR_55 FFFB  
                                STR_63 FAE8                                  STR_71 FF0B  
                                STR_39 FD6F                                  STR_56 FFDF  
                                STR_64 FF7C                                  STR_80 FE5A  
                                STR_48 FCF8                                  STR_72 FC4E  
                                STR_49 FCE7                                  STR_57 FFD7  
                                STR_81 FE16                                  STR_65 FF42  
                                STR_73 FEEF                                  STR_58 FFD3  
                                STR_74 FF4F                                  STR_90 FEC3  
                                STR_82 FE87                                  STR_66 FB00  
                                STR_59 FFE3                                  STR_67 FFBD  
                                STR_91 FEE1                                  STR_75 FEB4  
                                STR_83 FE2A                                  STR_84 FF87  
                                STR_76 FEFD                                  STR_68 FC81  
                                STR_92 FC5F                                  STR_85 FF87  
                                STR_77 FFAE                                  STR_93 FF5B  
                                STR_69 FC92                                  STR_78 FF0B  
                                STR_86 FFA5                                  STR_94 FC70  
                                STR_87 FFA5                                  STR_95 FF66  
                                STR_79 FF35                                  STR_88 FF91  
                                STR_96 FEA5                                  STR_89 FF0B  
                                STR_97 FBE8                                  STR_98 FBD7  
                                STR_99 FBB5           i2updateServoPosition@my_time 0007  
                                ?_sort 0001                        __end_of___lldiv 439A  
         i2updateServoPosition@time_us 0001                                  u10007 4788  
                                u10017 479C                                  u10107 312A  
                                u10027 2F06                                  u10117 5194  
                                u10037 2F82                                  u10207 1C2C  
                                u10127 4B12                                  u10047 2FD6  
                                u10217 1C78                                  u10137 1A7C  
                                u10057 3040                                  u10307 39F2  
                                u10227 1CC4                                  u10147 1AC8  
                                u10067 3094                                  u10317 39FC  
                                u10237 1CF8                                  u10157 1B14  
                                u10077 30DC                                  u10327 499A  
                                u10247 1D2A                                  u10167 1B48  
                                u10087 30E4                                  _T0CON 000FD5  
                                u10337 49A4                                  u10257 1D76  
                                u10177 1B7A                                  u10097 3120  
                                u10347 49D0                                  u10267 1DAA  
                                u10187 1BC6                        ___awdiv@divisor 0088  
                                u10357 49DA                                  u10277 1DDC  
                                u10197 1BFA                                  u10287 4BA2  
                                _T1CON 000FCD                                  u10297 38DA  
                                _T2CON 000FCA                                  _T3CON 000FB1  
                      __end_of___lwdiv 4826                        __end_of___lwmod 4A44  
                                i2l263 29E4                                  i2l614 31CE  
                                i2l855 2BB6                                  i2l876 4940  
                                i2l980 3890                        ___awdiv@counter 008A  
                                i2l974 3818                                  i2l978 3870  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 1A6E                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 539A                        __end_of_handler 38CC  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 51A4  
                      __end_of_initLCD 4D8E                         __CFG_EBTRB$OFF 000000  
                                _debug 012D                             i2isdigit@c 0003  
                                _getIR 4826                        __end_of_loadRTC 461E  
                      __end_of_readMAG 4D48                        __end_of_dpowers FAE8  
                                _first 0139                                  _enter 005F  
                                arm@on 00AC                        __end_of_isdigit 51CE  
                                _input 007D                                  _putch 537A  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 5244                       __end_ofi2_getRTC 490A  
                  _log_count_pop_w_tab 0069                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 2160                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 4F10  
                          Loading@addr 00B3                       _count_can_no_lab 0123  
                 printSortTimer@i_1187 0047                   __size_of_EEPROM_read 0018  
                      __initialization 4C62                           __end_of_Test 3DB6  
                   __size_ofi2_lcdInst 000C                           __end_of_main 4220  
                         __end_of_keys FADE                           __end_of_sort 52B0  
                           i2printf@ap 0020                             i2printf@cp 001E  
                        PusherTest@res 00AD                     __size_ofi2_isdigit 001E  
                     PusherTest@i_1742 00B3                            _BlockerTest 38CC  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00C4                          __activetblptr 000003  
           __size_of_updateServoStates 01C8             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                            ?i2_delay_ms 0001  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC1B                                 STR_101 FC2C  
                               STR_110 FCB4                                 STR_102 FB93  
                               STR_103 FE3A                                 STR_111 FB15  
                               STR_112 FBF9                                 STR_104 FBC6  
                               STR_120 FB39                                 STR_113 FF71  
                               STR_105 FBA4                                 STR_121 FB27  
                               STR_106 FBC6                                 STR_114 FE5A  
                               STR_122 FB5D                                 _ADRESH 000FC4  
                               STR_115 FE16                                 STR_107 FE96  
                               STR_123 FB4B                                 STR_116 FE5A  
                               STR_124 FB5D                                 STR_108 FE78  
                               _EEADRH 000FAA                                 STR_117 FE16  
                               STR_125 FB5D                                 STR_109 FE69  
                               STR_126 FC0A                                 STR_118 FC0A  
                               _ADRESL 000FC3                                 STR_127 FCA3  
                               STR_119 FC3D                                 STR_128 FFB6  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 4F70  
            i2_change_state_to_menu_22 4F40                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1056 534C                                 i2l1412 1FCC  
                               i2l7000 329E                                 i2l7002 32B4  
                               i2l7010 333A                                 i2l1859 4C58  
                               i2l6204 4C26                                 i2l7100 33E6  
                               i2l7004 32CA                                 i2l1869 4DC6  
                               i2l6206 4C2E                                 i2l7110 3404  
                               i2l7102 33EC                                 i2l6216 4C4E  
                               i2l6208 4C32                                 i2l6232 4DBC  
                               i2l6224 4D9C                                 i2l7104 33F2  
                               i2l7008 32E0                                 i2l6170 5264  
                               i2l6226 4DA4                                 i2l7106 33F8  
                               i2l7114 340A                                 i2l6228 4DA8  
                               i2l6500 1E1A                                 i2l7140 3474  
                               i2l7108 33FE                                 i2l6510 1E52  
                               i2l7150 349A                                 i2l7134 3466  
                               i2l7126 344E                                 i2l6600 20A4  
                               i2l6504 1E20                                 i2l7160 34BC  
                               i2l7144 3490                                 i2l9000 2888  
                               i2l6194 52E8                                 i2l6530 1EEA  
                               i2l7154 34AE                                 i2l7090 33C8  
                               i2l6612 20D6                                 i2l6540 1F44  
                               i2l7156 34B2                                 i2l9020 28D6  
                               i2l9012 28BA                                 i2l9004 2896  
                               i2l6470 48E0                                 i2l6622 213C  
                               i2l6606 20BA                                 i2l6542 1F56  
                               i2l6526 1EDC                                 i2l6518 1EB4  
                               i2l7190 352A                                 i2l7182 3506  
                               i2l7174 34E2                                 i2l7086 33B4  
                               i2l7078 339A                                 i2l6630 4EF0  
                               i2l6608 20C2                                 i2l6616 20E8  
                               i2l6536 1F34                                 i2l6528 1EE6  
                               i2l6552 1F96                                 i2l6624 2144  
                               i2l6800 3C54                                 i2l7168 34D4  
                               i2l7088 33C4                                 i2l7096 33D2  
                               i2l9040 292C                                 i2l9032 2908  
                               i2l9024 28EC                                 i2l9016 28C8  
                               i2l9008 28AC                                 i2l6466 48D0  
                               i2l6618 20EE                                 i2l6570 2016  
                               i2l6546 1F80                                 i2l6538 1F3E  
                               i2l7186 3518                                 i2l7178 34F4  
                               i2l6476 48FA                                 i2l6564 1FFA  
                               i2l6548 1F92                                 i2l6812 3C98  
                               i2l6804 3C64                                 i2l7196 3534  
                               i2l6628 4EE8                                 i2l9052 2956  
                               i2l9044 293A                                 i2l9036 2916  
                               i2l9028 28FA                                 i2l6582 2048  
                               i2l6494 1DFC                                 i2l9062 297A  
                               i2l6592 2086                                 i2l6568 2012  
                               i2l9056 296C                                 i2l9048 2948  
                               i2l9320 35A0                                 i2l6594 208E  
                               i2l6498 1E0C                                 i2l9250 2A04  
                               i2l8522 4928                                 i2l9314 3580  
                               i2l8540 5304                                 i2l6588 2062  
                               i2l9332 35CC                                 i2l9340 35EA  
                               i2l9500 3836                                 i2l9246 29F4  
                               i2l9334 35E0                                 i2l9326 35B6  
                               i2l9342 3634                                 i2l9318 3596  
                               i2l8536 52F4                                 i2l9280 2B84  
                               i2l9256 2A5E                                 i2l8528 495A  
                               i2l9360 36A2                                 i2l9344 363E  
                               i2l9354 367C                                 i2l9506 3844  
                               i2l9450 379A                                 i2l9292 2BEC  
                               i2l9268 2B2C                                 i2l9348 3656  
                               i2l9460 37C6                                 i2l9294 2BF2  
                               i2l6990 3230                                 i2l6982 31D8  
                               i2l9374 36F8                                 i2l9454 37A6  
                               i2l9288 2BB8                                 i2l6992 3246  
                               i2l6984 31EE                                 i2l6976 316C  
                               i2l8920 276C                                 i2l9528 388E  
                               i2l9448 3796                                 i2l9464 37D0  
                               i2l6994 325C                                 i2l6986 3204  
                               i2l8914 2758                                 i2l9458 37AE  
                               i2l6996 3272                                 i2l6988 321A  
                               i2l8940 27A4                                 i2l8932 2796  
                               i2l8924 277A                                 i2l8916 275E  
                               i2l6998 3288                                 i2l9478 37EC  
                               i2l8960 27EC                                 i2l8952 27D0  
                               i2l8944 27B2                                 i2l8928 2788  
                               i2l8980 283A                                 i2l8972 2816  
                               i2l8964 27FA                                 i2l8956 27DE  
                               i2l8948 27C0                                 i2l8992 286C  
                               i2l8984 2848                                 i2l8976 282C  
                               i2l8968 2808                                 i2l9960 3622  
                               i2l9970 2998                                 i2l9962 362C  
                               i2l9980 343E                                 i2l9972 29BA  
                               i2l8996 287A                                 i2l8988 2856  
                               i2l9964 3710                                 i2l9956 360E  
                               i2l9974 29D6                                 i2l9966 3720  
                               i2l9958 3618                                 i2l9978 3422  
              _f_most_recent_sort_time 0137                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                     __end_of_delay_ms 51F6                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 528E  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 4086                                 ___wmul 4E76  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                               _getMAG 4EAC                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                                 _getRTC 461E  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 52D2                                 _initUI 4F10  
                               _readIR 4CB0                                 _logRun 3A50  
                               getIR@i 0087                                 clear_0 4C88  
                               clear_1 4C94                                 clear_2 4CA0  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestDC 4B04                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1636  
                            ??_handler 004B                __size_of_initGlobalVars 00AC  
                         ?_retrieveLog 0007                                 _strcpy 4E40  
                   __size_of_SpeedTest 0084                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 521E  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 51F6  
                          ?_BothServos 0001                           ??_EEPROMTest 0080  
                            ??_isdigit 0080                      __end_ofi2___lwdiv 4C62  
                     __end_of_printRTC 2728                           __mediumconst FACC  
                    __end_ofi2___lwmod 4DD0                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 0067                  __end_of_algorithmTest 415C  
                    __end_ofi2_lcdInst 53B2                             _PusherTest 2EF8  
                    __end_ofi2_isdigit 52F0                             __accesstop 0080  
              __end_of__initialization 4CA6                          ?_inputHandler 002A  
                _most_recent_sort_time 006D                          ___rparam_used 000001  
              printSortTimer@start_sec 003B                  __size_of_actuatorTest 08B8  
                        i2_EEPROM_read 533E                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                     __end_of_EEPROMTest 53F0  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E8  
                  __size_ofi2_delay_ms 001C                           __pidataBANK1 53C6  
                  BlockerTest@cam_flag 00AE                          __end_of_getIR 4898  
                          i2printRTC@i 0041                          _initSortTimer 4446  
          __end_of_updateServoPosition 472A                          __end_of_putch 538A  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 2EF8                             __end_of_UI 08DA  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 5178  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 514C  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0127                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 08DA  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
       __size_ofi2_updateServoPosition 0070          __end_ofi2_updateServoPosition 497A  
                         _EEPROM_write 3EBC               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                                UI@F3236 0141  
                    __end_of_SpeedTest 47AE                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 0384                      printRTC@RTC_month 00BC  
                         ?i2_lcdNibble 0001                                UI@i_412 00CA  
                              UI@i_413 00CB                                UI@i_431 00CC  
                              UI@i_440 00D1                                UI@i_432 00CD  
                              UI@i_409 00C9                                UI@i_443 00D2  
                              UI@i_435 00CE                                UI@i_444 00D3  
                              UI@i_436 00CF                                UI@i_447 00D4  
                              UI@i_439 00D0                                UI@i_448 00D5  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getMAG 0001                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestDC 0001  
                              ?_printf 008E                                _UI$2369 00C6  
                              ?_strcpy 0080                        _pan_servo_state 006F  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                            ?_delay_ms 0001                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                          ?_PusherTest 0001                                _SSPSTAT 000FC7  
                              _RTCflag 00EA                                i2_putch 539A  
                            ?_initTime 0080                        _f_loadingNewCan 00F0  
                      i2printRTC@month 003D                  __size_of_Distribution 00E2  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 49E2  
                              _Loading 1192            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 4220                                ___awmod 44F0  
                           _initServos 4B60                                ___lldiv 42DE  
                      __size_of___wmul 0036                        __size_of_getMAG 0032  
                              ___lwdiv 47AE                                ___lwmod 49E2  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                           ?_BlockerTest 0001  
                      __size_of_initUI 0030                        __size_of_readIR 004C  
                              __pcinit 4C62                   i2EEPROM_read@address 0001  
                      __size_of_logRun 0144                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 439A  
                              _lcdInst 538A                                _handler 0008  
                              __ptext0 415C                                __ptext1 530C  
                              __ptext2 528E                                __ptext3 1192  
                              __ptext4 4446                                __ptext5 439A  
                              __ptext6 4EAC                                __ptext7 4826  
                              __ptext8 4CB0                                __ptext9 2C90  
                      __size_of_printf 0438                                _readADC 5178  
                      __size_of_strcpy 0036                                _initLCD 4D48  
                              _cur_can 012B                                _loadRTC 4592  
                              _readMAG 4CFC                                _dpowers FADE  
                   actuatorTest@i_1700 00B2                     actuatorTest@i_1701 00B3  
                   actuatorTest@i_1710 00B9                     actuatorTest@i_1703 00B4  
                   actuatorTest@i_1720 00BF                     actuatorTest@i_1704 00B5  
                   actuatorTest@i_1713 00BA                     actuatorTest@i_1714 00BB  
                   actuatorTest@i_1706 00B6                     actuatorTest@i_1723 00C0  
                   actuatorTest@i_1707 00B7                     actuatorTest@i_1724 00C1  
                   actuatorTest@i_1716 00BC                     actuatorTest@i_1717 00BD  
                   actuatorTest@i_1709 00B8                     actuatorTest@i_1726 00C2  
                   actuatorTest@i_1727 00C3                     actuatorTest@i_1719 00BE  
                         __size_of_arm 0106                     actuatorTest@i_1694 00AE  
                   actuatorTest@i_1695 00AF                     actuatorTest@i_1687 00AD  
                   actuatorTest@i_1697 00B0                     actuatorTest@i_1698 00B1  
                              _isdigit 51A4                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 011C  
                         ??i2_delay_ms 0001                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 3FA4                         __pintcode_body 372A  
                 end_of_initialization 4CA6                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 372A                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestDC 005C  
                            i2u1040_47 4BFE                              i2u1041_47 4C08  
                            i2u1042_47 52FC                              i2u1036_47 33BA  
                            i2u1037_47 2B5E                              i2u1038_47 4BD2  
                            i2u1039_47 4BDC              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                   __end_ofi2_delay_ms 530C                 __end_of_initGlobalVars 4446  
                           _sensorTest 2160                    __size_of_PusherTest 0248  
                           _servoTimes 00DA                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 3562  
                         ??_BothServos 00AB                  __end_of_machineConfig 4AA4  
                           _updateMenu 2728                      i2_I2C_Master_Read 5244  
                            _IR_signal 00E6                      i2_I2C_Master_Wait 5368  
                    i2_I2C_Master_Stop 53DE                      i2___lwdiv@divisor 0008  
                      _log_count_total 006B                              i2___lwdiv 4C10  
                            i2___lwmod 4D8E                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 3376                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 53A6                          Loading@i_1160 00BA  
                        Loading@i_1161 00BC                          Loading@i_1163 00BE  
                        Loading@i_1149 00B6                          Loading@i_1158 00B8  
                           _total_time 00FA                            printf@width 00A9  
                 __size_of_stopSignals 001A                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 52D2                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 1DF2                            PusherTest@i 00B1  
                  __end_of_EEPROM_read 533E                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 4EAC  
                       __end_of_getMAG 4EDE                         __end_of_getRTC 46A4  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 4F40  
                       __end_of_readIR 4CFC                         __end_of_logRun 3B94  
                     i2___wmul@product 0005                         __end_of_printf 1A6E  
                         i2printf@flag 0026                         __end_of_strcpy 4E76  
            __end_ofi2_I2C_Master_Read 526A              __end_ofi2_I2C_Master_Wait 537A  
                         i2printf@prec 001D                    start_initialization 4C62  
            __end_ofi2_I2C_Master_Stop 53E6                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 0125  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                          __end_of_arm 3EBC                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1400 00B0  
                i2I2C_Master_Read@temp 0003                   BlockerTest@cond_flag 00B0  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                            _SpeedTest 472A                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                            ?_sensorTest 0001  
                          __pdataBANK1 0141                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                               ID@i_1174 0086  
                             ID@i_1175 0088                           ??_PortTestDC 00AB  
               printSortTimer@timeDiff 0045       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2501 0043  
                 __size_of_BlockerTest 0184                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0086                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 02A8  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$2011 0081                           ??_PusherTest 00AB  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 003F                      printSortTimer@sec 0041  
                  __size_of_initServos 005A                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                       _tilt_servo_state 0075  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                   PusherTest@res_1738 00AF                        _count_pop_w_tab 0129  
                          _EEPROM_read 5326                       _I2C_Master_Start 53D6  
                   __end_of_PortTestDC 4B60                              _f_lastCan 00EE  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 53B2                      __size_of_initTime 0022  
                i2_updateServoPosition 490A                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                           ?_SpeedTest 0001                          __pmediumconst FACC  
                            _lcdNibble 497A                  __size_of_inputHandler 01EC  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                         _sensor_outputs 00E2  
                             ?___lwdiv 0080                               ?___lwmod 0087  
                    __size_of_printRTC 02CA                     __end_of_PusherTest 3140  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 013B                              _cur_state 00EC  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0072  
                        _algorithmTest 4086                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 0268                            __size_of_UI 08C8  
                  __size_of_sensorTest 02FE             __end_ofi2_I2C_Master_Start 53EE  
           __end_ofi2_I2C_Master_Write 53C6                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATBbits 000F8A                               _LATCbits 000F8B  
                             _LATDbits 000F8C                           _inputHandler 3376  
                          ??i2_isdigit 0001                           BlockerTest@i 00AC  
                             i2u512_40 1F78                               i2u512_47 1F6E  
                             _PIR2bits 000FA1                               i2u508_40 1F18  
                             i2u508_47 1F0E                               i2u453_40 5262  
                             i2u553_40 31CE                               i2u852_40 2B8E  
                             i2u854_40 2BB6                               i2u853_48 2B90  
                  __size_of_updateMenu 02C0                         _log_completion 00F4  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 521E                          lcdNibble@data 0081  
                             i2_getRTC 4898                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             Loading@i 00C2                               Loading@j 00C0  
                             i2_printf 1DF2                               i2_strcpy 4EDE  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 4C76                              readIR@res 0084  
               ?i2_updateServoPosition 0001                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 5354  
                          _count_total 00FE                 i2delay_ms@milliseconds 0002  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 04A4                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                          ??_SpeedTest 00AB                  __end_of_initSortTimer 44F0  
                         ??_initServos 0088                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 4FD0  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 4E08  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 4DD0  
              _change_state_to_menu_23 4FA0                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 50C0                _change_state_to_logs_12 5090  
              _change_state_to_logs_22 5060                _change_state_to_logs_23 511E  
              _change_state_to_logs_33 5030                _change_state_to_logs_34 5000  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 38C4                             _EEPROMTest 53EE  
                      _I2C_Master_Init 4AA4                       __size_of_readADC 002C  
                      _I2C_Master_Read 50F0                       __size_of_initLCD 0046  
                         _f_ID_receive 012F                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 5354  
                      _I2C_Master_Stop 53CE                       __size_of_isdigit 002A  
                             _delay_ms 51CE                         _printSortTimer 29E8  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 3CB0                               __ptext10 51CE  
                             __ptext11 3FA4                               __ptext20 514C  
                             __ptext12 4A44                               __ptext21 52B0  
                             __ptext13 3A50                               __ptext30 50F0  
                             __ptext22 4D48                               __ptext14 3EBC  
                             __ptext31 5354                               __ptext23 0012  
                             __ptext15 5326                               __ptext40 4086  
                             __ptext32 4DD0                               __ptext24 245E  
                             __ptext16 4F10                               __ptext41 08DA  
                             __ptext33 4E08                               __ptext25 4E40  
                             __ptext17 4592                               __ptext50 38CC  
                             __ptext42 472A                               __ptext34 44F0  
                             __ptext26 461E                               __ptext18 4AA4  
                             __ptext51 1636                               __ptext43 2EF8  
                             __ptext35 4220                               __ptext27 53B2  
                             __ptext19 42DE                               __ptext60 3562  
                             __ptext52 537A                               __ptext44 5178  
                             __ptext36 3CB0                               __ptext28 53CE  
                             __ptext61 490A                               __ptext53 51A4  
                             __ptext45 4B04                               __ptext37 2160  
                             __ptext29 53D6                               __ptext70 4FD0  
                             __ptext62 2728                               __ptext54 4E76  
                             __ptext46 53EE                               __ptext38 4CFC  
                             __ptext71 5000                               __ptext63 51F6  
                             __ptext55 49E2                               __ptext47 1A6E  
                             __ptext39 3DB6                               __ptext80 29E8  
                             __ptext72 5030                               __ptext64 3140  
                             __ptext56 47AE                               __ptext48 4B60  
                             __ptext81 1DF2                               __ptext73 511E  
                             __ptext65 4EDE                               __ptext57 538A  
                             __ptext49 46A4                               __ptext90 53BC  
                             __ptext82 539A                               __ptext74 5060  
                             __ptext66 3376                               __ptext58 497A  
                             __ptext91 53DE                               __ptext83 52D2  
                             __ptext75 5090                               __ptext67 4F40  
                             __ptext92 53E6                               __ptext84 521E  
                             __ptext76 50C0                               __ptext68 4F70  
                             __ptext93 5244                               __ptext85 4D8E  
                             __ptext77 526A                               __ptext69 4FA0  
                             __ptext94 5368                               __ptext86 4C10  
                             __ptext78 3B94                               __ptext95 52F0  
                             __ptext87 53A6                               __ptext79 533E  
                             __ptext88 4BBA                               __ptext89 4898  
                             _dispLogs 526A                          ?_actuatorTest 0001  
                        ??_stopSignals 0080                         i2_isdigit$2011 0002  
                           strcpy@from 0082                     __end_of_initServos 4BBA  
                        __size_of_Test 0106                          ?_EEPROM_write 00AB  
                             _initTime 52B0                          __size_of_main 00C4  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F8                    _updateServoPosition 46A4  
               __size_of_machineConfig 0060                          ??i2_lcdNibble 0001  
                             _printRTC 245E                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F6  
                   _f_can_coming_to_ID 0131                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 4FA0  
    __end_ofi2_change_state_to_menu_22 4F70                               loadRTC@i 0096  
               __end_of_printSortTimer 2C90                              putch@data 0082  
             __end_of_I2C_Master_Start 53DE                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 53BC                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00E8  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                    _servo_timer_counter 0071  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                   __end_of_sensorTest 245E                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 5326              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 29E8  
              __end_of_I2C_Master_Init 4B04                __end_of_I2C_Master_Read 511E  
              __end_of_I2C_Master_Wait 5368                          ??_BlockerTest 00AB  
              __end_of_I2C_Master_Stop 53D6                            lcdInst@data 0082  
                        printRTC@F3226 0145                           retrieveLog@i 000E  
                          _retrieveLog 3B94                    __end_ofi2_lcdNibble 4C10  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                   _servo_timer_target 0073                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                            ?_EEPROMTest 0001  
                      ___lwmod@divisor 0089                      _f_can_distributed 0135  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 4A44                        ___lwmod@counter 008B  
                    _updateServoStates 3562                          printRTC@month 00BE  
                        ?_Distribution 0001                     ?_updateServoStates 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                  ??_updateServoStates 0009                     i2printRTC@INT_time 002D  
